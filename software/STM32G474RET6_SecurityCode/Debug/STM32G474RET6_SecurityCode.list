
STM32G474RET6_SecurityCode.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d3cc  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  0800d5a4  0800d5a4  0001d5a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d62c  0800d62c  00020184  2**0
                  CONTENTS
  4 .ARM          00000008  0800d62c  0800d62c  0001d62c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d634  0800d634  00020184  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d634  0800d634  0001d634  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d638  0800d638  0001d638  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000184  20000000  0800d63c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001fa0  20000184  0800d7c0  00020184  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002124  0800d7c0  00022124  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020184  2**0
                  CONTENTS, READONLY
 12 .debug_info   00029ac9  00000000  00000000  000201b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000055ac  00000000  00000000  00049c7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002060  00000000  00000000  0004f230  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001e18  00000000  00000000  00051290  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002e240  00000000  00000000  000530a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002a16f  00000000  00000000  000812e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011db18  00000000  00000000  000ab457  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001c8f6f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000088e0  00000000  00000000  001c8fc0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000184 	.word	0x20000184
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800d58c 	.word	0x0800d58c

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000188 	.word	0x20000188
 8000214:	0800d58c 	.word	0x0800d58c

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000228:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800022c:	f000 b974 	b.w	8000518 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	4604      	mov	r4, r0
 8000250:	468e      	mov	lr, r1
 8000252:	2b00      	cmp	r3, #0
 8000254:	d14d      	bne.n	80002f2 <__udivmoddi4+0xaa>
 8000256:	428a      	cmp	r2, r1
 8000258:	4694      	mov	ip, r2
 800025a:	d969      	bls.n	8000330 <__udivmoddi4+0xe8>
 800025c:	fab2 f282 	clz	r2, r2
 8000260:	b152      	cbz	r2, 8000278 <__udivmoddi4+0x30>
 8000262:	fa01 f302 	lsl.w	r3, r1, r2
 8000266:	f1c2 0120 	rsb	r1, r2, #32
 800026a:	fa20 f101 	lsr.w	r1, r0, r1
 800026e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000272:	ea41 0e03 	orr.w	lr, r1, r3
 8000276:	4094      	lsls	r4, r2
 8000278:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800027c:	0c21      	lsrs	r1, r4, #16
 800027e:	fbbe f6f8 	udiv	r6, lr, r8
 8000282:	fa1f f78c 	uxth.w	r7, ip
 8000286:	fb08 e316 	mls	r3, r8, r6, lr
 800028a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800028e:	fb06 f107 	mul.w	r1, r6, r7
 8000292:	4299      	cmp	r1, r3
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x64>
 8000296:	eb1c 0303 	adds.w	r3, ip, r3
 800029a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800029e:	f080 811f 	bcs.w	80004e0 <__udivmoddi4+0x298>
 80002a2:	4299      	cmp	r1, r3
 80002a4:	f240 811c 	bls.w	80004e0 <__udivmoddi4+0x298>
 80002a8:	3e02      	subs	r6, #2
 80002aa:	4463      	add	r3, ip
 80002ac:	1a5b      	subs	r3, r3, r1
 80002ae:	b2a4      	uxth	r4, r4
 80002b0:	fbb3 f0f8 	udiv	r0, r3, r8
 80002b4:	fb08 3310 	mls	r3, r8, r0, r3
 80002b8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002bc:	fb00 f707 	mul.w	r7, r0, r7
 80002c0:	42a7      	cmp	r7, r4
 80002c2:	d90a      	bls.n	80002da <__udivmoddi4+0x92>
 80002c4:	eb1c 0404 	adds.w	r4, ip, r4
 80002c8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002cc:	f080 810a 	bcs.w	80004e4 <__udivmoddi4+0x29c>
 80002d0:	42a7      	cmp	r7, r4
 80002d2:	f240 8107 	bls.w	80004e4 <__udivmoddi4+0x29c>
 80002d6:	4464      	add	r4, ip
 80002d8:	3802      	subs	r0, #2
 80002da:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002de:	1be4      	subs	r4, r4, r7
 80002e0:	2600      	movs	r6, #0
 80002e2:	b11d      	cbz	r5, 80002ec <__udivmoddi4+0xa4>
 80002e4:	40d4      	lsrs	r4, r2
 80002e6:	2300      	movs	r3, #0
 80002e8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ec:	4631      	mov	r1, r6
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d909      	bls.n	800030a <__udivmoddi4+0xc2>
 80002f6:	2d00      	cmp	r5, #0
 80002f8:	f000 80ef 	beq.w	80004da <__udivmoddi4+0x292>
 80002fc:	2600      	movs	r6, #0
 80002fe:	e9c5 0100 	strd	r0, r1, [r5]
 8000302:	4630      	mov	r0, r6
 8000304:	4631      	mov	r1, r6
 8000306:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030a:	fab3 f683 	clz	r6, r3
 800030e:	2e00      	cmp	r6, #0
 8000310:	d14a      	bne.n	80003a8 <__udivmoddi4+0x160>
 8000312:	428b      	cmp	r3, r1
 8000314:	d302      	bcc.n	800031c <__udivmoddi4+0xd4>
 8000316:	4282      	cmp	r2, r0
 8000318:	f200 80f9 	bhi.w	800050e <__udivmoddi4+0x2c6>
 800031c:	1a84      	subs	r4, r0, r2
 800031e:	eb61 0303 	sbc.w	r3, r1, r3
 8000322:	2001      	movs	r0, #1
 8000324:	469e      	mov	lr, r3
 8000326:	2d00      	cmp	r5, #0
 8000328:	d0e0      	beq.n	80002ec <__udivmoddi4+0xa4>
 800032a:	e9c5 4e00 	strd	r4, lr, [r5]
 800032e:	e7dd      	b.n	80002ec <__udivmoddi4+0xa4>
 8000330:	b902      	cbnz	r2, 8000334 <__udivmoddi4+0xec>
 8000332:	deff      	udf	#255	; 0xff
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	2a00      	cmp	r2, #0
 800033a:	f040 8092 	bne.w	8000462 <__udivmoddi4+0x21a>
 800033e:	eba1 010c 	sub.w	r1, r1, ip
 8000342:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000346:	fa1f fe8c 	uxth.w	lr, ip
 800034a:	2601      	movs	r6, #1
 800034c:	0c20      	lsrs	r0, r4, #16
 800034e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000352:	fb07 1113 	mls	r1, r7, r3, r1
 8000356:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800035a:	fb0e f003 	mul.w	r0, lr, r3
 800035e:	4288      	cmp	r0, r1
 8000360:	d908      	bls.n	8000374 <__udivmoddi4+0x12c>
 8000362:	eb1c 0101 	adds.w	r1, ip, r1
 8000366:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x12a>
 800036c:	4288      	cmp	r0, r1
 800036e:	f200 80cb 	bhi.w	8000508 <__udivmoddi4+0x2c0>
 8000372:	4643      	mov	r3, r8
 8000374:	1a09      	subs	r1, r1, r0
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb1 f0f7 	udiv	r0, r1, r7
 800037c:	fb07 1110 	mls	r1, r7, r0, r1
 8000380:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000384:	fb0e fe00 	mul.w	lr, lr, r0
 8000388:	45a6      	cmp	lr, r4
 800038a:	d908      	bls.n	800039e <__udivmoddi4+0x156>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000394:	d202      	bcs.n	800039c <__udivmoddi4+0x154>
 8000396:	45a6      	cmp	lr, r4
 8000398:	f200 80bb 	bhi.w	8000512 <__udivmoddi4+0x2ca>
 800039c:	4608      	mov	r0, r1
 800039e:	eba4 040e 	sub.w	r4, r4, lr
 80003a2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003a6:	e79c      	b.n	80002e2 <__udivmoddi4+0x9a>
 80003a8:	f1c6 0720 	rsb	r7, r6, #32
 80003ac:	40b3      	lsls	r3, r6
 80003ae:	fa22 fc07 	lsr.w	ip, r2, r7
 80003b2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003b6:	fa20 f407 	lsr.w	r4, r0, r7
 80003ba:	fa01 f306 	lsl.w	r3, r1, r6
 80003be:	431c      	orrs	r4, r3
 80003c0:	40f9      	lsrs	r1, r7
 80003c2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003c6:	fa00 f306 	lsl.w	r3, r0, r6
 80003ca:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ce:	0c20      	lsrs	r0, r4, #16
 80003d0:	fa1f fe8c 	uxth.w	lr, ip
 80003d4:	fb09 1118 	mls	r1, r9, r8, r1
 80003d8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003dc:	fb08 f00e 	mul.w	r0, r8, lr
 80003e0:	4288      	cmp	r0, r1
 80003e2:	fa02 f206 	lsl.w	r2, r2, r6
 80003e6:	d90b      	bls.n	8000400 <__udivmoddi4+0x1b8>
 80003e8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ec:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003f0:	f080 8088 	bcs.w	8000504 <__udivmoddi4+0x2bc>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f240 8085 	bls.w	8000504 <__udivmoddi4+0x2bc>
 80003fa:	f1a8 0802 	sub.w	r8, r8, #2
 80003fe:	4461      	add	r1, ip
 8000400:	1a09      	subs	r1, r1, r0
 8000402:	b2a4      	uxth	r4, r4
 8000404:	fbb1 f0f9 	udiv	r0, r1, r9
 8000408:	fb09 1110 	mls	r1, r9, r0, r1
 800040c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000410:	fb00 fe0e 	mul.w	lr, r0, lr
 8000414:	458e      	cmp	lr, r1
 8000416:	d908      	bls.n	800042a <__udivmoddi4+0x1e2>
 8000418:	eb1c 0101 	adds.w	r1, ip, r1
 800041c:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000420:	d26c      	bcs.n	80004fc <__udivmoddi4+0x2b4>
 8000422:	458e      	cmp	lr, r1
 8000424:	d96a      	bls.n	80004fc <__udivmoddi4+0x2b4>
 8000426:	3802      	subs	r0, #2
 8000428:	4461      	add	r1, ip
 800042a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800042e:	fba0 9402 	umull	r9, r4, r0, r2
 8000432:	eba1 010e 	sub.w	r1, r1, lr
 8000436:	42a1      	cmp	r1, r4
 8000438:	46c8      	mov	r8, r9
 800043a:	46a6      	mov	lr, r4
 800043c:	d356      	bcc.n	80004ec <__udivmoddi4+0x2a4>
 800043e:	d053      	beq.n	80004e8 <__udivmoddi4+0x2a0>
 8000440:	b15d      	cbz	r5, 800045a <__udivmoddi4+0x212>
 8000442:	ebb3 0208 	subs.w	r2, r3, r8
 8000446:	eb61 010e 	sbc.w	r1, r1, lr
 800044a:	fa01 f707 	lsl.w	r7, r1, r7
 800044e:	fa22 f306 	lsr.w	r3, r2, r6
 8000452:	40f1      	lsrs	r1, r6
 8000454:	431f      	orrs	r7, r3
 8000456:	e9c5 7100 	strd	r7, r1, [r5]
 800045a:	2600      	movs	r6, #0
 800045c:	4631      	mov	r1, r6
 800045e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000462:	f1c2 0320 	rsb	r3, r2, #32
 8000466:	40d8      	lsrs	r0, r3
 8000468:	fa0c fc02 	lsl.w	ip, ip, r2
 800046c:	fa21 f303 	lsr.w	r3, r1, r3
 8000470:	4091      	lsls	r1, r2
 8000472:	4301      	orrs	r1, r0
 8000474:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000480:	fb07 3610 	mls	r6, r7, r0, r3
 8000484:	0c0b      	lsrs	r3, r1, #16
 8000486:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800048a:	fb00 f60e 	mul.w	r6, r0, lr
 800048e:	429e      	cmp	r6, r3
 8000490:	fa04 f402 	lsl.w	r4, r4, r2
 8000494:	d908      	bls.n	80004a8 <__udivmoddi4+0x260>
 8000496:	eb1c 0303 	adds.w	r3, ip, r3
 800049a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800049e:	d22f      	bcs.n	8000500 <__udivmoddi4+0x2b8>
 80004a0:	429e      	cmp	r6, r3
 80004a2:	d92d      	bls.n	8000500 <__udivmoddi4+0x2b8>
 80004a4:	3802      	subs	r0, #2
 80004a6:	4463      	add	r3, ip
 80004a8:	1b9b      	subs	r3, r3, r6
 80004aa:	b289      	uxth	r1, r1
 80004ac:	fbb3 f6f7 	udiv	r6, r3, r7
 80004b0:	fb07 3316 	mls	r3, r7, r6, r3
 80004b4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b8:	fb06 f30e 	mul.w	r3, r6, lr
 80004bc:	428b      	cmp	r3, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x28a>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80004c8:	d216      	bcs.n	80004f8 <__udivmoddi4+0x2b0>
 80004ca:	428b      	cmp	r3, r1
 80004cc:	d914      	bls.n	80004f8 <__udivmoddi4+0x2b0>
 80004ce:	3e02      	subs	r6, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	1ac9      	subs	r1, r1, r3
 80004d4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004d8:	e738      	b.n	800034c <__udivmoddi4+0x104>
 80004da:	462e      	mov	r6, r5
 80004dc:	4628      	mov	r0, r5
 80004de:	e705      	b.n	80002ec <__udivmoddi4+0xa4>
 80004e0:	4606      	mov	r6, r0
 80004e2:	e6e3      	b.n	80002ac <__udivmoddi4+0x64>
 80004e4:	4618      	mov	r0, r3
 80004e6:	e6f8      	b.n	80002da <__udivmoddi4+0x92>
 80004e8:	454b      	cmp	r3, r9
 80004ea:	d2a9      	bcs.n	8000440 <__udivmoddi4+0x1f8>
 80004ec:	ebb9 0802 	subs.w	r8, r9, r2
 80004f0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004f4:	3801      	subs	r0, #1
 80004f6:	e7a3      	b.n	8000440 <__udivmoddi4+0x1f8>
 80004f8:	4646      	mov	r6, r8
 80004fa:	e7ea      	b.n	80004d2 <__udivmoddi4+0x28a>
 80004fc:	4620      	mov	r0, r4
 80004fe:	e794      	b.n	800042a <__udivmoddi4+0x1e2>
 8000500:	4640      	mov	r0, r8
 8000502:	e7d1      	b.n	80004a8 <__udivmoddi4+0x260>
 8000504:	46d0      	mov	r8, sl
 8000506:	e77b      	b.n	8000400 <__udivmoddi4+0x1b8>
 8000508:	3b02      	subs	r3, #2
 800050a:	4461      	add	r1, ip
 800050c:	e732      	b.n	8000374 <__udivmoddi4+0x12c>
 800050e:	4630      	mov	r0, r6
 8000510:	e709      	b.n	8000326 <__udivmoddi4+0xde>
 8000512:	4464      	add	r4, ip
 8000514:	3802      	subs	r0, #2
 8000516:	e742      	b.n	800039e <__udivmoddi4+0x156>

08000518 <__aeabi_idiv0>:
 8000518:	4770      	bx	lr
 800051a:	bf00      	nop

0800051c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc3;
ADC_HandleTypeDef hadc4;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b08c      	sub	sp, #48	; 0x30
 8000520:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000522:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000526:	2200      	movs	r2, #0
 8000528:	601a      	str	r2, [r3, #0]
 800052a:	605a      	str	r2, [r3, #4]
 800052c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800052e:	1d3b      	adds	r3, r7, #4
 8000530:	2220      	movs	r2, #32
 8000532:	2100      	movs	r1, #0
 8000534:	4618      	mov	r0, r3
 8000536:	f00d f821 	bl	800d57c <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800053a:	4b32      	ldr	r3, [pc, #200]	; (8000604 <MX_ADC1_Init+0xe8>)
 800053c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000540:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000542:	4b30      	ldr	r3, [pc, #192]	; (8000604 <MX_ADC1_Init+0xe8>)
 8000544:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000548:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800054a:	4b2e      	ldr	r3, [pc, #184]	; (8000604 <MX_ADC1_Init+0xe8>)
 800054c:	2200      	movs	r2, #0
 800054e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000550:	4b2c      	ldr	r3, [pc, #176]	; (8000604 <MX_ADC1_Init+0xe8>)
 8000552:	2200      	movs	r2, #0
 8000554:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000556:	4b2b      	ldr	r3, [pc, #172]	; (8000604 <MX_ADC1_Init+0xe8>)
 8000558:	2200      	movs	r2, #0
 800055a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800055c:	4b29      	ldr	r3, [pc, #164]	; (8000604 <MX_ADC1_Init+0xe8>)
 800055e:	2200      	movs	r2, #0
 8000560:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000562:	4b28      	ldr	r3, [pc, #160]	; (8000604 <MX_ADC1_Init+0xe8>)
 8000564:	2204      	movs	r2, #4
 8000566:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000568:	4b26      	ldr	r3, [pc, #152]	; (8000604 <MX_ADC1_Init+0xe8>)
 800056a:	2200      	movs	r2, #0
 800056c:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800056e:	4b25      	ldr	r3, [pc, #148]	; (8000604 <MX_ADC1_Init+0xe8>)
 8000570:	2200      	movs	r2, #0
 8000572:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000574:	4b23      	ldr	r3, [pc, #140]	; (8000604 <MX_ADC1_Init+0xe8>)
 8000576:	2201      	movs	r2, #1
 8000578:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800057a:	4b22      	ldr	r3, [pc, #136]	; (8000604 <MX_ADC1_Init+0xe8>)
 800057c:	2200      	movs	r2, #0
 800057e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000582:	4b20      	ldr	r3, [pc, #128]	; (8000604 <MX_ADC1_Init+0xe8>)
 8000584:	2200      	movs	r2, #0
 8000586:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000588:	4b1e      	ldr	r3, [pc, #120]	; (8000604 <MX_ADC1_Init+0xe8>)
 800058a:	2200      	movs	r2, #0
 800058c:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800058e:	4b1d      	ldr	r3, [pc, #116]	; (8000604 <MX_ADC1_Init+0xe8>)
 8000590:	2200      	movs	r2, #0
 8000592:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000596:	4b1b      	ldr	r3, [pc, #108]	; (8000604 <MX_ADC1_Init+0xe8>)
 8000598:	2200      	movs	r2, #0
 800059a:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 800059c:	4b19      	ldr	r3, [pc, #100]	; (8000604 <MX_ADC1_Init+0xe8>)
 800059e:	2200      	movs	r2, #0
 80005a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80005a4:	4817      	ldr	r0, [pc, #92]	; (8000604 <MX_ADC1_Init+0xe8>)
 80005a6:	f001 fe37 	bl	8002218 <HAL_ADC_Init>
 80005aa:	4603      	mov	r3, r0
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d001      	beq.n	80005b4 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 80005b0:	f000 fd80 	bl	80010b4 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80005b4:	2300      	movs	r3, #0
 80005b6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80005b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80005bc:	4619      	mov	r1, r3
 80005be:	4811      	ldr	r0, [pc, #68]	; (8000604 <MX_ADC1_Init+0xe8>)
 80005c0:	f002 fc52 	bl	8002e68 <HAL_ADCEx_MultiModeConfigChannel>
 80005c4:	4603      	mov	r3, r0
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d001      	beq.n	80005ce <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80005ca:	f000 fd73 	bl	80010b4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80005ce:	4b0e      	ldr	r3, [pc, #56]	; (8000608 <MX_ADC1_Init+0xec>)
 80005d0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80005d2:	2306      	movs	r3, #6
 80005d4:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80005d6:	2300      	movs	r3, #0
 80005d8:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80005da:	237f      	movs	r3, #127	; 0x7f
 80005dc:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80005de:	2304      	movs	r3, #4
 80005e0:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80005e2:	2300      	movs	r3, #0
 80005e4:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005e6:	1d3b      	adds	r3, r7, #4
 80005e8:	4619      	mov	r1, r3
 80005ea:	4806      	ldr	r0, [pc, #24]	; (8000604 <MX_ADC1_Init+0xe8>)
 80005ec:	f001 ffd6 	bl	800259c <HAL_ADC_ConfigChannel>
 80005f0:	4603      	mov	r3, r0
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d001      	beq.n	80005fa <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80005f6:	f000 fd5d 	bl	80010b4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80005fa:	bf00      	nop
 80005fc:	3730      	adds	r7, #48	; 0x30
 80005fe:	46bd      	mov	sp, r7
 8000600:	bd80      	pop	{r7, pc}
 8000602:	bf00      	nop
 8000604:	200001a0 	.word	0x200001a0
 8000608:	04300002 	.word	0x04300002

0800060c <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b088      	sub	sp, #32
 8000610:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000612:	463b      	mov	r3, r7
 8000614:	2220      	movs	r2, #32
 8000616:	2100      	movs	r1, #0
 8000618:	4618      	mov	r0, r3
 800061a:	f00c ffaf 	bl	800d57c <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 800061e:	4b2b      	ldr	r3, [pc, #172]	; (80006cc <MX_ADC2_Init+0xc0>)
 8000620:	4a2b      	ldr	r2, [pc, #172]	; (80006d0 <MX_ADC2_Init+0xc4>)
 8000622:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000624:	4b29      	ldr	r3, [pc, #164]	; (80006cc <MX_ADC2_Init+0xc0>)
 8000626:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800062a:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800062c:	4b27      	ldr	r3, [pc, #156]	; (80006cc <MX_ADC2_Init+0xc0>)
 800062e:	2200      	movs	r2, #0
 8000630:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000632:	4b26      	ldr	r3, [pc, #152]	; (80006cc <MX_ADC2_Init+0xc0>)
 8000634:	2200      	movs	r2, #0
 8000636:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8000638:	4b24      	ldr	r3, [pc, #144]	; (80006cc <MX_ADC2_Init+0xc0>)
 800063a:	2200      	movs	r2, #0
 800063c:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800063e:	4b23      	ldr	r3, [pc, #140]	; (80006cc <MX_ADC2_Init+0xc0>)
 8000640:	2200      	movs	r2, #0
 8000642:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000644:	4b21      	ldr	r3, [pc, #132]	; (80006cc <MX_ADC2_Init+0xc0>)
 8000646:	2204      	movs	r2, #4
 8000648:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800064a:	4b20      	ldr	r3, [pc, #128]	; (80006cc <MX_ADC2_Init+0xc0>)
 800064c:	2200      	movs	r2, #0
 800064e:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000650:	4b1e      	ldr	r3, [pc, #120]	; (80006cc <MX_ADC2_Init+0xc0>)
 8000652:	2200      	movs	r2, #0
 8000654:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 8000656:	4b1d      	ldr	r3, [pc, #116]	; (80006cc <MX_ADC2_Init+0xc0>)
 8000658:	2201      	movs	r2, #1
 800065a:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800065c:	4b1b      	ldr	r3, [pc, #108]	; (80006cc <MX_ADC2_Init+0xc0>)
 800065e:	2200      	movs	r2, #0
 8000660:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000664:	4b19      	ldr	r3, [pc, #100]	; (80006cc <MX_ADC2_Init+0xc0>)
 8000666:	2200      	movs	r2, #0
 8000668:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800066a:	4b18      	ldr	r3, [pc, #96]	; (80006cc <MX_ADC2_Init+0xc0>)
 800066c:	2200      	movs	r2, #0
 800066e:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000670:	4b16      	ldr	r3, [pc, #88]	; (80006cc <MX_ADC2_Init+0xc0>)
 8000672:	2200      	movs	r2, #0
 8000674:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000678:	4b14      	ldr	r3, [pc, #80]	; (80006cc <MX_ADC2_Init+0xc0>)
 800067a:	2200      	movs	r2, #0
 800067c:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 800067e:	4b13      	ldr	r3, [pc, #76]	; (80006cc <MX_ADC2_Init+0xc0>)
 8000680:	2200      	movs	r2, #0
 8000682:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000686:	4811      	ldr	r0, [pc, #68]	; (80006cc <MX_ADC2_Init+0xc0>)
 8000688:	f001 fdc6 	bl	8002218 <HAL_ADC_Init>
 800068c:	4603      	mov	r3, r0
 800068e:	2b00      	cmp	r3, #0
 8000690:	d001      	beq.n	8000696 <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 8000692:	f000 fd0f 	bl	80010b4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000696:	4b0f      	ldr	r3, [pc, #60]	; (80006d4 <MX_ADC2_Init+0xc8>)
 8000698:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800069a:	2306      	movs	r3, #6
 800069c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800069e:	2300      	movs	r3, #0
 80006a0:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80006a2:	237f      	movs	r3, #127	; 0x7f
 80006a4:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80006a6:	2304      	movs	r3, #4
 80006a8:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80006aa:	2300      	movs	r3, #0
 80006ac:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80006ae:	463b      	mov	r3, r7
 80006b0:	4619      	mov	r1, r3
 80006b2:	4806      	ldr	r0, [pc, #24]	; (80006cc <MX_ADC2_Init+0xc0>)
 80006b4:	f001 ff72 	bl	800259c <HAL_ADC_ConfigChannel>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d001      	beq.n	80006c2 <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 80006be:	f000 fcf9 	bl	80010b4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80006c2:	bf00      	nop
 80006c4:	3720      	adds	r7, #32
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	bf00      	nop
 80006cc:	2000020c 	.word	0x2000020c
 80006d0:	50000100 	.word	0x50000100
 80006d4:	25b00200 	.word	0x25b00200

080006d8 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b08c      	sub	sp, #48	; 0x30
 80006dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80006de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006e2:	2200      	movs	r2, #0
 80006e4:	601a      	str	r2, [r3, #0]
 80006e6:	605a      	str	r2, [r3, #4]
 80006e8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80006ea:	1d3b      	adds	r3, r7, #4
 80006ec:	2220      	movs	r2, #32
 80006ee:	2100      	movs	r1, #0
 80006f0:	4618      	mov	r0, r3
 80006f2:	f00c ff43 	bl	800d57c <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 80006f6:	4b31      	ldr	r3, [pc, #196]	; (80007bc <MX_ADC3_Init+0xe4>)
 80006f8:	4a31      	ldr	r2, [pc, #196]	; (80007c0 <MX_ADC3_Init+0xe8>)
 80006fa:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80006fc:	4b2f      	ldr	r3, [pc, #188]	; (80007bc <MX_ADC3_Init+0xe4>)
 80006fe:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000702:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000704:	4b2d      	ldr	r3, [pc, #180]	; (80007bc <MX_ADC3_Init+0xe4>)
 8000706:	2200      	movs	r2, #0
 8000708:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800070a:	4b2c      	ldr	r3, [pc, #176]	; (80007bc <MX_ADC3_Init+0xe4>)
 800070c:	2200      	movs	r2, #0
 800070e:	60da      	str	r2, [r3, #12]
  hadc3.Init.GainCompensation = 0;
 8000710:	4b2a      	ldr	r3, [pc, #168]	; (80007bc <MX_ADC3_Init+0xe4>)
 8000712:	2200      	movs	r2, #0
 8000714:	611a      	str	r2, [r3, #16]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000716:	4b29      	ldr	r3, [pc, #164]	; (80007bc <MX_ADC3_Init+0xe4>)
 8000718:	2200      	movs	r2, #0
 800071a:	615a      	str	r2, [r3, #20]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800071c:	4b27      	ldr	r3, [pc, #156]	; (80007bc <MX_ADC3_Init+0xe4>)
 800071e:	2204      	movs	r2, #4
 8000720:	619a      	str	r2, [r3, #24]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000722:	4b26      	ldr	r3, [pc, #152]	; (80007bc <MX_ADC3_Init+0xe4>)
 8000724:	2200      	movs	r2, #0
 8000726:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000728:	4b24      	ldr	r3, [pc, #144]	; (80007bc <MX_ADC3_Init+0xe4>)
 800072a:	2200      	movs	r2, #0
 800072c:	775a      	strb	r2, [r3, #29]
  hadc3.Init.NbrOfConversion = 1;
 800072e:	4b23      	ldr	r3, [pc, #140]	; (80007bc <MX_ADC3_Init+0xe4>)
 8000730:	2201      	movs	r2, #1
 8000732:	621a      	str	r2, [r3, #32]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000734:	4b21      	ldr	r3, [pc, #132]	; (80007bc <MX_ADC3_Init+0xe4>)
 8000736:	2200      	movs	r2, #0
 8000738:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800073c:	4b1f      	ldr	r3, [pc, #124]	; (80007bc <MX_ADC3_Init+0xe4>)
 800073e:	2200      	movs	r2, #0
 8000740:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000742:	4b1e      	ldr	r3, [pc, #120]	; (80007bc <MX_ADC3_Init+0xe4>)
 8000744:	2200      	movs	r2, #0
 8000746:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000748:	4b1c      	ldr	r3, [pc, #112]	; (80007bc <MX_ADC3_Init+0xe4>)
 800074a:	2200      	movs	r2, #0
 800074c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000750:	4b1a      	ldr	r3, [pc, #104]	; (80007bc <MX_ADC3_Init+0xe4>)
 8000752:	2200      	movs	r2, #0
 8000754:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc3.Init.OversamplingMode = DISABLE;
 8000756:	4b19      	ldr	r3, [pc, #100]	; (80007bc <MX_ADC3_Init+0xe4>)
 8000758:	2200      	movs	r2, #0
 800075a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800075e:	4817      	ldr	r0, [pc, #92]	; (80007bc <MX_ADC3_Init+0xe4>)
 8000760:	f001 fd5a 	bl	8002218 <HAL_ADC_Init>
 8000764:	4603      	mov	r3, r0
 8000766:	2b00      	cmp	r3, #0
 8000768:	d001      	beq.n	800076e <MX_ADC3_Init+0x96>
  {
    Error_Handler();
 800076a:	f000 fca3 	bl	80010b4 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800076e:	2300      	movs	r3, #0
 8000770:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 8000772:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000776:	4619      	mov	r1, r3
 8000778:	4810      	ldr	r0, [pc, #64]	; (80007bc <MX_ADC3_Init+0xe4>)
 800077a:	f002 fb75 	bl	8002e68 <HAL_ADCEx_MultiModeConfigChannel>
 800077e:	4603      	mov	r3, r0
 8000780:	2b00      	cmp	r3, #0
 8000782:	d001      	beq.n	8000788 <MX_ADC3_Init+0xb0>
  {
    Error_Handler();
 8000784:	f000 fc96 	bl	80010b4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000788:	4b0e      	ldr	r3, [pc, #56]	; (80007c4 <MX_ADC3_Init+0xec>)
 800078a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800078c:	2306      	movs	r3, #6
 800078e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000790:	2300      	movs	r3, #0
 8000792:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000794:	237f      	movs	r3, #127	; 0x7f
 8000796:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000798:	2304      	movs	r3, #4
 800079a:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800079c:	2300      	movs	r3, #0
 800079e:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80007a0:	1d3b      	adds	r3, r7, #4
 80007a2:	4619      	mov	r1, r3
 80007a4:	4805      	ldr	r0, [pc, #20]	; (80007bc <MX_ADC3_Init+0xe4>)
 80007a6:	f001 fef9 	bl	800259c <HAL_ADC_ConfigChannel>
 80007aa:	4603      	mov	r3, r0
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d001      	beq.n	80007b4 <MX_ADC3_Init+0xdc>
  {
    Error_Handler();
 80007b0:	f000 fc80 	bl	80010b4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80007b4:	bf00      	nop
 80007b6:	3730      	adds	r7, #48	; 0x30
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bd80      	pop	{r7, pc}
 80007bc:	20000278 	.word	0x20000278
 80007c0:	50000400 	.word	0x50000400
 80007c4:	04300002 	.word	0x04300002

080007c8 <MX_ADC4_Init>:
/* ADC4 init function */
void MX_ADC4_Init(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b088      	sub	sp, #32
 80007cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC4_Init 0 */

  /* USER CODE END ADC4_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80007ce:	463b      	mov	r3, r7
 80007d0:	2220      	movs	r2, #32
 80007d2:	2100      	movs	r1, #0
 80007d4:	4618      	mov	r0, r3
 80007d6:	f00c fed1 	bl	800d57c <memset>

  /* USER CODE END ADC4_Init 1 */

  /** Common config
  */
  hadc4.Instance = ADC4;
 80007da:	4b2b      	ldr	r3, [pc, #172]	; (8000888 <MX_ADC4_Init+0xc0>)
 80007dc:	4a2b      	ldr	r2, [pc, #172]	; (800088c <MX_ADC4_Init+0xc4>)
 80007de:	601a      	str	r2, [r3, #0]
  hadc4.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80007e0:	4b29      	ldr	r3, [pc, #164]	; (8000888 <MX_ADC4_Init+0xc0>)
 80007e2:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80007e6:	605a      	str	r2, [r3, #4]
  hadc4.Init.Resolution = ADC_RESOLUTION_12B;
 80007e8:	4b27      	ldr	r3, [pc, #156]	; (8000888 <MX_ADC4_Init+0xc0>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	609a      	str	r2, [r3, #8]
  hadc4.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007ee:	4b26      	ldr	r3, [pc, #152]	; (8000888 <MX_ADC4_Init+0xc0>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	60da      	str	r2, [r3, #12]
  hadc4.Init.GainCompensation = 0;
 80007f4:	4b24      	ldr	r3, [pc, #144]	; (8000888 <MX_ADC4_Init+0xc0>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	611a      	str	r2, [r3, #16]
  hadc4.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80007fa:	4b23      	ldr	r3, [pc, #140]	; (8000888 <MX_ADC4_Init+0xc0>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	615a      	str	r2, [r3, #20]
  hadc4.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000800:	4b21      	ldr	r3, [pc, #132]	; (8000888 <MX_ADC4_Init+0xc0>)
 8000802:	2204      	movs	r2, #4
 8000804:	619a      	str	r2, [r3, #24]
  hadc4.Init.LowPowerAutoWait = DISABLE;
 8000806:	4b20      	ldr	r3, [pc, #128]	; (8000888 <MX_ADC4_Init+0xc0>)
 8000808:	2200      	movs	r2, #0
 800080a:	771a      	strb	r2, [r3, #28]
  hadc4.Init.ContinuousConvMode = DISABLE;
 800080c:	4b1e      	ldr	r3, [pc, #120]	; (8000888 <MX_ADC4_Init+0xc0>)
 800080e:	2200      	movs	r2, #0
 8000810:	775a      	strb	r2, [r3, #29]
  hadc4.Init.NbrOfConversion = 1;
 8000812:	4b1d      	ldr	r3, [pc, #116]	; (8000888 <MX_ADC4_Init+0xc0>)
 8000814:	2201      	movs	r2, #1
 8000816:	621a      	str	r2, [r3, #32]
  hadc4.Init.DiscontinuousConvMode = DISABLE;
 8000818:	4b1b      	ldr	r3, [pc, #108]	; (8000888 <MX_ADC4_Init+0xc0>)
 800081a:	2200      	movs	r2, #0
 800081c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc4.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000820:	4b19      	ldr	r3, [pc, #100]	; (8000888 <MX_ADC4_Init+0xc0>)
 8000822:	2200      	movs	r2, #0
 8000824:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc4.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000826:	4b18      	ldr	r3, [pc, #96]	; (8000888 <MX_ADC4_Init+0xc0>)
 8000828:	2200      	movs	r2, #0
 800082a:	631a      	str	r2, [r3, #48]	; 0x30
  hadc4.Init.DMAContinuousRequests = DISABLE;
 800082c:	4b16      	ldr	r3, [pc, #88]	; (8000888 <MX_ADC4_Init+0xc0>)
 800082e:	2200      	movs	r2, #0
 8000830:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc4.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000834:	4b14      	ldr	r3, [pc, #80]	; (8000888 <MX_ADC4_Init+0xc0>)
 8000836:	2200      	movs	r2, #0
 8000838:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc4.Init.OversamplingMode = DISABLE;
 800083a:	4b13      	ldr	r3, [pc, #76]	; (8000888 <MX_ADC4_Init+0xc0>)
 800083c:	2200      	movs	r2, #0
 800083e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc4) != HAL_OK)
 8000842:	4811      	ldr	r0, [pc, #68]	; (8000888 <MX_ADC4_Init+0xc0>)
 8000844:	f001 fce8 	bl	8002218 <HAL_ADC_Init>
 8000848:	4603      	mov	r3, r0
 800084a:	2b00      	cmp	r3, #0
 800084c:	d001      	beq.n	8000852 <MX_ADC4_Init+0x8a>
  {
    Error_Handler();
 800084e:	f000 fc31 	bl	80010b4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000852:	4b0f      	ldr	r3, [pc, #60]	; (8000890 <MX_ADC4_Init+0xc8>)
 8000854:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000856:	2306      	movs	r3, #6
 8000858:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800085a:	2300      	movs	r3, #0
 800085c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800085e:	237f      	movs	r3, #127	; 0x7f
 8000860:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000862:	2304      	movs	r3, #4
 8000864:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000866:	2300      	movs	r3, #0
 8000868:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 800086a:	463b      	mov	r3, r7
 800086c:	4619      	mov	r1, r3
 800086e:	4806      	ldr	r0, [pc, #24]	; (8000888 <MX_ADC4_Init+0xc0>)
 8000870:	f001 fe94 	bl	800259c <HAL_ADC_ConfigChannel>
 8000874:	4603      	mov	r3, r0
 8000876:	2b00      	cmp	r3, #0
 8000878:	d001      	beq.n	800087e <MX_ADC4_Init+0xb6>
  {
    Error_Handler();
 800087a:	f000 fc1b 	bl	80010b4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC4_Init 2 */

  /* USER CODE END ADC4_Init 2 */

}
 800087e:	bf00      	nop
 8000880:	3720      	adds	r7, #32
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}
 8000886:	bf00      	nop
 8000888:	200002e4 	.word	0x200002e4
 800088c:	50000500 	.word	0x50000500
 8000890:	0c900008 	.word	0x0c900008

08000894 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;
static uint32_t HAL_RCC_ADC345_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b0a6      	sub	sp, #152	; 0x98
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800089c:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80008a0:	2200      	movs	r2, #0
 80008a2:	601a      	str	r2, [r3, #0]
 80008a4:	605a      	str	r2, [r3, #4]
 80008a6:	609a      	str	r2, [r3, #8]
 80008a8:	60da      	str	r2, [r3, #12]
 80008aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008ac:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80008b0:	2254      	movs	r2, #84	; 0x54
 80008b2:	2100      	movs	r1, #0
 80008b4:	4618      	mov	r0, r3
 80008b6:	f00c fe61 	bl	800d57c <memset>
  if(adcHandle->Instance==ADC1)
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80008c2:	d141      	bne.n	8000948 <HAL_ADC_MspInit+0xb4>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80008c4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80008c8:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80008ca:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80008ce:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008d0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80008d4:	4618      	mov	r0, r3
 80008d6:	f005 fb87 	bl	8005fe8 <HAL_RCCEx_PeriphCLKConfig>
 80008da:	4603      	mov	r3, r0
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d001      	beq.n	80008e4 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80008e0:	f000 fbe8 	bl	80010b4 <Error_Handler>
    }

    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 80008e4:	4b91      	ldr	r3, [pc, #580]	; (8000b2c <HAL_ADC_MspInit+0x298>)
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	3301      	adds	r3, #1
 80008ea:	4a90      	ldr	r2, [pc, #576]	; (8000b2c <HAL_ADC_MspInit+0x298>)
 80008ec:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80008ee:	4b8f      	ldr	r3, [pc, #572]	; (8000b2c <HAL_ADC_MspInit+0x298>)
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	2b01      	cmp	r3, #1
 80008f4:	d10b      	bne.n	800090e <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80008f6:	4b8e      	ldr	r3, [pc, #568]	; (8000b30 <HAL_ADC_MspInit+0x29c>)
 80008f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008fa:	4a8d      	ldr	r2, [pc, #564]	; (8000b30 <HAL_ADC_MspInit+0x29c>)
 80008fc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000900:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000902:	4b8b      	ldr	r3, [pc, #556]	; (8000b30 <HAL_ADC_MspInit+0x29c>)
 8000904:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000906:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800090a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800090c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800090e:	4b88      	ldr	r3, [pc, #544]	; (8000b30 <HAL_ADC_MspInit+0x29c>)
 8000910:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000912:	4a87      	ldr	r2, [pc, #540]	; (8000b30 <HAL_ADC_MspInit+0x29c>)
 8000914:	f043 0301 	orr.w	r3, r3, #1
 8000918:	64d3      	str	r3, [r2, #76]	; 0x4c
 800091a:	4b85      	ldr	r3, [pc, #532]	; (8000b30 <HAL_ADC_MspInit+0x29c>)
 800091c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800091e:	f003 0301 	and.w	r3, r3, #1
 8000922:	62bb      	str	r3, [r7, #40]	; 0x28
 8000924:	6abb      	ldr	r3, [r7, #40]	; 0x28
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000926:	2303      	movs	r3, #3
 8000928:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800092c:	2303      	movs	r3, #3
 800092e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000932:	2300      	movs	r3, #0
 8000934:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000938:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800093c:	4619      	mov	r1, r3
 800093e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000942:	f002 fd57 	bl	80033f4 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC4_MspInit 1 */

  /* USER CODE END ADC4_MspInit 1 */
  }
}
 8000946:	e0ed      	b.n	8000b24 <HAL_ADC_MspInit+0x290>
  else if(adcHandle->Instance==ADC2)
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	4a79      	ldr	r2, [pc, #484]	; (8000b34 <HAL_ADC_MspInit+0x2a0>)
 800094e:	4293      	cmp	r3, r2
 8000950:	d15b      	bne.n	8000a0a <HAL_ADC_MspInit+0x176>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000952:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000956:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000958:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800095c:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800095e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000962:	4618      	mov	r0, r3
 8000964:	f005 fb40 	bl	8005fe8 <HAL_RCCEx_PeriphCLKConfig>
 8000968:	4603      	mov	r3, r0
 800096a:	2b00      	cmp	r3, #0
 800096c:	d001      	beq.n	8000972 <HAL_ADC_MspInit+0xde>
      Error_Handler();
 800096e:	f000 fba1 	bl	80010b4 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000972:	4b6e      	ldr	r3, [pc, #440]	; (8000b2c <HAL_ADC_MspInit+0x298>)
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	3301      	adds	r3, #1
 8000978:	4a6c      	ldr	r2, [pc, #432]	; (8000b2c <HAL_ADC_MspInit+0x298>)
 800097a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800097c:	4b6b      	ldr	r3, [pc, #428]	; (8000b2c <HAL_ADC_MspInit+0x298>)
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	2b01      	cmp	r3, #1
 8000982:	d10b      	bne.n	800099c <HAL_ADC_MspInit+0x108>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000984:	4b6a      	ldr	r3, [pc, #424]	; (8000b30 <HAL_ADC_MspInit+0x29c>)
 8000986:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000988:	4a69      	ldr	r2, [pc, #420]	; (8000b30 <HAL_ADC_MspInit+0x29c>)
 800098a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800098e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000990:	4b67      	ldr	r3, [pc, #412]	; (8000b30 <HAL_ADC_MspInit+0x29c>)
 8000992:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000994:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000998:	627b      	str	r3, [r7, #36]	; 0x24
 800099a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800099c:	4b64      	ldr	r3, [pc, #400]	; (8000b30 <HAL_ADC_MspInit+0x29c>)
 800099e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009a0:	4a63      	ldr	r2, [pc, #396]	; (8000b30 <HAL_ADC_MspInit+0x29c>)
 80009a2:	f043 0304 	orr.w	r3, r3, #4
 80009a6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009a8:	4b61      	ldr	r3, [pc, #388]	; (8000b30 <HAL_ADC_MspInit+0x29c>)
 80009aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ac:	f003 0304 	and.w	r3, r3, #4
 80009b0:	623b      	str	r3, [r7, #32]
 80009b2:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009b4:	4b5e      	ldr	r3, [pc, #376]	; (8000b30 <HAL_ADC_MspInit+0x29c>)
 80009b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009b8:	4a5d      	ldr	r2, [pc, #372]	; (8000b30 <HAL_ADC_MspInit+0x29c>)
 80009ba:	f043 0302 	orr.w	r3, r3, #2
 80009be:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009c0:	4b5b      	ldr	r3, [pc, #364]	; (8000b30 <HAL_ADC_MspInit+0x29c>)
 80009c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009c4:	f003 0302 	and.w	r3, r3, #2
 80009c8:	61fb      	str	r3, [r7, #28]
 80009ca:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80009cc:	2308      	movs	r3, #8
 80009ce:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009d2:	2303      	movs	r3, #3
 80009d4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d8:	2300      	movs	r3, #0
 80009da:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009de:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80009e2:	4619      	mov	r1, r3
 80009e4:	4854      	ldr	r0, [pc, #336]	; (8000b38 <HAL_ADC_MspInit+0x2a4>)
 80009e6:	f002 fd05 	bl	80033f4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80009ea:	2304      	movs	r3, #4
 80009ec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009f0:	2303      	movs	r3, #3
 80009f2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f6:	2300      	movs	r3, #0
 80009f8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009fc:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8000a00:	4619      	mov	r1, r3
 8000a02:	484e      	ldr	r0, [pc, #312]	; (8000b3c <HAL_ADC_MspInit+0x2a8>)
 8000a04:	f002 fcf6 	bl	80033f4 <HAL_GPIO_Init>
}
 8000a08:	e08c      	b.n	8000b24 <HAL_ADC_MspInit+0x290>
  else if(adcHandle->Instance==ADC3)
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	4a4c      	ldr	r2, [pc, #304]	; (8000b40 <HAL_ADC_MspInit+0x2ac>)
 8000a10:	4293      	cmp	r3, r2
 8000a12:	d141      	bne.n	8000a98 <HAL_ADC_MspInit+0x204>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 8000a14:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a18:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 8000a1a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8000a1e:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a20:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000a24:	4618      	mov	r0, r3
 8000a26:	f005 fadf 	bl	8005fe8 <HAL_RCCEx_PeriphCLKConfig>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d001      	beq.n	8000a34 <HAL_ADC_MspInit+0x1a0>
      Error_Handler();
 8000a30:	f000 fb40 	bl	80010b4 <Error_Handler>
    HAL_RCC_ADC345_CLK_ENABLED++;
 8000a34:	4b43      	ldr	r3, [pc, #268]	; (8000b44 <HAL_ADC_MspInit+0x2b0>)
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	3301      	adds	r3, #1
 8000a3a:	4a42      	ldr	r2, [pc, #264]	; (8000b44 <HAL_ADC_MspInit+0x2b0>)
 8000a3c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 8000a3e:	4b41      	ldr	r3, [pc, #260]	; (8000b44 <HAL_ADC_MspInit+0x2b0>)
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	2b01      	cmp	r3, #1
 8000a44:	d10b      	bne.n	8000a5e <HAL_ADC_MspInit+0x1ca>
      __HAL_RCC_ADC345_CLK_ENABLE();
 8000a46:	4b3a      	ldr	r3, [pc, #232]	; (8000b30 <HAL_ADC_MspInit+0x29c>)
 8000a48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a4a:	4a39      	ldr	r2, [pc, #228]	; (8000b30 <HAL_ADC_MspInit+0x29c>)
 8000a4c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a50:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a52:	4b37      	ldr	r3, [pc, #220]	; (8000b30 <HAL_ADC_MspInit+0x29c>)
 8000a54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a5a:	61bb      	str	r3, [r7, #24]
 8000a5c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a5e:	4b34      	ldr	r3, [pc, #208]	; (8000b30 <HAL_ADC_MspInit+0x29c>)
 8000a60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a62:	4a33      	ldr	r2, [pc, #204]	; (8000b30 <HAL_ADC_MspInit+0x29c>)
 8000a64:	f043 0302 	orr.w	r3, r3, #2
 8000a68:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a6a:	4b31      	ldr	r3, [pc, #196]	; (8000b30 <HAL_ADC_MspInit+0x29c>)
 8000a6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a6e:	f003 0302 	and.w	r3, r3, #2
 8000a72:	617b      	str	r3, [r7, #20]
 8000a74:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_13;
 8000a76:	f242 0302 	movw	r3, #8194	; 0x2002
 8000a7a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a7e:	2303      	movs	r3, #3
 8000a80:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a84:	2300      	movs	r3, #0
 8000a86:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a8a:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8000a8e:	4619      	mov	r1, r3
 8000a90:	482a      	ldr	r0, [pc, #168]	; (8000b3c <HAL_ADC_MspInit+0x2a8>)
 8000a92:	f002 fcaf 	bl	80033f4 <HAL_GPIO_Init>
}
 8000a96:	e045      	b.n	8000b24 <HAL_ADC_MspInit+0x290>
  else if(adcHandle->Instance==ADC4)
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	4a2a      	ldr	r2, [pc, #168]	; (8000b48 <HAL_ADC_MspInit+0x2b4>)
 8000a9e:	4293      	cmp	r3, r2
 8000aa0:	d140      	bne.n	8000b24 <HAL_ADC_MspInit+0x290>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 8000aa2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000aa6:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 8000aa8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8000aac:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000aae:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	f005 fa98 	bl	8005fe8 <HAL_RCCEx_PeriphCLKConfig>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d001      	beq.n	8000ac2 <HAL_ADC_MspInit+0x22e>
      Error_Handler();
 8000abe:	f000 faf9 	bl	80010b4 <Error_Handler>
    HAL_RCC_ADC345_CLK_ENABLED++;
 8000ac2:	4b20      	ldr	r3, [pc, #128]	; (8000b44 <HAL_ADC_MspInit+0x2b0>)
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	3301      	adds	r3, #1
 8000ac8:	4a1e      	ldr	r2, [pc, #120]	; (8000b44 <HAL_ADC_MspInit+0x2b0>)
 8000aca:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 8000acc:	4b1d      	ldr	r3, [pc, #116]	; (8000b44 <HAL_ADC_MspInit+0x2b0>)
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	2b01      	cmp	r3, #1
 8000ad2:	d10b      	bne.n	8000aec <HAL_ADC_MspInit+0x258>
      __HAL_RCC_ADC345_CLK_ENABLE();
 8000ad4:	4b16      	ldr	r3, [pc, #88]	; (8000b30 <HAL_ADC_MspInit+0x29c>)
 8000ad6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ad8:	4a15      	ldr	r2, [pc, #84]	; (8000b30 <HAL_ADC_MspInit+0x29c>)
 8000ada:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ade:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ae0:	4b13      	ldr	r3, [pc, #76]	; (8000b30 <HAL_ADC_MspInit+0x29c>)
 8000ae2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ae4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ae8:	613b      	str	r3, [r7, #16]
 8000aea:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aec:	4b10      	ldr	r3, [pc, #64]	; (8000b30 <HAL_ADC_MspInit+0x29c>)
 8000aee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000af0:	4a0f      	ldr	r2, [pc, #60]	; (8000b30 <HAL_ADC_MspInit+0x29c>)
 8000af2:	f043 0302 	orr.w	r3, r3, #2
 8000af6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000af8:	4b0d      	ldr	r3, [pc, #52]	; (8000b30 <HAL_ADC_MspInit+0x29c>)
 8000afa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000afc:	f003 0302 	and.w	r3, r3, #2
 8000b00:	60fb      	str	r3, [r7, #12]
 8000b02:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14;
 8000b04:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 8000b08:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b0c:	2303      	movs	r3, #3
 8000b0e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b12:	2300      	movs	r3, #0
 8000b14:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b18:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8000b1c:	4619      	mov	r1, r3
 8000b1e:	4807      	ldr	r0, [pc, #28]	; (8000b3c <HAL_ADC_MspInit+0x2a8>)
 8000b20:	f002 fc68 	bl	80033f4 <HAL_GPIO_Init>
}
 8000b24:	bf00      	nop
 8000b26:	3798      	adds	r7, #152	; 0x98
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bd80      	pop	{r7, pc}
 8000b2c:	20000350 	.word	0x20000350
 8000b30:	40021000 	.word	0x40021000
 8000b34:	50000100 	.word	0x50000100
 8000b38:	48000800 	.word	0x48000800
 8000b3c:	48000400 	.word	0x48000400
 8000b40:	50000400 	.word	0x50000400
 8000b44:	20000354 	.word	0x20000354
 8000b48:	50000500 	.word	0x50000500

08000b4c <MX_CORDIC_Init>:

CORDIC_HandleTypeDef hcordic;

/* CORDIC init function */
void MX_CORDIC_Init(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	af00      	add	r7, sp, #0
  /* USER CODE END CORDIC_Init 0 */

  /* USER CODE BEGIN CORDIC_Init 1 */

  /* USER CODE END CORDIC_Init 1 */
  hcordic.Instance = CORDIC;
 8000b50:	4b06      	ldr	r3, [pc, #24]	; (8000b6c <MX_CORDIC_Init+0x20>)
 8000b52:	4a07      	ldr	r2, [pc, #28]	; (8000b70 <MX_CORDIC_Init+0x24>)
 8000b54:	601a      	str	r2, [r3, #0]
  if (HAL_CORDIC_Init(&hcordic) != HAL_OK)
 8000b56:	4805      	ldr	r0, [pc, #20]	; (8000b6c <MX_CORDIC_Init+0x20>)
 8000b58:	f002 fa8e 	bl	8003078 <HAL_CORDIC_Init>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d001      	beq.n	8000b66 <MX_CORDIC_Init+0x1a>
  {
    Error_Handler();
 8000b62:	f000 faa7 	bl	80010b4 <Error_Handler>
  }
  /* USER CODE BEGIN CORDIC_Init 2 */

  /* USER CODE END CORDIC_Init 2 */

}
 8000b66:	bf00      	nop
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	20000358 	.word	0x20000358
 8000b70:	40020c00 	.word	0x40020c00

08000b74 <HAL_CORDIC_MspInit>:

void HAL_CORDIC_MspInit(CORDIC_HandleTypeDef* cordicHandle)
{
 8000b74:	b480      	push	{r7}
 8000b76:	b085      	sub	sp, #20
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]

  if(cordicHandle->Instance==CORDIC)
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	4a0a      	ldr	r2, [pc, #40]	; (8000bac <HAL_CORDIC_MspInit+0x38>)
 8000b82:	4293      	cmp	r3, r2
 8000b84:	d10b      	bne.n	8000b9e <HAL_CORDIC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CORDIC_MspInit 0 */

  /* USER CODE END CORDIC_MspInit 0 */
    /* CORDIC clock enable */
    __HAL_RCC_CORDIC_CLK_ENABLE();
 8000b86:	4b0a      	ldr	r3, [pc, #40]	; (8000bb0 <HAL_CORDIC_MspInit+0x3c>)
 8000b88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000b8a:	4a09      	ldr	r2, [pc, #36]	; (8000bb0 <HAL_CORDIC_MspInit+0x3c>)
 8000b8c:	f043 0308 	orr.w	r3, r3, #8
 8000b90:	6493      	str	r3, [r2, #72]	; 0x48
 8000b92:	4b07      	ldr	r3, [pc, #28]	; (8000bb0 <HAL_CORDIC_MspInit+0x3c>)
 8000b94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000b96:	f003 0308 	and.w	r3, r3, #8
 8000b9a:	60fb      	str	r3, [r7, #12]
 8000b9c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CORDIC_MspInit 1 */

  /* USER CODE END CORDIC_MspInit 1 */
  }
}
 8000b9e:	bf00      	nop
 8000ba0:	3714      	adds	r7, #20
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop
 8000bac:	40020c00 	.word	0x40020c00
 8000bb0:	40021000 	.word	0x40021000

08000bb4 <MX_FMAC_Init>:

FMAC_HandleTypeDef hfmac;

/* FMAC init function */
void MX_FMAC_Init(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	af00      	add	r7, sp, #0
  /* USER CODE END FMAC_Init 0 */

  /* USER CODE BEGIN FMAC_Init 1 */

  /* USER CODE END FMAC_Init 1 */
  hfmac.Instance = FMAC;
 8000bb8:	4b06      	ldr	r3, [pc, #24]	; (8000bd4 <MX_FMAC_Init+0x20>)
 8000bba:	4a07      	ldr	r2, [pc, #28]	; (8000bd8 <MX_FMAC_Init+0x24>)
 8000bbc:	601a      	str	r2, [r3, #0]
  if (HAL_FMAC_Init(&hfmac) != HAL_OK)
 8000bbe:	4805      	ldr	r0, [pc, #20]	; (8000bd4 <MX_FMAC_Init+0x20>)
 8000bc0:	f002 fb6c 	bl	800329c <HAL_FMAC_Init>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d001      	beq.n	8000bce <MX_FMAC_Init+0x1a>
  {
    Error_Handler();
 8000bca:	f000 fa73 	bl	80010b4 <Error_Handler>
  }
  /* USER CODE BEGIN FMAC_Init 2 */

  /* USER CODE END FMAC_Init 2 */

}
 8000bce:	bf00      	nop
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	20000380 	.word	0x20000380
 8000bd8:	40021400 	.word	0x40021400

08000bdc <HAL_FMAC_MspInit>:

void HAL_FMAC_MspInit(FMAC_HandleTypeDef* fmacHandle)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	b085      	sub	sp, #20
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]

  if(fmacHandle->Instance==FMAC)
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	4a0a      	ldr	r2, [pc, #40]	; (8000c14 <HAL_FMAC_MspInit+0x38>)
 8000bea:	4293      	cmp	r3, r2
 8000bec:	d10b      	bne.n	8000c06 <HAL_FMAC_MspInit+0x2a>
  {
  /* USER CODE BEGIN FMAC_MspInit 0 */

  /* USER CODE END FMAC_MspInit 0 */
    /* FMAC clock enable */
    __HAL_RCC_FMAC_CLK_ENABLE();
 8000bee:	4b0a      	ldr	r3, [pc, #40]	; (8000c18 <HAL_FMAC_MspInit+0x3c>)
 8000bf0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000bf2:	4a09      	ldr	r2, [pc, #36]	; (8000c18 <HAL_FMAC_MspInit+0x3c>)
 8000bf4:	f043 0310 	orr.w	r3, r3, #16
 8000bf8:	6493      	str	r3, [r2, #72]	; 0x48
 8000bfa:	4b07      	ldr	r3, [pc, #28]	; (8000c18 <HAL_FMAC_MspInit+0x3c>)
 8000bfc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000bfe:	f003 0310 	and.w	r3, r3, #16
 8000c02:	60fb      	str	r3, [r7, #12]
 8000c04:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN FMAC_MspInit 1 */

  /* USER CODE END FMAC_MspInit 1 */
  }
}
 8000c06:	bf00      	nop
 8000c08:	3714      	adds	r7, #20
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c10:	4770      	bx	lr
 8000c12:	bf00      	nop
 8000c14:	40021400 	.word	0x40021400
 8000c18:	40021000 	.word	0x40021000

08000c1c <LED_Write>:

/* Includes ------------------------------------------------------------------*/
#include "gpio.h"

/* USER CODE BEGIN 0 */
void LED_Write(uint8_t leds){
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b082      	sub	sp, #8
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	4603      	mov	r3, r0
 8000c24:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(USR_LED_1_GPIO_Port, USR_LED_1_Pin, (leds>>0)&1);
 8000c26:	79fb      	ldrb	r3, [r7, #7]
 8000c28:	f003 0301 	and.w	r3, r3, #1
 8000c2c:	b2db      	uxtb	r3, r3
 8000c2e:	461a      	mov	r2, r3
 8000c30:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c34:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c38:	f002 fd5e 	bl	80036f8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(USR_LED_2_GPIO_Port, USR_LED_2_Pin, (leds>>1)&1);
 8000c3c:	79fb      	ldrb	r3, [r7, #7]
 8000c3e:	085b      	lsrs	r3, r3, #1
 8000c40:	b2db      	uxtb	r3, r3
 8000c42:	f003 0301 	and.w	r3, r3, #1
 8000c46:	b2db      	uxtb	r3, r3
 8000c48:	461a      	mov	r2, r3
 8000c4a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c4e:	480f      	ldr	r0, [pc, #60]	; (8000c8c <LED_Write+0x70>)
 8000c50:	f002 fd52 	bl	80036f8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(USR_LED_3_GPIO_Port, USR_LED_3_Pin, (leds>>2)&1);
 8000c54:	79fb      	ldrb	r3, [r7, #7]
 8000c56:	089b      	lsrs	r3, r3, #2
 8000c58:	b2db      	uxtb	r3, r3
 8000c5a:	f003 0301 	and.w	r3, r3, #1
 8000c5e:	b2db      	uxtb	r3, r3
 8000c60:	461a      	mov	r2, r3
 8000c62:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c66:	4809      	ldr	r0, [pc, #36]	; (8000c8c <LED_Write+0x70>)
 8000c68:	f002 fd46 	bl	80036f8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(USR_LED_4_GPIO_Port, USR_LED_4_Pin, (leds>>3)&1);
 8000c6c:	79fb      	ldrb	r3, [r7, #7]
 8000c6e:	08db      	lsrs	r3, r3, #3
 8000c70:	b2db      	uxtb	r3, r3
 8000c72:	f003 0301 	and.w	r3, r3, #1
 8000c76:	b2db      	uxtb	r3, r3
 8000c78:	461a      	mov	r2, r3
 8000c7a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c7e:	4803      	ldr	r0, [pc, #12]	; (8000c8c <LED_Write+0x70>)
 8000c80:	f002 fd3a 	bl	80036f8 <HAL_GPIO_WritePin>

}
 8000c84:	bf00      	nop
 8000c86:	3708      	adds	r7, #8
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}
 8000c8c:	48000800 	.word	0x48000800

08000c90 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b08c      	sub	sp, #48	; 0x30
 8000c94:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c96:	f107 031c 	add.w	r3, r7, #28
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	601a      	str	r2, [r3, #0]
 8000c9e:	605a      	str	r2, [r3, #4]
 8000ca0:	609a      	str	r2, [r3, #8]
 8000ca2:	60da      	str	r2, [r3, #12]
 8000ca4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ca6:	4b61      	ldr	r3, [pc, #388]	; (8000e2c <MX_GPIO_Init+0x19c>)
 8000ca8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000caa:	4a60      	ldr	r2, [pc, #384]	; (8000e2c <MX_GPIO_Init+0x19c>)
 8000cac:	f043 0320 	orr.w	r3, r3, #32
 8000cb0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cb2:	4b5e      	ldr	r3, [pc, #376]	; (8000e2c <MX_GPIO_Init+0x19c>)
 8000cb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cb6:	f003 0320 	and.w	r3, r3, #32
 8000cba:	61bb      	str	r3, [r7, #24]
 8000cbc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000cbe:	4b5b      	ldr	r3, [pc, #364]	; (8000e2c <MX_GPIO_Init+0x19c>)
 8000cc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cc2:	4a5a      	ldr	r2, [pc, #360]	; (8000e2c <MX_GPIO_Init+0x19c>)
 8000cc4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000cc8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cca:	4b58      	ldr	r3, [pc, #352]	; (8000e2c <MX_GPIO_Init+0x19c>)
 8000ccc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000cd2:	617b      	str	r3, [r7, #20]
 8000cd4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cd6:	4b55      	ldr	r3, [pc, #340]	; (8000e2c <MX_GPIO_Init+0x19c>)
 8000cd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cda:	4a54      	ldr	r2, [pc, #336]	; (8000e2c <MX_GPIO_Init+0x19c>)
 8000cdc:	f043 0304 	orr.w	r3, r3, #4
 8000ce0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ce2:	4b52      	ldr	r3, [pc, #328]	; (8000e2c <MX_GPIO_Init+0x19c>)
 8000ce4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ce6:	f003 0304 	and.w	r3, r3, #4
 8000cea:	613b      	str	r3, [r7, #16]
 8000cec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cee:	4b4f      	ldr	r3, [pc, #316]	; (8000e2c <MX_GPIO_Init+0x19c>)
 8000cf0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cf2:	4a4e      	ldr	r2, [pc, #312]	; (8000e2c <MX_GPIO_Init+0x19c>)
 8000cf4:	f043 0301 	orr.w	r3, r3, #1
 8000cf8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cfa:	4b4c      	ldr	r3, [pc, #304]	; (8000e2c <MX_GPIO_Init+0x19c>)
 8000cfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cfe:	f003 0301 	and.w	r3, r3, #1
 8000d02:	60fb      	str	r3, [r7, #12]
 8000d04:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d06:	4b49      	ldr	r3, [pc, #292]	; (8000e2c <MX_GPIO_Init+0x19c>)
 8000d08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d0a:	4a48      	ldr	r2, [pc, #288]	; (8000e2c <MX_GPIO_Init+0x19c>)
 8000d0c:	f043 0302 	orr.w	r3, r3, #2
 8000d10:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d12:	4b46      	ldr	r3, [pc, #280]	; (8000e2c <MX_GPIO_Init+0x19c>)
 8000d14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d16:	f003 0302 	and.w	r3, r3, #2
 8000d1a:	60bb      	str	r3, [r7, #8]
 8000d1c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d1e:	4b43      	ldr	r3, [pc, #268]	; (8000e2c <MX_GPIO_Init+0x19c>)
 8000d20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d22:	4a42      	ldr	r2, [pc, #264]	; (8000e2c <MX_GPIO_Init+0x19c>)
 8000d24:	f043 0308 	orr.w	r3, r3, #8
 8000d28:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d2a:	4b40      	ldr	r3, [pc, #256]	; (8000e2c <MX_GPIO_Init+0x19c>)
 8000d2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d2e:	f003 0308 	and.w	r3, r3, #8
 8000d32:	607b      	str	r3, [r7, #4]
 8000d34:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(pwr_Enable_GPIO_Port, pwr_Enable_Pin, GPIO_PIN_RESET);
 8000d36:	2200      	movs	r2, #0
 8000d38:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d3c:	483c      	ldr	r0, [pc, #240]	; (8000e30 <MX_GPIO_Init+0x1a0>)
 8000d3e:	f002 fcdb 	bl	80036f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USR_LED_1_GPIO_Port, USR_LED_1_Pin, GPIO_PIN_RESET);
 8000d42:	2200      	movs	r2, #0
 8000d44:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d48:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d4c:	f002 fcd4 	bl	80036f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, USR_LED_2_Pin|USR_LED_3_Pin|USR_LED_4_Pin, GPIO_PIN_RESET);
 8000d50:	2200      	movs	r2, #0
 8000d52:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 8000d56:	4837      	ldr	r0, [pc, #220]	; (8000e34 <MX_GPIO_Init+0x1a4>)
 8000d58:	f002 fcce 	bl	80036f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NRST_Pin;
 8000d5c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d60:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d62:	2300      	movs	r3, #0
 8000d64:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d66:	2300      	movs	r3, #0
 8000d68:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(NRST_GPIO_Port, &GPIO_InitStruct);
 8000d6a:	f107 031c 	add.w	r3, r7, #28
 8000d6e:	4619      	mov	r1, r3
 8000d70:	4831      	ldr	r0, [pc, #196]	; (8000e38 <MX_GPIO_Init+0x1a8>)
 8000d72:	f002 fb3f 	bl	80033f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = USR_BTN_2_Pin|ENC_BTN_Pin;
 8000d76:	2330      	movs	r3, #48	; 0x30
 8000d78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d7a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000d7e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d80:	2300      	movs	r3, #0
 8000d82:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d84:	f107 031c 	add.w	r3, r7, #28
 8000d88:	4619      	mov	r1, r3
 8000d8a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d8e:	f002 fb31 	bl	80033f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = Nucleo_NRST_Pin|USR_BTN_3_Pin|Soft_NRST_Pin;
 8000d92:	23c1      	movs	r3, #193	; 0xc1
 8000d94:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d96:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000d9a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000da0:	f107 031c 	add.w	r3, r7, #28
 8000da4:	4619      	mov	r1, r3
 8000da6:	4822      	ldr	r0, [pc, #136]	; (8000e30 <MX_GPIO_Init+0x1a0>)
 8000da8:	f002 fb24 	bl	80033f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = pwr_Enable_Pin;
 8000dac:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000db0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000db2:	2301      	movs	r3, #1
 8000db4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db6:	2300      	movs	r3, #0
 8000db8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(pwr_Enable_GPIO_Port, &GPIO_InitStruct);
 8000dbe:	f107 031c 	add.w	r3, r7, #28
 8000dc2:	4619      	mov	r1, r3
 8000dc4:	481a      	ldr	r0, [pc, #104]	; (8000e30 <MX_GPIO_Init+0x1a0>)
 8000dc6:	f002 fb15 	bl	80033f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USR_LED_1_Pin;
 8000dca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000dce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dd0:	2301      	movs	r3, #1
 8000dd2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USR_LED_1_GPIO_Port, &GPIO_InitStruct);
 8000ddc:	f107 031c 	add.w	r3, r7, #28
 8000de0:	4619      	mov	r1, r3
 8000de2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000de6:	f002 fb05 	bl	80033f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = USR_LED_2_Pin|USR_LED_3_Pin|USR_LED_4_Pin;
 8000dea:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000dee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000df0:	2301      	movs	r3, #1
 8000df2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df4:	2300      	movs	r3, #0
 8000df6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dfc:	f107 031c 	add.w	r3, r7, #28
 8000e00:	4619      	mov	r1, r3
 8000e02:	480c      	ldr	r0, [pc, #48]	; (8000e34 <MX_GPIO_Init+0x1a4>)
 8000e04:	f002 faf6 	bl	80033f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USR_BTN_1_Pin;
 8000e08:	2304      	movs	r3, #4
 8000e0a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e0c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000e10:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e12:	2300      	movs	r3, #0
 8000e14:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USR_BTN_1_GPIO_Port, &GPIO_InitStruct);
 8000e16:	f107 031c 	add.w	r3, r7, #28
 8000e1a:	4619      	mov	r1, r3
 8000e1c:	4807      	ldr	r0, [pc, #28]	; (8000e3c <MX_GPIO_Init+0x1ac>)
 8000e1e:	f002 fae9 	bl	80033f4 <HAL_GPIO_Init>

}
 8000e22:	bf00      	nop
 8000e24:	3730      	adds	r7, #48	; 0x30
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	bf00      	nop
 8000e2c:	40021000 	.word	0x40021000
 8000e30:	48000400 	.word	0x48000400
 8000e34:	48000800 	.word	0x48000800
 8000e38:	48001800 	.word	0x48001800
 8000e3c:	48000c00 	.word	0x48000c00

08000e40 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000e44:	4b1b      	ldr	r3, [pc, #108]	; (8000eb4 <MX_I2C2_Init+0x74>)
 8000e46:	4a1c      	ldr	r2, [pc, #112]	; (8000eb8 <MX_I2C2_Init+0x78>)
 8000e48:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x30A0A7FB;
 8000e4a:	4b1a      	ldr	r3, [pc, #104]	; (8000eb4 <MX_I2C2_Init+0x74>)
 8000e4c:	4a1b      	ldr	r2, [pc, #108]	; (8000ebc <MX_I2C2_Init+0x7c>)
 8000e4e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000e50:	4b18      	ldr	r3, [pc, #96]	; (8000eb4 <MX_I2C2_Init+0x74>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e56:	4b17      	ldr	r3, [pc, #92]	; (8000eb4 <MX_I2C2_Init+0x74>)
 8000e58:	2201      	movs	r2, #1
 8000e5a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e5c:	4b15      	ldr	r3, [pc, #84]	; (8000eb4 <MX_I2C2_Init+0x74>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000e62:	4b14      	ldr	r3, [pc, #80]	; (8000eb4 <MX_I2C2_Init+0x74>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000e68:	4b12      	ldr	r3, [pc, #72]	; (8000eb4 <MX_I2C2_Init+0x74>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e6e:	4b11      	ldr	r3, [pc, #68]	; (8000eb4 <MX_I2C2_Init+0x74>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e74:	4b0f      	ldr	r3, [pc, #60]	; (8000eb4 <MX_I2C2_Init+0x74>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000e7a:	480e      	ldr	r0, [pc, #56]	; (8000eb4 <MX_I2C2_Init+0x74>)
 8000e7c:	f002 fc54 	bl	8003728 <HAL_I2C_Init>
 8000e80:	4603      	mov	r3, r0
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d001      	beq.n	8000e8a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000e86:	f000 f915 	bl	80010b4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000e8a:	2100      	movs	r1, #0
 8000e8c:	4809      	ldr	r0, [pc, #36]	; (8000eb4 <MX_I2C2_Init+0x74>)
 8000e8e:	f002 fcda 	bl	8003846 <HAL_I2CEx_ConfigAnalogFilter>
 8000e92:	4603      	mov	r3, r0
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d001      	beq.n	8000e9c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000e98:	f000 f90c 	bl	80010b4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000e9c:	2100      	movs	r1, #0
 8000e9e:	4805      	ldr	r0, [pc, #20]	; (8000eb4 <MX_I2C2_Init+0x74>)
 8000ea0:	f002 fd1c 	bl	80038dc <HAL_I2CEx_ConfigDigitalFilter>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d001      	beq.n	8000eae <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000eaa:	f000 f903 	bl	80010b4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000eae:	bf00      	nop
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	200003b8 	.word	0x200003b8
 8000eb8:	40005800 	.word	0x40005800
 8000ebc:	30a0a7fb 	.word	0x30a0a7fb

08000ec0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b09e      	sub	sp, #120	; 0x78
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ec8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000ecc:	2200      	movs	r2, #0
 8000ece:	601a      	str	r2, [r3, #0]
 8000ed0:	605a      	str	r2, [r3, #4]
 8000ed2:	609a      	str	r2, [r3, #8]
 8000ed4:	60da      	str	r2, [r3, #12]
 8000ed6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ed8:	f107 0310 	add.w	r3, r7, #16
 8000edc:	2254      	movs	r2, #84	; 0x54
 8000ede:	2100      	movs	r1, #0
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	f00c fb4b 	bl	800d57c <memset>
  if(i2cHandle->Instance==I2C2)
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	4a1f      	ldr	r2, [pc, #124]	; (8000f68 <HAL_I2C_MspInit+0xa8>)
 8000eec:	4293      	cmp	r3, r2
 8000eee:	d137      	bne.n	8000f60 <HAL_I2C_MspInit+0xa0>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000ef0:	2380      	movs	r3, #128	; 0x80
 8000ef2:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ef8:	f107 0310 	add.w	r3, r7, #16
 8000efc:	4618      	mov	r0, r3
 8000efe:	f005 f873 	bl	8005fe8 <HAL_RCCEx_PeriphCLKConfig>
 8000f02:	4603      	mov	r3, r0
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d001      	beq.n	8000f0c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000f08:	f000 f8d4 	bl	80010b4 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f0c:	4b17      	ldr	r3, [pc, #92]	; (8000f6c <HAL_I2C_MspInit+0xac>)
 8000f0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f10:	4a16      	ldr	r2, [pc, #88]	; (8000f6c <HAL_I2C_MspInit+0xac>)
 8000f12:	f043 0301 	orr.w	r3, r3, #1
 8000f16:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f18:	4b14      	ldr	r3, [pc, #80]	; (8000f6c <HAL_I2C_MspInit+0xac>)
 8000f1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f1c:	f003 0301 	and.w	r3, r3, #1
 8000f20:	60fb      	str	r3, [r7, #12]
 8000f22:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PA8     ------> I2C2_SDA
    PA9     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000f24:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000f28:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f2a:	2312      	movs	r3, #18
 8000f2c:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f32:	2300      	movs	r3, #0
 8000f34:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000f36:	2304      	movs	r3, #4
 8000f38:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f3a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000f3e:	4619      	mov	r1, r3
 8000f40:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f44:	f002 fa56 	bl	80033f4 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000f48:	4b08      	ldr	r3, [pc, #32]	; (8000f6c <HAL_I2C_MspInit+0xac>)
 8000f4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f4c:	4a07      	ldr	r2, [pc, #28]	; (8000f6c <HAL_I2C_MspInit+0xac>)
 8000f4e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000f52:	6593      	str	r3, [r2, #88]	; 0x58
 8000f54:	4b05      	ldr	r3, [pc, #20]	; (8000f6c <HAL_I2C_MspInit+0xac>)
 8000f56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f58:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000f5c:	60bb      	str	r3, [r7, #8]
 8000f5e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8000f60:	bf00      	nop
 8000f62:	3778      	adds	r7, #120	; 0x78
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bd80      	pop	{r7, pc}
 8000f68:	40005800 	.word	0x40005800
 8000f6c:	40021000 	.word	0x40021000

08000f70 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b082      	sub	sp, #8
 8000f74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	int led = 1;
 8000f76:	2301      	movs	r3, #1
 8000f78:	607b      	str	r3, [r7, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f7a:	f000 ff1a 	bl	8001db2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f7e:	f000 f83b 	bl	8000ff8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f82:	f7ff fe85 	bl	8000c90 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000f86:	f7ff fac9 	bl	800051c <MX_ADC1_Init>
  MX_ADC2_Init();
 8000f8a:	f7ff fb3f 	bl	800060c <MX_ADC2_Init>
  MX_ADC3_Init();
 8000f8e:	f7ff fba3 	bl	80006d8 <MX_ADC3_Init>
  MX_ADC4_Init();
 8000f92:	f7ff fc19 	bl	80007c8 <MX_ADC4_Init>
  MX_CORDIC_Init();
 8000f96:	f7ff fdd9 	bl	8000b4c <MX_CORDIC_Init>
  MX_FMAC_Init();
 8000f9a:	f7ff fe0b 	bl	8000bb4 <MX_FMAC_Init>
  MX_I2C2_Init();
 8000f9e:	f7ff ff4f 	bl	8000e40 <MX_I2C2_Init>
  MX_TIM3_Init();
 8000fa2:	f000 f9dd 	bl	8001360 <MX_TIM3_Init>
  MX_TIM8_Init();
 8000fa6:	f000 fa31 	bl	800140c <MX_TIM8_Init>
  MX_TIM15_Init();
 8000faa:	f000 fac7 	bl	800153c <MX_TIM15_Init>
  MX_TIM17_Init();
 8000fae:	f000 fbbf 	bl	8001730 <MX_TIM17_Init>
  MX_USART1_UART_Init();
 8000fb2:	f000 fda3 	bl	8001afc <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8000fb6:	f000 fded 	bl	8001b94 <MX_USART3_UART_Init>
  MX_TIM16_Init();
 8000fba:	f000 fb3f 	bl	800163c <MX_TIM16_Init>
  MX_TIM1_Init();
 8000fbe:	f000 f961 	bl	8001284 <MX_TIM1_Init>
  MX_USB_Device_Init();
 8000fc2:	f00b fdd1 	bl	800cb68 <MX_USB_Device_Init>
  /* USER CODE BEGIN WHILE */

  while (1)
  {

	  LED_Write(led);
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	b2db      	uxtb	r3, r3
 8000fca:	4618      	mov	r0, r3
 8000fcc:	f7ff fe26 	bl	8000c1c <LED_Write>
	  led = (led*2)%15;
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	005a      	lsls	r2, r3, #1
 8000fd4:	4b07      	ldr	r3, [pc, #28]	; (8000ff4 <main+0x84>)
 8000fd6:	fb83 1302 	smull	r1, r3, r3, r2
 8000fda:	4413      	add	r3, r2
 8000fdc:	10d9      	asrs	r1, r3, #3
 8000fde:	17d3      	asrs	r3, r2, #31
 8000fe0:	1ac9      	subs	r1, r1, r3
 8000fe2:	460b      	mov	r3, r1
 8000fe4:	011b      	lsls	r3, r3, #4
 8000fe6:	1a5b      	subs	r3, r3, r1
 8000fe8:	1ad3      	subs	r3, r2, r3
 8000fea:	607b      	str	r3, [r7, #4]
	  HAL_Delay(100);
 8000fec:	2064      	movs	r0, #100	; 0x64
 8000fee:	f000 ff17 	bl	8001e20 <HAL_Delay>
	  LED_Write(led);
 8000ff2:	e7e8      	b.n	8000fc6 <main+0x56>
 8000ff4:	88888889 	.word	0x88888889

08000ff8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b094      	sub	sp, #80	; 0x50
 8000ffc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ffe:	f107 0318 	add.w	r3, r7, #24
 8001002:	2238      	movs	r2, #56	; 0x38
 8001004:	2100      	movs	r1, #0
 8001006:	4618      	mov	r0, r3
 8001008:	f00c fab8 	bl	800d57c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800100c:	1d3b      	adds	r3, r7, #4
 800100e:	2200      	movs	r2, #0
 8001010:	601a      	str	r2, [r3, #0]
 8001012:	605a      	str	r2, [r3, #4]
 8001014:	609a      	str	r2, [r3, #8]
 8001016:	60da      	str	r2, [r3, #12]
 8001018:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800101a:	2000      	movs	r0, #0
 800101c:	f004 f9de 	bl	80053dc <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8001020:	2321      	movs	r3, #33	; 0x21
 8001022:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001024:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001028:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800102a:	2301      	movs	r3, #1
 800102c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800102e:	2302      	movs	r3, #2
 8001030:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001032:	2303      	movs	r3, #3
 8001034:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8001036:	2304      	movs	r3, #4
 8001038:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800103a:	2355      	movs	r3, #85	; 0x55
 800103c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800103e:	2302      	movs	r3, #2
 8001040:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 8001042:	2304      	movs	r3, #4
 8001044:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001046:	2302      	movs	r3, #2
 8001048:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800104a:	f107 0318 	add.w	r3, r7, #24
 800104e:	4618      	mov	r0, r3
 8001050:	f004 fa68 	bl	8005524 <HAL_RCC_OscConfig>
 8001054:	4603      	mov	r3, r0
 8001056:	2b00      	cmp	r3, #0
 8001058:	d001      	beq.n	800105e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800105a:	f000 f82b 	bl	80010b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800105e:	230f      	movs	r3, #15
 8001060:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001062:	2303      	movs	r3, #3
 8001064:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001066:	2300      	movs	r3, #0
 8001068:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800106a:	2300      	movs	r3, #0
 800106c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800106e:	2300      	movs	r3, #0
 8001070:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001072:	1d3b      	adds	r3, r7, #4
 8001074:	2104      	movs	r1, #4
 8001076:	4618      	mov	r0, r3
 8001078:	f004 fd6c 	bl	8005b54 <HAL_RCC_ClockConfig>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	d001      	beq.n	8001086 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8001082:	f000 f817 	bl	80010b4 <Error_Handler>
  }
}
 8001086:	bf00      	nop
 8001088:	3750      	adds	r7, #80	; 0x50
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
	...

08001090 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b082      	sub	sp, #8
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	4a04      	ldr	r2, [pc, #16]	; (80010b0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800109e:	4293      	cmp	r3, r2
 80010a0:	d101      	bne.n	80010a6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80010a2:	f000 fe9f 	bl	8001de4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80010a6:	bf00      	nop
 80010a8:	3708      	adds	r7, #8
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	40001000 	.word	0x40001000

080010b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010b4:	b480      	push	{r7}
 80010b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010b8:	b672      	cpsid	i
}
 80010ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010bc:	e7fe      	b.n	80010bc <Error_Handler+0x8>
	...

080010c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010c0:	b480      	push	{r7}
 80010c2:	b083      	sub	sp, #12
 80010c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010c6:	4b0f      	ldr	r3, [pc, #60]	; (8001104 <HAL_MspInit+0x44>)
 80010c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010ca:	4a0e      	ldr	r2, [pc, #56]	; (8001104 <HAL_MspInit+0x44>)
 80010cc:	f043 0301 	orr.w	r3, r3, #1
 80010d0:	6613      	str	r3, [r2, #96]	; 0x60
 80010d2:	4b0c      	ldr	r3, [pc, #48]	; (8001104 <HAL_MspInit+0x44>)
 80010d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010d6:	f003 0301 	and.w	r3, r3, #1
 80010da:	607b      	str	r3, [r7, #4]
 80010dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010de:	4b09      	ldr	r3, [pc, #36]	; (8001104 <HAL_MspInit+0x44>)
 80010e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010e2:	4a08      	ldr	r2, [pc, #32]	; (8001104 <HAL_MspInit+0x44>)
 80010e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010e8:	6593      	str	r3, [r2, #88]	; 0x58
 80010ea:	4b06      	ldr	r3, [pc, #24]	; (8001104 <HAL_MspInit+0x44>)
 80010ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010f2:	603b      	str	r3, [r7, #0]
 80010f4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010f6:	bf00      	nop
 80010f8:	370c      	adds	r7, #12
 80010fa:	46bd      	mov	sp, r7
 80010fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001100:	4770      	bx	lr
 8001102:	bf00      	nop
 8001104:	40021000 	.word	0x40021000

08001108 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b08c      	sub	sp, #48	; 0x30
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001110:	2300      	movs	r3, #0
 8001112:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              uwPrescalerValue = 0;
 8001114:	2300      	movs	r3, #0
 8001116:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001118:	4b2c      	ldr	r3, [pc, #176]	; (80011cc <HAL_InitTick+0xc4>)
 800111a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800111c:	4a2b      	ldr	r2, [pc, #172]	; (80011cc <HAL_InitTick+0xc4>)
 800111e:	f043 0310 	orr.w	r3, r3, #16
 8001122:	6593      	str	r3, [r2, #88]	; 0x58
 8001124:	4b29      	ldr	r3, [pc, #164]	; (80011cc <HAL_InitTick+0xc4>)
 8001126:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001128:	f003 0310 	and.w	r3, r3, #16
 800112c:	60bb      	str	r3, [r7, #8]
 800112e:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001130:	f107 020c 	add.w	r2, r7, #12
 8001134:	f107 0310 	add.w	r3, r7, #16
 8001138:	4611      	mov	r1, r2
 800113a:	4618      	mov	r0, r3
 800113c:	f004 fede 	bl	8005efc <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001140:	f004 feb0 	bl	8005ea4 <HAL_RCC_GetPCLK1Freq>
 8001144:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001146:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001148:	4a21      	ldr	r2, [pc, #132]	; (80011d0 <HAL_InitTick+0xc8>)
 800114a:	fba2 2303 	umull	r2, r3, r2, r3
 800114e:	0c9b      	lsrs	r3, r3, #18
 8001150:	3b01      	subs	r3, #1
 8001152:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001154:	4b1f      	ldr	r3, [pc, #124]	; (80011d4 <HAL_InitTick+0xcc>)
 8001156:	4a20      	ldr	r2, [pc, #128]	; (80011d8 <HAL_InitTick+0xd0>)
 8001158:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800115a:	4b1e      	ldr	r3, [pc, #120]	; (80011d4 <HAL_InitTick+0xcc>)
 800115c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001160:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001162:	4a1c      	ldr	r2, [pc, #112]	; (80011d4 <HAL_InitTick+0xcc>)
 8001164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001166:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001168:	4b1a      	ldr	r3, [pc, #104]	; (80011d4 <HAL_InitTick+0xcc>)
 800116a:	2200      	movs	r2, #0
 800116c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800116e:	4b19      	ldr	r3, [pc, #100]	; (80011d4 <HAL_InitTick+0xcc>)
 8001170:	2200      	movs	r2, #0
 8001172:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 8001174:	4817      	ldr	r0, [pc, #92]	; (80011d4 <HAL_InitTick+0xcc>)
 8001176:	f005 f985 	bl	8006484 <HAL_TIM_Base_Init>
 800117a:	4603      	mov	r3, r0
 800117c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8001180:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001184:	2b00      	cmp	r3, #0
 8001186:	d11b      	bne.n	80011c0 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001188:	4812      	ldr	r0, [pc, #72]	; (80011d4 <HAL_InitTick+0xcc>)
 800118a:	f005 f9d3 	bl	8006534 <HAL_TIM_Base_Start_IT>
 800118e:	4603      	mov	r3, r0
 8001190:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8001194:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001198:	2b00      	cmp	r3, #0
 800119a:	d111      	bne.n	80011c0 <HAL_InitTick+0xb8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800119c:	2036      	movs	r0, #54	; 0x36
 800119e:	f002 f86f 	bl	8003280 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	2b0f      	cmp	r3, #15
 80011a6:	d808      	bhi.n	80011ba <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80011a8:	2200      	movs	r2, #0
 80011aa:	6879      	ldr	r1, [r7, #4]
 80011ac:	2036      	movs	r0, #54	; 0x36
 80011ae:	f002 f84d 	bl	800324c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80011b2:	4a0a      	ldr	r2, [pc, #40]	; (80011dc <HAL_InitTick+0xd4>)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	6013      	str	r3, [r2, #0]
 80011b8:	e002      	b.n	80011c0 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 80011ba:	2301      	movs	r3, #1
 80011bc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80011c0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80011c4:	4618      	mov	r0, r3
 80011c6:	3730      	adds	r7, #48	; 0x30
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	40021000 	.word	0x40021000
 80011d0:	431bde83 	.word	0x431bde83
 80011d4:	20000404 	.word	0x20000404
 80011d8:	40001000 	.word	0x40001000
 80011dc:	20000004 	.word	0x20000004

080011e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011e0:	b480      	push	{r7}
 80011e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80011e4:	e7fe      	b.n	80011e4 <NMI_Handler+0x4>

080011e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011e6:	b480      	push	{r7}
 80011e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011ea:	e7fe      	b.n	80011ea <HardFault_Handler+0x4>

080011ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011ec:	b480      	push	{r7}
 80011ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011f0:	e7fe      	b.n	80011f0 <MemManage_Handler+0x4>

080011f2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011f2:	b480      	push	{r7}
 80011f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011f6:	e7fe      	b.n	80011f6 <BusFault_Handler+0x4>

080011f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011f8:	b480      	push	{r7}
 80011fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011fc:	e7fe      	b.n	80011fc <UsageFault_Handler+0x4>

080011fe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011fe:	b480      	push	{r7}
 8001200:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001202:	bf00      	nop
 8001204:	46bd      	mov	sp, r7
 8001206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120a:	4770      	bx	lr

0800120c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800120c:	b480      	push	{r7}
 800120e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001210:	bf00      	nop
 8001212:	46bd      	mov	sp, r7
 8001214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001218:	4770      	bx	lr

0800121a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800121a:	b480      	push	{r7}
 800121c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800121e:	bf00      	nop
 8001220:	46bd      	mov	sp, r7
 8001222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001226:	4770      	bx	lr

08001228 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001228:	b480      	push	{r7}
 800122a:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800122c:	bf00      	nop
 800122e:	46bd      	mov	sp, r7
 8001230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001234:	4770      	bx	lr
	...

08001238 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800123c:	4802      	ldr	r0, [pc, #8]	; (8001248 <USB_LP_IRQHandler+0x10>)
 800123e:	f002 fca0 	bl	8003b82 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8001242:	bf00      	nop
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	20001c10 	.word	0x20001c10

0800124c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001250:	4802      	ldr	r0, [pc, #8]	; (800125c <TIM6_DAC_IRQHandler+0x10>)
 8001252:	f005 fb4f 	bl	80068f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001256:	bf00      	nop
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	20000404 	.word	0x20000404

08001260 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001260:	b480      	push	{r7}
 8001262:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001264:	4b06      	ldr	r3, [pc, #24]	; (8001280 <SystemInit+0x20>)
 8001266:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800126a:	4a05      	ldr	r2, [pc, #20]	; (8001280 <SystemInit+0x20>)
 800126c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001270:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001274:	bf00      	nop
 8001276:	46bd      	mov	sp, r7
 8001278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127c:	4770      	bx	lr
 800127e:	bf00      	nop
 8001280:	e000ed00 	.word	0xe000ed00

08001284 <MX_TIM1_Init>:
TIM_HandleTypeDef htim16;
TIM_HandleTypeDef htim17;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b08c      	sub	sp, #48	; 0x30
 8001288:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800128a:	f107 0320 	add.w	r3, r7, #32
 800128e:	2200      	movs	r2, #0
 8001290:	601a      	str	r2, [r3, #0]
 8001292:	605a      	str	r2, [r3, #4]
 8001294:	609a      	str	r2, [r3, #8]
 8001296:	60da      	str	r2, [r3, #12]
  TIM_HallSensor_InitTypeDef sConfig = {0};
 8001298:	f107 0310 	add.w	r3, r7, #16
 800129c:	2200      	movs	r2, #0
 800129e:	601a      	str	r2, [r3, #0]
 80012a0:	605a      	str	r2, [r3, #4]
 80012a2:	609a      	str	r2, [r3, #8]
 80012a4:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012a6:	1d3b      	adds	r3, r7, #4
 80012a8:	2200      	movs	r2, #0
 80012aa:	601a      	str	r2, [r3, #0]
 80012ac:	605a      	str	r2, [r3, #4]
 80012ae:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80012b0:	4b29      	ldr	r3, [pc, #164]	; (8001358 <MX_TIM1_Init+0xd4>)
 80012b2:	4a2a      	ldr	r2, [pc, #168]	; (800135c <MX_TIM1_Init+0xd8>)
 80012b4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80012b6:	4b28      	ldr	r3, [pc, #160]	; (8001358 <MX_TIM1_Init+0xd4>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012bc:	4b26      	ldr	r3, [pc, #152]	; (8001358 <MX_TIM1_Init+0xd4>)
 80012be:	2200      	movs	r2, #0
 80012c0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80012c2:	4b25      	ldr	r3, [pc, #148]	; (8001358 <MX_TIM1_Init+0xd4>)
 80012c4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80012c8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012ca:	4b23      	ldr	r3, [pc, #140]	; (8001358 <MX_TIM1_Init+0xd4>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80012d0:	4b21      	ldr	r3, [pc, #132]	; (8001358 <MX_TIM1_Init+0xd4>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012d6:	4b20      	ldr	r3, [pc, #128]	; (8001358 <MX_TIM1_Init+0xd4>)
 80012d8:	2200      	movs	r2, #0
 80012da:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80012dc:	481e      	ldr	r0, [pc, #120]	; (8001358 <MX_TIM1_Init+0xd4>)
 80012de:	f005 f8d1 	bl	8006484 <HAL_TIM_Base_Init>
 80012e2:	4603      	mov	r3, r0
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d001      	beq.n	80012ec <MX_TIM1_Init+0x68>
  {
    Error_Handler();
 80012e8:	f7ff fee4 	bl	80010b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012f0:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80012f2:	f107 0320 	add.w	r3, r7, #32
 80012f6:	4619      	mov	r1, r3
 80012f8:	4817      	ldr	r0, [pc, #92]	; (8001358 <MX_TIM1_Init+0xd4>)
 80012fa:	f005 fe2b 	bl	8006f54 <HAL_TIM_ConfigClockSource>
 80012fe:	4603      	mov	r3, r0
 8001300:	2b00      	cmp	r3, #0
 8001302:	d001      	beq.n	8001308 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 8001304:	f7ff fed6 	bl	80010b4 <Error_Handler>
  }
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001308:	2300      	movs	r3, #0
 800130a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800130c:	2300      	movs	r3, #0
 800130e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Filter = 0;
 8001310:	2300      	movs	r3, #0
 8001312:	61bb      	str	r3, [r7, #24]
  sConfig.Commutation_Delay = 0;
 8001314:	2300      	movs	r3, #0
 8001316:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_HallSensor_Init(&htim1, &sConfig) != HAL_OK)
 8001318:	f107 0310 	add.w	r3, r7, #16
 800131c:	4619      	mov	r1, r3
 800131e:	480e      	ldr	r0, [pc, #56]	; (8001358 <MX_TIM1_Init+0xd4>)
 8001320:	f006 fcee 	bl	8007d00 <HAL_TIMEx_HallSensor_Init>
 8001324:	4603      	mov	r3, r0
 8001326:	2b00      	cmp	r3, #0
 8001328:	d001      	beq.n	800132e <MX_TIM1_Init+0xaa>
  {
    Error_Handler();
 800132a:	f7ff fec3 	bl	80010b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC2REF;
 800132e:	2350      	movs	r3, #80	; 0x50
 8001330:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001332:	2300      	movs	r3, #0
 8001334:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001336:	2300      	movs	r3, #0
 8001338:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800133a:	1d3b      	adds	r3, r7, #4
 800133c:	4619      	mov	r1, r3
 800133e:	4806      	ldr	r0, [pc, #24]	; (8001358 <MX_TIM1_Init+0xd4>)
 8001340:	f006 fd98 	bl	8007e74 <HAL_TIMEx_MasterConfigSynchronization>
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
 8001348:	d001      	beq.n	800134e <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 800134a:	f7ff feb3 	bl	80010b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800134e:	bf00      	nop
 8001350:	3730      	adds	r7, #48	; 0x30
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}
 8001356:	bf00      	nop
 8001358:	20000450 	.word	0x20000450
 800135c:	40012c00 	.word	0x40012c00

08001360 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b08c      	sub	sp, #48	; 0x30
 8001364:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001366:	f107 030c 	add.w	r3, r7, #12
 800136a:	2224      	movs	r2, #36	; 0x24
 800136c:	2100      	movs	r1, #0
 800136e:	4618      	mov	r0, r3
 8001370:	f00c f904 	bl	800d57c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001374:	463b      	mov	r3, r7
 8001376:	2200      	movs	r2, #0
 8001378:	601a      	str	r2, [r3, #0]
 800137a:	605a      	str	r2, [r3, #4]
 800137c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800137e:	4b21      	ldr	r3, [pc, #132]	; (8001404 <MX_TIM3_Init+0xa4>)
 8001380:	4a21      	ldr	r2, [pc, #132]	; (8001408 <MX_TIM3_Init+0xa8>)
 8001382:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001384:	4b1f      	ldr	r3, [pc, #124]	; (8001404 <MX_TIM3_Init+0xa4>)
 8001386:	2200      	movs	r2, #0
 8001388:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800138a:	4b1e      	ldr	r3, [pc, #120]	; (8001404 <MX_TIM3_Init+0xa4>)
 800138c:	2200      	movs	r2, #0
 800138e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001390:	4b1c      	ldr	r3, [pc, #112]	; (8001404 <MX_TIM3_Init+0xa4>)
 8001392:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001396:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001398:	4b1a      	ldr	r3, [pc, #104]	; (8001404 <MX_TIM3_Init+0xa4>)
 800139a:	2200      	movs	r2, #0
 800139c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800139e:	4b19      	ldr	r3, [pc, #100]	; (8001404 <MX_TIM3_Init+0xa4>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80013a4:	2301      	movs	r3, #1
 80013a6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80013a8:	2300      	movs	r3, #0
 80013aa:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80013ac:	2301      	movs	r3, #1
 80013ae:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80013b0:	2300      	movs	r3, #0
 80013b2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80013b4:	2300      	movs	r3, #0
 80013b6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80013b8:	2300      	movs	r3, #0
 80013ba:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80013bc:	2301      	movs	r3, #1
 80013be:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80013c0:	2300      	movs	r3, #0
 80013c2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80013c4:	2300      	movs	r3, #0
 80013c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80013c8:	f107 030c 	add.w	r3, r7, #12
 80013cc:	4619      	mov	r1, r3
 80013ce:	480d      	ldr	r0, [pc, #52]	; (8001404 <MX_TIM3_Init+0xa4>)
 80013d0:	f005 f9ea 	bl	80067a8 <HAL_TIM_Encoder_Init>
 80013d4:	4603      	mov	r3, r0
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d001      	beq.n	80013de <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 80013da:	f7ff fe6b 	bl	80010b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013de:	2300      	movs	r3, #0
 80013e0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013e2:	2300      	movs	r3, #0
 80013e4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80013e6:	463b      	mov	r3, r7
 80013e8:	4619      	mov	r1, r3
 80013ea:	4806      	ldr	r0, [pc, #24]	; (8001404 <MX_TIM3_Init+0xa4>)
 80013ec:	f006 fd42 	bl	8007e74 <HAL_TIMEx_MasterConfigSynchronization>
 80013f0:	4603      	mov	r3, r0
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d001      	beq.n	80013fa <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 80013f6:	f7ff fe5d 	bl	80010b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80013fa:	bf00      	nop
 80013fc:	3730      	adds	r7, #48	; 0x30
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	2000049c 	.word	0x2000049c
 8001408:	40000400 	.word	0x40000400

0800140c <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b08c      	sub	sp, #48	; 0x30
 8001410:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001412:	f107 0320 	add.w	r3, r7, #32
 8001416:	2200      	movs	r2, #0
 8001418:	601a      	str	r2, [r3, #0]
 800141a:	605a      	str	r2, [r3, #4]
 800141c:	609a      	str	r2, [r3, #8]
 800141e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001420:	f107 0314 	add.w	r3, r7, #20
 8001424:	2200      	movs	r2, #0
 8001426:	601a      	str	r2, [r3, #0]
 8001428:	605a      	str	r2, [r3, #4]
 800142a:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800142c:	1d3b      	adds	r3, r7, #4
 800142e:	2200      	movs	r2, #0
 8001430:	601a      	str	r2, [r3, #0]
 8001432:	605a      	str	r2, [r3, #4]
 8001434:	609a      	str	r2, [r3, #8]
 8001436:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001438:	4b3e      	ldr	r3, [pc, #248]	; (8001534 <MX_TIM8_Init+0x128>)
 800143a:	4a3f      	ldr	r2, [pc, #252]	; (8001538 <MX_TIM8_Init+0x12c>)
 800143c:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 800143e:	4b3d      	ldr	r3, [pc, #244]	; (8001534 <MX_TIM8_Init+0x128>)
 8001440:	2200      	movs	r2, #0
 8001442:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001444:	4b3b      	ldr	r3, [pc, #236]	; (8001534 <MX_TIM8_Init+0x128>)
 8001446:	2200      	movs	r2, #0
 8001448:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 800144a:	4b3a      	ldr	r3, [pc, #232]	; (8001534 <MX_TIM8_Init+0x128>)
 800144c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001450:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001452:	4b38      	ldr	r3, [pc, #224]	; (8001534 <MX_TIM8_Init+0x128>)
 8001454:	2200      	movs	r2, #0
 8001456:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001458:	4b36      	ldr	r3, [pc, #216]	; (8001534 <MX_TIM8_Init+0x128>)
 800145a:	2200      	movs	r2, #0
 800145c:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800145e:	4b35      	ldr	r3, [pc, #212]	; (8001534 <MX_TIM8_Init+0x128>)
 8001460:	2200      	movs	r2, #0
 8001462:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001464:	4833      	ldr	r0, [pc, #204]	; (8001534 <MX_TIM8_Init+0x128>)
 8001466:	f005 f80d 	bl	8006484 <HAL_TIM_Base_Init>
 800146a:	4603      	mov	r3, r0
 800146c:	2b00      	cmp	r3, #0
 800146e:	d001      	beq.n	8001474 <MX_TIM8_Init+0x68>
  {
    Error_Handler();
 8001470:	f7ff fe20 	bl	80010b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001474:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001478:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 800147a:	f107 0320 	add.w	r3, r7, #32
 800147e:	4619      	mov	r1, r3
 8001480:	482c      	ldr	r0, [pc, #176]	; (8001534 <MX_TIM8_Init+0x128>)
 8001482:	f005 fd67 	bl	8006f54 <HAL_TIM_ConfigClockSource>
 8001486:	4603      	mov	r3, r0
 8001488:	2b00      	cmp	r3, #0
 800148a:	d001      	beq.n	8001490 <MX_TIM8_Init+0x84>
  {
    Error_Handler();
 800148c:	f7ff fe12 	bl	80010b4 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim8) != HAL_OK)
 8001490:	4828      	ldr	r0, [pc, #160]	; (8001534 <MX_TIM8_Init+0x128>)
 8001492:	f005 f928 	bl	80066e6 <HAL_TIM_IC_Init>
 8001496:	4603      	mov	r3, r0
 8001498:	2b00      	cmp	r3, #0
 800149a:	d001      	beq.n	80014a0 <MX_TIM8_Init+0x94>
  {
    Error_Handler();
 800149c:	f7ff fe0a 	bl	80010b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014a0:	2300      	movs	r3, #0
 80014a2:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80014a4:	2300      	movs	r3, #0
 80014a6:	61bb      	str	r3, [r7, #24]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014a8:	2300      	movs	r3, #0
 80014aa:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80014ac:	f107 0314 	add.w	r3, r7, #20
 80014b0:	4619      	mov	r1, r3
 80014b2:	4820      	ldr	r0, [pc, #128]	; (8001534 <MX_TIM8_Init+0x128>)
 80014b4:	f006 fcde 	bl	8007e74 <HAL_TIMEx_MasterConfigSynchronization>
 80014b8:	4603      	mov	r3, r0
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d001      	beq.n	80014c2 <MX_TIM8_Init+0xb6>
  {
    Error_Handler();
 80014be:	f7ff fdf9 	bl	80010b4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80014c2:	2300      	movs	r3, #0
 80014c4:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80014c6:	2301      	movs	r3, #1
 80014c8:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80014ca:	2300      	movs	r3, #0
 80014cc:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 80014ce:	2300      	movs	r3, #0
 80014d0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim8, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80014d2:	1d3b      	adds	r3, r7, #4
 80014d4:	2200      	movs	r2, #0
 80014d6:	4619      	mov	r1, r3
 80014d8:	4816      	ldr	r0, [pc, #88]	; (8001534 <MX_TIM8_Init+0x128>)
 80014da:	f005 fb8a 	bl	8006bf2 <HAL_TIM_IC_ConfigChannel>
 80014de:	4603      	mov	r3, r0
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d001      	beq.n	80014e8 <MX_TIM8_Init+0xdc>
  {
    Error_Handler();
 80014e4:	f7ff fde6 	bl	80010b4 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim8, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80014e8:	1d3b      	adds	r3, r7, #4
 80014ea:	2204      	movs	r2, #4
 80014ec:	4619      	mov	r1, r3
 80014ee:	4811      	ldr	r0, [pc, #68]	; (8001534 <MX_TIM8_Init+0x128>)
 80014f0:	f005 fb7f 	bl	8006bf2 <HAL_TIM_IC_ConfigChannel>
 80014f4:	4603      	mov	r3, r0
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d001      	beq.n	80014fe <MX_TIM8_Init+0xf2>
  {
    Error_Handler();
 80014fa:	f7ff fddb 	bl	80010b4 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim8, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 80014fe:	1d3b      	adds	r3, r7, #4
 8001500:	2208      	movs	r2, #8
 8001502:	4619      	mov	r1, r3
 8001504:	480b      	ldr	r0, [pc, #44]	; (8001534 <MX_TIM8_Init+0x128>)
 8001506:	f005 fb74 	bl	8006bf2 <HAL_TIM_IC_ConfigChannel>
 800150a:	4603      	mov	r3, r0
 800150c:	2b00      	cmp	r3, #0
 800150e:	d001      	beq.n	8001514 <MX_TIM8_Init+0x108>
  {
    Error_Handler();
 8001510:	f7ff fdd0 	bl	80010b4 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim8, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8001514:	1d3b      	adds	r3, r7, #4
 8001516:	220c      	movs	r2, #12
 8001518:	4619      	mov	r1, r3
 800151a:	4806      	ldr	r0, [pc, #24]	; (8001534 <MX_TIM8_Init+0x128>)
 800151c:	f005 fb69 	bl	8006bf2 <HAL_TIM_IC_ConfigChannel>
 8001520:	4603      	mov	r3, r0
 8001522:	2b00      	cmp	r3, #0
 8001524:	d001      	beq.n	800152a <MX_TIM8_Init+0x11e>
  {
    Error_Handler();
 8001526:	f7ff fdc5 	bl	80010b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 800152a:	bf00      	nop
 800152c:	3730      	adds	r7, #48	; 0x30
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}
 8001532:	bf00      	nop
 8001534:	200004e8 	.word	0x200004e8
 8001538:	40013400 	.word	0x40013400

0800153c <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b08c      	sub	sp, #48	; 0x30
 8001540:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001542:	f107 0320 	add.w	r3, r7, #32
 8001546:	2200      	movs	r2, #0
 8001548:	601a      	str	r2, [r3, #0]
 800154a:	605a      	str	r2, [r3, #4]
 800154c:	609a      	str	r2, [r3, #8]
 800154e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001550:	f107 0314 	add.w	r3, r7, #20
 8001554:	2200      	movs	r2, #0
 8001556:	601a      	str	r2, [r3, #0]
 8001558:	605a      	str	r2, [r3, #4]
 800155a:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800155c:	1d3b      	adds	r3, r7, #4
 800155e:	2200      	movs	r2, #0
 8001560:	601a      	str	r2, [r3, #0]
 8001562:	605a      	str	r2, [r3, #4]
 8001564:	609a      	str	r2, [r3, #8]
 8001566:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8001568:	4b32      	ldr	r3, [pc, #200]	; (8001634 <MX_TIM15_Init+0xf8>)
 800156a:	4a33      	ldr	r2, [pc, #204]	; (8001638 <MX_TIM15_Init+0xfc>)
 800156c:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 800156e:	4b31      	ldr	r3, [pc, #196]	; (8001634 <MX_TIM15_Init+0xf8>)
 8001570:	2200      	movs	r2, #0
 8001572:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001574:	4b2f      	ldr	r3, [pc, #188]	; (8001634 <MX_TIM15_Init+0xf8>)
 8001576:	2200      	movs	r2, #0
 8001578:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 800157a:	4b2e      	ldr	r3, [pc, #184]	; (8001634 <MX_TIM15_Init+0xf8>)
 800157c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001580:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001582:	4b2c      	ldr	r3, [pc, #176]	; (8001634 <MX_TIM15_Init+0xf8>)
 8001584:	2200      	movs	r2, #0
 8001586:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8001588:	4b2a      	ldr	r3, [pc, #168]	; (8001634 <MX_TIM15_Init+0xf8>)
 800158a:	2200      	movs	r2, #0
 800158c:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800158e:	4b29      	ldr	r3, [pc, #164]	; (8001634 <MX_TIM15_Init+0xf8>)
 8001590:	2200      	movs	r2, #0
 8001592:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8001594:	4827      	ldr	r0, [pc, #156]	; (8001634 <MX_TIM15_Init+0xf8>)
 8001596:	f004 ff75 	bl	8006484 <HAL_TIM_Base_Init>
 800159a:	4603      	mov	r3, r0
 800159c:	2b00      	cmp	r3, #0
 800159e:	d001      	beq.n	80015a4 <MX_TIM15_Init+0x68>
  {
    Error_Handler();
 80015a0:	f7ff fd88 	bl	80010b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015a8:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 80015aa:	f107 0320 	add.w	r3, r7, #32
 80015ae:	4619      	mov	r1, r3
 80015b0:	4820      	ldr	r0, [pc, #128]	; (8001634 <MX_TIM15_Init+0xf8>)
 80015b2:	f005 fccf 	bl	8006f54 <HAL_TIM_ConfigClockSource>
 80015b6:	4603      	mov	r3, r0
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d001      	beq.n	80015c0 <MX_TIM15_Init+0x84>
  {
    Error_Handler();
 80015bc:	f7ff fd7a 	bl	80010b4 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim15) != HAL_OK)
 80015c0:	481c      	ldr	r0, [pc, #112]	; (8001634 <MX_TIM15_Init+0xf8>)
 80015c2:	f005 f890 	bl	80066e6 <HAL_TIM_IC_Init>
 80015c6:	4603      	mov	r3, r0
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d001      	beq.n	80015d0 <MX_TIM15_Init+0x94>
  {
    Error_Handler();
 80015cc:	f7ff fd72 	bl	80010b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015d0:	2300      	movs	r3, #0
 80015d2:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015d4:	2300      	movs	r3, #0
 80015d6:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 80015d8:	f107 0314 	add.w	r3, r7, #20
 80015dc:	4619      	mov	r1, r3
 80015de:	4815      	ldr	r0, [pc, #84]	; (8001634 <MX_TIM15_Init+0xf8>)
 80015e0:	f006 fc48 	bl	8007e74 <HAL_TIMEx_MasterConfigSynchronization>
 80015e4:	4603      	mov	r3, r0
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d001      	beq.n	80015ee <MX_TIM15_Init+0xb2>
  {
    Error_Handler();
 80015ea:	f7ff fd63 	bl	80010b4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80015ee:	2300      	movs	r3, #0
 80015f0:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80015f2:	2301      	movs	r3, #1
 80015f4:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80015f6:	2300      	movs	r3, #0
 80015f8:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 80015fa:	2300      	movs	r3, #0
 80015fc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim15, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80015fe:	1d3b      	adds	r3, r7, #4
 8001600:	2200      	movs	r2, #0
 8001602:	4619      	mov	r1, r3
 8001604:	480b      	ldr	r0, [pc, #44]	; (8001634 <MX_TIM15_Init+0xf8>)
 8001606:	f005 faf4 	bl	8006bf2 <HAL_TIM_IC_ConfigChannel>
 800160a:	4603      	mov	r3, r0
 800160c:	2b00      	cmp	r3, #0
 800160e:	d001      	beq.n	8001614 <MX_TIM15_Init+0xd8>
  {
    Error_Handler();
 8001610:	f7ff fd50 	bl	80010b4 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim15, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001614:	1d3b      	adds	r3, r7, #4
 8001616:	2204      	movs	r2, #4
 8001618:	4619      	mov	r1, r3
 800161a:	4806      	ldr	r0, [pc, #24]	; (8001634 <MX_TIM15_Init+0xf8>)
 800161c:	f005 fae9 	bl	8006bf2 <HAL_TIM_IC_ConfigChannel>
 8001620:	4603      	mov	r3, r0
 8001622:	2b00      	cmp	r3, #0
 8001624:	d001      	beq.n	800162a <MX_TIM15_Init+0xee>
  {
    Error_Handler();
 8001626:	f7ff fd45 	bl	80010b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 800162a:	bf00      	nop
 800162c:	3730      	adds	r7, #48	; 0x30
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}
 8001632:	bf00      	nop
 8001634:	20000534 	.word	0x20000534
 8001638:	40014000 	.word	0x40014000

0800163c <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b094      	sub	sp, #80	; 0x50
 8001640:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001642:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001646:	2200      	movs	r2, #0
 8001648:	601a      	str	r2, [r3, #0]
 800164a:	605a      	str	r2, [r3, #4]
 800164c:	609a      	str	r2, [r3, #8]
 800164e:	60da      	str	r2, [r3, #12]
 8001650:	611a      	str	r2, [r3, #16]
 8001652:	615a      	str	r2, [r3, #20]
 8001654:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001656:	463b      	mov	r3, r7
 8001658:	2234      	movs	r2, #52	; 0x34
 800165a:	2100      	movs	r1, #0
 800165c:	4618      	mov	r0, r3
 800165e:	f00b ff8d 	bl	800d57c <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001662:	4b31      	ldr	r3, [pc, #196]	; (8001728 <MX_TIM16_Init+0xec>)
 8001664:	4a31      	ldr	r2, [pc, #196]	; (800172c <MX_TIM16_Init+0xf0>)
 8001666:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 8001668:	4b2f      	ldr	r3, [pc, #188]	; (8001728 <MX_TIM16_Init+0xec>)
 800166a:	2200      	movs	r2, #0
 800166c:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800166e:	4b2e      	ldr	r3, [pc, #184]	; (8001728 <MX_TIM16_Init+0xec>)
 8001670:	2200      	movs	r2, #0
 8001672:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 8001674:	4b2c      	ldr	r3, [pc, #176]	; (8001728 <MX_TIM16_Init+0xec>)
 8001676:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800167a:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800167c:	4b2a      	ldr	r3, [pc, #168]	; (8001728 <MX_TIM16_Init+0xec>)
 800167e:	2200      	movs	r2, #0
 8001680:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8001682:	4b29      	ldr	r3, [pc, #164]	; (8001728 <MX_TIM16_Init+0xec>)
 8001684:	2200      	movs	r2, #0
 8001686:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001688:	4b27      	ldr	r3, [pc, #156]	; (8001728 <MX_TIM16_Init+0xec>)
 800168a:	2200      	movs	r2, #0
 800168c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800168e:	4826      	ldr	r0, [pc, #152]	; (8001728 <MX_TIM16_Init+0xec>)
 8001690:	f004 fef8 	bl	8006484 <HAL_TIM_Base_Init>
 8001694:	4603      	mov	r3, r0
 8001696:	2b00      	cmp	r3, #0
 8001698:	d001      	beq.n	800169e <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 800169a:	f7ff fd0b 	bl	80010b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 800169e:	4822      	ldr	r0, [pc, #136]	; (8001728 <MX_TIM16_Init+0xec>)
 80016a0:	f004 ffc0 	bl	8006624 <HAL_TIM_PWM_Init>
 80016a4:	4603      	mov	r3, r0
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d001      	beq.n	80016ae <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 80016aa:	f7ff fd03 	bl	80010b4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80016ae:	2360      	movs	r3, #96	; 0x60
 80016b0:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 0;
 80016b2:	2300      	movs	r3, #0
 80016b4:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016b6:	2300      	movs	r3, #0
 80016b8:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80016ba:	2300      	movs	r3, #0
 80016bc:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80016be:	2300      	movs	r3, #0
 80016c0:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80016c2:	2300      	movs	r3, #0
 80016c4:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80016c6:	2300      	movs	r3, #0
 80016c8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80016ca:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80016ce:	2200      	movs	r2, #0
 80016d0:	4619      	mov	r1, r3
 80016d2:	4815      	ldr	r0, [pc, #84]	; (8001728 <MX_TIM16_Init+0xec>)
 80016d4:	f005 fb2a 	bl	8006d2c <HAL_TIM_PWM_ConfigChannel>
 80016d8:	4603      	mov	r3, r0
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d001      	beq.n	80016e2 <MX_TIM16_Init+0xa6>
  {
    Error_Handler();
 80016de:	f7ff fce9 	bl	80010b4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80016e2:	2300      	movs	r3, #0
 80016e4:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80016e6:	2300      	movs	r3, #0
 80016e8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80016ea:	2300      	movs	r3, #0
 80016ec:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80016ee:	2300      	movs	r3, #0
 80016f0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80016f2:	2300      	movs	r3, #0
 80016f4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80016f6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80016fa:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80016fc:	2300      	movs	r3, #0
 80016fe:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001700:	2300      	movs	r3, #0
 8001702:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8001704:	463b      	mov	r3, r7
 8001706:	4619      	mov	r1, r3
 8001708:	4807      	ldr	r0, [pc, #28]	; (8001728 <MX_TIM16_Init+0xec>)
 800170a:	f006 fc49 	bl	8007fa0 <HAL_TIMEx_ConfigBreakDeadTime>
 800170e:	4603      	mov	r3, r0
 8001710:	2b00      	cmp	r3, #0
 8001712:	d001      	beq.n	8001718 <MX_TIM16_Init+0xdc>
  {
    Error_Handler();
 8001714:	f7ff fcce 	bl	80010b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 8001718:	4803      	ldr	r0, [pc, #12]	; (8001728 <MX_TIM16_Init+0xec>)
 800171a:	f000 f993 	bl	8001a44 <HAL_TIM_MspPostInit>

}
 800171e:	bf00      	nop
 8001720:	3750      	adds	r7, #80	; 0x50
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop
 8001728:	20000580 	.word	0x20000580
 800172c:	40014400 	.word	0x40014400

08001730 <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b094      	sub	sp, #80	; 0x50
 8001734:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001736:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800173a:	2200      	movs	r2, #0
 800173c:	601a      	str	r2, [r3, #0]
 800173e:	605a      	str	r2, [r3, #4]
 8001740:	609a      	str	r2, [r3, #8]
 8001742:	60da      	str	r2, [r3, #12]
 8001744:	611a      	str	r2, [r3, #16]
 8001746:	615a      	str	r2, [r3, #20]
 8001748:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800174a:	463b      	mov	r3, r7
 800174c:	2234      	movs	r2, #52	; 0x34
 800174e:	2100      	movs	r1, #0
 8001750:	4618      	mov	r0, r3
 8001752:	f00b ff13 	bl	800d57c <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8001756:	4b31      	ldr	r3, [pc, #196]	; (800181c <MX_TIM17_Init+0xec>)
 8001758:	4a31      	ldr	r2, [pc, #196]	; (8001820 <MX_TIM17_Init+0xf0>)
 800175a:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 0;
 800175c:	4b2f      	ldr	r3, [pc, #188]	; (800181c <MX_TIM17_Init+0xec>)
 800175e:	2200      	movs	r2, #0
 8001760:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001762:	4b2e      	ldr	r3, [pc, #184]	; (800181c <MX_TIM17_Init+0xec>)
 8001764:	2200      	movs	r2, #0
 8001766:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 65535;
 8001768:	4b2c      	ldr	r3, [pc, #176]	; (800181c <MX_TIM17_Init+0xec>)
 800176a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800176e:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001770:	4b2a      	ldr	r3, [pc, #168]	; (800181c <MX_TIM17_Init+0xec>)
 8001772:	2200      	movs	r2, #0
 8001774:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8001776:	4b29      	ldr	r3, [pc, #164]	; (800181c <MX_TIM17_Init+0xec>)
 8001778:	2200      	movs	r2, #0
 800177a:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800177c:	4b27      	ldr	r3, [pc, #156]	; (800181c <MX_TIM17_Init+0xec>)
 800177e:	2200      	movs	r2, #0
 8001780:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8001782:	4826      	ldr	r0, [pc, #152]	; (800181c <MX_TIM17_Init+0xec>)
 8001784:	f004 fe7e 	bl	8006484 <HAL_TIM_Base_Init>
 8001788:	4603      	mov	r3, r0
 800178a:	2b00      	cmp	r3, #0
 800178c:	d001      	beq.n	8001792 <MX_TIM17_Init+0x62>
  {
    Error_Handler();
 800178e:	f7ff fc91 	bl	80010b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 8001792:	4822      	ldr	r0, [pc, #136]	; (800181c <MX_TIM17_Init+0xec>)
 8001794:	f004 ff46 	bl	8006624 <HAL_TIM_PWM_Init>
 8001798:	4603      	mov	r3, r0
 800179a:	2b00      	cmp	r3, #0
 800179c:	d001      	beq.n	80017a2 <MX_TIM17_Init+0x72>
  {
    Error_Handler();
 800179e:	f7ff fc89 	bl	80010b4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80017a2:	2360      	movs	r3, #96	; 0x60
 80017a4:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 0;
 80017a6:	2300      	movs	r3, #0
 80017a8:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80017aa:	2300      	movs	r3, #0
 80017ac:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80017ae:	2300      	movs	r3, #0
 80017b0:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80017b2:	2300      	movs	r3, #0
 80017b4:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80017b6:	2300      	movs	r3, #0
 80017b8:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80017ba:	2300      	movs	r3, #0
 80017bc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80017be:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80017c2:	2200      	movs	r2, #0
 80017c4:	4619      	mov	r1, r3
 80017c6:	4815      	ldr	r0, [pc, #84]	; (800181c <MX_TIM17_Init+0xec>)
 80017c8:	f005 fab0 	bl	8006d2c <HAL_TIM_PWM_ConfigChannel>
 80017cc:	4603      	mov	r3, r0
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d001      	beq.n	80017d6 <MX_TIM17_Init+0xa6>
  {
    Error_Handler();
 80017d2:	f7ff fc6f 	bl	80010b4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80017d6:	2300      	movs	r3, #0
 80017d8:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80017da:	2300      	movs	r3, #0
 80017dc:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80017de:	2300      	movs	r3, #0
 80017e0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80017e2:	2300      	movs	r3, #0
 80017e4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80017e6:	2300      	movs	r3, #0
 80017e8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80017ea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80017ee:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80017f0:	2300      	movs	r3, #0
 80017f2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80017f4:	2300      	movs	r3, #0
 80017f6:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 80017f8:	463b      	mov	r3, r7
 80017fa:	4619      	mov	r1, r3
 80017fc:	4807      	ldr	r0, [pc, #28]	; (800181c <MX_TIM17_Init+0xec>)
 80017fe:	f006 fbcf 	bl	8007fa0 <HAL_TIMEx_ConfigBreakDeadTime>
 8001802:	4603      	mov	r3, r0
 8001804:	2b00      	cmp	r3, #0
 8001806:	d001      	beq.n	800180c <MX_TIM17_Init+0xdc>
  {
    Error_Handler();
 8001808:	f7ff fc54 	bl	80010b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 800180c:	4803      	ldr	r0, [pc, #12]	; (800181c <MX_TIM17_Init+0xec>)
 800180e:	f000 f919 	bl	8001a44 <HAL_TIM_MspPostInit>

}
 8001812:	bf00      	nop
 8001814:	3750      	adds	r7, #80	; 0x50
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}
 800181a:	bf00      	nop
 800181c:	200005cc 	.word	0x200005cc
 8001820:	40014800 	.word	0x40014800

08001824 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b090      	sub	sp, #64	; 0x40
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800182c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001830:	2200      	movs	r2, #0
 8001832:	601a      	str	r2, [r3, #0]
 8001834:	605a      	str	r2, [r3, #4]
 8001836:	609a      	str	r2, [r3, #8]
 8001838:	60da      	str	r2, [r3, #12]
 800183a:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4a58      	ldr	r2, [pc, #352]	; (80019a4 <HAL_TIM_Base_MspInit+0x180>)
 8001842:	4293      	cmp	r3, r2
 8001844:	d128      	bne.n	8001898 <HAL_TIM_Base_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001846:	4b58      	ldr	r3, [pc, #352]	; (80019a8 <HAL_TIM_Base_MspInit+0x184>)
 8001848:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800184a:	4a57      	ldr	r2, [pc, #348]	; (80019a8 <HAL_TIM_Base_MspInit+0x184>)
 800184c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001850:	6613      	str	r3, [r2, #96]	; 0x60
 8001852:	4b55      	ldr	r3, [pc, #340]	; (80019a8 <HAL_TIM_Base_MspInit+0x184>)
 8001854:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001856:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800185a:	62bb      	str	r3, [r7, #40]	; 0x28
 800185c:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800185e:	4b52      	ldr	r3, [pc, #328]	; (80019a8 <HAL_TIM_Base_MspInit+0x184>)
 8001860:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001862:	4a51      	ldr	r2, [pc, #324]	; (80019a8 <HAL_TIM_Base_MspInit+0x184>)
 8001864:	f043 0304 	orr.w	r3, r3, #4
 8001868:	64d3      	str	r3, [r2, #76]	; 0x4c
 800186a:	4b4f      	ldr	r3, [pc, #316]	; (80019a8 <HAL_TIM_Base_MspInit+0x184>)
 800186c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800186e:	f003 0304 	and.w	r3, r3, #4
 8001872:	627b      	str	r3, [r7, #36]	; 0x24
 8001874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2
    PC2     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8001876:	2307      	movs	r3, #7
 8001878:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800187a:	2302      	movs	r3, #2
 800187c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800187e:	2300      	movs	r3, #0
 8001880:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001882:	2300      	movs	r3, #0
 8001884:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8001886:	2302      	movs	r3, #2
 8001888:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800188a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800188e:	4619      	mov	r1, r3
 8001890:	4846      	ldr	r0, [pc, #280]	; (80019ac <HAL_TIM_Base_MspInit+0x188>)
 8001892:	f001 fdaf 	bl	80033f4 <HAL_GPIO_Init>
    __HAL_RCC_TIM17_CLK_ENABLE();
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 8001896:	e080      	b.n	800199a <HAL_TIM_Base_MspInit+0x176>
  else if(tim_baseHandle->Instance==TIM8)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4a44      	ldr	r2, [pc, #272]	; (80019b0 <HAL_TIM_Base_MspInit+0x18c>)
 800189e:	4293      	cmp	r3, r2
 80018a0:	d129      	bne.n	80018f6 <HAL_TIM_Base_MspInit+0xd2>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80018a2:	4b41      	ldr	r3, [pc, #260]	; (80019a8 <HAL_TIM_Base_MspInit+0x184>)
 80018a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018a6:	4a40      	ldr	r2, [pc, #256]	; (80019a8 <HAL_TIM_Base_MspInit+0x184>)
 80018a8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80018ac:	6613      	str	r3, [r2, #96]	; 0x60
 80018ae:	4b3e      	ldr	r3, [pc, #248]	; (80019a8 <HAL_TIM_Base_MspInit+0x184>)
 80018b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018b2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80018b6:	623b      	str	r3, [r7, #32]
 80018b8:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80018ba:	4b3b      	ldr	r3, [pc, #236]	; (80019a8 <HAL_TIM_Base_MspInit+0x184>)
 80018bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018be:	4a3a      	ldr	r2, [pc, #232]	; (80019a8 <HAL_TIM_Base_MspInit+0x184>)
 80018c0:	f043 0304 	orr.w	r3, r3, #4
 80018c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018c6:	4b38      	ldr	r3, [pc, #224]	; (80019a8 <HAL_TIM_Base_MspInit+0x184>)
 80018c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018ca:	f003 0304 	and.w	r3, r3, #4
 80018ce:	61fb      	str	r3, [r7, #28]
 80018d0:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 80018d2:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80018d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018d8:	2302      	movs	r3, #2
 80018da:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018dc:	2300      	movs	r3, #0
 80018de:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018e0:	2300      	movs	r3, #0
 80018e2:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 80018e4:	2304      	movs	r3, #4
 80018e6:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018e8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018ec:	4619      	mov	r1, r3
 80018ee:	482f      	ldr	r0, [pc, #188]	; (80019ac <HAL_TIM_Base_MspInit+0x188>)
 80018f0:	f001 fd80 	bl	80033f4 <HAL_GPIO_Init>
}
 80018f4:	e051      	b.n	800199a <HAL_TIM_Base_MspInit+0x176>
  else if(tim_baseHandle->Instance==TIM15)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	4a2e      	ldr	r2, [pc, #184]	; (80019b4 <HAL_TIM_Base_MspInit+0x190>)
 80018fc:	4293      	cmp	r3, r2
 80018fe:	d129      	bne.n	8001954 <HAL_TIM_Base_MspInit+0x130>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8001900:	4b29      	ldr	r3, [pc, #164]	; (80019a8 <HAL_TIM_Base_MspInit+0x184>)
 8001902:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001904:	4a28      	ldr	r2, [pc, #160]	; (80019a8 <HAL_TIM_Base_MspInit+0x184>)
 8001906:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800190a:	6613      	str	r3, [r2, #96]	; 0x60
 800190c:	4b26      	ldr	r3, [pc, #152]	; (80019a8 <HAL_TIM_Base_MspInit+0x184>)
 800190e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001910:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001914:	61bb      	str	r3, [r7, #24]
 8001916:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001918:	4b23      	ldr	r3, [pc, #140]	; (80019a8 <HAL_TIM_Base_MspInit+0x184>)
 800191a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800191c:	4a22      	ldr	r2, [pc, #136]	; (80019a8 <HAL_TIM_Base_MspInit+0x184>)
 800191e:	f043 0301 	orr.w	r3, r3, #1
 8001922:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001924:	4b20      	ldr	r3, [pc, #128]	; (80019a8 <HAL_TIM_Base_MspInit+0x184>)
 8001926:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001928:	f003 0301 	and.w	r3, r3, #1
 800192c:	617b      	str	r3, [r7, #20]
 800192e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001930:	230c      	movs	r3, #12
 8001932:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001934:	2302      	movs	r3, #2
 8001936:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001938:	2300      	movs	r3, #0
 800193a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800193c:	2300      	movs	r3, #0
 800193e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM15;
 8001940:	2309      	movs	r3, #9
 8001942:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001944:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001948:	4619      	mov	r1, r3
 800194a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800194e:	f001 fd51 	bl	80033f4 <HAL_GPIO_Init>
}
 8001952:	e022      	b.n	800199a <HAL_TIM_Base_MspInit+0x176>
  else if(tim_baseHandle->Instance==TIM16)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4a17      	ldr	r2, [pc, #92]	; (80019b8 <HAL_TIM_Base_MspInit+0x194>)
 800195a:	4293      	cmp	r3, r2
 800195c:	d10c      	bne.n	8001978 <HAL_TIM_Base_MspInit+0x154>
    __HAL_RCC_TIM16_CLK_ENABLE();
 800195e:	4b12      	ldr	r3, [pc, #72]	; (80019a8 <HAL_TIM_Base_MspInit+0x184>)
 8001960:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001962:	4a11      	ldr	r2, [pc, #68]	; (80019a8 <HAL_TIM_Base_MspInit+0x184>)
 8001964:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001968:	6613      	str	r3, [r2, #96]	; 0x60
 800196a:	4b0f      	ldr	r3, [pc, #60]	; (80019a8 <HAL_TIM_Base_MspInit+0x184>)
 800196c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800196e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001972:	613b      	str	r3, [r7, #16]
 8001974:	693b      	ldr	r3, [r7, #16]
}
 8001976:	e010      	b.n	800199a <HAL_TIM_Base_MspInit+0x176>
  else if(tim_baseHandle->Instance==TIM17)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4a0f      	ldr	r2, [pc, #60]	; (80019bc <HAL_TIM_Base_MspInit+0x198>)
 800197e:	4293      	cmp	r3, r2
 8001980:	d10b      	bne.n	800199a <HAL_TIM_Base_MspInit+0x176>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8001982:	4b09      	ldr	r3, [pc, #36]	; (80019a8 <HAL_TIM_Base_MspInit+0x184>)
 8001984:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001986:	4a08      	ldr	r2, [pc, #32]	; (80019a8 <HAL_TIM_Base_MspInit+0x184>)
 8001988:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800198c:	6613      	str	r3, [r2, #96]	; 0x60
 800198e:	4b06      	ldr	r3, [pc, #24]	; (80019a8 <HAL_TIM_Base_MspInit+0x184>)
 8001990:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001992:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001996:	60fb      	str	r3, [r7, #12]
 8001998:	68fb      	ldr	r3, [r7, #12]
}
 800199a:	bf00      	nop
 800199c:	3740      	adds	r7, #64	; 0x40
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	bf00      	nop
 80019a4:	40012c00 	.word	0x40012c00
 80019a8:	40021000 	.word	0x40021000
 80019ac:	48000800 	.word	0x48000800
 80019b0:	40013400 	.word	0x40013400
 80019b4:	40014000 	.word	0x40014000
 80019b8:	40014400 	.word	0x40014400
 80019bc:	40014800 	.word	0x40014800

080019c0 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b08a      	sub	sp, #40	; 0x28
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019c8:	f107 0314 	add.w	r3, r7, #20
 80019cc:	2200      	movs	r2, #0
 80019ce:	601a      	str	r2, [r3, #0]
 80019d0:	605a      	str	r2, [r3, #4]
 80019d2:	609a      	str	r2, [r3, #8]
 80019d4:	60da      	str	r2, [r3, #12]
 80019d6:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4a17      	ldr	r2, [pc, #92]	; (8001a3c <HAL_TIM_Encoder_MspInit+0x7c>)
 80019de:	4293      	cmp	r3, r2
 80019e0:	d128      	bne.n	8001a34 <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80019e2:	4b17      	ldr	r3, [pc, #92]	; (8001a40 <HAL_TIM_Encoder_MspInit+0x80>)
 80019e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019e6:	4a16      	ldr	r2, [pc, #88]	; (8001a40 <HAL_TIM_Encoder_MspInit+0x80>)
 80019e8:	f043 0302 	orr.w	r3, r3, #2
 80019ec:	6593      	str	r3, [r2, #88]	; 0x58
 80019ee:	4b14      	ldr	r3, [pc, #80]	; (8001a40 <HAL_TIM_Encoder_MspInit+0x80>)
 80019f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019f2:	f003 0302 	and.w	r3, r3, #2
 80019f6:	613b      	str	r3, [r7, #16]
 80019f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019fa:	4b11      	ldr	r3, [pc, #68]	; (8001a40 <HAL_TIM_Encoder_MspInit+0x80>)
 80019fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019fe:	4a10      	ldr	r2, [pc, #64]	; (8001a40 <HAL_TIM_Encoder_MspInit+0x80>)
 8001a00:	f043 0301 	orr.w	r3, r3, #1
 8001a04:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a06:	4b0e      	ldr	r3, [pc, #56]	; (8001a40 <HAL_TIM_Encoder_MspInit+0x80>)
 8001a08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a0a:	f003 0301 	and.w	r3, r3, #1
 8001a0e:	60fb      	str	r3, [r7, #12]
 8001a10:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001a12:	23c0      	movs	r3, #192	; 0xc0
 8001a14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a16:	2302      	movs	r3, #2
 8001a18:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001a22:	2302      	movs	r3, #2
 8001a24:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a26:	f107 0314 	add.w	r3, r7, #20
 8001a2a:	4619      	mov	r1, r3
 8001a2c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a30:	f001 fce0 	bl	80033f4 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001a34:	bf00      	nop
 8001a36:	3728      	adds	r7, #40	; 0x28
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bd80      	pop	{r7, pc}
 8001a3c:	40000400 	.word	0x40000400
 8001a40:	40021000 	.word	0x40021000

08001a44 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b08a      	sub	sp, #40	; 0x28
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a4c:	f107 0314 	add.w	r3, r7, #20
 8001a50:	2200      	movs	r2, #0
 8001a52:	601a      	str	r2, [r3, #0]
 8001a54:	605a      	str	r2, [r3, #4]
 8001a56:	609a      	str	r2, [r3, #8]
 8001a58:	60da      	str	r2, [r3, #12]
 8001a5a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM16)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	4a22      	ldr	r2, [pc, #136]	; (8001aec <HAL_TIM_MspPostInit+0xa8>)
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d11c      	bne.n	8001aa0 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM16_MspPostInit 0 */

  /* USER CODE END TIM16_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a66:	4b22      	ldr	r3, [pc, #136]	; (8001af0 <HAL_TIM_MspPostInit+0xac>)
 8001a68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a6a:	4a21      	ldr	r2, [pc, #132]	; (8001af0 <HAL_TIM_MspPostInit+0xac>)
 8001a6c:	f043 0302 	orr.w	r3, r3, #2
 8001a70:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a72:	4b1f      	ldr	r3, [pc, #124]	; (8001af0 <HAL_TIM_MspPostInit+0xac>)
 8001a74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a76:	f003 0302 	and.w	r3, r3, #2
 8001a7a:	613b      	str	r3, [r7, #16]
 8001a7c:	693b      	ldr	r3, [r7, #16]
    /**TIM16 GPIO Configuration
    PB4     ------> TIM16_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001a7e:	2310      	movs	r3, #16
 8001a80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a82:	2302      	movs	r3, #2
 8001a84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a86:	2300      	movs	r3, #0
 8001a88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 8001a8e:	2301      	movs	r3, #1
 8001a90:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a92:	f107 0314 	add.w	r3, r7, #20
 8001a96:	4619      	mov	r1, r3
 8001a98:	4816      	ldr	r0, [pc, #88]	; (8001af4 <HAL_TIM_MspPostInit+0xb0>)
 8001a9a:	f001 fcab 	bl	80033f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 8001a9e:	e020      	b.n	8001ae2 <HAL_TIM_MspPostInit+0x9e>
  else if(timHandle->Instance==TIM17)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	4a14      	ldr	r2, [pc, #80]	; (8001af8 <HAL_TIM_MspPostInit+0xb4>)
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	d11b      	bne.n	8001ae2 <HAL_TIM_MspPostInit+0x9e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001aaa:	4b11      	ldr	r3, [pc, #68]	; (8001af0 <HAL_TIM_MspPostInit+0xac>)
 8001aac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001aae:	4a10      	ldr	r2, [pc, #64]	; (8001af0 <HAL_TIM_MspPostInit+0xac>)
 8001ab0:	f043 0302 	orr.w	r3, r3, #2
 8001ab4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ab6:	4b0e      	ldr	r3, [pc, #56]	; (8001af0 <HAL_TIM_MspPostInit+0xac>)
 8001ab8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001aba:	f003 0302 	and.w	r3, r3, #2
 8001abe:	60fb      	str	r3, [r7, #12]
 8001ac0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001ac2:	2320      	movs	r3, #32
 8001ac4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ac6:	2302      	movs	r3, #2
 8001ac8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aca:	2300      	movs	r3, #0
 8001acc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM17;
 8001ad2:	230a      	movs	r3, #10
 8001ad4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ad6:	f107 0314 	add.w	r3, r7, #20
 8001ada:	4619      	mov	r1, r3
 8001adc:	4805      	ldr	r0, [pc, #20]	; (8001af4 <HAL_TIM_MspPostInit+0xb0>)
 8001ade:	f001 fc89 	bl	80033f4 <HAL_GPIO_Init>
}
 8001ae2:	bf00      	nop
 8001ae4:	3728      	adds	r7, #40	; 0x28
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}
 8001aea:	bf00      	nop
 8001aec:	40014400 	.word	0x40014400
 8001af0:	40021000 	.word	0x40021000
 8001af4:	48000400 	.word	0x48000400
 8001af8:	40014800 	.word	0x40014800

08001afc <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001b00:	4b22      	ldr	r3, [pc, #136]	; (8001b8c <MX_USART1_UART_Init+0x90>)
 8001b02:	4a23      	ldr	r2, [pc, #140]	; (8001b90 <MX_USART1_UART_Init+0x94>)
 8001b04:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001b06:	4b21      	ldr	r3, [pc, #132]	; (8001b8c <MX_USART1_UART_Init+0x90>)
 8001b08:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001b0c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001b0e:	4b1f      	ldr	r3, [pc, #124]	; (8001b8c <MX_USART1_UART_Init+0x90>)
 8001b10:	2200      	movs	r2, #0
 8001b12:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001b14:	4b1d      	ldr	r3, [pc, #116]	; (8001b8c <MX_USART1_UART_Init+0x90>)
 8001b16:	2200      	movs	r2, #0
 8001b18:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001b1a:	4b1c      	ldr	r3, [pc, #112]	; (8001b8c <MX_USART1_UART_Init+0x90>)
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001b20:	4b1a      	ldr	r3, [pc, #104]	; (8001b8c <MX_USART1_UART_Init+0x90>)
 8001b22:	220c      	movs	r2, #12
 8001b24:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b26:	4b19      	ldr	r3, [pc, #100]	; (8001b8c <MX_USART1_UART_Init+0x90>)
 8001b28:	2200      	movs	r2, #0
 8001b2a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b2c:	4b17      	ldr	r3, [pc, #92]	; (8001b8c <MX_USART1_UART_Init+0x90>)
 8001b2e:	2200      	movs	r2, #0
 8001b30:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001b32:	4b16      	ldr	r3, [pc, #88]	; (8001b8c <MX_USART1_UART_Init+0x90>)
 8001b34:	2200      	movs	r2, #0
 8001b36:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001b38:	4b14      	ldr	r3, [pc, #80]	; (8001b8c <MX_USART1_UART_Init+0x90>)
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001b3e:	4b13      	ldr	r3, [pc, #76]	; (8001b8c <MX_USART1_UART_Init+0x90>)
 8001b40:	2200      	movs	r2, #0
 8001b42:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001b44:	4811      	ldr	r0, [pc, #68]	; (8001b8c <MX_USART1_UART_Init+0x90>)
 8001b46:	f006 fb23 	bl	8008190 <HAL_UART_Init>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d001      	beq.n	8001b54 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001b50:	f7ff fab0 	bl	80010b4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001b54:	2100      	movs	r1, #0
 8001b56:	480d      	ldr	r0, [pc, #52]	; (8001b8c <MX_USART1_UART_Init+0x90>)
 8001b58:	f007 f854 	bl	8008c04 <HAL_UARTEx_SetTxFifoThreshold>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d001      	beq.n	8001b66 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001b62:	f7ff faa7 	bl	80010b4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001b66:	2100      	movs	r1, #0
 8001b68:	4808      	ldr	r0, [pc, #32]	; (8001b8c <MX_USART1_UART_Init+0x90>)
 8001b6a:	f007 f889 	bl	8008c80 <HAL_UARTEx_SetRxFifoThreshold>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d001      	beq.n	8001b78 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001b74:	f7ff fa9e 	bl	80010b4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001b78:	4804      	ldr	r0, [pc, #16]	; (8001b8c <MX_USART1_UART_Init+0x90>)
 8001b7a:	f007 f80a 	bl	8008b92 <HAL_UARTEx_DisableFifoMode>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d001      	beq.n	8001b88 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001b84:	f7ff fa96 	bl	80010b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001b88:	bf00      	nop
 8001b8a:	bd80      	pop	{r7, pc}
 8001b8c:	20000618 	.word	0x20000618
 8001b90:	40013800 	.word	0x40013800

08001b94 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001b98:	4b22      	ldr	r3, [pc, #136]	; (8001c24 <MX_USART3_UART_Init+0x90>)
 8001b9a:	4a23      	ldr	r2, [pc, #140]	; (8001c28 <MX_USART3_UART_Init+0x94>)
 8001b9c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001b9e:	4b21      	ldr	r3, [pc, #132]	; (8001c24 <MX_USART3_UART_Init+0x90>)
 8001ba0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001ba4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001ba6:	4b1f      	ldr	r3, [pc, #124]	; (8001c24 <MX_USART3_UART_Init+0x90>)
 8001ba8:	2200      	movs	r2, #0
 8001baa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001bac:	4b1d      	ldr	r3, [pc, #116]	; (8001c24 <MX_USART3_UART_Init+0x90>)
 8001bae:	2200      	movs	r2, #0
 8001bb0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001bb2:	4b1c      	ldr	r3, [pc, #112]	; (8001c24 <MX_USART3_UART_Init+0x90>)
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001bb8:	4b1a      	ldr	r3, [pc, #104]	; (8001c24 <MX_USART3_UART_Init+0x90>)
 8001bba:	220c      	movs	r2, #12
 8001bbc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001bbe:	4b19      	ldr	r3, [pc, #100]	; (8001c24 <MX_USART3_UART_Init+0x90>)
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001bc4:	4b17      	ldr	r3, [pc, #92]	; (8001c24 <MX_USART3_UART_Init+0x90>)
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001bca:	4b16      	ldr	r3, [pc, #88]	; (8001c24 <MX_USART3_UART_Init+0x90>)
 8001bcc:	2200      	movs	r2, #0
 8001bce:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001bd0:	4b14      	ldr	r3, [pc, #80]	; (8001c24 <MX_USART3_UART_Init+0x90>)
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001bd6:	4b13      	ldr	r3, [pc, #76]	; (8001c24 <MX_USART3_UART_Init+0x90>)
 8001bd8:	2200      	movs	r2, #0
 8001bda:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001bdc:	4811      	ldr	r0, [pc, #68]	; (8001c24 <MX_USART3_UART_Init+0x90>)
 8001bde:	f006 fad7 	bl	8008190 <HAL_UART_Init>
 8001be2:	4603      	mov	r3, r0
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d001      	beq.n	8001bec <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001be8:	f7ff fa64 	bl	80010b4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001bec:	2100      	movs	r1, #0
 8001bee:	480d      	ldr	r0, [pc, #52]	; (8001c24 <MX_USART3_UART_Init+0x90>)
 8001bf0:	f007 f808 	bl	8008c04 <HAL_UARTEx_SetTxFifoThreshold>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d001      	beq.n	8001bfe <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001bfa:	f7ff fa5b 	bl	80010b4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001bfe:	2100      	movs	r1, #0
 8001c00:	4808      	ldr	r0, [pc, #32]	; (8001c24 <MX_USART3_UART_Init+0x90>)
 8001c02:	f007 f83d 	bl	8008c80 <HAL_UARTEx_SetRxFifoThreshold>
 8001c06:	4603      	mov	r3, r0
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d001      	beq.n	8001c10 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001c0c:	f7ff fa52 	bl	80010b4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001c10:	4804      	ldr	r0, [pc, #16]	; (8001c24 <MX_USART3_UART_Init+0x90>)
 8001c12:	f006 ffbe 	bl	8008b92 <HAL_UARTEx_DisableFifoMode>
 8001c16:	4603      	mov	r3, r0
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d001      	beq.n	8001c20 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001c1c:	f7ff fa4a 	bl	80010b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001c20:	bf00      	nop
 8001c22:	bd80      	pop	{r7, pc}
 8001c24:	200006a8 	.word	0x200006a8
 8001c28:	40004800 	.word	0x40004800

08001c2c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b0a0      	sub	sp, #128	; 0x80
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c34:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001c38:	2200      	movs	r2, #0
 8001c3a:	601a      	str	r2, [r3, #0]
 8001c3c:	605a      	str	r2, [r3, #4]
 8001c3e:	609a      	str	r2, [r3, #8]
 8001c40:	60da      	str	r2, [r3, #12]
 8001c42:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001c44:	f107 0318 	add.w	r3, r7, #24
 8001c48:	2254      	movs	r2, #84	; 0x54
 8001c4a:	2100      	movs	r1, #0
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	f00b fc95 	bl	800d57c <memset>
  if(uartHandle->Instance==USART1)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4a3d      	ldr	r2, [pc, #244]	; (8001d4c <HAL_UART_MspInit+0x120>)
 8001c58:	4293      	cmp	r3, r2
 8001c5a:	d136      	bne.n	8001cca <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001c5c:	2301      	movs	r3, #1
 8001c5e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001c60:	2300      	movs	r3, #0
 8001c62:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c64:	f107 0318 	add.w	r3, r7, #24
 8001c68:	4618      	mov	r0, r3
 8001c6a:	f004 f9bd 	bl	8005fe8 <HAL_RCCEx_PeriphCLKConfig>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d001      	beq.n	8001c78 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001c74:	f7ff fa1e 	bl	80010b4 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001c78:	4b35      	ldr	r3, [pc, #212]	; (8001d50 <HAL_UART_MspInit+0x124>)
 8001c7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c7c:	4a34      	ldr	r2, [pc, #208]	; (8001d50 <HAL_UART_MspInit+0x124>)
 8001c7e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c82:	6613      	str	r3, [r2, #96]	; 0x60
 8001c84:	4b32      	ldr	r3, [pc, #200]	; (8001d50 <HAL_UART_MspInit+0x124>)
 8001c86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c88:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c8c:	617b      	str	r3, [r7, #20]
 8001c8e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c90:	4b2f      	ldr	r3, [pc, #188]	; (8001d50 <HAL_UART_MspInit+0x124>)
 8001c92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c94:	4a2e      	ldr	r2, [pc, #184]	; (8001d50 <HAL_UART_MspInit+0x124>)
 8001c96:	f043 0304 	orr.w	r3, r3, #4
 8001c9a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c9c:	4b2c      	ldr	r3, [pc, #176]	; (8001d50 <HAL_UART_MspInit+0x124>)
 8001c9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ca0:	f003 0304 	and.w	r3, r3, #4
 8001ca4:	613b      	str	r3, [r7, #16]
 8001ca6:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001ca8:	2330      	movs	r3, #48	; 0x30
 8001caa:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cac:	2302      	movs	r3, #2
 8001cae:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001cb8:	2307      	movs	r3, #7
 8001cba:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cbc:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001cc0:	4619      	mov	r1, r3
 8001cc2:	4824      	ldr	r0, [pc, #144]	; (8001d54 <HAL_UART_MspInit+0x128>)
 8001cc4:	f001 fb96 	bl	80033f4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001cc8:	e03b      	b.n	8001d42 <HAL_UART_MspInit+0x116>
  else if(uartHandle->Instance==USART3)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	4a22      	ldr	r2, [pc, #136]	; (8001d58 <HAL_UART_MspInit+0x12c>)
 8001cd0:	4293      	cmp	r3, r2
 8001cd2:	d136      	bne.n	8001d42 <HAL_UART_MspInit+0x116>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001cd4:	2304      	movs	r3, #4
 8001cd6:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001cdc:	f107 0318 	add.w	r3, r7, #24
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	f004 f981 	bl	8005fe8 <HAL_RCCEx_PeriphCLKConfig>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d001      	beq.n	8001cf0 <HAL_UART_MspInit+0xc4>
      Error_Handler();
 8001cec:	f7ff f9e2 	bl	80010b4 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001cf0:	4b17      	ldr	r3, [pc, #92]	; (8001d50 <HAL_UART_MspInit+0x124>)
 8001cf2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cf4:	4a16      	ldr	r2, [pc, #88]	; (8001d50 <HAL_UART_MspInit+0x124>)
 8001cf6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001cfa:	6593      	str	r3, [r2, #88]	; 0x58
 8001cfc:	4b14      	ldr	r3, [pc, #80]	; (8001d50 <HAL_UART_MspInit+0x124>)
 8001cfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d00:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d04:	60fb      	str	r3, [r7, #12]
 8001d06:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d08:	4b11      	ldr	r3, [pc, #68]	; (8001d50 <HAL_UART_MspInit+0x124>)
 8001d0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d0c:	4a10      	ldr	r2, [pc, #64]	; (8001d50 <HAL_UART_MspInit+0x124>)
 8001d0e:	f043 0302 	orr.w	r3, r3, #2
 8001d12:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d14:	4b0e      	ldr	r3, [pc, #56]	; (8001d50 <HAL_UART_MspInit+0x124>)
 8001d16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d18:	f003 0302 	and.w	r3, r3, #2
 8001d1c:	60bb      	str	r3, [r7, #8]
 8001d1e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001d20:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001d24:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d26:	2302      	movs	r3, #2
 8001d28:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001d32:	2307      	movs	r3, #7
 8001d34:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d36:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001d3a:	4619      	mov	r1, r3
 8001d3c:	4807      	ldr	r0, [pc, #28]	; (8001d5c <HAL_UART_MspInit+0x130>)
 8001d3e:	f001 fb59 	bl	80033f4 <HAL_GPIO_Init>
}
 8001d42:	bf00      	nop
 8001d44:	3780      	adds	r7, #128	; 0x80
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}
 8001d4a:	bf00      	nop
 8001d4c:	40013800 	.word	0x40013800
 8001d50:	40021000 	.word	0x40021000
 8001d54:	48000800 	.word	0x48000800
 8001d58:	40004800 	.word	0x40004800
 8001d5c:	48000400 	.word	0x48000400

08001d60 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001d60:	480d      	ldr	r0, [pc, #52]	; (8001d98 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001d62:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d64:	480d      	ldr	r0, [pc, #52]	; (8001d9c <LoopForever+0x6>)
  ldr r1, =_edata
 8001d66:	490e      	ldr	r1, [pc, #56]	; (8001da0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001d68:	4a0e      	ldr	r2, [pc, #56]	; (8001da4 <LoopForever+0xe>)
  movs r3, #0
 8001d6a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001d6c:	e002      	b.n	8001d74 <LoopCopyDataInit>

08001d6e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d6e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d70:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d72:	3304      	adds	r3, #4

08001d74 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d74:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d76:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d78:	d3f9      	bcc.n	8001d6e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d7a:	4a0b      	ldr	r2, [pc, #44]	; (8001da8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001d7c:	4c0b      	ldr	r4, [pc, #44]	; (8001dac <LoopForever+0x16>)
  movs r3, #0
 8001d7e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d80:	e001      	b.n	8001d86 <LoopFillZerobss>

08001d82 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d82:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d84:	3204      	adds	r2, #4

08001d86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d86:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d88:	d3fb      	bcc.n	8001d82 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001d8a:	f7ff fa69 	bl	8001260 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001d8e:	f00b fbd1 	bl	800d534 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001d92:	f7ff f8ed 	bl	8000f70 <main>

08001d96 <LoopForever>:

LoopForever:
    b LoopForever
 8001d96:	e7fe      	b.n	8001d96 <LoopForever>
  ldr   r0, =_estack
 8001d98:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001d9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001da0:	20000184 	.word	0x20000184
  ldr r2, =_sidata
 8001da4:	0800d63c 	.word	0x0800d63c
  ldr r2, =_sbss
 8001da8:	20000184 	.word	0x20000184
  ldr r4, =_ebss
 8001dac:	20002124 	.word	0x20002124

08001db0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001db0:	e7fe      	b.n	8001db0 <ADC1_2_IRQHandler>

08001db2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001db2:	b580      	push	{r7, lr}
 8001db4:	b082      	sub	sp, #8
 8001db6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001db8:	2300      	movs	r3, #0
 8001dba:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001dbc:	2003      	movs	r0, #3
 8001dbe:	f001 fa3a 	bl	8003236 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001dc2:	200f      	movs	r0, #15
 8001dc4:	f7ff f9a0 	bl	8001108 <HAL_InitTick>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d002      	beq.n	8001dd4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001dce:	2301      	movs	r3, #1
 8001dd0:	71fb      	strb	r3, [r7, #7]
 8001dd2:	e001      	b.n	8001dd8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001dd4:	f7ff f974 	bl	80010c0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001dd8:	79fb      	ldrb	r3, [r7, #7]

}
 8001dda:	4618      	mov	r0, r3
 8001ddc:	3708      	adds	r7, #8
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}
	...

08001de4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001de4:	b480      	push	{r7}
 8001de6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001de8:	4b05      	ldr	r3, [pc, #20]	; (8001e00 <HAL_IncTick+0x1c>)
 8001dea:	681a      	ldr	r2, [r3, #0]
 8001dec:	4b05      	ldr	r3, [pc, #20]	; (8001e04 <HAL_IncTick+0x20>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4413      	add	r3, r2
 8001df2:	4a03      	ldr	r2, [pc, #12]	; (8001e00 <HAL_IncTick+0x1c>)
 8001df4:	6013      	str	r3, [r2, #0]
}
 8001df6:	bf00      	nop
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfe:	4770      	bx	lr
 8001e00:	20000738 	.word	0x20000738
 8001e04:	20000008 	.word	0x20000008

08001e08 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	af00      	add	r7, sp, #0
  return uwTick;
 8001e0c:	4b03      	ldr	r3, [pc, #12]	; (8001e1c <HAL_GetTick+0x14>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
}
 8001e10:	4618      	mov	r0, r3
 8001e12:	46bd      	mov	sp, r7
 8001e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e18:	4770      	bx	lr
 8001e1a:	bf00      	nop
 8001e1c:	20000738 	.word	0x20000738

08001e20 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b084      	sub	sp, #16
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e28:	f7ff ffee 	bl	8001e08 <HAL_GetTick>
 8001e2c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001e38:	d004      	beq.n	8001e44 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e3a:	4b09      	ldr	r3, [pc, #36]	; (8001e60 <HAL_Delay+0x40>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	68fa      	ldr	r2, [r7, #12]
 8001e40:	4413      	add	r3, r2
 8001e42:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001e44:	bf00      	nop
 8001e46:	f7ff ffdf 	bl	8001e08 <HAL_GetTick>
 8001e4a:	4602      	mov	r2, r0
 8001e4c:	68bb      	ldr	r3, [r7, #8]
 8001e4e:	1ad3      	subs	r3, r2, r3
 8001e50:	68fa      	ldr	r2, [r7, #12]
 8001e52:	429a      	cmp	r2, r3
 8001e54:	d8f7      	bhi.n	8001e46 <HAL_Delay+0x26>
  {
  }
}
 8001e56:	bf00      	nop
 8001e58:	bf00      	nop
 8001e5a:	3710      	adds	r7, #16
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	bd80      	pop	{r7, pc}
 8001e60:	20000008 	.word	0x20000008

08001e64 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001e64:	b480      	push	{r7}
 8001e66:	b083      	sub	sp, #12
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
 8001e6c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	689b      	ldr	r3, [r3, #8]
 8001e72:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	431a      	orrs	r2, r3
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	609a      	str	r2, [r3, #8]
}
 8001e7e:	bf00      	nop
 8001e80:	370c      	adds	r7, #12
 8001e82:	46bd      	mov	sp, r7
 8001e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e88:	4770      	bx	lr

08001e8a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001e8a:	b480      	push	{r7}
 8001e8c:	b083      	sub	sp, #12
 8001e8e:	af00      	add	r7, sp, #0
 8001e90:	6078      	str	r0, [r7, #4]
 8001e92:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	689b      	ldr	r3, [r3, #8]
 8001e98:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	431a      	orrs	r2, r3
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	609a      	str	r2, [r3, #8]
}
 8001ea4:	bf00      	nop
 8001ea6:	370c      	adds	r7, #12
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eae:	4770      	bx	lr

08001eb0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	b083      	sub	sp, #12
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	689b      	ldr	r3, [r3, #8]
 8001ebc:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	370c      	adds	r7, #12
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eca:	4770      	bx	lr

08001ecc <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	b087      	sub	sp, #28
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	60f8      	str	r0, [r7, #12]
 8001ed4:	60b9      	str	r1, [r7, #8]
 8001ed6:	607a      	str	r2, [r7, #4]
 8001ed8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	3360      	adds	r3, #96	; 0x60
 8001ede:	461a      	mov	r2, r3
 8001ee0:	68bb      	ldr	r3, [r7, #8]
 8001ee2:	009b      	lsls	r3, r3, #2
 8001ee4:	4413      	add	r3, r2
 8001ee6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001ee8:	697b      	ldr	r3, [r7, #20]
 8001eea:	681a      	ldr	r2, [r3, #0]
 8001eec:	4b08      	ldr	r3, [pc, #32]	; (8001f10 <LL_ADC_SetOffset+0x44>)
 8001eee:	4013      	ands	r3, r2
 8001ef0:	687a      	ldr	r2, [r7, #4]
 8001ef2:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001ef6:	683a      	ldr	r2, [r7, #0]
 8001ef8:	430a      	orrs	r2, r1
 8001efa:	4313      	orrs	r3, r2
 8001efc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001f00:	697b      	ldr	r3, [r7, #20]
 8001f02:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001f04:	bf00      	nop
 8001f06:	371c      	adds	r7, #28
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0e:	4770      	bx	lr
 8001f10:	03fff000 	.word	0x03fff000

08001f14 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b085      	sub	sp, #20
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
 8001f1c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	3360      	adds	r3, #96	; 0x60
 8001f22:	461a      	mov	r2, r3
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	009b      	lsls	r3, r3, #2
 8001f28:	4413      	add	r3, r2
 8001f2a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001f34:	4618      	mov	r0, r3
 8001f36:	3714      	adds	r7, #20
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3e:	4770      	bx	lr

08001f40 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001f40:	b480      	push	{r7}
 8001f42:	b087      	sub	sp, #28
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	60f8      	str	r0, [r7, #12]
 8001f48:	60b9      	str	r1, [r7, #8]
 8001f4a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	3360      	adds	r3, #96	; 0x60
 8001f50:	461a      	mov	r2, r3
 8001f52:	68bb      	ldr	r3, [r7, #8]
 8001f54:	009b      	lsls	r3, r3, #2
 8001f56:	4413      	add	r3, r2
 8001f58:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001f5a:	697b      	ldr	r3, [r7, #20]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	431a      	orrs	r2, r3
 8001f66:	697b      	ldr	r3, [r7, #20]
 8001f68:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001f6a:	bf00      	nop
 8001f6c:	371c      	adds	r7, #28
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f74:	4770      	bx	lr

08001f76 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001f76:	b480      	push	{r7}
 8001f78:	b087      	sub	sp, #28
 8001f7a:	af00      	add	r7, sp, #0
 8001f7c:	60f8      	str	r0, [r7, #12]
 8001f7e:	60b9      	str	r1, [r7, #8]
 8001f80:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	3360      	adds	r3, #96	; 0x60
 8001f86:	461a      	mov	r2, r3
 8001f88:	68bb      	ldr	r3, [r7, #8]
 8001f8a:	009b      	lsls	r3, r3, #2
 8001f8c:	4413      	add	r3, r2
 8001f8e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001f90:	697b      	ldr	r3, [r7, #20]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	431a      	orrs	r2, r3
 8001f9c:	697b      	ldr	r3, [r7, #20]
 8001f9e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001fa0:	bf00      	nop
 8001fa2:	371c      	adds	r7, #28
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001faa:	4770      	bx	lr

08001fac <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001fac:	b480      	push	{r7}
 8001fae:	b087      	sub	sp, #28
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	60f8      	str	r0, [r7, #12]
 8001fb4:	60b9      	str	r1, [r7, #8]
 8001fb6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	3360      	adds	r3, #96	; 0x60
 8001fbc:	461a      	mov	r2, r3
 8001fbe:	68bb      	ldr	r3, [r7, #8]
 8001fc0:	009b      	lsls	r3, r3, #2
 8001fc2:	4413      	add	r3, r2
 8001fc4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001fc6:	697b      	ldr	r3, [r7, #20]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	431a      	orrs	r2, r3
 8001fd2:	697b      	ldr	r3, [r7, #20]
 8001fd4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8001fd6:	bf00      	nop
 8001fd8:	371c      	adds	r7, #28
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe0:	4770      	bx	lr

08001fe2 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001fe2:	b480      	push	{r7}
 8001fe4:	b083      	sub	sp, #12
 8001fe6:	af00      	add	r7, sp, #0
 8001fe8:	6078      	str	r0, [r7, #4]
 8001fea:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	695b      	ldr	r3, [r3, #20]
 8001ff0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	431a      	orrs	r2, r3
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	615a      	str	r2, [r3, #20]
}
 8001ffc:	bf00      	nop
 8001ffe:	370c      	adds	r7, #12
 8002000:	46bd      	mov	sp, r7
 8002002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002006:	4770      	bx	lr

08002008 <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002008:	b480      	push	{r7}
 800200a:	b087      	sub	sp, #28
 800200c:	af00      	add	r7, sp, #0
 800200e:	60f8      	str	r0, [r7, #12]
 8002010:	60b9      	str	r1, [r7, #8]
 8002012:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	3330      	adds	r3, #48	; 0x30
 8002018:	461a      	mov	r2, r3
 800201a:	68bb      	ldr	r3, [r7, #8]
 800201c:	0a1b      	lsrs	r3, r3, #8
 800201e:	009b      	lsls	r3, r3, #2
 8002020:	f003 030c 	and.w	r3, r3, #12
 8002024:	4413      	add	r3, r2
 8002026:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002028:	697b      	ldr	r3, [r7, #20]
 800202a:	681a      	ldr	r2, [r3, #0]
 800202c:	68bb      	ldr	r3, [r7, #8]
 800202e:	f003 031f 	and.w	r3, r3, #31
 8002032:	211f      	movs	r1, #31
 8002034:	fa01 f303 	lsl.w	r3, r1, r3
 8002038:	43db      	mvns	r3, r3
 800203a:	401a      	ands	r2, r3
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	0e9b      	lsrs	r3, r3, #26
 8002040:	f003 011f 	and.w	r1, r3, #31
 8002044:	68bb      	ldr	r3, [r7, #8]
 8002046:	f003 031f 	and.w	r3, r3, #31
 800204a:	fa01 f303 	lsl.w	r3, r1, r3
 800204e:	431a      	orrs	r2, r3
 8002050:	697b      	ldr	r3, [r7, #20]
 8002052:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002054:	bf00      	nop
 8002056:	371c      	adds	r7, #28
 8002058:	46bd      	mov	sp, r7
 800205a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205e:	4770      	bx	lr

08002060 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002060:	b480      	push	{r7}
 8002062:	b087      	sub	sp, #28
 8002064:	af00      	add	r7, sp, #0
 8002066:	60f8      	str	r0, [r7, #12]
 8002068:	60b9      	str	r1, [r7, #8]
 800206a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	3314      	adds	r3, #20
 8002070:	461a      	mov	r2, r3
 8002072:	68bb      	ldr	r3, [r7, #8]
 8002074:	0e5b      	lsrs	r3, r3, #25
 8002076:	009b      	lsls	r3, r3, #2
 8002078:	f003 0304 	and.w	r3, r3, #4
 800207c:	4413      	add	r3, r2
 800207e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002080:	697b      	ldr	r3, [r7, #20]
 8002082:	681a      	ldr	r2, [r3, #0]
 8002084:	68bb      	ldr	r3, [r7, #8]
 8002086:	0d1b      	lsrs	r3, r3, #20
 8002088:	f003 031f 	and.w	r3, r3, #31
 800208c:	2107      	movs	r1, #7
 800208e:	fa01 f303 	lsl.w	r3, r1, r3
 8002092:	43db      	mvns	r3, r3
 8002094:	401a      	ands	r2, r3
 8002096:	68bb      	ldr	r3, [r7, #8]
 8002098:	0d1b      	lsrs	r3, r3, #20
 800209a:	f003 031f 	and.w	r3, r3, #31
 800209e:	6879      	ldr	r1, [r7, #4]
 80020a0:	fa01 f303 	lsl.w	r3, r1, r3
 80020a4:	431a      	orrs	r2, r3
 80020a6:	697b      	ldr	r3, [r7, #20]
 80020a8:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80020aa:	bf00      	nop
 80020ac:	371c      	adds	r7, #28
 80020ae:	46bd      	mov	sp, r7
 80020b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b4:	4770      	bx	lr
	...

080020b8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80020b8:	b480      	push	{r7}
 80020ba:	b085      	sub	sp, #20
 80020bc:	af00      	add	r7, sp, #0
 80020be:	60f8      	str	r0, [r7, #12]
 80020c0:	60b9      	str	r1, [r7, #8]
 80020c2:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	4a0f      	ldr	r2, [pc, #60]	; (8002104 <LL_ADC_SetChannelSingleDiff+0x4c>)
 80020c8:	4293      	cmp	r3, r2
 80020ca:	d10a      	bne.n	80020e2 <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80020d2:	68bb      	ldr	r3, [r7, #8]
 80020d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020d8:	431a      	orrs	r2, r3
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 80020e0:	e00a      	b.n	80020f8 <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80020e8:	68bb      	ldr	r3, [r7, #8]
 80020ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020ee:	43db      	mvns	r3, r3
 80020f0:	401a      	ands	r2, r3
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 80020f8:	bf00      	nop
 80020fa:	3714      	adds	r7, #20
 80020fc:	46bd      	mov	sp, r7
 80020fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002102:	4770      	bx	lr
 8002104:	407f0000 	.word	0x407f0000

08002108 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002108:	b480      	push	{r7}
 800210a:	b083      	sub	sp, #12
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	689b      	ldr	r3, [r3, #8]
 8002114:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002118:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800211c:	687a      	ldr	r2, [r7, #4]
 800211e:	6093      	str	r3, [r2, #8]
}
 8002120:	bf00      	nop
 8002122:	370c      	adds	r7, #12
 8002124:	46bd      	mov	sp, r7
 8002126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212a:	4770      	bx	lr

0800212c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 800212c:	b480      	push	{r7}
 800212e:	b083      	sub	sp, #12
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	689b      	ldr	r3, [r3, #8]
 8002138:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800213c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002140:	d101      	bne.n	8002146 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002142:	2301      	movs	r3, #1
 8002144:	e000      	b.n	8002148 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002146:	2300      	movs	r3, #0
}
 8002148:	4618      	mov	r0, r3
 800214a:	370c      	adds	r7, #12
 800214c:	46bd      	mov	sp, r7
 800214e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002152:	4770      	bx	lr

08002154 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002154:	b480      	push	{r7}
 8002156:	b083      	sub	sp, #12
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	689b      	ldr	r3, [r3, #8]
 8002160:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002164:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002168:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002170:	bf00      	nop
 8002172:	370c      	adds	r7, #12
 8002174:	46bd      	mov	sp, r7
 8002176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217a:	4770      	bx	lr

0800217c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800217c:	b480      	push	{r7}
 800217e:	b083      	sub	sp, #12
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	689b      	ldr	r3, [r3, #8]
 8002188:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800218c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002190:	d101      	bne.n	8002196 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002192:	2301      	movs	r3, #1
 8002194:	e000      	b.n	8002198 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002196:	2300      	movs	r3, #0
}
 8002198:	4618      	mov	r0, r3
 800219a:	370c      	adds	r7, #12
 800219c:	46bd      	mov	sp, r7
 800219e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a2:	4770      	bx	lr

080021a4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80021a4:	b480      	push	{r7}
 80021a6:	b083      	sub	sp, #12
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	689b      	ldr	r3, [r3, #8]
 80021b0:	f003 0301 	and.w	r3, r3, #1
 80021b4:	2b01      	cmp	r3, #1
 80021b6:	d101      	bne.n	80021bc <LL_ADC_IsEnabled+0x18>
 80021b8:	2301      	movs	r3, #1
 80021ba:	e000      	b.n	80021be <LL_ADC_IsEnabled+0x1a>
 80021bc:	2300      	movs	r3, #0
}
 80021be:	4618      	mov	r0, r3
 80021c0:	370c      	adds	r7, #12
 80021c2:	46bd      	mov	sp, r7
 80021c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c8:	4770      	bx	lr

080021ca <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80021ca:	b480      	push	{r7}
 80021cc:	b083      	sub	sp, #12
 80021ce:	af00      	add	r7, sp, #0
 80021d0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	689b      	ldr	r3, [r3, #8]
 80021d6:	f003 0304 	and.w	r3, r3, #4
 80021da:	2b04      	cmp	r3, #4
 80021dc:	d101      	bne.n	80021e2 <LL_ADC_REG_IsConversionOngoing+0x18>
 80021de:	2301      	movs	r3, #1
 80021e0:	e000      	b.n	80021e4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80021e2:	2300      	movs	r3, #0
}
 80021e4:	4618      	mov	r0, r3
 80021e6:	370c      	adds	r7, #12
 80021e8:	46bd      	mov	sp, r7
 80021ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ee:	4770      	bx	lr

080021f0 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80021f0:	b480      	push	{r7}
 80021f2:	b083      	sub	sp, #12
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	689b      	ldr	r3, [r3, #8]
 80021fc:	f003 0308 	and.w	r3, r3, #8
 8002200:	2b08      	cmp	r3, #8
 8002202:	d101      	bne.n	8002208 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002204:	2301      	movs	r3, #1
 8002206:	e000      	b.n	800220a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002208:	2300      	movs	r3, #0
}
 800220a:	4618      	mov	r0, r3
 800220c:	370c      	adds	r7, #12
 800220e:	46bd      	mov	sp, r7
 8002210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002214:	4770      	bx	lr
	...

08002218 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002218:	b590      	push	{r4, r7, lr}
 800221a:	b089      	sub	sp, #36	; 0x24
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002220:	2300      	movs	r3, #0
 8002222:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002224:	2300      	movs	r3, #0
 8002226:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2b00      	cmp	r3, #0
 800222c:	d101      	bne.n	8002232 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800222e:	2301      	movs	r3, #1
 8002230:	e1af      	b.n	8002592 <HAL_ADC_Init+0x37a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	695b      	ldr	r3, [r3, #20]
 8002236:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800223c:	2b00      	cmp	r3, #0
 800223e:	d109      	bne.n	8002254 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002240:	6878      	ldr	r0, [r7, #4]
 8002242:	f7fe fb27 	bl	8000894 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	2200      	movs	r2, #0
 800224a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2200      	movs	r2, #0
 8002250:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4618      	mov	r0, r3
 800225a:	f7ff ff67 	bl	800212c <LL_ADC_IsDeepPowerDownEnabled>
 800225e:	4603      	mov	r3, r0
 8002260:	2b00      	cmp	r3, #0
 8002262:	d004      	beq.n	800226e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4618      	mov	r0, r3
 800226a:	f7ff ff4d 	bl	8002108 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	4618      	mov	r0, r3
 8002274:	f7ff ff82 	bl	800217c <LL_ADC_IsInternalRegulatorEnabled>
 8002278:	4603      	mov	r3, r0
 800227a:	2b00      	cmp	r3, #0
 800227c:	d115      	bne.n	80022aa <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	4618      	mov	r0, r3
 8002284:	f7ff ff66 	bl	8002154 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002288:	4b9f      	ldr	r3, [pc, #636]	; (8002508 <HAL_ADC_Init+0x2f0>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	099b      	lsrs	r3, r3, #6
 800228e:	4a9f      	ldr	r2, [pc, #636]	; (800250c <HAL_ADC_Init+0x2f4>)
 8002290:	fba2 2303 	umull	r2, r3, r2, r3
 8002294:	099b      	lsrs	r3, r3, #6
 8002296:	3301      	adds	r3, #1
 8002298:	005b      	lsls	r3, r3, #1
 800229a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800229c:	e002      	b.n	80022a4 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800229e:	68bb      	ldr	r3, [r7, #8]
 80022a0:	3b01      	subs	r3, #1
 80022a2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80022a4:	68bb      	ldr	r3, [r7, #8]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d1f9      	bne.n	800229e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	4618      	mov	r0, r3
 80022b0:	f7ff ff64 	bl	800217c <LL_ADC_IsInternalRegulatorEnabled>
 80022b4:	4603      	mov	r3, r0
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d10d      	bne.n	80022d6 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022be:	f043 0210 	orr.w	r2, r3, #16
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022ca:	f043 0201 	orr.w	r2, r3, #1
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80022d2:	2301      	movs	r3, #1
 80022d4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4618      	mov	r0, r3
 80022dc:	f7ff ff75 	bl	80021ca <LL_ADC_REG_IsConversionOngoing>
 80022e0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022e6:	f003 0310 	and.w	r3, r3, #16
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	f040 8148 	bne.w	8002580 <HAL_ADC_Init+0x368>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80022f0:	697b      	ldr	r3, [r7, #20]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	f040 8144 	bne.w	8002580 <HAL_ADC_Init+0x368>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022fc:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002300:	f043 0202 	orr.w	r2, r3, #2
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4618      	mov	r0, r3
 800230e:	f7ff ff49 	bl	80021a4 <LL_ADC_IsEnabled>
 8002312:	4603      	mov	r3, r0
 8002314:	2b00      	cmp	r3, #0
 8002316:	d141      	bne.n	800239c <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002320:	d004      	beq.n	800232c <HAL_ADC_Init+0x114>
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	4a7a      	ldr	r2, [pc, #488]	; (8002510 <HAL_ADC_Init+0x2f8>)
 8002328:	4293      	cmp	r3, r2
 800232a:	d10f      	bne.n	800234c <HAL_ADC_Init+0x134>
 800232c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002330:	f7ff ff38 	bl	80021a4 <LL_ADC_IsEnabled>
 8002334:	4604      	mov	r4, r0
 8002336:	4876      	ldr	r0, [pc, #472]	; (8002510 <HAL_ADC_Init+0x2f8>)
 8002338:	f7ff ff34 	bl	80021a4 <LL_ADC_IsEnabled>
 800233c:	4603      	mov	r3, r0
 800233e:	4323      	orrs	r3, r4
 8002340:	2b00      	cmp	r3, #0
 8002342:	bf0c      	ite	eq
 8002344:	2301      	moveq	r3, #1
 8002346:	2300      	movne	r3, #0
 8002348:	b2db      	uxtb	r3, r3
 800234a:	e012      	b.n	8002372 <HAL_ADC_Init+0x15a>
 800234c:	4871      	ldr	r0, [pc, #452]	; (8002514 <HAL_ADC_Init+0x2fc>)
 800234e:	f7ff ff29 	bl	80021a4 <LL_ADC_IsEnabled>
 8002352:	4604      	mov	r4, r0
 8002354:	4870      	ldr	r0, [pc, #448]	; (8002518 <HAL_ADC_Init+0x300>)
 8002356:	f7ff ff25 	bl	80021a4 <LL_ADC_IsEnabled>
 800235a:	4603      	mov	r3, r0
 800235c:	431c      	orrs	r4, r3
 800235e:	486f      	ldr	r0, [pc, #444]	; (800251c <HAL_ADC_Init+0x304>)
 8002360:	f7ff ff20 	bl	80021a4 <LL_ADC_IsEnabled>
 8002364:	4603      	mov	r3, r0
 8002366:	4323      	orrs	r3, r4
 8002368:	2b00      	cmp	r3, #0
 800236a:	bf0c      	ite	eq
 800236c:	2301      	moveq	r3, #1
 800236e:	2300      	movne	r3, #0
 8002370:	b2db      	uxtb	r3, r3
 8002372:	2b00      	cmp	r3, #0
 8002374:	d012      	beq.n	800239c <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800237e:	d004      	beq.n	800238a <HAL_ADC_Init+0x172>
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4a62      	ldr	r2, [pc, #392]	; (8002510 <HAL_ADC_Init+0x2f8>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d101      	bne.n	800238e <HAL_ADC_Init+0x176>
 800238a:	4a65      	ldr	r2, [pc, #404]	; (8002520 <HAL_ADC_Init+0x308>)
 800238c:	e000      	b.n	8002390 <HAL_ADC_Init+0x178>
 800238e:	4a65      	ldr	r2, [pc, #404]	; (8002524 <HAL_ADC_Init+0x30c>)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	4619      	mov	r1, r3
 8002396:	4610      	mov	r0, r2
 8002398:	f7ff fd64 	bl	8001e64 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	7f5b      	ldrb	r3, [r3, #29]
 80023a0:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80023a6:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80023ac:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80023b2:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80023ba:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80023bc:	4313      	orrs	r3, r2
 80023be:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80023c6:	2b01      	cmp	r3, #1
 80023c8:	d106      	bne.n	80023d8 <HAL_ADC_Init+0x1c0>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023ce:	3b01      	subs	r3, #1
 80023d0:	045b      	lsls	r3, r3, #17
 80023d2:	69ba      	ldr	r2, [r7, #24]
 80023d4:	4313      	orrs	r3, r2
 80023d6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d009      	beq.n	80023f4 <HAL_ADC_Init+0x1dc>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023e4:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ec:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80023ee:	69ba      	ldr	r2, [r7, #24]
 80023f0:	4313      	orrs	r3, r2
 80023f2:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	68da      	ldr	r2, [r3, #12]
 80023fa:	4b4b      	ldr	r3, [pc, #300]	; (8002528 <HAL_ADC_Init+0x310>)
 80023fc:	4013      	ands	r3, r2
 80023fe:	687a      	ldr	r2, [r7, #4]
 8002400:	6812      	ldr	r2, [r2, #0]
 8002402:	69b9      	ldr	r1, [r7, #24]
 8002404:	430b      	orrs	r3, r1
 8002406:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	691b      	ldr	r3, [r3, #16]
 800240e:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	430a      	orrs	r2, r1
 800241c:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	4618      	mov	r0, r3
 8002424:	f7ff fed1 	bl	80021ca <LL_ADC_REG_IsConversionOngoing>
 8002428:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	4618      	mov	r0, r3
 8002430:	f7ff fede 	bl	80021f0 <LL_ADC_INJ_IsConversionOngoing>
 8002434:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002436:	693b      	ldr	r3, [r7, #16]
 8002438:	2b00      	cmp	r3, #0
 800243a:	d17f      	bne.n	800253c <HAL_ADC_Init+0x324>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d17c      	bne.n	800253c <HAL_ADC_Init+0x324>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002446:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800244e:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002450:	4313      	orrs	r3, r2
 8002452:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	68db      	ldr	r3, [r3, #12]
 800245a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800245e:	f023 0302 	bic.w	r3, r3, #2
 8002462:	687a      	ldr	r2, [r7, #4]
 8002464:	6812      	ldr	r2, [r2, #0]
 8002466:	69b9      	ldr	r1, [r7, #24]
 8002468:	430b      	orrs	r3, r1
 800246a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	691b      	ldr	r3, [r3, #16]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d017      	beq.n	80024a4 <HAL_ADC_Init+0x28c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	691a      	ldr	r2, [r3, #16]
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002482:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800248c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002490:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002494:	687a      	ldr	r2, [r7, #4]
 8002496:	6911      	ldr	r1, [r2, #16]
 8002498:	687a      	ldr	r2, [r7, #4]
 800249a:	6812      	ldr	r2, [r2, #0]
 800249c:	430b      	orrs	r3, r1
 800249e:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 80024a2:	e013      	b.n	80024cc <HAL_ADC_Init+0x2b4>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	691a      	ldr	r2, [r3, #16]
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80024b2:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80024bc:	687a      	ldr	r2, [r7, #4]
 80024be:	6812      	ldr	r2, [r2, #0]
 80024c0:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80024c4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80024c8:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80024d2:	2b01      	cmp	r3, #1
 80024d4:	d12a      	bne.n	800252c <HAL_ADC_Init+0x314>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	691b      	ldr	r3, [r3, #16]
 80024dc:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80024e0:	f023 0304 	bic.w	r3, r3, #4
 80024e4:	687a      	ldr	r2, [r7, #4]
 80024e6:	6c51      	ldr	r1, [r2, #68]	; 0x44
 80024e8:	687a      	ldr	r2, [r7, #4]
 80024ea:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80024ec:	4311      	orrs	r1, r2
 80024ee:	687a      	ldr	r2, [r7, #4]
 80024f0:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80024f2:	4311      	orrs	r1, r2
 80024f4:	687a      	ldr	r2, [r7, #4]
 80024f6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80024f8:	430a      	orrs	r2, r1
 80024fa:	431a      	orrs	r2, r3
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f042 0201 	orr.w	r2, r2, #1
 8002504:	611a      	str	r2, [r3, #16]
 8002506:	e019      	b.n	800253c <HAL_ADC_Init+0x324>
 8002508:	20000000 	.word	0x20000000
 800250c:	053e2d63 	.word	0x053e2d63
 8002510:	50000100 	.word	0x50000100
 8002514:	50000400 	.word	0x50000400
 8002518:	50000500 	.word	0x50000500
 800251c:	50000600 	.word	0x50000600
 8002520:	50000300 	.word	0x50000300
 8002524:	50000700 	.word	0x50000700
 8002528:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	691a      	ldr	r2, [r3, #16]
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f022 0201 	bic.w	r2, r2, #1
 800253a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	695b      	ldr	r3, [r3, #20]
 8002540:	2b01      	cmp	r3, #1
 8002542:	d10c      	bne.n	800255e <HAL_ADC_Init+0x346>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800254a:	f023 010f 	bic.w	r1, r3, #15
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6a1b      	ldr	r3, [r3, #32]
 8002552:	1e5a      	subs	r2, r3, #1
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	430a      	orrs	r2, r1
 800255a:	631a      	str	r2, [r3, #48]	; 0x30
 800255c:	e007      	b.n	800256e <HAL_ADC_Init+0x356>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f022 020f 	bic.w	r2, r2, #15
 800256c:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002572:	f023 0303 	bic.w	r3, r3, #3
 8002576:	f043 0201 	orr.w	r2, r3, #1
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	65da      	str	r2, [r3, #92]	; 0x5c
 800257e:	e007      	b.n	8002590 <HAL_ADC_Init+0x378>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002584:	f043 0210 	orr.w	r2, r3, #16
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800258c:	2301      	movs	r3, #1
 800258e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002590:	7ffb      	ldrb	r3, [r7, #31]
}
 8002592:	4618      	mov	r0, r3
 8002594:	3724      	adds	r7, #36	; 0x24
 8002596:	46bd      	mov	sp, r7
 8002598:	bd90      	pop	{r4, r7, pc}
 800259a:	bf00      	nop

0800259c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b0b6      	sub	sp, #216	; 0xd8
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
 80025a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80025a6:	2300      	movs	r3, #0
 80025a8:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80025ac:	2300      	movs	r3, #0
 80025ae:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80025b6:	2b01      	cmp	r3, #1
 80025b8:	d102      	bne.n	80025c0 <HAL_ADC_ConfigChannel+0x24>
 80025ba:	2302      	movs	r3, #2
 80025bc:	f000 bc13 	b.w	8002de6 <HAL_ADC_ConfigChannel+0x84a>
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2201      	movs	r2, #1
 80025c4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4618      	mov	r0, r3
 80025ce:	f7ff fdfc 	bl	80021ca <LL_ADC_REG_IsConversionOngoing>
 80025d2:	4603      	mov	r3, r0
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	f040 83f3 	bne.w	8002dc0 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6818      	ldr	r0, [r3, #0]
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	6859      	ldr	r1, [r3, #4]
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	461a      	mov	r2, r3
 80025e8:	f7ff fd0e 	bl	8002008 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4618      	mov	r0, r3
 80025f2:	f7ff fdea 	bl	80021ca <LL_ADC_REG_IsConversionOngoing>
 80025f6:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4618      	mov	r0, r3
 8002600:	f7ff fdf6 	bl	80021f0 <LL_ADC_INJ_IsConversionOngoing>
 8002604:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002608:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800260c:	2b00      	cmp	r3, #0
 800260e:	f040 81d9 	bne.w	80029c4 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002612:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002616:	2b00      	cmp	r3, #0
 8002618:	f040 81d4 	bne.w	80029c4 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	689b      	ldr	r3, [r3, #8]
 8002620:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002624:	d10f      	bne.n	8002646 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6818      	ldr	r0, [r3, #0]
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	2200      	movs	r2, #0
 8002630:	4619      	mov	r1, r3
 8002632:	f7ff fd15 	bl	8002060 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800263e:	4618      	mov	r0, r3
 8002640:	f7ff fccf 	bl	8001fe2 <LL_ADC_SetSamplingTimeCommonConfig>
 8002644:	e00e      	b.n	8002664 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6818      	ldr	r0, [r3, #0]
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	6819      	ldr	r1, [r3, #0]
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	689b      	ldr	r3, [r3, #8]
 8002652:	461a      	mov	r2, r3
 8002654:	f7ff fd04 	bl	8002060 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	2100      	movs	r1, #0
 800265e:	4618      	mov	r0, r3
 8002660:	f7ff fcbf 	bl	8001fe2 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	695a      	ldr	r2, [r3, #20]
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	68db      	ldr	r3, [r3, #12]
 800266e:	08db      	lsrs	r3, r3, #3
 8002670:	f003 0303 	and.w	r3, r3, #3
 8002674:	005b      	lsls	r3, r3, #1
 8002676:	fa02 f303 	lsl.w	r3, r2, r3
 800267a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	691b      	ldr	r3, [r3, #16]
 8002682:	2b04      	cmp	r3, #4
 8002684:	d022      	beq.n	80026cc <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6818      	ldr	r0, [r3, #0]
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	6919      	ldr	r1, [r3, #16]
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	681a      	ldr	r2, [r3, #0]
 8002692:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002696:	f7ff fc19 	bl	8001ecc <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6818      	ldr	r0, [r3, #0]
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	6919      	ldr	r1, [r3, #16]
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	699b      	ldr	r3, [r3, #24]
 80026a6:	461a      	mov	r2, r3
 80026a8:	f7ff fc65 	bl	8001f76 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6818      	ldr	r0, [r3, #0]
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	6919      	ldr	r1, [r3, #16]
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	7f1b      	ldrb	r3, [r3, #28]
 80026b8:	2b01      	cmp	r3, #1
 80026ba:	d102      	bne.n	80026c2 <HAL_ADC_ConfigChannel+0x126>
 80026bc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80026c0:	e000      	b.n	80026c4 <HAL_ADC_ConfigChannel+0x128>
 80026c2:	2300      	movs	r3, #0
 80026c4:	461a      	mov	r2, r3
 80026c6:	f7ff fc71 	bl	8001fac <LL_ADC_SetOffsetSaturation>
 80026ca:	e17b      	b.n	80029c4 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	2100      	movs	r1, #0
 80026d2:	4618      	mov	r0, r3
 80026d4:	f7ff fc1e 	bl	8001f14 <LL_ADC_GetOffsetChannel>
 80026d8:	4603      	mov	r3, r0
 80026da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d10a      	bne.n	80026f8 <HAL_ADC_ConfigChannel+0x15c>
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	2100      	movs	r1, #0
 80026e8:	4618      	mov	r0, r3
 80026ea:	f7ff fc13 	bl	8001f14 <LL_ADC_GetOffsetChannel>
 80026ee:	4603      	mov	r3, r0
 80026f0:	0e9b      	lsrs	r3, r3, #26
 80026f2:	f003 021f 	and.w	r2, r3, #31
 80026f6:	e01e      	b.n	8002736 <HAL_ADC_ConfigChannel+0x19a>
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	2100      	movs	r1, #0
 80026fe:	4618      	mov	r0, r3
 8002700:	f7ff fc08 	bl	8001f14 <LL_ADC_GetOffsetChannel>
 8002704:	4603      	mov	r3, r0
 8002706:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800270a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800270e:	fa93 f3a3 	rbit	r3, r3
 8002712:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002716:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800271a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800271e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002722:	2b00      	cmp	r3, #0
 8002724:	d101      	bne.n	800272a <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8002726:	2320      	movs	r3, #32
 8002728:	e004      	b.n	8002734 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 800272a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800272e:	fab3 f383 	clz	r3, r3
 8002732:	b2db      	uxtb	r3, r3
 8002734:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800273e:	2b00      	cmp	r3, #0
 8002740:	d105      	bne.n	800274e <HAL_ADC_ConfigChannel+0x1b2>
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	0e9b      	lsrs	r3, r3, #26
 8002748:	f003 031f 	and.w	r3, r3, #31
 800274c:	e018      	b.n	8002780 <HAL_ADC_ConfigChannel+0x1e4>
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002756:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800275a:	fa93 f3a3 	rbit	r3, r3
 800275e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002762:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002766:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800276a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800276e:	2b00      	cmp	r3, #0
 8002770:	d101      	bne.n	8002776 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8002772:	2320      	movs	r3, #32
 8002774:	e004      	b.n	8002780 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8002776:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800277a:	fab3 f383 	clz	r3, r3
 800277e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002780:	429a      	cmp	r2, r3
 8002782:	d106      	bne.n	8002792 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	2200      	movs	r2, #0
 800278a:	2100      	movs	r1, #0
 800278c:	4618      	mov	r0, r3
 800278e:	f7ff fbd7 	bl	8001f40 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	2101      	movs	r1, #1
 8002798:	4618      	mov	r0, r3
 800279a:	f7ff fbbb 	bl	8001f14 <LL_ADC_GetOffsetChannel>
 800279e:	4603      	mov	r3, r0
 80027a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d10a      	bne.n	80027be <HAL_ADC_ConfigChannel+0x222>
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	2101      	movs	r1, #1
 80027ae:	4618      	mov	r0, r3
 80027b0:	f7ff fbb0 	bl	8001f14 <LL_ADC_GetOffsetChannel>
 80027b4:	4603      	mov	r3, r0
 80027b6:	0e9b      	lsrs	r3, r3, #26
 80027b8:	f003 021f 	and.w	r2, r3, #31
 80027bc:	e01e      	b.n	80027fc <HAL_ADC_ConfigChannel+0x260>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	2101      	movs	r1, #1
 80027c4:	4618      	mov	r0, r3
 80027c6:	f7ff fba5 	bl	8001f14 <LL_ADC_GetOffsetChannel>
 80027ca:	4603      	mov	r3, r0
 80027cc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027d0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80027d4:	fa93 f3a3 	rbit	r3, r3
 80027d8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80027dc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80027e0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80027e4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d101      	bne.n	80027f0 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 80027ec:	2320      	movs	r3, #32
 80027ee:	e004      	b.n	80027fa <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 80027f0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80027f4:	fab3 f383 	clz	r3, r3
 80027f8:	b2db      	uxtb	r3, r3
 80027fa:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002804:	2b00      	cmp	r3, #0
 8002806:	d105      	bne.n	8002814 <HAL_ADC_ConfigChannel+0x278>
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	0e9b      	lsrs	r3, r3, #26
 800280e:	f003 031f 	and.w	r3, r3, #31
 8002812:	e018      	b.n	8002846 <HAL_ADC_ConfigChannel+0x2aa>
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800281c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002820:	fa93 f3a3 	rbit	r3, r3
 8002824:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002828:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800282c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002830:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002834:	2b00      	cmp	r3, #0
 8002836:	d101      	bne.n	800283c <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8002838:	2320      	movs	r3, #32
 800283a:	e004      	b.n	8002846 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 800283c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002840:	fab3 f383 	clz	r3, r3
 8002844:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002846:	429a      	cmp	r2, r3
 8002848:	d106      	bne.n	8002858 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	2200      	movs	r2, #0
 8002850:	2101      	movs	r1, #1
 8002852:	4618      	mov	r0, r3
 8002854:	f7ff fb74 	bl	8001f40 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	2102      	movs	r1, #2
 800285e:	4618      	mov	r0, r3
 8002860:	f7ff fb58 	bl	8001f14 <LL_ADC_GetOffsetChannel>
 8002864:	4603      	mov	r3, r0
 8002866:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800286a:	2b00      	cmp	r3, #0
 800286c:	d10a      	bne.n	8002884 <HAL_ADC_ConfigChannel+0x2e8>
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	2102      	movs	r1, #2
 8002874:	4618      	mov	r0, r3
 8002876:	f7ff fb4d 	bl	8001f14 <LL_ADC_GetOffsetChannel>
 800287a:	4603      	mov	r3, r0
 800287c:	0e9b      	lsrs	r3, r3, #26
 800287e:	f003 021f 	and.w	r2, r3, #31
 8002882:	e01e      	b.n	80028c2 <HAL_ADC_ConfigChannel+0x326>
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	2102      	movs	r1, #2
 800288a:	4618      	mov	r0, r3
 800288c:	f7ff fb42 	bl	8001f14 <LL_ADC_GetOffsetChannel>
 8002890:	4603      	mov	r3, r0
 8002892:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002896:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800289a:	fa93 f3a3 	rbit	r3, r3
 800289e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80028a2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80028a6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80028aa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d101      	bne.n	80028b6 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 80028b2:	2320      	movs	r3, #32
 80028b4:	e004      	b.n	80028c0 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 80028b6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80028ba:	fab3 f383 	clz	r3, r3
 80028be:	b2db      	uxtb	r3, r3
 80028c0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d105      	bne.n	80028da <HAL_ADC_ConfigChannel+0x33e>
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	0e9b      	lsrs	r3, r3, #26
 80028d4:	f003 031f 	and.w	r3, r3, #31
 80028d8:	e016      	b.n	8002908 <HAL_ADC_ConfigChannel+0x36c>
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028e2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80028e6:	fa93 f3a3 	rbit	r3, r3
 80028ea:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80028ec:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80028ee:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80028f2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d101      	bne.n	80028fe <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 80028fa:	2320      	movs	r3, #32
 80028fc:	e004      	b.n	8002908 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 80028fe:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002902:	fab3 f383 	clz	r3, r3
 8002906:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002908:	429a      	cmp	r2, r3
 800290a:	d106      	bne.n	800291a <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	2200      	movs	r2, #0
 8002912:	2102      	movs	r1, #2
 8002914:	4618      	mov	r0, r3
 8002916:	f7ff fb13 	bl	8001f40 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	2103      	movs	r1, #3
 8002920:	4618      	mov	r0, r3
 8002922:	f7ff faf7 	bl	8001f14 <LL_ADC_GetOffsetChannel>
 8002926:	4603      	mov	r3, r0
 8002928:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800292c:	2b00      	cmp	r3, #0
 800292e:	d10a      	bne.n	8002946 <HAL_ADC_ConfigChannel+0x3aa>
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	2103      	movs	r1, #3
 8002936:	4618      	mov	r0, r3
 8002938:	f7ff faec 	bl	8001f14 <LL_ADC_GetOffsetChannel>
 800293c:	4603      	mov	r3, r0
 800293e:	0e9b      	lsrs	r3, r3, #26
 8002940:	f003 021f 	and.w	r2, r3, #31
 8002944:	e017      	b.n	8002976 <HAL_ADC_ConfigChannel+0x3da>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	2103      	movs	r1, #3
 800294c:	4618      	mov	r0, r3
 800294e:	f7ff fae1 	bl	8001f14 <LL_ADC_GetOffsetChannel>
 8002952:	4603      	mov	r3, r0
 8002954:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002956:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002958:	fa93 f3a3 	rbit	r3, r3
 800295c:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800295e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002960:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002962:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002964:	2b00      	cmp	r3, #0
 8002966:	d101      	bne.n	800296c <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8002968:	2320      	movs	r3, #32
 800296a:	e003      	b.n	8002974 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 800296c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800296e:	fab3 f383 	clz	r3, r3
 8002972:	b2db      	uxtb	r3, r3
 8002974:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800297e:	2b00      	cmp	r3, #0
 8002980:	d105      	bne.n	800298e <HAL_ADC_ConfigChannel+0x3f2>
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	0e9b      	lsrs	r3, r3, #26
 8002988:	f003 031f 	and.w	r3, r3, #31
 800298c:	e011      	b.n	80029b2 <HAL_ADC_ConfigChannel+0x416>
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002994:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002996:	fa93 f3a3 	rbit	r3, r3
 800299a:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 800299c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800299e:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80029a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d101      	bne.n	80029aa <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 80029a6:	2320      	movs	r3, #32
 80029a8:	e003      	b.n	80029b2 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 80029aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80029ac:	fab3 f383 	clz	r3, r3
 80029b0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80029b2:	429a      	cmp	r2, r3
 80029b4:	d106      	bne.n	80029c4 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	2200      	movs	r2, #0
 80029bc:	2103      	movs	r1, #3
 80029be:	4618      	mov	r0, r3
 80029c0:	f7ff fabe 	bl	8001f40 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4618      	mov	r0, r3
 80029ca:	f7ff fbeb 	bl	80021a4 <LL_ADC_IsEnabled>
 80029ce:	4603      	mov	r3, r0
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	f040 813d 	bne.w	8002c50 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6818      	ldr	r0, [r3, #0]
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	6819      	ldr	r1, [r3, #0]
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	68db      	ldr	r3, [r3, #12]
 80029e2:	461a      	mov	r2, r3
 80029e4:	f7ff fb68 	bl	80020b8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	68db      	ldr	r3, [r3, #12]
 80029ec:	4aa2      	ldr	r2, [pc, #648]	; (8002c78 <HAL_ADC_ConfigChannel+0x6dc>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	f040 812e 	bne.w	8002c50 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d10b      	bne.n	8002a1c <HAL_ADC_ConfigChannel+0x480>
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	0e9b      	lsrs	r3, r3, #26
 8002a0a:	3301      	adds	r3, #1
 8002a0c:	f003 031f 	and.w	r3, r3, #31
 8002a10:	2b09      	cmp	r3, #9
 8002a12:	bf94      	ite	ls
 8002a14:	2301      	movls	r3, #1
 8002a16:	2300      	movhi	r3, #0
 8002a18:	b2db      	uxtb	r3, r3
 8002a1a:	e019      	b.n	8002a50 <HAL_ADC_ConfigChannel+0x4b4>
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a22:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a24:	fa93 f3a3 	rbit	r3, r3
 8002a28:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002a2a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002a2c:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002a2e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d101      	bne.n	8002a38 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8002a34:	2320      	movs	r3, #32
 8002a36:	e003      	b.n	8002a40 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8002a38:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002a3a:	fab3 f383 	clz	r3, r3
 8002a3e:	b2db      	uxtb	r3, r3
 8002a40:	3301      	adds	r3, #1
 8002a42:	f003 031f 	and.w	r3, r3, #31
 8002a46:	2b09      	cmp	r3, #9
 8002a48:	bf94      	ite	ls
 8002a4a:	2301      	movls	r3, #1
 8002a4c:	2300      	movhi	r3, #0
 8002a4e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d079      	beq.n	8002b48 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d107      	bne.n	8002a70 <HAL_ADC_ConfigChannel+0x4d4>
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	0e9b      	lsrs	r3, r3, #26
 8002a66:	3301      	adds	r3, #1
 8002a68:	069b      	lsls	r3, r3, #26
 8002a6a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002a6e:	e015      	b.n	8002a9c <HAL_ADC_ConfigChannel+0x500>
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a78:	fa93 f3a3 	rbit	r3, r3
 8002a7c:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002a7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a80:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002a82:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d101      	bne.n	8002a8c <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8002a88:	2320      	movs	r3, #32
 8002a8a:	e003      	b.n	8002a94 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8002a8c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a8e:	fab3 f383 	clz	r3, r3
 8002a92:	b2db      	uxtb	r3, r3
 8002a94:	3301      	adds	r3, #1
 8002a96:	069b      	lsls	r3, r3, #26
 8002a98:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d109      	bne.n	8002abc <HAL_ADC_ConfigChannel+0x520>
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	0e9b      	lsrs	r3, r3, #26
 8002aae:	3301      	adds	r3, #1
 8002ab0:	f003 031f 	and.w	r3, r3, #31
 8002ab4:	2101      	movs	r1, #1
 8002ab6:	fa01 f303 	lsl.w	r3, r1, r3
 8002aba:	e017      	b.n	8002aec <HAL_ADC_ConfigChannel+0x550>
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ac2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ac4:	fa93 f3a3 	rbit	r3, r3
 8002ac8:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002aca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002acc:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002ace:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d101      	bne.n	8002ad8 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8002ad4:	2320      	movs	r3, #32
 8002ad6:	e003      	b.n	8002ae0 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8002ad8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ada:	fab3 f383 	clz	r3, r3
 8002ade:	b2db      	uxtb	r3, r3
 8002ae0:	3301      	adds	r3, #1
 8002ae2:	f003 031f 	and.w	r3, r3, #31
 8002ae6:	2101      	movs	r1, #1
 8002ae8:	fa01 f303 	lsl.w	r3, r1, r3
 8002aec:	ea42 0103 	orr.w	r1, r2, r3
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d10a      	bne.n	8002b12 <HAL_ADC_ConfigChannel+0x576>
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	0e9b      	lsrs	r3, r3, #26
 8002b02:	3301      	adds	r3, #1
 8002b04:	f003 021f 	and.w	r2, r3, #31
 8002b08:	4613      	mov	r3, r2
 8002b0a:	005b      	lsls	r3, r3, #1
 8002b0c:	4413      	add	r3, r2
 8002b0e:	051b      	lsls	r3, r3, #20
 8002b10:	e018      	b.n	8002b44 <HAL_ADC_ConfigChannel+0x5a8>
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b1a:	fa93 f3a3 	rbit	r3, r3
 8002b1e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002b20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b22:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002b24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d101      	bne.n	8002b2e <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8002b2a:	2320      	movs	r3, #32
 8002b2c:	e003      	b.n	8002b36 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8002b2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b30:	fab3 f383 	clz	r3, r3
 8002b34:	b2db      	uxtb	r3, r3
 8002b36:	3301      	adds	r3, #1
 8002b38:	f003 021f 	and.w	r2, r3, #31
 8002b3c:	4613      	mov	r3, r2
 8002b3e:	005b      	lsls	r3, r3, #1
 8002b40:	4413      	add	r3, r2
 8002b42:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002b44:	430b      	orrs	r3, r1
 8002b46:	e07e      	b.n	8002c46 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d107      	bne.n	8002b64 <HAL_ADC_ConfigChannel+0x5c8>
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	0e9b      	lsrs	r3, r3, #26
 8002b5a:	3301      	adds	r3, #1
 8002b5c:	069b      	lsls	r3, r3, #26
 8002b5e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002b62:	e015      	b.n	8002b90 <HAL_ADC_ConfigChannel+0x5f4>
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b6c:	fa93 f3a3 	rbit	r3, r3
 8002b70:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002b72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b74:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002b76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d101      	bne.n	8002b80 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8002b7c:	2320      	movs	r3, #32
 8002b7e:	e003      	b.n	8002b88 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8002b80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b82:	fab3 f383 	clz	r3, r3
 8002b86:	b2db      	uxtb	r3, r3
 8002b88:	3301      	adds	r3, #1
 8002b8a:	069b      	lsls	r3, r3, #26
 8002b8c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d109      	bne.n	8002bb0 <HAL_ADC_ConfigChannel+0x614>
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	0e9b      	lsrs	r3, r3, #26
 8002ba2:	3301      	adds	r3, #1
 8002ba4:	f003 031f 	and.w	r3, r3, #31
 8002ba8:	2101      	movs	r1, #1
 8002baa:	fa01 f303 	lsl.w	r3, r1, r3
 8002bae:	e017      	b.n	8002be0 <HAL_ADC_ConfigChannel+0x644>
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bb6:	6a3b      	ldr	r3, [r7, #32]
 8002bb8:	fa93 f3a3 	rbit	r3, r3
 8002bbc:	61fb      	str	r3, [r7, #28]
  return result;
 8002bbe:	69fb      	ldr	r3, [r7, #28]
 8002bc0:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d101      	bne.n	8002bcc <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8002bc8:	2320      	movs	r3, #32
 8002bca:	e003      	b.n	8002bd4 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8002bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bce:	fab3 f383 	clz	r3, r3
 8002bd2:	b2db      	uxtb	r3, r3
 8002bd4:	3301      	adds	r3, #1
 8002bd6:	f003 031f 	and.w	r3, r3, #31
 8002bda:	2101      	movs	r1, #1
 8002bdc:	fa01 f303 	lsl.w	r3, r1, r3
 8002be0:	ea42 0103 	orr.w	r1, r2, r3
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d10d      	bne.n	8002c0c <HAL_ADC_ConfigChannel+0x670>
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	0e9b      	lsrs	r3, r3, #26
 8002bf6:	3301      	adds	r3, #1
 8002bf8:	f003 021f 	and.w	r2, r3, #31
 8002bfc:	4613      	mov	r3, r2
 8002bfe:	005b      	lsls	r3, r3, #1
 8002c00:	4413      	add	r3, r2
 8002c02:	3b1e      	subs	r3, #30
 8002c04:	051b      	lsls	r3, r3, #20
 8002c06:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002c0a:	e01b      	b.n	8002c44 <HAL_ADC_ConfigChannel+0x6a8>
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c12:	697b      	ldr	r3, [r7, #20]
 8002c14:	fa93 f3a3 	rbit	r3, r3
 8002c18:	613b      	str	r3, [r7, #16]
  return result;
 8002c1a:	693b      	ldr	r3, [r7, #16]
 8002c1c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002c1e:	69bb      	ldr	r3, [r7, #24]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d101      	bne.n	8002c28 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8002c24:	2320      	movs	r3, #32
 8002c26:	e003      	b.n	8002c30 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8002c28:	69bb      	ldr	r3, [r7, #24]
 8002c2a:	fab3 f383 	clz	r3, r3
 8002c2e:	b2db      	uxtb	r3, r3
 8002c30:	3301      	adds	r3, #1
 8002c32:	f003 021f 	and.w	r2, r3, #31
 8002c36:	4613      	mov	r3, r2
 8002c38:	005b      	lsls	r3, r3, #1
 8002c3a:	4413      	add	r3, r2
 8002c3c:	3b1e      	subs	r3, #30
 8002c3e:	051b      	lsls	r3, r3, #20
 8002c40:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002c44:	430b      	orrs	r3, r1
 8002c46:	683a      	ldr	r2, [r7, #0]
 8002c48:	6892      	ldr	r2, [r2, #8]
 8002c4a:	4619      	mov	r1, r3
 8002c4c:	f7ff fa08 	bl	8002060 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	681a      	ldr	r2, [r3, #0]
 8002c54:	4b09      	ldr	r3, [pc, #36]	; (8002c7c <HAL_ADC_ConfigChannel+0x6e0>)
 8002c56:	4013      	ands	r3, r2
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	f000 80be 	beq.w	8002dda <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002c66:	d004      	beq.n	8002c72 <HAL_ADC_ConfigChannel+0x6d6>
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4a04      	ldr	r2, [pc, #16]	; (8002c80 <HAL_ADC_ConfigChannel+0x6e4>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d10a      	bne.n	8002c88 <HAL_ADC_ConfigChannel+0x6ec>
 8002c72:	4b04      	ldr	r3, [pc, #16]	; (8002c84 <HAL_ADC_ConfigChannel+0x6e8>)
 8002c74:	e009      	b.n	8002c8a <HAL_ADC_ConfigChannel+0x6ee>
 8002c76:	bf00      	nop
 8002c78:	407f0000 	.word	0x407f0000
 8002c7c:	80080000 	.word	0x80080000
 8002c80:	50000100 	.word	0x50000100
 8002c84:	50000300 	.word	0x50000300
 8002c88:	4b59      	ldr	r3, [pc, #356]	; (8002df0 <HAL_ADC_ConfigChannel+0x854>)
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	f7ff f910 	bl	8001eb0 <LL_ADC_GetCommonPathInternalCh>
 8002c90:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4a56      	ldr	r2, [pc, #344]	; (8002df4 <HAL_ADC_ConfigChannel+0x858>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d004      	beq.n	8002ca8 <HAL_ADC_ConfigChannel+0x70c>
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	4a55      	ldr	r2, [pc, #340]	; (8002df8 <HAL_ADC_ConfigChannel+0x85c>)
 8002ca4:	4293      	cmp	r3, r2
 8002ca6:	d13a      	bne.n	8002d1e <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002ca8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002cac:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d134      	bne.n	8002d1e <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002cbc:	d005      	beq.n	8002cca <HAL_ADC_ConfigChannel+0x72e>
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	4a4e      	ldr	r2, [pc, #312]	; (8002dfc <HAL_ADC_ConfigChannel+0x860>)
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	f040 8085 	bne.w	8002dd4 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002cd2:	d004      	beq.n	8002cde <HAL_ADC_ConfigChannel+0x742>
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4a49      	ldr	r2, [pc, #292]	; (8002e00 <HAL_ADC_ConfigChannel+0x864>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d101      	bne.n	8002ce2 <HAL_ADC_ConfigChannel+0x746>
 8002cde:	4a49      	ldr	r2, [pc, #292]	; (8002e04 <HAL_ADC_ConfigChannel+0x868>)
 8002ce0:	e000      	b.n	8002ce4 <HAL_ADC_ConfigChannel+0x748>
 8002ce2:	4a43      	ldr	r2, [pc, #268]	; (8002df0 <HAL_ADC_ConfigChannel+0x854>)
 8002ce4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002ce8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002cec:	4619      	mov	r1, r3
 8002cee:	4610      	mov	r0, r2
 8002cf0:	f7ff f8cb 	bl	8001e8a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002cf4:	4b44      	ldr	r3, [pc, #272]	; (8002e08 <HAL_ADC_ConfigChannel+0x86c>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	099b      	lsrs	r3, r3, #6
 8002cfa:	4a44      	ldr	r2, [pc, #272]	; (8002e0c <HAL_ADC_ConfigChannel+0x870>)
 8002cfc:	fba2 2303 	umull	r2, r3, r2, r3
 8002d00:	099b      	lsrs	r3, r3, #6
 8002d02:	1c5a      	adds	r2, r3, #1
 8002d04:	4613      	mov	r3, r2
 8002d06:	005b      	lsls	r3, r3, #1
 8002d08:	4413      	add	r3, r2
 8002d0a:	009b      	lsls	r3, r3, #2
 8002d0c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002d0e:	e002      	b.n	8002d16 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	3b01      	subs	r3, #1
 8002d14:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d1f9      	bne.n	8002d10 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002d1c:	e05a      	b.n	8002dd4 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	4a3b      	ldr	r2, [pc, #236]	; (8002e10 <HAL_ADC_ConfigChannel+0x874>)
 8002d24:	4293      	cmp	r3, r2
 8002d26:	d125      	bne.n	8002d74 <HAL_ADC_ConfigChannel+0x7d8>
 8002d28:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002d2c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d11f      	bne.n	8002d74 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4a31      	ldr	r2, [pc, #196]	; (8002e00 <HAL_ADC_ConfigChannel+0x864>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d104      	bne.n	8002d48 <HAL_ADC_ConfigChannel+0x7ac>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	4a34      	ldr	r2, [pc, #208]	; (8002e14 <HAL_ADC_ConfigChannel+0x878>)
 8002d44:	4293      	cmp	r3, r2
 8002d46:	d047      	beq.n	8002dd8 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002d50:	d004      	beq.n	8002d5c <HAL_ADC_ConfigChannel+0x7c0>
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4a2a      	ldr	r2, [pc, #168]	; (8002e00 <HAL_ADC_ConfigChannel+0x864>)
 8002d58:	4293      	cmp	r3, r2
 8002d5a:	d101      	bne.n	8002d60 <HAL_ADC_ConfigChannel+0x7c4>
 8002d5c:	4a29      	ldr	r2, [pc, #164]	; (8002e04 <HAL_ADC_ConfigChannel+0x868>)
 8002d5e:	e000      	b.n	8002d62 <HAL_ADC_ConfigChannel+0x7c6>
 8002d60:	4a23      	ldr	r2, [pc, #140]	; (8002df0 <HAL_ADC_ConfigChannel+0x854>)
 8002d62:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002d66:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d6a:	4619      	mov	r1, r3
 8002d6c:	4610      	mov	r0, r2
 8002d6e:	f7ff f88c 	bl	8001e8a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002d72:	e031      	b.n	8002dd8 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4a27      	ldr	r2, [pc, #156]	; (8002e18 <HAL_ADC_ConfigChannel+0x87c>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d12d      	bne.n	8002dda <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002d7e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002d82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d127      	bne.n	8002dda <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4a1c      	ldr	r2, [pc, #112]	; (8002e00 <HAL_ADC_ConfigChannel+0x864>)
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d022      	beq.n	8002dda <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002d9c:	d004      	beq.n	8002da8 <HAL_ADC_ConfigChannel+0x80c>
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4a17      	ldr	r2, [pc, #92]	; (8002e00 <HAL_ADC_ConfigChannel+0x864>)
 8002da4:	4293      	cmp	r3, r2
 8002da6:	d101      	bne.n	8002dac <HAL_ADC_ConfigChannel+0x810>
 8002da8:	4a16      	ldr	r2, [pc, #88]	; (8002e04 <HAL_ADC_ConfigChannel+0x868>)
 8002daa:	e000      	b.n	8002dae <HAL_ADC_ConfigChannel+0x812>
 8002dac:	4a10      	ldr	r2, [pc, #64]	; (8002df0 <HAL_ADC_ConfigChannel+0x854>)
 8002dae:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002db2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002db6:	4619      	mov	r1, r3
 8002db8:	4610      	mov	r0, r2
 8002dba:	f7ff f866 	bl	8001e8a <LL_ADC_SetCommonPathInternalCh>
 8002dbe:	e00c      	b.n	8002dda <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dc4:	f043 0220 	orr.w	r2, r3, #32
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002dcc:	2301      	movs	r3, #1
 8002dce:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8002dd2:	e002      	b.n	8002dda <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002dd4:	bf00      	nop
 8002dd6:	e000      	b.n	8002dda <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002dd8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2200      	movs	r2, #0
 8002dde:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8002de2:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002de6:	4618      	mov	r0, r3
 8002de8:	37d8      	adds	r7, #216	; 0xd8
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bd80      	pop	{r7, pc}
 8002dee:	bf00      	nop
 8002df0:	50000700 	.word	0x50000700
 8002df4:	c3210000 	.word	0xc3210000
 8002df8:	90c00010 	.word	0x90c00010
 8002dfc:	50000600 	.word	0x50000600
 8002e00:	50000100 	.word	0x50000100
 8002e04:	50000300 	.word	0x50000300
 8002e08:	20000000 	.word	0x20000000
 8002e0c:	053e2d63 	.word	0x053e2d63
 8002e10:	c7520000 	.word	0xc7520000
 8002e14:	50000500 	.word	0x50000500
 8002e18:	cb840000 	.word	0xcb840000

08002e1c <LL_ADC_IsEnabled>:
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	b083      	sub	sp, #12
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	689b      	ldr	r3, [r3, #8]
 8002e28:	f003 0301 	and.w	r3, r3, #1
 8002e2c:	2b01      	cmp	r3, #1
 8002e2e:	d101      	bne.n	8002e34 <LL_ADC_IsEnabled+0x18>
 8002e30:	2301      	movs	r3, #1
 8002e32:	e000      	b.n	8002e36 <LL_ADC_IsEnabled+0x1a>
 8002e34:	2300      	movs	r3, #0
}
 8002e36:	4618      	mov	r0, r3
 8002e38:	370c      	adds	r7, #12
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e40:	4770      	bx	lr

08002e42 <LL_ADC_REG_IsConversionOngoing>:
{
 8002e42:	b480      	push	{r7}
 8002e44:	b083      	sub	sp, #12
 8002e46:	af00      	add	r7, sp, #0
 8002e48:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	689b      	ldr	r3, [r3, #8]
 8002e4e:	f003 0304 	and.w	r3, r3, #4
 8002e52:	2b04      	cmp	r3, #4
 8002e54:	d101      	bne.n	8002e5a <LL_ADC_REG_IsConversionOngoing+0x18>
 8002e56:	2301      	movs	r3, #1
 8002e58:	e000      	b.n	8002e5c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002e5a:	2300      	movs	r3, #0
}
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	370c      	adds	r7, #12
 8002e60:	46bd      	mov	sp, r7
 8002e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e66:	4770      	bx	lr

08002e68 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002e68:	b590      	push	{r4, r7, lr}
 8002e6a:	b0a1      	sub	sp, #132	; 0x84
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
 8002e70:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e72:	2300      	movs	r3, #0
 8002e74:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002e7e:	2b01      	cmp	r3, #1
 8002e80:	d101      	bne.n	8002e86 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002e82:	2302      	movs	r3, #2
 8002e84:	e0e7      	b.n	8003056 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	2201      	movs	r2, #1
 8002e8a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8002e8e:	2300      	movs	r3, #0
 8002e90:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8002e92:	2300      	movs	r3, #0
 8002e94:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002e9e:	d102      	bne.n	8002ea6 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002ea0:	4b6f      	ldr	r3, [pc, #444]	; (8003060 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002ea2:	60bb      	str	r3, [r7, #8]
 8002ea4:	e009      	b.n	8002eba <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4a6e      	ldr	r2, [pc, #440]	; (8003064 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002eac:	4293      	cmp	r3, r2
 8002eae:	d102      	bne.n	8002eb6 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8002eb0:	4b6d      	ldr	r3, [pc, #436]	; (8003068 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8002eb2:	60bb      	str	r3, [r7, #8]
 8002eb4:	e001      	b.n	8002eba <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8002eba:	68bb      	ldr	r3, [r7, #8]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d10b      	bne.n	8002ed8 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ec4:	f043 0220 	orr.w	r2, r3, #32
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2200      	movs	r2, #0
 8002ed0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	e0be      	b.n	8003056 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002ed8:	68bb      	ldr	r3, [r7, #8]
 8002eda:	4618      	mov	r0, r3
 8002edc:	f7ff ffb1 	bl	8002e42 <LL_ADC_REG_IsConversionOngoing>
 8002ee0:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	f7ff ffab 	bl	8002e42 <LL_ADC_REG_IsConversionOngoing>
 8002eec:	4603      	mov	r3, r0
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	f040 80a0 	bne.w	8003034 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002ef4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	f040 809c 	bne.w	8003034 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002f04:	d004      	beq.n	8002f10 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4a55      	ldr	r2, [pc, #340]	; (8003060 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d101      	bne.n	8002f14 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8002f10:	4b56      	ldr	r3, [pc, #344]	; (800306c <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8002f12:	e000      	b.n	8002f16 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8002f14:	4b56      	ldr	r3, [pc, #344]	; (8003070 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8002f16:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d04b      	beq.n	8002fb8 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002f20:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002f22:	689b      	ldr	r3, [r3, #8]
 8002f24:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	6859      	ldr	r1, [r3, #4]
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002f32:	035b      	lsls	r3, r3, #13
 8002f34:	430b      	orrs	r3, r1
 8002f36:	431a      	orrs	r2, r3
 8002f38:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002f3a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002f44:	d004      	beq.n	8002f50 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	4a45      	ldr	r2, [pc, #276]	; (8003060 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002f4c:	4293      	cmp	r3, r2
 8002f4e:	d10f      	bne.n	8002f70 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8002f50:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002f54:	f7ff ff62 	bl	8002e1c <LL_ADC_IsEnabled>
 8002f58:	4604      	mov	r4, r0
 8002f5a:	4841      	ldr	r0, [pc, #260]	; (8003060 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002f5c:	f7ff ff5e 	bl	8002e1c <LL_ADC_IsEnabled>
 8002f60:	4603      	mov	r3, r0
 8002f62:	4323      	orrs	r3, r4
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	bf0c      	ite	eq
 8002f68:	2301      	moveq	r3, #1
 8002f6a:	2300      	movne	r3, #0
 8002f6c:	b2db      	uxtb	r3, r3
 8002f6e:	e012      	b.n	8002f96 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8002f70:	483c      	ldr	r0, [pc, #240]	; (8003064 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002f72:	f7ff ff53 	bl	8002e1c <LL_ADC_IsEnabled>
 8002f76:	4604      	mov	r4, r0
 8002f78:	483b      	ldr	r0, [pc, #236]	; (8003068 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8002f7a:	f7ff ff4f 	bl	8002e1c <LL_ADC_IsEnabled>
 8002f7e:	4603      	mov	r3, r0
 8002f80:	431c      	orrs	r4, r3
 8002f82:	483c      	ldr	r0, [pc, #240]	; (8003074 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8002f84:	f7ff ff4a 	bl	8002e1c <LL_ADC_IsEnabled>
 8002f88:	4603      	mov	r3, r0
 8002f8a:	4323      	orrs	r3, r4
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	bf0c      	ite	eq
 8002f90:	2301      	moveq	r3, #1
 8002f92:	2300      	movne	r3, #0
 8002f94:	b2db      	uxtb	r3, r3
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d056      	beq.n	8003048 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002f9a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002f9c:	689b      	ldr	r3, [r3, #8]
 8002f9e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002fa2:	f023 030f 	bic.w	r3, r3, #15
 8002fa6:	683a      	ldr	r2, [r7, #0]
 8002fa8:	6811      	ldr	r1, [r2, #0]
 8002faa:	683a      	ldr	r2, [r7, #0]
 8002fac:	6892      	ldr	r2, [r2, #8]
 8002fae:	430a      	orrs	r2, r1
 8002fb0:	431a      	orrs	r2, r3
 8002fb2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002fb4:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002fb6:	e047      	b.n	8003048 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002fb8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002fba:	689b      	ldr	r3, [r3, #8]
 8002fbc:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002fc0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002fc2:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002fcc:	d004      	beq.n	8002fd8 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	4a23      	ldr	r2, [pc, #140]	; (8003060 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	d10f      	bne.n	8002ff8 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8002fd8:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002fdc:	f7ff ff1e 	bl	8002e1c <LL_ADC_IsEnabled>
 8002fe0:	4604      	mov	r4, r0
 8002fe2:	481f      	ldr	r0, [pc, #124]	; (8003060 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002fe4:	f7ff ff1a 	bl	8002e1c <LL_ADC_IsEnabled>
 8002fe8:	4603      	mov	r3, r0
 8002fea:	4323      	orrs	r3, r4
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	bf0c      	ite	eq
 8002ff0:	2301      	moveq	r3, #1
 8002ff2:	2300      	movne	r3, #0
 8002ff4:	b2db      	uxtb	r3, r3
 8002ff6:	e012      	b.n	800301e <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8002ff8:	481a      	ldr	r0, [pc, #104]	; (8003064 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002ffa:	f7ff ff0f 	bl	8002e1c <LL_ADC_IsEnabled>
 8002ffe:	4604      	mov	r4, r0
 8003000:	4819      	ldr	r0, [pc, #100]	; (8003068 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003002:	f7ff ff0b 	bl	8002e1c <LL_ADC_IsEnabled>
 8003006:	4603      	mov	r3, r0
 8003008:	431c      	orrs	r4, r3
 800300a:	481a      	ldr	r0, [pc, #104]	; (8003074 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 800300c:	f7ff ff06 	bl	8002e1c <LL_ADC_IsEnabled>
 8003010:	4603      	mov	r3, r0
 8003012:	4323      	orrs	r3, r4
 8003014:	2b00      	cmp	r3, #0
 8003016:	bf0c      	ite	eq
 8003018:	2301      	moveq	r3, #1
 800301a:	2300      	movne	r3, #0
 800301c:	b2db      	uxtb	r3, r3
 800301e:	2b00      	cmp	r3, #0
 8003020:	d012      	beq.n	8003048 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003022:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003024:	689b      	ldr	r3, [r3, #8]
 8003026:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800302a:	f023 030f 	bic.w	r3, r3, #15
 800302e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003030:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003032:	e009      	b.n	8003048 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003038:	f043 0220 	orr.w	r2, r3, #32
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003040:	2301      	movs	r3, #1
 8003042:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8003046:	e000      	b.n	800304a <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003048:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2200      	movs	r2, #0
 800304e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8003052:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8003056:	4618      	mov	r0, r3
 8003058:	3784      	adds	r7, #132	; 0x84
 800305a:	46bd      	mov	sp, r7
 800305c:	bd90      	pop	{r4, r7, pc}
 800305e:	bf00      	nop
 8003060:	50000100 	.word	0x50000100
 8003064:	50000400 	.word	0x50000400
 8003068:	50000500 	.word	0x50000500
 800306c:	50000300 	.word	0x50000300
 8003070:	50000700 	.word	0x50000700
 8003074:	50000600 	.word	0x50000600

08003078 <HAL_CORDIC_Init>:
  * @brief  Initialize the CORDIC peripheral and the associated handle.
  * @param  hcordic pointer to a CORDIC_HandleTypeDef structure.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CORDIC_Init(CORDIC_HandleTypeDef *hcordic)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b082      	sub	sp, #8
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
  /* Check the CORDIC handle allocation */
  if (hcordic == NULL)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d101      	bne.n	800308a <HAL_CORDIC_Init+0x12>
  {
    /* Return error status */
    return HAL_ERROR;
 8003086:	2301      	movs	r3, #1
 8003088:	e023      	b.n	80030d2 <HAL_CORDIC_Init+0x5a>

    /* Initialize the low level hardware */
    hcordic->MspInitCallback(hcordic);
  }
#else
  if (hcordic->State == HAL_CORDIC_STATE_RESET)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003090:	b2db      	uxtb	r3, r3
 8003092:	2b00      	cmp	r3, #0
 8003094:	d106      	bne.n	80030a4 <HAL_CORDIC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hcordic->Lock = HAL_UNLOCKED;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2200      	movs	r2, #0
 800309a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize the low level hardware */
    HAL_CORDIC_MspInit(hcordic);
 800309e:	6878      	ldr	r0, [r7, #4]
 80030a0:	f7fd fd68 	bl	8000b74 <HAL_CORDIC_MspInit>
  }
#endif /* (USE_HAL_CORDIC_REGISTER_CALLBACKS) */

  /* Set CORDIC error code to none */
  hcordic->ErrorCode = HAL_CORDIC_ERROR_NONE;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2200      	movs	r2, #0
 80030a8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Reset pInBuff and pOutBuff */
  hcordic->pInBuff = NULL;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2200      	movs	r2, #0
 80030ae:	605a      	str	r2, [r3, #4]
  hcordic->pOutBuff = NULL;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2200      	movs	r2, #0
 80030b4:	609a      	str	r2, [r3, #8]

  /* Reset NbCalcToOrder and NbCalcToGet */
  hcordic->NbCalcToOrder = 0U;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2200      	movs	r2, #0
 80030ba:	60da      	str	r2, [r3, #12]
  hcordic->NbCalcToGet = 0U;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2200      	movs	r2, #0
 80030c0:	611a      	str	r2, [r3, #16]

  /* Reset DMADirection */
  hcordic->DMADirection = CORDIC_DMA_DIR_NONE;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2200      	movs	r2, #0
 80030c6:	615a      	str	r2, [r3, #20]

  /* Change CORDIC peripheral state */
  hcordic->State = HAL_CORDIC_STATE_READY;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2201      	movs	r2, #1
 80030cc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Return function status */
  return HAL_OK;
 80030d0:	2300      	movs	r3, #0
}
 80030d2:	4618      	mov	r0, r3
 80030d4:	3708      	adds	r7, #8
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bd80      	pop	{r7, pc}
	...

080030dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030dc:	b480      	push	{r7}
 80030de:	b085      	sub	sp, #20
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	f003 0307 	and.w	r3, r3, #7
 80030ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80030ec:	4b0c      	ldr	r3, [pc, #48]	; (8003120 <__NVIC_SetPriorityGrouping+0x44>)
 80030ee:	68db      	ldr	r3, [r3, #12]
 80030f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80030f2:	68ba      	ldr	r2, [r7, #8]
 80030f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80030f8:	4013      	ands	r3, r2
 80030fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003100:	68bb      	ldr	r3, [r7, #8]
 8003102:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003104:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003108:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800310c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800310e:	4a04      	ldr	r2, [pc, #16]	; (8003120 <__NVIC_SetPriorityGrouping+0x44>)
 8003110:	68bb      	ldr	r3, [r7, #8]
 8003112:	60d3      	str	r3, [r2, #12]
}
 8003114:	bf00      	nop
 8003116:	3714      	adds	r7, #20
 8003118:	46bd      	mov	sp, r7
 800311a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311e:	4770      	bx	lr
 8003120:	e000ed00 	.word	0xe000ed00

08003124 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003124:	b480      	push	{r7}
 8003126:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003128:	4b04      	ldr	r3, [pc, #16]	; (800313c <__NVIC_GetPriorityGrouping+0x18>)
 800312a:	68db      	ldr	r3, [r3, #12]
 800312c:	0a1b      	lsrs	r3, r3, #8
 800312e:	f003 0307 	and.w	r3, r3, #7
}
 8003132:	4618      	mov	r0, r3
 8003134:	46bd      	mov	sp, r7
 8003136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313a:	4770      	bx	lr
 800313c:	e000ed00 	.word	0xe000ed00

08003140 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003140:	b480      	push	{r7}
 8003142:	b083      	sub	sp, #12
 8003144:	af00      	add	r7, sp, #0
 8003146:	4603      	mov	r3, r0
 8003148:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800314a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800314e:	2b00      	cmp	r3, #0
 8003150:	db0b      	blt.n	800316a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003152:	79fb      	ldrb	r3, [r7, #7]
 8003154:	f003 021f 	and.w	r2, r3, #31
 8003158:	4907      	ldr	r1, [pc, #28]	; (8003178 <__NVIC_EnableIRQ+0x38>)
 800315a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800315e:	095b      	lsrs	r3, r3, #5
 8003160:	2001      	movs	r0, #1
 8003162:	fa00 f202 	lsl.w	r2, r0, r2
 8003166:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800316a:	bf00      	nop
 800316c:	370c      	adds	r7, #12
 800316e:	46bd      	mov	sp, r7
 8003170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003174:	4770      	bx	lr
 8003176:	bf00      	nop
 8003178:	e000e100 	.word	0xe000e100

0800317c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800317c:	b480      	push	{r7}
 800317e:	b083      	sub	sp, #12
 8003180:	af00      	add	r7, sp, #0
 8003182:	4603      	mov	r3, r0
 8003184:	6039      	str	r1, [r7, #0]
 8003186:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003188:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800318c:	2b00      	cmp	r3, #0
 800318e:	db0a      	blt.n	80031a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	b2da      	uxtb	r2, r3
 8003194:	490c      	ldr	r1, [pc, #48]	; (80031c8 <__NVIC_SetPriority+0x4c>)
 8003196:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800319a:	0112      	lsls	r2, r2, #4
 800319c:	b2d2      	uxtb	r2, r2
 800319e:	440b      	add	r3, r1
 80031a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80031a4:	e00a      	b.n	80031bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	b2da      	uxtb	r2, r3
 80031aa:	4908      	ldr	r1, [pc, #32]	; (80031cc <__NVIC_SetPriority+0x50>)
 80031ac:	79fb      	ldrb	r3, [r7, #7]
 80031ae:	f003 030f 	and.w	r3, r3, #15
 80031b2:	3b04      	subs	r3, #4
 80031b4:	0112      	lsls	r2, r2, #4
 80031b6:	b2d2      	uxtb	r2, r2
 80031b8:	440b      	add	r3, r1
 80031ba:	761a      	strb	r2, [r3, #24]
}
 80031bc:	bf00      	nop
 80031be:	370c      	adds	r7, #12
 80031c0:	46bd      	mov	sp, r7
 80031c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c6:	4770      	bx	lr
 80031c8:	e000e100 	.word	0xe000e100
 80031cc:	e000ed00 	.word	0xe000ed00

080031d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80031d0:	b480      	push	{r7}
 80031d2:	b089      	sub	sp, #36	; 0x24
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	60f8      	str	r0, [r7, #12]
 80031d8:	60b9      	str	r1, [r7, #8]
 80031da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	f003 0307 	and.w	r3, r3, #7
 80031e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80031e4:	69fb      	ldr	r3, [r7, #28]
 80031e6:	f1c3 0307 	rsb	r3, r3, #7
 80031ea:	2b04      	cmp	r3, #4
 80031ec:	bf28      	it	cs
 80031ee:	2304      	movcs	r3, #4
 80031f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80031f2:	69fb      	ldr	r3, [r7, #28]
 80031f4:	3304      	adds	r3, #4
 80031f6:	2b06      	cmp	r3, #6
 80031f8:	d902      	bls.n	8003200 <NVIC_EncodePriority+0x30>
 80031fa:	69fb      	ldr	r3, [r7, #28]
 80031fc:	3b03      	subs	r3, #3
 80031fe:	e000      	b.n	8003202 <NVIC_EncodePriority+0x32>
 8003200:	2300      	movs	r3, #0
 8003202:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003204:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003208:	69bb      	ldr	r3, [r7, #24]
 800320a:	fa02 f303 	lsl.w	r3, r2, r3
 800320e:	43da      	mvns	r2, r3
 8003210:	68bb      	ldr	r3, [r7, #8]
 8003212:	401a      	ands	r2, r3
 8003214:	697b      	ldr	r3, [r7, #20]
 8003216:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003218:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800321c:	697b      	ldr	r3, [r7, #20]
 800321e:	fa01 f303 	lsl.w	r3, r1, r3
 8003222:	43d9      	mvns	r1, r3
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003228:	4313      	orrs	r3, r2
         );
}
 800322a:	4618      	mov	r0, r3
 800322c:	3724      	adds	r7, #36	; 0x24
 800322e:	46bd      	mov	sp, r7
 8003230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003234:	4770      	bx	lr

08003236 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003236:	b580      	push	{r7, lr}
 8003238:	b082      	sub	sp, #8
 800323a:	af00      	add	r7, sp, #0
 800323c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800323e:	6878      	ldr	r0, [r7, #4]
 8003240:	f7ff ff4c 	bl	80030dc <__NVIC_SetPriorityGrouping>
}
 8003244:	bf00      	nop
 8003246:	3708      	adds	r7, #8
 8003248:	46bd      	mov	sp, r7
 800324a:	bd80      	pop	{r7, pc}

0800324c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b086      	sub	sp, #24
 8003250:	af00      	add	r7, sp, #0
 8003252:	4603      	mov	r3, r0
 8003254:	60b9      	str	r1, [r7, #8]
 8003256:	607a      	str	r2, [r7, #4]
 8003258:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800325a:	f7ff ff63 	bl	8003124 <__NVIC_GetPriorityGrouping>
 800325e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003260:	687a      	ldr	r2, [r7, #4]
 8003262:	68b9      	ldr	r1, [r7, #8]
 8003264:	6978      	ldr	r0, [r7, #20]
 8003266:	f7ff ffb3 	bl	80031d0 <NVIC_EncodePriority>
 800326a:	4602      	mov	r2, r0
 800326c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003270:	4611      	mov	r1, r2
 8003272:	4618      	mov	r0, r3
 8003274:	f7ff ff82 	bl	800317c <__NVIC_SetPriority>
}
 8003278:	bf00      	nop
 800327a:	3718      	adds	r7, #24
 800327c:	46bd      	mov	sp, r7
 800327e:	bd80      	pop	{r7, pc}

08003280 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b082      	sub	sp, #8
 8003284:	af00      	add	r7, sp, #0
 8003286:	4603      	mov	r3, r0
 8003288:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800328a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800328e:	4618      	mov	r0, r3
 8003290:	f7ff ff56 	bl	8003140 <__NVIC_EnableIRQ>
}
 8003294:	bf00      	nop
 8003296:	3708      	adds	r7, #8
 8003298:	46bd      	mov	sp, r7
 800329a:	bd80      	pop	{r7, pc}

0800329c <HAL_FMAC_Init>:
  * @brief  Initialize the FMAC peripheral and the associated handle.
  * @param  hfmac pointer to a FMAC_HandleTypeDef structure.
  * @retval HAL_StatusTypeDef HAL status
  */
HAL_StatusTypeDef HAL_FMAC_Init(FMAC_HandleTypeDef *hfmac)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b084      	sub	sp, #16
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the FMAC handle allocation */
  if (hfmac == NULL)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d101      	bne.n	80032ae <HAL_FMAC_Init+0x12>
  {
    return HAL_ERROR;
 80032aa:	2301      	movs	r3, #1
 80032ac:	e033      	b.n	8003316 <HAL_FMAC_Init+0x7a>
  }

  /* Check the instance */
  assert_param(IS_FMAC_ALL_INSTANCE(hfmac->Instance));

  if (hfmac->State == HAL_FMAC_STATE_RESET)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80032b4:	b2db      	uxtb	r3, r3
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d106      	bne.n	80032c8 <HAL_FMAC_Init+0x2c>
  {
    /* Initialize lock resource */
    hfmac->Lock = HAL_UNLOCKED;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2200      	movs	r2, #0
 80032be:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Init the low level hardware */
    hfmac->MspInitCallback(hfmac);
#else
    /* Init the low level hardware */
    HAL_FMAC_MspInit(hfmac);
 80032c2:	6878      	ldr	r0, [r7, #4]
 80032c4:	f7fd fc8a 	bl	8000bdc <HAL_FMAC_MspInit>
#endif /* USE_HAL_FMAC_REGISTER_CALLBACKS */
  }

  /* Reset pInput and pOutput */
  hfmac->FilterParam = 0U;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2200      	movs	r2, #0
 80032cc:	605a      	str	r2, [r3, #4]
  FMAC_ResetDataPointers(hfmac);
 80032ce:	6878      	ldr	r0, [r7, #4]
 80032d0:	f000 f854 	bl	800337c <FMAC_ResetDataPointers>

  /* Reset FMAC unit (internal pointers) */
  if (FMAC_Reset(hfmac) == HAL_ERROR)
 80032d4:	6878      	ldr	r0, [r7, #4]
 80032d6:	f000 f822 	bl	800331e <FMAC_Reset>
 80032da:	4603      	mov	r3, r0
 80032dc:	2b01      	cmp	r3, #1
 80032de:	d10c      	bne.n	80032fa <HAL_FMAC_Init+0x5e>
  {
    /* Update FMAC error code and FMAC peripheral state */
    hfmac->ErrorCode |= HAL_FMAC_ERROR_RESET;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032e4:	f043 0210 	orr.w	r2, r3, #16
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	635a      	str	r2, [r3, #52]	; 0x34
    hfmac->State = HAL_FMAC_STATE_TIMEOUT;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	22a0      	movs	r2, #160	; 0xa0
 80032f0:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

    status = HAL_ERROR;
 80032f4:	2301      	movs	r3, #1
 80032f6:	73fb      	strb	r3, [r7, #15]
 80032f8:	e008      	b.n	800330c <HAL_FMAC_Init+0x70>
  }
  else
  {
    /* Update FMAC error code and FMAC peripheral state */
    hfmac->ErrorCode = HAL_FMAC_ERROR_NONE;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	2200      	movs	r2, #0
 80032fe:	635a      	str	r2, [r3, #52]	; 0x34
    hfmac->State = HAL_FMAC_STATE_READY;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2220      	movs	r2, #32
 8003304:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

    status = HAL_OK;
 8003308:	2300      	movs	r3, #0
 800330a:	73fb      	strb	r3, [r7, #15]
  }

  __HAL_UNLOCK(hfmac);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2200      	movs	r2, #0
 8003310:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 8003314:	7bfb      	ldrb	r3, [r7, #15]
}
 8003316:	4618      	mov	r0, r3
 8003318:	3710      	adds	r7, #16
 800331a:	46bd      	mov	sp, r7
 800331c:	bd80      	pop	{r7, pc}

0800331e <FMAC_Reset>:
  * @brief  Perform a reset of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval HAL_StatusTypeDef HAL status
  */
static HAL_StatusTypeDef FMAC_Reset(FMAC_HandleTypeDef *hfmac)
{
 800331e:	b580      	push	{r7, lr}
 8003320:	b084      	sub	sp, #16
 8003322:	af00      	add	r7, sp, #0
 8003324:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003326:	f7fe fd6f 	bl	8001e08 <HAL_GetTick>
 800332a:	60f8      	str	r0, [r7, #12]

  /* Perform the reset */
  SET_BIT(hfmac->Instance->CR, FMAC_CR_RESET);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	691a      	ldr	r2, [r3, #16]
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800333a:	611a      	str	r2, [r3, #16]

  /* Wait until flag is reset */
  while (READ_BIT(hfmac->Instance->CR, FMAC_CR_RESET) != 0U)
 800333c:	e00f      	b.n	800335e <FMAC_Reset+0x40>
  {
    if ((HAL_GetTick() - tickstart) > HAL_FMAC_RESET_TIMEOUT_VALUE)
 800333e:	f7fe fd63 	bl	8001e08 <HAL_GetTick>
 8003342:	4602      	mov	r2, r0
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	1ad3      	subs	r3, r2, r3
 8003348:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800334c:	d907      	bls.n	800335e <FMAC_Reset+0x40>
    {
      hfmac->ErrorCode |= HAL_FMAC_ERROR_TIMEOUT;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003352:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800335a:	2301      	movs	r3, #1
 800335c:	e00a      	b.n	8003374 <FMAC_Reset+0x56>
  while (READ_BIT(hfmac->Instance->CR, FMAC_CR_RESET) != 0U)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	691b      	ldr	r3, [r3, #16]
 8003364:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003368:	2b00      	cmp	r3, #0
 800336a:	d1e8      	bne.n	800333e <FMAC_Reset+0x20>
    }
  }

  hfmac->ErrorCode = HAL_FMAC_ERROR_NONE;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2200      	movs	r2, #0
 8003370:	635a      	str	r2, [r3, #52]	; 0x34
  return HAL_OK;
 8003372:	2300      	movs	r3, #0
}
 8003374:	4618      	mov	r0, r3
 8003376:	3710      	adds	r7, #16
 8003378:	46bd      	mov	sp, r7
 800337a:	bd80      	pop	{r7, pc}

0800337c <FMAC_ResetDataPointers>:
  * @brief  Reset the data pointers of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval None
  */
static void FMAC_ResetDataPointers(FMAC_HandleTypeDef *hfmac)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b082      	sub	sp, #8
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
  FMAC_ResetInputStateAndDataPointers(hfmac);
 8003384:	6878      	ldr	r0, [r7, #4]
 8003386:	f000 f807 	bl	8003398 <FMAC_ResetInputStateAndDataPointers>
  FMAC_ResetOutputStateAndDataPointers(hfmac);
 800338a:	6878      	ldr	r0, [r7, #4]
 800338c:	f000 f81b 	bl	80033c6 <FMAC_ResetOutputStateAndDataPointers>
}
 8003390:	bf00      	nop
 8003392:	3708      	adds	r7, #8
 8003394:	46bd      	mov	sp, r7
 8003396:	bd80      	pop	{r7, pc}

08003398 <FMAC_ResetInputStateAndDataPointers>:
  * @brief  Reset the input data pointers of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval None
  */
static void FMAC_ResetInputStateAndDataPointers(FMAC_HandleTypeDef *hfmac)
{
 8003398:	b480      	push	{r7}
 800339a:	b083      	sub	sp, #12
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
  hfmac->pInput = NULL;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2200      	movs	r2, #0
 80033a4:	60da      	str	r2, [r3, #12]
  hfmac->pInputSize = NULL;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2200      	movs	r2, #0
 80033aa:	615a      	str	r2, [r3, #20]
  hfmac->InputCurrentSize = 0U;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2200      	movs	r2, #0
 80033b0:	821a      	strh	r2, [r3, #16]
  hfmac->WrState = HAL_FMAC_STATE_READY;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2220      	movs	r2, #32
 80033b6:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
}
 80033ba:	bf00      	nop
 80033bc:	370c      	adds	r7, #12
 80033be:	46bd      	mov	sp, r7
 80033c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c4:	4770      	bx	lr

080033c6 <FMAC_ResetOutputStateAndDataPointers>:
  * @brief  Reset the output data pointers of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval None
  */
static void FMAC_ResetOutputStateAndDataPointers(FMAC_HandleTypeDef *hfmac)
{
 80033c6:	b480      	push	{r7}
 80033c8:	b083      	sub	sp, #12
 80033ca:	af00      	add	r7, sp, #0
 80033cc:	6078      	str	r0, [r7, #4]
  hfmac->pOutput = NULL;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2200      	movs	r2, #0
 80033d2:	619a      	str	r2, [r3, #24]
  hfmac->pOutputSize = NULL;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2200      	movs	r2, #0
 80033d8:	621a      	str	r2, [r3, #32]
  hfmac->OutputCurrentSize = 0U;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2200      	movs	r2, #0
 80033de:	839a      	strh	r2, [r3, #28]
  hfmac->RdState = HAL_FMAC_STATE_READY;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2220      	movs	r2, #32
 80033e4:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
}
 80033e8:	bf00      	nop
 80033ea:	370c      	adds	r7, #12
 80033ec:	46bd      	mov	sp, r7
 80033ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f2:	4770      	bx	lr

080033f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80033f4:	b480      	push	{r7}
 80033f6:	b087      	sub	sp, #28
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
 80033fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80033fe:	2300      	movs	r3, #0
 8003400:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003402:	e15a      	b.n	80036ba <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	681a      	ldr	r2, [r3, #0]
 8003408:	2101      	movs	r1, #1
 800340a:	697b      	ldr	r3, [r7, #20]
 800340c:	fa01 f303 	lsl.w	r3, r1, r3
 8003410:	4013      	ands	r3, r2
 8003412:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	2b00      	cmp	r3, #0
 8003418:	f000 814c 	beq.w	80036b4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	685b      	ldr	r3, [r3, #4]
 8003420:	f003 0303 	and.w	r3, r3, #3
 8003424:	2b01      	cmp	r3, #1
 8003426:	d005      	beq.n	8003434 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003430:	2b02      	cmp	r3, #2
 8003432:	d130      	bne.n	8003496 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	689b      	ldr	r3, [r3, #8]
 8003438:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800343a:	697b      	ldr	r3, [r7, #20]
 800343c:	005b      	lsls	r3, r3, #1
 800343e:	2203      	movs	r2, #3
 8003440:	fa02 f303 	lsl.w	r3, r2, r3
 8003444:	43db      	mvns	r3, r3
 8003446:	693a      	ldr	r2, [r7, #16]
 8003448:	4013      	ands	r3, r2
 800344a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	68da      	ldr	r2, [r3, #12]
 8003450:	697b      	ldr	r3, [r7, #20]
 8003452:	005b      	lsls	r3, r3, #1
 8003454:	fa02 f303 	lsl.w	r3, r2, r3
 8003458:	693a      	ldr	r2, [r7, #16]
 800345a:	4313      	orrs	r3, r2
 800345c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	693a      	ldr	r2, [r7, #16]
 8003462:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	685b      	ldr	r3, [r3, #4]
 8003468:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800346a:	2201      	movs	r2, #1
 800346c:	697b      	ldr	r3, [r7, #20]
 800346e:	fa02 f303 	lsl.w	r3, r2, r3
 8003472:	43db      	mvns	r3, r3
 8003474:	693a      	ldr	r2, [r7, #16]
 8003476:	4013      	ands	r3, r2
 8003478:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	685b      	ldr	r3, [r3, #4]
 800347e:	091b      	lsrs	r3, r3, #4
 8003480:	f003 0201 	and.w	r2, r3, #1
 8003484:	697b      	ldr	r3, [r7, #20]
 8003486:	fa02 f303 	lsl.w	r3, r2, r3
 800348a:	693a      	ldr	r2, [r7, #16]
 800348c:	4313      	orrs	r3, r2
 800348e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	693a      	ldr	r2, [r7, #16]
 8003494:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	685b      	ldr	r3, [r3, #4]
 800349a:	f003 0303 	and.w	r3, r3, #3
 800349e:	2b03      	cmp	r3, #3
 80034a0:	d017      	beq.n	80034d2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	68db      	ldr	r3, [r3, #12]
 80034a6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80034a8:	697b      	ldr	r3, [r7, #20]
 80034aa:	005b      	lsls	r3, r3, #1
 80034ac:	2203      	movs	r2, #3
 80034ae:	fa02 f303 	lsl.w	r3, r2, r3
 80034b2:	43db      	mvns	r3, r3
 80034b4:	693a      	ldr	r2, [r7, #16]
 80034b6:	4013      	ands	r3, r2
 80034b8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	689a      	ldr	r2, [r3, #8]
 80034be:	697b      	ldr	r3, [r7, #20]
 80034c0:	005b      	lsls	r3, r3, #1
 80034c2:	fa02 f303 	lsl.w	r3, r2, r3
 80034c6:	693a      	ldr	r2, [r7, #16]
 80034c8:	4313      	orrs	r3, r2
 80034ca:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	693a      	ldr	r2, [r7, #16]
 80034d0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	685b      	ldr	r3, [r3, #4]
 80034d6:	f003 0303 	and.w	r3, r3, #3
 80034da:	2b02      	cmp	r3, #2
 80034dc:	d123      	bne.n	8003526 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80034de:	697b      	ldr	r3, [r7, #20]
 80034e0:	08da      	lsrs	r2, r3, #3
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	3208      	adds	r2, #8
 80034e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80034ea:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80034ec:	697b      	ldr	r3, [r7, #20]
 80034ee:	f003 0307 	and.w	r3, r3, #7
 80034f2:	009b      	lsls	r3, r3, #2
 80034f4:	220f      	movs	r2, #15
 80034f6:	fa02 f303 	lsl.w	r3, r2, r3
 80034fa:	43db      	mvns	r3, r3
 80034fc:	693a      	ldr	r2, [r7, #16]
 80034fe:	4013      	ands	r3, r2
 8003500:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	691a      	ldr	r2, [r3, #16]
 8003506:	697b      	ldr	r3, [r7, #20]
 8003508:	f003 0307 	and.w	r3, r3, #7
 800350c:	009b      	lsls	r3, r3, #2
 800350e:	fa02 f303 	lsl.w	r3, r2, r3
 8003512:	693a      	ldr	r2, [r7, #16]
 8003514:	4313      	orrs	r3, r2
 8003516:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003518:	697b      	ldr	r3, [r7, #20]
 800351a:	08da      	lsrs	r2, r3, #3
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	3208      	adds	r2, #8
 8003520:	6939      	ldr	r1, [r7, #16]
 8003522:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800352c:	697b      	ldr	r3, [r7, #20]
 800352e:	005b      	lsls	r3, r3, #1
 8003530:	2203      	movs	r2, #3
 8003532:	fa02 f303 	lsl.w	r3, r2, r3
 8003536:	43db      	mvns	r3, r3
 8003538:	693a      	ldr	r2, [r7, #16]
 800353a:	4013      	ands	r3, r2
 800353c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	685b      	ldr	r3, [r3, #4]
 8003542:	f003 0203 	and.w	r2, r3, #3
 8003546:	697b      	ldr	r3, [r7, #20]
 8003548:	005b      	lsls	r3, r3, #1
 800354a:	fa02 f303 	lsl.w	r3, r2, r3
 800354e:	693a      	ldr	r2, [r7, #16]
 8003550:	4313      	orrs	r3, r2
 8003552:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	693a      	ldr	r2, [r7, #16]
 8003558:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	685b      	ldr	r3, [r3, #4]
 800355e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003562:	2b00      	cmp	r3, #0
 8003564:	f000 80a6 	beq.w	80036b4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003568:	4b5b      	ldr	r3, [pc, #364]	; (80036d8 <HAL_GPIO_Init+0x2e4>)
 800356a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800356c:	4a5a      	ldr	r2, [pc, #360]	; (80036d8 <HAL_GPIO_Init+0x2e4>)
 800356e:	f043 0301 	orr.w	r3, r3, #1
 8003572:	6613      	str	r3, [r2, #96]	; 0x60
 8003574:	4b58      	ldr	r3, [pc, #352]	; (80036d8 <HAL_GPIO_Init+0x2e4>)
 8003576:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003578:	f003 0301 	and.w	r3, r3, #1
 800357c:	60bb      	str	r3, [r7, #8]
 800357e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003580:	4a56      	ldr	r2, [pc, #344]	; (80036dc <HAL_GPIO_Init+0x2e8>)
 8003582:	697b      	ldr	r3, [r7, #20]
 8003584:	089b      	lsrs	r3, r3, #2
 8003586:	3302      	adds	r3, #2
 8003588:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800358c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800358e:	697b      	ldr	r3, [r7, #20]
 8003590:	f003 0303 	and.w	r3, r3, #3
 8003594:	009b      	lsls	r3, r3, #2
 8003596:	220f      	movs	r2, #15
 8003598:	fa02 f303 	lsl.w	r3, r2, r3
 800359c:	43db      	mvns	r3, r3
 800359e:	693a      	ldr	r2, [r7, #16]
 80035a0:	4013      	ands	r3, r2
 80035a2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80035aa:	d01f      	beq.n	80035ec <HAL_GPIO_Init+0x1f8>
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	4a4c      	ldr	r2, [pc, #304]	; (80036e0 <HAL_GPIO_Init+0x2ec>)
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d019      	beq.n	80035e8 <HAL_GPIO_Init+0x1f4>
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	4a4b      	ldr	r2, [pc, #300]	; (80036e4 <HAL_GPIO_Init+0x2f0>)
 80035b8:	4293      	cmp	r3, r2
 80035ba:	d013      	beq.n	80035e4 <HAL_GPIO_Init+0x1f0>
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	4a4a      	ldr	r2, [pc, #296]	; (80036e8 <HAL_GPIO_Init+0x2f4>)
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d00d      	beq.n	80035e0 <HAL_GPIO_Init+0x1ec>
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	4a49      	ldr	r2, [pc, #292]	; (80036ec <HAL_GPIO_Init+0x2f8>)
 80035c8:	4293      	cmp	r3, r2
 80035ca:	d007      	beq.n	80035dc <HAL_GPIO_Init+0x1e8>
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	4a48      	ldr	r2, [pc, #288]	; (80036f0 <HAL_GPIO_Init+0x2fc>)
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d101      	bne.n	80035d8 <HAL_GPIO_Init+0x1e4>
 80035d4:	2305      	movs	r3, #5
 80035d6:	e00a      	b.n	80035ee <HAL_GPIO_Init+0x1fa>
 80035d8:	2306      	movs	r3, #6
 80035da:	e008      	b.n	80035ee <HAL_GPIO_Init+0x1fa>
 80035dc:	2304      	movs	r3, #4
 80035de:	e006      	b.n	80035ee <HAL_GPIO_Init+0x1fa>
 80035e0:	2303      	movs	r3, #3
 80035e2:	e004      	b.n	80035ee <HAL_GPIO_Init+0x1fa>
 80035e4:	2302      	movs	r3, #2
 80035e6:	e002      	b.n	80035ee <HAL_GPIO_Init+0x1fa>
 80035e8:	2301      	movs	r3, #1
 80035ea:	e000      	b.n	80035ee <HAL_GPIO_Init+0x1fa>
 80035ec:	2300      	movs	r3, #0
 80035ee:	697a      	ldr	r2, [r7, #20]
 80035f0:	f002 0203 	and.w	r2, r2, #3
 80035f4:	0092      	lsls	r2, r2, #2
 80035f6:	4093      	lsls	r3, r2
 80035f8:	693a      	ldr	r2, [r7, #16]
 80035fa:	4313      	orrs	r3, r2
 80035fc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80035fe:	4937      	ldr	r1, [pc, #220]	; (80036dc <HAL_GPIO_Init+0x2e8>)
 8003600:	697b      	ldr	r3, [r7, #20]
 8003602:	089b      	lsrs	r3, r3, #2
 8003604:	3302      	adds	r3, #2
 8003606:	693a      	ldr	r2, [r7, #16]
 8003608:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800360c:	4b39      	ldr	r3, [pc, #228]	; (80036f4 <HAL_GPIO_Init+0x300>)
 800360e:	689b      	ldr	r3, [r3, #8]
 8003610:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	43db      	mvns	r3, r3
 8003616:	693a      	ldr	r2, [r7, #16]
 8003618:	4013      	ands	r3, r2
 800361a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	685b      	ldr	r3, [r3, #4]
 8003620:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003624:	2b00      	cmp	r3, #0
 8003626:	d003      	beq.n	8003630 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003628:	693a      	ldr	r2, [r7, #16]
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	4313      	orrs	r3, r2
 800362e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003630:	4a30      	ldr	r2, [pc, #192]	; (80036f4 <HAL_GPIO_Init+0x300>)
 8003632:	693b      	ldr	r3, [r7, #16]
 8003634:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003636:	4b2f      	ldr	r3, [pc, #188]	; (80036f4 <HAL_GPIO_Init+0x300>)
 8003638:	68db      	ldr	r3, [r3, #12]
 800363a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	43db      	mvns	r3, r3
 8003640:	693a      	ldr	r2, [r7, #16]
 8003642:	4013      	ands	r3, r2
 8003644:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	685b      	ldr	r3, [r3, #4]
 800364a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800364e:	2b00      	cmp	r3, #0
 8003650:	d003      	beq.n	800365a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8003652:	693a      	ldr	r2, [r7, #16]
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	4313      	orrs	r3, r2
 8003658:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800365a:	4a26      	ldr	r2, [pc, #152]	; (80036f4 <HAL_GPIO_Init+0x300>)
 800365c:	693b      	ldr	r3, [r7, #16]
 800365e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8003660:	4b24      	ldr	r3, [pc, #144]	; (80036f4 <HAL_GPIO_Init+0x300>)
 8003662:	685b      	ldr	r3, [r3, #4]
 8003664:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	43db      	mvns	r3, r3
 800366a:	693a      	ldr	r2, [r7, #16]
 800366c:	4013      	ands	r3, r2
 800366e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	685b      	ldr	r3, [r3, #4]
 8003674:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003678:	2b00      	cmp	r3, #0
 800367a:	d003      	beq.n	8003684 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800367c:	693a      	ldr	r2, [r7, #16]
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	4313      	orrs	r3, r2
 8003682:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003684:	4a1b      	ldr	r2, [pc, #108]	; (80036f4 <HAL_GPIO_Init+0x300>)
 8003686:	693b      	ldr	r3, [r7, #16]
 8003688:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800368a:	4b1a      	ldr	r3, [pc, #104]	; (80036f4 <HAL_GPIO_Init+0x300>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	43db      	mvns	r3, r3
 8003694:	693a      	ldr	r2, [r7, #16]
 8003696:	4013      	ands	r3, r2
 8003698:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	685b      	ldr	r3, [r3, #4]
 800369e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d003      	beq.n	80036ae <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80036a6:	693a      	ldr	r2, [r7, #16]
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	4313      	orrs	r3, r2
 80036ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80036ae:	4a11      	ldr	r2, [pc, #68]	; (80036f4 <HAL_GPIO_Init+0x300>)
 80036b0:	693b      	ldr	r3, [r7, #16]
 80036b2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80036b4:	697b      	ldr	r3, [r7, #20]
 80036b6:	3301      	adds	r3, #1
 80036b8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	681a      	ldr	r2, [r3, #0]
 80036be:	697b      	ldr	r3, [r7, #20]
 80036c0:	fa22 f303 	lsr.w	r3, r2, r3
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	f47f ae9d 	bne.w	8003404 <HAL_GPIO_Init+0x10>
  }
}
 80036ca:	bf00      	nop
 80036cc:	bf00      	nop
 80036ce:	371c      	adds	r7, #28
 80036d0:	46bd      	mov	sp, r7
 80036d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d6:	4770      	bx	lr
 80036d8:	40021000 	.word	0x40021000
 80036dc:	40010000 	.word	0x40010000
 80036e0:	48000400 	.word	0x48000400
 80036e4:	48000800 	.word	0x48000800
 80036e8:	48000c00 	.word	0x48000c00
 80036ec:	48001000 	.word	0x48001000
 80036f0:	48001400 	.word	0x48001400
 80036f4:	40010400 	.word	0x40010400

080036f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80036f8:	b480      	push	{r7}
 80036fa:	b083      	sub	sp, #12
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
 8003700:	460b      	mov	r3, r1
 8003702:	807b      	strh	r3, [r7, #2]
 8003704:	4613      	mov	r3, r2
 8003706:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003708:	787b      	ldrb	r3, [r7, #1]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d003      	beq.n	8003716 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800370e:	887a      	ldrh	r2, [r7, #2]
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003714:	e002      	b.n	800371c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003716:	887a      	ldrh	r2, [r7, #2]
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800371c:	bf00      	nop
 800371e:	370c      	adds	r7, #12
 8003720:	46bd      	mov	sp, r7
 8003722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003726:	4770      	bx	lr

08003728 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b082      	sub	sp, #8
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d101      	bne.n	800373a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003736:	2301      	movs	r3, #1
 8003738:	e081      	b.n	800383e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003740:	b2db      	uxtb	r3, r3
 8003742:	2b00      	cmp	r3, #0
 8003744:	d106      	bne.n	8003754 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2200      	movs	r2, #0
 800374a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800374e:	6878      	ldr	r0, [r7, #4]
 8003750:	f7fd fbb6 	bl	8000ec0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2224      	movs	r2, #36	; 0x24
 8003758:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	681a      	ldr	r2, [r3, #0]
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f022 0201 	bic.w	r2, r2, #1
 800376a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	685a      	ldr	r2, [r3, #4]
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003778:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	689a      	ldr	r2, [r3, #8]
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003788:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	68db      	ldr	r3, [r3, #12]
 800378e:	2b01      	cmp	r3, #1
 8003790:	d107      	bne.n	80037a2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	689a      	ldr	r2, [r3, #8]
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800379e:	609a      	str	r2, [r3, #8]
 80037a0:	e006      	b.n	80037b0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	689a      	ldr	r2, [r3, #8]
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80037ae:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	68db      	ldr	r3, [r3, #12]
 80037b4:	2b02      	cmp	r3, #2
 80037b6:	d104      	bne.n	80037c2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80037c0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	685b      	ldr	r3, [r3, #4]
 80037c8:	687a      	ldr	r2, [r7, #4]
 80037ca:	6812      	ldr	r2, [r2, #0]
 80037cc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80037d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80037d4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	68da      	ldr	r2, [r3, #12]
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80037e4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	691a      	ldr	r2, [r3, #16]
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	695b      	ldr	r3, [r3, #20]
 80037ee:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	699b      	ldr	r3, [r3, #24]
 80037f6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	430a      	orrs	r2, r1
 80037fe:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	69d9      	ldr	r1, [r3, #28]
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6a1a      	ldr	r2, [r3, #32]
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	430a      	orrs	r2, r1
 800380e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	681a      	ldr	r2, [r3, #0]
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f042 0201 	orr.w	r2, r2, #1
 800381e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2200      	movs	r2, #0
 8003824:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2220      	movs	r2, #32
 800382a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	2200      	movs	r2, #0
 8003832:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2200      	movs	r2, #0
 8003838:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800383c:	2300      	movs	r3, #0
}
 800383e:	4618      	mov	r0, r3
 8003840:	3708      	adds	r7, #8
 8003842:	46bd      	mov	sp, r7
 8003844:	bd80      	pop	{r7, pc}

08003846 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003846:	b480      	push	{r7}
 8003848:	b083      	sub	sp, #12
 800384a:	af00      	add	r7, sp, #0
 800384c:	6078      	str	r0, [r7, #4]
 800384e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003856:	b2db      	uxtb	r3, r3
 8003858:	2b20      	cmp	r3, #32
 800385a:	d138      	bne.n	80038ce <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003862:	2b01      	cmp	r3, #1
 8003864:	d101      	bne.n	800386a <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003866:	2302      	movs	r3, #2
 8003868:	e032      	b.n	80038d0 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2201      	movs	r2, #1
 800386e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2224      	movs	r2, #36	; 0x24
 8003876:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	681a      	ldr	r2, [r3, #0]
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f022 0201 	bic.w	r2, r2, #1
 8003888:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	681a      	ldr	r2, [r3, #0]
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003898:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	6819      	ldr	r1, [r3, #0]
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	683a      	ldr	r2, [r7, #0]
 80038a6:	430a      	orrs	r2, r1
 80038a8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	681a      	ldr	r2, [r3, #0]
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f042 0201 	orr.w	r2, r2, #1
 80038b8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2220      	movs	r2, #32
 80038be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2200      	movs	r2, #0
 80038c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80038ca:	2300      	movs	r3, #0
 80038cc:	e000      	b.n	80038d0 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80038ce:	2302      	movs	r3, #2
  }
}
 80038d0:	4618      	mov	r0, r3
 80038d2:	370c      	adds	r7, #12
 80038d4:	46bd      	mov	sp, r7
 80038d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038da:	4770      	bx	lr

080038dc <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80038dc:	b480      	push	{r7}
 80038de:	b085      	sub	sp, #20
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
 80038e4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80038ec:	b2db      	uxtb	r3, r3
 80038ee:	2b20      	cmp	r3, #32
 80038f0:	d139      	bne.n	8003966 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80038f8:	2b01      	cmp	r3, #1
 80038fa:	d101      	bne.n	8003900 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80038fc:	2302      	movs	r3, #2
 80038fe:	e033      	b.n	8003968 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2201      	movs	r2, #1
 8003904:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2224      	movs	r2, #36	; 0x24
 800390c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	681a      	ldr	r2, [r3, #0]
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f022 0201 	bic.w	r2, r2, #1
 800391e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800392e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	021b      	lsls	r3, r3, #8
 8003934:	68fa      	ldr	r2, [r7, #12]
 8003936:	4313      	orrs	r3, r2
 8003938:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	68fa      	ldr	r2, [r7, #12]
 8003940:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	681a      	ldr	r2, [r3, #0]
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f042 0201 	orr.w	r2, r2, #1
 8003950:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	2220      	movs	r2, #32
 8003956:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2200      	movs	r2, #0
 800395e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003962:	2300      	movs	r3, #0
 8003964:	e000      	b.n	8003968 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003966:	2302      	movs	r3, #2
  }
}
 8003968:	4618      	mov	r0, r3
 800396a:	3714      	adds	r7, #20
 800396c:	46bd      	mov	sp, r7
 800396e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003972:	4770      	bx	lr

08003974 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003974:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003976:	b08b      	sub	sp, #44	; 0x2c
 8003978:	af06      	add	r7, sp, #24
 800397a:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d101      	bne.n	8003986 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003982:	2301      	movs	r3, #1
 8003984:	e0d7      	b.n	8003b36 <HAL_PCD_Init+0x1c2>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 800398c:	b2db      	uxtb	r3, r3
 800398e:	2b00      	cmp	r3, #0
 8003990:	d106      	bne.n	80039a0 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2200      	movs	r2, #0
 8003996:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800399a:	6878      	ldr	r0, [r7, #4]
 800399c:	f009 fac4 	bl	800cf28 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2203      	movs	r2, #3
 80039a4:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	4618      	mov	r0, r3
 80039ae:	f005 fa0a 	bl	8008dc6 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80039b2:	2300      	movs	r3, #0
 80039b4:	73fb      	strb	r3, [r7, #15]
 80039b6:	e04c      	b.n	8003a52 <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80039b8:	7bfb      	ldrb	r3, [r7, #15]
 80039ba:	6879      	ldr	r1, [r7, #4]
 80039bc:	1c5a      	adds	r2, r3, #1
 80039be:	4613      	mov	r3, r2
 80039c0:	009b      	lsls	r3, r3, #2
 80039c2:	4413      	add	r3, r2
 80039c4:	00db      	lsls	r3, r3, #3
 80039c6:	440b      	add	r3, r1
 80039c8:	3301      	adds	r3, #1
 80039ca:	2201      	movs	r2, #1
 80039cc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80039ce:	7bfb      	ldrb	r3, [r7, #15]
 80039d0:	6879      	ldr	r1, [r7, #4]
 80039d2:	1c5a      	adds	r2, r3, #1
 80039d4:	4613      	mov	r3, r2
 80039d6:	009b      	lsls	r3, r3, #2
 80039d8:	4413      	add	r3, r2
 80039da:	00db      	lsls	r3, r3, #3
 80039dc:	440b      	add	r3, r1
 80039de:	7bfa      	ldrb	r2, [r7, #15]
 80039e0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80039e2:	7bfa      	ldrb	r2, [r7, #15]
 80039e4:	7bfb      	ldrb	r3, [r7, #15]
 80039e6:	b298      	uxth	r0, r3
 80039e8:	6879      	ldr	r1, [r7, #4]
 80039ea:	4613      	mov	r3, r2
 80039ec:	009b      	lsls	r3, r3, #2
 80039ee:	4413      	add	r3, r2
 80039f0:	00db      	lsls	r3, r3, #3
 80039f2:	440b      	add	r3, r1
 80039f4:	3336      	adds	r3, #54	; 0x36
 80039f6:	4602      	mov	r2, r0
 80039f8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80039fa:	7bfb      	ldrb	r3, [r7, #15]
 80039fc:	6879      	ldr	r1, [r7, #4]
 80039fe:	1c5a      	adds	r2, r3, #1
 8003a00:	4613      	mov	r3, r2
 8003a02:	009b      	lsls	r3, r3, #2
 8003a04:	4413      	add	r3, r2
 8003a06:	00db      	lsls	r3, r3, #3
 8003a08:	440b      	add	r3, r1
 8003a0a:	3303      	adds	r3, #3
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003a10:	7bfa      	ldrb	r2, [r7, #15]
 8003a12:	6879      	ldr	r1, [r7, #4]
 8003a14:	4613      	mov	r3, r2
 8003a16:	009b      	lsls	r3, r3, #2
 8003a18:	4413      	add	r3, r2
 8003a1a:	00db      	lsls	r3, r3, #3
 8003a1c:	440b      	add	r3, r1
 8003a1e:	3338      	adds	r3, #56	; 0x38
 8003a20:	2200      	movs	r2, #0
 8003a22:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003a24:	7bfa      	ldrb	r2, [r7, #15]
 8003a26:	6879      	ldr	r1, [r7, #4]
 8003a28:	4613      	mov	r3, r2
 8003a2a:	009b      	lsls	r3, r3, #2
 8003a2c:	4413      	add	r3, r2
 8003a2e:	00db      	lsls	r3, r3, #3
 8003a30:	440b      	add	r3, r1
 8003a32:	333c      	adds	r3, #60	; 0x3c
 8003a34:	2200      	movs	r2, #0
 8003a36:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003a38:	7bfa      	ldrb	r2, [r7, #15]
 8003a3a:	6879      	ldr	r1, [r7, #4]
 8003a3c:	4613      	mov	r3, r2
 8003a3e:	009b      	lsls	r3, r3, #2
 8003a40:	4413      	add	r3, r2
 8003a42:	00db      	lsls	r3, r3, #3
 8003a44:	440b      	add	r3, r1
 8003a46:	3340      	adds	r3, #64	; 0x40
 8003a48:	2200      	movs	r2, #0
 8003a4a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003a4c:	7bfb      	ldrb	r3, [r7, #15]
 8003a4e:	3301      	adds	r3, #1
 8003a50:	73fb      	strb	r3, [r7, #15]
 8003a52:	7bfa      	ldrb	r2, [r7, #15]
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	685b      	ldr	r3, [r3, #4]
 8003a58:	429a      	cmp	r2, r3
 8003a5a:	d3ad      	bcc.n	80039b8 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	73fb      	strb	r3, [r7, #15]
 8003a60:	e044      	b.n	8003aec <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003a62:	7bfa      	ldrb	r2, [r7, #15]
 8003a64:	6879      	ldr	r1, [r7, #4]
 8003a66:	4613      	mov	r3, r2
 8003a68:	009b      	lsls	r3, r3, #2
 8003a6a:	4413      	add	r3, r2
 8003a6c:	00db      	lsls	r3, r3, #3
 8003a6e:	440b      	add	r3, r1
 8003a70:	f203 1369 	addw	r3, r3, #361	; 0x169
 8003a74:	2200      	movs	r2, #0
 8003a76:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003a78:	7bfa      	ldrb	r2, [r7, #15]
 8003a7a:	6879      	ldr	r1, [r7, #4]
 8003a7c:	4613      	mov	r3, r2
 8003a7e:	009b      	lsls	r3, r3, #2
 8003a80:	4413      	add	r3, r2
 8003a82:	00db      	lsls	r3, r3, #3
 8003a84:	440b      	add	r3, r1
 8003a86:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003a8a:	7bfa      	ldrb	r2, [r7, #15]
 8003a8c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003a8e:	7bfa      	ldrb	r2, [r7, #15]
 8003a90:	6879      	ldr	r1, [r7, #4]
 8003a92:	4613      	mov	r3, r2
 8003a94:	009b      	lsls	r3, r3, #2
 8003a96:	4413      	add	r3, r2
 8003a98:	00db      	lsls	r3, r3, #3
 8003a9a:	440b      	add	r3, r1
 8003a9c:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003aa4:	7bfa      	ldrb	r2, [r7, #15]
 8003aa6:	6879      	ldr	r1, [r7, #4]
 8003aa8:	4613      	mov	r3, r2
 8003aaa:	009b      	lsls	r3, r3, #2
 8003aac:	4413      	add	r3, r2
 8003aae:	00db      	lsls	r3, r3, #3
 8003ab0:	440b      	add	r3, r1
 8003ab2:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003aba:	7bfa      	ldrb	r2, [r7, #15]
 8003abc:	6879      	ldr	r1, [r7, #4]
 8003abe:	4613      	mov	r3, r2
 8003ac0:	009b      	lsls	r3, r3, #2
 8003ac2:	4413      	add	r3, r2
 8003ac4:	00db      	lsls	r3, r3, #3
 8003ac6:	440b      	add	r3, r1
 8003ac8:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8003acc:	2200      	movs	r2, #0
 8003ace:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003ad0:	7bfa      	ldrb	r2, [r7, #15]
 8003ad2:	6879      	ldr	r1, [r7, #4]
 8003ad4:	4613      	mov	r3, r2
 8003ad6:	009b      	lsls	r3, r3, #2
 8003ad8:	4413      	add	r3, r2
 8003ada:	00db      	lsls	r3, r3, #3
 8003adc:	440b      	add	r3, r1
 8003ade:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003ae6:	7bfb      	ldrb	r3, [r7, #15]
 8003ae8:	3301      	adds	r3, #1
 8003aea:	73fb      	strb	r3, [r7, #15]
 8003aec:	7bfa      	ldrb	r2, [r7, #15]
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	685b      	ldr	r3, [r3, #4]
 8003af2:	429a      	cmp	r2, r3
 8003af4:	d3b5      	bcc.n	8003a62 <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	603b      	str	r3, [r7, #0]
 8003afc:	687e      	ldr	r6, [r7, #4]
 8003afe:	466d      	mov	r5, sp
 8003b00:	f106 0410 	add.w	r4, r6, #16
 8003b04:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003b06:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003b08:	6823      	ldr	r3, [r4, #0]
 8003b0a:	602b      	str	r3, [r5, #0]
 8003b0c:	1d33      	adds	r3, r6, #4
 8003b0e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003b10:	6838      	ldr	r0, [r7, #0]
 8003b12:	f005 f973 	bl	8008dfc <USB_DevInit>

  hpcd->USB_Address = 0U;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2200      	movs	r2, #0
 8003b1a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2201      	movs	r2, #1
 8003b22:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	69db      	ldr	r3, [r3, #28]
 8003b2a:	2b01      	cmp	r3, #1
 8003b2c:	d102      	bne.n	8003b34 <HAL_PCD_Init+0x1c0>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003b2e:	6878      	ldr	r0, [r7, #4]
 8003b30:	f001 fc29 	bl	8005386 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8003b34:	2300      	movs	r3, #0
}
 8003b36:	4618      	mov	r0, r3
 8003b38:	3714      	adds	r7, #20
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003b3e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003b3e:	b580      	push	{r7, lr}
 8003b40:	b082      	sub	sp, #8
 8003b42:	af00      	add	r7, sp, #0
 8003b44:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003b4c:	2b01      	cmp	r3, #1
 8003b4e:	d101      	bne.n	8003b54 <HAL_PCD_Start+0x16>
 8003b50:	2302      	movs	r3, #2
 8003b52:	e012      	b.n	8003b7a <HAL_PCD_Start+0x3c>
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2201      	movs	r2, #1
 8003b58:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4618      	mov	r0, r3
 8003b62:	f005 f919 	bl	8008d98 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	f007 fb32 	bl	800b1d4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2200      	movs	r2, #0
 8003b74:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003b78:	2300      	movs	r3, #0
}
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	3708      	adds	r7, #8
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	bd80      	pop	{r7, pc}

08003b82 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003b82:	b580      	push	{r7, lr}
 8003b84:	b084      	sub	sp, #16
 8003b86:	af00      	add	r7, sp, #0
 8003b88:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	4618      	mov	r0, r3
 8003b90:	f007 fb37 	bl	800b202 <USB_ReadInterrupts>
 8003b94:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d003      	beq.n	8003ba8 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8003ba0:	6878      	ldr	r0, [r7, #4]
 8003ba2:	f000 fb26 	bl	80041f2 <PCD_EP_ISR_Handler>

    return;
 8003ba6:	e110      	b.n	8003dca <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d013      	beq.n	8003bda <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003bba:	b29a      	uxth	r2, r3
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003bc4:	b292      	uxth	r2, r2
 8003bc6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8003bca:	6878      	ldr	r0, [r7, #4]
 8003bcc:	f009 fa3d 	bl	800d04a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8003bd0:	2100      	movs	r1, #0
 8003bd2:	6878      	ldr	r0, [r7, #4]
 8003bd4:	f000 f8fc 	bl	8003dd0 <HAL_PCD_SetAddress>

    return;
 8003bd8:	e0f7      	b.n	8003dca <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d00c      	beq.n	8003bfe <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003bec:	b29a      	uxth	r2, r3
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003bf6:	b292      	uxth	r2, r2
 8003bf8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8003bfc:	e0e5      	b.n	8003dca <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d00c      	beq.n	8003c22 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003c10:	b29a      	uxth	r2, r3
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003c1a:	b292      	uxth	r2, r2
 8003c1c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8003c20:	e0d3      	b.n	8003dca <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d034      	beq.n	8003c96 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003c34:	b29a      	uxth	r2, r3
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f022 0204 	bic.w	r2, r2, #4
 8003c3e:	b292      	uxth	r2, r2
 8003c40:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003c4c:	b29a      	uxth	r2, r3
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f022 0208 	bic.w	r2, r2, #8
 8003c56:	b292      	uxth	r2, r2
 8003c58:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8003c62:	2b01      	cmp	r3, #1
 8003c64:	d107      	bne.n	8003c76 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2200      	movs	r2, #0
 8003c6a:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003c6e:	2100      	movs	r1, #0
 8003c70:	6878      	ldr	r0, [r7, #4]
 8003c72:	f009 fbdf 	bl	800d434 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8003c76:	6878      	ldr	r0, [r7, #4]
 8003c78:	f009 fa20 	bl	800d0bc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003c84:	b29a      	uxth	r2, r3
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003c8e:	b292      	uxth	r2, r2
 8003c90:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8003c94:	e099      	b.n	8003dca <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d027      	beq.n	8003cf0 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003ca8:	b29a      	uxth	r2, r3
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f042 0208 	orr.w	r2, r2, #8
 8003cb2:	b292      	uxth	r2, r2
 8003cb4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003cc0:	b29a      	uxth	r2, r3
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003cca:	b292      	uxth	r2, r2
 8003ccc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003cd8:	b29a      	uxth	r2, r3
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f042 0204 	orr.w	r2, r2, #4
 8003ce2:	b292      	uxth	r2, r2
 8003ce4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8003ce8:	6878      	ldr	r0, [r7, #4]
 8003cea:	f009 f9cd 	bl	800d088 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8003cee:	e06c      	b.n	8003dca <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d040      	beq.n	8003d7c <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003d02:	b29a      	uxth	r2, r3
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003d0c:	b292      	uxth	r2, r2
 8003d0e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d12b      	bne.n	8003d74 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003d24:	b29a      	uxth	r2, r3
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f042 0204 	orr.w	r2, r2, #4
 8003d2e:	b292      	uxth	r2, r2
 8003d30:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003d3c:	b29a      	uxth	r2, r3
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f042 0208 	orr.w	r2, r2, #8
 8003d46:	b292      	uxth	r2, r2
 8003d48:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2201      	movs	r2, #1
 8003d50:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8003d5c:	b29b      	uxth	r3, r3
 8003d5e:	089b      	lsrs	r3, r3, #2
 8003d60:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8003d6a:	2101      	movs	r1, #1
 8003d6c:	6878      	ldr	r0, [r7, #4]
 8003d6e:	f009 fb61 	bl	800d434 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8003d72:	e02a      	b.n	8003dca <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8003d74:	6878      	ldr	r0, [r7, #4]
 8003d76:	f009 f987 	bl	800d088 <HAL_PCD_SuspendCallback>
    return;
 8003d7a:	e026      	b.n	8003dca <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d00f      	beq.n	8003da6 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003d8e:	b29a      	uxth	r2, r3
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003d98:	b292      	uxth	r2, r2
 8003d9a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8003d9e:	6878      	ldr	r0, [r7, #4]
 8003da0:	f009 f945 	bl	800d02e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8003da4:	e011      	b.n	8003dca <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d00c      	beq.n	8003dca <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003db8:	b29a      	uxth	r2, r3
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003dc2:	b292      	uxth	r2, r2
 8003dc4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8003dc8:	bf00      	nop
  }
}
 8003dca:	3710      	adds	r7, #16
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	bd80      	pop	{r7, pc}

08003dd0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b082      	sub	sp, #8
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
 8003dd8:	460b      	mov	r3, r1
 8003dda:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003de2:	2b01      	cmp	r3, #1
 8003de4:	d101      	bne.n	8003dea <HAL_PCD_SetAddress+0x1a>
 8003de6:	2302      	movs	r3, #2
 8003de8:	e013      	b.n	8003e12 <HAL_PCD_SetAddress+0x42>
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2201      	movs	r2, #1
 8003dee:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	78fa      	ldrb	r2, [r7, #3]
 8003df6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	78fa      	ldrb	r2, [r7, #3]
 8003e00:	4611      	mov	r1, r2
 8003e02:	4618      	mov	r0, r3
 8003e04:	f007 f9d2 	bl	800b1ac <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003e10:	2300      	movs	r3, #0
}
 8003e12:	4618      	mov	r0, r3
 8003e14:	3708      	adds	r7, #8
 8003e16:	46bd      	mov	sp, r7
 8003e18:	bd80      	pop	{r7, pc}

08003e1a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003e1a:	b580      	push	{r7, lr}
 8003e1c:	b084      	sub	sp, #16
 8003e1e:	af00      	add	r7, sp, #0
 8003e20:	6078      	str	r0, [r7, #4]
 8003e22:	4608      	mov	r0, r1
 8003e24:	4611      	mov	r1, r2
 8003e26:	461a      	mov	r2, r3
 8003e28:	4603      	mov	r3, r0
 8003e2a:	70fb      	strb	r3, [r7, #3]
 8003e2c:	460b      	mov	r3, r1
 8003e2e:	803b      	strh	r3, [r7, #0]
 8003e30:	4613      	mov	r3, r2
 8003e32:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003e34:	2300      	movs	r3, #0
 8003e36:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003e38:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	da0e      	bge.n	8003e5e <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003e40:	78fb      	ldrb	r3, [r7, #3]
 8003e42:	f003 0307 	and.w	r3, r3, #7
 8003e46:	1c5a      	adds	r2, r3, #1
 8003e48:	4613      	mov	r3, r2
 8003e4a:	009b      	lsls	r3, r3, #2
 8003e4c:	4413      	add	r3, r2
 8003e4e:	00db      	lsls	r3, r3, #3
 8003e50:	687a      	ldr	r2, [r7, #4]
 8003e52:	4413      	add	r3, r2
 8003e54:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	2201      	movs	r2, #1
 8003e5a:	705a      	strb	r2, [r3, #1]
 8003e5c:	e00e      	b.n	8003e7c <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003e5e:	78fb      	ldrb	r3, [r7, #3]
 8003e60:	f003 0207 	and.w	r2, r3, #7
 8003e64:	4613      	mov	r3, r2
 8003e66:	009b      	lsls	r3, r3, #2
 8003e68:	4413      	add	r3, r2
 8003e6a:	00db      	lsls	r3, r3, #3
 8003e6c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003e70:	687a      	ldr	r2, [r7, #4]
 8003e72:	4413      	add	r3, r2
 8003e74:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	2200      	movs	r2, #0
 8003e7a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003e7c:	78fb      	ldrb	r3, [r7, #3]
 8003e7e:	f003 0307 	and.w	r3, r3, #7
 8003e82:	b2da      	uxtb	r2, r3
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003e88:	883a      	ldrh	r2, [r7, #0]
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	78ba      	ldrb	r2, [r7, #2]
 8003e92:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	785b      	ldrb	r3, [r3, #1]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d004      	beq.n	8003ea6 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	781b      	ldrb	r3, [r3, #0]
 8003ea0:	b29a      	uxth	r2, r3
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003ea6:	78bb      	ldrb	r3, [r7, #2]
 8003ea8:	2b02      	cmp	r3, #2
 8003eaa:	d102      	bne.n	8003eb2 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	2200      	movs	r2, #0
 8003eb0:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003eb8:	2b01      	cmp	r3, #1
 8003eba:	d101      	bne.n	8003ec0 <HAL_PCD_EP_Open+0xa6>
 8003ebc:	2302      	movs	r3, #2
 8003ebe:	e00e      	b.n	8003ede <HAL_PCD_EP_Open+0xc4>
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2201      	movs	r2, #1
 8003ec4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	68f9      	ldr	r1, [r7, #12]
 8003ece:	4618      	mov	r0, r3
 8003ed0:	f004 ffb6 	bl	8008e40 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8003edc:	7afb      	ldrb	r3, [r7, #11]
}
 8003ede:	4618      	mov	r0, r3
 8003ee0:	3710      	adds	r7, #16
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	bd80      	pop	{r7, pc}

08003ee6 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003ee6:	b580      	push	{r7, lr}
 8003ee8:	b084      	sub	sp, #16
 8003eea:	af00      	add	r7, sp, #0
 8003eec:	6078      	str	r0, [r7, #4]
 8003eee:	460b      	mov	r3, r1
 8003ef0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003ef2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	da0e      	bge.n	8003f18 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003efa:	78fb      	ldrb	r3, [r7, #3]
 8003efc:	f003 0307 	and.w	r3, r3, #7
 8003f00:	1c5a      	adds	r2, r3, #1
 8003f02:	4613      	mov	r3, r2
 8003f04:	009b      	lsls	r3, r3, #2
 8003f06:	4413      	add	r3, r2
 8003f08:	00db      	lsls	r3, r3, #3
 8003f0a:	687a      	ldr	r2, [r7, #4]
 8003f0c:	4413      	add	r3, r2
 8003f0e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	2201      	movs	r2, #1
 8003f14:	705a      	strb	r2, [r3, #1]
 8003f16:	e00e      	b.n	8003f36 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003f18:	78fb      	ldrb	r3, [r7, #3]
 8003f1a:	f003 0207 	and.w	r2, r3, #7
 8003f1e:	4613      	mov	r3, r2
 8003f20:	009b      	lsls	r3, r3, #2
 8003f22:	4413      	add	r3, r2
 8003f24:	00db      	lsls	r3, r3, #3
 8003f26:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003f2a:	687a      	ldr	r2, [r7, #4]
 8003f2c:	4413      	add	r3, r2
 8003f2e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	2200      	movs	r2, #0
 8003f34:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003f36:	78fb      	ldrb	r3, [r7, #3]
 8003f38:	f003 0307 	and.w	r3, r3, #7
 8003f3c:	b2da      	uxtb	r2, r3
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003f48:	2b01      	cmp	r3, #1
 8003f4a:	d101      	bne.n	8003f50 <HAL_PCD_EP_Close+0x6a>
 8003f4c:	2302      	movs	r3, #2
 8003f4e:	e00e      	b.n	8003f6e <HAL_PCD_EP_Close+0x88>
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2201      	movs	r2, #1
 8003f54:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	68f9      	ldr	r1, [r7, #12]
 8003f5e:	4618      	mov	r0, r3
 8003f60:	f005 fb02 	bl	8009568 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2200      	movs	r2, #0
 8003f68:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8003f6c:	2300      	movs	r3, #0
}
 8003f6e:	4618      	mov	r0, r3
 8003f70:	3710      	adds	r7, #16
 8003f72:	46bd      	mov	sp, r7
 8003f74:	bd80      	pop	{r7, pc}

08003f76 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003f76:	b580      	push	{r7, lr}
 8003f78:	b086      	sub	sp, #24
 8003f7a:	af00      	add	r7, sp, #0
 8003f7c:	60f8      	str	r0, [r7, #12]
 8003f7e:	607a      	str	r2, [r7, #4]
 8003f80:	603b      	str	r3, [r7, #0]
 8003f82:	460b      	mov	r3, r1
 8003f84:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003f86:	7afb      	ldrb	r3, [r7, #11]
 8003f88:	f003 0207 	and.w	r2, r3, #7
 8003f8c:	4613      	mov	r3, r2
 8003f8e:	009b      	lsls	r3, r3, #2
 8003f90:	4413      	add	r3, r2
 8003f92:	00db      	lsls	r3, r3, #3
 8003f94:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003f98:	68fa      	ldr	r2, [r7, #12]
 8003f9a:	4413      	add	r3, r2
 8003f9c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003f9e:	697b      	ldr	r3, [r7, #20]
 8003fa0:	687a      	ldr	r2, [r7, #4]
 8003fa2:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003fa4:	697b      	ldr	r3, [r7, #20]
 8003fa6:	683a      	ldr	r2, [r7, #0]
 8003fa8:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003faa:	697b      	ldr	r3, [r7, #20]
 8003fac:	2200      	movs	r2, #0
 8003fae:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8003fb0:	697b      	ldr	r3, [r7, #20]
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003fb6:	7afb      	ldrb	r3, [r7, #11]
 8003fb8:	f003 0307 	and.w	r3, r3, #7
 8003fbc:	b2da      	uxtb	r2, r3
 8003fbe:	697b      	ldr	r3, [r7, #20]
 8003fc0:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003fc2:	7afb      	ldrb	r3, [r7, #11]
 8003fc4:	f003 0307 	and.w	r3, r3, #7
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d106      	bne.n	8003fda <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	6979      	ldr	r1, [r7, #20]
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	f005 fcb5 	bl	8009942 <USB_EPStartXfer>
 8003fd8:	e005      	b.n	8003fe6 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	6979      	ldr	r1, [r7, #20]
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	f005 fcae 	bl	8009942 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003fe6:	2300      	movs	r3, #0
}
 8003fe8:	4618      	mov	r0, r3
 8003fea:	3718      	adds	r7, #24
 8003fec:	46bd      	mov	sp, r7
 8003fee:	bd80      	pop	{r7, pc}

08003ff0 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003ff0:	b480      	push	{r7}
 8003ff2:	b083      	sub	sp, #12
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
 8003ff8:	460b      	mov	r3, r1
 8003ffa:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003ffc:	78fb      	ldrb	r3, [r7, #3]
 8003ffe:	f003 0207 	and.w	r2, r3, #7
 8004002:	6879      	ldr	r1, [r7, #4]
 8004004:	4613      	mov	r3, r2
 8004006:	009b      	lsls	r3, r3, #2
 8004008:	4413      	add	r3, r2
 800400a:	00db      	lsls	r3, r3, #3
 800400c:	440b      	add	r3, r1
 800400e:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8004012:	681b      	ldr	r3, [r3, #0]
}
 8004014:	4618      	mov	r0, r3
 8004016:	370c      	adds	r7, #12
 8004018:	46bd      	mov	sp, r7
 800401a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401e:	4770      	bx	lr

08004020 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004020:	b580      	push	{r7, lr}
 8004022:	b086      	sub	sp, #24
 8004024:	af00      	add	r7, sp, #0
 8004026:	60f8      	str	r0, [r7, #12]
 8004028:	607a      	str	r2, [r7, #4]
 800402a:	603b      	str	r3, [r7, #0]
 800402c:	460b      	mov	r3, r1
 800402e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004030:	7afb      	ldrb	r3, [r7, #11]
 8004032:	f003 0307 	and.w	r3, r3, #7
 8004036:	1c5a      	adds	r2, r3, #1
 8004038:	4613      	mov	r3, r2
 800403a:	009b      	lsls	r3, r3, #2
 800403c:	4413      	add	r3, r2
 800403e:	00db      	lsls	r3, r3, #3
 8004040:	68fa      	ldr	r2, [r7, #12]
 8004042:	4413      	add	r3, r2
 8004044:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004046:	697b      	ldr	r3, [r7, #20]
 8004048:	687a      	ldr	r2, [r7, #4]
 800404a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800404c:	697b      	ldr	r3, [r7, #20]
 800404e:	683a      	ldr	r2, [r7, #0]
 8004050:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8004052:	697b      	ldr	r3, [r7, #20]
 8004054:	2201      	movs	r2, #1
 8004056:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 800405a:	697b      	ldr	r3, [r7, #20]
 800405c:	683a      	ldr	r2, [r7, #0]
 800405e:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8004060:	697b      	ldr	r3, [r7, #20]
 8004062:	2200      	movs	r2, #0
 8004064:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8004066:	697b      	ldr	r3, [r7, #20]
 8004068:	2201      	movs	r2, #1
 800406a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800406c:	7afb      	ldrb	r3, [r7, #11]
 800406e:	f003 0307 	and.w	r3, r3, #7
 8004072:	b2da      	uxtb	r2, r3
 8004074:	697b      	ldr	r3, [r7, #20]
 8004076:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004078:	7afb      	ldrb	r3, [r7, #11]
 800407a:	f003 0307 	and.w	r3, r3, #7
 800407e:	2b00      	cmp	r3, #0
 8004080:	d106      	bne.n	8004090 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	6979      	ldr	r1, [r7, #20]
 8004088:	4618      	mov	r0, r3
 800408a:	f005 fc5a 	bl	8009942 <USB_EPStartXfer>
 800408e:	e005      	b.n	800409c <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	6979      	ldr	r1, [r7, #20]
 8004096:	4618      	mov	r0, r3
 8004098:	f005 fc53 	bl	8009942 <USB_EPStartXfer>
  }

  return HAL_OK;
 800409c:	2300      	movs	r3, #0
}
 800409e:	4618      	mov	r0, r3
 80040a0:	3718      	adds	r7, #24
 80040a2:	46bd      	mov	sp, r7
 80040a4:	bd80      	pop	{r7, pc}

080040a6 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80040a6:	b580      	push	{r7, lr}
 80040a8:	b084      	sub	sp, #16
 80040aa:	af00      	add	r7, sp, #0
 80040ac:	6078      	str	r0, [r7, #4]
 80040ae:	460b      	mov	r3, r1
 80040b0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80040b2:	78fb      	ldrb	r3, [r7, #3]
 80040b4:	f003 0207 	and.w	r2, r3, #7
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	685b      	ldr	r3, [r3, #4]
 80040bc:	429a      	cmp	r2, r3
 80040be:	d901      	bls.n	80040c4 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80040c0:	2301      	movs	r3, #1
 80040c2:	e03e      	b.n	8004142 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80040c4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	da0e      	bge.n	80040ea <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80040cc:	78fb      	ldrb	r3, [r7, #3]
 80040ce:	f003 0307 	and.w	r3, r3, #7
 80040d2:	1c5a      	adds	r2, r3, #1
 80040d4:	4613      	mov	r3, r2
 80040d6:	009b      	lsls	r3, r3, #2
 80040d8:	4413      	add	r3, r2
 80040da:	00db      	lsls	r3, r3, #3
 80040dc:	687a      	ldr	r2, [r7, #4]
 80040de:	4413      	add	r3, r2
 80040e0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	2201      	movs	r2, #1
 80040e6:	705a      	strb	r2, [r3, #1]
 80040e8:	e00c      	b.n	8004104 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80040ea:	78fa      	ldrb	r2, [r7, #3]
 80040ec:	4613      	mov	r3, r2
 80040ee:	009b      	lsls	r3, r3, #2
 80040f0:	4413      	add	r3, r2
 80040f2:	00db      	lsls	r3, r3, #3
 80040f4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80040f8:	687a      	ldr	r2, [r7, #4]
 80040fa:	4413      	add	r3, r2
 80040fc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	2200      	movs	r2, #0
 8004102:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	2201      	movs	r2, #1
 8004108:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800410a:	78fb      	ldrb	r3, [r7, #3]
 800410c:	f003 0307 	and.w	r3, r3, #7
 8004110:	b2da      	uxtb	r2, r3
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800411c:	2b01      	cmp	r3, #1
 800411e:	d101      	bne.n	8004124 <HAL_PCD_EP_SetStall+0x7e>
 8004120:	2302      	movs	r3, #2
 8004122:	e00e      	b.n	8004142 <HAL_PCD_EP_SetStall+0x9c>
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2201      	movs	r2, #1
 8004128:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	68f9      	ldr	r1, [r7, #12]
 8004132:	4618      	mov	r0, r3
 8004134:	f006 ff3b 	bl	800afae <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2200      	movs	r2, #0
 800413c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8004140:	2300      	movs	r3, #0
}
 8004142:	4618      	mov	r0, r3
 8004144:	3710      	adds	r7, #16
 8004146:	46bd      	mov	sp, r7
 8004148:	bd80      	pop	{r7, pc}

0800414a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800414a:	b580      	push	{r7, lr}
 800414c:	b084      	sub	sp, #16
 800414e:	af00      	add	r7, sp, #0
 8004150:	6078      	str	r0, [r7, #4]
 8004152:	460b      	mov	r3, r1
 8004154:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004156:	78fb      	ldrb	r3, [r7, #3]
 8004158:	f003 020f 	and.w	r2, r3, #15
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	685b      	ldr	r3, [r3, #4]
 8004160:	429a      	cmp	r2, r3
 8004162:	d901      	bls.n	8004168 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004164:	2301      	movs	r3, #1
 8004166:	e040      	b.n	80041ea <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004168:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800416c:	2b00      	cmp	r3, #0
 800416e:	da0e      	bge.n	800418e <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004170:	78fb      	ldrb	r3, [r7, #3]
 8004172:	f003 0307 	and.w	r3, r3, #7
 8004176:	1c5a      	adds	r2, r3, #1
 8004178:	4613      	mov	r3, r2
 800417a:	009b      	lsls	r3, r3, #2
 800417c:	4413      	add	r3, r2
 800417e:	00db      	lsls	r3, r3, #3
 8004180:	687a      	ldr	r2, [r7, #4]
 8004182:	4413      	add	r3, r2
 8004184:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	2201      	movs	r2, #1
 800418a:	705a      	strb	r2, [r3, #1]
 800418c:	e00e      	b.n	80041ac <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800418e:	78fb      	ldrb	r3, [r7, #3]
 8004190:	f003 0207 	and.w	r2, r3, #7
 8004194:	4613      	mov	r3, r2
 8004196:	009b      	lsls	r3, r3, #2
 8004198:	4413      	add	r3, r2
 800419a:	00db      	lsls	r3, r3, #3
 800419c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80041a0:	687a      	ldr	r2, [r7, #4]
 80041a2:	4413      	add	r3, r2
 80041a4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	2200      	movs	r2, #0
 80041aa:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	2200      	movs	r2, #0
 80041b0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80041b2:	78fb      	ldrb	r3, [r7, #3]
 80041b4:	f003 0307 	and.w	r3, r3, #7
 80041b8:	b2da      	uxtb	r2, r3
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80041c4:	2b01      	cmp	r3, #1
 80041c6:	d101      	bne.n	80041cc <HAL_PCD_EP_ClrStall+0x82>
 80041c8:	2302      	movs	r3, #2
 80041ca:	e00e      	b.n	80041ea <HAL_PCD_EP_ClrStall+0xa0>
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2201      	movs	r2, #1
 80041d0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	68f9      	ldr	r1, [r7, #12]
 80041da:	4618      	mov	r0, r3
 80041dc:	f006 ff38 	bl	800b050 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2200      	movs	r2, #0
 80041e4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80041e8:	2300      	movs	r3, #0
}
 80041ea:	4618      	mov	r0, r3
 80041ec:	3710      	adds	r7, #16
 80041ee:	46bd      	mov	sp, r7
 80041f0:	bd80      	pop	{r7, pc}

080041f2 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80041f2:	b580      	push	{r7, lr}
 80041f4:	b096      	sub	sp, #88	; 0x58
 80041f6:	af00      	add	r7, sp, #0
 80041f8:	6078      	str	r0, [r7, #4]
  uint16_t wEPVal;
  uint16_t TxPctSize;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80041fa:	e39c      	b.n	8004936 <PCD_EP_ISR_Handler+0x744>
  {
    wIstr = hpcd->Instance->ISTR;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004204:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8004208:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800420c:	b2db      	uxtb	r3, r3
 800420e:	f003 030f 	and.w	r3, r3, #15
 8004212:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55

    if (epindex == 0U)
 8004216:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800421a:	2b00      	cmp	r3, #0
 800421c:	f040 815e 	bne.w	80044dc <PCD_EP_ISR_Handler+0x2ea>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8004220:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8004224:	f003 0310 	and.w	r3, r3, #16
 8004228:	2b00      	cmp	r3, #0
 800422a:	d150      	bne.n	80042ce <PCD_EP_ISR_Handler+0xdc>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	881b      	ldrh	r3, [r3, #0]
 8004232:	b29b      	uxth	r3, r3
 8004234:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8004238:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800423c:	81fb      	strh	r3, [r7, #14]
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681a      	ldr	r2, [r3, #0]
 8004242:	89fb      	ldrh	r3, [r7, #14]
 8004244:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004248:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800424c:	b29b      	uxth	r3, r3
 800424e:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	3328      	adds	r3, #40	; 0x28
 8004254:	64fb      	str	r3, [r7, #76]	; 0x4c

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800425e:	b29b      	uxth	r3, r3
 8004260:	461a      	mov	r2, r3
 8004262:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004264:	781b      	ldrb	r3, [r3, #0]
 8004266:	00db      	lsls	r3, r3, #3
 8004268:	4413      	add	r3, r2
 800426a:	687a      	ldr	r2, [r7, #4]
 800426c:	6812      	ldr	r2, [r2, #0]
 800426e:	4413      	add	r3, r2
 8004270:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004274:	881b      	ldrh	r3, [r3, #0]
 8004276:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800427a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800427c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800427e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004280:	695a      	ldr	r2, [r3, #20]
 8004282:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004284:	69db      	ldr	r3, [r3, #28]
 8004286:	441a      	add	r2, r3
 8004288:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800428a:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800428c:	2100      	movs	r1, #0
 800428e:	6878      	ldr	r0, [r7, #4]
 8004290:	f008 feb3 	bl	800cffa <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800429a:	b2db      	uxtb	r3, r3
 800429c:	2b00      	cmp	r3, #0
 800429e:	f000 834a 	beq.w	8004936 <PCD_EP_ISR_Handler+0x744>
 80042a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80042a4:	699b      	ldr	r3, [r3, #24]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	f040 8345 	bne.w	8004936 <PCD_EP_ISR_Handler+0x744>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80042b2:	b2db      	uxtb	r3, r3
 80042b4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80042b8:	b2da      	uxtb	r2, r3
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	b292      	uxth	r2, r2
 80042c0:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2200      	movs	r2, #0
 80042c8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80042cc:	e333      	b.n	8004936 <PCD_EP_ISR_Handler+0x744>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80042d4:	64fb      	str	r3, [r7, #76]	; 0x4c
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	881b      	ldrh	r3, [r3, #0]
 80042dc:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80042e0:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80042e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d032      	beq.n	8004352 <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80042f4:	b29b      	uxth	r3, r3
 80042f6:	461a      	mov	r2, r3
 80042f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80042fa:	781b      	ldrb	r3, [r3, #0]
 80042fc:	00db      	lsls	r3, r3, #3
 80042fe:	4413      	add	r3, r2
 8004300:	687a      	ldr	r2, [r7, #4]
 8004302:	6812      	ldr	r2, [r2, #0]
 8004304:	4413      	add	r3, r2
 8004306:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800430a:	881b      	ldrh	r3, [r3, #0]
 800430c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004310:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004312:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6818      	ldr	r0, [r3, #0]
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 800431e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004320:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8004322:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004324:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004326:	b29b      	uxth	r3, r3
 8004328:	f006 ffbd 	bl	800b2a6 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	881b      	ldrh	r3, [r3, #0]
 8004332:	b29a      	uxth	r2, r3
 8004334:	f640 738f 	movw	r3, #3983	; 0xf8f
 8004338:	4013      	ands	r3, r2
 800433a:	823b      	strh	r3, [r7, #16]
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	8a3a      	ldrh	r2, [r7, #16]
 8004342:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004346:	b292      	uxth	r2, r2
 8004348:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800434a:	6878      	ldr	r0, [r7, #4]
 800434c:	f008 fe28 	bl	800cfa0 <HAL_PCD_SetupStageCallback>
 8004350:	e2f1      	b.n	8004936 <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004352:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8004356:	2b00      	cmp	r3, #0
 8004358:	f280 82ed 	bge.w	8004936 <PCD_EP_ISR_Handler+0x744>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	881b      	ldrh	r3, [r3, #0]
 8004362:	b29a      	uxth	r2, r3
 8004364:	f640 738f 	movw	r3, #3983	; 0xf8f
 8004368:	4013      	ands	r3, r2
 800436a:	83fb      	strh	r3, [r7, #30]
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	8bfa      	ldrh	r2, [r7, #30]
 8004372:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004376:	b292      	uxth	r2, r2
 8004378:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004382:	b29b      	uxth	r3, r3
 8004384:	461a      	mov	r2, r3
 8004386:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004388:	781b      	ldrb	r3, [r3, #0]
 800438a:	00db      	lsls	r3, r3, #3
 800438c:	4413      	add	r3, r2
 800438e:	687a      	ldr	r2, [r7, #4]
 8004390:	6812      	ldr	r2, [r2, #0]
 8004392:	4413      	add	r3, r2
 8004394:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004398:	881b      	ldrh	r3, [r3, #0]
 800439a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800439e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80043a0:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80043a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80043a4:	69db      	ldr	r3, [r3, #28]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d019      	beq.n	80043de <PCD_EP_ISR_Handler+0x1ec>
 80043aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80043ac:	695b      	ldr	r3, [r3, #20]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d015      	beq.n	80043de <PCD_EP_ISR_Handler+0x1ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6818      	ldr	r0, [r3, #0]
 80043b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80043b8:	6959      	ldr	r1, [r3, #20]
 80043ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80043bc:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80043be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80043c0:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80043c2:	b29b      	uxth	r3, r3
 80043c4:	f006 ff6f 	bl	800b2a6 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80043c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80043ca:	695a      	ldr	r2, [r3, #20]
 80043cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80043ce:	69db      	ldr	r3, [r3, #28]
 80043d0:	441a      	add	r2, r3
 80043d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80043d4:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80043d6:	2100      	movs	r1, #0
 80043d8:	6878      	ldr	r0, [r7, #4]
 80043da:	f008 fdf3 	bl	800cfc4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	881b      	ldrh	r3, [r3, #0]
 80043e4:	b29b      	uxth	r3, r3
 80043e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	f040 82a3 	bne.w	8004936 <PCD_EP_ISR_Handler+0x744>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	61bb      	str	r3, [r7, #24]
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80043fe:	b29b      	uxth	r3, r3
 8004400:	461a      	mov	r2, r3
 8004402:	69bb      	ldr	r3, [r7, #24]
 8004404:	4413      	add	r3, r2
 8004406:	61bb      	str	r3, [r7, #24]
 8004408:	69bb      	ldr	r3, [r7, #24]
 800440a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800440e:	617b      	str	r3, [r7, #20]
 8004410:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004412:	691b      	ldr	r3, [r3, #16]
 8004414:	2b3e      	cmp	r3, #62	; 0x3e
 8004416:	d918      	bls.n	800444a <PCD_EP_ISR_Handler+0x258>
 8004418:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800441a:	691b      	ldr	r3, [r3, #16]
 800441c:	095b      	lsrs	r3, r3, #5
 800441e:	647b      	str	r3, [r7, #68]	; 0x44
 8004420:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004422:	691b      	ldr	r3, [r3, #16]
 8004424:	f003 031f 	and.w	r3, r3, #31
 8004428:	2b00      	cmp	r3, #0
 800442a:	d102      	bne.n	8004432 <PCD_EP_ISR_Handler+0x240>
 800442c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800442e:	3b01      	subs	r3, #1
 8004430:	647b      	str	r3, [r7, #68]	; 0x44
 8004432:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004434:	b29b      	uxth	r3, r3
 8004436:	029b      	lsls	r3, r3, #10
 8004438:	b29b      	uxth	r3, r3
 800443a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800443e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004442:	b29a      	uxth	r2, r3
 8004444:	697b      	ldr	r3, [r7, #20]
 8004446:	801a      	strh	r2, [r3, #0]
 8004448:	e029      	b.n	800449e <PCD_EP_ISR_Handler+0x2ac>
 800444a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800444c:	691b      	ldr	r3, [r3, #16]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d112      	bne.n	8004478 <PCD_EP_ISR_Handler+0x286>
 8004452:	697b      	ldr	r3, [r7, #20]
 8004454:	881b      	ldrh	r3, [r3, #0]
 8004456:	b29b      	uxth	r3, r3
 8004458:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800445c:	b29a      	uxth	r2, r3
 800445e:	697b      	ldr	r3, [r7, #20]
 8004460:	801a      	strh	r2, [r3, #0]
 8004462:	697b      	ldr	r3, [r7, #20]
 8004464:	881b      	ldrh	r3, [r3, #0]
 8004466:	b29b      	uxth	r3, r3
 8004468:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800446c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004470:	b29a      	uxth	r2, r3
 8004472:	697b      	ldr	r3, [r7, #20]
 8004474:	801a      	strh	r2, [r3, #0]
 8004476:	e012      	b.n	800449e <PCD_EP_ISR_Handler+0x2ac>
 8004478:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800447a:	691b      	ldr	r3, [r3, #16]
 800447c:	085b      	lsrs	r3, r3, #1
 800447e:	647b      	str	r3, [r7, #68]	; 0x44
 8004480:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004482:	691b      	ldr	r3, [r3, #16]
 8004484:	f003 0301 	and.w	r3, r3, #1
 8004488:	2b00      	cmp	r3, #0
 800448a:	d002      	beq.n	8004492 <PCD_EP_ISR_Handler+0x2a0>
 800448c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800448e:	3301      	adds	r3, #1
 8004490:	647b      	str	r3, [r7, #68]	; 0x44
 8004492:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004494:	b29b      	uxth	r3, r3
 8004496:	029b      	lsls	r3, r3, #10
 8004498:	b29a      	uxth	r2, r3
 800449a:	697b      	ldr	r3, [r7, #20]
 800449c:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	881b      	ldrh	r3, [r3, #0]
 80044a4:	b29b      	uxth	r3, r3
 80044a6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80044aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044ae:	827b      	strh	r3, [r7, #18]
 80044b0:	8a7b      	ldrh	r3, [r7, #18]
 80044b2:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80044b6:	827b      	strh	r3, [r7, #18]
 80044b8:	8a7b      	ldrh	r3, [r7, #18]
 80044ba:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80044be:	827b      	strh	r3, [r7, #18]
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681a      	ldr	r2, [r3, #0]
 80044c4:	8a7b      	ldrh	r3, [r7, #18]
 80044c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80044ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80044ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80044d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044d6:	b29b      	uxth	r3, r3
 80044d8:	8013      	strh	r3, [r2, #0]
 80044da:	e22c      	b.n	8004936 <PCD_EP_ISR_Handler+0x744>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	461a      	mov	r2, r3
 80044e2:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80044e6:	009b      	lsls	r3, r3, #2
 80044e8:	4413      	add	r3, r2
 80044ea:	881b      	ldrh	r3, [r3, #0]
 80044ec:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80044f0:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	f280 80f6 	bge.w	80046e6 <PCD_EP_ISR_Handler+0x4f4>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	461a      	mov	r2, r3
 8004500:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8004504:	009b      	lsls	r3, r3, #2
 8004506:	4413      	add	r3, r2
 8004508:	881b      	ldrh	r3, [r3, #0]
 800450a:	b29a      	uxth	r2, r3
 800450c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8004510:	4013      	ands	r3, r2
 8004512:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	461a      	mov	r2, r3
 800451c:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8004520:	009b      	lsls	r3, r3, #2
 8004522:	4413      	add	r3, r2
 8004524:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8004528:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800452c:	b292      	uxth	r2, r2
 800452e:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8004530:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 8004534:	4613      	mov	r3, r2
 8004536:	009b      	lsls	r3, r3, #2
 8004538:	4413      	add	r3, r2
 800453a:	00db      	lsls	r3, r3, #3
 800453c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004540:	687a      	ldr	r2, [r7, #4]
 8004542:	4413      	add	r3, r2
 8004544:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8004546:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004548:	7b1b      	ldrb	r3, [r3, #12]
 800454a:	2b00      	cmp	r3, #0
 800454c:	d123      	bne.n	8004596 <PCD_EP_ISR_Handler+0x3a4>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004556:	b29b      	uxth	r3, r3
 8004558:	461a      	mov	r2, r3
 800455a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800455c:	781b      	ldrb	r3, [r3, #0]
 800455e:	00db      	lsls	r3, r3, #3
 8004560:	4413      	add	r3, r2
 8004562:	687a      	ldr	r2, [r7, #4]
 8004564:	6812      	ldr	r2, [r2, #0]
 8004566:	4413      	add	r3, r2
 8004568:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800456c:	881b      	ldrh	r3, [r3, #0]
 800456e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004572:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

          if (count != 0U)
 8004576:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800457a:	2b00      	cmp	r3, #0
 800457c:	f000 808e 	beq.w	800469c <PCD_EP_ISR_Handler+0x4aa>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	6818      	ldr	r0, [r3, #0]
 8004584:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004586:	6959      	ldr	r1, [r3, #20]
 8004588:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800458a:	88da      	ldrh	r2, [r3, #6]
 800458c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004590:	f006 fe89 	bl	800b2a6 <USB_ReadPMA>
 8004594:	e082      	b.n	800469c <PCD_EP_ISR_Handler+0x4aa>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8004596:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004598:	78db      	ldrb	r3, [r3, #3]
 800459a:	2b02      	cmp	r3, #2
 800459c:	d10a      	bne.n	80045b4 <PCD_EP_ISR_Handler+0x3c2>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800459e:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80045a2:	461a      	mov	r2, r3
 80045a4:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80045a6:	6878      	ldr	r0, [r7, #4]
 80045a8:	f000 f9d3 	bl	8004952 <HAL_PCD_EP_DB_Receive>
 80045ac:	4603      	mov	r3, r0
 80045ae:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80045b2:	e073      	b.n	800469c <PCD_EP_ISR_Handler+0x4aa>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	461a      	mov	r2, r3
 80045ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80045bc:	781b      	ldrb	r3, [r3, #0]
 80045be:	009b      	lsls	r3, r3, #2
 80045c0:	4413      	add	r3, r2
 80045c2:	881b      	ldrh	r3, [r3, #0]
 80045c4:	b29b      	uxth	r3, r3
 80045c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80045ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045ce:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	461a      	mov	r2, r3
 80045d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80045da:	781b      	ldrb	r3, [r3, #0]
 80045dc:	009b      	lsls	r3, r3, #2
 80045de:	441a      	add	r2, r3
 80045e0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80045e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80045e8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80045ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80045f0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80045f4:	b29b      	uxth	r3, r3
 80045f6:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	461a      	mov	r2, r3
 80045fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004600:	781b      	ldrb	r3, [r3, #0]
 8004602:	009b      	lsls	r3, r3, #2
 8004604:	4413      	add	r3, r2
 8004606:	881b      	ldrh	r3, [r3, #0]
 8004608:	b29b      	uxth	r3, r3
 800460a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800460e:	2b00      	cmp	r3, #0
 8004610:	d022      	beq.n	8004658 <PCD_EP_ISR_Handler+0x466>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800461a:	b29b      	uxth	r3, r3
 800461c:	461a      	mov	r2, r3
 800461e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004620:	781b      	ldrb	r3, [r3, #0]
 8004622:	00db      	lsls	r3, r3, #3
 8004624:	4413      	add	r3, r2
 8004626:	687a      	ldr	r2, [r7, #4]
 8004628:	6812      	ldr	r2, [r2, #0]
 800462a:	4413      	add	r3, r2
 800462c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004630:	881b      	ldrh	r3, [r3, #0]
 8004632:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004636:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 800463a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800463e:	2b00      	cmp	r3, #0
 8004640:	d02c      	beq.n	800469c <PCD_EP_ISR_Handler+0x4aa>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6818      	ldr	r0, [r3, #0]
 8004646:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004648:	6959      	ldr	r1, [r3, #20]
 800464a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800464c:	891a      	ldrh	r2, [r3, #8]
 800464e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004652:	f006 fe28 	bl	800b2a6 <USB_ReadPMA>
 8004656:	e021      	b.n	800469c <PCD_EP_ISR_Handler+0x4aa>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004660:	b29b      	uxth	r3, r3
 8004662:	461a      	mov	r2, r3
 8004664:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004666:	781b      	ldrb	r3, [r3, #0]
 8004668:	00db      	lsls	r3, r3, #3
 800466a:	4413      	add	r3, r2
 800466c:	687a      	ldr	r2, [r7, #4]
 800466e:	6812      	ldr	r2, [r2, #0]
 8004670:	4413      	add	r3, r2
 8004672:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004676:	881b      	ldrh	r3, [r3, #0]
 8004678:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800467c:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 8004680:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004684:	2b00      	cmp	r3, #0
 8004686:	d009      	beq.n	800469c <PCD_EP_ISR_Handler+0x4aa>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	6818      	ldr	r0, [r3, #0]
 800468c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800468e:	6959      	ldr	r1, [r3, #20]
 8004690:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004692:	895a      	ldrh	r2, [r3, #10]
 8004694:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004698:	f006 fe05 	bl	800b2a6 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800469c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800469e:	69da      	ldr	r2, [r3, #28]
 80046a0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80046a4:	441a      	add	r2, r3
 80046a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80046a8:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80046aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80046ac:	695a      	ldr	r2, [r3, #20]
 80046ae:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80046b2:	441a      	add	r2, r3
 80046b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80046b6:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80046b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80046ba:	699b      	ldr	r3, [r3, #24]
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d005      	beq.n	80046cc <PCD_EP_ISR_Handler+0x4da>
 80046c0:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 80046c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80046c6:	691b      	ldr	r3, [r3, #16]
 80046c8:	429a      	cmp	r2, r3
 80046ca:	d206      	bcs.n	80046da <PCD_EP_ISR_Handler+0x4e8>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80046cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80046ce:	781b      	ldrb	r3, [r3, #0]
 80046d0:	4619      	mov	r1, r3
 80046d2:	6878      	ldr	r0, [r7, #4]
 80046d4:	f008 fc76 	bl	800cfc4 <HAL_PCD_DataOutStageCallback>
 80046d8:	e005      	b.n	80046e6 <PCD_EP_ISR_Handler+0x4f4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80046e0:	4618      	mov	r0, r3
 80046e2:	f005 f92e 	bl	8009942 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80046e6:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80046ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	f000 8121 	beq.w	8004936 <PCD_EP_ISR_Handler+0x744>
      {
        ep = &hpcd->IN_ep[epindex];
 80046f4:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80046f8:	1c5a      	adds	r2, r3, #1
 80046fa:	4613      	mov	r3, r2
 80046fc:	009b      	lsls	r3, r3, #2
 80046fe:	4413      	add	r3, r2
 8004700:	00db      	lsls	r3, r3, #3
 8004702:	687a      	ldr	r2, [r7, #4]
 8004704:	4413      	add	r3, r2
 8004706:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	461a      	mov	r2, r3
 800470e:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8004712:	009b      	lsls	r3, r3, #2
 8004714:	4413      	add	r3, r2
 8004716:	881b      	ldrh	r3, [r3, #0]
 8004718:	b29b      	uxth	r3, r3
 800471a:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800471e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004722:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	461a      	mov	r2, r3
 800472c:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8004730:	009b      	lsls	r3, r3, #2
 8004732:	441a      	add	r2, r3
 8004734:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8004738:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800473c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004740:	b29b      	uxth	r3, r3
 8004742:	8013      	strh	r3, [r2, #0]

        if (ep->type != EP_TYPE_BULK)
 8004744:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004746:	78db      	ldrb	r3, [r3, #3]
 8004748:	2b02      	cmp	r3, #2
 800474a:	f000 80a2 	beq.w	8004892 <PCD_EP_ISR_Handler+0x6a0>
        {
          ep->xfer_len = 0U;
 800474e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004750:	2200      	movs	r2, #0
 8004752:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8004754:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004756:	7b1b      	ldrb	r3, [r3, #12]
 8004758:	2b00      	cmp	r3, #0
 800475a:	f000 8093 	beq.w	8004884 <PCD_EP_ISR_Handler+0x692>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800475e:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8004762:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004766:	2b00      	cmp	r3, #0
 8004768:	d046      	beq.n	80047f8 <PCD_EP_ISR_Handler+0x606>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800476a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800476c:	785b      	ldrb	r3, [r3, #1]
 800476e:	2b00      	cmp	r3, #0
 8004770:	d126      	bne.n	80047c0 <PCD_EP_ISR_Handler+0x5ce>
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	627b      	str	r3, [r7, #36]	; 0x24
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004780:	b29b      	uxth	r3, r3
 8004782:	461a      	mov	r2, r3
 8004784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004786:	4413      	add	r3, r2
 8004788:	627b      	str	r3, [r7, #36]	; 0x24
 800478a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800478c:	781b      	ldrb	r3, [r3, #0]
 800478e:	00da      	lsls	r2, r3, #3
 8004790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004792:	4413      	add	r3, r2
 8004794:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004798:	623b      	str	r3, [r7, #32]
 800479a:	6a3b      	ldr	r3, [r7, #32]
 800479c:	881b      	ldrh	r3, [r3, #0]
 800479e:	b29b      	uxth	r3, r3
 80047a0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80047a4:	b29a      	uxth	r2, r3
 80047a6:	6a3b      	ldr	r3, [r7, #32]
 80047a8:	801a      	strh	r2, [r3, #0]
 80047aa:	6a3b      	ldr	r3, [r7, #32]
 80047ac:	881b      	ldrh	r3, [r3, #0]
 80047ae:	b29b      	uxth	r3, r3
 80047b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80047b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80047b8:	b29a      	uxth	r2, r3
 80047ba:	6a3b      	ldr	r3, [r7, #32]
 80047bc:	801a      	strh	r2, [r3, #0]
 80047be:	e061      	b.n	8004884 <PCD_EP_ISR_Handler+0x692>
 80047c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047c2:	785b      	ldrb	r3, [r3, #1]
 80047c4:	2b01      	cmp	r3, #1
 80047c6:	d15d      	bne.n	8004884 <PCD_EP_ISR_Handler+0x692>
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80047d6:	b29b      	uxth	r3, r3
 80047d8:	461a      	mov	r2, r3
 80047da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047dc:	4413      	add	r3, r2
 80047de:	62fb      	str	r3, [r7, #44]	; 0x2c
 80047e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047e2:	781b      	ldrb	r3, [r3, #0]
 80047e4:	00da      	lsls	r2, r3, #3
 80047e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047e8:	4413      	add	r3, r2
 80047ea:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80047ee:	62bb      	str	r3, [r7, #40]	; 0x28
 80047f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047f2:	2200      	movs	r2, #0
 80047f4:	801a      	strh	r2, [r3, #0]
 80047f6:	e045      	b.n	8004884 <PCD_EP_ISR_Handler+0x692>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80047fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004800:	785b      	ldrb	r3, [r3, #1]
 8004802:	2b00      	cmp	r3, #0
 8004804:	d126      	bne.n	8004854 <PCD_EP_ISR_Handler+0x662>
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	637b      	str	r3, [r7, #52]	; 0x34
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004814:	b29b      	uxth	r3, r3
 8004816:	461a      	mov	r2, r3
 8004818:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800481a:	4413      	add	r3, r2
 800481c:	637b      	str	r3, [r7, #52]	; 0x34
 800481e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004820:	781b      	ldrb	r3, [r3, #0]
 8004822:	00da      	lsls	r2, r3, #3
 8004824:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004826:	4413      	add	r3, r2
 8004828:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800482c:	633b      	str	r3, [r7, #48]	; 0x30
 800482e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004830:	881b      	ldrh	r3, [r3, #0]
 8004832:	b29b      	uxth	r3, r3
 8004834:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004838:	b29a      	uxth	r2, r3
 800483a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800483c:	801a      	strh	r2, [r3, #0]
 800483e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004840:	881b      	ldrh	r3, [r3, #0]
 8004842:	b29b      	uxth	r3, r3
 8004844:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004848:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800484c:	b29a      	uxth	r2, r3
 800484e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004850:	801a      	strh	r2, [r3, #0]
 8004852:	e017      	b.n	8004884 <PCD_EP_ISR_Handler+0x692>
 8004854:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004856:	785b      	ldrb	r3, [r3, #1]
 8004858:	2b01      	cmp	r3, #1
 800485a:	d113      	bne.n	8004884 <PCD_EP_ISR_Handler+0x692>
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004864:	b29b      	uxth	r3, r3
 8004866:	461a      	mov	r2, r3
 8004868:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800486a:	4413      	add	r3, r2
 800486c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800486e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004870:	781b      	ldrb	r3, [r3, #0]
 8004872:	00da      	lsls	r2, r3, #3
 8004874:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004876:	4413      	add	r3, r2
 8004878:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800487c:	63bb      	str	r3, [r7, #56]	; 0x38
 800487e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004880:	2200      	movs	r2, #0
 8004882:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004884:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004886:	781b      	ldrb	r3, [r3, #0]
 8004888:	4619      	mov	r1, r3
 800488a:	6878      	ldr	r0, [r7, #4]
 800488c:	f008 fbb5 	bl	800cffa <HAL_PCD_DataInStageCallback>
 8004890:	e051      	b.n	8004936 <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Bulk Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8004892:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8004896:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800489a:	2b00      	cmp	r3, #0
 800489c:	d144      	bne.n	8004928 <PCD_EP_ISR_Handler+0x736>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80048a6:	b29b      	uxth	r3, r3
 80048a8:	461a      	mov	r2, r3
 80048aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80048ac:	781b      	ldrb	r3, [r3, #0]
 80048ae:	00db      	lsls	r3, r3, #3
 80048b0:	4413      	add	r3, r2
 80048b2:	687a      	ldr	r2, [r7, #4]
 80048b4:	6812      	ldr	r2, [r2, #0]
 80048b6:	4413      	add	r3, r2
 80048b8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80048bc:	881b      	ldrh	r3, [r3, #0]
 80048be:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80048c2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 80048c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80048c8:	699a      	ldr	r2, [r3, #24]
 80048ca:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80048ce:	429a      	cmp	r2, r3
 80048d0:	d907      	bls.n	80048e2 <PCD_EP_ISR_Handler+0x6f0>
            {
              ep->xfer_len -= TxPctSize;
 80048d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80048d4:	699a      	ldr	r2, [r3, #24]
 80048d6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80048da:	1ad2      	subs	r2, r2, r3
 80048dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80048de:	619a      	str	r2, [r3, #24]
 80048e0:	e002      	b.n	80048e8 <PCD_EP_ISR_Handler+0x6f6>
            }
            else
            {
              ep->xfer_len = 0U;
 80048e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80048e4:	2200      	movs	r2, #0
 80048e6:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 80048e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80048ea:	699b      	ldr	r3, [r3, #24]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d106      	bne.n	80048fe <PCD_EP_ISR_Handler+0x70c>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80048f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80048f2:	781b      	ldrb	r3, [r3, #0]
 80048f4:	4619      	mov	r1, r3
 80048f6:	6878      	ldr	r0, [r7, #4]
 80048f8:	f008 fb7f 	bl	800cffa <HAL_PCD_DataInStageCallback>
 80048fc:	e01b      	b.n	8004936 <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 80048fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004900:	695a      	ldr	r2, [r3, #20]
 8004902:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004906:	441a      	add	r2, r3
 8004908:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800490a:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 800490c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800490e:	69da      	ldr	r2, [r3, #28]
 8004910:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004914:	441a      	add	r2, r3
 8004916:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004918:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8004920:	4618      	mov	r0, r3
 8004922:	f005 f80e 	bl	8009942 <USB_EPStartXfer>
 8004926:	e006      	b.n	8004936 <PCD_EP_ISR_Handler+0x744>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8004928:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800492c:	461a      	mov	r2, r3
 800492e:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8004930:	6878      	ldr	r0, [r7, #4]
 8004932:	f000 f917 	bl	8004b64 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800493e:	b29b      	uxth	r3, r3
 8004940:	b21b      	sxth	r3, r3
 8004942:	2b00      	cmp	r3, #0
 8004944:	f6ff ac5a 	blt.w	80041fc <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8004948:	2300      	movs	r3, #0
}
 800494a:	4618      	mov	r0, r3
 800494c:	3758      	adds	r7, #88	; 0x58
 800494e:	46bd      	mov	sp, r7
 8004950:	bd80      	pop	{r7, pc}

08004952 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004952:	b580      	push	{r7, lr}
 8004954:	b088      	sub	sp, #32
 8004956:	af00      	add	r7, sp, #0
 8004958:	60f8      	str	r0, [r7, #12]
 800495a:	60b9      	str	r1, [r7, #8]
 800495c:	4613      	mov	r3, r2
 800495e:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004960:	88fb      	ldrh	r3, [r7, #6]
 8004962:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004966:	2b00      	cmp	r3, #0
 8004968:	d07c      	beq.n	8004a64 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004972:	b29b      	uxth	r3, r3
 8004974:	461a      	mov	r2, r3
 8004976:	68bb      	ldr	r3, [r7, #8]
 8004978:	781b      	ldrb	r3, [r3, #0]
 800497a:	00db      	lsls	r3, r3, #3
 800497c:	4413      	add	r3, r2
 800497e:	68fa      	ldr	r2, [r7, #12]
 8004980:	6812      	ldr	r2, [r2, #0]
 8004982:	4413      	add	r3, r2
 8004984:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004988:	881b      	ldrh	r3, [r3, #0]
 800498a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800498e:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8004990:	68bb      	ldr	r3, [r7, #8]
 8004992:	699a      	ldr	r2, [r3, #24]
 8004994:	8b7b      	ldrh	r3, [r7, #26]
 8004996:	429a      	cmp	r2, r3
 8004998:	d306      	bcc.n	80049a8 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 800499a:	68bb      	ldr	r3, [r7, #8]
 800499c:	699a      	ldr	r2, [r3, #24]
 800499e:	8b7b      	ldrh	r3, [r7, #26]
 80049a0:	1ad2      	subs	r2, r2, r3
 80049a2:	68bb      	ldr	r3, [r7, #8]
 80049a4:	619a      	str	r2, [r3, #24]
 80049a6:	e002      	b.n	80049ae <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 80049a8:	68bb      	ldr	r3, [r7, #8]
 80049aa:	2200      	movs	r2, #0
 80049ac:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80049ae:	68bb      	ldr	r3, [r7, #8]
 80049b0:	699b      	ldr	r3, [r3, #24]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d123      	bne.n	80049fe <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	461a      	mov	r2, r3
 80049bc:	68bb      	ldr	r3, [r7, #8]
 80049be:	781b      	ldrb	r3, [r3, #0]
 80049c0:	009b      	lsls	r3, r3, #2
 80049c2:	4413      	add	r3, r2
 80049c4:	881b      	ldrh	r3, [r3, #0]
 80049c6:	b29b      	uxth	r3, r3
 80049c8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80049cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049d0:	833b      	strh	r3, [r7, #24]
 80049d2:	8b3b      	ldrh	r3, [r7, #24]
 80049d4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80049d8:	833b      	strh	r3, [r7, #24]
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	461a      	mov	r2, r3
 80049e0:	68bb      	ldr	r3, [r7, #8]
 80049e2:	781b      	ldrb	r3, [r3, #0]
 80049e4:	009b      	lsls	r3, r3, #2
 80049e6:	441a      	add	r2, r3
 80049e8:	8b3b      	ldrh	r3, [r7, #24]
 80049ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80049ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80049f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80049f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049fa:	b29b      	uxth	r3, r3
 80049fc:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80049fe:	88fb      	ldrh	r3, [r7, #6]
 8004a00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d01f      	beq.n	8004a48 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	461a      	mov	r2, r3
 8004a0e:	68bb      	ldr	r3, [r7, #8]
 8004a10:	781b      	ldrb	r3, [r3, #0]
 8004a12:	009b      	lsls	r3, r3, #2
 8004a14:	4413      	add	r3, r2
 8004a16:	881b      	ldrh	r3, [r3, #0]
 8004a18:	b29b      	uxth	r3, r3
 8004a1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a22:	82fb      	strh	r3, [r7, #22]
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	461a      	mov	r2, r3
 8004a2a:	68bb      	ldr	r3, [r7, #8]
 8004a2c:	781b      	ldrb	r3, [r3, #0]
 8004a2e:	009b      	lsls	r3, r3, #2
 8004a30:	441a      	add	r2, r3
 8004a32:	8afb      	ldrh	r3, [r7, #22]
 8004a34:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a38:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a3c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a40:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004a44:	b29b      	uxth	r3, r3
 8004a46:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8004a48:	8b7b      	ldrh	r3, [r7, #26]
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	f000 8085 	beq.w	8004b5a <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	6818      	ldr	r0, [r3, #0]
 8004a54:	68bb      	ldr	r3, [r7, #8]
 8004a56:	6959      	ldr	r1, [r3, #20]
 8004a58:	68bb      	ldr	r3, [r7, #8]
 8004a5a:	891a      	ldrh	r2, [r3, #8]
 8004a5c:	8b7b      	ldrh	r3, [r7, #26]
 8004a5e:	f006 fc22 	bl	800b2a6 <USB_ReadPMA>
 8004a62:	e07a      	b.n	8004b5a <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a6c:	b29b      	uxth	r3, r3
 8004a6e:	461a      	mov	r2, r3
 8004a70:	68bb      	ldr	r3, [r7, #8]
 8004a72:	781b      	ldrb	r3, [r3, #0]
 8004a74:	00db      	lsls	r3, r3, #3
 8004a76:	4413      	add	r3, r2
 8004a78:	68fa      	ldr	r2, [r7, #12]
 8004a7a:	6812      	ldr	r2, [r2, #0]
 8004a7c:	4413      	add	r3, r2
 8004a7e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004a82:	881b      	ldrh	r3, [r3, #0]
 8004a84:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004a88:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8004a8a:	68bb      	ldr	r3, [r7, #8]
 8004a8c:	699a      	ldr	r2, [r3, #24]
 8004a8e:	8b7b      	ldrh	r3, [r7, #26]
 8004a90:	429a      	cmp	r2, r3
 8004a92:	d306      	bcc.n	8004aa2 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8004a94:	68bb      	ldr	r3, [r7, #8]
 8004a96:	699a      	ldr	r2, [r3, #24]
 8004a98:	8b7b      	ldrh	r3, [r7, #26]
 8004a9a:	1ad2      	subs	r2, r2, r3
 8004a9c:	68bb      	ldr	r3, [r7, #8]
 8004a9e:	619a      	str	r2, [r3, #24]
 8004aa0:	e002      	b.n	8004aa8 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8004aa2:	68bb      	ldr	r3, [r7, #8]
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8004aa8:	68bb      	ldr	r3, [r7, #8]
 8004aaa:	699b      	ldr	r3, [r3, #24]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d123      	bne.n	8004af8 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	461a      	mov	r2, r3
 8004ab6:	68bb      	ldr	r3, [r7, #8]
 8004ab8:	781b      	ldrb	r3, [r3, #0]
 8004aba:	009b      	lsls	r3, r3, #2
 8004abc:	4413      	add	r3, r2
 8004abe:	881b      	ldrh	r3, [r3, #0]
 8004ac0:	b29b      	uxth	r3, r3
 8004ac2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004ac6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004aca:	83fb      	strh	r3, [r7, #30]
 8004acc:	8bfb      	ldrh	r3, [r7, #30]
 8004ace:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004ad2:	83fb      	strh	r3, [r7, #30]
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	461a      	mov	r2, r3
 8004ada:	68bb      	ldr	r3, [r7, #8]
 8004adc:	781b      	ldrb	r3, [r3, #0]
 8004ade:	009b      	lsls	r3, r3, #2
 8004ae0:	441a      	add	r2, r3
 8004ae2:	8bfb      	ldrh	r3, [r7, #30]
 8004ae4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ae8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004aec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004af0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004af4:	b29b      	uxth	r3, r3
 8004af6:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8004af8:	88fb      	ldrh	r3, [r7, #6]
 8004afa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d11f      	bne.n	8004b42 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	461a      	mov	r2, r3
 8004b08:	68bb      	ldr	r3, [r7, #8]
 8004b0a:	781b      	ldrb	r3, [r3, #0]
 8004b0c:	009b      	lsls	r3, r3, #2
 8004b0e:	4413      	add	r3, r2
 8004b10:	881b      	ldrh	r3, [r3, #0]
 8004b12:	b29b      	uxth	r3, r3
 8004b14:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b1c:	83bb      	strh	r3, [r7, #28]
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	461a      	mov	r2, r3
 8004b24:	68bb      	ldr	r3, [r7, #8]
 8004b26:	781b      	ldrb	r3, [r3, #0]
 8004b28:	009b      	lsls	r3, r3, #2
 8004b2a:	441a      	add	r2, r3
 8004b2c:	8bbb      	ldrh	r3, [r7, #28]
 8004b2e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b32:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b3a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004b3e:	b29b      	uxth	r3, r3
 8004b40:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8004b42:	8b7b      	ldrh	r3, [r7, #26]
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d008      	beq.n	8004b5a <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	6818      	ldr	r0, [r3, #0]
 8004b4c:	68bb      	ldr	r3, [r7, #8]
 8004b4e:	6959      	ldr	r1, [r3, #20]
 8004b50:	68bb      	ldr	r3, [r7, #8]
 8004b52:	895a      	ldrh	r2, [r3, #10]
 8004b54:	8b7b      	ldrh	r3, [r7, #26]
 8004b56:	f006 fba6 	bl	800b2a6 <USB_ReadPMA>
    }
  }

  return count;
 8004b5a:	8b7b      	ldrh	r3, [r7, #26]
}
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	3720      	adds	r7, #32
 8004b60:	46bd      	mov	sp, r7
 8004b62:	bd80      	pop	{r7, pc}

08004b64 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004b64:	b580      	push	{r7, lr}
 8004b66:	b0a2      	sub	sp, #136	; 0x88
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	60f8      	str	r0, [r7, #12]
 8004b6c:	60b9      	str	r1, [r7, #8]
 8004b6e:	4613      	mov	r3, r2
 8004b70:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004b72:	88fb      	ldrh	r3, [r7, #6]
 8004b74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	f000 81c5 	beq.w	8004f08 <HAL_PCD_EP_DB_Transmit+0x3a4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b86:	b29b      	uxth	r3, r3
 8004b88:	461a      	mov	r2, r3
 8004b8a:	68bb      	ldr	r3, [r7, #8]
 8004b8c:	781b      	ldrb	r3, [r3, #0]
 8004b8e:	00db      	lsls	r3, r3, #3
 8004b90:	4413      	add	r3, r2
 8004b92:	68fa      	ldr	r2, [r7, #12]
 8004b94:	6812      	ldr	r2, [r2, #0]
 8004b96:	4413      	add	r3, r2
 8004b98:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004b9c:	881b      	ldrh	r3, [r3, #0]
 8004b9e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004ba2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxPctSize)
 8004ba6:	68bb      	ldr	r3, [r7, #8]
 8004ba8:	699a      	ldr	r2, [r3, #24]
 8004baa:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004bae:	429a      	cmp	r2, r3
 8004bb0:	d907      	bls.n	8004bc2 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8004bb2:	68bb      	ldr	r3, [r7, #8]
 8004bb4:	699a      	ldr	r2, [r3, #24]
 8004bb6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004bba:	1ad2      	subs	r2, r2, r3
 8004bbc:	68bb      	ldr	r3, [r7, #8]
 8004bbe:	619a      	str	r2, [r3, #24]
 8004bc0:	e002      	b.n	8004bc8 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8004bc2:	68bb      	ldr	r3, [r7, #8]
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004bc8:	68bb      	ldr	r3, [r7, #8]
 8004bca:	699b      	ldr	r3, [r3, #24]
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	f040 80b9 	bne.w	8004d44 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004bd2:	68bb      	ldr	r3, [r7, #8]
 8004bd4:	785b      	ldrb	r3, [r3, #1]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d126      	bne.n	8004c28 <HAL_PCD_EP_DB_Transmit+0xc4>
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	62bb      	str	r3, [r7, #40]	; 0x28
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004be8:	b29b      	uxth	r3, r3
 8004bea:	461a      	mov	r2, r3
 8004bec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bee:	4413      	add	r3, r2
 8004bf0:	62bb      	str	r3, [r7, #40]	; 0x28
 8004bf2:	68bb      	ldr	r3, [r7, #8]
 8004bf4:	781b      	ldrb	r3, [r3, #0]
 8004bf6:	00da      	lsls	r2, r3, #3
 8004bf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bfa:	4413      	add	r3, r2
 8004bfc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004c00:	627b      	str	r3, [r7, #36]	; 0x24
 8004c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c04:	881b      	ldrh	r3, [r3, #0]
 8004c06:	b29b      	uxth	r3, r3
 8004c08:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004c0c:	b29a      	uxth	r2, r3
 8004c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c10:	801a      	strh	r2, [r3, #0]
 8004c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c14:	881b      	ldrh	r3, [r3, #0]
 8004c16:	b29b      	uxth	r3, r3
 8004c18:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004c1c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004c20:	b29a      	uxth	r2, r3
 8004c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c24:	801a      	strh	r2, [r3, #0]
 8004c26:	e01a      	b.n	8004c5e <HAL_PCD_EP_DB_Transmit+0xfa>
 8004c28:	68bb      	ldr	r3, [r7, #8]
 8004c2a:	785b      	ldrb	r3, [r3, #1]
 8004c2c:	2b01      	cmp	r3, #1
 8004c2e:	d116      	bne.n	8004c5e <HAL_PCD_EP_DB_Transmit+0xfa>
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	633b      	str	r3, [r7, #48]	; 0x30
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c3e:	b29b      	uxth	r3, r3
 8004c40:	461a      	mov	r2, r3
 8004c42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c44:	4413      	add	r3, r2
 8004c46:	633b      	str	r3, [r7, #48]	; 0x30
 8004c48:	68bb      	ldr	r3, [r7, #8]
 8004c4a:	781b      	ldrb	r3, [r3, #0]
 8004c4c:	00da      	lsls	r2, r3, #3
 8004c4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c50:	4413      	add	r3, r2
 8004c52:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004c56:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004c58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	623b      	str	r3, [r7, #32]
 8004c64:	68bb      	ldr	r3, [r7, #8]
 8004c66:	785b      	ldrb	r3, [r3, #1]
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d126      	bne.n	8004cba <HAL_PCD_EP_DB_Transmit+0x156>
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	61bb      	str	r3, [r7, #24]
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c7a:	b29b      	uxth	r3, r3
 8004c7c:	461a      	mov	r2, r3
 8004c7e:	69bb      	ldr	r3, [r7, #24]
 8004c80:	4413      	add	r3, r2
 8004c82:	61bb      	str	r3, [r7, #24]
 8004c84:	68bb      	ldr	r3, [r7, #8]
 8004c86:	781b      	ldrb	r3, [r3, #0]
 8004c88:	00da      	lsls	r2, r3, #3
 8004c8a:	69bb      	ldr	r3, [r7, #24]
 8004c8c:	4413      	add	r3, r2
 8004c8e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004c92:	617b      	str	r3, [r7, #20]
 8004c94:	697b      	ldr	r3, [r7, #20]
 8004c96:	881b      	ldrh	r3, [r3, #0]
 8004c98:	b29b      	uxth	r3, r3
 8004c9a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004c9e:	b29a      	uxth	r2, r3
 8004ca0:	697b      	ldr	r3, [r7, #20]
 8004ca2:	801a      	strh	r2, [r3, #0]
 8004ca4:	697b      	ldr	r3, [r7, #20]
 8004ca6:	881b      	ldrh	r3, [r3, #0]
 8004ca8:	b29b      	uxth	r3, r3
 8004caa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004cae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004cb2:	b29a      	uxth	r2, r3
 8004cb4:	697b      	ldr	r3, [r7, #20]
 8004cb6:	801a      	strh	r2, [r3, #0]
 8004cb8:	e017      	b.n	8004cea <HAL_PCD_EP_DB_Transmit+0x186>
 8004cba:	68bb      	ldr	r3, [r7, #8]
 8004cbc:	785b      	ldrb	r3, [r3, #1]
 8004cbe:	2b01      	cmp	r3, #1
 8004cc0:	d113      	bne.n	8004cea <HAL_PCD_EP_DB_Transmit+0x186>
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004cca:	b29b      	uxth	r3, r3
 8004ccc:	461a      	mov	r2, r3
 8004cce:	6a3b      	ldr	r3, [r7, #32]
 8004cd0:	4413      	add	r3, r2
 8004cd2:	623b      	str	r3, [r7, #32]
 8004cd4:	68bb      	ldr	r3, [r7, #8]
 8004cd6:	781b      	ldrb	r3, [r3, #0]
 8004cd8:	00da      	lsls	r2, r3, #3
 8004cda:	6a3b      	ldr	r3, [r7, #32]
 8004cdc:	4413      	add	r3, r2
 8004cde:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004ce2:	61fb      	str	r3, [r7, #28]
 8004ce4:	69fb      	ldr	r3, [r7, #28]
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004cea:	68bb      	ldr	r3, [r7, #8]
 8004cec:	781b      	ldrb	r3, [r3, #0]
 8004cee:	4619      	mov	r1, r3
 8004cf0:	68f8      	ldr	r0, [r7, #12]
 8004cf2:	f008 f982 	bl	800cffa <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004cf6:	88fb      	ldrh	r3, [r7, #6]
 8004cf8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	f000 82d2 	beq.w	80052a6 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	461a      	mov	r2, r3
 8004d08:	68bb      	ldr	r3, [r7, #8]
 8004d0a:	781b      	ldrb	r3, [r3, #0]
 8004d0c:	009b      	lsls	r3, r3, #2
 8004d0e:	4413      	add	r3, r2
 8004d10:	881b      	ldrh	r3, [r3, #0]
 8004d12:	b29b      	uxth	r3, r3
 8004d14:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d1c:	827b      	strh	r3, [r7, #18]
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	461a      	mov	r2, r3
 8004d24:	68bb      	ldr	r3, [r7, #8]
 8004d26:	781b      	ldrb	r3, [r3, #0]
 8004d28:	009b      	lsls	r3, r3, #2
 8004d2a:	441a      	add	r2, r3
 8004d2c:	8a7b      	ldrh	r3, [r7, #18]
 8004d2e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d32:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d36:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004d3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d3e:	b29b      	uxth	r3, r3
 8004d40:	8013      	strh	r3, [r2, #0]
 8004d42:	e2b0      	b.n	80052a6 <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004d44:	88fb      	ldrh	r3, [r7, #6]
 8004d46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d021      	beq.n	8004d92 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	461a      	mov	r2, r3
 8004d54:	68bb      	ldr	r3, [r7, #8]
 8004d56:	781b      	ldrb	r3, [r3, #0]
 8004d58:	009b      	lsls	r3, r3, #2
 8004d5a:	4413      	add	r3, r2
 8004d5c:	881b      	ldrh	r3, [r3, #0]
 8004d5e:	b29b      	uxth	r3, r3
 8004d60:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d68:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	461a      	mov	r2, r3
 8004d72:	68bb      	ldr	r3, [r7, #8]
 8004d74:	781b      	ldrb	r3, [r3, #0]
 8004d76:	009b      	lsls	r3, r3, #2
 8004d78:	441a      	add	r2, r3
 8004d7a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8004d7e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d82:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d86:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004d8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d8e:	b29b      	uxth	r3, r3
 8004d90:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004d92:	68bb      	ldr	r3, [r7, #8]
 8004d94:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004d98:	2b01      	cmp	r3, #1
 8004d9a:	f040 8284 	bne.w	80052a6 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 8004d9e:	68bb      	ldr	r3, [r7, #8]
 8004da0:	695a      	ldr	r2, [r3, #20]
 8004da2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004da6:	441a      	add	r2, r3
 8004da8:	68bb      	ldr	r3, [r7, #8]
 8004daa:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8004dac:	68bb      	ldr	r3, [r7, #8]
 8004dae:	69da      	ldr	r2, [r3, #28]
 8004db0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004db4:	441a      	add	r2, r3
 8004db6:	68bb      	ldr	r3, [r7, #8]
 8004db8:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004dba:	68bb      	ldr	r3, [r7, #8]
 8004dbc:	6a1a      	ldr	r2, [r3, #32]
 8004dbe:	68bb      	ldr	r3, [r7, #8]
 8004dc0:	691b      	ldr	r3, [r3, #16]
 8004dc2:	429a      	cmp	r2, r3
 8004dc4:	d309      	bcc.n	8004dda <HAL_PCD_EP_DB_Transmit+0x276>
        {
          len = ep->maxpacket;
 8004dc6:	68bb      	ldr	r3, [r7, #8]
 8004dc8:	691b      	ldr	r3, [r3, #16]
 8004dca:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8004dcc:	68bb      	ldr	r3, [r7, #8]
 8004dce:	6a1a      	ldr	r2, [r3, #32]
 8004dd0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004dd2:	1ad2      	subs	r2, r2, r3
 8004dd4:	68bb      	ldr	r3, [r7, #8]
 8004dd6:	621a      	str	r2, [r3, #32]
 8004dd8:	e015      	b.n	8004e06 <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else if (ep->xfer_len_db == 0U)
 8004dda:	68bb      	ldr	r3, [r7, #8]
 8004ddc:	6a1b      	ldr	r3, [r3, #32]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d107      	bne.n	8004df2 <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxPctSize;
 8004de2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004de6:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8004de8:	68bb      	ldr	r3, [r7, #8]
 8004dea:	2200      	movs	r2, #0
 8004dec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8004df0:	e009      	b.n	8004e06 <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8004df2:	68bb      	ldr	r3, [r7, #8]
 8004df4:	2200      	movs	r2, #0
 8004df6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8004dfa:	68bb      	ldr	r3, [r7, #8]
 8004dfc:	6a1b      	ldr	r3, [r3, #32]
 8004dfe:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8004e00:	68bb      	ldr	r3, [r7, #8]
 8004e02:	2200      	movs	r2, #0
 8004e04:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004e06:	68bb      	ldr	r3, [r7, #8]
 8004e08:	785b      	ldrb	r3, [r3, #1]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d155      	bne.n	8004eba <HAL_PCD_EP_DB_Transmit+0x356>
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	63bb      	str	r3, [r7, #56]	; 0x38
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e1c:	b29b      	uxth	r3, r3
 8004e1e:	461a      	mov	r2, r3
 8004e20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e22:	4413      	add	r3, r2
 8004e24:	63bb      	str	r3, [r7, #56]	; 0x38
 8004e26:	68bb      	ldr	r3, [r7, #8]
 8004e28:	781b      	ldrb	r3, [r3, #0]
 8004e2a:	00da      	lsls	r2, r3, #3
 8004e2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e2e:	4413      	add	r3, r2
 8004e30:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004e34:	637b      	str	r3, [r7, #52]	; 0x34
 8004e36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e38:	2b3e      	cmp	r3, #62	; 0x3e
 8004e3a:	d916      	bls.n	8004e6a <HAL_PCD_EP_DB_Transmit+0x306>
 8004e3c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e3e:	095b      	lsrs	r3, r3, #5
 8004e40:	64bb      	str	r3, [r7, #72]	; 0x48
 8004e42:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e44:	f003 031f 	and.w	r3, r3, #31
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d102      	bne.n	8004e52 <HAL_PCD_EP_DB_Transmit+0x2ee>
 8004e4c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e4e:	3b01      	subs	r3, #1
 8004e50:	64bb      	str	r3, [r7, #72]	; 0x48
 8004e52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e54:	b29b      	uxth	r3, r3
 8004e56:	029b      	lsls	r3, r3, #10
 8004e58:	b29b      	uxth	r3, r3
 8004e5a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e5e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e62:	b29a      	uxth	r2, r3
 8004e64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e66:	801a      	strh	r2, [r3, #0]
 8004e68:	e043      	b.n	8004ef2 <HAL_PCD_EP_DB_Transmit+0x38e>
 8004e6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d112      	bne.n	8004e96 <HAL_PCD_EP_DB_Transmit+0x332>
 8004e70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e72:	881b      	ldrh	r3, [r3, #0]
 8004e74:	b29b      	uxth	r3, r3
 8004e76:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004e7a:	b29a      	uxth	r2, r3
 8004e7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e7e:	801a      	strh	r2, [r3, #0]
 8004e80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e82:	881b      	ldrh	r3, [r3, #0]
 8004e84:	b29b      	uxth	r3, r3
 8004e86:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e8a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e8e:	b29a      	uxth	r2, r3
 8004e90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e92:	801a      	strh	r2, [r3, #0]
 8004e94:	e02d      	b.n	8004ef2 <HAL_PCD_EP_DB_Transmit+0x38e>
 8004e96:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e98:	085b      	lsrs	r3, r3, #1
 8004e9a:	64bb      	str	r3, [r7, #72]	; 0x48
 8004e9c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e9e:	f003 0301 	and.w	r3, r3, #1
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d002      	beq.n	8004eac <HAL_PCD_EP_DB_Transmit+0x348>
 8004ea6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ea8:	3301      	adds	r3, #1
 8004eaa:	64bb      	str	r3, [r7, #72]	; 0x48
 8004eac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004eae:	b29b      	uxth	r3, r3
 8004eb0:	029b      	lsls	r3, r3, #10
 8004eb2:	b29a      	uxth	r2, r3
 8004eb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004eb6:	801a      	strh	r2, [r3, #0]
 8004eb8:	e01b      	b.n	8004ef2 <HAL_PCD_EP_DB_Transmit+0x38e>
 8004eba:	68bb      	ldr	r3, [r7, #8]
 8004ebc:	785b      	ldrb	r3, [r3, #1]
 8004ebe:	2b01      	cmp	r3, #1
 8004ec0:	d117      	bne.n	8004ef2 <HAL_PCD_EP_DB_Transmit+0x38e>
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	643b      	str	r3, [r7, #64]	; 0x40
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ed0:	b29b      	uxth	r3, r3
 8004ed2:	461a      	mov	r2, r3
 8004ed4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ed6:	4413      	add	r3, r2
 8004ed8:	643b      	str	r3, [r7, #64]	; 0x40
 8004eda:	68bb      	ldr	r3, [r7, #8]
 8004edc:	781b      	ldrb	r3, [r3, #0]
 8004ede:	00da      	lsls	r2, r3, #3
 8004ee0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ee2:	4413      	add	r3, r2
 8004ee4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004ee8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004eea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004eec:	b29a      	uxth	r2, r3
 8004eee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ef0:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	6818      	ldr	r0, [r3, #0]
 8004ef6:	68bb      	ldr	r3, [r7, #8]
 8004ef8:	6959      	ldr	r1, [r3, #20]
 8004efa:	68bb      	ldr	r3, [r7, #8]
 8004efc:	891a      	ldrh	r2, [r3, #8]
 8004efe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f00:	b29b      	uxth	r3, r3
 8004f02:	f006 f98e 	bl	800b222 <USB_WritePMA>
 8004f06:	e1ce      	b.n	80052a6 <HAL_PCD_EP_DB_Transmit+0x742>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f10:	b29b      	uxth	r3, r3
 8004f12:	461a      	mov	r2, r3
 8004f14:	68bb      	ldr	r3, [r7, #8]
 8004f16:	781b      	ldrb	r3, [r3, #0]
 8004f18:	00db      	lsls	r3, r3, #3
 8004f1a:	4413      	add	r3, r2
 8004f1c:	68fa      	ldr	r2, [r7, #12]
 8004f1e:	6812      	ldr	r2, [r2, #0]
 8004f20:	4413      	add	r3, r2
 8004f22:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004f26:	881b      	ldrh	r3, [r3, #0]
 8004f28:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004f2c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxPctSize)
 8004f30:	68bb      	ldr	r3, [r7, #8]
 8004f32:	699a      	ldr	r2, [r3, #24]
 8004f34:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004f38:	429a      	cmp	r2, r3
 8004f3a:	d307      	bcc.n	8004f4c <HAL_PCD_EP_DB_Transmit+0x3e8>
    {
      ep->xfer_len -= TxPctSize;
 8004f3c:	68bb      	ldr	r3, [r7, #8]
 8004f3e:	699a      	ldr	r2, [r3, #24]
 8004f40:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004f44:	1ad2      	subs	r2, r2, r3
 8004f46:	68bb      	ldr	r3, [r7, #8]
 8004f48:	619a      	str	r2, [r3, #24]
 8004f4a:	e002      	b.n	8004f52 <HAL_PCD_EP_DB_Transmit+0x3ee>
    }
    else
    {
      ep->xfer_len = 0U;
 8004f4c:	68bb      	ldr	r3, [r7, #8]
 8004f4e:	2200      	movs	r2, #0
 8004f50:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004f52:	68bb      	ldr	r3, [r7, #8]
 8004f54:	699b      	ldr	r3, [r3, #24]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	f040 80c4 	bne.w	80050e4 <HAL_PCD_EP_DB_Transmit+0x580>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004f5c:	68bb      	ldr	r3, [r7, #8]
 8004f5e:	785b      	ldrb	r3, [r3, #1]
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d126      	bne.n	8004fb2 <HAL_PCD_EP_DB_Transmit+0x44e>
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	66bb      	str	r3, [r7, #104]	; 0x68
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f72:	b29b      	uxth	r3, r3
 8004f74:	461a      	mov	r2, r3
 8004f76:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004f78:	4413      	add	r3, r2
 8004f7a:	66bb      	str	r3, [r7, #104]	; 0x68
 8004f7c:	68bb      	ldr	r3, [r7, #8]
 8004f7e:	781b      	ldrb	r3, [r3, #0]
 8004f80:	00da      	lsls	r2, r3, #3
 8004f82:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004f84:	4413      	add	r3, r2
 8004f86:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004f8a:	667b      	str	r3, [r7, #100]	; 0x64
 8004f8c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004f8e:	881b      	ldrh	r3, [r3, #0]
 8004f90:	b29b      	uxth	r3, r3
 8004f92:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004f96:	b29a      	uxth	r2, r3
 8004f98:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004f9a:	801a      	strh	r2, [r3, #0]
 8004f9c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004f9e:	881b      	ldrh	r3, [r3, #0]
 8004fa0:	b29b      	uxth	r3, r3
 8004fa2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004fa6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004faa:	b29a      	uxth	r2, r3
 8004fac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004fae:	801a      	strh	r2, [r3, #0]
 8004fb0:	e01a      	b.n	8004fe8 <HAL_PCD_EP_DB_Transmit+0x484>
 8004fb2:	68bb      	ldr	r3, [r7, #8]
 8004fb4:	785b      	ldrb	r3, [r3, #1]
 8004fb6:	2b01      	cmp	r3, #1
 8004fb8:	d116      	bne.n	8004fe8 <HAL_PCD_EP_DB_Transmit+0x484>
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	673b      	str	r3, [r7, #112]	; 0x70
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004fc8:	b29b      	uxth	r3, r3
 8004fca:	461a      	mov	r2, r3
 8004fcc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004fce:	4413      	add	r3, r2
 8004fd0:	673b      	str	r3, [r7, #112]	; 0x70
 8004fd2:	68bb      	ldr	r3, [r7, #8]
 8004fd4:	781b      	ldrb	r3, [r3, #0]
 8004fd6:	00da      	lsls	r2, r3, #3
 8004fd8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004fda:	4413      	add	r3, r2
 8004fdc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004fe0:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004fe2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004fee:	68bb      	ldr	r3, [r7, #8]
 8004ff0:	785b      	ldrb	r3, [r3, #1]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d12f      	bne.n	8005056 <HAL_PCD_EP_DB_Transmit+0x4f2>
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005006:	b29b      	uxth	r3, r3
 8005008:	461a      	mov	r2, r3
 800500a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800500e:	4413      	add	r3, r2
 8005010:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005014:	68bb      	ldr	r3, [r7, #8]
 8005016:	781b      	ldrb	r3, [r3, #0]
 8005018:	00da      	lsls	r2, r3, #3
 800501a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800501e:	4413      	add	r3, r2
 8005020:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005024:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005028:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800502c:	881b      	ldrh	r3, [r3, #0]
 800502e:	b29b      	uxth	r3, r3
 8005030:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005034:	b29a      	uxth	r2, r3
 8005036:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800503a:	801a      	strh	r2, [r3, #0]
 800503c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005040:	881b      	ldrh	r3, [r3, #0]
 8005042:	b29b      	uxth	r3, r3
 8005044:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005048:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800504c:	b29a      	uxth	r2, r3
 800504e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005052:	801a      	strh	r2, [r3, #0]
 8005054:	e017      	b.n	8005086 <HAL_PCD_EP_DB_Transmit+0x522>
 8005056:	68bb      	ldr	r3, [r7, #8]
 8005058:	785b      	ldrb	r3, [r3, #1]
 800505a:	2b01      	cmp	r3, #1
 800505c:	d113      	bne.n	8005086 <HAL_PCD_EP_DB_Transmit+0x522>
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005066:	b29b      	uxth	r3, r3
 8005068:	461a      	mov	r2, r3
 800506a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800506c:	4413      	add	r3, r2
 800506e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005070:	68bb      	ldr	r3, [r7, #8]
 8005072:	781b      	ldrb	r3, [r3, #0]
 8005074:	00da      	lsls	r2, r3, #3
 8005076:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005078:	4413      	add	r3, r2
 800507a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800507e:	67bb      	str	r3, [r7, #120]	; 0x78
 8005080:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005082:	2200      	movs	r2, #0
 8005084:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005086:	68bb      	ldr	r3, [r7, #8]
 8005088:	781b      	ldrb	r3, [r3, #0]
 800508a:	4619      	mov	r1, r3
 800508c:	68f8      	ldr	r0, [r7, #12]
 800508e:	f007 ffb4 	bl	800cffa <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8005092:	88fb      	ldrh	r3, [r7, #6]
 8005094:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005098:	2b00      	cmp	r3, #0
 800509a:	f040 8104 	bne.w	80052a6 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	461a      	mov	r2, r3
 80050a4:	68bb      	ldr	r3, [r7, #8]
 80050a6:	781b      	ldrb	r3, [r3, #0]
 80050a8:	009b      	lsls	r3, r3, #2
 80050aa:	4413      	add	r3, r2
 80050ac:	881b      	ldrh	r3, [r3, #0]
 80050ae:	b29b      	uxth	r3, r3
 80050b0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050b8:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	461a      	mov	r2, r3
 80050c2:	68bb      	ldr	r3, [r7, #8]
 80050c4:	781b      	ldrb	r3, [r3, #0]
 80050c6:	009b      	lsls	r3, r3, #2
 80050c8:	441a      	add	r2, r3
 80050ca:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80050ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80050d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80050d6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80050da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050de:	b29b      	uxth	r3, r3
 80050e0:	8013      	strh	r3, [r2, #0]
 80050e2:	e0e0      	b.n	80052a6 <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80050e4:	88fb      	ldrh	r3, [r7, #6]
 80050e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d121      	bne.n	8005132 <HAL_PCD_EP_DB_Transmit+0x5ce>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	461a      	mov	r2, r3
 80050f4:	68bb      	ldr	r3, [r7, #8]
 80050f6:	781b      	ldrb	r3, [r3, #0]
 80050f8:	009b      	lsls	r3, r3, #2
 80050fa:	4413      	add	r3, r2
 80050fc:	881b      	ldrh	r3, [r3, #0]
 80050fe:	b29b      	uxth	r3, r3
 8005100:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005104:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005108:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	461a      	mov	r2, r3
 8005112:	68bb      	ldr	r3, [r7, #8]
 8005114:	781b      	ldrb	r3, [r3, #0]
 8005116:	009b      	lsls	r3, r3, #2
 8005118:	441a      	add	r2, r3
 800511a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800511e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005122:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005126:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800512a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800512e:	b29b      	uxth	r3, r3
 8005130:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8005132:	68bb      	ldr	r3, [r7, #8]
 8005134:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005138:	2b01      	cmp	r3, #1
 800513a:	f040 80b4 	bne.w	80052a6 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 800513e:	68bb      	ldr	r3, [r7, #8]
 8005140:	695a      	ldr	r2, [r3, #20]
 8005142:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005146:	441a      	add	r2, r3
 8005148:	68bb      	ldr	r3, [r7, #8]
 800514a:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800514c:	68bb      	ldr	r3, [r7, #8]
 800514e:	69da      	ldr	r2, [r3, #28]
 8005150:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005154:	441a      	add	r2, r3
 8005156:	68bb      	ldr	r3, [r7, #8]
 8005158:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800515a:	68bb      	ldr	r3, [r7, #8]
 800515c:	6a1a      	ldr	r2, [r3, #32]
 800515e:	68bb      	ldr	r3, [r7, #8]
 8005160:	691b      	ldr	r3, [r3, #16]
 8005162:	429a      	cmp	r2, r3
 8005164:	d309      	bcc.n	800517a <HAL_PCD_EP_DB_Transmit+0x616>
        {
          len = ep->maxpacket;
 8005166:	68bb      	ldr	r3, [r7, #8]
 8005168:	691b      	ldr	r3, [r3, #16]
 800516a:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 800516c:	68bb      	ldr	r3, [r7, #8]
 800516e:	6a1a      	ldr	r2, [r3, #32]
 8005170:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005172:	1ad2      	subs	r2, r2, r3
 8005174:	68bb      	ldr	r3, [r7, #8]
 8005176:	621a      	str	r2, [r3, #32]
 8005178:	e015      	b.n	80051a6 <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else if (ep->xfer_len_db == 0U)
 800517a:	68bb      	ldr	r3, [r7, #8]
 800517c:	6a1b      	ldr	r3, [r3, #32]
 800517e:	2b00      	cmp	r3, #0
 8005180:	d107      	bne.n	8005192 <HAL_PCD_EP_DB_Transmit+0x62e>
        {
          len = TxPctSize;
 8005182:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005186:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8005188:	68bb      	ldr	r3, [r7, #8]
 800518a:	2200      	movs	r2, #0
 800518c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8005190:	e009      	b.n	80051a6 <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else
        {
          len = ep->xfer_len_db;
 8005192:	68bb      	ldr	r3, [r7, #8]
 8005194:	6a1b      	ldr	r3, [r3, #32]
 8005196:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8005198:	68bb      	ldr	r3, [r7, #8]
 800519a:	2200      	movs	r2, #0
 800519c:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800519e:	68bb      	ldr	r3, [r7, #8]
 80051a0:	2200      	movs	r2, #0
 80051a2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	663b      	str	r3, [r7, #96]	; 0x60
 80051ac:	68bb      	ldr	r3, [r7, #8]
 80051ae:	785b      	ldrb	r3, [r3, #1]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d155      	bne.n	8005260 <HAL_PCD_EP_DB_Transmit+0x6fc>
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	65bb      	str	r3, [r7, #88]	; 0x58
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80051c2:	b29b      	uxth	r3, r3
 80051c4:	461a      	mov	r2, r3
 80051c6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80051c8:	4413      	add	r3, r2
 80051ca:	65bb      	str	r3, [r7, #88]	; 0x58
 80051cc:	68bb      	ldr	r3, [r7, #8]
 80051ce:	781b      	ldrb	r3, [r3, #0]
 80051d0:	00da      	lsls	r2, r3, #3
 80051d2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80051d4:	4413      	add	r3, r2
 80051d6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80051da:	657b      	str	r3, [r7, #84]	; 0x54
 80051dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80051de:	2b3e      	cmp	r3, #62	; 0x3e
 80051e0:	d916      	bls.n	8005210 <HAL_PCD_EP_DB_Transmit+0x6ac>
 80051e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80051e4:	095b      	lsrs	r3, r3, #5
 80051e6:	677b      	str	r3, [r7, #116]	; 0x74
 80051e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80051ea:	f003 031f 	and.w	r3, r3, #31
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d102      	bne.n	80051f8 <HAL_PCD_EP_DB_Transmit+0x694>
 80051f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80051f4:	3b01      	subs	r3, #1
 80051f6:	677b      	str	r3, [r7, #116]	; 0x74
 80051f8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80051fa:	b29b      	uxth	r3, r3
 80051fc:	029b      	lsls	r3, r3, #10
 80051fe:	b29b      	uxth	r3, r3
 8005200:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005204:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005208:	b29a      	uxth	r2, r3
 800520a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800520c:	801a      	strh	r2, [r3, #0]
 800520e:	e040      	b.n	8005292 <HAL_PCD_EP_DB_Transmit+0x72e>
 8005210:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005212:	2b00      	cmp	r3, #0
 8005214:	d112      	bne.n	800523c <HAL_PCD_EP_DB_Transmit+0x6d8>
 8005216:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005218:	881b      	ldrh	r3, [r3, #0]
 800521a:	b29b      	uxth	r3, r3
 800521c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005220:	b29a      	uxth	r2, r3
 8005222:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005224:	801a      	strh	r2, [r3, #0]
 8005226:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005228:	881b      	ldrh	r3, [r3, #0]
 800522a:	b29b      	uxth	r3, r3
 800522c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005230:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005234:	b29a      	uxth	r2, r3
 8005236:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005238:	801a      	strh	r2, [r3, #0]
 800523a:	e02a      	b.n	8005292 <HAL_PCD_EP_DB_Transmit+0x72e>
 800523c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800523e:	085b      	lsrs	r3, r3, #1
 8005240:	677b      	str	r3, [r7, #116]	; 0x74
 8005242:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005244:	f003 0301 	and.w	r3, r3, #1
 8005248:	2b00      	cmp	r3, #0
 800524a:	d002      	beq.n	8005252 <HAL_PCD_EP_DB_Transmit+0x6ee>
 800524c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800524e:	3301      	adds	r3, #1
 8005250:	677b      	str	r3, [r7, #116]	; 0x74
 8005252:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005254:	b29b      	uxth	r3, r3
 8005256:	029b      	lsls	r3, r3, #10
 8005258:	b29a      	uxth	r2, r3
 800525a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800525c:	801a      	strh	r2, [r3, #0]
 800525e:	e018      	b.n	8005292 <HAL_PCD_EP_DB_Transmit+0x72e>
 8005260:	68bb      	ldr	r3, [r7, #8]
 8005262:	785b      	ldrb	r3, [r3, #1]
 8005264:	2b01      	cmp	r3, #1
 8005266:	d114      	bne.n	8005292 <HAL_PCD_EP_DB_Transmit+0x72e>
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005270:	b29b      	uxth	r3, r3
 8005272:	461a      	mov	r2, r3
 8005274:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005276:	4413      	add	r3, r2
 8005278:	663b      	str	r3, [r7, #96]	; 0x60
 800527a:	68bb      	ldr	r3, [r7, #8]
 800527c:	781b      	ldrb	r3, [r3, #0]
 800527e:	00da      	lsls	r2, r3, #3
 8005280:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005282:	4413      	add	r3, r2
 8005284:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005288:	65fb      	str	r3, [r7, #92]	; 0x5c
 800528a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800528c:	b29a      	uxth	r2, r3
 800528e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005290:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	6818      	ldr	r0, [r3, #0]
 8005296:	68bb      	ldr	r3, [r7, #8]
 8005298:	6959      	ldr	r1, [r3, #20]
 800529a:	68bb      	ldr	r3, [r7, #8]
 800529c:	895a      	ldrh	r2, [r3, #10]
 800529e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80052a0:	b29b      	uxth	r3, r3
 80052a2:	f005 ffbe 	bl	800b222 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	461a      	mov	r2, r3
 80052ac:	68bb      	ldr	r3, [r7, #8]
 80052ae:	781b      	ldrb	r3, [r3, #0]
 80052b0:	009b      	lsls	r3, r3, #2
 80052b2:	4413      	add	r3, r2
 80052b4:	881b      	ldrh	r3, [r3, #0]
 80052b6:	b29b      	uxth	r3, r3
 80052b8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80052c0:	823b      	strh	r3, [r7, #16]
 80052c2:	8a3b      	ldrh	r3, [r7, #16]
 80052c4:	f083 0310 	eor.w	r3, r3, #16
 80052c8:	823b      	strh	r3, [r7, #16]
 80052ca:	8a3b      	ldrh	r3, [r7, #16]
 80052cc:	f083 0320 	eor.w	r3, r3, #32
 80052d0:	823b      	strh	r3, [r7, #16]
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	461a      	mov	r2, r3
 80052d8:	68bb      	ldr	r3, [r7, #8]
 80052da:	781b      	ldrb	r3, [r3, #0]
 80052dc:	009b      	lsls	r3, r3, #2
 80052de:	441a      	add	r2, r3
 80052e0:	8a3b      	ldrh	r3, [r7, #16]
 80052e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80052e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80052ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80052ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052f2:	b29b      	uxth	r3, r3
 80052f4:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80052f6:	2300      	movs	r3, #0
}
 80052f8:	4618      	mov	r0, r3
 80052fa:	3788      	adds	r7, #136	; 0x88
 80052fc:	46bd      	mov	sp, r7
 80052fe:	bd80      	pop	{r7, pc}

08005300 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8005300:	b480      	push	{r7}
 8005302:	b087      	sub	sp, #28
 8005304:	af00      	add	r7, sp, #0
 8005306:	60f8      	str	r0, [r7, #12]
 8005308:	607b      	str	r3, [r7, #4]
 800530a:	460b      	mov	r3, r1
 800530c:	817b      	strh	r3, [r7, #10]
 800530e:	4613      	mov	r3, r2
 8005310:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8005312:	897b      	ldrh	r3, [r7, #10]
 8005314:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005318:	b29b      	uxth	r3, r3
 800531a:	2b00      	cmp	r3, #0
 800531c:	d00b      	beq.n	8005336 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800531e:	897b      	ldrh	r3, [r7, #10]
 8005320:	f003 0307 	and.w	r3, r3, #7
 8005324:	1c5a      	adds	r2, r3, #1
 8005326:	4613      	mov	r3, r2
 8005328:	009b      	lsls	r3, r3, #2
 800532a:	4413      	add	r3, r2
 800532c:	00db      	lsls	r3, r3, #3
 800532e:	68fa      	ldr	r2, [r7, #12]
 8005330:	4413      	add	r3, r2
 8005332:	617b      	str	r3, [r7, #20]
 8005334:	e009      	b.n	800534a <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005336:	897a      	ldrh	r2, [r7, #10]
 8005338:	4613      	mov	r3, r2
 800533a:	009b      	lsls	r3, r3, #2
 800533c:	4413      	add	r3, r2
 800533e:	00db      	lsls	r3, r3, #3
 8005340:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005344:	68fa      	ldr	r2, [r7, #12]
 8005346:	4413      	add	r3, r2
 8005348:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800534a:	893b      	ldrh	r3, [r7, #8]
 800534c:	2b00      	cmp	r3, #0
 800534e:	d107      	bne.n	8005360 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8005350:	697b      	ldr	r3, [r7, #20]
 8005352:	2200      	movs	r2, #0
 8005354:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	b29a      	uxth	r2, r3
 800535a:	697b      	ldr	r3, [r7, #20]
 800535c:	80da      	strh	r2, [r3, #6]
 800535e:	e00b      	b.n	8005378 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8005360:	697b      	ldr	r3, [r7, #20]
 8005362:	2201      	movs	r2, #1
 8005364:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	b29a      	uxth	r2, r3
 800536a:	697b      	ldr	r3, [r7, #20]
 800536c:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	0c1b      	lsrs	r3, r3, #16
 8005372:	b29a      	uxth	r2, r3
 8005374:	697b      	ldr	r3, [r7, #20]
 8005376:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8005378:	2300      	movs	r3, #0
}
 800537a:	4618      	mov	r0, r3
 800537c:	371c      	adds	r7, #28
 800537e:	46bd      	mov	sp, r7
 8005380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005384:	4770      	bx	lr

08005386 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005386:	b480      	push	{r7}
 8005388:	b085      	sub	sp, #20
 800538a:	af00      	add	r7, sp, #0
 800538c:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2201      	movs	r2, #1
 8005398:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2200      	movs	r2, #0
 80053a0:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80053aa:	b29b      	uxth	r3, r3
 80053ac:	f043 0301 	orr.w	r3, r3, #1
 80053b0:	b29a      	uxth	r2, r3
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80053be:	b29b      	uxth	r3, r3
 80053c0:	f043 0302 	orr.w	r3, r3, #2
 80053c4:	b29a      	uxth	r2, r3
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 80053cc:	2300      	movs	r3, #0
}
 80053ce:	4618      	mov	r0, r3
 80053d0:	3714      	adds	r7, #20
 80053d2:	46bd      	mov	sp, r7
 80053d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d8:	4770      	bx	lr
	...

080053dc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80053dc:	b480      	push	{r7}
 80053de:	b085      	sub	sp, #20
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d141      	bne.n	800546e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80053ea:	4b4b      	ldr	r3, [pc, #300]	; (8005518 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80053f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80053f6:	d131      	bne.n	800545c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80053f8:	4b47      	ldr	r3, [pc, #284]	; (8005518 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80053fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80053fe:	4a46      	ldr	r2, [pc, #280]	; (8005518 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005400:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005404:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005408:	4b43      	ldr	r3, [pc, #268]	; (8005518 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005410:	4a41      	ldr	r2, [pc, #260]	; (8005518 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005412:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005416:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005418:	4b40      	ldr	r3, [pc, #256]	; (800551c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	2232      	movs	r2, #50	; 0x32
 800541e:	fb02 f303 	mul.w	r3, r2, r3
 8005422:	4a3f      	ldr	r2, [pc, #252]	; (8005520 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005424:	fba2 2303 	umull	r2, r3, r2, r3
 8005428:	0c9b      	lsrs	r3, r3, #18
 800542a:	3301      	adds	r3, #1
 800542c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800542e:	e002      	b.n	8005436 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	3b01      	subs	r3, #1
 8005434:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005436:	4b38      	ldr	r3, [pc, #224]	; (8005518 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005438:	695b      	ldr	r3, [r3, #20]
 800543a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800543e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005442:	d102      	bne.n	800544a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	2b00      	cmp	r3, #0
 8005448:	d1f2      	bne.n	8005430 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800544a:	4b33      	ldr	r3, [pc, #204]	; (8005518 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800544c:	695b      	ldr	r3, [r3, #20]
 800544e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005452:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005456:	d158      	bne.n	800550a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005458:	2303      	movs	r3, #3
 800545a:	e057      	b.n	800550c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800545c:	4b2e      	ldr	r3, [pc, #184]	; (8005518 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800545e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005462:	4a2d      	ldr	r2, [pc, #180]	; (8005518 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005464:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005468:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800546c:	e04d      	b.n	800550a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005474:	d141      	bne.n	80054fa <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005476:	4b28      	ldr	r3, [pc, #160]	; (8005518 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800547e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005482:	d131      	bne.n	80054e8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005484:	4b24      	ldr	r3, [pc, #144]	; (8005518 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005486:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800548a:	4a23      	ldr	r2, [pc, #140]	; (8005518 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800548c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005490:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005494:	4b20      	ldr	r3, [pc, #128]	; (8005518 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800549c:	4a1e      	ldr	r2, [pc, #120]	; (8005518 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800549e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80054a2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80054a4:	4b1d      	ldr	r3, [pc, #116]	; (800551c <HAL_PWREx_ControlVoltageScaling+0x140>)
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	2232      	movs	r2, #50	; 0x32
 80054aa:	fb02 f303 	mul.w	r3, r2, r3
 80054ae:	4a1c      	ldr	r2, [pc, #112]	; (8005520 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80054b0:	fba2 2303 	umull	r2, r3, r2, r3
 80054b4:	0c9b      	lsrs	r3, r3, #18
 80054b6:	3301      	adds	r3, #1
 80054b8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80054ba:	e002      	b.n	80054c2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	3b01      	subs	r3, #1
 80054c0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80054c2:	4b15      	ldr	r3, [pc, #84]	; (8005518 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80054c4:	695b      	ldr	r3, [r3, #20]
 80054c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80054ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80054ce:	d102      	bne.n	80054d6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d1f2      	bne.n	80054bc <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80054d6:	4b10      	ldr	r3, [pc, #64]	; (8005518 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80054d8:	695b      	ldr	r3, [r3, #20]
 80054da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80054de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80054e2:	d112      	bne.n	800550a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80054e4:	2303      	movs	r3, #3
 80054e6:	e011      	b.n	800550c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80054e8:	4b0b      	ldr	r3, [pc, #44]	; (8005518 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80054ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80054ee:	4a0a      	ldr	r2, [pc, #40]	; (8005518 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80054f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80054f4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80054f8:	e007      	b.n	800550a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80054fa:	4b07      	ldr	r3, [pc, #28]	; (8005518 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005502:	4a05      	ldr	r2, [pc, #20]	; (8005518 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005504:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005508:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800550a:	2300      	movs	r3, #0
}
 800550c:	4618      	mov	r0, r3
 800550e:	3714      	adds	r7, #20
 8005510:	46bd      	mov	sp, r7
 8005512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005516:	4770      	bx	lr
 8005518:	40007000 	.word	0x40007000
 800551c:	20000000 	.word	0x20000000
 8005520:	431bde83 	.word	0x431bde83

08005524 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005524:	b580      	push	{r7, lr}
 8005526:	b088      	sub	sp, #32
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2b00      	cmp	r3, #0
 8005530:	d101      	bne.n	8005536 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005532:	2301      	movs	r3, #1
 8005534:	e306      	b.n	8005b44 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f003 0301 	and.w	r3, r3, #1
 800553e:	2b00      	cmp	r3, #0
 8005540:	d075      	beq.n	800562e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005542:	4b97      	ldr	r3, [pc, #604]	; (80057a0 <HAL_RCC_OscConfig+0x27c>)
 8005544:	689b      	ldr	r3, [r3, #8]
 8005546:	f003 030c 	and.w	r3, r3, #12
 800554a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800554c:	4b94      	ldr	r3, [pc, #592]	; (80057a0 <HAL_RCC_OscConfig+0x27c>)
 800554e:	68db      	ldr	r3, [r3, #12]
 8005550:	f003 0303 	and.w	r3, r3, #3
 8005554:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8005556:	69bb      	ldr	r3, [r7, #24]
 8005558:	2b0c      	cmp	r3, #12
 800555a:	d102      	bne.n	8005562 <HAL_RCC_OscConfig+0x3e>
 800555c:	697b      	ldr	r3, [r7, #20]
 800555e:	2b03      	cmp	r3, #3
 8005560:	d002      	beq.n	8005568 <HAL_RCC_OscConfig+0x44>
 8005562:	69bb      	ldr	r3, [r7, #24]
 8005564:	2b08      	cmp	r3, #8
 8005566:	d10b      	bne.n	8005580 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005568:	4b8d      	ldr	r3, [pc, #564]	; (80057a0 <HAL_RCC_OscConfig+0x27c>)
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005570:	2b00      	cmp	r3, #0
 8005572:	d05b      	beq.n	800562c <HAL_RCC_OscConfig+0x108>
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	685b      	ldr	r3, [r3, #4]
 8005578:	2b00      	cmp	r3, #0
 800557a:	d157      	bne.n	800562c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800557c:	2301      	movs	r3, #1
 800557e:	e2e1      	b.n	8005b44 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	685b      	ldr	r3, [r3, #4]
 8005584:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005588:	d106      	bne.n	8005598 <HAL_RCC_OscConfig+0x74>
 800558a:	4b85      	ldr	r3, [pc, #532]	; (80057a0 <HAL_RCC_OscConfig+0x27c>)
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	4a84      	ldr	r2, [pc, #528]	; (80057a0 <HAL_RCC_OscConfig+0x27c>)
 8005590:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005594:	6013      	str	r3, [r2, #0]
 8005596:	e01d      	b.n	80055d4 <HAL_RCC_OscConfig+0xb0>
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	685b      	ldr	r3, [r3, #4]
 800559c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80055a0:	d10c      	bne.n	80055bc <HAL_RCC_OscConfig+0x98>
 80055a2:	4b7f      	ldr	r3, [pc, #508]	; (80057a0 <HAL_RCC_OscConfig+0x27c>)
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	4a7e      	ldr	r2, [pc, #504]	; (80057a0 <HAL_RCC_OscConfig+0x27c>)
 80055a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80055ac:	6013      	str	r3, [r2, #0]
 80055ae:	4b7c      	ldr	r3, [pc, #496]	; (80057a0 <HAL_RCC_OscConfig+0x27c>)
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	4a7b      	ldr	r2, [pc, #492]	; (80057a0 <HAL_RCC_OscConfig+0x27c>)
 80055b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80055b8:	6013      	str	r3, [r2, #0]
 80055ba:	e00b      	b.n	80055d4 <HAL_RCC_OscConfig+0xb0>
 80055bc:	4b78      	ldr	r3, [pc, #480]	; (80057a0 <HAL_RCC_OscConfig+0x27c>)
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	4a77      	ldr	r2, [pc, #476]	; (80057a0 <HAL_RCC_OscConfig+0x27c>)
 80055c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80055c6:	6013      	str	r3, [r2, #0]
 80055c8:	4b75      	ldr	r3, [pc, #468]	; (80057a0 <HAL_RCC_OscConfig+0x27c>)
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	4a74      	ldr	r2, [pc, #464]	; (80057a0 <HAL_RCC_OscConfig+0x27c>)
 80055ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80055d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	685b      	ldr	r3, [r3, #4]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d013      	beq.n	8005604 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055dc:	f7fc fc14 	bl	8001e08 <HAL_GetTick>
 80055e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80055e2:	e008      	b.n	80055f6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80055e4:	f7fc fc10 	bl	8001e08 <HAL_GetTick>
 80055e8:	4602      	mov	r2, r0
 80055ea:	693b      	ldr	r3, [r7, #16]
 80055ec:	1ad3      	subs	r3, r2, r3
 80055ee:	2b64      	cmp	r3, #100	; 0x64
 80055f0:	d901      	bls.n	80055f6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80055f2:	2303      	movs	r3, #3
 80055f4:	e2a6      	b.n	8005b44 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80055f6:	4b6a      	ldr	r3, [pc, #424]	; (80057a0 <HAL_RCC_OscConfig+0x27c>)
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d0f0      	beq.n	80055e4 <HAL_RCC_OscConfig+0xc0>
 8005602:	e014      	b.n	800562e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005604:	f7fc fc00 	bl	8001e08 <HAL_GetTick>
 8005608:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800560a:	e008      	b.n	800561e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800560c:	f7fc fbfc 	bl	8001e08 <HAL_GetTick>
 8005610:	4602      	mov	r2, r0
 8005612:	693b      	ldr	r3, [r7, #16]
 8005614:	1ad3      	subs	r3, r2, r3
 8005616:	2b64      	cmp	r3, #100	; 0x64
 8005618:	d901      	bls.n	800561e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800561a:	2303      	movs	r3, #3
 800561c:	e292      	b.n	8005b44 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800561e:	4b60      	ldr	r3, [pc, #384]	; (80057a0 <HAL_RCC_OscConfig+0x27c>)
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005626:	2b00      	cmp	r3, #0
 8005628:	d1f0      	bne.n	800560c <HAL_RCC_OscConfig+0xe8>
 800562a:	e000      	b.n	800562e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800562c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f003 0302 	and.w	r3, r3, #2
 8005636:	2b00      	cmp	r3, #0
 8005638:	d075      	beq.n	8005726 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800563a:	4b59      	ldr	r3, [pc, #356]	; (80057a0 <HAL_RCC_OscConfig+0x27c>)
 800563c:	689b      	ldr	r3, [r3, #8]
 800563e:	f003 030c 	and.w	r3, r3, #12
 8005642:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005644:	4b56      	ldr	r3, [pc, #344]	; (80057a0 <HAL_RCC_OscConfig+0x27c>)
 8005646:	68db      	ldr	r3, [r3, #12]
 8005648:	f003 0303 	and.w	r3, r3, #3
 800564c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800564e:	69bb      	ldr	r3, [r7, #24]
 8005650:	2b0c      	cmp	r3, #12
 8005652:	d102      	bne.n	800565a <HAL_RCC_OscConfig+0x136>
 8005654:	697b      	ldr	r3, [r7, #20]
 8005656:	2b02      	cmp	r3, #2
 8005658:	d002      	beq.n	8005660 <HAL_RCC_OscConfig+0x13c>
 800565a:	69bb      	ldr	r3, [r7, #24]
 800565c:	2b04      	cmp	r3, #4
 800565e:	d11f      	bne.n	80056a0 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005660:	4b4f      	ldr	r3, [pc, #316]	; (80057a0 <HAL_RCC_OscConfig+0x27c>)
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005668:	2b00      	cmp	r3, #0
 800566a:	d005      	beq.n	8005678 <HAL_RCC_OscConfig+0x154>
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	68db      	ldr	r3, [r3, #12]
 8005670:	2b00      	cmp	r3, #0
 8005672:	d101      	bne.n	8005678 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8005674:	2301      	movs	r3, #1
 8005676:	e265      	b.n	8005b44 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005678:	4b49      	ldr	r3, [pc, #292]	; (80057a0 <HAL_RCC_OscConfig+0x27c>)
 800567a:	685b      	ldr	r3, [r3, #4]
 800567c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	691b      	ldr	r3, [r3, #16]
 8005684:	061b      	lsls	r3, r3, #24
 8005686:	4946      	ldr	r1, [pc, #280]	; (80057a0 <HAL_RCC_OscConfig+0x27c>)
 8005688:	4313      	orrs	r3, r2
 800568a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800568c:	4b45      	ldr	r3, [pc, #276]	; (80057a4 <HAL_RCC_OscConfig+0x280>)
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	4618      	mov	r0, r3
 8005692:	f7fb fd39 	bl	8001108 <HAL_InitTick>
 8005696:	4603      	mov	r3, r0
 8005698:	2b00      	cmp	r3, #0
 800569a:	d043      	beq.n	8005724 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800569c:	2301      	movs	r3, #1
 800569e:	e251      	b.n	8005b44 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	68db      	ldr	r3, [r3, #12]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d023      	beq.n	80056f0 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80056a8:	4b3d      	ldr	r3, [pc, #244]	; (80057a0 <HAL_RCC_OscConfig+0x27c>)
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	4a3c      	ldr	r2, [pc, #240]	; (80057a0 <HAL_RCC_OscConfig+0x27c>)
 80056ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80056b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056b4:	f7fc fba8 	bl	8001e08 <HAL_GetTick>
 80056b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80056ba:	e008      	b.n	80056ce <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80056bc:	f7fc fba4 	bl	8001e08 <HAL_GetTick>
 80056c0:	4602      	mov	r2, r0
 80056c2:	693b      	ldr	r3, [r7, #16]
 80056c4:	1ad3      	subs	r3, r2, r3
 80056c6:	2b02      	cmp	r3, #2
 80056c8:	d901      	bls.n	80056ce <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80056ca:	2303      	movs	r3, #3
 80056cc:	e23a      	b.n	8005b44 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80056ce:	4b34      	ldr	r3, [pc, #208]	; (80057a0 <HAL_RCC_OscConfig+0x27c>)
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d0f0      	beq.n	80056bc <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80056da:	4b31      	ldr	r3, [pc, #196]	; (80057a0 <HAL_RCC_OscConfig+0x27c>)
 80056dc:	685b      	ldr	r3, [r3, #4]
 80056de:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	691b      	ldr	r3, [r3, #16]
 80056e6:	061b      	lsls	r3, r3, #24
 80056e8:	492d      	ldr	r1, [pc, #180]	; (80057a0 <HAL_RCC_OscConfig+0x27c>)
 80056ea:	4313      	orrs	r3, r2
 80056ec:	604b      	str	r3, [r1, #4]
 80056ee:	e01a      	b.n	8005726 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80056f0:	4b2b      	ldr	r3, [pc, #172]	; (80057a0 <HAL_RCC_OscConfig+0x27c>)
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	4a2a      	ldr	r2, [pc, #168]	; (80057a0 <HAL_RCC_OscConfig+0x27c>)
 80056f6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80056fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056fc:	f7fc fb84 	bl	8001e08 <HAL_GetTick>
 8005700:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005702:	e008      	b.n	8005716 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005704:	f7fc fb80 	bl	8001e08 <HAL_GetTick>
 8005708:	4602      	mov	r2, r0
 800570a:	693b      	ldr	r3, [r7, #16]
 800570c:	1ad3      	subs	r3, r2, r3
 800570e:	2b02      	cmp	r3, #2
 8005710:	d901      	bls.n	8005716 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8005712:	2303      	movs	r3, #3
 8005714:	e216      	b.n	8005b44 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005716:	4b22      	ldr	r3, [pc, #136]	; (80057a0 <HAL_RCC_OscConfig+0x27c>)
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800571e:	2b00      	cmp	r3, #0
 8005720:	d1f0      	bne.n	8005704 <HAL_RCC_OscConfig+0x1e0>
 8005722:	e000      	b.n	8005726 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005724:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f003 0308 	and.w	r3, r3, #8
 800572e:	2b00      	cmp	r3, #0
 8005730:	d041      	beq.n	80057b6 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	695b      	ldr	r3, [r3, #20]
 8005736:	2b00      	cmp	r3, #0
 8005738:	d01c      	beq.n	8005774 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800573a:	4b19      	ldr	r3, [pc, #100]	; (80057a0 <HAL_RCC_OscConfig+0x27c>)
 800573c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005740:	4a17      	ldr	r2, [pc, #92]	; (80057a0 <HAL_RCC_OscConfig+0x27c>)
 8005742:	f043 0301 	orr.w	r3, r3, #1
 8005746:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800574a:	f7fc fb5d 	bl	8001e08 <HAL_GetTick>
 800574e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005750:	e008      	b.n	8005764 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005752:	f7fc fb59 	bl	8001e08 <HAL_GetTick>
 8005756:	4602      	mov	r2, r0
 8005758:	693b      	ldr	r3, [r7, #16]
 800575a:	1ad3      	subs	r3, r2, r3
 800575c:	2b02      	cmp	r3, #2
 800575e:	d901      	bls.n	8005764 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005760:	2303      	movs	r3, #3
 8005762:	e1ef      	b.n	8005b44 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005764:	4b0e      	ldr	r3, [pc, #56]	; (80057a0 <HAL_RCC_OscConfig+0x27c>)
 8005766:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800576a:	f003 0302 	and.w	r3, r3, #2
 800576e:	2b00      	cmp	r3, #0
 8005770:	d0ef      	beq.n	8005752 <HAL_RCC_OscConfig+0x22e>
 8005772:	e020      	b.n	80057b6 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005774:	4b0a      	ldr	r3, [pc, #40]	; (80057a0 <HAL_RCC_OscConfig+0x27c>)
 8005776:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800577a:	4a09      	ldr	r2, [pc, #36]	; (80057a0 <HAL_RCC_OscConfig+0x27c>)
 800577c:	f023 0301 	bic.w	r3, r3, #1
 8005780:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005784:	f7fc fb40 	bl	8001e08 <HAL_GetTick>
 8005788:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800578a:	e00d      	b.n	80057a8 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800578c:	f7fc fb3c 	bl	8001e08 <HAL_GetTick>
 8005790:	4602      	mov	r2, r0
 8005792:	693b      	ldr	r3, [r7, #16]
 8005794:	1ad3      	subs	r3, r2, r3
 8005796:	2b02      	cmp	r3, #2
 8005798:	d906      	bls.n	80057a8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800579a:	2303      	movs	r3, #3
 800579c:	e1d2      	b.n	8005b44 <HAL_RCC_OscConfig+0x620>
 800579e:	bf00      	nop
 80057a0:	40021000 	.word	0x40021000
 80057a4:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80057a8:	4b8c      	ldr	r3, [pc, #560]	; (80059dc <HAL_RCC_OscConfig+0x4b8>)
 80057aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80057ae:	f003 0302 	and.w	r3, r3, #2
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d1ea      	bne.n	800578c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f003 0304 	and.w	r3, r3, #4
 80057be:	2b00      	cmp	r3, #0
 80057c0:	f000 80a6 	beq.w	8005910 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80057c4:	2300      	movs	r3, #0
 80057c6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80057c8:	4b84      	ldr	r3, [pc, #528]	; (80059dc <HAL_RCC_OscConfig+0x4b8>)
 80057ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d101      	bne.n	80057d8 <HAL_RCC_OscConfig+0x2b4>
 80057d4:	2301      	movs	r3, #1
 80057d6:	e000      	b.n	80057da <HAL_RCC_OscConfig+0x2b6>
 80057d8:	2300      	movs	r3, #0
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d00d      	beq.n	80057fa <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80057de:	4b7f      	ldr	r3, [pc, #508]	; (80059dc <HAL_RCC_OscConfig+0x4b8>)
 80057e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057e2:	4a7e      	ldr	r2, [pc, #504]	; (80059dc <HAL_RCC_OscConfig+0x4b8>)
 80057e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80057e8:	6593      	str	r3, [r2, #88]	; 0x58
 80057ea:	4b7c      	ldr	r3, [pc, #496]	; (80059dc <HAL_RCC_OscConfig+0x4b8>)
 80057ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80057f2:	60fb      	str	r3, [r7, #12]
 80057f4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80057f6:	2301      	movs	r3, #1
 80057f8:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80057fa:	4b79      	ldr	r3, [pc, #484]	; (80059e0 <HAL_RCC_OscConfig+0x4bc>)
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005802:	2b00      	cmp	r3, #0
 8005804:	d118      	bne.n	8005838 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005806:	4b76      	ldr	r3, [pc, #472]	; (80059e0 <HAL_RCC_OscConfig+0x4bc>)
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	4a75      	ldr	r2, [pc, #468]	; (80059e0 <HAL_RCC_OscConfig+0x4bc>)
 800580c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005810:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005812:	f7fc faf9 	bl	8001e08 <HAL_GetTick>
 8005816:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005818:	e008      	b.n	800582c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800581a:	f7fc faf5 	bl	8001e08 <HAL_GetTick>
 800581e:	4602      	mov	r2, r0
 8005820:	693b      	ldr	r3, [r7, #16]
 8005822:	1ad3      	subs	r3, r2, r3
 8005824:	2b02      	cmp	r3, #2
 8005826:	d901      	bls.n	800582c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8005828:	2303      	movs	r3, #3
 800582a:	e18b      	b.n	8005b44 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800582c:	4b6c      	ldr	r3, [pc, #432]	; (80059e0 <HAL_RCC_OscConfig+0x4bc>)
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005834:	2b00      	cmp	r3, #0
 8005836:	d0f0      	beq.n	800581a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	689b      	ldr	r3, [r3, #8]
 800583c:	2b01      	cmp	r3, #1
 800583e:	d108      	bne.n	8005852 <HAL_RCC_OscConfig+0x32e>
 8005840:	4b66      	ldr	r3, [pc, #408]	; (80059dc <HAL_RCC_OscConfig+0x4b8>)
 8005842:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005846:	4a65      	ldr	r2, [pc, #404]	; (80059dc <HAL_RCC_OscConfig+0x4b8>)
 8005848:	f043 0301 	orr.w	r3, r3, #1
 800584c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005850:	e024      	b.n	800589c <HAL_RCC_OscConfig+0x378>
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	689b      	ldr	r3, [r3, #8]
 8005856:	2b05      	cmp	r3, #5
 8005858:	d110      	bne.n	800587c <HAL_RCC_OscConfig+0x358>
 800585a:	4b60      	ldr	r3, [pc, #384]	; (80059dc <HAL_RCC_OscConfig+0x4b8>)
 800585c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005860:	4a5e      	ldr	r2, [pc, #376]	; (80059dc <HAL_RCC_OscConfig+0x4b8>)
 8005862:	f043 0304 	orr.w	r3, r3, #4
 8005866:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800586a:	4b5c      	ldr	r3, [pc, #368]	; (80059dc <HAL_RCC_OscConfig+0x4b8>)
 800586c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005870:	4a5a      	ldr	r2, [pc, #360]	; (80059dc <HAL_RCC_OscConfig+0x4b8>)
 8005872:	f043 0301 	orr.w	r3, r3, #1
 8005876:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800587a:	e00f      	b.n	800589c <HAL_RCC_OscConfig+0x378>
 800587c:	4b57      	ldr	r3, [pc, #348]	; (80059dc <HAL_RCC_OscConfig+0x4b8>)
 800587e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005882:	4a56      	ldr	r2, [pc, #344]	; (80059dc <HAL_RCC_OscConfig+0x4b8>)
 8005884:	f023 0301 	bic.w	r3, r3, #1
 8005888:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800588c:	4b53      	ldr	r3, [pc, #332]	; (80059dc <HAL_RCC_OscConfig+0x4b8>)
 800588e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005892:	4a52      	ldr	r2, [pc, #328]	; (80059dc <HAL_RCC_OscConfig+0x4b8>)
 8005894:	f023 0304 	bic.w	r3, r3, #4
 8005898:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	689b      	ldr	r3, [r3, #8]
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d016      	beq.n	80058d2 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058a4:	f7fc fab0 	bl	8001e08 <HAL_GetTick>
 80058a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80058aa:	e00a      	b.n	80058c2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80058ac:	f7fc faac 	bl	8001e08 <HAL_GetTick>
 80058b0:	4602      	mov	r2, r0
 80058b2:	693b      	ldr	r3, [r7, #16]
 80058b4:	1ad3      	subs	r3, r2, r3
 80058b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80058ba:	4293      	cmp	r3, r2
 80058bc:	d901      	bls.n	80058c2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80058be:	2303      	movs	r3, #3
 80058c0:	e140      	b.n	8005b44 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80058c2:	4b46      	ldr	r3, [pc, #280]	; (80059dc <HAL_RCC_OscConfig+0x4b8>)
 80058c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058c8:	f003 0302 	and.w	r3, r3, #2
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d0ed      	beq.n	80058ac <HAL_RCC_OscConfig+0x388>
 80058d0:	e015      	b.n	80058fe <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058d2:	f7fc fa99 	bl	8001e08 <HAL_GetTick>
 80058d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80058d8:	e00a      	b.n	80058f0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80058da:	f7fc fa95 	bl	8001e08 <HAL_GetTick>
 80058de:	4602      	mov	r2, r0
 80058e0:	693b      	ldr	r3, [r7, #16]
 80058e2:	1ad3      	subs	r3, r2, r3
 80058e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80058e8:	4293      	cmp	r3, r2
 80058ea:	d901      	bls.n	80058f0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80058ec:	2303      	movs	r3, #3
 80058ee:	e129      	b.n	8005b44 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80058f0:	4b3a      	ldr	r3, [pc, #232]	; (80059dc <HAL_RCC_OscConfig+0x4b8>)
 80058f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058f6:	f003 0302 	and.w	r3, r3, #2
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d1ed      	bne.n	80058da <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80058fe:	7ffb      	ldrb	r3, [r7, #31]
 8005900:	2b01      	cmp	r3, #1
 8005902:	d105      	bne.n	8005910 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005904:	4b35      	ldr	r3, [pc, #212]	; (80059dc <HAL_RCC_OscConfig+0x4b8>)
 8005906:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005908:	4a34      	ldr	r2, [pc, #208]	; (80059dc <HAL_RCC_OscConfig+0x4b8>)
 800590a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800590e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f003 0320 	and.w	r3, r3, #32
 8005918:	2b00      	cmp	r3, #0
 800591a:	d03c      	beq.n	8005996 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	699b      	ldr	r3, [r3, #24]
 8005920:	2b00      	cmp	r3, #0
 8005922:	d01c      	beq.n	800595e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005924:	4b2d      	ldr	r3, [pc, #180]	; (80059dc <HAL_RCC_OscConfig+0x4b8>)
 8005926:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800592a:	4a2c      	ldr	r2, [pc, #176]	; (80059dc <HAL_RCC_OscConfig+0x4b8>)
 800592c:	f043 0301 	orr.w	r3, r3, #1
 8005930:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005934:	f7fc fa68 	bl	8001e08 <HAL_GetTick>
 8005938:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800593a:	e008      	b.n	800594e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800593c:	f7fc fa64 	bl	8001e08 <HAL_GetTick>
 8005940:	4602      	mov	r2, r0
 8005942:	693b      	ldr	r3, [r7, #16]
 8005944:	1ad3      	subs	r3, r2, r3
 8005946:	2b02      	cmp	r3, #2
 8005948:	d901      	bls.n	800594e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800594a:	2303      	movs	r3, #3
 800594c:	e0fa      	b.n	8005b44 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800594e:	4b23      	ldr	r3, [pc, #140]	; (80059dc <HAL_RCC_OscConfig+0x4b8>)
 8005950:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005954:	f003 0302 	and.w	r3, r3, #2
 8005958:	2b00      	cmp	r3, #0
 800595a:	d0ef      	beq.n	800593c <HAL_RCC_OscConfig+0x418>
 800595c:	e01b      	b.n	8005996 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800595e:	4b1f      	ldr	r3, [pc, #124]	; (80059dc <HAL_RCC_OscConfig+0x4b8>)
 8005960:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005964:	4a1d      	ldr	r2, [pc, #116]	; (80059dc <HAL_RCC_OscConfig+0x4b8>)
 8005966:	f023 0301 	bic.w	r3, r3, #1
 800596a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800596e:	f7fc fa4b 	bl	8001e08 <HAL_GetTick>
 8005972:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005974:	e008      	b.n	8005988 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005976:	f7fc fa47 	bl	8001e08 <HAL_GetTick>
 800597a:	4602      	mov	r2, r0
 800597c:	693b      	ldr	r3, [r7, #16]
 800597e:	1ad3      	subs	r3, r2, r3
 8005980:	2b02      	cmp	r3, #2
 8005982:	d901      	bls.n	8005988 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8005984:	2303      	movs	r3, #3
 8005986:	e0dd      	b.n	8005b44 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005988:	4b14      	ldr	r3, [pc, #80]	; (80059dc <HAL_RCC_OscConfig+0x4b8>)
 800598a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800598e:	f003 0302 	and.w	r3, r3, #2
 8005992:	2b00      	cmp	r3, #0
 8005994:	d1ef      	bne.n	8005976 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	69db      	ldr	r3, [r3, #28]
 800599a:	2b00      	cmp	r3, #0
 800599c:	f000 80d1 	beq.w	8005b42 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80059a0:	4b0e      	ldr	r3, [pc, #56]	; (80059dc <HAL_RCC_OscConfig+0x4b8>)
 80059a2:	689b      	ldr	r3, [r3, #8]
 80059a4:	f003 030c 	and.w	r3, r3, #12
 80059a8:	2b0c      	cmp	r3, #12
 80059aa:	f000 808b 	beq.w	8005ac4 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	69db      	ldr	r3, [r3, #28]
 80059b2:	2b02      	cmp	r3, #2
 80059b4:	d15e      	bne.n	8005a74 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80059b6:	4b09      	ldr	r3, [pc, #36]	; (80059dc <HAL_RCC_OscConfig+0x4b8>)
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	4a08      	ldr	r2, [pc, #32]	; (80059dc <HAL_RCC_OscConfig+0x4b8>)
 80059bc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80059c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059c2:	f7fc fa21 	bl	8001e08 <HAL_GetTick>
 80059c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80059c8:	e00c      	b.n	80059e4 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80059ca:	f7fc fa1d 	bl	8001e08 <HAL_GetTick>
 80059ce:	4602      	mov	r2, r0
 80059d0:	693b      	ldr	r3, [r7, #16]
 80059d2:	1ad3      	subs	r3, r2, r3
 80059d4:	2b02      	cmp	r3, #2
 80059d6:	d905      	bls.n	80059e4 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80059d8:	2303      	movs	r3, #3
 80059da:	e0b3      	b.n	8005b44 <HAL_RCC_OscConfig+0x620>
 80059dc:	40021000 	.word	0x40021000
 80059e0:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80059e4:	4b59      	ldr	r3, [pc, #356]	; (8005b4c <HAL_RCC_OscConfig+0x628>)
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d1ec      	bne.n	80059ca <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80059f0:	4b56      	ldr	r3, [pc, #344]	; (8005b4c <HAL_RCC_OscConfig+0x628>)
 80059f2:	68da      	ldr	r2, [r3, #12]
 80059f4:	4b56      	ldr	r3, [pc, #344]	; (8005b50 <HAL_RCC_OscConfig+0x62c>)
 80059f6:	4013      	ands	r3, r2
 80059f8:	687a      	ldr	r2, [r7, #4]
 80059fa:	6a11      	ldr	r1, [r2, #32]
 80059fc:	687a      	ldr	r2, [r7, #4]
 80059fe:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005a00:	3a01      	subs	r2, #1
 8005a02:	0112      	lsls	r2, r2, #4
 8005a04:	4311      	orrs	r1, r2
 8005a06:	687a      	ldr	r2, [r7, #4]
 8005a08:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8005a0a:	0212      	lsls	r2, r2, #8
 8005a0c:	4311      	orrs	r1, r2
 8005a0e:	687a      	ldr	r2, [r7, #4]
 8005a10:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005a12:	0852      	lsrs	r2, r2, #1
 8005a14:	3a01      	subs	r2, #1
 8005a16:	0552      	lsls	r2, r2, #21
 8005a18:	4311      	orrs	r1, r2
 8005a1a:	687a      	ldr	r2, [r7, #4]
 8005a1c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005a1e:	0852      	lsrs	r2, r2, #1
 8005a20:	3a01      	subs	r2, #1
 8005a22:	0652      	lsls	r2, r2, #25
 8005a24:	4311      	orrs	r1, r2
 8005a26:	687a      	ldr	r2, [r7, #4]
 8005a28:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005a2a:	06d2      	lsls	r2, r2, #27
 8005a2c:	430a      	orrs	r2, r1
 8005a2e:	4947      	ldr	r1, [pc, #284]	; (8005b4c <HAL_RCC_OscConfig+0x628>)
 8005a30:	4313      	orrs	r3, r2
 8005a32:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005a34:	4b45      	ldr	r3, [pc, #276]	; (8005b4c <HAL_RCC_OscConfig+0x628>)
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	4a44      	ldr	r2, [pc, #272]	; (8005b4c <HAL_RCC_OscConfig+0x628>)
 8005a3a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005a3e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005a40:	4b42      	ldr	r3, [pc, #264]	; (8005b4c <HAL_RCC_OscConfig+0x628>)
 8005a42:	68db      	ldr	r3, [r3, #12]
 8005a44:	4a41      	ldr	r2, [pc, #260]	; (8005b4c <HAL_RCC_OscConfig+0x628>)
 8005a46:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005a4a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a4c:	f7fc f9dc 	bl	8001e08 <HAL_GetTick>
 8005a50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005a52:	e008      	b.n	8005a66 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a54:	f7fc f9d8 	bl	8001e08 <HAL_GetTick>
 8005a58:	4602      	mov	r2, r0
 8005a5a:	693b      	ldr	r3, [r7, #16]
 8005a5c:	1ad3      	subs	r3, r2, r3
 8005a5e:	2b02      	cmp	r3, #2
 8005a60:	d901      	bls.n	8005a66 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8005a62:	2303      	movs	r3, #3
 8005a64:	e06e      	b.n	8005b44 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005a66:	4b39      	ldr	r3, [pc, #228]	; (8005b4c <HAL_RCC_OscConfig+0x628>)
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d0f0      	beq.n	8005a54 <HAL_RCC_OscConfig+0x530>
 8005a72:	e066      	b.n	8005b42 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a74:	4b35      	ldr	r3, [pc, #212]	; (8005b4c <HAL_RCC_OscConfig+0x628>)
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	4a34      	ldr	r2, [pc, #208]	; (8005b4c <HAL_RCC_OscConfig+0x628>)
 8005a7a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005a7e:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8005a80:	4b32      	ldr	r3, [pc, #200]	; (8005b4c <HAL_RCC_OscConfig+0x628>)
 8005a82:	68db      	ldr	r3, [r3, #12]
 8005a84:	4a31      	ldr	r2, [pc, #196]	; (8005b4c <HAL_RCC_OscConfig+0x628>)
 8005a86:	f023 0303 	bic.w	r3, r3, #3
 8005a8a:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8005a8c:	4b2f      	ldr	r3, [pc, #188]	; (8005b4c <HAL_RCC_OscConfig+0x628>)
 8005a8e:	68db      	ldr	r3, [r3, #12]
 8005a90:	4a2e      	ldr	r2, [pc, #184]	; (8005b4c <HAL_RCC_OscConfig+0x628>)
 8005a92:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8005a96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005a9a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a9c:	f7fc f9b4 	bl	8001e08 <HAL_GetTick>
 8005aa0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005aa2:	e008      	b.n	8005ab6 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005aa4:	f7fc f9b0 	bl	8001e08 <HAL_GetTick>
 8005aa8:	4602      	mov	r2, r0
 8005aaa:	693b      	ldr	r3, [r7, #16]
 8005aac:	1ad3      	subs	r3, r2, r3
 8005aae:	2b02      	cmp	r3, #2
 8005ab0:	d901      	bls.n	8005ab6 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8005ab2:	2303      	movs	r3, #3
 8005ab4:	e046      	b.n	8005b44 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005ab6:	4b25      	ldr	r3, [pc, #148]	; (8005b4c <HAL_RCC_OscConfig+0x628>)
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d1f0      	bne.n	8005aa4 <HAL_RCC_OscConfig+0x580>
 8005ac2:	e03e      	b.n	8005b42 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	69db      	ldr	r3, [r3, #28]
 8005ac8:	2b01      	cmp	r3, #1
 8005aca:	d101      	bne.n	8005ad0 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8005acc:	2301      	movs	r3, #1
 8005ace:	e039      	b.n	8005b44 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8005ad0:	4b1e      	ldr	r3, [pc, #120]	; (8005b4c <HAL_RCC_OscConfig+0x628>)
 8005ad2:	68db      	ldr	r3, [r3, #12]
 8005ad4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005ad6:	697b      	ldr	r3, [r7, #20]
 8005ad8:	f003 0203 	and.w	r2, r3, #3
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	6a1b      	ldr	r3, [r3, #32]
 8005ae0:	429a      	cmp	r2, r3
 8005ae2:	d12c      	bne.n	8005b3e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005ae4:	697b      	ldr	r3, [r7, #20]
 8005ae6:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aee:	3b01      	subs	r3, #1
 8005af0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005af2:	429a      	cmp	r2, r3
 8005af4:	d123      	bne.n	8005b3e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005af6:	697b      	ldr	r3, [r7, #20]
 8005af8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b00:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005b02:	429a      	cmp	r2, r3
 8005b04:	d11b      	bne.n	8005b3e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005b06:	697b      	ldr	r3, [r7, #20]
 8005b08:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b10:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005b12:	429a      	cmp	r2, r3
 8005b14:	d113      	bne.n	8005b3e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005b16:	697b      	ldr	r3, [r7, #20]
 8005b18:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b20:	085b      	lsrs	r3, r3, #1
 8005b22:	3b01      	subs	r3, #1
 8005b24:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005b26:	429a      	cmp	r2, r3
 8005b28:	d109      	bne.n	8005b3e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005b2a:	697b      	ldr	r3, [r7, #20]
 8005b2c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b34:	085b      	lsrs	r3, r3, #1
 8005b36:	3b01      	subs	r3, #1
 8005b38:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005b3a:	429a      	cmp	r2, r3
 8005b3c:	d001      	beq.n	8005b42 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8005b3e:	2301      	movs	r3, #1
 8005b40:	e000      	b.n	8005b44 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8005b42:	2300      	movs	r3, #0
}
 8005b44:	4618      	mov	r0, r3
 8005b46:	3720      	adds	r7, #32
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	bd80      	pop	{r7, pc}
 8005b4c:	40021000 	.word	0x40021000
 8005b50:	019f800c 	.word	0x019f800c

08005b54 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005b54:	b580      	push	{r7, lr}
 8005b56:	b086      	sub	sp, #24
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	6078      	str	r0, [r7, #4]
 8005b5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8005b5e:	2300      	movs	r3, #0
 8005b60:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d101      	bne.n	8005b6c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005b68:	2301      	movs	r3, #1
 8005b6a:	e11e      	b.n	8005daa <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005b6c:	4b91      	ldr	r3, [pc, #580]	; (8005db4 <HAL_RCC_ClockConfig+0x260>)
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f003 030f 	and.w	r3, r3, #15
 8005b74:	683a      	ldr	r2, [r7, #0]
 8005b76:	429a      	cmp	r2, r3
 8005b78:	d910      	bls.n	8005b9c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b7a:	4b8e      	ldr	r3, [pc, #568]	; (8005db4 <HAL_RCC_ClockConfig+0x260>)
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	f023 020f 	bic.w	r2, r3, #15
 8005b82:	498c      	ldr	r1, [pc, #560]	; (8005db4 <HAL_RCC_ClockConfig+0x260>)
 8005b84:	683b      	ldr	r3, [r7, #0]
 8005b86:	4313      	orrs	r3, r2
 8005b88:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b8a:	4b8a      	ldr	r3, [pc, #552]	; (8005db4 <HAL_RCC_ClockConfig+0x260>)
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	f003 030f 	and.w	r3, r3, #15
 8005b92:	683a      	ldr	r2, [r7, #0]
 8005b94:	429a      	cmp	r2, r3
 8005b96:	d001      	beq.n	8005b9c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005b98:	2301      	movs	r3, #1
 8005b9a:	e106      	b.n	8005daa <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	f003 0301 	and.w	r3, r3, #1
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d073      	beq.n	8005c90 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	685b      	ldr	r3, [r3, #4]
 8005bac:	2b03      	cmp	r3, #3
 8005bae:	d129      	bne.n	8005c04 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005bb0:	4b81      	ldr	r3, [pc, #516]	; (8005db8 <HAL_RCC_ClockConfig+0x264>)
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d101      	bne.n	8005bc0 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8005bbc:	2301      	movs	r3, #1
 8005bbe:	e0f4      	b.n	8005daa <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8005bc0:	f000 f9ce 	bl	8005f60 <RCC_GetSysClockFreqFromPLLSource>
 8005bc4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8005bc6:	693b      	ldr	r3, [r7, #16]
 8005bc8:	4a7c      	ldr	r2, [pc, #496]	; (8005dbc <HAL_RCC_ClockConfig+0x268>)
 8005bca:	4293      	cmp	r3, r2
 8005bcc:	d93f      	bls.n	8005c4e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005bce:	4b7a      	ldr	r3, [pc, #488]	; (8005db8 <HAL_RCC_ClockConfig+0x264>)
 8005bd0:	689b      	ldr	r3, [r3, #8]
 8005bd2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d009      	beq.n	8005bee <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d033      	beq.n	8005c4e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d12f      	bne.n	8005c4e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005bee:	4b72      	ldr	r3, [pc, #456]	; (8005db8 <HAL_RCC_ClockConfig+0x264>)
 8005bf0:	689b      	ldr	r3, [r3, #8]
 8005bf2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005bf6:	4a70      	ldr	r2, [pc, #448]	; (8005db8 <HAL_RCC_ClockConfig+0x264>)
 8005bf8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005bfc:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005bfe:	2380      	movs	r3, #128	; 0x80
 8005c00:	617b      	str	r3, [r7, #20]
 8005c02:	e024      	b.n	8005c4e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	685b      	ldr	r3, [r3, #4]
 8005c08:	2b02      	cmp	r3, #2
 8005c0a:	d107      	bne.n	8005c1c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005c0c:	4b6a      	ldr	r3, [pc, #424]	; (8005db8 <HAL_RCC_ClockConfig+0x264>)
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d109      	bne.n	8005c2c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005c18:	2301      	movs	r3, #1
 8005c1a:	e0c6      	b.n	8005daa <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005c1c:	4b66      	ldr	r3, [pc, #408]	; (8005db8 <HAL_RCC_ClockConfig+0x264>)
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d101      	bne.n	8005c2c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005c28:	2301      	movs	r3, #1
 8005c2a:	e0be      	b.n	8005daa <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8005c2c:	f000 f8ce 	bl	8005dcc <HAL_RCC_GetSysClockFreq>
 8005c30:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8005c32:	693b      	ldr	r3, [r7, #16]
 8005c34:	4a61      	ldr	r2, [pc, #388]	; (8005dbc <HAL_RCC_ClockConfig+0x268>)
 8005c36:	4293      	cmp	r3, r2
 8005c38:	d909      	bls.n	8005c4e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005c3a:	4b5f      	ldr	r3, [pc, #380]	; (8005db8 <HAL_RCC_ClockConfig+0x264>)
 8005c3c:	689b      	ldr	r3, [r3, #8]
 8005c3e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005c42:	4a5d      	ldr	r2, [pc, #372]	; (8005db8 <HAL_RCC_ClockConfig+0x264>)
 8005c44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c48:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8005c4a:	2380      	movs	r3, #128	; 0x80
 8005c4c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005c4e:	4b5a      	ldr	r3, [pc, #360]	; (8005db8 <HAL_RCC_ClockConfig+0x264>)
 8005c50:	689b      	ldr	r3, [r3, #8]
 8005c52:	f023 0203 	bic.w	r2, r3, #3
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	685b      	ldr	r3, [r3, #4]
 8005c5a:	4957      	ldr	r1, [pc, #348]	; (8005db8 <HAL_RCC_ClockConfig+0x264>)
 8005c5c:	4313      	orrs	r3, r2
 8005c5e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005c60:	f7fc f8d2 	bl	8001e08 <HAL_GetTick>
 8005c64:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c66:	e00a      	b.n	8005c7e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005c68:	f7fc f8ce 	bl	8001e08 <HAL_GetTick>
 8005c6c:	4602      	mov	r2, r0
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	1ad3      	subs	r3, r2, r3
 8005c72:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c76:	4293      	cmp	r3, r2
 8005c78:	d901      	bls.n	8005c7e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8005c7a:	2303      	movs	r3, #3
 8005c7c:	e095      	b.n	8005daa <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c7e:	4b4e      	ldr	r3, [pc, #312]	; (8005db8 <HAL_RCC_ClockConfig+0x264>)
 8005c80:	689b      	ldr	r3, [r3, #8]
 8005c82:	f003 020c 	and.w	r2, r3, #12
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	685b      	ldr	r3, [r3, #4]
 8005c8a:	009b      	lsls	r3, r3, #2
 8005c8c:	429a      	cmp	r2, r3
 8005c8e:	d1eb      	bne.n	8005c68 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	f003 0302 	and.w	r3, r3, #2
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d023      	beq.n	8005ce4 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	f003 0304 	and.w	r3, r3, #4
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d005      	beq.n	8005cb4 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005ca8:	4b43      	ldr	r3, [pc, #268]	; (8005db8 <HAL_RCC_ClockConfig+0x264>)
 8005caa:	689b      	ldr	r3, [r3, #8]
 8005cac:	4a42      	ldr	r2, [pc, #264]	; (8005db8 <HAL_RCC_ClockConfig+0x264>)
 8005cae:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005cb2:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	f003 0308 	and.w	r3, r3, #8
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d007      	beq.n	8005cd0 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8005cc0:	4b3d      	ldr	r3, [pc, #244]	; (8005db8 <HAL_RCC_ClockConfig+0x264>)
 8005cc2:	689b      	ldr	r3, [r3, #8]
 8005cc4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005cc8:	4a3b      	ldr	r2, [pc, #236]	; (8005db8 <HAL_RCC_ClockConfig+0x264>)
 8005cca:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005cce:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005cd0:	4b39      	ldr	r3, [pc, #228]	; (8005db8 <HAL_RCC_ClockConfig+0x264>)
 8005cd2:	689b      	ldr	r3, [r3, #8]
 8005cd4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	689b      	ldr	r3, [r3, #8]
 8005cdc:	4936      	ldr	r1, [pc, #216]	; (8005db8 <HAL_RCC_ClockConfig+0x264>)
 8005cde:	4313      	orrs	r3, r2
 8005ce0:	608b      	str	r3, [r1, #8]
 8005ce2:	e008      	b.n	8005cf6 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8005ce4:	697b      	ldr	r3, [r7, #20]
 8005ce6:	2b80      	cmp	r3, #128	; 0x80
 8005ce8:	d105      	bne.n	8005cf6 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8005cea:	4b33      	ldr	r3, [pc, #204]	; (8005db8 <HAL_RCC_ClockConfig+0x264>)
 8005cec:	689b      	ldr	r3, [r3, #8]
 8005cee:	4a32      	ldr	r2, [pc, #200]	; (8005db8 <HAL_RCC_ClockConfig+0x264>)
 8005cf0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005cf4:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005cf6:	4b2f      	ldr	r3, [pc, #188]	; (8005db4 <HAL_RCC_ClockConfig+0x260>)
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	f003 030f 	and.w	r3, r3, #15
 8005cfe:	683a      	ldr	r2, [r7, #0]
 8005d00:	429a      	cmp	r2, r3
 8005d02:	d21d      	bcs.n	8005d40 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d04:	4b2b      	ldr	r3, [pc, #172]	; (8005db4 <HAL_RCC_ClockConfig+0x260>)
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	f023 020f 	bic.w	r2, r3, #15
 8005d0c:	4929      	ldr	r1, [pc, #164]	; (8005db4 <HAL_RCC_ClockConfig+0x260>)
 8005d0e:	683b      	ldr	r3, [r7, #0]
 8005d10:	4313      	orrs	r3, r2
 8005d12:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005d14:	f7fc f878 	bl	8001e08 <HAL_GetTick>
 8005d18:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d1a:	e00a      	b.n	8005d32 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005d1c:	f7fc f874 	bl	8001e08 <HAL_GetTick>
 8005d20:	4602      	mov	r2, r0
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	1ad3      	subs	r3, r2, r3
 8005d26:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d2a:	4293      	cmp	r3, r2
 8005d2c:	d901      	bls.n	8005d32 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8005d2e:	2303      	movs	r3, #3
 8005d30:	e03b      	b.n	8005daa <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d32:	4b20      	ldr	r3, [pc, #128]	; (8005db4 <HAL_RCC_ClockConfig+0x260>)
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	f003 030f 	and.w	r3, r3, #15
 8005d3a:	683a      	ldr	r2, [r7, #0]
 8005d3c:	429a      	cmp	r2, r3
 8005d3e:	d1ed      	bne.n	8005d1c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	f003 0304 	and.w	r3, r3, #4
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d008      	beq.n	8005d5e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005d4c:	4b1a      	ldr	r3, [pc, #104]	; (8005db8 <HAL_RCC_ClockConfig+0x264>)
 8005d4e:	689b      	ldr	r3, [r3, #8]
 8005d50:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	68db      	ldr	r3, [r3, #12]
 8005d58:	4917      	ldr	r1, [pc, #92]	; (8005db8 <HAL_RCC_ClockConfig+0x264>)
 8005d5a:	4313      	orrs	r3, r2
 8005d5c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	f003 0308 	and.w	r3, r3, #8
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d009      	beq.n	8005d7e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005d6a:	4b13      	ldr	r3, [pc, #76]	; (8005db8 <HAL_RCC_ClockConfig+0x264>)
 8005d6c:	689b      	ldr	r3, [r3, #8]
 8005d6e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	691b      	ldr	r3, [r3, #16]
 8005d76:	00db      	lsls	r3, r3, #3
 8005d78:	490f      	ldr	r1, [pc, #60]	; (8005db8 <HAL_RCC_ClockConfig+0x264>)
 8005d7a:	4313      	orrs	r3, r2
 8005d7c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005d7e:	f000 f825 	bl	8005dcc <HAL_RCC_GetSysClockFreq>
 8005d82:	4602      	mov	r2, r0
 8005d84:	4b0c      	ldr	r3, [pc, #48]	; (8005db8 <HAL_RCC_ClockConfig+0x264>)
 8005d86:	689b      	ldr	r3, [r3, #8]
 8005d88:	091b      	lsrs	r3, r3, #4
 8005d8a:	f003 030f 	and.w	r3, r3, #15
 8005d8e:	490c      	ldr	r1, [pc, #48]	; (8005dc0 <HAL_RCC_ClockConfig+0x26c>)
 8005d90:	5ccb      	ldrb	r3, [r1, r3]
 8005d92:	f003 031f 	and.w	r3, r3, #31
 8005d96:	fa22 f303 	lsr.w	r3, r2, r3
 8005d9a:	4a0a      	ldr	r2, [pc, #40]	; (8005dc4 <HAL_RCC_ClockConfig+0x270>)
 8005d9c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005d9e:	4b0a      	ldr	r3, [pc, #40]	; (8005dc8 <HAL_RCC_ClockConfig+0x274>)
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	4618      	mov	r0, r3
 8005da4:	f7fb f9b0 	bl	8001108 <HAL_InitTick>
 8005da8:	4603      	mov	r3, r0
}
 8005daa:	4618      	mov	r0, r3
 8005dac:	3718      	adds	r7, #24
 8005dae:	46bd      	mov	sp, r7
 8005db0:	bd80      	pop	{r7, pc}
 8005db2:	bf00      	nop
 8005db4:	40022000 	.word	0x40022000
 8005db8:	40021000 	.word	0x40021000
 8005dbc:	04c4b400 	.word	0x04c4b400
 8005dc0:	0800d5ec 	.word	0x0800d5ec
 8005dc4:	20000000 	.word	0x20000000
 8005dc8:	20000004 	.word	0x20000004

08005dcc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005dcc:	b480      	push	{r7}
 8005dce:	b087      	sub	sp, #28
 8005dd0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8005dd2:	4b2c      	ldr	r3, [pc, #176]	; (8005e84 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005dd4:	689b      	ldr	r3, [r3, #8]
 8005dd6:	f003 030c 	and.w	r3, r3, #12
 8005dda:	2b04      	cmp	r3, #4
 8005ddc:	d102      	bne.n	8005de4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005dde:	4b2a      	ldr	r3, [pc, #168]	; (8005e88 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005de0:	613b      	str	r3, [r7, #16]
 8005de2:	e047      	b.n	8005e74 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005de4:	4b27      	ldr	r3, [pc, #156]	; (8005e84 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005de6:	689b      	ldr	r3, [r3, #8]
 8005de8:	f003 030c 	and.w	r3, r3, #12
 8005dec:	2b08      	cmp	r3, #8
 8005dee:	d102      	bne.n	8005df6 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005df0:	4b25      	ldr	r3, [pc, #148]	; (8005e88 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005df2:	613b      	str	r3, [r7, #16]
 8005df4:	e03e      	b.n	8005e74 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8005df6:	4b23      	ldr	r3, [pc, #140]	; (8005e84 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005df8:	689b      	ldr	r3, [r3, #8]
 8005dfa:	f003 030c 	and.w	r3, r3, #12
 8005dfe:	2b0c      	cmp	r3, #12
 8005e00:	d136      	bne.n	8005e70 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005e02:	4b20      	ldr	r3, [pc, #128]	; (8005e84 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005e04:	68db      	ldr	r3, [r3, #12]
 8005e06:	f003 0303 	and.w	r3, r3, #3
 8005e0a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005e0c:	4b1d      	ldr	r3, [pc, #116]	; (8005e84 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005e0e:	68db      	ldr	r3, [r3, #12]
 8005e10:	091b      	lsrs	r3, r3, #4
 8005e12:	f003 030f 	and.w	r3, r3, #15
 8005e16:	3301      	adds	r3, #1
 8005e18:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	2b03      	cmp	r3, #3
 8005e1e:	d10c      	bne.n	8005e3a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005e20:	4a19      	ldr	r2, [pc, #100]	; (8005e88 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005e22:	68bb      	ldr	r3, [r7, #8]
 8005e24:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e28:	4a16      	ldr	r2, [pc, #88]	; (8005e84 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005e2a:	68d2      	ldr	r2, [r2, #12]
 8005e2c:	0a12      	lsrs	r2, r2, #8
 8005e2e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005e32:	fb02 f303 	mul.w	r3, r2, r3
 8005e36:	617b      	str	r3, [r7, #20]
      break;
 8005e38:	e00c      	b.n	8005e54 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005e3a:	4a13      	ldr	r2, [pc, #76]	; (8005e88 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005e3c:	68bb      	ldr	r3, [r7, #8]
 8005e3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e42:	4a10      	ldr	r2, [pc, #64]	; (8005e84 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005e44:	68d2      	ldr	r2, [r2, #12]
 8005e46:	0a12      	lsrs	r2, r2, #8
 8005e48:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005e4c:	fb02 f303 	mul.w	r3, r2, r3
 8005e50:	617b      	str	r3, [r7, #20]
      break;
 8005e52:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005e54:	4b0b      	ldr	r3, [pc, #44]	; (8005e84 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005e56:	68db      	ldr	r3, [r3, #12]
 8005e58:	0e5b      	lsrs	r3, r3, #25
 8005e5a:	f003 0303 	and.w	r3, r3, #3
 8005e5e:	3301      	adds	r3, #1
 8005e60:	005b      	lsls	r3, r3, #1
 8005e62:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8005e64:	697a      	ldr	r2, [r7, #20]
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e6c:	613b      	str	r3, [r7, #16]
 8005e6e:	e001      	b.n	8005e74 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8005e70:	2300      	movs	r3, #0
 8005e72:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005e74:	693b      	ldr	r3, [r7, #16]
}
 8005e76:	4618      	mov	r0, r3
 8005e78:	371c      	adds	r7, #28
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e80:	4770      	bx	lr
 8005e82:	bf00      	nop
 8005e84:	40021000 	.word	0x40021000
 8005e88:	00f42400 	.word	0x00f42400

08005e8c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005e8c:	b480      	push	{r7}
 8005e8e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005e90:	4b03      	ldr	r3, [pc, #12]	; (8005ea0 <HAL_RCC_GetHCLKFreq+0x14>)
 8005e92:	681b      	ldr	r3, [r3, #0]
}
 8005e94:	4618      	mov	r0, r3
 8005e96:	46bd      	mov	sp, r7
 8005e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9c:	4770      	bx	lr
 8005e9e:	bf00      	nop
 8005ea0:	20000000 	.word	0x20000000

08005ea4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005ea4:	b580      	push	{r7, lr}
 8005ea6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005ea8:	f7ff fff0 	bl	8005e8c <HAL_RCC_GetHCLKFreq>
 8005eac:	4602      	mov	r2, r0
 8005eae:	4b06      	ldr	r3, [pc, #24]	; (8005ec8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005eb0:	689b      	ldr	r3, [r3, #8]
 8005eb2:	0a1b      	lsrs	r3, r3, #8
 8005eb4:	f003 0307 	and.w	r3, r3, #7
 8005eb8:	4904      	ldr	r1, [pc, #16]	; (8005ecc <HAL_RCC_GetPCLK1Freq+0x28>)
 8005eba:	5ccb      	ldrb	r3, [r1, r3]
 8005ebc:	f003 031f 	and.w	r3, r3, #31
 8005ec0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005ec4:	4618      	mov	r0, r3
 8005ec6:	bd80      	pop	{r7, pc}
 8005ec8:	40021000 	.word	0x40021000
 8005ecc:	0800d5fc 	.word	0x0800d5fc

08005ed0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005ed0:	b580      	push	{r7, lr}
 8005ed2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005ed4:	f7ff ffda 	bl	8005e8c <HAL_RCC_GetHCLKFreq>
 8005ed8:	4602      	mov	r2, r0
 8005eda:	4b06      	ldr	r3, [pc, #24]	; (8005ef4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005edc:	689b      	ldr	r3, [r3, #8]
 8005ede:	0adb      	lsrs	r3, r3, #11
 8005ee0:	f003 0307 	and.w	r3, r3, #7
 8005ee4:	4904      	ldr	r1, [pc, #16]	; (8005ef8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005ee6:	5ccb      	ldrb	r3, [r1, r3]
 8005ee8:	f003 031f 	and.w	r3, r3, #31
 8005eec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005ef0:	4618      	mov	r0, r3
 8005ef2:	bd80      	pop	{r7, pc}
 8005ef4:	40021000 	.word	0x40021000
 8005ef8:	0800d5fc 	.word	0x0800d5fc

08005efc <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005efc:	b480      	push	{r7}
 8005efe:	b083      	sub	sp, #12
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]
 8005f04:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	220f      	movs	r2, #15
 8005f0a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8005f0c:	4b12      	ldr	r3, [pc, #72]	; (8005f58 <HAL_RCC_GetClockConfig+0x5c>)
 8005f0e:	689b      	ldr	r3, [r3, #8]
 8005f10:	f003 0203 	and.w	r2, r3, #3
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8005f18:	4b0f      	ldr	r3, [pc, #60]	; (8005f58 <HAL_RCC_GetClockConfig+0x5c>)
 8005f1a:	689b      	ldr	r3, [r3, #8]
 8005f1c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8005f24:	4b0c      	ldr	r3, [pc, #48]	; (8005f58 <HAL_RCC_GetClockConfig+0x5c>)
 8005f26:	689b      	ldr	r3, [r3, #8]
 8005f28:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8005f30:	4b09      	ldr	r3, [pc, #36]	; (8005f58 <HAL_RCC_GetClockConfig+0x5c>)
 8005f32:	689b      	ldr	r3, [r3, #8]
 8005f34:	08db      	lsrs	r3, r3, #3
 8005f36:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8005f3e:	4b07      	ldr	r3, [pc, #28]	; (8005f5c <HAL_RCC_GetClockConfig+0x60>)
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	f003 020f 	and.w	r2, r3, #15
 8005f46:	683b      	ldr	r3, [r7, #0]
 8005f48:	601a      	str	r2, [r3, #0]
}
 8005f4a:	bf00      	nop
 8005f4c:	370c      	adds	r7, #12
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f54:	4770      	bx	lr
 8005f56:	bf00      	nop
 8005f58:	40021000 	.word	0x40021000
 8005f5c:	40022000 	.word	0x40022000

08005f60 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005f60:	b480      	push	{r7}
 8005f62:	b087      	sub	sp, #28
 8005f64:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005f66:	4b1e      	ldr	r3, [pc, #120]	; (8005fe0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005f68:	68db      	ldr	r3, [r3, #12]
 8005f6a:	f003 0303 	and.w	r3, r3, #3
 8005f6e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005f70:	4b1b      	ldr	r3, [pc, #108]	; (8005fe0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005f72:	68db      	ldr	r3, [r3, #12]
 8005f74:	091b      	lsrs	r3, r3, #4
 8005f76:	f003 030f 	and.w	r3, r3, #15
 8005f7a:	3301      	adds	r3, #1
 8005f7c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005f7e:	693b      	ldr	r3, [r7, #16]
 8005f80:	2b03      	cmp	r3, #3
 8005f82:	d10c      	bne.n	8005f9e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005f84:	4a17      	ldr	r2, [pc, #92]	; (8005fe4 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f8c:	4a14      	ldr	r2, [pc, #80]	; (8005fe0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005f8e:	68d2      	ldr	r2, [r2, #12]
 8005f90:	0a12      	lsrs	r2, r2, #8
 8005f92:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005f96:	fb02 f303 	mul.w	r3, r2, r3
 8005f9a:	617b      	str	r3, [r7, #20]
    break;
 8005f9c:	e00c      	b.n	8005fb8 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005f9e:	4a11      	ldr	r2, [pc, #68]	; (8005fe4 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fa6:	4a0e      	ldr	r2, [pc, #56]	; (8005fe0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005fa8:	68d2      	ldr	r2, [r2, #12]
 8005faa:	0a12      	lsrs	r2, r2, #8
 8005fac:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005fb0:	fb02 f303 	mul.w	r3, r2, r3
 8005fb4:	617b      	str	r3, [r7, #20]
    break;
 8005fb6:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005fb8:	4b09      	ldr	r3, [pc, #36]	; (8005fe0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005fba:	68db      	ldr	r3, [r3, #12]
 8005fbc:	0e5b      	lsrs	r3, r3, #25
 8005fbe:	f003 0303 	and.w	r3, r3, #3
 8005fc2:	3301      	adds	r3, #1
 8005fc4:	005b      	lsls	r3, r3, #1
 8005fc6:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8005fc8:	697a      	ldr	r2, [r7, #20]
 8005fca:	68bb      	ldr	r3, [r7, #8]
 8005fcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fd0:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8005fd2:	687b      	ldr	r3, [r7, #4]
}
 8005fd4:	4618      	mov	r0, r3
 8005fd6:	371c      	adds	r7, #28
 8005fd8:	46bd      	mov	sp, r7
 8005fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fde:	4770      	bx	lr
 8005fe0:	40021000 	.word	0x40021000
 8005fe4:	00f42400 	.word	0x00f42400

08005fe8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005fe8:	b580      	push	{r7, lr}
 8005fea:	b086      	sub	sp, #24
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005ff0:	2300      	movs	r3, #0
 8005ff2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005ff4:	2300      	movs	r3, #0
 8005ff6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006000:	2b00      	cmp	r3, #0
 8006002:	f000 8098 	beq.w	8006136 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006006:	2300      	movs	r3, #0
 8006008:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800600a:	4b43      	ldr	r3, [pc, #268]	; (8006118 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800600c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800600e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006012:	2b00      	cmp	r3, #0
 8006014:	d10d      	bne.n	8006032 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006016:	4b40      	ldr	r3, [pc, #256]	; (8006118 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006018:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800601a:	4a3f      	ldr	r2, [pc, #252]	; (8006118 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800601c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006020:	6593      	str	r3, [r2, #88]	; 0x58
 8006022:	4b3d      	ldr	r3, [pc, #244]	; (8006118 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006024:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006026:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800602a:	60bb      	str	r3, [r7, #8]
 800602c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800602e:	2301      	movs	r3, #1
 8006030:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006032:	4b3a      	ldr	r3, [pc, #232]	; (800611c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	4a39      	ldr	r2, [pc, #228]	; (800611c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006038:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800603c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800603e:	f7fb fee3 	bl	8001e08 <HAL_GetTick>
 8006042:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006044:	e009      	b.n	800605a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006046:	f7fb fedf 	bl	8001e08 <HAL_GetTick>
 800604a:	4602      	mov	r2, r0
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	1ad3      	subs	r3, r2, r3
 8006050:	2b02      	cmp	r3, #2
 8006052:	d902      	bls.n	800605a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8006054:	2303      	movs	r3, #3
 8006056:	74fb      	strb	r3, [r7, #19]
        break;
 8006058:	e005      	b.n	8006066 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800605a:	4b30      	ldr	r3, [pc, #192]	; (800611c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006062:	2b00      	cmp	r3, #0
 8006064:	d0ef      	beq.n	8006046 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8006066:	7cfb      	ldrb	r3, [r7, #19]
 8006068:	2b00      	cmp	r3, #0
 800606a:	d159      	bne.n	8006120 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800606c:	4b2a      	ldr	r3, [pc, #168]	; (8006118 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800606e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006072:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006076:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006078:	697b      	ldr	r3, [r7, #20]
 800607a:	2b00      	cmp	r3, #0
 800607c:	d01e      	beq.n	80060bc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006082:	697a      	ldr	r2, [r7, #20]
 8006084:	429a      	cmp	r2, r3
 8006086:	d019      	beq.n	80060bc <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006088:	4b23      	ldr	r3, [pc, #140]	; (8006118 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800608a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800608e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006092:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006094:	4b20      	ldr	r3, [pc, #128]	; (8006118 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006096:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800609a:	4a1f      	ldr	r2, [pc, #124]	; (8006118 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800609c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80060a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80060a4:	4b1c      	ldr	r3, [pc, #112]	; (8006118 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80060a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060aa:	4a1b      	ldr	r2, [pc, #108]	; (8006118 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80060ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80060b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80060b4:	4a18      	ldr	r2, [pc, #96]	; (8006118 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80060b6:	697b      	ldr	r3, [r7, #20]
 80060b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80060bc:	697b      	ldr	r3, [r7, #20]
 80060be:	f003 0301 	and.w	r3, r3, #1
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d016      	beq.n	80060f4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060c6:	f7fb fe9f 	bl	8001e08 <HAL_GetTick>
 80060ca:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80060cc:	e00b      	b.n	80060e6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80060ce:	f7fb fe9b 	bl	8001e08 <HAL_GetTick>
 80060d2:	4602      	mov	r2, r0
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	1ad3      	subs	r3, r2, r3
 80060d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80060dc:	4293      	cmp	r3, r2
 80060de:	d902      	bls.n	80060e6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80060e0:	2303      	movs	r3, #3
 80060e2:	74fb      	strb	r3, [r7, #19]
            break;
 80060e4:	e006      	b.n	80060f4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80060e6:	4b0c      	ldr	r3, [pc, #48]	; (8006118 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80060e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060ec:	f003 0302 	and.w	r3, r3, #2
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d0ec      	beq.n	80060ce <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80060f4:	7cfb      	ldrb	r3, [r7, #19]
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d10b      	bne.n	8006112 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80060fa:	4b07      	ldr	r3, [pc, #28]	; (8006118 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80060fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006100:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006108:	4903      	ldr	r1, [pc, #12]	; (8006118 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800610a:	4313      	orrs	r3, r2
 800610c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8006110:	e008      	b.n	8006124 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006112:	7cfb      	ldrb	r3, [r7, #19]
 8006114:	74bb      	strb	r3, [r7, #18]
 8006116:	e005      	b.n	8006124 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006118:	40021000 	.word	0x40021000
 800611c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006120:	7cfb      	ldrb	r3, [r7, #19]
 8006122:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006124:	7c7b      	ldrb	r3, [r7, #17]
 8006126:	2b01      	cmp	r3, #1
 8006128:	d105      	bne.n	8006136 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800612a:	4ba7      	ldr	r3, [pc, #668]	; (80063c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800612c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800612e:	4aa6      	ldr	r2, [pc, #664]	; (80063c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006130:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006134:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	f003 0301 	and.w	r3, r3, #1
 800613e:	2b00      	cmp	r3, #0
 8006140:	d00a      	beq.n	8006158 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006142:	4ba1      	ldr	r3, [pc, #644]	; (80063c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006144:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006148:	f023 0203 	bic.w	r2, r3, #3
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	685b      	ldr	r3, [r3, #4]
 8006150:	499d      	ldr	r1, [pc, #628]	; (80063c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006152:	4313      	orrs	r3, r2
 8006154:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	f003 0302 	and.w	r3, r3, #2
 8006160:	2b00      	cmp	r3, #0
 8006162:	d00a      	beq.n	800617a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006164:	4b98      	ldr	r3, [pc, #608]	; (80063c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006166:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800616a:	f023 020c 	bic.w	r2, r3, #12
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	689b      	ldr	r3, [r3, #8]
 8006172:	4995      	ldr	r1, [pc, #596]	; (80063c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006174:	4313      	orrs	r3, r2
 8006176:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	f003 0304 	and.w	r3, r3, #4
 8006182:	2b00      	cmp	r3, #0
 8006184:	d00a      	beq.n	800619c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006186:	4b90      	ldr	r3, [pc, #576]	; (80063c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006188:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800618c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	68db      	ldr	r3, [r3, #12]
 8006194:	498c      	ldr	r1, [pc, #560]	; (80063c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006196:	4313      	orrs	r3, r2
 8006198:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	f003 0308 	and.w	r3, r3, #8
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d00a      	beq.n	80061be <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80061a8:	4b87      	ldr	r3, [pc, #540]	; (80063c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80061aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061ae:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	691b      	ldr	r3, [r3, #16]
 80061b6:	4984      	ldr	r1, [pc, #528]	; (80063c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80061b8:	4313      	orrs	r3, r2
 80061ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	f003 0310 	and.w	r3, r3, #16
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d00a      	beq.n	80061e0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80061ca:	4b7f      	ldr	r3, [pc, #508]	; (80063c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80061cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061d0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	695b      	ldr	r3, [r3, #20]
 80061d8:	497b      	ldr	r1, [pc, #492]	; (80063c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80061da:	4313      	orrs	r3, r2
 80061dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	f003 0320 	and.w	r3, r3, #32
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d00a      	beq.n	8006202 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80061ec:	4b76      	ldr	r3, [pc, #472]	; (80063c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80061ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061f2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	699b      	ldr	r3, [r3, #24]
 80061fa:	4973      	ldr	r1, [pc, #460]	; (80063c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80061fc:	4313      	orrs	r3, r2
 80061fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800620a:	2b00      	cmp	r3, #0
 800620c:	d00a      	beq.n	8006224 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800620e:	4b6e      	ldr	r3, [pc, #440]	; (80063c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006210:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006214:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	69db      	ldr	r3, [r3, #28]
 800621c:	496a      	ldr	r1, [pc, #424]	; (80063c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800621e:	4313      	orrs	r3, r2
 8006220:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800622c:	2b00      	cmp	r3, #0
 800622e:	d00a      	beq.n	8006246 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006230:	4b65      	ldr	r3, [pc, #404]	; (80063c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006232:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006236:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	6a1b      	ldr	r3, [r3, #32]
 800623e:	4962      	ldr	r1, [pc, #392]	; (80063c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006240:	4313      	orrs	r3, r2
 8006242:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800624e:	2b00      	cmp	r3, #0
 8006250:	d00a      	beq.n	8006268 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006252:	4b5d      	ldr	r3, [pc, #372]	; (80063c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006254:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006258:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006260:	4959      	ldr	r1, [pc, #356]	; (80063c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006262:	4313      	orrs	r3, r2
 8006264:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006270:	2b00      	cmp	r3, #0
 8006272:	d00a      	beq.n	800628a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006274:	4b54      	ldr	r3, [pc, #336]	; (80063c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006276:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800627a:	f023 0203 	bic.w	r2, r3, #3
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006282:	4951      	ldr	r1, [pc, #324]	; (80063c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006284:	4313      	orrs	r3, r2
 8006286:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006292:	2b00      	cmp	r3, #0
 8006294:	d00a      	beq.n	80062ac <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006296:	4b4c      	ldr	r3, [pc, #304]	; (80063c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006298:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800629c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062a4:	4948      	ldr	r1, [pc, #288]	; (80063c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80062a6:	4313      	orrs	r3, r2
 80062a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d015      	beq.n	80062e4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80062b8:	4b43      	ldr	r3, [pc, #268]	; (80063c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80062ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062be:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062c6:	4940      	ldr	r1, [pc, #256]	; (80063c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80062c8:	4313      	orrs	r3, r2
 80062ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80062d6:	d105      	bne.n	80062e4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80062d8:	4b3b      	ldr	r3, [pc, #236]	; (80063c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80062da:	68db      	ldr	r3, [r3, #12]
 80062dc:	4a3a      	ldr	r2, [pc, #232]	; (80063c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80062de:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80062e2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d015      	beq.n	800631c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80062f0:	4b35      	ldr	r3, [pc, #212]	; (80063c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80062f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062f6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062fe:	4932      	ldr	r1, [pc, #200]	; (80063c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006300:	4313      	orrs	r3, r2
 8006302:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800630a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800630e:	d105      	bne.n	800631c <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006310:	4b2d      	ldr	r3, [pc, #180]	; (80063c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006312:	68db      	ldr	r3, [r3, #12]
 8006314:	4a2c      	ldr	r2, [pc, #176]	; (80063c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006316:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800631a:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006324:	2b00      	cmp	r3, #0
 8006326:	d015      	beq.n	8006354 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006328:	4b27      	ldr	r3, [pc, #156]	; (80063c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800632a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800632e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006336:	4924      	ldr	r1, [pc, #144]	; (80063c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006338:	4313      	orrs	r3, r2
 800633a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006342:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006346:	d105      	bne.n	8006354 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006348:	4b1f      	ldr	r3, [pc, #124]	; (80063c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800634a:	68db      	ldr	r3, [r3, #12]
 800634c:	4a1e      	ldr	r2, [pc, #120]	; (80063c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800634e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006352:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800635c:	2b00      	cmp	r3, #0
 800635e:	d015      	beq.n	800638c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006360:	4b19      	ldr	r3, [pc, #100]	; (80063c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006362:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006366:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800636e:	4916      	ldr	r1, [pc, #88]	; (80063c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006370:	4313      	orrs	r3, r2
 8006372:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800637a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800637e:	d105      	bne.n	800638c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006380:	4b11      	ldr	r3, [pc, #68]	; (80063c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006382:	68db      	ldr	r3, [r3, #12]
 8006384:	4a10      	ldr	r2, [pc, #64]	; (80063c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006386:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800638a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006394:	2b00      	cmp	r3, #0
 8006396:	d019      	beq.n	80063cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006398:	4b0b      	ldr	r3, [pc, #44]	; (80063c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800639a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800639e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063a6:	4908      	ldr	r1, [pc, #32]	; (80063c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80063a8:	4313      	orrs	r3, r2
 80063aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063b2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80063b6:	d109      	bne.n	80063cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80063b8:	4b03      	ldr	r3, [pc, #12]	; (80063c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80063ba:	68db      	ldr	r3, [r3, #12]
 80063bc:	4a02      	ldr	r2, [pc, #8]	; (80063c8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80063be:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80063c2:	60d3      	str	r3, [r2, #12]
 80063c4:	e002      	b.n	80063cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80063c6:	bf00      	nop
 80063c8:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d015      	beq.n	8006404 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80063d8:	4b29      	ldr	r3, [pc, #164]	; (8006480 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80063da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063de:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063e6:	4926      	ldr	r1, [pc, #152]	; (8006480 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80063e8:	4313      	orrs	r3, r2
 80063ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063f2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80063f6:	d105      	bne.n	8006404 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80063f8:	4b21      	ldr	r3, [pc, #132]	; (8006480 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80063fa:	68db      	ldr	r3, [r3, #12]
 80063fc:	4a20      	ldr	r2, [pc, #128]	; (8006480 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80063fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006402:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800640c:	2b00      	cmp	r3, #0
 800640e:	d015      	beq.n	800643c <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8006410:	4b1b      	ldr	r3, [pc, #108]	; (8006480 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006412:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006416:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800641e:	4918      	ldr	r1, [pc, #96]	; (8006480 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006420:	4313      	orrs	r3, r2
 8006422:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800642a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800642e:	d105      	bne.n	800643c <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006430:	4b13      	ldr	r3, [pc, #76]	; (8006480 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006432:	68db      	ldr	r3, [r3, #12]
 8006434:	4a12      	ldr	r2, [pc, #72]	; (8006480 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006436:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800643a:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006444:	2b00      	cmp	r3, #0
 8006446:	d015      	beq.n	8006474 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006448:	4b0d      	ldr	r3, [pc, #52]	; (8006480 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800644a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800644e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006456:	490a      	ldr	r1, [pc, #40]	; (8006480 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006458:	4313      	orrs	r3, r2
 800645a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006462:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006466:	d105      	bne.n	8006474 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006468:	4b05      	ldr	r3, [pc, #20]	; (8006480 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800646a:	68db      	ldr	r3, [r3, #12]
 800646c:	4a04      	ldr	r2, [pc, #16]	; (8006480 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800646e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006472:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8006474:	7cbb      	ldrb	r3, [r7, #18]
}
 8006476:	4618      	mov	r0, r3
 8006478:	3718      	adds	r7, #24
 800647a:	46bd      	mov	sp, r7
 800647c:	bd80      	pop	{r7, pc}
 800647e:	bf00      	nop
 8006480:	40021000 	.word	0x40021000

08006484 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006484:	b580      	push	{r7, lr}
 8006486:	b082      	sub	sp, #8
 8006488:	af00      	add	r7, sp, #0
 800648a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	2b00      	cmp	r3, #0
 8006490:	d101      	bne.n	8006496 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006492:	2301      	movs	r3, #1
 8006494:	e049      	b.n	800652a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800649c:	b2db      	uxtb	r3, r3
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d106      	bne.n	80064b0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	2200      	movs	r2, #0
 80064a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80064aa:	6878      	ldr	r0, [r7, #4]
 80064ac:	f7fb f9ba 	bl	8001824 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	2202      	movs	r2, #2
 80064b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681a      	ldr	r2, [r3, #0]
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	3304      	adds	r3, #4
 80064c0:	4619      	mov	r1, r3
 80064c2:	4610      	mov	r0, r2
 80064c4:	f000 fe84 	bl	80071d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	2201      	movs	r2, #1
 80064cc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	2201      	movs	r2, #1
 80064d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	2201      	movs	r2, #1
 80064dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	2201      	movs	r2, #1
 80064e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	2201      	movs	r2, #1
 80064ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	2201      	movs	r2, #1
 80064f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	2201      	movs	r2, #1
 80064fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	2201      	movs	r2, #1
 8006504:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	2201      	movs	r2, #1
 800650c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	2201      	movs	r2, #1
 8006514:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	2201      	movs	r2, #1
 800651c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	2201      	movs	r2, #1
 8006524:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006528:	2300      	movs	r3, #0
}
 800652a:	4618      	mov	r0, r3
 800652c:	3708      	adds	r7, #8
 800652e:	46bd      	mov	sp, r7
 8006530:	bd80      	pop	{r7, pc}
	...

08006534 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006534:	b480      	push	{r7}
 8006536:	b085      	sub	sp, #20
 8006538:	af00      	add	r7, sp, #0
 800653a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006542:	b2db      	uxtb	r3, r3
 8006544:	2b01      	cmp	r3, #1
 8006546:	d001      	beq.n	800654c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006548:	2301      	movs	r3, #1
 800654a:	e054      	b.n	80065f6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	2202      	movs	r2, #2
 8006550:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	68da      	ldr	r2, [r3, #12]
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	f042 0201 	orr.w	r2, r2, #1
 8006562:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	4a26      	ldr	r2, [pc, #152]	; (8006604 <HAL_TIM_Base_Start_IT+0xd0>)
 800656a:	4293      	cmp	r3, r2
 800656c:	d022      	beq.n	80065b4 <HAL_TIM_Base_Start_IT+0x80>
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006576:	d01d      	beq.n	80065b4 <HAL_TIM_Base_Start_IT+0x80>
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	4a22      	ldr	r2, [pc, #136]	; (8006608 <HAL_TIM_Base_Start_IT+0xd4>)
 800657e:	4293      	cmp	r3, r2
 8006580:	d018      	beq.n	80065b4 <HAL_TIM_Base_Start_IT+0x80>
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	4a21      	ldr	r2, [pc, #132]	; (800660c <HAL_TIM_Base_Start_IT+0xd8>)
 8006588:	4293      	cmp	r3, r2
 800658a:	d013      	beq.n	80065b4 <HAL_TIM_Base_Start_IT+0x80>
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	4a1f      	ldr	r2, [pc, #124]	; (8006610 <HAL_TIM_Base_Start_IT+0xdc>)
 8006592:	4293      	cmp	r3, r2
 8006594:	d00e      	beq.n	80065b4 <HAL_TIM_Base_Start_IT+0x80>
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	4a1e      	ldr	r2, [pc, #120]	; (8006614 <HAL_TIM_Base_Start_IT+0xe0>)
 800659c:	4293      	cmp	r3, r2
 800659e:	d009      	beq.n	80065b4 <HAL_TIM_Base_Start_IT+0x80>
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	4a1c      	ldr	r2, [pc, #112]	; (8006618 <HAL_TIM_Base_Start_IT+0xe4>)
 80065a6:	4293      	cmp	r3, r2
 80065a8:	d004      	beq.n	80065b4 <HAL_TIM_Base_Start_IT+0x80>
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	4a1b      	ldr	r2, [pc, #108]	; (800661c <HAL_TIM_Base_Start_IT+0xe8>)
 80065b0:	4293      	cmp	r3, r2
 80065b2:	d115      	bne.n	80065e0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	689a      	ldr	r2, [r3, #8]
 80065ba:	4b19      	ldr	r3, [pc, #100]	; (8006620 <HAL_TIM_Base_Start_IT+0xec>)
 80065bc:	4013      	ands	r3, r2
 80065be:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	2b06      	cmp	r3, #6
 80065c4:	d015      	beq.n	80065f2 <HAL_TIM_Base_Start_IT+0xbe>
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80065cc:	d011      	beq.n	80065f2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	681a      	ldr	r2, [r3, #0]
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	f042 0201 	orr.w	r2, r2, #1
 80065dc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80065de:	e008      	b.n	80065f2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	681a      	ldr	r2, [r3, #0]
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	f042 0201 	orr.w	r2, r2, #1
 80065ee:	601a      	str	r2, [r3, #0]
 80065f0:	e000      	b.n	80065f4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80065f2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80065f4:	2300      	movs	r3, #0
}
 80065f6:	4618      	mov	r0, r3
 80065f8:	3714      	adds	r7, #20
 80065fa:	46bd      	mov	sp, r7
 80065fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006600:	4770      	bx	lr
 8006602:	bf00      	nop
 8006604:	40012c00 	.word	0x40012c00
 8006608:	40000400 	.word	0x40000400
 800660c:	40000800 	.word	0x40000800
 8006610:	40000c00 	.word	0x40000c00
 8006614:	40013400 	.word	0x40013400
 8006618:	40014000 	.word	0x40014000
 800661c:	40015000 	.word	0x40015000
 8006620:	00010007 	.word	0x00010007

08006624 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006624:	b580      	push	{r7, lr}
 8006626:	b082      	sub	sp, #8
 8006628:	af00      	add	r7, sp, #0
 800662a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	2b00      	cmp	r3, #0
 8006630:	d101      	bne.n	8006636 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006632:	2301      	movs	r3, #1
 8006634:	e049      	b.n	80066ca <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800663c:	b2db      	uxtb	r3, r3
 800663e:	2b00      	cmp	r3, #0
 8006640:	d106      	bne.n	8006650 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	2200      	movs	r2, #0
 8006646:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800664a:	6878      	ldr	r0, [r7, #4]
 800664c:	f000 f841 	bl	80066d2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	2202      	movs	r2, #2
 8006654:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681a      	ldr	r2, [r3, #0]
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	3304      	adds	r3, #4
 8006660:	4619      	mov	r1, r3
 8006662:	4610      	mov	r0, r2
 8006664:	f000 fdb4 	bl	80071d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	2201      	movs	r2, #1
 800666c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	2201      	movs	r2, #1
 8006674:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	2201      	movs	r2, #1
 800667c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	2201      	movs	r2, #1
 8006684:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	2201      	movs	r2, #1
 800668c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	2201      	movs	r2, #1
 8006694:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	2201      	movs	r2, #1
 800669c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	2201      	movs	r2, #1
 80066a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	2201      	movs	r2, #1
 80066ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	2201      	movs	r2, #1
 80066b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	2201      	movs	r2, #1
 80066bc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	2201      	movs	r2, #1
 80066c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80066c8:	2300      	movs	r3, #0
}
 80066ca:	4618      	mov	r0, r3
 80066cc:	3708      	adds	r7, #8
 80066ce:	46bd      	mov	sp, r7
 80066d0:	bd80      	pop	{r7, pc}

080066d2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80066d2:	b480      	push	{r7}
 80066d4:	b083      	sub	sp, #12
 80066d6:	af00      	add	r7, sp, #0
 80066d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80066da:	bf00      	nop
 80066dc:	370c      	adds	r7, #12
 80066de:	46bd      	mov	sp, r7
 80066e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e4:	4770      	bx	lr

080066e6 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80066e6:	b580      	push	{r7, lr}
 80066e8:	b082      	sub	sp, #8
 80066ea:	af00      	add	r7, sp, #0
 80066ec:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d101      	bne.n	80066f8 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80066f4:	2301      	movs	r3, #1
 80066f6:	e049      	b.n	800678c <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80066fe:	b2db      	uxtb	r3, r3
 8006700:	2b00      	cmp	r3, #0
 8006702:	d106      	bne.n	8006712 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	2200      	movs	r2, #0
 8006708:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800670c:	6878      	ldr	r0, [r7, #4]
 800670e:	f000 f841 	bl	8006794 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	2202      	movs	r2, #2
 8006716:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681a      	ldr	r2, [r3, #0]
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	3304      	adds	r3, #4
 8006722:	4619      	mov	r1, r3
 8006724:	4610      	mov	r0, r2
 8006726:	f000 fd53 	bl	80071d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	2201      	movs	r2, #1
 800672e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	2201      	movs	r2, #1
 8006736:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	2201      	movs	r2, #1
 800673e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	2201      	movs	r2, #1
 8006746:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	2201      	movs	r2, #1
 800674e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	2201      	movs	r2, #1
 8006756:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	2201      	movs	r2, #1
 800675e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	2201      	movs	r2, #1
 8006766:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	2201      	movs	r2, #1
 800676e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	2201      	movs	r2, #1
 8006776:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	2201      	movs	r2, #1
 800677e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	2201      	movs	r2, #1
 8006786:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800678a:	2300      	movs	r3, #0
}
 800678c:	4618      	mov	r0, r3
 800678e:	3708      	adds	r7, #8
 8006790:	46bd      	mov	sp, r7
 8006792:	bd80      	pop	{r7, pc}

08006794 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8006794:	b480      	push	{r7}
 8006796:	b083      	sub	sp, #12
 8006798:	af00      	add	r7, sp, #0
 800679a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800679c:	bf00      	nop
 800679e:	370c      	adds	r7, #12
 80067a0:	46bd      	mov	sp, r7
 80067a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a6:	4770      	bx	lr

080067a8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80067a8:	b580      	push	{r7, lr}
 80067aa:	b086      	sub	sp, #24
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	6078      	str	r0, [r7, #4]
 80067b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d101      	bne.n	80067bc <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80067b8:	2301      	movs	r3, #1
 80067ba:	e097      	b.n	80068ec <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80067c2:	b2db      	uxtb	r3, r3
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d106      	bne.n	80067d6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	2200      	movs	r2, #0
 80067cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80067d0:	6878      	ldr	r0, [r7, #4]
 80067d2:	f7fb f8f5 	bl	80019c0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	2202      	movs	r2, #2
 80067da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	689b      	ldr	r3, [r3, #8]
 80067e4:	687a      	ldr	r2, [r7, #4]
 80067e6:	6812      	ldr	r2, [r2, #0]
 80067e8:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 80067ec:	f023 0307 	bic.w	r3, r3, #7
 80067f0:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681a      	ldr	r2, [r3, #0]
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	3304      	adds	r3, #4
 80067fa:	4619      	mov	r1, r3
 80067fc:	4610      	mov	r0, r2
 80067fe:	f000 fce7 	bl	80071d0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	689b      	ldr	r3, [r3, #8]
 8006808:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	699b      	ldr	r3, [r3, #24]
 8006810:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	6a1b      	ldr	r3, [r3, #32]
 8006818:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800681a:	683b      	ldr	r3, [r7, #0]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	697a      	ldr	r2, [r7, #20]
 8006820:	4313      	orrs	r3, r2
 8006822:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006824:	693b      	ldr	r3, [r7, #16]
 8006826:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800682a:	f023 0303 	bic.w	r3, r3, #3
 800682e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006830:	683b      	ldr	r3, [r7, #0]
 8006832:	689a      	ldr	r2, [r3, #8]
 8006834:	683b      	ldr	r3, [r7, #0]
 8006836:	699b      	ldr	r3, [r3, #24]
 8006838:	021b      	lsls	r3, r3, #8
 800683a:	4313      	orrs	r3, r2
 800683c:	693a      	ldr	r2, [r7, #16]
 800683e:	4313      	orrs	r3, r2
 8006840:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006842:	693b      	ldr	r3, [r7, #16]
 8006844:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8006848:	f023 030c 	bic.w	r3, r3, #12
 800684c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800684e:	693b      	ldr	r3, [r7, #16]
 8006850:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006854:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006858:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800685a:	683b      	ldr	r3, [r7, #0]
 800685c:	68da      	ldr	r2, [r3, #12]
 800685e:	683b      	ldr	r3, [r7, #0]
 8006860:	69db      	ldr	r3, [r3, #28]
 8006862:	021b      	lsls	r3, r3, #8
 8006864:	4313      	orrs	r3, r2
 8006866:	693a      	ldr	r2, [r7, #16]
 8006868:	4313      	orrs	r3, r2
 800686a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800686c:	683b      	ldr	r3, [r7, #0]
 800686e:	691b      	ldr	r3, [r3, #16]
 8006870:	011a      	lsls	r2, r3, #4
 8006872:	683b      	ldr	r3, [r7, #0]
 8006874:	6a1b      	ldr	r3, [r3, #32]
 8006876:	031b      	lsls	r3, r3, #12
 8006878:	4313      	orrs	r3, r2
 800687a:	693a      	ldr	r2, [r7, #16]
 800687c:	4313      	orrs	r3, r2
 800687e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8006886:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800688e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006890:	683b      	ldr	r3, [r7, #0]
 8006892:	685a      	ldr	r2, [r3, #4]
 8006894:	683b      	ldr	r3, [r7, #0]
 8006896:	695b      	ldr	r3, [r3, #20]
 8006898:	011b      	lsls	r3, r3, #4
 800689a:	4313      	orrs	r3, r2
 800689c:	68fa      	ldr	r2, [r7, #12]
 800689e:	4313      	orrs	r3, r2
 80068a0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	697a      	ldr	r2, [r7, #20]
 80068a8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	693a      	ldr	r2, [r7, #16]
 80068b0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	68fa      	ldr	r2, [r7, #12]
 80068b8:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	2201      	movs	r2, #1
 80068be:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	2201      	movs	r2, #1
 80068c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	2201      	movs	r2, #1
 80068ce:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	2201      	movs	r2, #1
 80068d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	2201      	movs	r2, #1
 80068de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	2201      	movs	r2, #1
 80068e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80068ea:	2300      	movs	r3, #0
}
 80068ec:	4618      	mov	r0, r3
 80068ee:	3718      	adds	r7, #24
 80068f0:	46bd      	mov	sp, r7
 80068f2:	bd80      	pop	{r7, pc}

080068f4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80068f4:	b580      	push	{r7, lr}
 80068f6:	b082      	sub	sp, #8
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	691b      	ldr	r3, [r3, #16]
 8006902:	f003 0302 	and.w	r3, r3, #2
 8006906:	2b02      	cmp	r3, #2
 8006908:	d122      	bne.n	8006950 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	68db      	ldr	r3, [r3, #12]
 8006910:	f003 0302 	and.w	r3, r3, #2
 8006914:	2b02      	cmp	r3, #2
 8006916:	d11b      	bne.n	8006950 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	f06f 0202 	mvn.w	r2, #2
 8006920:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	2201      	movs	r2, #1
 8006926:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	699b      	ldr	r3, [r3, #24]
 800692e:	f003 0303 	and.w	r3, r3, #3
 8006932:	2b00      	cmp	r3, #0
 8006934:	d003      	beq.n	800693e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006936:	6878      	ldr	r0, [r7, #4]
 8006938:	f000 fc2c 	bl	8007194 <HAL_TIM_IC_CaptureCallback>
 800693c:	e005      	b.n	800694a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800693e:	6878      	ldr	r0, [r7, #4]
 8006940:	f000 fc1e 	bl	8007180 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006944:	6878      	ldr	r0, [r7, #4]
 8006946:	f000 fc2f 	bl	80071a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	2200      	movs	r2, #0
 800694e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	691b      	ldr	r3, [r3, #16]
 8006956:	f003 0304 	and.w	r3, r3, #4
 800695a:	2b04      	cmp	r3, #4
 800695c:	d122      	bne.n	80069a4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	68db      	ldr	r3, [r3, #12]
 8006964:	f003 0304 	and.w	r3, r3, #4
 8006968:	2b04      	cmp	r3, #4
 800696a:	d11b      	bne.n	80069a4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	f06f 0204 	mvn.w	r2, #4
 8006974:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	2202      	movs	r2, #2
 800697a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	699b      	ldr	r3, [r3, #24]
 8006982:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006986:	2b00      	cmp	r3, #0
 8006988:	d003      	beq.n	8006992 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800698a:	6878      	ldr	r0, [r7, #4]
 800698c:	f000 fc02 	bl	8007194 <HAL_TIM_IC_CaptureCallback>
 8006990:	e005      	b.n	800699e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006992:	6878      	ldr	r0, [r7, #4]
 8006994:	f000 fbf4 	bl	8007180 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006998:	6878      	ldr	r0, [r7, #4]
 800699a:	f000 fc05 	bl	80071a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	2200      	movs	r2, #0
 80069a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	691b      	ldr	r3, [r3, #16]
 80069aa:	f003 0308 	and.w	r3, r3, #8
 80069ae:	2b08      	cmp	r3, #8
 80069b0:	d122      	bne.n	80069f8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	68db      	ldr	r3, [r3, #12]
 80069b8:	f003 0308 	and.w	r3, r3, #8
 80069bc:	2b08      	cmp	r3, #8
 80069be:	d11b      	bne.n	80069f8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	f06f 0208 	mvn.w	r2, #8
 80069c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	2204      	movs	r2, #4
 80069ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	69db      	ldr	r3, [r3, #28]
 80069d6:	f003 0303 	and.w	r3, r3, #3
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d003      	beq.n	80069e6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80069de:	6878      	ldr	r0, [r7, #4]
 80069e0:	f000 fbd8 	bl	8007194 <HAL_TIM_IC_CaptureCallback>
 80069e4:	e005      	b.n	80069f2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80069e6:	6878      	ldr	r0, [r7, #4]
 80069e8:	f000 fbca 	bl	8007180 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80069ec:	6878      	ldr	r0, [r7, #4]
 80069ee:	f000 fbdb 	bl	80071a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	2200      	movs	r2, #0
 80069f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	691b      	ldr	r3, [r3, #16]
 80069fe:	f003 0310 	and.w	r3, r3, #16
 8006a02:	2b10      	cmp	r3, #16
 8006a04:	d122      	bne.n	8006a4c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	68db      	ldr	r3, [r3, #12]
 8006a0c:	f003 0310 	and.w	r3, r3, #16
 8006a10:	2b10      	cmp	r3, #16
 8006a12:	d11b      	bne.n	8006a4c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	f06f 0210 	mvn.w	r2, #16
 8006a1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	2208      	movs	r2, #8
 8006a22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	69db      	ldr	r3, [r3, #28]
 8006a2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d003      	beq.n	8006a3a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006a32:	6878      	ldr	r0, [r7, #4]
 8006a34:	f000 fbae 	bl	8007194 <HAL_TIM_IC_CaptureCallback>
 8006a38:	e005      	b.n	8006a46 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a3a:	6878      	ldr	r0, [r7, #4]
 8006a3c:	f000 fba0 	bl	8007180 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a40:	6878      	ldr	r0, [r7, #4]
 8006a42:	f000 fbb1 	bl	80071a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	2200      	movs	r2, #0
 8006a4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	691b      	ldr	r3, [r3, #16]
 8006a52:	f003 0301 	and.w	r3, r3, #1
 8006a56:	2b01      	cmp	r3, #1
 8006a58:	d10e      	bne.n	8006a78 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	68db      	ldr	r3, [r3, #12]
 8006a60:	f003 0301 	and.w	r3, r3, #1
 8006a64:	2b01      	cmp	r3, #1
 8006a66:	d107      	bne.n	8006a78 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	f06f 0201 	mvn.w	r2, #1
 8006a70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006a72:	6878      	ldr	r0, [r7, #4]
 8006a74:	f7fa fb0c 	bl	8001090 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	691b      	ldr	r3, [r3, #16]
 8006a7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a82:	2b80      	cmp	r3, #128	; 0x80
 8006a84:	d10e      	bne.n	8006aa4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	68db      	ldr	r3, [r3, #12]
 8006a8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a90:	2b80      	cmp	r3, #128	; 0x80
 8006a92:	d107      	bne.n	8006aa4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006a9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006a9e:	6878      	ldr	r0, [r7, #4]
 8006aa0:	f001 fb3a 	bl	8008118 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	691b      	ldr	r3, [r3, #16]
 8006aaa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006aae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006ab2:	d10e      	bne.n	8006ad2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	68db      	ldr	r3, [r3, #12]
 8006aba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006abe:	2b80      	cmp	r3, #128	; 0x80
 8006ac0:	d107      	bne.n	8006ad2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006aca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006acc:	6878      	ldr	r0, [r7, #4]
 8006ace:	f001 fb2d 	bl	800812c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	691b      	ldr	r3, [r3, #16]
 8006ad8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006adc:	2b40      	cmp	r3, #64	; 0x40
 8006ade:	d10e      	bne.n	8006afe <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	68db      	ldr	r3, [r3, #12]
 8006ae6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006aea:	2b40      	cmp	r3, #64	; 0x40
 8006aec:	d107      	bne.n	8006afe <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006af6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006af8:	6878      	ldr	r0, [r7, #4]
 8006afa:	f000 fb5f 	bl	80071bc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	691b      	ldr	r3, [r3, #16]
 8006b04:	f003 0320 	and.w	r3, r3, #32
 8006b08:	2b20      	cmp	r3, #32
 8006b0a:	d10e      	bne.n	8006b2a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	68db      	ldr	r3, [r3, #12]
 8006b12:	f003 0320 	and.w	r3, r3, #32
 8006b16:	2b20      	cmp	r3, #32
 8006b18:	d107      	bne.n	8006b2a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	f06f 0220 	mvn.w	r2, #32
 8006b22:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006b24:	6878      	ldr	r0, [r7, #4]
 8006b26:	f001 faed 	bl	8008104 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	691b      	ldr	r3, [r3, #16]
 8006b30:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006b34:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006b38:	d10f      	bne.n	8006b5a <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	68db      	ldr	r3, [r3, #12]
 8006b40:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006b44:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006b48:	d107      	bne.n	8006b5a <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8006b52:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8006b54:	6878      	ldr	r0, [r7, #4]
 8006b56:	f001 faf3 	bl	8008140 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	691b      	ldr	r3, [r3, #16]
 8006b60:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006b64:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006b68:	d10f      	bne.n	8006b8a <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	68db      	ldr	r3, [r3, #12]
 8006b70:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006b74:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006b78:	d107      	bne.n	8006b8a <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8006b82:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8006b84:	6878      	ldr	r0, [r7, #4]
 8006b86:	f001 fae5 	bl	8008154 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	691b      	ldr	r3, [r3, #16]
 8006b90:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006b94:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006b98:	d10f      	bne.n	8006bba <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	68db      	ldr	r3, [r3, #12]
 8006ba0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006ba4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006ba8:	d107      	bne.n	8006bba <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8006bb2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8006bb4:	6878      	ldr	r0, [r7, #4]
 8006bb6:	f001 fad7 	bl	8008168 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	691b      	ldr	r3, [r3, #16]
 8006bc0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006bc4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006bc8:	d10f      	bne.n	8006bea <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	68db      	ldr	r3, [r3, #12]
 8006bd0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006bd4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006bd8:	d107      	bne.n	8006bea <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8006be2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8006be4:	6878      	ldr	r0, [r7, #4]
 8006be6:	f001 fac9 	bl	800817c <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006bea:	bf00      	nop
 8006bec:	3708      	adds	r7, #8
 8006bee:	46bd      	mov	sp, r7
 8006bf0:	bd80      	pop	{r7, pc}

08006bf2 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8006bf2:	b580      	push	{r7, lr}
 8006bf4:	b086      	sub	sp, #24
 8006bf6:	af00      	add	r7, sp, #0
 8006bf8:	60f8      	str	r0, [r7, #12]
 8006bfa:	60b9      	str	r1, [r7, #8]
 8006bfc:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006bfe:	2300      	movs	r3, #0
 8006c00:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006c08:	2b01      	cmp	r3, #1
 8006c0a:	d101      	bne.n	8006c10 <HAL_TIM_IC_ConfigChannel+0x1e>
 8006c0c:	2302      	movs	r3, #2
 8006c0e:	e088      	b.n	8006d22 <HAL_TIM_IC_ConfigChannel+0x130>
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	2201      	movs	r2, #1
 8006c14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d11b      	bne.n	8006c56 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	6818      	ldr	r0, [r3, #0]
 8006c22:	68bb      	ldr	r3, [r7, #8]
 8006c24:	6819      	ldr	r1, [r3, #0]
 8006c26:	68bb      	ldr	r3, [r7, #8]
 8006c28:	685a      	ldr	r2, [r3, #4]
 8006c2a:	68bb      	ldr	r3, [r7, #8]
 8006c2c:	68db      	ldr	r3, [r3, #12]
 8006c2e:	f000 fea1 	bl	8007974 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	699a      	ldr	r2, [r3, #24]
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	f022 020c 	bic.w	r2, r2, #12
 8006c40:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	6999      	ldr	r1, [r3, #24]
 8006c48:	68bb      	ldr	r3, [r7, #8]
 8006c4a:	689a      	ldr	r2, [r3, #8]
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	430a      	orrs	r2, r1
 8006c52:	619a      	str	r2, [r3, #24]
 8006c54:	e060      	b.n	8006d18 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	2b04      	cmp	r3, #4
 8006c5a:	d11c      	bne.n	8006c96 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	6818      	ldr	r0, [r3, #0]
 8006c60:	68bb      	ldr	r3, [r7, #8]
 8006c62:	6819      	ldr	r1, [r3, #0]
 8006c64:	68bb      	ldr	r3, [r7, #8]
 8006c66:	685a      	ldr	r2, [r3, #4]
 8006c68:	68bb      	ldr	r3, [r7, #8]
 8006c6a:	68db      	ldr	r3, [r3, #12]
 8006c6c:	f000 ff25 	bl	8007aba <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	699a      	ldr	r2, [r3, #24]
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006c7e:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	6999      	ldr	r1, [r3, #24]
 8006c86:	68bb      	ldr	r3, [r7, #8]
 8006c88:	689b      	ldr	r3, [r3, #8]
 8006c8a:	021a      	lsls	r2, r3, #8
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	430a      	orrs	r2, r1
 8006c92:	619a      	str	r2, [r3, #24]
 8006c94:	e040      	b.n	8006d18 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	2b08      	cmp	r3, #8
 8006c9a:	d11b      	bne.n	8006cd4 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	6818      	ldr	r0, [r3, #0]
 8006ca0:	68bb      	ldr	r3, [r7, #8]
 8006ca2:	6819      	ldr	r1, [r3, #0]
 8006ca4:	68bb      	ldr	r3, [r7, #8]
 8006ca6:	685a      	ldr	r2, [r3, #4]
 8006ca8:	68bb      	ldr	r3, [r7, #8]
 8006caa:	68db      	ldr	r3, [r3, #12]
 8006cac:	f000 ff72 	bl	8007b94 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	69da      	ldr	r2, [r3, #28]
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	f022 020c 	bic.w	r2, r2, #12
 8006cbe:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	69d9      	ldr	r1, [r3, #28]
 8006cc6:	68bb      	ldr	r3, [r7, #8]
 8006cc8:	689a      	ldr	r2, [r3, #8]
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	430a      	orrs	r2, r1
 8006cd0:	61da      	str	r2, [r3, #28]
 8006cd2:	e021      	b.n	8006d18 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	2b0c      	cmp	r3, #12
 8006cd8:	d11c      	bne.n	8006d14 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	6818      	ldr	r0, [r3, #0]
 8006cde:	68bb      	ldr	r3, [r7, #8]
 8006ce0:	6819      	ldr	r1, [r3, #0]
 8006ce2:	68bb      	ldr	r3, [r7, #8]
 8006ce4:	685a      	ldr	r2, [r3, #4]
 8006ce6:	68bb      	ldr	r3, [r7, #8]
 8006ce8:	68db      	ldr	r3, [r3, #12]
 8006cea:	f000 ff8f 	bl	8007c0c <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	69da      	ldr	r2, [r3, #28]
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006cfc:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	69d9      	ldr	r1, [r3, #28]
 8006d04:	68bb      	ldr	r3, [r7, #8]
 8006d06:	689b      	ldr	r3, [r3, #8]
 8006d08:	021a      	lsls	r2, r3, #8
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	430a      	orrs	r2, r1
 8006d10:	61da      	str	r2, [r3, #28]
 8006d12:	e001      	b.n	8006d18 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8006d14:	2301      	movs	r3, #1
 8006d16:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	2200      	movs	r2, #0
 8006d1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006d20:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d22:	4618      	mov	r0, r3
 8006d24:	3718      	adds	r7, #24
 8006d26:	46bd      	mov	sp, r7
 8006d28:	bd80      	pop	{r7, pc}
	...

08006d2c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006d2c:	b580      	push	{r7, lr}
 8006d2e:	b086      	sub	sp, #24
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	60f8      	str	r0, [r7, #12]
 8006d34:	60b9      	str	r1, [r7, #8]
 8006d36:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006d38:	2300      	movs	r3, #0
 8006d3a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006d42:	2b01      	cmp	r3, #1
 8006d44:	d101      	bne.n	8006d4a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006d46:	2302      	movs	r3, #2
 8006d48:	e0ff      	b.n	8006f4a <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	2201      	movs	r2, #1
 8006d4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	2b14      	cmp	r3, #20
 8006d56:	f200 80f0 	bhi.w	8006f3a <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006d5a:	a201      	add	r2, pc, #4	; (adr r2, 8006d60 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006d5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d60:	08006db5 	.word	0x08006db5
 8006d64:	08006f3b 	.word	0x08006f3b
 8006d68:	08006f3b 	.word	0x08006f3b
 8006d6c:	08006f3b 	.word	0x08006f3b
 8006d70:	08006df5 	.word	0x08006df5
 8006d74:	08006f3b 	.word	0x08006f3b
 8006d78:	08006f3b 	.word	0x08006f3b
 8006d7c:	08006f3b 	.word	0x08006f3b
 8006d80:	08006e37 	.word	0x08006e37
 8006d84:	08006f3b 	.word	0x08006f3b
 8006d88:	08006f3b 	.word	0x08006f3b
 8006d8c:	08006f3b 	.word	0x08006f3b
 8006d90:	08006e77 	.word	0x08006e77
 8006d94:	08006f3b 	.word	0x08006f3b
 8006d98:	08006f3b 	.word	0x08006f3b
 8006d9c:	08006f3b 	.word	0x08006f3b
 8006da0:	08006eb9 	.word	0x08006eb9
 8006da4:	08006f3b 	.word	0x08006f3b
 8006da8:	08006f3b 	.word	0x08006f3b
 8006dac:	08006f3b 	.word	0x08006f3b
 8006db0:	08006ef9 	.word	0x08006ef9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	68b9      	ldr	r1, [r7, #8]
 8006dba:	4618      	mov	r0, r3
 8006dbc:	f000 fab0 	bl	8007320 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	699a      	ldr	r2, [r3, #24]
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	f042 0208 	orr.w	r2, r2, #8
 8006dce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	699a      	ldr	r2, [r3, #24]
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	f022 0204 	bic.w	r2, r2, #4
 8006dde:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	6999      	ldr	r1, [r3, #24]
 8006de6:	68bb      	ldr	r3, [r7, #8]
 8006de8:	691a      	ldr	r2, [r3, #16]
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	430a      	orrs	r2, r1
 8006df0:	619a      	str	r2, [r3, #24]
      break;
 8006df2:	e0a5      	b.n	8006f40 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	68b9      	ldr	r1, [r7, #8]
 8006dfa:	4618      	mov	r0, r3
 8006dfc:	f000 fb2a 	bl	8007454 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	699a      	ldr	r2, [r3, #24]
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006e0e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	699a      	ldr	r2, [r3, #24]
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006e1e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	6999      	ldr	r1, [r3, #24]
 8006e26:	68bb      	ldr	r3, [r7, #8]
 8006e28:	691b      	ldr	r3, [r3, #16]
 8006e2a:	021a      	lsls	r2, r3, #8
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	430a      	orrs	r2, r1
 8006e32:	619a      	str	r2, [r3, #24]
      break;
 8006e34:	e084      	b.n	8006f40 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	68b9      	ldr	r1, [r7, #8]
 8006e3c:	4618      	mov	r0, r3
 8006e3e:	f000 fb9d 	bl	800757c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	69da      	ldr	r2, [r3, #28]
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	f042 0208 	orr.w	r2, r2, #8
 8006e50:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	69da      	ldr	r2, [r3, #28]
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	f022 0204 	bic.w	r2, r2, #4
 8006e60:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	69d9      	ldr	r1, [r3, #28]
 8006e68:	68bb      	ldr	r3, [r7, #8]
 8006e6a:	691a      	ldr	r2, [r3, #16]
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	430a      	orrs	r2, r1
 8006e72:	61da      	str	r2, [r3, #28]
      break;
 8006e74:	e064      	b.n	8006f40 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	68b9      	ldr	r1, [r7, #8]
 8006e7c:	4618      	mov	r0, r3
 8006e7e:	f000 fc0f 	bl	80076a0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	69da      	ldr	r2, [r3, #28]
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006e90:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	69da      	ldr	r2, [r3, #28]
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006ea0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	69d9      	ldr	r1, [r3, #28]
 8006ea8:	68bb      	ldr	r3, [r7, #8]
 8006eaa:	691b      	ldr	r3, [r3, #16]
 8006eac:	021a      	lsls	r2, r3, #8
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	430a      	orrs	r2, r1
 8006eb4:	61da      	str	r2, [r3, #28]
      break;
 8006eb6:	e043      	b.n	8006f40 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	68b9      	ldr	r1, [r7, #8]
 8006ebe:	4618      	mov	r0, r3
 8006ec0:	f000 fc82 	bl	80077c8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	f042 0208 	orr.w	r2, r2, #8
 8006ed2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	f022 0204 	bic.w	r2, r2, #4
 8006ee2:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8006eea:	68bb      	ldr	r3, [r7, #8]
 8006eec:	691a      	ldr	r2, [r3, #16]
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	430a      	orrs	r2, r1
 8006ef4:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8006ef6:	e023      	b.n	8006f40 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	68b9      	ldr	r1, [r7, #8]
 8006efe:	4618      	mov	r0, r3
 8006f00:	f000 fccc 	bl	800789c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006f12:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006f22:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8006f2a:	68bb      	ldr	r3, [r7, #8]
 8006f2c:	691b      	ldr	r3, [r3, #16]
 8006f2e:	021a      	lsls	r2, r3, #8
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	430a      	orrs	r2, r1
 8006f36:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8006f38:	e002      	b.n	8006f40 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8006f3a:	2301      	movs	r3, #1
 8006f3c:	75fb      	strb	r3, [r7, #23]
      break;
 8006f3e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	2200      	movs	r2, #0
 8006f44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006f48:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f4a:	4618      	mov	r0, r3
 8006f4c:	3718      	adds	r7, #24
 8006f4e:	46bd      	mov	sp, r7
 8006f50:	bd80      	pop	{r7, pc}
 8006f52:	bf00      	nop

08006f54 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006f54:	b580      	push	{r7, lr}
 8006f56:	b084      	sub	sp, #16
 8006f58:	af00      	add	r7, sp, #0
 8006f5a:	6078      	str	r0, [r7, #4]
 8006f5c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006f5e:	2300      	movs	r3, #0
 8006f60:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006f68:	2b01      	cmp	r3, #1
 8006f6a:	d101      	bne.n	8006f70 <HAL_TIM_ConfigClockSource+0x1c>
 8006f6c:	2302      	movs	r3, #2
 8006f6e:	e0f6      	b.n	800715e <HAL_TIM_ConfigClockSource+0x20a>
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	2201      	movs	r2, #1
 8006f74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	2202      	movs	r2, #2
 8006f7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	689b      	ldr	r3, [r3, #8]
 8006f86:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006f88:	68bb      	ldr	r3, [r7, #8]
 8006f8a:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8006f8e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006f92:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006f94:	68bb      	ldr	r3, [r7, #8]
 8006f96:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006f9a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	68ba      	ldr	r2, [r7, #8]
 8006fa2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006fa4:	683b      	ldr	r3, [r7, #0]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	4a6f      	ldr	r2, [pc, #444]	; (8007168 <HAL_TIM_ConfigClockSource+0x214>)
 8006faa:	4293      	cmp	r3, r2
 8006fac:	f000 80c1 	beq.w	8007132 <HAL_TIM_ConfigClockSource+0x1de>
 8006fb0:	4a6d      	ldr	r2, [pc, #436]	; (8007168 <HAL_TIM_ConfigClockSource+0x214>)
 8006fb2:	4293      	cmp	r3, r2
 8006fb4:	f200 80c6 	bhi.w	8007144 <HAL_TIM_ConfigClockSource+0x1f0>
 8006fb8:	4a6c      	ldr	r2, [pc, #432]	; (800716c <HAL_TIM_ConfigClockSource+0x218>)
 8006fba:	4293      	cmp	r3, r2
 8006fbc:	f000 80b9 	beq.w	8007132 <HAL_TIM_ConfigClockSource+0x1de>
 8006fc0:	4a6a      	ldr	r2, [pc, #424]	; (800716c <HAL_TIM_ConfigClockSource+0x218>)
 8006fc2:	4293      	cmp	r3, r2
 8006fc4:	f200 80be 	bhi.w	8007144 <HAL_TIM_ConfigClockSource+0x1f0>
 8006fc8:	4a69      	ldr	r2, [pc, #420]	; (8007170 <HAL_TIM_ConfigClockSource+0x21c>)
 8006fca:	4293      	cmp	r3, r2
 8006fcc:	f000 80b1 	beq.w	8007132 <HAL_TIM_ConfigClockSource+0x1de>
 8006fd0:	4a67      	ldr	r2, [pc, #412]	; (8007170 <HAL_TIM_ConfigClockSource+0x21c>)
 8006fd2:	4293      	cmp	r3, r2
 8006fd4:	f200 80b6 	bhi.w	8007144 <HAL_TIM_ConfigClockSource+0x1f0>
 8006fd8:	4a66      	ldr	r2, [pc, #408]	; (8007174 <HAL_TIM_ConfigClockSource+0x220>)
 8006fda:	4293      	cmp	r3, r2
 8006fdc:	f000 80a9 	beq.w	8007132 <HAL_TIM_ConfigClockSource+0x1de>
 8006fe0:	4a64      	ldr	r2, [pc, #400]	; (8007174 <HAL_TIM_ConfigClockSource+0x220>)
 8006fe2:	4293      	cmp	r3, r2
 8006fe4:	f200 80ae 	bhi.w	8007144 <HAL_TIM_ConfigClockSource+0x1f0>
 8006fe8:	4a63      	ldr	r2, [pc, #396]	; (8007178 <HAL_TIM_ConfigClockSource+0x224>)
 8006fea:	4293      	cmp	r3, r2
 8006fec:	f000 80a1 	beq.w	8007132 <HAL_TIM_ConfigClockSource+0x1de>
 8006ff0:	4a61      	ldr	r2, [pc, #388]	; (8007178 <HAL_TIM_ConfigClockSource+0x224>)
 8006ff2:	4293      	cmp	r3, r2
 8006ff4:	f200 80a6 	bhi.w	8007144 <HAL_TIM_ConfigClockSource+0x1f0>
 8006ff8:	4a60      	ldr	r2, [pc, #384]	; (800717c <HAL_TIM_ConfigClockSource+0x228>)
 8006ffa:	4293      	cmp	r3, r2
 8006ffc:	f000 8099 	beq.w	8007132 <HAL_TIM_ConfigClockSource+0x1de>
 8007000:	4a5e      	ldr	r2, [pc, #376]	; (800717c <HAL_TIM_ConfigClockSource+0x228>)
 8007002:	4293      	cmp	r3, r2
 8007004:	f200 809e 	bhi.w	8007144 <HAL_TIM_ConfigClockSource+0x1f0>
 8007008:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800700c:	f000 8091 	beq.w	8007132 <HAL_TIM_ConfigClockSource+0x1de>
 8007010:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8007014:	f200 8096 	bhi.w	8007144 <HAL_TIM_ConfigClockSource+0x1f0>
 8007018:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800701c:	f000 8089 	beq.w	8007132 <HAL_TIM_ConfigClockSource+0x1de>
 8007020:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007024:	f200 808e 	bhi.w	8007144 <HAL_TIM_ConfigClockSource+0x1f0>
 8007028:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800702c:	d03e      	beq.n	80070ac <HAL_TIM_ConfigClockSource+0x158>
 800702e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007032:	f200 8087 	bhi.w	8007144 <HAL_TIM_ConfigClockSource+0x1f0>
 8007036:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800703a:	f000 8086 	beq.w	800714a <HAL_TIM_ConfigClockSource+0x1f6>
 800703e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007042:	d87f      	bhi.n	8007144 <HAL_TIM_ConfigClockSource+0x1f0>
 8007044:	2b70      	cmp	r3, #112	; 0x70
 8007046:	d01a      	beq.n	800707e <HAL_TIM_ConfigClockSource+0x12a>
 8007048:	2b70      	cmp	r3, #112	; 0x70
 800704a:	d87b      	bhi.n	8007144 <HAL_TIM_ConfigClockSource+0x1f0>
 800704c:	2b60      	cmp	r3, #96	; 0x60
 800704e:	d050      	beq.n	80070f2 <HAL_TIM_ConfigClockSource+0x19e>
 8007050:	2b60      	cmp	r3, #96	; 0x60
 8007052:	d877      	bhi.n	8007144 <HAL_TIM_ConfigClockSource+0x1f0>
 8007054:	2b50      	cmp	r3, #80	; 0x50
 8007056:	d03c      	beq.n	80070d2 <HAL_TIM_ConfigClockSource+0x17e>
 8007058:	2b50      	cmp	r3, #80	; 0x50
 800705a:	d873      	bhi.n	8007144 <HAL_TIM_ConfigClockSource+0x1f0>
 800705c:	2b40      	cmp	r3, #64	; 0x40
 800705e:	d058      	beq.n	8007112 <HAL_TIM_ConfigClockSource+0x1be>
 8007060:	2b40      	cmp	r3, #64	; 0x40
 8007062:	d86f      	bhi.n	8007144 <HAL_TIM_ConfigClockSource+0x1f0>
 8007064:	2b30      	cmp	r3, #48	; 0x30
 8007066:	d064      	beq.n	8007132 <HAL_TIM_ConfigClockSource+0x1de>
 8007068:	2b30      	cmp	r3, #48	; 0x30
 800706a:	d86b      	bhi.n	8007144 <HAL_TIM_ConfigClockSource+0x1f0>
 800706c:	2b20      	cmp	r3, #32
 800706e:	d060      	beq.n	8007132 <HAL_TIM_ConfigClockSource+0x1de>
 8007070:	2b20      	cmp	r3, #32
 8007072:	d867      	bhi.n	8007144 <HAL_TIM_ConfigClockSource+0x1f0>
 8007074:	2b00      	cmp	r3, #0
 8007076:	d05c      	beq.n	8007132 <HAL_TIM_ConfigClockSource+0x1de>
 8007078:	2b10      	cmp	r3, #16
 800707a:	d05a      	beq.n	8007132 <HAL_TIM_ConfigClockSource+0x1de>
 800707c:	e062      	b.n	8007144 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	6818      	ldr	r0, [r3, #0]
 8007082:	683b      	ldr	r3, [r7, #0]
 8007084:	6899      	ldr	r1, [r3, #8]
 8007086:	683b      	ldr	r3, [r7, #0]
 8007088:	685a      	ldr	r2, [r3, #4]
 800708a:	683b      	ldr	r3, [r7, #0]
 800708c:	68db      	ldr	r3, [r3, #12]
 800708e:	f000 fe17 	bl	8007cc0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	689b      	ldr	r3, [r3, #8]
 8007098:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800709a:	68bb      	ldr	r3, [r7, #8]
 800709c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80070a0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	68ba      	ldr	r2, [r7, #8]
 80070a8:	609a      	str	r2, [r3, #8]
      break;
 80070aa:	e04f      	b.n	800714c <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	6818      	ldr	r0, [r3, #0]
 80070b0:	683b      	ldr	r3, [r7, #0]
 80070b2:	6899      	ldr	r1, [r3, #8]
 80070b4:	683b      	ldr	r3, [r7, #0]
 80070b6:	685a      	ldr	r2, [r3, #4]
 80070b8:	683b      	ldr	r3, [r7, #0]
 80070ba:	68db      	ldr	r3, [r3, #12]
 80070bc:	f000 fe00 	bl	8007cc0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	689a      	ldr	r2, [r3, #8]
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80070ce:	609a      	str	r2, [r3, #8]
      break;
 80070d0:	e03c      	b.n	800714c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	6818      	ldr	r0, [r3, #0]
 80070d6:	683b      	ldr	r3, [r7, #0]
 80070d8:	6859      	ldr	r1, [r3, #4]
 80070da:	683b      	ldr	r3, [r7, #0]
 80070dc:	68db      	ldr	r3, [r3, #12]
 80070de:	461a      	mov	r2, r3
 80070e0:	f000 fcbc 	bl	8007a5c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	2150      	movs	r1, #80	; 0x50
 80070ea:	4618      	mov	r0, r3
 80070ec:	f000 fdcb 	bl	8007c86 <TIM_ITRx_SetConfig>
      break;
 80070f0:	e02c      	b.n	800714c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	6818      	ldr	r0, [r3, #0]
 80070f6:	683b      	ldr	r3, [r7, #0]
 80070f8:	6859      	ldr	r1, [r3, #4]
 80070fa:	683b      	ldr	r3, [r7, #0]
 80070fc:	68db      	ldr	r3, [r3, #12]
 80070fe:	461a      	mov	r2, r3
 8007100:	f000 fd18 	bl	8007b34 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	2160      	movs	r1, #96	; 0x60
 800710a:	4618      	mov	r0, r3
 800710c:	f000 fdbb 	bl	8007c86 <TIM_ITRx_SetConfig>
      break;
 8007110:	e01c      	b.n	800714c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	6818      	ldr	r0, [r3, #0]
 8007116:	683b      	ldr	r3, [r7, #0]
 8007118:	6859      	ldr	r1, [r3, #4]
 800711a:	683b      	ldr	r3, [r7, #0]
 800711c:	68db      	ldr	r3, [r3, #12]
 800711e:	461a      	mov	r2, r3
 8007120:	f000 fc9c 	bl	8007a5c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	2140      	movs	r1, #64	; 0x40
 800712a:	4618      	mov	r0, r3
 800712c:	f000 fdab 	bl	8007c86 <TIM_ITRx_SetConfig>
      break;
 8007130:	e00c      	b.n	800714c <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681a      	ldr	r2, [r3, #0]
 8007136:	683b      	ldr	r3, [r7, #0]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	4619      	mov	r1, r3
 800713c:	4610      	mov	r0, r2
 800713e:	f000 fda2 	bl	8007c86 <TIM_ITRx_SetConfig>
      break;
 8007142:	e003      	b.n	800714c <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8007144:	2301      	movs	r3, #1
 8007146:	73fb      	strb	r3, [r7, #15]
      break;
 8007148:	e000      	b.n	800714c <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 800714a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	2201      	movs	r2, #1
 8007150:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	2200      	movs	r2, #0
 8007158:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800715c:	7bfb      	ldrb	r3, [r7, #15]
}
 800715e:	4618      	mov	r0, r3
 8007160:	3710      	adds	r7, #16
 8007162:	46bd      	mov	sp, r7
 8007164:	bd80      	pop	{r7, pc}
 8007166:	bf00      	nop
 8007168:	00100070 	.word	0x00100070
 800716c:	00100060 	.word	0x00100060
 8007170:	00100050 	.word	0x00100050
 8007174:	00100040 	.word	0x00100040
 8007178:	00100030 	.word	0x00100030
 800717c:	00100020 	.word	0x00100020

08007180 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007180:	b480      	push	{r7}
 8007182:	b083      	sub	sp, #12
 8007184:	af00      	add	r7, sp, #0
 8007186:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007188:	bf00      	nop
 800718a:	370c      	adds	r7, #12
 800718c:	46bd      	mov	sp, r7
 800718e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007192:	4770      	bx	lr

08007194 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007194:	b480      	push	{r7}
 8007196:	b083      	sub	sp, #12
 8007198:	af00      	add	r7, sp, #0
 800719a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800719c:	bf00      	nop
 800719e:	370c      	adds	r7, #12
 80071a0:	46bd      	mov	sp, r7
 80071a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a6:	4770      	bx	lr

080071a8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80071a8:	b480      	push	{r7}
 80071aa:	b083      	sub	sp, #12
 80071ac:	af00      	add	r7, sp, #0
 80071ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80071b0:	bf00      	nop
 80071b2:	370c      	adds	r7, #12
 80071b4:	46bd      	mov	sp, r7
 80071b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ba:	4770      	bx	lr

080071bc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80071bc:	b480      	push	{r7}
 80071be:	b083      	sub	sp, #12
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80071c4:	bf00      	nop
 80071c6:	370c      	adds	r7, #12
 80071c8:	46bd      	mov	sp, r7
 80071ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ce:	4770      	bx	lr

080071d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80071d0:	b480      	push	{r7}
 80071d2:	b085      	sub	sp, #20
 80071d4:	af00      	add	r7, sp, #0
 80071d6:	6078      	str	r0, [r7, #4]
 80071d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	4a46      	ldr	r2, [pc, #280]	; (80072fc <TIM_Base_SetConfig+0x12c>)
 80071e4:	4293      	cmp	r3, r2
 80071e6:	d017      	beq.n	8007218 <TIM_Base_SetConfig+0x48>
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80071ee:	d013      	beq.n	8007218 <TIM_Base_SetConfig+0x48>
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	4a43      	ldr	r2, [pc, #268]	; (8007300 <TIM_Base_SetConfig+0x130>)
 80071f4:	4293      	cmp	r3, r2
 80071f6:	d00f      	beq.n	8007218 <TIM_Base_SetConfig+0x48>
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	4a42      	ldr	r2, [pc, #264]	; (8007304 <TIM_Base_SetConfig+0x134>)
 80071fc:	4293      	cmp	r3, r2
 80071fe:	d00b      	beq.n	8007218 <TIM_Base_SetConfig+0x48>
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	4a41      	ldr	r2, [pc, #260]	; (8007308 <TIM_Base_SetConfig+0x138>)
 8007204:	4293      	cmp	r3, r2
 8007206:	d007      	beq.n	8007218 <TIM_Base_SetConfig+0x48>
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	4a40      	ldr	r2, [pc, #256]	; (800730c <TIM_Base_SetConfig+0x13c>)
 800720c:	4293      	cmp	r3, r2
 800720e:	d003      	beq.n	8007218 <TIM_Base_SetConfig+0x48>
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	4a3f      	ldr	r2, [pc, #252]	; (8007310 <TIM_Base_SetConfig+0x140>)
 8007214:	4293      	cmp	r3, r2
 8007216:	d108      	bne.n	800722a <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800721e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007220:	683b      	ldr	r3, [r7, #0]
 8007222:	685b      	ldr	r3, [r3, #4]
 8007224:	68fa      	ldr	r2, [r7, #12]
 8007226:	4313      	orrs	r3, r2
 8007228:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	4a33      	ldr	r2, [pc, #204]	; (80072fc <TIM_Base_SetConfig+0x12c>)
 800722e:	4293      	cmp	r3, r2
 8007230:	d023      	beq.n	800727a <TIM_Base_SetConfig+0xaa>
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007238:	d01f      	beq.n	800727a <TIM_Base_SetConfig+0xaa>
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	4a30      	ldr	r2, [pc, #192]	; (8007300 <TIM_Base_SetConfig+0x130>)
 800723e:	4293      	cmp	r3, r2
 8007240:	d01b      	beq.n	800727a <TIM_Base_SetConfig+0xaa>
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	4a2f      	ldr	r2, [pc, #188]	; (8007304 <TIM_Base_SetConfig+0x134>)
 8007246:	4293      	cmp	r3, r2
 8007248:	d017      	beq.n	800727a <TIM_Base_SetConfig+0xaa>
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	4a2e      	ldr	r2, [pc, #184]	; (8007308 <TIM_Base_SetConfig+0x138>)
 800724e:	4293      	cmp	r3, r2
 8007250:	d013      	beq.n	800727a <TIM_Base_SetConfig+0xaa>
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	4a2d      	ldr	r2, [pc, #180]	; (800730c <TIM_Base_SetConfig+0x13c>)
 8007256:	4293      	cmp	r3, r2
 8007258:	d00f      	beq.n	800727a <TIM_Base_SetConfig+0xaa>
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	4a2d      	ldr	r2, [pc, #180]	; (8007314 <TIM_Base_SetConfig+0x144>)
 800725e:	4293      	cmp	r3, r2
 8007260:	d00b      	beq.n	800727a <TIM_Base_SetConfig+0xaa>
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	4a2c      	ldr	r2, [pc, #176]	; (8007318 <TIM_Base_SetConfig+0x148>)
 8007266:	4293      	cmp	r3, r2
 8007268:	d007      	beq.n	800727a <TIM_Base_SetConfig+0xaa>
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	4a2b      	ldr	r2, [pc, #172]	; (800731c <TIM_Base_SetConfig+0x14c>)
 800726e:	4293      	cmp	r3, r2
 8007270:	d003      	beq.n	800727a <TIM_Base_SetConfig+0xaa>
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	4a26      	ldr	r2, [pc, #152]	; (8007310 <TIM_Base_SetConfig+0x140>)
 8007276:	4293      	cmp	r3, r2
 8007278:	d108      	bne.n	800728c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007280:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007282:	683b      	ldr	r3, [r7, #0]
 8007284:	68db      	ldr	r3, [r3, #12]
 8007286:	68fa      	ldr	r2, [r7, #12]
 8007288:	4313      	orrs	r3, r2
 800728a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007292:	683b      	ldr	r3, [r7, #0]
 8007294:	695b      	ldr	r3, [r3, #20]
 8007296:	4313      	orrs	r3, r2
 8007298:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	68fa      	ldr	r2, [r7, #12]
 800729e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80072a0:	683b      	ldr	r3, [r7, #0]
 80072a2:	689a      	ldr	r2, [r3, #8]
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80072a8:	683b      	ldr	r3, [r7, #0]
 80072aa:	681a      	ldr	r2, [r3, #0]
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	4a12      	ldr	r2, [pc, #72]	; (80072fc <TIM_Base_SetConfig+0x12c>)
 80072b4:	4293      	cmp	r3, r2
 80072b6:	d013      	beq.n	80072e0 <TIM_Base_SetConfig+0x110>
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	4a14      	ldr	r2, [pc, #80]	; (800730c <TIM_Base_SetConfig+0x13c>)
 80072bc:	4293      	cmp	r3, r2
 80072be:	d00f      	beq.n	80072e0 <TIM_Base_SetConfig+0x110>
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	4a14      	ldr	r2, [pc, #80]	; (8007314 <TIM_Base_SetConfig+0x144>)
 80072c4:	4293      	cmp	r3, r2
 80072c6:	d00b      	beq.n	80072e0 <TIM_Base_SetConfig+0x110>
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	4a13      	ldr	r2, [pc, #76]	; (8007318 <TIM_Base_SetConfig+0x148>)
 80072cc:	4293      	cmp	r3, r2
 80072ce:	d007      	beq.n	80072e0 <TIM_Base_SetConfig+0x110>
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	4a12      	ldr	r2, [pc, #72]	; (800731c <TIM_Base_SetConfig+0x14c>)
 80072d4:	4293      	cmp	r3, r2
 80072d6:	d003      	beq.n	80072e0 <TIM_Base_SetConfig+0x110>
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	4a0d      	ldr	r2, [pc, #52]	; (8007310 <TIM_Base_SetConfig+0x140>)
 80072dc:	4293      	cmp	r3, r2
 80072de:	d103      	bne.n	80072e8 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80072e0:	683b      	ldr	r3, [r7, #0]
 80072e2:	691a      	ldr	r2, [r3, #16]
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	2201      	movs	r2, #1
 80072ec:	615a      	str	r2, [r3, #20]
}
 80072ee:	bf00      	nop
 80072f0:	3714      	adds	r7, #20
 80072f2:	46bd      	mov	sp, r7
 80072f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f8:	4770      	bx	lr
 80072fa:	bf00      	nop
 80072fc:	40012c00 	.word	0x40012c00
 8007300:	40000400 	.word	0x40000400
 8007304:	40000800 	.word	0x40000800
 8007308:	40000c00 	.word	0x40000c00
 800730c:	40013400 	.word	0x40013400
 8007310:	40015000 	.word	0x40015000
 8007314:	40014000 	.word	0x40014000
 8007318:	40014400 	.word	0x40014400
 800731c:	40014800 	.word	0x40014800

08007320 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007320:	b480      	push	{r7}
 8007322:	b087      	sub	sp, #28
 8007324:	af00      	add	r7, sp, #0
 8007326:	6078      	str	r0, [r7, #4]
 8007328:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	6a1b      	ldr	r3, [r3, #32]
 800732e:	f023 0201 	bic.w	r2, r3, #1
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	6a1b      	ldr	r3, [r3, #32]
 800733a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	685b      	ldr	r3, [r3, #4]
 8007340:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	699b      	ldr	r3, [r3, #24]
 8007346:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800734e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007352:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	f023 0303 	bic.w	r3, r3, #3
 800735a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800735c:	683b      	ldr	r3, [r7, #0]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	68fa      	ldr	r2, [r7, #12]
 8007362:	4313      	orrs	r3, r2
 8007364:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007366:	697b      	ldr	r3, [r7, #20]
 8007368:	f023 0302 	bic.w	r3, r3, #2
 800736c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800736e:	683b      	ldr	r3, [r7, #0]
 8007370:	689b      	ldr	r3, [r3, #8]
 8007372:	697a      	ldr	r2, [r7, #20]
 8007374:	4313      	orrs	r3, r2
 8007376:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	4a30      	ldr	r2, [pc, #192]	; (800743c <TIM_OC1_SetConfig+0x11c>)
 800737c:	4293      	cmp	r3, r2
 800737e:	d013      	beq.n	80073a8 <TIM_OC1_SetConfig+0x88>
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	4a2f      	ldr	r2, [pc, #188]	; (8007440 <TIM_OC1_SetConfig+0x120>)
 8007384:	4293      	cmp	r3, r2
 8007386:	d00f      	beq.n	80073a8 <TIM_OC1_SetConfig+0x88>
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	4a2e      	ldr	r2, [pc, #184]	; (8007444 <TIM_OC1_SetConfig+0x124>)
 800738c:	4293      	cmp	r3, r2
 800738e:	d00b      	beq.n	80073a8 <TIM_OC1_SetConfig+0x88>
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	4a2d      	ldr	r2, [pc, #180]	; (8007448 <TIM_OC1_SetConfig+0x128>)
 8007394:	4293      	cmp	r3, r2
 8007396:	d007      	beq.n	80073a8 <TIM_OC1_SetConfig+0x88>
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	4a2c      	ldr	r2, [pc, #176]	; (800744c <TIM_OC1_SetConfig+0x12c>)
 800739c:	4293      	cmp	r3, r2
 800739e:	d003      	beq.n	80073a8 <TIM_OC1_SetConfig+0x88>
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	4a2b      	ldr	r2, [pc, #172]	; (8007450 <TIM_OC1_SetConfig+0x130>)
 80073a4:	4293      	cmp	r3, r2
 80073a6:	d10c      	bne.n	80073c2 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80073a8:	697b      	ldr	r3, [r7, #20]
 80073aa:	f023 0308 	bic.w	r3, r3, #8
 80073ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80073b0:	683b      	ldr	r3, [r7, #0]
 80073b2:	68db      	ldr	r3, [r3, #12]
 80073b4:	697a      	ldr	r2, [r7, #20]
 80073b6:	4313      	orrs	r3, r2
 80073b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80073ba:	697b      	ldr	r3, [r7, #20]
 80073bc:	f023 0304 	bic.w	r3, r3, #4
 80073c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	4a1d      	ldr	r2, [pc, #116]	; (800743c <TIM_OC1_SetConfig+0x11c>)
 80073c6:	4293      	cmp	r3, r2
 80073c8:	d013      	beq.n	80073f2 <TIM_OC1_SetConfig+0xd2>
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	4a1c      	ldr	r2, [pc, #112]	; (8007440 <TIM_OC1_SetConfig+0x120>)
 80073ce:	4293      	cmp	r3, r2
 80073d0:	d00f      	beq.n	80073f2 <TIM_OC1_SetConfig+0xd2>
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	4a1b      	ldr	r2, [pc, #108]	; (8007444 <TIM_OC1_SetConfig+0x124>)
 80073d6:	4293      	cmp	r3, r2
 80073d8:	d00b      	beq.n	80073f2 <TIM_OC1_SetConfig+0xd2>
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	4a1a      	ldr	r2, [pc, #104]	; (8007448 <TIM_OC1_SetConfig+0x128>)
 80073de:	4293      	cmp	r3, r2
 80073e0:	d007      	beq.n	80073f2 <TIM_OC1_SetConfig+0xd2>
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	4a19      	ldr	r2, [pc, #100]	; (800744c <TIM_OC1_SetConfig+0x12c>)
 80073e6:	4293      	cmp	r3, r2
 80073e8:	d003      	beq.n	80073f2 <TIM_OC1_SetConfig+0xd2>
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	4a18      	ldr	r2, [pc, #96]	; (8007450 <TIM_OC1_SetConfig+0x130>)
 80073ee:	4293      	cmp	r3, r2
 80073f0:	d111      	bne.n	8007416 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80073f2:	693b      	ldr	r3, [r7, #16]
 80073f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80073f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80073fa:	693b      	ldr	r3, [r7, #16]
 80073fc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007400:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007402:	683b      	ldr	r3, [r7, #0]
 8007404:	695b      	ldr	r3, [r3, #20]
 8007406:	693a      	ldr	r2, [r7, #16]
 8007408:	4313      	orrs	r3, r2
 800740a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800740c:	683b      	ldr	r3, [r7, #0]
 800740e:	699b      	ldr	r3, [r3, #24]
 8007410:	693a      	ldr	r2, [r7, #16]
 8007412:	4313      	orrs	r3, r2
 8007414:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	693a      	ldr	r2, [r7, #16]
 800741a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	68fa      	ldr	r2, [r7, #12]
 8007420:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007422:	683b      	ldr	r3, [r7, #0]
 8007424:	685a      	ldr	r2, [r3, #4]
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	697a      	ldr	r2, [r7, #20]
 800742e:	621a      	str	r2, [r3, #32]
}
 8007430:	bf00      	nop
 8007432:	371c      	adds	r7, #28
 8007434:	46bd      	mov	sp, r7
 8007436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800743a:	4770      	bx	lr
 800743c:	40012c00 	.word	0x40012c00
 8007440:	40013400 	.word	0x40013400
 8007444:	40014000 	.word	0x40014000
 8007448:	40014400 	.word	0x40014400
 800744c:	40014800 	.word	0x40014800
 8007450:	40015000 	.word	0x40015000

08007454 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007454:	b480      	push	{r7}
 8007456:	b087      	sub	sp, #28
 8007458:	af00      	add	r7, sp, #0
 800745a:	6078      	str	r0, [r7, #4]
 800745c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	6a1b      	ldr	r3, [r3, #32]
 8007462:	f023 0210 	bic.w	r2, r3, #16
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	6a1b      	ldr	r3, [r3, #32]
 800746e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	685b      	ldr	r3, [r3, #4]
 8007474:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	699b      	ldr	r3, [r3, #24]
 800747a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007482:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007486:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800748e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007490:	683b      	ldr	r3, [r7, #0]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	021b      	lsls	r3, r3, #8
 8007496:	68fa      	ldr	r2, [r7, #12]
 8007498:	4313      	orrs	r3, r2
 800749a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800749c:	697b      	ldr	r3, [r7, #20]
 800749e:	f023 0320 	bic.w	r3, r3, #32
 80074a2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80074a4:	683b      	ldr	r3, [r7, #0]
 80074a6:	689b      	ldr	r3, [r3, #8]
 80074a8:	011b      	lsls	r3, r3, #4
 80074aa:	697a      	ldr	r2, [r7, #20]
 80074ac:	4313      	orrs	r3, r2
 80074ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	4a2c      	ldr	r2, [pc, #176]	; (8007564 <TIM_OC2_SetConfig+0x110>)
 80074b4:	4293      	cmp	r3, r2
 80074b6:	d007      	beq.n	80074c8 <TIM_OC2_SetConfig+0x74>
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	4a2b      	ldr	r2, [pc, #172]	; (8007568 <TIM_OC2_SetConfig+0x114>)
 80074bc:	4293      	cmp	r3, r2
 80074be:	d003      	beq.n	80074c8 <TIM_OC2_SetConfig+0x74>
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	4a2a      	ldr	r2, [pc, #168]	; (800756c <TIM_OC2_SetConfig+0x118>)
 80074c4:	4293      	cmp	r3, r2
 80074c6:	d10d      	bne.n	80074e4 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80074c8:	697b      	ldr	r3, [r7, #20]
 80074ca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80074ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80074d0:	683b      	ldr	r3, [r7, #0]
 80074d2:	68db      	ldr	r3, [r3, #12]
 80074d4:	011b      	lsls	r3, r3, #4
 80074d6:	697a      	ldr	r2, [r7, #20]
 80074d8:	4313      	orrs	r3, r2
 80074da:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80074dc:	697b      	ldr	r3, [r7, #20]
 80074de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80074e2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	4a1f      	ldr	r2, [pc, #124]	; (8007564 <TIM_OC2_SetConfig+0x110>)
 80074e8:	4293      	cmp	r3, r2
 80074ea:	d013      	beq.n	8007514 <TIM_OC2_SetConfig+0xc0>
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	4a1e      	ldr	r2, [pc, #120]	; (8007568 <TIM_OC2_SetConfig+0x114>)
 80074f0:	4293      	cmp	r3, r2
 80074f2:	d00f      	beq.n	8007514 <TIM_OC2_SetConfig+0xc0>
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	4a1e      	ldr	r2, [pc, #120]	; (8007570 <TIM_OC2_SetConfig+0x11c>)
 80074f8:	4293      	cmp	r3, r2
 80074fa:	d00b      	beq.n	8007514 <TIM_OC2_SetConfig+0xc0>
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	4a1d      	ldr	r2, [pc, #116]	; (8007574 <TIM_OC2_SetConfig+0x120>)
 8007500:	4293      	cmp	r3, r2
 8007502:	d007      	beq.n	8007514 <TIM_OC2_SetConfig+0xc0>
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	4a1c      	ldr	r2, [pc, #112]	; (8007578 <TIM_OC2_SetConfig+0x124>)
 8007508:	4293      	cmp	r3, r2
 800750a:	d003      	beq.n	8007514 <TIM_OC2_SetConfig+0xc0>
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	4a17      	ldr	r2, [pc, #92]	; (800756c <TIM_OC2_SetConfig+0x118>)
 8007510:	4293      	cmp	r3, r2
 8007512:	d113      	bne.n	800753c <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007514:	693b      	ldr	r3, [r7, #16]
 8007516:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800751a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800751c:	693b      	ldr	r3, [r7, #16]
 800751e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007522:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007524:	683b      	ldr	r3, [r7, #0]
 8007526:	695b      	ldr	r3, [r3, #20]
 8007528:	009b      	lsls	r3, r3, #2
 800752a:	693a      	ldr	r2, [r7, #16]
 800752c:	4313      	orrs	r3, r2
 800752e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007530:	683b      	ldr	r3, [r7, #0]
 8007532:	699b      	ldr	r3, [r3, #24]
 8007534:	009b      	lsls	r3, r3, #2
 8007536:	693a      	ldr	r2, [r7, #16]
 8007538:	4313      	orrs	r3, r2
 800753a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	693a      	ldr	r2, [r7, #16]
 8007540:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	68fa      	ldr	r2, [r7, #12]
 8007546:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007548:	683b      	ldr	r3, [r7, #0]
 800754a:	685a      	ldr	r2, [r3, #4]
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	697a      	ldr	r2, [r7, #20]
 8007554:	621a      	str	r2, [r3, #32]
}
 8007556:	bf00      	nop
 8007558:	371c      	adds	r7, #28
 800755a:	46bd      	mov	sp, r7
 800755c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007560:	4770      	bx	lr
 8007562:	bf00      	nop
 8007564:	40012c00 	.word	0x40012c00
 8007568:	40013400 	.word	0x40013400
 800756c:	40015000 	.word	0x40015000
 8007570:	40014000 	.word	0x40014000
 8007574:	40014400 	.word	0x40014400
 8007578:	40014800 	.word	0x40014800

0800757c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800757c:	b480      	push	{r7}
 800757e:	b087      	sub	sp, #28
 8007580:	af00      	add	r7, sp, #0
 8007582:	6078      	str	r0, [r7, #4]
 8007584:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	6a1b      	ldr	r3, [r3, #32]
 800758a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	6a1b      	ldr	r3, [r3, #32]
 8007596:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	685b      	ldr	r3, [r3, #4]
 800759c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	69db      	ldr	r3, [r3, #28]
 80075a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80075aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80075ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	f023 0303 	bic.w	r3, r3, #3
 80075b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80075b8:	683b      	ldr	r3, [r7, #0]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	68fa      	ldr	r2, [r7, #12]
 80075be:	4313      	orrs	r3, r2
 80075c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80075c2:	697b      	ldr	r3, [r7, #20]
 80075c4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80075c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80075ca:	683b      	ldr	r3, [r7, #0]
 80075cc:	689b      	ldr	r3, [r3, #8]
 80075ce:	021b      	lsls	r3, r3, #8
 80075d0:	697a      	ldr	r2, [r7, #20]
 80075d2:	4313      	orrs	r3, r2
 80075d4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	4a2b      	ldr	r2, [pc, #172]	; (8007688 <TIM_OC3_SetConfig+0x10c>)
 80075da:	4293      	cmp	r3, r2
 80075dc:	d007      	beq.n	80075ee <TIM_OC3_SetConfig+0x72>
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	4a2a      	ldr	r2, [pc, #168]	; (800768c <TIM_OC3_SetConfig+0x110>)
 80075e2:	4293      	cmp	r3, r2
 80075e4:	d003      	beq.n	80075ee <TIM_OC3_SetConfig+0x72>
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	4a29      	ldr	r2, [pc, #164]	; (8007690 <TIM_OC3_SetConfig+0x114>)
 80075ea:	4293      	cmp	r3, r2
 80075ec:	d10d      	bne.n	800760a <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80075ee:	697b      	ldr	r3, [r7, #20]
 80075f0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80075f4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80075f6:	683b      	ldr	r3, [r7, #0]
 80075f8:	68db      	ldr	r3, [r3, #12]
 80075fa:	021b      	lsls	r3, r3, #8
 80075fc:	697a      	ldr	r2, [r7, #20]
 80075fe:	4313      	orrs	r3, r2
 8007600:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007602:	697b      	ldr	r3, [r7, #20]
 8007604:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007608:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	4a1e      	ldr	r2, [pc, #120]	; (8007688 <TIM_OC3_SetConfig+0x10c>)
 800760e:	4293      	cmp	r3, r2
 8007610:	d013      	beq.n	800763a <TIM_OC3_SetConfig+0xbe>
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	4a1d      	ldr	r2, [pc, #116]	; (800768c <TIM_OC3_SetConfig+0x110>)
 8007616:	4293      	cmp	r3, r2
 8007618:	d00f      	beq.n	800763a <TIM_OC3_SetConfig+0xbe>
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	4a1d      	ldr	r2, [pc, #116]	; (8007694 <TIM_OC3_SetConfig+0x118>)
 800761e:	4293      	cmp	r3, r2
 8007620:	d00b      	beq.n	800763a <TIM_OC3_SetConfig+0xbe>
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	4a1c      	ldr	r2, [pc, #112]	; (8007698 <TIM_OC3_SetConfig+0x11c>)
 8007626:	4293      	cmp	r3, r2
 8007628:	d007      	beq.n	800763a <TIM_OC3_SetConfig+0xbe>
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	4a1b      	ldr	r2, [pc, #108]	; (800769c <TIM_OC3_SetConfig+0x120>)
 800762e:	4293      	cmp	r3, r2
 8007630:	d003      	beq.n	800763a <TIM_OC3_SetConfig+0xbe>
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	4a16      	ldr	r2, [pc, #88]	; (8007690 <TIM_OC3_SetConfig+0x114>)
 8007636:	4293      	cmp	r3, r2
 8007638:	d113      	bne.n	8007662 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800763a:	693b      	ldr	r3, [r7, #16]
 800763c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007640:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007642:	693b      	ldr	r3, [r7, #16]
 8007644:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007648:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800764a:	683b      	ldr	r3, [r7, #0]
 800764c:	695b      	ldr	r3, [r3, #20]
 800764e:	011b      	lsls	r3, r3, #4
 8007650:	693a      	ldr	r2, [r7, #16]
 8007652:	4313      	orrs	r3, r2
 8007654:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007656:	683b      	ldr	r3, [r7, #0]
 8007658:	699b      	ldr	r3, [r3, #24]
 800765a:	011b      	lsls	r3, r3, #4
 800765c:	693a      	ldr	r2, [r7, #16]
 800765e:	4313      	orrs	r3, r2
 8007660:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	693a      	ldr	r2, [r7, #16]
 8007666:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	68fa      	ldr	r2, [r7, #12]
 800766c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800766e:	683b      	ldr	r3, [r7, #0]
 8007670:	685a      	ldr	r2, [r3, #4]
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	697a      	ldr	r2, [r7, #20]
 800767a:	621a      	str	r2, [r3, #32]
}
 800767c:	bf00      	nop
 800767e:	371c      	adds	r7, #28
 8007680:	46bd      	mov	sp, r7
 8007682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007686:	4770      	bx	lr
 8007688:	40012c00 	.word	0x40012c00
 800768c:	40013400 	.word	0x40013400
 8007690:	40015000 	.word	0x40015000
 8007694:	40014000 	.word	0x40014000
 8007698:	40014400 	.word	0x40014400
 800769c:	40014800 	.word	0x40014800

080076a0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80076a0:	b480      	push	{r7}
 80076a2:	b087      	sub	sp, #28
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	6078      	str	r0, [r7, #4]
 80076a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	6a1b      	ldr	r3, [r3, #32]
 80076ae:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	6a1b      	ldr	r3, [r3, #32]
 80076ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	685b      	ldr	r3, [r3, #4]
 80076c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	69db      	ldr	r3, [r3, #28]
 80076c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80076ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80076d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80076da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80076dc:	683b      	ldr	r3, [r7, #0]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	021b      	lsls	r3, r3, #8
 80076e2:	68fa      	ldr	r2, [r7, #12]
 80076e4:	4313      	orrs	r3, r2
 80076e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80076e8:	697b      	ldr	r3, [r7, #20]
 80076ea:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80076ee:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80076f0:	683b      	ldr	r3, [r7, #0]
 80076f2:	689b      	ldr	r3, [r3, #8]
 80076f4:	031b      	lsls	r3, r3, #12
 80076f6:	697a      	ldr	r2, [r7, #20]
 80076f8:	4313      	orrs	r3, r2
 80076fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	4a2c      	ldr	r2, [pc, #176]	; (80077b0 <TIM_OC4_SetConfig+0x110>)
 8007700:	4293      	cmp	r3, r2
 8007702:	d007      	beq.n	8007714 <TIM_OC4_SetConfig+0x74>
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	4a2b      	ldr	r2, [pc, #172]	; (80077b4 <TIM_OC4_SetConfig+0x114>)
 8007708:	4293      	cmp	r3, r2
 800770a:	d003      	beq.n	8007714 <TIM_OC4_SetConfig+0x74>
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	4a2a      	ldr	r2, [pc, #168]	; (80077b8 <TIM_OC4_SetConfig+0x118>)
 8007710:	4293      	cmp	r3, r2
 8007712:	d10d      	bne.n	8007730 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8007714:	697b      	ldr	r3, [r7, #20]
 8007716:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800771a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800771c:	683b      	ldr	r3, [r7, #0]
 800771e:	68db      	ldr	r3, [r3, #12]
 8007720:	031b      	lsls	r3, r3, #12
 8007722:	697a      	ldr	r2, [r7, #20]
 8007724:	4313      	orrs	r3, r2
 8007726:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8007728:	697b      	ldr	r3, [r7, #20]
 800772a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800772e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	4a1f      	ldr	r2, [pc, #124]	; (80077b0 <TIM_OC4_SetConfig+0x110>)
 8007734:	4293      	cmp	r3, r2
 8007736:	d013      	beq.n	8007760 <TIM_OC4_SetConfig+0xc0>
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	4a1e      	ldr	r2, [pc, #120]	; (80077b4 <TIM_OC4_SetConfig+0x114>)
 800773c:	4293      	cmp	r3, r2
 800773e:	d00f      	beq.n	8007760 <TIM_OC4_SetConfig+0xc0>
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	4a1e      	ldr	r2, [pc, #120]	; (80077bc <TIM_OC4_SetConfig+0x11c>)
 8007744:	4293      	cmp	r3, r2
 8007746:	d00b      	beq.n	8007760 <TIM_OC4_SetConfig+0xc0>
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	4a1d      	ldr	r2, [pc, #116]	; (80077c0 <TIM_OC4_SetConfig+0x120>)
 800774c:	4293      	cmp	r3, r2
 800774e:	d007      	beq.n	8007760 <TIM_OC4_SetConfig+0xc0>
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	4a1c      	ldr	r2, [pc, #112]	; (80077c4 <TIM_OC4_SetConfig+0x124>)
 8007754:	4293      	cmp	r3, r2
 8007756:	d003      	beq.n	8007760 <TIM_OC4_SetConfig+0xc0>
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	4a17      	ldr	r2, [pc, #92]	; (80077b8 <TIM_OC4_SetConfig+0x118>)
 800775c:	4293      	cmp	r3, r2
 800775e:	d113      	bne.n	8007788 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007760:	693b      	ldr	r3, [r7, #16]
 8007762:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007766:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8007768:	693b      	ldr	r3, [r7, #16]
 800776a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800776e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007770:	683b      	ldr	r3, [r7, #0]
 8007772:	695b      	ldr	r3, [r3, #20]
 8007774:	019b      	lsls	r3, r3, #6
 8007776:	693a      	ldr	r2, [r7, #16]
 8007778:	4313      	orrs	r3, r2
 800777a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800777c:	683b      	ldr	r3, [r7, #0]
 800777e:	699b      	ldr	r3, [r3, #24]
 8007780:	019b      	lsls	r3, r3, #6
 8007782:	693a      	ldr	r2, [r7, #16]
 8007784:	4313      	orrs	r3, r2
 8007786:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	693a      	ldr	r2, [r7, #16]
 800778c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	68fa      	ldr	r2, [r7, #12]
 8007792:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007794:	683b      	ldr	r3, [r7, #0]
 8007796:	685a      	ldr	r2, [r3, #4]
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	697a      	ldr	r2, [r7, #20]
 80077a0:	621a      	str	r2, [r3, #32]
}
 80077a2:	bf00      	nop
 80077a4:	371c      	adds	r7, #28
 80077a6:	46bd      	mov	sp, r7
 80077a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ac:	4770      	bx	lr
 80077ae:	bf00      	nop
 80077b0:	40012c00 	.word	0x40012c00
 80077b4:	40013400 	.word	0x40013400
 80077b8:	40015000 	.word	0x40015000
 80077bc:	40014000 	.word	0x40014000
 80077c0:	40014400 	.word	0x40014400
 80077c4:	40014800 	.word	0x40014800

080077c8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80077c8:	b480      	push	{r7}
 80077ca:	b087      	sub	sp, #28
 80077cc:	af00      	add	r7, sp, #0
 80077ce:	6078      	str	r0, [r7, #4]
 80077d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	6a1b      	ldr	r3, [r3, #32]
 80077d6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	6a1b      	ldr	r3, [r3, #32]
 80077e2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	685b      	ldr	r3, [r3, #4]
 80077e8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80077ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80077f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80077fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80077fc:	683b      	ldr	r3, [r7, #0]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	68fa      	ldr	r2, [r7, #12]
 8007802:	4313      	orrs	r3, r2
 8007804:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007806:	693b      	ldr	r3, [r7, #16]
 8007808:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800780c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800780e:	683b      	ldr	r3, [r7, #0]
 8007810:	689b      	ldr	r3, [r3, #8]
 8007812:	041b      	lsls	r3, r3, #16
 8007814:	693a      	ldr	r2, [r7, #16]
 8007816:	4313      	orrs	r3, r2
 8007818:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	4a19      	ldr	r2, [pc, #100]	; (8007884 <TIM_OC5_SetConfig+0xbc>)
 800781e:	4293      	cmp	r3, r2
 8007820:	d013      	beq.n	800784a <TIM_OC5_SetConfig+0x82>
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	4a18      	ldr	r2, [pc, #96]	; (8007888 <TIM_OC5_SetConfig+0xc0>)
 8007826:	4293      	cmp	r3, r2
 8007828:	d00f      	beq.n	800784a <TIM_OC5_SetConfig+0x82>
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	4a17      	ldr	r2, [pc, #92]	; (800788c <TIM_OC5_SetConfig+0xc4>)
 800782e:	4293      	cmp	r3, r2
 8007830:	d00b      	beq.n	800784a <TIM_OC5_SetConfig+0x82>
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	4a16      	ldr	r2, [pc, #88]	; (8007890 <TIM_OC5_SetConfig+0xc8>)
 8007836:	4293      	cmp	r3, r2
 8007838:	d007      	beq.n	800784a <TIM_OC5_SetConfig+0x82>
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	4a15      	ldr	r2, [pc, #84]	; (8007894 <TIM_OC5_SetConfig+0xcc>)
 800783e:	4293      	cmp	r3, r2
 8007840:	d003      	beq.n	800784a <TIM_OC5_SetConfig+0x82>
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	4a14      	ldr	r2, [pc, #80]	; (8007898 <TIM_OC5_SetConfig+0xd0>)
 8007846:	4293      	cmp	r3, r2
 8007848:	d109      	bne.n	800785e <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800784a:	697b      	ldr	r3, [r7, #20]
 800784c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007850:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007852:	683b      	ldr	r3, [r7, #0]
 8007854:	695b      	ldr	r3, [r3, #20]
 8007856:	021b      	lsls	r3, r3, #8
 8007858:	697a      	ldr	r2, [r7, #20]
 800785a:	4313      	orrs	r3, r2
 800785c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	697a      	ldr	r2, [r7, #20]
 8007862:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	68fa      	ldr	r2, [r7, #12]
 8007868:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800786a:	683b      	ldr	r3, [r7, #0]
 800786c:	685a      	ldr	r2, [r3, #4]
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	693a      	ldr	r2, [r7, #16]
 8007876:	621a      	str	r2, [r3, #32]
}
 8007878:	bf00      	nop
 800787a:	371c      	adds	r7, #28
 800787c:	46bd      	mov	sp, r7
 800787e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007882:	4770      	bx	lr
 8007884:	40012c00 	.word	0x40012c00
 8007888:	40013400 	.word	0x40013400
 800788c:	40014000 	.word	0x40014000
 8007890:	40014400 	.word	0x40014400
 8007894:	40014800 	.word	0x40014800
 8007898:	40015000 	.word	0x40015000

0800789c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800789c:	b480      	push	{r7}
 800789e:	b087      	sub	sp, #28
 80078a0:	af00      	add	r7, sp, #0
 80078a2:	6078      	str	r0, [r7, #4]
 80078a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	6a1b      	ldr	r3, [r3, #32]
 80078aa:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	6a1b      	ldr	r3, [r3, #32]
 80078b6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	685b      	ldr	r3, [r3, #4]
 80078bc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80078c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80078ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80078ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80078d0:	683b      	ldr	r3, [r7, #0]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	021b      	lsls	r3, r3, #8
 80078d6:	68fa      	ldr	r2, [r7, #12]
 80078d8:	4313      	orrs	r3, r2
 80078da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80078dc:	693b      	ldr	r3, [r7, #16]
 80078de:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80078e2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80078e4:	683b      	ldr	r3, [r7, #0]
 80078e6:	689b      	ldr	r3, [r3, #8]
 80078e8:	051b      	lsls	r3, r3, #20
 80078ea:	693a      	ldr	r2, [r7, #16]
 80078ec:	4313      	orrs	r3, r2
 80078ee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	4a1a      	ldr	r2, [pc, #104]	; (800795c <TIM_OC6_SetConfig+0xc0>)
 80078f4:	4293      	cmp	r3, r2
 80078f6:	d013      	beq.n	8007920 <TIM_OC6_SetConfig+0x84>
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	4a19      	ldr	r2, [pc, #100]	; (8007960 <TIM_OC6_SetConfig+0xc4>)
 80078fc:	4293      	cmp	r3, r2
 80078fe:	d00f      	beq.n	8007920 <TIM_OC6_SetConfig+0x84>
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	4a18      	ldr	r2, [pc, #96]	; (8007964 <TIM_OC6_SetConfig+0xc8>)
 8007904:	4293      	cmp	r3, r2
 8007906:	d00b      	beq.n	8007920 <TIM_OC6_SetConfig+0x84>
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	4a17      	ldr	r2, [pc, #92]	; (8007968 <TIM_OC6_SetConfig+0xcc>)
 800790c:	4293      	cmp	r3, r2
 800790e:	d007      	beq.n	8007920 <TIM_OC6_SetConfig+0x84>
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	4a16      	ldr	r2, [pc, #88]	; (800796c <TIM_OC6_SetConfig+0xd0>)
 8007914:	4293      	cmp	r3, r2
 8007916:	d003      	beq.n	8007920 <TIM_OC6_SetConfig+0x84>
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	4a15      	ldr	r2, [pc, #84]	; (8007970 <TIM_OC6_SetConfig+0xd4>)
 800791c:	4293      	cmp	r3, r2
 800791e:	d109      	bne.n	8007934 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007920:	697b      	ldr	r3, [r7, #20]
 8007922:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007926:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007928:	683b      	ldr	r3, [r7, #0]
 800792a:	695b      	ldr	r3, [r3, #20]
 800792c:	029b      	lsls	r3, r3, #10
 800792e:	697a      	ldr	r2, [r7, #20]
 8007930:	4313      	orrs	r3, r2
 8007932:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	697a      	ldr	r2, [r7, #20]
 8007938:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	68fa      	ldr	r2, [r7, #12]
 800793e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007940:	683b      	ldr	r3, [r7, #0]
 8007942:	685a      	ldr	r2, [r3, #4]
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	693a      	ldr	r2, [r7, #16]
 800794c:	621a      	str	r2, [r3, #32]
}
 800794e:	bf00      	nop
 8007950:	371c      	adds	r7, #28
 8007952:	46bd      	mov	sp, r7
 8007954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007958:	4770      	bx	lr
 800795a:	bf00      	nop
 800795c:	40012c00 	.word	0x40012c00
 8007960:	40013400 	.word	0x40013400
 8007964:	40014000 	.word	0x40014000
 8007968:	40014400 	.word	0x40014400
 800796c:	40014800 	.word	0x40014800
 8007970:	40015000 	.word	0x40015000

08007974 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8007974:	b480      	push	{r7}
 8007976:	b087      	sub	sp, #28
 8007978:	af00      	add	r7, sp, #0
 800797a:	60f8      	str	r0, [r7, #12]
 800797c:	60b9      	str	r1, [r7, #8]
 800797e:	607a      	str	r2, [r7, #4]
 8007980:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	6a1b      	ldr	r3, [r3, #32]
 8007986:	f023 0201 	bic.w	r2, r3, #1
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	699b      	ldr	r3, [r3, #24]
 8007992:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	6a1b      	ldr	r3, [r3, #32]
 8007998:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	4a28      	ldr	r2, [pc, #160]	; (8007a40 <TIM_TI1_SetConfig+0xcc>)
 800799e:	4293      	cmp	r3, r2
 80079a0:	d01b      	beq.n	80079da <TIM_TI1_SetConfig+0x66>
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80079a8:	d017      	beq.n	80079da <TIM_TI1_SetConfig+0x66>
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	4a25      	ldr	r2, [pc, #148]	; (8007a44 <TIM_TI1_SetConfig+0xd0>)
 80079ae:	4293      	cmp	r3, r2
 80079b0:	d013      	beq.n	80079da <TIM_TI1_SetConfig+0x66>
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	4a24      	ldr	r2, [pc, #144]	; (8007a48 <TIM_TI1_SetConfig+0xd4>)
 80079b6:	4293      	cmp	r3, r2
 80079b8:	d00f      	beq.n	80079da <TIM_TI1_SetConfig+0x66>
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	4a23      	ldr	r2, [pc, #140]	; (8007a4c <TIM_TI1_SetConfig+0xd8>)
 80079be:	4293      	cmp	r3, r2
 80079c0:	d00b      	beq.n	80079da <TIM_TI1_SetConfig+0x66>
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	4a22      	ldr	r2, [pc, #136]	; (8007a50 <TIM_TI1_SetConfig+0xdc>)
 80079c6:	4293      	cmp	r3, r2
 80079c8:	d007      	beq.n	80079da <TIM_TI1_SetConfig+0x66>
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	4a21      	ldr	r2, [pc, #132]	; (8007a54 <TIM_TI1_SetConfig+0xe0>)
 80079ce:	4293      	cmp	r3, r2
 80079d0:	d003      	beq.n	80079da <TIM_TI1_SetConfig+0x66>
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	4a20      	ldr	r2, [pc, #128]	; (8007a58 <TIM_TI1_SetConfig+0xe4>)
 80079d6:	4293      	cmp	r3, r2
 80079d8:	d101      	bne.n	80079de <TIM_TI1_SetConfig+0x6a>
 80079da:	2301      	movs	r3, #1
 80079dc:	e000      	b.n	80079e0 <TIM_TI1_SetConfig+0x6c>
 80079de:	2300      	movs	r3, #0
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d008      	beq.n	80079f6 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80079e4:	697b      	ldr	r3, [r7, #20]
 80079e6:	f023 0303 	bic.w	r3, r3, #3
 80079ea:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80079ec:	697a      	ldr	r2, [r7, #20]
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	4313      	orrs	r3, r2
 80079f2:	617b      	str	r3, [r7, #20]
 80079f4:	e003      	b.n	80079fe <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80079f6:	697b      	ldr	r3, [r7, #20]
 80079f8:	f043 0301 	orr.w	r3, r3, #1
 80079fc:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80079fe:	697b      	ldr	r3, [r7, #20]
 8007a00:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007a04:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8007a06:	683b      	ldr	r3, [r7, #0]
 8007a08:	011b      	lsls	r3, r3, #4
 8007a0a:	b2db      	uxtb	r3, r3
 8007a0c:	697a      	ldr	r2, [r7, #20]
 8007a0e:	4313      	orrs	r3, r2
 8007a10:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007a12:	693b      	ldr	r3, [r7, #16]
 8007a14:	f023 030a 	bic.w	r3, r3, #10
 8007a18:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8007a1a:	68bb      	ldr	r3, [r7, #8]
 8007a1c:	f003 030a 	and.w	r3, r3, #10
 8007a20:	693a      	ldr	r2, [r7, #16]
 8007a22:	4313      	orrs	r3, r2
 8007a24:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	697a      	ldr	r2, [r7, #20]
 8007a2a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	693a      	ldr	r2, [r7, #16]
 8007a30:	621a      	str	r2, [r3, #32]
}
 8007a32:	bf00      	nop
 8007a34:	371c      	adds	r7, #28
 8007a36:	46bd      	mov	sp, r7
 8007a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a3c:	4770      	bx	lr
 8007a3e:	bf00      	nop
 8007a40:	40012c00 	.word	0x40012c00
 8007a44:	40000400 	.word	0x40000400
 8007a48:	40000800 	.word	0x40000800
 8007a4c:	40000c00 	.word	0x40000c00
 8007a50:	40013400 	.word	0x40013400
 8007a54:	40014000 	.word	0x40014000
 8007a58:	40015000 	.word	0x40015000

08007a5c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007a5c:	b480      	push	{r7}
 8007a5e:	b087      	sub	sp, #28
 8007a60:	af00      	add	r7, sp, #0
 8007a62:	60f8      	str	r0, [r7, #12]
 8007a64:	60b9      	str	r1, [r7, #8]
 8007a66:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	6a1b      	ldr	r3, [r3, #32]
 8007a6c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	6a1b      	ldr	r3, [r3, #32]
 8007a72:	f023 0201 	bic.w	r2, r3, #1
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	699b      	ldr	r3, [r3, #24]
 8007a7e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007a80:	693b      	ldr	r3, [r7, #16]
 8007a82:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007a86:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	011b      	lsls	r3, r3, #4
 8007a8c:	693a      	ldr	r2, [r7, #16]
 8007a8e:	4313      	orrs	r3, r2
 8007a90:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007a92:	697b      	ldr	r3, [r7, #20]
 8007a94:	f023 030a 	bic.w	r3, r3, #10
 8007a98:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007a9a:	697a      	ldr	r2, [r7, #20]
 8007a9c:	68bb      	ldr	r3, [r7, #8]
 8007a9e:	4313      	orrs	r3, r2
 8007aa0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	693a      	ldr	r2, [r7, #16]
 8007aa6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	697a      	ldr	r2, [r7, #20]
 8007aac:	621a      	str	r2, [r3, #32]
}
 8007aae:	bf00      	nop
 8007ab0:	371c      	adds	r7, #28
 8007ab2:	46bd      	mov	sp, r7
 8007ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab8:	4770      	bx	lr

08007aba <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007aba:	b480      	push	{r7}
 8007abc:	b087      	sub	sp, #28
 8007abe:	af00      	add	r7, sp, #0
 8007ac0:	60f8      	str	r0, [r7, #12]
 8007ac2:	60b9      	str	r1, [r7, #8]
 8007ac4:	607a      	str	r2, [r7, #4]
 8007ac6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	6a1b      	ldr	r3, [r3, #32]
 8007acc:	f023 0210 	bic.w	r2, r3, #16
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	699b      	ldr	r3, [r3, #24]
 8007ad8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	6a1b      	ldr	r3, [r3, #32]
 8007ade:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8007ae0:	697b      	ldr	r3, [r7, #20]
 8007ae2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007ae6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	021b      	lsls	r3, r3, #8
 8007aec:	697a      	ldr	r2, [r7, #20]
 8007aee:	4313      	orrs	r3, r2
 8007af0:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007af2:	697b      	ldr	r3, [r7, #20]
 8007af4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007af8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8007afa:	683b      	ldr	r3, [r7, #0]
 8007afc:	031b      	lsls	r3, r3, #12
 8007afe:	b29b      	uxth	r3, r3
 8007b00:	697a      	ldr	r2, [r7, #20]
 8007b02:	4313      	orrs	r3, r2
 8007b04:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007b06:	693b      	ldr	r3, [r7, #16]
 8007b08:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007b0c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8007b0e:	68bb      	ldr	r3, [r7, #8]
 8007b10:	011b      	lsls	r3, r3, #4
 8007b12:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8007b16:	693a      	ldr	r2, [r7, #16]
 8007b18:	4313      	orrs	r3, r2
 8007b1a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	697a      	ldr	r2, [r7, #20]
 8007b20:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	693a      	ldr	r2, [r7, #16]
 8007b26:	621a      	str	r2, [r3, #32]
}
 8007b28:	bf00      	nop
 8007b2a:	371c      	adds	r7, #28
 8007b2c:	46bd      	mov	sp, r7
 8007b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b32:	4770      	bx	lr

08007b34 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007b34:	b480      	push	{r7}
 8007b36:	b087      	sub	sp, #28
 8007b38:	af00      	add	r7, sp, #0
 8007b3a:	60f8      	str	r0, [r7, #12]
 8007b3c:	60b9      	str	r1, [r7, #8]
 8007b3e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	6a1b      	ldr	r3, [r3, #32]
 8007b44:	f023 0210 	bic.w	r2, r3, #16
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	699b      	ldr	r3, [r3, #24]
 8007b50:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	6a1b      	ldr	r3, [r3, #32]
 8007b56:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007b58:	697b      	ldr	r3, [r7, #20]
 8007b5a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007b5e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	031b      	lsls	r3, r3, #12
 8007b64:	697a      	ldr	r2, [r7, #20]
 8007b66:	4313      	orrs	r3, r2
 8007b68:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007b6a:	693b      	ldr	r3, [r7, #16]
 8007b6c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007b70:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007b72:	68bb      	ldr	r3, [r7, #8]
 8007b74:	011b      	lsls	r3, r3, #4
 8007b76:	693a      	ldr	r2, [r7, #16]
 8007b78:	4313      	orrs	r3, r2
 8007b7a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	697a      	ldr	r2, [r7, #20]
 8007b80:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	693a      	ldr	r2, [r7, #16]
 8007b86:	621a      	str	r2, [r3, #32]
}
 8007b88:	bf00      	nop
 8007b8a:	371c      	adds	r7, #28
 8007b8c:	46bd      	mov	sp, r7
 8007b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b92:	4770      	bx	lr

08007b94 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007b94:	b480      	push	{r7}
 8007b96:	b087      	sub	sp, #28
 8007b98:	af00      	add	r7, sp, #0
 8007b9a:	60f8      	str	r0, [r7, #12]
 8007b9c:	60b9      	str	r1, [r7, #8]
 8007b9e:	607a      	str	r2, [r7, #4]
 8007ba0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	6a1b      	ldr	r3, [r3, #32]
 8007ba6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	69db      	ldr	r3, [r3, #28]
 8007bb2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	6a1b      	ldr	r3, [r3, #32]
 8007bb8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8007bba:	697b      	ldr	r3, [r7, #20]
 8007bbc:	f023 0303 	bic.w	r3, r3, #3
 8007bc0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8007bc2:	697a      	ldr	r2, [r7, #20]
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	4313      	orrs	r3, r2
 8007bc8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8007bca:	697b      	ldr	r3, [r7, #20]
 8007bcc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007bd0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8007bd2:	683b      	ldr	r3, [r7, #0]
 8007bd4:	011b      	lsls	r3, r3, #4
 8007bd6:	b2db      	uxtb	r3, r3
 8007bd8:	697a      	ldr	r2, [r7, #20]
 8007bda:	4313      	orrs	r3, r2
 8007bdc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8007bde:	693b      	ldr	r3, [r7, #16]
 8007be0:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8007be4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8007be6:	68bb      	ldr	r3, [r7, #8]
 8007be8:	021b      	lsls	r3, r3, #8
 8007bea:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8007bee:	693a      	ldr	r2, [r7, #16]
 8007bf0:	4313      	orrs	r3, r2
 8007bf2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	697a      	ldr	r2, [r7, #20]
 8007bf8:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	693a      	ldr	r2, [r7, #16]
 8007bfe:	621a      	str	r2, [r3, #32]
}
 8007c00:	bf00      	nop
 8007c02:	371c      	adds	r7, #28
 8007c04:	46bd      	mov	sp, r7
 8007c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c0a:	4770      	bx	lr

08007c0c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007c0c:	b480      	push	{r7}
 8007c0e:	b087      	sub	sp, #28
 8007c10:	af00      	add	r7, sp, #0
 8007c12:	60f8      	str	r0, [r7, #12]
 8007c14:	60b9      	str	r1, [r7, #8]
 8007c16:	607a      	str	r2, [r7, #4]
 8007c18:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	6a1b      	ldr	r3, [r3, #32]
 8007c1e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	69db      	ldr	r3, [r3, #28]
 8007c2a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	6a1b      	ldr	r3, [r3, #32]
 8007c30:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8007c32:	697b      	ldr	r3, [r7, #20]
 8007c34:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007c38:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	021b      	lsls	r3, r3, #8
 8007c3e:	697a      	ldr	r2, [r7, #20]
 8007c40:	4313      	orrs	r3, r2
 8007c42:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8007c44:	697b      	ldr	r3, [r7, #20]
 8007c46:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007c4a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8007c4c:	683b      	ldr	r3, [r7, #0]
 8007c4e:	031b      	lsls	r3, r3, #12
 8007c50:	b29b      	uxth	r3, r3
 8007c52:	697a      	ldr	r2, [r7, #20]
 8007c54:	4313      	orrs	r3, r2
 8007c56:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8007c58:	693b      	ldr	r3, [r7, #16]
 8007c5a:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8007c5e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8007c60:	68bb      	ldr	r3, [r7, #8]
 8007c62:	031b      	lsls	r3, r3, #12
 8007c64:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8007c68:	693a      	ldr	r2, [r7, #16]
 8007c6a:	4313      	orrs	r3, r2
 8007c6c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	697a      	ldr	r2, [r7, #20]
 8007c72:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	693a      	ldr	r2, [r7, #16]
 8007c78:	621a      	str	r2, [r3, #32]
}
 8007c7a:	bf00      	nop
 8007c7c:	371c      	adds	r7, #28
 8007c7e:	46bd      	mov	sp, r7
 8007c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c84:	4770      	bx	lr

08007c86 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007c86:	b480      	push	{r7}
 8007c88:	b085      	sub	sp, #20
 8007c8a:	af00      	add	r7, sp, #0
 8007c8c:	6078      	str	r0, [r7, #4]
 8007c8e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	689b      	ldr	r3, [r3, #8]
 8007c94:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8007c9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ca0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007ca2:	683a      	ldr	r2, [r7, #0]
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	4313      	orrs	r3, r2
 8007ca8:	f043 0307 	orr.w	r3, r3, #7
 8007cac:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	68fa      	ldr	r2, [r7, #12]
 8007cb2:	609a      	str	r2, [r3, #8]
}
 8007cb4:	bf00      	nop
 8007cb6:	3714      	adds	r7, #20
 8007cb8:	46bd      	mov	sp, r7
 8007cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cbe:	4770      	bx	lr

08007cc0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007cc0:	b480      	push	{r7}
 8007cc2:	b087      	sub	sp, #28
 8007cc4:	af00      	add	r7, sp, #0
 8007cc6:	60f8      	str	r0, [r7, #12]
 8007cc8:	60b9      	str	r1, [r7, #8]
 8007cca:	607a      	str	r2, [r7, #4]
 8007ccc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	689b      	ldr	r3, [r3, #8]
 8007cd2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007cd4:	697b      	ldr	r3, [r7, #20]
 8007cd6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007cda:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007cdc:	683b      	ldr	r3, [r7, #0]
 8007cde:	021a      	lsls	r2, r3, #8
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	431a      	orrs	r2, r3
 8007ce4:	68bb      	ldr	r3, [r7, #8]
 8007ce6:	4313      	orrs	r3, r2
 8007ce8:	697a      	ldr	r2, [r7, #20]
 8007cea:	4313      	orrs	r3, r2
 8007cec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	697a      	ldr	r2, [r7, #20]
 8007cf2:	609a      	str	r2, [r3, #8]
}
 8007cf4:	bf00      	nop
 8007cf6:	371c      	adds	r7, #28
 8007cf8:	46bd      	mov	sp, r7
 8007cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cfe:	4770      	bx	lr

08007d00 <HAL_TIMEx_HallSensor_Init>:
  * @param  htim TIM Hall Sensor Interface handle
  * @param  sConfig TIM Hall Sensor configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Init(TIM_HandleTypeDef *htim, TIM_HallSensor_InitTypeDef *sConfig)
{
 8007d00:	b580      	push	{r7, lr}
 8007d02:	b08a      	sub	sp, #40	; 0x28
 8007d04:	af00      	add	r7, sp, #0
 8007d06:	6078      	str	r0, [r7, #4]
 8007d08:	6039      	str	r1, [r7, #0]
  TIM_OC_InitTypeDef OC_Config;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d101      	bne.n	8007d14 <HAL_TIMEx_HallSensor_Init+0x14>
  {
    return HAL_ERROR;
 8007d10:	2301      	movs	r3, #1
 8007d12:	e0a0      	b.n	8007e56 <HAL_TIMEx_HallSensor_Init+0x156>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
  assert_param(IS_TIM_IC_POLARITY(sConfig->IC1Polarity));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007d1a:	b2db      	uxtb	r3, r3
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d106      	bne.n	8007d2e <HAL_TIMEx_HallSensor_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	2200      	movs	r2, #0
 8007d24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->HallSensor_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIMEx_HallSensor_MspInit(htim);
 8007d28:	6878      	ldr	r0, [r7, #4]
 8007d2a:	f000 f898 	bl	8007e5e <HAL_TIMEx_HallSensor_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	2202      	movs	r2, #2
 8007d32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	681a      	ldr	r2, [r3, #0]
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	3304      	adds	r3, #4
 8007d3e:	4619      	mov	r1, r3
 8007d40:	4610      	mov	r0, r2
 8007d42:	f7ff fa45 	bl	80071d0 <TIM_Base_SetConfig>

  /* Configure the Channel 1 as Input Channel to interface with the three Outputs of the  Hall sensor */
  TIM_TI1_SetConfig(htim->Instance, sConfig->IC1Polarity, TIM_ICSELECTION_TRC, sConfig->IC1Filter);
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	6818      	ldr	r0, [r3, #0]
 8007d4a:	683b      	ldr	r3, [r7, #0]
 8007d4c:	6819      	ldr	r1, [r3, #0]
 8007d4e:	683b      	ldr	r3, [r7, #0]
 8007d50:	689b      	ldr	r3, [r3, #8]
 8007d52:	2203      	movs	r2, #3
 8007d54:	f7ff fe0e 	bl	8007974 <TIM_TI1_SetConfig>

  /* Reset the IC1PSC Bits */
  htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	699a      	ldr	r2, [r3, #24]
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	f022 020c 	bic.w	r2, r2, #12
 8007d66:	619a      	str	r2, [r3, #24]
  /* Set the IC1PSC value */
  htim->Instance->CCMR1 |= sConfig->IC1Prescaler;
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	6999      	ldr	r1, [r3, #24]
 8007d6e:	683b      	ldr	r3, [r7, #0]
 8007d70:	685a      	ldr	r2, [r3, #4]
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	430a      	orrs	r2, r1
 8007d78:	619a      	str	r2, [r3, #24]

  /* Enable the Hall sensor interface (XOR function of the three inputs) */
  htim->Instance->CR2 |= TIM_CR2_TI1S;
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	685a      	ldr	r2, [r3, #4]
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007d88:	605a      	str	r2, [r3, #4]

  /* Select the TIM_TS_TI1F_ED signal as Input trigger for the TIM */
  htim->Instance->SMCR &= ~TIM_SMCR_TS;
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	689b      	ldr	r3, [r3, #8]
 8007d90:	687a      	ldr	r2, [r7, #4]
 8007d92:	6812      	ldr	r2, [r2, #0]
 8007d94:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8007d98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d9c:	6093      	str	r3, [r2, #8]
  htim->Instance->SMCR |= TIM_TS_TI1F_ED;
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	689a      	ldr	r2, [r3, #8]
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007dac:	609a      	str	r2, [r3, #8]

  /* Use the TIM_TS_TI1F_ED signal to reset the TIM counter each edge detection */
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	689b      	ldr	r3, [r3, #8]
 8007db4:	687a      	ldr	r2, [r7, #4]
 8007db6:	6812      	ldr	r2, [r2, #0]
 8007db8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007dbc:	f023 0307 	bic.w	r3, r3, #7
 8007dc0:	6093      	str	r3, [r2, #8]
  htim->Instance->SMCR |= TIM_SLAVEMODE_RESET;
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	689a      	ldr	r2, [r3, #8]
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	f042 0204 	orr.w	r2, r2, #4
 8007dd0:	609a      	str	r2, [r3, #8]

  /* Program channel 2 in PWM 2 mode with the desired Commutation_Delay*/
  OC_Config.OCFastMode = TIM_OCFAST_DISABLE;
 8007dd2:	2300      	movs	r3, #0
 8007dd4:	61fb      	str	r3, [r7, #28]
  OC_Config.OCIdleState = TIM_OCIDLESTATE_RESET;
 8007dd6:	2300      	movs	r3, #0
 8007dd8:	623b      	str	r3, [r7, #32]
  OC_Config.OCMode = TIM_OCMODE_PWM2;
 8007dda:	2370      	movs	r3, #112	; 0x70
 8007ddc:	60fb      	str	r3, [r7, #12]
  OC_Config.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8007dde:	2300      	movs	r3, #0
 8007de0:	627b      	str	r3, [r7, #36]	; 0x24
  OC_Config.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8007de2:	2300      	movs	r3, #0
 8007de4:	61bb      	str	r3, [r7, #24]
  OC_Config.OCPolarity = TIM_OCPOLARITY_HIGH;
 8007de6:	2300      	movs	r3, #0
 8007de8:	617b      	str	r3, [r7, #20]
  OC_Config.Pulse = sConfig->Commutation_Delay;
 8007dea:	683b      	ldr	r3, [r7, #0]
 8007dec:	68db      	ldr	r3, [r3, #12]
 8007dee:	613b      	str	r3, [r7, #16]

  TIM_OC2_SetConfig(htim->Instance, &OC_Config);
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	f107 020c 	add.w	r2, r7, #12
 8007df8:	4611      	mov	r1, r2
 8007dfa:	4618      	mov	r0, r3
 8007dfc:	f7ff fb2a 	bl	8007454 <TIM_OC2_SetConfig>

  /* Select OC2REF as trigger output on TRGO: write the MMS bits in the TIMx_CR2
    register to 101 */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	685b      	ldr	r3, [r3, #4]
 8007e06:	687a      	ldr	r2, [r7, #4]
 8007e08:	6812      	ldr	r2, [r2, #0]
 8007e0a:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8007e0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e12:	6053      	str	r3, [r2, #4]
  htim->Instance->CR2 |= TIM_TRGO_OC2REF;
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	685a      	ldr	r2, [r3, #4]
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	f042 0250 	orr.w	r2, r2, #80	; 0x50
 8007e22:	605a      	str	r2, [r3, #4]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	2201      	movs	r2, #1
 8007e28:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	2201      	movs	r2, #1
 8007e30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	2201      	movs	r2, #1
 8007e38:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	2201      	movs	r2, #1
 8007e40:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	2201      	movs	r2, #1
 8007e48:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	2201      	movs	r2, #1
 8007e50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007e54:	2300      	movs	r3, #0
}
 8007e56:	4618      	mov	r0, r3
 8007e58:	3728      	adds	r7, #40	; 0x28
 8007e5a:	46bd      	mov	sp, r7
 8007e5c:	bd80      	pop	{r7, pc}

08007e5e <HAL_TIMEx_HallSensor_MspInit>:
  * @brief  Initializes the TIM Hall Sensor MSP.
  * @param  htim TIM Hall Sensor Interface handle
  * @retval None
  */
__weak void HAL_TIMEx_HallSensor_MspInit(TIM_HandleTypeDef *htim)
{
 8007e5e:	b480      	push	{r7}
 8007e60:	b083      	sub	sp, #12
 8007e62:	af00      	add	r7, sp, #0
 8007e64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_HallSensor_MspInit could be implemented in the user file
   */
}
 8007e66:	bf00      	nop
 8007e68:	370c      	adds	r7, #12
 8007e6a:	46bd      	mov	sp, r7
 8007e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e70:	4770      	bx	lr
	...

08007e74 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007e74:	b480      	push	{r7}
 8007e76:	b085      	sub	sp, #20
 8007e78:	af00      	add	r7, sp, #0
 8007e7a:	6078      	str	r0, [r7, #4]
 8007e7c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007e84:	2b01      	cmp	r3, #1
 8007e86:	d101      	bne.n	8007e8c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007e88:	2302      	movs	r3, #2
 8007e8a:	e074      	b.n	8007f76 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	2201      	movs	r2, #1
 8007e90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	2202      	movs	r2, #2
 8007e98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	685b      	ldr	r3, [r3, #4]
 8007ea2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	689b      	ldr	r3, [r3, #8]
 8007eaa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	4a34      	ldr	r2, [pc, #208]	; (8007f84 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007eb2:	4293      	cmp	r3, r2
 8007eb4:	d009      	beq.n	8007eca <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	4a33      	ldr	r2, [pc, #204]	; (8007f88 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007ebc:	4293      	cmp	r3, r2
 8007ebe:	d004      	beq.n	8007eca <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	4a31      	ldr	r2, [pc, #196]	; (8007f8c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007ec6:	4293      	cmp	r3, r2
 8007ec8:	d108      	bne.n	8007edc <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007ed0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007ed2:	683b      	ldr	r3, [r7, #0]
 8007ed4:	685b      	ldr	r3, [r3, #4]
 8007ed6:	68fa      	ldr	r2, [r7, #12]
 8007ed8:	4313      	orrs	r3, r2
 8007eda:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8007ee2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ee6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007ee8:	683b      	ldr	r3, [r7, #0]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	68fa      	ldr	r2, [r7, #12]
 8007eee:	4313      	orrs	r3, r2
 8007ef0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	68fa      	ldr	r2, [r7, #12]
 8007ef8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	4a21      	ldr	r2, [pc, #132]	; (8007f84 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007f00:	4293      	cmp	r3, r2
 8007f02:	d022      	beq.n	8007f4a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f0c:	d01d      	beq.n	8007f4a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	4a1f      	ldr	r2, [pc, #124]	; (8007f90 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8007f14:	4293      	cmp	r3, r2
 8007f16:	d018      	beq.n	8007f4a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	4a1d      	ldr	r2, [pc, #116]	; (8007f94 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8007f1e:	4293      	cmp	r3, r2
 8007f20:	d013      	beq.n	8007f4a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	4a1c      	ldr	r2, [pc, #112]	; (8007f98 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8007f28:	4293      	cmp	r3, r2
 8007f2a:	d00e      	beq.n	8007f4a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	4a15      	ldr	r2, [pc, #84]	; (8007f88 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007f32:	4293      	cmp	r3, r2
 8007f34:	d009      	beq.n	8007f4a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	4a18      	ldr	r2, [pc, #96]	; (8007f9c <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8007f3c:	4293      	cmp	r3, r2
 8007f3e:	d004      	beq.n	8007f4a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	4a11      	ldr	r2, [pc, #68]	; (8007f8c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007f46:	4293      	cmp	r3, r2
 8007f48:	d10c      	bne.n	8007f64 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007f4a:	68bb      	ldr	r3, [r7, #8]
 8007f4c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007f50:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007f52:	683b      	ldr	r3, [r7, #0]
 8007f54:	689b      	ldr	r3, [r3, #8]
 8007f56:	68ba      	ldr	r2, [r7, #8]
 8007f58:	4313      	orrs	r3, r2
 8007f5a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	68ba      	ldr	r2, [r7, #8]
 8007f62:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	2201      	movs	r2, #1
 8007f68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	2200      	movs	r2, #0
 8007f70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007f74:	2300      	movs	r3, #0
}
 8007f76:	4618      	mov	r0, r3
 8007f78:	3714      	adds	r7, #20
 8007f7a:	46bd      	mov	sp, r7
 8007f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f80:	4770      	bx	lr
 8007f82:	bf00      	nop
 8007f84:	40012c00 	.word	0x40012c00
 8007f88:	40013400 	.word	0x40013400
 8007f8c:	40015000 	.word	0x40015000
 8007f90:	40000400 	.word	0x40000400
 8007f94:	40000800 	.word	0x40000800
 8007f98:	40000c00 	.word	0x40000c00
 8007f9c:	40014000 	.word	0x40014000

08007fa0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007fa0:	b480      	push	{r7}
 8007fa2:	b085      	sub	sp, #20
 8007fa4:	af00      	add	r7, sp, #0
 8007fa6:	6078      	str	r0, [r7, #4]
 8007fa8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007faa:	2300      	movs	r3, #0
 8007fac:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007fb4:	2b01      	cmp	r3, #1
 8007fb6:	d101      	bne.n	8007fbc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007fb8:	2302      	movs	r3, #2
 8007fba:	e096      	b.n	80080ea <HAL_TIMEx_ConfigBreakDeadTime+0x14a>
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	2201      	movs	r2, #1
 8007fc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007fca:	683b      	ldr	r3, [r7, #0]
 8007fcc:	68db      	ldr	r3, [r3, #12]
 8007fce:	4313      	orrs	r3, r2
 8007fd0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007fd8:	683b      	ldr	r3, [r7, #0]
 8007fda:	689b      	ldr	r3, [r3, #8]
 8007fdc:	4313      	orrs	r3, r2
 8007fde:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007fe6:	683b      	ldr	r3, [r7, #0]
 8007fe8:	685b      	ldr	r3, [r3, #4]
 8007fea:	4313      	orrs	r3, r2
 8007fec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007ff4:	683b      	ldr	r3, [r7, #0]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	4313      	orrs	r3, r2
 8007ffa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008002:	683b      	ldr	r3, [r7, #0]
 8008004:	691b      	ldr	r3, [r3, #16]
 8008006:	4313      	orrs	r3, r2
 8008008:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8008010:	683b      	ldr	r3, [r7, #0]
 8008012:	695b      	ldr	r3, [r3, #20]
 8008014:	4313      	orrs	r3, r2
 8008016:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800801e:	683b      	ldr	r3, [r7, #0]
 8008020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008022:	4313      	orrs	r3, r2
 8008024:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800802c:	683b      	ldr	r3, [r7, #0]
 800802e:	699b      	ldr	r3, [r3, #24]
 8008030:	041b      	lsls	r3, r3, #16
 8008032:	4313      	orrs	r3, r2
 8008034:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	4a2f      	ldr	r2, [pc, #188]	; (80080f8 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 800803c:	4293      	cmp	r3, r2
 800803e:	d009      	beq.n	8008054 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	4a2d      	ldr	r2, [pc, #180]	; (80080fc <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8008046:	4293      	cmp	r3, r2
 8008048:	d004      	beq.n	8008054 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	4a2c      	ldr	r2, [pc, #176]	; (8008100 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8008050:	4293      	cmp	r3, r2
 8008052:	d106      	bne.n	8008062 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800805a:	683b      	ldr	r3, [r7, #0]
 800805c:	69db      	ldr	r3, [r3, #28]
 800805e:	4313      	orrs	r3, r2
 8008060:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	4a24      	ldr	r2, [pc, #144]	; (80080f8 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8008068:	4293      	cmp	r3, r2
 800806a:	d009      	beq.n	8008080 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	4a22      	ldr	r2, [pc, #136]	; (80080fc <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8008072:	4293      	cmp	r3, r2
 8008074:	d004      	beq.n	8008080 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	4a21      	ldr	r2, [pc, #132]	; (8008100 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 800807c:	4293      	cmp	r3, r2
 800807e:	d12b      	bne.n	80080d8 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8008086:	683b      	ldr	r3, [r7, #0]
 8008088:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800808a:	051b      	lsls	r3, r3, #20
 800808c:	4313      	orrs	r3, r2
 800808e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8008096:	683b      	ldr	r3, [r7, #0]
 8008098:	6a1b      	ldr	r3, [r3, #32]
 800809a:	4313      	orrs	r3, r2
 800809c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80080a4:	683b      	ldr	r3, [r7, #0]
 80080a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080a8:	4313      	orrs	r3, r2
 80080aa:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	4a11      	ldr	r2, [pc, #68]	; (80080f8 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 80080b2:	4293      	cmp	r3, r2
 80080b4:	d009      	beq.n	80080ca <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	4a10      	ldr	r2, [pc, #64]	; (80080fc <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 80080bc:	4293      	cmp	r3, r2
 80080be:	d004      	beq.n	80080ca <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	4a0e      	ldr	r2, [pc, #56]	; (8008100 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 80080c6:	4293      	cmp	r3, r2
 80080c8:	d106      	bne.n	80080d8 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80080d0:	683b      	ldr	r3, [r7, #0]
 80080d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080d4:	4313      	orrs	r3, r2
 80080d6:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	68fa      	ldr	r2, [r7, #12]
 80080de:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	2200      	movs	r2, #0
 80080e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80080e8:	2300      	movs	r3, #0
}
 80080ea:	4618      	mov	r0, r3
 80080ec:	3714      	adds	r7, #20
 80080ee:	46bd      	mov	sp, r7
 80080f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f4:	4770      	bx	lr
 80080f6:	bf00      	nop
 80080f8:	40012c00 	.word	0x40012c00
 80080fc:	40013400 	.word	0x40013400
 8008100:	40015000 	.word	0x40015000

08008104 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008104:	b480      	push	{r7}
 8008106:	b083      	sub	sp, #12
 8008108:	af00      	add	r7, sp, #0
 800810a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800810c:	bf00      	nop
 800810e:	370c      	adds	r7, #12
 8008110:	46bd      	mov	sp, r7
 8008112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008116:	4770      	bx	lr

08008118 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008118:	b480      	push	{r7}
 800811a:	b083      	sub	sp, #12
 800811c:	af00      	add	r7, sp, #0
 800811e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008120:	bf00      	nop
 8008122:	370c      	adds	r7, #12
 8008124:	46bd      	mov	sp, r7
 8008126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800812a:	4770      	bx	lr

0800812c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800812c:	b480      	push	{r7}
 800812e:	b083      	sub	sp, #12
 8008130:	af00      	add	r7, sp, #0
 8008132:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008134:	bf00      	nop
 8008136:	370c      	adds	r7, #12
 8008138:	46bd      	mov	sp, r7
 800813a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800813e:	4770      	bx	lr

08008140 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8008140:	b480      	push	{r7}
 8008142:	b083      	sub	sp, #12
 8008144:	af00      	add	r7, sp, #0
 8008146:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8008148:	bf00      	nop
 800814a:	370c      	adds	r7, #12
 800814c:	46bd      	mov	sp, r7
 800814e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008152:	4770      	bx	lr

08008154 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8008154:	b480      	push	{r7}
 8008156:	b083      	sub	sp, #12
 8008158:	af00      	add	r7, sp, #0
 800815a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800815c:	bf00      	nop
 800815e:	370c      	adds	r7, #12
 8008160:	46bd      	mov	sp, r7
 8008162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008166:	4770      	bx	lr

08008168 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8008168:	b480      	push	{r7}
 800816a:	b083      	sub	sp, #12
 800816c:	af00      	add	r7, sp, #0
 800816e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8008170:	bf00      	nop
 8008172:	370c      	adds	r7, #12
 8008174:	46bd      	mov	sp, r7
 8008176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800817a:	4770      	bx	lr

0800817c <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800817c:	b480      	push	{r7}
 800817e:	b083      	sub	sp, #12
 8008180:	af00      	add	r7, sp, #0
 8008182:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8008184:	bf00      	nop
 8008186:	370c      	adds	r7, #12
 8008188:	46bd      	mov	sp, r7
 800818a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800818e:	4770      	bx	lr

08008190 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008190:	b580      	push	{r7, lr}
 8008192:	b082      	sub	sp, #8
 8008194:	af00      	add	r7, sp, #0
 8008196:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	2b00      	cmp	r3, #0
 800819c:	d101      	bne.n	80081a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800819e:	2301      	movs	r3, #1
 80081a0:	e042      	b.n	8008228 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d106      	bne.n	80081ba <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	2200      	movs	r2, #0
 80081b0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80081b4:	6878      	ldr	r0, [r7, #4]
 80081b6:	f7f9 fd39 	bl	8001c2c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	2224      	movs	r2, #36	; 0x24
 80081be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	681a      	ldr	r2, [r3, #0]
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	f022 0201 	bic.w	r2, r2, #1
 80081d0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80081d2:	6878      	ldr	r0, [r7, #4]
 80081d4:	f000 f82c 	bl	8008230 <UART_SetConfig>
 80081d8:	4603      	mov	r3, r0
 80081da:	2b01      	cmp	r3, #1
 80081dc:	d101      	bne.n	80081e2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80081de:	2301      	movs	r3, #1
 80081e0:	e022      	b.n	8008228 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d002      	beq.n	80081f0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80081ea:	6878      	ldr	r0, [r7, #4]
 80081ec:	f000 fb1c 	bl	8008828 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	685a      	ldr	r2, [r3, #4]
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80081fe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	689a      	ldr	r2, [r3, #8]
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800820e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	681a      	ldr	r2, [r3, #0]
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	f042 0201 	orr.w	r2, r2, #1
 800821e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008220:	6878      	ldr	r0, [r7, #4]
 8008222:	f000 fba3 	bl	800896c <UART_CheckIdleState>
 8008226:	4603      	mov	r3, r0
}
 8008228:	4618      	mov	r0, r3
 800822a:	3708      	adds	r7, #8
 800822c:	46bd      	mov	sp, r7
 800822e:	bd80      	pop	{r7, pc}

08008230 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008230:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008234:	b08c      	sub	sp, #48	; 0x30
 8008236:	af00      	add	r7, sp, #0
 8008238:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800823a:	2300      	movs	r3, #0
 800823c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008240:	697b      	ldr	r3, [r7, #20]
 8008242:	689a      	ldr	r2, [r3, #8]
 8008244:	697b      	ldr	r3, [r7, #20]
 8008246:	691b      	ldr	r3, [r3, #16]
 8008248:	431a      	orrs	r2, r3
 800824a:	697b      	ldr	r3, [r7, #20]
 800824c:	695b      	ldr	r3, [r3, #20]
 800824e:	431a      	orrs	r2, r3
 8008250:	697b      	ldr	r3, [r7, #20]
 8008252:	69db      	ldr	r3, [r3, #28]
 8008254:	4313      	orrs	r3, r2
 8008256:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008258:	697b      	ldr	r3, [r7, #20]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	681a      	ldr	r2, [r3, #0]
 800825e:	4baa      	ldr	r3, [pc, #680]	; (8008508 <UART_SetConfig+0x2d8>)
 8008260:	4013      	ands	r3, r2
 8008262:	697a      	ldr	r2, [r7, #20]
 8008264:	6812      	ldr	r2, [r2, #0]
 8008266:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008268:	430b      	orrs	r3, r1
 800826a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800826c:	697b      	ldr	r3, [r7, #20]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	685b      	ldr	r3, [r3, #4]
 8008272:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008276:	697b      	ldr	r3, [r7, #20]
 8008278:	68da      	ldr	r2, [r3, #12]
 800827a:	697b      	ldr	r3, [r7, #20]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	430a      	orrs	r2, r1
 8008280:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008282:	697b      	ldr	r3, [r7, #20]
 8008284:	699b      	ldr	r3, [r3, #24]
 8008286:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008288:	697b      	ldr	r3, [r7, #20]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	4a9f      	ldr	r2, [pc, #636]	; (800850c <UART_SetConfig+0x2dc>)
 800828e:	4293      	cmp	r3, r2
 8008290:	d004      	beq.n	800829c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008292:	697b      	ldr	r3, [r7, #20]
 8008294:	6a1b      	ldr	r3, [r3, #32]
 8008296:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008298:	4313      	orrs	r3, r2
 800829a:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800829c:	697b      	ldr	r3, [r7, #20]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	689b      	ldr	r3, [r3, #8]
 80082a2:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80082a6:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80082aa:	697a      	ldr	r2, [r7, #20]
 80082ac:	6812      	ldr	r2, [r2, #0]
 80082ae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80082b0:	430b      	orrs	r3, r1
 80082b2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80082b4:	697b      	ldr	r3, [r7, #20]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082ba:	f023 010f 	bic.w	r1, r3, #15
 80082be:	697b      	ldr	r3, [r7, #20]
 80082c0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80082c2:	697b      	ldr	r3, [r7, #20]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	430a      	orrs	r2, r1
 80082c8:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80082ca:	697b      	ldr	r3, [r7, #20]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	4a90      	ldr	r2, [pc, #576]	; (8008510 <UART_SetConfig+0x2e0>)
 80082d0:	4293      	cmp	r3, r2
 80082d2:	d125      	bne.n	8008320 <UART_SetConfig+0xf0>
 80082d4:	4b8f      	ldr	r3, [pc, #572]	; (8008514 <UART_SetConfig+0x2e4>)
 80082d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80082da:	f003 0303 	and.w	r3, r3, #3
 80082de:	2b03      	cmp	r3, #3
 80082e0:	d81a      	bhi.n	8008318 <UART_SetConfig+0xe8>
 80082e2:	a201      	add	r2, pc, #4	; (adr r2, 80082e8 <UART_SetConfig+0xb8>)
 80082e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082e8:	080082f9 	.word	0x080082f9
 80082ec:	08008309 	.word	0x08008309
 80082f0:	08008301 	.word	0x08008301
 80082f4:	08008311 	.word	0x08008311
 80082f8:	2301      	movs	r3, #1
 80082fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80082fe:	e116      	b.n	800852e <UART_SetConfig+0x2fe>
 8008300:	2302      	movs	r3, #2
 8008302:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008306:	e112      	b.n	800852e <UART_SetConfig+0x2fe>
 8008308:	2304      	movs	r3, #4
 800830a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800830e:	e10e      	b.n	800852e <UART_SetConfig+0x2fe>
 8008310:	2308      	movs	r3, #8
 8008312:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008316:	e10a      	b.n	800852e <UART_SetConfig+0x2fe>
 8008318:	2310      	movs	r3, #16
 800831a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800831e:	e106      	b.n	800852e <UART_SetConfig+0x2fe>
 8008320:	697b      	ldr	r3, [r7, #20]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	4a7c      	ldr	r2, [pc, #496]	; (8008518 <UART_SetConfig+0x2e8>)
 8008326:	4293      	cmp	r3, r2
 8008328:	d138      	bne.n	800839c <UART_SetConfig+0x16c>
 800832a:	4b7a      	ldr	r3, [pc, #488]	; (8008514 <UART_SetConfig+0x2e4>)
 800832c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008330:	f003 030c 	and.w	r3, r3, #12
 8008334:	2b0c      	cmp	r3, #12
 8008336:	d82d      	bhi.n	8008394 <UART_SetConfig+0x164>
 8008338:	a201      	add	r2, pc, #4	; (adr r2, 8008340 <UART_SetConfig+0x110>)
 800833a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800833e:	bf00      	nop
 8008340:	08008375 	.word	0x08008375
 8008344:	08008395 	.word	0x08008395
 8008348:	08008395 	.word	0x08008395
 800834c:	08008395 	.word	0x08008395
 8008350:	08008385 	.word	0x08008385
 8008354:	08008395 	.word	0x08008395
 8008358:	08008395 	.word	0x08008395
 800835c:	08008395 	.word	0x08008395
 8008360:	0800837d 	.word	0x0800837d
 8008364:	08008395 	.word	0x08008395
 8008368:	08008395 	.word	0x08008395
 800836c:	08008395 	.word	0x08008395
 8008370:	0800838d 	.word	0x0800838d
 8008374:	2300      	movs	r3, #0
 8008376:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800837a:	e0d8      	b.n	800852e <UART_SetConfig+0x2fe>
 800837c:	2302      	movs	r3, #2
 800837e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008382:	e0d4      	b.n	800852e <UART_SetConfig+0x2fe>
 8008384:	2304      	movs	r3, #4
 8008386:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800838a:	e0d0      	b.n	800852e <UART_SetConfig+0x2fe>
 800838c:	2308      	movs	r3, #8
 800838e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008392:	e0cc      	b.n	800852e <UART_SetConfig+0x2fe>
 8008394:	2310      	movs	r3, #16
 8008396:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800839a:	e0c8      	b.n	800852e <UART_SetConfig+0x2fe>
 800839c:	697b      	ldr	r3, [r7, #20]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	4a5e      	ldr	r2, [pc, #376]	; (800851c <UART_SetConfig+0x2ec>)
 80083a2:	4293      	cmp	r3, r2
 80083a4:	d125      	bne.n	80083f2 <UART_SetConfig+0x1c2>
 80083a6:	4b5b      	ldr	r3, [pc, #364]	; (8008514 <UART_SetConfig+0x2e4>)
 80083a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80083ac:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80083b0:	2b30      	cmp	r3, #48	; 0x30
 80083b2:	d016      	beq.n	80083e2 <UART_SetConfig+0x1b2>
 80083b4:	2b30      	cmp	r3, #48	; 0x30
 80083b6:	d818      	bhi.n	80083ea <UART_SetConfig+0x1ba>
 80083b8:	2b20      	cmp	r3, #32
 80083ba:	d00a      	beq.n	80083d2 <UART_SetConfig+0x1a2>
 80083bc:	2b20      	cmp	r3, #32
 80083be:	d814      	bhi.n	80083ea <UART_SetConfig+0x1ba>
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d002      	beq.n	80083ca <UART_SetConfig+0x19a>
 80083c4:	2b10      	cmp	r3, #16
 80083c6:	d008      	beq.n	80083da <UART_SetConfig+0x1aa>
 80083c8:	e00f      	b.n	80083ea <UART_SetConfig+0x1ba>
 80083ca:	2300      	movs	r3, #0
 80083cc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80083d0:	e0ad      	b.n	800852e <UART_SetConfig+0x2fe>
 80083d2:	2302      	movs	r3, #2
 80083d4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80083d8:	e0a9      	b.n	800852e <UART_SetConfig+0x2fe>
 80083da:	2304      	movs	r3, #4
 80083dc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80083e0:	e0a5      	b.n	800852e <UART_SetConfig+0x2fe>
 80083e2:	2308      	movs	r3, #8
 80083e4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80083e8:	e0a1      	b.n	800852e <UART_SetConfig+0x2fe>
 80083ea:	2310      	movs	r3, #16
 80083ec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80083f0:	e09d      	b.n	800852e <UART_SetConfig+0x2fe>
 80083f2:	697b      	ldr	r3, [r7, #20]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	4a4a      	ldr	r2, [pc, #296]	; (8008520 <UART_SetConfig+0x2f0>)
 80083f8:	4293      	cmp	r3, r2
 80083fa:	d125      	bne.n	8008448 <UART_SetConfig+0x218>
 80083fc:	4b45      	ldr	r3, [pc, #276]	; (8008514 <UART_SetConfig+0x2e4>)
 80083fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008402:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8008406:	2bc0      	cmp	r3, #192	; 0xc0
 8008408:	d016      	beq.n	8008438 <UART_SetConfig+0x208>
 800840a:	2bc0      	cmp	r3, #192	; 0xc0
 800840c:	d818      	bhi.n	8008440 <UART_SetConfig+0x210>
 800840e:	2b80      	cmp	r3, #128	; 0x80
 8008410:	d00a      	beq.n	8008428 <UART_SetConfig+0x1f8>
 8008412:	2b80      	cmp	r3, #128	; 0x80
 8008414:	d814      	bhi.n	8008440 <UART_SetConfig+0x210>
 8008416:	2b00      	cmp	r3, #0
 8008418:	d002      	beq.n	8008420 <UART_SetConfig+0x1f0>
 800841a:	2b40      	cmp	r3, #64	; 0x40
 800841c:	d008      	beq.n	8008430 <UART_SetConfig+0x200>
 800841e:	e00f      	b.n	8008440 <UART_SetConfig+0x210>
 8008420:	2300      	movs	r3, #0
 8008422:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008426:	e082      	b.n	800852e <UART_SetConfig+0x2fe>
 8008428:	2302      	movs	r3, #2
 800842a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800842e:	e07e      	b.n	800852e <UART_SetConfig+0x2fe>
 8008430:	2304      	movs	r3, #4
 8008432:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008436:	e07a      	b.n	800852e <UART_SetConfig+0x2fe>
 8008438:	2308      	movs	r3, #8
 800843a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800843e:	e076      	b.n	800852e <UART_SetConfig+0x2fe>
 8008440:	2310      	movs	r3, #16
 8008442:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008446:	e072      	b.n	800852e <UART_SetConfig+0x2fe>
 8008448:	697b      	ldr	r3, [r7, #20]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	4a35      	ldr	r2, [pc, #212]	; (8008524 <UART_SetConfig+0x2f4>)
 800844e:	4293      	cmp	r3, r2
 8008450:	d12a      	bne.n	80084a8 <UART_SetConfig+0x278>
 8008452:	4b30      	ldr	r3, [pc, #192]	; (8008514 <UART_SetConfig+0x2e4>)
 8008454:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008458:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800845c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008460:	d01a      	beq.n	8008498 <UART_SetConfig+0x268>
 8008462:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008466:	d81b      	bhi.n	80084a0 <UART_SetConfig+0x270>
 8008468:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800846c:	d00c      	beq.n	8008488 <UART_SetConfig+0x258>
 800846e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008472:	d815      	bhi.n	80084a0 <UART_SetConfig+0x270>
 8008474:	2b00      	cmp	r3, #0
 8008476:	d003      	beq.n	8008480 <UART_SetConfig+0x250>
 8008478:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800847c:	d008      	beq.n	8008490 <UART_SetConfig+0x260>
 800847e:	e00f      	b.n	80084a0 <UART_SetConfig+0x270>
 8008480:	2300      	movs	r3, #0
 8008482:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008486:	e052      	b.n	800852e <UART_SetConfig+0x2fe>
 8008488:	2302      	movs	r3, #2
 800848a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800848e:	e04e      	b.n	800852e <UART_SetConfig+0x2fe>
 8008490:	2304      	movs	r3, #4
 8008492:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008496:	e04a      	b.n	800852e <UART_SetConfig+0x2fe>
 8008498:	2308      	movs	r3, #8
 800849a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800849e:	e046      	b.n	800852e <UART_SetConfig+0x2fe>
 80084a0:	2310      	movs	r3, #16
 80084a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80084a6:	e042      	b.n	800852e <UART_SetConfig+0x2fe>
 80084a8:	697b      	ldr	r3, [r7, #20]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	4a17      	ldr	r2, [pc, #92]	; (800850c <UART_SetConfig+0x2dc>)
 80084ae:	4293      	cmp	r3, r2
 80084b0:	d13a      	bne.n	8008528 <UART_SetConfig+0x2f8>
 80084b2:	4b18      	ldr	r3, [pc, #96]	; (8008514 <UART_SetConfig+0x2e4>)
 80084b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80084b8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80084bc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80084c0:	d01a      	beq.n	80084f8 <UART_SetConfig+0x2c8>
 80084c2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80084c6:	d81b      	bhi.n	8008500 <UART_SetConfig+0x2d0>
 80084c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80084cc:	d00c      	beq.n	80084e8 <UART_SetConfig+0x2b8>
 80084ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80084d2:	d815      	bhi.n	8008500 <UART_SetConfig+0x2d0>
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d003      	beq.n	80084e0 <UART_SetConfig+0x2b0>
 80084d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80084dc:	d008      	beq.n	80084f0 <UART_SetConfig+0x2c0>
 80084de:	e00f      	b.n	8008500 <UART_SetConfig+0x2d0>
 80084e0:	2300      	movs	r3, #0
 80084e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80084e6:	e022      	b.n	800852e <UART_SetConfig+0x2fe>
 80084e8:	2302      	movs	r3, #2
 80084ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80084ee:	e01e      	b.n	800852e <UART_SetConfig+0x2fe>
 80084f0:	2304      	movs	r3, #4
 80084f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80084f6:	e01a      	b.n	800852e <UART_SetConfig+0x2fe>
 80084f8:	2308      	movs	r3, #8
 80084fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80084fe:	e016      	b.n	800852e <UART_SetConfig+0x2fe>
 8008500:	2310      	movs	r3, #16
 8008502:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008506:	e012      	b.n	800852e <UART_SetConfig+0x2fe>
 8008508:	cfff69f3 	.word	0xcfff69f3
 800850c:	40008000 	.word	0x40008000
 8008510:	40013800 	.word	0x40013800
 8008514:	40021000 	.word	0x40021000
 8008518:	40004400 	.word	0x40004400
 800851c:	40004800 	.word	0x40004800
 8008520:	40004c00 	.word	0x40004c00
 8008524:	40005000 	.word	0x40005000
 8008528:	2310      	movs	r3, #16
 800852a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800852e:	697b      	ldr	r3, [r7, #20]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	4aae      	ldr	r2, [pc, #696]	; (80087ec <UART_SetConfig+0x5bc>)
 8008534:	4293      	cmp	r3, r2
 8008536:	f040 8097 	bne.w	8008668 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800853a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800853e:	2b08      	cmp	r3, #8
 8008540:	d823      	bhi.n	800858a <UART_SetConfig+0x35a>
 8008542:	a201      	add	r2, pc, #4	; (adr r2, 8008548 <UART_SetConfig+0x318>)
 8008544:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008548:	0800856d 	.word	0x0800856d
 800854c:	0800858b 	.word	0x0800858b
 8008550:	08008575 	.word	0x08008575
 8008554:	0800858b 	.word	0x0800858b
 8008558:	0800857b 	.word	0x0800857b
 800855c:	0800858b 	.word	0x0800858b
 8008560:	0800858b 	.word	0x0800858b
 8008564:	0800858b 	.word	0x0800858b
 8008568:	08008583 	.word	0x08008583
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800856c:	f7fd fc9a 	bl	8005ea4 <HAL_RCC_GetPCLK1Freq>
 8008570:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008572:	e010      	b.n	8008596 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008574:	4b9e      	ldr	r3, [pc, #632]	; (80087f0 <UART_SetConfig+0x5c0>)
 8008576:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008578:	e00d      	b.n	8008596 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800857a:	f7fd fc27 	bl	8005dcc <HAL_RCC_GetSysClockFreq>
 800857e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008580:	e009      	b.n	8008596 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008582:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008586:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008588:	e005      	b.n	8008596 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800858a:	2300      	movs	r3, #0
 800858c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800858e:	2301      	movs	r3, #1
 8008590:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008594:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008598:	2b00      	cmp	r3, #0
 800859a:	f000 8130 	beq.w	80087fe <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800859e:	697b      	ldr	r3, [r7, #20]
 80085a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085a2:	4a94      	ldr	r2, [pc, #592]	; (80087f4 <UART_SetConfig+0x5c4>)
 80085a4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80085a8:	461a      	mov	r2, r3
 80085aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085ac:	fbb3 f3f2 	udiv	r3, r3, r2
 80085b0:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80085b2:	697b      	ldr	r3, [r7, #20]
 80085b4:	685a      	ldr	r2, [r3, #4]
 80085b6:	4613      	mov	r3, r2
 80085b8:	005b      	lsls	r3, r3, #1
 80085ba:	4413      	add	r3, r2
 80085bc:	69ba      	ldr	r2, [r7, #24]
 80085be:	429a      	cmp	r2, r3
 80085c0:	d305      	bcc.n	80085ce <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80085c2:	697b      	ldr	r3, [r7, #20]
 80085c4:	685b      	ldr	r3, [r3, #4]
 80085c6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80085c8:	69ba      	ldr	r2, [r7, #24]
 80085ca:	429a      	cmp	r2, r3
 80085cc:	d903      	bls.n	80085d6 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80085ce:	2301      	movs	r3, #1
 80085d0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80085d4:	e113      	b.n	80087fe <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80085d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085d8:	2200      	movs	r2, #0
 80085da:	60bb      	str	r3, [r7, #8]
 80085dc:	60fa      	str	r2, [r7, #12]
 80085de:	697b      	ldr	r3, [r7, #20]
 80085e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085e2:	4a84      	ldr	r2, [pc, #528]	; (80087f4 <UART_SetConfig+0x5c4>)
 80085e4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80085e8:	b29b      	uxth	r3, r3
 80085ea:	2200      	movs	r2, #0
 80085ec:	603b      	str	r3, [r7, #0]
 80085ee:	607a      	str	r2, [r7, #4]
 80085f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80085f4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80085f8:	f7f7 fe0e 	bl	8000218 <__aeabi_uldivmod>
 80085fc:	4602      	mov	r2, r0
 80085fe:	460b      	mov	r3, r1
 8008600:	4610      	mov	r0, r2
 8008602:	4619      	mov	r1, r3
 8008604:	f04f 0200 	mov.w	r2, #0
 8008608:	f04f 0300 	mov.w	r3, #0
 800860c:	020b      	lsls	r3, r1, #8
 800860e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008612:	0202      	lsls	r2, r0, #8
 8008614:	6979      	ldr	r1, [r7, #20]
 8008616:	6849      	ldr	r1, [r1, #4]
 8008618:	0849      	lsrs	r1, r1, #1
 800861a:	2000      	movs	r0, #0
 800861c:	460c      	mov	r4, r1
 800861e:	4605      	mov	r5, r0
 8008620:	eb12 0804 	adds.w	r8, r2, r4
 8008624:	eb43 0905 	adc.w	r9, r3, r5
 8008628:	697b      	ldr	r3, [r7, #20]
 800862a:	685b      	ldr	r3, [r3, #4]
 800862c:	2200      	movs	r2, #0
 800862e:	469a      	mov	sl, r3
 8008630:	4693      	mov	fp, r2
 8008632:	4652      	mov	r2, sl
 8008634:	465b      	mov	r3, fp
 8008636:	4640      	mov	r0, r8
 8008638:	4649      	mov	r1, r9
 800863a:	f7f7 fded 	bl	8000218 <__aeabi_uldivmod>
 800863e:	4602      	mov	r2, r0
 8008640:	460b      	mov	r3, r1
 8008642:	4613      	mov	r3, r2
 8008644:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008646:	6a3b      	ldr	r3, [r7, #32]
 8008648:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800864c:	d308      	bcc.n	8008660 <UART_SetConfig+0x430>
 800864e:	6a3b      	ldr	r3, [r7, #32]
 8008650:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008654:	d204      	bcs.n	8008660 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8008656:	697b      	ldr	r3, [r7, #20]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	6a3a      	ldr	r2, [r7, #32]
 800865c:	60da      	str	r2, [r3, #12]
 800865e:	e0ce      	b.n	80087fe <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8008660:	2301      	movs	r3, #1
 8008662:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008666:	e0ca      	b.n	80087fe <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008668:	697b      	ldr	r3, [r7, #20]
 800866a:	69db      	ldr	r3, [r3, #28]
 800866c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008670:	d166      	bne.n	8008740 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8008672:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008676:	2b08      	cmp	r3, #8
 8008678:	d827      	bhi.n	80086ca <UART_SetConfig+0x49a>
 800867a:	a201      	add	r2, pc, #4	; (adr r2, 8008680 <UART_SetConfig+0x450>)
 800867c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008680:	080086a5 	.word	0x080086a5
 8008684:	080086ad 	.word	0x080086ad
 8008688:	080086b5 	.word	0x080086b5
 800868c:	080086cb 	.word	0x080086cb
 8008690:	080086bb 	.word	0x080086bb
 8008694:	080086cb 	.word	0x080086cb
 8008698:	080086cb 	.word	0x080086cb
 800869c:	080086cb 	.word	0x080086cb
 80086a0:	080086c3 	.word	0x080086c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80086a4:	f7fd fbfe 	bl	8005ea4 <HAL_RCC_GetPCLK1Freq>
 80086a8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80086aa:	e014      	b.n	80086d6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80086ac:	f7fd fc10 	bl	8005ed0 <HAL_RCC_GetPCLK2Freq>
 80086b0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80086b2:	e010      	b.n	80086d6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80086b4:	4b4e      	ldr	r3, [pc, #312]	; (80087f0 <UART_SetConfig+0x5c0>)
 80086b6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80086b8:	e00d      	b.n	80086d6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80086ba:	f7fd fb87 	bl	8005dcc <HAL_RCC_GetSysClockFreq>
 80086be:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80086c0:	e009      	b.n	80086d6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80086c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80086c6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80086c8:	e005      	b.n	80086d6 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80086ca:	2300      	movs	r3, #0
 80086cc:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80086ce:	2301      	movs	r3, #1
 80086d0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80086d4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80086d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086d8:	2b00      	cmp	r3, #0
 80086da:	f000 8090 	beq.w	80087fe <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80086de:	697b      	ldr	r3, [r7, #20]
 80086e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086e2:	4a44      	ldr	r2, [pc, #272]	; (80087f4 <UART_SetConfig+0x5c4>)
 80086e4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80086e8:	461a      	mov	r2, r3
 80086ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086ec:	fbb3 f3f2 	udiv	r3, r3, r2
 80086f0:	005a      	lsls	r2, r3, #1
 80086f2:	697b      	ldr	r3, [r7, #20]
 80086f4:	685b      	ldr	r3, [r3, #4]
 80086f6:	085b      	lsrs	r3, r3, #1
 80086f8:	441a      	add	r2, r3
 80086fa:	697b      	ldr	r3, [r7, #20]
 80086fc:	685b      	ldr	r3, [r3, #4]
 80086fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8008702:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008704:	6a3b      	ldr	r3, [r7, #32]
 8008706:	2b0f      	cmp	r3, #15
 8008708:	d916      	bls.n	8008738 <UART_SetConfig+0x508>
 800870a:	6a3b      	ldr	r3, [r7, #32]
 800870c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008710:	d212      	bcs.n	8008738 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008712:	6a3b      	ldr	r3, [r7, #32]
 8008714:	b29b      	uxth	r3, r3
 8008716:	f023 030f 	bic.w	r3, r3, #15
 800871a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800871c:	6a3b      	ldr	r3, [r7, #32]
 800871e:	085b      	lsrs	r3, r3, #1
 8008720:	b29b      	uxth	r3, r3
 8008722:	f003 0307 	and.w	r3, r3, #7
 8008726:	b29a      	uxth	r2, r3
 8008728:	8bfb      	ldrh	r3, [r7, #30]
 800872a:	4313      	orrs	r3, r2
 800872c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800872e:	697b      	ldr	r3, [r7, #20]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	8bfa      	ldrh	r2, [r7, #30]
 8008734:	60da      	str	r2, [r3, #12]
 8008736:	e062      	b.n	80087fe <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8008738:	2301      	movs	r3, #1
 800873a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800873e:	e05e      	b.n	80087fe <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008740:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008744:	2b08      	cmp	r3, #8
 8008746:	d828      	bhi.n	800879a <UART_SetConfig+0x56a>
 8008748:	a201      	add	r2, pc, #4	; (adr r2, 8008750 <UART_SetConfig+0x520>)
 800874a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800874e:	bf00      	nop
 8008750:	08008775 	.word	0x08008775
 8008754:	0800877d 	.word	0x0800877d
 8008758:	08008785 	.word	0x08008785
 800875c:	0800879b 	.word	0x0800879b
 8008760:	0800878b 	.word	0x0800878b
 8008764:	0800879b 	.word	0x0800879b
 8008768:	0800879b 	.word	0x0800879b
 800876c:	0800879b 	.word	0x0800879b
 8008770:	08008793 	.word	0x08008793
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008774:	f7fd fb96 	bl	8005ea4 <HAL_RCC_GetPCLK1Freq>
 8008778:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800877a:	e014      	b.n	80087a6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800877c:	f7fd fba8 	bl	8005ed0 <HAL_RCC_GetPCLK2Freq>
 8008780:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008782:	e010      	b.n	80087a6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008784:	4b1a      	ldr	r3, [pc, #104]	; (80087f0 <UART_SetConfig+0x5c0>)
 8008786:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008788:	e00d      	b.n	80087a6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800878a:	f7fd fb1f 	bl	8005dcc <HAL_RCC_GetSysClockFreq>
 800878e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008790:	e009      	b.n	80087a6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008792:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008796:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008798:	e005      	b.n	80087a6 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800879a:	2300      	movs	r3, #0
 800879c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800879e:	2301      	movs	r3, #1
 80087a0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80087a4:	bf00      	nop
    }

    if (pclk != 0U)
 80087a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d028      	beq.n	80087fe <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80087ac:	697b      	ldr	r3, [r7, #20]
 80087ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087b0:	4a10      	ldr	r2, [pc, #64]	; (80087f4 <UART_SetConfig+0x5c4>)
 80087b2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80087b6:	461a      	mov	r2, r3
 80087b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087ba:	fbb3 f2f2 	udiv	r2, r3, r2
 80087be:	697b      	ldr	r3, [r7, #20]
 80087c0:	685b      	ldr	r3, [r3, #4]
 80087c2:	085b      	lsrs	r3, r3, #1
 80087c4:	441a      	add	r2, r3
 80087c6:	697b      	ldr	r3, [r7, #20]
 80087c8:	685b      	ldr	r3, [r3, #4]
 80087ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80087ce:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80087d0:	6a3b      	ldr	r3, [r7, #32]
 80087d2:	2b0f      	cmp	r3, #15
 80087d4:	d910      	bls.n	80087f8 <UART_SetConfig+0x5c8>
 80087d6:	6a3b      	ldr	r3, [r7, #32]
 80087d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80087dc:	d20c      	bcs.n	80087f8 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80087de:	6a3b      	ldr	r3, [r7, #32]
 80087e0:	b29a      	uxth	r2, r3
 80087e2:	697b      	ldr	r3, [r7, #20]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	60da      	str	r2, [r3, #12]
 80087e8:	e009      	b.n	80087fe <UART_SetConfig+0x5ce>
 80087ea:	bf00      	nop
 80087ec:	40008000 	.word	0x40008000
 80087f0:	00f42400 	.word	0x00f42400
 80087f4:	0800d604 	.word	0x0800d604
      }
      else
      {
        ret = HAL_ERROR;
 80087f8:	2301      	movs	r3, #1
 80087fa:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80087fe:	697b      	ldr	r3, [r7, #20]
 8008800:	2201      	movs	r2, #1
 8008802:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8008806:	697b      	ldr	r3, [r7, #20]
 8008808:	2201      	movs	r2, #1
 800880a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800880e:	697b      	ldr	r3, [r7, #20]
 8008810:	2200      	movs	r2, #0
 8008812:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8008814:	697b      	ldr	r3, [r7, #20]
 8008816:	2200      	movs	r2, #0
 8008818:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800881a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800881e:	4618      	mov	r0, r3
 8008820:	3730      	adds	r7, #48	; 0x30
 8008822:	46bd      	mov	sp, r7
 8008824:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08008828 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008828:	b480      	push	{r7}
 800882a:	b083      	sub	sp, #12
 800882c:	af00      	add	r7, sp, #0
 800882e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008834:	f003 0301 	and.w	r3, r3, #1
 8008838:	2b00      	cmp	r3, #0
 800883a:	d00a      	beq.n	8008852 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	685b      	ldr	r3, [r3, #4]
 8008842:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	430a      	orrs	r2, r1
 8008850:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008856:	f003 0302 	and.w	r3, r3, #2
 800885a:	2b00      	cmp	r3, #0
 800885c:	d00a      	beq.n	8008874 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	685b      	ldr	r3, [r3, #4]
 8008864:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	430a      	orrs	r2, r1
 8008872:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008878:	f003 0304 	and.w	r3, r3, #4
 800887c:	2b00      	cmp	r3, #0
 800887e:	d00a      	beq.n	8008896 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	685b      	ldr	r3, [r3, #4]
 8008886:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	430a      	orrs	r2, r1
 8008894:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800889a:	f003 0308 	and.w	r3, r3, #8
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d00a      	beq.n	80088b8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	685b      	ldr	r3, [r3, #4]
 80088a8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	430a      	orrs	r2, r1
 80088b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088bc:	f003 0310 	and.w	r3, r3, #16
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d00a      	beq.n	80088da <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	689b      	ldr	r3, [r3, #8]
 80088ca:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	430a      	orrs	r2, r1
 80088d8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088de:	f003 0320 	and.w	r3, r3, #32
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d00a      	beq.n	80088fc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	689b      	ldr	r3, [r3, #8]
 80088ec:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	430a      	orrs	r2, r1
 80088fa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008900:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008904:	2b00      	cmp	r3, #0
 8008906:	d01a      	beq.n	800893e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	685b      	ldr	r3, [r3, #4]
 800890e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	430a      	orrs	r2, r1
 800891c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008922:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008926:	d10a      	bne.n	800893e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	685b      	ldr	r3, [r3, #4]
 800892e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	430a      	orrs	r2, r1
 800893c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008942:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008946:	2b00      	cmp	r3, #0
 8008948:	d00a      	beq.n	8008960 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	685b      	ldr	r3, [r3, #4]
 8008950:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	430a      	orrs	r2, r1
 800895e:	605a      	str	r2, [r3, #4]
  }
}
 8008960:	bf00      	nop
 8008962:	370c      	adds	r7, #12
 8008964:	46bd      	mov	sp, r7
 8008966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800896a:	4770      	bx	lr

0800896c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800896c:	b580      	push	{r7, lr}
 800896e:	b086      	sub	sp, #24
 8008970:	af02      	add	r7, sp, #8
 8008972:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	2200      	movs	r2, #0
 8008978:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800897c:	f7f9 fa44 	bl	8001e08 <HAL_GetTick>
 8008980:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	f003 0308 	and.w	r3, r3, #8
 800898c:	2b08      	cmp	r3, #8
 800898e:	d10e      	bne.n	80089ae <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008990:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008994:	9300      	str	r3, [sp, #0]
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	2200      	movs	r2, #0
 800899a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800899e:	6878      	ldr	r0, [r7, #4]
 80089a0:	f000 f82f 	bl	8008a02 <UART_WaitOnFlagUntilTimeout>
 80089a4:	4603      	mov	r3, r0
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d001      	beq.n	80089ae <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80089aa:	2303      	movs	r3, #3
 80089ac:	e025      	b.n	80089fa <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	f003 0304 	and.w	r3, r3, #4
 80089b8:	2b04      	cmp	r3, #4
 80089ba:	d10e      	bne.n	80089da <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80089bc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80089c0:	9300      	str	r3, [sp, #0]
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	2200      	movs	r2, #0
 80089c6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80089ca:	6878      	ldr	r0, [r7, #4]
 80089cc:	f000 f819 	bl	8008a02 <UART_WaitOnFlagUntilTimeout>
 80089d0:	4603      	mov	r3, r0
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d001      	beq.n	80089da <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80089d6:	2303      	movs	r3, #3
 80089d8:	e00f      	b.n	80089fa <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	2220      	movs	r2, #32
 80089de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	2220      	movs	r2, #32
 80089e6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	2200      	movs	r2, #0
 80089ee:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	2200      	movs	r2, #0
 80089f4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80089f8:	2300      	movs	r3, #0
}
 80089fa:	4618      	mov	r0, r3
 80089fc:	3710      	adds	r7, #16
 80089fe:	46bd      	mov	sp, r7
 8008a00:	bd80      	pop	{r7, pc}

08008a02 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008a02:	b580      	push	{r7, lr}
 8008a04:	b09c      	sub	sp, #112	; 0x70
 8008a06:	af00      	add	r7, sp, #0
 8008a08:	60f8      	str	r0, [r7, #12]
 8008a0a:	60b9      	str	r1, [r7, #8]
 8008a0c:	603b      	str	r3, [r7, #0]
 8008a0e:	4613      	mov	r3, r2
 8008a10:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008a12:	e0a9      	b.n	8008b68 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008a14:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008a16:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008a1a:	f000 80a5 	beq.w	8008b68 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008a1e:	f7f9 f9f3 	bl	8001e08 <HAL_GetTick>
 8008a22:	4602      	mov	r2, r0
 8008a24:	683b      	ldr	r3, [r7, #0]
 8008a26:	1ad3      	subs	r3, r2, r3
 8008a28:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008a2a:	429a      	cmp	r2, r3
 8008a2c:	d302      	bcc.n	8008a34 <UART_WaitOnFlagUntilTimeout+0x32>
 8008a2e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d140      	bne.n	8008ab6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008a3c:	e853 3f00 	ldrex	r3, [r3]
 8008a40:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008a42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008a44:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008a48:	667b      	str	r3, [r7, #100]	; 0x64
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	461a      	mov	r2, r3
 8008a50:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008a52:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008a54:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a56:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008a58:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008a5a:	e841 2300 	strex	r3, r2, [r1]
 8008a5e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008a60:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d1e6      	bne.n	8008a34 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	3308      	adds	r3, #8
 8008a6c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a70:	e853 3f00 	ldrex	r3, [r3]
 8008a74:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008a76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a78:	f023 0301 	bic.w	r3, r3, #1
 8008a7c:	663b      	str	r3, [r7, #96]	; 0x60
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	3308      	adds	r3, #8
 8008a84:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008a86:	64ba      	str	r2, [r7, #72]	; 0x48
 8008a88:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a8a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008a8c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008a8e:	e841 2300 	strex	r3, r2, [r1]
 8008a92:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008a94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d1e5      	bne.n	8008a66 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	2220      	movs	r2, #32
 8008a9e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	2220      	movs	r2, #32
 8008aa6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	2200      	movs	r2, #0
 8008aae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8008ab2:	2303      	movs	r3, #3
 8008ab4:	e069      	b.n	8008b8a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	f003 0304 	and.w	r3, r3, #4
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d051      	beq.n	8008b68 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	69db      	ldr	r3, [r3, #28]
 8008aca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008ace:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008ad2:	d149      	bne.n	8008b68 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008adc:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ae4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ae6:	e853 3f00 	ldrex	r3, [r3]
 8008aea:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008aee:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008af2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	461a      	mov	r2, r3
 8008afa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008afc:	637b      	str	r3, [r7, #52]	; 0x34
 8008afe:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b00:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008b02:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008b04:	e841 2300 	strex	r3, r2, [r1]
 8008b08:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008b0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d1e6      	bne.n	8008ade <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	3308      	adds	r3, #8
 8008b16:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b18:	697b      	ldr	r3, [r7, #20]
 8008b1a:	e853 3f00 	ldrex	r3, [r3]
 8008b1e:	613b      	str	r3, [r7, #16]
   return(result);
 8008b20:	693b      	ldr	r3, [r7, #16]
 8008b22:	f023 0301 	bic.w	r3, r3, #1
 8008b26:	66bb      	str	r3, [r7, #104]	; 0x68
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	3308      	adds	r3, #8
 8008b2e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008b30:	623a      	str	r2, [r7, #32]
 8008b32:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b34:	69f9      	ldr	r1, [r7, #28]
 8008b36:	6a3a      	ldr	r2, [r7, #32]
 8008b38:	e841 2300 	strex	r3, r2, [r1]
 8008b3c:	61bb      	str	r3, [r7, #24]
   return(result);
 8008b3e:	69bb      	ldr	r3, [r7, #24]
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d1e5      	bne.n	8008b10 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	2220      	movs	r2, #32
 8008b48:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	2220      	movs	r2, #32
 8008b50:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	2220      	movs	r2, #32
 8008b58:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	2200      	movs	r2, #0
 8008b60:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8008b64:	2303      	movs	r3, #3
 8008b66:	e010      	b.n	8008b8a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	69da      	ldr	r2, [r3, #28]
 8008b6e:	68bb      	ldr	r3, [r7, #8]
 8008b70:	4013      	ands	r3, r2
 8008b72:	68ba      	ldr	r2, [r7, #8]
 8008b74:	429a      	cmp	r2, r3
 8008b76:	bf0c      	ite	eq
 8008b78:	2301      	moveq	r3, #1
 8008b7a:	2300      	movne	r3, #0
 8008b7c:	b2db      	uxtb	r3, r3
 8008b7e:	461a      	mov	r2, r3
 8008b80:	79fb      	ldrb	r3, [r7, #7]
 8008b82:	429a      	cmp	r2, r3
 8008b84:	f43f af46 	beq.w	8008a14 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008b88:	2300      	movs	r3, #0
}
 8008b8a:	4618      	mov	r0, r3
 8008b8c:	3770      	adds	r7, #112	; 0x70
 8008b8e:	46bd      	mov	sp, r7
 8008b90:	bd80      	pop	{r7, pc}

08008b92 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008b92:	b480      	push	{r7}
 8008b94:	b085      	sub	sp, #20
 8008b96:	af00      	add	r7, sp, #0
 8008b98:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008ba0:	2b01      	cmp	r3, #1
 8008ba2:	d101      	bne.n	8008ba8 <HAL_UARTEx_DisableFifoMode+0x16>
 8008ba4:	2302      	movs	r3, #2
 8008ba6:	e027      	b.n	8008bf8 <HAL_UARTEx_DisableFifoMode+0x66>
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	2201      	movs	r2, #1
 8008bac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	2224      	movs	r2, #36	; 0x24
 8008bb4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	681a      	ldr	r2, [r3, #0]
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	f022 0201 	bic.w	r2, r2, #1
 8008bce:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008bd6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	2200      	movs	r2, #0
 8008bdc:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	68fa      	ldr	r2, [r7, #12]
 8008be4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	2220      	movs	r2, #32
 8008bea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	2200      	movs	r2, #0
 8008bf2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008bf6:	2300      	movs	r3, #0
}
 8008bf8:	4618      	mov	r0, r3
 8008bfa:	3714      	adds	r7, #20
 8008bfc:	46bd      	mov	sp, r7
 8008bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c02:	4770      	bx	lr

08008c04 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008c04:	b580      	push	{r7, lr}
 8008c06:	b084      	sub	sp, #16
 8008c08:	af00      	add	r7, sp, #0
 8008c0a:	6078      	str	r0, [r7, #4]
 8008c0c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008c14:	2b01      	cmp	r3, #1
 8008c16:	d101      	bne.n	8008c1c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008c18:	2302      	movs	r3, #2
 8008c1a:	e02d      	b.n	8008c78 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	2201      	movs	r2, #1
 8008c20:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	2224      	movs	r2, #36	; 0x24
 8008c28:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	681a      	ldr	r2, [r3, #0]
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	f022 0201 	bic.w	r2, r2, #1
 8008c42:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	689b      	ldr	r3, [r3, #8]
 8008c4a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	683a      	ldr	r2, [r7, #0]
 8008c54:	430a      	orrs	r2, r1
 8008c56:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008c58:	6878      	ldr	r0, [r7, #4]
 8008c5a:	f000 f84f 	bl	8008cfc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	68fa      	ldr	r2, [r7, #12]
 8008c64:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	2220      	movs	r2, #32
 8008c6a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	2200      	movs	r2, #0
 8008c72:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008c76:	2300      	movs	r3, #0
}
 8008c78:	4618      	mov	r0, r3
 8008c7a:	3710      	adds	r7, #16
 8008c7c:	46bd      	mov	sp, r7
 8008c7e:	bd80      	pop	{r7, pc}

08008c80 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008c80:	b580      	push	{r7, lr}
 8008c82:	b084      	sub	sp, #16
 8008c84:	af00      	add	r7, sp, #0
 8008c86:	6078      	str	r0, [r7, #4]
 8008c88:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008c90:	2b01      	cmp	r3, #1
 8008c92:	d101      	bne.n	8008c98 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008c94:	2302      	movs	r3, #2
 8008c96:	e02d      	b.n	8008cf4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	2201      	movs	r2, #1
 8008c9c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	2224      	movs	r2, #36	; 0x24
 8008ca4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	681a      	ldr	r2, [r3, #0]
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	f022 0201 	bic.w	r2, r2, #1
 8008cbe:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	689b      	ldr	r3, [r3, #8]
 8008cc6:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	683a      	ldr	r2, [r7, #0]
 8008cd0:	430a      	orrs	r2, r1
 8008cd2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008cd4:	6878      	ldr	r0, [r7, #4]
 8008cd6:	f000 f811 	bl	8008cfc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	68fa      	ldr	r2, [r7, #12]
 8008ce0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	2220      	movs	r2, #32
 8008ce6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	2200      	movs	r2, #0
 8008cee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008cf2:	2300      	movs	r3, #0
}
 8008cf4:	4618      	mov	r0, r3
 8008cf6:	3710      	adds	r7, #16
 8008cf8:	46bd      	mov	sp, r7
 8008cfa:	bd80      	pop	{r7, pc}

08008cfc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008cfc:	b480      	push	{r7}
 8008cfe:	b085      	sub	sp, #20
 8008d00:	af00      	add	r7, sp, #0
 8008d02:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d108      	bne.n	8008d1e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	2201      	movs	r2, #1
 8008d10:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	2201      	movs	r2, #1
 8008d18:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008d1c:	e031      	b.n	8008d82 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008d1e:	2308      	movs	r3, #8
 8008d20:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008d22:	2308      	movs	r3, #8
 8008d24:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	689b      	ldr	r3, [r3, #8]
 8008d2c:	0e5b      	lsrs	r3, r3, #25
 8008d2e:	b2db      	uxtb	r3, r3
 8008d30:	f003 0307 	and.w	r3, r3, #7
 8008d34:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	689b      	ldr	r3, [r3, #8]
 8008d3c:	0f5b      	lsrs	r3, r3, #29
 8008d3e:	b2db      	uxtb	r3, r3
 8008d40:	f003 0307 	and.w	r3, r3, #7
 8008d44:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008d46:	7bbb      	ldrb	r3, [r7, #14]
 8008d48:	7b3a      	ldrb	r2, [r7, #12]
 8008d4a:	4911      	ldr	r1, [pc, #68]	; (8008d90 <UARTEx_SetNbDataToProcess+0x94>)
 8008d4c:	5c8a      	ldrb	r2, [r1, r2]
 8008d4e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008d52:	7b3a      	ldrb	r2, [r7, #12]
 8008d54:	490f      	ldr	r1, [pc, #60]	; (8008d94 <UARTEx_SetNbDataToProcess+0x98>)
 8008d56:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008d58:	fb93 f3f2 	sdiv	r3, r3, r2
 8008d5c:	b29a      	uxth	r2, r3
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008d64:	7bfb      	ldrb	r3, [r7, #15]
 8008d66:	7b7a      	ldrb	r2, [r7, #13]
 8008d68:	4909      	ldr	r1, [pc, #36]	; (8008d90 <UARTEx_SetNbDataToProcess+0x94>)
 8008d6a:	5c8a      	ldrb	r2, [r1, r2]
 8008d6c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008d70:	7b7a      	ldrb	r2, [r7, #13]
 8008d72:	4908      	ldr	r1, [pc, #32]	; (8008d94 <UARTEx_SetNbDataToProcess+0x98>)
 8008d74:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008d76:	fb93 f3f2 	sdiv	r3, r3, r2
 8008d7a:	b29a      	uxth	r2, r3
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8008d82:	bf00      	nop
 8008d84:	3714      	adds	r7, #20
 8008d86:	46bd      	mov	sp, r7
 8008d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d8c:	4770      	bx	lr
 8008d8e:	bf00      	nop
 8008d90:	0800d61c 	.word	0x0800d61c
 8008d94:	0800d624 	.word	0x0800d624

08008d98 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8008d98:	b480      	push	{r7}
 8008d9a:	b085      	sub	sp, #20
 8008d9c:	af00      	add	r7, sp, #0
 8008d9e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	2200      	movs	r2, #0
 8008da4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8008da8:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8008dac:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	b29a      	uxth	r2, r3
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8008db8:	2300      	movs	r3, #0
}
 8008dba:	4618      	mov	r0, r3
 8008dbc:	3714      	adds	r7, #20
 8008dbe:	46bd      	mov	sp, r7
 8008dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dc4:	4770      	bx	lr

08008dc6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8008dc6:	b480      	push	{r7}
 8008dc8:	b085      	sub	sp, #20
 8008dca:	af00      	add	r7, sp, #0
 8008dcc:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8008dce:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8008dd2:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8008dda:	b29a      	uxth	r2, r3
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	b29b      	uxth	r3, r3
 8008de0:	43db      	mvns	r3, r3
 8008de2:	b29b      	uxth	r3, r3
 8008de4:	4013      	ands	r3, r2
 8008de6:	b29a      	uxth	r2, r3
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8008dee:	2300      	movs	r3, #0
}
 8008df0:	4618      	mov	r0, r3
 8008df2:	3714      	adds	r7, #20
 8008df4:	46bd      	mov	sp, r7
 8008df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dfa:	4770      	bx	lr

08008dfc <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8008dfc:	b084      	sub	sp, #16
 8008dfe:	b480      	push	{r7}
 8008e00:	b083      	sub	sp, #12
 8008e02:	af00      	add	r7, sp, #0
 8008e04:	6078      	str	r0, [r7, #4]
 8008e06:	f107 0014 	add.w	r0, r7, #20
 8008e0a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	2201      	movs	r2, #1
 8008e12:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	2200      	movs	r2, #0
 8008e1a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	2200      	movs	r2, #0
 8008e22:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	2200      	movs	r2, #0
 8008e2a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8008e2e:	2300      	movs	r3, #0
}
 8008e30:	4618      	mov	r0, r3
 8008e32:	370c      	adds	r7, #12
 8008e34:	46bd      	mov	sp, r7
 8008e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e3a:	b004      	add	sp, #16
 8008e3c:	4770      	bx	lr
	...

08008e40 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008e40:	b480      	push	{r7}
 8008e42:	b09d      	sub	sp, #116	; 0x74
 8008e44:	af00      	add	r7, sp, #0
 8008e46:	6078      	str	r0, [r7, #4]
 8008e48:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8008e4a:	2300      	movs	r3, #0
 8008e4c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8008e50:	687a      	ldr	r2, [r7, #4]
 8008e52:	683b      	ldr	r3, [r7, #0]
 8008e54:	781b      	ldrb	r3, [r3, #0]
 8008e56:	009b      	lsls	r3, r3, #2
 8008e58:	4413      	add	r3, r2
 8008e5a:	881b      	ldrh	r3, [r3, #0]
 8008e5c:	b29b      	uxth	r3, r3
 8008e5e:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8008e62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008e66:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8008e6a:	683b      	ldr	r3, [r7, #0]
 8008e6c:	78db      	ldrb	r3, [r3, #3]
 8008e6e:	2b03      	cmp	r3, #3
 8008e70:	d81f      	bhi.n	8008eb2 <USB_ActivateEndpoint+0x72>
 8008e72:	a201      	add	r2, pc, #4	; (adr r2, 8008e78 <USB_ActivateEndpoint+0x38>)
 8008e74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e78:	08008e89 	.word	0x08008e89
 8008e7c:	08008ea5 	.word	0x08008ea5
 8008e80:	08008ebb 	.word	0x08008ebb
 8008e84:	08008e97 	.word	0x08008e97
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8008e88:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8008e8c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008e90:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8008e94:	e012      	b.n	8008ebc <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8008e96:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8008e9a:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8008e9e:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8008ea2:	e00b      	b.n	8008ebc <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8008ea4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8008ea8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008eac:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8008eb0:	e004      	b.n	8008ebc <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8008eb2:	2301      	movs	r3, #1
 8008eb4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 8008eb8:	e000      	b.n	8008ebc <USB_ActivateEndpoint+0x7c>
      break;
 8008eba:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8008ebc:	687a      	ldr	r2, [r7, #4]
 8008ebe:	683b      	ldr	r3, [r7, #0]
 8008ec0:	781b      	ldrb	r3, [r3, #0]
 8008ec2:	009b      	lsls	r3, r3, #2
 8008ec4:	441a      	add	r2, r3
 8008ec6:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8008eca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008ece:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008ed2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008ed6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008eda:	b29b      	uxth	r3, r3
 8008edc:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8008ede:	687a      	ldr	r2, [r7, #4]
 8008ee0:	683b      	ldr	r3, [r7, #0]
 8008ee2:	781b      	ldrb	r3, [r3, #0]
 8008ee4:	009b      	lsls	r3, r3, #2
 8008ee6:	4413      	add	r3, r2
 8008ee8:	881b      	ldrh	r3, [r3, #0]
 8008eea:	b29b      	uxth	r3, r3
 8008eec:	b21b      	sxth	r3, r3
 8008eee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008ef2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008ef6:	b21a      	sxth	r2, r3
 8008ef8:	683b      	ldr	r3, [r7, #0]
 8008efa:	781b      	ldrb	r3, [r3, #0]
 8008efc:	b21b      	sxth	r3, r3
 8008efe:	4313      	orrs	r3, r2
 8008f00:	b21b      	sxth	r3, r3
 8008f02:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8008f06:	687a      	ldr	r2, [r7, #4]
 8008f08:	683b      	ldr	r3, [r7, #0]
 8008f0a:	781b      	ldrb	r3, [r3, #0]
 8008f0c:	009b      	lsls	r3, r3, #2
 8008f0e:	441a      	add	r2, r3
 8008f10:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8008f14:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008f18:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008f1c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008f20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008f24:	b29b      	uxth	r3, r3
 8008f26:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8008f28:	683b      	ldr	r3, [r7, #0]
 8008f2a:	7b1b      	ldrb	r3, [r3, #12]
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	f040 8149 	bne.w	80091c4 <USB_ActivateEndpoint+0x384>
  {
    if (ep->is_in != 0U)
 8008f32:	683b      	ldr	r3, [r7, #0]
 8008f34:	785b      	ldrb	r3, [r3, #1]
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	f000 8084 	beq.w	8009044 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	61bb      	str	r3, [r7, #24]
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008f46:	b29b      	uxth	r3, r3
 8008f48:	461a      	mov	r2, r3
 8008f4a:	69bb      	ldr	r3, [r7, #24]
 8008f4c:	4413      	add	r3, r2
 8008f4e:	61bb      	str	r3, [r7, #24]
 8008f50:	683b      	ldr	r3, [r7, #0]
 8008f52:	781b      	ldrb	r3, [r3, #0]
 8008f54:	00da      	lsls	r2, r3, #3
 8008f56:	69bb      	ldr	r3, [r7, #24]
 8008f58:	4413      	add	r3, r2
 8008f5a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008f5e:	617b      	str	r3, [r7, #20]
 8008f60:	683b      	ldr	r3, [r7, #0]
 8008f62:	88db      	ldrh	r3, [r3, #6]
 8008f64:	085b      	lsrs	r3, r3, #1
 8008f66:	b29b      	uxth	r3, r3
 8008f68:	005b      	lsls	r3, r3, #1
 8008f6a:	b29a      	uxth	r2, r3
 8008f6c:	697b      	ldr	r3, [r7, #20]
 8008f6e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008f70:	687a      	ldr	r2, [r7, #4]
 8008f72:	683b      	ldr	r3, [r7, #0]
 8008f74:	781b      	ldrb	r3, [r3, #0]
 8008f76:	009b      	lsls	r3, r3, #2
 8008f78:	4413      	add	r3, r2
 8008f7a:	881b      	ldrh	r3, [r3, #0]
 8008f7c:	827b      	strh	r3, [r7, #18]
 8008f7e:	8a7b      	ldrh	r3, [r7, #18]
 8008f80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d01b      	beq.n	8008fc0 <USB_ActivateEndpoint+0x180>
 8008f88:	687a      	ldr	r2, [r7, #4]
 8008f8a:	683b      	ldr	r3, [r7, #0]
 8008f8c:	781b      	ldrb	r3, [r3, #0]
 8008f8e:	009b      	lsls	r3, r3, #2
 8008f90:	4413      	add	r3, r2
 8008f92:	881b      	ldrh	r3, [r3, #0]
 8008f94:	b29b      	uxth	r3, r3
 8008f96:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008f9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008f9e:	823b      	strh	r3, [r7, #16]
 8008fa0:	687a      	ldr	r2, [r7, #4]
 8008fa2:	683b      	ldr	r3, [r7, #0]
 8008fa4:	781b      	ldrb	r3, [r3, #0]
 8008fa6:	009b      	lsls	r3, r3, #2
 8008fa8:	441a      	add	r2, r3
 8008faa:	8a3b      	ldrh	r3, [r7, #16]
 8008fac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008fb0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008fb4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008fb8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008fbc:	b29b      	uxth	r3, r3
 8008fbe:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008fc0:	683b      	ldr	r3, [r7, #0]
 8008fc2:	78db      	ldrb	r3, [r3, #3]
 8008fc4:	2b01      	cmp	r3, #1
 8008fc6:	d020      	beq.n	800900a <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008fc8:	687a      	ldr	r2, [r7, #4]
 8008fca:	683b      	ldr	r3, [r7, #0]
 8008fcc:	781b      	ldrb	r3, [r3, #0]
 8008fce:	009b      	lsls	r3, r3, #2
 8008fd0:	4413      	add	r3, r2
 8008fd2:	881b      	ldrh	r3, [r3, #0]
 8008fd4:	b29b      	uxth	r3, r3
 8008fd6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008fda:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008fde:	81bb      	strh	r3, [r7, #12]
 8008fe0:	89bb      	ldrh	r3, [r7, #12]
 8008fe2:	f083 0320 	eor.w	r3, r3, #32
 8008fe6:	81bb      	strh	r3, [r7, #12]
 8008fe8:	687a      	ldr	r2, [r7, #4]
 8008fea:	683b      	ldr	r3, [r7, #0]
 8008fec:	781b      	ldrb	r3, [r3, #0]
 8008fee:	009b      	lsls	r3, r3, #2
 8008ff0:	441a      	add	r2, r3
 8008ff2:	89bb      	ldrh	r3, [r7, #12]
 8008ff4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008ff8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008ffc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009000:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009004:	b29b      	uxth	r3, r3
 8009006:	8013      	strh	r3, [r2, #0]
 8009008:	e2a6      	b.n	8009558 <USB_ActivateEndpoint+0x718>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800900a:	687a      	ldr	r2, [r7, #4]
 800900c:	683b      	ldr	r3, [r7, #0]
 800900e:	781b      	ldrb	r3, [r3, #0]
 8009010:	009b      	lsls	r3, r3, #2
 8009012:	4413      	add	r3, r2
 8009014:	881b      	ldrh	r3, [r3, #0]
 8009016:	b29b      	uxth	r3, r3
 8009018:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800901c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009020:	81fb      	strh	r3, [r7, #14]
 8009022:	687a      	ldr	r2, [r7, #4]
 8009024:	683b      	ldr	r3, [r7, #0]
 8009026:	781b      	ldrb	r3, [r3, #0]
 8009028:	009b      	lsls	r3, r3, #2
 800902a:	441a      	add	r2, r3
 800902c:	89fb      	ldrh	r3, [r7, #14]
 800902e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009032:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009036:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800903a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800903e:	b29b      	uxth	r3, r3
 8009040:	8013      	strh	r3, [r2, #0]
 8009042:	e289      	b.n	8009558 <USB_ActivateEndpoint+0x718>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	633b      	str	r3, [r7, #48]	; 0x30
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800904e:	b29b      	uxth	r3, r3
 8009050:	461a      	mov	r2, r3
 8009052:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009054:	4413      	add	r3, r2
 8009056:	633b      	str	r3, [r7, #48]	; 0x30
 8009058:	683b      	ldr	r3, [r7, #0]
 800905a:	781b      	ldrb	r3, [r3, #0]
 800905c:	00da      	lsls	r2, r3, #3
 800905e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009060:	4413      	add	r3, r2
 8009062:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009066:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009068:	683b      	ldr	r3, [r7, #0]
 800906a:	88db      	ldrh	r3, [r3, #6]
 800906c:	085b      	lsrs	r3, r3, #1
 800906e:	b29b      	uxth	r3, r3
 8009070:	005b      	lsls	r3, r3, #1
 8009072:	b29a      	uxth	r2, r3
 8009074:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009076:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	62bb      	str	r3, [r7, #40]	; 0x28
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009082:	b29b      	uxth	r3, r3
 8009084:	461a      	mov	r2, r3
 8009086:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009088:	4413      	add	r3, r2
 800908a:	62bb      	str	r3, [r7, #40]	; 0x28
 800908c:	683b      	ldr	r3, [r7, #0]
 800908e:	781b      	ldrb	r3, [r3, #0]
 8009090:	00da      	lsls	r2, r3, #3
 8009092:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009094:	4413      	add	r3, r2
 8009096:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800909a:	627b      	str	r3, [r7, #36]	; 0x24
 800909c:	683b      	ldr	r3, [r7, #0]
 800909e:	691b      	ldr	r3, [r3, #16]
 80090a0:	2b3e      	cmp	r3, #62	; 0x3e
 80090a2:	d918      	bls.n	80090d6 <USB_ActivateEndpoint+0x296>
 80090a4:	683b      	ldr	r3, [r7, #0]
 80090a6:	691b      	ldr	r3, [r3, #16]
 80090a8:	095b      	lsrs	r3, r3, #5
 80090aa:	66bb      	str	r3, [r7, #104]	; 0x68
 80090ac:	683b      	ldr	r3, [r7, #0]
 80090ae:	691b      	ldr	r3, [r3, #16]
 80090b0:	f003 031f 	and.w	r3, r3, #31
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d102      	bne.n	80090be <USB_ActivateEndpoint+0x27e>
 80090b8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80090ba:	3b01      	subs	r3, #1
 80090bc:	66bb      	str	r3, [r7, #104]	; 0x68
 80090be:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80090c0:	b29b      	uxth	r3, r3
 80090c2:	029b      	lsls	r3, r3, #10
 80090c4:	b29b      	uxth	r3, r3
 80090c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80090ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80090ce:	b29a      	uxth	r2, r3
 80090d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090d2:	801a      	strh	r2, [r3, #0]
 80090d4:	e029      	b.n	800912a <USB_ActivateEndpoint+0x2ea>
 80090d6:	683b      	ldr	r3, [r7, #0]
 80090d8:	691b      	ldr	r3, [r3, #16]
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d112      	bne.n	8009104 <USB_ActivateEndpoint+0x2c4>
 80090de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090e0:	881b      	ldrh	r3, [r3, #0]
 80090e2:	b29b      	uxth	r3, r3
 80090e4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80090e8:	b29a      	uxth	r2, r3
 80090ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090ec:	801a      	strh	r2, [r3, #0]
 80090ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090f0:	881b      	ldrh	r3, [r3, #0]
 80090f2:	b29b      	uxth	r3, r3
 80090f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80090f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80090fc:	b29a      	uxth	r2, r3
 80090fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009100:	801a      	strh	r2, [r3, #0]
 8009102:	e012      	b.n	800912a <USB_ActivateEndpoint+0x2ea>
 8009104:	683b      	ldr	r3, [r7, #0]
 8009106:	691b      	ldr	r3, [r3, #16]
 8009108:	085b      	lsrs	r3, r3, #1
 800910a:	66bb      	str	r3, [r7, #104]	; 0x68
 800910c:	683b      	ldr	r3, [r7, #0]
 800910e:	691b      	ldr	r3, [r3, #16]
 8009110:	f003 0301 	and.w	r3, r3, #1
 8009114:	2b00      	cmp	r3, #0
 8009116:	d002      	beq.n	800911e <USB_ActivateEndpoint+0x2de>
 8009118:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800911a:	3301      	adds	r3, #1
 800911c:	66bb      	str	r3, [r7, #104]	; 0x68
 800911e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009120:	b29b      	uxth	r3, r3
 8009122:	029b      	lsls	r3, r3, #10
 8009124:	b29a      	uxth	r2, r3
 8009126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009128:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800912a:	687a      	ldr	r2, [r7, #4]
 800912c:	683b      	ldr	r3, [r7, #0]
 800912e:	781b      	ldrb	r3, [r3, #0]
 8009130:	009b      	lsls	r3, r3, #2
 8009132:	4413      	add	r3, r2
 8009134:	881b      	ldrh	r3, [r3, #0]
 8009136:	847b      	strh	r3, [r7, #34]	; 0x22
 8009138:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800913a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800913e:	2b00      	cmp	r3, #0
 8009140:	d01b      	beq.n	800917a <USB_ActivateEndpoint+0x33a>
 8009142:	687a      	ldr	r2, [r7, #4]
 8009144:	683b      	ldr	r3, [r7, #0]
 8009146:	781b      	ldrb	r3, [r3, #0]
 8009148:	009b      	lsls	r3, r3, #2
 800914a:	4413      	add	r3, r2
 800914c:	881b      	ldrh	r3, [r3, #0]
 800914e:	b29b      	uxth	r3, r3
 8009150:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009154:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009158:	843b      	strh	r3, [r7, #32]
 800915a:	687a      	ldr	r2, [r7, #4]
 800915c:	683b      	ldr	r3, [r7, #0]
 800915e:	781b      	ldrb	r3, [r3, #0]
 8009160:	009b      	lsls	r3, r3, #2
 8009162:	441a      	add	r2, r3
 8009164:	8c3b      	ldrh	r3, [r7, #32]
 8009166:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800916a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800916e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009172:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009176:	b29b      	uxth	r3, r3
 8009178:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800917a:	687a      	ldr	r2, [r7, #4]
 800917c:	683b      	ldr	r3, [r7, #0]
 800917e:	781b      	ldrb	r3, [r3, #0]
 8009180:	009b      	lsls	r3, r3, #2
 8009182:	4413      	add	r3, r2
 8009184:	881b      	ldrh	r3, [r3, #0]
 8009186:	b29b      	uxth	r3, r3
 8009188:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800918c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009190:	83fb      	strh	r3, [r7, #30]
 8009192:	8bfb      	ldrh	r3, [r7, #30]
 8009194:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8009198:	83fb      	strh	r3, [r7, #30]
 800919a:	8bfb      	ldrh	r3, [r7, #30]
 800919c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80091a0:	83fb      	strh	r3, [r7, #30]
 80091a2:	687a      	ldr	r2, [r7, #4]
 80091a4:	683b      	ldr	r3, [r7, #0]
 80091a6:	781b      	ldrb	r3, [r3, #0]
 80091a8:	009b      	lsls	r3, r3, #2
 80091aa:	441a      	add	r2, r3
 80091ac:	8bfb      	ldrh	r3, [r7, #30]
 80091ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80091b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80091b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80091ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80091be:	b29b      	uxth	r3, r3
 80091c0:	8013      	strh	r3, [r2, #0]
 80091c2:	e1c9      	b.n	8009558 <USB_ActivateEndpoint+0x718>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 80091c4:	683b      	ldr	r3, [r7, #0]
 80091c6:	78db      	ldrb	r3, [r3, #3]
 80091c8:	2b02      	cmp	r3, #2
 80091ca:	d11e      	bne.n	800920a <USB_ActivateEndpoint+0x3ca>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80091cc:	687a      	ldr	r2, [r7, #4]
 80091ce:	683b      	ldr	r3, [r7, #0]
 80091d0:	781b      	ldrb	r3, [r3, #0]
 80091d2:	009b      	lsls	r3, r3, #2
 80091d4:	4413      	add	r3, r2
 80091d6:	881b      	ldrh	r3, [r3, #0]
 80091d8:	b29b      	uxth	r3, r3
 80091da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80091de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80091e2:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80091e6:	687a      	ldr	r2, [r7, #4]
 80091e8:	683b      	ldr	r3, [r7, #0]
 80091ea:	781b      	ldrb	r3, [r3, #0]
 80091ec:	009b      	lsls	r3, r3, #2
 80091ee:	441a      	add	r2, r3
 80091f0:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80091f4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80091f8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80091fc:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8009200:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009204:	b29b      	uxth	r3, r3
 8009206:	8013      	strh	r3, [r2, #0]
 8009208:	e01d      	b.n	8009246 <USB_ActivateEndpoint+0x406>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800920a:	687a      	ldr	r2, [r7, #4]
 800920c:	683b      	ldr	r3, [r7, #0]
 800920e:	781b      	ldrb	r3, [r3, #0]
 8009210:	009b      	lsls	r3, r3, #2
 8009212:	4413      	add	r3, r2
 8009214:	881b      	ldrh	r3, [r3, #0]
 8009216:	b29b      	uxth	r3, r3
 8009218:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800921c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009220:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8009224:	687a      	ldr	r2, [r7, #4]
 8009226:	683b      	ldr	r3, [r7, #0]
 8009228:	781b      	ldrb	r3, [r3, #0]
 800922a:	009b      	lsls	r3, r3, #2
 800922c:	441a      	add	r2, r3
 800922e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8009232:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009236:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800923a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800923e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009242:	b29b      	uxth	r3, r3
 8009244:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	65fb      	str	r3, [r7, #92]	; 0x5c
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009250:	b29b      	uxth	r3, r3
 8009252:	461a      	mov	r2, r3
 8009254:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009256:	4413      	add	r3, r2
 8009258:	65fb      	str	r3, [r7, #92]	; 0x5c
 800925a:	683b      	ldr	r3, [r7, #0]
 800925c:	781b      	ldrb	r3, [r3, #0]
 800925e:	00da      	lsls	r2, r3, #3
 8009260:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009262:	4413      	add	r3, r2
 8009264:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009268:	65bb      	str	r3, [r7, #88]	; 0x58
 800926a:	683b      	ldr	r3, [r7, #0]
 800926c:	891b      	ldrh	r3, [r3, #8]
 800926e:	085b      	lsrs	r3, r3, #1
 8009270:	b29b      	uxth	r3, r3
 8009272:	005b      	lsls	r3, r3, #1
 8009274:	b29a      	uxth	r2, r3
 8009276:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009278:	801a      	strh	r2, [r3, #0]
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	657b      	str	r3, [r7, #84]	; 0x54
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009284:	b29b      	uxth	r3, r3
 8009286:	461a      	mov	r2, r3
 8009288:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800928a:	4413      	add	r3, r2
 800928c:	657b      	str	r3, [r7, #84]	; 0x54
 800928e:	683b      	ldr	r3, [r7, #0]
 8009290:	781b      	ldrb	r3, [r3, #0]
 8009292:	00da      	lsls	r2, r3, #3
 8009294:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009296:	4413      	add	r3, r2
 8009298:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800929c:	653b      	str	r3, [r7, #80]	; 0x50
 800929e:	683b      	ldr	r3, [r7, #0]
 80092a0:	895b      	ldrh	r3, [r3, #10]
 80092a2:	085b      	lsrs	r3, r3, #1
 80092a4:	b29b      	uxth	r3, r3
 80092a6:	005b      	lsls	r3, r3, #1
 80092a8:	b29a      	uxth	r2, r3
 80092aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80092ac:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80092ae:	683b      	ldr	r3, [r7, #0]
 80092b0:	785b      	ldrb	r3, [r3, #1]
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	f040 8093 	bne.w	80093de <USB_ActivateEndpoint+0x59e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80092b8:	687a      	ldr	r2, [r7, #4]
 80092ba:	683b      	ldr	r3, [r7, #0]
 80092bc:	781b      	ldrb	r3, [r3, #0]
 80092be:	009b      	lsls	r3, r3, #2
 80092c0:	4413      	add	r3, r2
 80092c2:	881b      	ldrh	r3, [r3, #0]
 80092c4:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80092c8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80092cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d01b      	beq.n	800930c <USB_ActivateEndpoint+0x4cc>
 80092d4:	687a      	ldr	r2, [r7, #4]
 80092d6:	683b      	ldr	r3, [r7, #0]
 80092d8:	781b      	ldrb	r3, [r3, #0]
 80092da:	009b      	lsls	r3, r3, #2
 80092dc:	4413      	add	r3, r2
 80092de:	881b      	ldrh	r3, [r3, #0]
 80092e0:	b29b      	uxth	r3, r3
 80092e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80092e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80092ea:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80092ec:	687a      	ldr	r2, [r7, #4]
 80092ee:	683b      	ldr	r3, [r7, #0]
 80092f0:	781b      	ldrb	r3, [r3, #0]
 80092f2:	009b      	lsls	r3, r3, #2
 80092f4:	441a      	add	r2, r3
 80092f6:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80092f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80092fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009300:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009304:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009308:	b29b      	uxth	r3, r3
 800930a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800930c:	687a      	ldr	r2, [r7, #4]
 800930e:	683b      	ldr	r3, [r7, #0]
 8009310:	781b      	ldrb	r3, [r3, #0]
 8009312:	009b      	lsls	r3, r3, #2
 8009314:	4413      	add	r3, r2
 8009316:	881b      	ldrh	r3, [r3, #0]
 8009318:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800931a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800931c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009320:	2b00      	cmp	r3, #0
 8009322:	d01b      	beq.n	800935c <USB_ActivateEndpoint+0x51c>
 8009324:	687a      	ldr	r2, [r7, #4]
 8009326:	683b      	ldr	r3, [r7, #0]
 8009328:	781b      	ldrb	r3, [r3, #0]
 800932a:	009b      	lsls	r3, r3, #2
 800932c:	4413      	add	r3, r2
 800932e:	881b      	ldrh	r3, [r3, #0]
 8009330:	b29b      	uxth	r3, r3
 8009332:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009336:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800933a:	877b      	strh	r3, [r7, #58]	; 0x3a
 800933c:	687a      	ldr	r2, [r7, #4]
 800933e:	683b      	ldr	r3, [r7, #0]
 8009340:	781b      	ldrb	r3, [r3, #0]
 8009342:	009b      	lsls	r3, r3, #2
 8009344:	441a      	add	r2, r3
 8009346:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8009348:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800934c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009350:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009354:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009358:	b29b      	uxth	r3, r3
 800935a:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800935c:	687a      	ldr	r2, [r7, #4]
 800935e:	683b      	ldr	r3, [r7, #0]
 8009360:	781b      	ldrb	r3, [r3, #0]
 8009362:	009b      	lsls	r3, r3, #2
 8009364:	4413      	add	r3, r2
 8009366:	881b      	ldrh	r3, [r3, #0]
 8009368:	b29b      	uxth	r3, r3
 800936a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800936e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009372:	873b      	strh	r3, [r7, #56]	; 0x38
 8009374:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8009376:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800937a:	873b      	strh	r3, [r7, #56]	; 0x38
 800937c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800937e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8009382:	873b      	strh	r3, [r7, #56]	; 0x38
 8009384:	687a      	ldr	r2, [r7, #4]
 8009386:	683b      	ldr	r3, [r7, #0]
 8009388:	781b      	ldrb	r3, [r3, #0]
 800938a:	009b      	lsls	r3, r3, #2
 800938c:	441a      	add	r2, r3
 800938e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8009390:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009394:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009398:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800939c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80093a0:	b29b      	uxth	r3, r3
 80093a2:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80093a4:	687a      	ldr	r2, [r7, #4]
 80093a6:	683b      	ldr	r3, [r7, #0]
 80093a8:	781b      	ldrb	r3, [r3, #0]
 80093aa:	009b      	lsls	r3, r3, #2
 80093ac:	4413      	add	r3, r2
 80093ae:	881b      	ldrh	r3, [r3, #0]
 80093b0:	b29b      	uxth	r3, r3
 80093b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80093b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80093ba:	86fb      	strh	r3, [r7, #54]	; 0x36
 80093bc:	687a      	ldr	r2, [r7, #4]
 80093be:	683b      	ldr	r3, [r7, #0]
 80093c0:	781b      	ldrb	r3, [r3, #0]
 80093c2:	009b      	lsls	r3, r3, #2
 80093c4:	441a      	add	r2, r3
 80093c6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80093c8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80093cc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80093d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80093d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80093d8:	b29b      	uxth	r3, r3
 80093da:	8013      	strh	r3, [r2, #0]
 80093dc:	e0bc      	b.n	8009558 <USB_ActivateEndpoint+0x718>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80093de:	687a      	ldr	r2, [r7, #4]
 80093e0:	683b      	ldr	r3, [r7, #0]
 80093e2:	781b      	ldrb	r3, [r3, #0]
 80093e4:	009b      	lsls	r3, r3, #2
 80093e6:	4413      	add	r3, r2
 80093e8:	881b      	ldrh	r3, [r3, #0]
 80093ea:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80093ee:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80093f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d01d      	beq.n	8009436 <USB_ActivateEndpoint+0x5f6>
 80093fa:	687a      	ldr	r2, [r7, #4]
 80093fc:	683b      	ldr	r3, [r7, #0]
 80093fe:	781b      	ldrb	r3, [r3, #0]
 8009400:	009b      	lsls	r3, r3, #2
 8009402:	4413      	add	r3, r2
 8009404:	881b      	ldrh	r3, [r3, #0]
 8009406:	b29b      	uxth	r3, r3
 8009408:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800940c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009410:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8009414:	687a      	ldr	r2, [r7, #4]
 8009416:	683b      	ldr	r3, [r7, #0]
 8009418:	781b      	ldrb	r3, [r3, #0]
 800941a:	009b      	lsls	r3, r3, #2
 800941c:	441a      	add	r2, r3
 800941e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8009422:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009426:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800942a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800942e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009432:	b29b      	uxth	r3, r3
 8009434:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009436:	687a      	ldr	r2, [r7, #4]
 8009438:	683b      	ldr	r3, [r7, #0]
 800943a:	781b      	ldrb	r3, [r3, #0]
 800943c:	009b      	lsls	r3, r3, #2
 800943e:	4413      	add	r3, r2
 8009440:	881b      	ldrh	r3, [r3, #0]
 8009442:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8009446:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800944a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800944e:	2b00      	cmp	r3, #0
 8009450:	d01d      	beq.n	800948e <USB_ActivateEndpoint+0x64e>
 8009452:	687a      	ldr	r2, [r7, #4]
 8009454:	683b      	ldr	r3, [r7, #0]
 8009456:	781b      	ldrb	r3, [r3, #0]
 8009458:	009b      	lsls	r3, r3, #2
 800945a:	4413      	add	r3, r2
 800945c:	881b      	ldrh	r3, [r3, #0]
 800945e:	b29b      	uxth	r3, r3
 8009460:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009464:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009468:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800946c:	687a      	ldr	r2, [r7, #4]
 800946e:	683b      	ldr	r3, [r7, #0]
 8009470:	781b      	ldrb	r3, [r3, #0]
 8009472:	009b      	lsls	r3, r3, #2
 8009474:	441a      	add	r2, r3
 8009476:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800947a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800947e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009482:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009486:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800948a:	b29b      	uxth	r3, r3
 800948c:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800948e:	683b      	ldr	r3, [r7, #0]
 8009490:	78db      	ldrb	r3, [r3, #3]
 8009492:	2b01      	cmp	r3, #1
 8009494:	d024      	beq.n	80094e0 <USB_ActivateEndpoint+0x6a0>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8009496:	687a      	ldr	r2, [r7, #4]
 8009498:	683b      	ldr	r3, [r7, #0]
 800949a:	781b      	ldrb	r3, [r3, #0]
 800949c:	009b      	lsls	r3, r3, #2
 800949e:	4413      	add	r3, r2
 80094a0:	881b      	ldrh	r3, [r3, #0]
 80094a2:	b29b      	uxth	r3, r3
 80094a4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80094a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80094ac:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80094b0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80094b4:	f083 0320 	eor.w	r3, r3, #32
 80094b8:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80094bc:	687a      	ldr	r2, [r7, #4]
 80094be:	683b      	ldr	r3, [r7, #0]
 80094c0:	781b      	ldrb	r3, [r3, #0]
 80094c2:	009b      	lsls	r3, r3, #2
 80094c4:	441a      	add	r2, r3
 80094c6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80094ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80094ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80094d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80094d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80094da:	b29b      	uxth	r3, r3
 80094dc:	8013      	strh	r3, [r2, #0]
 80094de:	e01d      	b.n	800951c <USB_ActivateEndpoint+0x6dc>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80094e0:	687a      	ldr	r2, [r7, #4]
 80094e2:	683b      	ldr	r3, [r7, #0]
 80094e4:	781b      	ldrb	r3, [r3, #0]
 80094e6:	009b      	lsls	r3, r3, #2
 80094e8:	4413      	add	r3, r2
 80094ea:	881b      	ldrh	r3, [r3, #0]
 80094ec:	b29b      	uxth	r3, r3
 80094ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80094f2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80094f6:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80094fa:	687a      	ldr	r2, [r7, #4]
 80094fc:	683b      	ldr	r3, [r7, #0]
 80094fe:	781b      	ldrb	r3, [r3, #0]
 8009500:	009b      	lsls	r3, r3, #2
 8009502:	441a      	add	r2, r3
 8009504:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8009508:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800950c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009510:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009514:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009518:	b29b      	uxth	r3, r3
 800951a:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800951c:	687a      	ldr	r2, [r7, #4]
 800951e:	683b      	ldr	r3, [r7, #0]
 8009520:	781b      	ldrb	r3, [r3, #0]
 8009522:	009b      	lsls	r3, r3, #2
 8009524:	4413      	add	r3, r2
 8009526:	881b      	ldrh	r3, [r3, #0]
 8009528:	b29b      	uxth	r3, r3
 800952a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800952e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009532:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8009536:	687a      	ldr	r2, [r7, #4]
 8009538:	683b      	ldr	r3, [r7, #0]
 800953a:	781b      	ldrb	r3, [r3, #0]
 800953c:	009b      	lsls	r3, r3, #2
 800953e:	441a      	add	r2, r3
 8009540:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8009544:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009548:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800954c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009550:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009554:	b29b      	uxth	r3, r3
 8009556:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8009558:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 800955c:	4618      	mov	r0, r3
 800955e:	3774      	adds	r7, #116	; 0x74
 8009560:	46bd      	mov	sp, r7
 8009562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009566:	4770      	bx	lr

08009568 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009568:	b480      	push	{r7}
 800956a:	b08d      	sub	sp, #52	; 0x34
 800956c:	af00      	add	r7, sp, #0
 800956e:	6078      	str	r0, [r7, #4]
 8009570:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8009572:	683b      	ldr	r3, [r7, #0]
 8009574:	7b1b      	ldrb	r3, [r3, #12]
 8009576:	2b00      	cmp	r3, #0
 8009578:	f040 808e 	bne.w	8009698 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800957c:	683b      	ldr	r3, [r7, #0]
 800957e:	785b      	ldrb	r3, [r3, #1]
 8009580:	2b00      	cmp	r3, #0
 8009582:	d044      	beq.n	800960e <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009584:	687a      	ldr	r2, [r7, #4]
 8009586:	683b      	ldr	r3, [r7, #0]
 8009588:	781b      	ldrb	r3, [r3, #0]
 800958a:	009b      	lsls	r3, r3, #2
 800958c:	4413      	add	r3, r2
 800958e:	881b      	ldrh	r3, [r3, #0]
 8009590:	81bb      	strh	r3, [r7, #12]
 8009592:	89bb      	ldrh	r3, [r7, #12]
 8009594:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009598:	2b00      	cmp	r3, #0
 800959a:	d01b      	beq.n	80095d4 <USB_DeactivateEndpoint+0x6c>
 800959c:	687a      	ldr	r2, [r7, #4]
 800959e:	683b      	ldr	r3, [r7, #0]
 80095a0:	781b      	ldrb	r3, [r3, #0]
 80095a2:	009b      	lsls	r3, r3, #2
 80095a4:	4413      	add	r3, r2
 80095a6:	881b      	ldrh	r3, [r3, #0]
 80095a8:	b29b      	uxth	r3, r3
 80095aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80095ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80095b2:	817b      	strh	r3, [r7, #10]
 80095b4:	687a      	ldr	r2, [r7, #4]
 80095b6:	683b      	ldr	r3, [r7, #0]
 80095b8:	781b      	ldrb	r3, [r3, #0]
 80095ba:	009b      	lsls	r3, r3, #2
 80095bc:	441a      	add	r2, r3
 80095be:	897b      	ldrh	r3, [r7, #10]
 80095c0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80095c4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80095c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80095cc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80095d0:	b29b      	uxth	r3, r3
 80095d2:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80095d4:	687a      	ldr	r2, [r7, #4]
 80095d6:	683b      	ldr	r3, [r7, #0]
 80095d8:	781b      	ldrb	r3, [r3, #0]
 80095da:	009b      	lsls	r3, r3, #2
 80095dc:	4413      	add	r3, r2
 80095de:	881b      	ldrh	r3, [r3, #0]
 80095e0:	b29b      	uxth	r3, r3
 80095e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80095e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80095ea:	813b      	strh	r3, [r7, #8]
 80095ec:	687a      	ldr	r2, [r7, #4]
 80095ee:	683b      	ldr	r3, [r7, #0]
 80095f0:	781b      	ldrb	r3, [r3, #0]
 80095f2:	009b      	lsls	r3, r3, #2
 80095f4:	441a      	add	r2, r3
 80095f6:	893b      	ldrh	r3, [r7, #8]
 80095f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80095fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009600:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009604:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009608:	b29b      	uxth	r3, r3
 800960a:	8013      	strh	r3, [r2, #0]
 800960c:	e192      	b.n	8009934 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800960e:	687a      	ldr	r2, [r7, #4]
 8009610:	683b      	ldr	r3, [r7, #0]
 8009612:	781b      	ldrb	r3, [r3, #0]
 8009614:	009b      	lsls	r3, r3, #2
 8009616:	4413      	add	r3, r2
 8009618:	881b      	ldrh	r3, [r3, #0]
 800961a:	827b      	strh	r3, [r7, #18]
 800961c:	8a7b      	ldrh	r3, [r7, #18]
 800961e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009622:	2b00      	cmp	r3, #0
 8009624:	d01b      	beq.n	800965e <USB_DeactivateEndpoint+0xf6>
 8009626:	687a      	ldr	r2, [r7, #4]
 8009628:	683b      	ldr	r3, [r7, #0]
 800962a:	781b      	ldrb	r3, [r3, #0]
 800962c:	009b      	lsls	r3, r3, #2
 800962e:	4413      	add	r3, r2
 8009630:	881b      	ldrh	r3, [r3, #0]
 8009632:	b29b      	uxth	r3, r3
 8009634:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009638:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800963c:	823b      	strh	r3, [r7, #16]
 800963e:	687a      	ldr	r2, [r7, #4]
 8009640:	683b      	ldr	r3, [r7, #0]
 8009642:	781b      	ldrb	r3, [r3, #0]
 8009644:	009b      	lsls	r3, r3, #2
 8009646:	441a      	add	r2, r3
 8009648:	8a3b      	ldrh	r3, [r7, #16]
 800964a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800964e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009652:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009656:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800965a:	b29b      	uxth	r3, r3
 800965c:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800965e:	687a      	ldr	r2, [r7, #4]
 8009660:	683b      	ldr	r3, [r7, #0]
 8009662:	781b      	ldrb	r3, [r3, #0]
 8009664:	009b      	lsls	r3, r3, #2
 8009666:	4413      	add	r3, r2
 8009668:	881b      	ldrh	r3, [r3, #0]
 800966a:	b29b      	uxth	r3, r3
 800966c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009670:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009674:	81fb      	strh	r3, [r7, #14]
 8009676:	687a      	ldr	r2, [r7, #4]
 8009678:	683b      	ldr	r3, [r7, #0]
 800967a:	781b      	ldrb	r3, [r3, #0]
 800967c:	009b      	lsls	r3, r3, #2
 800967e:	441a      	add	r2, r3
 8009680:	89fb      	ldrh	r3, [r7, #14]
 8009682:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009686:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800968a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800968e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009692:	b29b      	uxth	r3, r3
 8009694:	8013      	strh	r3, [r2, #0]
 8009696:	e14d      	b.n	8009934 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8009698:	683b      	ldr	r3, [r7, #0]
 800969a:	785b      	ldrb	r3, [r3, #1]
 800969c:	2b00      	cmp	r3, #0
 800969e:	f040 80a5 	bne.w	80097ec <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80096a2:	687a      	ldr	r2, [r7, #4]
 80096a4:	683b      	ldr	r3, [r7, #0]
 80096a6:	781b      	ldrb	r3, [r3, #0]
 80096a8:	009b      	lsls	r3, r3, #2
 80096aa:	4413      	add	r3, r2
 80096ac:	881b      	ldrh	r3, [r3, #0]
 80096ae:	843b      	strh	r3, [r7, #32]
 80096b0:	8c3b      	ldrh	r3, [r7, #32]
 80096b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d01b      	beq.n	80096f2 <USB_DeactivateEndpoint+0x18a>
 80096ba:	687a      	ldr	r2, [r7, #4]
 80096bc:	683b      	ldr	r3, [r7, #0]
 80096be:	781b      	ldrb	r3, [r3, #0]
 80096c0:	009b      	lsls	r3, r3, #2
 80096c2:	4413      	add	r3, r2
 80096c4:	881b      	ldrh	r3, [r3, #0]
 80096c6:	b29b      	uxth	r3, r3
 80096c8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80096cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80096d0:	83fb      	strh	r3, [r7, #30]
 80096d2:	687a      	ldr	r2, [r7, #4]
 80096d4:	683b      	ldr	r3, [r7, #0]
 80096d6:	781b      	ldrb	r3, [r3, #0]
 80096d8:	009b      	lsls	r3, r3, #2
 80096da:	441a      	add	r2, r3
 80096dc:	8bfb      	ldrh	r3, [r7, #30]
 80096de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80096e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80096e6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80096ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80096ee:	b29b      	uxth	r3, r3
 80096f0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80096f2:	687a      	ldr	r2, [r7, #4]
 80096f4:	683b      	ldr	r3, [r7, #0]
 80096f6:	781b      	ldrb	r3, [r3, #0]
 80096f8:	009b      	lsls	r3, r3, #2
 80096fa:	4413      	add	r3, r2
 80096fc:	881b      	ldrh	r3, [r3, #0]
 80096fe:	83bb      	strh	r3, [r7, #28]
 8009700:	8bbb      	ldrh	r3, [r7, #28]
 8009702:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009706:	2b00      	cmp	r3, #0
 8009708:	d01b      	beq.n	8009742 <USB_DeactivateEndpoint+0x1da>
 800970a:	687a      	ldr	r2, [r7, #4]
 800970c:	683b      	ldr	r3, [r7, #0]
 800970e:	781b      	ldrb	r3, [r3, #0]
 8009710:	009b      	lsls	r3, r3, #2
 8009712:	4413      	add	r3, r2
 8009714:	881b      	ldrh	r3, [r3, #0]
 8009716:	b29b      	uxth	r3, r3
 8009718:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800971c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009720:	837b      	strh	r3, [r7, #26]
 8009722:	687a      	ldr	r2, [r7, #4]
 8009724:	683b      	ldr	r3, [r7, #0]
 8009726:	781b      	ldrb	r3, [r3, #0]
 8009728:	009b      	lsls	r3, r3, #2
 800972a:	441a      	add	r2, r3
 800972c:	8b7b      	ldrh	r3, [r7, #26]
 800972e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009732:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009736:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800973a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800973e:	b29b      	uxth	r3, r3
 8009740:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8009742:	687a      	ldr	r2, [r7, #4]
 8009744:	683b      	ldr	r3, [r7, #0]
 8009746:	781b      	ldrb	r3, [r3, #0]
 8009748:	009b      	lsls	r3, r3, #2
 800974a:	4413      	add	r3, r2
 800974c:	881b      	ldrh	r3, [r3, #0]
 800974e:	b29b      	uxth	r3, r3
 8009750:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009754:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009758:	833b      	strh	r3, [r7, #24]
 800975a:	687a      	ldr	r2, [r7, #4]
 800975c:	683b      	ldr	r3, [r7, #0]
 800975e:	781b      	ldrb	r3, [r3, #0]
 8009760:	009b      	lsls	r3, r3, #2
 8009762:	441a      	add	r2, r3
 8009764:	8b3b      	ldrh	r3, [r7, #24]
 8009766:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800976a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800976e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009772:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009776:	b29b      	uxth	r3, r3
 8009778:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800977a:	687a      	ldr	r2, [r7, #4]
 800977c:	683b      	ldr	r3, [r7, #0]
 800977e:	781b      	ldrb	r3, [r3, #0]
 8009780:	009b      	lsls	r3, r3, #2
 8009782:	4413      	add	r3, r2
 8009784:	881b      	ldrh	r3, [r3, #0]
 8009786:	b29b      	uxth	r3, r3
 8009788:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800978c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009790:	82fb      	strh	r3, [r7, #22]
 8009792:	687a      	ldr	r2, [r7, #4]
 8009794:	683b      	ldr	r3, [r7, #0]
 8009796:	781b      	ldrb	r3, [r3, #0]
 8009798:	009b      	lsls	r3, r3, #2
 800979a:	441a      	add	r2, r3
 800979c:	8afb      	ldrh	r3, [r7, #22]
 800979e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80097a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80097a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80097aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80097ae:	b29b      	uxth	r3, r3
 80097b0:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80097b2:	687a      	ldr	r2, [r7, #4]
 80097b4:	683b      	ldr	r3, [r7, #0]
 80097b6:	781b      	ldrb	r3, [r3, #0]
 80097b8:	009b      	lsls	r3, r3, #2
 80097ba:	4413      	add	r3, r2
 80097bc:	881b      	ldrh	r3, [r3, #0]
 80097be:	b29b      	uxth	r3, r3
 80097c0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80097c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80097c8:	82bb      	strh	r3, [r7, #20]
 80097ca:	687a      	ldr	r2, [r7, #4]
 80097cc:	683b      	ldr	r3, [r7, #0]
 80097ce:	781b      	ldrb	r3, [r3, #0]
 80097d0:	009b      	lsls	r3, r3, #2
 80097d2:	441a      	add	r2, r3
 80097d4:	8abb      	ldrh	r3, [r7, #20]
 80097d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80097da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80097de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80097e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80097e6:	b29b      	uxth	r3, r3
 80097e8:	8013      	strh	r3, [r2, #0]
 80097ea:	e0a3      	b.n	8009934 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80097ec:	687a      	ldr	r2, [r7, #4]
 80097ee:	683b      	ldr	r3, [r7, #0]
 80097f0:	781b      	ldrb	r3, [r3, #0]
 80097f2:	009b      	lsls	r3, r3, #2
 80097f4:	4413      	add	r3, r2
 80097f6:	881b      	ldrh	r3, [r3, #0]
 80097f8:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80097fa:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80097fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009800:	2b00      	cmp	r3, #0
 8009802:	d01b      	beq.n	800983c <USB_DeactivateEndpoint+0x2d4>
 8009804:	687a      	ldr	r2, [r7, #4]
 8009806:	683b      	ldr	r3, [r7, #0]
 8009808:	781b      	ldrb	r3, [r3, #0]
 800980a:	009b      	lsls	r3, r3, #2
 800980c:	4413      	add	r3, r2
 800980e:	881b      	ldrh	r3, [r3, #0]
 8009810:	b29b      	uxth	r3, r3
 8009812:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009816:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800981a:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800981c:	687a      	ldr	r2, [r7, #4]
 800981e:	683b      	ldr	r3, [r7, #0]
 8009820:	781b      	ldrb	r3, [r3, #0]
 8009822:	009b      	lsls	r3, r3, #2
 8009824:	441a      	add	r2, r3
 8009826:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8009828:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800982c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009830:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009834:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009838:	b29b      	uxth	r3, r3
 800983a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800983c:	687a      	ldr	r2, [r7, #4]
 800983e:	683b      	ldr	r3, [r7, #0]
 8009840:	781b      	ldrb	r3, [r3, #0]
 8009842:	009b      	lsls	r3, r3, #2
 8009844:	4413      	add	r3, r2
 8009846:	881b      	ldrh	r3, [r3, #0]
 8009848:	857b      	strh	r3, [r7, #42]	; 0x2a
 800984a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800984c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009850:	2b00      	cmp	r3, #0
 8009852:	d01b      	beq.n	800988c <USB_DeactivateEndpoint+0x324>
 8009854:	687a      	ldr	r2, [r7, #4]
 8009856:	683b      	ldr	r3, [r7, #0]
 8009858:	781b      	ldrb	r3, [r3, #0]
 800985a:	009b      	lsls	r3, r3, #2
 800985c:	4413      	add	r3, r2
 800985e:	881b      	ldrh	r3, [r3, #0]
 8009860:	b29b      	uxth	r3, r3
 8009862:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009866:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800986a:	853b      	strh	r3, [r7, #40]	; 0x28
 800986c:	687a      	ldr	r2, [r7, #4]
 800986e:	683b      	ldr	r3, [r7, #0]
 8009870:	781b      	ldrb	r3, [r3, #0]
 8009872:	009b      	lsls	r3, r3, #2
 8009874:	441a      	add	r2, r3
 8009876:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8009878:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800987c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009880:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009884:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009888:	b29b      	uxth	r3, r3
 800988a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800988c:	687a      	ldr	r2, [r7, #4]
 800988e:	683b      	ldr	r3, [r7, #0]
 8009890:	781b      	ldrb	r3, [r3, #0]
 8009892:	009b      	lsls	r3, r3, #2
 8009894:	4413      	add	r3, r2
 8009896:	881b      	ldrh	r3, [r3, #0]
 8009898:	b29b      	uxth	r3, r3
 800989a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800989e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80098a2:	84fb      	strh	r3, [r7, #38]	; 0x26
 80098a4:	687a      	ldr	r2, [r7, #4]
 80098a6:	683b      	ldr	r3, [r7, #0]
 80098a8:	781b      	ldrb	r3, [r3, #0]
 80098aa:	009b      	lsls	r3, r3, #2
 80098ac:	441a      	add	r2, r3
 80098ae:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80098b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80098b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80098b8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80098bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80098c0:	b29b      	uxth	r3, r3
 80098c2:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80098c4:	687a      	ldr	r2, [r7, #4]
 80098c6:	683b      	ldr	r3, [r7, #0]
 80098c8:	781b      	ldrb	r3, [r3, #0]
 80098ca:	009b      	lsls	r3, r3, #2
 80098cc:	4413      	add	r3, r2
 80098ce:	881b      	ldrh	r3, [r3, #0]
 80098d0:	b29b      	uxth	r3, r3
 80098d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80098d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80098da:	84bb      	strh	r3, [r7, #36]	; 0x24
 80098dc:	687a      	ldr	r2, [r7, #4]
 80098de:	683b      	ldr	r3, [r7, #0]
 80098e0:	781b      	ldrb	r3, [r3, #0]
 80098e2:	009b      	lsls	r3, r3, #2
 80098e4:	441a      	add	r2, r3
 80098e6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80098e8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80098ec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80098f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80098f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80098f8:	b29b      	uxth	r3, r3
 80098fa:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80098fc:	687a      	ldr	r2, [r7, #4]
 80098fe:	683b      	ldr	r3, [r7, #0]
 8009900:	781b      	ldrb	r3, [r3, #0]
 8009902:	009b      	lsls	r3, r3, #2
 8009904:	4413      	add	r3, r2
 8009906:	881b      	ldrh	r3, [r3, #0]
 8009908:	b29b      	uxth	r3, r3
 800990a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800990e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009912:	847b      	strh	r3, [r7, #34]	; 0x22
 8009914:	687a      	ldr	r2, [r7, #4]
 8009916:	683b      	ldr	r3, [r7, #0]
 8009918:	781b      	ldrb	r3, [r3, #0]
 800991a:	009b      	lsls	r3, r3, #2
 800991c:	441a      	add	r2, r3
 800991e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009920:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009924:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009928:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800992c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009930:	b29b      	uxth	r3, r3
 8009932:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8009934:	2300      	movs	r3, #0
}
 8009936:	4618      	mov	r0, r3
 8009938:	3734      	adds	r7, #52	; 0x34
 800993a:	46bd      	mov	sp, r7
 800993c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009940:	4770      	bx	lr

08009942 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009942:	b580      	push	{r7, lr}
 8009944:	b0c2      	sub	sp, #264	; 0x108
 8009946:	af00      	add	r7, sp, #0
 8009948:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800994c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009950:	6018      	str	r0, [r3, #0]
 8009952:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009956:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800995a:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800995c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009960:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	785b      	ldrb	r3, [r3, #1]
 8009968:	2b01      	cmp	r3, #1
 800996a:	f040 867b 	bne.w	800a664 <USB_EPStartXfer+0xd22>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800996e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009972:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	699a      	ldr	r2, [r3, #24]
 800997a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800997e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	691b      	ldr	r3, [r3, #16]
 8009986:	429a      	cmp	r2, r3
 8009988:	d908      	bls.n	800999c <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 800998a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800998e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	691b      	ldr	r3, [r3, #16]
 8009996:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800999a:	e007      	b.n	80099ac <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800999c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80099a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	699b      	ldr	r3, [r3, #24]
 80099a8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80099ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80099b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	7b1b      	ldrb	r3, [r3, #12]
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	d13a      	bne.n	8009a32 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80099bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80099c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	6959      	ldr	r1, [r3, #20]
 80099c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80099cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	88da      	ldrh	r2, [r3, #6]
 80099d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80099d8:	b29b      	uxth	r3, r3
 80099da:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80099de:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80099e2:	6800      	ldr	r0, [r0, #0]
 80099e4:	f001 fc1d 	bl	800b222 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80099e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80099ec:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	613b      	str	r3, [r7, #16]
 80099f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80099f8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009a02:	b29b      	uxth	r3, r3
 8009a04:	461a      	mov	r2, r3
 8009a06:	693b      	ldr	r3, [r7, #16]
 8009a08:	4413      	add	r3, r2
 8009a0a:	613b      	str	r3, [r7, #16]
 8009a0c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009a10:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	781b      	ldrb	r3, [r3, #0]
 8009a18:	00da      	lsls	r2, r3, #3
 8009a1a:	693b      	ldr	r3, [r7, #16]
 8009a1c:	4413      	add	r3, r2
 8009a1e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009a22:	60fb      	str	r3, [r7, #12]
 8009a24:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009a28:	b29a      	uxth	r2, r3
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	801a      	strh	r2, [r3, #0]
 8009a2e:	f000 bde3 	b.w	800a5f8 <USB_EPStartXfer+0xcb6>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8009a32:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009a36:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	78db      	ldrb	r3, [r3, #3]
 8009a3e:	2b02      	cmp	r3, #2
 8009a40:	f040 843a 	bne.w	800a2b8 <USB_EPStartXfer+0x976>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8009a44:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009a48:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	6a1a      	ldr	r2, [r3, #32]
 8009a50:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009a54:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	691b      	ldr	r3, [r3, #16]
 8009a5c:	429a      	cmp	r2, r3
 8009a5e:	f240 83b7 	bls.w	800a1d0 <USB_EPStartXfer+0x88e>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8009a62:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009a66:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009a6a:	681a      	ldr	r2, [r3, #0]
 8009a6c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009a70:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	781b      	ldrb	r3, [r3, #0]
 8009a78:	009b      	lsls	r3, r3, #2
 8009a7a:	4413      	add	r3, r2
 8009a7c:	881b      	ldrh	r3, [r3, #0]
 8009a7e:	b29b      	uxth	r3, r3
 8009a80:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009a84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009a88:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8009a8c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009a90:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009a94:	681a      	ldr	r2, [r3, #0]
 8009a96:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009a9a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	781b      	ldrb	r3, [r3, #0]
 8009aa2:	009b      	lsls	r3, r3, #2
 8009aa4:	441a      	add	r2, r3
 8009aa6:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8009aaa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009aae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009ab2:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8009ab6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009aba:	b29b      	uxth	r3, r3
 8009abc:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8009abe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009ac2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	6a1a      	ldr	r2, [r3, #32]
 8009aca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009ace:	1ad2      	subs	r2, r2, r3
 8009ad0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009ad4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8009adc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009ae0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009ae4:	681a      	ldr	r2, [r3, #0]
 8009ae6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009aea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	781b      	ldrb	r3, [r3, #0]
 8009af2:	009b      	lsls	r3, r3, #2
 8009af4:	4413      	add	r3, r2
 8009af6:	881b      	ldrh	r3, [r3, #0]
 8009af8:	b29b      	uxth	r3, r3
 8009afa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	f000 81b3 	beq.w	8009e6a <USB_EPStartXfer+0x528>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009b04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009b08:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	633b      	str	r3, [r7, #48]	; 0x30
 8009b10:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009b14:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	785b      	ldrb	r3, [r3, #1]
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d16d      	bne.n	8009bfc <USB_EPStartXfer+0x2ba>
 8009b20:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009b24:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	62bb      	str	r3, [r7, #40]	; 0x28
 8009b2c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009b30:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009b3a:	b29b      	uxth	r3, r3
 8009b3c:	461a      	mov	r2, r3
 8009b3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b40:	4413      	add	r3, r2
 8009b42:	62bb      	str	r3, [r7, #40]	; 0x28
 8009b44:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009b48:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	781b      	ldrb	r3, [r3, #0]
 8009b50:	00da      	lsls	r2, r3, #3
 8009b52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b54:	4413      	add	r3, r2
 8009b56:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009b5a:	627b      	str	r3, [r7, #36]	; 0x24
 8009b5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009b60:	2b3e      	cmp	r3, #62	; 0x3e
 8009b62:	d91c      	bls.n	8009b9e <USB_EPStartXfer+0x25c>
 8009b64:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009b68:	095b      	lsrs	r3, r3, #5
 8009b6a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8009b6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009b72:	f003 031f 	and.w	r3, r3, #31
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d104      	bne.n	8009b84 <USB_EPStartXfer+0x242>
 8009b7a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8009b7e:	3b01      	subs	r3, #1
 8009b80:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8009b84:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8009b88:	b29b      	uxth	r3, r3
 8009b8a:	029b      	lsls	r3, r3, #10
 8009b8c:	b29b      	uxth	r3, r3
 8009b8e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009b92:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009b96:	b29a      	uxth	r2, r3
 8009b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b9a:	801a      	strh	r2, [r3, #0]
 8009b9c:	e053      	b.n	8009c46 <USB_EPStartXfer+0x304>
 8009b9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d112      	bne.n	8009bcc <USB_EPStartXfer+0x28a>
 8009ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ba8:	881b      	ldrh	r3, [r3, #0]
 8009baa:	b29b      	uxth	r3, r3
 8009bac:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009bb0:	b29a      	uxth	r2, r3
 8009bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bb4:	801a      	strh	r2, [r3, #0]
 8009bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bb8:	881b      	ldrh	r3, [r3, #0]
 8009bba:	b29b      	uxth	r3, r3
 8009bbc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009bc0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009bc4:	b29a      	uxth	r2, r3
 8009bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bc8:	801a      	strh	r2, [r3, #0]
 8009bca:	e03c      	b.n	8009c46 <USB_EPStartXfer+0x304>
 8009bcc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009bd0:	085b      	lsrs	r3, r3, #1
 8009bd2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8009bd6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009bda:	f003 0301 	and.w	r3, r3, #1
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d004      	beq.n	8009bec <USB_EPStartXfer+0x2aa>
 8009be2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8009be6:	3301      	adds	r3, #1
 8009be8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8009bec:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8009bf0:	b29b      	uxth	r3, r3
 8009bf2:	029b      	lsls	r3, r3, #10
 8009bf4:	b29a      	uxth	r2, r3
 8009bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bf8:	801a      	strh	r2, [r3, #0]
 8009bfa:	e024      	b.n	8009c46 <USB_EPStartXfer+0x304>
 8009bfc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009c00:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	785b      	ldrb	r3, [r3, #1]
 8009c08:	2b01      	cmp	r3, #1
 8009c0a:	d11c      	bne.n	8009c46 <USB_EPStartXfer+0x304>
 8009c0c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009c10:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009c1a:	b29b      	uxth	r3, r3
 8009c1c:	461a      	mov	r2, r3
 8009c1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c20:	4413      	add	r3, r2
 8009c22:	633b      	str	r3, [r7, #48]	; 0x30
 8009c24:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009c28:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	781b      	ldrb	r3, [r3, #0]
 8009c30:	00da      	lsls	r2, r3, #3
 8009c32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c34:	4413      	add	r3, r2
 8009c36:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009c3a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009c3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009c40:	b29a      	uxth	r2, r3
 8009c42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c44:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8009c46:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009c4a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	895b      	ldrh	r3, [r3, #10]
 8009c52:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009c56:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009c5a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	6959      	ldr	r1, [r3, #20]
 8009c62:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009c66:	b29b      	uxth	r3, r3
 8009c68:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8009c6c:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8009c70:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8009c74:	6800      	ldr	r0, [r0, #0]
 8009c76:	f001 fad4 	bl	800b222 <USB_WritePMA>
            ep->xfer_buff += len;
 8009c7a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009c7e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	695a      	ldr	r2, [r3, #20]
 8009c86:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009c8a:	441a      	add	r2, r3
 8009c8c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009c90:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8009c98:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009c9c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	6a1a      	ldr	r2, [r3, #32]
 8009ca4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009ca8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	691b      	ldr	r3, [r3, #16]
 8009cb0:	429a      	cmp	r2, r3
 8009cb2:	d90f      	bls.n	8009cd4 <USB_EPStartXfer+0x392>
            {
              ep->xfer_len_db -= len;
 8009cb4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009cb8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	6a1a      	ldr	r2, [r3, #32]
 8009cc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009cc4:	1ad2      	subs	r2, r2, r3
 8009cc6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009cca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	621a      	str	r2, [r3, #32]
 8009cd2:	e00e      	b.n	8009cf2 <USB_EPStartXfer+0x3b0>
            }
            else
            {
              len = ep->xfer_len_db;
 8009cd4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009cd8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	6a1b      	ldr	r3, [r3, #32]
 8009ce0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8009ce4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009ce8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	2200      	movs	r2, #0
 8009cf0:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009cf2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009cf6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	785b      	ldrb	r3, [r3, #1]
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d16d      	bne.n	8009dde <USB_EPStartXfer+0x49c>
 8009d02:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d06:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	61bb      	str	r3, [r7, #24]
 8009d0e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d12:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009d1c:	b29b      	uxth	r3, r3
 8009d1e:	461a      	mov	r2, r3
 8009d20:	69bb      	ldr	r3, [r7, #24]
 8009d22:	4413      	add	r3, r2
 8009d24:	61bb      	str	r3, [r7, #24]
 8009d26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d2a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	781b      	ldrb	r3, [r3, #0]
 8009d32:	00da      	lsls	r2, r3, #3
 8009d34:	69bb      	ldr	r3, [r7, #24]
 8009d36:	4413      	add	r3, r2
 8009d38:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009d3c:	617b      	str	r3, [r7, #20]
 8009d3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009d42:	2b3e      	cmp	r3, #62	; 0x3e
 8009d44:	d91c      	bls.n	8009d80 <USB_EPStartXfer+0x43e>
 8009d46:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009d4a:	095b      	lsrs	r3, r3, #5
 8009d4c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8009d50:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009d54:	f003 031f 	and.w	r3, r3, #31
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d104      	bne.n	8009d66 <USB_EPStartXfer+0x424>
 8009d5c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009d60:	3b01      	subs	r3, #1
 8009d62:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8009d66:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009d6a:	b29b      	uxth	r3, r3
 8009d6c:	029b      	lsls	r3, r3, #10
 8009d6e:	b29b      	uxth	r3, r3
 8009d70:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009d74:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009d78:	b29a      	uxth	r2, r3
 8009d7a:	697b      	ldr	r3, [r7, #20]
 8009d7c:	801a      	strh	r2, [r3, #0]
 8009d7e:	e059      	b.n	8009e34 <USB_EPStartXfer+0x4f2>
 8009d80:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d112      	bne.n	8009dae <USB_EPStartXfer+0x46c>
 8009d88:	697b      	ldr	r3, [r7, #20]
 8009d8a:	881b      	ldrh	r3, [r3, #0]
 8009d8c:	b29b      	uxth	r3, r3
 8009d8e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009d92:	b29a      	uxth	r2, r3
 8009d94:	697b      	ldr	r3, [r7, #20]
 8009d96:	801a      	strh	r2, [r3, #0]
 8009d98:	697b      	ldr	r3, [r7, #20]
 8009d9a:	881b      	ldrh	r3, [r3, #0]
 8009d9c:	b29b      	uxth	r3, r3
 8009d9e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009da2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009da6:	b29a      	uxth	r2, r3
 8009da8:	697b      	ldr	r3, [r7, #20]
 8009daa:	801a      	strh	r2, [r3, #0]
 8009dac:	e042      	b.n	8009e34 <USB_EPStartXfer+0x4f2>
 8009dae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009db2:	085b      	lsrs	r3, r3, #1
 8009db4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8009db8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009dbc:	f003 0301 	and.w	r3, r3, #1
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d004      	beq.n	8009dce <USB_EPStartXfer+0x48c>
 8009dc4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009dc8:	3301      	adds	r3, #1
 8009dca:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8009dce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009dd2:	b29b      	uxth	r3, r3
 8009dd4:	029b      	lsls	r3, r3, #10
 8009dd6:	b29a      	uxth	r2, r3
 8009dd8:	697b      	ldr	r3, [r7, #20]
 8009dda:	801a      	strh	r2, [r3, #0]
 8009ddc:	e02a      	b.n	8009e34 <USB_EPStartXfer+0x4f2>
 8009dde:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009de2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	785b      	ldrb	r3, [r3, #1]
 8009dea:	2b01      	cmp	r3, #1
 8009dec:	d122      	bne.n	8009e34 <USB_EPStartXfer+0x4f2>
 8009dee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009df2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	623b      	str	r3, [r7, #32]
 8009dfa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009dfe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009e08:	b29b      	uxth	r3, r3
 8009e0a:	461a      	mov	r2, r3
 8009e0c:	6a3b      	ldr	r3, [r7, #32]
 8009e0e:	4413      	add	r3, r2
 8009e10:	623b      	str	r3, [r7, #32]
 8009e12:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009e16:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	781b      	ldrb	r3, [r3, #0]
 8009e1e:	00da      	lsls	r2, r3, #3
 8009e20:	6a3b      	ldr	r3, [r7, #32]
 8009e22:	4413      	add	r3, r2
 8009e24:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009e28:	61fb      	str	r3, [r7, #28]
 8009e2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009e2e:	b29a      	uxth	r2, r3
 8009e30:	69fb      	ldr	r3, [r7, #28]
 8009e32:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8009e34:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009e38:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	891b      	ldrh	r3, [r3, #8]
 8009e40:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009e44:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009e48:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	6959      	ldr	r1, [r3, #20]
 8009e50:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009e54:	b29b      	uxth	r3, r3
 8009e56:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8009e5a:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8009e5e:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8009e62:	6800      	ldr	r0, [r0, #0]
 8009e64:	f001 f9dd 	bl	800b222 <USB_WritePMA>
 8009e68:	e3c6      	b.n	800a5f8 <USB_EPStartXfer+0xcb6>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009e6a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009e6e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	785b      	ldrb	r3, [r3, #1]
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d16d      	bne.n	8009f56 <USB_EPStartXfer+0x614>
 8009e7a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009e7e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	64bb      	str	r3, [r7, #72]	; 0x48
 8009e86:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009e8a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009e94:	b29b      	uxth	r3, r3
 8009e96:	461a      	mov	r2, r3
 8009e98:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009e9a:	4413      	add	r3, r2
 8009e9c:	64bb      	str	r3, [r7, #72]	; 0x48
 8009e9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009ea2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	781b      	ldrb	r3, [r3, #0]
 8009eaa:	00da      	lsls	r2, r3, #3
 8009eac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009eae:	4413      	add	r3, r2
 8009eb0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009eb4:	647b      	str	r3, [r7, #68]	; 0x44
 8009eb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009eba:	2b3e      	cmp	r3, #62	; 0x3e
 8009ebc:	d91c      	bls.n	8009ef8 <USB_EPStartXfer+0x5b6>
 8009ebe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009ec2:	095b      	lsrs	r3, r3, #5
 8009ec4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8009ec8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009ecc:	f003 031f 	and.w	r3, r3, #31
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d104      	bne.n	8009ede <USB_EPStartXfer+0x59c>
 8009ed4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009ed8:	3b01      	subs	r3, #1
 8009eda:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8009ede:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009ee2:	b29b      	uxth	r3, r3
 8009ee4:	029b      	lsls	r3, r3, #10
 8009ee6:	b29b      	uxth	r3, r3
 8009ee8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009eec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009ef0:	b29a      	uxth	r2, r3
 8009ef2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009ef4:	801a      	strh	r2, [r3, #0]
 8009ef6:	e059      	b.n	8009fac <USB_EPStartXfer+0x66a>
 8009ef8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d112      	bne.n	8009f26 <USB_EPStartXfer+0x5e4>
 8009f00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009f02:	881b      	ldrh	r3, [r3, #0]
 8009f04:	b29b      	uxth	r3, r3
 8009f06:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009f0a:	b29a      	uxth	r2, r3
 8009f0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009f0e:	801a      	strh	r2, [r3, #0]
 8009f10:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009f12:	881b      	ldrh	r3, [r3, #0]
 8009f14:	b29b      	uxth	r3, r3
 8009f16:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009f1a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009f1e:	b29a      	uxth	r2, r3
 8009f20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009f22:	801a      	strh	r2, [r3, #0]
 8009f24:	e042      	b.n	8009fac <USB_EPStartXfer+0x66a>
 8009f26:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009f2a:	085b      	lsrs	r3, r3, #1
 8009f2c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8009f30:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009f34:	f003 0301 	and.w	r3, r3, #1
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	d004      	beq.n	8009f46 <USB_EPStartXfer+0x604>
 8009f3c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009f40:	3301      	adds	r3, #1
 8009f42:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8009f46:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009f4a:	b29b      	uxth	r3, r3
 8009f4c:	029b      	lsls	r3, r3, #10
 8009f4e:	b29a      	uxth	r2, r3
 8009f50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009f52:	801a      	strh	r2, [r3, #0]
 8009f54:	e02a      	b.n	8009fac <USB_EPStartXfer+0x66a>
 8009f56:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009f5a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	785b      	ldrb	r3, [r3, #1]
 8009f62:	2b01      	cmp	r3, #1
 8009f64:	d122      	bne.n	8009fac <USB_EPStartXfer+0x66a>
 8009f66:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009f6a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	653b      	str	r3, [r7, #80]	; 0x50
 8009f72:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009f76:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009f80:	b29b      	uxth	r3, r3
 8009f82:	461a      	mov	r2, r3
 8009f84:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009f86:	4413      	add	r3, r2
 8009f88:	653b      	str	r3, [r7, #80]	; 0x50
 8009f8a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009f8e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	781b      	ldrb	r3, [r3, #0]
 8009f96:	00da      	lsls	r2, r3, #3
 8009f98:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009f9a:	4413      	add	r3, r2
 8009f9c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009fa0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009fa2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009fa6:	b29a      	uxth	r2, r3
 8009fa8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009faa:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8009fac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009fb0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	891b      	ldrh	r3, [r3, #8]
 8009fb8:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009fbc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009fc0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	6959      	ldr	r1, [r3, #20]
 8009fc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009fcc:	b29b      	uxth	r3, r3
 8009fce:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8009fd2:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8009fd6:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8009fda:	6800      	ldr	r0, [r0, #0]
 8009fdc:	f001 f921 	bl	800b222 <USB_WritePMA>
            ep->xfer_buff += len;
 8009fe0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009fe4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	695a      	ldr	r2, [r3, #20]
 8009fec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009ff0:	441a      	add	r2, r3
 8009ff2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009ff6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8009ffe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a002:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	6a1a      	ldr	r2, [r3, #32]
 800a00a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a00e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	691b      	ldr	r3, [r3, #16]
 800a016:	429a      	cmp	r2, r3
 800a018:	d90f      	bls.n	800a03a <USB_EPStartXfer+0x6f8>
            {
              ep->xfer_len_db -= len;
 800a01a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a01e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	6a1a      	ldr	r2, [r3, #32]
 800a026:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a02a:	1ad2      	subs	r2, r2, r3
 800a02c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a030:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	621a      	str	r2, [r3, #32]
 800a038:	e00e      	b.n	800a058 <USB_EPStartXfer+0x716>
            }
            else
            {
              len = ep->xfer_len_db;
 800a03a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a03e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	6a1b      	ldr	r3, [r3, #32]
 800a046:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800a04a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a04e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	2200      	movs	r2, #0
 800a056:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800a058:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a05c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	643b      	str	r3, [r7, #64]	; 0x40
 800a064:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a068:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	785b      	ldrb	r3, [r3, #1]
 800a070:	2b00      	cmp	r3, #0
 800a072:	d16d      	bne.n	800a150 <USB_EPStartXfer+0x80e>
 800a074:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a078:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	63bb      	str	r3, [r7, #56]	; 0x38
 800a080:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a084:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a08e:	b29b      	uxth	r3, r3
 800a090:	461a      	mov	r2, r3
 800a092:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a094:	4413      	add	r3, r2
 800a096:	63bb      	str	r3, [r7, #56]	; 0x38
 800a098:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a09c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	781b      	ldrb	r3, [r3, #0]
 800a0a4:	00da      	lsls	r2, r3, #3
 800a0a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0a8:	4413      	add	r3, r2
 800a0aa:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a0ae:	637b      	str	r3, [r7, #52]	; 0x34
 800a0b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a0b4:	2b3e      	cmp	r3, #62	; 0x3e
 800a0b6:	d91c      	bls.n	800a0f2 <USB_EPStartXfer+0x7b0>
 800a0b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a0bc:	095b      	lsrs	r3, r3, #5
 800a0be:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800a0c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a0c6:	f003 031f 	and.w	r3, r3, #31
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	d104      	bne.n	800a0d8 <USB_EPStartXfer+0x796>
 800a0ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a0d2:	3b01      	subs	r3, #1
 800a0d4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800a0d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a0dc:	b29b      	uxth	r3, r3
 800a0de:	029b      	lsls	r3, r3, #10
 800a0e0:	b29b      	uxth	r3, r3
 800a0e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a0e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a0ea:	b29a      	uxth	r2, r3
 800a0ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a0ee:	801a      	strh	r2, [r3, #0]
 800a0f0:	e053      	b.n	800a19a <USB_EPStartXfer+0x858>
 800a0f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d112      	bne.n	800a120 <USB_EPStartXfer+0x7de>
 800a0fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a0fc:	881b      	ldrh	r3, [r3, #0]
 800a0fe:	b29b      	uxth	r3, r3
 800a100:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a104:	b29a      	uxth	r2, r3
 800a106:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a108:	801a      	strh	r2, [r3, #0]
 800a10a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a10c:	881b      	ldrh	r3, [r3, #0]
 800a10e:	b29b      	uxth	r3, r3
 800a110:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a114:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a118:	b29a      	uxth	r2, r3
 800a11a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a11c:	801a      	strh	r2, [r3, #0]
 800a11e:	e03c      	b.n	800a19a <USB_EPStartXfer+0x858>
 800a120:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a124:	085b      	lsrs	r3, r3, #1
 800a126:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800a12a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a12e:	f003 0301 	and.w	r3, r3, #1
 800a132:	2b00      	cmp	r3, #0
 800a134:	d004      	beq.n	800a140 <USB_EPStartXfer+0x7fe>
 800a136:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a13a:	3301      	adds	r3, #1
 800a13c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800a140:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a144:	b29b      	uxth	r3, r3
 800a146:	029b      	lsls	r3, r3, #10
 800a148:	b29a      	uxth	r2, r3
 800a14a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a14c:	801a      	strh	r2, [r3, #0]
 800a14e:	e024      	b.n	800a19a <USB_EPStartXfer+0x858>
 800a150:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a154:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	785b      	ldrb	r3, [r3, #1]
 800a15c:	2b01      	cmp	r3, #1
 800a15e:	d11c      	bne.n	800a19a <USB_EPStartXfer+0x858>
 800a160:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a164:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a16e:	b29b      	uxth	r3, r3
 800a170:	461a      	mov	r2, r3
 800a172:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a174:	4413      	add	r3, r2
 800a176:	643b      	str	r3, [r7, #64]	; 0x40
 800a178:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a17c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	781b      	ldrb	r3, [r3, #0]
 800a184:	00da      	lsls	r2, r3, #3
 800a186:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a188:	4413      	add	r3, r2
 800a18a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a18e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a190:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a194:	b29a      	uxth	r2, r3
 800a196:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a198:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800a19a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a19e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	895b      	ldrh	r3, [r3, #10]
 800a1a6:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a1aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a1ae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	6959      	ldr	r1, [r3, #20]
 800a1b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a1ba:	b29b      	uxth	r3, r3
 800a1bc:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800a1c0:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800a1c4:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800a1c8:	6800      	ldr	r0, [r0, #0]
 800a1ca:	f001 f82a 	bl	800b222 <USB_WritePMA>
 800a1ce:	e213      	b.n	800a5f8 <USB_EPStartXfer+0xcb6>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800a1d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a1d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	6a1b      	ldr	r3, [r3, #32]
 800a1dc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800a1e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a1e4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a1e8:	681a      	ldr	r2, [r3, #0]
 800a1ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a1ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	781b      	ldrb	r3, [r3, #0]
 800a1f6:	009b      	lsls	r3, r3, #2
 800a1f8:	4413      	add	r3, r2
 800a1fa:	881b      	ldrh	r3, [r3, #0]
 800a1fc:	b29b      	uxth	r3, r3
 800a1fe:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800a202:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a206:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800a20a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a20e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a212:	681a      	ldr	r2, [r3, #0]
 800a214:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a218:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	781b      	ldrb	r3, [r3, #0]
 800a220:	009b      	lsls	r3, r3, #2
 800a222:	441a      	add	r2, r3
 800a224:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800a228:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a22c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a230:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a234:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a238:	b29b      	uxth	r3, r3
 800a23a:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800a23c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a240:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a248:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a24c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a256:	b29b      	uxth	r3, r3
 800a258:	461a      	mov	r2, r3
 800a25a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a25c:	4413      	add	r3, r2
 800a25e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a260:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a264:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	781b      	ldrb	r3, [r3, #0]
 800a26c:	00da      	lsls	r2, r3, #3
 800a26e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a270:	4413      	add	r3, r2
 800a272:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a276:	65bb      	str	r3, [r7, #88]	; 0x58
 800a278:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a27c:	b29a      	uxth	r2, r3
 800a27e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a280:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800a282:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a286:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	891b      	ldrh	r3, [r3, #8]
 800a28e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a292:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a296:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	6959      	ldr	r1, [r3, #20]
 800a29e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a2a2:	b29b      	uxth	r3, r3
 800a2a4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800a2a8:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800a2ac:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800a2b0:	6800      	ldr	r0, [r0, #0]
 800a2b2:	f000 ffb6 	bl	800b222 <USB_WritePMA>
 800a2b6:	e19f      	b.n	800a5f8 <USB_EPStartXfer+0xcb6>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800a2b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a2bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	6a1a      	ldr	r2, [r3, #32]
 800a2c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a2c8:	1ad2      	subs	r2, r2, r3
 800a2ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a2ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800a2d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a2da:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a2de:	681a      	ldr	r2, [r3, #0]
 800a2e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a2e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	781b      	ldrb	r3, [r3, #0]
 800a2ec:	009b      	lsls	r3, r3, #2
 800a2ee:	4413      	add	r3, r2
 800a2f0:	881b      	ldrh	r3, [r3, #0]
 800a2f2:	b29b      	uxth	r3, r3
 800a2f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	f000 80bc 	beq.w	800a476 <USB_EPStartXfer+0xb34>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800a2fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a302:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	673b      	str	r3, [r7, #112]	; 0x70
 800a30a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a30e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	785b      	ldrb	r3, [r3, #1]
 800a316:	2b00      	cmp	r3, #0
 800a318:	d16d      	bne.n	800a3f6 <USB_EPStartXfer+0xab4>
 800a31a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a31e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	66bb      	str	r3, [r7, #104]	; 0x68
 800a326:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a32a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a334:	b29b      	uxth	r3, r3
 800a336:	461a      	mov	r2, r3
 800a338:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a33a:	4413      	add	r3, r2
 800a33c:	66bb      	str	r3, [r7, #104]	; 0x68
 800a33e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a342:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	781b      	ldrb	r3, [r3, #0]
 800a34a:	00da      	lsls	r2, r3, #3
 800a34c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a34e:	4413      	add	r3, r2
 800a350:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a354:	667b      	str	r3, [r7, #100]	; 0x64
 800a356:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a35a:	2b3e      	cmp	r3, #62	; 0x3e
 800a35c:	d91c      	bls.n	800a398 <USB_EPStartXfer+0xa56>
 800a35e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a362:	095b      	lsrs	r3, r3, #5
 800a364:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800a368:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a36c:	f003 031f 	and.w	r3, r3, #31
 800a370:	2b00      	cmp	r3, #0
 800a372:	d104      	bne.n	800a37e <USB_EPStartXfer+0xa3c>
 800a374:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800a378:	3b01      	subs	r3, #1
 800a37a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800a37e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800a382:	b29b      	uxth	r3, r3
 800a384:	029b      	lsls	r3, r3, #10
 800a386:	b29b      	uxth	r3, r3
 800a388:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a38c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a390:	b29a      	uxth	r2, r3
 800a392:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a394:	801a      	strh	r2, [r3, #0]
 800a396:	e053      	b.n	800a440 <USB_EPStartXfer+0xafe>
 800a398:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	d112      	bne.n	800a3c6 <USB_EPStartXfer+0xa84>
 800a3a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a3a2:	881b      	ldrh	r3, [r3, #0]
 800a3a4:	b29b      	uxth	r3, r3
 800a3a6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a3aa:	b29a      	uxth	r2, r3
 800a3ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a3ae:	801a      	strh	r2, [r3, #0]
 800a3b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a3b2:	881b      	ldrh	r3, [r3, #0]
 800a3b4:	b29b      	uxth	r3, r3
 800a3b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a3ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a3be:	b29a      	uxth	r2, r3
 800a3c0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a3c2:	801a      	strh	r2, [r3, #0]
 800a3c4:	e03c      	b.n	800a440 <USB_EPStartXfer+0xafe>
 800a3c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a3ca:	085b      	lsrs	r3, r3, #1
 800a3cc:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800a3d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a3d4:	f003 0301 	and.w	r3, r3, #1
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	d004      	beq.n	800a3e6 <USB_EPStartXfer+0xaa4>
 800a3dc:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800a3e0:	3301      	adds	r3, #1
 800a3e2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800a3e6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800a3ea:	b29b      	uxth	r3, r3
 800a3ec:	029b      	lsls	r3, r3, #10
 800a3ee:	b29a      	uxth	r2, r3
 800a3f0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a3f2:	801a      	strh	r2, [r3, #0]
 800a3f4:	e024      	b.n	800a440 <USB_EPStartXfer+0xafe>
 800a3f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a3fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	785b      	ldrb	r3, [r3, #1]
 800a402:	2b01      	cmp	r3, #1
 800a404:	d11c      	bne.n	800a440 <USB_EPStartXfer+0xafe>
 800a406:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a40a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a414:	b29b      	uxth	r3, r3
 800a416:	461a      	mov	r2, r3
 800a418:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a41a:	4413      	add	r3, r2
 800a41c:	673b      	str	r3, [r7, #112]	; 0x70
 800a41e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a422:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	781b      	ldrb	r3, [r3, #0]
 800a42a:	00da      	lsls	r2, r3, #3
 800a42c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a42e:	4413      	add	r3, r2
 800a430:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a434:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a436:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a43a:	b29a      	uxth	r2, r3
 800a43c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a43e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800a440:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a444:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	895b      	ldrh	r3, [r3, #10]
 800a44c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a450:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a454:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	6959      	ldr	r1, [r3, #20]
 800a45c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a460:	b29b      	uxth	r3, r3
 800a462:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800a466:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800a46a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800a46e:	6800      	ldr	r0, [r0, #0]
 800a470:	f000 fed7 	bl	800b222 <USB_WritePMA>
 800a474:	e0c0      	b.n	800a5f8 <USB_EPStartXfer+0xcb6>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800a476:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a47a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	785b      	ldrb	r3, [r3, #1]
 800a482:	2b00      	cmp	r3, #0
 800a484:	d16d      	bne.n	800a562 <USB_EPStartXfer+0xc20>
 800a486:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a48a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	67fb      	str	r3, [r7, #124]	; 0x7c
 800a492:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a496:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a4a0:	b29b      	uxth	r3, r3
 800a4a2:	461a      	mov	r2, r3
 800a4a4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a4a6:	4413      	add	r3, r2
 800a4a8:	67fb      	str	r3, [r7, #124]	; 0x7c
 800a4aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a4ae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	781b      	ldrb	r3, [r3, #0]
 800a4b6:	00da      	lsls	r2, r3, #3
 800a4b8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a4ba:	4413      	add	r3, r2
 800a4bc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a4c0:	67bb      	str	r3, [r7, #120]	; 0x78
 800a4c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a4c6:	2b3e      	cmp	r3, #62	; 0x3e
 800a4c8:	d91c      	bls.n	800a504 <USB_EPStartXfer+0xbc2>
 800a4ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a4ce:	095b      	lsrs	r3, r3, #5
 800a4d0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800a4d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a4d8:	f003 031f 	and.w	r3, r3, #31
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	d104      	bne.n	800a4ea <USB_EPStartXfer+0xba8>
 800a4e0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800a4e4:	3b01      	subs	r3, #1
 800a4e6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800a4ea:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800a4ee:	b29b      	uxth	r3, r3
 800a4f0:	029b      	lsls	r3, r3, #10
 800a4f2:	b29b      	uxth	r3, r3
 800a4f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a4f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a4fc:	b29a      	uxth	r2, r3
 800a4fe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a500:	801a      	strh	r2, [r3, #0]
 800a502:	e05f      	b.n	800a5c4 <USB_EPStartXfer+0xc82>
 800a504:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a508:	2b00      	cmp	r3, #0
 800a50a:	d112      	bne.n	800a532 <USB_EPStartXfer+0xbf0>
 800a50c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a50e:	881b      	ldrh	r3, [r3, #0]
 800a510:	b29b      	uxth	r3, r3
 800a512:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a516:	b29a      	uxth	r2, r3
 800a518:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a51a:	801a      	strh	r2, [r3, #0]
 800a51c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a51e:	881b      	ldrh	r3, [r3, #0]
 800a520:	b29b      	uxth	r3, r3
 800a522:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a526:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a52a:	b29a      	uxth	r2, r3
 800a52c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a52e:	801a      	strh	r2, [r3, #0]
 800a530:	e048      	b.n	800a5c4 <USB_EPStartXfer+0xc82>
 800a532:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a536:	085b      	lsrs	r3, r3, #1
 800a538:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800a53c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a540:	f003 0301 	and.w	r3, r3, #1
 800a544:	2b00      	cmp	r3, #0
 800a546:	d004      	beq.n	800a552 <USB_EPStartXfer+0xc10>
 800a548:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800a54c:	3301      	adds	r3, #1
 800a54e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800a552:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800a556:	b29b      	uxth	r3, r3
 800a558:	029b      	lsls	r3, r3, #10
 800a55a:	b29a      	uxth	r2, r3
 800a55c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a55e:	801a      	strh	r2, [r3, #0]
 800a560:	e030      	b.n	800a5c4 <USB_EPStartXfer+0xc82>
 800a562:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a566:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	785b      	ldrb	r3, [r3, #1]
 800a56e:	2b01      	cmp	r3, #1
 800a570:	d128      	bne.n	800a5c4 <USB_EPStartXfer+0xc82>
 800a572:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a576:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a580:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a584:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a58e:	b29b      	uxth	r3, r3
 800a590:	461a      	mov	r2, r3
 800a592:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a596:	4413      	add	r3, r2
 800a598:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a59c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a5a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	781b      	ldrb	r3, [r3, #0]
 800a5a8:	00da      	lsls	r2, r3, #3
 800a5aa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a5ae:	4413      	add	r3, r2
 800a5b0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a5b4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a5b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a5bc:	b29a      	uxth	r2, r3
 800a5be:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800a5c2:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800a5c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a5c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	891b      	ldrh	r3, [r3, #8]
 800a5d0:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a5d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a5d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	6959      	ldr	r1, [r3, #20]
 800a5e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a5e4:	b29b      	uxth	r3, r3
 800a5e6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800a5ea:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800a5ee:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800a5f2:	6800      	ldr	r0, [r0, #0]
 800a5f4:	f000 fe15 	bl	800b222 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800a5f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a5fc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a600:	681a      	ldr	r2, [r3, #0]
 800a602:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a606:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	781b      	ldrb	r3, [r3, #0]
 800a60e:	009b      	lsls	r3, r3, #2
 800a610:	4413      	add	r3, r2
 800a612:	881b      	ldrh	r3, [r3, #0]
 800a614:	b29b      	uxth	r3, r3
 800a616:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a61a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a61e:	817b      	strh	r3, [r7, #10]
 800a620:	897b      	ldrh	r3, [r7, #10]
 800a622:	f083 0310 	eor.w	r3, r3, #16
 800a626:	817b      	strh	r3, [r7, #10]
 800a628:	897b      	ldrh	r3, [r7, #10]
 800a62a:	f083 0320 	eor.w	r3, r3, #32
 800a62e:	817b      	strh	r3, [r7, #10]
 800a630:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a634:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a638:	681a      	ldr	r2, [r3, #0]
 800a63a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a63e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	781b      	ldrb	r3, [r3, #0]
 800a646:	009b      	lsls	r3, r3, #2
 800a648:	441a      	add	r2, r3
 800a64a:	897b      	ldrh	r3, [r7, #10]
 800a64c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a650:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a654:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a658:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a65c:	b29b      	uxth	r3, r3
 800a65e:	8013      	strh	r3, [r2, #0]
 800a660:	f000 bc9f 	b.w	800afa2 <USB_EPStartXfer+0x1660>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800a664:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a668:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	7b1b      	ldrb	r3, [r3, #12]
 800a670:	2b00      	cmp	r3, #0
 800a672:	f040 80ae 	bne.w	800a7d2 <USB_EPStartXfer+0xe90>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800a676:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a67a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	699a      	ldr	r2, [r3, #24]
 800a682:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a686:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	691b      	ldr	r3, [r3, #16]
 800a68e:	429a      	cmp	r2, r3
 800a690:	d917      	bls.n	800a6c2 <USB_EPStartXfer+0xd80>
      {
        len = ep->maxpacket;
 800a692:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a696:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	691b      	ldr	r3, [r3, #16]
 800a69e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 800a6a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a6a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	699a      	ldr	r2, [r3, #24]
 800a6ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a6b2:	1ad2      	subs	r2, r2, r3
 800a6b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a6b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	619a      	str	r2, [r3, #24]
 800a6c0:	e00e      	b.n	800a6e0 <USB_EPStartXfer+0xd9e>
      }
      else
      {
        len = ep->xfer_len;
 800a6c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a6c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	699b      	ldr	r3, [r3, #24]
 800a6ce:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 800a6d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a6d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	2200      	movs	r2, #0
 800a6de:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800a6e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a6e4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a6ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a6f2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a6fc:	b29b      	uxth	r3, r3
 800a6fe:	461a      	mov	r2, r3
 800a700:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a704:	4413      	add	r3, r2
 800a706:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a70a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a70e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	781b      	ldrb	r3, [r3, #0]
 800a716:	00da      	lsls	r2, r3, #3
 800a718:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a71c:	4413      	add	r3, r2
 800a71e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a722:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800a726:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a72a:	2b3e      	cmp	r3, #62	; 0x3e
 800a72c:	d91d      	bls.n	800a76a <USB_EPStartXfer+0xe28>
 800a72e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a732:	095b      	lsrs	r3, r3, #5
 800a734:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a738:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a73c:	f003 031f 	and.w	r3, r3, #31
 800a740:	2b00      	cmp	r3, #0
 800a742:	d104      	bne.n	800a74e <USB_EPStartXfer+0xe0c>
 800a744:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a748:	3b01      	subs	r3, #1
 800a74a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a74e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a752:	b29b      	uxth	r3, r3
 800a754:	029b      	lsls	r3, r3, #10
 800a756:	b29b      	uxth	r3, r3
 800a758:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a75c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a760:	b29a      	uxth	r2, r3
 800a762:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a766:	801a      	strh	r2, [r3, #0]
 800a768:	e3e1      	b.n	800af2e <USB_EPStartXfer+0x15ec>
 800a76a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a76e:	2b00      	cmp	r3, #0
 800a770:	d116      	bne.n	800a7a0 <USB_EPStartXfer+0xe5e>
 800a772:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a776:	881b      	ldrh	r3, [r3, #0]
 800a778:	b29b      	uxth	r3, r3
 800a77a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a77e:	b29a      	uxth	r2, r3
 800a780:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a784:	801a      	strh	r2, [r3, #0]
 800a786:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a78a:	881b      	ldrh	r3, [r3, #0]
 800a78c:	b29b      	uxth	r3, r3
 800a78e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a792:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a796:	b29a      	uxth	r2, r3
 800a798:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a79c:	801a      	strh	r2, [r3, #0]
 800a79e:	e3c6      	b.n	800af2e <USB_EPStartXfer+0x15ec>
 800a7a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a7a4:	085b      	lsrs	r3, r3, #1
 800a7a6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a7aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a7ae:	f003 0301 	and.w	r3, r3, #1
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	d004      	beq.n	800a7c0 <USB_EPStartXfer+0xe7e>
 800a7b6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a7ba:	3301      	adds	r3, #1
 800a7bc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a7c0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a7c4:	b29b      	uxth	r3, r3
 800a7c6:	029b      	lsls	r3, r3, #10
 800a7c8:	b29a      	uxth	r2, r3
 800a7ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a7ce:	801a      	strh	r2, [r3, #0]
 800a7d0:	e3ad      	b.n	800af2e <USB_EPStartXfer+0x15ec>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800a7d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a7d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	78db      	ldrb	r3, [r3, #3]
 800a7de:	2b02      	cmp	r3, #2
 800a7e0:	f040 8200 	bne.w	800abe4 <USB_EPStartXfer+0x12a2>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800a7e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a7e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	785b      	ldrb	r3, [r3, #1]
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	f040 8091 	bne.w	800a918 <USB_EPStartXfer+0xfd6>
 800a7f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a7fa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a804:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a808:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a812:	b29b      	uxth	r3, r3
 800a814:	461a      	mov	r2, r3
 800a816:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a81a:	4413      	add	r3, r2
 800a81c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a820:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a824:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	781b      	ldrb	r3, [r3, #0]
 800a82c:	00da      	lsls	r2, r3, #3
 800a82e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a832:	4413      	add	r3, r2
 800a834:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a838:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800a83c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a840:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	691b      	ldr	r3, [r3, #16]
 800a848:	2b3e      	cmp	r3, #62	; 0x3e
 800a84a:	d925      	bls.n	800a898 <USB_EPStartXfer+0xf56>
 800a84c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a850:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	691b      	ldr	r3, [r3, #16]
 800a858:	095b      	lsrs	r3, r3, #5
 800a85a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a85e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a862:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	691b      	ldr	r3, [r3, #16]
 800a86a:	f003 031f 	and.w	r3, r3, #31
 800a86e:	2b00      	cmp	r3, #0
 800a870:	d104      	bne.n	800a87c <USB_EPStartXfer+0xf3a>
 800a872:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a876:	3b01      	subs	r3, #1
 800a878:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a87c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a880:	b29b      	uxth	r3, r3
 800a882:	029b      	lsls	r3, r3, #10
 800a884:	b29b      	uxth	r3, r3
 800a886:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a88a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a88e:	b29a      	uxth	r2, r3
 800a890:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a894:	801a      	strh	r2, [r3, #0]
 800a896:	e074      	b.n	800a982 <USB_EPStartXfer+0x1040>
 800a898:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a89c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	691b      	ldr	r3, [r3, #16]
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	d116      	bne.n	800a8d6 <USB_EPStartXfer+0xf94>
 800a8a8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a8ac:	881b      	ldrh	r3, [r3, #0]
 800a8ae:	b29b      	uxth	r3, r3
 800a8b0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a8b4:	b29a      	uxth	r2, r3
 800a8b6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a8ba:	801a      	strh	r2, [r3, #0]
 800a8bc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a8c0:	881b      	ldrh	r3, [r3, #0]
 800a8c2:	b29b      	uxth	r3, r3
 800a8c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a8c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a8cc:	b29a      	uxth	r2, r3
 800a8ce:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a8d2:	801a      	strh	r2, [r3, #0]
 800a8d4:	e055      	b.n	800a982 <USB_EPStartXfer+0x1040>
 800a8d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a8da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	691b      	ldr	r3, [r3, #16]
 800a8e2:	085b      	lsrs	r3, r3, #1
 800a8e4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a8e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a8ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	691b      	ldr	r3, [r3, #16]
 800a8f4:	f003 0301 	and.w	r3, r3, #1
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	d004      	beq.n	800a906 <USB_EPStartXfer+0xfc4>
 800a8fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a900:	3301      	adds	r3, #1
 800a902:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a906:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a90a:	b29b      	uxth	r3, r3
 800a90c:	029b      	lsls	r3, r3, #10
 800a90e:	b29a      	uxth	r2, r3
 800a910:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a914:	801a      	strh	r2, [r3, #0]
 800a916:	e034      	b.n	800a982 <USB_EPStartXfer+0x1040>
 800a918:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a91c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	785b      	ldrb	r3, [r3, #1]
 800a924:	2b01      	cmp	r3, #1
 800a926:	d12c      	bne.n	800a982 <USB_EPStartXfer+0x1040>
 800a928:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a92c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a930:	681b      	ldr	r3, [r3, #0]
 800a932:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a936:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a93a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a944:	b29b      	uxth	r3, r3
 800a946:	461a      	mov	r2, r3
 800a948:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800a94c:	4413      	add	r3, r2
 800a94e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a952:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a956:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	781b      	ldrb	r3, [r3, #0]
 800a95e:	00da      	lsls	r2, r3, #3
 800a960:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800a964:	4413      	add	r3, r2
 800a966:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a96a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a96e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a972:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	691b      	ldr	r3, [r3, #16]
 800a97a:	b29a      	uxth	r2, r3
 800a97c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800a980:	801a      	strh	r2, [r3, #0]
 800a982:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a986:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800a990:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a994:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	785b      	ldrb	r3, [r3, #1]
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	f040 8091 	bne.w	800aac4 <USB_EPStartXfer+0x1182>
 800a9a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a9a6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800a9b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a9b4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a9be:	b29b      	uxth	r3, r3
 800a9c0:	461a      	mov	r2, r3
 800a9c2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a9c6:	4413      	add	r3, r2
 800a9c8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800a9cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a9d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	781b      	ldrb	r3, [r3, #0]
 800a9d8:	00da      	lsls	r2, r3, #3
 800a9da:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a9de:	4413      	add	r3, r2
 800a9e0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a9e4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800a9e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a9ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	691b      	ldr	r3, [r3, #16]
 800a9f4:	2b3e      	cmp	r3, #62	; 0x3e
 800a9f6:	d925      	bls.n	800aa44 <USB_EPStartXfer+0x1102>
 800a9f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a9fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	691b      	ldr	r3, [r3, #16]
 800aa04:	095b      	lsrs	r3, r3, #5
 800aa06:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800aa0a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aa0e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	691b      	ldr	r3, [r3, #16]
 800aa16:	f003 031f 	and.w	r3, r3, #31
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d104      	bne.n	800aa28 <USB_EPStartXfer+0x10e6>
 800aa1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800aa22:	3b01      	subs	r3, #1
 800aa24:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800aa28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800aa2c:	b29b      	uxth	r3, r3
 800aa2e:	029b      	lsls	r3, r3, #10
 800aa30:	b29b      	uxth	r3, r3
 800aa32:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800aa36:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800aa3a:	b29a      	uxth	r2, r3
 800aa3c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800aa40:	801a      	strh	r2, [r3, #0]
 800aa42:	e06d      	b.n	800ab20 <USB_EPStartXfer+0x11de>
 800aa44:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aa48:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	691b      	ldr	r3, [r3, #16]
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	d116      	bne.n	800aa82 <USB_EPStartXfer+0x1140>
 800aa54:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800aa58:	881b      	ldrh	r3, [r3, #0]
 800aa5a:	b29b      	uxth	r3, r3
 800aa5c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800aa60:	b29a      	uxth	r2, r3
 800aa62:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800aa66:	801a      	strh	r2, [r3, #0]
 800aa68:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800aa6c:	881b      	ldrh	r3, [r3, #0]
 800aa6e:	b29b      	uxth	r3, r3
 800aa70:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800aa74:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800aa78:	b29a      	uxth	r2, r3
 800aa7a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800aa7e:	801a      	strh	r2, [r3, #0]
 800aa80:	e04e      	b.n	800ab20 <USB_EPStartXfer+0x11de>
 800aa82:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aa86:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	691b      	ldr	r3, [r3, #16]
 800aa8e:	085b      	lsrs	r3, r3, #1
 800aa90:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800aa94:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aa98:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aa9c:	681b      	ldr	r3, [r3, #0]
 800aa9e:	691b      	ldr	r3, [r3, #16]
 800aaa0:	f003 0301 	and.w	r3, r3, #1
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	d004      	beq.n	800aab2 <USB_EPStartXfer+0x1170>
 800aaa8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800aaac:	3301      	adds	r3, #1
 800aaae:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800aab2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800aab6:	b29b      	uxth	r3, r3
 800aab8:	029b      	lsls	r3, r3, #10
 800aaba:	b29a      	uxth	r2, r3
 800aabc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800aac0:	801a      	strh	r2, [r3, #0]
 800aac2:	e02d      	b.n	800ab20 <USB_EPStartXfer+0x11de>
 800aac4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aac8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aacc:	681b      	ldr	r3, [r3, #0]
 800aace:	785b      	ldrb	r3, [r3, #1]
 800aad0:	2b01      	cmp	r3, #1
 800aad2:	d125      	bne.n	800ab20 <USB_EPStartXfer+0x11de>
 800aad4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aad8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800aae2:	b29b      	uxth	r3, r3
 800aae4:	461a      	mov	r2, r3
 800aae6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800aaea:	4413      	add	r3, r2
 800aaec:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800aaf0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aaf4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	781b      	ldrb	r3, [r3, #0]
 800aafc:	00da      	lsls	r2, r3, #3
 800aafe:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800ab02:	4413      	add	r3, r2
 800ab04:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800ab08:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800ab0c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ab10:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	691b      	ldr	r3, [r3, #16]
 800ab18:	b29a      	uxth	r2, r3
 800ab1a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800ab1e:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800ab20:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ab24:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	69db      	ldr	r3, [r3, #28]
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	f000 81fe 	beq.w	800af2e <USB_EPStartXfer+0x15ec>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800ab32:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ab36:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ab3a:	681a      	ldr	r2, [r3, #0]
 800ab3c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ab40:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ab44:	681b      	ldr	r3, [r3, #0]
 800ab46:	781b      	ldrb	r3, [r3, #0]
 800ab48:	009b      	lsls	r3, r3, #2
 800ab4a:	4413      	add	r3, r2
 800ab4c:	881b      	ldrh	r3, [r3, #0]
 800ab4e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800ab52:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800ab56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d005      	beq.n	800ab6a <USB_EPStartXfer+0x1228>
 800ab5e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800ab62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d10d      	bne.n	800ab86 <USB_EPStartXfer+0x1244>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800ab6a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800ab6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	f040 81db 	bne.w	800af2e <USB_EPStartXfer+0x15ec>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800ab78:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800ab7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	f040 81d4 	bne.w	800af2e <USB_EPStartXfer+0x15ec>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800ab86:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ab8a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ab8e:	681a      	ldr	r2, [r3, #0]
 800ab90:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ab94:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ab98:	681b      	ldr	r3, [r3, #0]
 800ab9a:	781b      	ldrb	r3, [r3, #0]
 800ab9c:	009b      	lsls	r3, r3, #2
 800ab9e:	4413      	add	r3, r2
 800aba0:	881b      	ldrh	r3, [r3, #0]
 800aba2:	b29b      	uxth	r3, r3
 800aba4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800aba8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800abac:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 800abb0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800abb4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800abb8:	681a      	ldr	r2, [r3, #0]
 800abba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800abbe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	781b      	ldrb	r3, [r3, #0]
 800abc6:	009b      	lsls	r3, r3, #2
 800abc8:	441a      	add	r2, r3
 800abca:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 800abce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800abd2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800abd6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800abda:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800abde:	b29b      	uxth	r3, r3
 800abe0:	8013      	strh	r3, [r2, #0]
 800abe2:	e1a4      	b.n	800af2e <USB_EPStartXfer+0x15ec>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800abe4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800abe8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800abec:	681b      	ldr	r3, [r3, #0]
 800abee:	78db      	ldrb	r3, [r3, #3]
 800abf0:	2b01      	cmp	r3, #1
 800abf2:	f040 819a 	bne.w	800af2a <USB_EPStartXfer+0x15e8>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800abf6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800abfa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	699a      	ldr	r2, [r3, #24]
 800ac02:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ac06:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	691b      	ldr	r3, [r3, #16]
 800ac0e:	429a      	cmp	r2, r3
 800ac10:	d917      	bls.n	800ac42 <USB_EPStartXfer+0x1300>
        {
          len = ep->maxpacket;
 800ac12:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ac16:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	691b      	ldr	r3, [r3, #16]
 800ac1e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 800ac22:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ac26:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	699a      	ldr	r2, [r3, #24]
 800ac2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac32:	1ad2      	subs	r2, r2, r3
 800ac34:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ac38:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ac3c:	681b      	ldr	r3, [r3, #0]
 800ac3e:	619a      	str	r2, [r3, #24]
 800ac40:	e00e      	b.n	800ac60 <USB_EPStartXfer+0x131e>
        }
        else
        {
          len = ep->xfer_len;
 800ac42:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ac46:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	699b      	ldr	r3, [r3, #24]
 800ac4e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 800ac52:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ac56:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ac5a:	681b      	ldr	r3, [r3, #0]
 800ac5c:	2200      	movs	r2, #0
 800ac5e:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800ac60:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ac64:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	785b      	ldrb	r3, [r3, #1]
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	d178      	bne.n	800ad62 <USB_EPStartXfer+0x1420>
 800ac70:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ac74:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ac78:	681b      	ldr	r3, [r3, #0]
 800ac7a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800ac7e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ac82:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ac86:	681b      	ldr	r3, [r3, #0]
 800ac88:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ac8c:	b29b      	uxth	r3, r3
 800ac8e:	461a      	mov	r2, r3
 800ac90:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800ac94:	4413      	add	r3, r2
 800ac96:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800ac9a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ac9e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aca2:	681b      	ldr	r3, [r3, #0]
 800aca4:	781b      	ldrb	r3, [r3, #0]
 800aca6:	00da      	lsls	r2, r3, #3
 800aca8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800acac:	4413      	add	r3, r2
 800acae:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800acb2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800acb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800acba:	2b3e      	cmp	r3, #62	; 0x3e
 800acbc:	d91d      	bls.n	800acfa <USB_EPStartXfer+0x13b8>
 800acbe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800acc2:	095b      	lsrs	r3, r3, #5
 800acc4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800acc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800accc:	f003 031f 	and.w	r3, r3, #31
 800acd0:	2b00      	cmp	r3, #0
 800acd2:	d104      	bne.n	800acde <USB_EPStartXfer+0x139c>
 800acd4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800acd8:	3b01      	subs	r3, #1
 800acda:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800acde:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ace2:	b29b      	uxth	r3, r3
 800ace4:	029b      	lsls	r3, r3, #10
 800ace6:	b29b      	uxth	r3, r3
 800ace8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800acec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800acf0:	b29a      	uxth	r2, r3
 800acf2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800acf6:	801a      	strh	r2, [r3, #0]
 800acf8:	e064      	b.n	800adc4 <USB_EPStartXfer+0x1482>
 800acfa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	d116      	bne.n	800ad30 <USB_EPStartXfer+0x13ee>
 800ad02:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800ad06:	881b      	ldrh	r3, [r3, #0]
 800ad08:	b29b      	uxth	r3, r3
 800ad0a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800ad0e:	b29a      	uxth	r2, r3
 800ad10:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800ad14:	801a      	strh	r2, [r3, #0]
 800ad16:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800ad1a:	881b      	ldrh	r3, [r3, #0]
 800ad1c:	b29b      	uxth	r3, r3
 800ad1e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ad22:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ad26:	b29a      	uxth	r2, r3
 800ad28:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800ad2c:	801a      	strh	r2, [r3, #0]
 800ad2e:	e049      	b.n	800adc4 <USB_EPStartXfer+0x1482>
 800ad30:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad34:	085b      	lsrs	r3, r3, #1
 800ad36:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800ad3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad3e:	f003 0301 	and.w	r3, r3, #1
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	d004      	beq.n	800ad50 <USB_EPStartXfer+0x140e>
 800ad46:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ad4a:	3301      	adds	r3, #1
 800ad4c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800ad50:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ad54:	b29b      	uxth	r3, r3
 800ad56:	029b      	lsls	r3, r3, #10
 800ad58:	b29a      	uxth	r2, r3
 800ad5a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800ad5e:	801a      	strh	r2, [r3, #0]
 800ad60:	e030      	b.n	800adc4 <USB_EPStartXfer+0x1482>
 800ad62:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ad66:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ad6a:	681b      	ldr	r3, [r3, #0]
 800ad6c:	785b      	ldrb	r3, [r3, #1]
 800ad6e:	2b01      	cmp	r3, #1
 800ad70:	d128      	bne.n	800adc4 <USB_EPStartXfer+0x1482>
 800ad72:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ad76:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800ad80:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ad84:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ad8e:	b29b      	uxth	r3, r3
 800ad90:	461a      	mov	r2, r3
 800ad92:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800ad96:	4413      	add	r3, r2
 800ad98:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800ad9c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ada0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ada4:	681b      	ldr	r3, [r3, #0]
 800ada6:	781b      	ldrb	r3, [r3, #0]
 800ada8:	00da      	lsls	r2, r3, #3
 800adaa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800adae:	4413      	add	r3, r2
 800adb0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800adb4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800adb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800adbc:	b29a      	uxth	r2, r3
 800adbe:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800adc2:	801a      	strh	r2, [r3, #0]
 800adc4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800adc8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800add2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800add6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800adda:	681b      	ldr	r3, [r3, #0]
 800addc:	785b      	ldrb	r3, [r3, #1]
 800adde:	2b00      	cmp	r3, #0
 800ade0:	d178      	bne.n	800aed4 <USB_EPStartXfer+0x1592>
 800ade2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ade6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800adea:	681b      	ldr	r3, [r3, #0]
 800adec:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800adf0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800adf4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800adfe:	b29b      	uxth	r3, r3
 800ae00:	461a      	mov	r2, r3
 800ae02:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800ae06:	4413      	add	r3, r2
 800ae08:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800ae0c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ae10:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	781b      	ldrb	r3, [r3, #0]
 800ae18:	00da      	lsls	r2, r3, #3
 800ae1a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800ae1e:	4413      	add	r3, r2
 800ae20:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800ae24:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800ae28:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae2c:	2b3e      	cmp	r3, #62	; 0x3e
 800ae2e:	d91d      	bls.n	800ae6c <USB_EPStartXfer+0x152a>
 800ae30:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae34:	095b      	lsrs	r3, r3, #5
 800ae36:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800ae3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae3e:	f003 031f 	and.w	r3, r3, #31
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d104      	bne.n	800ae50 <USB_EPStartXfer+0x150e>
 800ae46:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ae4a:	3b01      	subs	r3, #1
 800ae4c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800ae50:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ae54:	b29b      	uxth	r3, r3
 800ae56:	029b      	lsls	r3, r3, #10
 800ae58:	b29b      	uxth	r3, r3
 800ae5a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ae5e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ae62:	b29a      	uxth	r2, r3
 800ae64:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800ae68:	801a      	strh	r2, [r3, #0]
 800ae6a:	e060      	b.n	800af2e <USB_EPStartXfer+0x15ec>
 800ae6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	d116      	bne.n	800aea2 <USB_EPStartXfer+0x1560>
 800ae74:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800ae78:	881b      	ldrh	r3, [r3, #0]
 800ae7a:	b29b      	uxth	r3, r3
 800ae7c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800ae80:	b29a      	uxth	r2, r3
 800ae82:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800ae86:	801a      	strh	r2, [r3, #0]
 800ae88:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800ae8c:	881b      	ldrh	r3, [r3, #0]
 800ae8e:	b29b      	uxth	r3, r3
 800ae90:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ae94:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ae98:	b29a      	uxth	r2, r3
 800ae9a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800ae9e:	801a      	strh	r2, [r3, #0]
 800aea0:	e045      	b.n	800af2e <USB_EPStartXfer+0x15ec>
 800aea2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aea6:	085b      	lsrs	r3, r3, #1
 800aea8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800aeac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aeb0:	f003 0301 	and.w	r3, r3, #1
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	d004      	beq.n	800aec2 <USB_EPStartXfer+0x1580>
 800aeb8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800aebc:	3301      	adds	r3, #1
 800aebe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800aec2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800aec6:	b29b      	uxth	r3, r3
 800aec8:	029b      	lsls	r3, r3, #10
 800aeca:	b29a      	uxth	r2, r3
 800aecc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800aed0:	801a      	strh	r2, [r3, #0]
 800aed2:	e02c      	b.n	800af2e <USB_EPStartXfer+0x15ec>
 800aed4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aed8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aedc:	681b      	ldr	r3, [r3, #0]
 800aede:	785b      	ldrb	r3, [r3, #1]
 800aee0:	2b01      	cmp	r3, #1
 800aee2:	d124      	bne.n	800af2e <USB_EPStartXfer+0x15ec>
 800aee4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aee8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800aef2:	b29b      	uxth	r3, r3
 800aef4:	461a      	mov	r2, r3
 800aef6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800aefa:	4413      	add	r3, r2
 800aefc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800af00:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800af04:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800af08:	681b      	ldr	r3, [r3, #0]
 800af0a:	781b      	ldrb	r3, [r3, #0]
 800af0c:	00da      	lsls	r2, r3, #3
 800af0e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800af12:	4413      	add	r3, r2
 800af14:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800af18:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800af1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af20:	b29a      	uxth	r2, r3
 800af22:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800af26:	801a      	strh	r2, [r3, #0]
 800af28:	e001      	b.n	800af2e <USB_EPStartXfer+0x15ec>
      }
      else
      {
        return HAL_ERROR;
 800af2a:	2301      	movs	r3, #1
 800af2c:	e03a      	b.n	800afa4 <USB_EPStartXfer+0x1662>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800af2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800af32:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800af36:	681a      	ldr	r2, [r3, #0]
 800af38:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800af3c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800af40:	681b      	ldr	r3, [r3, #0]
 800af42:	781b      	ldrb	r3, [r3, #0]
 800af44:	009b      	lsls	r3, r3, #2
 800af46:	4413      	add	r3, r2
 800af48:	881b      	ldrh	r3, [r3, #0]
 800af4a:	b29b      	uxth	r3, r3
 800af4c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800af50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800af54:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800af58:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800af5c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800af60:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800af64:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800af68:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800af6c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800af70:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800af74:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800af78:	681a      	ldr	r2, [r3, #0]
 800af7a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800af7e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800af82:	681b      	ldr	r3, [r3, #0]
 800af84:	781b      	ldrb	r3, [r3, #0]
 800af86:	009b      	lsls	r3, r3, #2
 800af88:	441a      	add	r2, r3
 800af8a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800af8e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800af92:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800af96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800af9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800af9e:	b29b      	uxth	r3, r3
 800afa0:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800afa2:	2300      	movs	r3, #0
}
 800afa4:	4618      	mov	r0, r3
 800afa6:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800afaa:	46bd      	mov	sp, r7
 800afac:	bd80      	pop	{r7, pc}

0800afae <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800afae:	b480      	push	{r7}
 800afb0:	b085      	sub	sp, #20
 800afb2:	af00      	add	r7, sp, #0
 800afb4:	6078      	str	r0, [r7, #4]
 800afb6:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800afb8:	683b      	ldr	r3, [r7, #0]
 800afba:	785b      	ldrb	r3, [r3, #1]
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	d020      	beq.n	800b002 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800afc0:	687a      	ldr	r2, [r7, #4]
 800afc2:	683b      	ldr	r3, [r7, #0]
 800afc4:	781b      	ldrb	r3, [r3, #0]
 800afc6:	009b      	lsls	r3, r3, #2
 800afc8:	4413      	add	r3, r2
 800afca:	881b      	ldrh	r3, [r3, #0]
 800afcc:	b29b      	uxth	r3, r3
 800afce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800afd2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800afd6:	81bb      	strh	r3, [r7, #12]
 800afd8:	89bb      	ldrh	r3, [r7, #12]
 800afda:	f083 0310 	eor.w	r3, r3, #16
 800afde:	81bb      	strh	r3, [r7, #12]
 800afe0:	687a      	ldr	r2, [r7, #4]
 800afe2:	683b      	ldr	r3, [r7, #0]
 800afe4:	781b      	ldrb	r3, [r3, #0]
 800afe6:	009b      	lsls	r3, r3, #2
 800afe8:	441a      	add	r2, r3
 800afea:	89bb      	ldrh	r3, [r7, #12]
 800afec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800aff0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800aff4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800aff8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800affc:	b29b      	uxth	r3, r3
 800affe:	8013      	strh	r3, [r2, #0]
 800b000:	e01f      	b.n	800b042 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800b002:	687a      	ldr	r2, [r7, #4]
 800b004:	683b      	ldr	r3, [r7, #0]
 800b006:	781b      	ldrb	r3, [r3, #0]
 800b008:	009b      	lsls	r3, r3, #2
 800b00a:	4413      	add	r3, r2
 800b00c:	881b      	ldrh	r3, [r3, #0]
 800b00e:	b29b      	uxth	r3, r3
 800b010:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b014:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b018:	81fb      	strh	r3, [r7, #14]
 800b01a:	89fb      	ldrh	r3, [r7, #14]
 800b01c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800b020:	81fb      	strh	r3, [r7, #14]
 800b022:	687a      	ldr	r2, [r7, #4]
 800b024:	683b      	ldr	r3, [r7, #0]
 800b026:	781b      	ldrb	r3, [r3, #0]
 800b028:	009b      	lsls	r3, r3, #2
 800b02a:	441a      	add	r2, r3
 800b02c:	89fb      	ldrh	r3, [r7, #14]
 800b02e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b032:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b036:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b03a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b03e:	b29b      	uxth	r3, r3
 800b040:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800b042:	2300      	movs	r3, #0
}
 800b044:	4618      	mov	r0, r3
 800b046:	3714      	adds	r7, #20
 800b048:	46bd      	mov	sp, r7
 800b04a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b04e:	4770      	bx	lr

0800b050 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800b050:	b480      	push	{r7}
 800b052:	b087      	sub	sp, #28
 800b054:	af00      	add	r7, sp, #0
 800b056:	6078      	str	r0, [r7, #4]
 800b058:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800b05a:	683b      	ldr	r3, [r7, #0]
 800b05c:	7b1b      	ldrb	r3, [r3, #12]
 800b05e:	2b00      	cmp	r3, #0
 800b060:	f040 809d 	bne.w	800b19e <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800b064:	683b      	ldr	r3, [r7, #0]
 800b066:	785b      	ldrb	r3, [r3, #1]
 800b068:	2b00      	cmp	r3, #0
 800b06a:	d04c      	beq.n	800b106 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b06c:	687a      	ldr	r2, [r7, #4]
 800b06e:	683b      	ldr	r3, [r7, #0]
 800b070:	781b      	ldrb	r3, [r3, #0]
 800b072:	009b      	lsls	r3, r3, #2
 800b074:	4413      	add	r3, r2
 800b076:	881b      	ldrh	r3, [r3, #0]
 800b078:	823b      	strh	r3, [r7, #16]
 800b07a:	8a3b      	ldrh	r3, [r7, #16]
 800b07c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b080:	2b00      	cmp	r3, #0
 800b082:	d01b      	beq.n	800b0bc <USB_EPClearStall+0x6c>
 800b084:	687a      	ldr	r2, [r7, #4]
 800b086:	683b      	ldr	r3, [r7, #0]
 800b088:	781b      	ldrb	r3, [r3, #0]
 800b08a:	009b      	lsls	r3, r3, #2
 800b08c:	4413      	add	r3, r2
 800b08e:	881b      	ldrh	r3, [r3, #0]
 800b090:	b29b      	uxth	r3, r3
 800b092:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b096:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b09a:	81fb      	strh	r3, [r7, #14]
 800b09c:	687a      	ldr	r2, [r7, #4]
 800b09e:	683b      	ldr	r3, [r7, #0]
 800b0a0:	781b      	ldrb	r3, [r3, #0]
 800b0a2:	009b      	lsls	r3, r3, #2
 800b0a4:	441a      	add	r2, r3
 800b0a6:	89fb      	ldrh	r3, [r7, #14]
 800b0a8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b0ac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b0b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b0b4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800b0b8:	b29b      	uxth	r3, r3
 800b0ba:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800b0bc:	683b      	ldr	r3, [r7, #0]
 800b0be:	78db      	ldrb	r3, [r3, #3]
 800b0c0:	2b01      	cmp	r3, #1
 800b0c2:	d06c      	beq.n	800b19e <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800b0c4:	687a      	ldr	r2, [r7, #4]
 800b0c6:	683b      	ldr	r3, [r7, #0]
 800b0c8:	781b      	ldrb	r3, [r3, #0]
 800b0ca:	009b      	lsls	r3, r3, #2
 800b0cc:	4413      	add	r3, r2
 800b0ce:	881b      	ldrh	r3, [r3, #0]
 800b0d0:	b29b      	uxth	r3, r3
 800b0d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b0d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b0da:	81bb      	strh	r3, [r7, #12]
 800b0dc:	89bb      	ldrh	r3, [r7, #12]
 800b0de:	f083 0320 	eor.w	r3, r3, #32
 800b0e2:	81bb      	strh	r3, [r7, #12]
 800b0e4:	687a      	ldr	r2, [r7, #4]
 800b0e6:	683b      	ldr	r3, [r7, #0]
 800b0e8:	781b      	ldrb	r3, [r3, #0]
 800b0ea:	009b      	lsls	r3, r3, #2
 800b0ec:	441a      	add	r2, r3
 800b0ee:	89bb      	ldrh	r3, [r7, #12]
 800b0f0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b0f4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b0f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b0fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b100:	b29b      	uxth	r3, r3
 800b102:	8013      	strh	r3, [r2, #0]
 800b104:	e04b      	b.n	800b19e <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800b106:	687a      	ldr	r2, [r7, #4]
 800b108:	683b      	ldr	r3, [r7, #0]
 800b10a:	781b      	ldrb	r3, [r3, #0]
 800b10c:	009b      	lsls	r3, r3, #2
 800b10e:	4413      	add	r3, r2
 800b110:	881b      	ldrh	r3, [r3, #0]
 800b112:	82fb      	strh	r3, [r7, #22]
 800b114:	8afb      	ldrh	r3, [r7, #22]
 800b116:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b11a:	2b00      	cmp	r3, #0
 800b11c:	d01b      	beq.n	800b156 <USB_EPClearStall+0x106>
 800b11e:	687a      	ldr	r2, [r7, #4]
 800b120:	683b      	ldr	r3, [r7, #0]
 800b122:	781b      	ldrb	r3, [r3, #0]
 800b124:	009b      	lsls	r3, r3, #2
 800b126:	4413      	add	r3, r2
 800b128:	881b      	ldrh	r3, [r3, #0]
 800b12a:	b29b      	uxth	r3, r3
 800b12c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b130:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b134:	82bb      	strh	r3, [r7, #20]
 800b136:	687a      	ldr	r2, [r7, #4]
 800b138:	683b      	ldr	r3, [r7, #0]
 800b13a:	781b      	ldrb	r3, [r3, #0]
 800b13c:	009b      	lsls	r3, r3, #2
 800b13e:	441a      	add	r2, r3
 800b140:	8abb      	ldrh	r3, [r7, #20]
 800b142:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b146:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b14a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800b14e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b152:	b29b      	uxth	r3, r3
 800b154:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800b156:	687a      	ldr	r2, [r7, #4]
 800b158:	683b      	ldr	r3, [r7, #0]
 800b15a:	781b      	ldrb	r3, [r3, #0]
 800b15c:	009b      	lsls	r3, r3, #2
 800b15e:	4413      	add	r3, r2
 800b160:	881b      	ldrh	r3, [r3, #0]
 800b162:	b29b      	uxth	r3, r3
 800b164:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b168:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b16c:	827b      	strh	r3, [r7, #18]
 800b16e:	8a7b      	ldrh	r3, [r7, #18]
 800b170:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800b174:	827b      	strh	r3, [r7, #18]
 800b176:	8a7b      	ldrh	r3, [r7, #18]
 800b178:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800b17c:	827b      	strh	r3, [r7, #18]
 800b17e:	687a      	ldr	r2, [r7, #4]
 800b180:	683b      	ldr	r3, [r7, #0]
 800b182:	781b      	ldrb	r3, [r3, #0]
 800b184:	009b      	lsls	r3, r3, #2
 800b186:	441a      	add	r2, r3
 800b188:	8a7b      	ldrh	r3, [r7, #18]
 800b18a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b18e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b192:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b196:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b19a:	b29b      	uxth	r3, r3
 800b19c:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800b19e:	2300      	movs	r3, #0
}
 800b1a0:	4618      	mov	r0, r3
 800b1a2:	371c      	adds	r7, #28
 800b1a4:	46bd      	mov	sp, r7
 800b1a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1aa:	4770      	bx	lr

0800b1ac <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800b1ac:	b480      	push	{r7}
 800b1ae:	b083      	sub	sp, #12
 800b1b0:	af00      	add	r7, sp, #0
 800b1b2:	6078      	str	r0, [r7, #4]
 800b1b4:	460b      	mov	r3, r1
 800b1b6:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800b1b8:	78fb      	ldrb	r3, [r7, #3]
 800b1ba:	2b00      	cmp	r3, #0
 800b1bc:	d103      	bne.n	800b1c6 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	2280      	movs	r2, #128	; 0x80
 800b1c2:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800b1c6:	2300      	movs	r3, #0
}
 800b1c8:	4618      	mov	r0, r3
 800b1ca:	370c      	adds	r7, #12
 800b1cc:	46bd      	mov	sp, r7
 800b1ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1d2:	4770      	bx	lr

0800b1d4 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800b1d4:	b480      	push	{r7}
 800b1d6:	b083      	sub	sp, #12
 800b1d8:	af00      	add	r7, sp, #0
 800b1da:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800b1e2:	b29b      	uxth	r3, r3
 800b1e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b1e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b1ec:	b29a      	uxth	r2, r3
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 800b1f4:	2300      	movs	r3, #0
}
 800b1f6:	4618      	mov	r0, r3
 800b1f8:	370c      	adds	r7, #12
 800b1fa:	46bd      	mov	sp, r7
 800b1fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b200:	4770      	bx	lr

0800b202 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800b202:	b480      	push	{r7}
 800b204:	b085      	sub	sp, #20
 800b206:	af00      	add	r7, sp, #0
 800b208:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800b210:	b29b      	uxth	r3, r3
 800b212:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800b214:	68fb      	ldr	r3, [r7, #12]
}
 800b216:	4618      	mov	r0, r3
 800b218:	3714      	adds	r7, #20
 800b21a:	46bd      	mov	sp, r7
 800b21c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b220:	4770      	bx	lr

0800b222 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800b222:	b480      	push	{r7}
 800b224:	b08d      	sub	sp, #52	; 0x34
 800b226:	af00      	add	r7, sp, #0
 800b228:	60f8      	str	r0, [r7, #12]
 800b22a:	60b9      	str	r1, [r7, #8]
 800b22c:	4611      	mov	r1, r2
 800b22e:	461a      	mov	r2, r3
 800b230:	460b      	mov	r3, r1
 800b232:	80fb      	strh	r3, [r7, #6]
 800b234:	4613      	mov	r3, r2
 800b236:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800b238:	88bb      	ldrh	r3, [r7, #4]
 800b23a:	3301      	adds	r3, #1
 800b23c:	085b      	lsrs	r3, r3, #1
 800b23e:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 800b240:	68fb      	ldr	r3, [r7, #12]
 800b242:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t temp1;
  uint32_t temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800b244:	68bb      	ldr	r3, [r7, #8]
 800b246:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800b248:	88fa      	ldrh	r2, [r7, #6]
 800b24a:	69fb      	ldr	r3, [r7, #28]
 800b24c:	4413      	add	r3, r2
 800b24e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b252:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 800b254:	6a3b      	ldr	r3, [r7, #32]
 800b256:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b258:	e01b      	b.n	800b292 <USB_WritePMA+0x70>
  {
    temp1 = *pBuf;
 800b25a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b25c:	781b      	ldrb	r3, [r3, #0]
 800b25e:	61bb      	str	r3, [r7, #24]
    pBuf++;
 800b260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b262:	3301      	adds	r3, #1
 800b264:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 800b266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b268:	781b      	ldrb	r3, [r3, #0]
 800b26a:	b29b      	uxth	r3, r3
 800b26c:	021b      	lsls	r3, r3, #8
 800b26e:	b29b      	uxth	r3, r3
 800b270:	461a      	mov	r2, r3
 800b272:	69bb      	ldr	r3, [r7, #24]
 800b274:	4313      	orrs	r3, r2
 800b276:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 800b278:	697b      	ldr	r3, [r7, #20]
 800b27a:	b29a      	uxth	r2, r3
 800b27c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b27e:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800b280:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b282:	3302      	adds	r3, #2
 800b284:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800b286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b288:	3301      	adds	r3, #1
 800b28a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 800b28c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b28e:	3b01      	subs	r3, #1
 800b290:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b292:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b294:	2b00      	cmp	r3, #0
 800b296:	d1e0      	bne.n	800b25a <USB_WritePMA+0x38>
  }
}
 800b298:	bf00      	nop
 800b29a:	bf00      	nop
 800b29c:	3734      	adds	r7, #52	; 0x34
 800b29e:	46bd      	mov	sp, r7
 800b2a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2a4:	4770      	bx	lr

0800b2a6 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800b2a6:	b480      	push	{r7}
 800b2a8:	b08b      	sub	sp, #44	; 0x2c
 800b2aa:	af00      	add	r7, sp, #0
 800b2ac:	60f8      	str	r0, [r7, #12]
 800b2ae:	60b9      	str	r1, [r7, #8]
 800b2b0:	4611      	mov	r1, r2
 800b2b2:	461a      	mov	r2, r3
 800b2b4:	460b      	mov	r3, r1
 800b2b6:	80fb      	strh	r3, [r7, #6]
 800b2b8:	4613      	mov	r3, r2
 800b2ba:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800b2bc:	88bb      	ldrh	r3, [r7, #4]
 800b2be:	085b      	lsrs	r3, r3, #1
 800b2c0:	b29b      	uxth	r3, r3
 800b2c2:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800b2c4:	68fb      	ldr	r3, [r7, #12]
 800b2c6:	617b      	str	r3, [r7, #20]
  uint32_t i;
  uint32_t temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800b2c8:	68bb      	ldr	r3, [r7, #8]
 800b2ca:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800b2cc:	88fa      	ldrh	r2, [r7, #6]
 800b2ce:	697b      	ldr	r3, [r7, #20]
 800b2d0:	4413      	add	r3, r2
 800b2d2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b2d6:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800b2d8:	69bb      	ldr	r3, [r7, #24]
 800b2da:	627b      	str	r3, [r7, #36]	; 0x24
 800b2dc:	e018      	b.n	800b310 <USB_ReadPMA+0x6a>
  {
    temp = *(__IO uint16_t *)pdwVal;
 800b2de:	6a3b      	ldr	r3, [r7, #32]
 800b2e0:	881b      	ldrh	r3, [r3, #0]
 800b2e2:	b29b      	uxth	r3, r3
 800b2e4:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800b2e6:	6a3b      	ldr	r3, [r7, #32]
 800b2e8:	3302      	adds	r3, #2
 800b2ea:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800b2ec:	693b      	ldr	r3, [r7, #16]
 800b2ee:	b2da      	uxtb	r2, r3
 800b2f0:	69fb      	ldr	r3, [r7, #28]
 800b2f2:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800b2f4:	69fb      	ldr	r3, [r7, #28]
 800b2f6:	3301      	adds	r3, #1
 800b2f8:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800b2fa:	693b      	ldr	r3, [r7, #16]
 800b2fc:	0a1b      	lsrs	r3, r3, #8
 800b2fe:	b2da      	uxtb	r2, r3
 800b300:	69fb      	ldr	r3, [r7, #28]
 800b302:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800b304:	69fb      	ldr	r3, [r7, #28]
 800b306:	3301      	adds	r3, #1
 800b308:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 800b30a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b30c:	3b01      	subs	r3, #1
 800b30e:	627b      	str	r3, [r7, #36]	; 0x24
 800b310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b312:	2b00      	cmp	r3, #0
 800b314:	d1e3      	bne.n	800b2de <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800b316:	88bb      	ldrh	r3, [r7, #4]
 800b318:	f003 0301 	and.w	r3, r3, #1
 800b31c:	b29b      	uxth	r3, r3
 800b31e:	2b00      	cmp	r3, #0
 800b320:	d007      	beq.n	800b332 <USB_ReadPMA+0x8c>
  {
    temp = *pdwVal;
 800b322:	6a3b      	ldr	r3, [r7, #32]
 800b324:	881b      	ldrh	r3, [r3, #0]
 800b326:	b29b      	uxth	r3, r3
 800b328:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800b32a:	693b      	ldr	r3, [r7, #16]
 800b32c:	b2da      	uxtb	r2, r3
 800b32e:	69fb      	ldr	r3, [r7, #28]
 800b330:	701a      	strb	r2, [r3, #0]
  }
}
 800b332:	bf00      	nop
 800b334:	372c      	adds	r7, #44	; 0x2c
 800b336:	46bd      	mov	sp, r7
 800b338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b33c:	4770      	bx	lr

0800b33e <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b33e:	b580      	push	{r7, lr}
 800b340:	b084      	sub	sp, #16
 800b342:	af00      	add	r7, sp, #0
 800b344:	6078      	str	r0, [r7, #4]
 800b346:	460b      	mov	r3, r1
 800b348:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800b34a:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800b34e:	f002 f8a7 	bl	800d4a0 <USBD_static_malloc>
 800b352:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800b354:	68fb      	ldr	r3, [r7, #12]
 800b356:	2b00      	cmp	r3, #0
 800b358:	d105      	bne.n	800b366 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	2200      	movs	r2, #0
 800b35e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800b362:	2302      	movs	r3, #2
 800b364:	e066      	b.n	800b434 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	68fa      	ldr	r2, [r7, #12]
 800b36a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	7c1b      	ldrb	r3, [r3, #16]
 800b372:	2b00      	cmp	r3, #0
 800b374:	d119      	bne.n	800b3aa <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800b376:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b37a:	2202      	movs	r2, #2
 800b37c:	2181      	movs	r1, #129	; 0x81
 800b37e:	6878      	ldr	r0, [r7, #4]
 800b380:	f001 ff33 	bl	800d1ea <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	2201      	movs	r2, #1
 800b388:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800b38a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b38e:	2202      	movs	r2, #2
 800b390:	2101      	movs	r1, #1
 800b392:	6878      	ldr	r0, [r7, #4]
 800b394:	f001 ff29 	bl	800d1ea <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	2201      	movs	r2, #1
 800b39c:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	2210      	movs	r2, #16
 800b3a4:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800b3a8:	e016      	b.n	800b3d8 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800b3aa:	2340      	movs	r3, #64	; 0x40
 800b3ac:	2202      	movs	r2, #2
 800b3ae:	2181      	movs	r1, #129	; 0x81
 800b3b0:	6878      	ldr	r0, [r7, #4]
 800b3b2:	f001 ff1a 	bl	800d1ea <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	2201      	movs	r2, #1
 800b3ba:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800b3bc:	2340      	movs	r3, #64	; 0x40
 800b3be:	2202      	movs	r2, #2
 800b3c0:	2101      	movs	r1, #1
 800b3c2:	6878      	ldr	r0, [r7, #4]
 800b3c4:	f001 ff11 	bl	800d1ea <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	2201      	movs	r2, #1
 800b3cc:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	2210      	movs	r2, #16
 800b3d4:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800b3d8:	2308      	movs	r3, #8
 800b3da:	2203      	movs	r2, #3
 800b3dc:	2182      	movs	r1, #130	; 0x82
 800b3de:	6878      	ldr	r0, [r7, #4]
 800b3e0:	f001 ff03 	bl	800d1ea <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	2201      	movs	r2, #1
 800b3e8:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b3f2:	681b      	ldr	r3, [r3, #0]
 800b3f4:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800b3f6:	68fb      	ldr	r3, [r7, #12]
 800b3f8:	2200      	movs	r2, #0
 800b3fa:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800b3fe:	68fb      	ldr	r3, [r7, #12]
 800b400:	2200      	movs	r2, #0
 800b402:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	7c1b      	ldrb	r3, [r3, #16]
 800b40a:	2b00      	cmp	r3, #0
 800b40c:	d109      	bne.n	800b422 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b40e:	68fb      	ldr	r3, [r7, #12]
 800b410:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b414:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b418:	2101      	movs	r1, #1
 800b41a:	6878      	ldr	r0, [r7, #4]
 800b41c:	f001 ffd5 	bl	800d3ca <USBD_LL_PrepareReceive>
 800b420:	e007      	b.n	800b432 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b422:	68fb      	ldr	r3, [r7, #12]
 800b424:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b428:	2340      	movs	r3, #64	; 0x40
 800b42a:	2101      	movs	r1, #1
 800b42c:	6878      	ldr	r0, [r7, #4]
 800b42e:	f001 ffcc 	bl	800d3ca <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b432:	2300      	movs	r3, #0
}
 800b434:	4618      	mov	r0, r3
 800b436:	3710      	adds	r7, #16
 800b438:	46bd      	mov	sp, r7
 800b43a:	bd80      	pop	{r7, pc}

0800b43c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b43c:	b580      	push	{r7, lr}
 800b43e:	b082      	sub	sp, #8
 800b440:	af00      	add	r7, sp, #0
 800b442:	6078      	str	r0, [r7, #4]
 800b444:	460b      	mov	r3, r1
 800b446:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800b448:	2181      	movs	r1, #129	; 0x81
 800b44a:	6878      	ldr	r0, [r7, #4]
 800b44c:	f001 fef3 	bl	800d236 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	2200      	movs	r2, #0
 800b454:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800b456:	2101      	movs	r1, #1
 800b458:	6878      	ldr	r0, [r7, #4]
 800b45a:	f001 feec 	bl	800d236 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	2200      	movs	r2, #0
 800b462:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800b466:	2182      	movs	r1, #130	; 0x82
 800b468:	6878      	ldr	r0, [r7, #4]
 800b46a:	f001 fee4 	bl	800d236 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	2200      	movs	r2, #0
 800b472:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	2200      	movs	r2, #0
 800b47a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b484:	2b00      	cmp	r3, #0
 800b486:	d00e      	beq.n	800b4a6 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b48e:	685b      	ldr	r3, [r3, #4]
 800b490:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b498:	4618      	mov	r0, r3
 800b49a:	f002 f80f 	bl	800d4bc <USBD_static_free>
    pdev->pClassData = NULL;
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	2200      	movs	r2, #0
 800b4a2:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800b4a6:	2300      	movs	r3, #0
}
 800b4a8:	4618      	mov	r0, r3
 800b4aa:	3708      	adds	r7, #8
 800b4ac:	46bd      	mov	sp, r7
 800b4ae:	bd80      	pop	{r7, pc}

0800b4b0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800b4b0:	b580      	push	{r7, lr}
 800b4b2:	b086      	sub	sp, #24
 800b4b4:	af00      	add	r7, sp, #0
 800b4b6:	6078      	str	r0, [r7, #4]
 800b4b8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b4c0:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800b4c2:	2300      	movs	r3, #0
 800b4c4:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800b4c6:	2300      	movs	r3, #0
 800b4c8:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800b4ca:	2300      	movs	r3, #0
 800b4cc:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800b4ce:	693b      	ldr	r3, [r7, #16]
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	d101      	bne.n	800b4d8 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800b4d4:	2303      	movs	r3, #3
 800b4d6:	e0af      	b.n	800b638 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b4d8:	683b      	ldr	r3, [r7, #0]
 800b4da:	781b      	ldrb	r3, [r3, #0]
 800b4dc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b4e0:	2b00      	cmp	r3, #0
 800b4e2:	d03f      	beq.n	800b564 <USBD_CDC_Setup+0xb4>
 800b4e4:	2b20      	cmp	r3, #32
 800b4e6:	f040 809f 	bne.w	800b628 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800b4ea:	683b      	ldr	r3, [r7, #0]
 800b4ec:	88db      	ldrh	r3, [r3, #6]
 800b4ee:	2b00      	cmp	r3, #0
 800b4f0:	d02e      	beq.n	800b550 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800b4f2:	683b      	ldr	r3, [r7, #0]
 800b4f4:	781b      	ldrb	r3, [r3, #0]
 800b4f6:	b25b      	sxtb	r3, r3
 800b4f8:	2b00      	cmp	r3, #0
 800b4fa:	da16      	bge.n	800b52a <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b502:	689b      	ldr	r3, [r3, #8]
 800b504:	683a      	ldr	r2, [r7, #0]
 800b506:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800b508:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b50a:	683a      	ldr	r2, [r7, #0]
 800b50c:	88d2      	ldrh	r2, [r2, #6]
 800b50e:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800b510:	683b      	ldr	r3, [r7, #0]
 800b512:	88db      	ldrh	r3, [r3, #6]
 800b514:	2b07      	cmp	r3, #7
 800b516:	bf28      	it	cs
 800b518:	2307      	movcs	r3, #7
 800b51a:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800b51c:	693b      	ldr	r3, [r7, #16]
 800b51e:	89fa      	ldrh	r2, [r7, #14]
 800b520:	4619      	mov	r1, r3
 800b522:	6878      	ldr	r0, [r7, #4]
 800b524:	f001 fa9f 	bl	800ca66 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800b528:	e085      	b.n	800b636 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800b52a:	683b      	ldr	r3, [r7, #0]
 800b52c:	785a      	ldrb	r2, [r3, #1]
 800b52e:	693b      	ldr	r3, [r7, #16]
 800b530:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800b534:	683b      	ldr	r3, [r7, #0]
 800b536:	88db      	ldrh	r3, [r3, #6]
 800b538:	b2da      	uxtb	r2, r3
 800b53a:	693b      	ldr	r3, [r7, #16]
 800b53c:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800b540:	6939      	ldr	r1, [r7, #16]
 800b542:	683b      	ldr	r3, [r7, #0]
 800b544:	88db      	ldrh	r3, [r3, #6]
 800b546:	461a      	mov	r2, r3
 800b548:	6878      	ldr	r0, [r7, #4]
 800b54a:	f001 fab8 	bl	800cabe <USBD_CtlPrepareRx>
      break;
 800b54e:	e072      	b.n	800b636 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b556:	689b      	ldr	r3, [r3, #8]
 800b558:	683a      	ldr	r2, [r7, #0]
 800b55a:	7850      	ldrb	r0, [r2, #1]
 800b55c:	2200      	movs	r2, #0
 800b55e:	6839      	ldr	r1, [r7, #0]
 800b560:	4798      	blx	r3
      break;
 800b562:	e068      	b.n	800b636 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b564:	683b      	ldr	r3, [r7, #0]
 800b566:	785b      	ldrb	r3, [r3, #1]
 800b568:	2b0b      	cmp	r3, #11
 800b56a:	d852      	bhi.n	800b612 <USBD_CDC_Setup+0x162>
 800b56c:	a201      	add	r2, pc, #4	; (adr r2, 800b574 <USBD_CDC_Setup+0xc4>)
 800b56e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b572:	bf00      	nop
 800b574:	0800b5a5 	.word	0x0800b5a5
 800b578:	0800b621 	.word	0x0800b621
 800b57c:	0800b613 	.word	0x0800b613
 800b580:	0800b613 	.word	0x0800b613
 800b584:	0800b613 	.word	0x0800b613
 800b588:	0800b613 	.word	0x0800b613
 800b58c:	0800b613 	.word	0x0800b613
 800b590:	0800b613 	.word	0x0800b613
 800b594:	0800b613 	.word	0x0800b613
 800b598:	0800b613 	.word	0x0800b613
 800b59c:	0800b5cf 	.word	0x0800b5cf
 800b5a0:	0800b5f9 	.word	0x0800b5f9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b5aa:	b2db      	uxtb	r3, r3
 800b5ac:	2b03      	cmp	r3, #3
 800b5ae:	d107      	bne.n	800b5c0 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800b5b0:	f107 030a 	add.w	r3, r7, #10
 800b5b4:	2202      	movs	r2, #2
 800b5b6:	4619      	mov	r1, r3
 800b5b8:	6878      	ldr	r0, [r7, #4]
 800b5ba:	f001 fa54 	bl	800ca66 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b5be:	e032      	b.n	800b626 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800b5c0:	6839      	ldr	r1, [r7, #0]
 800b5c2:	6878      	ldr	r0, [r7, #4]
 800b5c4:	f001 f9de 	bl	800c984 <USBD_CtlError>
            ret = USBD_FAIL;
 800b5c8:	2303      	movs	r3, #3
 800b5ca:	75fb      	strb	r3, [r7, #23]
          break;
 800b5cc:	e02b      	b.n	800b626 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b5d4:	b2db      	uxtb	r3, r3
 800b5d6:	2b03      	cmp	r3, #3
 800b5d8:	d107      	bne.n	800b5ea <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800b5da:	f107 030d 	add.w	r3, r7, #13
 800b5de:	2201      	movs	r2, #1
 800b5e0:	4619      	mov	r1, r3
 800b5e2:	6878      	ldr	r0, [r7, #4]
 800b5e4:	f001 fa3f 	bl	800ca66 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b5e8:	e01d      	b.n	800b626 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800b5ea:	6839      	ldr	r1, [r7, #0]
 800b5ec:	6878      	ldr	r0, [r7, #4]
 800b5ee:	f001 f9c9 	bl	800c984 <USBD_CtlError>
            ret = USBD_FAIL;
 800b5f2:	2303      	movs	r3, #3
 800b5f4:	75fb      	strb	r3, [r7, #23]
          break;
 800b5f6:	e016      	b.n	800b626 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b5fe:	b2db      	uxtb	r3, r3
 800b600:	2b03      	cmp	r3, #3
 800b602:	d00f      	beq.n	800b624 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800b604:	6839      	ldr	r1, [r7, #0]
 800b606:	6878      	ldr	r0, [r7, #4]
 800b608:	f001 f9bc 	bl	800c984 <USBD_CtlError>
            ret = USBD_FAIL;
 800b60c:	2303      	movs	r3, #3
 800b60e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800b610:	e008      	b.n	800b624 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800b612:	6839      	ldr	r1, [r7, #0]
 800b614:	6878      	ldr	r0, [r7, #4]
 800b616:	f001 f9b5 	bl	800c984 <USBD_CtlError>
          ret = USBD_FAIL;
 800b61a:	2303      	movs	r3, #3
 800b61c:	75fb      	strb	r3, [r7, #23]
          break;
 800b61e:	e002      	b.n	800b626 <USBD_CDC_Setup+0x176>
          break;
 800b620:	bf00      	nop
 800b622:	e008      	b.n	800b636 <USBD_CDC_Setup+0x186>
          break;
 800b624:	bf00      	nop
      }
      break;
 800b626:	e006      	b.n	800b636 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800b628:	6839      	ldr	r1, [r7, #0]
 800b62a:	6878      	ldr	r0, [r7, #4]
 800b62c:	f001 f9aa 	bl	800c984 <USBD_CtlError>
      ret = USBD_FAIL;
 800b630:	2303      	movs	r3, #3
 800b632:	75fb      	strb	r3, [r7, #23]
      break;
 800b634:	bf00      	nop
  }

  return (uint8_t)ret;
 800b636:	7dfb      	ldrb	r3, [r7, #23]
}
 800b638:	4618      	mov	r0, r3
 800b63a:	3718      	adds	r7, #24
 800b63c:	46bd      	mov	sp, r7
 800b63e:	bd80      	pop	{r7, pc}

0800b640 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b640:	b580      	push	{r7, lr}
 800b642:	b084      	sub	sp, #16
 800b644:	af00      	add	r7, sp, #0
 800b646:	6078      	str	r0, [r7, #4]
 800b648:	460b      	mov	r3, r1
 800b64a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b652:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b65a:	2b00      	cmp	r3, #0
 800b65c:	d101      	bne.n	800b662 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800b65e:	2303      	movs	r3, #3
 800b660:	e04f      	b.n	800b702 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b668:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800b66a:	78fa      	ldrb	r2, [r7, #3]
 800b66c:	6879      	ldr	r1, [r7, #4]
 800b66e:	4613      	mov	r3, r2
 800b670:	009b      	lsls	r3, r3, #2
 800b672:	4413      	add	r3, r2
 800b674:	009b      	lsls	r3, r3, #2
 800b676:	440b      	add	r3, r1
 800b678:	3318      	adds	r3, #24
 800b67a:	681b      	ldr	r3, [r3, #0]
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	d029      	beq.n	800b6d4 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800b680:	78fa      	ldrb	r2, [r7, #3]
 800b682:	6879      	ldr	r1, [r7, #4]
 800b684:	4613      	mov	r3, r2
 800b686:	009b      	lsls	r3, r3, #2
 800b688:	4413      	add	r3, r2
 800b68a:	009b      	lsls	r3, r3, #2
 800b68c:	440b      	add	r3, r1
 800b68e:	3318      	adds	r3, #24
 800b690:	681a      	ldr	r2, [r3, #0]
 800b692:	78f9      	ldrb	r1, [r7, #3]
 800b694:	68f8      	ldr	r0, [r7, #12]
 800b696:	460b      	mov	r3, r1
 800b698:	009b      	lsls	r3, r3, #2
 800b69a:	440b      	add	r3, r1
 800b69c:	00db      	lsls	r3, r3, #3
 800b69e:	4403      	add	r3, r0
 800b6a0:	3338      	adds	r3, #56	; 0x38
 800b6a2:	681b      	ldr	r3, [r3, #0]
 800b6a4:	fbb2 f1f3 	udiv	r1, r2, r3
 800b6a8:	fb01 f303 	mul.w	r3, r1, r3
 800b6ac:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800b6ae:	2b00      	cmp	r3, #0
 800b6b0:	d110      	bne.n	800b6d4 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800b6b2:	78fa      	ldrb	r2, [r7, #3]
 800b6b4:	6879      	ldr	r1, [r7, #4]
 800b6b6:	4613      	mov	r3, r2
 800b6b8:	009b      	lsls	r3, r3, #2
 800b6ba:	4413      	add	r3, r2
 800b6bc:	009b      	lsls	r3, r3, #2
 800b6be:	440b      	add	r3, r1
 800b6c0:	3318      	adds	r3, #24
 800b6c2:	2200      	movs	r2, #0
 800b6c4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800b6c6:	78f9      	ldrb	r1, [r7, #3]
 800b6c8:	2300      	movs	r3, #0
 800b6ca:	2200      	movs	r2, #0
 800b6cc:	6878      	ldr	r0, [r7, #4]
 800b6ce:	f001 fe5b 	bl	800d388 <USBD_LL_Transmit>
 800b6d2:	e015      	b.n	800b700 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800b6d4:	68bb      	ldr	r3, [r7, #8]
 800b6d6:	2200      	movs	r2, #0
 800b6d8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b6e2:	691b      	ldr	r3, [r3, #16]
 800b6e4:	2b00      	cmp	r3, #0
 800b6e6:	d00b      	beq.n	800b700 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b6ee:	691b      	ldr	r3, [r3, #16]
 800b6f0:	68ba      	ldr	r2, [r7, #8]
 800b6f2:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800b6f6:	68ba      	ldr	r2, [r7, #8]
 800b6f8:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800b6fc:	78fa      	ldrb	r2, [r7, #3]
 800b6fe:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800b700:	2300      	movs	r3, #0
}
 800b702:	4618      	mov	r0, r3
 800b704:	3710      	adds	r7, #16
 800b706:	46bd      	mov	sp, r7
 800b708:	bd80      	pop	{r7, pc}

0800b70a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b70a:	b580      	push	{r7, lr}
 800b70c:	b084      	sub	sp, #16
 800b70e:	af00      	add	r7, sp, #0
 800b710:	6078      	str	r0, [r7, #4]
 800b712:	460b      	mov	r3, r1
 800b714:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b71c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b724:	2b00      	cmp	r3, #0
 800b726:	d101      	bne.n	800b72c <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800b728:	2303      	movs	r3, #3
 800b72a:	e015      	b.n	800b758 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800b72c:	78fb      	ldrb	r3, [r7, #3]
 800b72e:	4619      	mov	r1, r3
 800b730:	6878      	ldr	r0, [r7, #4]
 800b732:	f001 fe6b 	bl	800d40c <USBD_LL_GetRxDataSize>
 800b736:	4602      	mov	r2, r0
 800b738:	68fb      	ldr	r3, [r7, #12]
 800b73a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b744:	68db      	ldr	r3, [r3, #12]
 800b746:	68fa      	ldr	r2, [r7, #12]
 800b748:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800b74c:	68fa      	ldr	r2, [r7, #12]
 800b74e:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800b752:	4611      	mov	r1, r2
 800b754:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800b756:	2300      	movs	r3, #0
}
 800b758:	4618      	mov	r0, r3
 800b75a:	3710      	adds	r7, #16
 800b75c:	46bd      	mov	sp, r7
 800b75e:	bd80      	pop	{r7, pc}

0800b760 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800b760:	b580      	push	{r7, lr}
 800b762:	b084      	sub	sp, #16
 800b764:	af00      	add	r7, sp, #0
 800b766:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b76e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b770:	68fb      	ldr	r3, [r7, #12]
 800b772:	2b00      	cmp	r3, #0
 800b774:	d101      	bne.n	800b77a <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800b776:	2303      	movs	r3, #3
 800b778:	e01b      	b.n	800b7b2 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b780:	2b00      	cmp	r3, #0
 800b782:	d015      	beq.n	800b7b0 <USBD_CDC_EP0_RxReady+0x50>
 800b784:	68fb      	ldr	r3, [r7, #12]
 800b786:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800b78a:	2bff      	cmp	r3, #255	; 0xff
 800b78c:	d010      	beq.n	800b7b0 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b794:	689b      	ldr	r3, [r3, #8]
 800b796:	68fa      	ldr	r2, [r7, #12]
 800b798:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800b79c:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800b79e:	68fa      	ldr	r2, [r7, #12]
 800b7a0:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800b7a4:	b292      	uxth	r2, r2
 800b7a6:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800b7a8:	68fb      	ldr	r3, [r7, #12]
 800b7aa:	22ff      	movs	r2, #255	; 0xff
 800b7ac:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800b7b0:	2300      	movs	r3, #0
}
 800b7b2:	4618      	mov	r0, r3
 800b7b4:	3710      	adds	r7, #16
 800b7b6:	46bd      	mov	sp, r7
 800b7b8:	bd80      	pop	{r7, pc}
	...

0800b7bc <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800b7bc:	b480      	push	{r7}
 800b7be:	b083      	sub	sp, #12
 800b7c0:	af00      	add	r7, sp, #0
 800b7c2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	2243      	movs	r2, #67	; 0x43
 800b7c8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800b7ca:	4b03      	ldr	r3, [pc, #12]	; (800b7d8 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800b7cc:	4618      	mov	r0, r3
 800b7ce:	370c      	adds	r7, #12
 800b7d0:	46bd      	mov	sp, r7
 800b7d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7d6:	4770      	bx	lr
 800b7d8:	20000094 	.word	0x20000094

0800b7dc <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800b7dc:	b480      	push	{r7}
 800b7de:	b083      	sub	sp, #12
 800b7e0:	af00      	add	r7, sp, #0
 800b7e2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	2243      	movs	r2, #67	; 0x43
 800b7e8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800b7ea:	4b03      	ldr	r3, [pc, #12]	; (800b7f8 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800b7ec:	4618      	mov	r0, r3
 800b7ee:	370c      	adds	r7, #12
 800b7f0:	46bd      	mov	sp, r7
 800b7f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7f6:	4770      	bx	lr
 800b7f8:	20000050 	.word	0x20000050

0800b7fc <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800b7fc:	b480      	push	{r7}
 800b7fe:	b083      	sub	sp, #12
 800b800:	af00      	add	r7, sp, #0
 800b802:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	2243      	movs	r2, #67	; 0x43
 800b808:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800b80a:	4b03      	ldr	r3, [pc, #12]	; (800b818 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800b80c:	4618      	mov	r0, r3
 800b80e:	370c      	adds	r7, #12
 800b810:	46bd      	mov	sp, r7
 800b812:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b816:	4770      	bx	lr
 800b818:	200000d8 	.word	0x200000d8

0800b81c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800b81c:	b480      	push	{r7}
 800b81e:	b083      	sub	sp, #12
 800b820:	af00      	add	r7, sp, #0
 800b822:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	220a      	movs	r2, #10
 800b828:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800b82a:	4b03      	ldr	r3, [pc, #12]	; (800b838 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800b82c:	4618      	mov	r0, r3
 800b82e:	370c      	adds	r7, #12
 800b830:	46bd      	mov	sp, r7
 800b832:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b836:	4770      	bx	lr
 800b838:	2000000c 	.word	0x2000000c

0800b83c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800b83c:	b480      	push	{r7}
 800b83e:	b083      	sub	sp, #12
 800b840:	af00      	add	r7, sp, #0
 800b842:	6078      	str	r0, [r7, #4]
 800b844:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800b846:	683b      	ldr	r3, [r7, #0]
 800b848:	2b00      	cmp	r3, #0
 800b84a:	d101      	bne.n	800b850 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800b84c:	2303      	movs	r3, #3
 800b84e:	e004      	b.n	800b85a <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	683a      	ldr	r2, [r7, #0]
 800b854:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800b858:	2300      	movs	r3, #0
}
 800b85a:	4618      	mov	r0, r3
 800b85c:	370c      	adds	r7, #12
 800b85e:	46bd      	mov	sp, r7
 800b860:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b864:	4770      	bx	lr

0800b866 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800b866:	b480      	push	{r7}
 800b868:	b087      	sub	sp, #28
 800b86a:	af00      	add	r7, sp, #0
 800b86c:	60f8      	str	r0, [r7, #12]
 800b86e:	60b9      	str	r1, [r7, #8]
 800b870:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b872:	68fb      	ldr	r3, [r7, #12]
 800b874:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b878:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800b87a:	697b      	ldr	r3, [r7, #20]
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	d101      	bne.n	800b884 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800b880:	2303      	movs	r3, #3
 800b882:	e008      	b.n	800b896 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800b884:	697b      	ldr	r3, [r7, #20]
 800b886:	68ba      	ldr	r2, [r7, #8]
 800b888:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800b88c:	697b      	ldr	r3, [r7, #20]
 800b88e:	687a      	ldr	r2, [r7, #4]
 800b890:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800b894:	2300      	movs	r3, #0
}
 800b896:	4618      	mov	r0, r3
 800b898:	371c      	adds	r7, #28
 800b89a:	46bd      	mov	sp, r7
 800b89c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8a0:	4770      	bx	lr

0800b8a2 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800b8a2:	b480      	push	{r7}
 800b8a4:	b085      	sub	sp, #20
 800b8a6:	af00      	add	r7, sp, #0
 800b8a8:	6078      	str	r0, [r7, #4]
 800b8aa:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b8b2:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b8b4:	68fb      	ldr	r3, [r7, #12]
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	d101      	bne.n	800b8be <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800b8ba:	2303      	movs	r3, #3
 800b8bc:	e004      	b.n	800b8c8 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800b8be:	68fb      	ldr	r3, [r7, #12]
 800b8c0:	683a      	ldr	r2, [r7, #0]
 800b8c2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800b8c6:	2300      	movs	r3, #0
}
 800b8c8:	4618      	mov	r0, r3
 800b8ca:	3714      	adds	r7, #20
 800b8cc:	46bd      	mov	sp, r7
 800b8ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8d2:	4770      	bx	lr

0800b8d4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800b8d4:	b580      	push	{r7, lr}
 800b8d6:	b084      	sub	sp, #16
 800b8d8:	af00      	add	r7, sp, #0
 800b8da:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b8e2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b8ea:	2b00      	cmp	r3, #0
 800b8ec:	d101      	bne.n	800b8f2 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800b8ee:	2303      	movs	r3, #3
 800b8f0:	e016      	b.n	800b920 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	7c1b      	ldrb	r3, [r3, #16]
 800b8f6:	2b00      	cmp	r3, #0
 800b8f8:	d109      	bne.n	800b90e <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b8fa:	68fb      	ldr	r3, [r7, #12]
 800b8fc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b900:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b904:	2101      	movs	r1, #1
 800b906:	6878      	ldr	r0, [r7, #4]
 800b908:	f001 fd5f 	bl	800d3ca <USBD_LL_PrepareReceive>
 800b90c:	e007      	b.n	800b91e <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b90e:	68fb      	ldr	r3, [r7, #12]
 800b910:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b914:	2340      	movs	r3, #64	; 0x40
 800b916:	2101      	movs	r1, #1
 800b918:	6878      	ldr	r0, [r7, #4]
 800b91a:	f001 fd56 	bl	800d3ca <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b91e:	2300      	movs	r3, #0
}
 800b920:	4618      	mov	r0, r3
 800b922:	3710      	adds	r7, #16
 800b924:	46bd      	mov	sp, r7
 800b926:	bd80      	pop	{r7, pc}

0800b928 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800b928:	b580      	push	{r7, lr}
 800b92a:	b086      	sub	sp, #24
 800b92c:	af00      	add	r7, sp, #0
 800b92e:	60f8      	str	r0, [r7, #12]
 800b930:	60b9      	str	r1, [r7, #8]
 800b932:	4613      	mov	r3, r2
 800b934:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800b936:	68fb      	ldr	r3, [r7, #12]
 800b938:	2b00      	cmp	r3, #0
 800b93a:	d101      	bne.n	800b940 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800b93c:	2303      	movs	r3, #3
 800b93e:	e01f      	b.n	800b980 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800b940:	68fb      	ldr	r3, [r7, #12]
 800b942:	2200      	movs	r2, #0
 800b944:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800b948:	68fb      	ldr	r3, [r7, #12]
 800b94a:	2200      	movs	r2, #0
 800b94c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800b950:	68fb      	ldr	r3, [r7, #12]
 800b952:	2200      	movs	r2, #0
 800b954:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800b958:	68bb      	ldr	r3, [r7, #8]
 800b95a:	2b00      	cmp	r3, #0
 800b95c:	d003      	beq.n	800b966 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800b95e:	68fb      	ldr	r3, [r7, #12]
 800b960:	68ba      	ldr	r2, [r7, #8]
 800b962:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b966:	68fb      	ldr	r3, [r7, #12]
 800b968:	2201      	movs	r2, #1
 800b96a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800b96e:	68fb      	ldr	r3, [r7, #12]
 800b970:	79fa      	ldrb	r2, [r7, #7]
 800b972:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800b974:	68f8      	ldr	r0, [r7, #12]
 800b976:	f001 fbbd 	bl	800d0f4 <USBD_LL_Init>
 800b97a:	4603      	mov	r3, r0
 800b97c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800b97e:	7dfb      	ldrb	r3, [r7, #23]
}
 800b980:	4618      	mov	r0, r3
 800b982:	3718      	adds	r7, #24
 800b984:	46bd      	mov	sp, r7
 800b986:	bd80      	pop	{r7, pc}

0800b988 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800b988:	b580      	push	{r7, lr}
 800b98a:	b084      	sub	sp, #16
 800b98c:	af00      	add	r7, sp, #0
 800b98e:	6078      	str	r0, [r7, #4]
 800b990:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b992:	2300      	movs	r3, #0
 800b994:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800b996:	683b      	ldr	r3, [r7, #0]
 800b998:	2b00      	cmp	r3, #0
 800b99a:	d101      	bne.n	800b9a0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800b99c:	2303      	movs	r3, #3
 800b99e:	e016      	b.n	800b9ce <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	683a      	ldr	r2, [r7, #0]
 800b9a4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b9ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9b0:	2b00      	cmp	r3, #0
 800b9b2:	d00b      	beq.n	800b9cc <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b9ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9bc:	f107 020e 	add.w	r2, r7, #14
 800b9c0:	4610      	mov	r0, r2
 800b9c2:	4798      	blx	r3
 800b9c4:	4602      	mov	r2, r0
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800b9cc:	2300      	movs	r3, #0
}
 800b9ce:	4618      	mov	r0, r3
 800b9d0:	3710      	adds	r7, #16
 800b9d2:	46bd      	mov	sp, r7
 800b9d4:	bd80      	pop	{r7, pc}

0800b9d6 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800b9d6:	b580      	push	{r7, lr}
 800b9d8:	b082      	sub	sp, #8
 800b9da:	af00      	add	r7, sp, #0
 800b9dc:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800b9de:	6878      	ldr	r0, [r7, #4]
 800b9e0:	f001 fbe8 	bl	800d1b4 <USBD_LL_Start>
 800b9e4:	4603      	mov	r3, r0
}
 800b9e6:	4618      	mov	r0, r3
 800b9e8:	3708      	adds	r7, #8
 800b9ea:	46bd      	mov	sp, r7
 800b9ec:	bd80      	pop	{r7, pc}

0800b9ee <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800b9ee:	b480      	push	{r7}
 800b9f0:	b083      	sub	sp, #12
 800b9f2:	af00      	add	r7, sp, #0
 800b9f4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b9f6:	2300      	movs	r3, #0
}
 800b9f8:	4618      	mov	r0, r3
 800b9fa:	370c      	adds	r7, #12
 800b9fc:	46bd      	mov	sp, r7
 800b9fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba02:	4770      	bx	lr

0800ba04 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ba04:	b580      	push	{r7, lr}
 800ba06:	b084      	sub	sp, #16
 800ba08:	af00      	add	r7, sp, #0
 800ba0a:	6078      	str	r0, [r7, #4]
 800ba0c:	460b      	mov	r3, r1
 800ba0e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800ba10:	2303      	movs	r3, #3
 800ba12:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ba1a:	2b00      	cmp	r3, #0
 800ba1c:	d009      	beq.n	800ba32 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ba24:	681b      	ldr	r3, [r3, #0]
 800ba26:	78fa      	ldrb	r2, [r7, #3]
 800ba28:	4611      	mov	r1, r2
 800ba2a:	6878      	ldr	r0, [r7, #4]
 800ba2c:	4798      	blx	r3
 800ba2e:	4603      	mov	r3, r0
 800ba30:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800ba32:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba34:	4618      	mov	r0, r3
 800ba36:	3710      	adds	r7, #16
 800ba38:	46bd      	mov	sp, r7
 800ba3a:	bd80      	pop	{r7, pc}

0800ba3c <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ba3c:	b580      	push	{r7, lr}
 800ba3e:	b082      	sub	sp, #8
 800ba40:	af00      	add	r7, sp, #0
 800ba42:	6078      	str	r0, [r7, #4]
 800ba44:	460b      	mov	r3, r1
 800ba46:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ba4e:	2b00      	cmp	r3, #0
 800ba50:	d007      	beq.n	800ba62 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ba58:	685b      	ldr	r3, [r3, #4]
 800ba5a:	78fa      	ldrb	r2, [r7, #3]
 800ba5c:	4611      	mov	r1, r2
 800ba5e:	6878      	ldr	r0, [r7, #4]
 800ba60:	4798      	blx	r3
  }

  return USBD_OK;
 800ba62:	2300      	movs	r3, #0
}
 800ba64:	4618      	mov	r0, r3
 800ba66:	3708      	adds	r7, #8
 800ba68:	46bd      	mov	sp, r7
 800ba6a:	bd80      	pop	{r7, pc}

0800ba6c <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800ba6c:	b580      	push	{r7, lr}
 800ba6e:	b084      	sub	sp, #16
 800ba70:	af00      	add	r7, sp, #0
 800ba72:	6078      	str	r0, [r7, #4]
 800ba74:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ba7c:	6839      	ldr	r1, [r7, #0]
 800ba7e:	4618      	mov	r0, r3
 800ba80:	f000 ff46 	bl	800c910 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	2201      	movs	r2, #1
 800ba88:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800ba92:	461a      	mov	r2, r3
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800baa0:	f003 031f 	and.w	r3, r3, #31
 800baa4:	2b02      	cmp	r3, #2
 800baa6:	d01a      	beq.n	800bade <USBD_LL_SetupStage+0x72>
 800baa8:	2b02      	cmp	r3, #2
 800baaa:	d822      	bhi.n	800baf2 <USBD_LL_SetupStage+0x86>
 800baac:	2b00      	cmp	r3, #0
 800baae:	d002      	beq.n	800bab6 <USBD_LL_SetupStage+0x4a>
 800bab0:	2b01      	cmp	r3, #1
 800bab2:	d00a      	beq.n	800baca <USBD_LL_SetupStage+0x5e>
 800bab4:	e01d      	b.n	800baf2 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800babc:	4619      	mov	r1, r3
 800babe:	6878      	ldr	r0, [r7, #4]
 800bac0:	f000 f9ee 	bl	800bea0 <USBD_StdDevReq>
 800bac4:	4603      	mov	r3, r0
 800bac6:	73fb      	strb	r3, [r7, #15]
      break;
 800bac8:	e020      	b.n	800bb0c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800bad0:	4619      	mov	r1, r3
 800bad2:	6878      	ldr	r0, [r7, #4]
 800bad4:	f000 fa52 	bl	800bf7c <USBD_StdItfReq>
 800bad8:	4603      	mov	r3, r0
 800bada:	73fb      	strb	r3, [r7, #15]
      break;
 800badc:	e016      	b.n	800bb0c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800bae4:	4619      	mov	r1, r3
 800bae6:	6878      	ldr	r0, [r7, #4]
 800bae8:	f000 fa91 	bl	800c00e <USBD_StdEPReq>
 800baec:	4603      	mov	r3, r0
 800baee:	73fb      	strb	r3, [r7, #15]
      break;
 800baf0:	e00c      	b.n	800bb0c <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800baf8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800bafc:	b2db      	uxtb	r3, r3
 800bafe:	4619      	mov	r1, r3
 800bb00:	6878      	ldr	r0, [r7, #4]
 800bb02:	f001 fbb7 	bl	800d274 <USBD_LL_StallEP>
 800bb06:	4603      	mov	r3, r0
 800bb08:	73fb      	strb	r3, [r7, #15]
      break;
 800bb0a:	bf00      	nop
  }

  return ret;
 800bb0c:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb0e:	4618      	mov	r0, r3
 800bb10:	3710      	adds	r7, #16
 800bb12:	46bd      	mov	sp, r7
 800bb14:	bd80      	pop	{r7, pc}

0800bb16 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800bb16:	b580      	push	{r7, lr}
 800bb18:	b086      	sub	sp, #24
 800bb1a:	af00      	add	r7, sp, #0
 800bb1c:	60f8      	str	r0, [r7, #12]
 800bb1e:	460b      	mov	r3, r1
 800bb20:	607a      	str	r2, [r7, #4]
 800bb22:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800bb24:	7afb      	ldrb	r3, [r7, #11]
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	d138      	bne.n	800bb9c <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800bb2a:	68fb      	ldr	r3, [r7, #12]
 800bb2c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800bb30:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800bb32:	68fb      	ldr	r3, [r7, #12]
 800bb34:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800bb38:	2b03      	cmp	r3, #3
 800bb3a:	d14a      	bne.n	800bbd2 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800bb3c:	693b      	ldr	r3, [r7, #16]
 800bb3e:	689a      	ldr	r2, [r3, #8]
 800bb40:	693b      	ldr	r3, [r7, #16]
 800bb42:	68db      	ldr	r3, [r3, #12]
 800bb44:	429a      	cmp	r2, r3
 800bb46:	d913      	bls.n	800bb70 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800bb48:	693b      	ldr	r3, [r7, #16]
 800bb4a:	689a      	ldr	r2, [r3, #8]
 800bb4c:	693b      	ldr	r3, [r7, #16]
 800bb4e:	68db      	ldr	r3, [r3, #12]
 800bb50:	1ad2      	subs	r2, r2, r3
 800bb52:	693b      	ldr	r3, [r7, #16]
 800bb54:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800bb56:	693b      	ldr	r3, [r7, #16]
 800bb58:	68da      	ldr	r2, [r3, #12]
 800bb5a:	693b      	ldr	r3, [r7, #16]
 800bb5c:	689b      	ldr	r3, [r3, #8]
 800bb5e:	4293      	cmp	r3, r2
 800bb60:	bf28      	it	cs
 800bb62:	4613      	movcs	r3, r2
 800bb64:	461a      	mov	r2, r3
 800bb66:	6879      	ldr	r1, [r7, #4]
 800bb68:	68f8      	ldr	r0, [r7, #12]
 800bb6a:	f000 ffc5 	bl	800caf8 <USBD_CtlContinueRx>
 800bb6e:	e030      	b.n	800bbd2 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bb70:	68fb      	ldr	r3, [r7, #12]
 800bb72:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bb76:	b2db      	uxtb	r3, r3
 800bb78:	2b03      	cmp	r3, #3
 800bb7a:	d10b      	bne.n	800bb94 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800bb7c:	68fb      	ldr	r3, [r7, #12]
 800bb7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bb82:	691b      	ldr	r3, [r3, #16]
 800bb84:	2b00      	cmp	r3, #0
 800bb86:	d005      	beq.n	800bb94 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800bb88:	68fb      	ldr	r3, [r7, #12]
 800bb8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bb8e:	691b      	ldr	r3, [r3, #16]
 800bb90:	68f8      	ldr	r0, [r7, #12]
 800bb92:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800bb94:	68f8      	ldr	r0, [r7, #12]
 800bb96:	f000 ffc0 	bl	800cb1a <USBD_CtlSendStatus>
 800bb9a:	e01a      	b.n	800bbd2 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bb9c:	68fb      	ldr	r3, [r7, #12]
 800bb9e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bba2:	b2db      	uxtb	r3, r3
 800bba4:	2b03      	cmp	r3, #3
 800bba6:	d114      	bne.n	800bbd2 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800bba8:	68fb      	ldr	r3, [r7, #12]
 800bbaa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bbae:	699b      	ldr	r3, [r3, #24]
 800bbb0:	2b00      	cmp	r3, #0
 800bbb2:	d00e      	beq.n	800bbd2 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800bbb4:	68fb      	ldr	r3, [r7, #12]
 800bbb6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bbba:	699b      	ldr	r3, [r3, #24]
 800bbbc:	7afa      	ldrb	r2, [r7, #11]
 800bbbe:	4611      	mov	r1, r2
 800bbc0:	68f8      	ldr	r0, [r7, #12]
 800bbc2:	4798      	blx	r3
 800bbc4:	4603      	mov	r3, r0
 800bbc6:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800bbc8:	7dfb      	ldrb	r3, [r7, #23]
 800bbca:	2b00      	cmp	r3, #0
 800bbcc:	d001      	beq.n	800bbd2 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800bbce:	7dfb      	ldrb	r3, [r7, #23]
 800bbd0:	e000      	b.n	800bbd4 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800bbd2:	2300      	movs	r3, #0
}
 800bbd4:	4618      	mov	r0, r3
 800bbd6:	3718      	adds	r7, #24
 800bbd8:	46bd      	mov	sp, r7
 800bbda:	bd80      	pop	{r7, pc}

0800bbdc <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800bbdc:	b580      	push	{r7, lr}
 800bbde:	b086      	sub	sp, #24
 800bbe0:	af00      	add	r7, sp, #0
 800bbe2:	60f8      	str	r0, [r7, #12]
 800bbe4:	460b      	mov	r3, r1
 800bbe6:	607a      	str	r2, [r7, #4]
 800bbe8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800bbea:	7afb      	ldrb	r3, [r7, #11]
 800bbec:	2b00      	cmp	r3, #0
 800bbee:	d16b      	bne.n	800bcc8 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800bbf0:	68fb      	ldr	r3, [r7, #12]
 800bbf2:	3314      	adds	r3, #20
 800bbf4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800bbf6:	68fb      	ldr	r3, [r7, #12]
 800bbf8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800bbfc:	2b02      	cmp	r3, #2
 800bbfe:	d156      	bne.n	800bcae <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800bc00:	693b      	ldr	r3, [r7, #16]
 800bc02:	689a      	ldr	r2, [r3, #8]
 800bc04:	693b      	ldr	r3, [r7, #16]
 800bc06:	68db      	ldr	r3, [r3, #12]
 800bc08:	429a      	cmp	r2, r3
 800bc0a:	d914      	bls.n	800bc36 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800bc0c:	693b      	ldr	r3, [r7, #16]
 800bc0e:	689a      	ldr	r2, [r3, #8]
 800bc10:	693b      	ldr	r3, [r7, #16]
 800bc12:	68db      	ldr	r3, [r3, #12]
 800bc14:	1ad2      	subs	r2, r2, r3
 800bc16:	693b      	ldr	r3, [r7, #16]
 800bc18:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800bc1a:	693b      	ldr	r3, [r7, #16]
 800bc1c:	689b      	ldr	r3, [r3, #8]
 800bc1e:	461a      	mov	r2, r3
 800bc20:	6879      	ldr	r1, [r7, #4]
 800bc22:	68f8      	ldr	r0, [r7, #12]
 800bc24:	f000 ff3a 	bl	800ca9c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bc28:	2300      	movs	r3, #0
 800bc2a:	2200      	movs	r2, #0
 800bc2c:	2100      	movs	r1, #0
 800bc2e:	68f8      	ldr	r0, [r7, #12]
 800bc30:	f001 fbcb 	bl	800d3ca <USBD_LL_PrepareReceive>
 800bc34:	e03b      	b.n	800bcae <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800bc36:	693b      	ldr	r3, [r7, #16]
 800bc38:	68da      	ldr	r2, [r3, #12]
 800bc3a:	693b      	ldr	r3, [r7, #16]
 800bc3c:	689b      	ldr	r3, [r3, #8]
 800bc3e:	429a      	cmp	r2, r3
 800bc40:	d11c      	bne.n	800bc7c <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800bc42:	693b      	ldr	r3, [r7, #16]
 800bc44:	685a      	ldr	r2, [r3, #4]
 800bc46:	693b      	ldr	r3, [r7, #16]
 800bc48:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800bc4a:	429a      	cmp	r2, r3
 800bc4c:	d316      	bcc.n	800bc7c <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800bc4e:	693b      	ldr	r3, [r7, #16]
 800bc50:	685a      	ldr	r2, [r3, #4]
 800bc52:	68fb      	ldr	r3, [r7, #12]
 800bc54:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800bc58:	429a      	cmp	r2, r3
 800bc5a:	d20f      	bcs.n	800bc7c <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800bc5c:	2200      	movs	r2, #0
 800bc5e:	2100      	movs	r1, #0
 800bc60:	68f8      	ldr	r0, [r7, #12]
 800bc62:	f000 ff1b 	bl	800ca9c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800bc66:	68fb      	ldr	r3, [r7, #12]
 800bc68:	2200      	movs	r2, #0
 800bc6a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bc6e:	2300      	movs	r3, #0
 800bc70:	2200      	movs	r2, #0
 800bc72:	2100      	movs	r1, #0
 800bc74:	68f8      	ldr	r0, [r7, #12]
 800bc76:	f001 fba8 	bl	800d3ca <USBD_LL_PrepareReceive>
 800bc7a:	e018      	b.n	800bcae <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bc7c:	68fb      	ldr	r3, [r7, #12]
 800bc7e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bc82:	b2db      	uxtb	r3, r3
 800bc84:	2b03      	cmp	r3, #3
 800bc86:	d10b      	bne.n	800bca0 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800bc88:	68fb      	ldr	r3, [r7, #12]
 800bc8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bc8e:	68db      	ldr	r3, [r3, #12]
 800bc90:	2b00      	cmp	r3, #0
 800bc92:	d005      	beq.n	800bca0 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800bc94:	68fb      	ldr	r3, [r7, #12]
 800bc96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bc9a:	68db      	ldr	r3, [r3, #12]
 800bc9c:	68f8      	ldr	r0, [r7, #12]
 800bc9e:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800bca0:	2180      	movs	r1, #128	; 0x80
 800bca2:	68f8      	ldr	r0, [r7, #12]
 800bca4:	f001 fae6 	bl	800d274 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800bca8:	68f8      	ldr	r0, [r7, #12]
 800bcaa:	f000 ff49 	bl	800cb40 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800bcae:	68fb      	ldr	r3, [r7, #12]
 800bcb0:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800bcb4:	2b01      	cmp	r3, #1
 800bcb6:	d122      	bne.n	800bcfe <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800bcb8:	68f8      	ldr	r0, [r7, #12]
 800bcba:	f7ff fe98 	bl	800b9ee <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800bcbe:	68fb      	ldr	r3, [r7, #12]
 800bcc0:	2200      	movs	r2, #0
 800bcc2:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800bcc6:	e01a      	b.n	800bcfe <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bcc8:	68fb      	ldr	r3, [r7, #12]
 800bcca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bcce:	b2db      	uxtb	r3, r3
 800bcd0:	2b03      	cmp	r3, #3
 800bcd2:	d114      	bne.n	800bcfe <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800bcd4:	68fb      	ldr	r3, [r7, #12]
 800bcd6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bcda:	695b      	ldr	r3, [r3, #20]
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	d00e      	beq.n	800bcfe <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800bce0:	68fb      	ldr	r3, [r7, #12]
 800bce2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bce6:	695b      	ldr	r3, [r3, #20]
 800bce8:	7afa      	ldrb	r2, [r7, #11]
 800bcea:	4611      	mov	r1, r2
 800bcec:	68f8      	ldr	r0, [r7, #12]
 800bcee:	4798      	blx	r3
 800bcf0:	4603      	mov	r3, r0
 800bcf2:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800bcf4:	7dfb      	ldrb	r3, [r7, #23]
 800bcf6:	2b00      	cmp	r3, #0
 800bcf8:	d001      	beq.n	800bcfe <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800bcfa:	7dfb      	ldrb	r3, [r7, #23]
 800bcfc:	e000      	b.n	800bd00 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800bcfe:	2300      	movs	r3, #0
}
 800bd00:	4618      	mov	r0, r3
 800bd02:	3718      	adds	r7, #24
 800bd04:	46bd      	mov	sp, r7
 800bd06:	bd80      	pop	{r7, pc}

0800bd08 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800bd08:	b580      	push	{r7, lr}
 800bd0a:	b082      	sub	sp, #8
 800bd0c:	af00      	add	r7, sp, #0
 800bd0e:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	2201      	movs	r2, #1
 800bd14:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	2200      	movs	r2, #0
 800bd1c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	2200      	movs	r2, #0
 800bd24:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	2200      	movs	r2, #0
 800bd2a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bd34:	2b00      	cmp	r3, #0
 800bd36:	d101      	bne.n	800bd3c <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800bd38:	2303      	movs	r3, #3
 800bd3a:	e02f      	b.n	800bd9c <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bd42:	2b00      	cmp	r3, #0
 800bd44:	d00f      	beq.n	800bd66 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bd4c:	685b      	ldr	r3, [r3, #4]
 800bd4e:	2b00      	cmp	r3, #0
 800bd50:	d009      	beq.n	800bd66 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bd58:	685b      	ldr	r3, [r3, #4]
 800bd5a:	687a      	ldr	r2, [r7, #4]
 800bd5c:	6852      	ldr	r2, [r2, #4]
 800bd5e:	b2d2      	uxtb	r2, r2
 800bd60:	4611      	mov	r1, r2
 800bd62:	6878      	ldr	r0, [r7, #4]
 800bd64:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800bd66:	2340      	movs	r3, #64	; 0x40
 800bd68:	2200      	movs	r2, #0
 800bd6a:	2100      	movs	r1, #0
 800bd6c:	6878      	ldr	r0, [r7, #4]
 800bd6e:	f001 fa3c 	bl	800d1ea <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	2201      	movs	r2, #1
 800bd76:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	2240      	movs	r2, #64	; 0x40
 800bd7e:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800bd82:	2340      	movs	r3, #64	; 0x40
 800bd84:	2200      	movs	r2, #0
 800bd86:	2180      	movs	r1, #128	; 0x80
 800bd88:	6878      	ldr	r0, [r7, #4]
 800bd8a:	f001 fa2e 	bl	800d1ea <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	2201      	movs	r2, #1
 800bd92:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	2240      	movs	r2, #64	; 0x40
 800bd98:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800bd9a:	2300      	movs	r3, #0
}
 800bd9c:	4618      	mov	r0, r3
 800bd9e:	3708      	adds	r7, #8
 800bda0:	46bd      	mov	sp, r7
 800bda2:	bd80      	pop	{r7, pc}

0800bda4 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800bda4:	b480      	push	{r7}
 800bda6:	b083      	sub	sp, #12
 800bda8:	af00      	add	r7, sp, #0
 800bdaa:	6078      	str	r0, [r7, #4]
 800bdac:	460b      	mov	r3, r1
 800bdae:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	78fa      	ldrb	r2, [r7, #3]
 800bdb4:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800bdb6:	2300      	movs	r3, #0
}
 800bdb8:	4618      	mov	r0, r3
 800bdba:	370c      	adds	r7, #12
 800bdbc:	46bd      	mov	sp, r7
 800bdbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdc2:	4770      	bx	lr

0800bdc4 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800bdc4:	b480      	push	{r7}
 800bdc6:	b083      	sub	sp, #12
 800bdc8:	af00      	add	r7, sp, #0
 800bdca:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bdd2:	b2da      	uxtb	r2, r3
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	2204      	movs	r2, #4
 800bdde:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800bde2:	2300      	movs	r3, #0
}
 800bde4:	4618      	mov	r0, r3
 800bde6:	370c      	adds	r7, #12
 800bde8:	46bd      	mov	sp, r7
 800bdea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdee:	4770      	bx	lr

0800bdf0 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800bdf0:	b480      	push	{r7}
 800bdf2:	b083      	sub	sp, #12
 800bdf4:	af00      	add	r7, sp, #0
 800bdf6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bdfe:	b2db      	uxtb	r3, r3
 800be00:	2b04      	cmp	r3, #4
 800be02:	d106      	bne.n	800be12 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800be0a:	b2da      	uxtb	r2, r3
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800be12:	2300      	movs	r3, #0
}
 800be14:	4618      	mov	r0, r3
 800be16:	370c      	adds	r7, #12
 800be18:	46bd      	mov	sp, r7
 800be1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be1e:	4770      	bx	lr

0800be20 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800be20:	b580      	push	{r7, lr}
 800be22:	b082      	sub	sp, #8
 800be24:	af00      	add	r7, sp, #0
 800be26:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800be2e:	2b00      	cmp	r3, #0
 800be30:	d101      	bne.n	800be36 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800be32:	2303      	movs	r3, #3
 800be34:	e012      	b.n	800be5c <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800be3c:	b2db      	uxtb	r3, r3
 800be3e:	2b03      	cmp	r3, #3
 800be40:	d10b      	bne.n	800be5a <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800be48:	69db      	ldr	r3, [r3, #28]
 800be4a:	2b00      	cmp	r3, #0
 800be4c:	d005      	beq.n	800be5a <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800be54:	69db      	ldr	r3, [r3, #28]
 800be56:	6878      	ldr	r0, [r7, #4]
 800be58:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800be5a:	2300      	movs	r3, #0
}
 800be5c:	4618      	mov	r0, r3
 800be5e:	3708      	adds	r7, #8
 800be60:	46bd      	mov	sp, r7
 800be62:	bd80      	pop	{r7, pc}

0800be64 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800be64:	b480      	push	{r7}
 800be66:	b087      	sub	sp, #28
 800be68:	af00      	add	r7, sp, #0
 800be6a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800be70:	697b      	ldr	r3, [r7, #20]
 800be72:	781b      	ldrb	r3, [r3, #0]
 800be74:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800be76:	697b      	ldr	r3, [r7, #20]
 800be78:	3301      	adds	r3, #1
 800be7a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800be7c:	697b      	ldr	r3, [r7, #20]
 800be7e:	781b      	ldrb	r3, [r3, #0]
 800be80:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800be82:	8a3b      	ldrh	r3, [r7, #16]
 800be84:	021b      	lsls	r3, r3, #8
 800be86:	b21a      	sxth	r2, r3
 800be88:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800be8c:	4313      	orrs	r3, r2
 800be8e:	b21b      	sxth	r3, r3
 800be90:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800be92:	89fb      	ldrh	r3, [r7, #14]
}
 800be94:	4618      	mov	r0, r3
 800be96:	371c      	adds	r7, #28
 800be98:	46bd      	mov	sp, r7
 800be9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be9e:	4770      	bx	lr

0800bea0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bea0:	b580      	push	{r7, lr}
 800bea2:	b084      	sub	sp, #16
 800bea4:	af00      	add	r7, sp, #0
 800bea6:	6078      	str	r0, [r7, #4]
 800bea8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800beaa:	2300      	movs	r3, #0
 800beac:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800beae:	683b      	ldr	r3, [r7, #0]
 800beb0:	781b      	ldrb	r3, [r3, #0]
 800beb2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800beb6:	2b40      	cmp	r3, #64	; 0x40
 800beb8:	d005      	beq.n	800bec6 <USBD_StdDevReq+0x26>
 800beba:	2b40      	cmp	r3, #64	; 0x40
 800bebc:	d853      	bhi.n	800bf66 <USBD_StdDevReq+0xc6>
 800bebe:	2b00      	cmp	r3, #0
 800bec0:	d00b      	beq.n	800beda <USBD_StdDevReq+0x3a>
 800bec2:	2b20      	cmp	r3, #32
 800bec4:	d14f      	bne.n	800bf66 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800becc:	689b      	ldr	r3, [r3, #8]
 800bece:	6839      	ldr	r1, [r7, #0]
 800bed0:	6878      	ldr	r0, [r7, #4]
 800bed2:	4798      	blx	r3
 800bed4:	4603      	mov	r3, r0
 800bed6:	73fb      	strb	r3, [r7, #15]
      break;
 800bed8:	e04a      	b.n	800bf70 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800beda:	683b      	ldr	r3, [r7, #0]
 800bedc:	785b      	ldrb	r3, [r3, #1]
 800bede:	2b09      	cmp	r3, #9
 800bee0:	d83b      	bhi.n	800bf5a <USBD_StdDevReq+0xba>
 800bee2:	a201      	add	r2, pc, #4	; (adr r2, 800bee8 <USBD_StdDevReq+0x48>)
 800bee4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bee8:	0800bf3d 	.word	0x0800bf3d
 800beec:	0800bf51 	.word	0x0800bf51
 800bef0:	0800bf5b 	.word	0x0800bf5b
 800bef4:	0800bf47 	.word	0x0800bf47
 800bef8:	0800bf5b 	.word	0x0800bf5b
 800befc:	0800bf1b 	.word	0x0800bf1b
 800bf00:	0800bf11 	.word	0x0800bf11
 800bf04:	0800bf5b 	.word	0x0800bf5b
 800bf08:	0800bf33 	.word	0x0800bf33
 800bf0c:	0800bf25 	.word	0x0800bf25
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800bf10:	6839      	ldr	r1, [r7, #0]
 800bf12:	6878      	ldr	r0, [r7, #4]
 800bf14:	f000 f9de 	bl	800c2d4 <USBD_GetDescriptor>
          break;
 800bf18:	e024      	b.n	800bf64 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800bf1a:	6839      	ldr	r1, [r7, #0]
 800bf1c:	6878      	ldr	r0, [r7, #4]
 800bf1e:	f000 fb6d 	bl	800c5fc <USBD_SetAddress>
          break;
 800bf22:	e01f      	b.n	800bf64 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800bf24:	6839      	ldr	r1, [r7, #0]
 800bf26:	6878      	ldr	r0, [r7, #4]
 800bf28:	f000 fbac 	bl	800c684 <USBD_SetConfig>
 800bf2c:	4603      	mov	r3, r0
 800bf2e:	73fb      	strb	r3, [r7, #15]
          break;
 800bf30:	e018      	b.n	800bf64 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800bf32:	6839      	ldr	r1, [r7, #0]
 800bf34:	6878      	ldr	r0, [r7, #4]
 800bf36:	f000 fc4b 	bl	800c7d0 <USBD_GetConfig>
          break;
 800bf3a:	e013      	b.n	800bf64 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800bf3c:	6839      	ldr	r1, [r7, #0]
 800bf3e:	6878      	ldr	r0, [r7, #4]
 800bf40:	f000 fc7c 	bl	800c83c <USBD_GetStatus>
          break;
 800bf44:	e00e      	b.n	800bf64 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800bf46:	6839      	ldr	r1, [r7, #0]
 800bf48:	6878      	ldr	r0, [r7, #4]
 800bf4a:	f000 fcab 	bl	800c8a4 <USBD_SetFeature>
          break;
 800bf4e:	e009      	b.n	800bf64 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800bf50:	6839      	ldr	r1, [r7, #0]
 800bf52:	6878      	ldr	r0, [r7, #4]
 800bf54:	f000 fcba 	bl	800c8cc <USBD_ClrFeature>
          break;
 800bf58:	e004      	b.n	800bf64 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800bf5a:	6839      	ldr	r1, [r7, #0]
 800bf5c:	6878      	ldr	r0, [r7, #4]
 800bf5e:	f000 fd11 	bl	800c984 <USBD_CtlError>
          break;
 800bf62:	bf00      	nop
      }
      break;
 800bf64:	e004      	b.n	800bf70 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800bf66:	6839      	ldr	r1, [r7, #0]
 800bf68:	6878      	ldr	r0, [r7, #4]
 800bf6a:	f000 fd0b 	bl	800c984 <USBD_CtlError>
      break;
 800bf6e:	bf00      	nop
  }

  return ret;
 800bf70:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf72:	4618      	mov	r0, r3
 800bf74:	3710      	adds	r7, #16
 800bf76:	46bd      	mov	sp, r7
 800bf78:	bd80      	pop	{r7, pc}
 800bf7a:	bf00      	nop

0800bf7c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bf7c:	b580      	push	{r7, lr}
 800bf7e:	b084      	sub	sp, #16
 800bf80:	af00      	add	r7, sp, #0
 800bf82:	6078      	str	r0, [r7, #4]
 800bf84:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bf86:	2300      	movs	r3, #0
 800bf88:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bf8a:	683b      	ldr	r3, [r7, #0]
 800bf8c:	781b      	ldrb	r3, [r3, #0]
 800bf8e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800bf92:	2b40      	cmp	r3, #64	; 0x40
 800bf94:	d005      	beq.n	800bfa2 <USBD_StdItfReq+0x26>
 800bf96:	2b40      	cmp	r3, #64	; 0x40
 800bf98:	d82f      	bhi.n	800bffa <USBD_StdItfReq+0x7e>
 800bf9a:	2b00      	cmp	r3, #0
 800bf9c:	d001      	beq.n	800bfa2 <USBD_StdItfReq+0x26>
 800bf9e:	2b20      	cmp	r3, #32
 800bfa0:	d12b      	bne.n	800bffa <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bfa8:	b2db      	uxtb	r3, r3
 800bfaa:	3b01      	subs	r3, #1
 800bfac:	2b02      	cmp	r3, #2
 800bfae:	d81d      	bhi.n	800bfec <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800bfb0:	683b      	ldr	r3, [r7, #0]
 800bfb2:	889b      	ldrh	r3, [r3, #4]
 800bfb4:	b2db      	uxtb	r3, r3
 800bfb6:	2b01      	cmp	r3, #1
 800bfb8:	d813      	bhi.n	800bfe2 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bfc0:	689b      	ldr	r3, [r3, #8]
 800bfc2:	6839      	ldr	r1, [r7, #0]
 800bfc4:	6878      	ldr	r0, [r7, #4]
 800bfc6:	4798      	blx	r3
 800bfc8:	4603      	mov	r3, r0
 800bfca:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800bfcc:	683b      	ldr	r3, [r7, #0]
 800bfce:	88db      	ldrh	r3, [r3, #6]
 800bfd0:	2b00      	cmp	r3, #0
 800bfd2:	d110      	bne.n	800bff6 <USBD_StdItfReq+0x7a>
 800bfd4:	7bfb      	ldrb	r3, [r7, #15]
 800bfd6:	2b00      	cmp	r3, #0
 800bfd8:	d10d      	bne.n	800bff6 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800bfda:	6878      	ldr	r0, [r7, #4]
 800bfdc:	f000 fd9d 	bl	800cb1a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800bfe0:	e009      	b.n	800bff6 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800bfe2:	6839      	ldr	r1, [r7, #0]
 800bfe4:	6878      	ldr	r0, [r7, #4]
 800bfe6:	f000 fccd 	bl	800c984 <USBD_CtlError>
          break;
 800bfea:	e004      	b.n	800bff6 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800bfec:	6839      	ldr	r1, [r7, #0]
 800bfee:	6878      	ldr	r0, [r7, #4]
 800bff0:	f000 fcc8 	bl	800c984 <USBD_CtlError>
          break;
 800bff4:	e000      	b.n	800bff8 <USBD_StdItfReq+0x7c>
          break;
 800bff6:	bf00      	nop
      }
      break;
 800bff8:	e004      	b.n	800c004 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800bffa:	6839      	ldr	r1, [r7, #0]
 800bffc:	6878      	ldr	r0, [r7, #4]
 800bffe:	f000 fcc1 	bl	800c984 <USBD_CtlError>
      break;
 800c002:	bf00      	nop
  }

  return ret;
 800c004:	7bfb      	ldrb	r3, [r7, #15]
}
 800c006:	4618      	mov	r0, r3
 800c008:	3710      	adds	r7, #16
 800c00a:	46bd      	mov	sp, r7
 800c00c:	bd80      	pop	{r7, pc}

0800c00e <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c00e:	b580      	push	{r7, lr}
 800c010:	b084      	sub	sp, #16
 800c012:	af00      	add	r7, sp, #0
 800c014:	6078      	str	r0, [r7, #4]
 800c016:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800c018:	2300      	movs	r3, #0
 800c01a:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800c01c:	683b      	ldr	r3, [r7, #0]
 800c01e:	889b      	ldrh	r3, [r3, #4]
 800c020:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c022:	683b      	ldr	r3, [r7, #0]
 800c024:	781b      	ldrb	r3, [r3, #0]
 800c026:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c02a:	2b40      	cmp	r3, #64	; 0x40
 800c02c:	d007      	beq.n	800c03e <USBD_StdEPReq+0x30>
 800c02e:	2b40      	cmp	r3, #64	; 0x40
 800c030:	f200 8145 	bhi.w	800c2be <USBD_StdEPReq+0x2b0>
 800c034:	2b00      	cmp	r3, #0
 800c036:	d00c      	beq.n	800c052 <USBD_StdEPReq+0x44>
 800c038:	2b20      	cmp	r3, #32
 800c03a:	f040 8140 	bne.w	800c2be <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c044:	689b      	ldr	r3, [r3, #8]
 800c046:	6839      	ldr	r1, [r7, #0]
 800c048:	6878      	ldr	r0, [r7, #4]
 800c04a:	4798      	blx	r3
 800c04c:	4603      	mov	r3, r0
 800c04e:	73fb      	strb	r3, [r7, #15]
      break;
 800c050:	e13a      	b.n	800c2c8 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c052:	683b      	ldr	r3, [r7, #0]
 800c054:	785b      	ldrb	r3, [r3, #1]
 800c056:	2b03      	cmp	r3, #3
 800c058:	d007      	beq.n	800c06a <USBD_StdEPReq+0x5c>
 800c05a:	2b03      	cmp	r3, #3
 800c05c:	f300 8129 	bgt.w	800c2b2 <USBD_StdEPReq+0x2a4>
 800c060:	2b00      	cmp	r3, #0
 800c062:	d07f      	beq.n	800c164 <USBD_StdEPReq+0x156>
 800c064:	2b01      	cmp	r3, #1
 800c066:	d03c      	beq.n	800c0e2 <USBD_StdEPReq+0xd4>
 800c068:	e123      	b.n	800c2b2 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c070:	b2db      	uxtb	r3, r3
 800c072:	2b02      	cmp	r3, #2
 800c074:	d002      	beq.n	800c07c <USBD_StdEPReq+0x6e>
 800c076:	2b03      	cmp	r3, #3
 800c078:	d016      	beq.n	800c0a8 <USBD_StdEPReq+0x9a>
 800c07a:	e02c      	b.n	800c0d6 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c07c:	7bbb      	ldrb	r3, [r7, #14]
 800c07e:	2b00      	cmp	r3, #0
 800c080:	d00d      	beq.n	800c09e <USBD_StdEPReq+0x90>
 800c082:	7bbb      	ldrb	r3, [r7, #14]
 800c084:	2b80      	cmp	r3, #128	; 0x80
 800c086:	d00a      	beq.n	800c09e <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c088:	7bbb      	ldrb	r3, [r7, #14]
 800c08a:	4619      	mov	r1, r3
 800c08c:	6878      	ldr	r0, [r7, #4]
 800c08e:	f001 f8f1 	bl	800d274 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c092:	2180      	movs	r1, #128	; 0x80
 800c094:	6878      	ldr	r0, [r7, #4]
 800c096:	f001 f8ed 	bl	800d274 <USBD_LL_StallEP>
 800c09a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c09c:	e020      	b.n	800c0e0 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800c09e:	6839      	ldr	r1, [r7, #0]
 800c0a0:	6878      	ldr	r0, [r7, #4]
 800c0a2:	f000 fc6f 	bl	800c984 <USBD_CtlError>
              break;
 800c0a6:	e01b      	b.n	800c0e0 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c0a8:	683b      	ldr	r3, [r7, #0]
 800c0aa:	885b      	ldrh	r3, [r3, #2]
 800c0ac:	2b00      	cmp	r3, #0
 800c0ae:	d10e      	bne.n	800c0ce <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800c0b0:	7bbb      	ldrb	r3, [r7, #14]
 800c0b2:	2b00      	cmp	r3, #0
 800c0b4:	d00b      	beq.n	800c0ce <USBD_StdEPReq+0xc0>
 800c0b6:	7bbb      	ldrb	r3, [r7, #14]
 800c0b8:	2b80      	cmp	r3, #128	; 0x80
 800c0ba:	d008      	beq.n	800c0ce <USBD_StdEPReq+0xc0>
 800c0bc:	683b      	ldr	r3, [r7, #0]
 800c0be:	88db      	ldrh	r3, [r3, #6]
 800c0c0:	2b00      	cmp	r3, #0
 800c0c2:	d104      	bne.n	800c0ce <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800c0c4:	7bbb      	ldrb	r3, [r7, #14]
 800c0c6:	4619      	mov	r1, r3
 800c0c8:	6878      	ldr	r0, [r7, #4]
 800c0ca:	f001 f8d3 	bl	800d274 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800c0ce:	6878      	ldr	r0, [r7, #4]
 800c0d0:	f000 fd23 	bl	800cb1a <USBD_CtlSendStatus>

              break;
 800c0d4:	e004      	b.n	800c0e0 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800c0d6:	6839      	ldr	r1, [r7, #0]
 800c0d8:	6878      	ldr	r0, [r7, #4]
 800c0da:	f000 fc53 	bl	800c984 <USBD_CtlError>
              break;
 800c0de:	bf00      	nop
          }
          break;
 800c0e0:	e0ec      	b.n	800c2bc <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c0e8:	b2db      	uxtb	r3, r3
 800c0ea:	2b02      	cmp	r3, #2
 800c0ec:	d002      	beq.n	800c0f4 <USBD_StdEPReq+0xe6>
 800c0ee:	2b03      	cmp	r3, #3
 800c0f0:	d016      	beq.n	800c120 <USBD_StdEPReq+0x112>
 800c0f2:	e030      	b.n	800c156 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c0f4:	7bbb      	ldrb	r3, [r7, #14]
 800c0f6:	2b00      	cmp	r3, #0
 800c0f8:	d00d      	beq.n	800c116 <USBD_StdEPReq+0x108>
 800c0fa:	7bbb      	ldrb	r3, [r7, #14]
 800c0fc:	2b80      	cmp	r3, #128	; 0x80
 800c0fe:	d00a      	beq.n	800c116 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c100:	7bbb      	ldrb	r3, [r7, #14]
 800c102:	4619      	mov	r1, r3
 800c104:	6878      	ldr	r0, [r7, #4]
 800c106:	f001 f8b5 	bl	800d274 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c10a:	2180      	movs	r1, #128	; 0x80
 800c10c:	6878      	ldr	r0, [r7, #4]
 800c10e:	f001 f8b1 	bl	800d274 <USBD_LL_StallEP>
 800c112:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c114:	e025      	b.n	800c162 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800c116:	6839      	ldr	r1, [r7, #0]
 800c118:	6878      	ldr	r0, [r7, #4]
 800c11a:	f000 fc33 	bl	800c984 <USBD_CtlError>
              break;
 800c11e:	e020      	b.n	800c162 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c120:	683b      	ldr	r3, [r7, #0]
 800c122:	885b      	ldrh	r3, [r3, #2]
 800c124:	2b00      	cmp	r3, #0
 800c126:	d11b      	bne.n	800c160 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800c128:	7bbb      	ldrb	r3, [r7, #14]
 800c12a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c12e:	2b00      	cmp	r3, #0
 800c130:	d004      	beq.n	800c13c <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800c132:	7bbb      	ldrb	r3, [r7, #14]
 800c134:	4619      	mov	r1, r3
 800c136:	6878      	ldr	r0, [r7, #4]
 800c138:	f001 f8bb 	bl	800d2b2 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800c13c:	6878      	ldr	r0, [r7, #4]
 800c13e:	f000 fcec 	bl	800cb1a <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c148:	689b      	ldr	r3, [r3, #8]
 800c14a:	6839      	ldr	r1, [r7, #0]
 800c14c:	6878      	ldr	r0, [r7, #4]
 800c14e:	4798      	blx	r3
 800c150:	4603      	mov	r3, r0
 800c152:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800c154:	e004      	b.n	800c160 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800c156:	6839      	ldr	r1, [r7, #0]
 800c158:	6878      	ldr	r0, [r7, #4]
 800c15a:	f000 fc13 	bl	800c984 <USBD_CtlError>
              break;
 800c15e:	e000      	b.n	800c162 <USBD_StdEPReq+0x154>
              break;
 800c160:	bf00      	nop
          }
          break;
 800c162:	e0ab      	b.n	800c2bc <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c16a:	b2db      	uxtb	r3, r3
 800c16c:	2b02      	cmp	r3, #2
 800c16e:	d002      	beq.n	800c176 <USBD_StdEPReq+0x168>
 800c170:	2b03      	cmp	r3, #3
 800c172:	d032      	beq.n	800c1da <USBD_StdEPReq+0x1cc>
 800c174:	e097      	b.n	800c2a6 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c176:	7bbb      	ldrb	r3, [r7, #14]
 800c178:	2b00      	cmp	r3, #0
 800c17a:	d007      	beq.n	800c18c <USBD_StdEPReq+0x17e>
 800c17c:	7bbb      	ldrb	r3, [r7, #14]
 800c17e:	2b80      	cmp	r3, #128	; 0x80
 800c180:	d004      	beq.n	800c18c <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800c182:	6839      	ldr	r1, [r7, #0]
 800c184:	6878      	ldr	r0, [r7, #4]
 800c186:	f000 fbfd 	bl	800c984 <USBD_CtlError>
                break;
 800c18a:	e091      	b.n	800c2b0 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c18c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c190:	2b00      	cmp	r3, #0
 800c192:	da0b      	bge.n	800c1ac <USBD_StdEPReq+0x19e>
 800c194:	7bbb      	ldrb	r3, [r7, #14]
 800c196:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c19a:	4613      	mov	r3, r2
 800c19c:	009b      	lsls	r3, r3, #2
 800c19e:	4413      	add	r3, r2
 800c1a0:	009b      	lsls	r3, r3, #2
 800c1a2:	3310      	adds	r3, #16
 800c1a4:	687a      	ldr	r2, [r7, #4]
 800c1a6:	4413      	add	r3, r2
 800c1a8:	3304      	adds	r3, #4
 800c1aa:	e00b      	b.n	800c1c4 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c1ac:	7bbb      	ldrb	r3, [r7, #14]
 800c1ae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c1b2:	4613      	mov	r3, r2
 800c1b4:	009b      	lsls	r3, r3, #2
 800c1b6:	4413      	add	r3, r2
 800c1b8:	009b      	lsls	r3, r3, #2
 800c1ba:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c1be:	687a      	ldr	r2, [r7, #4]
 800c1c0:	4413      	add	r3, r2
 800c1c2:	3304      	adds	r3, #4
 800c1c4:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800c1c6:	68bb      	ldr	r3, [r7, #8]
 800c1c8:	2200      	movs	r2, #0
 800c1ca:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c1cc:	68bb      	ldr	r3, [r7, #8]
 800c1ce:	2202      	movs	r2, #2
 800c1d0:	4619      	mov	r1, r3
 800c1d2:	6878      	ldr	r0, [r7, #4]
 800c1d4:	f000 fc47 	bl	800ca66 <USBD_CtlSendData>
              break;
 800c1d8:	e06a      	b.n	800c2b0 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800c1da:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c1de:	2b00      	cmp	r3, #0
 800c1e0:	da11      	bge.n	800c206 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800c1e2:	7bbb      	ldrb	r3, [r7, #14]
 800c1e4:	f003 020f 	and.w	r2, r3, #15
 800c1e8:	6879      	ldr	r1, [r7, #4]
 800c1ea:	4613      	mov	r3, r2
 800c1ec:	009b      	lsls	r3, r3, #2
 800c1ee:	4413      	add	r3, r2
 800c1f0:	009b      	lsls	r3, r3, #2
 800c1f2:	440b      	add	r3, r1
 800c1f4:	3324      	adds	r3, #36	; 0x24
 800c1f6:	881b      	ldrh	r3, [r3, #0]
 800c1f8:	2b00      	cmp	r3, #0
 800c1fa:	d117      	bne.n	800c22c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800c1fc:	6839      	ldr	r1, [r7, #0]
 800c1fe:	6878      	ldr	r0, [r7, #4]
 800c200:	f000 fbc0 	bl	800c984 <USBD_CtlError>
                  break;
 800c204:	e054      	b.n	800c2b0 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800c206:	7bbb      	ldrb	r3, [r7, #14]
 800c208:	f003 020f 	and.w	r2, r3, #15
 800c20c:	6879      	ldr	r1, [r7, #4]
 800c20e:	4613      	mov	r3, r2
 800c210:	009b      	lsls	r3, r3, #2
 800c212:	4413      	add	r3, r2
 800c214:	009b      	lsls	r3, r3, #2
 800c216:	440b      	add	r3, r1
 800c218:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800c21c:	881b      	ldrh	r3, [r3, #0]
 800c21e:	2b00      	cmp	r3, #0
 800c220:	d104      	bne.n	800c22c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800c222:	6839      	ldr	r1, [r7, #0]
 800c224:	6878      	ldr	r0, [r7, #4]
 800c226:	f000 fbad 	bl	800c984 <USBD_CtlError>
                  break;
 800c22a:	e041      	b.n	800c2b0 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c22c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c230:	2b00      	cmp	r3, #0
 800c232:	da0b      	bge.n	800c24c <USBD_StdEPReq+0x23e>
 800c234:	7bbb      	ldrb	r3, [r7, #14]
 800c236:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c23a:	4613      	mov	r3, r2
 800c23c:	009b      	lsls	r3, r3, #2
 800c23e:	4413      	add	r3, r2
 800c240:	009b      	lsls	r3, r3, #2
 800c242:	3310      	adds	r3, #16
 800c244:	687a      	ldr	r2, [r7, #4]
 800c246:	4413      	add	r3, r2
 800c248:	3304      	adds	r3, #4
 800c24a:	e00b      	b.n	800c264 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c24c:	7bbb      	ldrb	r3, [r7, #14]
 800c24e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c252:	4613      	mov	r3, r2
 800c254:	009b      	lsls	r3, r3, #2
 800c256:	4413      	add	r3, r2
 800c258:	009b      	lsls	r3, r3, #2
 800c25a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c25e:	687a      	ldr	r2, [r7, #4]
 800c260:	4413      	add	r3, r2
 800c262:	3304      	adds	r3, #4
 800c264:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800c266:	7bbb      	ldrb	r3, [r7, #14]
 800c268:	2b00      	cmp	r3, #0
 800c26a:	d002      	beq.n	800c272 <USBD_StdEPReq+0x264>
 800c26c:	7bbb      	ldrb	r3, [r7, #14]
 800c26e:	2b80      	cmp	r3, #128	; 0x80
 800c270:	d103      	bne.n	800c27a <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800c272:	68bb      	ldr	r3, [r7, #8]
 800c274:	2200      	movs	r2, #0
 800c276:	601a      	str	r2, [r3, #0]
 800c278:	e00e      	b.n	800c298 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800c27a:	7bbb      	ldrb	r3, [r7, #14]
 800c27c:	4619      	mov	r1, r3
 800c27e:	6878      	ldr	r0, [r7, #4]
 800c280:	f001 f836 	bl	800d2f0 <USBD_LL_IsStallEP>
 800c284:	4603      	mov	r3, r0
 800c286:	2b00      	cmp	r3, #0
 800c288:	d003      	beq.n	800c292 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800c28a:	68bb      	ldr	r3, [r7, #8]
 800c28c:	2201      	movs	r2, #1
 800c28e:	601a      	str	r2, [r3, #0]
 800c290:	e002      	b.n	800c298 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800c292:	68bb      	ldr	r3, [r7, #8]
 800c294:	2200      	movs	r2, #0
 800c296:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c298:	68bb      	ldr	r3, [r7, #8]
 800c29a:	2202      	movs	r2, #2
 800c29c:	4619      	mov	r1, r3
 800c29e:	6878      	ldr	r0, [r7, #4]
 800c2a0:	f000 fbe1 	bl	800ca66 <USBD_CtlSendData>
              break;
 800c2a4:	e004      	b.n	800c2b0 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800c2a6:	6839      	ldr	r1, [r7, #0]
 800c2a8:	6878      	ldr	r0, [r7, #4]
 800c2aa:	f000 fb6b 	bl	800c984 <USBD_CtlError>
              break;
 800c2ae:	bf00      	nop
          }
          break;
 800c2b0:	e004      	b.n	800c2bc <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800c2b2:	6839      	ldr	r1, [r7, #0]
 800c2b4:	6878      	ldr	r0, [r7, #4]
 800c2b6:	f000 fb65 	bl	800c984 <USBD_CtlError>
          break;
 800c2ba:	bf00      	nop
      }
      break;
 800c2bc:	e004      	b.n	800c2c8 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800c2be:	6839      	ldr	r1, [r7, #0]
 800c2c0:	6878      	ldr	r0, [r7, #4]
 800c2c2:	f000 fb5f 	bl	800c984 <USBD_CtlError>
      break;
 800c2c6:	bf00      	nop
  }

  return ret;
 800c2c8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c2ca:	4618      	mov	r0, r3
 800c2cc:	3710      	adds	r7, #16
 800c2ce:	46bd      	mov	sp, r7
 800c2d0:	bd80      	pop	{r7, pc}
	...

0800c2d4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c2d4:	b580      	push	{r7, lr}
 800c2d6:	b084      	sub	sp, #16
 800c2d8:	af00      	add	r7, sp, #0
 800c2da:	6078      	str	r0, [r7, #4]
 800c2dc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c2de:	2300      	movs	r3, #0
 800c2e0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800c2e2:	2300      	movs	r3, #0
 800c2e4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800c2e6:	2300      	movs	r3, #0
 800c2e8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800c2ea:	683b      	ldr	r3, [r7, #0]
 800c2ec:	885b      	ldrh	r3, [r3, #2]
 800c2ee:	0a1b      	lsrs	r3, r3, #8
 800c2f0:	b29b      	uxth	r3, r3
 800c2f2:	3b01      	subs	r3, #1
 800c2f4:	2b0e      	cmp	r3, #14
 800c2f6:	f200 8152 	bhi.w	800c59e <USBD_GetDescriptor+0x2ca>
 800c2fa:	a201      	add	r2, pc, #4	; (adr r2, 800c300 <USBD_GetDescriptor+0x2c>)
 800c2fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c300:	0800c371 	.word	0x0800c371
 800c304:	0800c389 	.word	0x0800c389
 800c308:	0800c3c9 	.word	0x0800c3c9
 800c30c:	0800c59f 	.word	0x0800c59f
 800c310:	0800c59f 	.word	0x0800c59f
 800c314:	0800c53f 	.word	0x0800c53f
 800c318:	0800c56b 	.word	0x0800c56b
 800c31c:	0800c59f 	.word	0x0800c59f
 800c320:	0800c59f 	.word	0x0800c59f
 800c324:	0800c59f 	.word	0x0800c59f
 800c328:	0800c59f 	.word	0x0800c59f
 800c32c:	0800c59f 	.word	0x0800c59f
 800c330:	0800c59f 	.word	0x0800c59f
 800c334:	0800c59f 	.word	0x0800c59f
 800c338:	0800c33d 	.word	0x0800c33d
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c342:	69db      	ldr	r3, [r3, #28]
 800c344:	2b00      	cmp	r3, #0
 800c346:	d00b      	beq.n	800c360 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c34e:	69db      	ldr	r3, [r3, #28]
 800c350:	687a      	ldr	r2, [r7, #4]
 800c352:	7c12      	ldrb	r2, [r2, #16]
 800c354:	f107 0108 	add.w	r1, r7, #8
 800c358:	4610      	mov	r0, r2
 800c35a:	4798      	blx	r3
 800c35c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c35e:	e126      	b.n	800c5ae <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800c360:	6839      	ldr	r1, [r7, #0]
 800c362:	6878      	ldr	r0, [r7, #4]
 800c364:	f000 fb0e 	bl	800c984 <USBD_CtlError>
        err++;
 800c368:	7afb      	ldrb	r3, [r7, #11]
 800c36a:	3301      	adds	r3, #1
 800c36c:	72fb      	strb	r3, [r7, #11]
      break;
 800c36e:	e11e      	b.n	800c5ae <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c376:	681b      	ldr	r3, [r3, #0]
 800c378:	687a      	ldr	r2, [r7, #4]
 800c37a:	7c12      	ldrb	r2, [r2, #16]
 800c37c:	f107 0108 	add.w	r1, r7, #8
 800c380:	4610      	mov	r0, r2
 800c382:	4798      	blx	r3
 800c384:	60f8      	str	r0, [r7, #12]
      break;
 800c386:	e112      	b.n	800c5ae <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	7c1b      	ldrb	r3, [r3, #16]
 800c38c:	2b00      	cmp	r3, #0
 800c38e:	d10d      	bne.n	800c3ac <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c396:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c398:	f107 0208 	add.w	r2, r7, #8
 800c39c:	4610      	mov	r0, r2
 800c39e:	4798      	blx	r3
 800c3a0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c3a2:	68fb      	ldr	r3, [r7, #12]
 800c3a4:	3301      	adds	r3, #1
 800c3a6:	2202      	movs	r2, #2
 800c3a8:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800c3aa:	e100      	b.n	800c5ae <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c3b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c3b4:	f107 0208 	add.w	r2, r7, #8
 800c3b8:	4610      	mov	r0, r2
 800c3ba:	4798      	blx	r3
 800c3bc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c3be:	68fb      	ldr	r3, [r7, #12]
 800c3c0:	3301      	adds	r3, #1
 800c3c2:	2202      	movs	r2, #2
 800c3c4:	701a      	strb	r2, [r3, #0]
      break;
 800c3c6:	e0f2      	b.n	800c5ae <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800c3c8:	683b      	ldr	r3, [r7, #0]
 800c3ca:	885b      	ldrh	r3, [r3, #2]
 800c3cc:	b2db      	uxtb	r3, r3
 800c3ce:	2b05      	cmp	r3, #5
 800c3d0:	f200 80ac 	bhi.w	800c52c <USBD_GetDescriptor+0x258>
 800c3d4:	a201      	add	r2, pc, #4	; (adr r2, 800c3dc <USBD_GetDescriptor+0x108>)
 800c3d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c3da:	bf00      	nop
 800c3dc:	0800c3f5 	.word	0x0800c3f5
 800c3e0:	0800c429 	.word	0x0800c429
 800c3e4:	0800c45d 	.word	0x0800c45d
 800c3e8:	0800c491 	.word	0x0800c491
 800c3ec:	0800c4c5 	.word	0x0800c4c5
 800c3f0:	0800c4f9 	.word	0x0800c4f9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c3fa:	685b      	ldr	r3, [r3, #4]
 800c3fc:	2b00      	cmp	r3, #0
 800c3fe:	d00b      	beq.n	800c418 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c406:	685b      	ldr	r3, [r3, #4]
 800c408:	687a      	ldr	r2, [r7, #4]
 800c40a:	7c12      	ldrb	r2, [r2, #16]
 800c40c:	f107 0108 	add.w	r1, r7, #8
 800c410:	4610      	mov	r0, r2
 800c412:	4798      	blx	r3
 800c414:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c416:	e091      	b.n	800c53c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c418:	6839      	ldr	r1, [r7, #0]
 800c41a:	6878      	ldr	r0, [r7, #4]
 800c41c:	f000 fab2 	bl	800c984 <USBD_CtlError>
            err++;
 800c420:	7afb      	ldrb	r3, [r7, #11]
 800c422:	3301      	adds	r3, #1
 800c424:	72fb      	strb	r3, [r7, #11]
          break;
 800c426:	e089      	b.n	800c53c <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c42e:	689b      	ldr	r3, [r3, #8]
 800c430:	2b00      	cmp	r3, #0
 800c432:	d00b      	beq.n	800c44c <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c43a:	689b      	ldr	r3, [r3, #8]
 800c43c:	687a      	ldr	r2, [r7, #4]
 800c43e:	7c12      	ldrb	r2, [r2, #16]
 800c440:	f107 0108 	add.w	r1, r7, #8
 800c444:	4610      	mov	r0, r2
 800c446:	4798      	blx	r3
 800c448:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c44a:	e077      	b.n	800c53c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c44c:	6839      	ldr	r1, [r7, #0]
 800c44e:	6878      	ldr	r0, [r7, #4]
 800c450:	f000 fa98 	bl	800c984 <USBD_CtlError>
            err++;
 800c454:	7afb      	ldrb	r3, [r7, #11]
 800c456:	3301      	adds	r3, #1
 800c458:	72fb      	strb	r3, [r7, #11]
          break;
 800c45a:	e06f      	b.n	800c53c <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c462:	68db      	ldr	r3, [r3, #12]
 800c464:	2b00      	cmp	r3, #0
 800c466:	d00b      	beq.n	800c480 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c46e:	68db      	ldr	r3, [r3, #12]
 800c470:	687a      	ldr	r2, [r7, #4]
 800c472:	7c12      	ldrb	r2, [r2, #16]
 800c474:	f107 0108 	add.w	r1, r7, #8
 800c478:	4610      	mov	r0, r2
 800c47a:	4798      	blx	r3
 800c47c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c47e:	e05d      	b.n	800c53c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c480:	6839      	ldr	r1, [r7, #0]
 800c482:	6878      	ldr	r0, [r7, #4]
 800c484:	f000 fa7e 	bl	800c984 <USBD_CtlError>
            err++;
 800c488:	7afb      	ldrb	r3, [r7, #11]
 800c48a:	3301      	adds	r3, #1
 800c48c:	72fb      	strb	r3, [r7, #11]
          break;
 800c48e:	e055      	b.n	800c53c <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c496:	691b      	ldr	r3, [r3, #16]
 800c498:	2b00      	cmp	r3, #0
 800c49a:	d00b      	beq.n	800c4b4 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c4a2:	691b      	ldr	r3, [r3, #16]
 800c4a4:	687a      	ldr	r2, [r7, #4]
 800c4a6:	7c12      	ldrb	r2, [r2, #16]
 800c4a8:	f107 0108 	add.w	r1, r7, #8
 800c4ac:	4610      	mov	r0, r2
 800c4ae:	4798      	blx	r3
 800c4b0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c4b2:	e043      	b.n	800c53c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c4b4:	6839      	ldr	r1, [r7, #0]
 800c4b6:	6878      	ldr	r0, [r7, #4]
 800c4b8:	f000 fa64 	bl	800c984 <USBD_CtlError>
            err++;
 800c4bc:	7afb      	ldrb	r3, [r7, #11]
 800c4be:	3301      	adds	r3, #1
 800c4c0:	72fb      	strb	r3, [r7, #11]
          break;
 800c4c2:	e03b      	b.n	800c53c <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c4ca:	695b      	ldr	r3, [r3, #20]
 800c4cc:	2b00      	cmp	r3, #0
 800c4ce:	d00b      	beq.n	800c4e8 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c4d6:	695b      	ldr	r3, [r3, #20]
 800c4d8:	687a      	ldr	r2, [r7, #4]
 800c4da:	7c12      	ldrb	r2, [r2, #16]
 800c4dc:	f107 0108 	add.w	r1, r7, #8
 800c4e0:	4610      	mov	r0, r2
 800c4e2:	4798      	blx	r3
 800c4e4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c4e6:	e029      	b.n	800c53c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c4e8:	6839      	ldr	r1, [r7, #0]
 800c4ea:	6878      	ldr	r0, [r7, #4]
 800c4ec:	f000 fa4a 	bl	800c984 <USBD_CtlError>
            err++;
 800c4f0:	7afb      	ldrb	r3, [r7, #11]
 800c4f2:	3301      	adds	r3, #1
 800c4f4:	72fb      	strb	r3, [r7, #11]
          break;
 800c4f6:	e021      	b.n	800c53c <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c4fe:	699b      	ldr	r3, [r3, #24]
 800c500:	2b00      	cmp	r3, #0
 800c502:	d00b      	beq.n	800c51c <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c50a:	699b      	ldr	r3, [r3, #24]
 800c50c:	687a      	ldr	r2, [r7, #4]
 800c50e:	7c12      	ldrb	r2, [r2, #16]
 800c510:	f107 0108 	add.w	r1, r7, #8
 800c514:	4610      	mov	r0, r2
 800c516:	4798      	blx	r3
 800c518:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c51a:	e00f      	b.n	800c53c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800c51c:	6839      	ldr	r1, [r7, #0]
 800c51e:	6878      	ldr	r0, [r7, #4]
 800c520:	f000 fa30 	bl	800c984 <USBD_CtlError>
            err++;
 800c524:	7afb      	ldrb	r3, [r7, #11]
 800c526:	3301      	adds	r3, #1
 800c528:	72fb      	strb	r3, [r7, #11]
          break;
 800c52a:	e007      	b.n	800c53c <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800c52c:	6839      	ldr	r1, [r7, #0]
 800c52e:	6878      	ldr	r0, [r7, #4]
 800c530:	f000 fa28 	bl	800c984 <USBD_CtlError>
          err++;
 800c534:	7afb      	ldrb	r3, [r7, #11]
 800c536:	3301      	adds	r3, #1
 800c538:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800c53a:	bf00      	nop
      }
      break;
 800c53c:	e037      	b.n	800c5ae <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	7c1b      	ldrb	r3, [r3, #16]
 800c542:	2b00      	cmp	r3, #0
 800c544:	d109      	bne.n	800c55a <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c54c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c54e:	f107 0208 	add.w	r2, r7, #8
 800c552:	4610      	mov	r0, r2
 800c554:	4798      	blx	r3
 800c556:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c558:	e029      	b.n	800c5ae <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800c55a:	6839      	ldr	r1, [r7, #0]
 800c55c:	6878      	ldr	r0, [r7, #4]
 800c55e:	f000 fa11 	bl	800c984 <USBD_CtlError>
        err++;
 800c562:	7afb      	ldrb	r3, [r7, #11]
 800c564:	3301      	adds	r3, #1
 800c566:	72fb      	strb	r3, [r7, #11]
      break;
 800c568:	e021      	b.n	800c5ae <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	7c1b      	ldrb	r3, [r3, #16]
 800c56e:	2b00      	cmp	r3, #0
 800c570:	d10d      	bne.n	800c58e <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c57a:	f107 0208 	add.w	r2, r7, #8
 800c57e:	4610      	mov	r0, r2
 800c580:	4798      	blx	r3
 800c582:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800c584:	68fb      	ldr	r3, [r7, #12]
 800c586:	3301      	adds	r3, #1
 800c588:	2207      	movs	r2, #7
 800c58a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c58c:	e00f      	b.n	800c5ae <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800c58e:	6839      	ldr	r1, [r7, #0]
 800c590:	6878      	ldr	r0, [r7, #4]
 800c592:	f000 f9f7 	bl	800c984 <USBD_CtlError>
        err++;
 800c596:	7afb      	ldrb	r3, [r7, #11]
 800c598:	3301      	adds	r3, #1
 800c59a:	72fb      	strb	r3, [r7, #11]
      break;
 800c59c:	e007      	b.n	800c5ae <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800c59e:	6839      	ldr	r1, [r7, #0]
 800c5a0:	6878      	ldr	r0, [r7, #4]
 800c5a2:	f000 f9ef 	bl	800c984 <USBD_CtlError>
      err++;
 800c5a6:	7afb      	ldrb	r3, [r7, #11]
 800c5a8:	3301      	adds	r3, #1
 800c5aa:	72fb      	strb	r3, [r7, #11]
      break;
 800c5ac:	bf00      	nop
  }

  if (err != 0U)
 800c5ae:	7afb      	ldrb	r3, [r7, #11]
 800c5b0:	2b00      	cmp	r3, #0
 800c5b2:	d11e      	bne.n	800c5f2 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800c5b4:	683b      	ldr	r3, [r7, #0]
 800c5b6:	88db      	ldrh	r3, [r3, #6]
 800c5b8:	2b00      	cmp	r3, #0
 800c5ba:	d016      	beq.n	800c5ea <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800c5bc:	893b      	ldrh	r3, [r7, #8]
 800c5be:	2b00      	cmp	r3, #0
 800c5c0:	d00e      	beq.n	800c5e0 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800c5c2:	683b      	ldr	r3, [r7, #0]
 800c5c4:	88da      	ldrh	r2, [r3, #6]
 800c5c6:	893b      	ldrh	r3, [r7, #8]
 800c5c8:	4293      	cmp	r3, r2
 800c5ca:	bf28      	it	cs
 800c5cc:	4613      	movcs	r3, r2
 800c5ce:	b29b      	uxth	r3, r3
 800c5d0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800c5d2:	893b      	ldrh	r3, [r7, #8]
 800c5d4:	461a      	mov	r2, r3
 800c5d6:	68f9      	ldr	r1, [r7, #12]
 800c5d8:	6878      	ldr	r0, [r7, #4]
 800c5da:	f000 fa44 	bl	800ca66 <USBD_CtlSendData>
 800c5de:	e009      	b.n	800c5f4 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800c5e0:	6839      	ldr	r1, [r7, #0]
 800c5e2:	6878      	ldr	r0, [r7, #4]
 800c5e4:	f000 f9ce 	bl	800c984 <USBD_CtlError>
 800c5e8:	e004      	b.n	800c5f4 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800c5ea:	6878      	ldr	r0, [r7, #4]
 800c5ec:	f000 fa95 	bl	800cb1a <USBD_CtlSendStatus>
 800c5f0:	e000      	b.n	800c5f4 <USBD_GetDescriptor+0x320>
    return;
 800c5f2:	bf00      	nop
  }
}
 800c5f4:	3710      	adds	r7, #16
 800c5f6:	46bd      	mov	sp, r7
 800c5f8:	bd80      	pop	{r7, pc}
 800c5fa:	bf00      	nop

0800c5fc <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c5fc:	b580      	push	{r7, lr}
 800c5fe:	b084      	sub	sp, #16
 800c600:	af00      	add	r7, sp, #0
 800c602:	6078      	str	r0, [r7, #4]
 800c604:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800c606:	683b      	ldr	r3, [r7, #0]
 800c608:	889b      	ldrh	r3, [r3, #4]
 800c60a:	2b00      	cmp	r3, #0
 800c60c:	d131      	bne.n	800c672 <USBD_SetAddress+0x76>
 800c60e:	683b      	ldr	r3, [r7, #0]
 800c610:	88db      	ldrh	r3, [r3, #6]
 800c612:	2b00      	cmp	r3, #0
 800c614:	d12d      	bne.n	800c672 <USBD_SetAddress+0x76>
 800c616:	683b      	ldr	r3, [r7, #0]
 800c618:	885b      	ldrh	r3, [r3, #2]
 800c61a:	2b7f      	cmp	r3, #127	; 0x7f
 800c61c:	d829      	bhi.n	800c672 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800c61e:	683b      	ldr	r3, [r7, #0]
 800c620:	885b      	ldrh	r3, [r3, #2]
 800c622:	b2db      	uxtb	r3, r3
 800c624:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c628:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c630:	b2db      	uxtb	r3, r3
 800c632:	2b03      	cmp	r3, #3
 800c634:	d104      	bne.n	800c640 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800c636:	6839      	ldr	r1, [r7, #0]
 800c638:	6878      	ldr	r0, [r7, #4]
 800c63a:	f000 f9a3 	bl	800c984 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c63e:	e01d      	b.n	800c67c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	7bfa      	ldrb	r2, [r7, #15]
 800c644:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800c648:	7bfb      	ldrb	r3, [r7, #15]
 800c64a:	4619      	mov	r1, r3
 800c64c:	6878      	ldr	r0, [r7, #4]
 800c64e:	f000 fe7c 	bl	800d34a <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800c652:	6878      	ldr	r0, [r7, #4]
 800c654:	f000 fa61 	bl	800cb1a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800c658:	7bfb      	ldrb	r3, [r7, #15]
 800c65a:	2b00      	cmp	r3, #0
 800c65c:	d004      	beq.n	800c668 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	2202      	movs	r2, #2
 800c662:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c666:	e009      	b.n	800c67c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	2201      	movs	r2, #1
 800c66c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c670:	e004      	b.n	800c67c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800c672:	6839      	ldr	r1, [r7, #0]
 800c674:	6878      	ldr	r0, [r7, #4]
 800c676:	f000 f985 	bl	800c984 <USBD_CtlError>
  }
}
 800c67a:	bf00      	nop
 800c67c:	bf00      	nop
 800c67e:	3710      	adds	r7, #16
 800c680:	46bd      	mov	sp, r7
 800c682:	bd80      	pop	{r7, pc}

0800c684 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c684:	b580      	push	{r7, lr}
 800c686:	b084      	sub	sp, #16
 800c688:	af00      	add	r7, sp, #0
 800c68a:	6078      	str	r0, [r7, #4]
 800c68c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c68e:	2300      	movs	r3, #0
 800c690:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800c692:	683b      	ldr	r3, [r7, #0]
 800c694:	885b      	ldrh	r3, [r3, #2]
 800c696:	b2da      	uxtb	r2, r3
 800c698:	4b4c      	ldr	r3, [pc, #304]	; (800c7cc <USBD_SetConfig+0x148>)
 800c69a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800c69c:	4b4b      	ldr	r3, [pc, #300]	; (800c7cc <USBD_SetConfig+0x148>)
 800c69e:	781b      	ldrb	r3, [r3, #0]
 800c6a0:	2b01      	cmp	r3, #1
 800c6a2:	d905      	bls.n	800c6b0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800c6a4:	6839      	ldr	r1, [r7, #0]
 800c6a6:	6878      	ldr	r0, [r7, #4]
 800c6a8:	f000 f96c 	bl	800c984 <USBD_CtlError>
    return USBD_FAIL;
 800c6ac:	2303      	movs	r3, #3
 800c6ae:	e088      	b.n	800c7c2 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c6b6:	b2db      	uxtb	r3, r3
 800c6b8:	2b02      	cmp	r3, #2
 800c6ba:	d002      	beq.n	800c6c2 <USBD_SetConfig+0x3e>
 800c6bc:	2b03      	cmp	r3, #3
 800c6be:	d025      	beq.n	800c70c <USBD_SetConfig+0x88>
 800c6c0:	e071      	b.n	800c7a6 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800c6c2:	4b42      	ldr	r3, [pc, #264]	; (800c7cc <USBD_SetConfig+0x148>)
 800c6c4:	781b      	ldrb	r3, [r3, #0]
 800c6c6:	2b00      	cmp	r3, #0
 800c6c8:	d01c      	beq.n	800c704 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800c6ca:	4b40      	ldr	r3, [pc, #256]	; (800c7cc <USBD_SetConfig+0x148>)
 800c6cc:	781b      	ldrb	r3, [r3, #0]
 800c6ce:	461a      	mov	r2, r3
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c6d4:	4b3d      	ldr	r3, [pc, #244]	; (800c7cc <USBD_SetConfig+0x148>)
 800c6d6:	781b      	ldrb	r3, [r3, #0]
 800c6d8:	4619      	mov	r1, r3
 800c6da:	6878      	ldr	r0, [r7, #4]
 800c6dc:	f7ff f992 	bl	800ba04 <USBD_SetClassConfig>
 800c6e0:	4603      	mov	r3, r0
 800c6e2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800c6e4:	7bfb      	ldrb	r3, [r7, #15]
 800c6e6:	2b00      	cmp	r3, #0
 800c6e8:	d004      	beq.n	800c6f4 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800c6ea:	6839      	ldr	r1, [r7, #0]
 800c6ec:	6878      	ldr	r0, [r7, #4]
 800c6ee:	f000 f949 	bl	800c984 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c6f2:	e065      	b.n	800c7c0 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800c6f4:	6878      	ldr	r0, [r7, #4]
 800c6f6:	f000 fa10 	bl	800cb1a <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	2203      	movs	r2, #3
 800c6fe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800c702:	e05d      	b.n	800c7c0 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800c704:	6878      	ldr	r0, [r7, #4]
 800c706:	f000 fa08 	bl	800cb1a <USBD_CtlSendStatus>
      break;
 800c70a:	e059      	b.n	800c7c0 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800c70c:	4b2f      	ldr	r3, [pc, #188]	; (800c7cc <USBD_SetConfig+0x148>)
 800c70e:	781b      	ldrb	r3, [r3, #0]
 800c710:	2b00      	cmp	r3, #0
 800c712:	d112      	bne.n	800c73a <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	2202      	movs	r2, #2
 800c718:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800c71c:	4b2b      	ldr	r3, [pc, #172]	; (800c7cc <USBD_SetConfig+0x148>)
 800c71e:	781b      	ldrb	r3, [r3, #0]
 800c720:	461a      	mov	r2, r3
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c726:	4b29      	ldr	r3, [pc, #164]	; (800c7cc <USBD_SetConfig+0x148>)
 800c728:	781b      	ldrb	r3, [r3, #0]
 800c72a:	4619      	mov	r1, r3
 800c72c:	6878      	ldr	r0, [r7, #4]
 800c72e:	f7ff f985 	bl	800ba3c <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800c732:	6878      	ldr	r0, [r7, #4]
 800c734:	f000 f9f1 	bl	800cb1a <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c738:	e042      	b.n	800c7c0 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800c73a:	4b24      	ldr	r3, [pc, #144]	; (800c7cc <USBD_SetConfig+0x148>)
 800c73c:	781b      	ldrb	r3, [r3, #0]
 800c73e:	461a      	mov	r2, r3
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	685b      	ldr	r3, [r3, #4]
 800c744:	429a      	cmp	r2, r3
 800c746:	d02a      	beq.n	800c79e <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	685b      	ldr	r3, [r3, #4]
 800c74c:	b2db      	uxtb	r3, r3
 800c74e:	4619      	mov	r1, r3
 800c750:	6878      	ldr	r0, [r7, #4]
 800c752:	f7ff f973 	bl	800ba3c <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800c756:	4b1d      	ldr	r3, [pc, #116]	; (800c7cc <USBD_SetConfig+0x148>)
 800c758:	781b      	ldrb	r3, [r3, #0]
 800c75a:	461a      	mov	r2, r3
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c760:	4b1a      	ldr	r3, [pc, #104]	; (800c7cc <USBD_SetConfig+0x148>)
 800c762:	781b      	ldrb	r3, [r3, #0]
 800c764:	4619      	mov	r1, r3
 800c766:	6878      	ldr	r0, [r7, #4]
 800c768:	f7ff f94c 	bl	800ba04 <USBD_SetClassConfig>
 800c76c:	4603      	mov	r3, r0
 800c76e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800c770:	7bfb      	ldrb	r3, [r7, #15]
 800c772:	2b00      	cmp	r3, #0
 800c774:	d00f      	beq.n	800c796 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800c776:	6839      	ldr	r1, [r7, #0]
 800c778:	6878      	ldr	r0, [r7, #4]
 800c77a:	f000 f903 	bl	800c984 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	685b      	ldr	r3, [r3, #4]
 800c782:	b2db      	uxtb	r3, r3
 800c784:	4619      	mov	r1, r3
 800c786:	6878      	ldr	r0, [r7, #4]
 800c788:	f7ff f958 	bl	800ba3c <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	2202      	movs	r2, #2
 800c790:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800c794:	e014      	b.n	800c7c0 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800c796:	6878      	ldr	r0, [r7, #4]
 800c798:	f000 f9bf 	bl	800cb1a <USBD_CtlSendStatus>
      break;
 800c79c:	e010      	b.n	800c7c0 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800c79e:	6878      	ldr	r0, [r7, #4]
 800c7a0:	f000 f9bb 	bl	800cb1a <USBD_CtlSendStatus>
      break;
 800c7a4:	e00c      	b.n	800c7c0 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800c7a6:	6839      	ldr	r1, [r7, #0]
 800c7a8:	6878      	ldr	r0, [r7, #4]
 800c7aa:	f000 f8eb 	bl	800c984 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c7ae:	4b07      	ldr	r3, [pc, #28]	; (800c7cc <USBD_SetConfig+0x148>)
 800c7b0:	781b      	ldrb	r3, [r3, #0]
 800c7b2:	4619      	mov	r1, r3
 800c7b4:	6878      	ldr	r0, [r7, #4]
 800c7b6:	f7ff f941 	bl	800ba3c <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800c7ba:	2303      	movs	r3, #3
 800c7bc:	73fb      	strb	r3, [r7, #15]
      break;
 800c7be:	bf00      	nop
  }

  return ret;
 800c7c0:	7bfb      	ldrb	r3, [r7, #15]
}
 800c7c2:	4618      	mov	r0, r3
 800c7c4:	3710      	adds	r7, #16
 800c7c6:	46bd      	mov	sp, r7
 800c7c8:	bd80      	pop	{r7, pc}
 800c7ca:	bf00      	nop
 800c7cc:	2000073c 	.word	0x2000073c

0800c7d0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c7d0:	b580      	push	{r7, lr}
 800c7d2:	b082      	sub	sp, #8
 800c7d4:	af00      	add	r7, sp, #0
 800c7d6:	6078      	str	r0, [r7, #4]
 800c7d8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800c7da:	683b      	ldr	r3, [r7, #0]
 800c7dc:	88db      	ldrh	r3, [r3, #6]
 800c7de:	2b01      	cmp	r3, #1
 800c7e0:	d004      	beq.n	800c7ec <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800c7e2:	6839      	ldr	r1, [r7, #0]
 800c7e4:	6878      	ldr	r0, [r7, #4]
 800c7e6:	f000 f8cd 	bl	800c984 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800c7ea:	e023      	b.n	800c834 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c7f2:	b2db      	uxtb	r3, r3
 800c7f4:	2b02      	cmp	r3, #2
 800c7f6:	dc02      	bgt.n	800c7fe <USBD_GetConfig+0x2e>
 800c7f8:	2b00      	cmp	r3, #0
 800c7fa:	dc03      	bgt.n	800c804 <USBD_GetConfig+0x34>
 800c7fc:	e015      	b.n	800c82a <USBD_GetConfig+0x5a>
 800c7fe:	2b03      	cmp	r3, #3
 800c800:	d00b      	beq.n	800c81a <USBD_GetConfig+0x4a>
 800c802:	e012      	b.n	800c82a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	2200      	movs	r2, #0
 800c808:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	3308      	adds	r3, #8
 800c80e:	2201      	movs	r2, #1
 800c810:	4619      	mov	r1, r3
 800c812:	6878      	ldr	r0, [r7, #4]
 800c814:	f000 f927 	bl	800ca66 <USBD_CtlSendData>
        break;
 800c818:	e00c      	b.n	800c834 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	3304      	adds	r3, #4
 800c81e:	2201      	movs	r2, #1
 800c820:	4619      	mov	r1, r3
 800c822:	6878      	ldr	r0, [r7, #4]
 800c824:	f000 f91f 	bl	800ca66 <USBD_CtlSendData>
        break;
 800c828:	e004      	b.n	800c834 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800c82a:	6839      	ldr	r1, [r7, #0]
 800c82c:	6878      	ldr	r0, [r7, #4]
 800c82e:	f000 f8a9 	bl	800c984 <USBD_CtlError>
        break;
 800c832:	bf00      	nop
}
 800c834:	bf00      	nop
 800c836:	3708      	adds	r7, #8
 800c838:	46bd      	mov	sp, r7
 800c83a:	bd80      	pop	{r7, pc}

0800c83c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c83c:	b580      	push	{r7, lr}
 800c83e:	b082      	sub	sp, #8
 800c840:	af00      	add	r7, sp, #0
 800c842:	6078      	str	r0, [r7, #4]
 800c844:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c84c:	b2db      	uxtb	r3, r3
 800c84e:	3b01      	subs	r3, #1
 800c850:	2b02      	cmp	r3, #2
 800c852:	d81e      	bhi.n	800c892 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800c854:	683b      	ldr	r3, [r7, #0]
 800c856:	88db      	ldrh	r3, [r3, #6]
 800c858:	2b02      	cmp	r3, #2
 800c85a:	d004      	beq.n	800c866 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800c85c:	6839      	ldr	r1, [r7, #0]
 800c85e:	6878      	ldr	r0, [r7, #4]
 800c860:	f000 f890 	bl	800c984 <USBD_CtlError>
        break;
 800c864:	e01a      	b.n	800c89c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	2201      	movs	r2, #1
 800c86a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800c872:	2b00      	cmp	r3, #0
 800c874:	d005      	beq.n	800c882 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	68db      	ldr	r3, [r3, #12]
 800c87a:	f043 0202 	orr.w	r2, r3, #2
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	330c      	adds	r3, #12
 800c886:	2202      	movs	r2, #2
 800c888:	4619      	mov	r1, r3
 800c88a:	6878      	ldr	r0, [r7, #4]
 800c88c:	f000 f8eb 	bl	800ca66 <USBD_CtlSendData>
      break;
 800c890:	e004      	b.n	800c89c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800c892:	6839      	ldr	r1, [r7, #0]
 800c894:	6878      	ldr	r0, [r7, #4]
 800c896:	f000 f875 	bl	800c984 <USBD_CtlError>
      break;
 800c89a:	bf00      	nop
  }
}
 800c89c:	bf00      	nop
 800c89e:	3708      	adds	r7, #8
 800c8a0:	46bd      	mov	sp, r7
 800c8a2:	bd80      	pop	{r7, pc}

0800c8a4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c8a4:	b580      	push	{r7, lr}
 800c8a6:	b082      	sub	sp, #8
 800c8a8:	af00      	add	r7, sp, #0
 800c8aa:	6078      	str	r0, [r7, #4]
 800c8ac:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c8ae:	683b      	ldr	r3, [r7, #0]
 800c8b0:	885b      	ldrh	r3, [r3, #2]
 800c8b2:	2b01      	cmp	r3, #1
 800c8b4:	d106      	bne.n	800c8c4 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	2201      	movs	r2, #1
 800c8ba:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800c8be:	6878      	ldr	r0, [r7, #4]
 800c8c0:	f000 f92b 	bl	800cb1a <USBD_CtlSendStatus>
  }
}
 800c8c4:	bf00      	nop
 800c8c6:	3708      	adds	r7, #8
 800c8c8:	46bd      	mov	sp, r7
 800c8ca:	bd80      	pop	{r7, pc}

0800c8cc <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c8cc:	b580      	push	{r7, lr}
 800c8ce:	b082      	sub	sp, #8
 800c8d0:	af00      	add	r7, sp, #0
 800c8d2:	6078      	str	r0, [r7, #4]
 800c8d4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c8dc:	b2db      	uxtb	r3, r3
 800c8de:	3b01      	subs	r3, #1
 800c8e0:	2b02      	cmp	r3, #2
 800c8e2:	d80b      	bhi.n	800c8fc <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c8e4:	683b      	ldr	r3, [r7, #0]
 800c8e6:	885b      	ldrh	r3, [r3, #2]
 800c8e8:	2b01      	cmp	r3, #1
 800c8ea:	d10c      	bne.n	800c906 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	2200      	movs	r2, #0
 800c8f0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800c8f4:	6878      	ldr	r0, [r7, #4]
 800c8f6:	f000 f910 	bl	800cb1a <USBD_CtlSendStatus>
      }
      break;
 800c8fa:	e004      	b.n	800c906 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800c8fc:	6839      	ldr	r1, [r7, #0]
 800c8fe:	6878      	ldr	r0, [r7, #4]
 800c900:	f000 f840 	bl	800c984 <USBD_CtlError>
      break;
 800c904:	e000      	b.n	800c908 <USBD_ClrFeature+0x3c>
      break;
 800c906:	bf00      	nop
  }
}
 800c908:	bf00      	nop
 800c90a:	3708      	adds	r7, #8
 800c90c:	46bd      	mov	sp, r7
 800c90e:	bd80      	pop	{r7, pc}

0800c910 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800c910:	b580      	push	{r7, lr}
 800c912:	b084      	sub	sp, #16
 800c914:	af00      	add	r7, sp, #0
 800c916:	6078      	str	r0, [r7, #4]
 800c918:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800c91a:	683b      	ldr	r3, [r7, #0]
 800c91c:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800c91e:	68fb      	ldr	r3, [r7, #12]
 800c920:	781a      	ldrb	r2, [r3, #0]
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800c926:	68fb      	ldr	r3, [r7, #12]
 800c928:	3301      	adds	r3, #1
 800c92a:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800c92c:	68fb      	ldr	r3, [r7, #12]
 800c92e:	781a      	ldrb	r2, [r3, #0]
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800c934:	68fb      	ldr	r3, [r7, #12]
 800c936:	3301      	adds	r3, #1
 800c938:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800c93a:	68f8      	ldr	r0, [r7, #12]
 800c93c:	f7ff fa92 	bl	800be64 <SWAPBYTE>
 800c940:	4603      	mov	r3, r0
 800c942:	461a      	mov	r2, r3
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800c948:	68fb      	ldr	r3, [r7, #12]
 800c94a:	3301      	adds	r3, #1
 800c94c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c94e:	68fb      	ldr	r3, [r7, #12]
 800c950:	3301      	adds	r3, #1
 800c952:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800c954:	68f8      	ldr	r0, [r7, #12]
 800c956:	f7ff fa85 	bl	800be64 <SWAPBYTE>
 800c95a:	4603      	mov	r3, r0
 800c95c:	461a      	mov	r2, r3
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800c962:	68fb      	ldr	r3, [r7, #12]
 800c964:	3301      	adds	r3, #1
 800c966:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c968:	68fb      	ldr	r3, [r7, #12]
 800c96a:	3301      	adds	r3, #1
 800c96c:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800c96e:	68f8      	ldr	r0, [r7, #12]
 800c970:	f7ff fa78 	bl	800be64 <SWAPBYTE>
 800c974:	4603      	mov	r3, r0
 800c976:	461a      	mov	r2, r3
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	80da      	strh	r2, [r3, #6]
}
 800c97c:	bf00      	nop
 800c97e:	3710      	adds	r7, #16
 800c980:	46bd      	mov	sp, r7
 800c982:	bd80      	pop	{r7, pc}

0800c984 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c984:	b580      	push	{r7, lr}
 800c986:	b082      	sub	sp, #8
 800c988:	af00      	add	r7, sp, #0
 800c98a:	6078      	str	r0, [r7, #4]
 800c98c:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800c98e:	2180      	movs	r1, #128	; 0x80
 800c990:	6878      	ldr	r0, [r7, #4]
 800c992:	f000 fc6f 	bl	800d274 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800c996:	2100      	movs	r1, #0
 800c998:	6878      	ldr	r0, [r7, #4]
 800c99a:	f000 fc6b 	bl	800d274 <USBD_LL_StallEP>
}
 800c99e:	bf00      	nop
 800c9a0:	3708      	adds	r7, #8
 800c9a2:	46bd      	mov	sp, r7
 800c9a4:	bd80      	pop	{r7, pc}

0800c9a6 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800c9a6:	b580      	push	{r7, lr}
 800c9a8:	b086      	sub	sp, #24
 800c9aa:	af00      	add	r7, sp, #0
 800c9ac:	60f8      	str	r0, [r7, #12]
 800c9ae:	60b9      	str	r1, [r7, #8]
 800c9b0:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800c9b2:	2300      	movs	r3, #0
 800c9b4:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800c9b6:	68fb      	ldr	r3, [r7, #12]
 800c9b8:	2b00      	cmp	r3, #0
 800c9ba:	d036      	beq.n	800ca2a <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800c9bc:	68fb      	ldr	r3, [r7, #12]
 800c9be:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800c9c0:	6938      	ldr	r0, [r7, #16]
 800c9c2:	f000 f836 	bl	800ca32 <USBD_GetLen>
 800c9c6:	4603      	mov	r3, r0
 800c9c8:	3301      	adds	r3, #1
 800c9ca:	b29b      	uxth	r3, r3
 800c9cc:	005b      	lsls	r3, r3, #1
 800c9ce:	b29a      	uxth	r2, r3
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800c9d4:	7dfb      	ldrb	r3, [r7, #23]
 800c9d6:	68ba      	ldr	r2, [r7, #8]
 800c9d8:	4413      	add	r3, r2
 800c9da:	687a      	ldr	r2, [r7, #4]
 800c9dc:	7812      	ldrb	r2, [r2, #0]
 800c9de:	701a      	strb	r2, [r3, #0]
  idx++;
 800c9e0:	7dfb      	ldrb	r3, [r7, #23]
 800c9e2:	3301      	adds	r3, #1
 800c9e4:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800c9e6:	7dfb      	ldrb	r3, [r7, #23]
 800c9e8:	68ba      	ldr	r2, [r7, #8]
 800c9ea:	4413      	add	r3, r2
 800c9ec:	2203      	movs	r2, #3
 800c9ee:	701a      	strb	r2, [r3, #0]
  idx++;
 800c9f0:	7dfb      	ldrb	r3, [r7, #23]
 800c9f2:	3301      	adds	r3, #1
 800c9f4:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800c9f6:	e013      	b.n	800ca20 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800c9f8:	7dfb      	ldrb	r3, [r7, #23]
 800c9fa:	68ba      	ldr	r2, [r7, #8]
 800c9fc:	4413      	add	r3, r2
 800c9fe:	693a      	ldr	r2, [r7, #16]
 800ca00:	7812      	ldrb	r2, [r2, #0]
 800ca02:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800ca04:	693b      	ldr	r3, [r7, #16]
 800ca06:	3301      	adds	r3, #1
 800ca08:	613b      	str	r3, [r7, #16]
    idx++;
 800ca0a:	7dfb      	ldrb	r3, [r7, #23]
 800ca0c:	3301      	adds	r3, #1
 800ca0e:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800ca10:	7dfb      	ldrb	r3, [r7, #23]
 800ca12:	68ba      	ldr	r2, [r7, #8]
 800ca14:	4413      	add	r3, r2
 800ca16:	2200      	movs	r2, #0
 800ca18:	701a      	strb	r2, [r3, #0]
    idx++;
 800ca1a:	7dfb      	ldrb	r3, [r7, #23]
 800ca1c:	3301      	adds	r3, #1
 800ca1e:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800ca20:	693b      	ldr	r3, [r7, #16]
 800ca22:	781b      	ldrb	r3, [r3, #0]
 800ca24:	2b00      	cmp	r3, #0
 800ca26:	d1e7      	bne.n	800c9f8 <USBD_GetString+0x52>
 800ca28:	e000      	b.n	800ca2c <USBD_GetString+0x86>
    return;
 800ca2a:	bf00      	nop
  }
}
 800ca2c:	3718      	adds	r7, #24
 800ca2e:	46bd      	mov	sp, r7
 800ca30:	bd80      	pop	{r7, pc}

0800ca32 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800ca32:	b480      	push	{r7}
 800ca34:	b085      	sub	sp, #20
 800ca36:	af00      	add	r7, sp, #0
 800ca38:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800ca3a:	2300      	movs	r3, #0
 800ca3c:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800ca42:	e005      	b.n	800ca50 <USBD_GetLen+0x1e>
  {
    len++;
 800ca44:	7bfb      	ldrb	r3, [r7, #15]
 800ca46:	3301      	adds	r3, #1
 800ca48:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800ca4a:	68bb      	ldr	r3, [r7, #8]
 800ca4c:	3301      	adds	r3, #1
 800ca4e:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800ca50:	68bb      	ldr	r3, [r7, #8]
 800ca52:	781b      	ldrb	r3, [r3, #0]
 800ca54:	2b00      	cmp	r3, #0
 800ca56:	d1f5      	bne.n	800ca44 <USBD_GetLen+0x12>
  }

  return len;
 800ca58:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca5a:	4618      	mov	r0, r3
 800ca5c:	3714      	adds	r7, #20
 800ca5e:	46bd      	mov	sp, r7
 800ca60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca64:	4770      	bx	lr

0800ca66 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800ca66:	b580      	push	{r7, lr}
 800ca68:	b084      	sub	sp, #16
 800ca6a:	af00      	add	r7, sp, #0
 800ca6c:	60f8      	str	r0, [r7, #12]
 800ca6e:	60b9      	str	r1, [r7, #8]
 800ca70:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800ca72:	68fb      	ldr	r3, [r7, #12]
 800ca74:	2202      	movs	r2, #2
 800ca76:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800ca7a:	68fb      	ldr	r3, [r7, #12]
 800ca7c:	687a      	ldr	r2, [r7, #4]
 800ca7e:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800ca80:	68fb      	ldr	r3, [r7, #12]
 800ca82:	687a      	ldr	r2, [r7, #4]
 800ca84:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	68ba      	ldr	r2, [r7, #8]
 800ca8a:	2100      	movs	r1, #0
 800ca8c:	68f8      	ldr	r0, [r7, #12]
 800ca8e:	f000 fc7b 	bl	800d388 <USBD_LL_Transmit>

  return USBD_OK;
 800ca92:	2300      	movs	r3, #0
}
 800ca94:	4618      	mov	r0, r3
 800ca96:	3710      	adds	r7, #16
 800ca98:	46bd      	mov	sp, r7
 800ca9a:	bd80      	pop	{r7, pc}

0800ca9c <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800ca9c:	b580      	push	{r7, lr}
 800ca9e:	b084      	sub	sp, #16
 800caa0:	af00      	add	r7, sp, #0
 800caa2:	60f8      	str	r0, [r7, #12]
 800caa4:	60b9      	str	r1, [r7, #8]
 800caa6:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	68ba      	ldr	r2, [r7, #8]
 800caac:	2100      	movs	r1, #0
 800caae:	68f8      	ldr	r0, [r7, #12]
 800cab0:	f000 fc6a 	bl	800d388 <USBD_LL_Transmit>

  return USBD_OK;
 800cab4:	2300      	movs	r3, #0
}
 800cab6:	4618      	mov	r0, r3
 800cab8:	3710      	adds	r7, #16
 800caba:	46bd      	mov	sp, r7
 800cabc:	bd80      	pop	{r7, pc}

0800cabe <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800cabe:	b580      	push	{r7, lr}
 800cac0:	b084      	sub	sp, #16
 800cac2:	af00      	add	r7, sp, #0
 800cac4:	60f8      	str	r0, [r7, #12]
 800cac6:	60b9      	str	r1, [r7, #8]
 800cac8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800caca:	68fb      	ldr	r3, [r7, #12]
 800cacc:	2203      	movs	r2, #3
 800cace:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800cad2:	68fb      	ldr	r3, [r7, #12]
 800cad4:	687a      	ldr	r2, [r7, #4]
 800cad6:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800cada:	68fb      	ldr	r3, [r7, #12]
 800cadc:	687a      	ldr	r2, [r7, #4]
 800cade:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	68ba      	ldr	r2, [r7, #8]
 800cae6:	2100      	movs	r1, #0
 800cae8:	68f8      	ldr	r0, [r7, #12]
 800caea:	f000 fc6e 	bl	800d3ca <USBD_LL_PrepareReceive>

  return USBD_OK;
 800caee:	2300      	movs	r3, #0
}
 800caf0:	4618      	mov	r0, r3
 800caf2:	3710      	adds	r7, #16
 800caf4:	46bd      	mov	sp, r7
 800caf6:	bd80      	pop	{r7, pc}

0800caf8 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800caf8:	b580      	push	{r7, lr}
 800cafa:	b084      	sub	sp, #16
 800cafc:	af00      	add	r7, sp, #0
 800cafe:	60f8      	str	r0, [r7, #12]
 800cb00:	60b9      	str	r1, [r7, #8]
 800cb02:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	68ba      	ldr	r2, [r7, #8]
 800cb08:	2100      	movs	r1, #0
 800cb0a:	68f8      	ldr	r0, [r7, #12]
 800cb0c:	f000 fc5d 	bl	800d3ca <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cb10:	2300      	movs	r3, #0
}
 800cb12:	4618      	mov	r0, r3
 800cb14:	3710      	adds	r7, #16
 800cb16:	46bd      	mov	sp, r7
 800cb18:	bd80      	pop	{r7, pc}

0800cb1a <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800cb1a:	b580      	push	{r7, lr}
 800cb1c:	b082      	sub	sp, #8
 800cb1e:	af00      	add	r7, sp, #0
 800cb20:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	2204      	movs	r2, #4
 800cb26:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800cb2a:	2300      	movs	r3, #0
 800cb2c:	2200      	movs	r2, #0
 800cb2e:	2100      	movs	r1, #0
 800cb30:	6878      	ldr	r0, [r7, #4]
 800cb32:	f000 fc29 	bl	800d388 <USBD_LL_Transmit>

  return USBD_OK;
 800cb36:	2300      	movs	r3, #0
}
 800cb38:	4618      	mov	r0, r3
 800cb3a:	3708      	adds	r7, #8
 800cb3c:	46bd      	mov	sp, r7
 800cb3e:	bd80      	pop	{r7, pc}

0800cb40 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800cb40:	b580      	push	{r7, lr}
 800cb42:	b082      	sub	sp, #8
 800cb44:	af00      	add	r7, sp, #0
 800cb46:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	2205      	movs	r2, #5
 800cb4c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800cb50:	2300      	movs	r3, #0
 800cb52:	2200      	movs	r2, #0
 800cb54:	2100      	movs	r1, #0
 800cb56:	6878      	ldr	r0, [r7, #4]
 800cb58:	f000 fc37 	bl	800d3ca <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cb5c:	2300      	movs	r3, #0
}
 800cb5e:	4618      	mov	r0, r3
 800cb60:	3708      	adds	r7, #8
 800cb62:	46bd      	mov	sp, r7
 800cb64:	bd80      	pop	{r7, pc}
	...

0800cb68 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 800cb68:	b580      	push	{r7, lr}
 800cb6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 800cb6c:	2200      	movs	r2, #0
 800cb6e:	4912      	ldr	r1, [pc, #72]	; (800cbb8 <MX_USB_Device_Init+0x50>)
 800cb70:	4812      	ldr	r0, [pc, #72]	; (800cbbc <MX_USB_Device_Init+0x54>)
 800cb72:	f7fe fed9 	bl	800b928 <USBD_Init>
 800cb76:	4603      	mov	r3, r0
 800cb78:	2b00      	cmp	r3, #0
 800cb7a:	d001      	beq.n	800cb80 <MX_USB_Device_Init+0x18>
    Error_Handler();
 800cb7c:	f7f4 fa9a 	bl	80010b4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 800cb80:	490f      	ldr	r1, [pc, #60]	; (800cbc0 <MX_USB_Device_Init+0x58>)
 800cb82:	480e      	ldr	r0, [pc, #56]	; (800cbbc <MX_USB_Device_Init+0x54>)
 800cb84:	f7fe ff00 	bl	800b988 <USBD_RegisterClass>
 800cb88:	4603      	mov	r3, r0
 800cb8a:	2b00      	cmp	r3, #0
 800cb8c:	d001      	beq.n	800cb92 <MX_USB_Device_Init+0x2a>
    Error_Handler();
 800cb8e:	f7f4 fa91 	bl	80010b4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 800cb92:	490c      	ldr	r1, [pc, #48]	; (800cbc4 <MX_USB_Device_Init+0x5c>)
 800cb94:	4809      	ldr	r0, [pc, #36]	; (800cbbc <MX_USB_Device_Init+0x54>)
 800cb96:	f7fe fe51 	bl	800b83c <USBD_CDC_RegisterInterface>
 800cb9a:	4603      	mov	r3, r0
 800cb9c:	2b00      	cmp	r3, #0
 800cb9e:	d001      	beq.n	800cba4 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 800cba0:	f7f4 fa88 	bl	80010b4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800cba4:	4805      	ldr	r0, [pc, #20]	; (800cbbc <MX_USB_Device_Init+0x54>)
 800cba6:	f7fe ff16 	bl	800b9d6 <USBD_Start>
 800cbaa:	4603      	mov	r3, r0
 800cbac:	2b00      	cmp	r3, #0
 800cbae:	d001      	beq.n	800cbb4 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 800cbb0:	f7f4 fa80 	bl	80010b4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 800cbb4:	bf00      	nop
 800cbb6:	bd80      	pop	{r7, pc}
 800cbb8:	20000130 	.word	0x20000130
 800cbbc:	20000740 	.word	0x20000740
 800cbc0:	20000018 	.word	0x20000018
 800cbc4:	2000011c 	.word	0x2000011c

0800cbc8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800cbc8:	b580      	push	{r7, lr}
 800cbca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800cbcc:	2200      	movs	r2, #0
 800cbce:	4905      	ldr	r1, [pc, #20]	; (800cbe4 <CDC_Init_FS+0x1c>)
 800cbd0:	4805      	ldr	r0, [pc, #20]	; (800cbe8 <CDC_Init_FS+0x20>)
 800cbd2:	f7fe fe48 	bl	800b866 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800cbd6:	4905      	ldr	r1, [pc, #20]	; (800cbec <CDC_Init_FS+0x24>)
 800cbd8:	4803      	ldr	r0, [pc, #12]	; (800cbe8 <CDC_Init_FS+0x20>)
 800cbda:	f7fe fe62 	bl	800b8a2 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800cbde:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800cbe0:	4618      	mov	r0, r3
 800cbe2:	bd80      	pop	{r7, pc}
 800cbe4:	20001210 	.word	0x20001210
 800cbe8:	20000740 	.word	0x20000740
 800cbec:	20000a10 	.word	0x20000a10

0800cbf0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800cbf0:	b480      	push	{r7}
 800cbf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800cbf4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800cbf6:	4618      	mov	r0, r3
 800cbf8:	46bd      	mov	sp, r7
 800cbfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbfe:	4770      	bx	lr

0800cc00 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800cc00:	b480      	push	{r7}
 800cc02:	b083      	sub	sp, #12
 800cc04:	af00      	add	r7, sp, #0
 800cc06:	4603      	mov	r3, r0
 800cc08:	6039      	str	r1, [r7, #0]
 800cc0a:	71fb      	strb	r3, [r7, #7]
 800cc0c:	4613      	mov	r3, r2
 800cc0e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800cc10:	79fb      	ldrb	r3, [r7, #7]
 800cc12:	2b23      	cmp	r3, #35	; 0x23
 800cc14:	d84a      	bhi.n	800ccac <CDC_Control_FS+0xac>
 800cc16:	a201      	add	r2, pc, #4	; (adr r2, 800cc1c <CDC_Control_FS+0x1c>)
 800cc18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc1c:	0800ccad 	.word	0x0800ccad
 800cc20:	0800ccad 	.word	0x0800ccad
 800cc24:	0800ccad 	.word	0x0800ccad
 800cc28:	0800ccad 	.word	0x0800ccad
 800cc2c:	0800ccad 	.word	0x0800ccad
 800cc30:	0800ccad 	.word	0x0800ccad
 800cc34:	0800ccad 	.word	0x0800ccad
 800cc38:	0800ccad 	.word	0x0800ccad
 800cc3c:	0800ccad 	.word	0x0800ccad
 800cc40:	0800ccad 	.word	0x0800ccad
 800cc44:	0800ccad 	.word	0x0800ccad
 800cc48:	0800ccad 	.word	0x0800ccad
 800cc4c:	0800ccad 	.word	0x0800ccad
 800cc50:	0800ccad 	.word	0x0800ccad
 800cc54:	0800ccad 	.word	0x0800ccad
 800cc58:	0800ccad 	.word	0x0800ccad
 800cc5c:	0800ccad 	.word	0x0800ccad
 800cc60:	0800ccad 	.word	0x0800ccad
 800cc64:	0800ccad 	.word	0x0800ccad
 800cc68:	0800ccad 	.word	0x0800ccad
 800cc6c:	0800ccad 	.word	0x0800ccad
 800cc70:	0800ccad 	.word	0x0800ccad
 800cc74:	0800ccad 	.word	0x0800ccad
 800cc78:	0800ccad 	.word	0x0800ccad
 800cc7c:	0800ccad 	.word	0x0800ccad
 800cc80:	0800ccad 	.word	0x0800ccad
 800cc84:	0800ccad 	.word	0x0800ccad
 800cc88:	0800ccad 	.word	0x0800ccad
 800cc8c:	0800ccad 	.word	0x0800ccad
 800cc90:	0800ccad 	.word	0x0800ccad
 800cc94:	0800ccad 	.word	0x0800ccad
 800cc98:	0800ccad 	.word	0x0800ccad
 800cc9c:	0800ccad 	.word	0x0800ccad
 800cca0:	0800ccad 	.word	0x0800ccad
 800cca4:	0800ccad 	.word	0x0800ccad
 800cca8:	0800ccad 	.word	0x0800ccad
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800ccac:	bf00      	nop
  }

  return (USBD_OK);
 800ccae:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800ccb0:	4618      	mov	r0, r3
 800ccb2:	370c      	adds	r7, #12
 800ccb4:	46bd      	mov	sp, r7
 800ccb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccba:	4770      	bx	lr

0800ccbc <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800ccbc:	b580      	push	{r7, lr}
 800ccbe:	b082      	sub	sp, #8
 800ccc0:	af00      	add	r7, sp, #0
 800ccc2:	6078      	str	r0, [r7, #4]
 800ccc4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800ccc6:	6879      	ldr	r1, [r7, #4]
 800ccc8:	4805      	ldr	r0, [pc, #20]	; (800cce0 <CDC_Receive_FS+0x24>)
 800ccca:	f7fe fdea 	bl	800b8a2 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800ccce:	4804      	ldr	r0, [pc, #16]	; (800cce0 <CDC_Receive_FS+0x24>)
 800ccd0:	f7fe fe00 	bl	800b8d4 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800ccd4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800ccd6:	4618      	mov	r0, r3
 800ccd8:	3708      	adds	r7, #8
 800ccda:	46bd      	mov	sp, r7
 800ccdc:	bd80      	pop	{r7, pc}
 800ccde:	bf00      	nop
 800cce0:	20000740 	.word	0x20000740

0800cce4 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800cce4:	b480      	push	{r7}
 800cce6:	b087      	sub	sp, #28
 800cce8:	af00      	add	r7, sp, #0
 800ccea:	60f8      	str	r0, [r7, #12]
 800ccec:	60b9      	str	r1, [r7, #8]
 800ccee:	4613      	mov	r3, r2
 800ccf0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800ccf2:	2300      	movs	r3, #0
 800ccf4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800ccf6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ccfa:	4618      	mov	r0, r3
 800ccfc:	371c      	adds	r7, #28
 800ccfe:	46bd      	mov	sp, r7
 800cd00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd04:	4770      	bx	lr
	...

0800cd08 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cd08:	b480      	push	{r7}
 800cd0a:	b083      	sub	sp, #12
 800cd0c:	af00      	add	r7, sp, #0
 800cd0e:	4603      	mov	r3, r0
 800cd10:	6039      	str	r1, [r7, #0]
 800cd12:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 800cd14:	683b      	ldr	r3, [r7, #0]
 800cd16:	2212      	movs	r2, #18
 800cd18:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 800cd1a:	4b03      	ldr	r3, [pc, #12]	; (800cd28 <USBD_CDC_DeviceDescriptor+0x20>)
}
 800cd1c:	4618      	mov	r0, r3
 800cd1e:	370c      	adds	r7, #12
 800cd20:	46bd      	mov	sp, r7
 800cd22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd26:	4770      	bx	lr
 800cd28:	20000150 	.word	0x20000150

0800cd2c <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cd2c:	b480      	push	{r7}
 800cd2e:	b083      	sub	sp, #12
 800cd30:	af00      	add	r7, sp, #0
 800cd32:	4603      	mov	r3, r0
 800cd34:	6039      	str	r1, [r7, #0]
 800cd36:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800cd38:	683b      	ldr	r3, [r7, #0]
 800cd3a:	2204      	movs	r2, #4
 800cd3c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800cd3e:	4b03      	ldr	r3, [pc, #12]	; (800cd4c <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 800cd40:	4618      	mov	r0, r3
 800cd42:	370c      	adds	r7, #12
 800cd44:	46bd      	mov	sp, r7
 800cd46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd4a:	4770      	bx	lr
 800cd4c:	20000164 	.word	0x20000164

0800cd50 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cd50:	b580      	push	{r7, lr}
 800cd52:	b082      	sub	sp, #8
 800cd54:	af00      	add	r7, sp, #0
 800cd56:	4603      	mov	r3, r0
 800cd58:	6039      	str	r1, [r7, #0]
 800cd5a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800cd5c:	79fb      	ldrb	r3, [r7, #7]
 800cd5e:	2b00      	cmp	r3, #0
 800cd60:	d105      	bne.n	800cd6e <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800cd62:	683a      	ldr	r2, [r7, #0]
 800cd64:	4907      	ldr	r1, [pc, #28]	; (800cd84 <USBD_CDC_ProductStrDescriptor+0x34>)
 800cd66:	4808      	ldr	r0, [pc, #32]	; (800cd88 <USBD_CDC_ProductStrDescriptor+0x38>)
 800cd68:	f7ff fe1d 	bl	800c9a6 <USBD_GetString>
 800cd6c:	e004      	b.n	800cd78 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800cd6e:	683a      	ldr	r2, [r7, #0]
 800cd70:	4904      	ldr	r1, [pc, #16]	; (800cd84 <USBD_CDC_ProductStrDescriptor+0x34>)
 800cd72:	4805      	ldr	r0, [pc, #20]	; (800cd88 <USBD_CDC_ProductStrDescriptor+0x38>)
 800cd74:	f7ff fe17 	bl	800c9a6 <USBD_GetString>
  }
  return USBD_StrDesc;
 800cd78:	4b02      	ldr	r3, [pc, #8]	; (800cd84 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 800cd7a:	4618      	mov	r0, r3
 800cd7c:	3708      	adds	r7, #8
 800cd7e:	46bd      	mov	sp, r7
 800cd80:	bd80      	pop	{r7, pc}
 800cd82:	bf00      	nop
 800cd84:	20001a10 	.word	0x20001a10
 800cd88:	0800d5a4 	.word	0x0800d5a4

0800cd8c <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cd8c:	b580      	push	{r7, lr}
 800cd8e:	b082      	sub	sp, #8
 800cd90:	af00      	add	r7, sp, #0
 800cd92:	4603      	mov	r3, r0
 800cd94:	6039      	str	r1, [r7, #0]
 800cd96:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800cd98:	683a      	ldr	r2, [r7, #0]
 800cd9a:	4904      	ldr	r1, [pc, #16]	; (800cdac <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 800cd9c:	4804      	ldr	r0, [pc, #16]	; (800cdb0 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 800cd9e:	f7ff fe02 	bl	800c9a6 <USBD_GetString>
  return USBD_StrDesc;
 800cda2:	4b02      	ldr	r3, [pc, #8]	; (800cdac <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 800cda4:	4618      	mov	r0, r3
 800cda6:	3708      	adds	r7, #8
 800cda8:	46bd      	mov	sp, r7
 800cdaa:	bd80      	pop	{r7, pc}
 800cdac:	20001a10 	.word	0x20001a10
 800cdb0:	0800d5bc 	.word	0x0800d5bc

0800cdb4 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cdb4:	b580      	push	{r7, lr}
 800cdb6:	b082      	sub	sp, #8
 800cdb8:	af00      	add	r7, sp, #0
 800cdba:	4603      	mov	r3, r0
 800cdbc:	6039      	str	r1, [r7, #0]
 800cdbe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800cdc0:	683b      	ldr	r3, [r7, #0]
 800cdc2:	221a      	movs	r2, #26
 800cdc4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800cdc6:	f000 f843 	bl	800ce50 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800cdca:	4b02      	ldr	r3, [pc, #8]	; (800cdd4 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 800cdcc:	4618      	mov	r0, r3
 800cdce:	3708      	adds	r7, #8
 800cdd0:	46bd      	mov	sp, r7
 800cdd2:	bd80      	pop	{r7, pc}
 800cdd4:	20000168 	.word	0x20000168

0800cdd8 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cdd8:	b580      	push	{r7, lr}
 800cdda:	b082      	sub	sp, #8
 800cddc:	af00      	add	r7, sp, #0
 800cdde:	4603      	mov	r3, r0
 800cde0:	6039      	str	r1, [r7, #0]
 800cde2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800cde4:	79fb      	ldrb	r3, [r7, #7]
 800cde6:	2b00      	cmp	r3, #0
 800cde8:	d105      	bne.n	800cdf6 <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800cdea:	683a      	ldr	r2, [r7, #0]
 800cdec:	4907      	ldr	r1, [pc, #28]	; (800ce0c <USBD_CDC_ConfigStrDescriptor+0x34>)
 800cdee:	4808      	ldr	r0, [pc, #32]	; (800ce10 <USBD_CDC_ConfigStrDescriptor+0x38>)
 800cdf0:	f7ff fdd9 	bl	800c9a6 <USBD_GetString>
 800cdf4:	e004      	b.n	800ce00 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800cdf6:	683a      	ldr	r2, [r7, #0]
 800cdf8:	4904      	ldr	r1, [pc, #16]	; (800ce0c <USBD_CDC_ConfigStrDescriptor+0x34>)
 800cdfa:	4805      	ldr	r0, [pc, #20]	; (800ce10 <USBD_CDC_ConfigStrDescriptor+0x38>)
 800cdfc:	f7ff fdd3 	bl	800c9a6 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ce00:	4b02      	ldr	r3, [pc, #8]	; (800ce0c <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 800ce02:	4618      	mov	r0, r3
 800ce04:	3708      	adds	r7, #8
 800ce06:	46bd      	mov	sp, r7
 800ce08:	bd80      	pop	{r7, pc}
 800ce0a:	bf00      	nop
 800ce0c:	20001a10 	.word	0x20001a10
 800ce10:	0800d5d0 	.word	0x0800d5d0

0800ce14 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ce14:	b580      	push	{r7, lr}
 800ce16:	b082      	sub	sp, #8
 800ce18:	af00      	add	r7, sp, #0
 800ce1a:	4603      	mov	r3, r0
 800ce1c:	6039      	str	r1, [r7, #0]
 800ce1e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ce20:	79fb      	ldrb	r3, [r7, #7]
 800ce22:	2b00      	cmp	r3, #0
 800ce24:	d105      	bne.n	800ce32 <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800ce26:	683a      	ldr	r2, [r7, #0]
 800ce28:	4907      	ldr	r1, [pc, #28]	; (800ce48 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800ce2a:	4808      	ldr	r0, [pc, #32]	; (800ce4c <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800ce2c:	f7ff fdbb 	bl	800c9a6 <USBD_GetString>
 800ce30:	e004      	b.n	800ce3c <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800ce32:	683a      	ldr	r2, [r7, #0]
 800ce34:	4904      	ldr	r1, [pc, #16]	; (800ce48 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800ce36:	4805      	ldr	r0, [pc, #20]	; (800ce4c <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800ce38:	f7ff fdb5 	bl	800c9a6 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ce3c:	4b02      	ldr	r3, [pc, #8]	; (800ce48 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 800ce3e:	4618      	mov	r0, r3
 800ce40:	3708      	adds	r7, #8
 800ce42:	46bd      	mov	sp, r7
 800ce44:	bd80      	pop	{r7, pc}
 800ce46:	bf00      	nop
 800ce48:	20001a10 	.word	0x20001a10
 800ce4c:	0800d5dc 	.word	0x0800d5dc

0800ce50 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800ce50:	b580      	push	{r7, lr}
 800ce52:	b084      	sub	sp, #16
 800ce54:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800ce56:	4b0f      	ldr	r3, [pc, #60]	; (800ce94 <Get_SerialNum+0x44>)
 800ce58:	681b      	ldr	r3, [r3, #0]
 800ce5a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800ce5c:	4b0e      	ldr	r3, [pc, #56]	; (800ce98 <Get_SerialNum+0x48>)
 800ce5e:	681b      	ldr	r3, [r3, #0]
 800ce60:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800ce62:	4b0e      	ldr	r3, [pc, #56]	; (800ce9c <Get_SerialNum+0x4c>)
 800ce64:	681b      	ldr	r3, [r3, #0]
 800ce66:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800ce68:	68fa      	ldr	r2, [r7, #12]
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	4413      	add	r3, r2
 800ce6e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800ce70:	68fb      	ldr	r3, [r7, #12]
 800ce72:	2b00      	cmp	r3, #0
 800ce74:	d009      	beq.n	800ce8a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800ce76:	2208      	movs	r2, #8
 800ce78:	4909      	ldr	r1, [pc, #36]	; (800cea0 <Get_SerialNum+0x50>)
 800ce7a:	68f8      	ldr	r0, [r7, #12]
 800ce7c:	f000 f814 	bl	800cea8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800ce80:	2204      	movs	r2, #4
 800ce82:	4908      	ldr	r1, [pc, #32]	; (800cea4 <Get_SerialNum+0x54>)
 800ce84:	68b8      	ldr	r0, [r7, #8]
 800ce86:	f000 f80f 	bl	800cea8 <IntToUnicode>
  }
}
 800ce8a:	bf00      	nop
 800ce8c:	3710      	adds	r7, #16
 800ce8e:	46bd      	mov	sp, r7
 800ce90:	bd80      	pop	{r7, pc}
 800ce92:	bf00      	nop
 800ce94:	1fff7590 	.word	0x1fff7590
 800ce98:	1fff7594 	.word	0x1fff7594
 800ce9c:	1fff7598 	.word	0x1fff7598
 800cea0:	2000016a 	.word	0x2000016a
 800cea4:	2000017a 	.word	0x2000017a

0800cea8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800cea8:	b480      	push	{r7}
 800ceaa:	b087      	sub	sp, #28
 800ceac:	af00      	add	r7, sp, #0
 800ceae:	60f8      	str	r0, [r7, #12]
 800ceb0:	60b9      	str	r1, [r7, #8]
 800ceb2:	4613      	mov	r3, r2
 800ceb4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800ceb6:	2300      	movs	r3, #0
 800ceb8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800ceba:	2300      	movs	r3, #0
 800cebc:	75fb      	strb	r3, [r7, #23]
 800cebe:	e027      	b.n	800cf10 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800cec0:	68fb      	ldr	r3, [r7, #12]
 800cec2:	0f1b      	lsrs	r3, r3, #28
 800cec4:	2b09      	cmp	r3, #9
 800cec6:	d80b      	bhi.n	800cee0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800cec8:	68fb      	ldr	r3, [r7, #12]
 800ceca:	0f1b      	lsrs	r3, r3, #28
 800cecc:	b2da      	uxtb	r2, r3
 800cece:	7dfb      	ldrb	r3, [r7, #23]
 800ced0:	005b      	lsls	r3, r3, #1
 800ced2:	4619      	mov	r1, r3
 800ced4:	68bb      	ldr	r3, [r7, #8]
 800ced6:	440b      	add	r3, r1
 800ced8:	3230      	adds	r2, #48	; 0x30
 800ceda:	b2d2      	uxtb	r2, r2
 800cedc:	701a      	strb	r2, [r3, #0]
 800cede:	e00a      	b.n	800cef6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800cee0:	68fb      	ldr	r3, [r7, #12]
 800cee2:	0f1b      	lsrs	r3, r3, #28
 800cee4:	b2da      	uxtb	r2, r3
 800cee6:	7dfb      	ldrb	r3, [r7, #23]
 800cee8:	005b      	lsls	r3, r3, #1
 800ceea:	4619      	mov	r1, r3
 800ceec:	68bb      	ldr	r3, [r7, #8]
 800ceee:	440b      	add	r3, r1
 800cef0:	3237      	adds	r2, #55	; 0x37
 800cef2:	b2d2      	uxtb	r2, r2
 800cef4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800cef6:	68fb      	ldr	r3, [r7, #12]
 800cef8:	011b      	lsls	r3, r3, #4
 800cefa:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800cefc:	7dfb      	ldrb	r3, [r7, #23]
 800cefe:	005b      	lsls	r3, r3, #1
 800cf00:	3301      	adds	r3, #1
 800cf02:	68ba      	ldr	r2, [r7, #8]
 800cf04:	4413      	add	r3, r2
 800cf06:	2200      	movs	r2, #0
 800cf08:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800cf0a:	7dfb      	ldrb	r3, [r7, #23]
 800cf0c:	3301      	adds	r3, #1
 800cf0e:	75fb      	strb	r3, [r7, #23]
 800cf10:	7dfa      	ldrb	r2, [r7, #23]
 800cf12:	79fb      	ldrb	r3, [r7, #7]
 800cf14:	429a      	cmp	r2, r3
 800cf16:	d3d3      	bcc.n	800cec0 <IntToUnicode+0x18>
  }
}
 800cf18:	bf00      	nop
 800cf1a:	bf00      	nop
 800cf1c:	371c      	adds	r7, #28
 800cf1e:	46bd      	mov	sp, r7
 800cf20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf24:	4770      	bx	lr
	...

0800cf28 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cf28:	b580      	push	{r7, lr}
 800cf2a:	b098      	sub	sp, #96	; 0x60
 800cf2c:	af00      	add	r7, sp, #0
 800cf2e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800cf30:	f107 030c 	add.w	r3, r7, #12
 800cf34:	2254      	movs	r2, #84	; 0x54
 800cf36:	2100      	movs	r1, #0
 800cf38:	4618      	mov	r0, r3
 800cf3a:	f000 fb1f 	bl	800d57c <memset>
  if(pcdHandle->Instance==USB)
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	681b      	ldr	r3, [r3, #0]
 800cf42:	4a15      	ldr	r2, [pc, #84]	; (800cf98 <HAL_PCD_MspInit+0x70>)
 800cf44:	4293      	cmp	r3, r2
 800cf46:	d122      	bne.n	800cf8e <HAL_PCD_MspInit+0x66>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800cf48:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800cf4c:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800cf4e:	2300      	movs	r3, #0
 800cf50:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800cf52:	f107 030c 	add.w	r3, r7, #12
 800cf56:	4618      	mov	r0, r3
 800cf58:	f7f9 f846 	bl	8005fe8 <HAL_RCCEx_PeriphCLKConfig>
 800cf5c:	4603      	mov	r3, r0
 800cf5e:	2b00      	cmp	r3, #0
 800cf60:	d001      	beq.n	800cf66 <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 800cf62:	f7f4 f8a7 	bl	80010b4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800cf66:	4b0d      	ldr	r3, [pc, #52]	; (800cf9c <HAL_PCD_MspInit+0x74>)
 800cf68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cf6a:	4a0c      	ldr	r2, [pc, #48]	; (800cf9c <HAL_PCD_MspInit+0x74>)
 800cf6c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800cf70:	6593      	str	r3, [r2, #88]	; 0x58
 800cf72:	4b0a      	ldr	r3, [pc, #40]	; (800cf9c <HAL_PCD_MspInit+0x74>)
 800cf74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cf76:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800cf7a:	60bb      	str	r3, [r7, #8]
 800cf7c:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 800cf7e:	2200      	movs	r2, #0
 800cf80:	2100      	movs	r1, #0
 800cf82:	2014      	movs	r0, #20
 800cf84:	f7f6 f962 	bl	800324c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800cf88:	2014      	movs	r0, #20
 800cf8a:	f7f6 f979 	bl	8003280 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800cf8e:	bf00      	nop
 800cf90:	3760      	adds	r7, #96	; 0x60
 800cf92:	46bd      	mov	sp, r7
 800cf94:	bd80      	pop	{r7, pc}
 800cf96:	bf00      	nop
 800cf98:	40005c00 	.word	0x40005c00
 800cf9c:	40021000 	.word	0x40021000

0800cfa0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cfa0:	b580      	push	{r7, lr}
 800cfa2:	b082      	sub	sp, #8
 800cfa4:	af00      	add	r7, sp, #0
 800cfa6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	f8d3 22f0 	ldr.w	r2, [r3, #752]	; 0x2f0
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800cfb4:	4619      	mov	r1, r3
 800cfb6:	4610      	mov	r0, r2
 800cfb8:	f7fe fd58 	bl	800ba6c <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 800cfbc:	bf00      	nop
 800cfbe:	3708      	adds	r7, #8
 800cfc0:	46bd      	mov	sp, r7
 800cfc2:	bd80      	pop	{r7, pc}

0800cfc4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cfc4:	b580      	push	{r7, lr}
 800cfc6:	b082      	sub	sp, #8
 800cfc8:	af00      	add	r7, sp, #0
 800cfca:	6078      	str	r0, [r7, #4]
 800cfcc:	460b      	mov	r3, r1
 800cfce:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 800cfd6:	78fa      	ldrb	r2, [r7, #3]
 800cfd8:	6879      	ldr	r1, [r7, #4]
 800cfda:	4613      	mov	r3, r2
 800cfdc:	009b      	lsls	r3, r3, #2
 800cfde:	4413      	add	r3, r2
 800cfe0:	00db      	lsls	r3, r3, #3
 800cfe2:	440b      	add	r3, r1
 800cfe4:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800cfe8:	681a      	ldr	r2, [r3, #0]
 800cfea:	78fb      	ldrb	r3, [r7, #3]
 800cfec:	4619      	mov	r1, r3
 800cfee:	f7fe fd92 	bl	800bb16 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 800cff2:	bf00      	nop
 800cff4:	3708      	adds	r7, #8
 800cff6:	46bd      	mov	sp, r7
 800cff8:	bd80      	pop	{r7, pc}

0800cffa <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cffa:	b580      	push	{r7, lr}
 800cffc:	b082      	sub	sp, #8
 800cffe:	af00      	add	r7, sp, #0
 800d000:	6078      	str	r0, [r7, #4]
 800d002:	460b      	mov	r3, r1
 800d004:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 800d00c:	78fa      	ldrb	r2, [r7, #3]
 800d00e:	6879      	ldr	r1, [r7, #4]
 800d010:	4613      	mov	r3, r2
 800d012:	009b      	lsls	r3, r3, #2
 800d014:	4413      	add	r3, r2
 800d016:	00db      	lsls	r3, r3, #3
 800d018:	440b      	add	r3, r1
 800d01a:	333c      	adds	r3, #60	; 0x3c
 800d01c:	681a      	ldr	r2, [r3, #0]
 800d01e:	78fb      	ldrb	r3, [r7, #3]
 800d020:	4619      	mov	r1, r3
 800d022:	f7fe fddb 	bl	800bbdc <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800d026:	bf00      	nop
 800d028:	3708      	adds	r7, #8
 800d02a:	46bd      	mov	sp, r7
 800d02c:	bd80      	pop	{r7, pc}

0800d02e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d02e:	b580      	push	{r7, lr}
 800d030:	b082      	sub	sp, #8
 800d032:	af00      	add	r7, sp, #0
 800d034:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800d03c:	4618      	mov	r0, r3
 800d03e:	f7fe feef 	bl	800be20 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800d042:	bf00      	nop
 800d044:	3708      	adds	r7, #8
 800d046:	46bd      	mov	sp, r7
 800d048:	bd80      	pop	{r7, pc}

0800d04a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d04a:	b580      	push	{r7, lr}
 800d04c:	b084      	sub	sp, #16
 800d04e:	af00      	add	r7, sp, #0
 800d050:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800d052:	2301      	movs	r3, #1
 800d054:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	689b      	ldr	r3, [r3, #8]
 800d05a:	2b02      	cmp	r3, #2
 800d05c:	d001      	beq.n	800d062 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800d05e:	f7f4 f829 	bl	80010b4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800d068:	7bfa      	ldrb	r2, [r7, #15]
 800d06a:	4611      	mov	r1, r2
 800d06c:	4618      	mov	r0, r3
 800d06e:	f7fe fe99 	bl	800bda4 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800d078:	4618      	mov	r0, r3
 800d07a:	f7fe fe45 	bl	800bd08 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800d07e:	bf00      	nop
 800d080:	3710      	adds	r7, #16
 800d082:	46bd      	mov	sp, r7
 800d084:	bd80      	pop	{r7, pc}
	...

0800d088 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d088:	b580      	push	{r7, lr}
 800d08a:	b082      	sub	sp, #8
 800d08c:	af00      	add	r7, sp, #0
 800d08e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800d096:	4618      	mov	r0, r3
 800d098:	f7fe fe94 	bl	800bdc4 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	699b      	ldr	r3, [r3, #24]
 800d0a0:	2b00      	cmp	r3, #0
 800d0a2:	d005      	beq.n	800d0b0 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d0a4:	4b04      	ldr	r3, [pc, #16]	; (800d0b8 <HAL_PCD_SuspendCallback+0x30>)
 800d0a6:	691b      	ldr	r3, [r3, #16]
 800d0a8:	4a03      	ldr	r2, [pc, #12]	; (800d0b8 <HAL_PCD_SuspendCallback+0x30>)
 800d0aa:	f043 0306 	orr.w	r3, r3, #6
 800d0ae:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 800d0b0:	bf00      	nop
 800d0b2:	3708      	adds	r7, #8
 800d0b4:	46bd      	mov	sp, r7
 800d0b6:	bd80      	pop	{r7, pc}
 800d0b8:	e000ed00 	.word	0xe000ed00

0800d0bc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d0bc:	b580      	push	{r7, lr}
 800d0be:	b082      	sub	sp, #8
 800d0c0:	af00      	add	r7, sp, #0
 800d0c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	699b      	ldr	r3, [r3, #24]
 800d0c8:	2b00      	cmp	r3, #0
 800d0ca:	d007      	beq.n	800d0dc <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d0cc:	4b08      	ldr	r3, [pc, #32]	; (800d0f0 <HAL_PCD_ResumeCallback+0x34>)
 800d0ce:	691b      	ldr	r3, [r3, #16]
 800d0d0:	4a07      	ldr	r2, [pc, #28]	; (800d0f0 <HAL_PCD_ResumeCallback+0x34>)
 800d0d2:	f023 0306 	bic.w	r3, r3, #6
 800d0d6:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800d0d8:	f000 f9fa 	bl	800d4d0 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800d0e2:	4618      	mov	r0, r3
 800d0e4:	f7fe fe84 	bl	800bdf0 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 800d0e8:	bf00      	nop
 800d0ea:	3708      	adds	r7, #8
 800d0ec:	46bd      	mov	sp, r7
 800d0ee:	bd80      	pop	{r7, pc}
 800d0f0:	e000ed00 	.word	0xe000ed00

0800d0f4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800d0f4:	b580      	push	{r7, lr}
 800d0f6:	b082      	sub	sp, #8
 800d0f8:	af00      	add	r7, sp, #0
 800d0fa:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 800d0fc:	4a2b      	ldr	r2, [pc, #172]	; (800d1ac <USBD_LL_Init+0xb8>)
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	f8c2 32f0 	str.w	r3, [r2, #752]	; 0x2f0
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	4a29      	ldr	r2, [pc, #164]	; (800d1ac <USBD_LL_Init+0xb8>)
 800d108:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_FS.Instance = USB;
 800d10c:	4b27      	ldr	r3, [pc, #156]	; (800d1ac <USBD_LL_Init+0xb8>)
 800d10e:	4a28      	ldr	r2, [pc, #160]	; (800d1b0 <USBD_LL_Init+0xbc>)
 800d110:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800d112:	4b26      	ldr	r3, [pc, #152]	; (800d1ac <USBD_LL_Init+0xb8>)
 800d114:	2208      	movs	r2, #8
 800d116:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800d118:	4b24      	ldr	r3, [pc, #144]	; (800d1ac <USBD_LL_Init+0xb8>)
 800d11a:	2202      	movs	r2, #2
 800d11c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800d11e:	4b23      	ldr	r3, [pc, #140]	; (800d1ac <USBD_LL_Init+0xb8>)
 800d120:	2202      	movs	r2, #2
 800d122:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800d124:	4b21      	ldr	r3, [pc, #132]	; (800d1ac <USBD_LL_Init+0xb8>)
 800d126:	2200      	movs	r2, #0
 800d128:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800d12a:	4b20      	ldr	r3, [pc, #128]	; (800d1ac <USBD_LL_Init+0xb8>)
 800d12c:	2200      	movs	r2, #0
 800d12e:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800d130:	4b1e      	ldr	r3, [pc, #120]	; (800d1ac <USBD_LL_Init+0xb8>)
 800d132:	2200      	movs	r2, #0
 800d134:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800d136:	4b1d      	ldr	r3, [pc, #116]	; (800d1ac <USBD_LL_Init+0xb8>)
 800d138:	2200      	movs	r2, #0
 800d13a:	621a      	str	r2, [r3, #32]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800d13c:	481b      	ldr	r0, [pc, #108]	; (800d1ac <USBD_LL_Init+0xb8>)
 800d13e:	f7f6 fc19 	bl	8003974 <HAL_PCD_Init>
 800d142:	4603      	mov	r3, r0
 800d144:	2b00      	cmp	r3, #0
 800d146:	d001      	beq.n	800d14c <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 800d148:	f7f3 ffb4 	bl	80010b4 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800d152:	2318      	movs	r3, #24
 800d154:	2200      	movs	r2, #0
 800d156:	2100      	movs	r1, #0
 800d158:	f7f8 f8d2 	bl	8005300 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800d162:	2358      	movs	r3, #88	; 0x58
 800d164:	2200      	movs	r2, #0
 800d166:	2180      	movs	r1, #128	; 0x80
 800d168:	f7f8 f8ca 	bl	8005300 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800d172:	23c0      	movs	r3, #192	; 0xc0
 800d174:	2200      	movs	r2, #0
 800d176:	2181      	movs	r1, #129	; 0x81
 800d178:	f7f8 f8c2 	bl	8005300 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800d182:	f44f 7388 	mov.w	r3, #272	; 0x110
 800d186:	2200      	movs	r2, #0
 800d188:	2101      	movs	r1, #1
 800d18a:	f7f8 f8b9 	bl	8005300 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800d18e:	687b      	ldr	r3, [r7, #4]
 800d190:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800d194:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d198:	2200      	movs	r2, #0
 800d19a:	2182      	movs	r1, #130	; 0x82
 800d19c:	f7f8 f8b0 	bl	8005300 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800d1a0:	2300      	movs	r3, #0
}
 800d1a2:	4618      	mov	r0, r3
 800d1a4:	3708      	adds	r7, #8
 800d1a6:	46bd      	mov	sp, r7
 800d1a8:	bd80      	pop	{r7, pc}
 800d1aa:	bf00      	nop
 800d1ac:	20001c10 	.word	0x20001c10
 800d1b0:	40005c00 	.word	0x40005c00

0800d1b4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800d1b4:	b580      	push	{r7, lr}
 800d1b6:	b084      	sub	sp, #16
 800d1b8:	af00      	add	r7, sp, #0
 800d1ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d1bc:	2300      	movs	r3, #0
 800d1be:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d1c0:	2300      	movs	r3, #0
 800d1c2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d1ca:	4618      	mov	r0, r3
 800d1cc:	f7f6 fcb7 	bl	8003b3e <HAL_PCD_Start>
 800d1d0:	4603      	mov	r3, r0
 800d1d2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d1d4:	7bfb      	ldrb	r3, [r7, #15]
 800d1d6:	4618      	mov	r0, r3
 800d1d8:	f000 f980 	bl	800d4dc <USBD_Get_USB_Status>
 800d1dc:	4603      	mov	r3, r0
 800d1de:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d1e0:	7bbb      	ldrb	r3, [r7, #14]
}
 800d1e2:	4618      	mov	r0, r3
 800d1e4:	3710      	adds	r7, #16
 800d1e6:	46bd      	mov	sp, r7
 800d1e8:	bd80      	pop	{r7, pc}

0800d1ea <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800d1ea:	b580      	push	{r7, lr}
 800d1ec:	b084      	sub	sp, #16
 800d1ee:	af00      	add	r7, sp, #0
 800d1f0:	6078      	str	r0, [r7, #4]
 800d1f2:	4608      	mov	r0, r1
 800d1f4:	4611      	mov	r1, r2
 800d1f6:	461a      	mov	r2, r3
 800d1f8:	4603      	mov	r3, r0
 800d1fa:	70fb      	strb	r3, [r7, #3]
 800d1fc:	460b      	mov	r3, r1
 800d1fe:	70bb      	strb	r3, [r7, #2]
 800d200:	4613      	mov	r3, r2
 800d202:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d204:	2300      	movs	r3, #0
 800d206:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d208:	2300      	movs	r3, #0
 800d20a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800d212:	78bb      	ldrb	r3, [r7, #2]
 800d214:	883a      	ldrh	r2, [r7, #0]
 800d216:	78f9      	ldrb	r1, [r7, #3]
 800d218:	f7f6 fdff 	bl	8003e1a <HAL_PCD_EP_Open>
 800d21c:	4603      	mov	r3, r0
 800d21e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d220:	7bfb      	ldrb	r3, [r7, #15]
 800d222:	4618      	mov	r0, r3
 800d224:	f000 f95a 	bl	800d4dc <USBD_Get_USB_Status>
 800d228:	4603      	mov	r3, r0
 800d22a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d22c:	7bbb      	ldrb	r3, [r7, #14]
}
 800d22e:	4618      	mov	r0, r3
 800d230:	3710      	adds	r7, #16
 800d232:	46bd      	mov	sp, r7
 800d234:	bd80      	pop	{r7, pc}

0800d236 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d236:	b580      	push	{r7, lr}
 800d238:	b084      	sub	sp, #16
 800d23a:	af00      	add	r7, sp, #0
 800d23c:	6078      	str	r0, [r7, #4]
 800d23e:	460b      	mov	r3, r1
 800d240:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d242:	2300      	movs	r3, #0
 800d244:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d246:	2300      	movs	r3, #0
 800d248:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d250:	78fa      	ldrb	r2, [r7, #3]
 800d252:	4611      	mov	r1, r2
 800d254:	4618      	mov	r0, r3
 800d256:	f7f6 fe46 	bl	8003ee6 <HAL_PCD_EP_Close>
 800d25a:	4603      	mov	r3, r0
 800d25c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d25e:	7bfb      	ldrb	r3, [r7, #15]
 800d260:	4618      	mov	r0, r3
 800d262:	f000 f93b 	bl	800d4dc <USBD_Get_USB_Status>
 800d266:	4603      	mov	r3, r0
 800d268:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d26a:	7bbb      	ldrb	r3, [r7, #14]
}
 800d26c:	4618      	mov	r0, r3
 800d26e:	3710      	adds	r7, #16
 800d270:	46bd      	mov	sp, r7
 800d272:	bd80      	pop	{r7, pc}

0800d274 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d274:	b580      	push	{r7, lr}
 800d276:	b084      	sub	sp, #16
 800d278:	af00      	add	r7, sp, #0
 800d27a:	6078      	str	r0, [r7, #4]
 800d27c:	460b      	mov	r3, r1
 800d27e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d280:	2300      	movs	r3, #0
 800d282:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d284:	2300      	movs	r3, #0
 800d286:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d28e:	78fa      	ldrb	r2, [r7, #3]
 800d290:	4611      	mov	r1, r2
 800d292:	4618      	mov	r0, r3
 800d294:	f7f6 ff07 	bl	80040a6 <HAL_PCD_EP_SetStall>
 800d298:	4603      	mov	r3, r0
 800d29a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d29c:	7bfb      	ldrb	r3, [r7, #15]
 800d29e:	4618      	mov	r0, r3
 800d2a0:	f000 f91c 	bl	800d4dc <USBD_Get_USB_Status>
 800d2a4:	4603      	mov	r3, r0
 800d2a6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d2a8:	7bbb      	ldrb	r3, [r7, #14]
}
 800d2aa:	4618      	mov	r0, r3
 800d2ac:	3710      	adds	r7, #16
 800d2ae:	46bd      	mov	sp, r7
 800d2b0:	bd80      	pop	{r7, pc}

0800d2b2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d2b2:	b580      	push	{r7, lr}
 800d2b4:	b084      	sub	sp, #16
 800d2b6:	af00      	add	r7, sp, #0
 800d2b8:	6078      	str	r0, [r7, #4]
 800d2ba:	460b      	mov	r3, r1
 800d2bc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d2be:	2300      	movs	r3, #0
 800d2c0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d2c2:	2300      	movs	r3, #0
 800d2c4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800d2c6:	687b      	ldr	r3, [r7, #4]
 800d2c8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d2cc:	78fa      	ldrb	r2, [r7, #3]
 800d2ce:	4611      	mov	r1, r2
 800d2d0:	4618      	mov	r0, r3
 800d2d2:	f7f6 ff3a 	bl	800414a <HAL_PCD_EP_ClrStall>
 800d2d6:	4603      	mov	r3, r0
 800d2d8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d2da:	7bfb      	ldrb	r3, [r7, #15]
 800d2dc:	4618      	mov	r0, r3
 800d2de:	f000 f8fd 	bl	800d4dc <USBD_Get_USB_Status>
 800d2e2:	4603      	mov	r3, r0
 800d2e4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d2e6:	7bbb      	ldrb	r3, [r7, #14]
}
 800d2e8:	4618      	mov	r0, r3
 800d2ea:	3710      	adds	r7, #16
 800d2ec:	46bd      	mov	sp, r7
 800d2ee:	bd80      	pop	{r7, pc}

0800d2f0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d2f0:	b480      	push	{r7}
 800d2f2:	b085      	sub	sp, #20
 800d2f4:	af00      	add	r7, sp, #0
 800d2f6:	6078      	str	r0, [r7, #4]
 800d2f8:	460b      	mov	r3, r1
 800d2fa:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d302:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800d304:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d308:	2b00      	cmp	r3, #0
 800d30a:	da0c      	bge.n	800d326 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800d30c:	78fb      	ldrb	r3, [r7, #3]
 800d30e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d312:	68f9      	ldr	r1, [r7, #12]
 800d314:	1c5a      	adds	r2, r3, #1
 800d316:	4613      	mov	r3, r2
 800d318:	009b      	lsls	r3, r3, #2
 800d31a:	4413      	add	r3, r2
 800d31c:	00db      	lsls	r3, r3, #3
 800d31e:	440b      	add	r3, r1
 800d320:	3302      	adds	r3, #2
 800d322:	781b      	ldrb	r3, [r3, #0]
 800d324:	e00b      	b.n	800d33e <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800d326:	78fb      	ldrb	r3, [r7, #3]
 800d328:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d32c:	68f9      	ldr	r1, [r7, #12]
 800d32e:	4613      	mov	r3, r2
 800d330:	009b      	lsls	r3, r3, #2
 800d332:	4413      	add	r3, r2
 800d334:	00db      	lsls	r3, r3, #3
 800d336:	440b      	add	r3, r1
 800d338:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800d33c:	781b      	ldrb	r3, [r3, #0]
  }
}
 800d33e:	4618      	mov	r0, r3
 800d340:	3714      	adds	r7, #20
 800d342:	46bd      	mov	sp, r7
 800d344:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d348:	4770      	bx	lr

0800d34a <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800d34a:	b580      	push	{r7, lr}
 800d34c:	b084      	sub	sp, #16
 800d34e:	af00      	add	r7, sp, #0
 800d350:	6078      	str	r0, [r7, #4]
 800d352:	460b      	mov	r3, r1
 800d354:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d356:	2300      	movs	r3, #0
 800d358:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d35a:	2300      	movs	r3, #0
 800d35c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d364:	78fa      	ldrb	r2, [r7, #3]
 800d366:	4611      	mov	r1, r2
 800d368:	4618      	mov	r0, r3
 800d36a:	f7f6 fd31 	bl	8003dd0 <HAL_PCD_SetAddress>
 800d36e:	4603      	mov	r3, r0
 800d370:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d372:	7bfb      	ldrb	r3, [r7, #15]
 800d374:	4618      	mov	r0, r3
 800d376:	f000 f8b1 	bl	800d4dc <USBD_Get_USB_Status>
 800d37a:	4603      	mov	r3, r0
 800d37c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d37e:	7bbb      	ldrb	r3, [r7, #14]
}
 800d380:	4618      	mov	r0, r3
 800d382:	3710      	adds	r7, #16
 800d384:	46bd      	mov	sp, r7
 800d386:	bd80      	pop	{r7, pc}

0800d388 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d388:	b580      	push	{r7, lr}
 800d38a:	b086      	sub	sp, #24
 800d38c:	af00      	add	r7, sp, #0
 800d38e:	60f8      	str	r0, [r7, #12]
 800d390:	607a      	str	r2, [r7, #4]
 800d392:	603b      	str	r3, [r7, #0]
 800d394:	460b      	mov	r3, r1
 800d396:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d398:	2300      	movs	r3, #0
 800d39a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d39c:	2300      	movs	r3, #0
 800d39e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800d3a0:	68fb      	ldr	r3, [r7, #12]
 800d3a2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800d3a6:	7af9      	ldrb	r1, [r7, #11]
 800d3a8:	683b      	ldr	r3, [r7, #0]
 800d3aa:	687a      	ldr	r2, [r7, #4]
 800d3ac:	f7f6 fe38 	bl	8004020 <HAL_PCD_EP_Transmit>
 800d3b0:	4603      	mov	r3, r0
 800d3b2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d3b4:	7dfb      	ldrb	r3, [r7, #23]
 800d3b6:	4618      	mov	r0, r3
 800d3b8:	f000 f890 	bl	800d4dc <USBD_Get_USB_Status>
 800d3bc:	4603      	mov	r3, r0
 800d3be:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d3c0:	7dbb      	ldrb	r3, [r7, #22]
}
 800d3c2:	4618      	mov	r0, r3
 800d3c4:	3718      	adds	r7, #24
 800d3c6:	46bd      	mov	sp, r7
 800d3c8:	bd80      	pop	{r7, pc}

0800d3ca <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d3ca:	b580      	push	{r7, lr}
 800d3cc:	b086      	sub	sp, #24
 800d3ce:	af00      	add	r7, sp, #0
 800d3d0:	60f8      	str	r0, [r7, #12]
 800d3d2:	607a      	str	r2, [r7, #4]
 800d3d4:	603b      	str	r3, [r7, #0]
 800d3d6:	460b      	mov	r3, r1
 800d3d8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d3da:	2300      	movs	r3, #0
 800d3dc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d3de:	2300      	movs	r3, #0
 800d3e0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800d3e2:	68fb      	ldr	r3, [r7, #12]
 800d3e4:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800d3e8:	7af9      	ldrb	r1, [r7, #11]
 800d3ea:	683b      	ldr	r3, [r7, #0]
 800d3ec:	687a      	ldr	r2, [r7, #4]
 800d3ee:	f7f6 fdc2 	bl	8003f76 <HAL_PCD_EP_Receive>
 800d3f2:	4603      	mov	r3, r0
 800d3f4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d3f6:	7dfb      	ldrb	r3, [r7, #23]
 800d3f8:	4618      	mov	r0, r3
 800d3fa:	f000 f86f 	bl	800d4dc <USBD_Get_USB_Status>
 800d3fe:	4603      	mov	r3, r0
 800d400:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d402:	7dbb      	ldrb	r3, [r7, #22]
}
 800d404:	4618      	mov	r0, r3
 800d406:	3718      	adds	r7, #24
 800d408:	46bd      	mov	sp, r7
 800d40a:	bd80      	pop	{r7, pc}

0800d40c <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d40c:	b580      	push	{r7, lr}
 800d40e:	b082      	sub	sp, #8
 800d410:	af00      	add	r7, sp, #0
 800d412:	6078      	str	r0, [r7, #4]
 800d414:	460b      	mov	r3, r1
 800d416:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d41e:	78fa      	ldrb	r2, [r7, #3]
 800d420:	4611      	mov	r1, r2
 800d422:	4618      	mov	r0, r3
 800d424:	f7f6 fde4 	bl	8003ff0 <HAL_PCD_EP_GetRxCount>
 800d428:	4603      	mov	r3, r0
}
 800d42a:	4618      	mov	r0, r3
 800d42c:	3708      	adds	r7, #8
 800d42e:	46bd      	mov	sp, r7
 800d430:	bd80      	pop	{r7, pc}
	...

0800d434 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d434:	b580      	push	{r7, lr}
 800d436:	b082      	sub	sp, #8
 800d438:	af00      	add	r7, sp, #0
 800d43a:	6078      	str	r0, [r7, #4]
 800d43c:	460b      	mov	r3, r1
 800d43e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 800d440:	78fb      	ldrb	r3, [r7, #3]
 800d442:	2b00      	cmp	r3, #0
 800d444:	d002      	beq.n	800d44c <HAL_PCDEx_LPM_Callback+0x18>
 800d446:	2b01      	cmp	r3, #1
 800d448:	d013      	beq.n	800d472 <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 800d44a:	e023      	b.n	800d494 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	699b      	ldr	r3, [r3, #24]
 800d450:	2b00      	cmp	r3, #0
 800d452:	d007      	beq.n	800d464 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800d454:	f000 f83c 	bl	800d4d0 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d458:	4b10      	ldr	r3, [pc, #64]	; (800d49c <HAL_PCDEx_LPM_Callback+0x68>)
 800d45a:	691b      	ldr	r3, [r3, #16]
 800d45c:	4a0f      	ldr	r2, [pc, #60]	; (800d49c <HAL_PCDEx_LPM_Callback+0x68>)
 800d45e:	f023 0306 	bic.w	r3, r3, #6
 800d462:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800d46a:	4618      	mov	r0, r3
 800d46c:	f7fe fcc0 	bl	800bdf0 <USBD_LL_Resume>
    break;
 800d470:	e010      	b.n	800d494 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800d478:	4618      	mov	r0, r3
 800d47a:	f7fe fca3 	bl	800bdc4 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	699b      	ldr	r3, [r3, #24]
 800d482:	2b00      	cmp	r3, #0
 800d484:	d005      	beq.n	800d492 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d486:	4b05      	ldr	r3, [pc, #20]	; (800d49c <HAL_PCDEx_LPM_Callback+0x68>)
 800d488:	691b      	ldr	r3, [r3, #16]
 800d48a:	4a04      	ldr	r2, [pc, #16]	; (800d49c <HAL_PCDEx_LPM_Callback+0x68>)
 800d48c:	f043 0306 	orr.w	r3, r3, #6
 800d490:	6113      	str	r3, [r2, #16]
    break;
 800d492:	bf00      	nop
}
 800d494:	bf00      	nop
 800d496:	3708      	adds	r7, #8
 800d498:	46bd      	mov	sp, r7
 800d49a:	bd80      	pop	{r7, pc}
 800d49c:	e000ed00 	.word	0xe000ed00

0800d4a0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800d4a0:	b480      	push	{r7}
 800d4a2:	b083      	sub	sp, #12
 800d4a4:	af00      	add	r7, sp, #0
 800d4a6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800d4a8:	4b03      	ldr	r3, [pc, #12]	; (800d4b8 <USBD_static_malloc+0x18>)
}
 800d4aa:	4618      	mov	r0, r3
 800d4ac:	370c      	adds	r7, #12
 800d4ae:	46bd      	mov	sp, r7
 800d4b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4b4:	4770      	bx	lr
 800d4b6:	bf00      	nop
 800d4b8:	20001f04 	.word	0x20001f04

0800d4bc <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800d4bc:	b480      	push	{r7}
 800d4be:	b083      	sub	sp, #12
 800d4c0:	af00      	add	r7, sp, #0
 800d4c2:	6078      	str	r0, [r7, #4]

}
 800d4c4:	bf00      	nop
 800d4c6:	370c      	adds	r7, #12
 800d4c8:	46bd      	mov	sp, r7
 800d4ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4ce:	4770      	bx	lr

0800d4d0 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800d4d0:	b580      	push	{r7, lr}
 800d4d2:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800d4d4:	f7f3 fd90 	bl	8000ff8 <SystemClock_Config>
}
 800d4d8:	bf00      	nop
 800d4da:	bd80      	pop	{r7, pc}

0800d4dc <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800d4dc:	b480      	push	{r7}
 800d4de:	b085      	sub	sp, #20
 800d4e0:	af00      	add	r7, sp, #0
 800d4e2:	4603      	mov	r3, r0
 800d4e4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d4e6:	2300      	movs	r3, #0
 800d4e8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800d4ea:	79fb      	ldrb	r3, [r7, #7]
 800d4ec:	2b03      	cmp	r3, #3
 800d4ee:	d817      	bhi.n	800d520 <USBD_Get_USB_Status+0x44>
 800d4f0:	a201      	add	r2, pc, #4	; (adr r2, 800d4f8 <USBD_Get_USB_Status+0x1c>)
 800d4f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d4f6:	bf00      	nop
 800d4f8:	0800d509 	.word	0x0800d509
 800d4fc:	0800d50f 	.word	0x0800d50f
 800d500:	0800d515 	.word	0x0800d515
 800d504:	0800d51b 	.word	0x0800d51b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800d508:	2300      	movs	r3, #0
 800d50a:	73fb      	strb	r3, [r7, #15]
    break;
 800d50c:	e00b      	b.n	800d526 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d50e:	2303      	movs	r3, #3
 800d510:	73fb      	strb	r3, [r7, #15]
    break;
 800d512:	e008      	b.n	800d526 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d514:	2301      	movs	r3, #1
 800d516:	73fb      	strb	r3, [r7, #15]
    break;
 800d518:	e005      	b.n	800d526 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d51a:	2303      	movs	r3, #3
 800d51c:	73fb      	strb	r3, [r7, #15]
    break;
 800d51e:	e002      	b.n	800d526 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800d520:	2303      	movs	r3, #3
 800d522:	73fb      	strb	r3, [r7, #15]
    break;
 800d524:	bf00      	nop
  }
  return usb_status;
 800d526:	7bfb      	ldrb	r3, [r7, #15]
}
 800d528:	4618      	mov	r0, r3
 800d52a:	3714      	adds	r7, #20
 800d52c:	46bd      	mov	sp, r7
 800d52e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d532:	4770      	bx	lr

0800d534 <__libc_init_array>:
 800d534:	b570      	push	{r4, r5, r6, lr}
 800d536:	4d0d      	ldr	r5, [pc, #52]	; (800d56c <__libc_init_array+0x38>)
 800d538:	4c0d      	ldr	r4, [pc, #52]	; (800d570 <__libc_init_array+0x3c>)
 800d53a:	1b64      	subs	r4, r4, r5
 800d53c:	10a4      	asrs	r4, r4, #2
 800d53e:	2600      	movs	r6, #0
 800d540:	42a6      	cmp	r6, r4
 800d542:	d109      	bne.n	800d558 <__libc_init_array+0x24>
 800d544:	4d0b      	ldr	r5, [pc, #44]	; (800d574 <__libc_init_array+0x40>)
 800d546:	4c0c      	ldr	r4, [pc, #48]	; (800d578 <__libc_init_array+0x44>)
 800d548:	f000 f820 	bl	800d58c <_init>
 800d54c:	1b64      	subs	r4, r4, r5
 800d54e:	10a4      	asrs	r4, r4, #2
 800d550:	2600      	movs	r6, #0
 800d552:	42a6      	cmp	r6, r4
 800d554:	d105      	bne.n	800d562 <__libc_init_array+0x2e>
 800d556:	bd70      	pop	{r4, r5, r6, pc}
 800d558:	f855 3b04 	ldr.w	r3, [r5], #4
 800d55c:	4798      	blx	r3
 800d55e:	3601      	adds	r6, #1
 800d560:	e7ee      	b.n	800d540 <__libc_init_array+0xc>
 800d562:	f855 3b04 	ldr.w	r3, [r5], #4
 800d566:	4798      	blx	r3
 800d568:	3601      	adds	r6, #1
 800d56a:	e7f2      	b.n	800d552 <__libc_init_array+0x1e>
 800d56c:	0800d634 	.word	0x0800d634
 800d570:	0800d634 	.word	0x0800d634
 800d574:	0800d634 	.word	0x0800d634
 800d578:	0800d638 	.word	0x0800d638

0800d57c <memset>:
 800d57c:	4402      	add	r2, r0
 800d57e:	4603      	mov	r3, r0
 800d580:	4293      	cmp	r3, r2
 800d582:	d100      	bne.n	800d586 <memset+0xa>
 800d584:	4770      	bx	lr
 800d586:	f803 1b01 	strb.w	r1, [r3], #1
 800d58a:	e7f9      	b.n	800d580 <memset+0x4>

0800d58c <_init>:
 800d58c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d58e:	bf00      	nop
 800d590:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d592:	bc08      	pop	{r3}
 800d594:	469e      	mov	lr, r3
 800d596:	4770      	bx	lr

0800d598 <_fini>:
 800d598:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d59a:	bf00      	nop
 800d59c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d59e:	bc08      	pop	{r3}
 800d5a0:	469e      	mov	lr, r3
 800d5a2:	4770      	bx	lr
