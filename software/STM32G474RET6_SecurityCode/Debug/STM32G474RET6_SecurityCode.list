
STM32G474RET6_SecurityCode.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000136fc  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000674  080138e0  080138e0  000238e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08013f54  08013f54  00030350  2**0
                  CONTENTS
  4 .ARM          00000008  08013f54  08013f54  00023f54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08013f5c  08013f5c  00030350  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08013f5c  08013f5c  00023f5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08013f60  08013f60  00023f60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000350  20000000  08013f64  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000325c  20000350  080142b4  00030350  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200035ac  080142b4  000335ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030350  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00030380  2**0
                  CONTENTS, READONLY
 13 .debug_info   000300d2  00000000  00000000  000303c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00007200  00000000  00000000  00060495  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002780  00000000  00000000  00067698  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001e45  00000000  00000000  00069e18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00031875  00000000  00000000  0006bc5d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000327a8  00000000  00000000  0009d4d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00128acb  00000000  00000000  000cfc7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000b554  00000000  00000000  001f8748  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000077  00000000  00000000  00203c9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000350 	.word	0x20000350
 80001fc:	00000000 	.word	0x00000000
 8000200:	080138c4 	.word	0x080138c4

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000354 	.word	0x20000354
 800021c:	080138c4 	.word	0x080138c4

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_uldivmod>:
 8000bf8:	b953      	cbnz	r3, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfa:	b94a      	cbnz	r2, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bf08      	it	eq
 8000c00:	2800      	cmpeq	r0, #0
 8000c02:	bf1c      	itt	ne
 8000c04:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c08:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c0c:	f000 b970 	b.w	8000ef0 <__aeabi_idiv0>
 8000c10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c18:	f000 f806 	bl	8000c28 <__udivmoddi4>
 8000c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c24:	b004      	add	sp, #16
 8000c26:	4770      	bx	lr

08000c28 <__udivmoddi4>:
 8000c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c2c:	9e08      	ldr	r6, [sp, #32]
 8000c2e:	460d      	mov	r5, r1
 8000c30:	4604      	mov	r4, r0
 8000c32:	460f      	mov	r7, r1
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d14a      	bne.n	8000cce <__udivmoddi4+0xa6>
 8000c38:	428a      	cmp	r2, r1
 8000c3a:	4694      	mov	ip, r2
 8000c3c:	d965      	bls.n	8000d0a <__udivmoddi4+0xe2>
 8000c3e:	fab2 f382 	clz	r3, r2
 8000c42:	b143      	cbz	r3, 8000c56 <__udivmoddi4+0x2e>
 8000c44:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c48:	f1c3 0220 	rsb	r2, r3, #32
 8000c4c:	409f      	lsls	r7, r3
 8000c4e:	fa20 f202 	lsr.w	r2, r0, r2
 8000c52:	4317      	orrs	r7, r2
 8000c54:	409c      	lsls	r4, r3
 8000c56:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c5a:	fa1f f58c 	uxth.w	r5, ip
 8000c5e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c62:	0c22      	lsrs	r2, r4, #16
 8000c64:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c68:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c6c:	fb01 f005 	mul.w	r0, r1, r5
 8000c70:	4290      	cmp	r0, r2
 8000c72:	d90a      	bls.n	8000c8a <__udivmoddi4+0x62>
 8000c74:	eb1c 0202 	adds.w	r2, ip, r2
 8000c78:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000c7c:	f080 811c 	bcs.w	8000eb8 <__udivmoddi4+0x290>
 8000c80:	4290      	cmp	r0, r2
 8000c82:	f240 8119 	bls.w	8000eb8 <__udivmoddi4+0x290>
 8000c86:	3902      	subs	r1, #2
 8000c88:	4462      	add	r2, ip
 8000c8a:	1a12      	subs	r2, r2, r0
 8000c8c:	b2a4      	uxth	r4, r4
 8000c8e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c92:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c96:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c9a:	fb00 f505 	mul.w	r5, r0, r5
 8000c9e:	42a5      	cmp	r5, r4
 8000ca0:	d90a      	bls.n	8000cb8 <__udivmoddi4+0x90>
 8000ca2:	eb1c 0404 	adds.w	r4, ip, r4
 8000ca6:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000caa:	f080 8107 	bcs.w	8000ebc <__udivmoddi4+0x294>
 8000cae:	42a5      	cmp	r5, r4
 8000cb0:	f240 8104 	bls.w	8000ebc <__udivmoddi4+0x294>
 8000cb4:	4464      	add	r4, ip
 8000cb6:	3802      	subs	r0, #2
 8000cb8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000cbc:	1b64      	subs	r4, r4, r5
 8000cbe:	2100      	movs	r1, #0
 8000cc0:	b11e      	cbz	r6, 8000cca <__udivmoddi4+0xa2>
 8000cc2:	40dc      	lsrs	r4, r3
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	e9c6 4300 	strd	r4, r3, [r6]
 8000cca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cce:	428b      	cmp	r3, r1
 8000cd0:	d908      	bls.n	8000ce4 <__udivmoddi4+0xbc>
 8000cd2:	2e00      	cmp	r6, #0
 8000cd4:	f000 80ed 	beq.w	8000eb2 <__udivmoddi4+0x28a>
 8000cd8:	2100      	movs	r1, #0
 8000cda:	e9c6 0500 	strd	r0, r5, [r6]
 8000cde:	4608      	mov	r0, r1
 8000ce0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ce4:	fab3 f183 	clz	r1, r3
 8000ce8:	2900      	cmp	r1, #0
 8000cea:	d149      	bne.n	8000d80 <__udivmoddi4+0x158>
 8000cec:	42ab      	cmp	r3, r5
 8000cee:	d302      	bcc.n	8000cf6 <__udivmoddi4+0xce>
 8000cf0:	4282      	cmp	r2, r0
 8000cf2:	f200 80f8 	bhi.w	8000ee6 <__udivmoddi4+0x2be>
 8000cf6:	1a84      	subs	r4, r0, r2
 8000cf8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cfc:	2001      	movs	r0, #1
 8000cfe:	4617      	mov	r7, r2
 8000d00:	2e00      	cmp	r6, #0
 8000d02:	d0e2      	beq.n	8000cca <__udivmoddi4+0xa2>
 8000d04:	e9c6 4700 	strd	r4, r7, [r6]
 8000d08:	e7df      	b.n	8000cca <__udivmoddi4+0xa2>
 8000d0a:	b902      	cbnz	r2, 8000d0e <__udivmoddi4+0xe6>
 8000d0c:	deff      	udf	#255	; 0xff
 8000d0e:	fab2 f382 	clz	r3, r2
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	f040 8090 	bne.w	8000e38 <__udivmoddi4+0x210>
 8000d18:	1a8a      	subs	r2, r1, r2
 8000d1a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d1e:	fa1f fe8c 	uxth.w	lr, ip
 8000d22:	2101      	movs	r1, #1
 8000d24:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d28:	fb07 2015 	mls	r0, r7, r5, r2
 8000d2c:	0c22      	lsrs	r2, r4, #16
 8000d2e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d32:	fb0e f005 	mul.w	r0, lr, r5
 8000d36:	4290      	cmp	r0, r2
 8000d38:	d908      	bls.n	8000d4c <__udivmoddi4+0x124>
 8000d3a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d3e:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000d42:	d202      	bcs.n	8000d4a <__udivmoddi4+0x122>
 8000d44:	4290      	cmp	r0, r2
 8000d46:	f200 80cb 	bhi.w	8000ee0 <__udivmoddi4+0x2b8>
 8000d4a:	4645      	mov	r5, r8
 8000d4c:	1a12      	subs	r2, r2, r0
 8000d4e:	b2a4      	uxth	r4, r4
 8000d50:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d54:	fb07 2210 	mls	r2, r7, r0, r2
 8000d58:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d5c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d60:	45a6      	cmp	lr, r4
 8000d62:	d908      	bls.n	8000d76 <__udivmoddi4+0x14e>
 8000d64:	eb1c 0404 	adds.w	r4, ip, r4
 8000d68:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000d6c:	d202      	bcs.n	8000d74 <__udivmoddi4+0x14c>
 8000d6e:	45a6      	cmp	lr, r4
 8000d70:	f200 80bb 	bhi.w	8000eea <__udivmoddi4+0x2c2>
 8000d74:	4610      	mov	r0, r2
 8000d76:	eba4 040e 	sub.w	r4, r4, lr
 8000d7a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d7e:	e79f      	b.n	8000cc0 <__udivmoddi4+0x98>
 8000d80:	f1c1 0720 	rsb	r7, r1, #32
 8000d84:	408b      	lsls	r3, r1
 8000d86:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d8a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d8e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d92:	fa20 f307 	lsr.w	r3, r0, r7
 8000d96:	40fd      	lsrs	r5, r7
 8000d98:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d9c:	4323      	orrs	r3, r4
 8000d9e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000da2:	fa1f fe8c 	uxth.w	lr, ip
 8000da6:	fb09 5518 	mls	r5, r9, r8, r5
 8000daa:	0c1c      	lsrs	r4, r3, #16
 8000dac:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000db0:	fb08 f50e 	mul.w	r5, r8, lr
 8000db4:	42a5      	cmp	r5, r4
 8000db6:	fa02 f201 	lsl.w	r2, r2, r1
 8000dba:	fa00 f001 	lsl.w	r0, r0, r1
 8000dbe:	d90b      	bls.n	8000dd8 <__udivmoddi4+0x1b0>
 8000dc0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000dc8:	f080 8088 	bcs.w	8000edc <__udivmoddi4+0x2b4>
 8000dcc:	42a5      	cmp	r5, r4
 8000dce:	f240 8085 	bls.w	8000edc <__udivmoddi4+0x2b4>
 8000dd2:	f1a8 0802 	sub.w	r8, r8, #2
 8000dd6:	4464      	add	r4, ip
 8000dd8:	1b64      	subs	r4, r4, r5
 8000dda:	b29d      	uxth	r5, r3
 8000ddc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000de0:	fb09 4413 	mls	r4, r9, r3, r4
 8000de4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000de8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000dec:	45a6      	cmp	lr, r4
 8000dee:	d908      	bls.n	8000e02 <__udivmoddi4+0x1da>
 8000df0:	eb1c 0404 	adds.w	r4, ip, r4
 8000df4:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000df8:	d26c      	bcs.n	8000ed4 <__udivmoddi4+0x2ac>
 8000dfa:	45a6      	cmp	lr, r4
 8000dfc:	d96a      	bls.n	8000ed4 <__udivmoddi4+0x2ac>
 8000dfe:	3b02      	subs	r3, #2
 8000e00:	4464      	add	r4, ip
 8000e02:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e06:	fba3 9502 	umull	r9, r5, r3, r2
 8000e0a:	eba4 040e 	sub.w	r4, r4, lr
 8000e0e:	42ac      	cmp	r4, r5
 8000e10:	46c8      	mov	r8, r9
 8000e12:	46ae      	mov	lr, r5
 8000e14:	d356      	bcc.n	8000ec4 <__udivmoddi4+0x29c>
 8000e16:	d053      	beq.n	8000ec0 <__udivmoddi4+0x298>
 8000e18:	b156      	cbz	r6, 8000e30 <__udivmoddi4+0x208>
 8000e1a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e1e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e22:	fa04 f707 	lsl.w	r7, r4, r7
 8000e26:	40ca      	lsrs	r2, r1
 8000e28:	40cc      	lsrs	r4, r1
 8000e2a:	4317      	orrs	r7, r2
 8000e2c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e30:	4618      	mov	r0, r3
 8000e32:	2100      	movs	r1, #0
 8000e34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e38:	f1c3 0120 	rsb	r1, r3, #32
 8000e3c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e40:	fa20 f201 	lsr.w	r2, r0, r1
 8000e44:	fa25 f101 	lsr.w	r1, r5, r1
 8000e48:	409d      	lsls	r5, r3
 8000e4a:	432a      	orrs	r2, r5
 8000e4c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e50:	fa1f fe8c 	uxth.w	lr, ip
 8000e54:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e58:	fb07 1510 	mls	r5, r7, r0, r1
 8000e5c:	0c11      	lsrs	r1, r2, #16
 8000e5e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e62:	fb00 f50e 	mul.w	r5, r0, lr
 8000e66:	428d      	cmp	r5, r1
 8000e68:	fa04 f403 	lsl.w	r4, r4, r3
 8000e6c:	d908      	bls.n	8000e80 <__udivmoddi4+0x258>
 8000e6e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e72:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000e76:	d22f      	bcs.n	8000ed8 <__udivmoddi4+0x2b0>
 8000e78:	428d      	cmp	r5, r1
 8000e7a:	d92d      	bls.n	8000ed8 <__udivmoddi4+0x2b0>
 8000e7c:	3802      	subs	r0, #2
 8000e7e:	4461      	add	r1, ip
 8000e80:	1b49      	subs	r1, r1, r5
 8000e82:	b292      	uxth	r2, r2
 8000e84:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e88:	fb07 1115 	mls	r1, r7, r5, r1
 8000e8c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e90:	fb05 f10e 	mul.w	r1, r5, lr
 8000e94:	4291      	cmp	r1, r2
 8000e96:	d908      	bls.n	8000eaa <__udivmoddi4+0x282>
 8000e98:	eb1c 0202 	adds.w	r2, ip, r2
 8000e9c:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000ea0:	d216      	bcs.n	8000ed0 <__udivmoddi4+0x2a8>
 8000ea2:	4291      	cmp	r1, r2
 8000ea4:	d914      	bls.n	8000ed0 <__udivmoddi4+0x2a8>
 8000ea6:	3d02      	subs	r5, #2
 8000ea8:	4462      	add	r2, ip
 8000eaa:	1a52      	subs	r2, r2, r1
 8000eac:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000eb0:	e738      	b.n	8000d24 <__udivmoddi4+0xfc>
 8000eb2:	4631      	mov	r1, r6
 8000eb4:	4630      	mov	r0, r6
 8000eb6:	e708      	b.n	8000cca <__udivmoddi4+0xa2>
 8000eb8:	4639      	mov	r1, r7
 8000eba:	e6e6      	b.n	8000c8a <__udivmoddi4+0x62>
 8000ebc:	4610      	mov	r0, r2
 8000ebe:	e6fb      	b.n	8000cb8 <__udivmoddi4+0x90>
 8000ec0:	4548      	cmp	r0, r9
 8000ec2:	d2a9      	bcs.n	8000e18 <__udivmoddi4+0x1f0>
 8000ec4:	ebb9 0802 	subs.w	r8, r9, r2
 8000ec8:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000ecc:	3b01      	subs	r3, #1
 8000ece:	e7a3      	b.n	8000e18 <__udivmoddi4+0x1f0>
 8000ed0:	4645      	mov	r5, r8
 8000ed2:	e7ea      	b.n	8000eaa <__udivmoddi4+0x282>
 8000ed4:	462b      	mov	r3, r5
 8000ed6:	e794      	b.n	8000e02 <__udivmoddi4+0x1da>
 8000ed8:	4640      	mov	r0, r8
 8000eda:	e7d1      	b.n	8000e80 <__udivmoddi4+0x258>
 8000edc:	46d0      	mov	r8, sl
 8000ede:	e77b      	b.n	8000dd8 <__udivmoddi4+0x1b0>
 8000ee0:	3d02      	subs	r5, #2
 8000ee2:	4462      	add	r2, ip
 8000ee4:	e732      	b.n	8000d4c <__udivmoddi4+0x124>
 8000ee6:	4608      	mov	r0, r1
 8000ee8:	e70a      	b.n	8000d00 <__udivmoddi4+0xd8>
 8000eea:	4464      	add	r4, ip
 8000eec:	3802      	subs	r0, #2
 8000eee:	e742      	b.n	8000d76 <__udivmoddi4+0x14e>

08000ef0 <__aeabi_idiv0>:
 8000ef0:	4770      	bx	lr
 8000ef2:	bf00      	nop

08000ef4 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc3;
ADC_HandleTypeDef hadc4;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b08c      	sub	sp, #48	; 0x30
 8000ef8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000efa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000efe:	2200      	movs	r2, #0
 8000f00:	601a      	str	r2, [r3, #0]
 8000f02:	605a      	str	r2, [r3, #4]
 8000f04:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000f06:	1d3b      	adds	r3, r7, #4
 8000f08:	2220      	movs	r2, #32
 8000f0a:	2100      	movs	r1, #0
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	f010 fdc7 	bl	8011aa0 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000f12:	4b32      	ldr	r3, [pc, #200]	; (8000fdc <MX_ADC1_Init+0xe8>)
 8000f14:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000f18:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000f1a:	4b30      	ldr	r3, [pc, #192]	; (8000fdc <MX_ADC1_Init+0xe8>)
 8000f1c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000f20:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000f22:	4b2e      	ldr	r3, [pc, #184]	; (8000fdc <MX_ADC1_Init+0xe8>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f28:	4b2c      	ldr	r3, [pc, #176]	; (8000fdc <MX_ADC1_Init+0xe8>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000f2e:	4b2b      	ldr	r3, [pc, #172]	; (8000fdc <MX_ADC1_Init+0xe8>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000f34:	4b29      	ldr	r3, [pc, #164]	; (8000fdc <MX_ADC1_Init+0xe8>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f3a:	4b28      	ldr	r3, [pc, #160]	; (8000fdc <MX_ADC1_Init+0xe8>)
 8000f3c:	2204      	movs	r2, #4
 8000f3e:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000f40:	4b26      	ldr	r3, [pc, #152]	; (8000fdc <MX_ADC1_Init+0xe8>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000f46:	4b25      	ldr	r3, [pc, #148]	; (8000fdc <MX_ADC1_Init+0xe8>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000f4c:	4b23      	ldr	r3, [pc, #140]	; (8000fdc <MX_ADC1_Init+0xe8>)
 8000f4e:	2201      	movs	r2, #1
 8000f50:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f52:	4b22      	ldr	r3, [pc, #136]	; (8000fdc <MX_ADC1_Init+0xe8>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f5a:	4b20      	ldr	r3, [pc, #128]	; (8000fdc <MX_ADC1_Init+0xe8>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f60:	4b1e      	ldr	r3, [pc, #120]	; (8000fdc <MX_ADC1_Init+0xe8>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000f66:	4b1d      	ldr	r3, [pc, #116]	; (8000fdc <MX_ADC1_Init+0xe8>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000f6e:	4b1b      	ldr	r3, [pc, #108]	; (8000fdc <MX_ADC1_Init+0xe8>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000f74:	4b19      	ldr	r3, [pc, #100]	; (8000fdc <MX_ADC1_Init+0xe8>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f7c:	4817      	ldr	r0, [pc, #92]	; (8000fdc <MX_ADC1_Init+0xe8>)
 8000f7e:	f002 f995 	bl	80032ac <HAL_ADC_Init>
 8000f82:	4603      	mov	r3, r0
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d001      	beq.n	8000f8c <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000f88:	f000 fea4 	bl	8001cd4 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000f90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f94:	4619      	mov	r1, r3
 8000f96:	4811      	ldr	r0, [pc, #68]	; (8000fdc <MX_ADC1_Init+0xe8>)
 8000f98:	f002 ffb0 	bl	8003efc <HAL_ADCEx_MultiModeConfigChannel>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d001      	beq.n	8000fa6 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000fa2:	f000 fe97 	bl	8001cd4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000fa6:	4b0e      	ldr	r3, [pc, #56]	; (8000fe0 <MX_ADC1_Init+0xec>)
 8000fa8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000faa:	2306      	movs	r3, #6
 8000fac:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000fb2:	237f      	movs	r3, #127	; 0x7f
 8000fb4:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000fb6:	2304      	movs	r3, #4
 8000fb8:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fbe:	1d3b      	adds	r3, r7, #4
 8000fc0:	4619      	mov	r1, r3
 8000fc2:	4806      	ldr	r0, [pc, #24]	; (8000fdc <MX_ADC1_Init+0xe8>)
 8000fc4:	f002 fb34 	bl	8003630 <HAL_ADC_ConfigChannel>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d001      	beq.n	8000fd2 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8000fce:	f000 fe81 	bl	8001cd4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000fd2:	bf00      	nop
 8000fd4:	3730      	adds	r7, #48	; 0x30
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	2000036c 	.word	0x2000036c
 8000fe0:	04300002 	.word	0x04300002

08000fe4 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b088      	sub	sp, #32
 8000fe8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000fea:	463b      	mov	r3, r7
 8000fec:	2220      	movs	r2, #32
 8000fee:	2100      	movs	r1, #0
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f010 fd55 	bl	8011aa0 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000ff6:	4b2b      	ldr	r3, [pc, #172]	; (80010a4 <MX_ADC2_Init+0xc0>)
 8000ff8:	4a2b      	ldr	r2, [pc, #172]	; (80010a8 <MX_ADC2_Init+0xc4>)
 8000ffa:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000ffc:	4b29      	ldr	r3, [pc, #164]	; (80010a4 <MX_ADC2_Init+0xc0>)
 8000ffe:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001002:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001004:	4b27      	ldr	r3, [pc, #156]	; (80010a4 <MX_ADC2_Init+0xc0>)
 8001006:	2200      	movs	r2, #0
 8001008:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800100a:	4b26      	ldr	r3, [pc, #152]	; (80010a4 <MX_ADC2_Init+0xc0>)
 800100c:	2200      	movs	r2, #0
 800100e:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8001010:	4b24      	ldr	r3, [pc, #144]	; (80010a4 <MX_ADC2_Init+0xc0>)
 8001012:	2200      	movs	r2, #0
 8001014:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001016:	4b23      	ldr	r3, [pc, #140]	; (80010a4 <MX_ADC2_Init+0xc0>)
 8001018:	2200      	movs	r2, #0
 800101a:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800101c:	4b21      	ldr	r3, [pc, #132]	; (80010a4 <MX_ADC2_Init+0xc0>)
 800101e:	2204      	movs	r2, #4
 8001020:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8001022:	4b20      	ldr	r3, [pc, #128]	; (80010a4 <MX_ADC2_Init+0xc0>)
 8001024:	2200      	movs	r2, #0
 8001026:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001028:	4b1e      	ldr	r3, [pc, #120]	; (80010a4 <MX_ADC2_Init+0xc0>)
 800102a:	2200      	movs	r2, #0
 800102c:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 800102e:	4b1d      	ldr	r3, [pc, #116]	; (80010a4 <MX_ADC2_Init+0xc0>)
 8001030:	2201      	movs	r2, #1
 8001032:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001034:	4b1b      	ldr	r3, [pc, #108]	; (80010a4 <MX_ADC2_Init+0xc0>)
 8001036:	2200      	movs	r2, #0
 8001038:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800103c:	4b19      	ldr	r3, [pc, #100]	; (80010a4 <MX_ADC2_Init+0xc0>)
 800103e:	2200      	movs	r2, #0
 8001040:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001042:	4b18      	ldr	r3, [pc, #96]	; (80010a4 <MX_ADC2_Init+0xc0>)
 8001044:	2200      	movs	r2, #0
 8001046:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001048:	4b16      	ldr	r3, [pc, #88]	; (80010a4 <MX_ADC2_Init+0xc0>)
 800104a:	2200      	movs	r2, #0
 800104c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001050:	4b14      	ldr	r3, [pc, #80]	; (80010a4 <MX_ADC2_Init+0xc0>)
 8001052:	2200      	movs	r2, #0
 8001054:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8001056:	4b13      	ldr	r3, [pc, #76]	; (80010a4 <MX_ADC2_Init+0xc0>)
 8001058:	2200      	movs	r2, #0
 800105a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800105e:	4811      	ldr	r0, [pc, #68]	; (80010a4 <MX_ADC2_Init+0xc0>)
 8001060:	f002 f924 	bl	80032ac <HAL_ADC_Init>
 8001064:	4603      	mov	r3, r0
 8001066:	2b00      	cmp	r3, #0
 8001068:	d001      	beq.n	800106e <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 800106a:	f000 fe33 	bl	8001cd4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800106e:	4b0f      	ldr	r3, [pc, #60]	; (80010ac <MX_ADC2_Init+0xc8>)
 8001070:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001072:	2306      	movs	r3, #6
 8001074:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001076:	2300      	movs	r3, #0
 8001078:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800107a:	237f      	movs	r3, #127	; 0x7f
 800107c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800107e:	2304      	movs	r3, #4
 8001080:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001082:	2300      	movs	r3, #0
 8001084:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001086:	463b      	mov	r3, r7
 8001088:	4619      	mov	r1, r3
 800108a:	4806      	ldr	r0, [pc, #24]	; (80010a4 <MX_ADC2_Init+0xc0>)
 800108c:	f002 fad0 	bl	8003630 <HAL_ADC_ConfigChannel>
 8001090:	4603      	mov	r3, r0
 8001092:	2b00      	cmp	r3, #0
 8001094:	d001      	beq.n	800109a <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 8001096:	f000 fe1d 	bl	8001cd4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800109a:	bf00      	nop
 800109c:	3720      	adds	r7, #32
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	200003d8 	.word	0x200003d8
 80010a8:	50000100 	.word	0x50000100
 80010ac:	25b00200 	.word	0x25b00200

080010b0 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b08c      	sub	sp, #48	; 0x30
 80010b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80010b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010ba:	2200      	movs	r2, #0
 80010bc:	601a      	str	r2, [r3, #0]
 80010be:	605a      	str	r2, [r3, #4]
 80010c0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80010c2:	1d3b      	adds	r3, r7, #4
 80010c4:	2220      	movs	r2, #32
 80010c6:	2100      	movs	r1, #0
 80010c8:	4618      	mov	r0, r3
 80010ca:	f010 fce9 	bl	8011aa0 <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 80010ce:	4b31      	ldr	r3, [pc, #196]	; (8001194 <MX_ADC3_Init+0xe4>)
 80010d0:	4a31      	ldr	r2, [pc, #196]	; (8001198 <MX_ADC3_Init+0xe8>)
 80010d2:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80010d4:	4b2f      	ldr	r3, [pc, #188]	; (8001194 <MX_ADC3_Init+0xe4>)
 80010d6:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80010da:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80010dc:	4b2d      	ldr	r3, [pc, #180]	; (8001194 <MX_ADC3_Init+0xe4>)
 80010de:	2200      	movs	r2, #0
 80010e0:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80010e2:	4b2c      	ldr	r3, [pc, #176]	; (8001194 <MX_ADC3_Init+0xe4>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	60da      	str	r2, [r3, #12]
  hadc3.Init.GainCompensation = 0;
 80010e8:	4b2a      	ldr	r3, [pc, #168]	; (8001194 <MX_ADC3_Init+0xe4>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	611a      	str	r2, [r3, #16]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80010ee:	4b29      	ldr	r3, [pc, #164]	; (8001194 <MX_ADC3_Init+0xe4>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	615a      	str	r2, [r3, #20]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80010f4:	4b27      	ldr	r3, [pc, #156]	; (8001194 <MX_ADC3_Init+0xe4>)
 80010f6:	2204      	movs	r2, #4
 80010f8:	619a      	str	r2, [r3, #24]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 80010fa:	4b26      	ldr	r3, [pc, #152]	; (8001194 <MX_ADC3_Init+0xe4>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8001100:	4b24      	ldr	r3, [pc, #144]	; (8001194 <MX_ADC3_Init+0xe4>)
 8001102:	2200      	movs	r2, #0
 8001104:	775a      	strb	r2, [r3, #29]
  hadc3.Init.NbrOfConversion = 1;
 8001106:	4b23      	ldr	r3, [pc, #140]	; (8001194 <MX_ADC3_Init+0xe4>)
 8001108:	2201      	movs	r2, #1
 800110a:	621a      	str	r2, [r3, #32]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800110c:	4b21      	ldr	r3, [pc, #132]	; (8001194 <MX_ADC3_Init+0xe4>)
 800110e:	2200      	movs	r2, #0
 8001110:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001114:	4b1f      	ldr	r3, [pc, #124]	; (8001194 <MX_ADC3_Init+0xe4>)
 8001116:	2200      	movs	r2, #0
 8001118:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800111a:	4b1e      	ldr	r3, [pc, #120]	; (8001194 <MX_ADC3_Init+0xe4>)
 800111c:	2200      	movs	r2, #0
 800111e:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8001120:	4b1c      	ldr	r3, [pc, #112]	; (8001194 <MX_ADC3_Init+0xe4>)
 8001122:	2200      	movs	r2, #0
 8001124:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001128:	4b1a      	ldr	r3, [pc, #104]	; (8001194 <MX_ADC3_Init+0xe4>)
 800112a:	2200      	movs	r2, #0
 800112c:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc3.Init.OversamplingMode = DISABLE;
 800112e:	4b19      	ldr	r3, [pc, #100]	; (8001194 <MX_ADC3_Init+0xe4>)
 8001130:	2200      	movs	r2, #0
 8001132:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001136:	4817      	ldr	r0, [pc, #92]	; (8001194 <MX_ADC3_Init+0xe4>)
 8001138:	f002 f8b8 	bl	80032ac <HAL_ADC_Init>
 800113c:	4603      	mov	r3, r0
 800113e:	2b00      	cmp	r3, #0
 8001140:	d001      	beq.n	8001146 <MX_ADC3_Init+0x96>
  {
    Error_Handler();
 8001142:	f000 fdc7 	bl	8001cd4 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001146:	2300      	movs	r3, #0
 8001148:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 800114a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800114e:	4619      	mov	r1, r3
 8001150:	4810      	ldr	r0, [pc, #64]	; (8001194 <MX_ADC3_Init+0xe4>)
 8001152:	f002 fed3 	bl	8003efc <HAL_ADCEx_MultiModeConfigChannel>
 8001156:	4603      	mov	r3, r0
 8001158:	2b00      	cmp	r3, #0
 800115a:	d001      	beq.n	8001160 <MX_ADC3_Init+0xb0>
  {
    Error_Handler();
 800115c:	f000 fdba 	bl	8001cd4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001160:	4b0e      	ldr	r3, [pc, #56]	; (800119c <MX_ADC3_Init+0xec>)
 8001162:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001164:	2306      	movs	r3, #6
 8001166:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001168:	2300      	movs	r3, #0
 800116a:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800116c:	237f      	movs	r3, #127	; 0x7f
 800116e:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001170:	2304      	movs	r3, #4
 8001172:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001174:	2300      	movs	r3, #0
 8001176:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001178:	1d3b      	adds	r3, r7, #4
 800117a:	4619      	mov	r1, r3
 800117c:	4805      	ldr	r0, [pc, #20]	; (8001194 <MX_ADC3_Init+0xe4>)
 800117e:	f002 fa57 	bl	8003630 <HAL_ADC_ConfigChannel>
 8001182:	4603      	mov	r3, r0
 8001184:	2b00      	cmp	r3, #0
 8001186:	d001      	beq.n	800118c <MX_ADC3_Init+0xdc>
  {
    Error_Handler();
 8001188:	f000 fda4 	bl	8001cd4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 800118c:	bf00      	nop
 800118e:	3730      	adds	r7, #48	; 0x30
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}
 8001194:	20000444 	.word	0x20000444
 8001198:	50000400 	.word	0x50000400
 800119c:	04300002 	.word	0x04300002

080011a0 <MX_ADC4_Init>:
/* ADC4 init function */
void MX_ADC4_Init(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b088      	sub	sp, #32
 80011a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC4_Init 0 */

  /* USER CODE END ADC4_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80011a6:	463b      	mov	r3, r7
 80011a8:	2220      	movs	r2, #32
 80011aa:	2100      	movs	r1, #0
 80011ac:	4618      	mov	r0, r3
 80011ae:	f010 fc77 	bl	8011aa0 <memset>

  /* USER CODE END ADC4_Init 1 */

  /** Common config
  */
  hadc4.Instance = ADC4;
 80011b2:	4b2b      	ldr	r3, [pc, #172]	; (8001260 <MX_ADC4_Init+0xc0>)
 80011b4:	4a2b      	ldr	r2, [pc, #172]	; (8001264 <MX_ADC4_Init+0xc4>)
 80011b6:	601a      	str	r2, [r3, #0]
  hadc4.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80011b8:	4b29      	ldr	r3, [pc, #164]	; (8001260 <MX_ADC4_Init+0xc0>)
 80011ba:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80011be:	605a      	str	r2, [r3, #4]
  hadc4.Init.Resolution = ADC_RESOLUTION_12B;
 80011c0:	4b27      	ldr	r3, [pc, #156]	; (8001260 <MX_ADC4_Init+0xc0>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	609a      	str	r2, [r3, #8]
  hadc4.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80011c6:	4b26      	ldr	r3, [pc, #152]	; (8001260 <MX_ADC4_Init+0xc0>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	60da      	str	r2, [r3, #12]
  hadc4.Init.GainCompensation = 0;
 80011cc:	4b24      	ldr	r3, [pc, #144]	; (8001260 <MX_ADC4_Init+0xc0>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	611a      	str	r2, [r3, #16]
  hadc4.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80011d2:	4b23      	ldr	r3, [pc, #140]	; (8001260 <MX_ADC4_Init+0xc0>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	615a      	str	r2, [r3, #20]
  hadc4.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80011d8:	4b21      	ldr	r3, [pc, #132]	; (8001260 <MX_ADC4_Init+0xc0>)
 80011da:	2204      	movs	r2, #4
 80011dc:	619a      	str	r2, [r3, #24]
  hadc4.Init.LowPowerAutoWait = DISABLE;
 80011de:	4b20      	ldr	r3, [pc, #128]	; (8001260 <MX_ADC4_Init+0xc0>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	771a      	strb	r2, [r3, #28]
  hadc4.Init.ContinuousConvMode = DISABLE;
 80011e4:	4b1e      	ldr	r3, [pc, #120]	; (8001260 <MX_ADC4_Init+0xc0>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	775a      	strb	r2, [r3, #29]
  hadc4.Init.NbrOfConversion = 1;
 80011ea:	4b1d      	ldr	r3, [pc, #116]	; (8001260 <MX_ADC4_Init+0xc0>)
 80011ec:	2201      	movs	r2, #1
 80011ee:	621a      	str	r2, [r3, #32]
  hadc4.Init.DiscontinuousConvMode = DISABLE;
 80011f0:	4b1b      	ldr	r3, [pc, #108]	; (8001260 <MX_ADC4_Init+0xc0>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc4.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80011f8:	4b19      	ldr	r3, [pc, #100]	; (8001260 <MX_ADC4_Init+0xc0>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc4.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80011fe:	4b18      	ldr	r3, [pc, #96]	; (8001260 <MX_ADC4_Init+0xc0>)
 8001200:	2200      	movs	r2, #0
 8001202:	631a      	str	r2, [r3, #48]	; 0x30
  hadc4.Init.DMAContinuousRequests = DISABLE;
 8001204:	4b16      	ldr	r3, [pc, #88]	; (8001260 <MX_ADC4_Init+0xc0>)
 8001206:	2200      	movs	r2, #0
 8001208:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc4.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800120c:	4b14      	ldr	r3, [pc, #80]	; (8001260 <MX_ADC4_Init+0xc0>)
 800120e:	2200      	movs	r2, #0
 8001210:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc4.Init.OversamplingMode = DISABLE;
 8001212:	4b13      	ldr	r3, [pc, #76]	; (8001260 <MX_ADC4_Init+0xc0>)
 8001214:	2200      	movs	r2, #0
 8001216:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc4) != HAL_OK)
 800121a:	4811      	ldr	r0, [pc, #68]	; (8001260 <MX_ADC4_Init+0xc0>)
 800121c:	f002 f846 	bl	80032ac <HAL_ADC_Init>
 8001220:	4603      	mov	r3, r0
 8001222:	2b00      	cmp	r3, #0
 8001224:	d001      	beq.n	800122a <MX_ADC4_Init+0x8a>
  {
    Error_Handler();
 8001226:	f000 fd55 	bl	8001cd4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800122a:	4b0f      	ldr	r3, [pc, #60]	; (8001268 <MX_ADC4_Init+0xc8>)
 800122c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800122e:	2306      	movs	r3, #6
 8001230:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_47CYCLES_5;
 8001232:	2304      	movs	r3, #4
 8001234:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001236:	237f      	movs	r3, #127	; 0x7f
 8001238:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800123a:	2304      	movs	r3, #4
 800123c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800123e:	2300      	movs	r3, #0
 8001240:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 8001242:	463b      	mov	r3, r7
 8001244:	4619      	mov	r1, r3
 8001246:	4806      	ldr	r0, [pc, #24]	; (8001260 <MX_ADC4_Init+0xc0>)
 8001248:	f002 f9f2 	bl	8003630 <HAL_ADC_ConfigChannel>
 800124c:	4603      	mov	r3, r0
 800124e:	2b00      	cmp	r3, #0
 8001250:	d001      	beq.n	8001256 <MX_ADC4_Init+0xb6>
  {
    Error_Handler();
 8001252:	f000 fd3f 	bl	8001cd4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC4_Init 2 */

  /* USER CODE END ADC4_Init 2 */

}
 8001256:	bf00      	nop
 8001258:	3720      	adds	r7, #32
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	200004b0 	.word	0x200004b0
 8001264:	50000500 	.word	0x50000500
 8001268:	10c00010 	.word	0x10c00010

0800126c <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;
static uint32_t HAL_RCC_ADC345_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b0a6      	sub	sp, #152	; 0x98
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001274:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001278:	2200      	movs	r2, #0
 800127a:	601a      	str	r2, [r3, #0]
 800127c:	605a      	str	r2, [r3, #4]
 800127e:	609a      	str	r2, [r3, #8]
 8001280:	60da      	str	r2, [r3, #12]
 8001282:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001284:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001288:	2254      	movs	r2, #84	; 0x54
 800128a:	2100      	movs	r1, #0
 800128c:	4618      	mov	r0, r3
 800128e:	f010 fc07 	bl	8011aa0 <memset>
  if(adcHandle->Instance==ADC1)
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800129a:	d141      	bne.n	8001320 <HAL_ADC_MspInit+0xb4>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 800129c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80012a0:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80012a2:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80012a6:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012a8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80012ac:	4618      	mov	r0, r3
 80012ae:	f006 f85d 	bl	800736c <HAL_RCCEx_PeriphCLKConfig>
 80012b2:	4603      	mov	r3, r0
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d001      	beq.n	80012bc <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80012b8:	f000 fd0c 	bl	8001cd4 <Error_Handler>
    }

    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 80012bc:	4b91      	ldr	r3, [pc, #580]	; (8001504 <HAL_ADC_MspInit+0x298>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	3301      	adds	r3, #1
 80012c2:	4a90      	ldr	r2, [pc, #576]	; (8001504 <HAL_ADC_MspInit+0x298>)
 80012c4:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80012c6:	4b8f      	ldr	r3, [pc, #572]	; (8001504 <HAL_ADC_MspInit+0x298>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	2b01      	cmp	r3, #1
 80012cc:	d10b      	bne.n	80012e6 <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80012ce:	4b8e      	ldr	r3, [pc, #568]	; (8001508 <HAL_ADC_MspInit+0x29c>)
 80012d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012d2:	4a8d      	ldr	r2, [pc, #564]	; (8001508 <HAL_ADC_MspInit+0x29c>)
 80012d4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80012d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012da:	4b8b      	ldr	r3, [pc, #556]	; (8001508 <HAL_ADC_MspInit+0x29c>)
 80012dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012de:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80012e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80012e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012e6:	4b88      	ldr	r3, [pc, #544]	; (8001508 <HAL_ADC_MspInit+0x29c>)
 80012e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012ea:	4a87      	ldr	r2, [pc, #540]	; (8001508 <HAL_ADC_MspInit+0x29c>)
 80012ec:	f043 0301 	orr.w	r3, r3, #1
 80012f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012f2:	4b85      	ldr	r3, [pc, #532]	; (8001508 <HAL_ADC_MspInit+0x29c>)
 80012f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012f6:	f003 0301 	and.w	r3, r3, #1
 80012fa:	62bb      	str	r3, [r7, #40]	; 0x28
 80012fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80012fe:	2303      	movs	r3, #3
 8001300:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001304:	2303      	movs	r3, #3
 8001306:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800130a:	2300      	movs	r3, #0
 800130c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001310:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001314:	4619      	mov	r1, r3
 8001316:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800131a:	f003 f8b5 	bl	8004488 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC4_MspInit 1 */

  /* USER CODE END ADC4_MspInit 1 */
  }
}
 800131e:	e0ed      	b.n	80014fc <HAL_ADC_MspInit+0x290>
  else if(adcHandle->Instance==ADC2)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4a79      	ldr	r2, [pc, #484]	; (800150c <HAL_ADC_MspInit+0x2a0>)
 8001326:	4293      	cmp	r3, r2
 8001328:	d15b      	bne.n	80013e2 <HAL_ADC_MspInit+0x176>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 800132a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800132e:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001330:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001334:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001336:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800133a:	4618      	mov	r0, r3
 800133c:	f006 f816 	bl	800736c <HAL_RCCEx_PeriphCLKConfig>
 8001340:	4603      	mov	r3, r0
 8001342:	2b00      	cmp	r3, #0
 8001344:	d001      	beq.n	800134a <HAL_ADC_MspInit+0xde>
      Error_Handler();
 8001346:	f000 fcc5 	bl	8001cd4 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 800134a:	4b6e      	ldr	r3, [pc, #440]	; (8001504 <HAL_ADC_MspInit+0x298>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	3301      	adds	r3, #1
 8001350:	4a6c      	ldr	r2, [pc, #432]	; (8001504 <HAL_ADC_MspInit+0x298>)
 8001352:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001354:	4b6b      	ldr	r3, [pc, #428]	; (8001504 <HAL_ADC_MspInit+0x298>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	2b01      	cmp	r3, #1
 800135a:	d10b      	bne.n	8001374 <HAL_ADC_MspInit+0x108>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800135c:	4b6a      	ldr	r3, [pc, #424]	; (8001508 <HAL_ADC_MspInit+0x29c>)
 800135e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001360:	4a69      	ldr	r2, [pc, #420]	; (8001508 <HAL_ADC_MspInit+0x29c>)
 8001362:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001366:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001368:	4b67      	ldr	r3, [pc, #412]	; (8001508 <HAL_ADC_MspInit+0x29c>)
 800136a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800136c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001370:	627b      	str	r3, [r7, #36]	; 0x24
 8001372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001374:	4b64      	ldr	r3, [pc, #400]	; (8001508 <HAL_ADC_MspInit+0x29c>)
 8001376:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001378:	4a63      	ldr	r2, [pc, #396]	; (8001508 <HAL_ADC_MspInit+0x29c>)
 800137a:	f043 0304 	orr.w	r3, r3, #4
 800137e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001380:	4b61      	ldr	r3, [pc, #388]	; (8001508 <HAL_ADC_MspInit+0x29c>)
 8001382:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001384:	f003 0304 	and.w	r3, r3, #4
 8001388:	623b      	str	r3, [r7, #32]
 800138a:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800138c:	4b5e      	ldr	r3, [pc, #376]	; (8001508 <HAL_ADC_MspInit+0x29c>)
 800138e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001390:	4a5d      	ldr	r2, [pc, #372]	; (8001508 <HAL_ADC_MspInit+0x29c>)
 8001392:	f043 0302 	orr.w	r3, r3, #2
 8001396:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001398:	4b5b      	ldr	r3, [pc, #364]	; (8001508 <HAL_ADC_MspInit+0x29c>)
 800139a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800139c:	f003 0302 	and.w	r3, r3, #2
 80013a0:	61fb      	str	r3, [r7, #28]
 80013a2:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80013a4:	2308      	movs	r3, #8
 80013a6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013aa:	2303      	movs	r3, #3
 80013ac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b0:	2300      	movs	r3, #0
 80013b2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013b6:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80013ba:	4619      	mov	r1, r3
 80013bc:	4854      	ldr	r0, [pc, #336]	; (8001510 <HAL_ADC_MspInit+0x2a4>)
 80013be:	f003 f863 	bl	8004488 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80013c2:	2304      	movs	r3, #4
 80013c4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013c8:	2303      	movs	r3, #3
 80013ca:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ce:	2300      	movs	r3, #0
 80013d0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013d4:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80013d8:	4619      	mov	r1, r3
 80013da:	484e      	ldr	r0, [pc, #312]	; (8001514 <HAL_ADC_MspInit+0x2a8>)
 80013dc:	f003 f854 	bl	8004488 <HAL_GPIO_Init>
}
 80013e0:	e08c      	b.n	80014fc <HAL_ADC_MspInit+0x290>
  else if(adcHandle->Instance==ADC3)
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	4a4c      	ldr	r2, [pc, #304]	; (8001518 <HAL_ADC_MspInit+0x2ac>)
 80013e8:	4293      	cmp	r3, r2
 80013ea:	d141      	bne.n	8001470 <HAL_ADC_MspInit+0x204>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 80013ec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80013f0:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 80013f2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80013f6:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013f8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80013fc:	4618      	mov	r0, r3
 80013fe:	f005 ffb5 	bl	800736c <HAL_RCCEx_PeriphCLKConfig>
 8001402:	4603      	mov	r3, r0
 8001404:	2b00      	cmp	r3, #0
 8001406:	d001      	beq.n	800140c <HAL_ADC_MspInit+0x1a0>
      Error_Handler();
 8001408:	f000 fc64 	bl	8001cd4 <Error_Handler>
    HAL_RCC_ADC345_CLK_ENABLED++;
 800140c:	4b43      	ldr	r3, [pc, #268]	; (800151c <HAL_ADC_MspInit+0x2b0>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	3301      	adds	r3, #1
 8001412:	4a42      	ldr	r2, [pc, #264]	; (800151c <HAL_ADC_MspInit+0x2b0>)
 8001414:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 8001416:	4b41      	ldr	r3, [pc, #260]	; (800151c <HAL_ADC_MspInit+0x2b0>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	2b01      	cmp	r3, #1
 800141c:	d10b      	bne.n	8001436 <HAL_ADC_MspInit+0x1ca>
      __HAL_RCC_ADC345_CLK_ENABLE();
 800141e:	4b3a      	ldr	r3, [pc, #232]	; (8001508 <HAL_ADC_MspInit+0x29c>)
 8001420:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001422:	4a39      	ldr	r2, [pc, #228]	; (8001508 <HAL_ADC_MspInit+0x29c>)
 8001424:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001428:	64d3      	str	r3, [r2, #76]	; 0x4c
 800142a:	4b37      	ldr	r3, [pc, #220]	; (8001508 <HAL_ADC_MspInit+0x29c>)
 800142c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800142e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001432:	61bb      	str	r3, [r7, #24]
 8001434:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001436:	4b34      	ldr	r3, [pc, #208]	; (8001508 <HAL_ADC_MspInit+0x29c>)
 8001438:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800143a:	4a33      	ldr	r2, [pc, #204]	; (8001508 <HAL_ADC_MspInit+0x29c>)
 800143c:	f043 0302 	orr.w	r3, r3, #2
 8001440:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001442:	4b31      	ldr	r3, [pc, #196]	; (8001508 <HAL_ADC_MspInit+0x29c>)
 8001444:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001446:	f003 0302 	and.w	r3, r3, #2
 800144a:	617b      	str	r3, [r7, #20]
 800144c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_13;
 800144e:	f242 0302 	movw	r3, #8194	; 0x2002
 8001452:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001456:	2303      	movs	r3, #3
 8001458:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800145c:	2300      	movs	r3, #0
 800145e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001462:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001466:	4619      	mov	r1, r3
 8001468:	482a      	ldr	r0, [pc, #168]	; (8001514 <HAL_ADC_MspInit+0x2a8>)
 800146a:	f003 f80d 	bl	8004488 <HAL_GPIO_Init>
}
 800146e:	e045      	b.n	80014fc <HAL_ADC_MspInit+0x290>
  else if(adcHandle->Instance==ADC4)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	4a2a      	ldr	r2, [pc, #168]	; (8001520 <HAL_ADC_MspInit+0x2b4>)
 8001476:	4293      	cmp	r3, r2
 8001478:	d140      	bne.n	80014fc <HAL_ADC_MspInit+0x290>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 800147a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800147e:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 8001480:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8001484:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001486:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800148a:	4618      	mov	r0, r3
 800148c:	f005 ff6e 	bl	800736c <HAL_RCCEx_PeriphCLKConfig>
 8001490:	4603      	mov	r3, r0
 8001492:	2b00      	cmp	r3, #0
 8001494:	d001      	beq.n	800149a <HAL_ADC_MspInit+0x22e>
      Error_Handler();
 8001496:	f000 fc1d 	bl	8001cd4 <Error_Handler>
    HAL_RCC_ADC345_CLK_ENABLED++;
 800149a:	4b20      	ldr	r3, [pc, #128]	; (800151c <HAL_ADC_MspInit+0x2b0>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	3301      	adds	r3, #1
 80014a0:	4a1e      	ldr	r2, [pc, #120]	; (800151c <HAL_ADC_MspInit+0x2b0>)
 80014a2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 80014a4:	4b1d      	ldr	r3, [pc, #116]	; (800151c <HAL_ADC_MspInit+0x2b0>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	2b01      	cmp	r3, #1
 80014aa:	d10b      	bne.n	80014c4 <HAL_ADC_MspInit+0x258>
      __HAL_RCC_ADC345_CLK_ENABLE();
 80014ac:	4b16      	ldr	r3, [pc, #88]	; (8001508 <HAL_ADC_MspInit+0x29c>)
 80014ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014b0:	4a15      	ldr	r2, [pc, #84]	; (8001508 <HAL_ADC_MspInit+0x29c>)
 80014b2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014b6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014b8:	4b13      	ldr	r3, [pc, #76]	; (8001508 <HAL_ADC_MspInit+0x29c>)
 80014ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014c0:	613b      	str	r3, [r7, #16]
 80014c2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014c4:	4b10      	ldr	r3, [pc, #64]	; (8001508 <HAL_ADC_MspInit+0x29c>)
 80014c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014c8:	4a0f      	ldr	r2, [pc, #60]	; (8001508 <HAL_ADC_MspInit+0x29c>)
 80014ca:	f043 0302 	orr.w	r3, r3, #2
 80014ce:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014d0:	4b0d      	ldr	r3, [pc, #52]	; (8001508 <HAL_ADC_MspInit+0x29c>)
 80014d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014d4:	f003 0302 	and.w	r3, r3, #2
 80014d8:	60fb      	str	r3, [r7, #12]
 80014da:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14;
 80014dc:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 80014e0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014e4:	2303      	movs	r3, #3
 80014e6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ea:	2300      	movs	r3, #0
 80014ec:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014f0:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80014f4:	4619      	mov	r1, r3
 80014f6:	4807      	ldr	r0, [pc, #28]	; (8001514 <HAL_ADC_MspInit+0x2a8>)
 80014f8:	f002 ffc6 	bl	8004488 <HAL_GPIO_Init>
}
 80014fc:	bf00      	nop
 80014fe:	3798      	adds	r7, #152	; 0x98
 8001500:	46bd      	mov	sp, r7
 8001502:	bd80      	pop	{r7, pc}
 8001504:	2000051c 	.word	0x2000051c
 8001508:	40021000 	.word	0x40021000
 800150c:	50000100 	.word	0x50000100
 8001510:	48000800 	.word	0x48000800
 8001514:	48000400 	.word	0x48000400
 8001518:	50000400 	.word	0x50000400
 800151c:	20000520 	.word	0x20000520
 8001520:	50000500 	.word	0x50000500

08001524 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001524:	b5b0      	push	{r4, r5, r7, lr}
 8001526:	b086      	sub	sp, #24
 8001528:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800152a:	4b09      	ldr	r3, [pc, #36]	; (8001550 <MX_FREERTOS_Init+0x2c>)
 800152c:	1d3c      	adds	r4, r7, #4
 800152e:	461d      	mov	r5, r3
 8001530:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001532:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001534:	682b      	ldr	r3, [r5, #0]
 8001536:	6023      	str	r3, [r4, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8001538:	1d3b      	adds	r3, r7, #4
 800153a:	2100      	movs	r1, #0
 800153c:	4618      	mov	r0, r3
 800153e:	f00c febf 	bl	800e2c0 <osThreadCreate>
 8001542:	4603      	mov	r3, r0
 8001544:	4a03      	ldr	r2, [pc, #12]	; (8001554 <MX_FREERTOS_Init+0x30>)
 8001546:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8001548:	bf00      	nop
 800154a:	3718      	adds	r7, #24
 800154c:	46bd      	mov	sp, r7
 800154e:	bdb0      	pop	{r4, r5, r7, pc}
 8001550:	080138ec 	.word	0x080138ec
 8001554:	20000524 	.word	0x20000524

08001558 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b082      	sub	sp, #8
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001560:	2001      	movs	r0, #1
 8001562:	f00c fed4 	bl	800e30e <osDelay>
 8001566:	e7fb      	b.n	8001560 <StartDefaultTask+0x8>

08001568 <MX_CORDIC_Init>:

CORDIC_HandleTypeDef hcordic;

/* CORDIC init function */
void MX_CORDIC_Init(void)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	af00      	add	r7, sp, #0
  /* USER CODE END CORDIC_Init 0 */

  /* USER CODE BEGIN CORDIC_Init 1 */

  /* USER CODE END CORDIC_Init 1 */
  hcordic.Instance = CORDIC;
 800156c:	4b06      	ldr	r3, [pc, #24]	; (8001588 <MX_CORDIC_Init+0x20>)
 800156e:	4a07      	ldr	r2, [pc, #28]	; (800158c <MX_CORDIC_Init+0x24>)
 8001570:	601a      	str	r2, [r3, #0]
  if (HAL_CORDIC_Init(&hcordic) != HAL_OK)
 8001572:	4805      	ldr	r0, [pc, #20]	; (8001588 <MX_CORDIC_Init+0x20>)
 8001574:	f002 fdca 	bl	800410c <HAL_CORDIC_Init>
 8001578:	4603      	mov	r3, r0
 800157a:	2b00      	cmp	r3, #0
 800157c:	d001      	beq.n	8001582 <MX_CORDIC_Init+0x1a>
  {
    Error_Handler();
 800157e:	f000 fba9 	bl	8001cd4 <Error_Handler>
  }
  /* USER CODE BEGIN CORDIC_Init 2 */

  /* USER CODE END CORDIC_Init 2 */

}
 8001582:	bf00      	nop
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	20000528 	.word	0x20000528
 800158c:	40020c00 	.word	0x40020c00

08001590 <HAL_CORDIC_MspInit>:

void HAL_CORDIC_MspInit(CORDIC_HandleTypeDef* cordicHandle)
{
 8001590:	b480      	push	{r7}
 8001592:	b085      	sub	sp, #20
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]

  if(cordicHandle->Instance==CORDIC)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	4a0a      	ldr	r2, [pc, #40]	; (80015c8 <HAL_CORDIC_MspInit+0x38>)
 800159e:	4293      	cmp	r3, r2
 80015a0:	d10b      	bne.n	80015ba <HAL_CORDIC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CORDIC_MspInit 0 */

  /* USER CODE END CORDIC_MspInit 0 */
    /* CORDIC clock enable */
    __HAL_RCC_CORDIC_CLK_ENABLE();
 80015a2:	4b0a      	ldr	r3, [pc, #40]	; (80015cc <HAL_CORDIC_MspInit+0x3c>)
 80015a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80015a6:	4a09      	ldr	r2, [pc, #36]	; (80015cc <HAL_CORDIC_MspInit+0x3c>)
 80015a8:	f043 0308 	orr.w	r3, r3, #8
 80015ac:	6493      	str	r3, [r2, #72]	; 0x48
 80015ae:	4b07      	ldr	r3, [pc, #28]	; (80015cc <HAL_CORDIC_MspInit+0x3c>)
 80015b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80015b2:	f003 0308 	and.w	r3, r3, #8
 80015b6:	60fb      	str	r3, [r7, #12]
 80015b8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CORDIC_MspInit 1 */

  /* USER CODE END CORDIC_MspInit 1 */
  }
}
 80015ba:	bf00      	nop
 80015bc:	3714      	adds	r7, #20
 80015be:	46bd      	mov	sp, r7
 80015c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c4:	4770      	bx	lr
 80015c6:	bf00      	nop
 80015c8:	40020c00 	.word	0x40020c00
 80015cc:	40021000 	.word	0x40021000

080015d0 <MX_FMAC_Init>:

FMAC_HandleTypeDef hfmac;

/* FMAC init function */
void MX_FMAC_Init(void)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	af00      	add	r7, sp, #0
  /* USER CODE END FMAC_Init 0 */

  /* USER CODE BEGIN FMAC_Init 1 */

  /* USER CODE END FMAC_Init 1 */
  hfmac.Instance = FMAC;
 80015d4:	4b06      	ldr	r3, [pc, #24]	; (80015f0 <MX_FMAC_Init+0x20>)
 80015d6:	4a07      	ldr	r2, [pc, #28]	; (80015f4 <MX_FMAC_Init+0x24>)
 80015d8:	601a      	str	r2, [r3, #0]
  if (HAL_FMAC_Init(&hfmac) != HAL_OK)
 80015da:	4805      	ldr	r0, [pc, #20]	; (80015f0 <MX_FMAC_Init+0x20>)
 80015dc:	f002 fea8 	bl	8004330 <HAL_FMAC_Init>
 80015e0:	4603      	mov	r3, r0
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d001      	beq.n	80015ea <MX_FMAC_Init+0x1a>
  {
    Error_Handler();
 80015e6:	f000 fb75 	bl	8001cd4 <Error_Handler>
  }
  /* USER CODE BEGIN FMAC_Init 2 */

  /* USER CODE END FMAC_Init 2 */

}
 80015ea:	bf00      	nop
 80015ec:	bd80      	pop	{r7, pc}
 80015ee:	bf00      	nop
 80015f0:	20000550 	.word	0x20000550
 80015f4:	40021400 	.word	0x40021400

080015f8 <HAL_FMAC_MspInit>:

void HAL_FMAC_MspInit(FMAC_HandleTypeDef* fmacHandle)
{
 80015f8:	b480      	push	{r7}
 80015fa:	b085      	sub	sp, #20
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]

  if(fmacHandle->Instance==FMAC)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4a0a      	ldr	r2, [pc, #40]	; (8001630 <HAL_FMAC_MspInit+0x38>)
 8001606:	4293      	cmp	r3, r2
 8001608:	d10b      	bne.n	8001622 <HAL_FMAC_MspInit+0x2a>
  {
  /* USER CODE BEGIN FMAC_MspInit 0 */

  /* USER CODE END FMAC_MspInit 0 */
    /* FMAC clock enable */
    __HAL_RCC_FMAC_CLK_ENABLE();
 800160a:	4b0a      	ldr	r3, [pc, #40]	; (8001634 <HAL_FMAC_MspInit+0x3c>)
 800160c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800160e:	4a09      	ldr	r2, [pc, #36]	; (8001634 <HAL_FMAC_MspInit+0x3c>)
 8001610:	f043 0310 	orr.w	r3, r3, #16
 8001614:	6493      	str	r3, [r2, #72]	; 0x48
 8001616:	4b07      	ldr	r3, [pc, #28]	; (8001634 <HAL_FMAC_MspInit+0x3c>)
 8001618:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800161a:	f003 0310 	and.w	r3, r3, #16
 800161e:	60fb      	str	r3, [r7, #12]
 8001620:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN FMAC_MspInit 1 */

  /* USER CODE END FMAC_MspInit 1 */
  }
}
 8001622:	bf00      	nop
 8001624:	3714      	adds	r7, #20
 8001626:	46bd      	mov	sp, r7
 8001628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162c:	4770      	bx	lr
 800162e:	bf00      	nop
 8001630:	40021400 	.word	0x40021400
 8001634:	40021000 	.word	0x40021000

08001638 <HAL_GPIO_EXTI_Callback>:
#include "cmsis_os.h"
extern TaskHandle_t xHandle_Button;

/* USER CODE BEGIN 0 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b084      	sub	sp, #16
 800163c:	af00      	add	r7, sp, #0
 800163e:	4603      	mov	r3, r0
 8001640:	80fb      	strh	r3, [r7, #6]
	BaseType_t higher_priority_task_woken = pdFALSE;
 8001642:	2300      	movs	r3, #0
 8001644:	60fb      	str	r3, [r7, #12]
	switch(GPIO_Pin){
 8001646:	88fb      	ldrh	r3, [r7, #6]
 8001648:	2b80      	cmp	r3, #128	; 0x80
 800164a:	d020      	beq.n	800168e <HAL_GPIO_EXTI_Callback+0x56>
 800164c:	2b80      	cmp	r3, #128	; 0x80
 800164e:	dc20      	bgt.n	8001692 <HAL_GPIO_EXTI_Callback+0x5a>
 8001650:	2b40      	cmp	r3, #64	; 0x40
 8001652:	d016      	beq.n	8001682 <HAL_GPIO_EXTI_Callback+0x4a>
 8001654:	2b40      	cmp	r3, #64	; 0x40
 8001656:	dc1c      	bgt.n	8001692 <HAL_GPIO_EXTI_Callback+0x5a>
 8001658:	2b20      	cmp	r3, #32
 800165a:	d01c      	beq.n	8001696 <HAL_GPIO_EXTI_Callback+0x5e>
 800165c:	2b20      	cmp	r3, #32
 800165e:	dc18      	bgt.n	8001692 <HAL_GPIO_EXTI_Callback+0x5a>
 8001660:	2b04      	cmp	r3, #4
 8001662:	d002      	beq.n	800166a <HAL_GPIO_EXTI_Callback+0x32>
 8001664:	2b10      	cmp	r3, #16
 8001666:	d006      	beq.n	8001676 <HAL_GPIO_EXTI_Callback+0x3e>
	case Soft_NRST_Pin:	//0x0080 PB7
		break;
	case ENC_BTN_Pin:	//0x0020 PA5
		break;
	default:
		break;
 8001668:	e013      	b.n	8001692 <HAL_GPIO_EXTI_Callback+0x5a>
		HAL_GPIO_TogglePin(Pwr_Enable_U_GPIO_Port, Pwr_Enable_U_Pin);
 800166a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800166e:	480c      	ldr	r0, [pc, #48]	; (80016a0 <HAL_GPIO_EXTI_Callback+0x68>)
 8001670:	f003 f8a4 	bl	80047bc <HAL_GPIO_TogglePin>
		break;
 8001674:	e010      	b.n	8001698 <HAL_GPIO_EXTI_Callback+0x60>
		HAL_GPIO_TogglePin(Pwr_Enable_V_GPIO_Port, Pwr_Enable_V_Pin);
 8001676:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800167a:	4809      	ldr	r0, [pc, #36]	; (80016a0 <HAL_GPIO_EXTI_Callback+0x68>)
 800167c:	f003 f89e 	bl	80047bc <HAL_GPIO_TogglePin>
		break;
 8001680:	e00a      	b.n	8001698 <HAL_GPIO_EXTI_Callback+0x60>
		HAL_GPIO_TogglePin(Pwr_Enable_W_GPIO_Port, Pwr_Enable_W_Pin);
 8001682:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001686:	4806      	ldr	r0, [pc, #24]	; (80016a0 <HAL_GPIO_EXTI_Callback+0x68>)
 8001688:	f003 f898 	bl	80047bc <HAL_GPIO_TogglePin>
		break;
 800168c:	e004      	b.n	8001698 <HAL_GPIO_EXTI_Callback+0x60>
		break;
 800168e:	bf00      	nop
 8001690:	e002      	b.n	8001698 <HAL_GPIO_EXTI_Callback+0x60>
		break;
 8001692:	bf00      	nop
 8001694:	e000      	b.n	8001698 <HAL_GPIO_EXTI_Callback+0x60>
		break;
 8001696:	bf00      	nop
	}
}
 8001698:	bf00      	nop
 800169a:	3710      	adds	r7, #16
 800169c:	46bd      	mov	sp, r7
 800169e:	bd80      	pop	{r7, pc}
 80016a0:	48000800 	.word	0x48000800

080016a4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b08c      	sub	sp, #48	; 0x30
 80016a8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016aa:	f107 031c 	add.w	r3, r7, #28
 80016ae:	2200      	movs	r2, #0
 80016b0:	601a      	str	r2, [r3, #0]
 80016b2:	605a      	str	r2, [r3, #4]
 80016b4:	609a      	str	r2, [r3, #8]
 80016b6:	60da      	str	r2, [r3, #12]
 80016b8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016ba:	4b70      	ldr	r3, [pc, #448]	; (800187c <MX_GPIO_Init+0x1d8>)
 80016bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016be:	4a6f      	ldr	r2, [pc, #444]	; (800187c <MX_GPIO_Init+0x1d8>)
 80016c0:	f043 0304 	orr.w	r3, r3, #4
 80016c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016c6:	4b6d      	ldr	r3, [pc, #436]	; (800187c <MX_GPIO_Init+0x1d8>)
 80016c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016ca:	f003 0304 	and.w	r3, r3, #4
 80016ce:	61bb      	str	r3, [r7, #24]
 80016d0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80016d2:	4b6a      	ldr	r3, [pc, #424]	; (800187c <MX_GPIO_Init+0x1d8>)
 80016d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016d6:	4a69      	ldr	r2, [pc, #420]	; (800187c <MX_GPIO_Init+0x1d8>)
 80016d8:	f043 0320 	orr.w	r3, r3, #32
 80016dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016de:	4b67      	ldr	r3, [pc, #412]	; (800187c <MX_GPIO_Init+0x1d8>)
 80016e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016e2:	f003 0320 	and.w	r3, r3, #32
 80016e6:	617b      	str	r3, [r7, #20]
 80016e8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80016ea:	4b64      	ldr	r3, [pc, #400]	; (800187c <MX_GPIO_Init+0x1d8>)
 80016ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016ee:	4a63      	ldr	r2, [pc, #396]	; (800187c <MX_GPIO_Init+0x1d8>)
 80016f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80016f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016f6:	4b61      	ldr	r3, [pc, #388]	; (800187c <MX_GPIO_Init+0x1d8>)
 80016f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80016fe:	613b      	str	r3, [r7, #16]
 8001700:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001702:	4b5e      	ldr	r3, [pc, #376]	; (800187c <MX_GPIO_Init+0x1d8>)
 8001704:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001706:	4a5d      	ldr	r2, [pc, #372]	; (800187c <MX_GPIO_Init+0x1d8>)
 8001708:	f043 0301 	orr.w	r3, r3, #1
 800170c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800170e:	4b5b      	ldr	r3, [pc, #364]	; (800187c <MX_GPIO_Init+0x1d8>)
 8001710:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001712:	f003 0301 	and.w	r3, r3, #1
 8001716:	60fb      	str	r3, [r7, #12]
 8001718:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800171a:	4b58      	ldr	r3, [pc, #352]	; (800187c <MX_GPIO_Init+0x1d8>)
 800171c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800171e:	4a57      	ldr	r2, [pc, #348]	; (800187c <MX_GPIO_Init+0x1d8>)
 8001720:	f043 0302 	orr.w	r3, r3, #2
 8001724:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001726:	4b55      	ldr	r3, [pc, #340]	; (800187c <MX_GPIO_Init+0x1d8>)
 8001728:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800172a:	f003 0302 	and.w	r3, r3, #2
 800172e:	60bb      	str	r3, [r7, #8]
 8001730:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001732:	4b52      	ldr	r3, [pc, #328]	; (800187c <MX_GPIO_Init+0x1d8>)
 8001734:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001736:	4a51      	ldr	r2, [pc, #324]	; (800187c <MX_GPIO_Init+0x1d8>)
 8001738:	f043 0308 	orr.w	r3, r3, #8
 800173c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800173e:	4b4f      	ldr	r3, [pc, #316]	; (800187c <MX_GPIO_Init+0x1d8>)
 8001740:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001742:	f003 0308 	and.w	r3, r3, #8
 8001746:	607b      	str	r3, [r7, #4]
 8001748:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Pwr_Enable_U_Pin|Pwr_Enable_V_Pin|Pwr_Enable_W_Pin|USR_LED_3_Pin
 800174a:	2200      	movs	r2, #0
 800174c:	f44f 417c 	mov.w	r1, #64512	; 0xfc00
 8001750:	484b      	ldr	r0, [pc, #300]	; (8001880 <MX_GPIO_Init+0x1dc>)
 8001752:	f003 f81b 	bl	800478c <HAL_GPIO_WritePin>
                          |USR_LED_2_Pin|USR_LED_1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USR_LED_4_GPIO_Port, USR_LED_4_Pin, GPIO_PIN_RESET);
 8001756:	2200      	movs	r2, #0
 8001758:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800175c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001760:	f003 f814 	bl	800478c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin */
  GPIO_InitStruct.Pin = Pwr_Enable_U_Pin|Pwr_Enable_V_Pin|Pwr_Enable_W_Pin|USR_LED_3_Pin
 8001764:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8001768:	61fb      	str	r3, [r7, #28]
                          |USR_LED_2_Pin|USR_LED_1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800176a:	2301      	movs	r3, #1
 800176c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800176e:	2300      	movs	r3, #0
 8001770:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001772:	2300      	movs	r3, #0
 8001774:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001776:	f107 031c 	add.w	r3, r7, #28
 800177a:	4619      	mov	r1, r3
 800177c:	4840      	ldr	r0, [pc, #256]	; (8001880 <MX_GPIO_Init+0x1dc>)
 800177e:	f002 fe83 	bl	8004488 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NRST_Pin;
 8001782:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001786:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001788:	2300      	movs	r3, #0
 800178a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800178c:	2300      	movs	r3, #0
 800178e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(NRST_GPIO_Port, &GPIO_InitStruct);
 8001790:	f107 031c 	add.w	r3, r7, #28
 8001794:	4619      	mov	r1, r3
 8001796:	483b      	ldr	r0, [pc, #236]	; (8001884 <MX_GPIO_Init+0x1e0>)
 8001798:	f002 fe76 	bl	8004488 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USR_BTN_2_Pin;
 800179c:	2310      	movs	r3, #16
 800179e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80017a0:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80017a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80017a6:	2301      	movs	r3, #1
 80017a8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USR_BTN_2_GPIO_Port, &GPIO_InitStruct);
 80017aa:	f107 031c 	add.w	r3, r7, #28
 80017ae:	4619      	mov	r1, r3
 80017b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017b4:	f002 fe68 	bl	8004488 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENC_BTN_Pin;
 80017b8:	2320      	movs	r3, #32
 80017ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80017bc:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80017c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c2:	2300      	movs	r3, #0
 80017c4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ENC_BTN_GPIO_Port, &GPIO_InitStruct);
 80017c6:	f107 031c 	add.w	r3, r7, #28
 80017ca:	4619      	mov	r1, r3
 80017cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017d0:	f002 fe5a 	bl	8004488 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Nucleo_NRST_Pin;
 80017d4:	2301      	movs	r3, #1
 80017d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80017d8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80017dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017de:	2300      	movs	r3, #0
 80017e0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Nucleo_NRST_GPIO_Port, &GPIO_InitStruct);
 80017e2:	f107 031c 	add.w	r3, r7, #28
 80017e6:	4619      	mov	r1, r3
 80017e8:	4827      	ldr	r0, [pc, #156]	; (8001888 <MX_GPIO_Init+0x1e4>)
 80017ea:	f002 fe4d 	bl	8004488 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USR_LED_4_Pin;
 80017ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80017f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017f4:	2301      	movs	r3, #1
 80017f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f8:	2300      	movs	r3, #0
 80017fa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017fc:	2300      	movs	r3, #0
 80017fe:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USR_LED_4_GPIO_Port, &GPIO_InitStruct);
 8001800:	f107 031c 	add.w	r3, r7, #28
 8001804:	4619      	mov	r1, r3
 8001806:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800180a:	f002 fe3d 	bl	8004488 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USR_BTN_1_Pin;
 800180e:	2304      	movs	r3, #4
 8001810:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001812:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001816:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001818:	2301      	movs	r3, #1
 800181a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USR_BTN_1_GPIO_Port, &GPIO_InitStruct);
 800181c:	f107 031c 	add.w	r3, r7, #28
 8001820:	4619      	mov	r1, r3
 8001822:	481a      	ldr	r0, [pc, #104]	; (800188c <MX_GPIO_Init+0x1e8>)
 8001824:	f002 fe30 	bl	8004488 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = USR_BTN_3_Pin|Soft_NRST_Pin;
 8001828:	23c0      	movs	r3, #192	; 0xc0
 800182a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800182c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001830:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001832:	2301      	movs	r3, #1
 8001834:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001836:	f107 031c 	add.w	r3, r7, #28
 800183a:	4619      	mov	r1, r3
 800183c:	4812      	ldr	r0, [pc, #72]	; (8001888 <MX_GPIO_Init+0x1e4>)
 800183e:	f002 fe23 	bl	8004488 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 8001842:	2200      	movs	r2, #0
 8001844:	2105      	movs	r1, #5
 8001846:	2008      	movs	r0, #8
 8001848:	f002 fd4a 	bl	80042e0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 800184c:	2008      	movs	r0, #8
 800184e:	f002 fd61 	bl	8004314 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 8001852:	2200      	movs	r2, #0
 8001854:	2105      	movs	r1, #5
 8001856:	200a      	movs	r0, #10
 8001858:	f002 fd42 	bl	80042e0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800185c:	200a      	movs	r0, #10
 800185e:	f002 fd59 	bl	8004314 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8001862:	2200      	movs	r2, #0
 8001864:	2105      	movs	r1, #5
 8001866:	2017      	movs	r0, #23
 8001868:	f002 fd3a 	bl	80042e0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800186c:	2017      	movs	r0, #23
 800186e:	f002 fd51 	bl	8004314 <HAL_NVIC_EnableIRQ>

}
 8001872:	bf00      	nop
 8001874:	3730      	adds	r7, #48	; 0x30
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}
 800187a:	bf00      	nop
 800187c:	40021000 	.word	0x40021000
 8001880:	48000800 	.word	0x48000800
 8001884:	48001800 	.word	0x48001800
 8001888:	48000400 	.word	0x48000400
 800188c:	48000c00 	.word	0x48000c00

08001890 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001894:	4b1b      	ldr	r3, [pc, #108]	; (8001904 <MX_I2C2_Init+0x74>)
 8001896:	4a1c      	ldr	r2, [pc, #112]	; (8001908 <MX_I2C2_Init+0x78>)
 8001898:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x30A0A7FB;
 800189a:	4b1a      	ldr	r3, [pc, #104]	; (8001904 <MX_I2C2_Init+0x74>)
 800189c:	4a1b      	ldr	r2, [pc, #108]	; (800190c <MX_I2C2_Init+0x7c>)
 800189e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80018a0:	4b18      	ldr	r3, [pc, #96]	; (8001904 <MX_I2C2_Init+0x74>)
 80018a2:	2200      	movs	r2, #0
 80018a4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80018a6:	4b17      	ldr	r3, [pc, #92]	; (8001904 <MX_I2C2_Init+0x74>)
 80018a8:	2201      	movs	r2, #1
 80018aa:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80018ac:	4b15      	ldr	r3, [pc, #84]	; (8001904 <MX_I2C2_Init+0x74>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80018b2:	4b14      	ldr	r3, [pc, #80]	; (8001904 <MX_I2C2_Init+0x74>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80018b8:	4b12      	ldr	r3, [pc, #72]	; (8001904 <MX_I2C2_Init+0x74>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80018be:	4b11      	ldr	r3, [pc, #68]	; (8001904 <MX_I2C2_Init+0x74>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80018c4:	4b0f      	ldr	r3, [pc, #60]	; (8001904 <MX_I2C2_Init+0x74>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80018ca:	480e      	ldr	r0, [pc, #56]	; (8001904 <MX_I2C2_Init+0x74>)
 80018cc:	f002 ffa8 	bl	8004820 <HAL_I2C_Init>
 80018d0:	4603      	mov	r3, r0
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d001      	beq.n	80018da <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80018d6:	f000 f9fd 	bl	8001cd4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80018da:	2100      	movs	r1, #0
 80018dc:	4809      	ldr	r0, [pc, #36]	; (8001904 <MX_I2C2_Init+0x74>)
 80018de:	f003 f975 	bl	8004bcc <HAL_I2CEx_ConfigAnalogFilter>
 80018e2:	4603      	mov	r3, r0
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d001      	beq.n	80018ec <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80018e8:	f000 f9f4 	bl	8001cd4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80018ec:	2100      	movs	r1, #0
 80018ee:	4805      	ldr	r0, [pc, #20]	; (8001904 <MX_I2C2_Init+0x74>)
 80018f0:	f003 f9b7 	bl	8004c62 <HAL_I2CEx_ConfigDigitalFilter>
 80018f4:	4603      	mov	r3, r0
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d001      	beq.n	80018fe <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80018fa:	f000 f9eb 	bl	8001cd4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80018fe:	bf00      	nop
 8001900:	bd80      	pop	{r7, pc}
 8001902:	bf00      	nop
 8001904:	20000588 	.word	0x20000588
 8001908:	40005800 	.word	0x40005800
 800190c:	30a0a7fb 	.word	0x30a0a7fb

08001910 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b09e      	sub	sp, #120	; 0x78
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001918:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800191c:	2200      	movs	r2, #0
 800191e:	601a      	str	r2, [r3, #0]
 8001920:	605a      	str	r2, [r3, #4]
 8001922:	609a      	str	r2, [r3, #8]
 8001924:	60da      	str	r2, [r3, #12]
 8001926:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001928:	f107 0310 	add.w	r3, r7, #16
 800192c:	2254      	movs	r2, #84	; 0x54
 800192e:	2100      	movs	r1, #0
 8001930:	4618      	mov	r0, r3
 8001932:	f010 f8b5 	bl	8011aa0 <memset>
  if(i2cHandle->Instance==I2C2)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	4a1f      	ldr	r2, [pc, #124]	; (80019b8 <HAL_I2C_MspInit+0xa8>)
 800193c:	4293      	cmp	r3, r2
 800193e:	d137      	bne.n	80019b0 <HAL_I2C_MspInit+0xa0>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001940:	2380      	movs	r3, #128	; 0x80
 8001942:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001944:	2300      	movs	r3, #0
 8001946:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001948:	f107 0310 	add.w	r3, r7, #16
 800194c:	4618      	mov	r0, r3
 800194e:	f005 fd0d 	bl	800736c <HAL_RCCEx_PeriphCLKConfig>
 8001952:	4603      	mov	r3, r0
 8001954:	2b00      	cmp	r3, #0
 8001956:	d001      	beq.n	800195c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001958:	f000 f9bc 	bl	8001cd4 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800195c:	4b17      	ldr	r3, [pc, #92]	; (80019bc <HAL_I2C_MspInit+0xac>)
 800195e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001960:	4a16      	ldr	r2, [pc, #88]	; (80019bc <HAL_I2C_MspInit+0xac>)
 8001962:	f043 0301 	orr.w	r3, r3, #1
 8001966:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001968:	4b14      	ldr	r3, [pc, #80]	; (80019bc <HAL_I2C_MspInit+0xac>)
 800196a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800196c:	f003 0301 	and.w	r3, r3, #1
 8001970:	60fb      	str	r3, [r7, #12]
 8001972:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PA8     ------> I2C2_SDA
    PA9     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001974:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001978:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800197a:	2312      	movs	r3, #18
 800197c:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800197e:	2300      	movs	r3, #0
 8001980:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001982:	2300      	movs	r3, #0
 8001984:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001986:	2304      	movs	r3, #4
 8001988:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800198a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800198e:	4619      	mov	r1, r3
 8001990:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001994:	f002 fd78 	bl	8004488 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001998:	4b08      	ldr	r3, [pc, #32]	; (80019bc <HAL_I2C_MspInit+0xac>)
 800199a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800199c:	4a07      	ldr	r2, [pc, #28]	; (80019bc <HAL_I2C_MspInit+0xac>)
 800199e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80019a2:	6593      	str	r3, [r2, #88]	; 0x58
 80019a4:	4b05      	ldr	r3, [pc, #20]	; (80019bc <HAL_I2C_MspInit+0xac>)
 80019a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019a8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019ac:	60bb      	str	r3, [r7, #8]
 80019ae:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80019b0:	bf00      	nop
 80019b2:	3778      	adds	r7, #120	; 0x78
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bd80      	pop	{r7, pc}
 80019b8:	40005800 	.word	0x40005800
 80019bc:	40021000 	.word	0x40021000

080019c0 <I2C_Scan>:
  /* USER CODE END I2C2_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void I2C_Scan(I2C_HandleTypeDef* i2cHandle){
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b084      	sub	sp, #16
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
	uint8_t i2c_Number = 0;
 80019c8:	2300      	movs	r3, #0
 80019ca:	73fb      	strb	r3, [r7, #15]
	if(i2cHandle->Instance==I2C1) i2c_Number = 2;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4a23      	ldr	r2, [pc, #140]	; (8001a60 <I2C_Scan+0xa0>)
 80019d2:	4293      	cmp	r3, r2
 80019d4:	d101      	bne.n	80019da <I2C_Scan+0x1a>
 80019d6:	2302      	movs	r3, #2
 80019d8:	73fb      	strb	r3, [r7, #15]
	if(i2cHandle->Instance==I2C2) i2c_Number = 2;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4a21      	ldr	r2, [pc, #132]	; (8001a64 <I2C_Scan+0xa4>)
 80019e0:	4293      	cmp	r3, r2
 80019e2:	d101      	bne.n	80019e8 <I2C_Scan+0x28>
 80019e4:	2302      	movs	r3, #2
 80019e6:	73fb      	strb	r3, [r7, #15]
	if(i2cHandle->Instance==I2C3) i2c_Number = 3;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	4a1e      	ldr	r2, [pc, #120]	; (8001a68 <I2C_Scan+0xa8>)
 80019ee:	4293      	cmp	r3, r2
 80019f0:	d101      	bne.n	80019f6 <I2C_Scan+0x36>
 80019f2:	2303      	movs	r3, #3
 80019f4:	73fb      	strb	r3, [r7, #15]
	printf("### Scanning I2C bus number %d ###\r\n", i2c_Number);
 80019f6:	7bfb      	ldrb	r3, [r7, #15]
 80019f8:	4619      	mov	r1, r3
 80019fa:	481c      	ldr	r0, [pc, #112]	; (8001a6c <I2C_Scan+0xac>)
 80019fc:	f00f ff0a 	bl	8011814 <iprintf>
	for(uint16_t addr = 0x00; addr < 0x80; addr++){
 8001a00:	2300      	movs	r3, #0
 8001a02:	81bb      	strh	r3, [r7, #12]
 8001a04:	e022      	b.n	8001a4c <I2C_Scan+0x8c>
		if(HAL_I2C_IsDeviceReady(i2cHandle, addr<<1, 1, 10) == HAL_OK){
 8001a06:	89bb      	ldrh	r3, [r7, #12]
 8001a08:	005b      	lsls	r3, r3, #1
 8001a0a:	b299      	uxth	r1, r3
 8001a0c:	230a      	movs	r3, #10
 8001a0e:	2201      	movs	r2, #1
 8001a10:	6878      	ldr	r0, [r7, #4]
 8001a12:	f002 ff94 	bl	800493e <HAL_I2C_IsDeviceReady>
 8001a16:	4603      	mov	r3, r0
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d105      	bne.n	8001a28 <I2C_Scan+0x68>
			printf("0x%2x ", addr);
 8001a1c:	89bb      	ldrh	r3, [r7, #12]
 8001a1e:	4619      	mov	r1, r3
 8001a20:	4813      	ldr	r0, [pc, #76]	; (8001a70 <I2C_Scan+0xb0>)
 8001a22:	f00f fef7 	bl	8011814 <iprintf>
 8001a26:	e002      	b.n	8001a2e <I2C_Scan+0x6e>
		}
		else{
			printf(" --  ");
 8001a28:	4812      	ldr	r0, [pc, #72]	; (8001a74 <I2C_Scan+0xb4>)
 8001a2a:	f00f fef3 	bl	8011814 <iprintf>
		}
		if((addr+1)%8 == 0){
 8001a2e:	89bb      	ldrh	r3, [r7, #12]
 8001a30:	3301      	adds	r3, #1
 8001a32:	f003 0307 	and.w	r3, r3, #7
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d102      	bne.n	8001a40 <I2C_Scan+0x80>
			printf("\r\n");
 8001a3a:	480f      	ldr	r0, [pc, #60]	; (8001a78 <I2C_Scan+0xb8>)
 8001a3c:	f00f ff50 	bl	80118e0 <puts>
		}
		HAL_Delay(1);
 8001a40:	2001      	movs	r0, #1
 8001a42:	f001 fa37 	bl	8002eb4 <HAL_Delay>
	for(uint16_t addr = 0x00; addr < 0x80; addr++){
 8001a46:	89bb      	ldrh	r3, [r7, #12]
 8001a48:	3301      	adds	r3, #1
 8001a4a:	81bb      	strh	r3, [r7, #12]
 8001a4c:	89bb      	ldrh	r3, [r7, #12]
 8001a4e:	2b7f      	cmp	r3, #127	; 0x7f
 8001a50:	d9d9      	bls.n	8001a06 <I2C_Scan+0x46>
	}
	printf("\r\n");
 8001a52:	4809      	ldr	r0, [pc, #36]	; (8001a78 <I2C_Scan+0xb8>)
 8001a54:	f00f ff44 	bl	80118e0 <puts>
}
 8001a58:	bf00      	nop
 8001a5a:	3710      	adds	r7, #16
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bd80      	pop	{r7, pc}
 8001a60:	40005400 	.word	0x40005400
 8001a64:	40005800 	.word	0x40005800
 8001a68:	40007800 	.word	0x40007800
 8001a6c:	08013900 	.word	0x08013900
 8001a70:	08013928 	.word	0x08013928
 8001a74:	08013930 	.word	0x08013930
 8001a78:	08013938 	.word	0x08013938

08001a7c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b082      	sub	sp, #8
 8001a80:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a82:	f001 f9e0 	bl	8002e46 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a86:	f000 f8b5 	bl	8001bf4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a8a:	f7ff fe0b 	bl	80016a4 <MX_GPIO_Init>
  MX_ADC1_Init();
 8001a8e:	f7ff fa31 	bl	8000ef4 <MX_ADC1_Init>
  MX_ADC2_Init();
 8001a92:	f7ff faa7 	bl	8000fe4 <MX_ADC2_Init>
  MX_ADC3_Init();
 8001a96:	f7ff fb0b 	bl	80010b0 <MX_ADC3_Init>
  MX_ADC4_Init();
 8001a9a:	f7ff fb81 	bl	80011a0 <MX_ADC4_Init>
  MX_CORDIC_Init();
 8001a9e:	f7ff fd63 	bl	8001568 <MX_CORDIC_Init>
  MX_FMAC_Init();
 8001aa2:	f7ff fd95 	bl	80015d0 <MX_FMAC_Init>
  MX_I2C2_Init();
 8001aa6:	f7ff fef3 	bl	8001890 <MX_I2C2_Init>
  MX_TIM8_Init();
 8001aaa:	f000 fb91 	bl	80021d0 <MX_TIM8_Init>
  MX_TIM15_Init();
 8001aae:	f000 fc27 	bl	8002300 <MX_TIM15_Init>
  MX_TIM17_Init();
 8001ab2:	f000 fd1f 	bl	80024f4 <MX_TIM17_Init>
  MX_USART1_UART_Init();
 8001ab6:	f000 ff01 	bl	80028bc <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8001aba:	f000 ff4b 	bl	8002954 <MX_USART3_UART_Init>
  MX_TIM16_Init();
 8001abe:	f000 fc9f 	bl	8002400 <MX_TIM16_Init>
  MX_TIM1_Init();
 8001ac2:	f000 fabf 	bl	8002044 <MX_TIM1_Init>
  MX_USB_Device_Init();
 8001ac6:	f00e fca9 	bl	801041c <MX_USB_Device_Init>
  MX_TIM3_Init();
 8001aca:	f000 fb29 	bl	8002120 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
	I2C_Scan(&hi2c2);
 8001ace:	4834      	ldr	r0, [pc, #208]	; (8001ba0 <main+0x124>)
 8001ad0:	f7ff ff76 	bl	80019c0 <I2C_Scan>
	printf(	"*****************************************\r\n"
 8001ad4:	4833      	ldr	r0, [pc, #204]	; (8001ba4 <main+0x128>)
 8001ad6:	f00f ff03 	bl	80118e0 <puts>
			"* ENSEA INVERTER PROJECT                *\r\n"
			"* Firmware revision 1.1		         *\r\n"
			"* By Nicolas Papazoglou & Alexis Martin *\r\n"
			"*****************************************\r\n");
	//I2C_Scan(&hi2c2);
	xUartMutex = xSemaphoreCreateMutex();
 8001ada:	2001      	movs	r0, #1
 8001adc:	f00c fdb7 	bl	800e64e <xQueueCreateMutex>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	4a31      	ldr	r2, [pc, #196]	; (8001ba8 <main+0x12c>)
 8001ae4:	6013      	str	r3, [r2, #0]
	xI2CMutex = xSemaphoreCreateMutex();
 8001ae6:	2001      	movs	r0, #1
 8001ae8:	f00c fdb1 	bl	800e64e <xQueueCreateMutex>
 8001aec:	4603      	mov	r3, r0
 8001aee:	4a2f      	ldr	r2, [pc, #188]	; (8001bac <main+0x130>)
 8001af0:	6013      	str	r3, [r2, #0]
	xTemperatureQueue = xQueueCreate(1, sizeof(float));
 8001af2:	2200      	movs	r2, #0
 8001af4:	2104      	movs	r1, #4
 8001af6:	2001      	movs	r0, #1
 8001af8:	f00c fd3a 	bl	800e570 <xQueueGenericCreate>
 8001afc:	4603      	mov	r3, r0
 8001afe:	4a2c      	ldr	r2, [pc, #176]	; (8001bb0 <main+0x134>)
 8001b00:	6013      	str	r3, [r2, #0]

	HAL_GPIO_WritePin(Pwr_Enable_U_GPIO_Port, Pwr_Enable_U_Pin, RESET);
 8001b02:	2200      	movs	r2, #0
 8001b04:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001b08:	482a      	ldr	r0, [pc, #168]	; (8001bb4 <main+0x138>)
 8001b0a:	f002 fe3f 	bl	800478c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Pwr_Enable_V_GPIO_Port, Pwr_Enable_V_Pin, RESET);
 8001b0e:	2200      	movs	r2, #0
 8001b10:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001b14:	4827      	ldr	r0, [pc, #156]	; (8001bb4 <main+0x138>)
 8001b16:	f002 fe39 	bl	800478c <HAL_GPIO_WritePin>

	if(pdPASS==xTaskCreate(vTask_Break, "Break_Task", STACK_SIZE, (void *) &htim17, BREAK_Task_Priority, &xHandle_Break)){
 8001b1a:	4b27      	ldr	r3, [pc, #156]	; (8001bb8 <main+0x13c>)
 8001b1c:	9301      	str	r3, [sp, #4]
 8001b1e:	2306      	movs	r3, #6
 8001b20:	9300      	str	r3, [sp, #0]
 8001b22:	4b26      	ldr	r3, [pc, #152]	; (8001bbc <main+0x140>)
 8001b24:	2280      	movs	r2, #128	; 0x80
 8001b26:	4926      	ldr	r1, [pc, #152]	; (8001bc0 <main+0x144>)
 8001b28:	4826      	ldr	r0, [pc, #152]	; (8001bc4 <main+0x148>)
 8001b2a:	f00d f8b5 	bl	800ec98 <xTaskCreate>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	2b01      	cmp	r3, #1
 8001b32:	d103      	bne.n	8001b3c <main+0xc0>
		printf("Break_Task successfully created\r\n");
 8001b34:	4824      	ldr	r0, [pc, #144]	; (8001bc8 <main+0x14c>)
 8001b36:	f00f fed3 	bl	80118e0 <puts>
 8001b3a:	e002      	b.n	8001b42 <main+0xc6>
	}
	else{
		printf("Break_Task creation error\r\n");
 8001b3c:	4823      	ldr	r0, [pc, #140]	; (8001bcc <main+0x150>)
 8001b3e:	f00f fecf 	bl	80118e0 <puts>
	}

	if(pdPASS==xTaskCreate(vTask_Button, "Button_Task", STACK_SIZE, (void *) NULL, BUTTON_Task_Priority, &xHandle_Break)){
 8001b42:	4b1d      	ldr	r3, [pc, #116]	; (8001bb8 <main+0x13c>)
 8001b44:	9301      	str	r3, [sp, #4]
 8001b46:	2305      	movs	r3, #5
 8001b48:	9300      	str	r3, [sp, #0]
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	2280      	movs	r2, #128	; 0x80
 8001b4e:	4920      	ldr	r1, [pc, #128]	; (8001bd0 <main+0x154>)
 8001b50:	4820      	ldr	r0, [pc, #128]	; (8001bd4 <main+0x158>)
 8001b52:	f00d f8a1 	bl	800ec98 <xTaskCreate>
 8001b56:	4603      	mov	r3, r0
 8001b58:	2b01      	cmp	r3, #1
 8001b5a:	d103      	bne.n	8001b64 <main+0xe8>
		printf("Button_Task successfully created\r\n");
 8001b5c:	481e      	ldr	r0, [pc, #120]	; (8001bd8 <main+0x15c>)
 8001b5e:	f00f febf 	bl	80118e0 <puts>
 8001b62:	e002      	b.n	8001b6a <main+0xee>
	}
	else{
		printf("Button_Task creation error\r\n");
 8001b64:	481d      	ldr	r0, [pc, #116]	; (8001bdc <main+0x160>)
 8001b66:	f00f febb 	bl	80118e0 <puts>
//	}
//	else{
//		printf("RotEncorder_Task creation error\r\n");
//	}

	if(pdPASS==xTaskCreate(vTask_LED, "LED_Task", STACK_SIZE, (void *) NULL, LED_Task_Priority, &xHandle_LED)){
 8001b6a:	4b1d      	ldr	r3, [pc, #116]	; (8001be0 <main+0x164>)
 8001b6c:	9301      	str	r3, [sp, #4]
 8001b6e:	2301      	movs	r3, #1
 8001b70:	9300      	str	r3, [sp, #0]
 8001b72:	2300      	movs	r3, #0
 8001b74:	2280      	movs	r2, #128	; 0x80
 8001b76:	491b      	ldr	r1, [pc, #108]	; (8001be4 <main+0x168>)
 8001b78:	481b      	ldr	r0, [pc, #108]	; (8001be8 <main+0x16c>)
 8001b7a:	f00d f88d 	bl	800ec98 <xTaskCreate>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	2b01      	cmp	r3, #1
 8001b82:	d103      	bne.n	8001b8c <main+0x110>
		printf("LED_Task successfully created\r\n");
 8001b84:	4819      	ldr	r0, [pc, #100]	; (8001bec <main+0x170>)
 8001b86:	f00f feab 	bl	80118e0 <puts>
 8001b8a:	e002      	b.n	8001b92 <main+0x116>
	}
	else{
		printf("LED_Task creation error\r\n");
 8001b8c:	4818      	ldr	r0, [pc, #96]	; (8001bf0 <main+0x174>)
 8001b8e:	f00f fea7 	bl	80118e0 <puts>
//	}
//	printf("Starting Scheduler... \r\n");



	vTaskStartScheduler();
 8001b92:	f00d f9ff 	bl	800ef94 <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8001b96:	f7ff fcc5 	bl	8001524 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001b9a:	f00c fb8a 	bl	800e2b2 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

	while (1)
 8001b9e:	e7fe      	b.n	8001b9e <main+0x122>
 8001ba0:	20000588 	.word	0x20000588
 8001ba4:	0801393c 	.word	0x0801393c
 8001ba8:	200005d4 	.word	0x200005d4
 8001bac:	200005d8 	.word	0x200005d8
 8001bb0:	200005dc 	.word	0x200005dc
 8001bb4:	48000800 	.word	0x48000800
 8001bb8:	200005e0 	.word	0x200005e0
 8001bbc:	200007b4 	.word	0x200007b4
 8001bc0:	08013a10 	.word	0x08013a10
 8001bc4:	08002b21 	.word	0x08002b21
 8001bc8:	08013a1c 	.word	0x08013a1c
 8001bcc:	08013a40 	.word	0x08013a40
 8001bd0:	08013a5c 	.word	0x08013a5c
 8001bd4:	08002cad 	.word	0x08002cad
 8001bd8:	08013a68 	.word	0x08013a68
 8001bdc:	08013a8c 	.word	0x08013a8c
 8001be0:	200005e4 	.word	0x200005e4
 8001be4:	08013aa8 	.word	0x08013aa8
 8001be8:	08002d05 	.word	0x08002d05
 8001bec:	08013ab4 	.word	0x08013ab4
 8001bf0:	08013ad4 	.word	0x08013ad4

08001bf4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b094      	sub	sp, #80	; 0x50
 8001bf8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001bfa:	f107 0318 	add.w	r3, r7, #24
 8001bfe:	2238      	movs	r2, #56	; 0x38
 8001c00:	2100      	movs	r1, #0
 8001c02:	4618      	mov	r0, r3
 8001c04:	f00f ff4c 	bl	8011aa0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c08:	1d3b      	adds	r3, r7, #4
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	601a      	str	r2, [r3, #0]
 8001c0e:	605a      	str	r2, [r3, #4]
 8001c10:	609a      	str	r2, [r3, #8]
 8001c12:	60da      	str	r2, [r3, #12]
 8001c14:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001c16:	2000      	movs	r0, #0
 8001c18:	f004 fda2 	bl	8006760 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8001c1c:	2321      	movs	r3, #33	; 0x21
 8001c1e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001c20:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001c24:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001c26:	2301      	movs	r3, #1
 8001c28:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c2a:	2302      	movs	r3, #2
 8001c2c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001c2e:	2303      	movs	r3, #3
 8001c30:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8001c32:	2304      	movs	r3, #4
 8001c34:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8001c36:	2355      	movs	r3, #85	; 0x55
 8001c38:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001c3a:	2302      	movs	r3, #2
 8001c3c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 8001c3e:	2304      	movs	r3, #4
 8001c40:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001c42:	2302      	movs	r3, #2
 8001c44:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c46:	f107 0318 	add.w	r3, r7, #24
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	f004 fe2c 	bl	80068a8 <HAL_RCC_OscConfig>
 8001c50:	4603      	mov	r3, r0
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d001      	beq.n	8001c5a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001c56:	f000 f83d 	bl	8001cd4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c5a:	230f      	movs	r3, #15
 8001c5c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c5e:	2303      	movs	r3, #3
 8001c60:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c62:	2300      	movs	r3, #0
 8001c64:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001c66:	2300      	movs	r3, #0
 8001c68:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001c6e:	1d3b      	adds	r3, r7, #4
 8001c70:	2104      	movs	r1, #4
 8001c72:	4618      	mov	r0, r3
 8001c74:	f005 f930 	bl	8006ed8 <HAL_RCC_ClockConfig>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d001      	beq.n	8001c82 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8001c7e:	f000 f829 	bl	8001cd4 <Error_Handler>
  }
}
 8001c82:	bf00      	nop
 8001c84:	3750      	adds	r7, #80	; 0x50
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}
	...

08001c8c <__io_putchar>:

/* USER CODE BEGIN 4 */
PUTCHAR_PROTOTYPE
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b082      	sub	sp, #8
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
	/* Place your implementation of fputc here */
	/* e.g. write a character to the USART1 and Loop until the end of transmission */
	HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 0xFFFF);
 8001c94:	1d39      	adds	r1, r7, #4
 8001c96:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c9a:	2201      	movs	r2, #1
 8001c9c:	4803      	ldr	r0, [pc, #12]	; (8001cac <__io_putchar+0x20>)
 8001c9e:	f007 fdbf 	bl	8009820 <HAL_UART_Transmit>

	return ch;
 8001ca2:	687b      	ldr	r3, [r7, #4]
}
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	3708      	adds	r7, #8
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bd80      	pop	{r7, pc}
 8001cac:	20000890 	.word	0x20000890

08001cb0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b082      	sub	sp, #8
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4a04      	ldr	r2, [pc, #16]	; (8001cd0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d101      	bne.n	8001cc6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001cc2:	f001 f8d9 	bl	8002e78 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001cc6:	bf00      	nop
 8001cc8:	3708      	adds	r7, #8
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}
 8001cce:	bf00      	nop
 8001cd0:	40001000 	.word	0x40001000

08001cd4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001cd8:	b672      	cpsid	i
}
 8001cda:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001cdc:	e7fe      	b.n	8001cdc <Error_Handler+0x8>
	...

08001ce0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b082      	sub	sp, #8
 8001ce4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ce6:	4b11      	ldr	r3, [pc, #68]	; (8001d2c <HAL_MspInit+0x4c>)
 8001ce8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cea:	4a10      	ldr	r2, [pc, #64]	; (8001d2c <HAL_MspInit+0x4c>)
 8001cec:	f043 0301 	orr.w	r3, r3, #1
 8001cf0:	6613      	str	r3, [r2, #96]	; 0x60
 8001cf2:	4b0e      	ldr	r3, [pc, #56]	; (8001d2c <HAL_MspInit+0x4c>)
 8001cf4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cf6:	f003 0301 	and.w	r3, r3, #1
 8001cfa:	607b      	str	r3, [r7, #4]
 8001cfc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cfe:	4b0b      	ldr	r3, [pc, #44]	; (8001d2c <HAL_MspInit+0x4c>)
 8001d00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d02:	4a0a      	ldr	r2, [pc, #40]	; (8001d2c <HAL_MspInit+0x4c>)
 8001d04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d08:	6593      	str	r3, [r2, #88]	; 0x58
 8001d0a:	4b08      	ldr	r3, [pc, #32]	; (8001d2c <HAL_MspInit+0x4c>)
 8001d0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d12:	603b      	str	r3, [r7, #0]
 8001d14:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001d16:	2200      	movs	r2, #0
 8001d18:	210f      	movs	r1, #15
 8001d1a:	f06f 0001 	mvn.w	r0, #1
 8001d1e:	f002 fadf 	bl	80042e0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d22:	bf00      	nop
 8001d24:	3708      	adds	r7, #8
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd80      	pop	{r7, pc}
 8001d2a:	bf00      	nop
 8001d2c:	40021000 	.word	0x40021000

08001d30 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b08c      	sub	sp, #48	; 0x30
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              uwPrescalerValue = 0;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001d40:	4b2c      	ldr	r3, [pc, #176]	; (8001df4 <HAL_InitTick+0xc4>)
 8001d42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d44:	4a2b      	ldr	r2, [pc, #172]	; (8001df4 <HAL_InitTick+0xc4>)
 8001d46:	f043 0310 	orr.w	r3, r3, #16
 8001d4a:	6593      	str	r3, [r2, #88]	; 0x58
 8001d4c:	4b29      	ldr	r3, [pc, #164]	; (8001df4 <HAL_InitTick+0xc4>)
 8001d4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d50:	f003 0310 	and.w	r3, r3, #16
 8001d54:	60bb      	str	r3, [r7, #8]
 8001d56:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001d58:	f107 020c 	add.w	r2, r7, #12
 8001d5c:	f107 0310 	add.w	r3, r7, #16
 8001d60:	4611      	mov	r1, r2
 8001d62:	4618      	mov	r0, r3
 8001d64:	f005 fa8c 	bl	8007280 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001d68:	f005 fa5e 	bl	8007228 <HAL_RCC_GetPCLK1Freq>
 8001d6c:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001d6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d70:	4a21      	ldr	r2, [pc, #132]	; (8001df8 <HAL_InitTick+0xc8>)
 8001d72:	fba2 2303 	umull	r2, r3, r2, r3
 8001d76:	0c9b      	lsrs	r3, r3, #18
 8001d78:	3b01      	subs	r3, #1
 8001d7a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001d7c:	4b1f      	ldr	r3, [pc, #124]	; (8001dfc <HAL_InitTick+0xcc>)
 8001d7e:	4a20      	ldr	r2, [pc, #128]	; (8001e00 <HAL_InitTick+0xd0>)
 8001d80:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001d82:	4b1e      	ldr	r3, [pc, #120]	; (8001dfc <HAL_InitTick+0xcc>)
 8001d84:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001d88:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001d8a:	4a1c      	ldr	r2, [pc, #112]	; (8001dfc <HAL_InitTick+0xcc>)
 8001d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d8e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001d90:	4b1a      	ldr	r3, [pc, #104]	; (8001dfc <HAL_InitTick+0xcc>)
 8001d92:	2200      	movs	r2, #0
 8001d94:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d96:	4b19      	ldr	r3, [pc, #100]	; (8001dfc <HAL_InitTick+0xcc>)
 8001d98:	2200      	movs	r2, #0
 8001d9a:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 8001d9c:	4817      	ldr	r0, [pc, #92]	; (8001dfc <HAL_InitTick+0xcc>)
 8001d9e:	f005 fd33 	bl	8007808 <HAL_TIM_Base_Init>
 8001da2:	4603      	mov	r3, r0
 8001da4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8001da8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d11b      	bne.n	8001de8 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001db0:	4812      	ldr	r0, [pc, #72]	; (8001dfc <HAL_InitTick+0xcc>)
 8001db2:	f005 fd81 	bl	80078b8 <HAL_TIM_Base_Start_IT>
 8001db6:	4603      	mov	r3, r0
 8001db8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8001dbc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d111      	bne.n	8001de8 <HAL_InitTick+0xb8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001dc4:	2036      	movs	r0, #54	; 0x36
 8001dc6:	f002 faa5 	bl	8004314 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	2b0f      	cmp	r3, #15
 8001dce:	d808      	bhi.n	8001de2 <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	6879      	ldr	r1, [r7, #4]
 8001dd4:	2036      	movs	r0, #54	; 0x36
 8001dd6:	f002 fa83 	bl	80042e0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001dda:	4a0a      	ldr	r2, [pc, #40]	; (8001e04 <HAL_InitTick+0xd4>)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6013      	str	r3, [r2, #0]
 8001de0:	e002      	b.n	8001de8 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 8001de2:	2301      	movs	r3, #1
 8001de4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001de8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8001dec:	4618      	mov	r0, r3
 8001dee:	3730      	adds	r7, #48	; 0x30
 8001df0:	46bd      	mov	sp, r7
 8001df2:	bd80      	pop	{r7, pc}
 8001df4:	40021000 	.word	0x40021000
 8001df8:	431bde83 	.word	0x431bde83
 8001dfc:	200005e8 	.word	0x200005e8
 8001e00:	40001000 	.word	0x40001000
 8001e04:	20000004 	.word	0x20000004

08001e08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001e0c:	e7fe      	b.n	8001e0c <NMI_Handler+0x4>

08001e0e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e0e:	b480      	push	{r7}
 8001e10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e12:	e7fe      	b.n	8001e12 <HardFault_Handler+0x4>

08001e14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e14:	b480      	push	{r7}
 8001e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e18:	e7fe      	b.n	8001e18 <MemManage_Handler+0x4>

08001e1a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e1a:	b480      	push	{r7}
 8001e1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e1e:	e7fe      	b.n	8001e1e <BusFault_Handler+0x4>

08001e20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e20:	b480      	push	{r7}
 8001e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e24:	e7fe      	b.n	8001e24 <UsageFault_Handler+0x4>

08001e26 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e26:	b480      	push	{r7}
 8001e28:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e2a:	bf00      	nop
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e32:	4770      	bx	lr

08001e34 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USR_BTN_1_Pin);
 8001e38:	2004      	movs	r0, #4
 8001e3a:	f002 fcd9 	bl	80047f0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8001e3e:	bf00      	nop
 8001e40:	bd80      	pop	{r7, pc}

08001e42 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001e42:	b580      	push	{r7, lr}
 8001e44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USR_BTN_2_Pin);
 8001e46:	2010      	movs	r0, #16
 8001e48:	f002 fcd2 	bl	80047f0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001e4c:	bf00      	nop
 8001e4e:	bd80      	pop	{r7, pc}

08001e50 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001e54:	4802      	ldr	r0, [pc, #8]	; (8001e60 <USB_LP_IRQHandler+0x10>)
 8001e56:	f003 f857 	bl	8004f08 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8001e5a:	bf00      	nop
 8001e5c:	bd80      	pop	{r7, pc}
 8001e5e:	bf00      	nop
 8001e60:	20002f4c 	.word	0x20002f4c

08001e64 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ENC_BTN_Pin);
 8001e68:	2020      	movs	r0, #32
 8001e6a:	f002 fcc1 	bl	80047f0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ENC_BTN_A_Pin);
 8001e6e:	2040      	movs	r0, #64	; 0x40
 8001e70:	f002 fcbe 	bl	80047f0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ENC_BTN_B_Pin);
 8001e74:	2080      	movs	r0, #128	; 0x80
 8001e76:	f002 fcbb 	bl	80047f0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001e7a:	bf00      	nop
 8001e7c:	bd80      	pop	{r7, pc}
	...

08001e80 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001e84:	4802      	ldr	r0, [pc, #8]	; (8001e90 <TIM6_DAC_IRQHandler+0x10>)
 8001e86:	f006 f80a 	bl	8007e9e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001e8a:	bf00      	nop
 8001e8c:	bd80      	pop	{r7, pc}
 8001e8e:	bf00      	nop
 8001e90:	200005e8 	.word	0x200005e8

08001e94 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001e94:	b480      	push	{r7}
 8001e96:	af00      	add	r7, sp, #0
	return 1;
 8001e98:	2301      	movs	r3, #1
}
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea2:	4770      	bx	lr

08001ea4 <_kill>:

int _kill(int pid, int sig)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b082      	sub	sp, #8
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
 8001eac:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001eae:	f00f fe9f 	bl	8011bf0 <__errno>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	2216      	movs	r2, #22
 8001eb6:	601a      	str	r2, [r3, #0]
	return -1;
 8001eb8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	3708      	adds	r7, #8
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	bd80      	pop	{r7, pc}

08001ec4 <_exit>:

void _exit (int status)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b082      	sub	sp, #8
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001ecc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001ed0:	6878      	ldr	r0, [r7, #4]
 8001ed2:	f7ff ffe7 	bl	8001ea4 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001ed6:	e7fe      	b.n	8001ed6 <_exit+0x12>

08001ed8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b086      	sub	sp, #24
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	60f8      	str	r0, [r7, #12]
 8001ee0:	60b9      	str	r1, [r7, #8]
 8001ee2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	617b      	str	r3, [r7, #20]
 8001ee8:	e00a      	b.n	8001f00 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001eea:	f3af 8000 	nop.w
 8001eee:	4601      	mov	r1, r0
 8001ef0:	68bb      	ldr	r3, [r7, #8]
 8001ef2:	1c5a      	adds	r2, r3, #1
 8001ef4:	60ba      	str	r2, [r7, #8]
 8001ef6:	b2ca      	uxtb	r2, r1
 8001ef8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001efa:	697b      	ldr	r3, [r7, #20]
 8001efc:	3301      	adds	r3, #1
 8001efe:	617b      	str	r3, [r7, #20]
 8001f00:	697a      	ldr	r2, [r7, #20]
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	429a      	cmp	r2, r3
 8001f06:	dbf0      	blt.n	8001eea <_read+0x12>
	}

return len;
 8001f08:	687b      	ldr	r3, [r7, #4]
}
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	3718      	adds	r7, #24
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}

08001f12 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001f12:	b580      	push	{r7, lr}
 8001f14:	b086      	sub	sp, #24
 8001f16:	af00      	add	r7, sp, #0
 8001f18:	60f8      	str	r0, [r7, #12]
 8001f1a:	60b9      	str	r1, [r7, #8]
 8001f1c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f1e:	2300      	movs	r3, #0
 8001f20:	617b      	str	r3, [r7, #20]
 8001f22:	e009      	b.n	8001f38 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001f24:	68bb      	ldr	r3, [r7, #8]
 8001f26:	1c5a      	adds	r2, r3, #1
 8001f28:	60ba      	str	r2, [r7, #8]
 8001f2a:	781b      	ldrb	r3, [r3, #0]
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	f7ff fead 	bl	8001c8c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f32:	697b      	ldr	r3, [r7, #20]
 8001f34:	3301      	adds	r3, #1
 8001f36:	617b      	str	r3, [r7, #20]
 8001f38:	697a      	ldr	r2, [r7, #20]
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	429a      	cmp	r2, r3
 8001f3e:	dbf1      	blt.n	8001f24 <_write+0x12>
	}
	return len;
 8001f40:	687b      	ldr	r3, [r7, #4]
}
 8001f42:	4618      	mov	r0, r3
 8001f44:	3718      	adds	r7, #24
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}

08001f4a <_close>:

int _close(int file)
{
 8001f4a:	b480      	push	{r7}
 8001f4c:	b083      	sub	sp, #12
 8001f4e:	af00      	add	r7, sp, #0
 8001f50:	6078      	str	r0, [r7, #4]
	return -1;
 8001f52:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001f56:	4618      	mov	r0, r3
 8001f58:	370c      	adds	r7, #12
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f60:	4770      	bx	lr

08001f62 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001f62:	b480      	push	{r7}
 8001f64:	b083      	sub	sp, #12
 8001f66:	af00      	add	r7, sp, #0
 8001f68:	6078      	str	r0, [r7, #4]
 8001f6a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001f72:	605a      	str	r2, [r3, #4]
	return 0;
 8001f74:	2300      	movs	r3, #0
}
 8001f76:	4618      	mov	r0, r3
 8001f78:	370c      	adds	r7, #12
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f80:	4770      	bx	lr

08001f82 <_isatty>:

int _isatty(int file)
{
 8001f82:	b480      	push	{r7}
 8001f84:	b083      	sub	sp, #12
 8001f86:	af00      	add	r7, sp, #0
 8001f88:	6078      	str	r0, [r7, #4]
	return 1;
 8001f8a:	2301      	movs	r3, #1
}
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	370c      	adds	r7, #12
 8001f90:	46bd      	mov	sp, r7
 8001f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f96:	4770      	bx	lr

08001f98 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	b085      	sub	sp, #20
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	60f8      	str	r0, [r7, #12]
 8001fa0:	60b9      	str	r1, [r7, #8]
 8001fa2:	607a      	str	r2, [r7, #4]
	return 0;
 8001fa4:	2300      	movs	r3, #0
}
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	3714      	adds	r7, #20
 8001faa:	46bd      	mov	sp, r7
 8001fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb0:	4770      	bx	lr
	...

08001fb4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b086      	sub	sp, #24
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001fbc:	4a14      	ldr	r2, [pc, #80]	; (8002010 <_sbrk+0x5c>)
 8001fbe:	4b15      	ldr	r3, [pc, #84]	; (8002014 <_sbrk+0x60>)
 8001fc0:	1ad3      	subs	r3, r2, r3
 8001fc2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001fc4:	697b      	ldr	r3, [r7, #20]
 8001fc6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001fc8:	4b13      	ldr	r3, [pc, #76]	; (8002018 <_sbrk+0x64>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d102      	bne.n	8001fd6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001fd0:	4b11      	ldr	r3, [pc, #68]	; (8002018 <_sbrk+0x64>)
 8001fd2:	4a12      	ldr	r2, [pc, #72]	; (800201c <_sbrk+0x68>)
 8001fd4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001fd6:	4b10      	ldr	r3, [pc, #64]	; (8002018 <_sbrk+0x64>)
 8001fd8:	681a      	ldr	r2, [r3, #0]
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	4413      	add	r3, r2
 8001fde:	693a      	ldr	r2, [r7, #16]
 8001fe0:	429a      	cmp	r2, r3
 8001fe2:	d207      	bcs.n	8001ff4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001fe4:	f00f fe04 	bl	8011bf0 <__errno>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	220c      	movs	r2, #12
 8001fec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001fee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001ff2:	e009      	b.n	8002008 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ff4:	4b08      	ldr	r3, [pc, #32]	; (8002018 <_sbrk+0x64>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ffa:	4b07      	ldr	r3, [pc, #28]	; (8002018 <_sbrk+0x64>)
 8001ffc:	681a      	ldr	r2, [r3, #0]
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	4413      	add	r3, r2
 8002002:	4a05      	ldr	r2, [pc, #20]	; (8002018 <_sbrk+0x64>)
 8002004:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002006:	68fb      	ldr	r3, [r7, #12]
}
 8002008:	4618      	mov	r0, r3
 800200a:	3718      	adds	r7, #24
 800200c:	46bd      	mov	sp, r7
 800200e:	bd80      	pop	{r7, pc}
 8002010:	20020000 	.word	0x20020000
 8002014:	00000400 	.word	0x00000400
 8002018:	20000634 	.word	0x20000634
 800201c:	200035b0 	.word	0x200035b0

08002020 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002020:	b480      	push	{r7}
 8002022:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002024:	4b06      	ldr	r3, [pc, #24]	; (8002040 <SystemInit+0x20>)
 8002026:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800202a:	4a05      	ldr	r2, [pc, #20]	; (8002040 <SystemInit+0x20>)
 800202c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002030:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002034:	bf00      	nop
 8002036:	46bd      	mov	sp, r7
 8002038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203c:	4770      	bx	lr
 800203e:	bf00      	nop
 8002040:	e000ed00 	.word	0xe000ed00

08002044 <MX_TIM1_Init>:
TIM_HandleTypeDef htim16;
TIM_HandleTypeDef htim17;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b08c      	sub	sp, #48	; 0x30
 8002048:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800204a:	f107 0320 	add.w	r3, r7, #32
 800204e:	2200      	movs	r2, #0
 8002050:	601a      	str	r2, [r3, #0]
 8002052:	605a      	str	r2, [r3, #4]
 8002054:	609a      	str	r2, [r3, #8]
 8002056:	60da      	str	r2, [r3, #12]
  TIM_HallSensor_InitTypeDef sConfig = {0};
 8002058:	f107 0310 	add.w	r3, r7, #16
 800205c:	2200      	movs	r2, #0
 800205e:	601a      	str	r2, [r3, #0]
 8002060:	605a      	str	r2, [r3, #4]
 8002062:	609a      	str	r2, [r3, #8]
 8002064:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002066:	1d3b      	adds	r3, r7, #4
 8002068:	2200      	movs	r2, #0
 800206a:	601a      	str	r2, [r3, #0]
 800206c:	605a      	str	r2, [r3, #4]
 800206e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002070:	4b29      	ldr	r3, [pc, #164]	; (8002118 <MX_TIM1_Init+0xd4>)
 8002072:	4a2a      	ldr	r2, [pc, #168]	; (800211c <MX_TIM1_Init+0xd8>)
 8002074:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002076:	4b28      	ldr	r3, [pc, #160]	; (8002118 <MX_TIM1_Init+0xd4>)
 8002078:	2200      	movs	r2, #0
 800207a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800207c:	4b26      	ldr	r3, [pc, #152]	; (8002118 <MX_TIM1_Init+0xd4>)
 800207e:	2200      	movs	r2, #0
 8002080:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002082:	4b25      	ldr	r3, [pc, #148]	; (8002118 <MX_TIM1_Init+0xd4>)
 8002084:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002088:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800208a:	4b23      	ldr	r3, [pc, #140]	; (8002118 <MX_TIM1_Init+0xd4>)
 800208c:	2200      	movs	r2, #0
 800208e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002090:	4b21      	ldr	r3, [pc, #132]	; (8002118 <MX_TIM1_Init+0xd4>)
 8002092:	2200      	movs	r2, #0
 8002094:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002096:	4b20      	ldr	r3, [pc, #128]	; (8002118 <MX_TIM1_Init+0xd4>)
 8002098:	2200      	movs	r2, #0
 800209a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800209c:	481e      	ldr	r0, [pc, #120]	; (8002118 <MX_TIM1_Init+0xd4>)
 800209e:	f005 fbb3 	bl	8007808 <HAL_TIM_Base_Init>
 80020a2:	4603      	mov	r3, r0
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d001      	beq.n	80020ac <MX_TIM1_Init+0x68>
  {
    Error_Handler();
 80020a8:	f7ff fe14 	bl	8001cd4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80020ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80020b0:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80020b2:	f107 0320 	add.w	r3, r7, #32
 80020b6:	4619      	mov	r1, r3
 80020b8:	4817      	ldr	r0, [pc, #92]	; (8002118 <MX_TIM1_Init+0xd4>)
 80020ba:	f006 fa1f 	bl	80084fc <HAL_TIM_ConfigClockSource>
 80020be:	4603      	mov	r3, r0
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d001      	beq.n	80020c8 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 80020c4:	f7ff fe06 	bl	8001cd4 <Error_Handler>
  }
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80020c8:	2300      	movs	r3, #0
 80020ca:	613b      	str	r3, [r7, #16]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80020cc:	2300      	movs	r3, #0
 80020ce:	617b      	str	r3, [r7, #20]
  sConfig.IC1Filter = 0;
 80020d0:	2300      	movs	r3, #0
 80020d2:	61bb      	str	r3, [r7, #24]
  sConfig.Commutation_Delay = 0;
 80020d4:	2300      	movs	r3, #0
 80020d6:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_HallSensor_Init(&htim1, &sConfig) != HAL_OK)
 80020d8:	f107 0310 	add.w	r3, r7, #16
 80020dc:	4619      	mov	r1, r3
 80020de:	480e      	ldr	r0, [pc, #56]	; (8002118 <MX_TIM1_Init+0xd4>)
 80020e0:	f007 f907 	bl	80092f2 <HAL_TIMEx_HallSensor_Init>
 80020e4:	4603      	mov	r3, r0
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d001      	beq.n	80020ee <MX_TIM1_Init+0xaa>
  {
    Error_Handler();
 80020ea:	f7ff fdf3 	bl	8001cd4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC2REF;
 80020ee:	2350      	movs	r3, #80	; 0x50
 80020f0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80020f2:	2300      	movs	r3, #0
 80020f4:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020f6:	2300      	movs	r3, #0
 80020f8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80020fa:	1d3b      	adds	r3, r7, #4
 80020fc:	4619      	mov	r1, r3
 80020fe:	4806      	ldr	r0, [pc, #24]	; (8002118 <MX_TIM1_Init+0xd4>)
 8002100:	f007 f9b0 	bl	8009464 <HAL_TIMEx_MasterConfigSynchronization>
 8002104:	4603      	mov	r3, r0
 8002106:	2b00      	cmp	r3, #0
 8002108:	d001      	beq.n	800210e <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 800210a:	f7ff fde3 	bl	8001cd4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800210e:	bf00      	nop
 8002110:	3730      	adds	r7, #48	; 0x30
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}
 8002116:	bf00      	nop
 8002118:	20000638 	.word	0x20000638
 800211c:	40012c00 	.word	0x40012c00

08002120 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b08c      	sub	sp, #48	; 0x30
 8002124:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002126:	f107 030c 	add.w	r3, r7, #12
 800212a:	2224      	movs	r2, #36	; 0x24
 800212c:	2100      	movs	r1, #0
 800212e:	4618      	mov	r0, r3
 8002130:	f00f fcb6 	bl	8011aa0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002134:	463b      	mov	r3, r7
 8002136:	2200      	movs	r2, #0
 8002138:	601a      	str	r2, [r3, #0]
 800213a:	605a      	str	r2, [r3, #4]
 800213c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800213e:	4b21      	ldr	r3, [pc, #132]	; (80021c4 <MX_TIM3_Init+0xa4>)
 8002140:	4a21      	ldr	r2, [pc, #132]	; (80021c8 <MX_TIM3_Init+0xa8>)
 8002142:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002144:	4b1f      	ldr	r3, [pc, #124]	; (80021c4 <MX_TIM3_Init+0xa4>)
 8002146:	2200      	movs	r2, #0
 8002148:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800214a:	4b1e      	ldr	r3, [pc, #120]	; (80021c4 <MX_TIM3_Init+0xa4>)
 800214c:	2200      	movs	r2, #0
 800214e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002150:	4b1c      	ldr	r3, [pc, #112]	; (80021c4 <MX_TIM3_Init+0xa4>)
 8002152:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002156:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002158:	4b1a      	ldr	r3, [pc, #104]	; (80021c4 <MX_TIM3_Init+0xa4>)
 800215a:	2200      	movs	r2, #0
 800215c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800215e:	4b19      	ldr	r3, [pc, #100]	; (80021c4 <MX_TIM3_Init+0xa4>)
 8002160:	2200      	movs	r2, #0
 8002162:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_X1_TI1;
 8002164:	4b19      	ldr	r3, [pc, #100]	; (80021cc <MX_TIM3_Init+0xac>)
 8002166:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002168:	2300      	movs	r3, #0
 800216a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800216c:	2301      	movs	r3, #1
 800216e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002170:	2300      	movs	r3, #0
 8002172:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002174:	2300      	movs	r3, #0
 8002176:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002178:	2300      	movs	r3, #0
 800217a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800217c:	2301      	movs	r3, #1
 800217e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002180:	2300      	movs	r3, #0
 8002182:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002184:	2300      	movs	r3, #0
 8002186:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8002188:	f107 030c 	add.w	r3, r7, #12
 800218c:	4619      	mov	r1, r3
 800218e:	480d      	ldr	r0, [pc, #52]	; (80021c4 <MX_TIM3_Init+0xa4>)
 8002190:	f005 fddf 	bl	8007d52 <HAL_TIM_Encoder_Init>
 8002194:	4603      	mov	r3, r0
 8002196:	2b00      	cmp	r3, #0
 8002198:	d001      	beq.n	800219e <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 800219a:	f7ff fd9b 	bl	8001cd4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800219e:	2300      	movs	r3, #0
 80021a0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021a2:	2300      	movs	r3, #0
 80021a4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80021a6:	463b      	mov	r3, r7
 80021a8:	4619      	mov	r1, r3
 80021aa:	4806      	ldr	r0, [pc, #24]	; (80021c4 <MX_TIM3_Init+0xa4>)
 80021ac:	f007 f95a 	bl	8009464 <HAL_TIMEx_MasterConfigSynchronization>
 80021b0:	4603      	mov	r3, r0
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d001      	beq.n	80021ba <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 80021b6:	f7ff fd8d 	bl	8001cd4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80021ba:	bf00      	nop
 80021bc:	3730      	adds	r7, #48	; 0x30
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}
 80021c2:	bf00      	nop
 80021c4:	20000684 	.word	0x20000684
 80021c8:	40000400 	.word	0x40000400
 80021cc:	00010006 	.word	0x00010006

080021d0 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b08c      	sub	sp, #48	; 0x30
 80021d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80021d6:	f107 0320 	add.w	r3, r7, #32
 80021da:	2200      	movs	r2, #0
 80021dc:	601a      	str	r2, [r3, #0]
 80021de:	605a      	str	r2, [r3, #4]
 80021e0:	609a      	str	r2, [r3, #8]
 80021e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021e4:	f107 0314 	add.w	r3, r7, #20
 80021e8:	2200      	movs	r2, #0
 80021ea:	601a      	str	r2, [r3, #0]
 80021ec:	605a      	str	r2, [r3, #4]
 80021ee:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80021f0:	1d3b      	adds	r3, r7, #4
 80021f2:	2200      	movs	r2, #0
 80021f4:	601a      	str	r2, [r3, #0]
 80021f6:	605a      	str	r2, [r3, #4]
 80021f8:	609a      	str	r2, [r3, #8]
 80021fa:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80021fc:	4b3e      	ldr	r3, [pc, #248]	; (80022f8 <MX_TIM8_Init+0x128>)
 80021fe:	4a3f      	ldr	r2, [pc, #252]	; (80022fc <MX_TIM8_Init+0x12c>)
 8002200:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8002202:	4b3d      	ldr	r3, [pc, #244]	; (80022f8 <MX_TIM8_Init+0x128>)
 8002204:	2200      	movs	r2, #0
 8002206:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002208:	4b3b      	ldr	r3, [pc, #236]	; (80022f8 <MX_TIM8_Init+0x128>)
 800220a:	2200      	movs	r2, #0
 800220c:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 800220e:	4b3a      	ldr	r3, [pc, #232]	; (80022f8 <MX_TIM8_Init+0x128>)
 8002210:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002214:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002216:	4b38      	ldr	r3, [pc, #224]	; (80022f8 <MX_TIM8_Init+0x128>)
 8002218:	2200      	movs	r2, #0
 800221a:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800221c:	4b36      	ldr	r3, [pc, #216]	; (80022f8 <MX_TIM8_Init+0x128>)
 800221e:	2200      	movs	r2, #0
 8002220:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002222:	4b35      	ldr	r3, [pc, #212]	; (80022f8 <MX_TIM8_Init+0x128>)
 8002224:	2200      	movs	r2, #0
 8002226:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8002228:	4833      	ldr	r0, [pc, #204]	; (80022f8 <MX_TIM8_Init+0x128>)
 800222a:	f005 faed 	bl	8007808 <HAL_TIM_Base_Init>
 800222e:	4603      	mov	r3, r0
 8002230:	2b00      	cmp	r3, #0
 8002232:	d001      	beq.n	8002238 <MX_TIM8_Init+0x68>
  {
    Error_Handler();
 8002234:	f7ff fd4e 	bl	8001cd4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002238:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800223c:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 800223e:	f107 0320 	add.w	r3, r7, #32
 8002242:	4619      	mov	r1, r3
 8002244:	482c      	ldr	r0, [pc, #176]	; (80022f8 <MX_TIM8_Init+0x128>)
 8002246:	f006 f959 	bl	80084fc <HAL_TIM_ConfigClockSource>
 800224a:	4603      	mov	r3, r0
 800224c:	2b00      	cmp	r3, #0
 800224e:	d001      	beq.n	8002254 <MX_TIM8_Init+0x84>
  {
    Error_Handler();
 8002250:	f7ff fd40 	bl	8001cd4 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim8) != HAL_OK)
 8002254:	4828      	ldr	r0, [pc, #160]	; (80022f8 <MX_TIM8_Init+0x128>)
 8002256:	f005 fd1b 	bl	8007c90 <HAL_TIM_IC_Init>
 800225a:	4603      	mov	r3, r0
 800225c:	2b00      	cmp	r3, #0
 800225e:	d001      	beq.n	8002264 <MX_TIM8_Init+0x94>
  {
    Error_Handler();
 8002260:	f7ff fd38 	bl	8001cd4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002264:	2300      	movs	r3, #0
 8002266:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002268:	2300      	movs	r3, #0
 800226a:	61bb      	str	r3, [r7, #24]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800226c:	2300      	movs	r3, #0
 800226e:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002270:	f107 0314 	add.w	r3, r7, #20
 8002274:	4619      	mov	r1, r3
 8002276:	4820      	ldr	r0, [pc, #128]	; (80022f8 <MX_TIM8_Init+0x128>)
 8002278:	f007 f8f4 	bl	8009464 <HAL_TIMEx_MasterConfigSynchronization>
 800227c:	4603      	mov	r3, r0
 800227e:	2b00      	cmp	r3, #0
 8002280:	d001      	beq.n	8002286 <MX_TIM8_Init+0xb6>
  {
    Error_Handler();
 8002282:	f7ff fd27 	bl	8001cd4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002286:	2300      	movs	r3, #0
 8002288:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800228a:	2301      	movs	r3, #1
 800228c:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800228e:	2300      	movs	r3, #0
 8002290:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8002292:	2300      	movs	r3, #0
 8002294:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim8, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002296:	1d3b      	adds	r3, r7, #4
 8002298:	2200      	movs	r2, #0
 800229a:	4619      	mov	r1, r3
 800229c:	4816      	ldr	r0, [pc, #88]	; (80022f8 <MX_TIM8_Init+0x128>)
 800229e:	f005 ff7d 	bl	800819c <HAL_TIM_IC_ConfigChannel>
 80022a2:	4603      	mov	r3, r0
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d001      	beq.n	80022ac <MX_TIM8_Init+0xdc>
  {
    Error_Handler();
 80022a8:	f7ff fd14 	bl	8001cd4 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim8, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80022ac:	1d3b      	adds	r3, r7, #4
 80022ae:	2204      	movs	r2, #4
 80022b0:	4619      	mov	r1, r3
 80022b2:	4811      	ldr	r0, [pc, #68]	; (80022f8 <MX_TIM8_Init+0x128>)
 80022b4:	f005 ff72 	bl	800819c <HAL_TIM_IC_ConfigChannel>
 80022b8:	4603      	mov	r3, r0
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d001      	beq.n	80022c2 <MX_TIM8_Init+0xf2>
  {
    Error_Handler();
 80022be:	f7ff fd09 	bl	8001cd4 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim8, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 80022c2:	1d3b      	adds	r3, r7, #4
 80022c4:	2208      	movs	r2, #8
 80022c6:	4619      	mov	r1, r3
 80022c8:	480b      	ldr	r0, [pc, #44]	; (80022f8 <MX_TIM8_Init+0x128>)
 80022ca:	f005 ff67 	bl	800819c <HAL_TIM_IC_ConfigChannel>
 80022ce:	4603      	mov	r3, r0
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d001      	beq.n	80022d8 <MX_TIM8_Init+0x108>
  {
    Error_Handler();
 80022d4:	f7ff fcfe 	bl	8001cd4 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim8, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 80022d8:	1d3b      	adds	r3, r7, #4
 80022da:	220c      	movs	r2, #12
 80022dc:	4619      	mov	r1, r3
 80022de:	4806      	ldr	r0, [pc, #24]	; (80022f8 <MX_TIM8_Init+0x128>)
 80022e0:	f005 ff5c 	bl	800819c <HAL_TIM_IC_ConfigChannel>
 80022e4:	4603      	mov	r3, r0
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d001      	beq.n	80022ee <MX_TIM8_Init+0x11e>
  {
    Error_Handler();
 80022ea:	f7ff fcf3 	bl	8001cd4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 80022ee:	bf00      	nop
 80022f0:	3730      	adds	r7, #48	; 0x30
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd80      	pop	{r7, pc}
 80022f6:	bf00      	nop
 80022f8:	200006d0 	.word	0x200006d0
 80022fc:	40013400 	.word	0x40013400

08002300 <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b08c      	sub	sp, #48	; 0x30
 8002304:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002306:	f107 0320 	add.w	r3, r7, #32
 800230a:	2200      	movs	r2, #0
 800230c:	601a      	str	r2, [r3, #0]
 800230e:	605a      	str	r2, [r3, #4]
 8002310:	609a      	str	r2, [r3, #8]
 8002312:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002314:	f107 0314 	add.w	r3, r7, #20
 8002318:	2200      	movs	r2, #0
 800231a:	601a      	str	r2, [r3, #0]
 800231c:	605a      	str	r2, [r3, #4]
 800231e:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002320:	1d3b      	adds	r3, r7, #4
 8002322:	2200      	movs	r2, #0
 8002324:	601a      	str	r2, [r3, #0]
 8002326:	605a      	str	r2, [r3, #4]
 8002328:	609a      	str	r2, [r3, #8]
 800232a:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 800232c:	4b32      	ldr	r3, [pc, #200]	; (80023f8 <MX_TIM15_Init+0xf8>)
 800232e:	4a33      	ldr	r2, [pc, #204]	; (80023fc <MX_TIM15_Init+0xfc>)
 8002330:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 8002332:	4b31      	ldr	r3, [pc, #196]	; (80023f8 <MX_TIM15_Init+0xf8>)
 8002334:	2200      	movs	r2, #0
 8002336:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002338:	4b2f      	ldr	r3, [pc, #188]	; (80023f8 <MX_TIM15_Init+0xf8>)
 800233a:	2200      	movs	r2, #0
 800233c:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 800233e:	4b2e      	ldr	r3, [pc, #184]	; (80023f8 <MX_TIM15_Init+0xf8>)
 8002340:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002344:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002346:	4b2c      	ldr	r3, [pc, #176]	; (80023f8 <MX_TIM15_Init+0xf8>)
 8002348:	2200      	movs	r2, #0
 800234a:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 800234c:	4b2a      	ldr	r3, [pc, #168]	; (80023f8 <MX_TIM15_Init+0xf8>)
 800234e:	2200      	movs	r2, #0
 8002350:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002352:	4b29      	ldr	r3, [pc, #164]	; (80023f8 <MX_TIM15_Init+0xf8>)
 8002354:	2200      	movs	r2, #0
 8002356:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8002358:	4827      	ldr	r0, [pc, #156]	; (80023f8 <MX_TIM15_Init+0xf8>)
 800235a:	f005 fa55 	bl	8007808 <HAL_TIM_Base_Init>
 800235e:	4603      	mov	r3, r0
 8002360:	2b00      	cmp	r3, #0
 8002362:	d001      	beq.n	8002368 <MX_TIM15_Init+0x68>
  {
    Error_Handler();
 8002364:	f7ff fcb6 	bl	8001cd4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002368:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800236c:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 800236e:	f107 0320 	add.w	r3, r7, #32
 8002372:	4619      	mov	r1, r3
 8002374:	4820      	ldr	r0, [pc, #128]	; (80023f8 <MX_TIM15_Init+0xf8>)
 8002376:	f006 f8c1 	bl	80084fc <HAL_TIM_ConfigClockSource>
 800237a:	4603      	mov	r3, r0
 800237c:	2b00      	cmp	r3, #0
 800237e:	d001      	beq.n	8002384 <MX_TIM15_Init+0x84>
  {
    Error_Handler();
 8002380:	f7ff fca8 	bl	8001cd4 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim15) != HAL_OK)
 8002384:	481c      	ldr	r0, [pc, #112]	; (80023f8 <MX_TIM15_Init+0xf8>)
 8002386:	f005 fc83 	bl	8007c90 <HAL_TIM_IC_Init>
 800238a:	4603      	mov	r3, r0
 800238c:	2b00      	cmp	r3, #0
 800238e:	d001      	beq.n	8002394 <MX_TIM15_Init+0x94>
  {
    Error_Handler();
 8002390:	f7ff fca0 	bl	8001cd4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002394:	2300      	movs	r3, #0
 8002396:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002398:	2300      	movs	r3, #0
 800239a:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 800239c:	f107 0314 	add.w	r3, r7, #20
 80023a0:	4619      	mov	r1, r3
 80023a2:	4815      	ldr	r0, [pc, #84]	; (80023f8 <MX_TIM15_Init+0xf8>)
 80023a4:	f007 f85e 	bl	8009464 <HAL_TIMEx_MasterConfigSynchronization>
 80023a8:	4603      	mov	r3, r0
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d001      	beq.n	80023b2 <MX_TIM15_Init+0xb2>
  {
    Error_Handler();
 80023ae:	f7ff fc91 	bl	8001cd4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80023b2:	2300      	movs	r3, #0
 80023b4:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80023b6:	2301      	movs	r3, #1
 80023b8:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80023ba:	2300      	movs	r3, #0
 80023bc:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 80023be:	2300      	movs	r3, #0
 80023c0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim15, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80023c2:	1d3b      	adds	r3, r7, #4
 80023c4:	2200      	movs	r2, #0
 80023c6:	4619      	mov	r1, r3
 80023c8:	480b      	ldr	r0, [pc, #44]	; (80023f8 <MX_TIM15_Init+0xf8>)
 80023ca:	f005 fee7 	bl	800819c <HAL_TIM_IC_ConfigChannel>
 80023ce:	4603      	mov	r3, r0
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d001      	beq.n	80023d8 <MX_TIM15_Init+0xd8>
  {
    Error_Handler();
 80023d4:	f7ff fc7e 	bl	8001cd4 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim15, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80023d8:	1d3b      	adds	r3, r7, #4
 80023da:	2204      	movs	r2, #4
 80023dc:	4619      	mov	r1, r3
 80023de:	4806      	ldr	r0, [pc, #24]	; (80023f8 <MX_TIM15_Init+0xf8>)
 80023e0:	f005 fedc 	bl	800819c <HAL_TIM_IC_ConfigChannel>
 80023e4:	4603      	mov	r3, r0
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d001      	beq.n	80023ee <MX_TIM15_Init+0xee>
  {
    Error_Handler();
 80023ea:	f7ff fc73 	bl	8001cd4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 80023ee:	bf00      	nop
 80023f0:	3730      	adds	r7, #48	; 0x30
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}
 80023f6:	bf00      	nop
 80023f8:	2000071c 	.word	0x2000071c
 80023fc:	40014000 	.word	0x40014000

08002400 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b094      	sub	sp, #80	; 0x50
 8002404:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8002406:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800240a:	2200      	movs	r2, #0
 800240c:	601a      	str	r2, [r3, #0]
 800240e:	605a      	str	r2, [r3, #4]
 8002410:	609a      	str	r2, [r3, #8]
 8002412:	60da      	str	r2, [r3, #12]
 8002414:	611a      	str	r2, [r3, #16]
 8002416:	615a      	str	r2, [r3, #20]
 8002418:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800241a:	463b      	mov	r3, r7
 800241c:	2234      	movs	r2, #52	; 0x34
 800241e:	2100      	movs	r1, #0
 8002420:	4618      	mov	r0, r3
 8002422:	f00f fb3d 	bl	8011aa0 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8002426:	4b31      	ldr	r3, [pc, #196]	; (80024ec <MX_TIM16_Init+0xec>)
 8002428:	4a31      	ldr	r2, [pc, #196]	; (80024f0 <MX_TIM16_Init+0xf0>)
 800242a:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 800242c:	4b2f      	ldr	r3, [pc, #188]	; (80024ec <MX_TIM16_Init+0xec>)
 800242e:	2200      	movs	r2, #0
 8002430:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002432:	4b2e      	ldr	r3, [pc, #184]	; (80024ec <MX_TIM16_Init+0xec>)
 8002434:	2200      	movs	r2, #0
 8002436:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 8500;
 8002438:	4b2c      	ldr	r3, [pc, #176]	; (80024ec <MX_TIM16_Init+0xec>)
 800243a:	f242 1234 	movw	r2, #8500	; 0x2134
 800243e:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002440:	4b2a      	ldr	r3, [pc, #168]	; (80024ec <MX_TIM16_Init+0xec>)
 8002442:	2200      	movs	r2, #0
 8002444:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8002446:	4b29      	ldr	r3, [pc, #164]	; (80024ec <MX_TIM16_Init+0xec>)
 8002448:	2200      	movs	r2, #0
 800244a:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800244c:	4b27      	ldr	r3, [pc, #156]	; (80024ec <MX_TIM16_Init+0xec>)
 800244e:	2280      	movs	r2, #128	; 0x80
 8002450:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8002452:	4826      	ldr	r0, [pc, #152]	; (80024ec <MX_TIM16_Init+0xec>)
 8002454:	f005 f9d8 	bl	8007808 <HAL_TIM_Base_Init>
 8002458:	4603      	mov	r3, r0
 800245a:	2b00      	cmp	r3, #0
 800245c:	d001      	beq.n	8002462 <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 800245e:	f7ff fc39 	bl	8001cd4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 8002462:	4822      	ldr	r0, [pc, #136]	; (80024ec <MX_TIM16_Init+0xec>)
 8002464:	f005 faa0 	bl	80079a8 <HAL_TIM_PWM_Init>
 8002468:	4603      	mov	r3, r0
 800246a:	2b00      	cmp	r3, #0
 800246c:	d001      	beq.n	8002472 <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 800246e:	f7ff fc31 	bl	8001cd4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002472:	2360      	movs	r3, #96	; 0x60
 8002474:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 0;
 8002476:	2300      	movs	r3, #0
 8002478:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800247a:	2300      	movs	r3, #0
 800247c:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800247e:	2300      	movs	r3, #0
 8002480:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002482:	2300      	movs	r3, #0
 8002484:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002486:	2300      	movs	r3, #0
 8002488:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800248a:	2300      	movs	r3, #0
 800248c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800248e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002492:	2200      	movs	r2, #0
 8002494:	4619      	mov	r1, r3
 8002496:	4815      	ldr	r0, [pc, #84]	; (80024ec <MX_TIM16_Init+0xec>)
 8002498:	f005 ff1c 	bl	80082d4 <HAL_TIM_PWM_ConfigChannel>
 800249c:	4603      	mov	r3, r0
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d001      	beq.n	80024a6 <MX_TIM16_Init+0xa6>
  {
    Error_Handler();
 80024a2:	f7ff fc17 	bl	8001cd4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80024a6:	2300      	movs	r3, #0
 80024a8:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80024aa:	2300      	movs	r3, #0
 80024ac:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80024ae:	2300      	movs	r3, #0
 80024b0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80024b2:	2300      	movs	r3, #0
 80024b4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80024b6:	2300      	movs	r3, #0
 80024b8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80024ba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80024be:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80024c0:	2300      	movs	r3, #0
 80024c2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80024c4:	2300      	movs	r3, #0
 80024c6:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 80024c8:	463b      	mov	r3, r7
 80024ca:	4619      	mov	r1, r3
 80024cc:	4807      	ldr	r0, [pc, #28]	; (80024ec <MX_TIM16_Init+0xec>)
 80024ce:	f007 f85f 	bl	8009590 <HAL_TIMEx_ConfigBreakDeadTime>
 80024d2:	4603      	mov	r3, r0
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d001      	beq.n	80024dc <MX_TIM16_Init+0xdc>
  {
    Error_Handler();
 80024d8:	f7ff fbfc 	bl	8001cd4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 80024dc:	4803      	ldr	r0, [pc, #12]	; (80024ec <MX_TIM16_Init+0xec>)
 80024de:	f000 f991 	bl	8002804 <HAL_TIM_MspPostInit>

}
 80024e2:	bf00      	nop
 80024e4:	3750      	adds	r7, #80	; 0x50
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bd80      	pop	{r7, pc}
 80024ea:	bf00      	nop
 80024ec:	20000768 	.word	0x20000768
 80024f0:	40014400 	.word	0x40014400

080024f4 <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b094      	sub	sp, #80	; 0x50
 80024f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80024fa:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80024fe:	2200      	movs	r2, #0
 8002500:	601a      	str	r2, [r3, #0]
 8002502:	605a      	str	r2, [r3, #4]
 8002504:	609a      	str	r2, [r3, #8]
 8002506:	60da      	str	r2, [r3, #12]
 8002508:	611a      	str	r2, [r3, #16]
 800250a:	615a      	str	r2, [r3, #20]
 800250c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800250e:	463b      	mov	r3, r7
 8002510:	2234      	movs	r2, #52	; 0x34
 8002512:	2100      	movs	r1, #0
 8002514:	4618      	mov	r0, r3
 8002516:	f00f fac3 	bl	8011aa0 <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 800251a:	4b30      	ldr	r3, [pc, #192]	; (80025dc <MX_TIM17_Init+0xe8>)
 800251c:	4a30      	ldr	r2, [pc, #192]	; (80025e0 <MX_TIM17_Init+0xec>)
 800251e:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 33-1;
 8002520:	4b2e      	ldr	r3, [pc, #184]	; (80025dc <MX_TIM17_Init+0xe8>)
 8002522:	2220      	movs	r2, #32
 8002524:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002526:	4b2d      	ldr	r3, [pc, #180]	; (80025dc <MX_TIM17_Init+0xe8>)
 8002528:	2200      	movs	r2, #0
 800252a:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 255;
 800252c:	4b2b      	ldr	r3, [pc, #172]	; (80025dc <MX_TIM17_Init+0xe8>)
 800252e:	22ff      	movs	r2, #255	; 0xff
 8002530:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002532:	4b2a      	ldr	r3, [pc, #168]	; (80025dc <MX_TIM17_Init+0xe8>)
 8002534:	2200      	movs	r2, #0
 8002536:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8002538:	4b28      	ldr	r3, [pc, #160]	; (80025dc <MX_TIM17_Init+0xe8>)
 800253a:	2200      	movs	r2, #0
 800253c:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800253e:	4b27      	ldr	r3, [pc, #156]	; (80025dc <MX_TIM17_Init+0xe8>)
 8002540:	2200      	movs	r2, #0
 8002542:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8002544:	4825      	ldr	r0, [pc, #148]	; (80025dc <MX_TIM17_Init+0xe8>)
 8002546:	f005 f95f 	bl	8007808 <HAL_TIM_Base_Init>
 800254a:	4603      	mov	r3, r0
 800254c:	2b00      	cmp	r3, #0
 800254e:	d001      	beq.n	8002554 <MX_TIM17_Init+0x60>
  {
    Error_Handler();
 8002550:	f7ff fbc0 	bl	8001cd4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 8002554:	4821      	ldr	r0, [pc, #132]	; (80025dc <MX_TIM17_Init+0xe8>)
 8002556:	f005 fa27 	bl	80079a8 <HAL_TIM_PWM_Init>
 800255a:	4603      	mov	r3, r0
 800255c:	2b00      	cmp	r3, #0
 800255e:	d001      	beq.n	8002564 <MX_TIM17_Init+0x70>
  {
    Error_Handler();
 8002560:	f7ff fbb8 	bl	8001cd4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002564:	2360      	movs	r3, #96	; 0x60
 8002566:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 0;
 8002568:	2300      	movs	r3, #0
 800256a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800256c:	2300      	movs	r3, #0
 800256e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002570:	2300      	movs	r3, #0
 8002572:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002574:	2300      	movs	r3, #0
 8002576:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002578:	2300      	movs	r3, #0
 800257a:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800257c:	2300      	movs	r3, #0
 800257e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002580:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002584:	2200      	movs	r2, #0
 8002586:	4619      	mov	r1, r3
 8002588:	4814      	ldr	r0, [pc, #80]	; (80025dc <MX_TIM17_Init+0xe8>)
 800258a:	f005 fea3 	bl	80082d4 <HAL_TIM_PWM_ConfigChannel>
 800258e:	4603      	mov	r3, r0
 8002590:	2b00      	cmp	r3, #0
 8002592:	d001      	beq.n	8002598 <MX_TIM17_Init+0xa4>
  {
    Error_Handler();
 8002594:	f7ff fb9e 	bl	8001cd4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002598:	2300      	movs	r3, #0
 800259a:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800259c:	2300      	movs	r3, #0
 800259e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80025a0:	2300      	movs	r3, #0
 80025a2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80025a4:	2300      	movs	r3, #0
 80025a6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80025a8:	2300      	movs	r3, #0
 80025aa:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80025ac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80025b0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80025b2:	2300      	movs	r3, #0
 80025b4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80025b6:	2300      	movs	r3, #0
 80025b8:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 80025ba:	463b      	mov	r3, r7
 80025bc:	4619      	mov	r1, r3
 80025be:	4807      	ldr	r0, [pc, #28]	; (80025dc <MX_TIM17_Init+0xe8>)
 80025c0:	f006 ffe6 	bl	8009590 <HAL_TIMEx_ConfigBreakDeadTime>
 80025c4:	4603      	mov	r3, r0
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d001      	beq.n	80025ce <MX_TIM17_Init+0xda>
  {
    Error_Handler();
 80025ca:	f7ff fb83 	bl	8001cd4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 80025ce:	4803      	ldr	r0, [pc, #12]	; (80025dc <MX_TIM17_Init+0xe8>)
 80025d0:	f000 f918 	bl	8002804 <HAL_TIM_MspPostInit>

}
 80025d4:	bf00      	nop
 80025d6:	3750      	adds	r7, #80	; 0x50
 80025d8:	46bd      	mov	sp, r7
 80025da:	bd80      	pop	{r7, pc}
 80025dc:	200007b4 	.word	0x200007b4
 80025e0:	40014800 	.word	0x40014800

080025e4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b090      	sub	sp, #64	; 0x40
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025ec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80025f0:	2200      	movs	r2, #0
 80025f2:	601a      	str	r2, [r3, #0]
 80025f4:	605a      	str	r2, [r3, #4]
 80025f6:	609a      	str	r2, [r3, #8]
 80025f8:	60da      	str	r2, [r3, #12]
 80025fa:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4a58      	ldr	r2, [pc, #352]	; (8002764 <HAL_TIM_Base_MspInit+0x180>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d128      	bne.n	8002658 <HAL_TIM_Base_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002606:	4b58      	ldr	r3, [pc, #352]	; (8002768 <HAL_TIM_Base_MspInit+0x184>)
 8002608:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800260a:	4a57      	ldr	r2, [pc, #348]	; (8002768 <HAL_TIM_Base_MspInit+0x184>)
 800260c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002610:	6613      	str	r3, [r2, #96]	; 0x60
 8002612:	4b55      	ldr	r3, [pc, #340]	; (8002768 <HAL_TIM_Base_MspInit+0x184>)
 8002614:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002616:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800261a:	62bb      	str	r3, [r7, #40]	; 0x28
 800261c:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800261e:	4b52      	ldr	r3, [pc, #328]	; (8002768 <HAL_TIM_Base_MspInit+0x184>)
 8002620:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002622:	4a51      	ldr	r2, [pc, #324]	; (8002768 <HAL_TIM_Base_MspInit+0x184>)
 8002624:	f043 0304 	orr.w	r3, r3, #4
 8002628:	64d3      	str	r3, [r2, #76]	; 0x4c
 800262a:	4b4f      	ldr	r3, [pc, #316]	; (8002768 <HAL_TIM_Base_MspInit+0x184>)
 800262c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800262e:	f003 0304 	and.w	r3, r3, #4
 8002632:	627b      	str	r3, [r7, #36]	; 0x24
 8002634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2
    PC2     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8002636:	2307      	movs	r3, #7
 8002638:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800263a:	2302      	movs	r3, #2
 800263c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800263e:	2300      	movs	r3, #0
 8002640:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002642:	2300      	movs	r3, #0
 8002644:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8002646:	2302      	movs	r3, #2
 8002648:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800264a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800264e:	4619      	mov	r1, r3
 8002650:	4846      	ldr	r0, [pc, #280]	; (800276c <HAL_TIM_Base_MspInit+0x188>)
 8002652:	f001 ff19 	bl	8004488 <HAL_GPIO_Init>
    __HAL_RCC_TIM17_CLK_ENABLE();
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 8002656:	e080      	b.n	800275a <HAL_TIM_Base_MspInit+0x176>
  else if(tim_baseHandle->Instance==TIM8)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4a44      	ldr	r2, [pc, #272]	; (8002770 <HAL_TIM_Base_MspInit+0x18c>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d129      	bne.n	80026b6 <HAL_TIM_Base_MspInit+0xd2>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002662:	4b41      	ldr	r3, [pc, #260]	; (8002768 <HAL_TIM_Base_MspInit+0x184>)
 8002664:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002666:	4a40      	ldr	r2, [pc, #256]	; (8002768 <HAL_TIM_Base_MspInit+0x184>)
 8002668:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800266c:	6613      	str	r3, [r2, #96]	; 0x60
 800266e:	4b3e      	ldr	r3, [pc, #248]	; (8002768 <HAL_TIM_Base_MspInit+0x184>)
 8002670:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002672:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002676:	623b      	str	r3, [r7, #32]
 8002678:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800267a:	4b3b      	ldr	r3, [pc, #236]	; (8002768 <HAL_TIM_Base_MspInit+0x184>)
 800267c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800267e:	4a3a      	ldr	r2, [pc, #232]	; (8002768 <HAL_TIM_Base_MspInit+0x184>)
 8002680:	f043 0304 	orr.w	r3, r3, #4
 8002684:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002686:	4b38      	ldr	r3, [pc, #224]	; (8002768 <HAL_TIM_Base_MspInit+0x184>)
 8002688:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800268a:	f003 0304 	and.w	r3, r3, #4
 800268e:	61fb      	str	r3, [r7, #28]
 8002690:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8002692:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8002696:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002698:	2302      	movs	r3, #2
 800269a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800269c:	2300      	movs	r3, #0
 800269e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026a0:	2300      	movs	r3, #0
 80026a2:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 80026a4:	2304      	movs	r3, #4
 80026a6:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80026a8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80026ac:	4619      	mov	r1, r3
 80026ae:	482f      	ldr	r0, [pc, #188]	; (800276c <HAL_TIM_Base_MspInit+0x188>)
 80026b0:	f001 feea 	bl	8004488 <HAL_GPIO_Init>
}
 80026b4:	e051      	b.n	800275a <HAL_TIM_Base_MspInit+0x176>
  else if(tim_baseHandle->Instance==TIM15)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4a2e      	ldr	r2, [pc, #184]	; (8002774 <HAL_TIM_Base_MspInit+0x190>)
 80026bc:	4293      	cmp	r3, r2
 80026be:	d129      	bne.n	8002714 <HAL_TIM_Base_MspInit+0x130>
    __HAL_RCC_TIM15_CLK_ENABLE();
 80026c0:	4b29      	ldr	r3, [pc, #164]	; (8002768 <HAL_TIM_Base_MspInit+0x184>)
 80026c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026c4:	4a28      	ldr	r2, [pc, #160]	; (8002768 <HAL_TIM_Base_MspInit+0x184>)
 80026c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026ca:	6613      	str	r3, [r2, #96]	; 0x60
 80026cc:	4b26      	ldr	r3, [pc, #152]	; (8002768 <HAL_TIM_Base_MspInit+0x184>)
 80026ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026d4:	61bb      	str	r3, [r7, #24]
 80026d6:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026d8:	4b23      	ldr	r3, [pc, #140]	; (8002768 <HAL_TIM_Base_MspInit+0x184>)
 80026da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026dc:	4a22      	ldr	r2, [pc, #136]	; (8002768 <HAL_TIM_Base_MspInit+0x184>)
 80026de:	f043 0301 	orr.w	r3, r3, #1
 80026e2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80026e4:	4b20      	ldr	r3, [pc, #128]	; (8002768 <HAL_TIM_Base_MspInit+0x184>)
 80026e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026e8:	f003 0301 	and.w	r3, r3, #1
 80026ec:	617b      	str	r3, [r7, #20]
 80026ee:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80026f0:	230c      	movs	r3, #12
 80026f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026f4:	2302      	movs	r3, #2
 80026f6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026f8:	2300      	movs	r3, #0
 80026fa:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026fc:	2300      	movs	r3, #0
 80026fe:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM15;
 8002700:	2309      	movs	r3, #9
 8002702:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002704:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002708:	4619      	mov	r1, r3
 800270a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800270e:	f001 febb 	bl	8004488 <HAL_GPIO_Init>
}
 8002712:	e022      	b.n	800275a <HAL_TIM_Base_MspInit+0x176>
  else if(tim_baseHandle->Instance==TIM16)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4a17      	ldr	r2, [pc, #92]	; (8002778 <HAL_TIM_Base_MspInit+0x194>)
 800271a:	4293      	cmp	r3, r2
 800271c:	d10c      	bne.n	8002738 <HAL_TIM_Base_MspInit+0x154>
    __HAL_RCC_TIM16_CLK_ENABLE();
 800271e:	4b12      	ldr	r3, [pc, #72]	; (8002768 <HAL_TIM_Base_MspInit+0x184>)
 8002720:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002722:	4a11      	ldr	r2, [pc, #68]	; (8002768 <HAL_TIM_Base_MspInit+0x184>)
 8002724:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002728:	6613      	str	r3, [r2, #96]	; 0x60
 800272a:	4b0f      	ldr	r3, [pc, #60]	; (8002768 <HAL_TIM_Base_MspInit+0x184>)
 800272c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800272e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002732:	613b      	str	r3, [r7, #16]
 8002734:	693b      	ldr	r3, [r7, #16]
}
 8002736:	e010      	b.n	800275a <HAL_TIM_Base_MspInit+0x176>
  else if(tim_baseHandle->Instance==TIM17)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4a0f      	ldr	r2, [pc, #60]	; (800277c <HAL_TIM_Base_MspInit+0x198>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d10b      	bne.n	800275a <HAL_TIM_Base_MspInit+0x176>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8002742:	4b09      	ldr	r3, [pc, #36]	; (8002768 <HAL_TIM_Base_MspInit+0x184>)
 8002744:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002746:	4a08      	ldr	r2, [pc, #32]	; (8002768 <HAL_TIM_Base_MspInit+0x184>)
 8002748:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800274c:	6613      	str	r3, [r2, #96]	; 0x60
 800274e:	4b06      	ldr	r3, [pc, #24]	; (8002768 <HAL_TIM_Base_MspInit+0x184>)
 8002750:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002752:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002756:	60fb      	str	r3, [r7, #12]
 8002758:	68fb      	ldr	r3, [r7, #12]
}
 800275a:	bf00      	nop
 800275c:	3740      	adds	r7, #64	; 0x40
 800275e:	46bd      	mov	sp, r7
 8002760:	bd80      	pop	{r7, pc}
 8002762:	bf00      	nop
 8002764:	40012c00 	.word	0x40012c00
 8002768:	40021000 	.word	0x40021000
 800276c:	48000800 	.word	0x48000800
 8002770:	40013400 	.word	0x40013400
 8002774:	40014000 	.word	0x40014000
 8002778:	40014400 	.word	0x40014400
 800277c:	40014800 	.word	0x40014800

08002780 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b08a      	sub	sp, #40	; 0x28
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002788:	f107 0314 	add.w	r3, r7, #20
 800278c:	2200      	movs	r2, #0
 800278e:	601a      	str	r2, [r3, #0]
 8002790:	605a      	str	r2, [r3, #4]
 8002792:	609a      	str	r2, [r3, #8]
 8002794:	60da      	str	r2, [r3, #12]
 8002796:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4a17      	ldr	r2, [pc, #92]	; (80027fc <HAL_TIM_Encoder_MspInit+0x7c>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	d128      	bne.n	80027f4 <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80027a2:	4b17      	ldr	r3, [pc, #92]	; (8002800 <HAL_TIM_Encoder_MspInit+0x80>)
 80027a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027a6:	4a16      	ldr	r2, [pc, #88]	; (8002800 <HAL_TIM_Encoder_MspInit+0x80>)
 80027a8:	f043 0302 	orr.w	r3, r3, #2
 80027ac:	6593      	str	r3, [r2, #88]	; 0x58
 80027ae:	4b14      	ldr	r3, [pc, #80]	; (8002800 <HAL_TIM_Encoder_MspInit+0x80>)
 80027b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027b2:	f003 0302 	and.w	r3, r3, #2
 80027b6:	613b      	str	r3, [r7, #16]
 80027b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027ba:	4b11      	ldr	r3, [pc, #68]	; (8002800 <HAL_TIM_Encoder_MspInit+0x80>)
 80027bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027be:	4a10      	ldr	r2, [pc, #64]	; (8002800 <HAL_TIM_Encoder_MspInit+0x80>)
 80027c0:	f043 0301 	orr.w	r3, r3, #1
 80027c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80027c6:	4b0e      	ldr	r3, [pc, #56]	; (8002800 <HAL_TIM_Encoder_MspInit+0x80>)
 80027c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027ca:	f003 0301 	and.w	r3, r3, #1
 80027ce:	60fb      	str	r3, [r7, #12]
 80027d0:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = ENC_BTN_A_Pin|ENC_BTN_B_Pin;
 80027d2:	23c0      	movs	r3, #192	; 0xc0
 80027d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027d6:	2302      	movs	r3, #2
 80027d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027da:	2300      	movs	r3, #0
 80027dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027de:	2300      	movs	r3, #0
 80027e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80027e2:	2302      	movs	r3, #2
 80027e4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027e6:	f107 0314 	add.w	r3, r7, #20
 80027ea:	4619      	mov	r1, r3
 80027ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80027f0:	f001 fe4a 	bl	8004488 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80027f4:	bf00      	nop
 80027f6:	3728      	adds	r7, #40	; 0x28
 80027f8:	46bd      	mov	sp, r7
 80027fa:	bd80      	pop	{r7, pc}
 80027fc:	40000400 	.word	0x40000400
 8002800:	40021000 	.word	0x40021000

08002804 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b08a      	sub	sp, #40	; 0x28
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800280c:	f107 0314 	add.w	r3, r7, #20
 8002810:	2200      	movs	r2, #0
 8002812:	601a      	str	r2, [r3, #0]
 8002814:	605a      	str	r2, [r3, #4]
 8002816:	609a      	str	r2, [r3, #8]
 8002818:	60da      	str	r2, [r3, #12]
 800281a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM16)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4a22      	ldr	r2, [pc, #136]	; (80028ac <HAL_TIM_MspPostInit+0xa8>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d11c      	bne.n	8002860 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM16_MspPostInit 0 */

  /* USER CODE END TIM16_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002826:	4b22      	ldr	r3, [pc, #136]	; (80028b0 <HAL_TIM_MspPostInit+0xac>)
 8002828:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800282a:	4a21      	ldr	r2, [pc, #132]	; (80028b0 <HAL_TIM_MspPostInit+0xac>)
 800282c:	f043 0302 	orr.w	r3, r3, #2
 8002830:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002832:	4b1f      	ldr	r3, [pc, #124]	; (80028b0 <HAL_TIM_MspPostInit+0xac>)
 8002834:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002836:	f003 0302 	and.w	r3, r3, #2
 800283a:	613b      	str	r3, [r7, #16]
 800283c:	693b      	ldr	r3, [r7, #16]
    /**TIM16 GPIO Configuration
    PB4     ------> TIM16_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800283e:	2310      	movs	r3, #16
 8002840:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002842:	2302      	movs	r3, #2
 8002844:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002846:	2300      	movs	r3, #0
 8002848:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800284a:	2300      	movs	r3, #0
 800284c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 800284e:	2301      	movs	r3, #1
 8002850:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002852:	f107 0314 	add.w	r3, r7, #20
 8002856:	4619      	mov	r1, r3
 8002858:	4816      	ldr	r0, [pc, #88]	; (80028b4 <HAL_TIM_MspPostInit+0xb0>)
 800285a:	f001 fe15 	bl	8004488 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 800285e:	e020      	b.n	80028a2 <HAL_TIM_MspPostInit+0x9e>
  else if(timHandle->Instance==TIM17)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	4a14      	ldr	r2, [pc, #80]	; (80028b8 <HAL_TIM_MspPostInit+0xb4>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d11b      	bne.n	80028a2 <HAL_TIM_MspPostInit+0x9e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800286a:	4b11      	ldr	r3, [pc, #68]	; (80028b0 <HAL_TIM_MspPostInit+0xac>)
 800286c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800286e:	4a10      	ldr	r2, [pc, #64]	; (80028b0 <HAL_TIM_MspPostInit+0xac>)
 8002870:	f043 0302 	orr.w	r3, r3, #2
 8002874:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002876:	4b0e      	ldr	r3, [pc, #56]	; (80028b0 <HAL_TIM_MspPostInit+0xac>)
 8002878:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800287a:	f003 0302 	and.w	r3, r3, #2
 800287e:	60fb      	str	r3, [r7, #12]
 8002880:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ISO_PWM_BREAK_Pin;
 8002882:	2320      	movs	r3, #32
 8002884:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002886:	2302      	movs	r3, #2
 8002888:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800288a:	2300      	movs	r3, #0
 800288c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800288e:	2300      	movs	r3, #0
 8002890:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM17;
 8002892:	230a      	movs	r3, #10
 8002894:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ISO_PWM_BREAK_GPIO_Port, &GPIO_InitStruct);
 8002896:	f107 0314 	add.w	r3, r7, #20
 800289a:	4619      	mov	r1, r3
 800289c:	4805      	ldr	r0, [pc, #20]	; (80028b4 <HAL_TIM_MspPostInit+0xb0>)
 800289e:	f001 fdf3 	bl	8004488 <HAL_GPIO_Init>
}
 80028a2:	bf00      	nop
 80028a4:	3728      	adds	r7, #40	; 0x28
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bd80      	pop	{r7, pc}
 80028aa:	bf00      	nop
 80028ac:	40014400 	.word	0x40014400
 80028b0:	40021000 	.word	0x40021000
 80028b4:	48000400 	.word	0x48000400
 80028b8:	40014800 	.word	0x40014800

080028bc <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80028c0:	4b22      	ldr	r3, [pc, #136]	; (800294c <MX_USART1_UART_Init+0x90>)
 80028c2:	4a23      	ldr	r2, [pc, #140]	; (8002950 <MX_USART1_UART_Init+0x94>)
 80028c4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80028c6:	4b21      	ldr	r3, [pc, #132]	; (800294c <MX_USART1_UART_Init+0x90>)
 80028c8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80028cc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80028ce:	4b1f      	ldr	r3, [pc, #124]	; (800294c <MX_USART1_UART_Init+0x90>)
 80028d0:	2200      	movs	r2, #0
 80028d2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80028d4:	4b1d      	ldr	r3, [pc, #116]	; (800294c <MX_USART1_UART_Init+0x90>)
 80028d6:	2200      	movs	r2, #0
 80028d8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80028da:	4b1c      	ldr	r3, [pc, #112]	; (800294c <MX_USART1_UART_Init+0x90>)
 80028dc:	2200      	movs	r2, #0
 80028de:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80028e0:	4b1a      	ldr	r3, [pc, #104]	; (800294c <MX_USART1_UART_Init+0x90>)
 80028e2:	220c      	movs	r2, #12
 80028e4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80028e6:	4b19      	ldr	r3, [pc, #100]	; (800294c <MX_USART1_UART_Init+0x90>)
 80028e8:	2200      	movs	r2, #0
 80028ea:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80028ec:	4b17      	ldr	r3, [pc, #92]	; (800294c <MX_USART1_UART_Init+0x90>)
 80028ee:	2200      	movs	r2, #0
 80028f0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80028f2:	4b16      	ldr	r3, [pc, #88]	; (800294c <MX_USART1_UART_Init+0x90>)
 80028f4:	2200      	movs	r2, #0
 80028f6:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80028f8:	4b14      	ldr	r3, [pc, #80]	; (800294c <MX_USART1_UART_Init+0x90>)
 80028fa:	2200      	movs	r2, #0
 80028fc:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80028fe:	4b13      	ldr	r3, [pc, #76]	; (800294c <MX_USART1_UART_Init+0x90>)
 8002900:	2200      	movs	r2, #0
 8002902:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002904:	4811      	ldr	r0, [pc, #68]	; (800294c <MX_USART1_UART_Init+0x90>)
 8002906:	f006 ff3b 	bl	8009780 <HAL_UART_Init>
 800290a:	4603      	mov	r3, r0
 800290c:	2b00      	cmp	r3, #0
 800290e:	d001      	beq.n	8002914 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8002910:	f7ff f9e0 	bl	8001cd4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002914:	2100      	movs	r1, #0
 8002916:	480d      	ldr	r0, [pc, #52]	; (800294c <MX_USART1_UART_Init+0x90>)
 8002918:	f007 fd02 	bl	800a320 <HAL_UARTEx_SetTxFifoThreshold>
 800291c:	4603      	mov	r3, r0
 800291e:	2b00      	cmp	r3, #0
 8002920:	d001      	beq.n	8002926 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8002922:	f7ff f9d7 	bl	8001cd4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002926:	2100      	movs	r1, #0
 8002928:	4808      	ldr	r0, [pc, #32]	; (800294c <MX_USART1_UART_Init+0x90>)
 800292a:	f007 fd37 	bl	800a39c <HAL_UARTEx_SetRxFifoThreshold>
 800292e:	4603      	mov	r3, r0
 8002930:	2b00      	cmp	r3, #0
 8002932:	d001      	beq.n	8002938 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8002934:	f7ff f9ce 	bl	8001cd4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002938:	4804      	ldr	r0, [pc, #16]	; (800294c <MX_USART1_UART_Init+0x90>)
 800293a:	f007 fcb8 	bl	800a2ae <HAL_UARTEx_DisableFifoMode>
 800293e:	4603      	mov	r3, r0
 8002940:	2b00      	cmp	r3, #0
 8002942:	d001      	beq.n	8002948 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002944:	f7ff f9c6 	bl	8001cd4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002948:	bf00      	nop
 800294a:	bd80      	pop	{r7, pc}
 800294c:	20000800 	.word	0x20000800
 8002950:	40013800 	.word	0x40013800

08002954 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002958:	4b22      	ldr	r3, [pc, #136]	; (80029e4 <MX_USART3_UART_Init+0x90>)
 800295a:	4a23      	ldr	r2, [pc, #140]	; (80029e8 <MX_USART3_UART_Init+0x94>)
 800295c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800295e:	4b21      	ldr	r3, [pc, #132]	; (80029e4 <MX_USART3_UART_Init+0x90>)
 8002960:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002964:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002966:	4b1f      	ldr	r3, [pc, #124]	; (80029e4 <MX_USART3_UART_Init+0x90>)
 8002968:	2200      	movs	r2, #0
 800296a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800296c:	4b1d      	ldr	r3, [pc, #116]	; (80029e4 <MX_USART3_UART_Init+0x90>)
 800296e:	2200      	movs	r2, #0
 8002970:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002972:	4b1c      	ldr	r3, [pc, #112]	; (80029e4 <MX_USART3_UART_Init+0x90>)
 8002974:	2200      	movs	r2, #0
 8002976:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002978:	4b1a      	ldr	r3, [pc, #104]	; (80029e4 <MX_USART3_UART_Init+0x90>)
 800297a:	220c      	movs	r2, #12
 800297c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800297e:	4b19      	ldr	r3, [pc, #100]	; (80029e4 <MX_USART3_UART_Init+0x90>)
 8002980:	2200      	movs	r2, #0
 8002982:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002984:	4b17      	ldr	r3, [pc, #92]	; (80029e4 <MX_USART3_UART_Init+0x90>)
 8002986:	2200      	movs	r2, #0
 8002988:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800298a:	4b16      	ldr	r3, [pc, #88]	; (80029e4 <MX_USART3_UART_Init+0x90>)
 800298c:	2200      	movs	r2, #0
 800298e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002990:	4b14      	ldr	r3, [pc, #80]	; (80029e4 <MX_USART3_UART_Init+0x90>)
 8002992:	2200      	movs	r2, #0
 8002994:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002996:	4b13      	ldr	r3, [pc, #76]	; (80029e4 <MX_USART3_UART_Init+0x90>)
 8002998:	2200      	movs	r2, #0
 800299a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800299c:	4811      	ldr	r0, [pc, #68]	; (80029e4 <MX_USART3_UART_Init+0x90>)
 800299e:	f006 feef 	bl	8009780 <HAL_UART_Init>
 80029a2:	4603      	mov	r3, r0
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d001      	beq.n	80029ac <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80029a8:	f7ff f994 	bl	8001cd4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80029ac:	2100      	movs	r1, #0
 80029ae:	480d      	ldr	r0, [pc, #52]	; (80029e4 <MX_USART3_UART_Init+0x90>)
 80029b0:	f007 fcb6 	bl	800a320 <HAL_UARTEx_SetTxFifoThreshold>
 80029b4:	4603      	mov	r3, r0
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d001      	beq.n	80029be <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80029ba:	f7ff f98b 	bl	8001cd4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80029be:	2100      	movs	r1, #0
 80029c0:	4808      	ldr	r0, [pc, #32]	; (80029e4 <MX_USART3_UART_Init+0x90>)
 80029c2:	f007 fceb 	bl	800a39c <HAL_UARTEx_SetRxFifoThreshold>
 80029c6:	4603      	mov	r3, r0
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d001      	beq.n	80029d0 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80029cc:	f7ff f982 	bl	8001cd4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80029d0:	4804      	ldr	r0, [pc, #16]	; (80029e4 <MX_USART3_UART_Init+0x90>)
 80029d2:	f007 fc6c 	bl	800a2ae <HAL_UARTEx_DisableFifoMode>
 80029d6:	4603      	mov	r3, r0
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d001      	beq.n	80029e0 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80029dc:	f7ff f97a 	bl	8001cd4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80029e0:	bf00      	nop
 80029e2:	bd80      	pop	{r7, pc}
 80029e4:	20000890 	.word	0x20000890
 80029e8:	40004800 	.word	0x40004800

080029ec <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b0a0      	sub	sp, #128	; 0x80
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029f4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80029f8:	2200      	movs	r2, #0
 80029fa:	601a      	str	r2, [r3, #0]
 80029fc:	605a      	str	r2, [r3, #4]
 80029fe:	609a      	str	r2, [r3, #8]
 8002a00:	60da      	str	r2, [r3, #12]
 8002a02:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002a04:	f107 0318 	add.w	r3, r7, #24
 8002a08:	2254      	movs	r2, #84	; 0x54
 8002a0a:	2100      	movs	r1, #0
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	f00f f847 	bl	8011aa0 <memset>
  if(uartHandle->Instance==USART1)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4a3d      	ldr	r2, [pc, #244]	; (8002b0c <HAL_UART_MspInit+0x120>)
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	d136      	bne.n	8002a8a <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002a20:	2300      	movs	r3, #0
 8002a22:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002a24:	f107 0318 	add.w	r3, r7, #24
 8002a28:	4618      	mov	r0, r3
 8002a2a:	f004 fc9f 	bl	800736c <HAL_RCCEx_PeriphCLKConfig>
 8002a2e:	4603      	mov	r3, r0
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d001      	beq.n	8002a38 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002a34:	f7ff f94e 	bl	8001cd4 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002a38:	4b35      	ldr	r3, [pc, #212]	; (8002b10 <HAL_UART_MspInit+0x124>)
 8002a3a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a3c:	4a34      	ldr	r2, [pc, #208]	; (8002b10 <HAL_UART_MspInit+0x124>)
 8002a3e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a42:	6613      	str	r3, [r2, #96]	; 0x60
 8002a44:	4b32      	ldr	r3, [pc, #200]	; (8002b10 <HAL_UART_MspInit+0x124>)
 8002a46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a48:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a4c:	617b      	str	r3, [r7, #20]
 8002a4e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a50:	4b2f      	ldr	r3, [pc, #188]	; (8002b10 <HAL_UART_MspInit+0x124>)
 8002a52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a54:	4a2e      	ldr	r2, [pc, #184]	; (8002b10 <HAL_UART_MspInit+0x124>)
 8002a56:	f043 0304 	orr.w	r3, r3, #4
 8002a5a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002a5c:	4b2c      	ldr	r3, [pc, #176]	; (8002b10 <HAL_UART_MspInit+0x124>)
 8002a5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a60:	f003 0304 	and.w	r3, r3, #4
 8002a64:	613b      	str	r3, [r7, #16]
 8002a66:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002a68:	2330      	movs	r3, #48	; 0x30
 8002a6a:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a6c:	2302      	movs	r3, #2
 8002a6e:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a70:	2300      	movs	r3, #0
 8002a72:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a74:	2300      	movs	r3, #0
 8002a76:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002a78:	2307      	movs	r3, #7
 8002a7a:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a7c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002a80:	4619      	mov	r1, r3
 8002a82:	4824      	ldr	r0, [pc, #144]	; (8002b14 <HAL_UART_MspInit+0x128>)
 8002a84:	f001 fd00 	bl	8004488 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8002a88:	e03b      	b.n	8002b02 <HAL_UART_MspInit+0x116>
  else if(uartHandle->Instance==USART3)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4a22      	ldr	r2, [pc, #136]	; (8002b18 <HAL_UART_MspInit+0x12c>)
 8002a90:	4293      	cmp	r3, r2
 8002a92:	d136      	bne.n	8002b02 <HAL_UART_MspInit+0x116>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002a94:	2304      	movs	r3, #4
 8002a96:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002a98:	2300      	movs	r3, #0
 8002a9a:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002a9c:	f107 0318 	add.w	r3, r7, #24
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	f004 fc63 	bl	800736c <HAL_RCCEx_PeriphCLKConfig>
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d001      	beq.n	8002ab0 <HAL_UART_MspInit+0xc4>
      Error_Handler();
 8002aac:	f7ff f912 	bl	8001cd4 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002ab0:	4b17      	ldr	r3, [pc, #92]	; (8002b10 <HAL_UART_MspInit+0x124>)
 8002ab2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ab4:	4a16      	ldr	r2, [pc, #88]	; (8002b10 <HAL_UART_MspInit+0x124>)
 8002ab6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002aba:	6593      	str	r3, [r2, #88]	; 0x58
 8002abc:	4b14      	ldr	r3, [pc, #80]	; (8002b10 <HAL_UART_MspInit+0x124>)
 8002abe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ac0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ac4:	60fb      	str	r3, [r7, #12]
 8002ac6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ac8:	4b11      	ldr	r3, [pc, #68]	; (8002b10 <HAL_UART_MspInit+0x124>)
 8002aca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002acc:	4a10      	ldr	r2, [pc, #64]	; (8002b10 <HAL_UART_MspInit+0x124>)
 8002ace:	f043 0302 	orr.w	r3, r3, #2
 8002ad2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002ad4:	4b0e      	ldr	r3, [pc, #56]	; (8002b10 <HAL_UART_MspInit+0x124>)
 8002ad6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ad8:	f003 0302 	and.w	r3, r3, #2
 8002adc:	60bb      	str	r3, [r7, #8]
 8002ade:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002ae0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002ae4:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ae6:	2302      	movs	r3, #2
 8002ae8:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aea:	2300      	movs	r3, #0
 8002aec:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002aee:	2300      	movs	r3, #0
 8002af0:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002af2:	2307      	movs	r3, #7
 8002af4:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002af6:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002afa:	4619      	mov	r1, r3
 8002afc:	4807      	ldr	r0, [pc, #28]	; (8002b1c <HAL_UART_MspInit+0x130>)
 8002afe:	f001 fcc3 	bl	8004488 <HAL_GPIO_Init>
}
 8002b02:	bf00      	nop
 8002b04:	3780      	adds	r7, #128	; 0x80
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bd80      	pop	{r7, pc}
 8002b0a:	bf00      	nop
 8002b0c:	40013800 	.word	0x40013800
 8002b10:	40021000 	.word	0x40021000
 8002b14:	48000800 	.word	0x48000800
 8002b18:	40004800 	.word	0x40004800
 8002b1c:	48000400 	.word	0x48000400

08002b20 <vTask_Break>:
#include "semphr.h"
#include "adc.h"

extern SemaphoreHandle_t xUartMutex;

void vTask_Break(void *pvParameters){
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b086      	sub	sp, #24
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
	BREAK_HandleTypeDef hbreak1;
	uint16_t VBus_raw;
	if(xSemaphoreTake(xUartMutex, portMAX_DELAY) == pdTRUE){
 8002b28:	4b19      	ldr	r3, [pc, #100]	; (8002b90 <vTask_Break+0x70>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002b30:	4618      	mov	r0, r3
 8002b32:	f00b fea3 	bl	800e87c <xQueueSemaphoreTake>
 8002b36:	4603      	mov	r3, r0
 8002b38:	2b01      	cmp	r3, #1
 8002b3a:	d109      	bne.n	8002b50 <vTask_Break+0x30>
		printf("Init Break...         ");
 8002b3c:	4815      	ldr	r0, [pc, #84]	; (8002b94 <vTask_Break+0x74>)
 8002b3e:	f00e fe69 	bl	8011814 <iprintf>
		xSemaphoreGive(xUartMutex);
 8002b42:	4b13      	ldr	r3, [pc, #76]	; (8002b90 <vTask_Break+0x70>)
 8002b44:	6818      	ldr	r0, [r3, #0]
 8002b46:	2300      	movs	r3, #0
 8002b48:	2200      	movs	r2, #0
 8002b4a:	2100      	movs	r1, #0
 8002b4c:	f00b fd98 	bl	800e680 <xQueueGenericSend>
	}
	Break_Init(&hbreak1, (TIM_HandleTypeDef*)pvParameters);
 8002b50:	f107 030c 	add.w	r3, r7, #12
 8002b54:	6879      	ldr	r1, [r7, #4]
 8002b56:	4618      	mov	r0, r3
 8002b58:	f000 f820 	bl	8002b9c <Break_Init>
	if(xSemaphoreTake(xUartMutex, portMAX_DELAY) == pdTRUE){
 8002b5c:	4b0c      	ldr	r3, [pc, #48]	; (8002b90 <vTask_Break+0x70>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002b64:	4618      	mov	r0, r3
 8002b66:	f00b fe89 	bl	800e87c <xQueueSemaphoreTake>
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	2b01      	cmp	r3, #1
 8002b6e:	d109      	bne.n	8002b84 <vTask_Break+0x64>
		printf(" Done\r\n");
 8002b70:	4809      	ldr	r0, [pc, #36]	; (8002b98 <vTask_Break+0x78>)
 8002b72:	f00e feb5 	bl	80118e0 <puts>
		xSemaphoreGive(xUartMutex);
 8002b76:	4b06      	ldr	r3, [pc, #24]	; (8002b90 <vTask_Break+0x70>)
 8002b78:	6818      	ldr	r0, [r3, #0]
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	2100      	movs	r1, #0
 8002b80:	f00b fd7e 	bl	800e680 <xQueueGenericSend>
//		VBus_raw = HAL_ADC_GetValue(&hadc4);
//		if(xSemaphoreTake(xUartMutex, portMAX_DELAY) == pdTRUE){
//			printf("Vbus 0x%4\r\n", VBus_raw);
//			xSemaphoreGive(xUartMutex);
//		}
		vTaskDelay(1000);
 8002b84:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002b88:	f00c f9d0 	bl	800ef2c <vTaskDelay>
 8002b8c:	e7fa      	b.n	8002b84 <vTask_Break+0x64>
 8002b8e:	bf00      	nop
 8002b90:	200005d4 	.word	0x200005d4
 8002b94:	08013af0 	.word	0x08013af0
 8002b98:	08013b08 	.word	0x08013b08

08002b9c <Break_Init>:
	}
}

void Break_Init(BREAK_HandleTypeDef* hbreak, TIM_HandleTypeDef* htim){
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b082      	sub	sp, #8
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
 8002ba4:	6039      	str	r1, [r7, #0]
	hbreak->htim = htim;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	683a      	ldr	r2, [r7, #0]
 8002baa:	601a      	str	r2, [r3, #0]
	hbreak->Max_Pwm = __HAL_TIM_GET_AUTORELOAD(htim);
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bb2:	b29a      	uxth	r2, r3
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	809a      	strh	r2, [r3, #4]
	hbreak->Pwm = 0;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2200      	movs	r2, #0
 8002bbc:	80da      	strh	r2, [r3, #6]
	hbreak->Channel = BREAK_CHANNEL;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	721a      	strb	r2, [r3, #8]
	Break_Set_DutyCycle(hbreak, 0);
 8002bc4:	ed9f 0a08 	vldr	s0, [pc, #32]	; 8002be8 <Break_Init+0x4c>
 8002bc8:	6878      	ldr	r0, [r7, #4]
 8002bca:	f000 f80f 	bl	8002bec <Break_Set_DutyCycle>
	HAL_TIM_PWM_Start(hbreak->htim, hbreak->Channel);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681a      	ldr	r2, [r3, #0]
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	7a1b      	ldrb	r3, [r3, #8]
 8002bd6:	4619      	mov	r1, r3
 8002bd8:	4610      	mov	r0, r2
 8002bda:	f004 ff47 	bl	8007a6c <HAL_TIM_PWM_Start>
}
 8002bde:	bf00      	nop
 8002be0:	3708      	adds	r7, #8
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bd80      	pop	{r7, pc}
 8002be6:	bf00      	nop
 8002be8:	00000000 	.word	0x00000000

08002bec <Break_Set_DutyCycle>:

void Break_Set_DutyCycle(BREAK_HandleTypeDef* hbreak, float dutyCycle){
 8002bec:	b480      	push	{r7}
 8002bee:	b083      	sub	sp, #12
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
 8002bf4:	ed87 0a00 	vstr	s0, [r7]
	hbreak->Pwm = (uint16_t)(dutyCycle*((float)hbreak->Max_Pwm));
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	889b      	ldrh	r3, [r3, #4]
 8002bfc:	ee07 3a90 	vmov	s15, r3
 8002c00:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002c04:	edd7 7a00 	vldr	s15, [r7]
 8002c08:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c0c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002c10:	ee17 3a90 	vmov	r3, s15
 8002c14:	b29a      	uxth	r2, r3
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	80da      	strh	r2, [r3, #6]
	__HAL_TIM_SET_COMPARE(hbreak->htim, hbreak->Channel, hbreak->Pwm);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	7a1b      	ldrb	r3, [r3, #8]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d106      	bne.n	8002c30 <Break_Set_DutyCycle+0x44>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	88da      	ldrh	r2, [r3, #6]
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	635a      	str	r2, [r3, #52]	; 0x34
}
 8002c2e:	e036      	b.n	8002c9e <Break_Set_DutyCycle+0xb2>
	__HAL_TIM_SET_COMPARE(hbreak->htim, hbreak->Channel, hbreak->Pwm);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	7a1b      	ldrb	r3, [r3, #8]
 8002c34:	2b04      	cmp	r3, #4
 8002c36:	d107      	bne.n	8002c48 <Break_Set_DutyCycle+0x5c>
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	88d9      	ldrh	r1, [r3, #6]
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	681a      	ldr	r2, [r3, #0]
 8002c42:	460b      	mov	r3, r1
 8002c44:	6393      	str	r3, [r2, #56]	; 0x38
}
 8002c46:	e02a      	b.n	8002c9e <Break_Set_DutyCycle+0xb2>
	__HAL_TIM_SET_COMPARE(hbreak->htim, hbreak->Channel, hbreak->Pwm);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	7a1b      	ldrb	r3, [r3, #8]
 8002c4c:	2b08      	cmp	r3, #8
 8002c4e:	d107      	bne.n	8002c60 <Break_Set_DutyCycle+0x74>
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	88d9      	ldrh	r1, [r3, #6]
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	681a      	ldr	r2, [r3, #0]
 8002c5a:	460b      	mov	r3, r1
 8002c5c:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8002c5e:	e01e      	b.n	8002c9e <Break_Set_DutyCycle+0xb2>
	__HAL_TIM_SET_COMPARE(hbreak->htim, hbreak->Channel, hbreak->Pwm);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	7a1b      	ldrb	r3, [r3, #8]
 8002c64:	2b0c      	cmp	r3, #12
 8002c66:	d107      	bne.n	8002c78 <Break_Set_DutyCycle+0x8c>
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	88d9      	ldrh	r1, [r3, #6]
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	681a      	ldr	r2, [r3, #0]
 8002c72:	460b      	mov	r3, r1
 8002c74:	6413      	str	r3, [r2, #64]	; 0x40
}
 8002c76:	e012      	b.n	8002c9e <Break_Set_DutyCycle+0xb2>
	__HAL_TIM_SET_COMPARE(hbreak->htim, hbreak->Channel, hbreak->Pwm);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	7a1b      	ldrb	r3, [r3, #8]
 8002c7c:	2b10      	cmp	r3, #16
 8002c7e:	d107      	bne.n	8002c90 <Break_Set_DutyCycle+0xa4>
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	88d9      	ldrh	r1, [r3, #6]
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	681a      	ldr	r2, [r3, #0]
 8002c8a:	460b      	mov	r3, r1
 8002c8c:	6493      	str	r3, [r2, #72]	; 0x48
}
 8002c8e:	e006      	b.n	8002c9e <Break_Set_DutyCycle+0xb2>
	__HAL_TIM_SET_COMPARE(hbreak->htim, hbreak->Channel, hbreak->Pwm);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	88d9      	ldrh	r1, [r3, #6]
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	681a      	ldr	r2, [r3, #0]
 8002c9a:	460b      	mov	r3, r1
 8002c9c:	64d3      	str	r3, [r2, #76]	; 0x4c
}
 8002c9e:	bf00      	nop
 8002ca0:	370c      	adds	r7, #12
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca8:	4770      	bx	lr
	...

08002cac <vTask_Button>:
#include "mylibs/button.h"
#include "FreeRTOS.h"
#include "semphr.h"


void vTask_Button(void *pvParameters){
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b084      	sub	sp, #16
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
	uint8_t led = 0;
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	73fb      	strb	r3, [r7, #15]
	uint8_t dir = 1;
 8002cb8:	2301      	movs	r3, #1
 8002cba:	73bb      	strb	r3, [r7, #14]
	printf("Init BUTTON...        ");
 8002cbc:	480a      	ldr	r0, [pc, #40]	; (8002ce8 <vTask_Button+0x3c>)
 8002cbe:	f00e fda9 	bl	8011814 <iprintf>
	Button_Init();
 8002cc2:	f000 f817 	bl	8002cf4 <Button_Init>
	printf("Done\r\n");
 8002cc6:	4809      	ldr	r0, [pc, #36]	; (8002cec <vTask_Button+0x40>)
 8002cc8:	f00e fe0a 	bl	80118e0 <puts>
	for(;;){
		ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 8002ccc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002cd0:	2001      	movs	r0, #1
 8002cd2:	f00c fef5 	bl	800fac0 <ulTaskNotifyTake>
		HAL_GPIO_TogglePin(Pwr_Enable_U_GPIO_Port, Pwr_Enable_U_Pin);
 8002cd6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002cda:	4805      	ldr	r0, [pc, #20]	; (8002cf0 <vTask_Button+0x44>)
 8002cdc:	f001 fd6e 	bl	80047bc <HAL_GPIO_TogglePin>
		vTaskDelay(100);
 8002ce0:	2064      	movs	r0, #100	; 0x64
 8002ce2:	f00c f923 	bl	800ef2c <vTaskDelay>
		ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 8002ce6:	e7f1      	b.n	8002ccc <vTask_Button+0x20>
 8002ce8:	08013b10 	.word	0x08013b10
 8002cec:	08013b28 	.word	0x08013b28
 8002cf0:	48000800 	.word	0x48000800

08002cf4 <Button_Init>:
	}
}

void Button_Init(){
 8002cf4:	b480      	push	{r7}
 8002cf6:	af00      	add	r7, sp, #0

}
 8002cf8:	bf00      	nop
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d00:	4770      	bx	lr
	...

08002d04 <vTask_LED>:
 *  Created on: Aug 1, 2023
 *      Author: nicolas
 */
#include "mylibs/led.h"

void vTask_LED(void *pvParameters){
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b084      	sub	sp, #16
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
	uint8_t led = 0;
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	73fb      	strb	r3, [r7, #15]
	uint8_t dir = 1;
 8002d10:	2301      	movs	r3, #1
 8002d12:	73bb      	strb	r3, [r7, #14]
	printf("Init LED...           ");
 8002d14:	4814      	ldr	r0, [pc, #80]	; (8002d68 <vTask_LED+0x64>)
 8002d16:	f00e fd7d 	bl	8011814 <iprintf>
	LED_Init();
 8002d1a:	f000 f829 	bl	8002d70 <LED_Init>
	printf(" Done\r\n");
 8002d1e:	4813      	ldr	r0, [pc, #76]	; (8002d6c <vTask_LED+0x68>)
 8002d20:	f00e fdde 	bl	80118e0 <puts>
	for(;;){
		LED_Write(led);
 8002d24:	7bfb      	ldrb	r3, [r7, #15]
 8002d26:	4618      	mov	r0, r3
 8002d28:	f000 f82a 	bl	8002d80 <LED_Write>
		if(dir){
 8002d2c:	7bbb      	ldrb	r3, [r7, #14]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d00a      	beq.n	8002d48 <vTask_LED+0x44>
			led = 2*led+1;
 8002d32:	7bfb      	ldrb	r3, [r7, #15]
 8002d34:	005b      	lsls	r3, r3, #1
 8002d36:	b2db      	uxtb	r3, r3
 8002d38:	3301      	adds	r3, #1
 8002d3a:	73fb      	strb	r3, [r7, #15]
			if(led==0x0F) dir = 0;
 8002d3c:	7bfb      	ldrb	r3, [r7, #15]
 8002d3e:	2b0f      	cmp	r3, #15
 8002d40:	d10d      	bne.n	8002d5e <vTask_LED+0x5a>
 8002d42:	2300      	movs	r3, #0
 8002d44:	73bb      	strb	r3, [r7, #14]
 8002d46:	e00a      	b.n	8002d5e <vTask_LED+0x5a>
		}
		else{
			led = (led-1)/2;
 8002d48:	7bfb      	ldrb	r3, [r7, #15]
 8002d4a:	3b01      	subs	r3, #1
 8002d4c:	0fda      	lsrs	r2, r3, #31
 8002d4e:	4413      	add	r3, r2
 8002d50:	105b      	asrs	r3, r3, #1
 8002d52:	73fb      	strb	r3, [r7, #15]
			if(led==0x00) dir = 1;
 8002d54:	7bfb      	ldrb	r3, [r7, #15]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d101      	bne.n	8002d5e <vTask_LED+0x5a>
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	73bb      	strb	r3, [r7, #14]
		}
		vTaskDelay(100);
 8002d5e:	2064      	movs	r0, #100	; 0x64
 8002d60:	f00c f8e4 	bl	800ef2c <vTaskDelay>
	for(;;){
 8002d64:	e7de      	b.n	8002d24 <vTask_LED+0x20>
 8002d66:	bf00      	nop
 8002d68:	08013b30 	.word	0x08013b30
 8002d6c:	08013b48 	.word	0x08013b48

08002d70 <LED_Init>:
	}
}

void LED_Init(){
 8002d70:	b480      	push	{r7}
 8002d72:	af00      	add	r7, sp, #0

}
 8002d74:	bf00      	nop
 8002d76:	46bd      	mov	sp, r7
 8002d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7c:	4770      	bx	lr
	...

08002d80 <LED_Write>:

void LED_Write(uint8_t leds){
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b082      	sub	sp, #8
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	4603      	mov	r3, r0
 8002d88:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(USR_LED_1_GPIO_Port, USR_LED_1_Pin, (leds>>0)&1);
 8002d8a:	79fb      	ldrb	r3, [r7, #7]
 8002d8c:	f003 0301 	and.w	r3, r3, #1
 8002d90:	b2db      	uxtb	r3, r3
 8002d92:	461a      	mov	r2, r3
 8002d94:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002d98:	4815      	ldr	r0, [pc, #84]	; (8002df0 <LED_Write+0x70>)
 8002d9a:	f001 fcf7 	bl	800478c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(USR_LED_2_GPIO_Port, USR_LED_2_Pin, (leds>>1)&1);
 8002d9e:	79fb      	ldrb	r3, [r7, #7]
 8002da0:	085b      	lsrs	r3, r3, #1
 8002da2:	b2db      	uxtb	r3, r3
 8002da4:	f003 0301 	and.w	r3, r3, #1
 8002da8:	b2db      	uxtb	r3, r3
 8002daa:	461a      	mov	r2, r3
 8002dac:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002db0:	480f      	ldr	r0, [pc, #60]	; (8002df0 <LED_Write+0x70>)
 8002db2:	f001 fceb 	bl	800478c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(USR_LED_3_GPIO_Port, USR_LED_3_Pin, (leds>>2)&1);
 8002db6:	79fb      	ldrb	r3, [r7, #7]
 8002db8:	089b      	lsrs	r3, r3, #2
 8002dba:	b2db      	uxtb	r3, r3
 8002dbc:	f003 0301 	and.w	r3, r3, #1
 8002dc0:	b2db      	uxtb	r3, r3
 8002dc2:	461a      	mov	r2, r3
 8002dc4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002dc8:	4809      	ldr	r0, [pc, #36]	; (8002df0 <LED_Write+0x70>)
 8002dca:	f001 fcdf 	bl	800478c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(USR_LED_4_GPIO_Port, USR_LED_4_Pin, (leds>>3)&1);
 8002dce:	79fb      	ldrb	r3, [r7, #7]
 8002dd0:	08db      	lsrs	r3, r3, #3
 8002dd2:	b2db      	uxtb	r3, r3
 8002dd4:	f003 0301 	and.w	r3, r3, #1
 8002dd8:	b2db      	uxtb	r3, r3
 8002dda:	461a      	mov	r2, r3
 8002ddc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002de0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002de4:	f001 fcd2 	bl	800478c <HAL_GPIO_WritePin>
}
 8002de8:	bf00      	nop
 8002dea:	3708      	adds	r7, #8
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bd80      	pop	{r7, pc}
 8002df0:	48000800 	.word	0x48000800

08002df4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002df4:	480d      	ldr	r0, [pc, #52]	; (8002e2c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002df6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002df8:	480d      	ldr	r0, [pc, #52]	; (8002e30 <LoopForever+0x6>)
  ldr r1, =_edata
 8002dfa:	490e      	ldr	r1, [pc, #56]	; (8002e34 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002dfc:	4a0e      	ldr	r2, [pc, #56]	; (8002e38 <LoopForever+0xe>)
  movs r3, #0
 8002dfe:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002e00:	e002      	b.n	8002e08 <LoopCopyDataInit>

08002e02 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002e02:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002e04:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002e06:	3304      	adds	r3, #4

08002e08 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002e08:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002e0a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002e0c:	d3f9      	bcc.n	8002e02 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002e0e:	4a0b      	ldr	r2, [pc, #44]	; (8002e3c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002e10:	4c0b      	ldr	r4, [pc, #44]	; (8002e40 <LoopForever+0x16>)
  movs r3, #0
 8002e12:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002e14:	e001      	b.n	8002e1a <LoopFillZerobss>

08002e16 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002e16:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002e18:	3204      	adds	r2, #4

08002e1a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002e1a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002e1c:	d3fb      	bcc.n	8002e16 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002e1e:	f7ff f8ff 	bl	8002020 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002e22:	f00e feeb 	bl	8011bfc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002e26:	f7fe fe29 	bl	8001a7c <main>

08002e2a <LoopForever>:

LoopForever:
    b LoopForever
 8002e2a:	e7fe      	b.n	8002e2a <LoopForever>
  ldr   r0, =_estack
 8002e2c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002e30:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002e34:	20000350 	.word	0x20000350
  ldr r2, =_sidata
 8002e38:	08013f64 	.word	0x08013f64
  ldr r2, =_sbss
 8002e3c:	20000350 	.word	0x20000350
  ldr r4, =_ebss
 8002e40:	200035ac 	.word	0x200035ac

08002e44 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002e44:	e7fe      	b.n	8002e44 <ADC1_2_IRQHandler>

08002e46 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002e46:	b580      	push	{r7, lr}
 8002e48:	b082      	sub	sp, #8
 8002e4a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002e50:	2003      	movs	r0, #3
 8002e52:	f001 fa3a 	bl	80042ca <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002e56:	200f      	movs	r0, #15
 8002e58:	f7fe ff6a 	bl	8001d30 <HAL_InitTick>
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d002      	beq.n	8002e68 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002e62:	2301      	movs	r3, #1
 8002e64:	71fb      	strb	r3, [r7, #7]
 8002e66:	e001      	b.n	8002e6c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002e68:	f7fe ff3a 	bl	8001ce0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002e6c:	79fb      	ldrb	r3, [r7, #7]

}
 8002e6e:	4618      	mov	r0, r3
 8002e70:	3708      	adds	r7, #8
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bd80      	pop	{r7, pc}
	...

08002e78 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002e7c:	4b05      	ldr	r3, [pc, #20]	; (8002e94 <HAL_IncTick+0x1c>)
 8002e7e:	681a      	ldr	r2, [r3, #0]
 8002e80:	4b05      	ldr	r3, [pc, #20]	; (8002e98 <HAL_IncTick+0x20>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4413      	add	r3, r2
 8002e86:	4a03      	ldr	r2, [pc, #12]	; (8002e94 <HAL_IncTick+0x1c>)
 8002e88:	6013      	str	r3, [r2, #0]
}
 8002e8a:	bf00      	nop
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e92:	4770      	bx	lr
 8002e94:	20000920 	.word	0x20000920
 8002e98:	20000008 	.word	0x20000008

08002e9c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002e9c:	b480      	push	{r7}
 8002e9e:	af00      	add	r7, sp, #0
  return uwTick;
 8002ea0:	4b03      	ldr	r3, [pc, #12]	; (8002eb0 <HAL_GetTick+0x14>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
}
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eac:	4770      	bx	lr
 8002eae:	bf00      	nop
 8002eb0:	20000920 	.word	0x20000920

08002eb4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b084      	sub	sp, #16
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002ebc:	f7ff ffee 	bl	8002e9c <HAL_GetTick>
 8002ec0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002ecc:	d004      	beq.n	8002ed8 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8002ece:	4b09      	ldr	r3, [pc, #36]	; (8002ef4 <HAL_Delay+0x40>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	68fa      	ldr	r2, [r7, #12]
 8002ed4:	4413      	add	r3, r2
 8002ed6:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002ed8:	bf00      	nop
 8002eda:	f7ff ffdf 	bl	8002e9c <HAL_GetTick>
 8002ede:	4602      	mov	r2, r0
 8002ee0:	68bb      	ldr	r3, [r7, #8]
 8002ee2:	1ad3      	subs	r3, r2, r3
 8002ee4:	68fa      	ldr	r2, [r7, #12]
 8002ee6:	429a      	cmp	r2, r3
 8002ee8:	d8f7      	bhi.n	8002eda <HAL_Delay+0x26>
  {
  }
}
 8002eea:	bf00      	nop
 8002eec:	bf00      	nop
 8002eee:	3710      	adds	r7, #16
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	bd80      	pop	{r7, pc}
 8002ef4:	20000008 	.word	0x20000008

08002ef8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002ef8:	b480      	push	{r7}
 8002efa:	b083      	sub	sp, #12
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
 8002f00:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	689b      	ldr	r3, [r3, #8]
 8002f06:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	431a      	orrs	r2, r3
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	609a      	str	r2, [r3, #8]
}
 8002f12:	bf00      	nop
 8002f14:	370c      	adds	r7, #12
 8002f16:	46bd      	mov	sp, r7
 8002f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1c:	4770      	bx	lr

08002f1e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002f1e:	b480      	push	{r7}
 8002f20:	b083      	sub	sp, #12
 8002f22:	af00      	add	r7, sp, #0
 8002f24:	6078      	str	r0, [r7, #4]
 8002f26:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	689b      	ldr	r3, [r3, #8]
 8002f2c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	431a      	orrs	r2, r3
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	609a      	str	r2, [r3, #8]
}
 8002f38:	bf00      	nop
 8002f3a:	370c      	adds	r7, #12
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f42:	4770      	bx	lr

08002f44 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002f44:	b480      	push	{r7}
 8002f46:	b083      	sub	sp, #12
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	689b      	ldr	r3, [r3, #8]
 8002f50:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002f54:	4618      	mov	r0, r3
 8002f56:	370c      	adds	r7, #12
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5e:	4770      	bx	lr

08002f60 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002f60:	b480      	push	{r7}
 8002f62:	b087      	sub	sp, #28
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	60f8      	str	r0, [r7, #12]
 8002f68:	60b9      	str	r1, [r7, #8]
 8002f6a:	607a      	str	r2, [r7, #4]
 8002f6c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	3360      	adds	r3, #96	; 0x60
 8002f72:	461a      	mov	r2, r3
 8002f74:	68bb      	ldr	r3, [r7, #8]
 8002f76:	009b      	lsls	r3, r3, #2
 8002f78:	4413      	add	r3, r2
 8002f7a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002f7c:	697b      	ldr	r3, [r7, #20]
 8002f7e:	681a      	ldr	r2, [r3, #0]
 8002f80:	4b08      	ldr	r3, [pc, #32]	; (8002fa4 <LL_ADC_SetOffset+0x44>)
 8002f82:	4013      	ands	r3, r2
 8002f84:	687a      	ldr	r2, [r7, #4]
 8002f86:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8002f8a:	683a      	ldr	r2, [r7, #0]
 8002f8c:	430a      	orrs	r2, r1
 8002f8e:	4313      	orrs	r3, r2
 8002f90:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002f94:	697b      	ldr	r3, [r7, #20]
 8002f96:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002f98:	bf00      	nop
 8002f9a:	371c      	adds	r7, #28
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa2:	4770      	bx	lr
 8002fa4:	03fff000 	.word	0x03fff000

08002fa8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002fa8:	b480      	push	{r7}
 8002faa:	b085      	sub	sp, #20
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
 8002fb0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	3360      	adds	r3, #96	; 0x60
 8002fb6:	461a      	mov	r2, r3
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	009b      	lsls	r3, r3, #2
 8002fbc:	4413      	add	r3, r2
 8002fbe:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002fc8:	4618      	mov	r0, r3
 8002fca:	3714      	adds	r7, #20
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd2:	4770      	bx	lr

08002fd4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002fd4:	b480      	push	{r7}
 8002fd6:	b087      	sub	sp, #28
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	60f8      	str	r0, [r7, #12]
 8002fdc:	60b9      	str	r1, [r7, #8]
 8002fde:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	3360      	adds	r3, #96	; 0x60
 8002fe4:	461a      	mov	r2, r3
 8002fe6:	68bb      	ldr	r3, [r7, #8]
 8002fe8:	009b      	lsls	r3, r3, #2
 8002fea:	4413      	add	r3, r2
 8002fec:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002fee:	697b      	ldr	r3, [r7, #20]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	431a      	orrs	r2, r3
 8002ffa:	697b      	ldr	r3, [r7, #20]
 8002ffc:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002ffe:	bf00      	nop
 8003000:	371c      	adds	r7, #28
 8003002:	46bd      	mov	sp, r7
 8003004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003008:	4770      	bx	lr

0800300a <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 800300a:	b480      	push	{r7}
 800300c:	b087      	sub	sp, #28
 800300e:	af00      	add	r7, sp, #0
 8003010:	60f8      	str	r0, [r7, #12]
 8003012:	60b9      	str	r1, [r7, #8]
 8003014:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	3360      	adds	r3, #96	; 0x60
 800301a:	461a      	mov	r2, r3
 800301c:	68bb      	ldr	r3, [r7, #8]
 800301e:	009b      	lsls	r3, r3, #2
 8003020:	4413      	add	r3, r2
 8003022:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003024:	697b      	ldr	r3, [r7, #20]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	431a      	orrs	r2, r3
 8003030:	697b      	ldr	r3, [r7, #20]
 8003032:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8003034:	bf00      	nop
 8003036:	371c      	adds	r7, #28
 8003038:	46bd      	mov	sp, r7
 800303a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303e:	4770      	bx	lr

08003040 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8003040:	b480      	push	{r7}
 8003042:	b087      	sub	sp, #28
 8003044:	af00      	add	r7, sp, #0
 8003046:	60f8      	str	r0, [r7, #12]
 8003048:	60b9      	str	r1, [r7, #8]
 800304a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	3360      	adds	r3, #96	; 0x60
 8003050:	461a      	mov	r2, r3
 8003052:	68bb      	ldr	r3, [r7, #8]
 8003054:	009b      	lsls	r3, r3, #2
 8003056:	4413      	add	r3, r2
 8003058:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800305a:	697b      	ldr	r3, [r7, #20]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	431a      	orrs	r2, r3
 8003066:	697b      	ldr	r3, [r7, #20]
 8003068:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 800306a:	bf00      	nop
 800306c:	371c      	adds	r7, #28
 800306e:	46bd      	mov	sp, r7
 8003070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003074:	4770      	bx	lr

08003076 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8003076:	b480      	push	{r7}
 8003078:	b083      	sub	sp, #12
 800307a:	af00      	add	r7, sp, #0
 800307c:	6078      	str	r0, [r7, #4]
 800307e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	695b      	ldr	r3, [r3, #20]
 8003084:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	431a      	orrs	r2, r3
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	615a      	str	r2, [r3, #20]
}
 8003090:	bf00      	nop
 8003092:	370c      	adds	r7, #12
 8003094:	46bd      	mov	sp, r7
 8003096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309a:	4770      	bx	lr

0800309c <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800309c:	b480      	push	{r7}
 800309e:	b087      	sub	sp, #28
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	60f8      	str	r0, [r7, #12]
 80030a4:	60b9      	str	r1, [r7, #8]
 80030a6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	3330      	adds	r3, #48	; 0x30
 80030ac:	461a      	mov	r2, r3
 80030ae:	68bb      	ldr	r3, [r7, #8]
 80030b0:	0a1b      	lsrs	r3, r3, #8
 80030b2:	009b      	lsls	r3, r3, #2
 80030b4:	f003 030c 	and.w	r3, r3, #12
 80030b8:	4413      	add	r3, r2
 80030ba:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80030bc:	697b      	ldr	r3, [r7, #20]
 80030be:	681a      	ldr	r2, [r3, #0]
 80030c0:	68bb      	ldr	r3, [r7, #8]
 80030c2:	f003 031f 	and.w	r3, r3, #31
 80030c6:	211f      	movs	r1, #31
 80030c8:	fa01 f303 	lsl.w	r3, r1, r3
 80030cc:	43db      	mvns	r3, r3
 80030ce:	401a      	ands	r2, r3
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	0e9b      	lsrs	r3, r3, #26
 80030d4:	f003 011f 	and.w	r1, r3, #31
 80030d8:	68bb      	ldr	r3, [r7, #8]
 80030da:	f003 031f 	and.w	r3, r3, #31
 80030de:	fa01 f303 	lsl.w	r3, r1, r3
 80030e2:	431a      	orrs	r2, r3
 80030e4:	697b      	ldr	r3, [r7, #20]
 80030e6:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80030e8:	bf00      	nop
 80030ea:	371c      	adds	r7, #28
 80030ec:	46bd      	mov	sp, r7
 80030ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f2:	4770      	bx	lr

080030f4 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80030f4:	b480      	push	{r7}
 80030f6:	b087      	sub	sp, #28
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	60f8      	str	r0, [r7, #12]
 80030fc:	60b9      	str	r1, [r7, #8]
 80030fe:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	3314      	adds	r3, #20
 8003104:	461a      	mov	r2, r3
 8003106:	68bb      	ldr	r3, [r7, #8]
 8003108:	0e5b      	lsrs	r3, r3, #25
 800310a:	009b      	lsls	r3, r3, #2
 800310c:	f003 0304 	and.w	r3, r3, #4
 8003110:	4413      	add	r3, r2
 8003112:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003114:	697b      	ldr	r3, [r7, #20]
 8003116:	681a      	ldr	r2, [r3, #0]
 8003118:	68bb      	ldr	r3, [r7, #8]
 800311a:	0d1b      	lsrs	r3, r3, #20
 800311c:	f003 031f 	and.w	r3, r3, #31
 8003120:	2107      	movs	r1, #7
 8003122:	fa01 f303 	lsl.w	r3, r1, r3
 8003126:	43db      	mvns	r3, r3
 8003128:	401a      	ands	r2, r3
 800312a:	68bb      	ldr	r3, [r7, #8]
 800312c:	0d1b      	lsrs	r3, r3, #20
 800312e:	f003 031f 	and.w	r3, r3, #31
 8003132:	6879      	ldr	r1, [r7, #4]
 8003134:	fa01 f303 	lsl.w	r3, r1, r3
 8003138:	431a      	orrs	r2, r3
 800313a:	697b      	ldr	r3, [r7, #20]
 800313c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800313e:	bf00      	nop
 8003140:	371c      	adds	r7, #28
 8003142:	46bd      	mov	sp, r7
 8003144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003148:	4770      	bx	lr
	...

0800314c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800314c:	b480      	push	{r7}
 800314e:	b085      	sub	sp, #20
 8003150:	af00      	add	r7, sp, #0
 8003152:	60f8      	str	r0, [r7, #12]
 8003154:	60b9      	str	r1, [r7, #8]
 8003156:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	4a0f      	ldr	r2, [pc, #60]	; (8003198 <LL_ADC_SetChannelSingleDiff+0x4c>)
 800315c:	4293      	cmp	r3, r2
 800315e:	d10a      	bne.n	8003176 <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8003166:	68bb      	ldr	r3, [r7, #8]
 8003168:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800316c:	431a      	orrs	r2, r3
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 8003174:	e00a      	b.n	800318c <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800317c:	68bb      	ldr	r3, [r7, #8]
 800317e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003182:	43db      	mvns	r3, r3
 8003184:	401a      	ands	r2, r3
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 800318c:	bf00      	nop
 800318e:	3714      	adds	r7, #20
 8003190:	46bd      	mov	sp, r7
 8003192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003196:	4770      	bx	lr
 8003198:	407f0000 	.word	0x407f0000

0800319c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800319c:	b480      	push	{r7}
 800319e:	b083      	sub	sp, #12
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	689b      	ldr	r3, [r3, #8]
 80031a8:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80031ac:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80031b0:	687a      	ldr	r2, [r7, #4]
 80031b2:	6093      	str	r3, [r2, #8]
}
 80031b4:	bf00      	nop
 80031b6:	370c      	adds	r7, #12
 80031b8:	46bd      	mov	sp, r7
 80031ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031be:	4770      	bx	lr

080031c0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80031c0:	b480      	push	{r7}
 80031c2:	b083      	sub	sp, #12
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	689b      	ldr	r3, [r3, #8]
 80031cc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80031d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80031d4:	d101      	bne.n	80031da <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80031d6:	2301      	movs	r3, #1
 80031d8:	e000      	b.n	80031dc <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80031da:	2300      	movs	r3, #0
}
 80031dc:	4618      	mov	r0, r3
 80031de:	370c      	adds	r7, #12
 80031e0:	46bd      	mov	sp, r7
 80031e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e6:	4770      	bx	lr

080031e8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80031e8:	b480      	push	{r7}
 80031ea:	b083      	sub	sp, #12
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	689b      	ldr	r3, [r3, #8]
 80031f4:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80031f8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80031fc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003204:	bf00      	nop
 8003206:	370c      	adds	r7, #12
 8003208:	46bd      	mov	sp, r7
 800320a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320e:	4770      	bx	lr

08003210 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003210:	b480      	push	{r7}
 8003212:	b083      	sub	sp, #12
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	689b      	ldr	r3, [r3, #8]
 800321c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003220:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003224:	d101      	bne.n	800322a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003226:	2301      	movs	r3, #1
 8003228:	e000      	b.n	800322c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800322a:	2300      	movs	r3, #0
}
 800322c:	4618      	mov	r0, r3
 800322e:	370c      	adds	r7, #12
 8003230:	46bd      	mov	sp, r7
 8003232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003236:	4770      	bx	lr

08003238 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003238:	b480      	push	{r7}
 800323a:	b083      	sub	sp, #12
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	689b      	ldr	r3, [r3, #8]
 8003244:	f003 0301 	and.w	r3, r3, #1
 8003248:	2b01      	cmp	r3, #1
 800324a:	d101      	bne.n	8003250 <LL_ADC_IsEnabled+0x18>
 800324c:	2301      	movs	r3, #1
 800324e:	e000      	b.n	8003252 <LL_ADC_IsEnabled+0x1a>
 8003250:	2300      	movs	r3, #0
}
 8003252:	4618      	mov	r0, r3
 8003254:	370c      	adds	r7, #12
 8003256:	46bd      	mov	sp, r7
 8003258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325c:	4770      	bx	lr

0800325e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800325e:	b480      	push	{r7}
 8003260:	b083      	sub	sp, #12
 8003262:	af00      	add	r7, sp, #0
 8003264:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	689b      	ldr	r3, [r3, #8]
 800326a:	f003 0304 	and.w	r3, r3, #4
 800326e:	2b04      	cmp	r3, #4
 8003270:	d101      	bne.n	8003276 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003272:	2301      	movs	r3, #1
 8003274:	e000      	b.n	8003278 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003276:	2300      	movs	r3, #0
}
 8003278:	4618      	mov	r0, r3
 800327a:	370c      	adds	r7, #12
 800327c:	46bd      	mov	sp, r7
 800327e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003282:	4770      	bx	lr

08003284 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003284:	b480      	push	{r7}
 8003286:	b083      	sub	sp, #12
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	689b      	ldr	r3, [r3, #8]
 8003290:	f003 0308 	and.w	r3, r3, #8
 8003294:	2b08      	cmp	r3, #8
 8003296:	d101      	bne.n	800329c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003298:	2301      	movs	r3, #1
 800329a:	e000      	b.n	800329e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800329c:	2300      	movs	r3, #0
}
 800329e:	4618      	mov	r0, r3
 80032a0:	370c      	adds	r7, #12
 80032a2:	46bd      	mov	sp, r7
 80032a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a8:	4770      	bx	lr
	...

080032ac <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80032ac:	b590      	push	{r4, r7, lr}
 80032ae:	b089      	sub	sp, #36	; 0x24
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80032b4:	2300      	movs	r3, #0
 80032b6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80032b8:	2300      	movs	r3, #0
 80032ba:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d101      	bne.n	80032c6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80032c2:	2301      	movs	r3, #1
 80032c4:	e1af      	b.n	8003626 <HAL_ADC_Init+0x37a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	695b      	ldr	r3, [r3, #20]
 80032ca:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d109      	bne.n	80032e8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80032d4:	6878      	ldr	r0, [r7, #4]
 80032d6:	f7fd ffc9 	bl	800126c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2200      	movs	r2, #0
 80032de:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2200      	movs	r2, #0
 80032e4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	4618      	mov	r0, r3
 80032ee:	f7ff ff67 	bl	80031c0 <LL_ADC_IsDeepPowerDownEnabled>
 80032f2:	4603      	mov	r3, r0
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d004      	beq.n	8003302 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4618      	mov	r0, r3
 80032fe:	f7ff ff4d 	bl	800319c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	4618      	mov	r0, r3
 8003308:	f7ff ff82 	bl	8003210 <LL_ADC_IsInternalRegulatorEnabled>
 800330c:	4603      	mov	r3, r0
 800330e:	2b00      	cmp	r3, #0
 8003310:	d115      	bne.n	800333e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	4618      	mov	r0, r3
 8003318:	f7ff ff66 	bl	80031e8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800331c:	4b9f      	ldr	r3, [pc, #636]	; (800359c <HAL_ADC_Init+0x2f0>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	099b      	lsrs	r3, r3, #6
 8003322:	4a9f      	ldr	r2, [pc, #636]	; (80035a0 <HAL_ADC_Init+0x2f4>)
 8003324:	fba2 2303 	umull	r2, r3, r2, r3
 8003328:	099b      	lsrs	r3, r3, #6
 800332a:	3301      	adds	r3, #1
 800332c:	005b      	lsls	r3, r3, #1
 800332e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003330:	e002      	b.n	8003338 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8003332:	68bb      	ldr	r3, [r7, #8]
 8003334:	3b01      	subs	r3, #1
 8003336:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003338:	68bb      	ldr	r3, [r7, #8]
 800333a:	2b00      	cmp	r3, #0
 800333c:	d1f9      	bne.n	8003332 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4618      	mov	r0, r3
 8003344:	f7ff ff64 	bl	8003210 <LL_ADC_IsInternalRegulatorEnabled>
 8003348:	4603      	mov	r3, r0
 800334a:	2b00      	cmp	r3, #0
 800334c:	d10d      	bne.n	800336a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003352:	f043 0210 	orr.w	r2, r3, #16
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800335e:	f043 0201 	orr.w	r2, r3, #1
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8003366:	2301      	movs	r3, #1
 8003368:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4618      	mov	r0, r3
 8003370:	f7ff ff75 	bl	800325e <LL_ADC_REG_IsConversionOngoing>
 8003374:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800337a:	f003 0310 	and.w	r3, r3, #16
 800337e:	2b00      	cmp	r3, #0
 8003380:	f040 8148 	bne.w	8003614 <HAL_ADC_Init+0x368>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003384:	697b      	ldr	r3, [r7, #20]
 8003386:	2b00      	cmp	r3, #0
 8003388:	f040 8144 	bne.w	8003614 <HAL_ADC_Init+0x368>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003390:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003394:	f043 0202 	orr.w	r2, r3, #2
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4618      	mov	r0, r3
 80033a2:	f7ff ff49 	bl	8003238 <LL_ADC_IsEnabled>
 80033a6:	4603      	mov	r3, r0
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d141      	bne.n	8003430 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80033b4:	d004      	beq.n	80033c0 <HAL_ADC_Init+0x114>
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	4a7a      	ldr	r2, [pc, #488]	; (80035a4 <HAL_ADC_Init+0x2f8>)
 80033bc:	4293      	cmp	r3, r2
 80033be:	d10f      	bne.n	80033e0 <HAL_ADC_Init+0x134>
 80033c0:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80033c4:	f7ff ff38 	bl	8003238 <LL_ADC_IsEnabled>
 80033c8:	4604      	mov	r4, r0
 80033ca:	4876      	ldr	r0, [pc, #472]	; (80035a4 <HAL_ADC_Init+0x2f8>)
 80033cc:	f7ff ff34 	bl	8003238 <LL_ADC_IsEnabled>
 80033d0:	4603      	mov	r3, r0
 80033d2:	4323      	orrs	r3, r4
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	bf0c      	ite	eq
 80033d8:	2301      	moveq	r3, #1
 80033da:	2300      	movne	r3, #0
 80033dc:	b2db      	uxtb	r3, r3
 80033de:	e012      	b.n	8003406 <HAL_ADC_Init+0x15a>
 80033e0:	4871      	ldr	r0, [pc, #452]	; (80035a8 <HAL_ADC_Init+0x2fc>)
 80033e2:	f7ff ff29 	bl	8003238 <LL_ADC_IsEnabled>
 80033e6:	4604      	mov	r4, r0
 80033e8:	4870      	ldr	r0, [pc, #448]	; (80035ac <HAL_ADC_Init+0x300>)
 80033ea:	f7ff ff25 	bl	8003238 <LL_ADC_IsEnabled>
 80033ee:	4603      	mov	r3, r0
 80033f0:	431c      	orrs	r4, r3
 80033f2:	486f      	ldr	r0, [pc, #444]	; (80035b0 <HAL_ADC_Init+0x304>)
 80033f4:	f7ff ff20 	bl	8003238 <LL_ADC_IsEnabled>
 80033f8:	4603      	mov	r3, r0
 80033fa:	4323      	orrs	r3, r4
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	bf0c      	ite	eq
 8003400:	2301      	moveq	r3, #1
 8003402:	2300      	movne	r3, #0
 8003404:	b2db      	uxtb	r3, r3
 8003406:	2b00      	cmp	r3, #0
 8003408:	d012      	beq.n	8003430 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003412:	d004      	beq.n	800341e <HAL_ADC_Init+0x172>
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4a62      	ldr	r2, [pc, #392]	; (80035a4 <HAL_ADC_Init+0x2f8>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d101      	bne.n	8003422 <HAL_ADC_Init+0x176>
 800341e:	4a65      	ldr	r2, [pc, #404]	; (80035b4 <HAL_ADC_Init+0x308>)
 8003420:	e000      	b.n	8003424 <HAL_ADC_Init+0x178>
 8003422:	4a65      	ldr	r2, [pc, #404]	; (80035b8 <HAL_ADC_Init+0x30c>)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	685b      	ldr	r3, [r3, #4]
 8003428:	4619      	mov	r1, r3
 800342a:	4610      	mov	r0, r2
 800342c:	f7ff fd64 	bl	8002ef8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	7f5b      	ldrb	r3, [r3, #29]
 8003434:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800343a:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8003440:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8003446:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800344e:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003450:	4313      	orrs	r3, r2
 8003452:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800345a:	2b01      	cmp	r3, #1
 800345c:	d106      	bne.n	800346c <HAL_ADC_Init+0x1c0>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003462:	3b01      	subs	r3, #1
 8003464:	045b      	lsls	r3, r3, #17
 8003466:	69ba      	ldr	r2, [r7, #24]
 8003468:	4313      	orrs	r3, r2
 800346a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003470:	2b00      	cmp	r3, #0
 8003472:	d009      	beq.n	8003488 <HAL_ADC_Init+0x1dc>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003478:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003480:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003482:	69ba      	ldr	r2, [r7, #24]
 8003484:	4313      	orrs	r3, r2
 8003486:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	68da      	ldr	r2, [r3, #12]
 800348e:	4b4b      	ldr	r3, [pc, #300]	; (80035bc <HAL_ADC_Init+0x310>)
 8003490:	4013      	ands	r3, r2
 8003492:	687a      	ldr	r2, [r7, #4]
 8003494:	6812      	ldr	r2, [r2, #0]
 8003496:	69b9      	ldr	r1, [r7, #24]
 8003498:	430b      	orrs	r3, r1
 800349a:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	691b      	ldr	r3, [r3, #16]
 80034a2:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	430a      	orrs	r2, r1
 80034b0:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4618      	mov	r0, r3
 80034b8:	f7ff fed1 	bl	800325e <LL_ADC_REG_IsConversionOngoing>
 80034bc:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	4618      	mov	r0, r3
 80034c4:	f7ff fede 	bl	8003284 <LL_ADC_INJ_IsConversionOngoing>
 80034c8:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80034ca:	693b      	ldr	r3, [r7, #16]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d17f      	bne.n	80035d0 <HAL_ADC_Init+0x324>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d17c      	bne.n	80035d0 <HAL_ADC_Init+0x324>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80034da:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80034e2:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80034e4:	4313      	orrs	r3, r2
 80034e6:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	68db      	ldr	r3, [r3, #12]
 80034ee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80034f2:	f023 0302 	bic.w	r3, r3, #2
 80034f6:	687a      	ldr	r2, [r7, #4]
 80034f8:	6812      	ldr	r2, [r2, #0]
 80034fa:	69b9      	ldr	r1, [r7, #24]
 80034fc:	430b      	orrs	r3, r1
 80034fe:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	691b      	ldr	r3, [r3, #16]
 8003504:	2b00      	cmp	r3, #0
 8003506:	d017      	beq.n	8003538 <HAL_ADC_Init+0x28c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	691a      	ldr	r2, [r3, #16]
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003516:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003520:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003524:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003528:	687a      	ldr	r2, [r7, #4]
 800352a:	6911      	ldr	r1, [r2, #16]
 800352c:	687a      	ldr	r2, [r7, #4]
 800352e:	6812      	ldr	r2, [r2, #0]
 8003530:	430b      	orrs	r3, r1
 8003532:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8003536:	e013      	b.n	8003560 <HAL_ADC_Init+0x2b4>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	691a      	ldr	r2, [r3, #16]
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003546:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003550:	687a      	ldr	r2, [r7, #4]
 8003552:	6812      	ldr	r2, [r2, #0]
 8003554:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003558:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800355c:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003566:	2b01      	cmp	r3, #1
 8003568:	d12a      	bne.n	80035c0 <HAL_ADC_Init+0x314>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	691b      	ldr	r3, [r3, #16]
 8003570:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8003574:	f023 0304 	bic.w	r3, r3, #4
 8003578:	687a      	ldr	r2, [r7, #4]
 800357a:	6c51      	ldr	r1, [r2, #68]	; 0x44
 800357c:	687a      	ldr	r2, [r7, #4]
 800357e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003580:	4311      	orrs	r1, r2
 8003582:	687a      	ldr	r2, [r7, #4]
 8003584:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8003586:	4311      	orrs	r1, r2
 8003588:	687a      	ldr	r2, [r7, #4]
 800358a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800358c:	430a      	orrs	r2, r1
 800358e:	431a      	orrs	r2, r3
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f042 0201 	orr.w	r2, r2, #1
 8003598:	611a      	str	r2, [r3, #16]
 800359a:	e019      	b.n	80035d0 <HAL_ADC_Init+0x324>
 800359c:	20000000 	.word	0x20000000
 80035a0:	053e2d63 	.word	0x053e2d63
 80035a4:	50000100 	.word	0x50000100
 80035a8:	50000400 	.word	0x50000400
 80035ac:	50000500 	.word	0x50000500
 80035b0:	50000600 	.word	0x50000600
 80035b4:	50000300 	.word	0x50000300
 80035b8:	50000700 	.word	0x50000700
 80035bc:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	691a      	ldr	r2, [r3, #16]
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f022 0201 	bic.w	r2, r2, #1
 80035ce:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	695b      	ldr	r3, [r3, #20]
 80035d4:	2b01      	cmp	r3, #1
 80035d6:	d10c      	bne.n	80035f2 <HAL_ADC_Init+0x346>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035de:	f023 010f 	bic.w	r1, r3, #15
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6a1b      	ldr	r3, [r3, #32]
 80035e6:	1e5a      	subs	r2, r3, #1
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	430a      	orrs	r2, r1
 80035ee:	631a      	str	r2, [r3, #48]	; 0x30
 80035f0:	e007      	b.n	8003602 <HAL_ADC_Init+0x356>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f022 020f 	bic.w	r2, r2, #15
 8003600:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003606:	f023 0303 	bic.w	r3, r3, #3
 800360a:	f043 0201 	orr.w	r2, r3, #1
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	65da      	str	r2, [r3, #92]	; 0x5c
 8003612:	e007      	b.n	8003624 <HAL_ADC_Init+0x378>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003618:	f043 0210 	orr.w	r2, r3, #16
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003620:	2301      	movs	r3, #1
 8003622:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003624:	7ffb      	ldrb	r3, [r7, #31]
}
 8003626:	4618      	mov	r0, r3
 8003628:	3724      	adds	r7, #36	; 0x24
 800362a:	46bd      	mov	sp, r7
 800362c:	bd90      	pop	{r4, r7, pc}
 800362e:	bf00      	nop

08003630 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b0b6      	sub	sp, #216	; 0xd8
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
 8003638:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800363a:	2300      	movs	r3, #0
 800363c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003640:	2300      	movs	r3, #0
 8003642:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800364a:	2b01      	cmp	r3, #1
 800364c:	d102      	bne.n	8003654 <HAL_ADC_ConfigChannel+0x24>
 800364e:	2302      	movs	r3, #2
 8003650:	f000 bc13 	b.w	8003e7a <HAL_ADC_ConfigChannel+0x84a>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2201      	movs	r2, #1
 8003658:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	4618      	mov	r0, r3
 8003662:	f7ff fdfc 	bl	800325e <LL_ADC_REG_IsConversionOngoing>
 8003666:	4603      	mov	r3, r0
 8003668:	2b00      	cmp	r3, #0
 800366a:	f040 83f3 	bne.w	8003e54 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6818      	ldr	r0, [r3, #0]
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	6859      	ldr	r1, [r3, #4]
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	461a      	mov	r2, r3
 800367c:	f7ff fd0e 	bl	800309c <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4618      	mov	r0, r3
 8003686:	f7ff fdea 	bl	800325e <LL_ADC_REG_IsConversionOngoing>
 800368a:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4618      	mov	r0, r3
 8003694:	f7ff fdf6 	bl	8003284 <LL_ADC_INJ_IsConversionOngoing>
 8003698:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800369c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	f040 81d9 	bne.w	8003a58 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80036a6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	f040 81d4 	bne.w	8003a58 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	689b      	ldr	r3, [r3, #8]
 80036b4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80036b8:	d10f      	bne.n	80036da <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6818      	ldr	r0, [r3, #0]
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	2200      	movs	r2, #0
 80036c4:	4619      	mov	r1, r3
 80036c6:	f7ff fd15 	bl	80030f4 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80036d2:	4618      	mov	r0, r3
 80036d4:	f7ff fccf 	bl	8003076 <LL_ADC_SetSamplingTimeCommonConfig>
 80036d8:	e00e      	b.n	80036f8 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6818      	ldr	r0, [r3, #0]
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	6819      	ldr	r1, [r3, #0]
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	689b      	ldr	r3, [r3, #8]
 80036e6:	461a      	mov	r2, r3
 80036e8:	f7ff fd04 	bl	80030f4 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	2100      	movs	r1, #0
 80036f2:	4618      	mov	r0, r3
 80036f4:	f7ff fcbf 	bl	8003076 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	695a      	ldr	r2, [r3, #20]
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	68db      	ldr	r3, [r3, #12]
 8003702:	08db      	lsrs	r3, r3, #3
 8003704:	f003 0303 	and.w	r3, r3, #3
 8003708:	005b      	lsls	r3, r3, #1
 800370a:	fa02 f303 	lsl.w	r3, r2, r3
 800370e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	691b      	ldr	r3, [r3, #16]
 8003716:	2b04      	cmp	r3, #4
 8003718:	d022      	beq.n	8003760 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6818      	ldr	r0, [r3, #0]
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	6919      	ldr	r1, [r3, #16]
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	681a      	ldr	r2, [r3, #0]
 8003726:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800372a:	f7ff fc19 	bl	8002f60 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6818      	ldr	r0, [r3, #0]
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	6919      	ldr	r1, [r3, #16]
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	699b      	ldr	r3, [r3, #24]
 800373a:	461a      	mov	r2, r3
 800373c:	f7ff fc65 	bl	800300a <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6818      	ldr	r0, [r3, #0]
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	6919      	ldr	r1, [r3, #16]
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	7f1b      	ldrb	r3, [r3, #28]
 800374c:	2b01      	cmp	r3, #1
 800374e:	d102      	bne.n	8003756 <HAL_ADC_ConfigChannel+0x126>
 8003750:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003754:	e000      	b.n	8003758 <HAL_ADC_ConfigChannel+0x128>
 8003756:	2300      	movs	r3, #0
 8003758:	461a      	mov	r2, r3
 800375a:	f7ff fc71 	bl	8003040 <LL_ADC_SetOffsetSaturation>
 800375e:	e17b      	b.n	8003a58 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	2100      	movs	r1, #0
 8003766:	4618      	mov	r0, r3
 8003768:	f7ff fc1e 	bl	8002fa8 <LL_ADC_GetOffsetChannel>
 800376c:	4603      	mov	r3, r0
 800376e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003772:	2b00      	cmp	r3, #0
 8003774:	d10a      	bne.n	800378c <HAL_ADC_ConfigChannel+0x15c>
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	2100      	movs	r1, #0
 800377c:	4618      	mov	r0, r3
 800377e:	f7ff fc13 	bl	8002fa8 <LL_ADC_GetOffsetChannel>
 8003782:	4603      	mov	r3, r0
 8003784:	0e9b      	lsrs	r3, r3, #26
 8003786:	f003 021f 	and.w	r2, r3, #31
 800378a:	e01e      	b.n	80037ca <HAL_ADC_ConfigChannel+0x19a>
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	2100      	movs	r1, #0
 8003792:	4618      	mov	r0, r3
 8003794:	f7ff fc08 	bl	8002fa8 <LL_ADC_GetOffsetChannel>
 8003798:	4603      	mov	r3, r0
 800379a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800379e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80037a2:	fa93 f3a3 	rbit	r3, r3
 80037a6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80037aa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80037ae:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80037b2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d101      	bne.n	80037be <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 80037ba:	2320      	movs	r3, #32
 80037bc:	e004      	b.n	80037c8 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 80037be:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80037c2:	fab3 f383 	clz	r3, r3
 80037c6:	b2db      	uxtb	r3, r3
 80037c8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d105      	bne.n	80037e2 <HAL_ADC_ConfigChannel+0x1b2>
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	0e9b      	lsrs	r3, r3, #26
 80037dc:	f003 031f 	and.w	r3, r3, #31
 80037e0:	e018      	b.n	8003814 <HAL_ADC_ConfigChannel+0x1e4>
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037ea:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80037ee:	fa93 f3a3 	rbit	r3, r3
 80037f2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80037f6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80037fa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80037fe:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003802:	2b00      	cmp	r3, #0
 8003804:	d101      	bne.n	800380a <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8003806:	2320      	movs	r3, #32
 8003808:	e004      	b.n	8003814 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 800380a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800380e:	fab3 f383 	clz	r3, r3
 8003812:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003814:	429a      	cmp	r2, r3
 8003816:	d106      	bne.n	8003826 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	2200      	movs	r2, #0
 800381e:	2100      	movs	r1, #0
 8003820:	4618      	mov	r0, r3
 8003822:	f7ff fbd7 	bl	8002fd4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	2101      	movs	r1, #1
 800382c:	4618      	mov	r0, r3
 800382e:	f7ff fbbb 	bl	8002fa8 <LL_ADC_GetOffsetChannel>
 8003832:	4603      	mov	r3, r0
 8003834:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003838:	2b00      	cmp	r3, #0
 800383a:	d10a      	bne.n	8003852 <HAL_ADC_ConfigChannel+0x222>
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	2101      	movs	r1, #1
 8003842:	4618      	mov	r0, r3
 8003844:	f7ff fbb0 	bl	8002fa8 <LL_ADC_GetOffsetChannel>
 8003848:	4603      	mov	r3, r0
 800384a:	0e9b      	lsrs	r3, r3, #26
 800384c:	f003 021f 	and.w	r2, r3, #31
 8003850:	e01e      	b.n	8003890 <HAL_ADC_ConfigChannel+0x260>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	2101      	movs	r1, #1
 8003858:	4618      	mov	r0, r3
 800385a:	f7ff fba5 	bl	8002fa8 <LL_ADC_GetOffsetChannel>
 800385e:	4603      	mov	r3, r0
 8003860:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003864:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003868:	fa93 f3a3 	rbit	r3, r3
 800386c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8003870:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003874:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8003878:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800387c:	2b00      	cmp	r3, #0
 800387e:	d101      	bne.n	8003884 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8003880:	2320      	movs	r3, #32
 8003882:	e004      	b.n	800388e <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8003884:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003888:	fab3 f383 	clz	r3, r3
 800388c:	b2db      	uxtb	r3, r3
 800388e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003898:	2b00      	cmp	r3, #0
 800389a:	d105      	bne.n	80038a8 <HAL_ADC_ConfigChannel+0x278>
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	0e9b      	lsrs	r3, r3, #26
 80038a2:	f003 031f 	and.w	r3, r3, #31
 80038a6:	e018      	b.n	80038da <HAL_ADC_ConfigChannel+0x2aa>
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038b0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80038b4:	fa93 f3a3 	rbit	r3, r3
 80038b8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80038bc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80038c0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80038c4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d101      	bne.n	80038d0 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 80038cc:	2320      	movs	r3, #32
 80038ce:	e004      	b.n	80038da <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 80038d0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80038d4:	fab3 f383 	clz	r3, r3
 80038d8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80038da:	429a      	cmp	r2, r3
 80038dc:	d106      	bne.n	80038ec <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	2200      	movs	r2, #0
 80038e4:	2101      	movs	r1, #1
 80038e6:	4618      	mov	r0, r3
 80038e8:	f7ff fb74 	bl	8002fd4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	2102      	movs	r1, #2
 80038f2:	4618      	mov	r0, r3
 80038f4:	f7ff fb58 	bl	8002fa8 <LL_ADC_GetOffsetChannel>
 80038f8:	4603      	mov	r3, r0
 80038fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d10a      	bne.n	8003918 <HAL_ADC_ConfigChannel+0x2e8>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	2102      	movs	r1, #2
 8003908:	4618      	mov	r0, r3
 800390a:	f7ff fb4d 	bl	8002fa8 <LL_ADC_GetOffsetChannel>
 800390e:	4603      	mov	r3, r0
 8003910:	0e9b      	lsrs	r3, r3, #26
 8003912:	f003 021f 	and.w	r2, r3, #31
 8003916:	e01e      	b.n	8003956 <HAL_ADC_ConfigChannel+0x326>
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	2102      	movs	r1, #2
 800391e:	4618      	mov	r0, r3
 8003920:	f7ff fb42 	bl	8002fa8 <LL_ADC_GetOffsetChannel>
 8003924:	4603      	mov	r3, r0
 8003926:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800392a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800392e:	fa93 f3a3 	rbit	r3, r3
 8003932:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8003936:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800393a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 800393e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003942:	2b00      	cmp	r3, #0
 8003944:	d101      	bne.n	800394a <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8003946:	2320      	movs	r3, #32
 8003948:	e004      	b.n	8003954 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 800394a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800394e:	fab3 f383 	clz	r3, r3
 8003952:	b2db      	uxtb	r3, r3
 8003954:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800395e:	2b00      	cmp	r3, #0
 8003960:	d105      	bne.n	800396e <HAL_ADC_ConfigChannel+0x33e>
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	0e9b      	lsrs	r3, r3, #26
 8003968:	f003 031f 	and.w	r3, r3, #31
 800396c:	e016      	b.n	800399c <HAL_ADC_ConfigChannel+0x36c>
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003976:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800397a:	fa93 f3a3 	rbit	r3, r3
 800397e:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8003980:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003982:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8003986:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800398a:	2b00      	cmp	r3, #0
 800398c:	d101      	bne.n	8003992 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 800398e:	2320      	movs	r3, #32
 8003990:	e004      	b.n	800399c <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8003992:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003996:	fab3 f383 	clz	r3, r3
 800399a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800399c:	429a      	cmp	r2, r3
 800399e:	d106      	bne.n	80039ae <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	2200      	movs	r2, #0
 80039a6:	2102      	movs	r1, #2
 80039a8:	4618      	mov	r0, r3
 80039aa:	f7ff fb13 	bl	8002fd4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	2103      	movs	r1, #3
 80039b4:	4618      	mov	r0, r3
 80039b6:	f7ff faf7 	bl	8002fa8 <LL_ADC_GetOffsetChannel>
 80039ba:	4603      	mov	r3, r0
 80039bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d10a      	bne.n	80039da <HAL_ADC_ConfigChannel+0x3aa>
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	2103      	movs	r1, #3
 80039ca:	4618      	mov	r0, r3
 80039cc:	f7ff faec 	bl	8002fa8 <LL_ADC_GetOffsetChannel>
 80039d0:	4603      	mov	r3, r0
 80039d2:	0e9b      	lsrs	r3, r3, #26
 80039d4:	f003 021f 	and.w	r2, r3, #31
 80039d8:	e017      	b.n	8003a0a <HAL_ADC_ConfigChannel+0x3da>
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	2103      	movs	r1, #3
 80039e0:	4618      	mov	r0, r3
 80039e2:	f7ff fae1 	bl	8002fa8 <LL_ADC_GetOffsetChannel>
 80039e6:	4603      	mov	r3, r0
 80039e8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039ea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80039ec:	fa93 f3a3 	rbit	r3, r3
 80039f0:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80039f2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80039f4:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80039f6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d101      	bne.n	8003a00 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 80039fc:	2320      	movs	r3, #32
 80039fe:	e003      	b.n	8003a08 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8003a00:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003a02:	fab3 f383 	clz	r3, r3
 8003a06:	b2db      	uxtb	r3, r3
 8003a08:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d105      	bne.n	8003a22 <HAL_ADC_ConfigChannel+0x3f2>
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	0e9b      	lsrs	r3, r3, #26
 8003a1c:	f003 031f 	and.w	r3, r3, #31
 8003a20:	e011      	b.n	8003a46 <HAL_ADC_ConfigChannel+0x416>
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a28:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003a2a:	fa93 f3a3 	rbit	r3, r3
 8003a2e:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8003a30:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003a32:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8003a34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d101      	bne.n	8003a3e <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8003a3a:	2320      	movs	r3, #32
 8003a3c:	e003      	b.n	8003a46 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8003a3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a40:	fab3 f383 	clz	r3, r3
 8003a44:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003a46:	429a      	cmp	r2, r3
 8003a48:	d106      	bne.n	8003a58 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	2200      	movs	r2, #0
 8003a50:	2103      	movs	r1, #3
 8003a52:	4618      	mov	r0, r3
 8003a54:	f7ff fabe 	bl	8002fd4 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	f7ff fbeb 	bl	8003238 <LL_ADC_IsEnabled>
 8003a62:	4603      	mov	r3, r0
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	f040 813d 	bne.w	8003ce4 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6818      	ldr	r0, [r3, #0]
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	6819      	ldr	r1, [r3, #0]
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	68db      	ldr	r3, [r3, #12]
 8003a76:	461a      	mov	r2, r3
 8003a78:	f7ff fb68 	bl	800314c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	68db      	ldr	r3, [r3, #12]
 8003a80:	4aa2      	ldr	r2, [pc, #648]	; (8003d0c <HAL_ADC_ConfigChannel+0x6dc>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	f040 812e 	bne.w	8003ce4 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d10b      	bne.n	8003ab0 <HAL_ADC_ConfigChannel+0x480>
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	0e9b      	lsrs	r3, r3, #26
 8003a9e:	3301      	adds	r3, #1
 8003aa0:	f003 031f 	and.w	r3, r3, #31
 8003aa4:	2b09      	cmp	r3, #9
 8003aa6:	bf94      	ite	ls
 8003aa8:	2301      	movls	r3, #1
 8003aaa:	2300      	movhi	r3, #0
 8003aac:	b2db      	uxtb	r3, r3
 8003aae:	e019      	b.n	8003ae4 <HAL_ADC_ConfigChannel+0x4b4>
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ab6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003ab8:	fa93 f3a3 	rbit	r3, r3
 8003abc:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8003abe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003ac0:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8003ac2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d101      	bne.n	8003acc <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8003ac8:	2320      	movs	r3, #32
 8003aca:	e003      	b.n	8003ad4 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8003acc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003ace:	fab3 f383 	clz	r3, r3
 8003ad2:	b2db      	uxtb	r3, r3
 8003ad4:	3301      	adds	r3, #1
 8003ad6:	f003 031f 	and.w	r3, r3, #31
 8003ada:	2b09      	cmp	r3, #9
 8003adc:	bf94      	ite	ls
 8003ade:	2301      	movls	r3, #1
 8003ae0:	2300      	movhi	r3, #0
 8003ae2:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d079      	beq.n	8003bdc <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d107      	bne.n	8003b04 <HAL_ADC_ConfigChannel+0x4d4>
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	0e9b      	lsrs	r3, r3, #26
 8003afa:	3301      	adds	r3, #1
 8003afc:	069b      	lsls	r3, r3, #26
 8003afe:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003b02:	e015      	b.n	8003b30 <HAL_ADC_ConfigChannel+0x500>
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b0a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b0c:	fa93 f3a3 	rbit	r3, r3
 8003b10:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003b12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b14:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8003b16:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d101      	bne.n	8003b20 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8003b1c:	2320      	movs	r3, #32
 8003b1e:	e003      	b.n	8003b28 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8003b20:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b22:	fab3 f383 	clz	r3, r3
 8003b26:	b2db      	uxtb	r3, r3
 8003b28:	3301      	adds	r3, #1
 8003b2a:	069b      	lsls	r3, r3, #26
 8003b2c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d109      	bne.n	8003b50 <HAL_ADC_ConfigChannel+0x520>
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	0e9b      	lsrs	r3, r3, #26
 8003b42:	3301      	adds	r3, #1
 8003b44:	f003 031f 	and.w	r3, r3, #31
 8003b48:	2101      	movs	r1, #1
 8003b4a:	fa01 f303 	lsl.w	r3, r1, r3
 8003b4e:	e017      	b.n	8003b80 <HAL_ADC_ConfigChannel+0x550>
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b56:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b58:	fa93 f3a3 	rbit	r3, r3
 8003b5c:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8003b5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b60:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8003b62:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d101      	bne.n	8003b6c <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8003b68:	2320      	movs	r3, #32
 8003b6a:	e003      	b.n	8003b74 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8003b6c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b6e:	fab3 f383 	clz	r3, r3
 8003b72:	b2db      	uxtb	r3, r3
 8003b74:	3301      	adds	r3, #1
 8003b76:	f003 031f 	and.w	r3, r3, #31
 8003b7a:	2101      	movs	r1, #1
 8003b7c:	fa01 f303 	lsl.w	r3, r1, r3
 8003b80:	ea42 0103 	orr.w	r1, r2, r3
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d10a      	bne.n	8003ba6 <HAL_ADC_ConfigChannel+0x576>
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	0e9b      	lsrs	r3, r3, #26
 8003b96:	3301      	adds	r3, #1
 8003b98:	f003 021f 	and.w	r2, r3, #31
 8003b9c:	4613      	mov	r3, r2
 8003b9e:	005b      	lsls	r3, r3, #1
 8003ba0:	4413      	add	r3, r2
 8003ba2:	051b      	lsls	r3, r3, #20
 8003ba4:	e018      	b.n	8003bd8 <HAL_ADC_ConfigChannel+0x5a8>
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bae:	fa93 f3a3 	rbit	r3, r3
 8003bb2:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003bb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bb6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8003bb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d101      	bne.n	8003bc2 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8003bbe:	2320      	movs	r3, #32
 8003bc0:	e003      	b.n	8003bca <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8003bc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003bc4:	fab3 f383 	clz	r3, r3
 8003bc8:	b2db      	uxtb	r3, r3
 8003bca:	3301      	adds	r3, #1
 8003bcc:	f003 021f 	and.w	r2, r3, #31
 8003bd0:	4613      	mov	r3, r2
 8003bd2:	005b      	lsls	r3, r3, #1
 8003bd4:	4413      	add	r3, r2
 8003bd6:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003bd8:	430b      	orrs	r3, r1
 8003bda:	e07e      	b.n	8003cda <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d107      	bne.n	8003bf8 <HAL_ADC_ConfigChannel+0x5c8>
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	0e9b      	lsrs	r3, r3, #26
 8003bee:	3301      	adds	r3, #1
 8003bf0:	069b      	lsls	r3, r3, #26
 8003bf2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003bf6:	e015      	b.n	8003c24 <HAL_ADC_ConfigChannel+0x5f4>
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c00:	fa93 f3a3 	rbit	r3, r3
 8003c04:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8003c06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c08:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8003c0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d101      	bne.n	8003c14 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8003c10:	2320      	movs	r3, #32
 8003c12:	e003      	b.n	8003c1c <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8003c14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c16:	fab3 f383 	clz	r3, r3
 8003c1a:	b2db      	uxtb	r3, r3
 8003c1c:	3301      	adds	r3, #1
 8003c1e:	069b      	lsls	r3, r3, #26
 8003c20:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d109      	bne.n	8003c44 <HAL_ADC_ConfigChannel+0x614>
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	0e9b      	lsrs	r3, r3, #26
 8003c36:	3301      	adds	r3, #1
 8003c38:	f003 031f 	and.w	r3, r3, #31
 8003c3c:	2101      	movs	r1, #1
 8003c3e:	fa01 f303 	lsl.w	r3, r1, r3
 8003c42:	e017      	b.n	8003c74 <HAL_ADC_ConfigChannel+0x644>
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c4a:	6a3b      	ldr	r3, [r7, #32]
 8003c4c:	fa93 f3a3 	rbit	r3, r3
 8003c50:	61fb      	str	r3, [r7, #28]
  return result;
 8003c52:	69fb      	ldr	r3, [r7, #28]
 8003c54:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8003c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d101      	bne.n	8003c60 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8003c5c:	2320      	movs	r3, #32
 8003c5e:	e003      	b.n	8003c68 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8003c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c62:	fab3 f383 	clz	r3, r3
 8003c66:	b2db      	uxtb	r3, r3
 8003c68:	3301      	adds	r3, #1
 8003c6a:	f003 031f 	and.w	r3, r3, #31
 8003c6e:	2101      	movs	r1, #1
 8003c70:	fa01 f303 	lsl.w	r3, r1, r3
 8003c74:	ea42 0103 	orr.w	r1, r2, r3
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d10d      	bne.n	8003ca0 <HAL_ADC_ConfigChannel+0x670>
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	0e9b      	lsrs	r3, r3, #26
 8003c8a:	3301      	adds	r3, #1
 8003c8c:	f003 021f 	and.w	r2, r3, #31
 8003c90:	4613      	mov	r3, r2
 8003c92:	005b      	lsls	r3, r3, #1
 8003c94:	4413      	add	r3, r2
 8003c96:	3b1e      	subs	r3, #30
 8003c98:	051b      	lsls	r3, r3, #20
 8003c9a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003c9e:	e01b      	b.n	8003cd8 <HAL_ADC_ConfigChannel+0x6a8>
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ca6:	697b      	ldr	r3, [r7, #20]
 8003ca8:	fa93 f3a3 	rbit	r3, r3
 8003cac:	613b      	str	r3, [r7, #16]
  return result;
 8003cae:	693b      	ldr	r3, [r7, #16]
 8003cb0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003cb2:	69bb      	ldr	r3, [r7, #24]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d101      	bne.n	8003cbc <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8003cb8:	2320      	movs	r3, #32
 8003cba:	e003      	b.n	8003cc4 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8003cbc:	69bb      	ldr	r3, [r7, #24]
 8003cbe:	fab3 f383 	clz	r3, r3
 8003cc2:	b2db      	uxtb	r3, r3
 8003cc4:	3301      	adds	r3, #1
 8003cc6:	f003 021f 	and.w	r2, r3, #31
 8003cca:	4613      	mov	r3, r2
 8003ccc:	005b      	lsls	r3, r3, #1
 8003cce:	4413      	add	r3, r2
 8003cd0:	3b1e      	subs	r3, #30
 8003cd2:	051b      	lsls	r3, r3, #20
 8003cd4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003cd8:	430b      	orrs	r3, r1
 8003cda:	683a      	ldr	r2, [r7, #0]
 8003cdc:	6892      	ldr	r2, [r2, #8]
 8003cde:	4619      	mov	r1, r3
 8003ce0:	f7ff fa08 	bl	80030f4 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003ce4:	683b      	ldr	r3, [r7, #0]
 8003ce6:	681a      	ldr	r2, [r3, #0]
 8003ce8:	4b09      	ldr	r3, [pc, #36]	; (8003d10 <HAL_ADC_ConfigChannel+0x6e0>)
 8003cea:	4013      	ands	r3, r2
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	f000 80be 	beq.w	8003e6e <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003cfa:	d004      	beq.n	8003d06 <HAL_ADC_ConfigChannel+0x6d6>
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	4a04      	ldr	r2, [pc, #16]	; (8003d14 <HAL_ADC_ConfigChannel+0x6e4>)
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d10a      	bne.n	8003d1c <HAL_ADC_ConfigChannel+0x6ec>
 8003d06:	4b04      	ldr	r3, [pc, #16]	; (8003d18 <HAL_ADC_ConfigChannel+0x6e8>)
 8003d08:	e009      	b.n	8003d1e <HAL_ADC_ConfigChannel+0x6ee>
 8003d0a:	bf00      	nop
 8003d0c:	407f0000 	.word	0x407f0000
 8003d10:	80080000 	.word	0x80080000
 8003d14:	50000100 	.word	0x50000100
 8003d18:	50000300 	.word	0x50000300
 8003d1c:	4b59      	ldr	r3, [pc, #356]	; (8003e84 <HAL_ADC_ConfigChannel+0x854>)
 8003d1e:	4618      	mov	r0, r3
 8003d20:	f7ff f910 	bl	8002f44 <LL_ADC_GetCommonPathInternalCh>
 8003d24:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	4a56      	ldr	r2, [pc, #344]	; (8003e88 <HAL_ADC_ConfigChannel+0x858>)
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d004      	beq.n	8003d3c <HAL_ADC_ConfigChannel+0x70c>
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	4a55      	ldr	r2, [pc, #340]	; (8003e8c <HAL_ADC_ConfigChannel+0x85c>)
 8003d38:	4293      	cmp	r3, r2
 8003d3a:	d13a      	bne.n	8003db2 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003d3c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003d40:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d134      	bne.n	8003db2 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003d50:	d005      	beq.n	8003d5e <HAL_ADC_ConfigChannel+0x72e>
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	4a4e      	ldr	r2, [pc, #312]	; (8003e90 <HAL_ADC_ConfigChannel+0x860>)
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	f040 8085 	bne.w	8003e68 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003d66:	d004      	beq.n	8003d72 <HAL_ADC_ConfigChannel+0x742>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	4a49      	ldr	r2, [pc, #292]	; (8003e94 <HAL_ADC_ConfigChannel+0x864>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d101      	bne.n	8003d76 <HAL_ADC_ConfigChannel+0x746>
 8003d72:	4a49      	ldr	r2, [pc, #292]	; (8003e98 <HAL_ADC_ConfigChannel+0x868>)
 8003d74:	e000      	b.n	8003d78 <HAL_ADC_ConfigChannel+0x748>
 8003d76:	4a43      	ldr	r2, [pc, #268]	; (8003e84 <HAL_ADC_ConfigChannel+0x854>)
 8003d78:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003d7c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003d80:	4619      	mov	r1, r3
 8003d82:	4610      	mov	r0, r2
 8003d84:	f7ff f8cb 	bl	8002f1e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003d88:	4b44      	ldr	r3, [pc, #272]	; (8003e9c <HAL_ADC_ConfigChannel+0x86c>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	099b      	lsrs	r3, r3, #6
 8003d8e:	4a44      	ldr	r2, [pc, #272]	; (8003ea0 <HAL_ADC_ConfigChannel+0x870>)
 8003d90:	fba2 2303 	umull	r2, r3, r2, r3
 8003d94:	099b      	lsrs	r3, r3, #6
 8003d96:	1c5a      	adds	r2, r3, #1
 8003d98:	4613      	mov	r3, r2
 8003d9a:	005b      	lsls	r3, r3, #1
 8003d9c:	4413      	add	r3, r2
 8003d9e:	009b      	lsls	r3, r3, #2
 8003da0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003da2:	e002      	b.n	8003daa <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	3b01      	subs	r3, #1
 8003da8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d1f9      	bne.n	8003da4 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003db0:	e05a      	b.n	8003e68 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	4a3b      	ldr	r2, [pc, #236]	; (8003ea4 <HAL_ADC_ConfigChannel+0x874>)
 8003db8:	4293      	cmp	r3, r2
 8003dba:	d125      	bne.n	8003e08 <HAL_ADC_ConfigChannel+0x7d8>
 8003dbc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003dc0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d11f      	bne.n	8003e08 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4a31      	ldr	r2, [pc, #196]	; (8003e94 <HAL_ADC_ConfigChannel+0x864>)
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d104      	bne.n	8003ddc <HAL_ADC_ConfigChannel+0x7ac>
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	4a34      	ldr	r2, [pc, #208]	; (8003ea8 <HAL_ADC_ConfigChannel+0x878>)
 8003dd8:	4293      	cmp	r3, r2
 8003dda:	d047      	beq.n	8003e6c <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003de4:	d004      	beq.n	8003df0 <HAL_ADC_ConfigChannel+0x7c0>
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	4a2a      	ldr	r2, [pc, #168]	; (8003e94 <HAL_ADC_ConfigChannel+0x864>)
 8003dec:	4293      	cmp	r3, r2
 8003dee:	d101      	bne.n	8003df4 <HAL_ADC_ConfigChannel+0x7c4>
 8003df0:	4a29      	ldr	r2, [pc, #164]	; (8003e98 <HAL_ADC_ConfigChannel+0x868>)
 8003df2:	e000      	b.n	8003df6 <HAL_ADC_ConfigChannel+0x7c6>
 8003df4:	4a23      	ldr	r2, [pc, #140]	; (8003e84 <HAL_ADC_ConfigChannel+0x854>)
 8003df6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003dfa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003dfe:	4619      	mov	r1, r3
 8003e00:	4610      	mov	r0, r2
 8003e02:	f7ff f88c 	bl	8002f1e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003e06:	e031      	b.n	8003e6c <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003e08:	683b      	ldr	r3, [r7, #0]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	4a27      	ldr	r2, [pc, #156]	; (8003eac <HAL_ADC_ConfigChannel+0x87c>)
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d12d      	bne.n	8003e6e <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003e12:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003e16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d127      	bne.n	8003e6e <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	4a1c      	ldr	r2, [pc, #112]	; (8003e94 <HAL_ADC_ConfigChannel+0x864>)
 8003e24:	4293      	cmp	r3, r2
 8003e26:	d022      	beq.n	8003e6e <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003e30:	d004      	beq.n	8003e3c <HAL_ADC_ConfigChannel+0x80c>
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	4a17      	ldr	r2, [pc, #92]	; (8003e94 <HAL_ADC_ConfigChannel+0x864>)
 8003e38:	4293      	cmp	r3, r2
 8003e3a:	d101      	bne.n	8003e40 <HAL_ADC_ConfigChannel+0x810>
 8003e3c:	4a16      	ldr	r2, [pc, #88]	; (8003e98 <HAL_ADC_ConfigChannel+0x868>)
 8003e3e:	e000      	b.n	8003e42 <HAL_ADC_ConfigChannel+0x812>
 8003e40:	4a10      	ldr	r2, [pc, #64]	; (8003e84 <HAL_ADC_ConfigChannel+0x854>)
 8003e42:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003e46:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003e4a:	4619      	mov	r1, r3
 8003e4c:	4610      	mov	r0, r2
 8003e4e:	f7ff f866 	bl	8002f1e <LL_ADC_SetCommonPathInternalCh>
 8003e52:	e00c      	b.n	8003e6e <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e58:	f043 0220 	orr.w	r2, r3, #32
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003e60:	2301      	movs	r3, #1
 8003e62:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8003e66:	e002      	b.n	8003e6e <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003e68:	bf00      	nop
 8003e6a:	e000      	b.n	8003e6e <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003e6c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2200      	movs	r2, #0
 8003e72:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8003e76:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	37d8      	adds	r7, #216	; 0xd8
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	bd80      	pop	{r7, pc}
 8003e82:	bf00      	nop
 8003e84:	50000700 	.word	0x50000700
 8003e88:	c3210000 	.word	0xc3210000
 8003e8c:	90c00010 	.word	0x90c00010
 8003e90:	50000600 	.word	0x50000600
 8003e94:	50000100 	.word	0x50000100
 8003e98:	50000300 	.word	0x50000300
 8003e9c:	20000000 	.word	0x20000000
 8003ea0:	053e2d63 	.word	0x053e2d63
 8003ea4:	c7520000 	.word	0xc7520000
 8003ea8:	50000500 	.word	0x50000500
 8003eac:	cb840000 	.word	0xcb840000

08003eb0 <LL_ADC_IsEnabled>:
{
 8003eb0:	b480      	push	{r7}
 8003eb2:	b083      	sub	sp, #12
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	689b      	ldr	r3, [r3, #8]
 8003ebc:	f003 0301 	and.w	r3, r3, #1
 8003ec0:	2b01      	cmp	r3, #1
 8003ec2:	d101      	bne.n	8003ec8 <LL_ADC_IsEnabled+0x18>
 8003ec4:	2301      	movs	r3, #1
 8003ec6:	e000      	b.n	8003eca <LL_ADC_IsEnabled+0x1a>
 8003ec8:	2300      	movs	r3, #0
}
 8003eca:	4618      	mov	r0, r3
 8003ecc:	370c      	adds	r7, #12
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed4:	4770      	bx	lr

08003ed6 <LL_ADC_REG_IsConversionOngoing>:
{
 8003ed6:	b480      	push	{r7}
 8003ed8:	b083      	sub	sp, #12
 8003eda:	af00      	add	r7, sp, #0
 8003edc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	689b      	ldr	r3, [r3, #8]
 8003ee2:	f003 0304 	and.w	r3, r3, #4
 8003ee6:	2b04      	cmp	r3, #4
 8003ee8:	d101      	bne.n	8003eee <LL_ADC_REG_IsConversionOngoing+0x18>
 8003eea:	2301      	movs	r3, #1
 8003eec:	e000      	b.n	8003ef0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003eee:	2300      	movs	r3, #0
}
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	370c      	adds	r7, #12
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efa:	4770      	bx	lr

08003efc <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003efc:	b590      	push	{r4, r7, lr}
 8003efe:	b0a1      	sub	sp, #132	; 0x84
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
 8003f04:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003f06:	2300      	movs	r3, #0
 8003f08:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003f12:	2b01      	cmp	r3, #1
 8003f14:	d101      	bne.n	8003f1a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003f16:	2302      	movs	r3, #2
 8003f18:	e0e7      	b.n	80040ea <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2201      	movs	r2, #1
 8003f1e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8003f22:	2300      	movs	r3, #0
 8003f24:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8003f26:	2300      	movs	r3, #0
 8003f28:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003f32:	d102      	bne.n	8003f3a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003f34:	4b6f      	ldr	r3, [pc, #444]	; (80040f4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003f36:	60bb      	str	r3, [r7, #8]
 8003f38:	e009      	b.n	8003f4e <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	4a6e      	ldr	r2, [pc, #440]	; (80040f8 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003f40:	4293      	cmp	r3, r2
 8003f42:	d102      	bne.n	8003f4a <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8003f44:	4b6d      	ldr	r3, [pc, #436]	; (80040fc <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003f46:	60bb      	str	r3, [r7, #8]
 8003f48:	e001      	b.n	8003f4e <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8003f4e:	68bb      	ldr	r3, [r7, #8]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d10b      	bne.n	8003f6c <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f58:	f043 0220 	orr.w	r2, r3, #32
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2200      	movs	r2, #0
 8003f64:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8003f68:	2301      	movs	r3, #1
 8003f6a:	e0be      	b.n	80040ea <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003f6c:	68bb      	ldr	r3, [r7, #8]
 8003f6e:	4618      	mov	r0, r3
 8003f70:	f7ff ffb1 	bl	8003ed6 <LL_ADC_REG_IsConversionOngoing>
 8003f74:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	f7ff ffab 	bl	8003ed6 <LL_ADC_REG_IsConversionOngoing>
 8003f80:	4603      	mov	r3, r0
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	f040 80a0 	bne.w	80040c8 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8003f88:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	f040 809c 	bne.w	80040c8 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003f98:	d004      	beq.n	8003fa4 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	4a55      	ldr	r2, [pc, #340]	; (80040f4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003fa0:	4293      	cmp	r3, r2
 8003fa2:	d101      	bne.n	8003fa8 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8003fa4:	4b56      	ldr	r3, [pc, #344]	; (8004100 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8003fa6:	e000      	b.n	8003faa <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8003fa8:	4b56      	ldr	r3, [pc, #344]	; (8004104 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8003faa:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d04b      	beq.n	800404c <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003fb4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003fb6:	689b      	ldr	r3, [r3, #8]
 8003fb8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	6859      	ldr	r1, [r3, #4]
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003fc6:	035b      	lsls	r3, r3, #13
 8003fc8:	430b      	orrs	r3, r1
 8003fca:	431a      	orrs	r2, r3
 8003fcc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003fce:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003fd8:	d004      	beq.n	8003fe4 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	4a45      	ldr	r2, [pc, #276]	; (80040f4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003fe0:	4293      	cmp	r3, r2
 8003fe2:	d10f      	bne.n	8004004 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8003fe4:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003fe8:	f7ff ff62 	bl	8003eb0 <LL_ADC_IsEnabled>
 8003fec:	4604      	mov	r4, r0
 8003fee:	4841      	ldr	r0, [pc, #260]	; (80040f4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003ff0:	f7ff ff5e 	bl	8003eb0 <LL_ADC_IsEnabled>
 8003ff4:	4603      	mov	r3, r0
 8003ff6:	4323      	orrs	r3, r4
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	bf0c      	ite	eq
 8003ffc:	2301      	moveq	r3, #1
 8003ffe:	2300      	movne	r3, #0
 8004000:	b2db      	uxtb	r3, r3
 8004002:	e012      	b.n	800402a <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8004004:	483c      	ldr	r0, [pc, #240]	; (80040f8 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8004006:	f7ff ff53 	bl	8003eb0 <LL_ADC_IsEnabled>
 800400a:	4604      	mov	r4, r0
 800400c:	483b      	ldr	r0, [pc, #236]	; (80040fc <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800400e:	f7ff ff4f 	bl	8003eb0 <LL_ADC_IsEnabled>
 8004012:	4603      	mov	r3, r0
 8004014:	431c      	orrs	r4, r3
 8004016:	483c      	ldr	r0, [pc, #240]	; (8004108 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8004018:	f7ff ff4a 	bl	8003eb0 <LL_ADC_IsEnabled>
 800401c:	4603      	mov	r3, r0
 800401e:	4323      	orrs	r3, r4
 8004020:	2b00      	cmp	r3, #0
 8004022:	bf0c      	ite	eq
 8004024:	2301      	moveq	r3, #1
 8004026:	2300      	movne	r3, #0
 8004028:	b2db      	uxtb	r3, r3
 800402a:	2b00      	cmp	r3, #0
 800402c:	d056      	beq.n	80040dc <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800402e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004030:	689b      	ldr	r3, [r3, #8]
 8004032:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8004036:	f023 030f 	bic.w	r3, r3, #15
 800403a:	683a      	ldr	r2, [r7, #0]
 800403c:	6811      	ldr	r1, [r2, #0]
 800403e:	683a      	ldr	r2, [r7, #0]
 8004040:	6892      	ldr	r2, [r2, #8]
 8004042:	430a      	orrs	r2, r1
 8004044:	431a      	orrs	r2, r3
 8004046:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004048:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800404a:	e047      	b.n	80040dc <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800404c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800404e:	689b      	ldr	r3, [r3, #8]
 8004050:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004054:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004056:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004060:	d004      	beq.n	800406c <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	4a23      	ldr	r2, [pc, #140]	; (80040f4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004068:	4293      	cmp	r3, r2
 800406a:	d10f      	bne.n	800408c <HAL_ADCEx_MultiModeConfigChannel+0x190>
 800406c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8004070:	f7ff ff1e 	bl	8003eb0 <LL_ADC_IsEnabled>
 8004074:	4604      	mov	r4, r0
 8004076:	481f      	ldr	r0, [pc, #124]	; (80040f4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004078:	f7ff ff1a 	bl	8003eb0 <LL_ADC_IsEnabled>
 800407c:	4603      	mov	r3, r0
 800407e:	4323      	orrs	r3, r4
 8004080:	2b00      	cmp	r3, #0
 8004082:	bf0c      	ite	eq
 8004084:	2301      	moveq	r3, #1
 8004086:	2300      	movne	r3, #0
 8004088:	b2db      	uxtb	r3, r3
 800408a:	e012      	b.n	80040b2 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 800408c:	481a      	ldr	r0, [pc, #104]	; (80040f8 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800408e:	f7ff ff0f 	bl	8003eb0 <LL_ADC_IsEnabled>
 8004092:	4604      	mov	r4, r0
 8004094:	4819      	ldr	r0, [pc, #100]	; (80040fc <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8004096:	f7ff ff0b 	bl	8003eb0 <LL_ADC_IsEnabled>
 800409a:	4603      	mov	r3, r0
 800409c:	431c      	orrs	r4, r3
 800409e:	481a      	ldr	r0, [pc, #104]	; (8004108 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80040a0:	f7ff ff06 	bl	8003eb0 <LL_ADC_IsEnabled>
 80040a4:	4603      	mov	r3, r0
 80040a6:	4323      	orrs	r3, r4
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	bf0c      	ite	eq
 80040ac:	2301      	moveq	r3, #1
 80040ae:	2300      	movne	r3, #0
 80040b0:	b2db      	uxtb	r3, r3
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d012      	beq.n	80040dc <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80040b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80040b8:	689b      	ldr	r3, [r3, #8]
 80040ba:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80040be:	f023 030f 	bic.w	r3, r3, #15
 80040c2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80040c4:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80040c6:	e009      	b.n	80040dc <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040cc:	f043 0220 	orr.w	r2, r3, #32
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80040d4:	2301      	movs	r3, #1
 80040d6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80040da:	e000      	b.n	80040de <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80040dc:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	2200      	movs	r2, #0
 80040e2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80040e6:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80040ea:	4618      	mov	r0, r3
 80040ec:	3784      	adds	r7, #132	; 0x84
 80040ee:	46bd      	mov	sp, r7
 80040f0:	bd90      	pop	{r4, r7, pc}
 80040f2:	bf00      	nop
 80040f4:	50000100 	.word	0x50000100
 80040f8:	50000400 	.word	0x50000400
 80040fc:	50000500 	.word	0x50000500
 8004100:	50000300 	.word	0x50000300
 8004104:	50000700 	.word	0x50000700
 8004108:	50000600 	.word	0x50000600

0800410c <HAL_CORDIC_Init>:
  * @brief  Initialize the CORDIC peripheral and the associated handle.
  * @param  hcordic pointer to a CORDIC_HandleTypeDef structure.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CORDIC_Init(CORDIC_HandleTypeDef *hcordic)
{
 800410c:	b580      	push	{r7, lr}
 800410e:	b082      	sub	sp, #8
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
  /* Check the CORDIC handle allocation */
  if (hcordic == NULL)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2b00      	cmp	r3, #0
 8004118:	d101      	bne.n	800411e <HAL_CORDIC_Init+0x12>
  {
    /* Return error status */
    return HAL_ERROR;
 800411a:	2301      	movs	r3, #1
 800411c:	e023      	b.n	8004166 <HAL_CORDIC_Init+0x5a>

    /* Initialize the low level hardware */
    hcordic->MspInitCallback(hcordic);
  }
#else
  if (hcordic->State == HAL_CORDIC_STATE_RESET)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004124:	b2db      	uxtb	r3, r3
 8004126:	2b00      	cmp	r3, #0
 8004128:	d106      	bne.n	8004138 <HAL_CORDIC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hcordic->Lock = HAL_UNLOCKED;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2200      	movs	r2, #0
 800412e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize the low level hardware */
    HAL_CORDIC_MspInit(hcordic);
 8004132:	6878      	ldr	r0, [r7, #4]
 8004134:	f7fd fa2c 	bl	8001590 <HAL_CORDIC_MspInit>
  }
#endif /* (USE_HAL_CORDIC_REGISTER_CALLBACKS) */

  /* Set CORDIC error code to none */
  hcordic->ErrorCode = HAL_CORDIC_ERROR_NONE;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2200      	movs	r2, #0
 800413c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Reset pInBuff and pOutBuff */
  hcordic->pInBuff = NULL;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	2200      	movs	r2, #0
 8004142:	605a      	str	r2, [r3, #4]
  hcordic->pOutBuff = NULL;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2200      	movs	r2, #0
 8004148:	609a      	str	r2, [r3, #8]

  /* Reset NbCalcToOrder and NbCalcToGet */
  hcordic->NbCalcToOrder = 0U;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2200      	movs	r2, #0
 800414e:	60da      	str	r2, [r3, #12]
  hcordic->NbCalcToGet = 0U;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2200      	movs	r2, #0
 8004154:	611a      	str	r2, [r3, #16]

  /* Reset DMADirection */
  hcordic->DMADirection = CORDIC_DMA_DIR_NONE;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2200      	movs	r2, #0
 800415a:	615a      	str	r2, [r3, #20]

  /* Change CORDIC peripheral state */
  hcordic->State = HAL_CORDIC_STATE_READY;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2201      	movs	r2, #1
 8004160:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Return function status */
  return HAL_OK;
 8004164:	2300      	movs	r3, #0
}
 8004166:	4618      	mov	r0, r3
 8004168:	3708      	adds	r7, #8
 800416a:	46bd      	mov	sp, r7
 800416c:	bd80      	pop	{r7, pc}
	...

08004170 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004170:	b480      	push	{r7}
 8004172:	b085      	sub	sp, #20
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	f003 0307 	and.w	r3, r3, #7
 800417e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004180:	4b0c      	ldr	r3, [pc, #48]	; (80041b4 <__NVIC_SetPriorityGrouping+0x44>)
 8004182:	68db      	ldr	r3, [r3, #12]
 8004184:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004186:	68ba      	ldr	r2, [r7, #8]
 8004188:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800418c:	4013      	ands	r3, r2
 800418e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004194:	68bb      	ldr	r3, [r7, #8]
 8004196:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004198:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800419c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80041a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80041a2:	4a04      	ldr	r2, [pc, #16]	; (80041b4 <__NVIC_SetPriorityGrouping+0x44>)
 80041a4:	68bb      	ldr	r3, [r7, #8]
 80041a6:	60d3      	str	r3, [r2, #12]
}
 80041a8:	bf00      	nop
 80041aa:	3714      	adds	r7, #20
 80041ac:	46bd      	mov	sp, r7
 80041ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b2:	4770      	bx	lr
 80041b4:	e000ed00 	.word	0xe000ed00

080041b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80041b8:	b480      	push	{r7}
 80041ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80041bc:	4b04      	ldr	r3, [pc, #16]	; (80041d0 <__NVIC_GetPriorityGrouping+0x18>)
 80041be:	68db      	ldr	r3, [r3, #12]
 80041c0:	0a1b      	lsrs	r3, r3, #8
 80041c2:	f003 0307 	and.w	r3, r3, #7
}
 80041c6:	4618      	mov	r0, r3
 80041c8:	46bd      	mov	sp, r7
 80041ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ce:	4770      	bx	lr
 80041d0:	e000ed00 	.word	0xe000ed00

080041d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80041d4:	b480      	push	{r7}
 80041d6:	b083      	sub	sp, #12
 80041d8:	af00      	add	r7, sp, #0
 80041da:	4603      	mov	r3, r0
 80041dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80041de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	db0b      	blt.n	80041fe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80041e6:	79fb      	ldrb	r3, [r7, #7]
 80041e8:	f003 021f 	and.w	r2, r3, #31
 80041ec:	4907      	ldr	r1, [pc, #28]	; (800420c <__NVIC_EnableIRQ+0x38>)
 80041ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041f2:	095b      	lsrs	r3, r3, #5
 80041f4:	2001      	movs	r0, #1
 80041f6:	fa00 f202 	lsl.w	r2, r0, r2
 80041fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80041fe:	bf00      	nop
 8004200:	370c      	adds	r7, #12
 8004202:	46bd      	mov	sp, r7
 8004204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004208:	4770      	bx	lr
 800420a:	bf00      	nop
 800420c:	e000e100 	.word	0xe000e100

08004210 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004210:	b480      	push	{r7}
 8004212:	b083      	sub	sp, #12
 8004214:	af00      	add	r7, sp, #0
 8004216:	4603      	mov	r3, r0
 8004218:	6039      	str	r1, [r7, #0]
 800421a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800421c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004220:	2b00      	cmp	r3, #0
 8004222:	db0a      	blt.n	800423a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	b2da      	uxtb	r2, r3
 8004228:	490c      	ldr	r1, [pc, #48]	; (800425c <__NVIC_SetPriority+0x4c>)
 800422a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800422e:	0112      	lsls	r2, r2, #4
 8004230:	b2d2      	uxtb	r2, r2
 8004232:	440b      	add	r3, r1
 8004234:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004238:	e00a      	b.n	8004250 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	b2da      	uxtb	r2, r3
 800423e:	4908      	ldr	r1, [pc, #32]	; (8004260 <__NVIC_SetPriority+0x50>)
 8004240:	79fb      	ldrb	r3, [r7, #7]
 8004242:	f003 030f 	and.w	r3, r3, #15
 8004246:	3b04      	subs	r3, #4
 8004248:	0112      	lsls	r2, r2, #4
 800424a:	b2d2      	uxtb	r2, r2
 800424c:	440b      	add	r3, r1
 800424e:	761a      	strb	r2, [r3, #24]
}
 8004250:	bf00      	nop
 8004252:	370c      	adds	r7, #12
 8004254:	46bd      	mov	sp, r7
 8004256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425a:	4770      	bx	lr
 800425c:	e000e100 	.word	0xe000e100
 8004260:	e000ed00 	.word	0xe000ed00

08004264 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004264:	b480      	push	{r7}
 8004266:	b089      	sub	sp, #36	; 0x24
 8004268:	af00      	add	r7, sp, #0
 800426a:	60f8      	str	r0, [r7, #12]
 800426c:	60b9      	str	r1, [r7, #8]
 800426e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	f003 0307 	and.w	r3, r3, #7
 8004276:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004278:	69fb      	ldr	r3, [r7, #28]
 800427a:	f1c3 0307 	rsb	r3, r3, #7
 800427e:	2b04      	cmp	r3, #4
 8004280:	bf28      	it	cs
 8004282:	2304      	movcs	r3, #4
 8004284:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004286:	69fb      	ldr	r3, [r7, #28]
 8004288:	3304      	adds	r3, #4
 800428a:	2b06      	cmp	r3, #6
 800428c:	d902      	bls.n	8004294 <NVIC_EncodePriority+0x30>
 800428e:	69fb      	ldr	r3, [r7, #28]
 8004290:	3b03      	subs	r3, #3
 8004292:	e000      	b.n	8004296 <NVIC_EncodePriority+0x32>
 8004294:	2300      	movs	r3, #0
 8004296:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004298:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800429c:	69bb      	ldr	r3, [r7, #24]
 800429e:	fa02 f303 	lsl.w	r3, r2, r3
 80042a2:	43da      	mvns	r2, r3
 80042a4:	68bb      	ldr	r3, [r7, #8]
 80042a6:	401a      	ands	r2, r3
 80042a8:	697b      	ldr	r3, [r7, #20]
 80042aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80042ac:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80042b0:	697b      	ldr	r3, [r7, #20]
 80042b2:	fa01 f303 	lsl.w	r3, r1, r3
 80042b6:	43d9      	mvns	r1, r3
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80042bc:	4313      	orrs	r3, r2
         );
}
 80042be:	4618      	mov	r0, r3
 80042c0:	3724      	adds	r7, #36	; 0x24
 80042c2:	46bd      	mov	sp, r7
 80042c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c8:	4770      	bx	lr

080042ca <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80042ca:	b580      	push	{r7, lr}
 80042cc:	b082      	sub	sp, #8
 80042ce:	af00      	add	r7, sp, #0
 80042d0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80042d2:	6878      	ldr	r0, [r7, #4]
 80042d4:	f7ff ff4c 	bl	8004170 <__NVIC_SetPriorityGrouping>
}
 80042d8:	bf00      	nop
 80042da:	3708      	adds	r7, #8
 80042dc:	46bd      	mov	sp, r7
 80042de:	bd80      	pop	{r7, pc}

080042e0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b086      	sub	sp, #24
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	4603      	mov	r3, r0
 80042e8:	60b9      	str	r1, [r7, #8]
 80042ea:	607a      	str	r2, [r7, #4]
 80042ec:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80042ee:	f7ff ff63 	bl	80041b8 <__NVIC_GetPriorityGrouping>
 80042f2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80042f4:	687a      	ldr	r2, [r7, #4]
 80042f6:	68b9      	ldr	r1, [r7, #8]
 80042f8:	6978      	ldr	r0, [r7, #20]
 80042fa:	f7ff ffb3 	bl	8004264 <NVIC_EncodePriority>
 80042fe:	4602      	mov	r2, r0
 8004300:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004304:	4611      	mov	r1, r2
 8004306:	4618      	mov	r0, r3
 8004308:	f7ff ff82 	bl	8004210 <__NVIC_SetPriority>
}
 800430c:	bf00      	nop
 800430e:	3718      	adds	r7, #24
 8004310:	46bd      	mov	sp, r7
 8004312:	bd80      	pop	{r7, pc}

08004314 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004314:	b580      	push	{r7, lr}
 8004316:	b082      	sub	sp, #8
 8004318:	af00      	add	r7, sp, #0
 800431a:	4603      	mov	r3, r0
 800431c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800431e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004322:	4618      	mov	r0, r3
 8004324:	f7ff ff56 	bl	80041d4 <__NVIC_EnableIRQ>
}
 8004328:	bf00      	nop
 800432a:	3708      	adds	r7, #8
 800432c:	46bd      	mov	sp, r7
 800432e:	bd80      	pop	{r7, pc}

08004330 <HAL_FMAC_Init>:
  * @brief  Initialize the FMAC peripheral and the associated handle.
  * @param  hfmac pointer to a FMAC_HandleTypeDef structure.
  * @retval HAL_StatusTypeDef HAL status
  */
HAL_StatusTypeDef HAL_FMAC_Init(FMAC_HandleTypeDef *hfmac)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	b084      	sub	sp, #16
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the FMAC handle allocation */
  if (hfmac == NULL)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2b00      	cmp	r3, #0
 800433c:	d101      	bne.n	8004342 <HAL_FMAC_Init+0x12>
  {
    return HAL_ERROR;
 800433e:	2301      	movs	r3, #1
 8004340:	e033      	b.n	80043aa <HAL_FMAC_Init+0x7a>
  }

  /* Check the instance */
  assert_param(IS_FMAC_ALL_INSTANCE(hfmac->Instance));

  if (hfmac->State == HAL_FMAC_STATE_RESET)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004348:	b2db      	uxtb	r3, r3
 800434a:	2b00      	cmp	r3, #0
 800434c:	d106      	bne.n	800435c <HAL_FMAC_Init+0x2c>
  {
    /* Initialize lock resource */
    hfmac->Lock = HAL_UNLOCKED;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	2200      	movs	r2, #0
 8004352:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Init the low level hardware */
    hfmac->MspInitCallback(hfmac);
#else
    /* Init the low level hardware */
    HAL_FMAC_MspInit(hfmac);
 8004356:	6878      	ldr	r0, [r7, #4]
 8004358:	f7fd f94e 	bl	80015f8 <HAL_FMAC_MspInit>
#endif /* USE_HAL_FMAC_REGISTER_CALLBACKS */
  }

  /* Reset pInput and pOutput */
  hfmac->FilterParam = 0U;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2200      	movs	r2, #0
 8004360:	605a      	str	r2, [r3, #4]
  FMAC_ResetDataPointers(hfmac);
 8004362:	6878      	ldr	r0, [r7, #4]
 8004364:	f000 f854 	bl	8004410 <FMAC_ResetDataPointers>

  /* Reset FMAC unit (internal pointers) */
  if (FMAC_Reset(hfmac) == HAL_ERROR)
 8004368:	6878      	ldr	r0, [r7, #4]
 800436a:	f000 f822 	bl	80043b2 <FMAC_Reset>
 800436e:	4603      	mov	r3, r0
 8004370:	2b01      	cmp	r3, #1
 8004372:	d10c      	bne.n	800438e <HAL_FMAC_Init+0x5e>
  {
    /* Update FMAC error code and FMAC peripheral state */
    hfmac->ErrorCode |= HAL_FMAC_ERROR_RESET;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004378:	f043 0210 	orr.w	r2, r3, #16
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	635a      	str	r2, [r3, #52]	; 0x34
    hfmac->State = HAL_FMAC_STATE_TIMEOUT;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	22a0      	movs	r2, #160	; 0xa0
 8004384:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

    status = HAL_ERROR;
 8004388:	2301      	movs	r3, #1
 800438a:	73fb      	strb	r3, [r7, #15]
 800438c:	e008      	b.n	80043a0 <HAL_FMAC_Init+0x70>
  }
  else
  {
    /* Update FMAC error code and FMAC peripheral state */
    hfmac->ErrorCode = HAL_FMAC_ERROR_NONE;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2200      	movs	r2, #0
 8004392:	635a      	str	r2, [r3, #52]	; 0x34
    hfmac->State = HAL_FMAC_STATE_READY;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2220      	movs	r2, #32
 8004398:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

    status = HAL_OK;
 800439c:	2300      	movs	r3, #0
 800439e:	73fb      	strb	r3, [r7, #15]
  }

  __HAL_UNLOCK(hfmac);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2200      	movs	r2, #0
 80043a4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 80043a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80043aa:	4618      	mov	r0, r3
 80043ac:	3710      	adds	r7, #16
 80043ae:	46bd      	mov	sp, r7
 80043b0:	bd80      	pop	{r7, pc}

080043b2 <FMAC_Reset>:
  * @brief  Perform a reset of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval HAL_StatusTypeDef HAL status
  */
static HAL_StatusTypeDef FMAC_Reset(FMAC_HandleTypeDef *hfmac)
{
 80043b2:	b580      	push	{r7, lr}
 80043b4:	b084      	sub	sp, #16
 80043b6:	af00      	add	r7, sp, #0
 80043b8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80043ba:	f7fe fd6f 	bl	8002e9c <HAL_GetTick>
 80043be:	60f8      	str	r0, [r7, #12]

  /* Perform the reset */
  SET_BIT(hfmac->Instance->CR, FMAC_CR_RESET);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	691a      	ldr	r2, [r3, #16]
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80043ce:	611a      	str	r2, [r3, #16]

  /* Wait until flag is reset */
  while (READ_BIT(hfmac->Instance->CR, FMAC_CR_RESET) != 0U)
 80043d0:	e00f      	b.n	80043f2 <FMAC_Reset+0x40>
  {
    if ((HAL_GetTick() - tickstart) > HAL_FMAC_RESET_TIMEOUT_VALUE)
 80043d2:	f7fe fd63 	bl	8002e9c <HAL_GetTick>
 80043d6:	4602      	mov	r2, r0
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	1ad3      	subs	r3, r2, r3
 80043dc:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80043e0:	d907      	bls.n	80043f2 <FMAC_Reset+0x40>
    {
      hfmac->ErrorCode |= HAL_FMAC_ERROR_TIMEOUT;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043e6:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80043ee:	2301      	movs	r3, #1
 80043f0:	e00a      	b.n	8004408 <FMAC_Reset+0x56>
  while (READ_BIT(hfmac->Instance->CR, FMAC_CR_RESET) != 0U)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	691b      	ldr	r3, [r3, #16]
 80043f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d1e8      	bne.n	80043d2 <FMAC_Reset+0x20>
    }
  }

  hfmac->ErrorCode = HAL_FMAC_ERROR_NONE;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2200      	movs	r2, #0
 8004404:	635a      	str	r2, [r3, #52]	; 0x34
  return HAL_OK;
 8004406:	2300      	movs	r3, #0
}
 8004408:	4618      	mov	r0, r3
 800440a:	3710      	adds	r7, #16
 800440c:	46bd      	mov	sp, r7
 800440e:	bd80      	pop	{r7, pc}

08004410 <FMAC_ResetDataPointers>:
  * @brief  Reset the data pointers of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval None
  */
static void FMAC_ResetDataPointers(FMAC_HandleTypeDef *hfmac)
{
 8004410:	b580      	push	{r7, lr}
 8004412:	b082      	sub	sp, #8
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
  FMAC_ResetInputStateAndDataPointers(hfmac);
 8004418:	6878      	ldr	r0, [r7, #4]
 800441a:	f000 f807 	bl	800442c <FMAC_ResetInputStateAndDataPointers>
  FMAC_ResetOutputStateAndDataPointers(hfmac);
 800441e:	6878      	ldr	r0, [r7, #4]
 8004420:	f000 f81b 	bl	800445a <FMAC_ResetOutputStateAndDataPointers>
}
 8004424:	bf00      	nop
 8004426:	3708      	adds	r7, #8
 8004428:	46bd      	mov	sp, r7
 800442a:	bd80      	pop	{r7, pc}

0800442c <FMAC_ResetInputStateAndDataPointers>:
  * @brief  Reset the input data pointers of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval None
  */
static void FMAC_ResetInputStateAndDataPointers(FMAC_HandleTypeDef *hfmac)
{
 800442c:	b480      	push	{r7}
 800442e:	b083      	sub	sp, #12
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
  hfmac->pInput = NULL;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2200      	movs	r2, #0
 8004438:	60da      	str	r2, [r3, #12]
  hfmac->pInputSize = NULL;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	2200      	movs	r2, #0
 800443e:	615a      	str	r2, [r3, #20]
  hfmac->InputCurrentSize = 0U;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2200      	movs	r2, #0
 8004444:	821a      	strh	r2, [r3, #16]
  hfmac->WrState = HAL_FMAC_STATE_READY;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	2220      	movs	r2, #32
 800444a:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
}
 800444e:	bf00      	nop
 8004450:	370c      	adds	r7, #12
 8004452:	46bd      	mov	sp, r7
 8004454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004458:	4770      	bx	lr

0800445a <FMAC_ResetOutputStateAndDataPointers>:
  * @brief  Reset the output data pointers of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval None
  */
static void FMAC_ResetOutputStateAndDataPointers(FMAC_HandleTypeDef *hfmac)
{
 800445a:	b480      	push	{r7}
 800445c:	b083      	sub	sp, #12
 800445e:	af00      	add	r7, sp, #0
 8004460:	6078      	str	r0, [r7, #4]
  hfmac->pOutput = NULL;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2200      	movs	r2, #0
 8004466:	619a      	str	r2, [r3, #24]
  hfmac->pOutputSize = NULL;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2200      	movs	r2, #0
 800446c:	621a      	str	r2, [r3, #32]
  hfmac->OutputCurrentSize = 0U;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	2200      	movs	r2, #0
 8004472:	839a      	strh	r2, [r3, #28]
  hfmac->RdState = HAL_FMAC_STATE_READY;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2220      	movs	r2, #32
 8004478:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
}
 800447c:	bf00      	nop
 800447e:	370c      	adds	r7, #12
 8004480:	46bd      	mov	sp, r7
 8004482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004486:	4770      	bx	lr

08004488 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004488:	b480      	push	{r7}
 800448a:	b087      	sub	sp, #28
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
 8004490:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004492:	2300      	movs	r3, #0
 8004494:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004496:	e15a      	b.n	800474e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	681a      	ldr	r2, [r3, #0]
 800449c:	2101      	movs	r1, #1
 800449e:	697b      	ldr	r3, [r7, #20]
 80044a0:	fa01 f303 	lsl.w	r3, r1, r3
 80044a4:	4013      	ands	r3, r2
 80044a6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	f000 814c 	beq.w	8004748 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	685b      	ldr	r3, [r3, #4]
 80044b4:	f003 0303 	and.w	r3, r3, #3
 80044b8:	2b01      	cmp	r3, #1
 80044ba:	d005      	beq.n	80044c8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	685b      	ldr	r3, [r3, #4]
 80044c0:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80044c4:	2b02      	cmp	r3, #2
 80044c6:	d130      	bne.n	800452a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	689b      	ldr	r3, [r3, #8]
 80044cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80044ce:	697b      	ldr	r3, [r7, #20]
 80044d0:	005b      	lsls	r3, r3, #1
 80044d2:	2203      	movs	r2, #3
 80044d4:	fa02 f303 	lsl.w	r3, r2, r3
 80044d8:	43db      	mvns	r3, r3
 80044da:	693a      	ldr	r2, [r7, #16]
 80044dc:	4013      	ands	r3, r2
 80044de:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	68da      	ldr	r2, [r3, #12]
 80044e4:	697b      	ldr	r3, [r7, #20]
 80044e6:	005b      	lsls	r3, r3, #1
 80044e8:	fa02 f303 	lsl.w	r3, r2, r3
 80044ec:	693a      	ldr	r2, [r7, #16]
 80044ee:	4313      	orrs	r3, r2
 80044f0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	693a      	ldr	r2, [r7, #16]
 80044f6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	685b      	ldr	r3, [r3, #4]
 80044fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80044fe:	2201      	movs	r2, #1
 8004500:	697b      	ldr	r3, [r7, #20]
 8004502:	fa02 f303 	lsl.w	r3, r2, r3
 8004506:	43db      	mvns	r3, r3
 8004508:	693a      	ldr	r2, [r7, #16]
 800450a:	4013      	ands	r3, r2
 800450c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	685b      	ldr	r3, [r3, #4]
 8004512:	091b      	lsrs	r3, r3, #4
 8004514:	f003 0201 	and.w	r2, r3, #1
 8004518:	697b      	ldr	r3, [r7, #20]
 800451a:	fa02 f303 	lsl.w	r3, r2, r3
 800451e:	693a      	ldr	r2, [r7, #16]
 8004520:	4313      	orrs	r3, r2
 8004522:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	693a      	ldr	r2, [r7, #16]
 8004528:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	685b      	ldr	r3, [r3, #4]
 800452e:	f003 0303 	and.w	r3, r3, #3
 8004532:	2b03      	cmp	r3, #3
 8004534:	d017      	beq.n	8004566 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	68db      	ldr	r3, [r3, #12]
 800453a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800453c:	697b      	ldr	r3, [r7, #20]
 800453e:	005b      	lsls	r3, r3, #1
 8004540:	2203      	movs	r2, #3
 8004542:	fa02 f303 	lsl.w	r3, r2, r3
 8004546:	43db      	mvns	r3, r3
 8004548:	693a      	ldr	r2, [r7, #16]
 800454a:	4013      	ands	r3, r2
 800454c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	689a      	ldr	r2, [r3, #8]
 8004552:	697b      	ldr	r3, [r7, #20]
 8004554:	005b      	lsls	r3, r3, #1
 8004556:	fa02 f303 	lsl.w	r3, r2, r3
 800455a:	693a      	ldr	r2, [r7, #16]
 800455c:	4313      	orrs	r3, r2
 800455e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	693a      	ldr	r2, [r7, #16]
 8004564:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	685b      	ldr	r3, [r3, #4]
 800456a:	f003 0303 	and.w	r3, r3, #3
 800456e:	2b02      	cmp	r3, #2
 8004570:	d123      	bne.n	80045ba <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004572:	697b      	ldr	r3, [r7, #20]
 8004574:	08da      	lsrs	r2, r3, #3
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	3208      	adds	r2, #8
 800457a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800457e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004580:	697b      	ldr	r3, [r7, #20]
 8004582:	f003 0307 	and.w	r3, r3, #7
 8004586:	009b      	lsls	r3, r3, #2
 8004588:	220f      	movs	r2, #15
 800458a:	fa02 f303 	lsl.w	r3, r2, r3
 800458e:	43db      	mvns	r3, r3
 8004590:	693a      	ldr	r2, [r7, #16]
 8004592:	4013      	ands	r3, r2
 8004594:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	691a      	ldr	r2, [r3, #16]
 800459a:	697b      	ldr	r3, [r7, #20]
 800459c:	f003 0307 	and.w	r3, r3, #7
 80045a0:	009b      	lsls	r3, r3, #2
 80045a2:	fa02 f303 	lsl.w	r3, r2, r3
 80045a6:	693a      	ldr	r2, [r7, #16]
 80045a8:	4313      	orrs	r3, r2
 80045aa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80045ac:	697b      	ldr	r3, [r7, #20]
 80045ae:	08da      	lsrs	r2, r3, #3
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	3208      	adds	r2, #8
 80045b4:	6939      	ldr	r1, [r7, #16]
 80045b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80045c0:	697b      	ldr	r3, [r7, #20]
 80045c2:	005b      	lsls	r3, r3, #1
 80045c4:	2203      	movs	r2, #3
 80045c6:	fa02 f303 	lsl.w	r3, r2, r3
 80045ca:	43db      	mvns	r3, r3
 80045cc:	693a      	ldr	r2, [r7, #16]
 80045ce:	4013      	ands	r3, r2
 80045d0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	685b      	ldr	r3, [r3, #4]
 80045d6:	f003 0203 	and.w	r2, r3, #3
 80045da:	697b      	ldr	r3, [r7, #20]
 80045dc:	005b      	lsls	r3, r3, #1
 80045de:	fa02 f303 	lsl.w	r3, r2, r3
 80045e2:	693a      	ldr	r2, [r7, #16]
 80045e4:	4313      	orrs	r3, r2
 80045e6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	693a      	ldr	r2, [r7, #16]
 80045ec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	685b      	ldr	r3, [r3, #4]
 80045f2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	f000 80a6 	beq.w	8004748 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80045fc:	4b5b      	ldr	r3, [pc, #364]	; (800476c <HAL_GPIO_Init+0x2e4>)
 80045fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004600:	4a5a      	ldr	r2, [pc, #360]	; (800476c <HAL_GPIO_Init+0x2e4>)
 8004602:	f043 0301 	orr.w	r3, r3, #1
 8004606:	6613      	str	r3, [r2, #96]	; 0x60
 8004608:	4b58      	ldr	r3, [pc, #352]	; (800476c <HAL_GPIO_Init+0x2e4>)
 800460a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800460c:	f003 0301 	and.w	r3, r3, #1
 8004610:	60bb      	str	r3, [r7, #8]
 8004612:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004614:	4a56      	ldr	r2, [pc, #344]	; (8004770 <HAL_GPIO_Init+0x2e8>)
 8004616:	697b      	ldr	r3, [r7, #20]
 8004618:	089b      	lsrs	r3, r3, #2
 800461a:	3302      	adds	r3, #2
 800461c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004620:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004622:	697b      	ldr	r3, [r7, #20]
 8004624:	f003 0303 	and.w	r3, r3, #3
 8004628:	009b      	lsls	r3, r3, #2
 800462a:	220f      	movs	r2, #15
 800462c:	fa02 f303 	lsl.w	r3, r2, r3
 8004630:	43db      	mvns	r3, r3
 8004632:	693a      	ldr	r2, [r7, #16]
 8004634:	4013      	ands	r3, r2
 8004636:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800463e:	d01f      	beq.n	8004680 <HAL_GPIO_Init+0x1f8>
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	4a4c      	ldr	r2, [pc, #304]	; (8004774 <HAL_GPIO_Init+0x2ec>)
 8004644:	4293      	cmp	r3, r2
 8004646:	d019      	beq.n	800467c <HAL_GPIO_Init+0x1f4>
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	4a4b      	ldr	r2, [pc, #300]	; (8004778 <HAL_GPIO_Init+0x2f0>)
 800464c:	4293      	cmp	r3, r2
 800464e:	d013      	beq.n	8004678 <HAL_GPIO_Init+0x1f0>
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	4a4a      	ldr	r2, [pc, #296]	; (800477c <HAL_GPIO_Init+0x2f4>)
 8004654:	4293      	cmp	r3, r2
 8004656:	d00d      	beq.n	8004674 <HAL_GPIO_Init+0x1ec>
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	4a49      	ldr	r2, [pc, #292]	; (8004780 <HAL_GPIO_Init+0x2f8>)
 800465c:	4293      	cmp	r3, r2
 800465e:	d007      	beq.n	8004670 <HAL_GPIO_Init+0x1e8>
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	4a48      	ldr	r2, [pc, #288]	; (8004784 <HAL_GPIO_Init+0x2fc>)
 8004664:	4293      	cmp	r3, r2
 8004666:	d101      	bne.n	800466c <HAL_GPIO_Init+0x1e4>
 8004668:	2305      	movs	r3, #5
 800466a:	e00a      	b.n	8004682 <HAL_GPIO_Init+0x1fa>
 800466c:	2306      	movs	r3, #6
 800466e:	e008      	b.n	8004682 <HAL_GPIO_Init+0x1fa>
 8004670:	2304      	movs	r3, #4
 8004672:	e006      	b.n	8004682 <HAL_GPIO_Init+0x1fa>
 8004674:	2303      	movs	r3, #3
 8004676:	e004      	b.n	8004682 <HAL_GPIO_Init+0x1fa>
 8004678:	2302      	movs	r3, #2
 800467a:	e002      	b.n	8004682 <HAL_GPIO_Init+0x1fa>
 800467c:	2301      	movs	r3, #1
 800467e:	e000      	b.n	8004682 <HAL_GPIO_Init+0x1fa>
 8004680:	2300      	movs	r3, #0
 8004682:	697a      	ldr	r2, [r7, #20]
 8004684:	f002 0203 	and.w	r2, r2, #3
 8004688:	0092      	lsls	r2, r2, #2
 800468a:	4093      	lsls	r3, r2
 800468c:	693a      	ldr	r2, [r7, #16]
 800468e:	4313      	orrs	r3, r2
 8004690:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004692:	4937      	ldr	r1, [pc, #220]	; (8004770 <HAL_GPIO_Init+0x2e8>)
 8004694:	697b      	ldr	r3, [r7, #20]
 8004696:	089b      	lsrs	r3, r3, #2
 8004698:	3302      	adds	r3, #2
 800469a:	693a      	ldr	r2, [r7, #16]
 800469c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80046a0:	4b39      	ldr	r3, [pc, #228]	; (8004788 <HAL_GPIO_Init+0x300>)
 80046a2:	689b      	ldr	r3, [r3, #8]
 80046a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	43db      	mvns	r3, r3
 80046aa:	693a      	ldr	r2, [r7, #16]
 80046ac:	4013      	ands	r3, r2
 80046ae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	685b      	ldr	r3, [r3, #4]
 80046b4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d003      	beq.n	80046c4 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80046bc:	693a      	ldr	r2, [r7, #16]
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	4313      	orrs	r3, r2
 80046c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80046c4:	4a30      	ldr	r2, [pc, #192]	; (8004788 <HAL_GPIO_Init+0x300>)
 80046c6:	693b      	ldr	r3, [r7, #16]
 80046c8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80046ca:	4b2f      	ldr	r3, [pc, #188]	; (8004788 <HAL_GPIO_Init+0x300>)
 80046cc:	68db      	ldr	r3, [r3, #12]
 80046ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	43db      	mvns	r3, r3
 80046d4:	693a      	ldr	r2, [r7, #16]
 80046d6:	4013      	ands	r3, r2
 80046d8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	685b      	ldr	r3, [r3, #4]
 80046de:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d003      	beq.n	80046ee <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80046e6:	693a      	ldr	r2, [r7, #16]
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	4313      	orrs	r3, r2
 80046ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80046ee:	4a26      	ldr	r2, [pc, #152]	; (8004788 <HAL_GPIO_Init+0x300>)
 80046f0:	693b      	ldr	r3, [r7, #16]
 80046f2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80046f4:	4b24      	ldr	r3, [pc, #144]	; (8004788 <HAL_GPIO_Init+0x300>)
 80046f6:	685b      	ldr	r3, [r3, #4]
 80046f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	43db      	mvns	r3, r3
 80046fe:	693a      	ldr	r2, [r7, #16]
 8004700:	4013      	ands	r3, r2
 8004702:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	685b      	ldr	r3, [r3, #4]
 8004708:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800470c:	2b00      	cmp	r3, #0
 800470e:	d003      	beq.n	8004718 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004710:	693a      	ldr	r2, [r7, #16]
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	4313      	orrs	r3, r2
 8004716:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004718:	4a1b      	ldr	r2, [pc, #108]	; (8004788 <HAL_GPIO_Init+0x300>)
 800471a:	693b      	ldr	r3, [r7, #16]
 800471c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800471e:	4b1a      	ldr	r3, [pc, #104]	; (8004788 <HAL_GPIO_Init+0x300>)
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	43db      	mvns	r3, r3
 8004728:	693a      	ldr	r2, [r7, #16]
 800472a:	4013      	ands	r3, r2
 800472c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	685b      	ldr	r3, [r3, #4]
 8004732:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004736:	2b00      	cmp	r3, #0
 8004738:	d003      	beq.n	8004742 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800473a:	693a      	ldr	r2, [r7, #16]
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	4313      	orrs	r3, r2
 8004740:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004742:	4a11      	ldr	r2, [pc, #68]	; (8004788 <HAL_GPIO_Init+0x300>)
 8004744:	693b      	ldr	r3, [r7, #16]
 8004746:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004748:	697b      	ldr	r3, [r7, #20]
 800474a:	3301      	adds	r3, #1
 800474c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	681a      	ldr	r2, [r3, #0]
 8004752:	697b      	ldr	r3, [r7, #20]
 8004754:	fa22 f303 	lsr.w	r3, r2, r3
 8004758:	2b00      	cmp	r3, #0
 800475a:	f47f ae9d 	bne.w	8004498 <HAL_GPIO_Init+0x10>
  }
}
 800475e:	bf00      	nop
 8004760:	bf00      	nop
 8004762:	371c      	adds	r7, #28
 8004764:	46bd      	mov	sp, r7
 8004766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476a:	4770      	bx	lr
 800476c:	40021000 	.word	0x40021000
 8004770:	40010000 	.word	0x40010000
 8004774:	48000400 	.word	0x48000400
 8004778:	48000800 	.word	0x48000800
 800477c:	48000c00 	.word	0x48000c00
 8004780:	48001000 	.word	0x48001000
 8004784:	48001400 	.word	0x48001400
 8004788:	40010400 	.word	0x40010400

0800478c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800478c:	b480      	push	{r7}
 800478e:	b083      	sub	sp, #12
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
 8004794:	460b      	mov	r3, r1
 8004796:	807b      	strh	r3, [r7, #2]
 8004798:	4613      	mov	r3, r2
 800479a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800479c:	787b      	ldrb	r3, [r7, #1]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d003      	beq.n	80047aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80047a2:	887a      	ldrh	r2, [r7, #2]
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80047a8:	e002      	b.n	80047b0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80047aa:	887a      	ldrh	r2, [r7, #2]
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	629a      	str	r2, [r3, #40]	; 0x28
}
 80047b0:	bf00      	nop
 80047b2:	370c      	adds	r7, #12
 80047b4:	46bd      	mov	sp, r7
 80047b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ba:	4770      	bx	lr

080047bc <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80047bc:	b480      	push	{r7}
 80047be:	b085      	sub	sp, #20
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
 80047c4:	460b      	mov	r3, r1
 80047c6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	695b      	ldr	r3, [r3, #20]
 80047cc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80047ce:	887a      	ldrh	r2, [r7, #2]
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	4013      	ands	r3, r2
 80047d4:	041a      	lsls	r2, r3, #16
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	43d9      	mvns	r1, r3
 80047da:	887b      	ldrh	r3, [r7, #2]
 80047dc:	400b      	ands	r3, r1
 80047de:	431a      	orrs	r2, r3
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	619a      	str	r2, [r3, #24]
}
 80047e4:	bf00      	nop
 80047e6:	3714      	adds	r7, #20
 80047e8:	46bd      	mov	sp, r7
 80047ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ee:	4770      	bx	lr

080047f0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b082      	sub	sp, #8
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	4603      	mov	r3, r0
 80047f8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80047fa:	4b08      	ldr	r3, [pc, #32]	; (800481c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80047fc:	695a      	ldr	r2, [r3, #20]
 80047fe:	88fb      	ldrh	r3, [r7, #6]
 8004800:	4013      	ands	r3, r2
 8004802:	2b00      	cmp	r3, #0
 8004804:	d006      	beq.n	8004814 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004806:	4a05      	ldr	r2, [pc, #20]	; (800481c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004808:	88fb      	ldrh	r3, [r7, #6]
 800480a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800480c:	88fb      	ldrh	r3, [r7, #6]
 800480e:	4618      	mov	r0, r3
 8004810:	f7fc ff12 	bl	8001638 <HAL_GPIO_EXTI_Callback>
  }
}
 8004814:	bf00      	nop
 8004816:	3708      	adds	r7, #8
 8004818:	46bd      	mov	sp, r7
 800481a:	bd80      	pop	{r7, pc}
 800481c:	40010400 	.word	0x40010400

08004820 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004820:	b580      	push	{r7, lr}
 8004822:	b082      	sub	sp, #8
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2b00      	cmp	r3, #0
 800482c:	d101      	bne.n	8004832 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800482e:	2301      	movs	r3, #1
 8004830:	e081      	b.n	8004936 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004838:	b2db      	uxtb	r3, r3
 800483a:	2b00      	cmp	r3, #0
 800483c:	d106      	bne.n	800484c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	2200      	movs	r2, #0
 8004842:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004846:	6878      	ldr	r0, [r7, #4]
 8004848:	f7fd f862 	bl	8001910 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2224      	movs	r2, #36	; 0x24
 8004850:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	681a      	ldr	r2, [r3, #0]
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f022 0201 	bic.w	r2, r2, #1
 8004862:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	685a      	ldr	r2, [r3, #4]
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004870:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	689a      	ldr	r2, [r3, #8]
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004880:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	68db      	ldr	r3, [r3, #12]
 8004886:	2b01      	cmp	r3, #1
 8004888:	d107      	bne.n	800489a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	689a      	ldr	r2, [r3, #8]
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004896:	609a      	str	r2, [r3, #8]
 8004898:	e006      	b.n	80048a8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	689a      	ldr	r2, [r3, #8]
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80048a6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	68db      	ldr	r3, [r3, #12]
 80048ac:	2b02      	cmp	r3, #2
 80048ae:	d104      	bne.n	80048ba <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80048b8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	685b      	ldr	r3, [r3, #4]
 80048c0:	687a      	ldr	r2, [r7, #4]
 80048c2:	6812      	ldr	r2, [r2, #0]
 80048c4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80048c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80048cc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	68da      	ldr	r2, [r3, #12]
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80048dc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	691a      	ldr	r2, [r3, #16]
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	695b      	ldr	r3, [r3, #20]
 80048e6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	699b      	ldr	r3, [r3, #24]
 80048ee:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	430a      	orrs	r2, r1
 80048f6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	69d9      	ldr	r1, [r3, #28]
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	6a1a      	ldr	r2, [r3, #32]
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	430a      	orrs	r2, r1
 8004906:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	681a      	ldr	r2, [r3, #0]
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f042 0201 	orr.w	r2, r2, #1
 8004916:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2200      	movs	r2, #0
 800491c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	2220      	movs	r2, #32
 8004922:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	2200      	movs	r2, #0
 800492a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2200      	movs	r2, #0
 8004930:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004934:	2300      	movs	r3, #0
}
 8004936:	4618      	mov	r0, r3
 8004938:	3708      	adds	r7, #8
 800493a:	46bd      	mov	sp, r7
 800493c:	bd80      	pop	{r7, pc}

0800493e <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 800493e:	b580      	push	{r7, lr}
 8004940:	b08a      	sub	sp, #40	; 0x28
 8004942:	af02      	add	r7, sp, #8
 8004944:	60f8      	str	r0, [r7, #12]
 8004946:	607a      	str	r2, [r7, #4]
 8004948:	603b      	str	r3, [r7, #0]
 800494a:	460b      	mov	r3, r1
 800494c:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 800494e:	2300      	movs	r3, #0
 8004950:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004958:	b2db      	uxtb	r3, r3
 800495a:	2b20      	cmp	r3, #32
 800495c:	f040 80f1 	bne.w	8004b42 <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	699b      	ldr	r3, [r3, #24]
 8004966:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800496a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800496e:	d101      	bne.n	8004974 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8004970:	2302      	movs	r3, #2
 8004972:	e0e7      	b.n	8004b44 <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800497a:	2b01      	cmp	r3, #1
 800497c:	d101      	bne.n	8004982 <HAL_I2C_IsDeviceReady+0x44>
 800497e:	2302      	movs	r3, #2
 8004980:	e0e0      	b.n	8004b44 <HAL_I2C_IsDeviceReady+0x206>
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	2201      	movs	r2, #1
 8004986:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	2224      	movs	r2, #36	; 0x24
 800498e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	2200      	movs	r2, #0
 8004996:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	68db      	ldr	r3, [r3, #12]
 800499c:	2b01      	cmp	r3, #1
 800499e:	d107      	bne.n	80049b0 <HAL_I2C_IsDeviceReady+0x72>
 80049a0:	897b      	ldrh	r3, [r7, #10]
 80049a2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80049a6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80049aa:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80049ae:	e004      	b.n	80049ba <HAL_I2C_IsDeviceReady+0x7c>
 80049b0:	897b      	ldrh	r3, [r7, #10]
 80049b2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80049b6:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 80049ba:	68fa      	ldr	r2, [r7, #12]
 80049bc:	6812      	ldr	r2, [r2, #0]
 80049be:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 80049c0:	f7fe fa6c 	bl	8002e9c <HAL_GetTick>
 80049c4:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	699b      	ldr	r3, [r3, #24]
 80049cc:	f003 0320 	and.w	r3, r3, #32
 80049d0:	2b20      	cmp	r3, #32
 80049d2:	bf0c      	ite	eq
 80049d4:	2301      	moveq	r3, #1
 80049d6:	2300      	movne	r3, #0
 80049d8:	b2db      	uxtb	r3, r3
 80049da:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	699b      	ldr	r3, [r3, #24]
 80049e2:	f003 0310 	and.w	r3, r3, #16
 80049e6:	2b10      	cmp	r3, #16
 80049e8:	bf0c      	ite	eq
 80049ea:	2301      	moveq	r3, #1
 80049ec:	2300      	movne	r3, #0
 80049ee:	b2db      	uxtb	r3, r3
 80049f0:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 80049f2:	e034      	b.n	8004a5e <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 80049f4:	683b      	ldr	r3, [r7, #0]
 80049f6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80049fa:	d01a      	beq.n	8004a32 <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80049fc:	f7fe fa4e 	bl	8002e9c <HAL_GetTick>
 8004a00:	4602      	mov	r2, r0
 8004a02:	69bb      	ldr	r3, [r7, #24]
 8004a04:	1ad3      	subs	r3, r2, r3
 8004a06:	683a      	ldr	r2, [r7, #0]
 8004a08:	429a      	cmp	r2, r3
 8004a0a:	d302      	bcc.n	8004a12 <HAL_I2C_IsDeviceReady+0xd4>
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d10f      	bne.n	8004a32 <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	2220      	movs	r2, #32
 8004a16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a1e:	f043 0220 	orr.w	r2, r3, #32
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	2200      	movs	r2, #0
 8004a2a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8004a2e:	2301      	movs	r3, #1
 8004a30:	e088      	b.n	8004b44 <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	699b      	ldr	r3, [r3, #24]
 8004a38:	f003 0320 	and.w	r3, r3, #32
 8004a3c:	2b20      	cmp	r3, #32
 8004a3e:	bf0c      	ite	eq
 8004a40:	2301      	moveq	r3, #1
 8004a42:	2300      	movne	r3, #0
 8004a44:	b2db      	uxtb	r3, r3
 8004a46:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	699b      	ldr	r3, [r3, #24]
 8004a4e:	f003 0310 	and.w	r3, r3, #16
 8004a52:	2b10      	cmp	r3, #16
 8004a54:	bf0c      	ite	eq
 8004a56:	2301      	moveq	r3, #1
 8004a58:	2300      	movne	r3, #0
 8004a5a:	b2db      	uxtb	r3, r3
 8004a5c:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8004a5e:	7ffb      	ldrb	r3, [r7, #31]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d102      	bne.n	8004a6a <HAL_I2C_IsDeviceReady+0x12c>
 8004a64:	7fbb      	ldrb	r3, [r7, #30]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d0c4      	beq.n	80049f4 <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	699b      	ldr	r3, [r3, #24]
 8004a70:	f003 0310 	and.w	r3, r3, #16
 8004a74:	2b10      	cmp	r3, #16
 8004a76:	d01a      	beq.n	8004aae <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8004a78:	69bb      	ldr	r3, [r7, #24]
 8004a7a:	9300      	str	r3, [sp, #0]
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	2200      	movs	r2, #0
 8004a80:	2120      	movs	r1, #32
 8004a82:	68f8      	ldr	r0, [r7, #12]
 8004a84:	f000 f862 	bl	8004b4c <I2C_WaitOnFlagUntilTimeout>
 8004a88:	4603      	mov	r3, r0
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d001      	beq.n	8004a92 <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 8004a8e:	2301      	movs	r3, #1
 8004a90:	e058      	b.n	8004b44 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	2220      	movs	r2, #32
 8004a98:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	2220      	movs	r2, #32
 8004a9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8004aaa:	2300      	movs	r3, #0
 8004aac:	e04a      	b.n	8004b44 <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8004aae:	69bb      	ldr	r3, [r7, #24]
 8004ab0:	9300      	str	r3, [sp, #0]
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	2120      	movs	r1, #32
 8004ab8:	68f8      	ldr	r0, [r7, #12]
 8004aba:	f000 f847 	bl	8004b4c <I2C_WaitOnFlagUntilTimeout>
 8004abe:	4603      	mov	r3, r0
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d001      	beq.n	8004ac8 <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 8004ac4:	2301      	movs	r3, #1
 8004ac6:	e03d      	b.n	8004b44 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	2210      	movs	r2, #16
 8004ace:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	2220      	movs	r2, #32
 8004ad6:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8004ad8:	697b      	ldr	r3, [r7, #20]
 8004ada:	687a      	ldr	r2, [r7, #4]
 8004adc:	429a      	cmp	r2, r3
 8004ade:	d118      	bne.n	8004b12 <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	685a      	ldr	r2, [r3, #4]
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004aee:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8004af0:	69bb      	ldr	r3, [r7, #24]
 8004af2:	9300      	str	r3, [sp, #0]
 8004af4:	683b      	ldr	r3, [r7, #0]
 8004af6:	2200      	movs	r2, #0
 8004af8:	2120      	movs	r1, #32
 8004afa:	68f8      	ldr	r0, [r7, #12]
 8004afc:	f000 f826 	bl	8004b4c <I2C_WaitOnFlagUntilTimeout>
 8004b00:	4603      	mov	r3, r0
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d001      	beq.n	8004b0a <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 8004b06:	2301      	movs	r3, #1
 8004b08:	e01c      	b.n	8004b44 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	2220      	movs	r2, #32
 8004b10:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8004b12:	697b      	ldr	r3, [r7, #20]
 8004b14:	3301      	adds	r3, #1
 8004b16:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8004b18:	697b      	ldr	r3, [r7, #20]
 8004b1a:	687a      	ldr	r2, [r7, #4]
 8004b1c:	429a      	cmp	r2, r3
 8004b1e:	f63f af3b 	bhi.w	8004998 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	2220      	movs	r2, #32
 8004b26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b2e:	f043 0220 	orr.w	r2, r3, #32
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	2200      	movs	r2, #0
 8004b3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8004b3e:	2301      	movs	r3, #1
 8004b40:	e000      	b.n	8004b44 <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 8004b42:	2302      	movs	r3, #2
  }
}
 8004b44:	4618      	mov	r0, r3
 8004b46:	3720      	adds	r7, #32
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	bd80      	pop	{r7, pc}

08004b4c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	b084      	sub	sp, #16
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	60f8      	str	r0, [r7, #12]
 8004b54:	60b9      	str	r1, [r7, #8]
 8004b56:	603b      	str	r3, [r7, #0]
 8004b58:	4613      	mov	r3, r2
 8004b5a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004b5c:	e022      	b.n	8004ba4 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b5e:	683b      	ldr	r3, [r7, #0]
 8004b60:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004b64:	d01e      	beq.n	8004ba4 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b66:	f7fe f999 	bl	8002e9c <HAL_GetTick>
 8004b6a:	4602      	mov	r2, r0
 8004b6c:	69bb      	ldr	r3, [r7, #24]
 8004b6e:	1ad3      	subs	r3, r2, r3
 8004b70:	683a      	ldr	r2, [r7, #0]
 8004b72:	429a      	cmp	r2, r3
 8004b74:	d302      	bcc.n	8004b7c <I2C_WaitOnFlagUntilTimeout+0x30>
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d113      	bne.n	8004ba4 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b80:	f043 0220 	orr.w	r2, r3, #32
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	2220      	movs	r2, #32
 8004b8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	2200      	movs	r2, #0
 8004b94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8004ba0:	2301      	movs	r3, #1
 8004ba2:	e00f      	b.n	8004bc4 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	699a      	ldr	r2, [r3, #24]
 8004baa:	68bb      	ldr	r3, [r7, #8]
 8004bac:	4013      	ands	r3, r2
 8004bae:	68ba      	ldr	r2, [r7, #8]
 8004bb0:	429a      	cmp	r2, r3
 8004bb2:	bf0c      	ite	eq
 8004bb4:	2301      	moveq	r3, #1
 8004bb6:	2300      	movne	r3, #0
 8004bb8:	b2db      	uxtb	r3, r3
 8004bba:	461a      	mov	r2, r3
 8004bbc:	79fb      	ldrb	r3, [r7, #7]
 8004bbe:	429a      	cmp	r2, r3
 8004bc0:	d0cd      	beq.n	8004b5e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004bc2:	2300      	movs	r3, #0
}
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	3710      	adds	r7, #16
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	bd80      	pop	{r7, pc}

08004bcc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004bcc:	b480      	push	{r7}
 8004bce:	b083      	sub	sp, #12
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
 8004bd4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004bdc:	b2db      	uxtb	r3, r3
 8004bde:	2b20      	cmp	r3, #32
 8004be0:	d138      	bne.n	8004c54 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004be8:	2b01      	cmp	r3, #1
 8004bea:	d101      	bne.n	8004bf0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004bec:	2302      	movs	r3, #2
 8004bee:	e032      	b.n	8004c56 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2201      	movs	r2, #1
 8004bf4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2224      	movs	r2, #36	; 0x24
 8004bfc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	681a      	ldr	r2, [r3, #0]
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f022 0201 	bic.w	r2, r2, #1
 8004c0e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	681a      	ldr	r2, [r3, #0]
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004c1e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	6819      	ldr	r1, [r3, #0]
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	683a      	ldr	r2, [r7, #0]
 8004c2c:	430a      	orrs	r2, r1
 8004c2e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	681a      	ldr	r2, [r3, #0]
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f042 0201 	orr.w	r2, r2, #1
 8004c3e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2220      	movs	r2, #32
 8004c44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004c50:	2300      	movs	r3, #0
 8004c52:	e000      	b.n	8004c56 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004c54:	2302      	movs	r3, #2
  }
}
 8004c56:	4618      	mov	r0, r3
 8004c58:	370c      	adds	r7, #12
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c60:	4770      	bx	lr

08004c62 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004c62:	b480      	push	{r7}
 8004c64:	b085      	sub	sp, #20
 8004c66:	af00      	add	r7, sp, #0
 8004c68:	6078      	str	r0, [r7, #4]
 8004c6a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004c72:	b2db      	uxtb	r3, r3
 8004c74:	2b20      	cmp	r3, #32
 8004c76:	d139      	bne.n	8004cec <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004c7e:	2b01      	cmp	r3, #1
 8004c80:	d101      	bne.n	8004c86 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004c82:	2302      	movs	r3, #2
 8004c84:	e033      	b.n	8004cee <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	2201      	movs	r2, #1
 8004c8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	2224      	movs	r2, #36	; 0x24
 8004c92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	681a      	ldr	r2, [r3, #0]
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f022 0201 	bic.w	r2, r2, #1
 8004ca4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004cb4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004cb6:	683b      	ldr	r3, [r7, #0]
 8004cb8:	021b      	lsls	r3, r3, #8
 8004cba:	68fa      	ldr	r2, [r7, #12]
 8004cbc:	4313      	orrs	r3, r2
 8004cbe:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	68fa      	ldr	r2, [r7, #12]
 8004cc6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	681a      	ldr	r2, [r3, #0]
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f042 0201 	orr.w	r2, r2, #1
 8004cd6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2220      	movs	r2, #32
 8004cdc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004ce8:	2300      	movs	r3, #0
 8004cea:	e000      	b.n	8004cee <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004cec:	2302      	movs	r3, #2
  }
}
 8004cee:	4618      	mov	r0, r3
 8004cf0:	3714      	adds	r7, #20
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf8:	4770      	bx	lr

08004cfa <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004cfa:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004cfc:	b08b      	sub	sp, #44	; 0x2c
 8004cfe:	af06      	add	r7, sp, #24
 8004d00:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d101      	bne.n	8004d0c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004d08:	2301      	movs	r3, #1
 8004d0a:	e0d7      	b.n	8004ebc <HAL_PCD_Init+0x1c2>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8004d12:	b2db      	uxtb	r3, r3
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d106      	bne.n	8004d26 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004d20:	6878      	ldr	r0, [r7, #4]
 8004d22:	f00b fd5b 	bl	80107dc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	2203      	movs	r2, #3
 8004d2a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	4618      	mov	r0, r3
 8004d34:	f005 fbd5 	bl	800a4e2 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004d38:	2300      	movs	r3, #0
 8004d3a:	73fb      	strb	r3, [r7, #15]
 8004d3c:	e04c      	b.n	8004dd8 <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004d3e:	7bfb      	ldrb	r3, [r7, #15]
 8004d40:	6879      	ldr	r1, [r7, #4]
 8004d42:	1c5a      	adds	r2, r3, #1
 8004d44:	4613      	mov	r3, r2
 8004d46:	009b      	lsls	r3, r3, #2
 8004d48:	4413      	add	r3, r2
 8004d4a:	00db      	lsls	r3, r3, #3
 8004d4c:	440b      	add	r3, r1
 8004d4e:	3301      	adds	r3, #1
 8004d50:	2201      	movs	r2, #1
 8004d52:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004d54:	7bfb      	ldrb	r3, [r7, #15]
 8004d56:	6879      	ldr	r1, [r7, #4]
 8004d58:	1c5a      	adds	r2, r3, #1
 8004d5a:	4613      	mov	r3, r2
 8004d5c:	009b      	lsls	r3, r3, #2
 8004d5e:	4413      	add	r3, r2
 8004d60:	00db      	lsls	r3, r3, #3
 8004d62:	440b      	add	r3, r1
 8004d64:	7bfa      	ldrb	r2, [r7, #15]
 8004d66:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004d68:	7bfa      	ldrb	r2, [r7, #15]
 8004d6a:	7bfb      	ldrb	r3, [r7, #15]
 8004d6c:	b298      	uxth	r0, r3
 8004d6e:	6879      	ldr	r1, [r7, #4]
 8004d70:	4613      	mov	r3, r2
 8004d72:	009b      	lsls	r3, r3, #2
 8004d74:	4413      	add	r3, r2
 8004d76:	00db      	lsls	r3, r3, #3
 8004d78:	440b      	add	r3, r1
 8004d7a:	3336      	adds	r3, #54	; 0x36
 8004d7c:	4602      	mov	r2, r0
 8004d7e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004d80:	7bfb      	ldrb	r3, [r7, #15]
 8004d82:	6879      	ldr	r1, [r7, #4]
 8004d84:	1c5a      	adds	r2, r3, #1
 8004d86:	4613      	mov	r3, r2
 8004d88:	009b      	lsls	r3, r3, #2
 8004d8a:	4413      	add	r3, r2
 8004d8c:	00db      	lsls	r3, r3, #3
 8004d8e:	440b      	add	r3, r1
 8004d90:	3303      	adds	r3, #3
 8004d92:	2200      	movs	r2, #0
 8004d94:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004d96:	7bfa      	ldrb	r2, [r7, #15]
 8004d98:	6879      	ldr	r1, [r7, #4]
 8004d9a:	4613      	mov	r3, r2
 8004d9c:	009b      	lsls	r3, r3, #2
 8004d9e:	4413      	add	r3, r2
 8004da0:	00db      	lsls	r3, r3, #3
 8004da2:	440b      	add	r3, r1
 8004da4:	3338      	adds	r3, #56	; 0x38
 8004da6:	2200      	movs	r2, #0
 8004da8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004daa:	7bfa      	ldrb	r2, [r7, #15]
 8004dac:	6879      	ldr	r1, [r7, #4]
 8004dae:	4613      	mov	r3, r2
 8004db0:	009b      	lsls	r3, r3, #2
 8004db2:	4413      	add	r3, r2
 8004db4:	00db      	lsls	r3, r3, #3
 8004db6:	440b      	add	r3, r1
 8004db8:	333c      	adds	r3, #60	; 0x3c
 8004dba:	2200      	movs	r2, #0
 8004dbc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004dbe:	7bfa      	ldrb	r2, [r7, #15]
 8004dc0:	6879      	ldr	r1, [r7, #4]
 8004dc2:	4613      	mov	r3, r2
 8004dc4:	009b      	lsls	r3, r3, #2
 8004dc6:	4413      	add	r3, r2
 8004dc8:	00db      	lsls	r3, r3, #3
 8004dca:	440b      	add	r3, r1
 8004dcc:	3340      	adds	r3, #64	; 0x40
 8004dce:	2200      	movs	r2, #0
 8004dd0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004dd2:	7bfb      	ldrb	r3, [r7, #15]
 8004dd4:	3301      	adds	r3, #1
 8004dd6:	73fb      	strb	r3, [r7, #15]
 8004dd8:	7bfa      	ldrb	r2, [r7, #15]
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	685b      	ldr	r3, [r3, #4]
 8004dde:	429a      	cmp	r2, r3
 8004de0:	d3ad      	bcc.n	8004d3e <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004de2:	2300      	movs	r3, #0
 8004de4:	73fb      	strb	r3, [r7, #15]
 8004de6:	e044      	b.n	8004e72 <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004de8:	7bfa      	ldrb	r2, [r7, #15]
 8004dea:	6879      	ldr	r1, [r7, #4]
 8004dec:	4613      	mov	r3, r2
 8004dee:	009b      	lsls	r3, r3, #2
 8004df0:	4413      	add	r3, r2
 8004df2:	00db      	lsls	r3, r3, #3
 8004df4:	440b      	add	r3, r1
 8004df6:	f203 1369 	addw	r3, r3, #361	; 0x169
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004dfe:	7bfa      	ldrb	r2, [r7, #15]
 8004e00:	6879      	ldr	r1, [r7, #4]
 8004e02:	4613      	mov	r3, r2
 8004e04:	009b      	lsls	r3, r3, #2
 8004e06:	4413      	add	r3, r2
 8004e08:	00db      	lsls	r3, r3, #3
 8004e0a:	440b      	add	r3, r1
 8004e0c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004e10:	7bfa      	ldrb	r2, [r7, #15]
 8004e12:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004e14:	7bfa      	ldrb	r2, [r7, #15]
 8004e16:	6879      	ldr	r1, [r7, #4]
 8004e18:	4613      	mov	r3, r2
 8004e1a:	009b      	lsls	r3, r3, #2
 8004e1c:	4413      	add	r3, r2
 8004e1e:	00db      	lsls	r3, r3, #3
 8004e20:	440b      	add	r3, r1
 8004e22:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8004e26:	2200      	movs	r2, #0
 8004e28:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004e2a:	7bfa      	ldrb	r2, [r7, #15]
 8004e2c:	6879      	ldr	r1, [r7, #4]
 8004e2e:	4613      	mov	r3, r2
 8004e30:	009b      	lsls	r3, r3, #2
 8004e32:	4413      	add	r3, r2
 8004e34:	00db      	lsls	r3, r3, #3
 8004e36:	440b      	add	r3, r1
 8004e38:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004e40:	7bfa      	ldrb	r2, [r7, #15]
 8004e42:	6879      	ldr	r1, [r7, #4]
 8004e44:	4613      	mov	r3, r2
 8004e46:	009b      	lsls	r3, r3, #2
 8004e48:	4413      	add	r3, r2
 8004e4a:	00db      	lsls	r3, r3, #3
 8004e4c:	440b      	add	r3, r1
 8004e4e:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8004e52:	2200      	movs	r2, #0
 8004e54:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004e56:	7bfa      	ldrb	r2, [r7, #15]
 8004e58:	6879      	ldr	r1, [r7, #4]
 8004e5a:	4613      	mov	r3, r2
 8004e5c:	009b      	lsls	r3, r3, #2
 8004e5e:	4413      	add	r3, r2
 8004e60:	00db      	lsls	r3, r3, #3
 8004e62:	440b      	add	r3, r1
 8004e64:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8004e68:	2200      	movs	r2, #0
 8004e6a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004e6c:	7bfb      	ldrb	r3, [r7, #15]
 8004e6e:	3301      	adds	r3, #1
 8004e70:	73fb      	strb	r3, [r7, #15]
 8004e72:	7bfa      	ldrb	r2, [r7, #15]
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	685b      	ldr	r3, [r3, #4]
 8004e78:	429a      	cmp	r2, r3
 8004e7a:	d3b5      	bcc.n	8004de8 <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	603b      	str	r3, [r7, #0]
 8004e82:	687e      	ldr	r6, [r7, #4]
 8004e84:	466d      	mov	r5, sp
 8004e86:	f106 0410 	add.w	r4, r6, #16
 8004e8a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004e8c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004e8e:	6823      	ldr	r3, [r4, #0]
 8004e90:	602b      	str	r3, [r5, #0]
 8004e92:	1d33      	adds	r3, r6, #4
 8004e94:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004e96:	6838      	ldr	r0, [r7, #0]
 8004e98:	f005 fb3e 	bl	800a518 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2201      	movs	r2, #1
 8004ea8:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	69db      	ldr	r3, [r3, #28]
 8004eb0:	2b01      	cmp	r3, #1
 8004eb2:	d102      	bne.n	8004eba <HAL_PCD_Init+0x1c0>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004eb4:	6878      	ldr	r0, [r7, #4]
 8004eb6:	f001 fc29 	bl	800670c <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8004eba:	2300      	movs	r3, #0
}
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	3714      	adds	r7, #20
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004ec4 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	b082      	sub	sp, #8
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004ed2:	2b01      	cmp	r3, #1
 8004ed4:	d101      	bne.n	8004eda <HAL_PCD_Start+0x16>
 8004ed6:	2302      	movs	r3, #2
 8004ed8:	e012      	b.n	8004f00 <HAL_PCD_Start+0x3c>
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	2201      	movs	r2, #1
 8004ede:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	f005 fae4 	bl	800a4b4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	f007 fcfd 	bl	800c8f0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	2200      	movs	r2, #0
 8004efa:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8004efe:	2300      	movs	r3, #0
}
 8004f00:	4618      	mov	r0, r3
 8004f02:	3708      	adds	r7, #8
 8004f04:	46bd      	mov	sp, r7
 8004f06:	bd80      	pop	{r7, pc}

08004f08 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	b084      	sub	sp, #16
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	4618      	mov	r0, r3
 8004f16:	f007 fd02 	bl	800c91e <USB_ReadInterrupts>
 8004f1a:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d003      	beq.n	8004f2e <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8004f26:	6878      	ldr	r0, [r7, #4]
 8004f28:	f000 fb26 	bl	8005578 <PCD_EP_ISR_Handler>

    return;
 8004f2c:	e110      	b.n	8005150 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d013      	beq.n	8004f60 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004f40:	b29a      	uxth	r2, r3
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f4a:	b292      	uxth	r2, r2
 8004f4c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8004f50:	6878      	ldr	r0, [r7, #4]
 8004f52:	f00b fcd4 	bl	80108fe <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8004f56:	2100      	movs	r1, #0
 8004f58:	6878      	ldr	r0, [r7, #4]
 8004f5a:	f000 f8fc 	bl	8005156 <HAL_PCD_SetAddress>

    return;
 8004f5e:	e0f7      	b.n	8005150 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d00c      	beq.n	8004f84 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004f72:	b29a      	uxth	r2, r3
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004f7c:	b292      	uxth	r2, r2
 8004f7e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8004f82:	e0e5      	b.n	8005150 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d00c      	beq.n	8004fa8 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004f96:	b29a      	uxth	r2, r3
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004fa0:	b292      	uxth	r2, r2
 8004fa2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8004fa6:	e0d3      	b.n	8005150 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d034      	beq.n	800501c <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004fba:	b29a      	uxth	r2, r3
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f022 0204 	bic.w	r2, r2, #4
 8004fc4:	b292      	uxth	r2, r2
 8004fc6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004fd2:	b29a      	uxth	r2, r3
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f022 0208 	bic.w	r2, r2, #8
 8004fdc:	b292      	uxth	r2, r2
 8004fde:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8004fe8:	2b01      	cmp	r3, #1
 8004fea:	d107      	bne.n	8004ffc <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2200      	movs	r2, #0
 8004ff0:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8004ff4:	2100      	movs	r1, #0
 8004ff6:	6878      	ldr	r0, [r7, #4]
 8004ff8:	f00b fe76 	bl	8010ce8 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8004ffc:	6878      	ldr	r0, [r7, #4]
 8004ffe:	f00b fcb7 	bl	8010970 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800500a:	b29a      	uxth	r2, r3
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005014:	b292      	uxth	r2, r2
 8005016:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800501a:	e099      	b.n	8005150 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005022:	2b00      	cmp	r3, #0
 8005024:	d027      	beq.n	8005076 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800502e:	b29a      	uxth	r2, r3
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f042 0208 	orr.w	r2, r2, #8
 8005038:	b292      	uxth	r2, r2
 800503a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005046:	b29a      	uxth	r2, r3
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005050:	b292      	uxth	r2, r2
 8005052:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800505e:	b29a      	uxth	r2, r3
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f042 0204 	orr.w	r2, r2, #4
 8005068:	b292      	uxth	r2, r2
 800506a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800506e:	6878      	ldr	r0, [r7, #4]
 8005070:	f00b fc64 	bl	801093c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8005074:	e06c      	b.n	8005150 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800507c:	2b00      	cmp	r3, #0
 800507e:	d040      	beq.n	8005102 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005088:	b29a      	uxth	r2, r3
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005092:	b292      	uxth	r2, r2
 8005094:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d12b      	bne.n	80050fa <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80050aa:	b29a      	uxth	r2, r3
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f042 0204 	orr.w	r2, r2, #4
 80050b4:	b292      	uxth	r2, r2
 80050b6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80050c2:	b29a      	uxth	r2, r3
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f042 0208 	orr.w	r2, r2, #8
 80050cc:	b292      	uxth	r2, r2
 80050ce:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	2201      	movs	r2, #1
 80050d6:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80050e2:	b29b      	uxth	r3, r3
 80050e4:	089b      	lsrs	r3, r3, #2
 80050e6:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80050f0:	2101      	movs	r1, #1
 80050f2:	6878      	ldr	r0, [r7, #4]
 80050f4:	f00b fdf8 	bl	8010ce8 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 80050f8:	e02a      	b.n	8005150 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 80050fa:	6878      	ldr	r0, [r7, #4]
 80050fc:	f00b fc1e 	bl	801093c <HAL_PCD_SuspendCallback>
    return;
 8005100:	e026      	b.n	8005150 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005108:	2b00      	cmp	r3, #0
 800510a:	d00f      	beq.n	800512c <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005114:	b29a      	uxth	r2, r3
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800511e:	b292      	uxth	r2, r2
 8005120:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8005124:	6878      	ldr	r0, [r7, #4]
 8005126:	f00b fbdc 	bl	80108e2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800512a:	e011      	b.n	8005150 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005132:	2b00      	cmp	r3, #0
 8005134:	d00c      	beq.n	8005150 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800513e:	b29a      	uxth	r2, r3
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005148:	b292      	uxth	r2, r2
 800514a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800514e:	bf00      	nop
  }
}
 8005150:	3710      	adds	r7, #16
 8005152:	46bd      	mov	sp, r7
 8005154:	bd80      	pop	{r7, pc}

08005156 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8005156:	b580      	push	{r7, lr}
 8005158:	b082      	sub	sp, #8
 800515a:	af00      	add	r7, sp, #0
 800515c:	6078      	str	r0, [r7, #4]
 800515e:	460b      	mov	r3, r1
 8005160:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005168:	2b01      	cmp	r3, #1
 800516a:	d101      	bne.n	8005170 <HAL_PCD_SetAddress+0x1a>
 800516c:	2302      	movs	r3, #2
 800516e:	e013      	b.n	8005198 <HAL_PCD_SetAddress+0x42>
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2201      	movs	r2, #1
 8005174:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	78fa      	ldrb	r2, [r7, #3]
 800517c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	78fa      	ldrb	r2, [r7, #3]
 8005186:	4611      	mov	r1, r2
 8005188:	4618      	mov	r0, r3
 800518a:	f007 fb9d 	bl	800c8c8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	2200      	movs	r2, #0
 8005192:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8005196:	2300      	movs	r3, #0
}
 8005198:	4618      	mov	r0, r3
 800519a:	3708      	adds	r7, #8
 800519c:	46bd      	mov	sp, r7
 800519e:	bd80      	pop	{r7, pc}

080051a0 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80051a0:	b580      	push	{r7, lr}
 80051a2:	b084      	sub	sp, #16
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	6078      	str	r0, [r7, #4]
 80051a8:	4608      	mov	r0, r1
 80051aa:	4611      	mov	r1, r2
 80051ac:	461a      	mov	r2, r3
 80051ae:	4603      	mov	r3, r0
 80051b0:	70fb      	strb	r3, [r7, #3]
 80051b2:	460b      	mov	r3, r1
 80051b4:	803b      	strh	r3, [r7, #0]
 80051b6:	4613      	mov	r3, r2
 80051b8:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80051ba:	2300      	movs	r3, #0
 80051bc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80051be:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	da0e      	bge.n	80051e4 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80051c6:	78fb      	ldrb	r3, [r7, #3]
 80051c8:	f003 0307 	and.w	r3, r3, #7
 80051cc:	1c5a      	adds	r2, r3, #1
 80051ce:	4613      	mov	r3, r2
 80051d0:	009b      	lsls	r3, r3, #2
 80051d2:	4413      	add	r3, r2
 80051d4:	00db      	lsls	r3, r3, #3
 80051d6:	687a      	ldr	r2, [r7, #4]
 80051d8:	4413      	add	r3, r2
 80051da:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	2201      	movs	r2, #1
 80051e0:	705a      	strb	r2, [r3, #1]
 80051e2:	e00e      	b.n	8005202 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80051e4:	78fb      	ldrb	r3, [r7, #3]
 80051e6:	f003 0207 	and.w	r2, r3, #7
 80051ea:	4613      	mov	r3, r2
 80051ec:	009b      	lsls	r3, r3, #2
 80051ee:	4413      	add	r3, r2
 80051f0:	00db      	lsls	r3, r3, #3
 80051f2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80051f6:	687a      	ldr	r2, [r7, #4]
 80051f8:	4413      	add	r3, r2
 80051fa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	2200      	movs	r2, #0
 8005200:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8005202:	78fb      	ldrb	r3, [r7, #3]
 8005204:	f003 0307 	and.w	r3, r3, #7
 8005208:	b2da      	uxtb	r2, r3
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800520e:	883a      	ldrh	r2, [r7, #0]
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	78ba      	ldrb	r2, [r7, #2]
 8005218:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	785b      	ldrb	r3, [r3, #1]
 800521e:	2b00      	cmp	r3, #0
 8005220:	d004      	beq.n	800522c <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	781b      	ldrb	r3, [r3, #0]
 8005226:	b29a      	uxth	r2, r3
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800522c:	78bb      	ldrb	r3, [r7, #2]
 800522e:	2b02      	cmp	r3, #2
 8005230:	d102      	bne.n	8005238 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	2200      	movs	r2, #0
 8005236:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800523e:	2b01      	cmp	r3, #1
 8005240:	d101      	bne.n	8005246 <HAL_PCD_EP_Open+0xa6>
 8005242:	2302      	movs	r3, #2
 8005244:	e00e      	b.n	8005264 <HAL_PCD_EP_Open+0xc4>
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	2201      	movs	r2, #1
 800524a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	68f9      	ldr	r1, [r7, #12]
 8005254:	4618      	mov	r0, r3
 8005256:	f005 f981 	bl	800a55c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	2200      	movs	r2, #0
 800525e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8005262:	7afb      	ldrb	r3, [r7, #11]
}
 8005264:	4618      	mov	r0, r3
 8005266:	3710      	adds	r7, #16
 8005268:	46bd      	mov	sp, r7
 800526a:	bd80      	pop	{r7, pc}

0800526c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800526c:	b580      	push	{r7, lr}
 800526e:	b084      	sub	sp, #16
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
 8005274:	460b      	mov	r3, r1
 8005276:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005278:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800527c:	2b00      	cmp	r3, #0
 800527e:	da0e      	bge.n	800529e <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005280:	78fb      	ldrb	r3, [r7, #3]
 8005282:	f003 0307 	and.w	r3, r3, #7
 8005286:	1c5a      	adds	r2, r3, #1
 8005288:	4613      	mov	r3, r2
 800528a:	009b      	lsls	r3, r3, #2
 800528c:	4413      	add	r3, r2
 800528e:	00db      	lsls	r3, r3, #3
 8005290:	687a      	ldr	r2, [r7, #4]
 8005292:	4413      	add	r3, r2
 8005294:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	2201      	movs	r2, #1
 800529a:	705a      	strb	r2, [r3, #1]
 800529c:	e00e      	b.n	80052bc <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800529e:	78fb      	ldrb	r3, [r7, #3]
 80052a0:	f003 0207 	and.w	r2, r3, #7
 80052a4:	4613      	mov	r3, r2
 80052a6:	009b      	lsls	r3, r3, #2
 80052a8:	4413      	add	r3, r2
 80052aa:	00db      	lsls	r3, r3, #3
 80052ac:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80052b0:	687a      	ldr	r2, [r7, #4]
 80052b2:	4413      	add	r3, r2
 80052b4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	2200      	movs	r2, #0
 80052ba:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80052bc:	78fb      	ldrb	r3, [r7, #3]
 80052be:	f003 0307 	and.w	r3, r3, #7
 80052c2:	b2da      	uxtb	r2, r3
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80052ce:	2b01      	cmp	r3, #1
 80052d0:	d101      	bne.n	80052d6 <HAL_PCD_EP_Close+0x6a>
 80052d2:	2302      	movs	r3, #2
 80052d4:	e00e      	b.n	80052f4 <HAL_PCD_EP_Close+0x88>
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	2201      	movs	r2, #1
 80052da:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	68f9      	ldr	r1, [r7, #12]
 80052e4:	4618      	mov	r0, r3
 80052e6:	f005 fccd 	bl	800ac84 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	2200      	movs	r2, #0
 80052ee:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 80052f2:	2300      	movs	r3, #0
}
 80052f4:	4618      	mov	r0, r3
 80052f6:	3710      	adds	r7, #16
 80052f8:	46bd      	mov	sp, r7
 80052fa:	bd80      	pop	{r7, pc}

080052fc <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80052fc:	b580      	push	{r7, lr}
 80052fe:	b086      	sub	sp, #24
 8005300:	af00      	add	r7, sp, #0
 8005302:	60f8      	str	r0, [r7, #12]
 8005304:	607a      	str	r2, [r7, #4]
 8005306:	603b      	str	r3, [r7, #0]
 8005308:	460b      	mov	r3, r1
 800530a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800530c:	7afb      	ldrb	r3, [r7, #11]
 800530e:	f003 0207 	and.w	r2, r3, #7
 8005312:	4613      	mov	r3, r2
 8005314:	009b      	lsls	r3, r3, #2
 8005316:	4413      	add	r3, r2
 8005318:	00db      	lsls	r3, r3, #3
 800531a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800531e:	68fa      	ldr	r2, [r7, #12]
 8005320:	4413      	add	r3, r2
 8005322:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005324:	697b      	ldr	r3, [r7, #20]
 8005326:	687a      	ldr	r2, [r7, #4]
 8005328:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800532a:	697b      	ldr	r3, [r7, #20]
 800532c:	683a      	ldr	r2, [r7, #0]
 800532e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8005330:	697b      	ldr	r3, [r7, #20]
 8005332:	2200      	movs	r2, #0
 8005334:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8005336:	697b      	ldr	r3, [r7, #20]
 8005338:	2200      	movs	r2, #0
 800533a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800533c:	7afb      	ldrb	r3, [r7, #11]
 800533e:	f003 0307 	and.w	r3, r3, #7
 8005342:	b2da      	uxtb	r2, r3
 8005344:	697b      	ldr	r3, [r7, #20]
 8005346:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005348:	7afb      	ldrb	r3, [r7, #11]
 800534a:	f003 0307 	and.w	r3, r3, #7
 800534e:	2b00      	cmp	r3, #0
 8005350:	d106      	bne.n	8005360 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	6979      	ldr	r1, [r7, #20]
 8005358:	4618      	mov	r0, r3
 800535a:	f005 fe80 	bl	800b05e <USB_EPStartXfer>
 800535e:	e005      	b.n	800536c <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	6979      	ldr	r1, [r7, #20]
 8005366:	4618      	mov	r0, r3
 8005368:	f005 fe79 	bl	800b05e <USB_EPStartXfer>
  }

  return HAL_OK;
 800536c:	2300      	movs	r3, #0
}
 800536e:	4618      	mov	r0, r3
 8005370:	3718      	adds	r7, #24
 8005372:	46bd      	mov	sp, r7
 8005374:	bd80      	pop	{r7, pc}

08005376 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005376:	b480      	push	{r7}
 8005378:	b083      	sub	sp, #12
 800537a:	af00      	add	r7, sp, #0
 800537c:	6078      	str	r0, [r7, #4]
 800537e:	460b      	mov	r3, r1
 8005380:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8005382:	78fb      	ldrb	r3, [r7, #3]
 8005384:	f003 0207 	and.w	r2, r3, #7
 8005388:	6879      	ldr	r1, [r7, #4]
 800538a:	4613      	mov	r3, r2
 800538c:	009b      	lsls	r3, r3, #2
 800538e:	4413      	add	r3, r2
 8005390:	00db      	lsls	r3, r3, #3
 8005392:	440b      	add	r3, r1
 8005394:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8005398:	681b      	ldr	r3, [r3, #0]
}
 800539a:	4618      	mov	r0, r3
 800539c:	370c      	adds	r7, #12
 800539e:	46bd      	mov	sp, r7
 80053a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a4:	4770      	bx	lr

080053a6 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80053a6:	b580      	push	{r7, lr}
 80053a8:	b086      	sub	sp, #24
 80053aa:	af00      	add	r7, sp, #0
 80053ac:	60f8      	str	r0, [r7, #12]
 80053ae:	607a      	str	r2, [r7, #4]
 80053b0:	603b      	str	r3, [r7, #0]
 80053b2:	460b      	mov	r3, r1
 80053b4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80053b6:	7afb      	ldrb	r3, [r7, #11]
 80053b8:	f003 0307 	and.w	r3, r3, #7
 80053bc:	1c5a      	adds	r2, r3, #1
 80053be:	4613      	mov	r3, r2
 80053c0:	009b      	lsls	r3, r3, #2
 80053c2:	4413      	add	r3, r2
 80053c4:	00db      	lsls	r3, r3, #3
 80053c6:	68fa      	ldr	r2, [r7, #12]
 80053c8:	4413      	add	r3, r2
 80053ca:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80053cc:	697b      	ldr	r3, [r7, #20]
 80053ce:	687a      	ldr	r2, [r7, #4]
 80053d0:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80053d2:	697b      	ldr	r3, [r7, #20]
 80053d4:	683a      	ldr	r2, [r7, #0]
 80053d6:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 80053d8:	697b      	ldr	r3, [r7, #20]
 80053da:	2201      	movs	r2, #1
 80053dc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 80053e0:	697b      	ldr	r3, [r7, #20]
 80053e2:	683a      	ldr	r2, [r7, #0]
 80053e4:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 80053e6:	697b      	ldr	r3, [r7, #20]
 80053e8:	2200      	movs	r2, #0
 80053ea:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80053ec:	697b      	ldr	r3, [r7, #20]
 80053ee:	2201      	movs	r2, #1
 80053f0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80053f2:	7afb      	ldrb	r3, [r7, #11]
 80053f4:	f003 0307 	and.w	r3, r3, #7
 80053f8:	b2da      	uxtb	r2, r3
 80053fa:	697b      	ldr	r3, [r7, #20]
 80053fc:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80053fe:	7afb      	ldrb	r3, [r7, #11]
 8005400:	f003 0307 	and.w	r3, r3, #7
 8005404:	2b00      	cmp	r3, #0
 8005406:	d106      	bne.n	8005416 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	6979      	ldr	r1, [r7, #20]
 800540e:	4618      	mov	r0, r3
 8005410:	f005 fe25 	bl	800b05e <USB_EPStartXfer>
 8005414:	e005      	b.n	8005422 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	6979      	ldr	r1, [r7, #20]
 800541c:	4618      	mov	r0, r3
 800541e:	f005 fe1e 	bl	800b05e <USB_EPStartXfer>
  }

  return HAL_OK;
 8005422:	2300      	movs	r3, #0
}
 8005424:	4618      	mov	r0, r3
 8005426:	3718      	adds	r7, #24
 8005428:	46bd      	mov	sp, r7
 800542a:	bd80      	pop	{r7, pc}

0800542c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800542c:	b580      	push	{r7, lr}
 800542e:	b084      	sub	sp, #16
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
 8005434:	460b      	mov	r3, r1
 8005436:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005438:	78fb      	ldrb	r3, [r7, #3]
 800543a:	f003 0207 	and.w	r2, r3, #7
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	685b      	ldr	r3, [r3, #4]
 8005442:	429a      	cmp	r2, r3
 8005444:	d901      	bls.n	800544a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8005446:	2301      	movs	r3, #1
 8005448:	e03e      	b.n	80054c8 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800544a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800544e:	2b00      	cmp	r3, #0
 8005450:	da0e      	bge.n	8005470 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005452:	78fb      	ldrb	r3, [r7, #3]
 8005454:	f003 0307 	and.w	r3, r3, #7
 8005458:	1c5a      	adds	r2, r3, #1
 800545a:	4613      	mov	r3, r2
 800545c:	009b      	lsls	r3, r3, #2
 800545e:	4413      	add	r3, r2
 8005460:	00db      	lsls	r3, r3, #3
 8005462:	687a      	ldr	r2, [r7, #4]
 8005464:	4413      	add	r3, r2
 8005466:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	2201      	movs	r2, #1
 800546c:	705a      	strb	r2, [r3, #1]
 800546e:	e00c      	b.n	800548a <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005470:	78fa      	ldrb	r2, [r7, #3]
 8005472:	4613      	mov	r3, r2
 8005474:	009b      	lsls	r3, r3, #2
 8005476:	4413      	add	r3, r2
 8005478:	00db      	lsls	r3, r3, #3
 800547a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800547e:	687a      	ldr	r2, [r7, #4]
 8005480:	4413      	add	r3, r2
 8005482:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	2200      	movs	r2, #0
 8005488:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	2201      	movs	r2, #1
 800548e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005490:	78fb      	ldrb	r3, [r7, #3]
 8005492:	f003 0307 	and.w	r3, r3, #7
 8005496:	b2da      	uxtb	r2, r3
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80054a2:	2b01      	cmp	r3, #1
 80054a4:	d101      	bne.n	80054aa <HAL_PCD_EP_SetStall+0x7e>
 80054a6:	2302      	movs	r3, #2
 80054a8:	e00e      	b.n	80054c8 <HAL_PCD_EP_SetStall+0x9c>
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	2201      	movs	r2, #1
 80054ae:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	68f9      	ldr	r1, [r7, #12]
 80054b8:	4618      	mov	r0, r3
 80054ba:	f007 f906 	bl	800c6ca <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	2200      	movs	r2, #0
 80054c2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80054c6:	2300      	movs	r3, #0
}
 80054c8:	4618      	mov	r0, r3
 80054ca:	3710      	adds	r7, #16
 80054cc:	46bd      	mov	sp, r7
 80054ce:	bd80      	pop	{r7, pc}

080054d0 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80054d0:	b580      	push	{r7, lr}
 80054d2:	b084      	sub	sp, #16
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]
 80054d8:	460b      	mov	r3, r1
 80054da:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80054dc:	78fb      	ldrb	r3, [r7, #3]
 80054de:	f003 020f 	and.w	r2, r3, #15
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	685b      	ldr	r3, [r3, #4]
 80054e6:	429a      	cmp	r2, r3
 80054e8:	d901      	bls.n	80054ee <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80054ea:	2301      	movs	r3, #1
 80054ec:	e040      	b.n	8005570 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80054ee:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	da0e      	bge.n	8005514 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80054f6:	78fb      	ldrb	r3, [r7, #3]
 80054f8:	f003 0307 	and.w	r3, r3, #7
 80054fc:	1c5a      	adds	r2, r3, #1
 80054fe:	4613      	mov	r3, r2
 8005500:	009b      	lsls	r3, r3, #2
 8005502:	4413      	add	r3, r2
 8005504:	00db      	lsls	r3, r3, #3
 8005506:	687a      	ldr	r2, [r7, #4]
 8005508:	4413      	add	r3, r2
 800550a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	2201      	movs	r2, #1
 8005510:	705a      	strb	r2, [r3, #1]
 8005512:	e00e      	b.n	8005532 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005514:	78fb      	ldrb	r3, [r7, #3]
 8005516:	f003 0207 	and.w	r2, r3, #7
 800551a:	4613      	mov	r3, r2
 800551c:	009b      	lsls	r3, r3, #2
 800551e:	4413      	add	r3, r2
 8005520:	00db      	lsls	r3, r3, #3
 8005522:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005526:	687a      	ldr	r2, [r7, #4]
 8005528:	4413      	add	r3, r2
 800552a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	2200      	movs	r2, #0
 8005530:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	2200      	movs	r2, #0
 8005536:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005538:	78fb      	ldrb	r3, [r7, #3]
 800553a:	f003 0307 	and.w	r3, r3, #7
 800553e:	b2da      	uxtb	r2, r3
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800554a:	2b01      	cmp	r3, #1
 800554c:	d101      	bne.n	8005552 <HAL_PCD_EP_ClrStall+0x82>
 800554e:	2302      	movs	r3, #2
 8005550:	e00e      	b.n	8005570 <HAL_PCD_EP_ClrStall+0xa0>
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	2201      	movs	r2, #1
 8005556:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	68f9      	ldr	r1, [r7, #12]
 8005560:	4618      	mov	r0, r3
 8005562:	f007 f903 	bl	800c76c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	2200      	movs	r2, #0
 800556a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800556e:	2300      	movs	r3, #0
}
 8005570:	4618      	mov	r0, r3
 8005572:	3710      	adds	r7, #16
 8005574:	46bd      	mov	sp, r7
 8005576:	bd80      	pop	{r7, pc}

08005578 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8005578:	b580      	push	{r7, lr}
 800557a:	b096      	sub	sp, #88	; 0x58
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
  uint16_t wEPVal;
  uint16_t TxPctSize;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8005580:	e39c      	b.n	8005cbc <PCD_EP_ISR_Handler+0x744>
  {
    wIstr = hpcd->Instance->ISTR;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800558a:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800558e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005592:	b2db      	uxtb	r3, r3
 8005594:	f003 030f 	and.w	r3, r3, #15
 8005598:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55

    if (epindex == 0U)
 800559c:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	f040 815e 	bne.w	8005862 <PCD_EP_ISR_Handler+0x2ea>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80055a6:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80055aa:	f003 0310 	and.w	r3, r3, #16
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d150      	bne.n	8005654 <PCD_EP_ISR_Handler+0xdc>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	881b      	ldrh	r3, [r3, #0]
 80055b8:	b29b      	uxth	r3, r3
 80055ba:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80055be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055c2:	81fb      	strh	r3, [r7, #14]
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681a      	ldr	r2, [r3, #0]
 80055c8:	89fb      	ldrh	r3, [r7, #14]
 80055ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80055ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80055d2:	b29b      	uxth	r3, r3
 80055d4:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	3328      	adds	r3, #40	; 0x28
 80055da:	64fb      	str	r3, [r7, #76]	; 0x4c

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80055e4:	b29b      	uxth	r3, r3
 80055e6:	461a      	mov	r2, r3
 80055e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80055ea:	781b      	ldrb	r3, [r3, #0]
 80055ec:	00db      	lsls	r3, r3, #3
 80055ee:	4413      	add	r3, r2
 80055f0:	687a      	ldr	r2, [r7, #4]
 80055f2:	6812      	ldr	r2, [r2, #0]
 80055f4:	4413      	add	r3, r2
 80055f6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80055fa:	881b      	ldrh	r3, [r3, #0]
 80055fc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005600:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005602:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8005604:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005606:	695a      	ldr	r2, [r3, #20]
 8005608:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800560a:	69db      	ldr	r3, [r3, #28]
 800560c:	441a      	add	r2, r3
 800560e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005610:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8005612:	2100      	movs	r1, #0
 8005614:	6878      	ldr	r0, [r7, #4]
 8005616:	f00b f94a 	bl	80108ae <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005620:	b2db      	uxtb	r3, r3
 8005622:	2b00      	cmp	r3, #0
 8005624:	f000 834a 	beq.w	8005cbc <PCD_EP_ISR_Handler+0x744>
 8005628:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800562a:	699b      	ldr	r3, [r3, #24]
 800562c:	2b00      	cmp	r3, #0
 800562e:	f040 8345 	bne.w	8005cbc <PCD_EP_ISR_Handler+0x744>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005638:	b2db      	uxtb	r3, r3
 800563a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800563e:	b2da      	uxtb	r2, r3
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	b292      	uxth	r2, r2
 8005646:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	2200      	movs	r2, #0
 800564e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8005652:	e333      	b.n	8005cbc <PCD_EP_ISR_Handler+0x744>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800565a:	64fb      	str	r3, [r7, #76]	; 0x4c
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	881b      	ldrh	r3, [r3, #0]
 8005662:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8005666:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800566a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800566e:	2b00      	cmp	r3, #0
 8005670:	d032      	beq.n	80056d8 <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800567a:	b29b      	uxth	r3, r3
 800567c:	461a      	mov	r2, r3
 800567e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005680:	781b      	ldrb	r3, [r3, #0]
 8005682:	00db      	lsls	r3, r3, #3
 8005684:	4413      	add	r3, r2
 8005686:	687a      	ldr	r2, [r7, #4]
 8005688:	6812      	ldr	r2, [r2, #0]
 800568a:	4413      	add	r3, r2
 800568c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005690:	881b      	ldrh	r3, [r3, #0]
 8005692:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005696:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005698:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	6818      	ldr	r0, [r3, #0]
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 80056a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80056a6:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80056a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80056aa:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80056ac:	b29b      	uxth	r3, r3
 80056ae:	f007 f988 	bl	800c9c2 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	881b      	ldrh	r3, [r3, #0]
 80056b8:	b29a      	uxth	r2, r3
 80056ba:	f640 738f 	movw	r3, #3983	; 0xf8f
 80056be:	4013      	ands	r3, r2
 80056c0:	823b      	strh	r3, [r7, #16]
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	8a3a      	ldrh	r2, [r7, #16]
 80056c8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80056cc:	b292      	uxth	r2, r2
 80056ce:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80056d0:	6878      	ldr	r0, [r7, #4]
 80056d2:	f00b f8bf 	bl	8010854 <HAL_PCD_SetupStageCallback>
 80056d6:	e2f1      	b.n	8005cbc <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80056d8:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 80056dc:	2b00      	cmp	r3, #0
 80056de:	f280 82ed 	bge.w	8005cbc <PCD_EP_ISR_Handler+0x744>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	881b      	ldrh	r3, [r3, #0]
 80056e8:	b29a      	uxth	r2, r3
 80056ea:	f640 738f 	movw	r3, #3983	; 0xf8f
 80056ee:	4013      	ands	r3, r2
 80056f0:	83fb      	strh	r3, [r7, #30]
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	8bfa      	ldrh	r2, [r7, #30]
 80056f8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80056fc:	b292      	uxth	r2, r2
 80056fe:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005708:	b29b      	uxth	r3, r3
 800570a:	461a      	mov	r2, r3
 800570c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800570e:	781b      	ldrb	r3, [r3, #0]
 8005710:	00db      	lsls	r3, r3, #3
 8005712:	4413      	add	r3, r2
 8005714:	687a      	ldr	r2, [r7, #4]
 8005716:	6812      	ldr	r2, [r2, #0]
 8005718:	4413      	add	r3, r2
 800571a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800571e:	881b      	ldrh	r3, [r3, #0]
 8005720:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005724:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005726:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8005728:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800572a:	69db      	ldr	r3, [r3, #28]
 800572c:	2b00      	cmp	r3, #0
 800572e:	d019      	beq.n	8005764 <PCD_EP_ISR_Handler+0x1ec>
 8005730:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005732:	695b      	ldr	r3, [r3, #20]
 8005734:	2b00      	cmp	r3, #0
 8005736:	d015      	beq.n	8005764 <PCD_EP_ISR_Handler+0x1ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	6818      	ldr	r0, [r3, #0]
 800573c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800573e:	6959      	ldr	r1, [r3, #20]
 8005740:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005742:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8005744:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005746:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8005748:	b29b      	uxth	r3, r3
 800574a:	f007 f93a 	bl	800c9c2 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800574e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005750:	695a      	ldr	r2, [r3, #20]
 8005752:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005754:	69db      	ldr	r3, [r3, #28]
 8005756:	441a      	add	r2, r3
 8005758:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800575a:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800575c:	2100      	movs	r1, #0
 800575e:	6878      	ldr	r0, [r7, #4]
 8005760:	f00b f88a 	bl	8010878 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	881b      	ldrh	r3, [r3, #0]
 800576a:	b29b      	uxth	r3, r3
 800576c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005770:	2b00      	cmp	r3, #0
 8005772:	f040 82a3 	bne.w	8005cbc <PCD_EP_ISR_Handler+0x744>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	61bb      	str	r3, [r7, #24]
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005784:	b29b      	uxth	r3, r3
 8005786:	461a      	mov	r2, r3
 8005788:	69bb      	ldr	r3, [r7, #24]
 800578a:	4413      	add	r3, r2
 800578c:	61bb      	str	r3, [r7, #24]
 800578e:	69bb      	ldr	r3, [r7, #24]
 8005790:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005794:	617b      	str	r3, [r7, #20]
 8005796:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005798:	691b      	ldr	r3, [r3, #16]
 800579a:	2b3e      	cmp	r3, #62	; 0x3e
 800579c:	d918      	bls.n	80057d0 <PCD_EP_ISR_Handler+0x258>
 800579e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80057a0:	691b      	ldr	r3, [r3, #16]
 80057a2:	095b      	lsrs	r3, r3, #5
 80057a4:	647b      	str	r3, [r7, #68]	; 0x44
 80057a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80057a8:	691b      	ldr	r3, [r3, #16]
 80057aa:	f003 031f 	and.w	r3, r3, #31
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d102      	bne.n	80057b8 <PCD_EP_ISR_Handler+0x240>
 80057b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80057b4:	3b01      	subs	r3, #1
 80057b6:	647b      	str	r3, [r7, #68]	; 0x44
 80057b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80057ba:	b29b      	uxth	r3, r3
 80057bc:	029b      	lsls	r3, r3, #10
 80057be:	b29b      	uxth	r3, r3
 80057c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80057c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80057c8:	b29a      	uxth	r2, r3
 80057ca:	697b      	ldr	r3, [r7, #20]
 80057cc:	801a      	strh	r2, [r3, #0]
 80057ce:	e029      	b.n	8005824 <PCD_EP_ISR_Handler+0x2ac>
 80057d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80057d2:	691b      	ldr	r3, [r3, #16]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d112      	bne.n	80057fe <PCD_EP_ISR_Handler+0x286>
 80057d8:	697b      	ldr	r3, [r7, #20]
 80057da:	881b      	ldrh	r3, [r3, #0]
 80057dc:	b29b      	uxth	r3, r3
 80057de:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80057e2:	b29a      	uxth	r2, r3
 80057e4:	697b      	ldr	r3, [r7, #20]
 80057e6:	801a      	strh	r2, [r3, #0]
 80057e8:	697b      	ldr	r3, [r7, #20]
 80057ea:	881b      	ldrh	r3, [r3, #0]
 80057ec:	b29b      	uxth	r3, r3
 80057ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80057f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80057f6:	b29a      	uxth	r2, r3
 80057f8:	697b      	ldr	r3, [r7, #20]
 80057fa:	801a      	strh	r2, [r3, #0]
 80057fc:	e012      	b.n	8005824 <PCD_EP_ISR_Handler+0x2ac>
 80057fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005800:	691b      	ldr	r3, [r3, #16]
 8005802:	085b      	lsrs	r3, r3, #1
 8005804:	647b      	str	r3, [r7, #68]	; 0x44
 8005806:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005808:	691b      	ldr	r3, [r3, #16]
 800580a:	f003 0301 	and.w	r3, r3, #1
 800580e:	2b00      	cmp	r3, #0
 8005810:	d002      	beq.n	8005818 <PCD_EP_ISR_Handler+0x2a0>
 8005812:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005814:	3301      	adds	r3, #1
 8005816:	647b      	str	r3, [r7, #68]	; 0x44
 8005818:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800581a:	b29b      	uxth	r3, r3
 800581c:	029b      	lsls	r3, r3, #10
 800581e:	b29a      	uxth	r2, r3
 8005820:	697b      	ldr	r3, [r7, #20]
 8005822:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	881b      	ldrh	r3, [r3, #0]
 800582a:	b29b      	uxth	r3, r3
 800582c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005830:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005834:	827b      	strh	r3, [r7, #18]
 8005836:	8a7b      	ldrh	r3, [r7, #18]
 8005838:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800583c:	827b      	strh	r3, [r7, #18]
 800583e:	8a7b      	ldrh	r3, [r7, #18]
 8005840:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005844:	827b      	strh	r3, [r7, #18]
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681a      	ldr	r2, [r3, #0]
 800584a:	8a7b      	ldrh	r3, [r7, #18]
 800584c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005850:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005854:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005858:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800585c:	b29b      	uxth	r3, r3
 800585e:	8013      	strh	r3, [r2, #0]
 8005860:	e22c      	b.n	8005cbc <PCD_EP_ISR_Handler+0x744>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	461a      	mov	r2, r3
 8005868:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800586c:	009b      	lsls	r3, r3, #2
 800586e:	4413      	add	r3, r2
 8005870:	881b      	ldrh	r3, [r3, #0]
 8005872:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8005876:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 800587a:	2b00      	cmp	r3, #0
 800587c:	f280 80f6 	bge.w	8005a6c <PCD_EP_ISR_Handler+0x4f4>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	461a      	mov	r2, r3
 8005886:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800588a:	009b      	lsls	r3, r3, #2
 800588c:	4413      	add	r3, r2
 800588e:	881b      	ldrh	r3, [r3, #0]
 8005890:	b29a      	uxth	r2, r3
 8005892:	f640 738f 	movw	r3, #3983	; 0xf8f
 8005896:	4013      	ands	r3, r2
 8005898:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	461a      	mov	r2, r3
 80058a2:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80058a6:	009b      	lsls	r3, r3, #2
 80058a8:	4413      	add	r3, r2
 80058aa:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 80058ae:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80058b2:	b292      	uxth	r2, r2
 80058b4:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80058b6:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 80058ba:	4613      	mov	r3, r2
 80058bc:	009b      	lsls	r3, r3, #2
 80058be:	4413      	add	r3, r2
 80058c0:	00db      	lsls	r3, r3, #3
 80058c2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80058c6:	687a      	ldr	r2, [r7, #4]
 80058c8:	4413      	add	r3, r2
 80058ca:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80058cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80058ce:	7b1b      	ldrb	r3, [r3, #12]
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d123      	bne.n	800591c <PCD_EP_ISR_Handler+0x3a4>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80058dc:	b29b      	uxth	r3, r3
 80058de:	461a      	mov	r2, r3
 80058e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80058e2:	781b      	ldrb	r3, [r3, #0]
 80058e4:	00db      	lsls	r3, r3, #3
 80058e6:	4413      	add	r3, r2
 80058e8:	687a      	ldr	r2, [r7, #4]
 80058ea:	6812      	ldr	r2, [r2, #0]
 80058ec:	4413      	add	r3, r2
 80058ee:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80058f2:	881b      	ldrh	r3, [r3, #0]
 80058f4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80058f8:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

          if (count != 0U)
 80058fc:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005900:	2b00      	cmp	r3, #0
 8005902:	f000 808e 	beq.w	8005a22 <PCD_EP_ISR_Handler+0x4aa>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	6818      	ldr	r0, [r3, #0]
 800590a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800590c:	6959      	ldr	r1, [r3, #20]
 800590e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005910:	88da      	ldrh	r2, [r3, #6]
 8005912:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005916:	f007 f854 	bl	800c9c2 <USB_ReadPMA>
 800591a:	e082      	b.n	8005a22 <PCD_EP_ISR_Handler+0x4aa>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800591c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800591e:	78db      	ldrb	r3, [r3, #3]
 8005920:	2b02      	cmp	r3, #2
 8005922:	d10a      	bne.n	800593a <PCD_EP_ISR_Handler+0x3c2>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8005924:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8005928:	461a      	mov	r2, r3
 800592a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800592c:	6878      	ldr	r0, [r7, #4]
 800592e:	f000 f9d3 	bl	8005cd8 <HAL_PCD_EP_DB_Receive>
 8005932:	4603      	mov	r3, r0
 8005934:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8005938:	e073      	b.n	8005a22 <PCD_EP_ISR_Handler+0x4aa>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	461a      	mov	r2, r3
 8005940:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005942:	781b      	ldrb	r3, [r3, #0]
 8005944:	009b      	lsls	r3, r3, #2
 8005946:	4413      	add	r3, r2
 8005948:	881b      	ldrh	r3, [r3, #0]
 800594a:	b29b      	uxth	r3, r3
 800594c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005950:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005954:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	461a      	mov	r2, r3
 800595e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005960:	781b      	ldrb	r3, [r3, #0]
 8005962:	009b      	lsls	r3, r3, #2
 8005964:	441a      	add	r2, r3
 8005966:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800596a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800596e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005972:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005976:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800597a:	b29b      	uxth	r3, r3
 800597c:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	461a      	mov	r2, r3
 8005984:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005986:	781b      	ldrb	r3, [r3, #0]
 8005988:	009b      	lsls	r3, r3, #2
 800598a:	4413      	add	r3, r2
 800598c:	881b      	ldrh	r3, [r3, #0]
 800598e:	b29b      	uxth	r3, r3
 8005990:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005994:	2b00      	cmp	r3, #0
 8005996:	d022      	beq.n	80059de <PCD_EP_ISR_Handler+0x466>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80059a0:	b29b      	uxth	r3, r3
 80059a2:	461a      	mov	r2, r3
 80059a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80059a6:	781b      	ldrb	r3, [r3, #0]
 80059a8:	00db      	lsls	r3, r3, #3
 80059aa:	4413      	add	r3, r2
 80059ac:	687a      	ldr	r2, [r7, #4]
 80059ae:	6812      	ldr	r2, [r2, #0]
 80059b0:	4413      	add	r3, r2
 80059b2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80059b6:	881b      	ldrh	r3, [r3, #0]
 80059b8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80059bc:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 80059c0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d02c      	beq.n	8005a22 <PCD_EP_ISR_Handler+0x4aa>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	6818      	ldr	r0, [r3, #0]
 80059cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80059ce:	6959      	ldr	r1, [r3, #20]
 80059d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80059d2:	891a      	ldrh	r2, [r3, #8]
 80059d4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80059d8:	f006 fff3 	bl	800c9c2 <USB_ReadPMA>
 80059dc:	e021      	b.n	8005a22 <PCD_EP_ISR_Handler+0x4aa>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80059e6:	b29b      	uxth	r3, r3
 80059e8:	461a      	mov	r2, r3
 80059ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80059ec:	781b      	ldrb	r3, [r3, #0]
 80059ee:	00db      	lsls	r3, r3, #3
 80059f0:	4413      	add	r3, r2
 80059f2:	687a      	ldr	r2, [r7, #4]
 80059f4:	6812      	ldr	r2, [r2, #0]
 80059f6:	4413      	add	r3, r2
 80059f8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80059fc:	881b      	ldrh	r3, [r3, #0]
 80059fe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005a02:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 8005a06:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d009      	beq.n	8005a22 <PCD_EP_ISR_Handler+0x4aa>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	6818      	ldr	r0, [r3, #0]
 8005a12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a14:	6959      	ldr	r1, [r3, #20]
 8005a16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a18:	895a      	ldrh	r2, [r3, #10]
 8005a1a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005a1e:	f006 ffd0 	bl	800c9c2 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8005a22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a24:	69da      	ldr	r2, [r3, #28]
 8005a26:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005a2a:	441a      	add	r2, r3
 8005a2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a2e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8005a30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a32:	695a      	ldr	r2, [r3, #20]
 8005a34:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005a38:	441a      	add	r2, r3
 8005a3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a3c:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8005a3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a40:	699b      	ldr	r3, [r3, #24]
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d005      	beq.n	8005a52 <PCD_EP_ISR_Handler+0x4da>
 8005a46:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8005a4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a4c:	691b      	ldr	r3, [r3, #16]
 8005a4e:	429a      	cmp	r2, r3
 8005a50:	d206      	bcs.n	8005a60 <PCD_EP_ISR_Handler+0x4e8>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8005a52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a54:	781b      	ldrb	r3, [r3, #0]
 8005a56:	4619      	mov	r1, r3
 8005a58:	6878      	ldr	r0, [r7, #4]
 8005a5a:	f00a ff0d 	bl	8010878 <HAL_PCD_DataOutStageCallback>
 8005a5e:	e005      	b.n	8005a6c <PCD_EP_ISR_Handler+0x4f4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8005a66:	4618      	mov	r0, r3
 8005a68:	f005 faf9 	bl	800b05e <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8005a6c:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8005a70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	f000 8121 	beq.w	8005cbc <PCD_EP_ISR_Handler+0x744>
      {
        ep = &hpcd->IN_ep[epindex];
 8005a7a:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8005a7e:	1c5a      	adds	r2, r3, #1
 8005a80:	4613      	mov	r3, r2
 8005a82:	009b      	lsls	r3, r3, #2
 8005a84:	4413      	add	r3, r2
 8005a86:	00db      	lsls	r3, r3, #3
 8005a88:	687a      	ldr	r2, [r7, #4]
 8005a8a:	4413      	add	r3, r2
 8005a8c:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	461a      	mov	r2, r3
 8005a94:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8005a98:	009b      	lsls	r3, r3, #2
 8005a9a:	4413      	add	r3, r2
 8005a9c:	881b      	ldrh	r3, [r3, #0]
 8005a9e:	b29b      	uxth	r3, r3
 8005aa0:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8005aa4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005aa8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	461a      	mov	r2, r3
 8005ab2:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8005ab6:	009b      	lsls	r3, r3, #2
 8005ab8:	441a      	add	r2, r3
 8005aba:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8005abe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ac2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ac6:	b29b      	uxth	r3, r3
 8005ac8:	8013      	strh	r3, [r2, #0]

        if (ep->type != EP_TYPE_BULK)
 8005aca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005acc:	78db      	ldrb	r3, [r3, #3]
 8005ace:	2b02      	cmp	r3, #2
 8005ad0:	f000 80a2 	beq.w	8005c18 <PCD_EP_ISR_Handler+0x6a0>
        {
          ep->xfer_len = 0U;
 8005ad4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ad6:	2200      	movs	r2, #0
 8005ad8:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8005ada:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005adc:	7b1b      	ldrb	r3, [r3, #12]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	f000 8093 	beq.w	8005c0a <PCD_EP_ISR_Handler+0x692>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005ae4:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8005ae8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d046      	beq.n	8005b7e <PCD_EP_ISR_Handler+0x606>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005af0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005af2:	785b      	ldrb	r3, [r3, #1]
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d126      	bne.n	8005b46 <PCD_EP_ISR_Handler+0x5ce>
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	627b      	str	r3, [r7, #36]	; 0x24
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b06:	b29b      	uxth	r3, r3
 8005b08:	461a      	mov	r2, r3
 8005b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b0c:	4413      	add	r3, r2
 8005b0e:	627b      	str	r3, [r7, #36]	; 0x24
 8005b10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b12:	781b      	ldrb	r3, [r3, #0]
 8005b14:	00da      	lsls	r2, r3, #3
 8005b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b18:	4413      	add	r3, r2
 8005b1a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005b1e:	623b      	str	r3, [r7, #32]
 8005b20:	6a3b      	ldr	r3, [r7, #32]
 8005b22:	881b      	ldrh	r3, [r3, #0]
 8005b24:	b29b      	uxth	r3, r3
 8005b26:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005b2a:	b29a      	uxth	r2, r3
 8005b2c:	6a3b      	ldr	r3, [r7, #32]
 8005b2e:	801a      	strh	r2, [r3, #0]
 8005b30:	6a3b      	ldr	r3, [r7, #32]
 8005b32:	881b      	ldrh	r3, [r3, #0]
 8005b34:	b29b      	uxth	r3, r3
 8005b36:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b3a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b3e:	b29a      	uxth	r2, r3
 8005b40:	6a3b      	ldr	r3, [r7, #32]
 8005b42:	801a      	strh	r2, [r3, #0]
 8005b44:	e061      	b.n	8005c0a <PCD_EP_ISR_Handler+0x692>
 8005b46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b48:	785b      	ldrb	r3, [r3, #1]
 8005b4a:	2b01      	cmp	r3, #1
 8005b4c:	d15d      	bne.n	8005c0a <PCD_EP_ISR_Handler+0x692>
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b5c:	b29b      	uxth	r3, r3
 8005b5e:	461a      	mov	r2, r3
 8005b60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b62:	4413      	add	r3, r2
 8005b64:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005b66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b68:	781b      	ldrb	r3, [r3, #0]
 8005b6a:	00da      	lsls	r2, r3, #3
 8005b6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b6e:	4413      	add	r3, r2
 8005b70:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005b74:	62bb      	str	r3, [r7, #40]	; 0x28
 8005b76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b78:	2200      	movs	r2, #0
 8005b7a:	801a      	strh	r2, [r3, #0]
 8005b7c:	e045      	b.n	8005c0a <PCD_EP_ISR_Handler+0x692>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005b84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b86:	785b      	ldrb	r3, [r3, #1]
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d126      	bne.n	8005bda <PCD_EP_ISR_Handler+0x662>
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	637b      	str	r3, [r7, #52]	; 0x34
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b9a:	b29b      	uxth	r3, r3
 8005b9c:	461a      	mov	r2, r3
 8005b9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ba0:	4413      	add	r3, r2
 8005ba2:	637b      	str	r3, [r7, #52]	; 0x34
 8005ba4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ba6:	781b      	ldrb	r3, [r3, #0]
 8005ba8:	00da      	lsls	r2, r3, #3
 8005baa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005bac:	4413      	add	r3, r2
 8005bae:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005bb2:	633b      	str	r3, [r7, #48]	; 0x30
 8005bb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bb6:	881b      	ldrh	r3, [r3, #0]
 8005bb8:	b29b      	uxth	r3, r3
 8005bba:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005bbe:	b29a      	uxth	r2, r3
 8005bc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bc2:	801a      	strh	r2, [r3, #0]
 8005bc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bc6:	881b      	ldrh	r3, [r3, #0]
 8005bc8:	b29b      	uxth	r3, r3
 8005bca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005bce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005bd2:	b29a      	uxth	r2, r3
 8005bd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bd6:	801a      	strh	r2, [r3, #0]
 8005bd8:	e017      	b.n	8005c0a <PCD_EP_ISR_Handler+0x692>
 8005bda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005bdc:	785b      	ldrb	r3, [r3, #1]
 8005bde:	2b01      	cmp	r3, #1
 8005be0:	d113      	bne.n	8005c0a <PCD_EP_ISR_Handler+0x692>
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005bea:	b29b      	uxth	r3, r3
 8005bec:	461a      	mov	r2, r3
 8005bee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005bf0:	4413      	add	r3, r2
 8005bf2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005bf4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005bf6:	781b      	ldrb	r3, [r3, #0]
 8005bf8:	00da      	lsls	r2, r3, #3
 8005bfa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005bfc:	4413      	add	r3, r2
 8005bfe:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005c02:	63bb      	str	r3, [r7, #56]	; 0x38
 8005c04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c06:	2200      	movs	r2, #0
 8005c08:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005c0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c0c:	781b      	ldrb	r3, [r3, #0]
 8005c0e:	4619      	mov	r1, r3
 8005c10:	6878      	ldr	r0, [r7, #4]
 8005c12:	f00a fe4c 	bl	80108ae <HAL_PCD_DataInStageCallback>
 8005c16:	e051      	b.n	8005cbc <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Bulk Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8005c18:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8005c1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d144      	bne.n	8005cae <PCD_EP_ISR_Handler+0x736>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c2c:	b29b      	uxth	r3, r3
 8005c2e:	461a      	mov	r2, r3
 8005c30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c32:	781b      	ldrb	r3, [r3, #0]
 8005c34:	00db      	lsls	r3, r3, #3
 8005c36:	4413      	add	r3, r2
 8005c38:	687a      	ldr	r2, [r7, #4]
 8005c3a:	6812      	ldr	r2, [r2, #0]
 8005c3c:	4413      	add	r3, r2
 8005c3e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005c42:	881b      	ldrh	r3, [r3, #0]
 8005c44:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005c48:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8005c4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c4e:	699a      	ldr	r2, [r3, #24]
 8005c50:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005c54:	429a      	cmp	r2, r3
 8005c56:	d907      	bls.n	8005c68 <PCD_EP_ISR_Handler+0x6f0>
            {
              ep->xfer_len -= TxPctSize;
 8005c58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c5a:	699a      	ldr	r2, [r3, #24]
 8005c5c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005c60:	1ad2      	subs	r2, r2, r3
 8005c62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c64:	619a      	str	r2, [r3, #24]
 8005c66:	e002      	b.n	8005c6e <PCD_EP_ISR_Handler+0x6f6>
            }
            else
            {
              ep->xfer_len = 0U;
 8005c68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c6a:	2200      	movs	r2, #0
 8005c6c:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8005c6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c70:	699b      	ldr	r3, [r3, #24]
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d106      	bne.n	8005c84 <PCD_EP_ISR_Handler+0x70c>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005c76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c78:	781b      	ldrb	r3, [r3, #0]
 8005c7a:	4619      	mov	r1, r3
 8005c7c:	6878      	ldr	r0, [r7, #4]
 8005c7e:	f00a fe16 	bl	80108ae <HAL_PCD_DataInStageCallback>
 8005c82:	e01b      	b.n	8005cbc <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8005c84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c86:	695a      	ldr	r2, [r3, #20]
 8005c88:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005c8c:	441a      	add	r2, r3
 8005c8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c90:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8005c92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c94:	69da      	ldr	r2, [r3, #28]
 8005c96:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005c9a:	441a      	add	r2, r3
 8005c9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c9e:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	f005 f9d9 	bl	800b05e <USB_EPStartXfer>
 8005cac:	e006      	b.n	8005cbc <PCD_EP_ISR_Handler+0x744>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8005cae:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8005cb2:	461a      	mov	r2, r3
 8005cb4:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8005cb6:	6878      	ldr	r0, [r7, #4]
 8005cb8:	f000 f917 	bl	8005eea <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005cc4:	b29b      	uxth	r3, r3
 8005cc6:	b21b      	sxth	r3, r3
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	f6ff ac5a 	blt.w	8005582 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8005cce:	2300      	movs	r3, #0
}
 8005cd0:	4618      	mov	r0, r3
 8005cd2:	3758      	adds	r7, #88	; 0x58
 8005cd4:	46bd      	mov	sp, r7
 8005cd6:	bd80      	pop	{r7, pc}

08005cd8 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8005cd8:	b580      	push	{r7, lr}
 8005cda:	b088      	sub	sp, #32
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	60f8      	str	r0, [r7, #12]
 8005ce0:	60b9      	str	r1, [r7, #8]
 8005ce2:	4613      	mov	r3, r2
 8005ce4:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005ce6:	88fb      	ldrh	r3, [r7, #6]
 8005ce8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d07c      	beq.n	8005dea <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005cf8:	b29b      	uxth	r3, r3
 8005cfa:	461a      	mov	r2, r3
 8005cfc:	68bb      	ldr	r3, [r7, #8]
 8005cfe:	781b      	ldrb	r3, [r3, #0]
 8005d00:	00db      	lsls	r3, r3, #3
 8005d02:	4413      	add	r3, r2
 8005d04:	68fa      	ldr	r2, [r7, #12]
 8005d06:	6812      	ldr	r2, [r2, #0]
 8005d08:	4413      	add	r3, r2
 8005d0a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005d0e:	881b      	ldrh	r3, [r3, #0]
 8005d10:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005d14:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8005d16:	68bb      	ldr	r3, [r7, #8]
 8005d18:	699a      	ldr	r2, [r3, #24]
 8005d1a:	8b7b      	ldrh	r3, [r7, #26]
 8005d1c:	429a      	cmp	r2, r3
 8005d1e:	d306      	bcc.n	8005d2e <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8005d20:	68bb      	ldr	r3, [r7, #8]
 8005d22:	699a      	ldr	r2, [r3, #24]
 8005d24:	8b7b      	ldrh	r3, [r7, #26]
 8005d26:	1ad2      	subs	r2, r2, r3
 8005d28:	68bb      	ldr	r3, [r7, #8]
 8005d2a:	619a      	str	r2, [r3, #24]
 8005d2c:	e002      	b.n	8005d34 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8005d2e:	68bb      	ldr	r3, [r7, #8]
 8005d30:	2200      	movs	r2, #0
 8005d32:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8005d34:	68bb      	ldr	r3, [r7, #8]
 8005d36:	699b      	ldr	r3, [r3, #24]
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d123      	bne.n	8005d84 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	461a      	mov	r2, r3
 8005d42:	68bb      	ldr	r3, [r7, #8]
 8005d44:	781b      	ldrb	r3, [r3, #0]
 8005d46:	009b      	lsls	r3, r3, #2
 8005d48:	4413      	add	r3, r2
 8005d4a:	881b      	ldrh	r3, [r3, #0]
 8005d4c:	b29b      	uxth	r3, r3
 8005d4e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005d52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d56:	833b      	strh	r3, [r7, #24]
 8005d58:	8b3b      	ldrh	r3, [r7, #24]
 8005d5a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005d5e:	833b      	strh	r3, [r7, #24]
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	461a      	mov	r2, r3
 8005d66:	68bb      	ldr	r3, [r7, #8]
 8005d68:	781b      	ldrb	r3, [r3, #0]
 8005d6a:	009b      	lsls	r3, r3, #2
 8005d6c:	441a      	add	r2, r3
 8005d6e:	8b3b      	ldrh	r3, [r7, #24]
 8005d70:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d74:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d78:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d80:	b29b      	uxth	r3, r3
 8005d82:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005d84:	88fb      	ldrh	r3, [r7, #6]
 8005d86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d01f      	beq.n	8005dce <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	461a      	mov	r2, r3
 8005d94:	68bb      	ldr	r3, [r7, #8]
 8005d96:	781b      	ldrb	r3, [r3, #0]
 8005d98:	009b      	lsls	r3, r3, #2
 8005d9a:	4413      	add	r3, r2
 8005d9c:	881b      	ldrh	r3, [r3, #0]
 8005d9e:	b29b      	uxth	r3, r3
 8005da0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005da4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005da8:	82fb      	strh	r3, [r7, #22]
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	461a      	mov	r2, r3
 8005db0:	68bb      	ldr	r3, [r7, #8]
 8005db2:	781b      	ldrb	r3, [r3, #0]
 8005db4:	009b      	lsls	r3, r3, #2
 8005db6:	441a      	add	r2, r3
 8005db8:	8afb      	ldrh	r3, [r7, #22]
 8005dba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005dbe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005dc2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005dc6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005dca:	b29b      	uxth	r3, r3
 8005dcc:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8005dce:	8b7b      	ldrh	r3, [r7, #26]
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	f000 8085 	beq.w	8005ee0 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	6818      	ldr	r0, [r3, #0]
 8005dda:	68bb      	ldr	r3, [r7, #8]
 8005ddc:	6959      	ldr	r1, [r3, #20]
 8005dde:	68bb      	ldr	r3, [r7, #8]
 8005de0:	891a      	ldrh	r2, [r3, #8]
 8005de2:	8b7b      	ldrh	r3, [r7, #26]
 8005de4:	f006 fded 	bl	800c9c2 <USB_ReadPMA>
 8005de8:	e07a      	b.n	8005ee0 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005df2:	b29b      	uxth	r3, r3
 8005df4:	461a      	mov	r2, r3
 8005df6:	68bb      	ldr	r3, [r7, #8]
 8005df8:	781b      	ldrb	r3, [r3, #0]
 8005dfa:	00db      	lsls	r3, r3, #3
 8005dfc:	4413      	add	r3, r2
 8005dfe:	68fa      	ldr	r2, [r7, #12]
 8005e00:	6812      	ldr	r2, [r2, #0]
 8005e02:	4413      	add	r3, r2
 8005e04:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005e08:	881b      	ldrh	r3, [r3, #0]
 8005e0a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005e0e:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8005e10:	68bb      	ldr	r3, [r7, #8]
 8005e12:	699a      	ldr	r2, [r3, #24]
 8005e14:	8b7b      	ldrh	r3, [r7, #26]
 8005e16:	429a      	cmp	r2, r3
 8005e18:	d306      	bcc.n	8005e28 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8005e1a:	68bb      	ldr	r3, [r7, #8]
 8005e1c:	699a      	ldr	r2, [r3, #24]
 8005e1e:	8b7b      	ldrh	r3, [r7, #26]
 8005e20:	1ad2      	subs	r2, r2, r3
 8005e22:	68bb      	ldr	r3, [r7, #8]
 8005e24:	619a      	str	r2, [r3, #24]
 8005e26:	e002      	b.n	8005e2e <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8005e28:	68bb      	ldr	r3, [r7, #8]
 8005e2a:	2200      	movs	r2, #0
 8005e2c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8005e2e:	68bb      	ldr	r3, [r7, #8]
 8005e30:	699b      	ldr	r3, [r3, #24]
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d123      	bne.n	8005e7e <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	461a      	mov	r2, r3
 8005e3c:	68bb      	ldr	r3, [r7, #8]
 8005e3e:	781b      	ldrb	r3, [r3, #0]
 8005e40:	009b      	lsls	r3, r3, #2
 8005e42:	4413      	add	r3, r2
 8005e44:	881b      	ldrh	r3, [r3, #0]
 8005e46:	b29b      	uxth	r3, r3
 8005e48:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005e4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e50:	83fb      	strh	r3, [r7, #30]
 8005e52:	8bfb      	ldrh	r3, [r7, #30]
 8005e54:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005e58:	83fb      	strh	r3, [r7, #30]
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	461a      	mov	r2, r3
 8005e60:	68bb      	ldr	r3, [r7, #8]
 8005e62:	781b      	ldrb	r3, [r3, #0]
 8005e64:	009b      	lsls	r3, r3, #2
 8005e66:	441a      	add	r2, r3
 8005e68:	8bfb      	ldrh	r3, [r7, #30]
 8005e6a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e6e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e72:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e7a:	b29b      	uxth	r3, r3
 8005e7c:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8005e7e:	88fb      	ldrh	r3, [r7, #6]
 8005e80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d11f      	bne.n	8005ec8 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	461a      	mov	r2, r3
 8005e8e:	68bb      	ldr	r3, [r7, #8]
 8005e90:	781b      	ldrb	r3, [r3, #0]
 8005e92:	009b      	lsls	r3, r3, #2
 8005e94:	4413      	add	r3, r2
 8005e96:	881b      	ldrh	r3, [r3, #0]
 8005e98:	b29b      	uxth	r3, r3
 8005e9a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ea2:	83bb      	strh	r3, [r7, #28]
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	461a      	mov	r2, r3
 8005eaa:	68bb      	ldr	r3, [r7, #8]
 8005eac:	781b      	ldrb	r3, [r3, #0]
 8005eae:	009b      	lsls	r3, r3, #2
 8005eb0:	441a      	add	r2, r3
 8005eb2:	8bbb      	ldrh	r3, [r7, #28]
 8005eb4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005eb8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ebc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ec0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005ec4:	b29b      	uxth	r3, r3
 8005ec6:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8005ec8:	8b7b      	ldrh	r3, [r7, #26]
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d008      	beq.n	8005ee0 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	6818      	ldr	r0, [r3, #0]
 8005ed2:	68bb      	ldr	r3, [r7, #8]
 8005ed4:	6959      	ldr	r1, [r3, #20]
 8005ed6:	68bb      	ldr	r3, [r7, #8]
 8005ed8:	895a      	ldrh	r2, [r3, #10]
 8005eda:	8b7b      	ldrh	r3, [r7, #26]
 8005edc:	f006 fd71 	bl	800c9c2 <USB_ReadPMA>
    }
  }

  return count;
 8005ee0:	8b7b      	ldrh	r3, [r7, #26]
}
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	3720      	adds	r7, #32
 8005ee6:	46bd      	mov	sp, r7
 8005ee8:	bd80      	pop	{r7, pc}

08005eea <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8005eea:	b580      	push	{r7, lr}
 8005eec:	b0a2      	sub	sp, #136	; 0x88
 8005eee:	af00      	add	r7, sp, #0
 8005ef0:	60f8      	str	r0, [r7, #12]
 8005ef2:	60b9      	str	r1, [r7, #8]
 8005ef4:	4613      	mov	r3, r2
 8005ef6:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005ef8:	88fb      	ldrh	r3, [r7, #6]
 8005efa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	f000 81c5 	beq.w	800628e <HAL_PCD_EP_DB_Transmit+0x3a4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f0c:	b29b      	uxth	r3, r3
 8005f0e:	461a      	mov	r2, r3
 8005f10:	68bb      	ldr	r3, [r7, #8]
 8005f12:	781b      	ldrb	r3, [r3, #0]
 8005f14:	00db      	lsls	r3, r3, #3
 8005f16:	4413      	add	r3, r2
 8005f18:	68fa      	ldr	r2, [r7, #12]
 8005f1a:	6812      	ldr	r2, [r2, #0]
 8005f1c:	4413      	add	r3, r2
 8005f1e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005f22:	881b      	ldrh	r3, [r3, #0]
 8005f24:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005f28:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxPctSize)
 8005f2c:	68bb      	ldr	r3, [r7, #8]
 8005f2e:	699a      	ldr	r2, [r3, #24]
 8005f30:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005f34:	429a      	cmp	r2, r3
 8005f36:	d907      	bls.n	8005f48 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8005f38:	68bb      	ldr	r3, [r7, #8]
 8005f3a:	699a      	ldr	r2, [r3, #24]
 8005f3c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005f40:	1ad2      	subs	r2, r2, r3
 8005f42:	68bb      	ldr	r3, [r7, #8]
 8005f44:	619a      	str	r2, [r3, #24]
 8005f46:	e002      	b.n	8005f4e <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8005f48:	68bb      	ldr	r3, [r7, #8]
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8005f4e:	68bb      	ldr	r3, [r7, #8]
 8005f50:	699b      	ldr	r3, [r3, #24]
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	f040 80b9 	bne.w	80060ca <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005f58:	68bb      	ldr	r3, [r7, #8]
 8005f5a:	785b      	ldrb	r3, [r3, #1]
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d126      	bne.n	8005fae <HAL_PCD_EP_DB_Transmit+0xc4>
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	62bb      	str	r3, [r7, #40]	; 0x28
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f6e:	b29b      	uxth	r3, r3
 8005f70:	461a      	mov	r2, r3
 8005f72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f74:	4413      	add	r3, r2
 8005f76:	62bb      	str	r3, [r7, #40]	; 0x28
 8005f78:	68bb      	ldr	r3, [r7, #8]
 8005f7a:	781b      	ldrb	r3, [r3, #0]
 8005f7c:	00da      	lsls	r2, r3, #3
 8005f7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f80:	4413      	add	r3, r2
 8005f82:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005f86:	627b      	str	r3, [r7, #36]	; 0x24
 8005f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f8a:	881b      	ldrh	r3, [r3, #0]
 8005f8c:	b29b      	uxth	r3, r3
 8005f8e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005f92:	b29a      	uxth	r2, r3
 8005f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f96:	801a      	strh	r2, [r3, #0]
 8005f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f9a:	881b      	ldrh	r3, [r3, #0]
 8005f9c:	b29b      	uxth	r3, r3
 8005f9e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005fa2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005fa6:	b29a      	uxth	r2, r3
 8005fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005faa:	801a      	strh	r2, [r3, #0]
 8005fac:	e01a      	b.n	8005fe4 <HAL_PCD_EP_DB_Transmit+0xfa>
 8005fae:	68bb      	ldr	r3, [r7, #8]
 8005fb0:	785b      	ldrb	r3, [r3, #1]
 8005fb2:	2b01      	cmp	r3, #1
 8005fb4:	d116      	bne.n	8005fe4 <HAL_PCD_EP_DB_Transmit+0xfa>
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	633b      	str	r3, [r7, #48]	; 0x30
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005fc4:	b29b      	uxth	r3, r3
 8005fc6:	461a      	mov	r2, r3
 8005fc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fca:	4413      	add	r3, r2
 8005fcc:	633b      	str	r3, [r7, #48]	; 0x30
 8005fce:	68bb      	ldr	r3, [r7, #8]
 8005fd0:	781b      	ldrb	r3, [r3, #0]
 8005fd2:	00da      	lsls	r2, r3, #3
 8005fd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fd6:	4413      	add	r3, r2
 8005fd8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005fdc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005fde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fe0:	2200      	movs	r2, #0
 8005fe2:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	623b      	str	r3, [r7, #32]
 8005fea:	68bb      	ldr	r3, [r7, #8]
 8005fec:	785b      	ldrb	r3, [r3, #1]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d126      	bne.n	8006040 <HAL_PCD_EP_DB_Transmit+0x156>
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	61bb      	str	r3, [r7, #24]
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006000:	b29b      	uxth	r3, r3
 8006002:	461a      	mov	r2, r3
 8006004:	69bb      	ldr	r3, [r7, #24]
 8006006:	4413      	add	r3, r2
 8006008:	61bb      	str	r3, [r7, #24]
 800600a:	68bb      	ldr	r3, [r7, #8]
 800600c:	781b      	ldrb	r3, [r3, #0]
 800600e:	00da      	lsls	r2, r3, #3
 8006010:	69bb      	ldr	r3, [r7, #24]
 8006012:	4413      	add	r3, r2
 8006014:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006018:	617b      	str	r3, [r7, #20]
 800601a:	697b      	ldr	r3, [r7, #20]
 800601c:	881b      	ldrh	r3, [r3, #0]
 800601e:	b29b      	uxth	r3, r3
 8006020:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006024:	b29a      	uxth	r2, r3
 8006026:	697b      	ldr	r3, [r7, #20]
 8006028:	801a      	strh	r2, [r3, #0]
 800602a:	697b      	ldr	r3, [r7, #20]
 800602c:	881b      	ldrh	r3, [r3, #0]
 800602e:	b29b      	uxth	r3, r3
 8006030:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006034:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006038:	b29a      	uxth	r2, r3
 800603a:	697b      	ldr	r3, [r7, #20]
 800603c:	801a      	strh	r2, [r3, #0]
 800603e:	e017      	b.n	8006070 <HAL_PCD_EP_DB_Transmit+0x186>
 8006040:	68bb      	ldr	r3, [r7, #8]
 8006042:	785b      	ldrb	r3, [r3, #1]
 8006044:	2b01      	cmp	r3, #1
 8006046:	d113      	bne.n	8006070 <HAL_PCD_EP_DB_Transmit+0x186>
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006050:	b29b      	uxth	r3, r3
 8006052:	461a      	mov	r2, r3
 8006054:	6a3b      	ldr	r3, [r7, #32]
 8006056:	4413      	add	r3, r2
 8006058:	623b      	str	r3, [r7, #32]
 800605a:	68bb      	ldr	r3, [r7, #8]
 800605c:	781b      	ldrb	r3, [r3, #0]
 800605e:	00da      	lsls	r2, r3, #3
 8006060:	6a3b      	ldr	r3, [r7, #32]
 8006062:	4413      	add	r3, r2
 8006064:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006068:	61fb      	str	r3, [r7, #28]
 800606a:	69fb      	ldr	r3, [r7, #28]
 800606c:	2200      	movs	r2, #0
 800606e:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8006070:	68bb      	ldr	r3, [r7, #8]
 8006072:	781b      	ldrb	r3, [r3, #0]
 8006074:	4619      	mov	r1, r3
 8006076:	68f8      	ldr	r0, [r7, #12]
 8006078:	f00a fc19 	bl	80108ae <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800607c:	88fb      	ldrh	r3, [r7, #6]
 800607e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006082:	2b00      	cmp	r3, #0
 8006084:	f000 82d2 	beq.w	800662c <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	461a      	mov	r2, r3
 800608e:	68bb      	ldr	r3, [r7, #8]
 8006090:	781b      	ldrb	r3, [r3, #0]
 8006092:	009b      	lsls	r3, r3, #2
 8006094:	4413      	add	r3, r2
 8006096:	881b      	ldrh	r3, [r3, #0]
 8006098:	b29b      	uxth	r3, r3
 800609a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800609e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060a2:	827b      	strh	r3, [r7, #18]
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	461a      	mov	r2, r3
 80060aa:	68bb      	ldr	r3, [r7, #8]
 80060ac:	781b      	ldrb	r3, [r3, #0]
 80060ae:	009b      	lsls	r3, r3, #2
 80060b0:	441a      	add	r2, r3
 80060b2:	8a7b      	ldrh	r3, [r7, #18]
 80060b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80060b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80060bc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80060c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060c4:	b29b      	uxth	r3, r3
 80060c6:	8013      	strh	r3, [r2, #0]
 80060c8:	e2b0      	b.n	800662c <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80060ca:	88fb      	ldrh	r3, [r7, #6]
 80060cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d021      	beq.n	8006118 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	461a      	mov	r2, r3
 80060da:	68bb      	ldr	r3, [r7, #8]
 80060dc:	781b      	ldrb	r3, [r3, #0]
 80060de:	009b      	lsls	r3, r3, #2
 80060e0:	4413      	add	r3, r2
 80060e2:	881b      	ldrh	r3, [r3, #0]
 80060e4:	b29b      	uxth	r3, r3
 80060e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80060ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060ee:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	461a      	mov	r2, r3
 80060f8:	68bb      	ldr	r3, [r7, #8]
 80060fa:	781b      	ldrb	r3, [r3, #0]
 80060fc:	009b      	lsls	r3, r3, #2
 80060fe:	441a      	add	r2, r3
 8006100:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8006104:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006108:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800610c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006110:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006114:	b29b      	uxth	r3, r3
 8006116:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8006118:	68bb      	ldr	r3, [r7, #8]
 800611a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800611e:	2b01      	cmp	r3, #1
 8006120:	f040 8284 	bne.w	800662c <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 8006124:	68bb      	ldr	r3, [r7, #8]
 8006126:	695a      	ldr	r2, [r3, #20]
 8006128:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800612c:	441a      	add	r2, r3
 800612e:	68bb      	ldr	r3, [r7, #8]
 8006130:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8006132:	68bb      	ldr	r3, [r7, #8]
 8006134:	69da      	ldr	r2, [r3, #28]
 8006136:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800613a:	441a      	add	r2, r3
 800613c:	68bb      	ldr	r3, [r7, #8]
 800613e:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8006140:	68bb      	ldr	r3, [r7, #8]
 8006142:	6a1a      	ldr	r2, [r3, #32]
 8006144:	68bb      	ldr	r3, [r7, #8]
 8006146:	691b      	ldr	r3, [r3, #16]
 8006148:	429a      	cmp	r2, r3
 800614a:	d309      	bcc.n	8006160 <HAL_PCD_EP_DB_Transmit+0x276>
        {
          len = ep->maxpacket;
 800614c:	68bb      	ldr	r3, [r7, #8]
 800614e:	691b      	ldr	r3, [r3, #16]
 8006150:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8006152:	68bb      	ldr	r3, [r7, #8]
 8006154:	6a1a      	ldr	r2, [r3, #32]
 8006156:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006158:	1ad2      	subs	r2, r2, r3
 800615a:	68bb      	ldr	r3, [r7, #8]
 800615c:	621a      	str	r2, [r3, #32]
 800615e:	e015      	b.n	800618c <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else if (ep->xfer_len_db == 0U)
 8006160:	68bb      	ldr	r3, [r7, #8]
 8006162:	6a1b      	ldr	r3, [r3, #32]
 8006164:	2b00      	cmp	r3, #0
 8006166:	d107      	bne.n	8006178 <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxPctSize;
 8006168:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800616c:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 800616e:	68bb      	ldr	r3, [r7, #8]
 8006170:	2200      	movs	r2, #0
 8006172:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8006176:	e009      	b.n	800618c <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8006178:	68bb      	ldr	r3, [r7, #8]
 800617a:	2200      	movs	r2, #0
 800617c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8006180:	68bb      	ldr	r3, [r7, #8]
 8006182:	6a1b      	ldr	r3, [r3, #32]
 8006184:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8006186:	68bb      	ldr	r3, [r7, #8]
 8006188:	2200      	movs	r2, #0
 800618a:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800618c:	68bb      	ldr	r3, [r7, #8]
 800618e:	785b      	ldrb	r3, [r3, #1]
 8006190:	2b00      	cmp	r3, #0
 8006192:	d155      	bne.n	8006240 <HAL_PCD_EP_DB_Transmit+0x356>
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	63bb      	str	r3, [r7, #56]	; 0x38
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80061a2:	b29b      	uxth	r3, r3
 80061a4:	461a      	mov	r2, r3
 80061a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061a8:	4413      	add	r3, r2
 80061aa:	63bb      	str	r3, [r7, #56]	; 0x38
 80061ac:	68bb      	ldr	r3, [r7, #8]
 80061ae:	781b      	ldrb	r3, [r3, #0]
 80061b0:	00da      	lsls	r2, r3, #3
 80061b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061b4:	4413      	add	r3, r2
 80061b6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80061ba:	637b      	str	r3, [r7, #52]	; 0x34
 80061bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80061be:	2b3e      	cmp	r3, #62	; 0x3e
 80061c0:	d916      	bls.n	80061f0 <HAL_PCD_EP_DB_Transmit+0x306>
 80061c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80061c4:	095b      	lsrs	r3, r3, #5
 80061c6:	64bb      	str	r3, [r7, #72]	; 0x48
 80061c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80061ca:	f003 031f 	and.w	r3, r3, #31
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d102      	bne.n	80061d8 <HAL_PCD_EP_DB_Transmit+0x2ee>
 80061d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80061d4:	3b01      	subs	r3, #1
 80061d6:	64bb      	str	r3, [r7, #72]	; 0x48
 80061d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80061da:	b29b      	uxth	r3, r3
 80061dc:	029b      	lsls	r3, r3, #10
 80061de:	b29b      	uxth	r3, r3
 80061e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80061e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80061e8:	b29a      	uxth	r2, r3
 80061ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061ec:	801a      	strh	r2, [r3, #0]
 80061ee:	e043      	b.n	8006278 <HAL_PCD_EP_DB_Transmit+0x38e>
 80061f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d112      	bne.n	800621c <HAL_PCD_EP_DB_Transmit+0x332>
 80061f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061f8:	881b      	ldrh	r3, [r3, #0]
 80061fa:	b29b      	uxth	r3, r3
 80061fc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006200:	b29a      	uxth	r2, r3
 8006202:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006204:	801a      	strh	r2, [r3, #0]
 8006206:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006208:	881b      	ldrh	r3, [r3, #0]
 800620a:	b29b      	uxth	r3, r3
 800620c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006210:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006214:	b29a      	uxth	r2, r3
 8006216:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006218:	801a      	strh	r2, [r3, #0]
 800621a:	e02d      	b.n	8006278 <HAL_PCD_EP_DB_Transmit+0x38e>
 800621c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800621e:	085b      	lsrs	r3, r3, #1
 8006220:	64bb      	str	r3, [r7, #72]	; 0x48
 8006222:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006224:	f003 0301 	and.w	r3, r3, #1
 8006228:	2b00      	cmp	r3, #0
 800622a:	d002      	beq.n	8006232 <HAL_PCD_EP_DB_Transmit+0x348>
 800622c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800622e:	3301      	adds	r3, #1
 8006230:	64bb      	str	r3, [r7, #72]	; 0x48
 8006232:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006234:	b29b      	uxth	r3, r3
 8006236:	029b      	lsls	r3, r3, #10
 8006238:	b29a      	uxth	r2, r3
 800623a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800623c:	801a      	strh	r2, [r3, #0]
 800623e:	e01b      	b.n	8006278 <HAL_PCD_EP_DB_Transmit+0x38e>
 8006240:	68bb      	ldr	r3, [r7, #8]
 8006242:	785b      	ldrb	r3, [r3, #1]
 8006244:	2b01      	cmp	r3, #1
 8006246:	d117      	bne.n	8006278 <HAL_PCD_EP_DB_Transmit+0x38e>
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	643b      	str	r3, [r7, #64]	; 0x40
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006256:	b29b      	uxth	r3, r3
 8006258:	461a      	mov	r2, r3
 800625a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800625c:	4413      	add	r3, r2
 800625e:	643b      	str	r3, [r7, #64]	; 0x40
 8006260:	68bb      	ldr	r3, [r7, #8]
 8006262:	781b      	ldrb	r3, [r3, #0]
 8006264:	00da      	lsls	r2, r3, #3
 8006266:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006268:	4413      	add	r3, r2
 800626a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800626e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006270:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006272:	b29a      	uxth	r2, r3
 8006274:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006276:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	6818      	ldr	r0, [r3, #0]
 800627c:	68bb      	ldr	r3, [r7, #8]
 800627e:	6959      	ldr	r1, [r3, #20]
 8006280:	68bb      	ldr	r3, [r7, #8]
 8006282:	891a      	ldrh	r2, [r3, #8]
 8006284:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006286:	b29b      	uxth	r3, r3
 8006288:	f006 fb59 	bl	800c93e <USB_WritePMA>
 800628c:	e1ce      	b.n	800662c <HAL_PCD_EP_DB_Transmit+0x742>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006296:	b29b      	uxth	r3, r3
 8006298:	461a      	mov	r2, r3
 800629a:	68bb      	ldr	r3, [r7, #8]
 800629c:	781b      	ldrb	r3, [r3, #0]
 800629e:	00db      	lsls	r3, r3, #3
 80062a0:	4413      	add	r3, r2
 80062a2:	68fa      	ldr	r2, [r7, #12]
 80062a4:	6812      	ldr	r2, [r2, #0]
 80062a6:	4413      	add	r3, r2
 80062a8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80062ac:	881b      	ldrh	r3, [r3, #0]
 80062ae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80062b2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxPctSize)
 80062b6:	68bb      	ldr	r3, [r7, #8]
 80062b8:	699a      	ldr	r2, [r3, #24]
 80062ba:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80062be:	429a      	cmp	r2, r3
 80062c0:	d307      	bcc.n	80062d2 <HAL_PCD_EP_DB_Transmit+0x3e8>
    {
      ep->xfer_len -= TxPctSize;
 80062c2:	68bb      	ldr	r3, [r7, #8]
 80062c4:	699a      	ldr	r2, [r3, #24]
 80062c6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80062ca:	1ad2      	subs	r2, r2, r3
 80062cc:	68bb      	ldr	r3, [r7, #8]
 80062ce:	619a      	str	r2, [r3, #24]
 80062d0:	e002      	b.n	80062d8 <HAL_PCD_EP_DB_Transmit+0x3ee>
    }
    else
    {
      ep->xfer_len = 0U;
 80062d2:	68bb      	ldr	r3, [r7, #8]
 80062d4:	2200      	movs	r2, #0
 80062d6:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80062d8:	68bb      	ldr	r3, [r7, #8]
 80062da:	699b      	ldr	r3, [r3, #24]
 80062dc:	2b00      	cmp	r3, #0
 80062de:	f040 80c4 	bne.w	800646a <HAL_PCD_EP_DB_Transmit+0x580>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80062e2:	68bb      	ldr	r3, [r7, #8]
 80062e4:	785b      	ldrb	r3, [r3, #1]
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d126      	bne.n	8006338 <HAL_PCD_EP_DB_Transmit+0x44e>
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	66bb      	str	r3, [r7, #104]	; 0x68
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80062f8:	b29b      	uxth	r3, r3
 80062fa:	461a      	mov	r2, r3
 80062fc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80062fe:	4413      	add	r3, r2
 8006300:	66bb      	str	r3, [r7, #104]	; 0x68
 8006302:	68bb      	ldr	r3, [r7, #8]
 8006304:	781b      	ldrb	r3, [r3, #0]
 8006306:	00da      	lsls	r2, r3, #3
 8006308:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800630a:	4413      	add	r3, r2
 800630c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006310:	667b      	str	r3, [r7, #100]	; 0x64
 8006312:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006314:	881b      	ldrh	r3, [r3, #0]
 8006316:	b29b      	uxth	r3, r3
 8006318:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800631c:	b29a      	uxth	r2, r3
 800631e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006320:	801a      	strh	r2, [r3, #0]
 8006322:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006324:	881b      	ldrh	r3, [r3, #0]
 8006326:	b29b      	uxth	r3, r3
 8006328:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800632c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006330:	b29a      	uxth	r2, r3
 8006332:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006334:	801a      	strh	r2, [r3, #0]
 8006336:	e01a      	b.n	800636e <HAL_PCD_EP_DB_Transmit+0x484>
 8006338:	68bb      	ldr	r3, [r7, #8]
 800633a:	785b      	ldrb	r3, [r3, #1]
 800633c:	2b01      	cmp	r3, #1
 800633e:	d116      	bne.n	800636e <HAL_PCD_EP_DB_Transmit+0x484>
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	673b      	str	r3, [r7, #112]	; 0x70
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800634e:	b29b      	uxth	r3, r3
 8006350:	461a      	mov	r2, r3
 8006352:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006354:	4413      	add	r3, r2
 8006356:	673b      	str	r3, [r7, #112]	; 0x70
 8006358:	68bb      	ldr	r3, [r7, #8]
 800635a:	781b      	ldrb	r3, [r3, #0]
 800635c:	00da      	lsls	r2, r3, #3
 800635e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006360:	4413      	add	r3, r2
 8006362:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006366:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006368:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800636a:	2200      	movs	r2, #0
 800636c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006374:	68bb      	ldr	r3, [r7, #8]
 8006376:	785b      	ldrb	r3, [r3, #1]
 8006378:	2b00      	cmp	r3, #0
 800637a:	d12f      	bne.n	80063dc <HAL_PCD_EP_DB_Transmit+0x4f2>
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800638c:	b29b      	uxth	r3, r3
 800638e:	461a      	mov	r2, r3
 8006390:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006394:	4413      	add	r3, r2
 8006396:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800639a:	68bb      	ldr	r3, [r7, #8]
 800639c:	781b      	ldrb	r3, [r3, #0]
 800639e:	00da      	lsls	r2, r3, #3
 80063a0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80063a4:	4413      	add	r3, r2
 80063a6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80063aa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80063ae:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80063b2:	881b      	ldrh	r3, [r3, #0]
 80063b4:	b29b      	uxth	r3, r3
 80063b6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80063ba:	b29a      	uxth	r2, r3
 80063bc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80063c0:	801a      	strh	r2, [r3, #0]
 80063c2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80063c6:	881b      	ldrh	r3, [r3, #0]
 80063c8:	b29b      	uxth	r3, r3
 80063ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80063ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80063d2:	b29a      	uxth	r2, r3
 80063d4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80063d8:	801a      	strh	r2, [r3, #0]
 80063da:	e017      	b.n	800640c <HAL_PCD_EP_DB_Transmit+0x522>
 80063dc:	68bb      	ldr	r3, [r7, #8]
 80063de:	785b      	ldrb	r3, [r3, #1]
 80063e0:	2b01      	cmp	r3, #1
 80063e2:	d113      	bne.n	800640c <HAL_PCD_EP_DB_Transmit+0x522>
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80063ec:	b29b      	uxth	r3, r3
 80063ee:	461a      	mov	r2, r3
 80063f0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80063f2:	4413      	add	r3, r2
 80063f4:	67fb      	str	r3, [r7, #124]	; 0x7c
 80063f6:	68bb      	ldr	r3, [r7, #8]
 80063f8:	781b      	ldrb	r3, [r3, #0]
 80063fa:	00da      	lsls	r2, r3, #3
 80063fc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80063fe:	4413      	add	r3, r2
 8006400:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006404:	67bb      	str	r3, [r7, #120]	; 0x78
 8006406:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006408:	2200      	movs	r2, #0
 800640a:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800640c:	68bb      	ldr	r3, [r7, #8]
 800640e:	781b      	ldrb	r3, [r3, #0]
 8006410:	4619      	mov	r1, r3
 8006412:	68f8      	ldr	r0, [r7, #12]
 8006414:	f00a fa4b 	bl	80108ae <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8006418:	88fb      	ldrh	r3, [r7, #6]
 800641a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800641e:	2b00      	cmp	r3, #0
 8006420:	f040 8104 	bne.w	800662c <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	461a      	mov	r2, r3
 800642a:	68bb      	ldr	r3, [r7, #8]
 800642c:	781b      	ldrb	r3, [r3, #0]
 800642e:	009b      	lsls	r3, r3, #2
 8006430:	4413      	add	r3, r2
 8006432:	881b      	ldrh	r3, [r3, #0]
 8006434:	b29b      	uxth	r3, r3
 8006436:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800643a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800643e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	461a      	mov	r2, r3
 8006448:	68bb      	ldr	r3, [r7, #8]
 800644a:	781b      	ldrb	r3, [r3, #0]
 800644c:	009b      	lsls	r3, r3, #2
 800644e:	441a      	add	r2, r3
 8006450:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8006454:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006458:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800645c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006460:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006464:	b29b      	uxth	r3, r3
 8006466:	8013      	strh	r3, [r2, #0]
 8006468:	e0e0      	b.n	800662c <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800646a:	88fb      	ldrh	r3, [r7, #6]
 800646c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006470:	2b00      	cmp	r3, #0
 8006472:	d121      	bne.n	80064b8 <HAL_PCD_EP_DB_Transmit+0x5ce>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	461a      	mov	r2, r3
 800647a:	68bb      	ldr	r3, [r7, #8]
 800647c:	781b      	ldrb	r3, [r3, #0]
 800647e:	009b      	lsls	r3, r3, #2
 8006480:	4413      	add	r3, r2
 8006482:	881b      	ldrh	r3, [r3, #0]
 8006484:	b29b      	uxth	r3, r3
 8006486:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800648a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800648e:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	461a      	mov	r2, r3
 8006498:	68bb      	ldr	r3, [r7, #8]
 800649a:	781b      	ldrb	r3, [r3, #0]
 800649c:	009b      	lsls	r3, r3, #2
 800649e:	441a      	add	r2, r3
 80064a0:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80064a4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80064a8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80064ac:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80064b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064b4:	b29b      	uxth	r3, r3
 80064b6:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80064b8:	68bb      	ldr	r3, [r7, #8]
 80064ba:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80064be:	2b01      	cmp	r3, #1
 80064c0:	f040 80b4 	bne.w	800662c <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 80064c4:	68bb      	ldr	r3, [r7, #8]
 80064c6:	695a      	ldr	r2, [r3, #20]
 80064c8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80064cc:	441a      	add	r2, r3
 80064ce:	68bb      	ldr	r3, [r7, #8]
 80064d0:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80064d2:	68bb      	ldr	r3, [r7, #8]
 80064d4:	69da      	ldr	r2, [r3, #28]
 80064d6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80064da:	441a      	add	r2, r3
 80064dc:	68bb      	ldr	r3, [r7, #8]
 80064de:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80064e0:	68bb      	ldr	r3, [r7, #8]
 80064e2:	6a1a      	ldr	r2, [r3, #32]
 80064e4:	68bb      	ldr	r3, [r7, #8]
 80064e6:	691b      	ldr	r3, [r3, #16]
 80064e8:	429a      	cmp	r2, r3
 80064ea:	d309      	bcc.n	8006500 <HAL_PCD_EP_DB_Transmit+0x616>
        {
          len = ep->maxpacket;
 80064ec:	68bb      	ldr	r3, [r7, #8]
 80064ee:	691b      	ldr	r3, [r3, #16]
 80064f0:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 80064f2:	68bb      	ldr	r3, [r7, #8]
 80064f4:	6a1a      	ldr	r2, [r3, #32]
 80064f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80064f8:	1ad2      	subs	r2, r2, r3
 80064fa:	68bb      	ldr	r3, [r7, #8]
 80064fc:	621a      	str	r2, [r3, #32]
 80064fe:	e015      	b.n	800652c <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else if (ep->xfer_len_db == 0U)
 8006500:	68bb      	ldr	r3, [r7, #8]
 8006502:	6a1b      	ldr	r3, [r3, #32]
 8006504:	2b00      	cmp	r3, #0
 8006506:	d107      	bne.n	8006518 <HAL_PCD_EP_DB_Transmit+0x62e>
        {
          len = TxPctSize;
 8006508:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800650c:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 800650e:	68bb      	ldr	r3, [r7, #8]
 8006510:	2200      	movs	r2, #0
 8006512:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8006516:	e009      	b.n	800652c <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else
        {
          len = ep->xfer_len_db;
 8006518:	68bb      	ldr	r3, [r7, #8]
 800651a:	6a1b      	ldr	r3, [r3, #32]
 800651c:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 800651e:	68bb      	ldr	r3, [r7, #8]
 8006520:	2200      	movs	r2, #0
 8006522:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8006524:	68bb      	ldr	r3, [r7, #8]
 8006526:	2200      	movs	r2, #0
 8006528:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	663b      	str	r3, [r7, #96]	; 0x60
 8006532:	68bb      	ldr	r3, [r7, #8]
 8006534:	785b      	ldrb	r3, [r3, #1]
 8006536:	2b00      	cmp	r3, #0
 8006538:	d155      	bne.n	80065e6 <HAL_PCD_EP_DB_Transmit+0x6fc>
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	65bb      	str	r3, [r7, #88]	; 0x58
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006548:	b29b      	uxth	r3, r3
 800654a:	461a      	mov	r2, r3
 800654c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800654e:	4413      	add	r3, r2
 8006550:	65bb      	str	r3, [r7, #88]	; 0x58
 8006552:	68bb      	ldr	r3, [r7, #8]
 8006554:	781b      	ldrb	r3, [r3, #0]
 8006556:	00da      	lsls	r2, r3, #3
 8006558:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800655a:	4413      	add	r3, r2
 800655c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006560:	657b      	str	r3, [r7, #84]	; 0x54
 8006562:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006564:	2b3e      	cmp	r3, #62	; 0x3e
 8006566:	d916      	bls.n	8006596 <HAL_PCD_EP_DB_Transmit+0x6ac>
 8006568:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800656a:	095b      	lsrs	r3, r3, #5
 800656c:	677b      	str	r3, [r7, #116]	; 0x74
 800656e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006570:	f003 031f 	and.w	r3, r3, #31
 8006574:	2b00      	cmp	r3, #0
 8006576:	d102      	bne.n	800657e <HAL_PCD_EP_DB_Transmit+0x694>
 8006578:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800657a:	3b01      	subs	r3, #1
 800657c:	677b      	str	r3, [r7, #116]	; 0x74
 800657e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006580:	b29b      	uxth	r3, r3
 8006582:	029b      	lsls	r3, r3, #10
 8006584:	b29b      	uxth	r3, r3
 8006586:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800658a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800658e:	b29a      	uxth	r2, r3
 8006590:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006592:	801a      	strh	r2, [r3, #0]
 8006594:	e040      	b.n	8006618 <HAL_PCD_EP_DB_Transmit+0x72e>
 8006596:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006598:	2b00      	cmp	r3, #0
 800659a:	d112      	bne.n	80065c2 <HAL_PCD_EP_DB_Transmit+0x6d8>
 800659c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800659e:	881b      	ldrh	r3, [r3, #0]
 80065a0:	b29b      	uxth	r3, r3
 80065a2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80065a6:	b29a      	uxth	r2, r3
 80065a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80065aa:	801a      	strh	r2, [r3, #0]
 80065ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80065ae:	881b      	ldrh	r3, [r3, #0]
 80065b0:	b29b      	uxth	r3, r3
 80065b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80065b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80065ba:	b29a      	uxth	r2, r3
 80065bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80065be:	801a      	strh	r2, [r3, #0]
 80065c0:	e02a      	b.n	8006618 <HAL_PCD_EP_DB_Transmit+0x72e>
 80065c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80065c4:	085b      	lsrs	r3, r3, #1
 80065c6:	677b      	str	r3, [r7, #116]	; 0x74
 80065c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80065ca:	f003 0301 	and.w	r3, r3, #1
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d002      	beq.n	80065d8 <HAL_PCD_EP_DB_Transmit+0x6ee>
 80065d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80065d4:	3301      	adds	r3, #1
 80065d6:	677b      	str	r3, [r7, #116]	; 0x74
 80065d8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80065da:	b29b      	uxth	r3, r3
 80065dc:	029b      	lsls	r3, r3, #10
 80065de:	b29a      	uxth	r2, r3
 80065e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80065e2:	801a      	strh	r2, [r3, #0]
 80065e4:	e018      	b.n	8006618 <HAL_PCD_EP_DB_Transmit+0x72e>
 80065e6:	68bb      	ldr	r3, [r7, #8]
 80065e8:	785b      	ldrb	r3, [r3, #1]
 80065ea:	2b01      	cmp	r3, #1
 80065ec:	d114      	bne.n	8006618 <HAL_PCD_EP_DB_Transmit+0x72e>
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80065f6:	b29b      	uxth	r3, r3
 80065f8:	461a      	mov	r2, r3
 80065fa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80065fc:	4413      	add	r3, r2
 80065fe:	663b      	str	r3, [r7, #96]	; 0x60
 8006600:	68bb      	ldr	r3, [r7, #8]
 8006602:	781b      	ldrb	r3, [r3, #0]
 8006604:	00da      	lsls	r2, r3, #3
 8006606:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006608:	4413      	add	r3, r2
 800660a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800660e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006610:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006612:	b29a      	uxth	r2, r3
 8006614:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006616:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	6818      	ldr	r0, [r3, #0]
 800661c:	68bb      	ldr	r3, [r7, #8]
 800661e:	6959      	ldr	r1, [r3, #20]
 8006620:	68bb      	ldr	r3, [r7, #8]
 8006622:	895a      	ldrh	r2, [r3, #10]
 8006624:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006626:	b29b      	uxth	r3, r3
 8006628:	f006 f989 	bl	800c93e <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	461a      	mov	r2, r3
 8006632:	68bb      	ldr	r3, [r7, #8]
 8006634:	781b      	ldrb	r3, [r3, #0]
 8006636:	009b      	lsls	r3, r3, #2
 8006638:	4413      	add	r3, r2
 800663a:	881b      	ldrh	r3, [r3, #0]
 800663c:	b29b      	uxth	r3, r3
 800663e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006642:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006646:	823b      	strh	r3, [r7, #16]
 8006648:	8a3b      	ldrh	r3, [r7, #16]
 800664a:	f083 0310 	eor.w	r3, r3, #16
 800664e:	823b      	strh	r3, [r7, #16]
 8006650:	8a3b      	ldrh	r3, [r7, #16]
 8006652:	f083 0320 	eor.w	r3, r3, #32
 8006656:	823b      	strh	r3, [r7, #16]
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	461a      	mov	r2, r3
 800665e:	68bb      	ldr	r3, [r7, #8]
 8006660:	781b      	ldrb	r3, [r3, #0]
 8006662:	009b      	lsls	r3, r3, #2
 8006664:	441a      	add	r2, r3
 8006666:	8a3b      	ldrh	r3, [r7, #16]
 8006668:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800666c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006670:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006674:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006678:	b29b      	uxth	r3, r3
 800667a:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800667c:	2300      	movs	r3, #0
}
 800667e:	4618      	mov	r0, r3
 8006680:	3788      	adds	r7, #136	; 0x88
 8006682:	46bd      	mov	sp, r7
 8006684:	bd80      	pop	{r7, pc}

08006686 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8006686:	b480      	push	{r7}
 8006688:	b087      	sub	sp, #28
 800668a:	af00      	add	r7, sp, #0
 800668c:	60f8      	str	r0, [r7, #12]
 800668e:	607b      	str	r3, [r7, #4]
 8006690:	460b      	mov	r3, r1
 8006692:	817b      	strh	r3, [r7, #10]
 8006694:	4613      	mov	r3, r2
 8006696:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8006698:	897b      	ldrh	r3, [r7, #10]
 800669a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800669e:	b29b      	uxth	r3, r3
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d00b      	beq.n	80066bc <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80066a4:	897b      	ldrh	r3, [r7, #10]
 80066a6:	f003 0307 	and.w	r3, r3, #7
 80066aa:	1c5a      	adds	r2, r3, #1
 80066ac:	4613      	mov	r3, r2
 80066ae:	009b      	lsls	r3, r3, #2
 80066b0:	4413      	add	r3, r2
 80066b2:	00db      	lsls	r3, r3, #3
 80066b4:	68fa      	ldr	r2, [r7, #12]
 80066b6:	4413      	add	r3, r2
 80066b8:	617b      	str	r3, [r7, #20]
 80066ba:	e009      	b.n	80066d0 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80066bc:	897a      	ldrh	r2, [r7, #10]
 80066be:	4613      	mov	r3, r2
 80066c0:	009b      	lsls	r3, r3, #2
 80066c2:	4413      	add	r3, r2
 80066c4:	00db      	lsls	r3, r3, #3
 80066c6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80066ca:	68fa      	ldr	r2, [r7, #12]
 80066cc:	4413      	add	r3, r2
 80066ce:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80066d0:	893b      	ldrh	r3, [r7, #8]
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d107      	bne.n	80066e6 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80066d6:	697b      	ldr	r3, [r7, #20]
 80066d8:	2200      	movs	r2, #0
 80066da:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	b29a      	uxth	r2, r3
 80066e0:	697b      	ldr	r3, [r7, #20]
 80066e2:	80da      	strh	r2, [r3, #6]
 80066e4:	e00b      	b.n	80066fe <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80066e6:	697b      	ldr	r3, [r7, #20]
 80066e8:	2201      	movs	r2, #1
 80066ea:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	b29a      	uxth	r2, r3
 80066f0:	697b      	ldr	r3, [r7, #20]
 80066f2:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	0c1b      	lsrs	r3, r3, #16
 80066f8:	b29a      	uxth	r2, r3
 80066fa:	697b      	ldr	r3, [r7, #20]
 80066fc:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80066fe:	2300      	movs	r3, #0
}
 8006700:	4618      	mov	r0, r3
 8006702:	371c      	adds	r7, #28
 8006704:	46bd      	mov	sp, r7
 8006706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670a:	4770      	bx	lr

0800670c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800670c:	b480      	push	{r7}
 800670e:	b085      	sub	sp, #20
 8006710:	af00      	add	r7, sp, #0
 8006712:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	2201      	movs	r2, #1
 800671e:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	2200      	movs	r2, #0
 8006726:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8006730:	b29b      	uxth	r3, r3
 8006732:	f043 0301 	orr.w	r3, r3, #1
 8006736:	b29a      	uxth	r2, r3
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8006744:	b29b      	uxth	r3, r3
 8006746:	f043 0302 	orr.w	r3, r3, #2
 800674a:	b29a      	uxth	r2, r3
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8006752:	2300      	movs	r3, #0
}
 8006754:	4618      	mov	r0, r3
 8006756:	3714      	adds	r7, #20
 8006758:	46bd      	mov	sp, r7
 800675a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675e:	4770      	bx	lr

08006760 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006760:	b480      	push	{r7}
 8006762:	b085      	sub	sp, #20
 8006764:	af00      	add	r7, sp, #0
 8006766:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	2b00      	cmp	r3, #0
 800676c:	d141      	bne.n	80067f2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800676e:	4b4b      	ldr	r3, [pc, #300]	; (800689c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006776:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800677a:	d131      	bne.n	80067e0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800677c:	4b47      	ldr	r3, [pc, #284]	; (800689c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800677e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006782:	4a46      	ldr	r2, [pc, #280]	; (800689c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006784:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006788:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800678c:	4b43      	ldr	r3, [pc, #268]	; (800689c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006794:	4a41      	ldr	r2, [pc, #260]	; (800689c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006796:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800679a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800679c:	4b40      	ldr	r3, [pc, #256]	; (80068a0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	2232      	movs	r2, #50	; 0x32
 80067a2:	fb02 f303 	mul.w	r3, r2, r3
 80067a6:	4a3f      	ldr	r2, [pc, #252]	; (80068a4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80067a8:	fba2 2303 	umull	r2, r3, r2, r3
 80067ac:	0c9b      	lsrs	r3, r3, #18
 80067ae:	3301      	adds	r3, #1
 80067b0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80067b2:	e002      	b.n	80067ba <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	3b01      	subs	r3, #1
 80067b8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80067ba:	4b38      	ldr	r3, [pc, #224]	; (800689c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80067bc:	695b      	ldr	r3, [r3, #20]
 80067be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80067c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80067c6:	d102      	bne.n	80067ce <HAL_PWREx_ControlVoltageScaling+0x6e>
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d1f2      	bne.n	80067b4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80067ce:	4b33      	ldr	r3, [pc, #204]	; (800689c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80067d0:	695b      	ldr	r3, [r3, #20]
 80067d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80067d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80067da:	d158      	bne.n	800688e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80067dc:	2303      	movs	r3, #3
 80067de:	e057      	b.n	8006890 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80067e0:	4b2e      	ldr	r3, [pc, #184]	; (800689c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80067e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80067e6:	4a2d      	ldr	r2, [pc, #180]	; (800689c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80067e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80067ec:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80067f0:	e04d      	b.n	800688e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80067f8:	d141      	bne.n	800687e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80067fa:	4b28      	ldr	r3, [pc, #160]	; (800689c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006802:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006806:	d131      	bne.n	800686c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006808:	4b24      	ldr	r3, [pc, #144]	; (800689c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800680a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800680e:	4a23      	ldr	r2, [pc, #140]	; (800689c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006810:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006814:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006818:	4b20      	ldr	r3, [pc, #128]	; (800689c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006820:	4a1e      	ldr	r2, [pc, #120]	; (800689c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006822:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006826:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006828:	4b1d      	ldr	r3, [pc, #116]	; (80068a0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	2232      	movs	r2, #50	; 0x32
 800682e:	fb02 f303 	mul.w	r3, r2, r3
 8006832:	4a1c      	ldr	r2, [pc, #112]	; (80068a4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006834:	fba2 2303 	umull	r2, r3, r2, r3
 8006838:	0c9b      	lsrs	r3, r3, #18
 800683a:	3301      	adds	r3, #1
 800683c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800683e:	e002      	b.n	8006846 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	3b01      	subs	r3, #1
 8006844:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006846:	4b15      	ldr	r3, [pc, #84]	; (800689c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006848:	695b      	ldr	r3, [r3, #20]
 800684a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800684e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006852:	d102      	bne.n	800685a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	2b00      	cmp	r3, #0
 8006858:	d1f2      	bne.n	8006840 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800685a:	4b10      	ldr	r3, [pc, #64]	; (800689c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800685c:	695b      	ldr	r3, [r3, #20]
 800685e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006862:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006866:	d112      	bne.n	800688e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006868:	2303      	movs	r3, #3
 800686a:	e011      	b.n	8006890 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800686c:	4b0b      	ldr	r3, [pc, #44]	; (800689c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800686e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006872:	4a0a      	ldr	r2, [pc, #40]	; (800689c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006874:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006878:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800687c:	e007      	b.n	800688e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800687e:	4b07      	ldr	r3, [pc, #28]	; (800689c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006886:	4a05      	ldr	r2, [pc, #20]	; (800689c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006888:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800688c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800688e:	2300      	movs	r3, #0
}
 8006890:	4618      	mov	r0, r3
 8006892:	3714      	adds	r7, #20
 8006894:	46bd      	mov	sp, r7
 8006896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689a:	4770      	bx	lr
 800689c:	40007000 	.word	0x40007000
 80068a0:	20000000 	.word	0x20000000
 80068a4:	431bde83 	.word	0x431bde83

080068a8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80068a8:	b580      	push	{r7, lr}
 80068aa:	b088      	sub	sp, #32
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d101      	bne.n	80068ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80068b6:	2301      	movs	r3, #1
 80068b8:	e306      	b.n	8006ec8 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	f003 0301 	and.w	r3, r3, #1
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d075      	beq.n	80069b2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80068c6:	4b97      	ldr	r3, [pc, #604]	; (8006b24 <HAL_RCC_OscConfig+0x27c>)
 80068c8:	689b      	ldr	r3, [r3, #8]
 80068ca:	f003 030c 	and.w	r3, r3, #12
 80068ce:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80068d0:	4b94      	ldr	r3, [pc, #592]	; (8006b24 <HAL_RCC_OscConfig+0x27c>)
 80068d2:	68db      	ldr	r3, [r3, #12]
 80068d4:	f003 0303 	and.w	r3, r3, #3
 80068d8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80068da:	69bb      	ldr	r3, [r7, #24]
 80068dc:	2b0c      	cmp	r3, #12
 80068de:	d102      	bne.n	80068e6 <HAL_RCC_OscConfig+0x3e>
 80068e0:	697b      	ldr	r3, [r7, #20]
 80068e2:	2b03      	cmp	r3, #3
 80068e4:	d002      	beq.n	80068ec <HAL_RCC_OscConfig+0x44>
 80068e6:	69bb      	ldr	r3, [r7, #24]
 80068e8:	2b08      	cmp	r3, #8
 80068ea:	d10b      	bne.n	8006904 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80068ec:	4b8d      	ldr	r3, [pc, #564]	; (8006b24 <HAL_RCC_OscConfig+0x27c>)
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d05b      	beq.n	80069b0 <HAL_RCC_OscConfig+0x108>
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	685b      	ldr	r3, [r3, #4]
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d157      	bne.n	80069b0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006900:	2301      	movs	r3, #1
 8006902:	e2e1      	b.n	8006ec8 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	685b      	ldr	r3, [r3, #4]
 8006908:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800690c:	d106      	bne.n	800691c <HAL_RCC_OscConfig+0x74>
 800690e:	4b85      	ldr	r3, [pc, #532]	; (8006b24 <HAL_RCC_OscConfig+0x27c>)
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	4a84      	ldr	r2, [pc, #528]	; (8006b24 <HAL_RCC_OscConfig+0x27c>)
 8006914:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006918:	6013      	str	r3, [r2, #0]
 800691a:	e01d      	b.n	8006958 <HAL_RCC_OscConfig+0xb0>
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	685b      	ldr	r3, [r3, #4]
 8006920:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006924:	d10c      	bne.n	8006940 <HAL_RCC_OscConfig+0x98>
 8006926:	4b7f      	ldr	r3, [pc, #508]	; (8006b24 <HAL_RCC_OscConfig+0x27c>)
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	4a7e      	ldr	r2, [pc, #504]	; (8006b24 <HAL_RCC_OscConfig+0x27c>)
 800692c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006930:	6013      	str	r3, [r2, #0]
 8006932:	4b7c      	ldr	r3, [pc, #496]	; (8006b24 <HAL_RCC_OscConfig+0x27c>)
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	4a7b      	ldr	r2, [pc, #492]	; (8006b24 <HAL_RCC_OscConfig+0x27c>)
 8006938:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800693c:	6013      	str	r3, [r2, #0]
 800693e:	e00b      	b.n	8006958 <HAL_RCC_OscConfig+0xb0>
 8006940:	4b78      	ldr	r3, [pc, #480]	; (8006b24 <HAL_RCC_OscConfig+0x27c>)
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	4a77      	ldr	r2, [pc, #476]	; (8006b24 <HAL_RCC_OscConfig+0x27c>)
 8006946:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800694a:	6013      	str	r3, [r2, #0]
 800694c:	4b75      	ldr	r3, [pc, #468]	; (8006b24 <HAL_RCC_OscConfig+0x27c>)
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	4a74      	ldr	r2, [pc, #464]	; (8006b24 <HAL_RCC_OscConfig+0x27c>)
 8006952:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006956:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	685b      	ldr	r3, [r3, #4]
 800695c:	2b00      	cmp	r3, #0
 800695e:	d013      	beq.n	8006988 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006960:	f7fc fa9c 	bl	8002e9c <HAL_GetTick>
 8006964:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006966:	e008      	b.n	800697a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006968:	f7fc fa98 	bl	8002e9c <HAL_GetTick>
 800696c:	4602      	mov	r2, r0
 800696e:	693b      	ldr	r3, [r7, #16]
 8006970:	1ad3      	subs	r3, r2, r3
 8006972:	2b64      	cmp	r3, #100	; 0x64
 8006974:	d901      	bls.n	800697a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006976:	2303      	movs	r3, #3
 8006978:	e2a6      	b.n	8006ec8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800697a:	4b6a      	ldr	r3, [pc, #424]	; (8006b24 <HAL_RCC_OscConfig+0x27c>)
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006982:	2b00      	cmp	r3, #0
 8006984:	d0f0      	beq.n	8006968 <HAL_RCC_OscConfig+0xc0>
 8006986:	e014      	b.n	80069b2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006988:	f7fc fa88 	bl	8002e9c <HAL_GetTick>
 800698c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800698e:	e008      	b.n	80069a2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006990:	f7fc fa84 	bl	8002e9c <HAL_GetTick>
 8006994:	4602      	mov	r2, r0
 8006996:	693b      	ldr	r3, [r7, #16]
 8006998:	1ad3      	subs	r3, r2, r3
 800699a:	2b64      	cmp	r3, #100	; 0x64
 800699c:	d901      	bls.n	80069a2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800699e:	2303      	movs	r3, #3
 80069a0:	e292      	b.n	8006ec8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80069a2:	4b60      	ldr	r3, [pc, #384]	; (8006b24 <HAL_RCC_OscConfig+0x27c>)
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d1f0      	bne.n	8006990 <HAL_RCC_OscConfig+0xe8>
 80069ae:	e000      	b.n	80069b2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80069b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	f003 0302 	and.w	r3, r3, #2
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d075      	beq.n	8006aaa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80069be:	4b59      	ldr	r3, [pc, #356]	; (8006b24 <HAL_RCC_OscConfig+0x27c>)
 80069c0:	689b      	ldr	r3, [r3, #8]
 80069c2:	f003 030c 	and.w	r3, r3, #12
 80069c6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80069c8:	4b56      	ldr	r3, [pc, #344]	; (8006b24 <HAL_RCC_OscConfig+0x27c>)
 80069ca:	68db      	ldr	r3, [r3, #12]
 80069cc:	f003 0303 	and.w	r3, r3, #3
 80069d0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80069d2:	69bb      	ldr	r3, [r7, #24]
 80069d4:	2b0c      	cmp	r3, #12
 80069d6:	d102      	bne.n	80069de <HAL_RCC_OscConfig+0x136>
 80069d8:	697b      	ldr	r3, [r7, #20]
 80069da:	2b02      	cmp	r3, #2
 80069dc:	d002      	beq.n	80069e4 <HAL_RCC_OscConfig+0x13c>
 80069de:	69bb      	ldr	r3, [r7, #24]
 80069e0:	2b04      	cmp	r3, #4
 80069e2:	d11f      	bne.n	8006a24 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80069e4:	4b4f      	ldr	r3, [pc, #316]	; (8006b24 <HAL_RCC_OscConfig+0x27c>)
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d005      	beq.n	80069fc <HAL_RCC_OscConfig+0x154>
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	68db      	ldr	r3, [r3, #12]
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d101      	bne.n	80069fc <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80069f8:	2301      	movs	r3, #1
 80069fa:	e265      	b.n	8006ec8 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80069fc:	4b49      	ldr	r3, [pc, #292]	; (8006b24 <HAL_RCC_OscConfig+0x27c>)
 80069fe:	685b      	ldr	r3, [r3, #4]
 8006a00:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	691b      	ldr	r3, [r3, #16]
 8006a08:	061b      	lsls	r3, r3, #24
 8006a0a:	4946      	ldr	r1, [pc, #280]	; (8006b24 <HAL_RCC_OscConfig+0x27c>)
 8006a0c:	4313      	orrs	r3, r2
 8006a0e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8006a10:	4b45      	ldr	r3, [pc, #276]	; (8006b28 <HAL_RCC_OscConfig+0x280>)
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	4618      	mov	r0, r3
 8006a16:	f7fb f98b 	bl	8001d30 <HAL_InitTick>
 8006a1a:	4603      	mov	r3, r0
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d043      	beq.n	8006aa8 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8006a20:	2301      	movs	r3, #1
 8006a22:	e251      	b.n	8006ec8 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	68db      	ldr	r3, [r3, #12]
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d023      	beq.n	8006a74 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006a2c:	4b3d      	ldr	r3, [pc, #244]	; (8006b24 <HAL_RCC_OscConfig+0x27c>)
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	4a3c      	ldr	r2, [pc, #240]	; (8006b24 <HAL_RCC_OscConfig+0x27c>)
 8006a32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006a36:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a38:	f7fc fa30 	bl	8002e9c <HAL_GetTick>
 8006a3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006a3e:	e008      	b.n	8006a52 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006a40:	f7fc fa2c 	bl	8002e9c <HAL_GetTick>
 8006a44:	4602      	mov	r2, r0
 8006a46:	693b      	ldr	r3, [r7, #16]
 8006a48:	1ad3      	subs	r3, r2, r3
 8006a4a:	2b02      	cmp	r3, #2
 8006a4c:	d901      	bls.n	8006a52 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8006a4e:	2303      	movs	r3, #3
 8006a50:	e23a      	b.n	8006ec8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006a52:	4b34      	ldr	r3, [pc, #208]	; (8006b24 <HAL_RCC_OscConfig+0x27c>)
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d0f0      	beq.n	8006a40 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006a5e:	4b31      	ldr	r3, [pc, #196]	; (8006b24 <HAL_RCC_OscConfig+0x27c>)
 8006a60:	685b      	ldr	r3, [r3, #4]
 8006a62:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	691b      	ldr	r3, [r3, #16]
 8006a6a:	061b      	lsls	r3, r3, #24
 8006a6c:	492d      	ldr	r1, [pc, #180]	; (8006b24 <HAL_RCC_OscConfig+0x27c>)
 8006a6e:	4313      	orrs	r3, r2
 8006a70:	604b      	str	r3, [r1, #4]
 8006a72:	e01a      	b.n	8006aaa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006a74:	4b2b      	ldr	r3, [pc, #172]	; (8006b24 <HAL_RCC_OscConfig+0x27c>)
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	4a2a      	ldr	r2, [pc, #168]	; (8006b24 <HAL_RCC_OscConfig+0x27c>)
 8006a7a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006a7e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a80:	f7fc fa0c 	bl	8002e9c <HAL_GetTick>
 8006a84:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006a86:	e008      	b.n	8006a9a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006a88:	f7fc fa08 	bl	8002e9c <HAL_GetTick>
 8006a8c:	4602      	mov	r2, r0
 8006a8e:	693b      	ldr	r3, [r7, #16]
 8006a90:	1ad3      	subs	r3, r2, r3
 8006a92:	2b02      	cmp	r3, #2
 8006a94:	d901      	bls.n	8006a9a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8006a96:	2303      	movs	r3, #3
 8006a98:	e216      	b.n	8006ec8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006a9a:	4b22      	ldr	r3, [pc, #136]	; (8006b24 <HAL_RCC_OscConfig+0x27c>)
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d1f0      	bne.n	8006a88 <HAL_RCC_OscConfig+0x1e0>
 8006aa6:	e000      	b.n	8006aaa <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006aa8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	f003 0308 	and.w	r3, r3, #8
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d041      	beq.n	8006b3a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	695b      	ldr	r3, [r3, #20]
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d01c      	beq.n	8006af8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006abe:	4b19      	ldr	r3, [pc, #100]	; (8006b24 <HAL_RCC_OscConfig+0x27c>)
 8006ac0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006ac4:	4a17      	ldr	r2, [pc, #92]	; (8006b24 <HAL_RCC_OscConfig+0x27c>)
 8006ac6:	f043 0301 	orr.w	r3, r3, #1
 8006aca:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ace:	f7fc f9e5 	bl	8002e9c <HAL_GetTick>
 8006ad2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006ad4:	e008      	b.n	8006ae8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006ad6:	f7fc f9e1 	bl	8002e9c <HAL_GetTick>
 8006ada:	4602      	mov	r2, r0
 8006adc:	693b      	ldr	r3, [r7, #16]
 8006ade:	1ad3      	subs	r3, r2, r3
 8006ae0:	2b02      	cmp	r3, #2
 8006ae2:	d901      	bls.n	8006ae8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006ae4:	2303      	movs	r3, #3
 8006ae6:	e1ef      	b.n	8006ec8 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006ae8:	4b0e      	ldr	r3, [pc, #56]	; (8006b24 <HAL_RCC_OscConfig+0x27c>)
 8006aea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006aee:	f003 0302 	and.w	r3, r3, #2
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d0ef      	beq.n	8006ad6 <HAL_RCC_OscConfig+0x22e>
 8006af6:	e020      	b.n	8006b3a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006af8:	4b0a      	ldr	r3, [pc, #40]	; (8006b24 <HAL_RCC_OscConfig+0x27c>)
 8006afa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006afe:	4a09      	ldr	r2, [pc, #36]	; (8006b24 <HAL_RCC_OscConfig+0x27c>)
 8006b00:	f023 0301 	bic.w	r3, r3, #1
 8006b04:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b08:	f7fc f9c8 	bl	8002e9c <HAL_GetTick>
 8006b0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006b0e:	e00d      	b.n	8006b2c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006b10:	f7fc f9c4 	bl	8002e9c <HAL_GetTick>
 8006b14:	4602      	mov	r2, r0
 8006b16:	693b      	ldr	r3, [r7, #16]
 8006b18:	1ad3      	subs	r3, r2, r3
 8006b1a:	2b02      	cmp	r3, #2
 8006b1c:	d906      	bls.n	8006b2c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8006b1e:	2303      	movs	r3, #3
 8006b20:	e1d2      	b.n	8006ec8 <HAL_RCC_OscConfig+0x620>
 8006b22:	bf00      	nop
 8006b24:	40021000 	.word	0x40021000
 8006b28:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006b2c:	4b8c      	ldr	r3, [pc, #560]	; (8006d60 <HAL_RCC_OscConfig+0x4b8>)
 8006b2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006b32:	f003 0302 	and.w	r3, r3, #2
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d1ea      	bne.n	8006b10 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	f003 0304 	and.w	r3, r3, #4
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	f000 80a6 	beq.w	8006c94 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006b48:	2300      	movs	r3, #0
 8006b4a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006b4c:	4b84      	ldr	r3, [pc, #528]	; (8006d60 <HAL_RCC_OscConfig+0x4b8>)
 8006b4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d101      	bne.n	8006b5c <HAL_RCC_OscConfig+0x2b4>
 8006b58:	2301      	movs	r3, #1
 8006b5a:	e000      	b.n	8006b5e <HAL_RCC_OscConfig+0x2b6>
 8006b5c:	2300      	movs	r3, #0
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d00d      	beq.n	8006b7e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006b62:	4b7f      	ldr	r3, [pc, #508]	; (8006d60 <HAL_RCC_OscConfig+0x4b8>)
 8006b64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b66:	4a7e      	ldr	r2, [pc, #504]	; (8006d60 <HAL_RCC_OscConfig+0x4b8>)
 8006b68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006b6c:	6593      	str	r3, [r2, #88]	; 0x58
 8006b6e:	4b7c      	ldr	r3, [pc, #496]	; (8006d60 <HAL_RCC_OscConfig+0x4b8>)
 8006b70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006b76:	60fb      	str	r3, [r7, #12]
 8006b78:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8006b7a:	2301      	movs	r3, #1
 8006b7c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006b7e:	4b79      	ldr	r3, [pc, #484]	; (8006d64 <HAL_RCC_OscConfig+0x4bc>)
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d118      	bne.n	8006bbc <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006b8a:	4b76      	ldr	r3, [pc, #472]	; (8006d64 <HAL_RCC_OscConfig+0x4bc>)
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	4a75      	ldr	r2, [pc, #468]	; (8006d64 <HAL_RCC_OscConfig+0x4bc>)
 8006b90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006b94:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006b96:	f7fc f981 	bl	8002e9c <HAL_GetTick>
 8006b9a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006b9c:	e008      	b.n	8006bb0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006b9e:	f7fc f97d 	bl	8002e9c <HAL_GetTick>
 8006ba2:	4602      	mov	r2, r0
 8006ba4:	693b      	ldr	r3, [r7, #16]
 8006ba6:	1ad3      	subs	r3, r2, r3
 8006ba8:	2b02      	cmp	r3, #2
 8006baa:	d901      	bls.n	8006bb0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8006bac:	2303      	movs	r3, #3
 8006bae:	e18b      	b.n	8006ec8 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006bb0:	4b6c      	ldr	r3, [pc, #432]	; (8006d64 <HAL_RCC_OscConfig+0x4bc>)
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d0f0      	beq.n	8006b9e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	689b      	ldr	r3, [r3, #8]
 8006bc0:	2b01      	cmp	r3, #1
 8006bc2:	d108      	bne.n	8006bd6 <HAL_RCC_OscConfig+0x32e>
 8006bc4:	4b66      	ldr	r3, [pc, #408]	; (8006d60 <HAL_RCC_OscConfig+0x4b8>)
 8006bc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006bca:	4a65      	ldr	r2, [pc, #404]	; (8006d60 <HAL_RCC_OscConfig+0x4b8>)
 8006bcc:	f043 0301 	orr.w	r3, r3, #1
 8006bd0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006bd4:	e024      	b.n	8006c20 <HAL_RCC_OscConfig+0x378>
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	689b      	ldr	r3, [r3, #8]
 8006bda:	2b05      	cmp	r3, #5
 8006bdc:	d110      	bne.n	8006c00 <HAL_RCC_OscConfig+0x358>
 8006bde:	4b60      	ldr	r3, [pc, #384]	; (8006d60 <HAL_RCC_OscConfig+0x4b8>)
 8006be0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006be4:	4a5e      	ldr	r2, [pc, #376]	; (8006d60 <HAL_RCC_OscConfig+0x4b8>)
 8006be6:	f043 0304 	orr.w	r3, r3, #4
 8006bea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006bee:	4b5c      	ldr	r3, [pc, #368]	; (8006d60 <HAL_RCC_OscConfig+0x4b8>)
 8006bf0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006bf4:	4a5a      	ldr	r2, [pc, #360]	; (8006d60 <HAL_RCC_OscConfig+0x4b8>)
 8006bf6:	f043 0301 	orr.w	r3, r3, #1
 8006bfa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006bfe:	e00f      	b.n	8006c20 <HAL_RCC_OscConfig+0x378>
 8006c00:	4b57      	ldr	r3, [pc, #348]	; (8006d60 <HAL_RCC_OscConfig+0x4b8>)
 8006c02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c06:	4a56      	ldr	r2, [pc, #344]	; (8006d60 <HAL_RCC_OscConfig+0x4b8>)
 8006c08:	f023 0301 	bic.w	r3, r3, #1
 8006c0c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006c10:	4b53      	ldr	r3, [pc, #332]	; (8006d60 <HAL_RCC_OscConfig+0x4b8>)
 8006c12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c16:	4a52      	ldr	r2, [pc, #328]	; (8006d60 <HAL_RCC_OscConfig+0x4b8>)
 8006c18:	f023 0304 	bic.w	r3, r3, #4
 8006c1c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	689b      	ldr	r3, [r3, #8]
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d016      	beq.n	8006c56 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c28:	f7fc f938 	bl	8002e9c <HAL_GetTick>
 8006c2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006c2e:	e00a      	b.n	8006c46 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006c30:	f7fc f934 	bl	8002e9c <HAL_GetTick>
 8006c34:	4602      	mov	r2, r0
 8006c36:	693b      	ldr	r3, [r7, #16]
 8006c38:	1ad3      	subs	r3, r2, r3
 8006c3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c3e:	4293      	cmp	r3, r2
 8006c40:	d901      	bls.n	8006c46 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8006c42:	2303      	movs	r3, #3
 8006c44:	e140      	b.n	8006ec8 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006c46:	4b46      	ldr	r3, [pc, #280]	; (8006d60 <HAL_RCC_OscConfig+0x4b8>)
 8006c48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c4c:	f003 0302 	and.w	r3, r3, #2
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d0ed      	beq.n	8006c30 <HAL_RCC_OscConfig+0x388>
 8006c54:	e015      	b.n	8006c82 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c56:	f7fc f921 	bl	8002e9c <HAL_GetTick>
 8006c5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006c5c:	e00a      	b.n	8006c74 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006c5e:	f7fc f91d 	bl	8002e9c <HAL_GetTick>
 8006c62:	4602      	mov	r2, r0
 8006c64:	693b      	ldr	r3, [r7, #16]
 8006c66:	1ad3      	subs	r3, r2, r3
 8006c68:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c6c:	4293      	cmp	r3, r2
 8006c6e:	d901      	bls.n	8006c74 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8006c70:	2303      	movs	r3, #3
 8006c72:	e129      	b.n	8006ec8 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006c74:	4b3a      	ldr	r3, [pc, #232]	; (8006d60 <HAL_RCC_OscConfig+0x4b8>)
 8006c76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c7a:	f003 0302 	and.w	r3, r3, #2
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d1ed      	bne.n	8006c5e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006c82:	7ffb      	ldrb	r3, [r7, #31]
 8006c84:	2b01      	cmp	r3, #1
 8006c86:	d105      	bne.n	8006c94 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006c88:	4b35      	ldr	r3, [pc, #212]	; (8006d60 <HAL_RCC_OscConfig+0x4b8>)
 8006c8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c8c:	4a34      	ldr	r2, [pc, #208]	; (8006d60 <HAL_RCC_OscConfig+0x4b8>)
 8006c8e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006c92:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	f003 0320 	and.w	r3, r3, #32
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d03c      	beq.n	8006d1a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	699b      	ldr	r3, [r3, #24]
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d01c      	beq.n	8006ce2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006ca8:	4b2d      	ldr	r3, [pc, #180]	; (8006d60 <HAL_RCC_OscConfig+0x4b8>)
 8006caa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006cae:	4a2c      	ldr	r2, [pc, #176]	; (8006d60 <HAL_RCC_OscConfig+0x4b8>)
 8006cb0:	f043 0301 	orr.w	r3, r3, #1
 8006cb4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006cb8:	f7fc f8f0 	bl	8002e9c <HAL_GetTick>
 8006cbc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006cbe:	e008      	b.n	8006cd2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006cc0:	f7fc f8ec 	bl	8002e9c <HAL_GetTick>
 8006cc4:	4602      	mov	r2, r0
 8006cc6:	693b      	ldr	r3, [r7, #16]
 8006cc8:	1ad3      	subs	r3, r2, r3
 8006cca:	2b02      	cmp	r3, #2
 8006ccc:	d901      	bls.n	8006cd2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8006cce:	2303      	movs	r3, #3
 8006cd0:	e0fa      	b.n	8006ec8 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006cd2:	4b23      	ldr	r3, [pc, #140]	; (8006d60 <HAL_RCC_OscConfig+0x4b8>)
 8006cd4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006cd8:	f003 0302 	and.w	r3, r3, #2
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d0ef      	beq.n	8006cc0 <HAL_RCC_OscConfig+0x418>
 8006ce0:	e01b      	b.n	8006d1a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006ce2:	4b1f      	ldr	r3, [pc, #124]	; (8006d60 <HAL_RCC_OscConfig+0x4b8>)
 8006ce4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006ce8:	4a1d      	ldr	r2, [pc, #116]	; (8006d60 <HAL_RCC_OscConfig+0x4b8>)
 8006cea:	f023 0301 	bic.w	r3, r3, #1
 8006cee:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006cf2:	f7fc f8d3 	bl	8002e9c <HAL_GetTick>
 8006cf6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006cf8:	e008      	b.n	8006d0c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006cfa:	f7fc f8cf 	bl	8002e9c <HAL_GetTick>
 8006cfe:	4602      	mov	r2, r0
 8006d00:	693b      	ldr	r3, [r7, #16]
 8006d02:	1ad3      	subs	r3, r2, r3
 8006d04:	2b02      	cmp	r3, #2
 8006d06:	d901      	bls.n	8006d0c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8006d08:	2303      	movs	r3, #3
 8006d0a:	e0dd      	b.n	8006ec8 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006d0c:	4b14      	ldr	r3, [pc, #80]	; (8006d60 <HAL_RCC_OscConfig+0x4b8>)
 8006d0e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006d12:	f003 0302 	and.w	r3, r3, #2
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d1ef      	bne.n	8006cfa <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	69db      	ldr	r3, [r3, #28]
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	f000 80d1 	beq.w	8006ec6 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006d24:	4b0e      	ldr	r3, [pc, #56]	; (8006d60 <HAL_RCC_OscConfig+0x4b8>)
 8006d26:	689b      	ldr	r3, [r3, #8]
 8006d28:	f003 030c 	and.w	r3, r3, #12
 8006d2c:	2b0c      	cmp	r3, #12
 8006d2e:	f000 808b 	beq.w	8006e48 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	69db      	ldr	r3, [r3, #28]
 8006d36:	2b02      	cmp	r3, #2
 8006d38:	d15e      	bne.n	8006df8 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006d3a:	4b09      	ldr	r3, [pc, #36]	; (8006d60 <HAL_RCC_OscConfig+0x4b8>)
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	4a08      	ldr	r2, [pc, #32]	; (8006d60 <HAL_RCC_OscConfig+0x4b8>)
 8006d40:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006d44:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d46:	f7fc f8a9 	bl	8002e9c <HAL_GetTick>
 8006d4a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006d4c:	e00c      	b.n	8006d68 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006d4e:	f7fc f8a5 	bl	8002e9c <HAL_GetTick>
 8006d52:	4602      	mov	r2, r0
 8006d54:	693b      	ldr	r3, [r7, #16]
 8006d56:	1ad3      	subs	r3, r2, r3
 8006d58:	2b02      	cmp	r3, #2
 8006d5a:	d905      	bls.n	8006d68 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8006d5c:	2303      	movs	r3, #3
 8006d5e:	e0b3      	b.n	8006ec8 <HAL_RCC_OscConfig+0x620>
 8006d60:	40021000 	.word	0x40021000
 8006d64:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006d68:	4b59      	ldr	r3, [pc, #356]	; (8006ed0 <HAL_RCC_OscConfig+0x628>)
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d1ec      	bne.n	8006d4e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006d74:	4b56      	ldr	r3, [pc, #344]	; (8006ed0 <HAL_RCC_OscConfig+0x628>)
 8006d76:	68da      	ldr	r2, [r3, #12]
 8006d78:	4b56      	ldr	r3, [pc, #344]	; (8006ed4 <HAL_RCC_OscConfig+0x62c>)
 8006d7a:	4013      	ands	r3, r2
 8006d7c:	687a      	ldr	r2, [r7, #4]
 8006d7e:	6a11      	ldr	r1, [r2, #32]
 8006d80:	687a      	ldr	r2, [r7, #4]
 8006d82:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006d84:	3a01      	subs	r2, #1
 8006d86:	0112      	lsls	r2, r2, #4
 8006d88:	4311      	orrs	r1, r2
 8006d8a:	687a      	ldr	r2, [r7, #4]
 8006d8c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8006d8e:	0212      	lsls	r2, r2, #8
 8006d90:	4311      	orrs	r1, r2
 8006d92:	687a      	ldr	r2, [r7, #4]
 8006d94:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8006d96:	0852      	lsrs	r2, r2, #1
 8006d98:	3a01      	subs	r2, #1
 8006d9a:	0552      	lsls	r2, r2, #21
 8006d9c:	4311      	orrs	r1, r2
 8006d9e:	687a      	ldr	r2, [r7, #4]
 8006da0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006da2:	0852      	lsrs	r2, r2, #1
 8006da4:	3a01      	subs	r2, #1
 8006da6:	0652      	lsls	r2, r2, #25
 8006da8:	4311      	orrs	r1, r2
 8006daa:	687a      	ldr	r2, [r7, #4]
 8006dac:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006dae:	06d2      	lsls	r2, r2, #27
 8006db0:	430a      	orrs	r2, r1
 8006db2:	4947      	ldr	r1, [pc, #284]	; (8006ed0 <HAL_RCC_OscConfig+0x628>)
 8006db4:	4313      	orrs	r3, r2
 8006db6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006db8:	4b45      	ldr	r3, [pc, #276]	; (8006ed0 <HAL_RCC_OscConfig+0x628>)
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	4a44      	ldr	r2, [pc, #272]	; (8006ed0 <HAL_RCC_OscConfig+0x628>)
 8006dbe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006dc2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006dc4:	4b42      	ldr	r3, [pc, #264]	; (8006ed0 <HAL_RCC_OscConfig+0x628>)
 8006dc6:	68db      	ldr	r3, [r3, #12]
 8006dc8:	4a41      	ldr	r2, [pc, #260]	; (8006ed0 <HAL_RCC_OscConfig+0x628>)
 8006dca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006dce:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006dd0:	f7fc f864 	bl	8002e9c <HAL_GetTick>
 8006dd4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006dd6:	e008      	b.n	8006dea <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006dd8:	f7fc f860 	bl	8002e9c <HAL_GetTick>
 8006ddc:	4602      	mov	r2, r0
 8006dde:	693b      	ldr	r3, [r7, #16]
 8006de0:	1ad3      	subs	r3, r2, r3
 8006de2:	2b02      	cmp	r3, #2
 8006de4:	d901      	bls.n	8006dea <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8006de6:	2303      	movs	r3, #3
 8006de8:	e06e      	b.n	8006ec8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006dea:	4b39      	ldr	r3, [pc, #228]	; (8006ed0 <HAL_RCC_OscConfig+0x628>)
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d0f0      	beq.n	8006dd8 <HAL_RCC_OscConfig+0x530>
 8006df6:	e066      	b.n	8006ec6 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006df8:	4b35      	ldr	r3, [pc, #212]	; (8006ed0 <HAL_RCC_OscConfig+0x628>)
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	4a34      	ldr	r2, [pc, #208]	; (8006ed0 <HAL_RCC_OscConfig+0x628>)
 8006dfe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006e02:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8006e04:	4b32      	ldr	r3, [pc, #200]	; (8006ed0 <HAL_RCC_OscConfig+0x628>)
 8006e06:	68db      	ldr	r3, [r3, #12]
 8006e08:	4a31      	ldr	r2, [pc, #196]	; (8006ed0 <HAL_RCC_OscConfig+0x628>)
 8006e0a:	f023 0303 	bic.w	r3, r3, #3
 8006e0e:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8006e10:	4b2f      	ldr	r3, [pc, #188]	; (8006ed0 <HAL_RCC_OscConfig+0x628>)
 8006e12:	68db      	ldr	r3, [r3, #12]
 8006e14:	4a2e      	ldr	r2, [pc, #184]	; (8006ed0 <HAL_RCC_OscConfig+0x628>)
 8006e16:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8006e1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006e1e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e20:	f7fc f83c 	bl	8002e9c <HAL_GetTick>
 8006e24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006e26:	e008      	b.n	8006e3a <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006e28:	f7fc f838 	bl	8002e9c <HAL_GetTick>
 8006e2c:	4602      	mov	r2, r0
 8006e2e:	693b      	ldr	r3, [r7, #16]
 8006e30:	1ad3      	subs	r3, r2, r3
 8006e32:	2b02      	cmp	r3, #2
 8006e34:	d901      	bls.n	8006e3a <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8006e36:	2303      	movs	r3, #3
 8006e38:	e046      	b.n	8006ec8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006e3a:	4b25      	ldr	r3, [pc, #148]	; (8006ed0 <HAL_RCC_OscConfig+0x628>)
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d1f0      	bne.n	8006e28 <HAL_RCC_OscConfig+0x580>
 8006e46:	e03e      	b.n	8006ec6 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	69db      	ldr	r3, [r3, #28]
 8006e4c:	2b01      	cmp	r3, #1
 8006e4e:	d101      	bne.n	8006e54 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8006e50:	2301      	movs	r3, #1
 8006e52:	e039      	b.n	8006ec8 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8006e54:	4b1e      	ldr	r3, [pc, #120]	; (8006ed0 <HAL_RCC_OscConfig+0x628>)
 8006e56:	68db      	ldr	r3, [r3, #12]
 8006e58:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006e5a:	697b      	ldr	r3, [r7, #20]
 8006e5c:	f003 0203 	and.w	r2, r3, #3
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	6a1b      	ldr	r3, [r3, #32]
 8006e64:	429a      	cmp	r2, r3
 8006e66:	d12c      	bne.n	8006ec2 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006e68:	697b      	ldr	r3, [r7, #20]
 8006e6a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e72:	3b01      	subs	r3, #1
 8006e74:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006e76:	429a      	cmp	r2, r3
 8006e78:	d123      	bne.n	8006ec2 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006e7a:	697b      	ldr	r3, [r7, #20]
 8006e7c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e84:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006e86:	429a      	cmp	r2, r3
 8006e88:	d11b      	bne.n	8006ec2 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006e8a:	697b      	ldr	r3, [r7, #20]
 8006e8c:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e94:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006e96:	429a      	cmp	r2, r3
 8006e98:	d113      	bne.n	8006ec2 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006e9a:	697b      	ldr	r3, [r7, #20]
 8006e9c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ea4:	085b      	lsrs	r3, r3, #1
 8006ea6:	3b01      	subs	r3, #1
 8006ea8:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006eaa:	429a      	cmp	r2, r3
 8006eac:	d109      	bne.n	8006ec2 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006eae:	697b      	ldr	r3, [r7, #20]
 8006eb0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006eb8:	085b      	lsrs	r3, r3, #1
 8006eba:	3b01      	subs	r3, #1
 8006ebc:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006ebe:	429a      	cmp	r2, r3
 8006ec0:	d001      	beq.n	8006ec6 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8006ec2:	2301      	movs	r3, #1
 8006ec4:	e000      	b.n	8006ec8 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8006ec6:	2300      	movs	r3, #0
}
 8006ec8:	4618      	mov	r0, r3
 8006eca:	3720      	adds	r7, #32
 8006ecc:	46bd      	mov	sp, r7
 8006ece:	bd80      	pop	{r7, pc}
 8006ed0:	40021000 	.word	0x40021000
 8006ed4:	019f800c 	.word	0x019f800c

08006ed8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006ed8:	b580      	push	{r7, lr}
 8006eda:	b086      	sub	sp, #24
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	6078      	str	r0, [r7, #4]
 8006ee0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8006ee2:	2300      	movs	r3, #0
 8006ee4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d101      	bne.n	8006ef0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006eec:	2301      	movs	r3, #1
 8006eee:	e11e      	b.n	800712e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006ef0:	4b91      	ldr	r3, [pc, #580]	; (8007138 <HAL_RCC_ClockConfig+0x260>)
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	f003 030f 	and.w	r3, r3, #15
 8006ef8:	683a      	ldr	r2, [r7, #0]
 8006efa:	429a      	cmp	r2, r3
 8006efc:	d910      	bls.n	8006f20 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006efe:	4b8e      	ldr	r3, [pc, #568]	; (8007138 <HAL_RCC_ClockConfig+0x260>)
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	f023 020f 	bic.w	r2, r3, #15
 8006f06:	498c      	ldr	r1, [pc, #560]	; (8007138 <HAL_RCC_ClockConfig+0x260>)
 8006f08:	683b      	ldr	r3, [r7, #0]
 8006f0a:	4313      	orrs	r3, r2
 8006f0c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006f0e:	4b8a      	ldr	r3, [pc, #552]	; (8007138 <HAL_RCC_ClockConfig+0x260>)
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	f003 030f 	and.w	r3, r3, #15
 8006f16:	683a      	ldr	r2, [r7, #0]
 8006f18:	429a      	cmp	r2, r3
 8006f1a:	d001      	beq.n	8006f20 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006f1c:	2301      	movs	r3, #1
 8006f1e:	e106      	b.n	800712e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	f003 0301 	and.w	r3, r3, #1
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d073      	beq.n	8007014 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	685b      	ldr	r3, [r3, #4]
 8006f30:	2b03      	cmp	r3, #3
 8006f32:	d129      	bne.n	8006f88 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006f34:	4b81      	ldr	r3, [pc, #516]	; (800713c <HAL_RCC_ClockConfig+0x264>)
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d101      	bne.n	8006f44 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8006f40:	2301      	movs	r3, #1
 8006f42:	e0f4      	b.n	800712e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8006f44:	f000 f9ce 	bl	80072e4 <RCC_GetSysClockFreqFromPLLSource>
 8006f48:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8006f4a:	693b      	ldr	r3, [r7, #16]
 8006f4c:	4a7c      	ldr	r2, [pc, #496]	; (8007140 <HAL_RCC_ClockConfig+0x268>)
 8006f4e:	4293      	cmp	r3, r2
 8006f50:	d93f      	bls.n	8006fd2 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8006f52:	4b7a      	ldr	r3, [pc, #488]	; (800713c <HAL_RCC_ClockConfig+0x264>)
 8006f54:	689b      	ldr	r3, [r3, #8]
 8006f56:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d009      	beq.n	8006f72 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d033      	beq.n	8006fd2 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d12f      	bne.n	8006fd2 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006f72:	4b72      	ldr	r3, [pc, #456]	; (800713c <HAL_RCC_ClockConfig+0x264>)
 8006f74:	689b      	ldr	r3, [r3, #8]
 8006f76:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006f7a:	4a70      	ldr	r2, [pc, #448]	; (800713c <HAL_RCC_ClockConfig+0x264>)
 8006f7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f80:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8006f82:	2380      	movs	r3, #128	; 0x80
 8006f84:	617b      	str	r3, [r7, #20]
 8006f86:	e024      	b.n	8006fd2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	685b      	ldr	r3, [r3, #4]
 8006f8c:	2b02      	cmp	r3, #2
 8006f8e:	d107      	bne.n	8006fa0 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006f90:	4b6a      	ldr	r3, [pc, #424]	; (800713c <HAL_RCC_ClockConfig+0x264>)
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d109      	bne.n	8006fb0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006f9c:	2301      	movs	r3, #1
 8006f9e:	e0c6      	b.n	800712e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006fa0:	4b66      	ldr	r3, [pc, #408]	; (800713c <HAL_RCC_ClockConfig+0x264>)
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d101      	bne.n	8006fb0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006fac:	2301      	movs	r3, #1
 8006fae:	e0be      	b.n	800712e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8006fb0:	f000 f8ce 	bl	8007150 <HAL_RCC_GetSysClockFreq>
 8006fb4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8006fb6:	693b      	ldr	r3, [r7, #16]
 8006fb8:	4a61      	ldr	r2, [pc, #388]	; (8007140 <HAL_RCC_ClockConfig+0x268>)
 8006fba:	4293      	cmp	r3, r2
 8006fbc:	d909      	bls.n	8006fd2 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006fbe:	4b5f      	ldr	r3, [pc, #380]	; (800713c <HAL_RCC_ClockConfig+0x264>)
 8006fc0:	689b      	ldr	r3, [r3, #8]
 8006fc2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006fc6:	4a5d      	ldr	r2, [pc, #372]	; (800713c <HAL_RCC_ClockConfig+0x264>)
 8006fc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006fcc:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8006fce:	2380      	movs	r3, #128	; 0x80
 8006fd0:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006fd2:	4b5a      	ldr	r3, [pc, #360]	; (800713c <HAL_RCC_ClockConfig+0x264>)
 8006fd4:	689b      	ldr	r3, [r3, #8]
 8006fd6:	f023 0203 	bic.w	r2, r3, #3
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	685b      	ldr	r3, [r3, #4]
 8006fde:	4957      	ldr	r1, [pc, #348]	; (800713c <HAL_RCC_ClockConfig+0x264>)
 8006fe0:	4313      	orrs	r3, r2
 8006fe2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006fe4:	f7fb ff5a 	bl	8002e9c <HAL_GetTick>
 8006fe8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006fea:	e00a      	b.n	8007002 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006fec:	f7fb ff56 	bl	8002e9c <HAL_GetTick>
 8006ff0:	4602      	mov	r2, r0
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	1ad3      	subs	r3, r2, r3
 8006ff6:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ffa:	4293      	cmp	r3, r2
 8006ffc:	d901      	bls.n	8007002 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8006ffe:	2303      	movs	r3, #3
 8007000:	e095      	b.n	800712e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007002:	4b4e      	ldr	r3, [pc, #312]	; (800713c <HAL_RCC_ClockConfig+0x264>)
 8007004:	689b      	ldr	r3, [r3, #8]
 8007006:	f003 020c 	and.w	r2, r3, #12
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	685b      	ldr	r3, [r3, #4]
 800700e:	009b      	lsls	r3, r3, #2
 8007010:	429a      	cmp	r2, r3
 8007012:	d1eb      	bne.n	8006fec <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	f003 0302 	and.w	r3, r3, #2
 800701c:	2b00      	cmp	r3, #0
 800701e:	d023      	beq.n	8007068 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	f003 0304 	and.w	r3, r3, #4
 8007028:	2b00      	cmp	r3, #0
 800702a:	d005      	beq.n	8007038 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800702c:	4b43      	ldr	r3, [pc, #268]	; (800713c <HAL_RCC_ClockConfig+0x264>)
 800702e:	689b      	ldr	r3, [r3, #8]
 8007030:	4a42      	ldr	r2, [pc, #264]	; (800713c <HAL_RCC_ClockConfig+0x264>)
 8007032:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8007036:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	f003 0308 	and.w	r3, r3, #8
 8007040:	2b00      	cmp	r3, #0
 8007042:	d007      	beq.n	8007054 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8007044:	4b3d      	ldr	r3, [pc, #244]	; (800713c <HAL_RCC_ClockConfig+0x264>)
 8007046:	689b      	ldr	r3, [r3, #8]
 8007048:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800704c:	4a3b      	ldr	r2, [pc, #236]	; (800713c <HAL_RCC_ClockConfig+0x264>)
 800704e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8007052:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007054:	4b39      	ldr	r3, [pc, #228]	; (800713c <HAL_RCC_ClockConfig+0x264>)
 8007056:	689b      	ldr	r3, [r3, #8]
 8007058:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	689b      	ldr	r3, [r3, #8]
 8007060:	4936      	ldr	r1, [pc, #216]	; (800713c <HAL_RCC_ClockConfig+0x264>)
 8007062:	4313      	orrs	r3, r2
 8007064:	608b      	str	r3, [r1, #8]
 8007066:	e008      	b.n	800707a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8007068:	697b      	ldr	r3, [r7, #20]
 800706a:	2b80      	cmp	r3, #128	; 0x80
 800706c:	d105      	bne.n	800707a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800706e:	4b33      	ldr	r3, [pc, #204]	; (800713c <HAL_RCC_ClockConfig+0x264>)
 8007070:	689b      	ldr	r3, [r3, #8]
 8007072:	4a32      	ldr	r2, [pc, #200]	; (800713c <HAL_RCC_ClockConfig+0x264>)
 8007074:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007078:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800707a:	4b2f      	ldr	r3, [pc, #188]	; (8007138 <HAL_RCC_ClockConfig+0x260>)
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	f003 030f 	and.w	r3, r3, #15
 8007082:	683a      	ldr	r2, [r7, #0]
 8007084:	429a      	cmp	r2, r3
 8007086:	d21d      	bcs.n	80070c4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007088:	4b2b      	ldr	r3, [pc, #172]	; (8007138 <HAL_RCC_ClockConfig+0x260>)
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	f023 020f 	bic.w	r2, r3, #15
 8007090:	4929      	ldr	r1, [pc, #164]	; (8007138 <HAL_RCC_ClockConfig+0x260>)
 8007092:	683b      	ldr	r3, [r7, #0]
 8007094:	4313      	orrs	r3, r2
 8007096:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8007098:	f7fb ff00 	bl	8002e9c <HAL_GetTick>
 800709c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800709e:	e00a      	b.n	80070b6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80070a0:	f7fb fefc 	bl	8002e9c <HAL_GetTick>
 80070a4:	4602      	mov	r2, r0
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	1ad3      	subs	r3, r2, r3
 80070aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80070ae:	4293      	cmp	r3, r2
 80070b0:	d901      	bls.n	80070b6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80070b2:	2303      	movs	r3, #3
 80070b4:	e03b      	b.n	800712e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80070b6:	4b20      	ldr	r3, [pc, #128]	; (8007138 <HAL_RCC_ClockConfig+0x260>)
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	f003 030f 	and.w	r3, r3, #15
 80070be:	683a      	ldr	r2, [r7, #0]
 80070c0:	429a      	cmp	r2, r3
 80070c2:	d1ed      	bne.n	80070a0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	f003 0304 	and.w	r3, r3, #4
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d008      	beq.n	80070e2 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80070d0:	4b1a      	ldr	r3, [pc, #104]	; (800713c <HAL_RCC_ClockConfig+0x264>)
 80070d2:	689b      	ldr	r3, [r3, #8]
 80070d4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	68db      	ldr	r3, [r3, #12]
 80070dc:	4917      	ldr	r1, [pc, #92]	; (800713c <HAL_RCC_ClockConfig+0x264>)
 80070de:	4313      	orrs	r3, r2
 80070e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	f003 0308 	and.w	r3, r3, #8
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d009      	beq.n	8007102 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80070ee:	4b13      	ldr	r3, [pc, #76]	; (800713c <HAL_RCC_ClockConfig+0x264>)
 80070f0:	689b      	ldr	r3, [r3, #8]
 80070f2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	691b      	ldr	r3, [r3, #16]
 80070fa:	00db      	lsls	r3, r3, #3
 80070fc:	490f      	ldr	r1, [pc, #60]	; (800713c <HAL_RCC_ClockConfig+0x264>)
 80070fe:	4313      	orrs	r3, r2
 8007100:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8007102:	f000 f825 	bl	8007150 <HAL_RCC_GetSysClockFreq>
 8007106:	4602      	mov	r2, r0
 8007108:	4b0c      	ldr	r3, [pc, #48]	; (800713c <HAL_RCC_ClockConfig+0x264>)
 800710a:	689b      	ldr	r3, [r3, #8]
 800710c:	091b      	lsrs	r3, r3, #4
 800710e:	f003 030f 	and.w	r3, r3, #15
 8007112:	490c      	ldr	r1, [pc, #48]	; (8007144 <HAL_RCC_ClockConfig+0x26c>)
 8007114:	5ccb      	ldrb	r3, [r1, r3]
 8007116:	f003 031f 	and.w	r3, r3, #31
 800711a:	fa22 f303 	lsr.w	r3, r2, r3
 800711e:	4a0a      	ldr	r2, [pc, #40]	; (8007148 <HAL_RCC_ClockConfig+0x270>)
 8007120:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8007122:	4b0a      	ldr	r3, [pc, #40]	; (800714c <HAL_RCC_ClockConfig+0x274>)
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	4618      	mov	r0, r3
 8007128:	f7fa fe02 	bl	8001d30 <HAL_InitTick>
 800712c:	4603      	mov	r3, r0
}
 800712e:	4618      	mov	r0, r3
 8007130:	3718      	adds	r7, #24
 8007132:	46bd      	mov	sp, r7
 8007134:	bd80      	pop	{r7, pc}
 8007136:	bf00      	nop
 8007138:	40022000 	.word	0x40022000
 800713c:	40021000 	.word	0x40021000
 8007140:	04c4b400 	.word	0x04c4b400
 8007144:	08013ba0 	.word	0x08013ba0
 8007148:	20000000 	.word	0x20000000
 800714c:	20000004 	.word	0x20000004

08007150 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007150:	b480      	push	{r7}
 8007152:	b087      	sub	sp, #28
 8007154:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8007156:	4b2c      	ldr	r3, [pc, #176]	; (8007208 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007158:	689b      	ldr	r3, [r3, #8]
 800715a:	f003 030c 	and.w	r3, r3, #12
 800715e:	2b04      	cmp	r3, #4
 8007160:	d102      	bne.n	8007168 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8007162:	4b2a      	ldr	r3, [pc, #168]	; (800720c <HAL_RCC_GetSysClockFreq+0xbc>)
 8007164:	613b      	str	r3, [r7, #16]
 8007166:	e047      	b.n	80071f8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8007168:	4b27      	ldr	r3, [pc, #156]	; (8007208 <HAL_RCC_GetSysClockFreq+0xb8>)
 800716a:	689b      	ldr	r3, [r3, #8]
 800716c:	f003 030c 	and.w	r3, r3, #12
 8007170:	2b08      	cmp	r3, #8
 8007172:	d102      	bne.n	800717a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8007174:	4b25      	ldr	r3, [pc, #148]	; (800720c <HAL_RCC_GetSysClockFreq+0xbc>)
 8007176:	613b      	str	r3, [r7, #16]
 8007178:	e03e      	b.n	80071f8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800717a:	4b23      	ldr	r3, [pc, #140]	; (8007208 <HAL_RCC_GetSysClockFreq+0xb8>)
 800717c:	689b      	ldr	r3, [r3, #8]
 800717e:	f003 030c 	and.w	r3, r3, #12
 8007182:	2b0c      	cmp	r3, #12
 8007184:	d136      	bne.n	80071f4 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007186:	4b20      	ldr	r3, [pc, #128]	; (8007208 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007188:	68db      	ldr	r3, [r3, #12]
 800718a:	f003 0303 	and.w	r3, r3, #3
 800718e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007190:	4b1d      	ldr	r3, [pc, #116]	; (8007208 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007192:	68db      	ldr	r3, [r3, #12]
 8007194:	091b      	lsrs	r3, r3, #4
 8007196:	f003 030f 	and.w	r3, r3, #15
 800719a:	3301      	adds	r3, #1
 800719c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	2b03      	cmp	r3, #3
 80071a2:	d10c      	bne.n	80071be <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80071a4:	4a19      	ldr	r2, [pc, #100]	; (800720c <HAL_RCC_GetSysClockFreq+0xbc>)
 80071a6:	68bb      	ldr	r3, [r7, #8]
 80071a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80071ac:	4a16      	ldr	r2, [pc, #88]	; (8007208 <HAL_RCC_GetSysClockFreq+0xb8>)
 80071ae:	68d2      	ldr	r2, [r2, #12]
 80071b0:	0a12      	lsrs	r2, r2, #8
 80071b2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80071b6:	fb02 f303 	mul.w	r3, r2, r3
 80071ba:	617b      	str	r3, [r7, #20]
      break;
 80071bc:	e00c      	b.n	80071d8 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80071be:	4a13      	ldr	r2, [pc, #76]	; (800720c <HAL_RCC_GetSysClockFreq+0xbc>)
 80071c0:	68bb      	ldr	r3, [r7, #8]
 80071c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80071c6:	4a10      	ldr	r2, [pc, #64]	; (8007208 <HAL_RCC_GetSysClockFreq+0xb8>)
 80071c8:	68d2      	ldr	r2, [r2, #12]
 80071ca:	0a12      	lsrs	r2, r2, #8
 80071cc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80071d0:	fb02 f303 	mul.w	r3, r2, r3
 80071d4:	617b      	str	r3, [r7, #20]
      break;
 80071d6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80071d8:	4b0b      	ldr	r3, [pc, #44]	; (8007208 <HAL_RCC_GetSysClockFreq+0xb8>)
 80071da:	68db      	ldr	r3, [r3, #12]
 80071dc:	0e5b      	lsrs	r3, r3, #25
 80071de:	f003 0303 	and.w	r3, r3, #3
 80071e2:	3301      	adds	r3, #1
 80071e4:	005b      	lsls	r3, r3, #1
 80071e6:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80071e8:	697a      	ldr	r2, [r7, #20]
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80071f0:	613b      	str	r3, [r7, #16]
 80071f2:	e001      	b.n	80071f8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80071f4:	2300      	movs	r3, #0
 80071f6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80071f8:	693b      	ldr	r3, [r7, #16]
}
 80071fa:	4618      	mov	r0, r3
 80071fc:	371c      	adds	r7, #28
 80071fe:	46bd      	mov	sp, r7
 8007200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007204:	4770      	bx	lr
 8007206:	bf00      	nop
 8007208:	40021000 	.word	0x40021000
 800720c:	00f42400 	.word	0x00f42400

08007210 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007210:	b480      	push	{r7}
 8007212:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007214:	4b03      	ldr	r3, [pc, #12]	; (8007224 <HAL_RCC_GetHCLKFreq+0x14>)
 8007216:	681b      	ldr	r3, [r3, #0]
}
 8007218:	4618      	mov	r0, r3
 800721a:	46bd      	mov	sp, r7
 800721c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007220:	4770      	bx	lr
 8007222:	bf00      	nop
 8007224:	20000000 	.word	0x20000000

08007228 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007228:	b580      	push	{r7, lr}
 800722a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800722c:	f7ff fff0 	bl	8007210 <HAL_RCC_GetHCLKFreq>
 8007230:	4602      	mov	r2, r0
 8007232:	4b06      	ldr	r3, [pc, #24]	; (800724c <HAL_RCC_GetPCLK1Freq+0x24>)
 8007234:	689b      	ldr	r3, [r3, #8]
 8007236:	0a1b      	lsrs	r3, r3, #8
 8007238:	f003 0307 	and.w	r3, r3, #7
 800723c:	4904      	ldr	r1, [pc, #16]	; (8007250 <HAL_RCC_GetPCLK1Freq+0x28>)
 800723e:	5ccb      	ldrb	r3, [r1, r3]
 8007240:	f003 031f 	and.w	r3, r3, #31
 8007244:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007248:	4618      	mov	r0, r3
 800724a:	bd80      	pop	{r7, pc}
 800724c:	40021000 	.word	0x40021000
 8007250:	08013bb0 	.word	0x08013bb0

08007254 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007254:	b580      	push	{r7, lr}
 8007256:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8007258:	f7ff ffda 	bl	8007210 <HAL_RCC_GetHCLKFreq>
 800725c:	4602      	mov	r2, r0
 800725e:	4b06      	ldr	r3, [pc, #24]	; (8007278 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007260:	689b      	ldr	r3, [r3, #8]
 8007262:	0adb      	lsrs	r3, r3, #11
 8007264:	f003 0307 	and.w	r3, r3, #7
 8007268:	4904      	ldr	r1, [pc, #16]	; (800727c <HAL_RCC_GetPCLK2Freq+0x28>)
 800726a:	5ccb      	ldrb	r3, [r1, r3]
 800726c:	f003 031f 	and.w	r3, r3, #31
 8007270:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007274:	4618      	mov	r0, r3
 8007276:	bd80      	pop	{r7, pc}
 8007278:	40021000 	.word	0x40021000
 800727c:	08013bb0 	.word	0x08013bb0

08007280 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007280:	b480      	push	{r7}
 8007282:	b083      	sub	sp, #12
 8007284:	af00      	add	r7, sp, #0
 8007286:	6078      	str	r0, [r7, #4]
 8007288:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	220f      	movs	r2, #15
 800728e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8007290:	4b12      	ldr	r3, [pc, #72]	; (80072dc <HAL_RCC_GetClockConfig+0x5c>)
 8007292:	689b      	ldr	r3, [r3, #8]
 8007294:	f003 0203 	and.w	r2, r3, #3
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 800729c:	4b0f      	ldr	r3, [pc, #60]	; (80072dc <HAL_RCC_GetClockConfig+0x5c>)
 800729e:	689b      	ldr	r3, [r3, #8]
 80072a0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80072a8:	4b0c      	ldr	r3, [pc, #48]	; (80072dc <HAL_RCC_GetClockConfig+0x5c>)
 80072aa:	689b      	ldr	r3, [r3, #8]
 80072ac:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80072b4:	4b09      	ldr	r3, [pc, #36]	; (80072dc <HAL_RCC_GetClockConfig+0x5c>)
 80072b6:	689b      	ldr	r3, [r3, #8]
 80072b8:	08db      	lsrs	r3, r3, #3
 80072ba:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80072c2:	4b07      	ldr	r3, [pc, #28]	; (80072e0 <HAL_RCC_GetClockConfig+0x60>)
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	f003 020f 	and.w	r2, r3, #15
 80072ca:	683b      	ldr	r3, [r7, #0]
 80072cc:	601a      	str	r2, [r3, #0]
}
 80072ce:	bf00      	nop
 80072d0:	370c      	adds	r7, #12
 80072d2:	46bd      	mov	sp, r7
 80072d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d8:	4770      	bx	lr
 80072da:	bf00      	nop
 80072dc:	40021000 	.word	0x40021000
 80072e0:	40022000 	.word	0x40022000

080072e4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80072e4:	b480      	push	{r7}
 80072e6:	b087      	sub	sp, #28
 80072e8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80072ea:	4b1e      	ldr	r3, [pc, #120]	; (8007364 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80072ec:	68db      	ldr	r3, [r3, #12]
 80072ee:	f003 0303 	and.w	r3, r3, #3
 80072f2:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80072f4:	4b1b      	ldr	r3, [pc, #108]	; (8007364 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80072f6:	68db      	ldr	r3, [r3, #12]
 80072f8:	091b      	lsrs	r3, r3, #4
 80072fa:	f003 030f 	and.w	r3, r3, #15
 80072fe:	3301      	adds	r3, #1
 8007300:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8007302:	693b      	ldr	r3, [r7, #16]
 8007304:	2b03      	cmp	r3, #3
 8007306:	d10c      	bne.n	8007322 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007308:	4a17      	ldr	r2, [pc, #92]	; (8007368 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007310:	4a14      	ldr	r2, [pc, #80]	; (8007364 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007312:	68d2      	ldr	r2, [r2, #12]
 8007314:	0a12      	lsrs	r2, r2, #8
 8007316:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800731a:	fb02 f303 	mul.w	r3, r2, r3
 800731e:	617b      	str	r3, [r7, #20]
    break;
 8007320:	e00c      	b.n	800733c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007322:	4a11      	ldr	r2, [pc, #68]	; (8007368 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	fbb2 f3f3 	udiv	r3, r2, r3
 800732a:	4a0e      	ldr	r2, [pc, #56]	; (8007364 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800732c:	68d2      	ldr	r2, [r2, #12]
 800732e:	0a12      	lsrs	r2, r2, #8
 8007330:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8007334:	fb02 f303 	mul.w	r3, r2, r3
 8007338:	617b      	str	r3, [r7, #20]
    break;
 800733a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800733c:	4b09      	ldr	r3, [pc, #36]	; (8007364 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800733e:	68db      	ldr	r3, [r3, #12]
 8007340:	0e5b      	lsrs	r3, r3, #25
 8007342:	f003 0303 	and.w	r3, r3, #3
 8007346:	3301      	adds	r3, #1
 8007348:	005b      	lsls	r3, r3, #1
 800734a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800734c:	697a      	ldr	r2, [r7, #20]
 800734e:	68bb      	ldr	r3, [r7, #8]
 8007350:	fbb2 f3f3 	udiv	r3, r2, r3
 8007354:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8007356:	687b      	ldr	r3, [r7, #4]
}
 8007358:	4618      	mov	r0, r3
 800735a:	371c      	adds	r7, #28
 800735c:	46bd      	mov	sp, r7
 800735e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007362:	4770      	bx	lr
 8007364:	40021000 	.word	0x40021000
 8007368:	00f42400 	.word	0x00f42400

0800736c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800736c:	b580      	push	{r7, lr}
 800736e:	b086      	sub	sp, #24
 8007370:	af00      	add	r7, sp, #0
 8007372:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007374:	2300      	movs	r3, #0
 8007376:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007378:	2300      	movs	r3, #0
 800737a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007384:	2b00      	cmp	r3, #0
 8007386:	f000 8098 	beq.w	80074ba <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800738a:	2300      	movs	r3, #0
 800738c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800738e:	4b43      	ldr	r3, [pc, #268]	; (800749c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007390:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007392:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007396:	2b00      	cmp	r3, #0
 8007398:	d10d      	bne.n	80073b6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800739a:	4b40      	ldr	r3, [pc, #256]	; (800749c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800739c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800739e:	4a3f      	ldr	r2, [pc, #252]	; (800749c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80073a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80073a4:	6593      	str	r3, [r2, #88]	; 0x58
 80073a6:	4b3d      	ldr	r3, [pc, #244]	; (800749c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80073a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80073aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80073ae:	60bb      	str	r3, [r7, #8]
 80073b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80073b2:	2301      	movs	r3, #1
 80073b4:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80073b6:	4b3a      	ldr	r3, [pc, #232]	; (80074a0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	4a39      	ldr	r2, [pc, #228]	; (80074a0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80073bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80073c0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80073c2:	f7fb fd6b 	bl	8002e9c <HAL_GetTick>
 80073c6:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80073c8:	e009      	b.n	80073de <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80073ca:	f7fb fd67 	bl	8002e9c <HAL_GetTick>
 80073ce:	4602      	mov	r2, r0
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	1ad3      	subs	r3, r2, r3
 80073d4:	2b02      	cmp	r3, #2
 80073d6:	d902      	bls.n	80073de <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80073d8:	2303      	movs	r3, #3
 80073da:	74fb      	strb	r3, [r7, #19]
        break;
 80073dc:	e005      	b.n	80073ea <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80073de:	4b30      	ldr	r3, [pc, #192]	; (80074a0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d0ef      	beq.n	80073ca <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80073ea:	7cfb      	ldrb	r3, [r7, #19]
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d159      	bne.n	80074a4 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80073f0:	4b2a      	ldr	r3, [pc, #168]	; (800749c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80073f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80073f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80073fa:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80073fc:	697b      	ldr	r3, [r7, #20]
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d01e      	beq.n	8007440 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007406:	697a      	ldr	r2, [r7, #20]
 8007408:	429a      	cmp	r2, r3
 800740a:	d019      	beq.n	8007440 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800740c:	4b23      	ldr	r3, [pc, #140]	; (800749c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800740e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007412:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007416:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007418:	4b20      	ldr	r3, [pc, #128]	; (800749c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800741a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800741e:	4a1f      	ldr	r2, [pc, #124]	; (800749c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007420:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007424:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007428:	4b1c      	ldr	r3, [pc, #112]	; (800749c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800742a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800742e:	4a1b      	ldr	r2, [pc, #108]	; (800749c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007430:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007434:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007438:	4a18      	ldr	r2, [pc, #96]	; (800749c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800743a:	697b      	ldr	r3, [r7, #20]
 800743c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007440:	697b      	ldr	r3, [r7, #20]
 8007442:	f003 0301 	and.w	r3, r3, #1
 8007446:	2b00      	cmp	r3, #0
 8007448:	d016      	beq.n	8007478 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800744a:	f7fb fd27 	bl	8002e9c <HAL_GetTick>
 800744e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007450:	e00b      	b.n	800746a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007452:	f7fb fd23 	bl	8002e9c <HAL_GetTick>
 8007456:	4602      	mov	r2, r0
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	1ad3      	subs	r3, r2, r3
 800745c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007460:	4293      	cmp	r3, r2
 8007462:	d902      	bls.n	800746a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8007464:	2303      	movs	r3, #3
 8007466:	74fb      	strb	r3, [r7, #19]
            break;
 8007468:	e006      	b.n	8007478 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800746a:	4b0c      	ldr	r3, [pc, #48]	; (800749c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800746c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007470:	f003 0302 	and.w	r3, r3, #2
 8007474:	2b00      	cmp	r3, #0
 8007476:	d0ec      	beq.n	8007452 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8007478:	7cfb      	ldrb	r3, [r7, #19]
 800747a:	2b00      	cmp	r3, #0
 800747c:	d10b      	bne.n	8007496 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800747e:	4b07      	ldr	r3, [pc, #28]	; (800749c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007480:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007484:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800748c:	4903      	ldr	r1, [pc, #12]	; (800749c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800748e:	4313      	orrs	r3, r2
 8007490:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8007494:	e008      	b.n	80074a8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007496:	7cfb      	ldrb	r3, [r7, #19]
 8007498:	74bb      	strb	r3, [r7, #18]
 800749a:	e005      	b.n	80074a8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800749c:	40021000 	.word	0x40021000
 80074a0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074a4:	7cfb      	ldrb	r3, [r7, #19]
 80074a6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80074a8:	7c7b      	ldrb	r3, [r7, #17]
 80074aa:	2b01      	cmp	r3, #1
 80074ac:	d105      	bne.n	80074ba <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80074ae:	4ba7      	ldr	r3, [pc, #668]	; (800774c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80074b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80074b2:	4aa6      	ldr	r2, [pc, #664]	; (800774c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80074b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80074b8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	f003 0301 	and.w	r3, r3, #1
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d00a      	beq.n	80074dc <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80074c6:	4ba1      	ldr	r3, [pc, #644]	; (800774c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80074c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80074cc:	f023 0203 	bic.w	r2, r3, #3
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	685b      	ldr	r3, [r3, #4]
 80074d4:	499d      	ldr	r1, [pc, #628]	; (800774c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80074d6:	4313      	orrs	r3, r2
 80074d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	f003 0302 	and.w	r3, r3, #2
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d00a      	beq.n	80074fe <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80074e8:	4b98      	ldr	r3, [pc, #608]	; (800774c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80074ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80074ee:	f023 020c 	bic.w	r2, r3, #12
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	689b      	ldr	r3, [r3, #8]
 80074f6:	4995      	ldr	r1, [pc, #596]	; (800774c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80074f8:	4313      	orrs	r3, r2
 80074fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	f003 0304 	and.w	r3, r3, #4
 8007506:	2b00      	cmp	r3, #0
 8007508:	d00a      	beq.n	8007520 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800750a:	4b90      	ldr	r3, [pc, #576]	; (800774c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800750c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007510:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	68db      	ldr	r3, [r3, #12]
 8007518:	498c      	ldr	r1, [pc, #560]	; (800774c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800751a:	4313      	orrs	r3, r2
 800751c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	f003 0308 	and.w	r3, r3, #8
 8007528:	2b00      	cmp	r3, #0
 800752a:	d00a      	beq.n	8007542 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800752c:	4b87      	ldr	r3, [pc, #540]	; (800774c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800752e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007532:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	691b      	ldr	r3, [r3, #16]
 800753a:	4984      	ldr	r1, [pc, #528]	; (800774c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800753c:	4313      	orrs	r3, r2
 800753e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	f003 0310 	and.w	r3, r3, #16
 800754a:	2b00      	cmp	r3, #0
 800754c:	d00a      	beq.n	8007564 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800754e:	4b7f      	ldr	r3, [pc, #508]	; (800774c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007550:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007554:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	695b      	ldr	r3, [r3, #20]
 800755c:	497b      	ldr	r1, [pc, #492]	; (800774c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800755e:	4313      	orrs	r3, r2
 8007560:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	f003 0320 	and.w	r3, r3, #32
 800756c:	2b00      	cmp	r3, #0
 800756e:	d00a      	beq.n	8007586 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007570:	4b76      	ldr	r3, [pc, #472]	; (800774c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007572:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007576:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	699b      	ldr	r3, [r3, #24]
 800757e:	4973      	ldr	r1, [pc, #460]	; (800774c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007580:	4313      	orrs	r3, r2
 8007582:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800758e:	2b00      	cmp	r3, #0
 8007590:	d00a      	beq.n	80075a8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007592:	4b6e      	ldr	r3, [pc, #440]	; (800774c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007594:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007598:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	69db      	ldr	r3, [r3, #28]
 80075a0:	496a      	ldr	r1, [pc, #424]	; (800774c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80075a2:	4313      	orrs	r3, r2
 80075a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d00a      	beq.n	80075ca <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80075b4:	4b65      	ldr	r3, [pc, #404]	; (800774c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80075b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80075ba:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	6a1b      	ldr	r3, [r3, #32]
 80075c2:	4962      	ldr	r1, [pc, #392]	; (800774c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80075c4:	4313      	orrs	r3, r2
 80075c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d00a      	beq.n	80075ec <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80075d6:	4b5d      	ldr	r3, [pc, #372]	; (800774c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80075d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80075dc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075e4:	4959      	ldr	r1, [pc, #356]	; (800774c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80075e6:	4313      	orrs	r3, r2
 80075e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d00a      	beq.n	800760e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80075f8:	4b54      	ldr	r3, [pc, #336]	; (800774c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80075fa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80075fe:	f023 0203 	bic.w	r2, r3, #3
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007606:	4951      	ldr	r1, [pc, #324]	; (800774c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007608:	4313      	orrs	r3, r2
 800760a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007616:	2b00      	cmp	r3, #0
 8007618:	d00a      	beq.n	8007630 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800761a:	4b4c      	ldr	r3, [pc, #304]	; (800774c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800761c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007620:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007628:	4948      	ldr	r1, [pc, #288]	; (800774c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800762a:	4313      	orrs	r3, r2
 800762c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007638:	2b00      	cmp	r3, #0
 800763a:	d015      	beq.n	8007668 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800763c:	4b43      	ldr	r3, [pc, #268]	; (800774c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800763e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007642:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800764a:	4940      	ldr	r1, [pc, #256]	; (800774c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800764c:	4313      	orrs	r3, r2
 800764e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007656:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800765a:	d105      	bne.n	8007668 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800765c:	4b3b      	ldr	r3, [pc, #236]	; (800774c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800765e:	68db      	ldr	r3, [r3, #12]
 8007660:	4a3a      	ldr	r2, [pc, #232]	; (800774c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007662:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007666:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007670:	2b00      	cmp	r3, #0
 8007672:	d015      	beq.n	80076a0 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007674:	4b35      	ldr	r3, [pc, #212]	; (800774c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007676:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800767a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007682:	4932      	ldr	r1, [pc, #200]	; (800774c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007684:	4313      	orrs	r3, r2
 8007686:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800768e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007692:	d105      	bne.n	80076a0 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007694:	4b2d      	ldr	r3, [pc, #180]	; (800774c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007696:	68db      	ldr	r3, [r3, #12]
 8007698:	4a2c      	ldr	r2, [pc, #176]	; (800774c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800769a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800769e:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d015      	beq.n	80076d8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80076ac:	4b27      	ldr	r3, [pc, #156]	; (800774c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80076ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80076b2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076ba:	4924      	ldr	r1, [pc, #144]	; (800774c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80076bc:	4313      	orrs	r3, r2
 80076be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076c6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80076ca:	d105      	bne.n	80076d8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80076cc:	4b1f      	ldr	r3, [pc, #124]	; (800774c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80076ce:	68db      	ldr	r3, [r3, #12]
 80076d0:	4a1e      	ldr	r2, [pc, #120]	; (800774c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80076d2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80076d6:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d015      	beq.n	8007710 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80076e4:	4b19      	ldr	r3, [pc, #100]	; (800774c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80076e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80076ea:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076f2:	4916      	ldr	r1, [pc, #88]	; (800774c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80076f4:	4313      	orrs	r3, r2
 80076f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076fe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007702:	d105      	bne.n	8007710 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007704:	4b11      	ldr	r3, [pc, #68]	; (800774c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007706:	68db      	ldr	r3, [r3, #12]
 8007708:	4a10      	ldr	r2, [pc, #64]	; (800774c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800770a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800770e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007718:	2b00      	cmp	r3, #0
 800771a:	d019      	beq.n	8007750 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800771c:	4b0b      	ldr	r3, [pc, #44]	; (800774c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800771e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007722:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800772a:	4908      	ldr	r1, [pc, #32]	; (800774c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800772c:	4313      	orrs	r3, r2
 800772e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007736:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800773a:	d109      	bne.n	8007750 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800773c:	4b03      	ldr	r3, [pc, #12]	; (800774c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800773e:	68db      	ldr	r3, [r3, #12]
 8007740:	4a02      	ldr	r2, [pc, #8]	; (800774c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007742:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007746:	60d3      	str	r3, [r2, #12]
 8007748:	e002      	b.n	8007750 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800774a:	bf00      	nop
 800774c:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007758:	2b00      	cmp	r3, #0
 800775a:	d015      	beq.n	8007788 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800775c:	4b29      	ldr	r3, [pc, #164]	; (8007804 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800775e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007762:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800776a:	4926      	ldr	r1, [pc, #152]	; (8007804 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800776c:	4313      	orrs	r3, r2
 800776e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007776:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800777a:	d105      	bne.n	8007788 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800777c:	4b21      	ldr	r3, [pc, #132]	; (8007804 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800777e:	68db      	ldr	r3, [r3, #12]
 8007780:	4a20      	ldr	r2, [pc, #128]	; (8007804 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007782:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007786:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007790:	2b00      	cmp	r3, #0
 8007792:	d015      	beq.n	80077c0 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8007794:	4b1b      	ldr	r3, [pc, #108]	; (8007804 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007796:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800779a:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80077a2:	4918      	ldr	r1, [pc, #96]	; (8007804 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80077a4:	4313      	orrs	r3, r2
 80077a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80077ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80077b2:	d105      	bne.n	80077c0 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80077b4:	4b13      	ldr	r3, [pc, #76]	; (8007804 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80077b6:	68db      	ldr	r3, [r3, #12]
 80077b8:	4a12      	ldr	r2, [pc, #72]	; (8007804 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80077ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80077be:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d015      	beq.n	80077f8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80077cc:	4b0d      	ldr	r3, [pc, #52]	; (8007804 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80077ce:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80077d2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80077da:	490a      	ldr	r1, [pc, #40]	; (8007804 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80077dc:	4313      	orrs	r3, r2
 80077de:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80077e6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80077ea:	d105      	bne.n	80077f8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80077ec:	4b05      	ldr	r3, [pc, #20]	; (8007804 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80077ee:	68db      	ldr	r3, [r3, #12]
 80077f0:	4a04      	ldr	r2, [pc, #16]	; (8007804 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80077f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80077f6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80077f8:	7cbb      	ldrb	r3, [r7, #18]
}
 80077fa:	4618      	mov	r0, r3
 80077fc:	3718      	adds	r7, #24
 80077fe:	46bd      	mov	sp, r7
 8007800:	bd80      	pop	{r7, pc}
 8007802:	bf00      	nop
 8007804:	40021000 	.word	0x40021000

08007808 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007808:	b580      	push	{r7, lr}
 800780a:	b082      	sub	sp, #8
 800780c:	af00      	add	r7, sp, #0
 800780e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	2b00      	cmp	r3, #0
 8007814:	d101      	bne.n	800781a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007816:	2301      	movs	r3, #1
 8007818:	e049      	b.n	80078ae <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007820:	b2db      	uxtb	r3, r3
 8007822:	2b00      	cmp	r3, #0
 8007824:	d106      	bne.n	8007834 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	2200      	movs	r2, #0
 800782a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800782e:	6878      	ldr	r0, [r7, #4]
 8007830:	f7fa fed8 	bl	80025e4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	2202      	movs	r2, #2
 8007838:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681a      	ldr	r2, [r3, #0]
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	3304      	adds	r3, #4
 8007844:	4619      	mov	r1, r3
 8007846:	4610      	mov	r0, r2
 8007848:	f000 ff96 	bl	8008778 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	2201      	movs	r2, #1
 8007850:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	2201      	movs	r2, #1
 8007858:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	2201      	movs	r2, #1
 8007860:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	2201      	movs	r2, #1
 8007868:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	2201      	movs	r2, #1
 8007870:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	2201      	movs	r2, #1
 8007878:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	2201      	movs	r2, #1
 8007880:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	2201      	movs	r2, #1
 8007888:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	2201      	movs	r2, #1
 8007890:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	2201      	movs	r2, #1
 8007898:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	2201      	movs	r2, #1
 80078a0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	2201      	movs	r2, #1
 80078a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80078ac:	2300      	movs	r3, #0
}
 80078ae:	4618      	mov	r0, r3
 80078b0:	3708      	adds	r7, #8
 80078b2:	46bd      	mov	sp, r7
 80078b4:	bd80      	pop	{r7, pc}
	...

080078b8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80078b8:	b480      	push	{r7}
 80078ba:	b085      	sub	sp, #20
 80078bc:	af00      	add	r7, sp, #0
 80078be:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80078c6:	b2db      	uxtb	r3, r3
 80078c8:	2b01      	cmp	r3, #1
 80078ca:	d001      	beq.n	80078d0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80078cc:	2301      	movs	r3, #1
 80078ce:	e054      	b.n	800797a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	2202      	movs	r2, #2
 80078d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	68da      	ldr	r2, [r3, #12]
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	f042 0201 	orr.w	r2, r2, #1
 80078e6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	4a26      	ldr	r2, [pc, #152]	; (8007988 <HAL_TIM_Base_Start_IT+0xd0>)
 80078ee:	4293      	cmp	r3, r2
 80078f0:	d022      	beq.n	8007938 <HAL_TIM_Base_Start_IT+0x80>
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80078fa:	d01d      	beq.n	8007938 <HAL_TIM_Base_Start_IT+0x80>
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	4a22      	ldr	r2, [pc, #136]	; (800798c <HAL_TIM_Base_Start_IT+0xd4>)
 8007902:	4293      	cmp	r3, r2
 8007904:	d018      	beq.n	8007938 <HAL_TIM_Base_Start_IT+0x80>
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	4a21      	ldr	r2, [pc, #132]	; (8007990 <HAL_TIM_Base_Start_IT+0xd8>)
 800790c:	4293      	cmp	r3, r2
 800790e:	d013      	beq.n	8007938 <HAL_TIM_Base_Start_IT+0x80>
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	4a1f      	ldr	r2, [pc, #124]	; (8007994 <HAL_TIM_Base_Start_IT+0xdc>)
 8007916:	4293      	cmp	r3, r2
 8007918:	d00e      	beq.n	8007938 <HAL_TIM_Base_Start_IT+0x80>
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	4a1e      	ldr	r2, [pc, #120]	; (8007998 <HAL_TIM_Base_Start_IT+0xe0>)
 8007920:	4293      	cmp	r3, r2
 8007922:	d009      	beq.n	8007938 <HAL_TIM_Base_Start_IT+0x80>
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	4a1c      	ldr	r2, [pc, #112]	; (800799c <HAL_TIM_Base_Start_IT+0xe4>)
 800792a:	4293      	cmp	r3, r2
 800792c:	d004      	beq.n	8007938 <HAL_TIM_Base_Start_IT+0x80>
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	4a1b      	ldr	r2, [pc, #108]	; (80079a0 <HAL_TIM_Base_Start_IT+0xe8>)
 8007934:	4293      	cmp	r3, r2
 8007936:	d115      	bne.n	8007964 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	689a      	ldr	r2, [r3, #8]
 800793e:	4b19      	ldr	r3, [pc, #100]	; (80079a4 <HAL_TIM_Base_Start_IT+0xec>)
 8007940:	4013      	ands	r3, r2
 8007942:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	2b06      	cmp	r3, #6
 8007948:	d015      	beq.n	8007976 <HAL_TIM_Base_Start_IT+0xbe>
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007950:	d011      	beq.n	8007976 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	681a      	ldr	r2, [r3, #0]
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	f042 0201 	orr.w	r2, r2, #1
 8007960:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007962:	e008      	b.n	8007976 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	681a      	ldr	r2, [r3, #0]
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	f042 0201 	orr.w	r2, r2, #1
 8007972:	601a      	str	r2, [r3, #0]
 8007974:	e000      	b.n	8007978 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007976:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007978:	2300      	movs	r3, #0
}
 800797a:	4618      	mov	r0, r3
 800797c:	3714      	adds	r7, #20
 800797e:	46bd      	mov	sp, r7
 8007980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007984:	4770      	bx	lr
 8007986:	bf00      	nop
 8007988:	40012c00 	.word	0x40012c00
 800798c:	40000400 	.word	0x40000400
 8007990:	40000800 	.word	0x40000800
 8007994:	40000c00 	.word	0x40000c00
 8007998:	40013400 	.word	0x40013400
 800799c:	40014000 	.word	0x40014000
 80079a0:	40015000 	.word	0x40015000
 80079a4:	00010007 	.word	0x00010007

080079a8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80079a8:	b580      	push	{r7, lr}
 80079aa:	b082      	sub	sp, #8
 80079ac:	af00      	add	r7, sp, #0
 80079ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d101      	bne.n	80079ba <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80079b6:	2301      	movs	r3, #1
 80079b8:	e049      	b.n	8007a4e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80079c0:	b2db      	uxtb	r3, r3
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d106      	bne.n	80079d4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	2200      	movs	r2, #0
 80079ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80079ce:	6878      	ldr	r0, [r7, #4]
 80079d0:	f000 f841 	bl	8007a56 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	2202      	movs	r2, #2
 80079d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681a      	ldr	r2, [r3, #0]
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	3304      	adds	r3, #4
 80079e4:	4619      	mov	r1, r3
 80079e6:	4610      	mov	r0, r2
 80079e8:	f000 fec6 	bl	8008778 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	2201      	movs	r2, #1
 80079f0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	2201      	movs	r2, #1
 80079f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	2201      	movs	r2, #1
 8007a00:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	2201      	movs	r2, #1
 8007a08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	2201      	movs	r2, #1
 8007a10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	2201      	movs	r2, #1
 8007a18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	2201      	movs	r2, #1
 8007a20:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	2201      	movs	r2, #1
 8007a28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	2201      	movs	r2, #1
 8007a30:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	2201      	movs	r2, #1
 8007a38:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	2201      	movs	r2, #1
 8007a40:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	2201      	movs	r2, #1
 8007a48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007a4c:	2300      	movs	r3, #0
}
 8007a4e:	4618      	mov	r0, r3
 8007a50:	3708      	adds	r7, #8
 8007a52:	46bd      	mov	sp, r7
 8007a54:	bd80      	pop	{r7, pc}

08007a56 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007a56:	b480      	push	{r7}
 8007a58:	b083      	sub	sp, #12
 8007a5a:	af00      	add	r7, sp, #0
 8007a5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007a5e:	bf00      	nop
 8007a60:	370c      	adds	r7, #12
 8007a62:	46bd      	mov	sp, r7
 8007a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a68:	4770      	bx	lr
	...

08007a6c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007a6c:	b580      	push	{r7, lr}
 8007a6e:	b084      	sub	sp, #16
 8007a70:	af00      	add	r7, sp, #0
 8007a72:	6078      	str	r0, [r7, #4]
 8007a74:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007a76:	683b      	ldr	r3, [r7, #0]
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d109      	bne.n	8007a90 <HAL_TIM_PWM_Start+0x24>
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007a82:	b2db      	uxtb	r3, r3
 8007a84:	2b01      	cmp	r3, #1
 8007a86:	bf14      	ite	ne
 8007a88:	2301      	movne	r3, #1
 8007a8a:	2300      	moveq	r3, #0
 8007a8c:	b2db      	uxtb	r3, r3
 8007a8e:	e03c      	b.n	8007b0a <HAL_TIM_PWM_Start+0x9e>
 8007a90:	683b      	ldr	r3, [r7, #0]
 8007a92:	2b04      	cmp	r3, #4
 8007a94:	d109      	bne.n	8007aaa <HAL_TIM_PWM_Start+0x3e>
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007a9c:	b2db      	uxtb	r3, r3
 8007a9e:	2b01      	cmp	r3, #1
 8007aa0:	bf14      	ite	ne
 8007aa2:	2301      	movne	r3, #1
 8007aa4:	2300      	moveq	r3, #0
 8007aa6:	b2db      	uxtb	r3, r3
 8007aa8:	e02f      	b.n	8007b0a <HAL_TIM_PWM_Start+0x9e>
 8007aaa:	683b      	ldr	r3, [r7, #0]
 8007aac:	2b08      	cmp	r3, #8
 8007aae:	d109      	bne.n	8007ac4 <HAL_TIM_PWM_Start+0x58>
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007ab6:	b2db      	uxtb	r3, r3
 8007ab8:	2b01      	cmp	r3, #1
 8007aba:	bf14      	ite	ne
 8007abc:	2301      	movne	r3, #1
 8007abe:	2300      	moveq	r3, #0
 8007ac0:	b2db      	uxtb	r3, r3
 8007ac2:	e022      	b.n	8007b0a <HAL_TIM_PWM_Start+0x9e>
 8007ac4:	683b      	ldr	r3, [r7, #0]
 8007ac6:	2b0c      	cmp	r3, #12
 8007ac8:	d109      	bne.n	8007ade <HAL_TIM_PWM_Start+0x72>
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007ad0:	b2db      	uxtb	r3, r3
 8007ad2:	2b01      	cmp	r3, #1
 8007ad4:	bf14      	ite	ne
 8007ad6:	2301      	movne	r3, #1
 8007ad8:	2300      	moveq	r3, #0
 8007ada:	b2db      	uxtb	r3, r3
 8007adc:	e015      	b.n	8007b0a <HAL_TIM_PWM_Start+0x9e>
 8007ade:	683b      	ldr	r3, [r7, #0]
 8007ae0:	2b10      	cmp	r3, #16
 8007ae2:	d109      	bne.n	8007af8 <HAL_TIM_PWM_Start+0x8c>
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007aea:	b2db      	uxtb	r3, r3
 8007aec:	2b01      	cmp	r3, #1
 8007aee:	bf14      	ite	ne
 8007af0:	2301      	movne	r3, #1
 8007af2:	2300      	moveq	r3, #0
 8007af4:	b2db      	uxtb	r3, r3
 8007af6:	e008      	b.n	8007b0a <HAL_TIM_PWM_Start+0x9e>
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007afe:	b2db      	uxtb	r3, r3
 8007b00:	2b01      	cmp	r3, #1
 8007b02:	bf14      	ite	ne
 8007b04:	2301      	movne	r3, #1
 8007b06:	2300      	moveq	r3, #0
 8007b08:	b2db      	uxtb	r3, r3
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d001      	beq.n	8007b12 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8007b0e:	2301      	movs	r3, #1
 8007b10:	e0a6      	b.n	8007c60 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007b12:	683b      	ldr	r3, [r7, #0]
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d104      	bne.n	8007b22 <HAL_TIM_PWM_Start+0xb6>
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	2202      	movs	r2, #2
 8007b1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007b20:	e023      	b.n	8007b6a <HAL_TIM_PWM_Start+0xfe>
 8007b22:	683b      	ldr	r3, [r7, #0]
 8007b24:	2b04      	cmp	r3, #4
 8007b26:	d104      	bne.n	8007b32 <HAL_TIM_PWM_Start+0xc6>
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	2202      	movs	r2, #2
 8007b2c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007b30:	e01b      	b.n	8007b6a <HAL_TIM_PWM_Start+0xfe>
 8007b32:	683b      	ldr	r3, [r7, #0]
 8007b34:	2b08      	cmp	r3, #8
 8007b36:	d104      	bne.n	8007b42 <HAL_TIM_PWM_Start+0xd6>
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	2202      	movs	r2, #2
 8007b3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007b40:	e013      	b.n	8007b6a <HAL_TIM_PWM_Start+0xfe>
 8007b42:	683b      	ldr	r3, [r7, #0]
 8007b44:	2b0c      	cmp	r3, #12
 8007b46:	d104      	bne.n	8007b52 <HAL_TIM_PWM_Start+0xe6>
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	2202      	movs	r2, #2
 8007b4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007b50:	e00b      	b.n	8007b6a <HAL_TIM_PWM_Start+0xfe>
 8007b52:	683b      	ldr	r3, [r7, #0]
 8007b54:	2b10      	cmp	r3, #16
 8007b56:	d104      	bne.n	8007b62 <HAL_TIM_PWM_Start+0xf6>
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	2202      	movs	r2, #2
 8007b5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007b60:	e003      	b.n	8007b6a <HAL_TIM_PWM_Start+0xfe>
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	2202      	movs	r2, #2
 8007b66:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	2201      	movs	r2, #1
 8007b70:	6839      	ldr	r1, [r7, #0]
 8007b72:	4618      	mov	r0, r3
 8007b74:	f001 fb98 	bl	80092a8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	4a3a      	ldr	r2, [pc, #232]	; (8007c68 <HAL_TIM_PWM_Start+0x1fc>)
 8007b7e:	4293      	cmp	r3, r2
 8007b80:	d018      	beq.n	8007bb4 <HAL_TIM_PWM_Start+0x148>
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	4a39      	ldr	r2, [pc, #228]	; (8007c6c <HAL_TIM_PWM_Start+0x200>)
 8007b88:	4293      	cmp	r3, r2
 8007b8a:	d013      	beq.n	8007bb4 <HAL_TIM_PWM_Start+0x148>
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	4a37      	ldr	r2, [pc, #220]	; (8007c70 <HAL_TIM_PWM_Start+0x204>)
 8007b92:	4293      	cmp	r3, r2
 8007b94:	d00e      	beq.n	8007bb4 <HAL_TIM_PWM_Start+0x148>
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	4a36      	ldr	r2, [pc, #216]	; (8007c74 <HAL_TIM_PWM_Start+0x208>)
 8007b9c:	4293      	cmp	r3, r2
 8007b9e:	d009      	beq.n	8007bb4 <HAL_TIM_PWM_Start+0x148>
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	4a34      	ldr	r2, [pc, #208]	; (8007c78 <HAL_TIM_PWM_Start+0x20c>)
 8007ba6:	4293      	cmp	r3, r2
 8007ba8:	d004      	beq.n	8007bb4 <HAL_TIM_PWM_Start+0x148>
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	4a33      	ldr	r2, [pc, #204]	; (8007c7c <HAL_TIM_PWM_Start+0x210>)
 8007bb0:	4293      	cmp	r3, r2
 8007bb2:	d101      	bne.n	8007bb8 <HAL_TIM_PWM_Start+0x14c>
 8007bb4:	2301      	movs	r3, #1
 8007bb6:	e000      	b.n	8007bba <HAL_TIM_PWM_Start+0x14e>
 8007bb8:	2300      	movs	r3, #0
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d007      	beq.n	8007bce <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007bcc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	4a25      	ldr	r2, [pc, #148]	; (8007c68 <HAL_TIM_PWM_Start+0x1fc>)
 8007bd4:	4293      	cmp	r3, r2
 8007bd6:	d022      	beq.n	8007c1e <HAL_TIM_PWM_Start+0x1b2>
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007be0:	d01d      	beq.n	8007c1e <HAL_TIM_PWM_Start+0x1b2>
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	4a26      	ldr	r2, [pc, #152]	; (8007c80 <HAL_TIM_PWM_Start+0x214>)
 8007be8:	4293      	cmp	r3, r2
 8007bea:	d018      	beq.n	8007c1e <HAL_TIM_PWM_Start+0x1b2>
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	4a24      	ldr	r2, [pc, #144]	; (8007c84 <HAL_TIM_PWM_Start+0x218>)
 8007bf2:	4293      	cmp	r3, r2
 8007bf4:	d013      	beq.n	8007c1e <HAL_TIM_PWM_Start+0x1b2>
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	4a23      	ldr	r2, [pc, #140]	; (8007c88 <HAL_TIM_PWM_Start+0x21c>)
 8007bfc:	4293      	cmp	r3, r2
 8007bfe:	d00e      	beq.n	8007c1e <HAL_TIM_PWM_Start+0x1b2>
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	4a19      	ldr	r2, [pc, #100]	; (8007c6c <HAL_TIM_PWM_Start+0x200>)
 8007c06:	4293      	cmp	r3, r2
 8007c08:	d009      	beq.n	8007c1e <HAL_TIM_PWM_Start+0x1b2>
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	4a18      	ldr	r2, [pc, #96]	; (8007c70 <HAL_TIM_PWM_Start+0x204>)
 8007c10:	4293      	cmp	r3, r2
 8007c12:	d004      	beq.n	8007c1e <HAL_TIM_PWM_Start+0x1b2>
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	4a18      	ldr	r2, [pc, #96]	; (8007c7c <HAL_TIM_PWM_Start+0x210>)
 8007c1a:	4293      	cmp	r3, r2
 8007c1c:	d115      	bne.n	8007c4a <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	689a      	ldr	r2, [r3, #8]
 8007c24:	4b19      	ldr	r3, [pc, #100]	; (8007c8c <HAL_TIM_PWM_Start+0x220>)
 8007c26:	4013      	ands	r3, r2
 8007c28:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	2b06      	cmp	r3, #6
 8007c2e:	d015      	beq.n	8007c5c <HAL_TIM_PWM_Start+0x1f0>
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007c36:	d011      	beq.n	8007c5c <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	681a      	ldr	r2, [r3, #0]
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	f042 0201 	orr.w	r2, r2, #1
 8007c46:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c48:	e008      	b.n	8007c5c <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	681a      	ldr	r2, [r3, #0]
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	f042 0201 	orr.w	r2, r2, #1
 8007c58:	601a      	str	r2, [r3, #0]
 8007c5a:	e000      	b.n	8007c5e <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c5c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007c5e:	2300      	movs	r3, #0
}
 8007c60:	4618      	mov	r0, r3
 8007c62:	3710      	adds	r7, #16
 8007c64:	46bd      	mov	sp, r7
 8007c66:	bd80      	pop	{r7, pc}
 8007c68:	40012c00 	.word	0x40012c00
 8007c6c:	40013400 	.word	0x40013400
 8007c70:	40014000 	.word	0x40014000
 8007c74:	40014400 	.word	0x40014400
 8007c78:	40014800 	.word	0x40014800
 8007c7c:	40015000 	.word	0x40015000
 8007c80:	40000400 	.word	0x40000400
 8007c84:	40000800 	.word	0x40000800
 8007c88:	40000c00 	.word	0x40000c00
 8007c8c:	00010007 	.word	0x00010007

08007c90 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8007c90:	b580      	push	{r7, lr}
 8007c92:	b082      	sub	sp, #8
 8007c94:	af00      	add	r7, sp, #0
 8007c96:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d101      	bne.n	8007ca2 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8007c9e:	2301      	movs	r3, #1
 8007ca0:	e049      	b.n	8007d36 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007ca8:	b2db      	uxtb	r3, r3
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d106      	bne.n	8007cbc <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	2200      	movs	r2, #0
 8007cb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8007cb6:	6878      	ldr	r0, [r7, #4]
 8007cb8:	f000 f841 	bl	8007d3e <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	2202      	movs	r2, #2
 8007cc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681a      	ldr	r2, [r3, #0]
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	3304      	adds	r3, #4
 8007ccc:	4619      	mov	r1, r3
 8007cce:	4610      	mov	r0, r2
 8007cd0:	f000 fd52 	bl	8008778 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	2201      	movs	r2, #1
 8007cd8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	2201      	movs	r2, #1
 8007ce0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	2201      	movs	r2, #1
 8007ce8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	2201      	movs	r2, #1
 8007cf0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	2201      	movs	r2, #1
 8007cf8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	2201      	movs	r2, #1
 8007d00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	2201      	movs	r2, #1
 8007d08:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	2201      	movs	r2, #1
 8007d10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	2201      	movs	r2, #1
 8007d18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	2201      	movs	r2, #1
 8007d20:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	2201      	movs	r2, #1
 8007d28:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	2201      	movs	r2, #1
 8007d30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007d34:	2300      	movs	r3, #0
}
 8007d36:	4618      	mov	r0, r3
 8007d38:	3708      	adds	r7, #8
 8007d3a:	46bd      	mov	sp, r7
 8007d3c:	bd80      	pop	{r7, pc}

08007d3e <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8007d3e:	b480      	push	{r7}
 8007d40:	b083      	sub	sp, #12
 8007d42:	af00      	add	r7, sp, #0
 8007d44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8007d46:	bf00      	nop
 8007d48:	370c      	adds	r7, #12
 8007d4a:	46bd      	mov	sp, r7
 8007d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d50:	4770      	bx	lr

08007d52 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8007d52:	b580      	push	{r7, lr}
 8007d54:	b086      	sub	sp, #24
 8007d56:	af00      	add	r7, sp, #0
 8007d58:	6078      	str	r0, [r7, #4]
 8007d5a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d101      	bne.n	8007d66 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8007d62:	2301      	movs	r3, #1
 8007d64:	e097      	b.n	8007e96 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007d6c:	b2db      	uxtb	r3, r3
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d106      	bne.n	8007d80 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	2200      	movs	r2, #0
 8007d76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8007d7a:	6878      	ldr	r0, [r7, #4]
 8007d7c:	f7fa fd00 	bl	8002780 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	2202      	movs	r2, #2
 8007d84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	689b      	ldr	r3, [r3, #8]
 8007d8e:	687a      	ldr	r2, [r7, #4]
 8007d90:	6812      	ldr	r2, [r2, #0]
 8007d92:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8007d96:	f023 0307 	bic.w	r3, r3, #7
 8007d9a:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681a      	ldr	r2, [r3, #0]
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	3304      	adds	r3, #4
 8007da4:	4619      	mov	r1, r3
 8007da6:	4610      	mov	r0, r2
 8007da8:	f000 fce6 	bl	8008778 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	689b      	ldr	r3, [r3, #8]
 8007db2:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	699b      	ldr	r3, [r3, #24]
 8007dba:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	6a1b      	ldr	r3, [r3, #32]
 8007dc2:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8007dc4:	683b      	ldr	r3, [r7, #0]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	697a      	ldr	r2, [r7, #20]
 8007dca:	4313      	orrs	r3, r2
 8007dcc:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8007dce:	693b      	ldr	r3, [r7, #16]
 8007dd0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007dd4:	f023 0303 	bic.w	r3, r3, #3
 8007dd8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8007dda:	683b      	ldr	r3, [r7, #0]
 8007ddc:	689a      	ldr	r2, [r3, #8]
 8007dde:	683b      	ldr	r3, [r7, #0]
 8007de0:	699b      	ldr	r3, [r3, #24]
 8007de2:	021b      	lsls	r3, r3, #8
 8007de4:	4313      	orrs	r3, r2
 8007de6:	693a      	ldr	r2, [r7, #16]
 8007de8:	4313      	orrs	r3, r2
 8007dea:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8007dec:	693b      	ldr	r3, [r7, #16]
 8007dee:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8007df2:	f023 030c 	bic.w	r3, r3, #12
 8007df6:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8007df8:	693b      	ldr	r3, [r7, #16]
 8007dfa:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007dfe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007e02:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8007e04:	683b      	ldr	r3, [r7, #0]
 8007e06:	68da      	ldr	r2, [r3, #12]
 8007e08:	683b      	ldr	r3, [r7, #0]
 8007e0a:	69db      	ldr	r3, [r3, #28]
 8007e0c:	021b      	lsls	r3, r3, #8
 8007e0e:	4313      	orrs	r3, r2
 8007e10:	693a      	ldr	r2, [r7, #16]
 8007e12:	4313      	orrs	r3, r2
 8007e14:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8007e16:	683b      	ldr	r3, [r7, #0]
 8007e18:	691b      	ldr	r3, [r3, #16]
 8007e1a:	011a      	lsls	r2, r3, #4
 8007e1c:	683b      	ldr	r3, [r7, #0]
 8007e1e:	6a1b      	ldr	r3, [r3, #32]
 8007e20:	031b      	lsls	r3, r3, #12
 8007e22:	4313      	orrs	r3, r2
 8007e24:	693a      	ldr	r2, [r7, #16]
 8007e26:	4313      	orrs	r3, r2
 8007e28:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8007e30:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8007e38:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8007e3a:	683b      	ldr	r3, [r7, #0]
 8007e3c:	685a      	ldr	r2, [r3, #4]
 8007e3e:	683b      	ldr	r3, [r7, #0]
 8007e40:	695b      	ldr	r3, [r3, #20]
 8007e42:	011b      	lsls	r3, r3, #4
 8007e44:	4313      	orrs	r3, r2
 8007e46:	68fa      	ldr	r2, [r7, #12]
 8007e48:	4313      	orrs	r3, r2
 8007e4a:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	697a      	ldr	r2, [r7, #20]
 8007e52:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	693a      	ldr	r2, [r7, #16]
 8007e5a:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	68fa      	ldr	r2, [r7, #12]
 8007e62:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	2201      	movs	r2, #1
 8007e68:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	2201      	movs	r2, #1
 8007e70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	2201      	movs	r2, #1
 8007e78:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	2201      	movs	r2, #1
 8007e80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	2201      	movs	r2, #1
 8007e88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	2201      	movs	r2, #1
 8007e90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007e94:	2300      	movs	r3, #0
}
 8007e96:	4618      	mov	r0, r3
 8007e98:	3718      	adds	r7, #24
 8007e9a:	46bd      	mov	sp, r7
 8007e9c:	bd80      	pop	{r7, pc}

08007e9e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007e9e:	b580      	push	{r7, lr}
 8007ea0:	b082      	sub	sp, #8
 8007ea2:	af00      	add	r7, sp, #0
 8007ea4:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	691b      	ldr	r3, [r3, #16]
 8007eac:	f003 0302 	and.w	r3, r3, #2
 8007eb0:	2b02      	cmp	r3, #2
 8007eb2:	d122      	bne.n	8007efa <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	68db      	ldr	r3, [r3, #12]
 8007eba:	f003 0302 	and.w	r3, r3, #2
 8007ebe:	2b02      	cmp	r3, #2
 8007ec0:	d11b      	bne.n	8007efa <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	f06f 0202 	mvn.w	r2, #2
 8007eca:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	2201      	movs	r2, #1
 8007ed0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	699b      	ldr	r3, [r3, #24]
 8007ed8:	f003 0303 	and.w	r3, r3, #3
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d003      	beq.n	8007ee8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007ee0:	6878      	ldr	r0, [r7, #4]
 8007ee2:	f000 fc2b 	bl	800873c <HAL_TIM_IC_CaptureCallback>
 8007ee6:	e005      	b.n	8007ef4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007ee8:	6878      	ldr	r0, [r7, #4]
 8007eea:	f000 fc1d 	bl	8008728 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007eee:	6878      	ldr	r0, [r7, #4]
 8007ef0:	f000 fc2e 	bl	8008750 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	2200      	movs	r2, #0
 8007ef8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	691b      	ldr	r3, [r3, #16]
 8007f00:	f003 0304 	and.w	r3, r3, #4
 8007f04:	2b04      	cmp	r3, #4
 8007f06:	d122      	bne.n	8007f4e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	68db      	ldr	r3, [r3, #12]
 8007f0e:	f003 0304 	and.w	r3, r3, #4
 8007f12:	2b04      	cmp	r3, #4
 8007f14:	d11b      	bne.n	8007f4e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	f06f 0204 	mvn.w	r2, #4
 8007f1e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	2202      	movs	r2, #2
 8007f24:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	699b      	ldr	r3, [r3, #24]
 8007f2c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d003      	beq.n	8007f3c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007f34:	6878      	ldr	r0, [r7, #4]
 8007f36:	f000 fc01 	bl	800873c <HAL_TIM_IC_CaptureCallback>
 8007f3a:	e005      	b.n	8007f48 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007f3c:	6878      	ldr	r0, [r7, #4]
 8007f3e:	f000 fbf3 	bl	8008728 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007f42:	6878      	ldr	r0, [r7, #4]
 8007f44:	f000 fc04 	bl	8008750 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	2200      	movs	r2, #0
 8007f4c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	691b      	ldr	r3, [r3, #16]
 8007f54:	f003 0308 	and.w	r3, r3, #8
 8007f58:	2b08      	cmp	r3, #8
 8007f5a:	d122      	bne.n	8007fa2 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	68db      	ldr	r3, [r3, #12]
 8007f62:	f003 0308 	and.w	r3, r3, #8
 8007f66:	2b08      	cmp	r3, #8
 8007f68:	d11b      	bne.n	8007fa2 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	f06f 0208 	mvn.w	r2, #8
 8007f72:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	2204      	movs	r2, #4
 8007f78:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	69db      	ldr	r3, [r3, #28]
 8007f80:	f003 0303 	and.w	r3, r3, #3
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d003      	beq.n	8007f90 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007f88:	6878      	ldr	r0, [r7, #4]
 8007f8a:	f000 fbd7 	bl	800873c <HAL_TIM_IC_CaptureCallback>
 8007f8e:	e005      	b.n	8007f9c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007f90:	6878      	ldr	r0, [r7, #4]
 8007f92:	f000 fbc9 	bl	8008728 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007f96:	6878      	ldr	r0, [r7, #4]
 8007f98:	f000 fbda 	bl	8008750 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	2200      	movs	r2, #0
 8007fa0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	691b      	ldr	r3, [r3, #16]
 8007fa8:	f003 0310 	and.w	r3, r3, #16
 8007fac:	2b10      	cmp	r3, #16
 8007fae:	d122      	bne.n	8007ff6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	68db      	ldr	r3, [r3, #12]
 8007fb6:	f003 0310 	and.w	r3, r3, #16
 8007fba:	2b10      	cmp	r3, #16
 8007fbc:	d11b      	bne.n	8007ff6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	f06f 0210 	mvn.w	r2, #16
 8007fc6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	2208      	movs	r2, #8
 8007fcc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	69db      	ldr	r3, [r3, #28]
 8007fd4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d003      	beq.n	8007fe4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007fdc:	6878      	ldr	r0, [r7, #4]
 8007fde:	f000 fbad 	bl	800873c <HAL_TIM_IC_CaptureCallback>
 8007fe2:	e005      	b.n	8007ff0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007fe4:	6878      	ldr	r0, [r7, #4]
 8007fe6:	f000 fb9f 	bl	8008728 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007fea:	6878      	ldr	r0, [r7, #4]
 8007fec:	f000 fbb0 	bl	8008750 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	2200      	movs	r2, #0
 8007ff4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	691b      	ldr	r3, [r3, #16]
 8007ffc:	f003 0301 	and.w	r3, r3, #1
 8008000:	2b01      	cmp	r3, #1
 8008002:	d10e      	bne.n	8008022 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	68db      	ldr	r3, [r3, #12]
 800800a:	f003 0301 	and.w	r3, r3, #1
 800800e:	2b01      	cmp	r3, #1
 8008010:	d107      	bne.n	8008022 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	f06f 0201 	mvn.w	r2, #1
 800801a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800801c:	6878      	ldr	r0, [r7, #4]
 800801e:	f7f9 fe47 	bl	8001cb0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	691b      	ldr	r3, [r3, #16]
 8008028:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800802c:	2b80      	cmp	r3, #128	; 0x80
 800802e:	d10e      	bne.n	800804e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	68db      	ldr	r3, [r3, #12]
 8008036:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800803a:	2b80      	cmp	r3, #128	; 0x80
 800803c:	d107      	bne.n	800804e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008046:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008048:	6878      	ldr	r0, [r7, #4]
 800804a:	f001 fb5d 	bl	8009708 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	691b      	ldr	r3, [r3, #16]
 8008054:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008058:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800805c:	d10e      	bne.n	800807c <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	68db      	ldr	r3, [r3, #12]
 8008064:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008068:	2b80      	cmp	r3, #128	; 0x80
 800806a:	d107      	bne.n	800807c <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008074:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008076:	6878      	ldr	r0, [r7, #4]
 8008078:	f001 fb50 	bl	800971c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	691b      	ldr	r3, [r3, #16]
 8008082:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008086:	2b40      	cmp	r3, #64	; 0x40
 8008088:	d10e      	bne.n	80080a8 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	68db      	ldr	r3, [r3, #12]
 8008090:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008094:	2b40      	cmp	r3, #64	; 0x40
 8008096:	d107      	bne.n	80080a8 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80080a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80080a2:	6878      	ldr	r0, [r7, #4]
 80080a4:	f000 fb5e 	bl	8008764 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	691b      	ldr	r3, [r3, #16]
 80080ae:	f003 0320 	and.w	r3, r3, #32
 80080b2:	2b20      	cmp	r3, #32
 80080b4:	d10e      	bne.n	80080d4 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	68db      	ldr	r3, [r3, #12]
 80080bc:	f003 0320 	and.w	r3, r3, #32
 80080c0:	2b20      	cmp	r3, #32
 80080c2:	d107      	bne.n	80080d4 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	f06f 0220 	mvn.w	r2, #32
 80080cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80080ce:	6878      	ldr	r0, [r7, #4]
 80080d0:	f001 fb10 	bl	80096f4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	691b      	ldr	r3, [r3, #16]
 80080da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80080de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80080e2:	d10f      	bne.n	8008104 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	68db      	ldr	r3, [r3, #12]
 80080ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80080ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80080f2:	d107      	bne.n	8008104 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 80080fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80080fe:	6878      	ldr	r0, [r7, #4]
 8008100:	f001 fb16 	bl	8009730 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	691b      	ldr	r3, [r3, #16]
 800810a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800810e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008112:	d10f      	bne.n	8008134 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	68db      	ldr	r3, [r3, #12]
 800811a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800811e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008122:	d107      	bne.n	8008134 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800812c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800812e:	6878      	ldr	r0, [r7, #4]
 8008130:	f001 fb08 	bl	8009744 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	691b      	ldr	r3, [r3, #16]
 800813a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800813e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008142:	d10f      	bne.n	8008164 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	68db      	ldr	r3, [r3, #12]
 800814a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800814e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008152:	d107      	bne.n	8008164 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800815c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800815e:	6878      	ldr	r0, [r7, #4]
 8008160:	f001 fafa 	bl	8009758 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	691b      	ldr	r3, [r3, #16]
 800816a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800816e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008172:	d10f      	bne.n	8008194 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	68db      	ldr	r3, [r3, #12]
 800817a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800817e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008182:	d107      	bne.n	8008194 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800818c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800818e:	6878      	ldr	r0, [r7, #4]
 8008190:	f001 faec 	bl	800976c <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008194:	bf00      	nop
 8008196:	3708      	adds	r7, #8
 8008198:	46bd      	mov	sp, r7
 800819a:	bd80      	pop	{r7, pc}

0800819c <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800819c:	b580      	push	{r7, lr}
 800819e:	b086      	sub	sp, #24
 80081a0:	af00      	add	r7, sp, #0
 80081a2:	60f8      	str	r0, [r7, #12]
 80081a4:	60b9      	str	r1, [r7, #8]
 80081a6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80081a8:	2300      	movs	r3, #0
 80081aa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80081b2:	2b01      	cmp	r3, #1
 80081b4:	d101      	bne.n	80081ba <HAL_TIM_IC_ConfigChannel+0x1e>
 80081b6:	2302      	movs	r3, #2
 80081b8:	e088      	b.n	80082cc <HAL_TIM_IC_ConfigChannel+0x130>
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	2201      	movs	r2, #1
 80081be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d11b      	bne.n	8008200 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	6818      	ldr	r0, [r3, #0]
 80081cc:	68bb      	ldr	r3, [r7, #8]
 80081ce:	6819      	ldr	r1, [r3, #0]
 80081d0:	68bb      	ldr	r3, [r7, #8]
 80081d2:	685a      	ldr	r2, [r3, #4]
 80081d4:	68bb      	ldr	r3, [r7, #8]
 80081d6:	68db      	ldr	r3, [r3, #12]
 80081d8:	f000 fea0 	bl	8008f1c <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	699a      	ldr	r2, [r3, #24]
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	f022 020c 	bic.w	r2, r2, #12
 80081ea:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	6999      	ldr	r1, [r3, #24]
 80081f2:	68bb      	ldr	r3, [r7, #8]
 80081f4:	689a      	ldr	r2, [r3, #8]
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	430a      	orrs	r2, r1
 80081fc:	619a      	str	r2, [r3, #24]
 80081fe:	e060      	b.n	80082c2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	2b04      	cmp	r3, #4
 8008204:	d11c      	bne.n	8008240 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	6818      	ldr	r0, [r3, #0]
 800820a:	68bb      	ldr	r3, [r7, #8]
 800820c:	6819      	ldr	r1, [r3, #0]
 800820e:	68bb      	ldr	r3, [r7, #8]
 8008210:	685a      	ldr	r2, [r3, #4]
 8008212:	68bb      	ldr	r3, [r7, #8]
 8008214:	68db      	ldr	r3, [r3, #12]
 8008216:	f000 ff24 	bl	8009062 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	699a      	ldr	r2, [r3, #24]
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8008228:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	6999      	ldr	r1, [r3, #24]
 8008230:	68bb      	ldr	r3, [r7, #8]
 8008232:	689b      	ldr	r3, [r3, #8]
 8008234:	021a      	lsls	r2, r3, #8
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	430a      	orrs	r2, r1
 800823c:	619a      	str	r2, [r3, #24]
 800823e:	e040      	b.n	80082c2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	2b08      	cmp	r3, #8
 8008244:	d11b      	bne.n	800827e <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	6818      	ldr	r0, [r3, #0]
 800824a:	68bb      	ldr	r3, [r7, #8]
 800824c:	6819      	ldr	r1, [r3, #0]
 800824e:	68bb      	ldr	r3, [r7, #8]
 8008250:	685a      	ldr	r2, [r3, #4]
 8008252:	68bb      	ldr	r3, [r7, #8]
 8008254:	68db      	ldr	r3, [r3, #12]
 8008256:	f000 ff71 	bl	800913c <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	69da      	ldr	r2, [r3, #28]
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	f022 020c 	bic.w	r2, r2, #12
 8008268:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	69d9      	ldr	r1, [r3, #28]
 8008270:	68bb      	ldr	r3, [r7, #8]
 8008272:	689a      	ldr	r2, [r3, #8]
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	430a      	orrs	r2, r1
 800827a:	61da      	str	r2, [r3, #28]
 800827c:	e021      	b.n	80082c2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	2b0c      	cmp	r3, #12
 8008282:	d11c      	bne.n	80082be <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	6818      	ldr	r0, [r3, #0]
 8008288:	68bb      	ldr	r3, [r7, #8]
 800828a:	6819      	ldr	r1, [r3, #0]
 800828c:	68bb      	ldr	r3, [r7, #8]
 800828e:	685a      	ldr	r2, [r3, #4]
 8008290:	68bb      	ldr	r3, [r7, #8]
 8008292:	68db      	ldr	r3, [r3, #12]
 8008294:	f000 ff8e 	bl	80091b4 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	69da      	ldr	r2, [r3, #28]
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80082a6:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	69d9      	ldr	r1, [r3, #28]
 80082ae:	68bb      	ldr	r3, [r7, #8]
 80082b0:	689b      	ldr	r3, [r3, #8]
 80082b2:	021a      	lsls	r2, r3, #8
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	430a      	orrs	r2, r1
 80082ba:	61da      	str	r2, [r3, #28]
 80082bc:	e001      	b.n	80082c2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80082be:	2301      	movs	r3, #1
 80082c0:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	2200      	movs	r2, #0
 80082c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80082ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80082cc:	4618      	mov	r0, r3
 80082ce:	3718      	adds	r7, #24
 80082d0:	46bd      	mov	sp, r7
 80082d2:	bd80      	pop	{r7, pc}

080082d4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80082d4:	b580      	push	{r7, lr}
 80082d6:	b086      	sub	sp, #24
 80082d8:	af00      	add	r7, sp, #0
 80082da:	60f8      	str	r0, [r7, #12]
 80082dc:	60b9      	str	r1, [r7, #8]
 80082de:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80082e0:	2300      	movs	r3, #0
 80082e2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80082ea:	2b01      	cmp	r3, #1
 80082ec:	d101      	bne.n	80082f2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80082ee:	2302      	movs	r3, #2
 80082f0:	e0ff      	b.n	80084f2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	2201      	movs	r2, #1
 80082f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	2b14      	cmp	r3, #20
 80082fe:	f200 80f0 	bhi.w	80084e2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8008302:	a201      	add	r2, pc, #4	; (adr r2, 8008308 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008304:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008308:	0800835d 	.word	0x0800835d
 800830c:	080084e3 	.word	0x080084e3
 8008310:	080084e3 	.word	0x080084e3
 8008314:	080084e3 	.word	0x080084e3
 8008318:	0800839d 	.word	0x0800839d
 800831c:	080084e3 	.word	0x080084e3
 8008320:	080084e3 	.word	0x080084e3
 8008324:	080084e3 	.word	0x080084e3
 8008328:	080083df 	.word	0x080083df
 800832c:	080084e3 	.word	0x080084e3
 8008330:	080084e3 	.word	0x080084e3
 8008334:	080084e3 	.word	0x080084e3
 8008338:	0800841f 	.word	0x0800841f
 800833c:	080084e3 	.word	0x080084e3
 8008340:	080084e3 	.word	0x080084e3
 8008344:	080084e3 	.word	0x080084e3
 8008348:	08008461 	.word	0x08008461
 800834c:	080084e3 	.word	0x080084e3
 8008350:	080084e3 	.word	0x080084e3
 8008354:	080084e3 	.word	0x080084e3
 8008358:	080084a1 	.word	0x080084a1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	68b9      	ldr	r1, [r7, #8]
 8008362:	4618      	mov	r0, r3
 8008364:	f000 fab0 	bl	80088c8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	699a      	ldr	r2, [r3, #24]
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	f042 0208 	orr.w	r2, r2, #8
 8008376:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	699a      	ldr	r2, [r3, #24]
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	f022 0204 	bic.w	r2, r2, #4
 8008386:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	6999      	ldr	r1, [r3, #24]
 800838e:	68bb      	ldr	r3, [r7, #8]
 8008390:	691a      	ldr	r2, [r3, #16]
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	430a      	orrs	r2, r1
 8008398:	619a      	str	r2, [r3, #24]
      break;
 800839a:	e0a5      	b.n	80084e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	68b9      	ldr	r1, [r7, #8]
 80083a2:	4618      	mov	r0, r3
 80083a4:	f000 fb2a 	bl	80089fc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	699a      	ldr	r2, [r3, #24]
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80083b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	699a      	ldr	r2, [r3, #24]
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80083c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	6999      	ldr	r1, [r3, #24]
 80083ce:	68bb      	ldr	r3, [r7, #8]
 80083d0:	691b      	ldr	r3, [r3, #16]
 80083d2:	021a      	lsls	r2, r3, #8
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	430a      	orrs	r2, r1
 80083da:	619a      	str	r2, [r3, #24]
      break;
 80083dc:	e084      	b.n	80084e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	68b9      	ldr	r1, [r7, #8]
 80083e4:	4618      	mov	r0, r3
 80083e6:	f000 fb9d 	bl	8008b24 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	69da      	ldr	r2, [r3, #28]
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	f042 0208 	orr.w	r2, r2, #8
 80083f8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	69da      	ldr	r2, [r3, #28]
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	f022 0204 	bic.w	r2, r2, #4
 8008408:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	69d9      	ldr	r1, [r3, #28]
 8008410:	68bb      	ldr	r3, [r7, #8]
 8008412:	691a      	ldr	r2, [r3, #16]
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	430a      	orrs	r2, r1
 800841a:	61da      	str	r2, [r3, #28]
      break;
 800841c:	e064      	b.n	80084e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	68b9      	ldr	r1, [r7, #8]
 8008424:	4618      	mov	r0, r3
 8008426:	f000 fc0f 	bl	8008c48 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	69da      	ldr	r2, [r3, #28]
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008438:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	69da      	ldr	r2, [r3, #28]
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008448:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	69d9      	ldr	r1, [r3, #28]
 8008450:	68bb      	ldr	r3, [r7, #8]
 8008452:	691b      	ldr	r3, [r3, #16]
 8008454:	021a      	lsls	r2, r3, #8
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	430a      	orrs	r2, r1
 800845c:	61da      	str	r2, [r3, #28]
      break;
 800845e:	e043      	b.n	80084e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	68b9      	ldr	r1, [r7, #8]
 8008466:	4618      	mov	r0, r3
 8008468:	f000 fc82 	bl	8008d70 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	f042 0208 	orr.w	r2, r2, #8
 800847a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	f022 0204 	bic.w	r2, r2, #4
 800848a:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8008492:	68bb      	ldr	r3, [r7, #8]
 8008494:	691a      	ldr	r2, [r3, #16]
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	430a      	orrs	r2, r1
 800849c:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800849e:	e023      	b.n	80084e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	68b9      	ldr	r1, [r7, #8]
 80084a6:	4618      	mov	r0, r3
 80084a8:	f000 fccc 	bl	8008e44 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80084ba:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80084ca:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80084d2:	68bb      	ldr	r3, [r7, #8]
 80084d4:	691b      	ldr	r3, [r3, #16]
 80084d6:	021a      	lsls	r2, r3, #8
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	430a      	orrs	r2, r1
 80084de:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80084e0:	e002      	b.n	80084e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80084e2:	2301      	movs	r3, #1
 80084e4:	75fb      	strb	r3, [r7, #23]
      break;
 80084e6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	2200      	movs	r2, #0
 80084ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80084f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80084f2:	4618      	mov	r0, r3
 80084f4:	3718      	adds	r7, #24
 80084f6:	46bd      	mov	sp, r7
 80084f8:	bd80      	pop	{r7, pc}
 80084fa:	bf00      	nop

080084fc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80084fc:	b580      	push	{r7, lr}
 80084fe:	b084      	sub	sp, #16
 8008500:	af00      	add	r7, sp, #0
 8008502:	6078      	str	r0, [r7, #4]
 8008504:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008506:	2300      	movs	r3, #0
 8008508:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008510:	2b01      	cmp	r3, #1
 8008512:	d101      	bne.n	8008518 <HAL_TIM_ConfigClockSource+0x1c>
 8008514:	2302      	movs	r3, #2
 8008516:	e0f6      	b.n	8008706 <HAL_TIM_ConfigClockSource+0x20a>
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	2201      	movs	r2, #1
 800851c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	2202      	movs	r2, #2
 8008524:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	689b      	ldr	r3, [r3, #8]
 800852e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008530:	68bb      	ldr	r3, [r7, #8]
 8008532:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8008536:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800853a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800853c:	68bb      	ldr	r3, [r7, #8]
 800853e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008542:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	68ba      	ldr	r2, [r7, #8]
 800854a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800854c:	683b      	ldr	r3, [r7, #0]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	4a6f      	ldr	r2, [pc, #444]	; (8008710 <HAL_TIM_ConfigClockSource+0x214>)
 8008552:	4293      	cmp	r3, r2
 8008554:	f000 80c1 	beq.w	80086da <HAL_TIM_ConfigClockSource+0x1de>
 8008558:	4a6d      	ldr	r2, [pc, #436]	; (8008710 <HAL_TIM_ConfigClockSource+0x214>)
 800855a:	4293      	cmp	r3, r2
 800855c:	f200 80c6 	bhi.w	80086ec <HAL_TIM_ConfigClockSource+0x1f0>
 8008560:	4a6c      	ldr	r2, [pc, #432]	; (8008714 <HAL_TIM_ConfigClockSource+0x218>)
 8008562:	4293      	cmp	r3, r2
 8008564:	f000 80b9 	beq.w	80086da <HAL_TIM_ConfigClockSource+0x1de>
 8008568:	4a6a      	ldr	r2, [pc, #424]	; (8008714 <HAL_TIM_ConfigClockSource+0x218>)
 800856a:	4293      	cmp	r3, r2
 800856c:	f200 80be 	bhi.w	80086ec <HAL_TIM_ConfigClockSource+0x1f0>
 8008570:	4a69      	ldr	r2, [pc, #420]	; (8008718 <HAL_TIM_ConfigClockSource+0x21c>)
 8008572:	4293      	cmp	r3, r2
 8008574:	f000 80b1 	beq.w	80086da <HAL_TIM_ConfigClockSource+0x1de>
 8008578:	4a67      	ldr	r2, [pc, #412]	; (8008718 <HAL_TIM_ConfigClockSource+0x21c>)
 800857a:	4293      	cmp	r3, r2
 800857c:	f200 80b6 	bhi.w	80086ec <HAL_TIM_ConfigClockSource+0x1f0>
 8008580:	4a66      	ldr	r2, [pc, #408]	; (800871c <HAL_TIM_ConfigClockSource+0x220>)
 8008582:	4293      	cmp	r3, r2
 8008584:	f000 80a9 	beq.w	80086da <HAL_TIM_ConfigClockSource+0x1de>
 8008588:	4a64      	ldr	r2, [pc, #400]	; (800871c <HAL_TIM_ConfigClockSource+0x220>)
 800858a:	4293      	cmp	r3, r2
 800858c:	f200 80ae 	bhi.w	80086ec <HAL_TIM_ConfigClockSource+0x1f0>
 8008590:	4a63      	ldr	r2, [pc, #396]	; (8008720 <HAL_TIM_ConfigClockSource+0x224>)
 8008592:	4293      	cmp	r3, r2
 8008594:	f000 80a1 	beq.w	80086da <HAL_TIM_ConfigClockSource+0x1de>
 8008598:	4a61      	ldr	r2, [pc, #388]	; (8008720 <HAL_TIM_ConfigClockSource+0x224>)
 800859a:	4293      	cmp	r3, r2
 800859c:	f200 80a6 	bhi.w	80086ec <HAL_TIM_ConfigClockSource+0x1f0>
 80085a0:	4a60      	ldr	r2, [pc, #384]	; (8008724 <HAL_TIM_ConfigClockSource+0x228>)
 80085a2:	4293      	cmp	r3, r2
 80085a4:	f000 8099 	beq.w	80086da <HAL_TIM_ConfigClockSource+0x1de>
 80085a8:	4a5e      	ldr	r2, [pc, #376]	; (8008724 <HAL_TIM_ConfigClockSource+0x228>)
 80085aa:	4293      	cmp	r3, r2
 80085ac:	f200 809e 	bhi.w	80086ec <HAL_TIM_ConfigClockSource+0x1f0>
 80085b0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80085b4:	f000 8091 	beq.w	80086da <HAL_TIM_ConfigClockSource+0x1de>
 80085b8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80085bc:	f200 8096 	bhi.w	80086ec <HAL_TIM_ConfigClockSource+0x1f0>
 80085c0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80085c4:	f000 8089 	beq.w	80086da <HAL_TIM_ConfigClockSource+0x1de>
 80085c8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80085cc:	f200 808e 	bhi.w	80086ec <HAL_TIM_ConfigClockSource+0x1f0>
 80085d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80085d4:	d03e      	beq.n	8008654 <HAL_TIM_ConfigClockSource+0x158>
 80085d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80085da:	f200 8087 	bhi.w	80086ec <HAL_TIM_ConfigClockSource+0x1f0>
 80085de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80085e2:	f000 8086 	beq.w	80086f2 <HAL_TIM_ConfigClockSource+0x1f6>
 80085e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80085ea:	d87f      	bhi.n	80086ec <HAL_TIM_ConfigClockSource+0x1f0>
 80085ec:	2b70      	cmp	r3, #112	; 0x70
 80085ee:	d01a      	beq.n	8008626 <HAL_TIM_ConfigClockSource+0x12a>
 80085f0:	2b70      	cmp	r3, #112	; 0x70
 80085f2:	d87b      	bhi.n	80086ec <HAL_TIM_ConfigClockSource+0x1f0>
 80085f4:	2b60      	cmp	r3, #96	; 0x60
 80085f6:	d050      	beq.n	800869a <HAL_TIM_ConfigClockSource+0x19e>
 80085f8:	2b60      	cmp	r3, #96	; 0x60
 80085fa:	d877      	bhi.n	80086ec <HAL_TIM_ConfigClockSource+0x1f0>
 80085fc:	2b50      	cmp	r3, #80	; 0x50
 80085fe:	d03c      	beq.n	800867a <HAL_TIM_ConfigClockSource+0x17e>
 8008600:	2b50      	cmp	r3, #80	; 0x50
 8008602:	d873      	bhi.n	80086ec <HAL_TIM_ConfigClockSource+0x1f0>
 8008604:	2b40      	cmp	r3, #64	; 0x40
 8008606:	d058      	beq.n	80086ba <HAL_TIM_ConfigClockSource+0x1be>
 8008608:	2b40      	cmp	r3, #64	; 0x40
 800860a:	d86f      	bhi.n	80086ec <HAL_TIM_ConfigClockSource+0x1f0>
 800860c:	2b30      	cmp	r3, #48	; 0x30
 800860e:	d064      	beq.n	80086da <HAL_TIM_ConfigClockSource+0x1de>
 8008610:	2b30      	cmp	r3, #48	; 0x30
 8008612:	d86b      	bhi.n	80086ec <HAL_TIM_ConfigClockSource+0x1f0>
 8008614:	2b20      	cmp	r3, #32
 8008616:	d060      	beq.n	80086da <HAL_TIM_ConfigClockSource+0x1de>
 8008618:	2b20      	cmp	r3, #32
 800861a:	d867      	bhi.n	80086ec <HAL_TIM_ConfigClockSource+0x1f0>
 800861c:	2b00      	cmp	r3, #0
 800861e:	d05c      	beq.n	80086da <HAL_TIM_ConfigClockSource+0x1de>
 8008620:	2b10      	cmp	r3, #16
 8008622:	d05a      	beq.n	80086da <HAL_TIM_ConfigClockSource+0x1de>
 8008624:	e062      	b.n	80086ec <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	6818      	ldr	r0, [r3, #0]
 800862a:	683b      	ldr	r3, [r7, #0]
 800862c:	6899      	ldr	r1, [r3, #8]
 800862e:	683b      	ldr	r3, [r7, #0]
 8008630:	685a      	ldr	r2, [r3, #4]
 8008632:	683b      	ldr	r3, [r7, #0]
 8008634:	68db      	ldr	r3, [r3, #12]
 8008636:	f000 fe17 	bl	8009268 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	689b      	ldr	r3, [r3, #8]
 8008640:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008642:	68bb      	ldr	r3, [r7, #8]
 8008644:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008648:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	68ba      	ldr	r2, [r7, #8]
 8008650:	609a      	str	r2, [r3, #8]
      break;
 8008652:	e04f      	b.n	80086f4 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	6818      	ldr	r0, [r3, #0]
 8008658:	683b      	ldr	r3, [r7, #0]
 800865a:	6899      	ldr	r1, [r3, #8]
 800865c:	683b      	ldr	r3, [r7, #0]
 800865e:	685a      	ldr	r2, [r3, #4]
 8008660:	683b      	ldr	r3, [r7, #0]
 8008662:	68db      	ldr	r3, [r3, #12]
 8008664:	f000 fe00 	bl	8009268 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	689a      	ldr	r2, [r3, #8]
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008676:	609a      	str	r2, [r3, #8]
      break;
 8008678:	e03c      	b.n	80086f4 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	6818      	ldr	r0, [r3, #0]
 800867e:	683b      	ldr	r3, [r7, #0]
 8008680:	6859      	ldr	r1, [r3, #4]
 8008682:	683b      	ldr	r3, [r7, #0]
 8008684:	68db      	ldr	r3, [r3, #12]
 8008686:	461a      	mov	r2, r3
 8008688:	f000 fcbc 	bl	8009004 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	2150      	movs	r1, #80	; 0x50
 8008692:	4618      	mov	r0, r3
 8008694:	f000 fdcb 	bl	800922e <TIM_ITRx_SetConfig>
      break;
 8008698:	e02c      	b.n	80086f4 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	6818      	ldr	r0, [r3, #0]
 800869e:	683b      	ldr	r3, [r7, #0]
 80086a0:	6859      	ldr	r1, [r3, #4]
 80086a2:	683b      	ldr	r3, [r7, #0]
 80086a4:	68db      	ldr	r3, [r3, #12]
 80086a6:	461a      	mov	r2, r3
 80086a8:	f000 fd18 	bl	80090dc <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	2160      	movs	r1, #96	; 0x60
 80086b2:	4618      	mov	r0, r3
 80086b4:	f000 fdbb 	bl	800922e <TIM_ITRx_SetConfig>
      break;
 80086b8:	e01c      	b.n	80086f4 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	6818      	ldr	r0, [r3, #0]
 80086be:	683b      	ldr	r3, [r7, #0]
 80086c0:	6859      	ldr	r1, [r3, #4]
 80086c2:	683b      	ldr	r3, [r7, #0]
 80086c4:	68db      	ldr	r3, [r3, #12]
 80086c6:	461a      	mov	r2, r3
 80086c8:	f000 fc9c 	bl	8009004 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	2140      	movs	r1, #64	; 0x40
 80086d2:	4618      	mov	r0, r3
 80086d4:	f000 fdab 	bl	800922e <TIM_ITRx_SetConfig>
      break;
 80086d8:	e00c      	b.n	80086f4 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	681a      	ldr	r2, [r3, #0]
 80086de:	683b      	ldr	r3, [r7, #0]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	4619      	mov	r1, r3
 80086e4:	4610      	mov	r0, r2
 80086e6:	f000 fda2 	bl	800922e <TIM_ITRx_SetConfig>
      break;
 80086ea:	e003      	b.n	80086f4 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 80086ec:	2301      	movs	r3, #1
 80086ee:	73fb      	strb	r3, [r7, #15]
      break;
 80086f0:	e000      	b.n	80086f4 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 80086f2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	2201      	movs	r2, #1
 80086f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	2200      	movs	r2, #0
 8008700:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008704:	7bfb      	ldrb	r3, [r7, #15]
}
 8008706:	4618      	mov	r0, r3
 8008708:	3710      	adds	r7, #16
 800870a:	46bd      	mov	sp, r7
 800870c:	bd80      	pop	{r7, pc}
 800870e:	bf00      	nop
 8008710:	00100070 	.word	0x00100070
 8008714:	00100060 	.word	0x00100060
 8008718:	00100050 	.word	0x00100050
 800871c:	00100040 	.word	0x00100040
 8008720:	00100030 	.word	0x00100030
 8008724:	00100020 	.word	0x00100020

08008728 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008728:	b480      	push	{r7}
 800872a:	b083      	sub	sp, #12
 800872c:	af00      	add	r7, sp, #0
 800872e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008730:	bf00      	nop
 8008732:	370c      	adds	r7, #12
 8008734:	46bd      	mov	sp, r7
 8008736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800873a:	4770      	bx	lr

0800873c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800873c:	b480      	push	{r7}
 800873e:	b083      	sub	sp, #12
 8008740:	af00      	add	r7, sp, #0
 8008742:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008744:	bf00      	nop
 8008746:	370c      	adds	r7, #12
 8008748:	46bd      	mov	sp, r7
 800874a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800874e:	4770      	bx	lr

08008750 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008750:	b480      	push	{r7}
 8008752:	b083      	sub	sp, #12
 8008754:	af00      	add	r7, sp, #0
 8008756:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008758:	bf00      	nop
 800875a:	370c      	adds	r7, #12
 800875c:	46bd      	mov	sp, r7
 800875e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008762:	4770      	bx	lr

08008764 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008764:	b480      	push	{r7}
 8008766:	b083      	sub	sp, #12
 8008768:	af00      	add	r7, sp, #0
 800876a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800876c:	bf00      	nop
 800876e:	370c      	adds	r7, #12
 8008770:	46bd      	mov	sp, r7
 8008772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008776:	4770      	bx	lr

08008778 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008778:	b480      	push	{r7}
 800877a:	b085      	sub	sp, #20
 800877c:	af00      	add	r7, sp, #0
 800877e:	6078      	str	r0, [r7, #4]
 8008780:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	4a46      	ldr	r2, [pc, #280]	; (80088a4 <TIM_Base_SetConfig+0x12c>)
 800878c:	4293      	cmp	r3, r2
 800878e:	d017      	beq.n	80087c0 <TIM_Base_SetConfig+0x48>
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008796:	d013      	beq.n	80087c0 <TIM_Base_SetConfig+0x48>
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	4a43      	ldr	r2, [pc, #268]	; (80088a8 <TIM_Base_SetConfig+0x130>)
 800879c:	4293      	cmp	r3, r2
 800879e:	d00f      	beq.n	80087c0 <TIM_Base_SetConfig+0x48>
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	4a42      	ldr	r2, [pc, #264]	; (80088ac <TIM_Base_SetConfig+0x134>)
 80087a4:	4293      	cmp	r3, r2
 80087a6:	d00b      	beq.n	80087c0 <TIM_Base_SetConfig+0x48>
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	4a41      	ldr	r2, [pc, #260]	; (80088b0 <TIM_Base_SetConfig+0x138>)
 80087ac:	4293      	cmp	r3, r2
 80087ae:	d007      	beq.n	80087c0 <TIM_Base_SetConfig+0x48>
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	4a40      	ldr	r2, [pc, #256]	; (80088b4 <TIM_Base_SetConfig+0x13c>)
 80087b4:	4293      	cmp	r3, r2
 80087b6:	d003      	beq.n	80087c0 <TIM_Base_SetConfig+0x48>
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	4a3f      	ldr	r2, [pc, #252]	; (80088b8 <TIM_Base_SetConfig+0x140>)
 80087bc:	4293      	cmp	r3, r2
 80087be:	d108      	bne.n	80087d2 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80087c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80087c8:	683b      	ldr	r3, [r7, #0]
 80087ca:	685b      	ldr	r3, [r3, #4]
 80087cc:	68fa      	ldr	r2, [r7, #12]
 80087ce:	4313      	orrs	r3, r2
 80087d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	4a33      	ldr	r2, [pc, #204]	; (80088a4 <TIM_Base_SetConfig+0x12c>)
 80087d6:	4293      	cmp	r3, r2
 80087d8:	d023      	beq.n	8008822 <TIM_Base_SetConfig+0xaa>
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80087e0:	d01f      	beq.n	8008822 <TIM_Base_SetConfig+0xaa>
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	4a30      	ldr	r2, [pc, #192]	; (80088a8 <TIM_Base_SetConfig+0x130>)
 80087e6:	4293      	cmp	r3, r2
 80087e8:	d01b      	beq.n	8008822 <TIM_Base_SetConfig+0xaa>
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	4a2f      	ldr	r2, [pc, #188]	; (80088ac <TIM_Base_SetConfig+0x134>)
 80087ee:	4293      	cmp	r3, r2
 80087f0:	d017      	beq.n	8008822 <TIM_Base_SetConfig+0xaa>
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	4a2e      	ldr	r2, [pc, #184]	; (80088b0 <TIM_Base_SetConfig+0x138>)
 80087f6:	4293      	cmp	r3, r2
 80087f8:	d013      	beq.n	8008822 <TIM_Base_SetConfig+0xaa>
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	4a2d      	ldr	r2, [pc, #180]	; (80088b4 <TIM_Base_SetConfig+0x13c>)
 80087fe:	4293      	cmp	r3, r2
 8008800:	d00f      	beq.n	8008822 <TIM_Base_SetConfig+0xaa>
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	4a2d      	ldr	r2, [pc, #180]	; (80088bc <TIM_Base_SetConfig+0x144>)
 8008806:	4293      	cmp	r3, r2
 8008808:	d00b      	beq.n	8008822 <TIM_Base_SetConfig+0xaa>
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	4a2c      	ldr	r2, [pc, #176]	; (80088c0 <TIM_Base_SetConfig+0x148>)
 800880e:	4293      	cmp	r3, r2
 8008810:	d007      	beq.n	8008822 <TIM_Base_SetConfig+0xaa>
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	4a2b      	ldr	r2, [pc, #172]	; (80088c4 <TIM_Base_SetConfig+0x14c>)
 8008816:	4293      	cmp	r3, r2
 8008818:	d003      	beq.n	8008822 <TIM_Base_SetConfig+0xaa>
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	4a26      	ldr	r2, [pc, #152]	; (80088b8 <TIM_Base_SetConfig+0x140>)
 800881e:	4293      	cmp	r3, r2
 8008820:	d108      	bne.n	8008834 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008828:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800882a:	683b      	ldr	r3, [r7, #0]
 800882c:	68db      	ldr	r3, [r3, #12]
 800882e:	68fa      	ldr	r2, [r7, #12]
 8008830:	4313      	orrs	r3, r2
 8008832:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800883a:	683b      	ldr	r3, [r7, #0]
 800883c:	695b      	ldr	r3, [r3, #20]
 800883e:	4313      	orrs	r3, r2
 8008840:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	68fa      	ldr	r2, [r7, #12]
 8008846:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008848:	683b      	ldr	r3, [r7, #0]
 800884a:	689a      	ldr	r2, [r3, #8]
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008850:	683b      	ldr	r3, [r7, #0]
 8008852:	681a      	ldr	r2, [r3, #0]
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	4a12      	ldr	r2, [pc, #72]	; (80088a4 <TIM_Base_SetConfig+0x12c>)
 800885c:	4293      	cmp	r3, r2
 800885e:	d013      	beq.n	8008888 <TIM_Base_SetConfig+0x110>
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	4a14      	ldr	r2, [pc, #80]	; (80088b4 <TIM_Base_SetConfig+0x13c>)
 8008864:	4293      	cmp	r3, r2
 8008866:	d00f      	beq.n	8008888 <TIM_Base_SetConfig+0x110>
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	4a14      	ldr	r2, [pc, #80]	; (80088bc <TIM_Base_SetConfig+0x144>)
 800886c:	4293      	cmp	r3, r2
 800886e:	d00b      	beq.n	8008888 <TIM_Base_SetConfig+0x110>
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	4a13      	ldr	r2, [pc, #76]	; (80088c0 <TIM_Base_SetConfig+0x148>)
 8008874:	4293      	cmp	r3, r2
 8008876:	d007      	beq.n	8008888 <TIM_Base_SetConfig+0x110>
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	4a12      	ldr	r2, [pc, #72]	; (80088c4 <TIM_Base_SetConfig+0x14c>)
 800887c:	4293      	cmp	r3, r2
 800887e:	d003      	beq.n	8008888 <TIM_Base_SetConfig+0x110>
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	4a0d      	ldr	r2, [pc, #52]	; (80088b8 <TIM_Base_SetConfig+0x140>)
 8008884:	4293      	cmp	r3, r2
 8008886:	d103      	bne.n	8008890 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008888:	683b      	ldr	r3, [r7, #0]
 800888a:	691a      	ldr	r2, [r3, #16]
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	2201      	movs	r2, #1
 8008894:	615a      	str	r2, [r3, #20]
}
 8008896:	bf00      	nop
 8008898:	3714      	adds	r7, #20
 800889a:	46bd      	mov	sp, r7
 800889c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a0:	4770      	bx	lr
 80088a2:	bf00      	nop
 80088a4:	40012c00 	.word	0x40012c00
 80088a8:	40000400 	.word	0x40000400
 80088ac:	40000800 	.word	0x40000800
 80088b0:	40000c00 	.word	0x40000c00
 80088b4:	40013400 	.word	0x40013400
 80088b8:	40015000 	.word	0x40015000
 80088bc:	40014000 	.word	0x40014000
 80088c0:	40014400 	.word	0x40014400
 80088c4:	40014800 	.word	0x40014800

080088c8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80088c8:	b480      	push	{r7}
 80088ca:	b087      	sub	sp, #28
 80088cc:	af00      	add	r7, sp, #0
 80088ce:	6078      	str	r0, [r7, #4]
 80088d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	6a1b      	ldr	r3, [r3, #32]
 80088d6:	f023 0201 	bic.w	r2, r3, #1
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	6a1b      	ldr	r3, [r3, #32]
 80088e2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	685b      	ldr	r3, [r3, #4]
 80088e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	699b      	ldr	r3, [r3, #24]
 80088ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80088f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80088fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	f023 0303 	bic.w	r3, r3, #3
 8008902:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008904:	683b      	ldr	r3, [r7, #0]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	68fa      	ldr	r2, [r7, #12]
 800890a:	4313      	orrs	r3, r2
 800890c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800890e:	697b      	ldr	r3, [r7, #20]
 8008910:	f023 0302 	bic.w	r3, r3, #2
 8008914:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008916:	683b      	ldr	r3, [r7, #0]
 8008918:	689b      	ldr	r3, [r3, #8]
 800891a:	697a      	ldr	r2, [r7, #20]
 800891c:	4313      	orrs	r3, r2
 800891e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	4a30      	ldr	r2, [pc, #192]	; (80089e4 <TIM_OC1_SetConfig+0x11c>)
 8008924:	4293      	cmp	r3, r2
 8008926:	d013      	beq.n	8008950 <TIM_OC1_SetConfig+0x88>
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	4a2f      	ldr	r2, [pc, #188]	; (80089e8 <TIM_OC1_SetConfig+0x120>)
 800892c:	4293      	cmp	r3, r2
 800892e:	d00f      	beq.n	8008950 <TIM_OC1_SetConfig+0x88>
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	4a2e      	ldr	r2, [pc, #184]	; (80089ec <TIM_OC1_SetConfig+0x124>)
 8008934:	4293      	cmp	r3, r2
 8008936:	d00b      	beq.n	8008950 <TIM_OC1_SetConfig+0x88>
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	4a2d      	ldr	r2, [pc, #180]	; (80089f0 <TIM_OC1_SetConfig+0x128>)
 800893c:	4293      	cmp	r3, r2
 800893e:	d007      	beq.n	8008950 <TIM_OC1_SetConfig+0x88>
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	4a2c      	ldr	r2, [pc, #176]	; (80089f4 <TIM_OC1_SetConfig+0x12c>)
 8008944:	4293      	cmp	r3, r2
 8008946:	d003      	beq.n	8008950 <TIM_OC1_SetConfig+0x88>
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	4a2b      	ldr	r2, [pc, #172]	; (80089f8 <TIM_OC1_SetConfig+0x130>)
 800894c:	4293      	cmp	r3, r2
 800894e:	d10c      	bne.n	800896a <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008950:	697b      	ldr	r3, [r7, #20]
 8008952:	f023 0308 	bic.w	r3, r3, #8
 8008956:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008958:	683b      	ldr	r3, [r7, #0]
 800895a:	68db      	ldr	r3, [r3, #12]
 800895c:	697a      	ldr	r2, [r7, #20]
 800895e:	4313      	orrs	r3, r2
 8008960:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008962:	697b      	ldr	r3, [r7, #20]
 8008964:	f023 0304 	bic.w	r3, r3, #4
 8008968:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	4a1d      	ldr	r2, [pc, #116]	; (80089e4 <TIM_OC1_SetConfig+0x11c>)
 800896e:	4293      	cmp	r3, r2
 8008970:	d013      	beq.n	800899a <TIM_OC1_SetConfig+0xd2>
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	4a1c      	ldr	r2, [pc, #112]	; (80089e8 <TIM_OC1_SetConfig+0x120>)
 8008976:	4293      	cmp	r3, r2
 8008978:	d00f      	beq.n	800899a <TIM_OC1_SetConfig+0xd2>
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	4a1b      	ldr	r2, [pc, #108]	; (80089ec <TIM_OC1_SetConfig+0x124>)
 800897e:	4293      	cmp	r3, r2
 8008980:	d00b      	beq.n	800899a <TIM_OC1_SetConfig+0xd2>
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	4a1a      	ldr	r2, [pc, #104]	; (80089f0 <TIM_OC1_SetConfig+0x128>)
 8008986:	4293      	cmp	r3, r2
 8008988:	d007      	beq.n	800899a <TIM_OC1_SetConfig+0xd2>
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	4a19      	ldr	r2, [pc, #100]	; (80089f4 <TIM_OC1_SetConfig+0x12c>)
 800898e:	4293      	cmp	r3, r2
 8008990:	d003      	beq.n	800899a <TIM_OC1_SetConfig+0xd2>
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	4a18      	ldr	r2, [pc, #96]	; (80089f8 <TIM_OC1_SetConfig+0x130>)
 8008996:	4293      	cmp	r3, r2
 8008998:	d111      	bne.n	80089be <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800899a:	693b      	ldr	r3, [r7, #16]
 800899c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80089a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80089a2:	693b      	ldr	r3, [r7, #16]
 80089a4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80089a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80089aa:	683b      	ldr	r3, [r7, #0]
 80089ac:	695b      	ldr	r3, [r3, #20]
 80089ae:	693a      	ldr	r2, [r7, #16]
 80089b0:	4313      	orrs	r3, r2
 80089b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80089b4:	683b      	ldr	r3, [r7, #0]
 80089b6:	699b      	ldr	r3, [r3, #24]
 80089b8:	693a      	ldr	r2, [r7, #16]
 80089ba:	4313      	orrs	r3, r2
 80089bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	693a      	ldr	r2, [r7, #16]
 80089c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	68fa      	ldr	r2, [r7, #12]
 80089c8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80089ca:	683b      	ldr	r3, [r7, #0]
 80089cc:	685a      	ldr	r2, [r3, #4]
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	697a      	ldr	r2, [r7, #20]
 80089d6:	621a      	str	r2, [r3, #32]
}
 80089d8:	bf00      	nop
 80089da:	371c      	adds	r7, #28
 80089dc:	46bd      	mov	sp, r7
 80089de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e2:	4770      	bx	lr
 80089e4:	40012c00 	.word	0x40012c00
 80089e8:	40013400 	.word	0x40013400
 80089ec:	40014000 	.word	0x40014000
 80089f0:	40014400 	.word	0x40014400
 80089f4:	40014800 	.word	0x40014800
 80089f8:	40015000 	.word	0x40015000

080089fc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80089fc:	b480      	push	{r7}
 80089fe:	b087      	sub	sp, #28
 8008a00:	af00      	add	r7, sp, #0
 8008a02:	6078      	str	r0, [r7, #4]
 8008a04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	6a1b      	ldr	r3, [r3, #32]
 8008a0a:	f023 0210 	bic.w	r2, r3, #16
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	6a1b      	ldr	r3, [r3, #32]
 8008a16:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	685b      	ldr	r3, [r3, #4]
 8008a1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	699b      	ldr	r3, [r3, #24]
 8008a22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008a2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008a2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008a36:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008a38:	683b      	ldr	r3, [r7, #0]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	021b      	lsls	r3, r3, #8
 8008a3e:	68fa      	ldr	r2, [r7, #12]
 8008a40:	4313      	orrs	r3, r2
 8008a42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008a44:	697b      	ldr	r3, [r7, #20]
 8008a46:	f023 0320 	bic.w	r3, r3, #32
 8008a4a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008a4c:	683b      	ldr	r3, [r7, #0]
 8008a4e:	689b      	ldr	r3, [r3, #8]
 8008a50:	011b      	lsls	r3, r3, #4
 8008a52:	697a      	ldr	r2, [r7, #20]
 8008a54:	4313      	orrs	r3, r2
 8008a56:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	4a2c      	ldr	r2, [pc, #176]	; (8008b0c <TIM_OC2_SetConfig+0x110>)
 8008a5c:	4293      	cmp	r3, r2
 8008a5e:	d007      	beq.n	8008a70 <TIM_OC2_SetConfig+0x74>
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	4a2b      	ldr	r2, [pc, #172]	; (8008b10 <TIM_OC2_SetConfig+0x114>)
 8008a64:	4293      	cmp	r3, r2
 8008a66:	d003      	beq.n	8008a70 <TIM_OC2_SetConfig+0x74>
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	4a2a      	ldr	r2, [pc, #168]	; (8008b14 <TIM_OC2_SetConfig+0x118>)
 8008a6c:	4293      	cmp	r3, r2
 8008a6e:	d10d      	bne.n	8008a8c <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008a70:	697b      	ldr	r3, [r7, #20]
 8008a72:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008a76:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008a78:	683b      	ldr	r3, [r7, #0]
 8008a7a:	68db      	ldr	r3, [r3, #12]
 8008a7c:	011b      	lsls	r3, r3, #4
 8008a7e:	697a      	ldr	r2, [r7, #20]
 8008a80:	4313      	orrs	r3, r2
 8008a82:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008a84:	697b      	ldr	r3, [r7, #20]
 8008a86:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008a8a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	4a1f      	ldr	r2, [pc, #124]	; (8008b0c <TIM_OC2_SetConfig+0x110>)
 8008a90:	4293      	cmp	r3, r2
 8008a92:	d013      	beq.n	8008abc <TIM_OC2_SetConfig+0xc0>
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	4a1e      	ldr	r2, [pc, #120]	; (8008b10 <TIM_OC2_SetConfig+0x114>)
 8008a98:	4293      	cmp	r3, r2
 8008a9a:	d00f      	beq.n	8008abc <TIM_OC2_SetConfig+0xc0>
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	4a1e      	ldr	r2, [pc, #120]	; (8008b18 <TIM_OC2_SetConfig+0x11c>)
 8008aa0:	4293      	cmp	r3, r2
 8008aa2:	d00b      	beq.n	8008abc <TIM_OC2_SetConfig+0xc0>
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	4a1d      	ldr	r2, [pc, #116]	; (8008b1c <TIM_OC2_SetConfig+0x120>)
 8008aa8:	4293      	cmp	r3, r2
 8008aaa:	d007      	beq.n	8008abc <TIM_OC2_SetConfig+0xc0>
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	4a1c      	ldr	r2, [pc, #112]	; (8008b20 <TIM_OC2_SetConfig+0x124>)
 8008ab0:	4293      	cmp	r3, r2
 8008ab2:	d003      	beq.n	8008abc <TIM_OC2_SetConfig+0xc0>
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	4a17      	ldr	r2, [pc, #92]	; (8008b14 <TIM_OC2_SetConfig+0x118>)
 8008ab8:	4293      	cmp	r3, r2
 8008aba:	d113      	bne.n	8008ae4 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008abc:	693b      	ldr	r3, [r7, #16]
 8008abe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008ac2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008ac4:	693b      	ldr	r3, [r7, #16]
 8008ac6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008aca:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008acc:	683b      	ldr	r3, [r7, #0]
 8008ace:	695b      	ldr	r3, [r3, #20]
 8008ad0:	009b      	lsls	r3, r3, #2
 8008ad2:	693a      	ldr	r2, [r7, #16]
 8008ad4:	4313      	orrs	r3, r2
 8008ad6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008ad8:	683b      	ldr	r3, [r7, #0]
 8008ada:	699b      	ldr	r3, [r3, #24]
 8008adc:	009b      	lsls	r3, r3, #2
 8008ade:	693a      	ldr	r2, [r7, #16]
 8008ae0:	4313      	orrs	r3, r2
 8008ae2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	693a      	ldr	r2, [r7, #16]
 8008ae8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	68fa      	ldr	r2, [r7, #12]
 8008aee:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008af0:	683b      	ldr	r3, [r7, #0]
 8008af2:	685a      	ldr	r2, [r3, #4]
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	697a      	ldr	r2, [r7, #20]
 8008afc:	621a      	str	r2, [r3, #32]
}
 8008afe:	bf00      	nop
 8008b00:	371c      	adds	r7, #28
 8008b02:	46bd      	mov	sp, r7
 8008b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b08:	4770      	bx	lr
 8008b0a:	bf00      	nop
 8008b0c:	40012c00 	.word	0x40012c00
 8008b10:	40013400 	.word	0x40013400
 8008b14:	40015000 	.word	0x40015000
 8008b18:	40014000 	.word	0x40014000
 8008b1c:	40014400 	.word	0x40014400
 8008b20:	40014800 	.word	0x40014800

08008b24 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008b24:	b480      	push	{r7}
 8008b26:	b087      	sub	sp, #28
 8008b28:	af00      	add	r7, sp, #0
 8008b2a:	6078      	str	r0, [r7, #4]
 8008b2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	6a1b      	ldr	r3, [r3, #32]
 8008b32:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	6a1b      	ldr	r3, [r3, #32]
 8008b3e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	685b      	ldr	r3, [r3, #4]
 8008b44:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	69db      	ldr	r3, [r3, #28]
 8008b4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008b52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008b56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	f023 0303 	bic.w	r3, r3, #3
 8008b5e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008b60:	683b      	ldr	r3, [r7, #0]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	68fa      	ldr	r2, [r7, #12]
 8008b66:	4313      	orrs	r3, r2
 8008b68:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008b6a:	697b      	ldr	r3, [r7, #20]
 8008b6c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008b70:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008b72:	683b      	ldr	r3, [r7, #0]
 8008b74:	689b      	ldr	r3, [r3, #8]
 8008b76:	021b      	lsls	r3, r3, #8
 8008b78:	697a      	ldr	r2, [r7, #20]
 8008b7a:	4313      	orrs	r3, r2
 8008b7c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	4a2b      	ldr	r2, [pc, #172]	; (8008c30 <TIM_OC3_SetConfig+0x10c>)
 8008b82:	4293      	cmp	r3, r2
 8008b84:	d007      	beq.n	8008b96 <TIM_OC3_SetConfig+0x72>
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	4a2a      	ldr	r2, [pc, #168]	; (8008c34 <TIM_OC3_SetConfig+0x110>)
 8008b8a:	4293      	cmp	r3, r2
 8008b8c:	d003      	beq.n	8008b96 <TIM_OC3_SetConfig+0x72>
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	4a29      	ldr	r2, [pc, #164]	; (8008c38 <TIM_OC3_SetConfig+0x114>)
 8008b92:	4293      	cmp	r3, r2
 8008b94:	d10d      	bne.n	8008bb2 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008b96:	697b      	ldr	r3, [r7, #20]
 8008b98:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008b9c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008b9e:	683b      	ldr	r3, [r7, #0]
 8008ba0:	68db      	ldr	r3, [r3, #12]
 8008ba2:	021b      	lsls	r3, r3, #8
 8008ba4:	697a      	ldr	r2, [r7, #20]
 8008ba6:	4313      	orrs	r3, r2
 8008ba8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008baa:	697b      	ldr	r3, [r7, #20]
 8008bac:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008bb0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	4a1e      	ldr	r2, [pc, #120]	; (8008c30 <TIM_OC3_SetConfig+0x10c>)
 8008bb6:	4293      	cmp	r3, r2
 8008bb8:	d013      	beq.n	8008be2 <TIM_OC3_SetConfig+0xbe>
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	4a1d      	ldr	r2, [pc, #116]	; (8008c34 <TIM_OC3_SetConfig+0x110>)
 8008bbe:	4293      	cmp	r3, r2
 8008bc0:	d00f      	beq.n	8008be2 <TIM_OC3_SetConfig+0xbe>
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	4a1d      	ldr	r2, [pc, #116]	; (8008c3c <TIM_OC3_SetConfig+0x118>)
 8008bc6:	4293      	cmp	r3, r2
 8008bc8:	d00b      	beq.n	8008be2 <TIM_OC3_SetConfig+0xbe>
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	4a1c      	ldr	r2, [pc, #112]	; (8008c40 <TIM_OC3_SetConfig+0x11c>)
 8008bce:	4293      	cmp	r3, r2
 8008bd0:	d007      	beq.n	8008be2 <TIM_OC3_SetConfig+0xbe>
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	4a1b      	ldr	r2, [pc, #108]	; (8008c44 <TIM_OC3_SetConfig+0x120>)
 8008bd6:	4293      	cmp	r3, r2
 8008bd8:	d003      	beq.n	8008be2 <TIM_OC3_SetConfig+0xbe>
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	4a16      	ldr	r2, [pc, #88]	; (8008c38 <TIM_OC3_SetConfig+0x114>)
 8008bde:	4293      	cmp	r3, r2
 8008be0:	d113      	bne.n	8008c0a <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008be2:	693b      	ldr	r3, [r7, #16]
 8008be4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008be8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008bea:	693b      	ldr	r3, [r7, #16]
 8008bec:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008bf0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008bf2:	683b      	ldr	r3, [r7, #0]
 8008bf4:	695b      	ldr	r3, [r3, #20]
 8008bf6:	011b      	lsls	r3, r3, #4
 8008bf8:	693a      	ldr	r2, [r7, #16]
 8008bfa:	4313      	orrs	r3, r2
 8008bfc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008bfe:	683b      	ldr	r3, [r7, #0]
 8008c00:	699b      	ldr	r3, [r3, #24]
 8008c02:	011b      	lsls	r3, r3, #4
 8008c04:	693a      	ldr	r2, [r7, #16]
 8008c06:	4313      	orrs	r3, r2
 8008c08:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	693a      	ldr	r2, [r7, #16]
 8008c0e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	68fa      	ldr	r2, [r7, #12]
 8008c14:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008c16:	683b      	ldr	r3, [r7, #0]
 8008c18:	685a      	ldr	r2, [r3, #4]
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	697a      	ldr	r2, [r7, #20]
 8008c22:	621a      	str	r2, [r3, #32]
}
 8008c24:	bf00      	nop
 8008c26:	371c      	adds	r7, #28
 8008c28:	46bd      	mov	sp, r7
 8008c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c2e:	4770      	bx	lr
 8008c30:	40012c00 	.word	0x40012c00
 8008c34:	40013400 	.word	0x40013400
 8008c38:	40015000 	.word	0x40015000
 8008c3c:	40014000 	.word	0x40014000
 8008c40:	40014400 	.word	0x40014400
 8008c44:	40014800 	.word	0x40014800

08008c48 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008c48:	b480      	push	{r7}
 8008c4a:	b087      	sub	sp, #28
 8008c4c:	af00      	add	r7, sp, #0
 8008c4e:	6078      	str	r0, [r7, #4]
 8008c50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	6a1b      	ldr	r3, [r3, #32]
 8008c56:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	6a1b      	ldr	r3, [r3, #32]
 8008c62:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	685b      	ldr	r3, [r3, #4]
 8008c68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	69db      	ldr	r3, [r3, #28]
 8008c6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008c76:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008c7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008c82:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008c84:	683b      	ldr	r3, [r7, #0]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	021b      	lsls	r3, r3, #8
 8008c8a:	68fa      	ldr	r2, [r7, #12]
 8008c8c:	4313      	orrs	r3, r2
 8008c8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008c90:	697b      	ldr	r3, [r7, #20]
 8008c92:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008c96:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008c98:	683b      	ldr	r3, [r7, #0]
 8008c9a:	689b      	ldr	r3, [r3, #8]
 8008c9c:	031b      	lsls	r3, r3, #12
 8008c9e:	697a      	ldr	r2, [r7, #20]
 8008ca0:	4313      	orrs	r3, r2
 8008ca2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	4a2c      	ldr	r2, [pc, #176]	; (8008d58 <TIM_OC4_SetConfig+0x110>)
 8008ca8:	4293      	cmp	r3, r2
 8008caa:	d007      	beq.n	8008cbc <TIM_OC4_SetConfig+0x74>
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	4a2b      	ldr	r2, [pc, #172]	; (8008d5c <TIM_OC4_SetConfig+0x114>)
 8008cb0:	4293      	cmp	r3, r2
 8008cb2:	d003      	beq.n	8008cbc <TIM_OC4_SetConfig+0x74>
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	4a2a      	ldr	r2, [pc, #168]	; (8008d60 <TIM_OC4_SetConfig+0x118>)
 8008cb8:	4293      	cmp	r3, r2
 8008cba:	d10d      	bne.n	8008cd8 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8008cbc:	697b      	ldr	r3, [r7, #20]
 8008cbe:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008cc2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8008cc4:	683b      	ldr	r3, [r7, #0]
 8008cc6:	68db      	ldr	r3, [r3, #12]
 8008cc8:	031b      	lsls	r3, r3, #12
 8008cca:	697a      	ldr	r2, [r7, #20]
 8008ccc:	4313      	orrs	r3, r2
 8008cce:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8008cd0:	697b      	ldr	r3, [r7, #20]
 8008cd2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008cd6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	4a1f      	ldr	r2, [pc, #124]	; (8008d58 <TIM_OC4_SetConfig+0x110>)
 8008cdc:	4293      	cmp	r3, r2
 8008cde:	d013      	beq.n	8008d08 <TIM_OC4_SetConfig+0xc0>
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	4a1e      	ldr	r2, [pc, #120]	; (8008d5c <TIM_OC4_SetConfig+0x114>)
 8008ce4:	4293      	cmp	r3, r2
 8008ce6:	d00f      	beq.n	8008d08 <TIM_OC4_SetConfig+0xc0>
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	4a1e      	ldr	r2, [pc, #120]	; (8008d64 <TIM_OC4_SetConfig+0x11c>)
 8008cec:	4293      	cmp	r3, r2
 8008cee:	d00b      	beq.n	8008d08 <TIM_OC4_SetConfig+0xc0>
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	4a1d      	ldr	r2, [pc, #116]	; (8008d68 <TIM_OC4_SetConfig+0x120>)
 8008cf4:	4293      	cmp	r3, r2
 8008cf6:	d007      	beq.n	8008d08 <TIM_OC4_SetConfig+0xc0>
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	4a1c      	ldr	r2, [pc, #112]	; (8008d6c <TIM_OC4_SetConfig+0x124>)
 8008cfc:	4293      	cmp	r3, r2
 8008cfe:	d003      	beq.n	8008d08 <TIM_OC4_SetConfig+0xc0>
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	4a17      	ldr	r2, [pc, #92]	; (8008d60 <TIM_OC4_SetConfig+0x118>)
 8008d04:	4293      	cmp	r3, r2
 8008d06:	d113      	bne.n	8008d30 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008d08:	693b      	ldr	r3, [r7, #16]
 8008d0a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008d0e:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8008d10:	693b      	ldr	r3, [r7, #16]
 8008d12:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008d16:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008d18:	683b      	ldr	r3, [r7, #0]
 8008d1a:	695b      	ldr	r3, [r3, #20]
 8008d1c:	019b      	lsls	r3, r3, #6
 8008d1e:	693a      	ldr	r2, [r7, #16]
 8008d20:	4313      	orrs	r3, r2
 8008d22:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8008d24:	683b      	ldr	r3, [r7, #0]
 8008d26:	699b      	ldr	r3, [r3, #24]
 8008d28:	019b      	lsls	r3, r3, #6
 8008d2a:	693a      	ldr	r2, [r7, #16]
 8008d2c:	4313      	orrs	r3, r2
 8008d2e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	693a      	ldr	r2, [r7, #16]
 8008d34:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	68fa      	ldr	r2, [r7, #12]
 8008d3a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008d3c:	683b      	ldr	r3, [r7, #0]
 8008d3e:	685a      	ldr	r2, [r3, #4]
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	697a      	ldr	r2, [r7, #20]
 8008d48:	621a      	str	r2, [r3, #32]
}
 8008d4a:	bf00      	nop
 8008d4c:	371c      	adds	r7, #28
 8008d4e:	46bd      	mov	sp, r7
 8008d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d54:	4770      	bx	lr
 8008d56:	bf00      	nop
 8008d58:	40012c00 	.word	0x40012c00
 8008d5c:	40013400 	.word	0x40013400
 8008d60:	40015000 	.word	0x40015000
 8008d64:	40014000 	.word	0x40014000
 8008d68:	40014400 	.word	0x40014400
 8008d6c:	40014800 	.word	0x40014800

08008d70 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8008d70:	b480      	push	{r7}
 8008d72:	b087      	sub	sp, #28
 8008d74:	af00      	add	r7, sp, #0
 8008d76:	6078      	str	r0, [r7, #4]
 8008d78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	6a1b      	ldr	r3, [r3, #32]
 8008d7e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	6a1b      	ldr	r3, [r3, #32]
 8008d8a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	685b      	ldr	r3, [r3, #4]
 8008d90:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008d96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008d9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008da2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008da4:	683b      	ldr	r3, [r7, #0]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	68fa      	ldr	r2, [r7, #12]
 8008daa:	4313      	orrs	r3, r2
 8008dac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008dae:	693b      	ldr	r3, [r7, #16]
 8008db0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8008db4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008db6:	683b      	ldr	r3, [r7, #0]
 8008db8:	689b      	ldr	r3, [r3, #8]
 8008dba:	041b      	lsls	r3, r3, #16
 8008dbc:	693a      	ldr	r2, [r7, #16]
 8008dbe:	4313      	orrs	r3, r2
 8008dc0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	4a19      	ldr	r2, [pc, #100]	; (8008e2c <TIM_OC5_SetConfig+0xbc>)
 8008dc6:	4293      	cmp	r3, r2
 8008dc8:	d013      	beq.n	8008df2 <TIM_OC5_SetConfig+0x82>
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	4a18      	ldr	r2, [pc, #96]	; (8008e30 <TIM_OC5_SetConfig+0xc0>)
 8008dce:	4293      	cmp	r3, r2
 8008dd0:	d00f      	beq.n	8008df2 <TIM_OC5_SetConfig+0x82>
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	4a17      	ldr	r2, [pc, #92]	; (8008e34 <TIM_OC5_SetConfig+0xc4>)
 8008dd6:	4293      	cmp	r3, r2
 8008dd8:	d00b      	beq.n	8008df2 <TIM_OC5_SetConfig+0x82>
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	4a16      	ldr	r2, [pc, #88]	; (8008e38 <TIM_OC5_SetConfig+0xc8>)
 8008dde:	4293      	cmp	r3, r2
 8008de0:	d007      	beq.n	8008df2 <TIM_OC5_SetConfig+0x82>
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	4a15      	ldr	r2, [pc, #84]	; (8008e3c <TIM_OC5_SetConfig+0xcc>)
 8008de6:	4293      	cmp	r3, r2
 8008de8:	d003      	beq.n	8008df2 <TIM_OC5_SetConfig+0x82>
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	4a14      	ldr	r2, [pc, #80]	; (8008e40 <TIM_OC5_SetConfig+0xd0>)
 8008dee:	4293      	cmp	r3, r2
 8008df0:	d109      	bne.n	8008e06 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008df2:	697b      	ldr	r3, [r7, #20]
 8008df4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008df8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008dfa:	683b      	ldr	r3, [r7, #0]
 8008dfc:	695b      	ldr	r3, [r3, #20]
 8008dfe:	021b      	lsls	r3, r3, #8
 8008e00:	697a      	ldr	r2, [r7, #20]
 8008e02:	4313      	orrs	r3, r2
 8008e04:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	697a      	ldr	r2, [r7, #20]
 8008e0a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	68fa      	ldr	r2, [r7, #12]
 8008e10:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008e12:	683b      	ldr	r3, [r7, #0]
 8008e14:	685a      	ldr	r2, [r3, #4]
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	693a      	ldr	r2, [r7, #16]
 8008e1e:	621a      	str	r2, [r3, #32]
}
 8008e20:	bf00      	nop
 8008e22:	371c      	adds	r7, #28
 8008e24:	46bd      	mov	sp, r7
 8008e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e2a:	4770      	bx	lr
 8008e2c:	40012c00 	.word	0x40012c00
 8008e30:	40013400 	.word	0x40013400
 8008e34:	40014000 	.word	0x40014000
 8008e38:	40014400 	.word	0x40014400
 8008e3c:	40014800 	.word	0x40014800
 8008e40:	40015000 	.word	0x40015000

08008e44 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8008e44:	b480      	push	{r7}
 8008e46:	b087      	sub	sp, #28
 8008e48:	af00      	add	r7, sp, #0
 8008e4a:	6078      	str	r0, [r7, #4]
 8008e4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	6a1b      	ldr	r3, [r3, #32]
 8008e52:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	6a1b      	ldr	r3, [r3, #32]
 8008e5e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	685b      	ldr	r3, [r3, #4]
 8008e64:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008e6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008e72:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008e76:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008e78:	683b      	ldr	r3, [r7, #0]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	021b      	lsls	r3, r3, #8
 8008e7e:	68fa      	ldr	r2, [r7, #12]
 8008e80:	4313      	orrs	r3, r2
 8008e82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008e84:	693b      	ldr	r3, [r7, #16]
 8008e86:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008e8a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008e8c:	683b      	ldr	r3, [r7, #0]
 8008e8e:	689b      	ldr	r3, [r3, #8]
 8008e90:	051b      	lsls	r3, r3, #20
 8008e92:	693a      	ldr	r2, [r7, #16]
 8008e94:	4313      	orrs	r3, r2
 8008e96:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	4a1a      	ldr	r2, [pc, #104]	; (8008f04 <TIM_OC6_SetConfig+0xc0>)
 8008e9c:	4293      	cmp	r3, r2
 8008e9e:	d013      	beq.n	8008ec8 <TIM_OC6_SetConfig+0x84>
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	4a19      	ldr	r2, [pc, #100]	; (8008f08 <TIM_OC6_SetConfig+0xc4>)
 8008ea4:	4293      	cmp	r3, r2
 8008ea6:	d00f      	beq.n	8008ec8 <TIM_OC6_SetConfig+0x84>
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	4a18      	ldr	r2, [pc, #96]	; (8008f0c <TIM_OC6_SetConfig+0xc8>)
 8008eac:	4293      	cmp	r3, r2
 8008eae:	d00b      	beq.n	8008ec8 <TIM_OC6_SetConfig+0x84>
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	4a17      	ldr	r2, [pc, #92]	; (8008f10 <TIM_OC6_SetConfig+0xcc>)
 8008eb4:	4293      	cmp	r3, r2
 8008eb6:	d007      	beq.n	8008ec8 <TIM_OC6_SetConfig+0x84>
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	4a16      	ldr	r2, [pc, #88]	; (8008f14 <TIM_OC6_SetConfig+0xd0>)
 8008ebc:	4293      	cmp	r3, r2
 8008ebe:	d003      	beq.n	8008ec8 <TIM_OC6_SetConfig+0x84>
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	4a15      	ldr	r2, [pc, #84]	; (8008f18 <TIM_OC6_SetConfig+0xd4>)
 8008ec4:	4293      	cmp	r3, r2
 8008ec6:	d109      	bne.n	8008edc <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008ec8:	697b      	ldr	r3, [r7, #20]
 8008eca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008ece:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008ed0:	683b      	ldr	r3, [r7, #0]
 8008ed2:	695b      	ldr	r3, [r3, #20]
 8008ed4:	029b      	lsls	r3, r3, #10
 8008ed6:	697a      	ldr	r2, [r7, #20]
 8008ed8:	4313      	orrs	r3, r2
 8008eda:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	697a      	ldr	r2, [r7, #20]
 8008ee0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	68fa      	ldr	r2, [r7, #12]
 8008ee6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008ee8:	683b      	ldr	r3, [r7, #0]
 8008eea:	685a      	ldr	r2, [r3, #4]
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	693a      	ldr	r2, [r7, #16]
 8008ef4:	621a      	str	r2, [r3, #32]
}
 8008ef6:	bf00      	nop
 8008ef8:	371c      	adds	r7, #28
 8008efa:	46bd      	mov	sp, r7
 8008efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f00:	4770      	bx	lr
 8008f02:	bf00      	nop
 8008f04:	40012c00 	.word	0x40012c00
 8008f08:	40013400 	.word	0x40013400
 8008f0c:	40014000 	.word	0x40014000
 8008f10:	40014400 	.word	0x40014400
 8008f14:	40014800 	.word	0x40014800
 8008f18:	40015000 	.word	0x40015000

08008f1c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8008f1c:	b480      	push	{r7}
 8008f1e:	b087      	sub	sp, #28
 8008f20:	af00      	add	r7, sp, #0
 8008f22:	60f8      	str	r0, [r7, #12]
 8008f24:	60b9      	str	r1, [r7, #8]
 8008f26:	607a      	str	r2, [r7, #4]
 8008f28:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	6a1b      	ldr	r3, [r3, #32]
 8008f2e:	f023 0201 	bic.w	r2, r3, #1
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	699b      	ldr	r3, [r3, #24]
 8008f3a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	6a1b      	ldr	r3, [r3, #32]
 8008f40:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	4a28      	ldr	r2, [pc, #160]	; (8008fe8 <TIM_TI1_SetConfig+0xcc>)
 8008f46:	4293      	cmp	r3, r2
 8008f48:	d01b      	beq.n	8008f82 <TIM_TI1_SetConfig+0x66>
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008f50:	d017      	beq.n	8008f82 <TIM_TI1_SetConfig+0x66>
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	4a25      	ldr	r2, [pc, #148]	; (8008fec <TIM_TI1_SetConfig+0xd0>)
 8008f56:	4293      	cmp	r3, r2
 8008f58:	d013      	beq.n	8008f82 <TIM_TI1_SetConfig+0x66>
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	4a24      	ldr	r2, [pc, #144]	; (8008ff0 <TIM_TI1_SetConfig+0xd4>)
 8008f5e:	4293      	cmp	r3, r2
 8008f60:	d00f      	beq.n	8008f82 <TIM_TI1_SetConfig+0x66>
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	4a23      	ldr	r2, [pc, #140]	; (8008ff4 <TIM_TI1_SetConfig+0xd8>)
 8008f66:	4293      	cmp	r3, r2
 8008f68:	d00b      	beq.n	8008f82 <TIM_TI1_SetConfig+0x66>
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	4a22      	ldr	r2, [pc, #136]	; (8008ff8 <TIM_TI1_SetConfig+0xdc>)
 8008f6e:	4293      	cmp	r3, r2
 8008f70:	d007      	beq.n	8008f82 <TIM_TI1_SetConfig+0x66>
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	4a21      	ldr	r2, [pc, #132]	; (8008ffc <TIM_TI1_SetConfig+0xe0>)
 8008f76:	4293      	cmp	r3, r2
 8008f78:	d003      	beq.n	8008f82 <TIM_TI1_SetConfig+0x66>
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	4a20      	ldr	r2, [pc, #128]	; (8009000 <TIM_TI1_SetConfig+0xe4>)
 8008f7e:	4293      	cmp	r3, r2
 8008f80:	d101      	bne.n	8008f86 <TIM_TI1_SetConfig+0x6a>
 8008f82:	2301      	movs	r3, #1
 8008f84:	e000      	b.n	8008f88 <TIM_TI1_SetConfig+0x6c>
 8008f86:	2300      	movs	r3, #0
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d008      	beq.n	8008f9e <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8008f8c:	697b      	ldr	r3, [r7, #20]
 8008f8e:	f023 0303 	bic.w	r3, r3, #3
 8008f92:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8008f94:	697a      	ldr	r2, [r7, #20]
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	4313      	orrs	r3, r2
 8008f9a:	617b      	str	r3, [r7, #20]
 8008f9c:	e003      	b.n	8008fa6 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8008f9e:	697b      	ldr	r3, [r7, #20]
 8008fa0:	f043 0301 	orr.w	r3, r3, #1
 8008fa4:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008fa6:	697b      	ldr	r3, [r7, #20]
 8008fa8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008fac:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8008fae:	683b      	ldr	r3, [r7, #0]
 8008fb0:	011b      	lsls	r3, r3, #4
 8008fb2:	b2db      	uxtb	r3, r3
 8008fb4:	697a      	ldr	r2, [r7, #20]
 8008fb6:	4313      	orrs	r3, r2
 8008fb8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008fba:	693b      	ldr	r3, [r7, #16]
 8008fbc:	f023 030a 	bic.w	r3, r3, #10
 8008fc0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8008fc2:	68bb      	ldr	r3, [r7, #8]
 8008fc4:	f003 030a 	and.w	r3, r3, #10
 8008fc8:	693a      	ldr	r2, [r7, #16]
 8008fca:	4313      	orrs	r3, r2
 8008fcc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	697a      	ldr	r2, [r7, #20]
 8008fd2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	693a      	ldr	r2, [r7, #16]
 8008fd8:	621a      	str	r2, [r3, #32]
}
 8008fda:	bf00      	nop
 8008fdc:	371c      	adds	r7, #28
 8008fde:	46bd      	mov	sp, r7
 8008fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fe4:	4770      	bx	lr
 8008fe6:	bf00      	nop
 8008fe8:	40012c00 	.word	0x40012c00
 8008fec:	40000400 	.word	0x40000400
 8008ff0:	40000800 	.word	0x40000800
 8008ff4:	40000c00 	.word	0x40000c00
 8008ff8:	40013400 	.word	0x40013400
 8008ffc:	40014000 	.word	0x40014000
 8009000:	40015000 	.word	0x40015000

08009004 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009004:	b480      	push	{r7}
 8009006:	b087      	sub	sp, #28
 8009008:	af00      	add	r7, sp, #0
 800900a:	60f8      	str	r0, [r7, #12]
 800900c:	60b9      	str	r1, [r7, #8]
 800900e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	6a1b      	ldr	r3, [r3, #32]
 8009014:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	6a1b      	ldr	r3, [r3, #32]
 800901a:	f023 0201 	bic.w	r2, r3, #1
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	699b      	ldr	r3, [r3, #24]
 8009026:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009028:	693b      	ldr	r3, [r7, #16]
 800902a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800902e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	011b      	lsls	r3, r3, #4
 8009034:	693a      	ldr	r2, [r7, #16]
 8009036:	4313      	orrs	r3, r2
 8009038:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800903a:	697b      	ldr	r3, [r7, #20]
 800903c:	f023 030a 	bic.w	r3, r3, #10
 8009040:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009042:	697a      	ldr	r2, [r7, #20]
 8009044:	68bb      	ldr	r3, [r7, #8]
 8009046:	4313      	orrs	r3, r2
 8009048:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	693a      	ldr	r2, [r7, #16]
 800904e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	697a      	ldr	r2, [r7, #20]
 8009054:	621a      	str	r2, [r3, #32]
}
 8009056:	bf00      	nop
 8009058:	371c      	adds	r7, #28
 800905a:	46bd      	mov	sp, r7
 800905c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009060:	4770      	bx	lr

08009062 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8009062:	b480      	push	{r7}
 8009064:	b087      	sub	sp, #28
 8009066:	af00      	add	r7, sp, #0
 8009068:	60f8      	str	r0, [r7, #12]
 800906a:	60b9      	str	r1, [r7, #8]
 800906c:	607a      	str	r2, [r7, #4]
 800906e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	6a1b      	ldr	r3, [r3, #32]
 8009074:	f023 0210 	bic.w	r2, r3, #16
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	699b      	ldr	r3, [r3, #24]
 8009080:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	6a1b      	ldr	r3, [r3, #32]
 8009086:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8009088:	697b      	ldr	r3, [r7, #20]
 800908a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800908e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	021b      	lsls	r3, r3, #8
 8009094:	697a      	ldr	r2, [r7, #20]
 8009096:	4313      	orrs	r3, r2
 8009098:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800909a:	697b      	ldr	r3, [r7, #20]
 800909c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80090a0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80090a2:	683b      	ldr	r3, [r7, #0]
 80090a4:	031b      	lsls	r3, r3, #12
 80090a6:	b29b      	uxth	r3, r3
 80090a8:	697a      	ldr	r2, [r7, #20]
 80090aa:	4313      	orrs	r3, r2
 80090ac:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80090ae:	693b      	ldr	r3, [r7, #16]
 80090b0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80090b4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80090b6:	68bb      	ldr	r3, [r7, #8]
 80090b8:	011b      	lsls	r3, r3, #4
 80090ba:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80090be:	693a      	ldr	r2, [r7, #16]
 80090c0:	4313      	orrs	r3, r2
 80090c2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	697a      	ldr	r2, [r7, #20]
 80090c8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	693a      	ldr	r2, [r7, #16]
 80090ce:	621a      	str	r2, [r3, #32]
}
 80090d0:	bf00      	nop
 80090d2:	371c      	adds	r7, #28
 80090d4:	46bd      	mov	sp, r7
 80090d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090da:	4770      	bx	lr

080090dc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80090dc:	b480      	push	{r7}
 80090de:	b087      	sub	sp, #28
 80090e0:	af00      	add	r7, sp, #0
 80090e2:	60f8      	str	r0, [r7, #12]
 80090e4:	60b9      	str	r1, [r7, #8]
 80090e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	6a1b      	ldr	r3, [r3, #32]
 80090ec:	f023 0210 	bic.w	r2, r3, #16
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	699b      	ldr	r3, [r3, #24]
 80090f8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	6a1b      	ldr	r3, [r3, #32]
 80090fe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009100:	697b      	ldr	r3, [r7, #20]
 8009102:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009106:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	031b      	lsls	r3, r3, #12
 800910c:	697a      	ldr	r2, [r7, #20]
 800910e:	4313      	orrs	r3, r2
 8009110:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009112:	693b      	ldr	r3, [r7, #16]
 8009114:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009118:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800911a:	68bb      	ldr	r3, [r7, #8]
 800911c:	011b      	lsls	r3, r3, #4
 800911e:	693a      	ldr	r2, [r7, #16]
 8009120:	4313      	orrs	r3, r2
 8009122:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	697a      	ldr	r2, [r7, #20]
 8009128:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	693a      	ldr	r2, [r7, #16]
 800912e:	621a      	str	r2, [r3, #32]
}
 8009130:	bf00      	nop
 8009132:	371c      	adds	r7, #28
 8009134:	46bd      	mov	sp, r7
 8009136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800913a:	4770      	bx	lr

0800913c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800913c:	b480      	push	{r7}
 800913e:	b087      	sub	sp, #28
 8009140:	af00      	add	r7, sp, #0
 8009142:	60f8      	str	r0, [r7, #12]
 8009144:	60b9      	str	r1, [r7, #8]
 8009146:	607a      	str	r2, [r7, #4]
 8009148:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	6a1b      	ldr	r3, [r3, #32]
 800914e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	69db      	ldr	r3, [r3, #28]
 800915a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	6a1b      	ldr	r3, [r3, #32]
 8009160:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8009162:	697b      	ldr	r3, [r7, #20]
 8009164:	f023 0303 	bic.w	r3, r3, #3
 8009168:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800916a:	697a      	ldr	r2, [r7, #20]
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	4313      	orrs	r3, r2
 8009170:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8009172:	697b      	ldr	r3, [r7, #20]
 8009174:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009178:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800917a:	683b      	ldr	r3, [r7, #0]
 800917c:	011b      	lsls	r3, r3, #4
 800917e:	b2db      	uxtb	r3, r3
 8009180:	697a      	ldr	r2, [r7, #20]
 8009182:	4313      	orrs	r3, r2
 8009184:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8009186:	693b      	ldr	r3, [r7, #16]
 8009188:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800918c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800918e:	68bb      	ldr	r3, [r7, #8]
 8009190:	021b      	lsls	r3, r3, #8
 8009192:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8009196:	693a      	ldr	r2, [r7, #16]
 8009198:	4313      	orrs	r3, r2
 800919a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	697a      	ldr	r2, [r7, #20]
 80091a0:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	693a      	ldr	r2, [r7, #16]
 80091a6:	621a      	str	r2, [r3, #32]
}
 80091a8:	bf00      	nop
 80091aa:	371c      	adds	r7, #28
 80091ac:	46bd      	mov	sp, r7
 80091ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b2:	4770      	bx	lr

080091b4 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80091b4:	b480      	push	{r7}
 80091b6:	b087      	sub	sp, #28
 80091b8:	af00      	add	r7, sp, #0
 80091ba:	60f8      	str	r0, [r7, #12]
 80091bc:	60b9      	str	r1, [r7, #8]
 80091be:	607a      	str	r2, [r7, #4]
 80091c0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	6a1b      	ldr	r3, [r3, #32]
 80091c6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	69db      	ldr	r3, [r3, #28]
 80091d2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	6a1b      	ldr	r3, [r3, #32]
 80091d8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80091da:	697b      	ldr	r3, [r7, #20]
 80091dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80091e0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	021b      	lsls	r3, r3, #8
 80091e6:	697a      	ldr	r2, [r7, #20]
 80091e8:	4313      	orrs	r3, r2
 80091ea:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80091ec:	697b      	ldr	r3, [r7, #20]
 80091ee:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80091f2:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80091f4:	683b      	ldr	r3, [r7, #0]
 80091f6:	031b      	lsls	r3, r3, #12
 80091f8:	b29b      	uxth	r3, r3
 80091fa:	697a      	ldr	r2, [r7, #20]
 80091fc:	4313      	orrs	r3, r2
 80091fe:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8009200:	693b      	ldr	r3, [r7, #16]
 8009202:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8009206:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8009208:	68bb      	ldr	r3, [r7, #8]
 800920a:	031b      	lsls	r3, r3, #12
 800920c:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8009210:	693a      	ldr	r2, [r7, #16]
 8009212:	4313      	orrs	r3, r2
 8009214:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	697a      	ldr	r2, [r7, #20]
 800921a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	693a      	ldr	r2, [r7, #16]
 8009220:	621a      	str	r2, [r3, #32]
}
 8009222:	bf00      	nop
 8009224:	371c      	adds	r7, #28
 8009226:	46bd      	mov	sp, r7
 8009228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800922c:	4770      	bx	lr

0800922e <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800922e:	b480      	push	{r7}
 8009230:	b085      	sub	sp, #20
 8009232:	af00      	add	r7, sp, #0
 8009234:	6078      	str	r0, [r7, #4]
 8009236:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	689b      	ldr	r3, [r3, #8]
 800923c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8009244:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009248:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800924a:	683a      	ldr	r2, [r7, #0]
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	4313      	orrs	r3, r2
 8009250:	f043 0307 	orr.w	r3, r3, #7
 8009254:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	68fa      	ldr	r2, [r7, #12]
 800925a:	609a      	str	r2, [r3, #8]
}
 800925c:	bf00      	nop
 800925e:	3714      	adds	r7, #20
 8009260:	46bd      	mov	sp, r7
 8009262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009266:	4770      	bx	lr

08009268 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009268:	b480      	push	{r7}
 800926a:	b087      	sub	sp, #28
 800926c:	af00      	add	r7, sp, #0
 800926e:	60f8      	str	r0, [r7, #12]
 8009270:	60b9      	str	r1, [r7, #8]
 8009272:	607a      	str	r2, [r7, #4]
 8009274:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	689b      	ldr	r3, [r3, #8]
 800927a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800927c:	697b      	ldr	r3, [r7, #20]
 800927e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009282:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009284:	683b      	ldr	r3, [r7, #0]
 8009286:	021a      	lsls	r2, r3, #8
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	431a      	orrs	r2, r3
 800928c:	68bb      	ldr	r3, [r7, #8]
 800928e:	4313      	orrs	r3, r2
 8009290:	697a      	ldr	r2, [r7, #20]
 8009292:	4313      	orrs	r3, r2
 8009294:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	697a      	ldr	r2, [r7, #20]
 800929a:	609a      	str	r2, [r3, #8]
}
 800929c:	bf00      	nop
 800929e:	371c      	adds	r7, #28
 80092a0:	46bd      	mov	sp, r7
 80092a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092a6:	4770      	bx	lr

080092a8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80092a8:	b480      	push	{r7}
 80092aa:	b087      	sub	sp, #28
 80092ac:	af00      	add	r7, sp, #0
 80092ae:	60f8      	str	r0, [r7, #12]
 80092b0:	60b9      	str	r1, [r7, #8]
 80092b2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80092b4:	68bb      	ldr	r3, [r7, #8]
 80092b6:	f003 031f 	and.w	r3, r3, #31
 80092ba:	2201      	movs	r2, #1
 80092bc:	fa02 f303 	lsl.w	r3, r2, r3
 80092c0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	6a1a      	ldr	r2, [r3, #32]
 80092c6:	697b      	ldr	r3, [r7, #20]
 80092c8:	43db      	mvns	r3, r3
 80092ca:	401a      	ands	r2, r3
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	6a1a      	ldr	r2, [r3, #32]
 80092d4:	68bb      	ldr	r3, [r7, #8]
 80092d6:	f003 031f 	and.w	r3, r3, #31
 80092da:	6879      	ldr	r1, [r7, #4]
 80092dc:	fa01 f303 	lsl.w	r3, r1, r3
 80092e0:	431a      	orrs	r2, r3
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	621a      	str	r2, [r3, #32]
}
 80092e6:	bf00      	nop
 80092e8:	371c      	adds	r7, #28
 80092ea:	46bd      	mov	sp, r7
 80092ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092f0:	4770      	bx	lr

080092f2 <HAL_TIMEx_HallSensor_Init>:
  * @param  htim TIM Hall Sensor Interface handle
  * @param  sConfig TIM Hall Sensor configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Init(TIM_HandleTypeDef *htim, TIM_HallSensor_InitTypeDef *sConfig)
{
 80092f2:	b580      	push	{r7, lr}
 80092f4:	b08a      	sub	sp, #40	; 0x28
 80092f6:	af00      	add	r7, sp, #0
 80092f8:	6078      	str	r0, [r7, #4]
 80092fa:	6039      	str	r1, [r7, #0]
  TIM_OC_InitTypeDef OC_Config;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d101      	bne.n	8009306 <HAL_TIMEx_HallSensor_Init+0x14>
  {
    return HAL_ERROR;
 8009302:	2301      	movs	r3, #1
 8009304:	e0a0      	b.n	8009448 <HAL_TIMEx_HallSensor_Init+0x156>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
  assert_param(IS_TIM_IC_POLARITY(sConfig->IC1Polarity));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800930c:	b2db      	uxtb	r3, r3
 800930e:	2b00      	cmp	r3, #0
 8009310:	d106      	bne.n	8009320 <HAL_TIMEx_HallSensor_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	2200      	movs	r2, #0
 8009316:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->HallSensor_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIMEx_HallSensor_MspInit(htim);
 800931a:	6878      	ldr	r0, [r7, #4]
 800931c:	f000 f898 	bl	8009450 <HAL_TIMEx_HallSensor_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	2202      	movs	r2, #2
 8009324:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	681a      	ldr	r2, [r3, #0]
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	3304      	adds	r3, #4
 8009330:	4619      	mov	r1, r3
 8009332:	4610      	mov	r0, r2
 8009334:	f7ff fa20 	bl	8008778 <TIM_Base_SetConfig>

  /* Configure the Channel 1 as Input Channel to interface with the three Outputs of the  Hall sensor */
  TIM_TI1_SetConfig(htim->Instance, sConfig->IC1Polarity, TIM_ICSELECTION_TRC, sConfig->IC1Filter);
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	6818      	ldr	r0, [r3, #0]
 800933c:	683b      	ldr	r3, [r7, #0]
 800933e:	6819      	ldr	r1, [r3, #0]
 8009340:	683b      	ldr	r3, [r7, #0]
 8009342:	689b      	ldr	r3, [r3, #8]
 8009344:	2203      	movs	r2, #3
 8009346:	f7ff fde9 	bl	8008f1c <TIM_TI1_SetConfig>

  /* Reset the IC1PSC Bits */
  htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	699a      	ldr	r2, [r3, #24]
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	f022 020c 	bic.w	r2, r2, #12
 8009358:	619a      	str	r2, [r3, #24]
  /* Set the IC1PSC value */
  htim->Instance->CCMR1 |= sConfig->IC1Prescaler;
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	6999      	ldr	r1, [r3, #24]
 8009360:	683b      	ldr	r3, [r7, #0]
 8009362:	685a      	ldr	r2, [r3, #4]
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	430a      	orrs	r2, r1
 800936a:	619a      	str	r2, [r3, #24]

  /* Enable the Hall sensor interface (XOR function of the three inputs) */
  htim->Instance->CR2 |= TIM_CR2_TI1S;
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	685a      	ldr	r2, [r3, #4]
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800937a:	605a      	str	r2, [r3, #4]

  /* Select the TIM_TS_TI1F_ED signal as Input trigger for the TIM */
  htim->Instance->SMCR &= ~TIM_SMCR_TS;
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	689b      	ldr	r3, [r3, #8]
 8009382:	687a      	ldr	r2, [r7, #4]
 8009384:	6812      	ldr	r2, [r2, #0]
 8009386:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800938a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800938e:	6093      	str	r3, [r2, #8]
  htim->Instance->SMCR |= TIM_TS_TI1F_ED;
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	689a      	ldr	r2, [r3, #8]
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800939e:	609a      	str	r2, [r3, #8]

  /* Use the TIM_TS_TI1F_ED signal to reset the TIM counter each edge detection */
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	689b      	ldr	r3, [r3, #8]
 80093a6:	687a      	ldr	r2, [r7, #4]
 80093a8:	6812      	ldr	r2, [r2, #0]
 80093aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80093ae:	f023 0307 	bic.w	r3, r3, #7
 80093b2:	6093      	str	r3, [r2, #8]
  htim->Instance->SMCR |= TIM_SLAVEMODE_RESET;
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	689a      	ldr	r2, [r3, #8]
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	f042 0204 	orr.w	r2, r2, #4
 80093c2:	609a      	str	r2, [r3, #8]

  /* Program channel 2 in PWM 2 mode with the desired Commutation_Delay*/
  OC_Config.OCFastMode = TIM_OCFAST_DISABLE;
 80093c4:	2300      	movs	r3, #0
 80093c6:	61fb      	str	r3, [r7, #28]
  OC_Config.OCIdleState = TIM_OCIDLESTATE_RESET;
 80093c8:	2300      	movs	r3, #0
 80093ca:	623b      	str	r3, [r7, #32]
  OC_Config.OCMode = TIM_OCMODE_PWM2;
 80093cc:	2370      	movs	r3, #112	; 0x70
 80093ce:	60fb      	str	r3, [r7, #12]
  OC_Config.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80093d0:	2300      	movs	r3, #0
 80093d2:	627b      	str	r3, [r7, #36]	; 0x24
  OC_Config.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80093d4:	2300      	movs	r3, #0
 80093d6:	61bb      	str	r3, [r7, #24]
  OC_Config.OCPolarity = TIM_OCPOLARITY_HIGH;
 80093d8:	2300      	movs	r3, #0
 80093da:	617b      	str	r3, [r7, #20]
  OC_Config.Pulse = sConfig->Commutation_Delay;
 80093dc:	683b      	ldr	r3, [r7, #0]
 80093de:	68db      	ldr	r3, [r3, #12]
 80093e0:	613b      	str	r3, [r7, #16]

  TIM_OC2_SetConfig(htim->Instance, &OC_Config);
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	f107 020c 	add.w	r2, r7, #12
 80093ea:	4611      	mov	r1, r2
 80093ec:	4618      	mov	r0, r3
 80093ee:	f7ff fb05 	bl	80089fc <TIM_OC2_SetConfig>

  /* Select OC2REF as trigger output on TRGO: write the MMS bits in the TIMx_CR2
    register to 101 */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	685b      	ldr	r3, [r3, #4]
 80093f8:	687a      	ldr	r2, [r7, #4]
 80093fa:	6812      	ldr	r2, [r2, #0]
 80093fc:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8009400:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009404:	6053      	str	r3, [r2, #4]
  htim->Instance->CR2 |= TIM_TRGO_OC2REF;
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	685a      	ldr	r2, [r3, #4]
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	f042 0250 	orr.w	r2, r2, #80	; 0x50
 8009414:	605a      	str	r2, [r3, #4]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	2201      	movs	r2, #1
 800941a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	2201      	movs	r2, #1
 8009422:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	2201      	movs	r2, #1
 800942a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	2201      	movs	r2, #1
 8009432:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	2201      	movs	r2, #1
 800943a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	2201      	movs	r2, #1
 8009442:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009446:	2300      	movs	r3, #0
}
 8009448:	4618      	mov	r0, r3
 800944a:	3728      	adds	r7, #40	; 0x28
 800944c:	46bd      	mov	sp, r7
 800944e:	bd80      	pop	{r7, pc}

08009450 <HAL_TIMEx_HallSensor_MspInit>:
  * @brief  Initializes the TIM Hall Sensor MSP.
  * @param  htim TIM Hall Sensor Interface handle
  * @retval None
  */
__weak void HAL_TIMEx_HallSensor_MspInit(TIM_HandleTypeDef *htim)
{
 8009450:	b480      	push	{r7}
 8009452:	b083      	sub	sp, #12
 8009454:	af00      	add	r7, sp, #0
 8009456:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_HallSensor_MspInit could be implemented in the user file
   */
}
 8009458:	bf00      	nop
 800945a:	370c      	adds	r7, #12
 800945c:	46bd      	mov	sp, r7
 800945e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009462:	4770      	bx	lr

08009464 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009464:	b480      	push	{r7}
 8009466:	b085      	sub	sp, #20
 8009468:	af00      	add	r7, sp, #0
 800946a:	6078      	str	r0, [r7, #4]
 800946c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009474:	2b01      	cmp	r3, #1
 8009476:	d101      	bne.n	800947c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009478:	2302      	movs	r3, #2
 800947a:	e074      	b.n	8009566 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	2201      	movs	r2, #1
 8009480:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	2202      	movs	r2, #2
 8009488:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	685b      	ldr	r3, [r3, #4]
 8009492:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	689b      	ldr	r3, [r3, #8]
 800949a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	4a34      	ldr	r2, [pc, #208]	; (8009574 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80094a2:	4293      	cmp	r3, r2
 80094a4:	d009      	beq.n	80094ba <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	4a33      	ldr	r2, [pc, #204]	; (8009578 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80094ac:	4293      	cmp	r3, r2
 80094ae:	d004      	beq.n	80094ba <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	4a31      	ldr	r2, [pc, #196]	; (800957c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80094b6:	4293      	cmp	r3, r2
 80094b8:	d108      	bne.n	80094cc <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80094c0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80094c2:	683b      	ldr	r3, [r7, #0]
 80094c4:	685b      	ldr	r3, [r3, #4]
 80094c6:	68fa      	ldr	r2, [r7, #12]
 80094c8:	4313      	orrs	r3, r2
 80094ca:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80094d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80094d6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80094d8:	683b      	ldr	r3, [r7, #0]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	68fa      	ldr	r2, [r7, #12]
 80094de:	4313      	orrs	r3, r2
 80094e0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	68fa      	ldr	r2, [r7, #12]
 80094e8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	4a21      	ldr	r2, [pc, #132]	; (8009574 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80094f0:	4293      	cmp	r3, r2
 80094f2:	d022      	beq.n	800953a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80094fc:	d01d      	beq.n	800953a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	4a1f      	ldr	r2, [pc, #124]	; (8009580 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8009504:	4293      	cmp	r3, r2
 8009506:	d018      	beq.n	800953a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	4a1d      	ldr	r2, [pc, #116]	; (8009584 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800950e:	4293      	cmp	r3, r2
 8009510:	d013      	beq.n	800953a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	4a1c      	ldr	r2, [pc, #112]	; (8009588 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8009518:	4293      	cmp	r3, r2
 800951a:	d00e      	beq.n	800953a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	4a15      	ldr	r2, [pc, #84]	; (8009578 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8009522:	4293      	cmp	r3, r2
 8009524:	d009      	beq.n	800953a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	4a18      	ldr	r2, [pc, #96]	; (800958c <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800952c:	4293      	cmp	r3, r2
 800952e:	d004      	beq.n	800953a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	4a11      	ldr	r2, [pc, #68]	; (800957c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009536:	4293      	cmp	r3, r2
 8009538:	d10c      	bne.n	8009554 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800953a:	68bb      	ldr	r3, [r7, #8]
 800953c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009540:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009542:	683b      	ldr	r3, [r7, #0]
 8009544:	689b      	ldr	r3, [r3, #8]
 8009546:	68ba      	ldr	r2, [r7, #8]
 8009548:	4313      	orrs	r3, r2
 800954a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	68ba      	ldr	r2, [r7, #8]
 8009552:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	2201      	movs	r2, #1
 8009558:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	2200      	movs	r2, #0
 8009560:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009564:	2300      	movs	r3, #0
}
 8009566:	4618      	mov	r0, r3
 8009568:	3714      	adds	r7, #20
 800956a:	46bd      	mov	sp, r7
 800956c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009570:	4770      	bx	lr
 8009572:	bf00      	nop
 8009574:	40012c00 	.word	0x40012c00
 8009578:	40013400 	.word	0x40013400
 800957c:	40015000 	.word	0x40015000
 8009580:	40000400 	.word	0x40000400
 8009584:	40000800 	.word	0x40000800
 8009588:	40000c00 	.word	0x40000c00
 800958c:	40014000 	.word	0x40014000

08009590 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009590:	b480      	push	{r7}
 8009592:	b085      	sub	sp, #20
 8009594:	af00      	add	r7, sp, #0
 8009596:	6078      	str	r0, [r7, #4]
 8009598:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800959a:	2300      	movs	r3, #0
 800959c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80095a4:	2b01      	cmp	r3, #1
 80095a6:	d101      	bne.n	80095ac <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80095a8:	2302      	movs	r3, #2
 80095aa:	e096      	b.n	80096da <HAL_TIMEx_ConfigBreakDeadTime+0x14a>
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	2201      	movs	r2, #1
 80095b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80095ba:	683b      	ldr	r3, [r7, #0]
 80095bc:	68db      	ldr	r3, [r3, #12]
 80095be:	4313      	orrs	r3, r2
 80095c0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80095c8:	683b      	ldr	r3, [r7, #0]
 80095ca:	689b      	ldr	r3, [r3, #8]
 80095cc:	4313      	orrs	r3, r2
 80095ce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80095d6:	683b      	ldr	r3, [r7, #0]
 80095d8:	685b      	ldr	r3, [r3, #4]
 80095da:	4313      	orrs	r3, r2
 80095dc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80095e4:	683b      	ldr	r3, [r7, #0]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	4313      	orrs	r3, r2
 80095ea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80095f2:	683b      	ldr	r3, [r7, #0]
 80095f4:	691b      	ldr	r3, [r3, #16]
 80095f6:	4313      	orrs	r3, r2
 80095f8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8009600:	683b      	ldr	r3, [r7, #0]
 8009602:	695b      	ldr	r3, [r3, #20]
 8009604:	4313      	orrs	r3, r2
 8009606:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800960e:	683b      	ldr	r3, [r7, #0]
 8009610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009612:	4313      	orrs	r3, r2
 8009614:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800961c:	683b      	ldr	r3, [r7, #0]
 800961e:	699b      	ldr	r3, [r3, #24]
 8009620:	041b      	lsls	r3, r3, #16
 8009622:	4313      	orrs	r3, r2
 8009624:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	4a2f      	ldr	r2, [pc, #188]	; (80096e8 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 800962c:	4293      	cmp	r3, r2
 800962e:	d009      	beq.n	8009644 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	4a2d      	ldr	r2, [pc, #180]	; (80096ec <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8009636:	4293      	cmp	r3, r2
 8009638:	d004      	beq.n	8009644 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	4a2c      	ldr	r2, [pc, #176]	; (80096f0 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8009640:	4293      	cmp	r3, r2
 8009642:	d106      	bne.n	8009652 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800964a:	683b      	ldr	r3, [r7, #0]
 800964c:	69db      	ldr	r3, [r3, #28]
 800964e:	4313      	orrs	r3, r2
 8009650:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	4a24      	ldr	r2, [pc, #144]	; (80096e8 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8009658:	4293      	cmp	r3, r2
 800965a:	d009      	beq.n	8009670 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	4a22      	ldr	r2, [pc, #136]	; (80096ec <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8009662:	4293      	cmp	r3, r2
 8009664:	d004      	beq.n	8009670 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	4a21      	ldr	r2, [pc, #132]	; (80096f0 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 800966c:	4293      	cmp	r3, r2
 800966e:	d12b      	bne.n	80096c8 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8009676:	683b      	ldr	r3, [r7, #0]
 8009678:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800967a:	051b      	lsls	r3, r3, #20
 800967c:	4313      	orrs	r3, r2
 800967e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8009686:	683b      	ldr	r3, [r7, #0]
 8009688:	6a1b      	ldr	r3, [r3, #32]
 800968a:	4313      	orrs	r3, r2
 800968c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8009694:	683b      	ldr	r3, [r7, #0]
 8009696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009698:	4313      	orrs	r3, r2
 800969a:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	4a11      	ldr	r2, [pc, #68]	; (80096e8 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 80096a2:	4293      	cmp	r3, r2
 80096a4:	d009      	beq.n	80096ba <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	4a10      	ldr	r2, [pc, #64]	; (80096ec <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 80096ac:	4293      	cmp	r3, r2
 80096ae:	d004      	beq.n	80096ba <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	4a0e      	ldr	r2, [pc, #56]	; (80096f0 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 80096b6:	4293      	cmp	r3, r2
 80096b8:	d106      	bne.n	80096c8 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80096c0:	683b      	ldr	r3, [r7, #0]
 80096c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096c4:	4313      	orrs	r3, r2
 80096c6:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	68fa      	ldr	r2, [r7, #12]
 80096ce:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	2200      	movs	r2, #0
 80096d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80096d8:	2300      	movs	r3, #0
}
 80096da:	4618      	mov	r0, r3
 80096dc:	3714      	adds	r7, #20
 80096de:	46bd      	mov	sp, r7
 80096e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096e4:	4770      	bx	lr
 80096e6:	bf00      	nop
 80096e8:	40012c00 	.word	0x40012c00
 80096ec:	40013400 	.word	0x40013400
 80096f0:	40015000 	.word	0x40015000

080096f4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80096f4:	b480      	push	{r7}
 80096f6:	b083      	sub	sp, #12
 80096f8:	af00      	add	r7, sp, #0
 80096fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80096fc:	bf00      	nop
 80096fe:	370c      	adds	r7, #12
 8009700:	46bd      	mov	sp, r7
 8009702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009706:	4770      	bx	lr

08009708 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009708:	b480      	push	{r7}
 800970a:	b083      	sub	sp, #12
 800970c:	af00      	add	r7, sp, #0
 800970e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009710:	bf00      	nop
 8009712:	370c      	adds	r7, #12
 8009714:	46bd      	mov	sp, r7
 8009716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800971a:	4770      	bx	lr

0800971c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800971c:	b480      	push	{r7}
 800971e:	b083      	sub	sp, #12
 8009720:	af00      	add	r7, sp, #0
 8009722:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009724:	bf00      	nop
 8009726:	370c      	adds	r7, #12
 8009728:	46bd      	mov	sp, r7
 800972a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800972e:	4770      	bx	lr

08009730 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8009730:	b480      	push	{r7}
 8009732:	b083      	sub	sp, #12
 8009734:	af00      	add	r7, sp, #0
 8009736:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8009738:	bf00      	nop
 800973a:	370c      	adds	r7, #12
 800973c:	46bd      	mov	sp, r7
 800973e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009742:	4770      	bx	lr

08009744 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8009744:	b480      	push	{r7}
 8009746:	b083      	sub	sp, #12
 8009748:	af00      	add	r7, sp, #0
 800974a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800974c:	bf00      	nop
 800974e:	370c      	adds	r7, #12
 8009750:	46bd      	mov	sp, r7
 8009752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009756:	4770      	bx	lr

08009758 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8009758:	b480      	push	{r7}
 800975a:	b083      	sub	sp, #12
 800975c:	af00      	add	r7, sp, #0
 800975e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8009760:	bf00      	nop
 8009762:	370c      	adds	r7, #12
 8009764:	46bd      	mov	sp, r7
 8009766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800976a:	4770      	bx	lr

0800976c <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800976c:	b480      	push	{r7}
 800976e:	b083      	sub	sp, #12
 8009770:	af00      	add	r7, sp, #0
 8009772:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8009774:	bf00      	nop
 8009776:	370c      	adds	r7, #12
 8009778:	46bd      	mov	sp, r7
 800977a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800977e:	4770      	bx	lr

08009780 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009780:	b580      	push	{r7, lr}
 8009782:	b082      	sub	sp, #8
 8009784:	af00      	add	r7, sp, #0
 8009786:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	2b00      	cmp	r3, #0
 800978c:	d101      	bne.n	8009792 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800978e:	2301      	movs	r3, #1
 8009790:	e042      	b.n	8009818 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009798:	2b00      	cmp	r3, #0
 800979a:	d106      	bne.n	80097aa <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	2200      	movs	r2, #0
 80097a0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80097a4:	6878      	ldr	r0, [r7, #4]
 80097a6:	f7f9 f921 	bl	80029ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	2224      	movs	r2, #36	; 0x24
 80097ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	681a      	ldr	r2, [r3, #0]
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	f022 0201 	bic.w	r2, r2, #1
 80097c0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80097c2:	6878      	ldr	r0, [r7, #4]
 80097c4:	f000 f8c2 	bl	800994c <UART_SetConfig>
 80097c8:	4603      	mov	r3, r0
 80097ca:	2b01      	cmp	r3, #1
 80097cc:	d101      	bne.n	80097d2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80097ce:	2301      	movs	r3, #1
 80097d0:	e022      	b.n	8009818 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d002      	beq.n	80097e0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80097da:	6878      	ldr	r0, [r7, #4]
 80097dc:	f000 fbb2 	bl	8009f44 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	685a      	ldr	r2, [r3, #4]
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80097ee:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	689a      	ldr	r2, [r3, #8]
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80097fe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	681a      	ldr	r2, [r3, #0]
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	f042 0201 	orr.w	r2, r2, #1
 800980e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009810:	6878      	ldr	r0, [r7, #4]
 8009812:	f000 fc39 	bl	800a088 <UART_CheckIdleState>
 8009816:	4603      	mov	r3, r0
}
 8009818:	4618      	mov	r0, r3
 800981a:	3708      	adds	r7, #8
 800981c:	46bd      	mov	sp, r7
 800981e:	bd80      	pop	{r7, pc}

08009820 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009820:	b580      	push	{r7, lr}
 8009822:	b08a      	sub	sp, #40	; 0x28
 8009824:	af02      	add	r7, sp, #8
 8009826:	60f8      	str	r0, [r7, #12]
 8009828:	60b9      	str	r1, [r7, #8]
 800982a:	603b      	str	r3, [r7, #0]
 800982c:	4613      	mov	r3, r2
 800982e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009836:	2b20      	cmp	r3, #32
 8009838:	f040 8083 	bne.w	8009942 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800983c:	68bb      	ldr	r3, [r7, #8]
 800983e:	2b00      	cmp	r3, #0
 8009840:	d002      	beq.n	8009848 <HAL_UART_Transmit+0x28>
 8009842:	88fb      	ldrh	r3, [r7, #6]
 8009844:	2b00      	cmp	r3, #0
 8009846:	d101      	bne.n	800984c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8009848:	2301      	movs	r3, #1
 800984a:	e07b      	b.n	8009944 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009852:	2b01      	cmp	r3, #1
 8009854:	d101      	bne.n	800985a <HAL_UART_Transmit+0x3a>
 8009856:	2302      	movs	r3, #2
 8009858:	e074      	b.n	8009944 <HAL_UART_Transmit+0x124>
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	2201      	movs	r2, #1
 800985e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	2200      	movs	r2, #0
 8009866:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	2221      	movs	r2, #33	; 0x21
 800986e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009872:	f7f9 fb13 	bl	8002e9c <HAL_GetTick>
 8009876:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	88fa      	ldrh	r2, [r7, #6]
 800987c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	88fa      	ldrh	r2, [r7, #6]
 8009884:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	689b      	ldr	r3, [r3, #8]
 800988c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009890:	d108      	bne.n	80098a4 <HAL_UART_Transmit+0x84>
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	691b      	ldr	r3, [r3, #16]
 8009896:	2b00      	cmp	r3, #0
 8009898:	d104      	bne.n	80098a4 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800989a:	2300      	movs	r3, #0
 800989c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800989e:	68bb      	ldr	r3, [r7, #8]
 80098a0:	61bb      	str	r3, [r7, #24]
 80098a2:	e003      	b.n	80098ac <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80098a4:	68bb      	ldr	r3, [r7, #8]
 80098a6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80098a8:	2300      	movs	r3, #0
 80098aa:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	2200      	movs	r2, #0
 80098b0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 80098b4:	e02c      	b.n	8009910 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80098b6:	683b      	ldr	r3, [r7, #0]
 80098b8:	9300      	str	r3, [sp, #0]
 80098ba:	697b      	ldr	r3, [r7, #20]
 80098bc:	2200      	movs	r2, #0
 80098be:	2180      	movs	r1, #128	; 0x80
 80098c0:	68f8      	ldr	r0, [r7, #12]
 80098c2:	f000 fc2c 	bl	800a11e <UART_WaitOnFlagUntilTimeout>
 80098c6:	4603      	mov	r3, r0
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d001      	beq.n	80098d0 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 80098cc:	2303      	movs	r3, #3
 80098ce:	e039      	b.n	8009944 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 80098d0:	69fb      	ldr	r3, [r7, #28]
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d10b      	bne.n	80098ee <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80098d6:	69bb      	ldr	r3, [r7, #24]
 80098d8:	881b      	ldrh	r3, [r3, #0]
 80098da:	461a      	mov	r2, r3
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80098e4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80098e6:	69bb      	ldr	r3, [r7, #24]
 80098e8:	3302      	adds	r3, #2
 80098ea:	61bb      	str	r3, [r7, #24]
 80098ec:	e007      	b.n	80098fe <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80098ee:	69fb      	ldr	r3, [r7, #28]
 80098f0:	781a      	ldrb	r2, [r3, #0]
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80098f8:	69fb      	ldr	r3, [r7, #28]
 80098fa:	3301      	adds	r3, #1
 80098fc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8009904:	b29b      	uxth	r3, r3
 8009906:	3b01      	subs	r3, #1
 8009908:	b29a      	uxth	r2, r3
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8009916:	b29b      	uxth	r3, r3
 8009918:	2b00      	cmp	r3, #0
 800991a:	d1cc      	bne.n	80098b6 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800991c:	683b      	ldr	r3, [r7, #0]
 800991e:	9300      	str	r3, [sp, #0]
 8009920:	697b      	ldr	r3, [r7, #20]
 8009922:	2200      	movs	r2, #0
 8009924:	2140      	movs	r1, #64	; 0x40
 8009926:	68f8      	ldr	r0, [r7, #12]
 8009928:	f000 fbf9 	bl	800a11e <UART_WaitOnFlagUntilTimeout>
 800992c:	4603      	mov	r3, r0
 800992e:	2b00      	cmp	r3, #0
 8009930:	d001      	beq.n	8009936 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8009932:	2303      	movs	r3, #3
 8009934:	e006      	b.n	8009944 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	2220      	movs	r2, #32
 800993a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800993e:	2300      	movs	r3, #0
 8009940:	e000      	b.n	8009944 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8009942:	2302      	movs	r3, #2
  }
}
 8009944:	4618      	mov	r0, r3
 8009946:	3720      	adds	r7, #32
 8009948:	46bd      	mov	sp, r7
 800994a:	bd80      	pop	{r7, pc}

0800994c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800994c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009950:	b08c      	sub	sp, #48	; 0x30
 8009952:	af00      	add	r7, sp, #0
 8009954:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009956:	2300      	movs	r3, #0
 8009958:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800995c:	697b      	ldr	r3, [r7, #20]
 800995e:	689a      	ldr	r2, [r3, #8]
 8009960:	697b      	ldr	r3, [r7, #20]
 8009962:	691b      	ldr	r3, [r3, #16]
 8009964:	431a      	orrs	r2, r3
 8009966:	697b      	ldr	r3, [r7, #20]
 8009968:	695b      	ldr	r3, [r3, #20]
 800996a:	431a      	orrs	r2, r3
 800996c:	697b      	ldr	r3, [r7, #20]
 800996e:	69db      	ldr	r3, [r3, #28]
 8009970:	4313      	orrs	r3, r2
 8009972:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009974:	697b      	ldr	r3, [r7, #20]
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	681a      	ldr	r2, [r3, #0]
 800997a:	4baa      	ldr	r3, [pc, #680]	; (8009c24 <UART_SetConfig+0x2d8>)
 800997c:	4013      	ands	r3, r2
 800997e:	697a      	ldr	r2, [r7, #20]
 8009980:	6812      	ldr	r2, [r2, #0]
 8009982:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009984:	430b      	orrs	r3, r1
 8009986:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009988:	697b      	ldr	r3, [r7, #20]
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	685b      	ldr	r3, [r3, #4]
 800998e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009992:	697b      	ldr	r3, [r7, #20]
 8009994:	68da      	ldr	r2, [r3, #12]
 8009996:	697b      	ldr	r3, [r7, #20]
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	430a      	orrs	r2, r1
 800999c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800999e:	697b      	ldr	r3, [r7, #20]
 80099a0:	699b      	ldr	r3, [r3, #24]
 80099a2:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80099a4:	697b      	ldr	r3, [r7, #20]
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	4a9f      	ldr	r2, [pc, #636]	; (8009c28 <UART_SetConfig+0x2dc>)
 80099aa:	4293      	cmp	r3, r2
 80099ac:	d004      	beq.n	80099b8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80099ae:	697b      	ldr	r3, [r7, #20]
 80099b0:	6a1b      	ldr	r3, [r3, #32]
 80099b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80099b4:	4313      	orrs	r3, r2
 80099b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80099b8:	697b      	ldr	r3, [r7, #20]
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	689b      	ldr	r3, [r3, #8]
 80099be:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80099c2:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80099c6:	697a      	ldr	r2, [r7, #20]
 80099c8:	6812      	ldr	r2, [r2, #0]
 80099ca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80099cc:	430b      	orrs	r3, r1
 80099ce:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80099d0:	697b      	ldr	r3, [r7, #20]
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099d6:	f023 010f 	bic.w	r1, r3, #15
 80099da:	697b      	ldr	r3, [r7, #20]
 80099dc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80099de:	697b      	ldr	r3, [r7, #20]
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	430a      	orrs	r2, r1
 80099e4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80099e6:	697b      	ldr	r3, [r7, #20]
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	4a90      	ldr	r2, [pc, #576]	; (8009c2c <UART_SetConfig+0x2e0>)
 80099ec:	4293      	cmp	r3, r2
 80099ee:	d125      	bne.n	8009a3c <UART_SetConfig+0xf0>
 80099f0:	4b8f      	ldr	r3, [pc, #572]	; (8009c30 <UART_SetConfig+0x2e4>)
 80099f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80099f6:	f003 0303 	and.w	r3, r3, #3
 80099fa:	2b03      	cmp	r3, #3
 80099fc:	d81a      	bhi.n	8009a34 <UART_SetConfig+0xe8>
 80099fe:	a201      	add	r2, pc, #4	; (adr r2, 8009a04 <UART_SetConfig+0xb8>)
 8009a00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a04:	08009a15 	.word	0x08009a15
 8009a08:	08009a25 	.word	0x08009a25
 8009a0c:	08009a1d 	.word	0x08009a1d
 8009a10:	08009a2d 	.word	0x08009a2d
 8009a14:	2301      	movs	r3, #1
 8009a16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009a1a:	e116      	b.n	8009c4a <UART_SetConfig+0x2fe>
 8009a1c:	2302      	movs	r3, #2
 8009a1e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009a22:	e112      	b.n	8009c4a <UART_SetConfig+0x2fe>
 8009a24:	2304      	movs	r3, #4
 8009a26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009a2a:	e10e      	b.n	8009c4a <UART_SetConfig+0x2fe>
 8009a2c:	2308      	movs	r3, #8
 8009a2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009a32:	e10a      	b.n	8009c4a <UART_SetConfig+0x2fe>
 8009a34:	2310      	movs	r3, #16
 8009a36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009a3a:	e106      	b.n	8009c4a <UART_SetConfig+0x2fe>
 8009a3c:	697b      	ldr	r3, [r7, #20]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	4a7c      	ldr	r2, [pc, #496]	; (8009c34 <UART_SetConfig+0x2e8>)
 8009a42:	4293      	cmp	r3, r2
 8009a44:	d138      	bne.n	8009ab8 <UART_SetConfig+0x16c>
 8009a46:	4b7a      	ldr	r3, [pc, #488]	; (8009c30 <UART_SetConfig+0x2e4>)
 8009a48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009a4c:	f003 030c 	and.w	r3, r3, #12
 8009a50:	2b0c      	cmp	r3, #12
 8009a52:	d82d      	bhi.n	8009ab0 <UART_SetConfig+0x164>
 8009a54:	a201      	add	r2, pc, #4	; (adr r2, 8009a5c <UART_SetConfig+0x110>)
 8009a56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a5a:	bf00      	nop
 8009a5c:	08009a91 	.word	0x08009a91
 8009a60:	08009ab1 	.word	0x08009ab1
 8009a64:	08009ab1 	.word	0x08009ab1
 8009a68:	08009ab1 	.word	0x08009ab1
 8009a6c:	08009aa1 	.word	0x08009aa1
 8009a70:	08009ab1 	.word	0x08009ab1
 8009a74:	08009ab1 	.word	0x08009ab1
 8009a78:	08009ab1 	.word	0x08009ab1
 8009a7c:	08009a99 	.word	0x08009a99
 8009a80:	08009ab1 	.word	0x08009ab1
 8009a84:	08009ab1 	.word	0x08009ab1
 8009a88:	08009ab1 	.word	0x08009ab1
 8009a8c:	08009aa9 	.word	0x08009aa9
 8009a90:	2300      	movs	r3, #0
 8009a92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009a96:	e0d8      	b.n	8009c4a <UART_SetConfig+0x2fe>
 8009a98:	2302      	movs	r3, #2
 8009a9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009a9e:	e0d4      	b.n	8009c4a <UART_SetConfig+0x2fe>
 8009aa0:	2304      	movs	r3, #4
 8009aa2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009aa6:	e0d0      	b.n	8009c4a <UART_SetConfig+0x2fe>
 8009aa8:	2308      	movs	r3, #8
 8009aaa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009aae:	e0cc      	b.n	8009c4a <UART_SetConfig+0x2fe>
 8009ab0:	2310      	movs	r3, #16
 8009ab2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009ab6:	e0c8      	b.n	8009c4a <UART_SetConfig+0x2fe>
 8009ab8:	697b      	ldr	r3, [r7, #20]
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	4a5e      	ldr	r2, [pc, #376]	; (8009c38 <UART_SetConfig+0x2ec>)
 8009abe:	4293      	cmp	r3, r2
 8009ac0:	d125      	bne.n	8009b0e <UART_SetConfig+0x1c2>
 8009ac2:	4b5b      	ldr	r3, [pc, #364]	; (8009c30 <UART_SetConfig+0x2e4>)
 8009ac4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009ac8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8009acc:	2b30      	cmp	r3, #48	; 0x30
 8009ace:	d016      	beq.n	8009afe <UART_SetConfig+0x1b2>
 8009ad0:	2b30      	cmp	r3, #48	; 0x30
 8009ad2:	d818      	bhi.n	8009b06 <UART_SetConfig+0x1ba>
 8009ad4:	2b20      	cmp	r3, #32
 8009ad6:	d00a      	beq.n	8009aee <UART_SetConfig+0x1a2>
 8009ad8:	2b20      	cmp	r3, #32
 8009ada:	d814      	bhi.n	8009b06 <UART_SetConfig+0x1ba>
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d002      	beq.n	8009ae6 <UART_SetConfig+0x19a>
 8009ae0:	2b10      	cmp	r3, #16
 8009ae2:	d008      	beq.n	8009af6 <UART_SetConfig+0x1aa>
 8009ae4:	e00f      	b.n	8009b06 <UART_SetConfig+0x1ba>
 8009ae6:	2300      	movs	r3, #0
 8009ae8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009aec:	e0ad      	b.n	8009c4a <UART_SetConfig+0x2fe>
 8009aee:	2302      	movs	r3, #2
 8009af0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009af4:	e0a9      	b.n	8009c4a <UART_SetConfig+0x2fe>
 8009af6:	2304      	movs	r3, #4
 8009af8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009afc:	e0a5      	b.n	8009c4a <UART_SetConfig+0x2fe>
 8009afe:	2308      	movs	r3, #8
 8009b00:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009b04:	e0a1      	b.n	8009c4a <UART_SetConfig+0x2fe>
 8009b06:	2310      	movs	r3, #16
 8009b08:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009b0c:	e09d      	b.n	8009c4a <UART_SetConfig+0x2fe>
 8009b0e:	697b      	ldr	r3, [r7, #20]
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	4a4a      	ldr	r2, [pc, #296]	; (8009c3c <UART_SetConfig+0x2f0>)
 8009b14:	4293      	cmp	r3, r2
 8009b16:	d125      	bne.n	8009b64 <UART_SetConfig+0x218>
 8009b18:	4b45      	ldr	r3, [pc, #276]	; (8009c30 <UART_SetConfig+0x2e4>)
 8009b1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009b1e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8009b22:	2bc0      	cmp	r3, #192	; 0xc0
 8009b24:	d016      	beq.n	8009b54 <UART_SetConfig+0x208>
 8009b26:	2bc0      	cmp	r3, #192	; 0xc0
 8009b28:	d818      	bhi.n	8009b5c <UART_SetConfig+0x210>
 8009b2a:	2b80      	cmp	r3, #128	; 0x80
 8009b2c:	d00a      	beq.n	8009b44 <UART_SetConfig+0x1f8>
 8009b2e:	2b80      	cmp	r3, #128	; 0x80
 8009b30:	d814      	bhi.n	8009b5c <UART_SetConfig+0x210>
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d002      	beq.n	8009b3c <UART_SetConfig+0x1f0>
 8009b36:	2b40      	cmp	r3, #64	; 0x40
 8009b38:	d008      	beq.n	8009b4c <UART_SetConfig+0x200>
 8009b3a:	e00f      	b.n	8009b5c <UART_SetConfig+0x210>
 8009b3c:	2300      	movs	r3, #0
 8009b3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009b42:	e082      	b.n	8009c4a <UART_SetConfig+0x2fe>
 8009b44:	2302      	movs	r3, #2
 8009b46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009b4a:	e07e      	b.n	8009c4a <UART_SetConfig+0x2fe>
 8009b4c:	2304      	movs	r3, #4
 8009b4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009b52:	e07a      	b.n	8009c4a <UART_SetConfig+0x2fe>
 8009b54:	2308      	movs	r3, #8
 8009b56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009b5a:	e076      	b.n	8009c4a <UART_SetConfig+0x2fe>
 8009b5c:	2310      	movs	r3, #16
 8009b5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009b62:	e072      	b.n	8009c4a <UART_SetConfig+0x2fe>
 8009b64:	697b      	ldr	r3, [r7, #20]
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	4a35      	ldr	r2, [pc, #212]	; (8009c40 <UART_SetConfig+0x2f4>)
 8009b6a:	4293      	cmp	r3, r2
 8009b6c:	d12a      	bne.n	8009bc4 <UART_SetConfig+0x278>
 8009b6e:	4b30      	ldr	r3, [pc, #192]	; (8009c30 <UART_SetConfig+0x2e4>)
 8009b70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009b74:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009b78:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009b7c:	d01a      	beq.n	8009bb4 <UART_SetConfig+0x268>
 8009b7e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009b82:	d81b      	bhi.n	8009bbc <UART_SetConfig+0x270>
 8009b84:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009b88:	d00c      	beq.n	8009ba4 <UART_SetConfig+0x258>
 8009b8a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009b8e:	d815      	bhi.n	8009bbc <UART_SetConfig+0x270>
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d003      	beq.n	8009b9c <UART_SetConfig+0x250>
 8009b94:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009b98:	d008      	beq.n	8009bac <UART_SetConfig+0x260>
 8009b9a:	e00f      	b.n	8009bbc <UART_SetConfig+0x270>
 8009b9c:	2300      	movs	r3, #0
 8009b9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009ba2:	e052      	b.n	8009c4a <UART_SetConfig+0x2fe>
 8009ba4:	2302      	movs	r3, #2
 8009ba6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009baa:	e04e      	b.n	8009c4a <UART_SetConfig+0x2fe>
 8009bac:	2304      	movs	r3, #4
 8009bae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009bb2:	e04a      	b.n	8009c4a <UART_SetConfig+0x2fe>
 8009bb4:	2308      	movs	r3, #8
 8009bb6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009bba:	e046      	b.n	8009c4a <UART_SetConfig+0x2fe>
 8009bbc:	2310      	movs	r3, #16
 8009bbe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009bc2:	e042      	b.n	8009c4a <UART_SetConfig+0x2fe>
 8009bc4:	697b      	ldr	r3, [r7, #20]
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	4a17      	ldr	r2, [pc, #92]	; (8009c28 <UART_SetConfig+0x2dc>)
 8009bca:	4293      	cmp	r3, r2
 8009bcc:	d13a      	bne.n	8009c44 <UART_SetConfig+0x2f8>
 8009bce:	4b18      	ldr	r3, [pc, #96]	; (8009c30 <UART_SetConfig+0x2e4>)
 8009bd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009bd4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8009bd8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009bdc:	d01a      	beq.n	8009c14 <UART_SetConfig+0x2c8>
 8009bde:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009be2:	d81b      	bhi.n	8009c1c <UART_SetConfig+0x2d0>
 8009be4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009be8:	d00c      	beq.n	8009c04 <UART_SetConfig+0x2b8>
 8009bea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009bee:	d815      	bhi.n	8009c1c <UART_SetConfig+0x2d0>
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	d003      	beq.n	8009bfc <UART_SetConfig+0x2b0>
 8009bf4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009bf8:	d008      	beq.n	8009c0c <UART_SetConfig+0x2c0>
 8009bfa:	e00f      	b.n	8009c1c <UART_SetConfig+0x2d0>
 8009bfc:	2300      	movs	r3, #0
 8009bfe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009c02:	e022      	b.n	8009c4a <UART_SetConfig+0x2fe>
 8009c04:	2302      	movs	r3, #2
 8009c06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009c0a:	e01e      	b.n	8009c4a <UART_SetConfig+0x2fe>
 8009c0c:	2304      	movs	r3, #4
 8009c0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009c12:	e01a      	b.n	8009c4a <UART_SetConfig+0x2fe>
 8009c14:	2308      	movs	r3, #8
 8009c16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009c1a:	e016      	b.n	8009c4a <UART_SetConfig+0x2fe>
 8009c1c:	2310      	movs	r3, #16
 8009c1e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009c22:	e012      	b.n	8009c4a <UART_SetConfig+0x2fe>
 8009c24:	cfff69f3 	.word	0xcfff69f3
 8009c28:	40008000 	.word	0x40008000
 8009c2c:	40013800 	.word	0x40013800
 8009c30:	40021000 	.word	0x40021000
 8009c34:	40004400 	.word	0x40004400
 8009c38:	40004800 	.word	0x40004800
 8009c3c:	40004c00 	.word	0x40004c00
 8009c40:	40005000 	.word	0x40005000
 8009c44:	2310      	movs	r3, #16
 8009c46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009c4a:	697b      	ldr	r3, [r7, #20]
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	4aae      	ldr	r2, [pc, #696]	; (8009f08 <UART_SetConfig+0x5bc>)
 8009c50:	4293      	cmp	r3, r2
 8009c52:	f040 8097 	bne.w	8009d84 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009c56:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009c5a:	2b08      	cmp	r3, #8
 8009c5c:	d823      	bhi.n	8009ca6 <UART_SetConfig+0x35a>
 8009c5e:	a201      	add	r2, pc, #4	; (adr r2, 8009c64 <UART_SetConfig+0x318>)
 8009c60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c64:	08009c89 	.word	0x08009c89
 8009c68:	08009ca7 	.word	0x08009ca7
 8009c6c:	08009c91 	.word	0x08009c91
 8009c70:	08009ca7 	.word	0x08009ca7
 8009c74:	08009c97 	.word	0x08009c97
 8009c78:	08009ca7 	.word	0x08009ca7
 8009c7c:	08009ca7 	.word	0x08009ca7
 8009c80:	08009ca7 	.word	0x08009ca7
 8009c84:	08009c9f 	.word	0x08009c9f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009c88:	f7fd face 	bl	8007228 <HAL_RCC_GetPCLK1Freq>
 8009c8c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009c8e:	e010      	b.n	8009cb2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009c90:	4b9e      	ldr	r3, [pc, #632]	; (8009f0c <UART_SetConfig+0x5c0>)
 8009c92:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8009c94:	e00d      	b.n	8009cb2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009c96:	f7fd fa5b 	bl	8007150 <HAL_RCC_GetSysClockFreq>
 8009c9a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009c9c:	e009      	b.n	8009cb2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009c9e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009ca2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8009ca4:	e005      	b.n	8009cb2 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8009ca6:	2300      	movs	r3, #0
 8009ca8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8009caa:	2301      	movs	r3, #1
 8009cac:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8009cb0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	f000 8130 	beq.w	8009f1a <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009cba:	697b      	ldr	r3, [r7, #20]
 8009cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cbe:	4a94      	ldr	r2, [pc, #592]	; (8009f10 <UART_SetConfig+0x5c4>)
 8009cc0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009cc4:	461a      	mov	r2, r3
 8009cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cc8:	fbb3 f3f2 	udiv	r3, r3, r2
 8009ccc:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009cce:	697b      	ldr	r3, [r7, #20]
 8009cd0:	685a      	ldr	r2, [r3, #4]
 8009cd2:	4613      	mov	r3, r2
 8009cd4:	005b      	lsls	r3, r3, #1
 8009cd6:	4413      	add	r3, r2
 8009cd8:	69ba      	ldr	r2, [r7, #24]
 8009cda:	429a      	cmp	r2, r3
 8009cdc:	d305      	bcc.n	8009cea <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009cde:	697b      	ldr	r3, [r7, #20]
 8009ce0:	685b      	ldr	r3, [r3, #4]
 8009ce2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009ce4:	69ba      	ldr	r2, [r7, #24]
 8009ce6:	429a      	cmp	r2, r3
 8009ce8:	d903      	bls.n	8009cf2 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8009cea:	2301      	movs	r3, #1
 8009cec:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8009cf0:	e113      	b.n	8009f1a <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cf4:	2200      	movs	r2, #0
 8009cf6:	60bb      	str	r3, [r7, #8]
 8009cf8:	60fa      	str	r2, [r7, #12]
 8009cfa:	697b      	ldr	r3, [r7, #20]
 8009cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cfe:	4a84      	ldr	r2, [pc, #528]	; (8009f10 <UART_SetConfig+0x5c4>)
 8009d00:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009d04:	b29b      	uxth	r3, r3
 8009d06:	2200      	movs	r2, #0
 8009d08:	603b      	str	r3, [r7, #0]
 8009d0a:	607a      	str	r2, [r7, #4]
 8009d0c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009d10:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009d14:	f7f6 ff70 	bl	8000bf8 <__aeabi_uldivmod>
 8009d18:	4602      	mov	r2, r0
 8009d1a:	460b      	mov	r3, r1
 8009d1c:	4610      	mov	r0, r2
 8009d1e:	4619      	mov	r1, r3
 8009d20:	f04f 0200 	mov.w	r2, #0
 8009d24:	f04f 0300 	mov.w	r3, #0
 8009d28:	020b      	lsls	r3, r1, #8
 8009d2a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009d2e:	0202      	lsls	r2, r0, #8
 8009d30:	6979      	ldr	r1, [r7, #20]
 8009d32:	6849      	ldr	r1, [r1, #4]
 8009d34:	0849      	lsrs	r1, r1, #1
 8009d36:	2000      	movs	r0, #0
 8009d38:	460c      	mov	r4, r1
 8009d3a:	4605      	mov	r5, r0
 8009d3c:	eb12 0804 	adds.w	r8, r2, r4
 8009d40:	eb43 0905 	adc.w	r9, r3, r5
 8009d44:	697b      	ldr	r3, [r7, #20]
 8009d46:	685b      	ldr	r3, [r3, #4]
 8009d48:	2200      	movs	r2, #0
 8009d4a:	469a      	mov	sl, r3
 8009d4c:	4693      	mov	fp, r2
 8009d4e:	4652      	mov	r2, sl
 8009d50:	465b      	mov	r3, fp
 8009d52:	4640      	mov	r0, r8
 8009d54:	4649      	mov	r1, r9
 8009d56:	f7f6 ff4f 	bl	8000bf8 <__aeabi_uldivmod>
 8009d5a:	4602      	mov	r2, r0
 8009d5c:	460b      	mov	r3, r1
 8009d5e:	4613      	mov	r3, r2
 8009d60:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009d62:	6a3b      	ldr	r3, [r7, #32]
 8009d64:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009d68:	d308      	bcc.n	8009d7c <UART_SetConfig+0x430>
 8009d6a:	6a3b      	ldr	r3, [r7, #32]
 8009d6c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009d70:	d204      	bcs.n	8009d7c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8009d72:	697b      	ldr	r3, [r7, #20]
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	6a3a      	ldr	r2, [r7, #32]
 8009d78:	60da      	str	r2, [r3, #12]
 8009d7a:	e0ce      	b.n	8009f1a <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8009d7c:	2301      	movs	r3, #1
 8009d7e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8009d82:	e0ca      	b.n	8009f1a <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009d84:	697b      	ldr	r3, [r7, #20]
 8009d86:	69db      	ldr	r3, [r3, #28]
 8009d88:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009d8c:	d166      	bne.n	8009e5c <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8009d8e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009d92:	2b08      	cmp	r3, #8
 8009d94:	d827      	bhi.n	8009de6 <UART_SetConfig+0x49a>
 8009d96:	a201      	add	r2, pc, #4	; (adr r2, 8009d9c <UART_SetConfig+0x450>)
 8009d98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d9c:	08009dc1 	.word	0x08009dc1
 8009da0:	08009dc9 	.word	0x08009dc9
 8009da4:	08009dd1 	.word	0x08009dd1
 8009da8:	08009de7 	.word	0x08009de7
 8009dac:	08009dd7 	.word	0x08009dd7
 8009db0:	08009de7 	.word	0x08009de7
 8009db4:	08009de7 	.word	0x08009de7
 8009db8:	08009de7 	.word	0x08009de7
 8009dbc:	08009ddf 	.word	0x08009ddf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009dc0:	f7fd fa32 	bl	8007228 <HAL_RCC_GetPCLK1Freq>
 8009dc4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009dc6:	e014      	b.n	8009df2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009dc8:	f7fd fa44 	bl	8007254 <HAL_RCC_GetPCLK2Freq>
 8009dcc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009dce:	e010      	b.n	8009df2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009dd0:	4b4e      	ldr	r3, [pc, #312]	; (8009f0c <UART_SetConfig+0x5c0>)
 8009dd2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8009dd4:	e00d      	b.n	8009df2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009dd6:	f7fd f9bb 	bl	8007150 <HAL_RCC_GetSysClockFreq>
 8009dda:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009ddc:	e009      	b.n	8009df2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009dde:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009de2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8009de4:	e005      	b.n	8009df2 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8009de6:	2300      	movs	r3, #0
 8009de8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8009dea:	2301      	movs	r3, #1
 8009dec:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8009df0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	f000 8090 	beq.w	8009f1a <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009dfa:	697b      	ldr	r3, [r7, #20]
 8009dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dfe:	4a44      	ldr	r2, [pc, #272]	; (8009f10 <UART_SetConfig+0x5c4>)
 8009e00:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009e04:	461a      	mov	r2, r3
 8009e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e08:	fbb3 f3f2 	udiv	r3, r3, r2
 8009e0c:	005a      	lsls	r2, r3, #1
 8009e0e:	697b      	ldr	r3, [r7, #20]
 8009e10:	685b      	ldr	r3, [r3, #4]
 8009e12:	085b      	lsrs	r3, r3, #1
 8009e14:	441a      	add	r2, r3
 8009e16:	697b      	ldr	r3, [r7, #20]
 8009e18:	685b      	ldr	r3, [r3, #4]
 8009e1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8009e1e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009e20:	6a3b      	ldr	r3, [r7, #32]
 8009e22:	2b0f      	cmp	r3, #15
 8009e24:	d916      	bls.n	8009e54 <UART_SetConfig+0x508>
 8009e26:	6a3b      	ldr	r3, [r7, #32]
 8009e28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009e2c:	d212      	bcs.n	8009e54 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009e2e:	6a3b      	ldr	r3, [r7, #32]
 8009e30:	b29b      	uxth	r3, r3
 8009e32:	f023 030f 	bic.w	r3, r3, #15
 8009e36:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009e38:	6a3b      	ldr	r3, [r7, #32]
 8009e3a:	085b      	lsrs	r3, r3, #1
 8009e3c:	b29b      	uxth	r3, r3
 8009e3e:	f003 0307 	and.w	r3, r3, #7
 8009e42:	b29a      	uxth	r2, r3
 8009e44:	8bfb      	ldrh	r3, [r7, #30]
 8009e46:	4313      	orrs	r3, r2
 8009e48:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8009e4a:	697b      	ldr	r3, [r7, #20]
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	8bfa      	ldrh	r2, [r7, #30]
 8009e50:	60da      	str	r2, [r3, #12]
 8009e52:	e062      	b.n	8009f1a <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8009e54:	2301      	movs	r3, #1
 8009e56:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8009e5a:	e05e      	b.n	8009f1a <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009e5c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009e60:	2b08      	cmp	r3, #8
 8009e62:	d828      	bhi.n	8009eb6 <UART_SetConfig+0x56a>
 8009e64:	a201      	add	r2, pc, #4	; (adr r2, 8009e6c <UART_SetConfig+0x520>)
 8009e66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e6a:	bf00      	nop
 8009e6c:	08009e91 	.word	0x08009e91
 8009e70:	08009e99 	.word	0x08009e99
 8009e74:	08009ea1 	.word	0x08009ea1
 8009e78:	08009eb7 	.word	0x08009eb7
 8009e7c:	08009ea7 	.word	0x08009ea7
 8009e80:	08009eb7 	.word	0x08009eb7
 8009e84:	08009eb7 	.word	0x08009eb7
 8009e88:	08009eb7 	.word	0x08009eb7
 8009e8c:	08009eaf 	.word	0x08009eaf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009e90:	f7fd f9ca 	bl	8007228 <HAL_RCC_GetPCLK1Freq>
 8009e94:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009e96:	e014      	b.n	8009ec2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009e98:	f7fd f9dc 	bl	8007254 <HAL_RCC_GetPCLK2Freq>
 8009e9c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009e9e:	e010      	b.n	8009ec2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009ea0:	4b1a      	ldr	r3, [pc, #104]	; (8009f0c <UART_SetConfig+0x5c0>)
 8009ea2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8009ea4:	e00d      	b.n	8009ec2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009ea6:	f7fd f953 	bl	8007150 <HAL_RCC_GetSysClockFreq>
 8009eaa:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009eac:	e009      	b.n	8009ec2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009eae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009eb2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8009eb4:	e005      	b.n	8009ec2 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8009eb6:	2300      	movs	r3, #0
 8009eb8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8009eba:	2301      	movs	r3, #1
 8009ebc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8009ec0:	bf00      	nop
    }

    if (pclk != 0U)
 8009ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d028      	beq.n	8009f1a <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009ec8:	697b      	ldr	r3, [r7, #20]
 8009eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ecc:	4a10      	ldr	r2, [pc, #64]	; (8009f10 <UART_SetConfig+0x5c4>)
 8009ece:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009ed2:	461a      	mov	r2, r3
 8009ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ed6:	fbb3 f2f2 	udiv	r2, r3, r2
 8009eda:	697b      	ldr	r3, [r7, #20]
 8009edc:	685b      	ldr	r3, [r3, #4]
 8009ede:	085b      	lsrs	r3, r3, #1
 8009ee0:	441a      	add	r2, r3
 8009ee2:	697b      	ldr	r3, [r7, #20]
 8009ee4:	685b      	ldr	r3, [r3, #4]
 8009ee6:	fbb2 f3f3 	udiv	r3, r2, r3
 8009eea:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009eec:	6a3b      	ldr	r3, [r7, #32]
 8009eee:	2b0f      	cmp	r3, #15
 8009ef0:	d910      	bls.n	8009f14 <UART_SetConfig+0x5c8>
 8009ef2:	6a3b      	ldr	r3, [r7, #32]
 8009ef4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009ef8:	d20c      	bcs.n	8009f14 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009efa:	6a3b      	ldr	r3, [r7, #32]
 8009efc:	b29a      	uxth	r2, r3
 8009efe:	697b      	ldr	r3, [r7, #20]
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	60da      	str	r2, [r3, #12]
 8009f04:	e009      	b.n	8009f1a <UART_SetConfig+0x5ce>
 8009f06:	bf00      	nop
 8009f08:	40008000 	.word	0x40008000
 8009f0c:	00f42400 	.word	0x00f42400
 8009f10:	08013bb8 	.word	0x08013bb8
      }
      else
      {
        ret = HAL_ERROR;
 8009f14:	2301      	movs	r3, #1
 8009f16:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009f1a:	697b      	ldr	r3, [r7, #20]
 8009f1c:	2201      	movs	r2, #1
 8009f1e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8009f22:	697b      	ldr	r3, [r7, #20]
 8009f24:	2201      	movs	r2, #1
 8009f26:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009f2a:	697b      	ldr	r3, [r7, #20]
 8009f2c:	2200      	movs	r2, #0
 8009f2e:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8009f30:	697b      	ldr	r3, [r7, #20]
 8009f32:	2200      	movs	r2, #0
 8009f34:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8009f36:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8009f3a:	4618      	mov	r0, r3
 8009f3c:	3730      	adds	r7, #48	; 0x30
 8009f3e:	46bd      	mov	sp, r7
 8009f40:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08009f44 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009f44:	b480      	push	{r7}
 8009f46:	b083      	sub	sp, #12
 8009f48:	af00      	add	r7, sp, #0
 8009f4a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f50:	f003 0301 	and.w	r3, r3, #1
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d00a      	beq.n	8009f6e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	685b      	ldr	r3, [r3, #4]
 8009f5e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	430a      	orrs	r2, r1
 8009f6c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f72:	f003 0302 	and.w	r3, r3, #2
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d00a      	beq.n	8009f90 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	685b      	ldr	r3, [r3, #4]
 8009f80:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	430a      	orrs	r2, r1
 8009f8e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f94:	f003 0304 	and.w	r3, r3, #4
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	d00a      	beq.n	8009fb2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	685b      	ldr	r3, [r3, #4]
 8009fa2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	430a      	orrs	r2, r1
 8009fb0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009fb6:	f003 0308 	and.w	r3, r3, #8
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d00a      	beq.n	8009fd4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	685b      	ldr	r3, [r3, #4]
 8009fc4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	430a      	orrs	r2, r1
 8009fd2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009fd8:	f003 0310 	and.w	r3, r3, #16
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	d00a      	beq.n	8009ff6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	689b      	ldr	r3, [r3, #8]
 8009fe6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	430a      	orrs	r2, r1
 8009ff4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ffa:	f003 0320 	and.w	r3, r3, #32
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d00a      	beq.n	800a018 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	689b      	ldr	r3, [r3, #8]
 800a008:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	430a      	orrs	r2, r1
 800a016:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a01c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a020:	2b00      	cmp	r3, #0
 800a022:	d01a      	beq.n	800a05a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	685b      	ldr	r3, [r3, #4]
 800a02a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	430a      	orrs	r2, r1
 800a038:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a03e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a042:	d10a      	bne.n	800a05a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	685b      	ldr	r3, [r3, #4]
 800a04a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	430a      	orrs	r2, r1
 800a058:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a05e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a062:	2b00      	cmp	r3, #0
 800a064:	d00a      	beq.n	800a07c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	685b      	ldr	r3, [r3, #4]
 800a06c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	430a      	orrs	r2, r1
 800a07a:	605a      	str	r2, [r3, #4]
  }
}
 800a07c:	bf00      	nop
 800a07e:	370c      	adds	r7, #12
 800a080:	46bd      	mov	sp, r7
 800a082:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a086:	4770      	bx	lr

0800a088 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a088:	b580      	push	{r7, lr}
 800a08a:	b086      	sub	sp, #24
 800a08c:	af02      	add	r7, sp, #8
 800a08e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	2200      	movs	r2, #0
 800a094:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a098:	f7f8 ff00 	bl	8002e9c <HAL_GetTick>
 800a09c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	f003 0308 	and.w	r3, r3, #8
 800a0a8:	2b08      	cmp	r3, #8
 800a0aa:	d10e      	bne.n	800a0ca <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a0ac:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a0b0:	9300      	str	r3, [sp, #0]
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	2200      	movs	r2, #0
 800a0b6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a0ba:	6878      	ldr	r0, [r7, #4]
 800a0bc:	f000 f82f 	bl	800a11e <UART_WaitOnFlagUntilTimeout>
 800a0c0:	4603      	mov	r3, r0
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	d001      	beq.n	800a0ca <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a0c6:	2303      	movs	r3, #3
 800a0c8:	e025      	b.n	800a116 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	f003 0304 	and.w	r3, r3, #4
 800a0d4:	2b04      	cmp	r3, #4
 800a0d6:	d10e      	bne.n	800a0f6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a0d8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a0dc:	9300      	str	r3, [sp, #0]
 800a0de:	68fb      	ldr	r3, [r7, #12]
 800a0e0:	2200      	movs	r2, #0
 800a0e2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a0e6:	6878      	ldr	r0, [r7, #4]
 800a0e8:	f000 f819 	bl	800a11e <UART_WaitOnFlagUntilTimeout>
 800a0ec:	4603      	mov	r3, r0
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	d001      	beq.n	800a0f6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a0f2:	2303      	movs	r3, #3
 800a0f4:	e00f      	b.n	800a116 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	2220      	movs	r2, #32
 800a0fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	2220      	movs	r2, #32
 800a102:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	2200      	movs	r2, #0
 800a10a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	2200      	movs	r2, #0
 800a110:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a114:	2300      	movs	r3, #0
}
 800a116:	4618      	mov	r0, r3
 800a118:	3710      	adds	r7, #16
 800a11a:	46bd      	mov	sp, r7
 800a11c:	bd80      	pop	{r7, pc}

0800a11e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a11e:	b580      	push	{r7, lr}
 800a120:	b09c      	sub	sp, #112	; 0x70
 800a122:	af00      	add	r7, sp, #0
 800a124:	60f8      	str	r0, [r7, #12]
 800a126:	60b9      	str	r1, [r7, #8]
 800a128:	603b      	str	r3, [r7, #0]
 800a12a:	4613      	mov	r3, r2
 800a12c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a12e:	e0a9      	b.n	800a284 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a130:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a132:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a136:	f000 80a5 	beq.w	800a284 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a13a:	f7f8 feaf 	bl	8002e9c <HAL_GetTick>
 800a13e:	4602      	mov	r2, r0
 800a140:	683b      	ldr	r3, [r7, #0]
 800a142:	1ad3      	subs	r3, r2, r3
 800a144:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800a146:	429a      	cmp	r2, r3
 800a148:	d302      	bcc.n	800a150 <UART_WaitOnFlagUntilTimeout+0x32>
 800a14a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	d140      	bne.n	800a1d2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a156:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a158:	e853 3f00 	ldrex	r3, [r3]
 800a15c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800a15e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a160:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a164:	667b      	str	r3, [r7, #100]	; 0x64
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	461a      	mov	r2, r3
 800a16c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a16e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a170:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a172:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a174:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a176:	e841 2300 	strex	r3, r2, [r1]
 800a17a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800a17c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d1e6      	bne.n	800a150 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	3308      	adds	r3, #8
 800a188:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a18a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a18c:	e853 3f00 	ldrex	r3, [r3]
 800a190:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a192:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a194:	f023 0301 	bic.w	r3, r3, #1
 800a198:	663b      	str	r3, [r7, #96]	; 0x60
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	3308      	adds	r3, #8
 800a1a0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a1a2:	64ba      	str	r2, [r7, #72]	; 0x48
 800a1a4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1a6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a1a8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a1aa:	e841 2300 	strex	r3, r2, [r1]
 800a1ae:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800a1b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d1e5      	bne.n	800a182 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	2220      	movs	r2, #32
 800a1ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	2220      	movs	r2, #32
 800a1c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	2200      	movs	r2, #0
 800a1ca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800a1ce:	2303      	movs	r3, #3
 800a1d0:	e069      	b.n	800a2a6 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	f003 0304 	and.w	r3, r3, #4
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d051      	beq.n	800a284 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	69db      	ldr	r3, [r3, #28]
 800a1e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a1ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a1ee:	d149      	bne.n	800a284 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a1f8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a200:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a202:	e853 3f00 	ldrex	r3, [r3]
 800a206:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a20a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a20e:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	461a      	mov	r2, r3
 800a216:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a218:	637b      	str	r3, [r7, #52]	; 0x34
 800a21a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a21c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a21e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a220:	e841 2300 	strex	r3, r2, [r1]
 800a224:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a226:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a228:	2b00      	cmp	r3, #0
 800a22a:	d1e6      	bne.n	800a1fa <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	3308      	adds	r3, #8
 800a232:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a234:	697b      	ldr	r3, [r7, #20]
 800a236:	e853 3f00 	ldrex	r3, [r3]
 800a23a:	613b      	str	r3, [r7, #16]
   return(result);
 800a23c:	693b      	ldr	r3, [r7, #16]
 800a23e:	f023 0301 	bic.w	r3, r3, #1
 800a242:	66bb      	str	r3, [r7, #104]	; 0x68
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	3308      	adds	r3, #8
 800a24a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800a24c:	623a      	str	r2, [r7, #32]
 800a24e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a250:	69f9      	ldr	r1, [r7, #28]
 800a252:	6a3a      	ldr	r2, [r7, #32]
 800a254:	e841 2300 	strex	r3, r2, [r1]
 800a258:	61bb      	str	r3, [r7, #24]
   return(result);
 800a25a:	69bb      	ldr	r3, [r7, #24]
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	d1e5      	bne.n	800a22c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	2220      	movs	r2, #32
 800a264:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	2220      	movs	r2, #32
 800a26c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	2220      	movs	r2, #32
 800a274:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	2200      	movs	r2, #0
 800a27c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800a280:	2303      	movs	r3, #3
 800a282:	e010      	b.n	800a2a6 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	69da      	ldr	r2, [r3, #28]
 800a28a:	68bb      	ldr	r3, [r7, #8]
 800a28c:	4013      	ands	r3, r2
 800a28e:	68ba      	ldr	r2, [r7, #8]
 800a290:	429a      	cmp	r2, r3
 800a292:	bf0c      	ite	eq
 800a294:	2301      	moveq	r3, #1
 800a296:	2300      	movne	r3, #0
 800a298:	b2db      	uxtb	r3, r3
 800a29a:	461a      	mov	r2, r3
 800a29c:	79fb      	ldrb	r3, [r7, #7]
 800a29e:	429a      	cmp	r2, r3
 800a2a0:	f43f af46 	beq.w	800a130 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a2a4:	2300      	movs	r3, #0
}
 800a2a6:	4618      	mov	r0, r3
 800a2a8:	3770      	adds	r7, #112	; 0x70
 800a2aa:	46bd      	mov	sp, r7
 800a2ac:	bd80      	pop	{r7, pc}

0800a2ae <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a2ae:	b480      	push	{r7}
 800a2b0:	b085      	sub	sp, #20
 800a2b2:	af00      	add	r7, sp, #0
 800a2b4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a2bc:	2b01      	cmp	r3, #1
 800a2be:	d101      	bne.n	800a2c4 <HAL_UARTEx_DisableFifoMode+0x16>
 800a2c0:	2302      	movs	r3, #2
 800a2c2:	e027      	b.n	800a314 <HAL_UARTEx_DisableFifoMode+0x66>
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	2201      	movs	r2, #1
 800a2c8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	2224      	movs	r2, #36	; 0x24
 800a2d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	681a      	ldr	r2, [r3, #0]
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	f022 0201 	bic.w	r2, r2, #1
 800a2ea:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800a2f2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	2200      	movs	r2, #0
 800a2f8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	68fa      	ldr	r2, [r7, #12]
 800a300:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	2220      	movs	r2, #32
 800a306:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	2200      	movs	r2, #0
 800a30e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a312:	2300      	movs	r3, #0
}
 800a314:	4618      	mov	r0, r3
 800a316:	3714      	adds	r7, #20
 800a318:	46bd      	mov	sp, r7
 800a31a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a31e:	4770      	bx	lr

0800a320 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a320:	b580      	push	{r7, lr}
 800a322:	b084      	sub	sp, #16
 800a324:	af00      	add	r7, sp, #0
 800a326:	6078      	str	r0, [r7, #4]
 800a328:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a330:	2b01      	cmp	r3, #1
 800a332:	d101      	bne.n	800a338 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a334:	2302      	movs	r3, #2
 800a336:	e02d      	b.n	800a394 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	2201      	movs	r2, #1
 800a33c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	2224      	movs	r2, #36	; 0x24
 800a344:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	681a      	ldr	r2, [r3, #0]
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	f022 0201 	bic.w	r2, r2, #1
 800a35e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	689b      	ldr	r3, [r3, #8]
 800a366:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	683a      	ldr	r2, [r7, #0]
 800a370:	430a      	orrs	r2, r1
 800a372:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a374:	6878      	ldr	r0, [r7, #4]
 800a376:	f000 f84f 	bl	800a418 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	68fa      	ldr	r2, [r7, #12]
 800a380:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	2220      	movs	r2, #32
 800a386:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	2200      	movs	r2, #0
 800a38e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a392:	2300      	movs	r3, #0
}
 800a394:	4618      	mov	r0, r3
 800a396:	3710      	adds	r7, #16
 800a398:	46bd      	mov	sp, r7
 800a39a:	bd80      	pop	{r7, pc}

0800a39c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a39c:	b580      	push	{r7, lr}
 800a39e:	b084      	sub	sp, #16
 800a3a0:	af00      	add	r7, sp, #0
 800a3a2:	6078      	str	r0, [r7, #4]
 800a3a4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a3ac:	2b01      	cmp	r3, #1
 800a3ae:	d101      	bne.n	800a3b4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a3b0:	2302      	movs	r3, #2
 800a3b2:	e02d      	b.n	800a410 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	2201      	movs	r2, #1
 800a3b8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	2224      	movs	r2, #36	; 0x24
 800a3c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	681a      	ldr	r2, [r3, #0]
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	f022 0201 	bic.w	r2, r2, #1
 800a3da:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	689b      	ldr	r3, [r3, #8]
 800a3e2:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	683a      	ldr	r2, [r7, #0]
 800a3ec:	430a      	orrs	r2, r1
 800a3ee:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a3f0:	6878      	ldr	r0, [r7, #4]
 800a3f2:	f000 f811 	bl	800a418 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	68fa      	ldr	r2, [r7, #12]
 800a3fc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	2220      	movs	r2, #32
 800a402:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	2200      	movs	r2, #0
 800a40a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a40e:	2300      	movs	r3, #0
}
 800a410:	4618      	mov	r0, r3
 800a412:	3710      	adds	r7, #16
 800a414:	46bd      	mov	sp, r7
 800a416:	bd80      	pop	{r7, pc}

0800a418 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a418:	b480      	push	{r7}
 800a41a:	b085      	sub	sp, #20
 800a41c:	af00      	add	r7, sp, #0
 800a41e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a424:	2b00      	cmp	r3, #0
 800a426:	d108      	bne.n	800a43a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	2201      	movs	r2, #1
 800a42c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	2201      	movs	r2, #1
 800a434:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a438:	e031      	b.n	800a49e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a43a:	2308      	movs	r3, #8
 800a43c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a43e:	2308      	movs	r3, #8
 800a440:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	689b      	ldr	r3, [r3, #8]
 800a448:	0e5b      	lsrs	r3, r3, #25
 800a44a:	b2db      	uxtb	r3, r3
 800a44c:	f003 0307 	and.w	r3, r3, #7
 800a450:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	689b      	ldr	r3, [r3, #8]
 800a458:	0f5b      	lsrs	r3, r3, #29
 800a45a:	b2db      	uxtb	r3, r3
 800a45c:	f003 0307 	and.w	r3, r3, #7
 800a460:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a462:	7bbb      	ldrb	r3, [r7, #14]
 800a464:	7b3a      	ldrb	r2, [r7, #12]
 800a466:	4911      	ldr	r1, [pc, #68]	; (800a4ac <UARTEx_SetNbDataToProcess+0x94>)
 800a468:	5c8a      	ldrb	r2, [r1, r2]
 800a46a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a46e:	7b3a      	ldrb	r2, [r7, #12]
 800a470:	490f      	ldr	r1, [pc, #60]	; (800a4b0 <UARTEx_SetNbDataToProcess+0x98>)
 800a472:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a474:	fb93 f3f2 	sdiv	r3, r3, r2
 800a478:	b29a      	uxth	r2, r3
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a480:	7bfb      	ldrb	r3, [r7, #15]
 800a482:	7b7a      	ldrb	r2, [r7, #13]
 800a484:	4909      	ldr	r1, [pc, #36]	; (800a4ac <UARTEx_SetNbDataToProcess+0x94>)
 800a486:	5c8a      	ldrb	r2, [r1, r2]
 800a488:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a48c:	7b7a      	ldrb	r2, [r7, #13]
 800a48e:	4908      	ldr	r1, [pc, #32]	; (800a4b0 <UARTEx_SetNbDataToProcess+0x98>)
 800a490:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a492:	fb93 f3f2 	sdiv	r3, r3, r2
 800a496:	b29a      	uxth	r2, r3
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800a49e:	bf00      	nop
 800a4a0:	3714      	adds	r7, #20
 800a4a2:	46bd      	mov	sp, r7
 800a4a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4a8:	4770      	bx	lr
 800a4aa:	bf00      	nop
 800a4ac:	08013bd0 	.word	0x08013bd0
 800a4b0:	08013bd8 	.word	0x08013bd8

0800a4b4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800a4b4:	b480      	push	{r7}
 800a4b6:	b085      	sub	sp, #20
 800a4b8:	af00      	add	r7, sp, #0
 800a4ba:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	2200      	movs	r2, #0
 800a4c0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800a4c4:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800a4c8:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	b29a      	uxth	r2, r3
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800a4d4:	2300      	movs	r3, #0
}
 800a4d6:	4618      	mov	r0, r3
 800a4d8:	3714      	adds	r7, #20
 800a4da:	46bd      	mov	sp, r7
 800a4dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4e0:	4770      	bx	lr

0800a4e2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800a4e2:	b480      	push	{r7}
 800a4e4:	b085      	sub	sp, #20
 800a4e6:	af00      	add	r7, sp, #0
 800a4e8:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800a4ea:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800a4ee:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800a4f6:	b29a      	uxth	r2, r3
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	b29b      	uxth	r3, r3
 800a4fc:	43db      	mvns	r3, r3
 800a4fe:	b29b      	uxth	r3, r3
 800a500:	4013      	ands	r3, r2
 800a502:	b29a      	uxth	r2, r3
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800a50a:	2300      	movs	r3, #0
}
 800a50c:	4618      	mov	r0, r3
 800a50e:	3714      	adds	r7, #20
 800a510:	46bd      	mov	sp, r7
 800a512:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a516:	4770      	bx	lr

0800a518 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800a518:	b084      	sub	sp, #16
 800a51a:	b480      	push	{r7}
 800a51c:	b083      	sub	sp, #12
 800a51e:	af00      	add	r7, sp, #0
 800a520:	6078      	str	r0, [r7, #4]
 800a522:	f107 0014 	add.w	r0, r7, #20
 800a526:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	2201      	movs	r2, #1
 800a52e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	2200      	movs	r2, #0
 800a536:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	2200      	movs	r2, #0
 800a53e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	2200      	movs	r2, #0
 800a546:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800a54a:	2300      	movs	r3, #0
}
 800a54c:	4618      	mov	r0, r3
 800a54e:	370c      	adds	r7, #12
 800a550:	46bd      	mov	sp, r7
 800a552:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a556:	b004      	add	sp, #16
 800a558:	4770      	bx	lr
	...

0800a55c <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a55c:	b480      	push	{r7}
 800a55e:	b09d      	sub	sp, #116	; 0x74
 800a560:	af00      	add	r7, sp, #0
 800a562:	6078      	str	r0, [r7, #4]
 800a564:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800a566:	2300      	movs	r3, #0
 800a568:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800a56c:	687a      	ldr	r2, [r7, #4]
 800a56e:	683b      	ldr	r3, [r7, #0]
 800a570:	781b      	ldrb	r3, [r3, #0]
 800a572:	009b      	lsls	r3, r3, #2
 800a574:	4413      	add	r3, r2
 800a576:	881b      	ldrh	r3, [r3, #0]
 800a578:	b29b      	uxth	r3, r3
 800a57a:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800a57e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a582:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800a586:	683b      	ldr	r3, [r7, #0]
 800a588:	78db      	ldrb	r3, [r3, #3]
 800a58a:	2b03      	cmp	r3, #3
 800a58c:	d81f      	bhi.n	800a5ce <USB_ActivateEndpoint+0x72>
 800a58e:	a201      	add	r2, pc, #4	; (adr r2, 800a594 <USB_ActivateEndpoint+0x38>)
 800a590:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a594:	0800a5a5 	.word	0x0800a5a5
 800a598:	0800a5c1 	.word	0x0800a5c1
 800a59c:	0800a5d7 	.word	0x0800a5d7
 800a5a0:	0800a5b3 	.word	0x0800a5b3
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800a5a4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800a5a8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a5ac:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800a5b0:	e012      	b.n	800a5d8 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800a5b2:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800a5b6:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800a5ba:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800a5be:	e00b      	b.n	800a5d8 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800a5c0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800a5c4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a5c8:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800a5cc:	e004      	b.n	800a5d8 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800a5ce:	2301      	movs	r3, #1
 800a5d0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 800a5d4:	e000      	b.n	800a5d8 <USB_ActivateEndpoint+0x7c>
      break;
 800a5d6:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800a5d8:	687a      	ldr	r2, [r7, #4]
 800a5da:	683b      	ldr	r3, [r7, #0]
 800a5dc:	781b      	ldrb	r3, [r3, #0]
 800a5de:	009b      	lsls	r3, r3, #2
 800a5e0:	441a      	add	r2, r3
 800a5e2:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800a5e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a5ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a5ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a5f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a5f6:	b29b      	uxth	r3, r3
 800a5f8:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800a5fa:	687a      	ldr	r2, [r7, #4]
 800a5fc:	683b      	ldr	r3, [r7, #0]
 800a5fe:	781b      	ldrb	r3, [r3, #0]
 800a600:	009b      	lsls	r3, r3, #2
 800a602:	4413      	add	r3, r2
 800a604:	881b      	ldrh	r3, [r3, #0]
 800a606:	b29b      	uxth	r3, r3
 800a608:	b21b      	sxth	r3, r3
 800a60a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a60e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a612:	b21a      	sxth	r2, r3
 800a614:	683b      	ldr	r3, [r7, #0]
 800a616:	781b      	ldrb	r3, [r3, #0]
 800a618:	b21b      	sxth	r3, r3
 800a61a:	4313      	orrs	r3, r2
 800a61c:	b21b      	sxth	r3, r3
 800a61e:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 800a622:	687a      	ldr	r2, [r7, #4]
 800a624:	683b      	ldr	r3, [r7, #0]
 800a626:	781b      	ldrb	r3, [r3, #0]
 800a628:	009b      	lsls	r3, r3, #2
 800a62a:	441a      	add	r2, r3
 800a62c:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800a630:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a634:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a638:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a63c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a640:	b29b      	uxth	r3, r3
 800a642:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800a644:	683b      	ldr	r3, [r7, #0]
 800a646:	7b1b      	ldrb	r3, [r3, #12]
 800a648:	2b00      	cmp	r3, #0
 800a64a:	f040 8149 	bne.w	800a8e0 <USB_ActivateEndpoint+0x384>
  {
    if (ep->is_in != 0U)
 800a64e:	683b      	ldr	r3, [r7, #0]
 800a650:	785b      	ldrb	r3, [r3, #1]
 800a652:	2b00      	cmp	r3, #0
 800a654:	f000 8084 	beq.w	800a760 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	61bb      	str	r3, [r7, #24]
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a662:	b29b      	uxth	r3, r3
 800a664:	461a      	mov	r2, r3
 800a666:	69bb      	ldr	r3, [r7, #24]
 800a668:	4413      	add	r3, r2
 800a66a:	61bb      	str	r3, [r7, #24]
 800a66c:	683b      	ldr	r3, [r7, #0]
 800a66e:	781b      	ldrb	r3, [r3, #0]
 800a670:	00da      	lsls	r2, r3, #3
 800a672:	69bb      	ldr	r3, [r7, #24]
 800a674:	4413      	add	r3, r2
 800a676:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a67a:	617b      	str	r3, [r7, #20]
 800a67c:	683b      	ldr	r3, [r7, #0]
 800a67e:	88db      	ldrh	r3, [r3, #6]
 800a680:	085b      	lsrs	r3, r3, #1
 800a682:	b29b      	uxth	r3, r3
 800a684:	005b      	lsls	r3, r3, #1
 800a686:	b29a      	uxth	r2, r3
 800a688:	697b      	ldr	r3, [r7, #20]
 800a68a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a68c:	687a      	ldr	r2, [r7, #4]
 800a68e:	683b      	ldr	r3, [r7, #0]
 800a690:	781b      	ldrb	r3, [r3, #0]
 800a692:	009b      	lsls	r3, r3, #2
 800a694:	4413      	add	r3, r2
 800a696:	881b      	ldrh	r3, [r3, #0]
 800a698:	827b      	strh	r3, [r7, #18]
 800a69a:	8a7b      	ldrh	r3, [r7, #18]
 800a69c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	d01b      	beq.n	800a6dc <USB_ActivateEndpoint+0x180>
 800a6a4:	687a      	ldr	r2, [r7, #4]
 800a6a6:	683b      	ldr	r3, [r7, #0]
 800a6a8:	781b      	ldrb	r3, [r3, #0]
 800a6aa:	009b      	lsls	r3, r3, #2
 800a6ac:	4413      	add	r3, r2
 800a6ae:	881b      	ldrh	r3, [r3, #0]
 800a6b0:	b29b      	uxth	r3, r3
 800a6b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a6b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a6ba:	823b      	strh	r3, [r7, #16]
 800a6bc:	687a      	ldr	r2, [r7, #4]
 800a6be:	683b      	ldr	r3, [r7, #0]
 800a6c0:	781b      	ldrb	r3, [r3, #0]
 800a6c2:	009b      	lsls	r3, r3, #2
 800a6c4:	441a      	add	r2, r3
 800a6c6:	8a3b      	ldrh	r3, [r7, #16]
 800a6c8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a6cc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a6d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a6d4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a6d8:	b29b      	uxth	r3, r3
 800a6da:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800a6dc:	683b      	ldr	r3, [r7, #0]
 800a6de:	78db      	ldrb	r3, [r3, #3]
 800a6e0:	2b01      	cmp	r3, #1
 800a6e2:	d020      	beq.n	800a726 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800a6e4:	687a      	ldr	r2, [r7, #4]
 800a6e6:	683b      	ldr	r3, [r7, #0]
 800a6e8:	781b      	ldrb	r3, [r3, #0]
 800a6ea:	009b      	lsls	r3, r3, #2
 800a6ec:	4413      	add	r3, r2
 800a6ee:	881b      	ldrh	r3, [r3, #0]
 800a6f0:	b29b      	uxth	r3, r3
 800a6f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a6f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a6fa:	81bb      	strh	r3, [r7, #12]
 800a6fc:	89bb      	ldrh	r3, [r7, #12]
 800a6fe:	f083 0320 	eor.w	r3, r3, #32
 800a702:	81bb      	strh	r3, [r7, #12]
 800a704:	687a      	ldr	r2, [r7, #4]
 800a706:	683b      	ldr	r3, [r7, #0]
 800a708:	781b      	ldrb	r3, [r3, #0]
 800a70a:	009b      	lsls	r3, r3, #2
 800a70c:	441a      	add	r2, r3
 800a70e:	89bb      	ldrh	r3, [r7, #12]
 800a710:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a714:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a718:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a71c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a720:	b29b      	uxth	r3, r3
 800a722:	8013      	strh	r3, [r2, #0]
 800a724:	e2a6      	b.n	800ac74 <USB_ActivateEndpoint+0x718>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a726:	687a      	ldr	r2, [r7, #4]
 800a728:	683b      	ldr	r3, [r7, #0]
 800a72a:	781b      	ldrb	r3, [r3, #0]
 800a72c:	009b      	lsls	r3, r3, #2
 800a72e:	4413      	add	r3, r2
 800a730:	881b      	ldrh	r3, [r3, #0]
 800a732:	b29b      	uxth	r3, r3
 800a734:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a738:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a73c:	81fb      	strh	r3, [r7, #14]
 800a73e:	687a      	ldr	r2, [r7, #4]
 800a740:	683b      	ldr	r3, [r7, #0]
 800a742:	781b      	ldrb	r3, [r3, #0]
 800a744:	009b      	lsls	r3, r3, #2
 800a746:	441a      	add	r2, r3
 800a748:	89fb      	ldrh	r3, [r7, #14]
 800a74a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a74e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a752:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a756:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a75a:	b29b      	uxth	r3, r3
 800a75c:	8013      	strh	r3, [r2, #0]
 800a75e:	e289      	b.n	800ac74 <USB_ActivateEndpoint+0x718>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	633b      	str	r3, [r7, #48]	; 0x30
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a76a:	b29b      	uxth	r3, r3
 800a76c:	461a      	mov	r2, r3
 800a76e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a770:	4413      	add	r3, r2
 800a772:	633b      	str	r3, [r7, #48]	; 0x30
 800a774:	683b      	ldr	r3, [r7, #0]
 800a776:	781b      	ldrb	r3, [r3, #0]
 800a778:	00da      	lsls	r2, r3, #3
 800a77a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a77c:	4413      	add	r3, r2
 800a77e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800a782:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a784:	683b      	ldr	r3, [r7, #0]
 800a786:	88db      	ldrh	r3, [r3, #6]
 800a788:	085b      	lsrs	r3, r3, #1
 800a78a:	b29b      	uxth	r3, r3
 800a78c:	005b      	lsls	r3, r3, #1
 800a78e:	b29a      	uxth	r2, r3
 800a790:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a792:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	62bb      	str	r3, [r7, #40]	; 0x28
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a79e:	b29b      	uxth	r3, r3
 800a7a0:	461a      	mov	r2, r3
 800a7a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7a4:	4413      	add	r3, r2
 800a7a6:	62bb      	str	r3, [r7, #40]	; 0x28
 800a7a8:	683b      	ldr	r3, [r7, #0]
 800a7aa:	781b      	ldrb	r3, [r3, #0]
 800a7ac:	00da      	lsls	r2, r3, #3
 800a7ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7b0:	4413      	add	r3, r2
 800a7b2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a7b6:	627b      	str	r3, [r7, #36]	; 0x24
 800a7b8:	683b      	ldr	r3, [r7, #0]
 800a7ba:	691b      	ldr	r3, [r3, #16]
 800a7bc:	2b3e      	cmp	r3, #62	; 0x3e
 800a7be:	d918      	bls.n	800a7f2 <USB_ActivateEndpoint+0x296>
 800a7c0:	683b      	ldr	r3, [r7, #0]
 800a7c2:	691b      	ldr	r3, [r3, #16]
 800a7c4:	095b      	lsrs	r3, r3, #5
 800a7c6:	66bb      	str	r3, [r7, #104]	; 0x68
 800a7c8:	683b      	ldr	r3, [r7, #0]
 800a7ca:	691b      	ldr	r3, [r3, #16]
 800a7cc:	f003 031f 	and.w	r3, r3, #31
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	d102      	bne.n	800a7da <USB_ActivateEndpoint+0x27e>
 800a7d4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a7d6:	3b01      	subs	r3, #1
 800a7d8:	66bb      	str	r3, [r7, #104]	; 0x68
 800a7da:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a7dc:	b29b      	uxth	r3, r3
 800a7de:	029b      	lsls	r3, r3, #10
 800a7e0:	b29b      	uxth	r3, r3
 800a7e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a7e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a7ea:	b29a      	uxth	r2, r3
 800a7ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7ee:	801a      	strh	r2, [r3, #0]
 800a7f0:	e029      	b.n	800a846 <USB_ActivateEndpoint+0x2ea>
 800a7f2:	683b      	ldr	r3, [r7, #0]
 800a7f4:	691b      	ldr	r3, [r3, #16]
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	d112      	bne.n	800a820 <USB_ActivateEndpoint+0x2c4>
 800a7fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7fc:	881b      	ldrh	r3, [r3, #0]
 800a7fe:	b29b      	uxth	r3, r3
 800a800:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a804:	b29a      	uxth	r2, r3
 800a806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a808:	801a      	strh	r2, [r3, #0]
 800a80a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a80c:	881b      	ldrh	r3, [r3, #0]
 800a80e:	b29b      	uxth	r3, r3
 800a810:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a814:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a818:	b29a      	uxth	r2, r3
 800a81a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a81c:	801a      	strh	r2, [r3, #0]
 800a81e:	e012      	b.n	800a846 <USB_ActivateEndpoint+0x2ea>
 800a820:	683b      	ldr	r3, [r7, #0]
 800a822:	691b      	ldr	r3, [r3, #16]
 800a824:	085b      	lsrs	r3, r3, #1
 800a826:	66bb      	str	r3, [r7, #104]	; 0x68
 800a828:	683b      	ldr	r3, [r7, #0]
 800a82a:	691b      	ldr	r3, [r3, #16]
 800a82c:	f003 0301 	and.w	r3, r3, #1
 800a830:	2b00      	cmp	r3, #0
 800a832:	d002      	beq.n	800a83a <USB_ActivateEndpoint+0x2de>
 800a834:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a836:	3301      	adds	r3, #1
 800a838:	66bb      	str	r3, [r7, #104]	; 0x68
 800a83a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a83c:	b29b      	uxth	r3, r3
 800a83e:	029b      	lsls	r3, r3, #10
 800a840:	b29a      	uxth	r2, r3
 800a842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a844:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a846:	687a      	ldr	r2, [r7, #4]
 800a848:	683b      	ldr	r3, [r7, #0]
 800a84a:	781b      	ldrb	r3, [r3, #0]
 800a84c:	009b      	lsls	r3, r3, #2
 800a84e:	4413      	add	r3, r2
 800a850:	881b      	ldrh	r3, [r3, #0]
 800a852:	847b      	strh	r3, [r7, #34]	; 0x22
 800a854:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a856:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	d01b      	beq.n	800a896 <USB_ActivateEndpoint+0x33a>
 800a85e:	687a      	ldr	r2, [r7, #4]
 800a860:	683b      	ldr	r3, [r7, #0]
 800a862:	781b      	ldrb	r3, [r3, #0]
 800a864:	009b      	lsls	r3, r3, #2
 800a866:	4413      	add	r3, r2
 800a868:	881b      	ldrh	r3, [r3, #0]
 800a86a:	b29b      	uxth	r3, r3
 800a86c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a870:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a874:	843b      	strh	r3, [r7, #32]
 800a876:	687a      	ldr	r2, [r7, #4]
 800a878:	683b      	ldr	r3, [r7, #0]
 800a87a:	781b      	ldrb	r3, [r3, #0]
 800a87c:	009b      	lsls	r3, r3, #2
 800a87e:	441a      	add	r2, r3
 800a880:	8c3b      	ldrh	r3, [r7, #32]
 800a882:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a886:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a88a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a88e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a892:	b29b      	uxth	r3, r3
 800a894:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a896:	687a      	ldr	r2, [r7, #4]
 800a898:	683b      	ldr	r3, [r7, #0]
 800a89a:	781b      	ldrb	r3, [r3, #0]
 800a89c:	009b      	lsls	r3, r3, #2
 800a89e:	4413      	add	r3, r2
 800a8a0:	881b      	ldrh	r3, [r3, #0]
 800a8a2:	b29b      	uxth	r3, r3
 800a8a4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a8a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a8ac:	83fb      	strh	r3, [r7, #30]
 800a8ae:	8bfb      	ldrh	r3, [r7, #30]
 800a8b0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800a8b4:	83fb      	strh	r3, [r7, #30]
 800a8b6:	8bfb      	ldrh	r3, [r7, #30]
 800a8b8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800a8bc:	83fb      	strh	r3, [r7, #30]
 800a8be:	687a      	ldr	r2, [r7, #4]
 800a8c0:	683b      	ldr	r3, [r7, #0]
 800a8c2:	781b      	ldrb	r3, [r3, #0]
 800a8c4:	009b      	lsls	r3, r3, #2
 800a8c6:	441a      	add	r2, r3
 800a8c8:	8bfb      	ldrh	r3, [r7, #30]
 800a8ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a8ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a8d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a8d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a8da:	b29b      	uxth	r3, r3
 800a8dc:	8013      	strh	r3, [r2, #0]
 800a8de:	e1c9      	b.n	800ac74 <USB_ActivateEndpoint+0x718>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800a8e0:	683b      	ldr	r3, [r7, #0]
 800a8e2:	78db      	ldrb	r3, [r3, #3]
 800a8e4:	2b02      	cmp	r3, #2
 800a8e6:	d11e      	bne.n	800a926 <USB_ActivateEndpoint+0x3ca>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800a8e8:	687a      	ldr	r2, [r7, #4]
 800a8ea:	683b      	ldr	r3, [r7, #0]
 800a8ec:	781b      	ldrb	r3, [r3, #0]
 800a8ee:	009b      	lsls	r3, r3, #2
 800a8f0:	4413      	add	r3, r2
 800a8f2:	881b      	ldrh	r3, [r3, #0]
 800a8f4:	b29b      	uxth	r3, r3
 800a8f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a8fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a8fe:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800a902:	687a      	ldr	r2, [r7, #4]
 800a904:	683b      	ldr	r3, [r7, #0]
 800a906:	781b      	ldrb	r3, [r3, #0]
 800a908:	009b      	lsls	r3, r3, #2
 800a90a:	441a      	add	r2, r3
 800a90c:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800a910:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a914:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a918:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800a91c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a920:	b29b      	uxth	r3, r3
 800a922:	8013      	strh	r3, [r2, #0]
 800a924:	e01d      	b.n	800a962 <USB_ActivateEndpoint+0x406>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800a926:	687a      	ldr	r2, [r7, #4]
 800a928:	683b      	ldr	r3, [r7, #0]
 800a92a:	781b      	ldrb	r3, [r3, #0]
 800a92c:	009b      	lsls	r3, r3, #2
 800a92e:	4413      	add	r3, r2
 800a930:	881b      	ldrh	r3, [r3, #0]
 800a932:	b29b      	uxth	r3, r3
 800a934:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800a938:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a93c:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 800a940:	687a      	ldr	r2, [r7, #4]
 800a942:	683b      	ldr	r3, [r7, #0]
 800a944:	781b      	ldrb	r3, [r3, #0]
 800a946:	009b      	lsls	r3, r3, #2
 800a948:	441a      	add	r2, r3
 800a94a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800a94e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a952:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a956:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a95a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a95e:	b29b      	uxth	r3, r3
 800a960:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a96c:	b29b      	uxth	r3, r3
 800a96e:	461a      	mov	r2, r3
 800a970:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a972:	4413      	add	r3, r2
 800a974:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a976:	683b      	ldr	r3, [r7, #0]
 800a978:	781b      	ldrb	r3, [r3, #0]
 800a97a:	00da      	lsls	r2, r3, #3
 800a97c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a97e:	4413      	add	r3, r2
 800a980:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a984:	65bb      	str	r3, [r7, #88]	; 0x58
 800a986:	683b      	ldr	r3, [r7, #0]
 800a988:	891b      	ldrh	r3, [r3, #8]
 800a98a:	085b      	lsrs	r3, r3, #1
 800a98c:	b29b      	uxth	r3, r3
 800a98e:	005b      	lsls	r3, r3, #1
 800a990:	b29a      	uxth	r2, r3
 800a992:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a994:	801a      	strh	r2, [r3, #0]
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	657b      	str	r3, [r7, #84]	; 0x54
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a9a0:	b29b      	uxth	r3, r3
 800a9a2:	461a      	mov	r2, r3
 800a9a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a9a6:	4413      	add	r3, r2
 800a9a8:	657b      	str	r3, [r7, #84]	; 0x54
 800a9aa:	683b      	ldr	r3, [r7, #0]
 800a9ac:	781b      	ldrb	r3, [r3, #0]
 800a9ae:	00da      	lsls	r2, r3, #3
 800a9b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a9b2:	4413      	add	r3, r2
 800a9b4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800a9b8:	653b      	str	r3, [r7, #80]	; 0x50
 800a9ba:	683b      	ldr	r3, [r7, #0]
 800a9bc:	895b      	ldrh	r3, [r3, #10]
 800a9be:	085b      	lsrs	r3, r3, #1
 800a9c0:	b29b      	uxth	r3, r3
 800a9c2:	005b      	lsls	r3, r3, #1
 800a9c4:	b29a      	uxth	r2, r3
 800a9c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a9c8:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800a9ca:	683b      	ldr	r3, [r7, #0]
 800a9cc:	785b      	ldrb	r3, [r3, #1]
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	f040 8093 	bne.w	800aafa <USB_ActivateEndpoint+0x59e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a9d4:	687a      	ldr	r2, [r7, #4]
 800a9d6:	683b      	ldr	r3, [r7, #0]
 800a9d8:	781b      	ldrb	r3, [r3, #0]
 800a9da:	009b      	lsls	r3, r3, #2
 800a9dc:	4413      	add	r3, r2
 800a9de:	881b      	ldrh	r3, [r3, #0]
 800a9e0:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800a9e4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800a9e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	d01b      	beq.n	800aa28 <USB_ActivateEndpoint+0x4cc>
 800a9f0:	687a      	ldr	r2, [r7, #4]
 800a9f2:	683b      	ldr	r3, [r7, #0]
 800a9f4:	781b      	ldrb	r3, [r3, #0]
 800a9f6:	009b      	lsls	r3, r3, #2
 800a9f8:	4413      	add	r3, r2
 800a9fa:	881b      	ldrh	r3, [r3, #0]
 800a9fc:	b29b      	uxth	r3, r3
 800a9fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800aa02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aa06:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800aa08:	687a      	ldr	r2, [r7, #4]
 800aa0a:	683b      	ldr	r3, [r7, #0]
 800aa0c:	781b      	ldrb	r3, [r3, #0]
 800aa0e:	009b      	lsls	r3, r3, #2
 800aa10:	441a      	add	r2, r3
 800aa12:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800aa14:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800aa18:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800aa1c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800aa20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aa24:	b29b      	uxth	r3, r3
 800aa26:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800aa28:	687a      	ldr	r2, [r7, #4]
 800aa2a:	683b      	ldr	r3, [r7, #0]
 800aa2c:	781b      	ldrb	r3, [r3, #0]
 800aa2e:	009b      	lsls	r3, r3, #2
 800aa30:	4413      	add	r3, r2
 800aa32:	881b      	ldrh	r3, [r3, #0]
 800aa34:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800aa36:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800aa38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	d01b      	beq.n	800aa78 <USB_ActivateEndpoint+0x51c>
 800aa40:	687a      	ldr	r2, [r7, #4]
 800aa42:	683b      	ldr	r3, [r7, #0]
 800aa44:	781b      	ldrb	r3, [r3, #0]
 800aa46:	009b      	lsls	r3, r3, #2
 800aa48:	4413      	add	r3, r2
 800aa4a:	881b      	ldrh	r3, [r3, #0]
 800aa4c:	b29b      	uxth	r3, r3
 800aa4e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800aa52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aa56:	877b      	strh	r3, [r7, #58]	; 0x3a
 800aa58:	687a      	ldr	r2, [r7, #4]
 800aa5a:	683b      	ldr	r3, [r7, #0]
 800aa5c:	781b      	ldrb	r3, [r3, #0]
 800aa5e:	009b      	lsls	r3, r3, #2
 800aa60:	441a      	add	r2, r3
 800aa62:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800aa64:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800aa68:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800aa6c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800aa70:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800aa74:	b29b      	uxth	r3, r3
 800aa76:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800aa78:	687a      	ldr	r2, [r7, #4]
 800aa7a:	683b      	ldr	r3, [r7, #0]
 800aa7c:	781b      	ldrb	r3, [r3, #0]
 800aa7e:	009b      	lsls	r3, r3, #2
 800aa80:	4413      	add	r3, r2
 800aa82:	881b      	ldrh	r3, [r3, #0]
 800aa84:	b29b      	uxth	r3, r3
 800aa86:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800aa8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aa8e:	873b      	strh	r3, [r7, #56]	; 0x38
 800aa90:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800aa92:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800aa96:	873b      	strh	r3, [r7, #56]	; 0x38
 800aa98:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800aa9a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800aa9e:	873b      	strh	r3, [r7, #56]	; 0x38
 800aaa0:	687a      	ldr	r2, [r7, #4]
 800aaa2:	683b      	ldr	r3, [r7, #0]
 800aaa4:	781b      	ldrb	r3, [r3, #0]
 800aaa6:	009b      	lsls	r3, r3, #2
 800aaa8:	441a      	add	r2, r3
 800aaaa:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800aaac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800aab0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800aab4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800aab8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aabc:	b29b      	uxth	r3, r3
 800aabe:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800aac0:	687a      	ldr	r2, [r7, #4]
 800aac2:	683b      	ldr	r3, [r7, #0]
 800aac4:	781b      	ldrb	r3, [r3, #0]
 800aac6:	009b      	lsls	r3, r3, #2
 800aac8:	4413      	add	r3, r2
 800aaca:	881b      	ldrh	r3, [r3, #0]
 800aacc:	b29b      	uxth	r3, r3
 800aace:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800aad2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800aad6:	86fb      	strh	r3, [r7, #54]	; 0x36
 800aad8:	687a      	ldr	r2, [r7, #4]
 800aada:	683b      	ldr	r3, [r7, #0]
 800aadc:	781b      	ldrb	r3, [r3, #0]
 800aade:	009b      	lsls	r3, r3, #2
 800aae0:	441a      	add	r2, r3
 800aae2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800aae4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800aae8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800aaec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800aaf0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aaf4:	b29b      	uxth	r3, r3
 800aaf6:	8013      	strh	r3, [r2, #0]
 800aaf8:	e0bc      	b.n	800ac74 <USB_ActivateEndpoint+0x718>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800aafa:	687a      	ldr	r2, [r7, #4]
 800aafc:	683b      	ldr	r3, [r7, #0]
 800aafe:	781b      	ldrb	r3, [r3, #0]
 800ab00:	009b      	lsls	r3, r3, #2
 800ab02:	4413      	add	r3, r2
 800ab04:	881b      	ldrh	r3, [r3, #0]
 800ab06:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800ab0a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800ab0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	d01d      	beq.n	800ab52 <USB_ActivateEndpoint+0x5f6>
 800ab16:	687a      	ldr	r2, [r7, #4]
 800ab18:	683b      	ldr	r3, [r7, #0]
 800ab1a:	781b      	ldrb	r3, [r3, #0]
 800ab1c:	009b      	lsls	r3, r3, #2
 800ab1e:	4413      	add	r3, r2
 800ab20:	881b      	ldrh	r3, [r3, #0]
 800ab22:	b29b      	uxth	r3, r3
 800ab24:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ab28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ab2c:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800ab30:	687a      	ldr	r2, [r7, #4]
 800ab32:	683b      	ldr	r3, [r7, #0]
 800ab34:	781b      	ldrb	r3, [r3, #0]
 800ab36:	009b      	lsls	r3, r3, #2
 800ab38:	441a      	add	r2, r3
 800ab3a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800ab3e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ab42:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ab46:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800ab4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ab4e:	b29b      	uxth	r3, r3
 800ab50:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800ab52:	687a      	ldr	r2, [r7, #4]
 800ab54:	683b      	ldr	r3, [r7, #0]
 800ab56:	781b      	ldrb	r3, [r3, #0]
 800ab58:	009b      	lsls	r3, r3, #2
 800ab5a:	4413      	add	r3, r2
 800ab5c:	881b      	ldrh	r3, [r3, #0]
 800ab5e:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800ab62:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800ab66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ab6a:	2b00      	cmp	r3, #0
 800ab6c:	d01d      	beq.n	800abaa <USB_ActivateEndpoint+0x64e>
 800ab6e:	687a      	ldr	r2, [r7, #4]
 800ab70:	683b      	ldr	r3, [r7, #0]
 800ab72:	781b      	ldrb	r3, [r3, #0]
 800ab74:	009b      	lsls	r3, r3, #2
 800ab76:	4413      	add	r3, r2
 800ab78:	881b      	ldrh	r3, [r3, #0]
 800ab7a:	b29b      	uxth	r3, r3
 800ab7c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ab80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ab84:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800ab88:	687a      	ldr	r2, [r7, #4]
 800ab8a:	683b      	ldr	r3, [r7, #0]
 800ab8c:	781b      	ldrb	r3, [r3, #0]
 800ab8e:	009b      	lsls	r3, r3, #2
 800ab90:	441a      	add	r2, r3
 800ab92:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800ab96:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ab9a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ab9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800aba2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800aba6:	b29b      	uxth	r3, r3
 800aba8:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800abaa:	683b      	ldr	r3, [r7, #0]
 800abac:	78db      	ldrb	r3, [r3, #3]
 800abae:	2b01      	cmp	r3, #1
 800abb0:	d024      	beq.n	800abfc <USB_ActivateEndpoint+0x6a0>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800abb2:	687a      	ldr	r2, [r7, #4]
 800abb4:	683b      	ldr	r3, [r7, #0]
 800abb6:	781b      	ldrb	r3, [r3, #0]
 800abb8:	009b      	lsls	r3, r3, #2
 800abba:	4413      	add	r3, r2
 800abbc:	881b      	ldrh	r3, [r3, #0]
 800abbe:	b29b      	uxth	r3, r3
 800abc0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800abc4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800abc8:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800abcc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800abd0:	f083 0320 	eor.w	r3, r3, #32
 800abd4:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800abd8:	687a      	ldr	r2, [r7, #4]
 800abda:	683b      	ldr	r3, [r7, #0]
 800abdc:	781b      	ldrb	r3, [r3, #0]
 800abde:	009b      	lsls	r3, r3, #2
 800abe0:	441a      	add	r2, r3
 800abe2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800abe6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800abea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800abee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800abf2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800abf6:	b29b      	uxth	r3, r3
 800abf8:	8013      	strh	r3, [r2, #0]
 800abfa:	e01d      	b.n	800ac38 <USB_ActivateEndpoint+0x6dc>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800abfc:	687a      	ldr	r2, [r7, #4]
 800abfe:	683b      	ldr	r3, [r7, #0]
 800ac00:	781b      	ldrb	r3, [r3, #0]
 800ac02:	009b      	lsls	r3, r3, #2
 800ac04:	4413      	add	r3, r2
 800ac06:	881b      	ldrh	r3, [r3, #0]
 800ac08:	b29b      	uxth	r3, r3
 800ac0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ac0e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ac12:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800ac16:	687a      	ldr	r2, [r7, #4]
 800ac18:	683b      	ldr	r3, [r7, #0]
 800ac1a:	781b      	ldrb	r3, [r3, #0]
 800ac1c:	009b      	lsls	r3, r3, #2
 800ac1e:	441a      	add	r2, r3
 800ac20:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800ac24:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ac28:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ac2c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ac30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ac34:	b29b      	uxth	r3, r3
 800ac36:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800ac38:	687a      	ldr	r2, [r7, #4]
 800ac3a:	683b      	ldr	r3, [r7, #0]
 800ac3c:	781b      	ldrb	r3, [r3, #0]
 800ac3e:	009b      	lsls	r3, r3, #2
 800ac40:	4413      	add	r3, r2
 800ac42:	881b      	ldrh	r3, [r3, #0]
 800ac44:	b29b      	uxth	r3, r3
 800ac46:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ac4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ac4e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800ac52:	687a      	ldr	r2, [r7, #4]
 800ac54:	683b      	ldr	r3, [r7, #0]
 800ac56:	781b      	ldrb	r3, [r3, #0]
 800ac58:	009b      	lsls	r3, r3, #2
 800ac5a:	441a      	add	r2, r3
 800ac5c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800ac60:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ac64:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ac68:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ac6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ac70:	b29b      	uxth	r3, r3
 800ac72:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800ac74:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 800ac78:	4618      	mov	r0, r3
 800ac7a:	3774      	adds	r7, #116	; 0x74
 800ac7c:	46bd      	mov	sp, r7
 800ac7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac82:	4770      	bx	lr

0800ac84 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800ac84:	b480      	push	{r7}
 800ac86:	b08d      	sub	sp, #52	; 0x34
 800ac88:	af00      	add	r7, sp, #0
 800ac8a:	6078      	str	r0, [r7, #4]
 800ac8c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800ac8e:	683b      	ldr	r3, [r7, #0]
 800ac90:	7b1b      	ldrb	r3, [r3, #12]
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	f040 808e 	bne.w	800adb4 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800ac98:	683b      	ldr	r3, [r7, #0]
 800ac9a:	785b      	ldrb	r3, [r3, #1]
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	d044      	beq.n	800ad2a <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800aca0:	687a      	ldr	r2, [r7, #4]
 800aca2:	683b      	ldr	r3, [r7, #0]
 800aca4:	781b      	ldrb	r3, [r3, #0]
 800aca6:	009b      	lsls	r3, r3, #2
 800aca8:	4413      	add	r3, r2
 800acaa:	881b      	ldrh	r3, [r3, #0]
 800acac:	81bb      	strh	r3, [r7, #12]
 800acae:	89bb      	ldrh	r3, [r7, #12]
 800acb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	d01b      	beq.n	800acf0 <USB_DeactivateEndpoint+0x6c>
 800acb8:	687a      	ldr	r2, [r7, #4]
 800acba:	683b      	ldr	r3, [r7, #0]
 800acbc:	781b      	ldrb	r3, [r3, #0]
 800acbe:	009b      	lsls	r3, r3, #2
 800acc0:	4413      	add	r3, r2
 800acc2:	881b      	ldrh	r3, [r3, #0]
 800acc4:	b29b      	uxth	r3, r3
 800acc6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800acca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800acce:	817b      	strh	r3, [r7, #10]
 800acd0:	687a      	ldr	r2, [r7, #4]
 800acd2:	683b      	ldr	r3, [r7, #0]
 800acd4:	781b      	ldrb	r3, [r3, #0]
 800acd6:	009b      	lsls	r3, r3, #2
 800acd8:	441a      	add	r2, r3
 800acda:	897b      	ldrh	r3, [r7, #10]
 800acdc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ace0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ace4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ace8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800acec:	b29b      	uxth	r3, r3
 800acee:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800acf0:	687a      	ldr	r2, [r7, #4]
 800acf2:	683b      	ldr	r3, [r7, #0]
 800acf4:	781b      	ldrb	r3, [r3, #0]
 800acf6:	009b      	lsls	r3, r3, #2
 800acf8:	4413      	add	r3, r2
 800acfa:	881b      	ldrh	r3, [r3, #0]
 800acfc:	b29b      	uxth	r3, r3
 800acfe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ad02:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ad06:	813b      	strh	r3, [r7, #8]
 800ad08:	687a      	ldr	r2, [r7, #4]
 800ad0a:	683b      	ldr	r3, [r7, #0]
 800ad0c:	781b      	ldrb	r3, [r3, #0]
 800ad0e:	009b      	lsls	r3, r3, #2
 800ad10:	441a      	add	r2, r3
 800ad12:	893b      	ldrh	r3, [r7, #8]
 800ad14:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ad18:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ad1c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ad20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ad24:	b29b      	uxth	r3, r3
 800ad26:	8013      	strh	r3, [r2, #0]
 800ad28:	e192      	b.n	800b050 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800ad2a:	687a      	ldr	r2, [r7, #4]
 800ad2c:	683b      	ldr	r3, [r7, #0]
 800ad2e:	781b      	ldrb	r3, [r3, #0]
 800ad30:	009b      	lsls	r3, r3, #2
 800ad32:	4413      	add	r3, r2
 800ad34:	881b      	ldrh	r3, [r3, #0]
 800ad36:	827b      	strh	r3, [r7, #18]
 800ad38:	8a7b      	ldrh	r3, [r7, #18]
 800ad3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	d01b      	beq.n	800ad7a <USB_DeactivateEndpoint+0xf6>
 800ad42:	687a      	ldr	r2, [r7, #4]
 800ad44:	683b      	ldr	r3, [r7, #0]
 800ad46:	781b      	ldrb	r3, [r3, #0]
 800ad48:	009b      	lsls	r3, r3, #2
 800ad4a:	4413      	add	r3, r2
 800ad4c:	881b      	ldrh	r3, [r3, #0]
 800ad4e:	b29b      	uxth	r3, r3
 800ad50:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ad54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ad58:	823b      	strh	r3, [r7, #16]
 800ad5a:	687a      	ldr	r2, [r7, #4]
 800ad5c:	683b      	ldr	r3, [r7, #0]
 800ad5e:	781b      	ldrb	r3, [r3, #0]
 800ad60:	009b      	lsls	r3, r3, #2
 800ad62:	441a      	add	r2, r3
 800ad64:	8a3b      	ldrh	r3, [r7, #16]
 800ad66:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ad6a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ad6e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800ad72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ad76:	b29b      	uxth	r3, r3
 800ad78:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800ad7a:	687a      	ldr	r2, [r7, #4]
 800ad7c:	683b      	ldr	r3, [r7, #0]
 800ad7e:	781b      	ldrb	r3, [r3, #0]
 800ad80:	009b      	lsls	r3, r3, #2
 800ad82:	4413      	add	r3, r2
 800ad84:	881b      	ldrh	r3, [r3, #0]
 800ad86:	b29b      	uxth	r3, r3
 800ad88:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ad8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ad90:	81fb      	strh	r3, [r7, #14]
 800ad92:	687a      	ldr	r2, [r7, #4]
 800ad94:	683b      	ldr	r3, [r7, #0]
 800ad96:	781b      	ldrb	r3, [r3, #0]
 800ad98:	009b      	lsls	r3, r3, #2
 800ad9a:	441a      	add	r2, r3
 800ad9c:	89fb      	ldrh	r3, [r7, #14]
 800ad9e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ada2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ada6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800adaa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800adae:	b29b      	uxth	r3, r3
 800adb0:	8013      	strh	r3, [r2, #0]
 800adb2:	e14d      	b.n	800b050 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800adb4:	683b      	ldr	r3, [r7, #0]
 800adb6:	785b      	ldrb	r3, [r3, #1]
 800adb8:	2b00      	cmp	r3, #0
 800adba:	f040 80a5 	bne.w	800af08 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800adbe:	687a      	ldr	r2, [r7, #4]
 800adc0:	683b      	ldr	r3, [r7, #0]
 800adc2:	781b      	ldrb	r3, [r3, #0]
 800adc4:	009b      	lsls	r3, r3, #2
 800adc6:	4413      	add	r3, r2
 800adc8:	881b      	ldrh	r3, [r3, #0]
 800adca:	843b      	strh	r3, [r7, #32]
 800adcc:	8c3b      	ldrh	r3, [r7, #32]
 800adce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800add2:	2b00      	cmp	r3, #0
 800add4:	d01b      	beq.n	800ae0e <USB_DeactivateEndpoint+0x18a>
 800add6:	687a      	ldr	r2, [r7, #4]
 800add8:	683b      	ldr	r3, [r7, #0]
 800adda:	781b      	ldrb	r3, [r3, #0]
 800addc:	009b      	lsls	r3, r3, #2
 800adde:	4413      	add	r3, r2
 800ade0:	881b      	ldrh	r3, [r3, #0]
 800ade2:	b29b      	uxth	r3, r3
 800ade4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ade8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800adec:	83fb      	strh	r3, [r7, #30]
 800adee:	687a      	ldr	r2, [r7, #4]
 800adf0:	683b      	ldr	r3, [r7, #0]
 800adf2:	781b      	ldrb	r3, [r3, #0]
 800adf4:	009b      	lsls	r3, r3, #2
 800adf6:	441a      	add	r2, r3
 800adf8:	8bfb      	ldrh	r3, [r7, #30]
 800adfa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800adfe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ae02:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800ae06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ae0a:	b29b      	uxth	r3, r3
 800ae0c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800ae0e:	687a      	ldr	r2, [r7, #4]
 800ae10:	683b      	ldr	r3, [r7, #0]
 800ae12:	781b      	ldrb	r3, [r3, #0]
 800ae14:	009b      	lsls	r3, r3, #2
 800ae16:	4413      	add	r3, r2
 800ae18:	881b      	ldrh	r3, [r3, #0]
 800ae1a:	83bb      	strh	r3, [r7, #28]
 800ae1c:	8bbb      	ldrh	r3, [r7, #28]
 800ae1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	d01b      	beq.n	800ae5e <USB_DeactivateEndpoint+0x1da>
 800ae26:	687a      	ldr	r2, [r7, #4]
 800ae28:	683b      	ldr	r3, [r7, #0]
 800ae2a:	781b      	ldrb	r3, [r3, #0]
 800ae2c:	009b      	lsls	r3, r3, #2
 800ae2e:	4413      	add	r3, r2
 800ae30:	881b      	ldrh	r3, [r3, #0]
 800ae32:	b29b      	uxth	r3, r3
 800ae34:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ae38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ae3c:	837b      	strh	r3, [r7, #26]
 800ae3e:	687a      	ldr	r2, [r7, #4]
 800ae40:	683b      	ldr	r3, [r7, #0]
 800ae42:	781b      	ldrb	r3, [r3, #0]
 800ae44:	009b      	lsls	r3, r3, #2
 800ae46:	441a      	add	r2, r3
 800ae48:	8b7b      	ldrh	r3, [r7, #26]
 800ae4a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ae4e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ae52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ae56:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800ae5a:	b29b      	uxth	r3, r3
 800ae5c:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800ae5e:	687a      	ldr	r2, [r7, #4]
 800ae60:	683b      	ldr	r3, [r7, #0]
 800ae62:	781b      	ldrb	r3, [r3, #0]
 800ae64:	009b      	lsls	r3, r3, #2
 800ae66:	4413      	add	r3, r2
 800ae68:	881b      	ldrh	r3, [r3, #0]
 800ae6a:	b29b      	uxth	r3, r3
 800ae6c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ae70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ae74:	833b      	strh	r3, [r7, #24]
 800ae76:	687a      	ldr	r2, [r7, #4]
 800ae78:	683b      	ldr	r3, [r7, #0]
 800ae7a:	781b      	ldrb	r3, [r3, #0]
 800ae7c:	009b      	lsls	r3, r3, #2
 800ae7e:	441a      	add	r2, r3
 800ae80:	8b3b      	ldrh	r3, [r7, #24]
 800ae82:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ae86:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ae8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ae8e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800ae92:	b29b      	uxth	r3, r3
 800ae94:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800ae96:	687a      	ldr	r2, [r7, #4]
 800ae98:	683b      	ldr	r3, [r7, #0]
 800ae9a:	781b      	ldrb	r3, [r3, #0]
 800ae9c:	009b      	lsls	r3, r3, #2
 800ae9e:	4413      	add	r3, r2
 800aea0:	881b      	ldrh	r3, [r3, #0]
 800aea2:	b29b      	uxth	r3, r3
 800aea4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800aea8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aeac:	82fb      	strh	r3, [r7, #22]
 800aeae:	687a      	ldr	r2, [r7, #4]
 800aeb0:	683b      	ldr	r3, [r7, #0]
 800aeb2:	781b      	ldrb	r3, [r3, #0]
 800aeb4:	009b      	lsls	r3, r3, #2
 800aeb6:	441a      	add	r2, r3
 800aeb8:	8afb      	ldrh	r3, [r7, #22]
 800aeba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800aebe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800aec2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800aec6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aeca:	b29b      	uxth	r3, r3
 800aecc:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800aece:	687a      	ldr	r2, [r7, #4]
 800aed0:	683b      	ldr	r3, [r7, #0]
 800aed2:	781b      	ldrb	r3, [r3, #0]
 800aed4:	009b      	lsls	r3, r3, #2
 800aed6:	4413      	add	r3, r2
 800aed8:	881b      	ldrh	r3, [r3, #0]
 800aeda:	b29b      	uxth	r3, r3
 800aedc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800aee0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800aee4:	82bb      	strh	r3, [r7, #20]
 800aee6:	687a      	ldr	r2, [r7, #4]
 800aee8:	683b      	ldr	r3, [r7, #0]
 800aeea:	781b      	ldrb	r3, [r3, #0]
 800aeec:	009b      	lsls	r3, r3, #2
 800aeee:	441a      	add	r2, r3
 800aef0:	8abb      	ldrh	r3, [r7, #20]
 800aef2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800aef6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800aefa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800aefe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800af02:	b29b      	uxth	r3, r3
 800af04:	8013      	strh	r3, [r2, #0]
 800af06:	e0a3      	b.n	800b050 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800af08:	687a      	ldr	r2, [r7, #4]
 800af0a:	683b      	ldr	r3, [r7, #0]
 800af0c:	781b      	ldrb	r3, [r3, #0]
 800af0e:	009b      	lsls	r3, r3, #2
 800af10:	4413      	add	r3, r2
 800af12:	881b      	ldrh	r3, [r3, #0]
 800af14:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800af16:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800af18:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	d01b      	beq.n	800af58 <USB_DeactivateEndpoint+0x2d4>
 800af20:	687a      	ldr	r2, [r7, #4]
 800af22:	683b      	ldr	r3, [r7, #0]
 800af24:	781b      	ldrb	r3, [r3, #0]
 800af26:	009b      	lsls	r3, r3, #2
 800af28:	4413      	add	r3, r2
 800af2a:	881b      	ldrh	r3, [r3, #0]
 800af2c:	b29b      	uxth	r3, r3
 800af2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800af32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800af36:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800af38:	687a      	ldr	r2, [r7, #4]
 800af3a:	683b      	ldr	r3, [r7, #0]
 800af3c:	781b      	ldrb	r3, [r3, #0]
 800af3e:	009b      	lsls	r3, r3, #2
 800af40:	441a      	add	r2, r3
 800af42:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800af44:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800af48:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800af4c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800af50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800af54:	b29b      	uxth	r3, r3
 800af56:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800af58:	687a      	ldr	r2, [r7, #4]
 800af5a:	683b      	ldr	r3, [r7, #0]
 800af5c:	781b      	ldrb	r3, [r3, #0]
 800af5e:	009b      	lsls	r3, r3, #2
 800af60:	4413      	add	r3, r2
 800af62:	881b      	ldrh	r3, [r3, #0]
 800af64:	857b      	strh	r3, [r7, #42]	; 0x2a
 800af66:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800af68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	d01b      	beq.n	800afa8 <USB_DeactivateEndpoint+0x324>
 800af70:	687a      	ldr	r2, [r7, #4]
 800af72:	683b      	ldr	r3, [r7, #0]
 800af74:	781b      	ldrb	r3, [r3, #0]
 800af76:	009b      	lsls	r3, r3, #2
 800af78:	4413      	add	r3, r2
 800af7a:	881b      	ldrh	r3, [r3, #0]
 800af7c:	b29b      	uxth	r3, r3
 800af7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800af82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800af86:	853b      	strh	r3, [r7, #40]	; 0x28
 800af88:	687a      	ldr	r2, [r7, #4]
 800af8a:	683b      	ldr	r3, [r7, #0]
 800af8c:	781b      	ldrb	r3, [r3, #0]
 800af8e:	009b      	lsls	r3, r3, #2
 800af90:	441a      	add	r2, r3
 800af92:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800af94:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800af98:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800af9c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800afa0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800afa4:	b29b      	uxth	r3, r3
 800afa6:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800afa8:	687a      	ldr	r2, [r7, #4]
 800afaa:	683b      	ldr	r3, [r7, #0]
 800afac:	781b      	ldrb	r3, [r3, #0]
 800afae:	009b      	lsls	r3, r3, #2
 800afb0:	4413      	add	r3, r2
 800afb2:	881b      	ldrh	r3, [r3, #0]
 800afb4:	b29b      	uxth	r3, r3
 800afb6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800afba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800afbe:	84fb      	strh	r3, [r7, #38]	; 0x26
 800afc0:	687a      	ldr	r2, [r7, #4]
 800afc2:	683b      	ldr	r3, [r7, #0]
 800afc4:	781b      	ldrb	r3, [r3, #0]
 800afc6:	009b      	lsls	r3, r3, #2
 800afc8:	441a      	add	r2, r3
 800afca:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800afcc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800afd0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800afd4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800afd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800afdc:	b29b      	uxth	r3, r3
 800afde:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800afe0:	687a      	ldr	r2, [r7, #4]
 800afe2:	683b      	ldr	r3, [r7, #0]
 800afe4:	781b      	ldrb	r3, [r3, #0]
 800afe6:	009b      	lsls	r3, r3, #2
 800afe8:	4413      	add	r3, r2
 800afea:	881b      	ldrh	r3, [r3, #0]
 800afec:	b29b      	uxth	r3, r3
 800afee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800aff2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800aff6:	84bb      	strh	r3, [r7, #36]	; 0x24
 800aff8:	687a      	ldr	r2, [r7, #4]
 800affa:	683b      	ldr	r3, [r7, #0]
 800affc:	781b      	ldrb	r3, [r3, #0]
 800affe:	009b      	lsls	r3, r3, #2
 800b000:	441a      	add	r2, r3
 800b002:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b004:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b008:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b00c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b010:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b014:	b29b      	uxth	r3, r3
 800b016:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800b018:	687a      	ldr	r2, [r7, #4]
 800b01a:	683b      	ldr	r3, [r7, #0]
 800b01c:	781b      	ldrb	r3, [r3, #0]
 800b01e:	009b      	lsls	r3, r3, #2
 800b020:	4413      	add	r3, r2
 800b022:	881b      	ldrh	r3, [r3, #0]
 800b024:	b29b      	uxth	r3, r3
 800b026:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b02a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b02e:	847b      	strh	r3, [r7, #34]	; 0x22
 800b030:	687a      	ldr	r2, [r7, #4]
 800b032:	683b      	ldr	r3, [r7, #0]
 800b034:	781b      	ldrb	r3, [r3, #0]
 800b036:	009b      	lsls	r3, r3, #2
 800b038:	441a      	add	r2, r3
 800b03a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b03c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b040:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b044:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b048:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b04c:	b29b      	uxth	r3, r3
 800b04e:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800b050:	2300      	movs	r3, #0
}
 800b052:	4618      	mov	r0, r3
 800b054:	3734      	adds	r7, #52	; 0x34
 800b056:	46bd      	mov	sp, r7
 800b058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b05c:	4770      	bx	lr

0800b05e <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800b05e:	b580      	push	{r7, lr}
 800b060:	b0c2      	sub	sp, #264	; 0x108
 800b062:	af00      	add	r7, sp, #0
 800b064:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b068:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b06c:	6018      	str	r0, [r3, #0]
 800b06e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b072:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b076:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800b078:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b07c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b080:	681b      	ldr	r3, [r3, #0]
 800b082:	785b      	ldrb	r3, [r3, #1]
 800b084:	2b01      	cmp	r3, #1
 800b086:	f040 867b 	bne.w	800bd80 <USB_EPStartXfer+0xd22>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800b08a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b08e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b092:	681b      	ldr	r3, [r3, #0]
 800b094:	699a      	ldr	r2, [r3, #24]
 800b096:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b09a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	691b      	ldr	r3, [r3, #16]
 800b0a2:	429a      	cmp	r2, r3
 800b0a4:	d908      	bls.n	800b0b8 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 800b0a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b0aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b0ae:	681b      	ldr	r3, [r3, #0]
 800b0b0:	691b      	ldr	r3, [r3, #16]
 800b0b2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800b0b6:	e007      	b.n	800b0c8 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800b0b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b0bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b0c0:	681b      	ldr	r3, [r3, #0]
 800b0c2:	699b      	ldr	r3, [r3, #24]
 800b0c4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800b0c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b0cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b0d0:	681b      	ldr	r3, [r3, #0]
 800b0d2:	7b1b      	ldrb	r3, [r3, #12]
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	d13a      	bne.n	800b14e <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800b0d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b0dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b0e0:	681b      	ldr	r3, [r3, #0]
 800b0e2:	6959      	ldr	r1, [r3, #20]
 800b0e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b0e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b0ec:	681b      	ldr	r3, [r3, #0]
 800b0ee:	88da      	ldrh	r2, [r3, #6]
 800b0f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b0f4:	b29b      	uxth	r3, r3
 800b0f6:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800b0fa:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800b0fe:	6800      	ldr	r0, [r0, #0]
 800b100:	f001 fc1d 	bl	800c93e <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800b104:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b108:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b10c:	681b      	ldr	r3, [r3, #0]
 800b10e:	613b      	str	r3, [r7, #16]
 800b110:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b114:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b118:	681b      	ldr	r3, [r3, #0]
 800b11a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b11e:	b29b      	uxth	r3, r3
 800b120:	461a      	mov	r2, r3
 800b122:	693b      	ldr	r3, [r7, #16]
 800b124:	4413      	add	r3, r2
 800b126:	613b      	str	r3, [r7, #16]
 800b128:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b12c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	781b      	ldrb	r3, [r3, #0]
 800b134:	00da      	lsls	r2, r3, #3
 800b136:	693b      	ldr	r3, [r7, #16]
 800b138:	4413      	add	r3, r2
 800b13a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b13e:	60fb      	str	r3, [r7, #12]
 800b140:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b144:	b29a      	uxth	r2, r3
 800b146:	68fb      	ldr	r3, [r7, #12]
 800b148:	801a      	strh	r2, [r3, #0]
 800b14a:	f000 bde3 	b.w	800bd14 <USB_EPStartXfer+0xcb6>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800b14e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b152:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b156:	681b      	ldr	r3, [r3, #0]
 800b158:	78db      	ldrb	r3, [r3, #3]
 800b15a:	2b02      	cmp	r3, #2
 800b15c:	f040 843a 	bne.w	800b9d4 <USB_EPStartXfer+0x976>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800b160:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b164:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b168:	681b      	ldr	r3, [r3, #0]
 800b16a:	6a1a      	ldr	r2, [r3, #32]
 800b16c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b170:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b174:	681b      	ldr	r3, [r3, #0]
 800b176:	691b      	ldr	r3, [r3, #16]
 800b178:	429a      	cmp	r2, r3
 800b17a:	f240 83b7 	bls.w	800b8ec <USB_EPStartXfer+0x88e>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800b17e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b182:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b186:	681a      	ldr	r2, [r3, #0]
 800b188:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b18c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b190:	681b      	ldr	r3, [r3, #0]
 800b192:	781b      	ldrb	r3, [r3, #0]
 800b194:	009b      	lsls	r3, r3, #2
 800b196:	4413      	add	r3, r2
 800b198:	881b      	ldrh	r3, [r3, #0]
 800b19a:	b29b      	uxth	r3, r3
 800b19c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b1a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b1a4:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800b1a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b1ac:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b1b0:	681a      	ldr	r2, [r3, #0]
 800b1b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b1b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b1ba:	681b      	ldr	r3, [r3, #0]
 800b1bc:	781b      	ldrb	r3, [r3, #0]
 800b1be:	009b      	lsls	r3, r3, #2
 800b1c0:	441a      	add	r2, r3
 800b1c2:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800b1c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b1ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b1ce:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800b1d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b1d6:	b29b      	uxth	r3, r3
 800b1d8:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800b1da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b1de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b1e2:	681b      	ldr	r3, [r3, #0]
 800b1e4:	6a1a      	ldr	r2, [r3, #32]
 800b1e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b1ea:	1ad2      	subs	r2, r2, r3
 800b1ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b1f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b1f4:	681b      	ldr	r3, [r3, #0]
 800b1f6:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800b1f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b1fc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b200:	681a      	ldr	r2, [r3, #0]
 800b202:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b206:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b20a:	681b      	ldr	r3, [r3, #0]
 800b20c:	781b      	ldrb	r3, [r3, #0]
 800b20e:	009b      	lsls	r3, r3, #2
 800b210:	4413      	add	r3, r2
 800b212:	881b      	ldrh	r3, [r3, #0]
 800b214:	b29b      	uxth	r3, r3
 800b216:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	f000 81b3 	beq.w	800b586 <USB_EPStartXfer+0x528>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800b220:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b224:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b228:	681b      	ldr	r3, [r3, #0]
 800b22a:	633b      	str	r3, [r7, #48]	; 0x30
 800b22c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b230:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b234:	681b      	ldr	r3, [r3, #0]
 800b236:	785b      	ldrb	r3, [r3, #1]
 800b238:	2b00      	cmp	r3, #0
 800b23a:	d16d      	bne.n	800b318 <USB_EPStartXfer+0x2ba>
 800b23c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b240:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b244:	681b      	ldr	r3, [r3, #0]
 800b246:	62bb      	str	r3, [r7, #40]	; 0x28
 800b248:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b24c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b250:	681b      	ldr	r3, [r3, #0]
 800b252:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b256:	b29b      	uxth	r3, r3
 800b258:	461a      	mov	r2, r3
 800b25a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b25c:	4413      	add	r3, r2
 800b25e:	62bb      	str	r3, [r7, #40]	; 0x28
 800b260:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b264:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b268:	681b      	ldr	r3, [r3, #0]
 800b26a:	781b      	ldrb	r3, [r3, #0]
 800b26c:	00da      	lsls	r2, r3, #3
 800b26e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b270:	4413      	add	r3, r2
 800b272:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b276:	627b      	str	r3, [r7, #36]	; 0x24
 800b278:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b27c:	2b3e      	cmp	r3, #62	; 0x3e
 800b27e:	d91c      	bls.n	800b2ba <USB_EPStartXfer+0x25c>
 800b280:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b284:	095b      	lsrs	r3, r3, #5
 800b286:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800b28a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b28e:	f003 031f 	and.w	r3, r3, #31
 800b292:	2b00      	cmp	r3, #0
 800b294:	d104      	bne.n	800b2a0 <USB_EPStartXfer+0x242>
 800b296:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800b29a:	3b01      	subs	r3, #1
 800b29c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800b2a0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800b2a4:	b29b      	uxth	r3, r3
 800b2a6:	029b      	lsls	r3, r3, #10
 800b2a8:	b29b      	uxth	r3, r3
 800b2aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b2ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b2b2:	b29a      	uxth	r2, r3
 800b2b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2b6:	801a      	strh	r2, [r3, #0]
 800b2b8:	e053      	b.n	800b362 <USB_EPStartXfer+0x304>
 800b2ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	d112      	bne.n	800b2e8 <USB_EPStartXfer+0x28a>
 800b2c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2c4:	881b      	ldrh	r3, [r3, #0]
 800b2c6:	b29b      	uxth	r3, r3
 800b2c8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800b2cc:	b29a      	uxth	r2, r3
 800b2ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2d0:	801a      	strh	r2, [r3, #0]
 800b2d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2d4:	881b      	ldrh	r3, [r3, #0]
 800b2d6:	b29b      	uxth	r3, r3
 800b2d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b2dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b2e0:	b29a      	uxth	r2, r3
 800b2e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2e4:	801a      	strh	r2, [r3, #0]
 800b2e6:	e03c      	b.n	800b362 <USB_EPStartXfer+0x304>
 800b2e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b2ec:	085b      	lsrs	r3, r3, #1
 800b2ee:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800b2f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b2f6:	f003 0301 	and.w	r3, r3, #1
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	d004      	beq.n	800b308 <USB_EPStartXfer+0x2aa>
 800b2fe:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800b302:	3301      	adds	r3, #1
 800b304:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800b308:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800b30c:	b29b      	uxth	r3, r3
 800b30e:	029b      	lsls	r3, r3, #10
 800b310:	b29a      	uxth	r2, r3
 800b312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b314:	801a      	strh	r2, [r3, #0]
 800b316:	e024      	b.n	800b362 <USB_EPStartXfer+0x304>
 800b318:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b31c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b320:	681b      	ldr	r3, [r3, #0]
 800b322:	785b      	ldrb	r3, [r3, #1]
 800b324:	2b01      	cmp	r3, #1
 800b326:	d11c      	bne.n	800b362 <USB_EPStartXfer+0x304>
 800b328:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b32c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b330:	681b      	ldr	r3, [r3, #0]
 800b332:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b336:	b29b      	uxth	r3, r3
 800b338:	461a      	mov	r2, r3
 800b33a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b33c:	4413      	add	r3, r2
 800b33e:	633b      	str	r3, [r7, #48]	; 0x30
 800b340:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b344:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b348:	681b      	ldr	r3, [r3, #0]
 800b34a:	781b      	ldrb	r3, [r3, #0]
 800b34c:	00da      	lsls	r2, r3, #3
 800b34e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b350:	4413      	add	r3, r2
 800b352:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b356:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b358:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b35c:	b29a      	uxth	r2, r3
 800b35e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b360:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800b362:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b366:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b36a:	681b      	ldr	r3, [r3, #0]
 800b36c:	895b      	ldrh	r3, [r3, #10]
 800b36e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b372:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b376:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b37a:	681b      	ldr	r3, [r3, #0]
 800b37c:	6959      	ldr	r1, [r3, #20]
 800b37e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b382:	b29b      	uxth	r3, r3
 800b384:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800b388:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800b38c:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800b390:	6800      	ldr	r0, [r0, #0]
 800b392:	f001 fad4 	bl	800c93e <USB_WritePMA>
            ep->xfer_buff += len;
 800b396:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b39a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	695a      	ldr	r2, [r3, #20]
 800b3a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b3a6:	441a      	add	r2, r3
 800b3a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b3ac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b3b0:	681b      	ldr	r3, [r3, #0]
 800b3b2:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800b3b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b3b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b3bc:	681b      	ldr	r3, [r3, #0]
 800b3be:	6a1a      	ldr	r2, [r3, #32]
 800b3c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b3c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b3c8:	681b      	ldr	r3, [r3, #0]
 800b3ca:	691b      	ldr	r3, [r3, #16]
 800b3cc:	429a      	cmp	r2, r3
 800b3ce:	d90f      	bls.n	800b3f0 <USB_EPStartXfer+0x392>
            {
              ep->xfer_len_db -= len;
 800b3d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b3d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b3d8:	681b      	ldr	r3, [r3, #0]
 800b3da:	6a1a      	ldr	r2, [r3, #32]
 800b3dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b3e0:	1ad2      	subs	r2, r2, r3
 800b3e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b3e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b3ea:	681b      	ldr	r3, [r3, #0]
 800b3ec:	621a      	str	r2, [r3, #32]
 800b3ee:	e00e      	b.n	800b40e <USB_EPStartXfer+0x3b0>
            }
            else
            {
              len = ep->xfer_len_db;
 800b3f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b3f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b3f8:	681b      	ldr	r3, [r3, #0]
 800b3fa:	6a1b      	ldr	r3, [r3, #32]
 800b3fc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800b400:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b404:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b408:	681b      	ldr	r3, [r3, #0]
 800b40a:	2200      	movs	r2, #0
 800b40c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800b40e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b412:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b416:	681b      	ldr	r3, [r3, #0]
 800b418:	785b      	ldrb	r3, [r3, #1]
 800b41a:	2b00      	cmp	r3, #0
 800b41c:	d16d      	bne.n	800b4fa <USB_EPStartXfer+0x49c>
 800b41e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b422:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b426:	681b      	ldr	r3, [r3, #0]
 800b428:	61bb      	str	r3, [r7, #24]
 800b42a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b42e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b432:	681b      	ldr	r3, [r3, #0]
 800b434:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b438:	b29b      	uxth	r3, r3
 800b43a:	461a      	mov	r2, r3
 800b43c:	69bb      	ldr	r3, [r7, #24]
 800b43e:	4413      	add	r3, r2
 800b440:	61bb      	str	r3, [r7, #24]
 800b442:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b446:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b44a:	681b      	ldr	r3, [r3, #0]
 800b44c:	781b      	ldrb	r3, [r3, #0]
 800b44e:	00da      	lsls	r2, r3, #3
 800b450:	69bb      	ldr	r3, [r7, #24]
 800b452:	4413      	add	r3, r2
 800b454:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b458:	617b      	str	r3, [r7, #20]
 800b45a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b45e:	2b3e      	cmp	r3, #62	; 0x3e
 800b460:	d91c      	bls.n	800b49c <USB_EPStartXfer+0x43e>
 800b462:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b466:	095b      	lsrs	r3, r3, #5
 800b468:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800b46c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b470:	f003 031f 	and.w	r3, r3, #31
 800b474:	2b00      	cmp	r3, #0
 800b476:	d104      	bne.n	800b482 <USB_EPStartXfer+0x424>
 800b478:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b47c:	3b01      	subs	r3, #1
 800b47e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800b482:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b486:	b29b      	uxth	r3, r3
 800b488:	029b      	lsls	r3, r3, #10
 800b48a:	b29b      	uxth	r3, r3
 800b48c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b490:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b494:	b29a      	uxth	r2, r3
 800b496:	697b      	ldr	r3, [r7, #20]
 800b498:	801a      	strh	r2, [r3, #0]
 800b49a:	e059      	b.n	800b550 <USB_EPStartXfer+0x4f2>
 800b49c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	d112      	bne.n	800b4ca <USB_EPStartXfer+0x46c>
 800b4a4:	697b      	ldr	r3, [r7, #20]
 800b4a6:	881b      	ldrh	r3, [r3, #0]
 800b4a8:	b29b      	uxth	r3, r3
 800b4aa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800b4ae:	b29a      	uxth	r2, r3
 800b4b0:	697b      	ldr	r3, [r7, #20]
 800b4b2:	801a      	strh	r2, [r3, #0]
 800b4b4:	697b      	ldr	r3, [r7, #20]
 800b4b6:	881b      	ldrh	r3, [r3, #0]
 800b4b8:	b29b      	uxth	r3, r3
 800b4ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b4be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b4c2:	b29a      	uxth	r2, r3
 800b4c4:	697b      	ldr	r3, [r7, #20]
 800b4c6:	801a      	strh	r2, [r3, #0]
 800b4c8:	e042      	b.n	800b550 <USB_EPStartXfer+0x4f2>
 800b4ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b4ce:	085b      	lsrs	r3, r3, #1
 800b4d0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800b4d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b4d8:	f003 0301 	and.w	r3, r3, #1
 800b4dc:	2b00      	cmp	r3, #0
 800b4de:	d004      	beq.n	800b4ea <USB_EPStartXfer+0x48c>
 800b4e0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b4e4:	3301      	adds	r3, #1
 800b4e6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800b4ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b4ee:	b29b      	uxth	r3, r3
 800b4f0:	029b      	lsls	r3, r3, #10
 800b4f2:	b29a      	uxth	r2, r3
 800b4f4:	697b      	ldr	r3, [r7, #20]
 800b4f6:	801a      	strh	r2, [r3, #0]
 800b4f8:	e02a      	b.n	800b550 <USB_EPStartXfer+0x4f2>
 800b4fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b4fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b502:	681b      	ldr	r3, [r3, #0]
 800b504:	785b      	ldrb	r3, [r3, #1]
 800b506:	2b01      	cmp	r3, #1
 800b508:	d122      	bne.n	800b550 <USB_EPStartXfer+0x4f2>
 800b50a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b50e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b512:	681b      	ldr	r3, [r3, #0]
 800b514:	623b      	str	r3, [r7, #32]
 800b516:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b51a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b51e:	681b      	ldr	r3, [r3, #0]
 800b520:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b524:	b29b      	uxth	r3, r3
 800b526:	461a      	mov	r2, r3
 800b528:	6a3b      	ldr	r3, [r7, #32]
 800b52a:	4413      	add	r3, r2
 800b52c:	623b      	str	r3, [r7, #32]
 800b52e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b532:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b536:	681b      	ldr	r3, [r3, #0]
 800b538:	781b      	ldrb	r3, [r3, #0]
 800b53a:	00da      	lsls	r2, r3, #3
 800b53c:	6a3b      	ldr	r3, [r7, #32]
 800b53e:	4413      	add	r3, r2
 800b540:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b544:	61fb      	str	r3, [r7, #28]
 800b546:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b54a:	b29a      	uxth	r2, r3
 800b54c:	69fb      	ldr	r3, [r7, #28]
 800b54e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800b550:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b554:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b558:	681b      	ldr	r3, [r3, #0]
 800b55a:	891b      	ldrh	r3, [r3, #8]
 800b55c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b560:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b564:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b568:	681b      	ldr	r3, [r3, #0]
 800b56a:	6959      	ldr	r1, [r3, #20]
 800b56c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b570:	b29b      	uxth	r3, r3
 800b572:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800b576:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800b57a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800b57e:	6800      	ldr	r0, [r0, #0]
 800b580:	f001 f9dd 	bl	800c93e <USB_WritePMA>
 800b584:	e3c6      	b.n	800bd14 <USB_EPStartXfer+0xcb6>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800b586:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b58a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b58e:	681b      	ldr	r3, [r3, #0]
 800b590:	785b      	ldrb	r3, [r3, #1]
 800b592:	2b00      	cmp	r3, #0
 800b594:	d16d      	bne.n	800b672 <USB_EPStartXfer+0x614>
 800b596:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b59a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b59e:	681b      	ldr	r3, [r3, #0]
 800b5a0:	64bb      	str	r3, [r7, #72]	; 0x48
 800b5a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b5a6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b5aa:	681b      	ldr	r3, [r3, #0]
 800b5ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b5b0:	b29b      	uxth	r3, r3
 800b5b2:	461a      	mov	r2, r3
 800b5b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b5b6:	4413      	add	r3, r2
 800b5b8:	64bb      	str	r3, [r7, #72]	; 0x48
 800b5ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b5be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b5c2:	681b      	ldr	r3, [r3, #0]
 800b5c4:	781b      	ldrb	r3, [r3, #0]
 800b5c6:	00da      	lsls	r2, r3, #3
 800b5c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b5ca:	4413      	add	r3, r2
 800b5cc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b5d0:	647b      	str	r3, [r7, #68]	; 0x44
 800b5d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b5d6:	2b3e      	cmp	r3, #62	; 0x3e
 800b5d8:	d91c      	bls.n	800b614 <USB_EPStartXfer+0x5b6>
 800b5da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b5de:	095b      	lsrs	r3, r3, #5
 800b5e0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800b5e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b5e8:	f003 031f 	and.w	r3, r3, #31
 800b5ec:	2b00      	cmp	r3, #0
 800b5ee:	d104      	bne.n	800b5fa <USB_EPStartXfer+0x59c>
 800b5f0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800b5f4:	3b01      	subs	r3, #1
 800b5f6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800b5fa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800b5fe:	b29b      	uxth	r3, r3
 800b600:	029b      	lsls	r3, r3, #10
 800b602:	b29b      	uxth	r3, r3
 800b604:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b608:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b60c:	b29a      	uxth	r2, r3
 800b60e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b610:	801a      	strh	r2, [r3, #0]
 800b612:	e059      	b.n	800b6c8 <USB_EPStartXfer+0x66a>
 800b614:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b618:	2b00      	cmp	r3, #0
 800b61a:	d112      	bne.n	800b642 <USB_EPStartXfer+0x5e4>
 800b61c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b61e:	881b      	ldrh	r3, [r3, #0]
 800b620:	b29b      	uxth	r3, r3
 800b622:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800b626:	b29a      	uxth	r2, r3
 800b628:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b62a:	801a      	strh	r2, [r3, #0]
 800b62c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b62e:	881b      	ldrh	r3, [r3, #0]
 800b630:	b29b      	uxth	r3, r3
 800b632:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b636:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b63a:	b29a      	uxth	r2, r3
 800b63c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b63e:	801a      	strh	r2, [r3, #0]
 800b640:	e042      	b.n	800b6c8 <USB_EPStartXfer+0x66a>
 800b642:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b646:	085b      	lsrs	r3, r3, #1
 800b648:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800b64c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b650:	f003 0301 	and.w	r3, r3, #1
 800b654:	2b00      	cmp	r3, #0
 800b656:	d004      	beq.n	800b662 <USB_EPStartXfer+0x604>
 800b658:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800b65c:	3301      	adds	r3, #1
 800b65e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800b662:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800b666:	b29b      	uxth	r3, r3
 800b668:	029b      	lsls	r3, r3, #10
 800b66a:	b29a      	uxth	r2, r3
 800b66c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b66e:	801a      	strh	r2, [r3, #0]
 800b670:	e02a      	b.n	800b6c8 <USB_EPStartXfer+0x66a>
 800b672:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b676:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b67a:	681b      	ldr	r3, [r3, #0]
 800b67c:	785b      	ldrb	r3, [r3, #1]
 800b67e:	2b01      	cmp	r3, #1
 800b680:	d122      	bne.n	800b6c8 <USB_EPStartXfer+0x66a>
 800b682:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b686:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b68a:	681b      	ldr	r3, [r3, #0]
 800b68c:	653b      	str	r3, [r7, #80]	; 0x50
 800b68e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b692:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b696:	681b      	ldr	r3, [r3, #0]
 800b698:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b69c:	b29b      	uxth	r3, r3
 800b69e:	461a      	mov	r2, r3
 800b6a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b6a2:	4413      	add	r3, r2
 800b6a4:	653b      	str	r3, [r7, #80]	; 0x50
 800b6a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b6aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b6ae:	681b      	ldr	r3, [r3, #0]
 800b6b0:	781b      	ldrb	r3, [r3, #0]
 800b6b2:	00da      	lsls	r2, r3, #3
 800b6b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b6b6:	4413      	add	r3, r2
 800b6b8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b6bc:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b6be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b6c2:	b29a      	uxth	r2, r3
 800b6c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b6c6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800b6c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b6cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b6d0:	681b      	ldr	r3, [r3, #0]
 800b6d2:	891b      	ldrh	r3, [r3, #8]
 800b6d4:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b6d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b6dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b6e0:	681b      	ldr	r3, [r3, #0]
 800b6e2:	6959      	ldr	r1, [r3, #20]
 800b6e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b6e8:	b29b      	uxth	r3, r3
 800b6ea:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800b6ee:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800b6f2:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800b6f6:	6800      	ldr	r0, [r0, #0]
 800b6f8:	f001 f921 	bl	800c93e <USB_WritePMA>
            ep->xfer_buff += len;
 800b6fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b700:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b704:	681b      	ldr	r3, [r3, #0]
 800b706:	695a      	ldr	r2, [r3, #20]
 800b708:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b70c:	441a      	add	r2, r3
 800b70e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b712:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b716:	681b      	ldr	r3, [r3, #0]
 800b718:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800b71a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b71e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b722:	681b      	ldr	r3, [r3, #0]
 800b724:	6a1a      	ldr	r2, [r3, #32]
 800b726:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b72a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b72e:	681b      	ldr	r3, [r3, #0]
 800b730:	691b      	ldr	r3, [r3, #16]
 800b732:	429a      	cmp	r2, r3
 800b734:	d90f      	bls.n	800b756 <USB_EPStartXfer+0x6f8>
            {
              ep->xfer_len_db -= len;
 800b736:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b73a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	6a1a      	ldr	r2, [r3, #32]
 800b742:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b746:	1ad2      	subs	r2, r2, r3
 800b748:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b74c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b750:	681b      	ldr	r3, [r3, #0]
 800b752:	621a      	str	r2, [r3, #32]
 800b754:	e00e      	b.n	800b774 <USB_EPStartXfer+0x716>
            }
            else
            {
              len = ep->xfer_len_db;
 800b756:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b75a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b75e:	681b      	ldr	r3, [r3, #0]
 800b760:	6a1b      	ldr	r3, [r3, #32]
 800b762:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800b766:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b76a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b76e:	681b      	ldr	r3, [r3, #0]
 800b770:	2200      	movs	r2, #0
 800b772:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800b774:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b778:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b77c:	681b      	ldr	r3, [r3, #0]
 800b77e:	643b      	str	r3, [r7, #64]	; 0x40
 800b780:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b784:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b788:	681b      	ldr	r3, [r3, #0]
 800b78a:	785b      	ldrb	r3, [r3, #1]
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	d16d      	bne.n	800b86c <USB_EPStartXfer+0x80e>
 800b790:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b794:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b798:	681b      	ldr	r3, [r3, #0]
 800b79a:	63bb      	str	r3, [r7, #56]	; 0x38
 800b79c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b7a0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b7a4:	681b      	ldr	r3, [r3, #0]
 800b7a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b7aa:	b29b      	uxth	r3, r3
 800b7ac:	461a      	mov	r2, r3
 800b7ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7b0:	4413      	add	r3, r2
 800b7b2:	63bb      	str	r3, [r7, #56]	; 0x38
 800b7b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b7b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b7bc:	681b      	ldr	r3, [r3, #0]
 800b7be:	781b      	ldrb	r3, [r3, #0]
 800b7c0:	00da      	lsls	r2, r3, #3
 800b7c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7c4:	4413      	add	r3, r2
 800b7c6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b7ca:	637b      	str	r3, [r7, #52]	; 0x34
 800b7cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b7d0:	2b3e      	cmp	r3, #62	; 0x3e
 800b7d2:	d91c      	bls.n	800b80e <USB_EPStartXfer+0x7b0>
 800b7d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b7d8:	095b      	lsrs	r3, r3, #5
 800b7da:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800b7de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b7e2:	f003 031f 	and.w	r3, r3, #31
 800b7e6:	2b00      	cmp	r3, #0
 800b7e8:	d104      	bne.n	800b7f4 <USB_EPStartXfer+0x796>
 800b7ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b7ee:	3b01      	subs	r3, #1
 800b7f0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800b7f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b7f8:	b29b      	uxth	r3, r3
 800b7fa:	029b      	lsls	r3, r3, #10
 800b7fc:	b29b      	uxth	r3, r3
 800b7fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b802:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b806:	b29a      	uxth	r2, r3
 800b808:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b80a:	801a      	strh	r2, [r3, #0]
 800b80c:	e053      	b.n	800b8b6 <USB_EPStartXfer+0x858>
 800b80e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b812:	2b00      	cmp	r3, #0
 800b814:	d112      	bne.n	800b83c <USB_EPStartXfer+0x7de>
 800b816:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b818:	881b      	ldrh	r3, [r3, #0]
 800b81a:	b29b      	uxth	r3, r3
 800b81c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800b820:	b29a      	uxth	r2, r3
 800b822:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b824:	801a      	strh	r2, [r3, #0]
 800b826:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b828:	881b      	ldrh	r3, [r3, #0]
 800b82a:	b29b      	uxth	r3, r3
 800b82c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b830:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b834:	b29a      	uxth	r2, r3
 800b836:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b838:	801a      	strh	r2, [r3, #0]
 800b83a:	e03c      	b.n	800b8b6 <USB_EPStartXfer+0x858>
 800b83c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b840:	085b      	lsrs	r3, r3, #1
 800b842:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800b846:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b84a:	f003 0301 	and.w	r3, r3, #1
 800b84e:	2b00      	cmp	r3, #0
 800b850:	d004      	beq.n	800b85c <USB_EPStartXfer+0x7fe>
 800b852:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b856:	3301      	adds	r3, #1
 800b858:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800b85c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b860:	b29b      	uxth	r3, r3
 800b862:	029b      	lsls	r3, r3, #10
 800b864:	b29a      	uxth	r2, r3
 800b866:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b868:	801a      	strh	r2, [r3, #0]
 800b86a:	e024      	b.n	800b8b6 <USB_EPStartXfer+0x858>
 800b86c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b870:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b874:	681b      	ldr	r3, [r3, #0]
 800b876:	785b      	ldrb	r3, [r3, #1]
 800b878:	2b01      	cmp	r3, #1
 800b87a:	d11c      	bne.n	800b8b6 <USB_EPStartXfer+0x858>
 800b87c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b880:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b884:	681b      	ldr	r3, [r3, #0]
 800b886:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b88a:	b29b      	uxth	r3, r3
 800b88c:	461a      	mov	r2, r3
 800b88e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b890:	4413      	add	r3, r2
 800b892:	643b      	str	r3, [r7, #64]	; 0x40
 800b894:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b898:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b89c:	681b      	ldr	r3, [r3, #0]
 800b89e:	781b      	ldrb	r3, [r3, #0]
 800b8a0:	00da      	lsls	r2, r3, #3
 800b8a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b8a4:	4413      	add	r3, r2
 800b8a6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b8aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b8ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b8b0:	b29a      	uxth	r2, r3
 800b8b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b8b4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800b8b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b8ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b8be:	681b      	ldr	r3, [r3, #0]
 800b8c0:	895b      	ldrh	r3, [r3, #10]
 800b8c2:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b8c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b8ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b8ce:	681b      	ldr	r3, [r3, #0]
 800b8d0:	6959      	ldr	r1, [r3, #20]
 800b8d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b8d6:	b29b      	uxth	r3, r3
 800b8d8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800b8dc:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800b8e0:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800b8e4:	6800      	ldr	r0, [r0, #0]
 800b8e6:	f001 f82a 	bl	800c93e <USB_WritePMA>
 800b8ea:	e213      	b.n	800bd14 <USB_EPStartXfer+0xcb6>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800b8ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b8f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b8f4:	681b      	ldr	r3, [r3, #0]
 800b8f6:	6a1b      	ldr	r3, [r3, #32]
 800b8f8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800b8fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b900:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b904:	681a      	ldr	r2, [r3, #0]
 800b906:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b90a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b90e:	681b      	ldr	r3, [r3, #0]
 800b910:	781b      	ldrb	r3, [r3, #0]
 800b912:	009b      	lsls	r3, r3, #2
 800b914:	4413      	add	r3, r2
 800b916:	881b      	ldrh	r3, [r3, #0]
 800b918:	b29b      	uxth	r3, r3
 800b91a:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800b91e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b922:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800b926:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b92a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b92e:	681a      	ldr	r2, [r3, #0]
 800b930:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b934:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b938:	681b      	ldr	r3, [r3, #0]
 800b93a:	781b      	ldrb	r3, [r3, #0]
 800b93c:	009b      	lsls	r3, r3, #2
 800b93e:	441a      	add	r2, r3
 800b940:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800b944:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b948:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b94c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b950:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b954:	b29b      	uxth	r3, r3
 800b956:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800b958:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b95c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b960:	681b      	ldr	r3, [r3, #0]
 800b962:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b964:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b968:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b96c:	681b      	ldr	r3, [r3, #0]
 800b96e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b972:	b29b      	uxth	r3, r3
 800b974:	461a      	mov	r2, r3
 800b976:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b978:	4413      	add	r3, r2
 800b97a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b97c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b980:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b984:	681b      	ldr	r3, [r3, #0]
 800b986:	781b      	ldrb	r3, [r3, #0]
 800b988:	00da      	lsls	r2, r3, #3
 800b98a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b98c:	4413      	add	r3, r2
 800b98e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b992:	65bb      	str	r3, [r7, #88]	; 0x58
 800b994:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b998:	b29a      	uxth	r2, r3
 800b99a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b99c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800b99e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b9a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b9a6:	681b      	ldr	r3, [r3, #0]
 800b9a8:	891b      	ldrh	r3, [r3, #8]
 800b9aa:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b9ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b9b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b9b6:	681b      	ldr	r3, [r3, #0]
 800b9b8:	6959      	ldr	r1, [r3, #20]
 800b9ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b9be:	b29b      	uxth	r3, r3
 800b9c0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800b9c4:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800b9c8:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800b9cc:	6800      	ldr	r0, [r0, #0]
 800b9ce:	f000 ffb6 	bl	800c93e <USB_WritePMA>
 800b9d2:	e19f      	b.n	800bd14 <USB_EPStartXfer+0xcb6>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800b9d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b9d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b9dc:	681b      	ldr	r3, [r3, #0]
 800b9de:	6a1a      	ldr	r2, [r3, #32]
 800b9e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b9e4:	1ad2      	subs	r2, r2, r3
 800b9e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b9ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b9ee:	681b      	ldr	r3, [r3, #0]
 800b9f0:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800b9f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b9f6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b9fa:	681a      	ldr	r2, [r3, #0]
 800b9fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ba00:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ba04:	681b      	ldr	r3, [r3, #0]
 800ba06:	781b      	ldrb	r3, [r3, #0]
 800ba08:	009b      	lsls	r3, r3, #2
 800ba0a:	4413      	add	r3, r2
 800ba0c:	881b      	ldrh	r3, [r3, #0]
 800ba0e:	b29b      	uxth	r3, r3
 800ba10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ba14:	2b00      	cmp	r3, #0
 800ba16:	f000 80bc 	beq.w	800bb92 <USB_EPStartXfer+0xb34>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800ba1a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ba1e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ba22:	681b      	ldr	r3, [r3, #0]
 800ba24:	673b      	str	r3, [r7, #112]	; 0x70
 800ba26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ba2a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ba2e:	681b      	ldr	r3, [r3, #0]
 800ba30:	785b      	ldrb	r3, [r3, #1]
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	d16d      	bne.n	800bb12 <USB_EPStartXfer+0xab4>
 800ba36:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ba3a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ba3e:	681b      	ldr	r3, [r3, #0]
 800ba40:	66bb      	str	r3, [r7, #104]	; 0x68
 800ba42:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ba46:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ba4a:	681b      	ldr	r3, [r3, #0]
 800ba4c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ba50:	b29b      	uxth	r3, r3
 800ba52:	461a      	mov	r2, r3
 800ba54:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ba56:	4413      	add	r3, r2
 800ba58:	66bb      	str	r3, [r7, #104]	; 0x68
 800ba5a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ba5e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ba62:	681b      	ldr	r3, [r3, #0]
 800ba64:	781b      	ldrb	r3, [r3, #0]
 800ba66:	00da      	lsls	r2, r3, #3
 800ba68:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ba6a:	4413      	add	r3, r2
 800ba6c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800ba70:	667b      	str	r3, [r7, #100]	; 0x64
 800ba72:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba76:	2b3e      	cmp	r3, #62	; 0x3e
 800ba78:	d91c      	bls.n	800bab4 <USB_EPStartXfer+0xa56>
 800ba7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba7e:	095b      	lsrs	r3, r3, #5
 800ba80:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800ba84:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba88:	f003 031f 	and.w	r3, r3, #31
 800ba8c:	2b00      	cmp	r3, #0
 800ba8e:	d104      	bne.n	800ba9a <USB_EPStartXfer+0xa3c>
 800ba90:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800ba94:	3b01      	subs	r3, #1
 800ba96:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800ba9a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800ba9e:	b29b      	uxth	r3, r3
 800baa0:	029b      	lsls	r3, r3, #10
 800baa2:	b29b      	uxth	r3, r3
 800baa4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800baa8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800baac:	b29a      	uxth	r2, r3
 800baae:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bab0:	801a      	strh	r2, [r3, #0]
 800bab2:	e053      	b.n	800bb5c <USB_EPStartXfer+0xafe>
 800bab4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bab8:	2b00      	cmp	r3, #0
 800baba:	d112      	bne.n	800bae2 <USB_EPStartXfer+0xa84>
 800babc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800babe:	881b      	ldrh	r3, [r3, #0]
 800bac0:	b29b      	uxth	r3, r3
 800bac2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800bac6:	b29a      	uxth	r2, r3
 800bac8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800baca:	801a      	strh	r2, [r3, #0]
 800bacc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bace:	881b      	ldrh	r3, [r3, #0]
 800bad0:	b29b      	uxth	r3, r3
 800bad2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bad6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bada:	b29a      	uxth	r2, r3
 800badc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bade:	801a      	strh	r2, [r3, #0]
 800bae0:	e03c      	b.n	800bb5c <USB_EPStartXfer+0xafe>
 800bae2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bae6:	085b      	lsrs	r3, r3, #1
 800bae8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800baec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800baf0:	f003 0301 	and.w	r3, r3, #1
 800baf4:	2b00      	cmp	r3, #0
 800baf6:	d004      	beq.n	800bb02 <USB_EPStartXfer+0xaa4>
 800baf8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800bafc:	3301      	adds	r3, #1
 800bafe:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800bb02:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800bb06:	b29b      	uxth	r3, r3
 800bb08:	029b      	lsls	r3, r3, #10
 800bb0a:	b29a      	uxth	r2, r3
 800bb0c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bb0e:	801a      	strh	r2, [r3, #0]
 800bb10:	e024      	b.n	800bb5c <USB_EPStartXfer+0xafe>
 800bb12:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bb16:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bb1a:	681b      	ldr	r3, [r3, #0]
 800bb1c:	785b      	ldrb	r3, [r3, #1]
 800bb1e:	2b01      	cmp	r3, #1
 800bb20:	d11c      	bne.n	800bb5c <USB_EPStartXfer+0xafe>
 800bb22:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bb26:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bb2a:	681b      	ldr	r3, [r3, #0]
 800bb2c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bb30:	b29b      	uxth	r3, r3
 800bb32:	461a      	mov	r2, r3
 800bb34:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800bb36:	4413      	add	r3, r2
 800bb38:	673b      	str	r3, [r7, #112]	; 0x70
 800bb3a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bb3e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bb42:	681b      	ldr	r3, [r3, #0]
 800bb44:	781b      	ldrb	r3, [r3, #0]
 800bb46:	00da      	lsls	r2, r3, #3
 800bb48:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800bb4a:	4413      	add	r3, r2
 800bb4c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800bb50:	66fb      	str	r3, [r7, #108]	; 0x6c
 800bb52:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bb56:	b29a      	uxth	r2, r3
 800bb58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bb5a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800bb5c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bb60:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bb64:	681b      	ldr	r3, [r3, #0]
 800bb66:	895b      	ldrh	r3, [r3, #10]
 800bb68:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800bb6c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bb70:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bb74:	681b      	ldr	r3, [r3, #0]
 800bb76:	6959      	ldr	r1, [r3, #20]
 800bb78:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bb7c:	b29b      	uxth	r3, r3
 800bb7e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800bb82:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800bb86:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800bb8a:	6800      	ldr	r0, [r0, #0]
 800bb8c:	f000 fed7 	bl	800c93e <USB_WritePMA>
 800bb90:	e0c0      	b.n	800bd14 <USB_EPStartXfer+0xcb6>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800bb92:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bb96:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bb9a:	681b      	ldr	r3, [r3, #0]
 800bb9c:	785b      	ldrb	r3, [r3, #1]
 800bb9e:	2b00      	cmp	r3, #0
 800bba0:	d16d      	bne.n	800bc7e <USB_EPStartXfer+0xc20>
 800bba2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bba6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bbaa:	681b      	ldr	r3, [r3, #0]
 800bbac:	67fb      	str	r3, [r7, #124]	; 0x7c
 800bbae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bbb2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bbb6:	681b      	ldr	r3, [r3, #0]
 800bbb8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bbbc:	b29b      	uxth	r3, r3
 800bbbe:	461a      	mov	r2, r3
 800bbc0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800bbc2:	4413      	add	r3, r2
 800bbc4:	67fb      	str	r3, [r7, #124]	; 0x7c
 800bbc6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bbca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bbce:	681b      	ldr	r3, [r3, #0]
 800bbd0:	781b      	ldrb	r3, [r3, #0]
 800bbd2:	00da      	lsls	r2, r3, #3
 800bbd4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800bbd6:	4413      	add	r3, r2
 800bbd8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800bbdc:	67bb      	str	r3, [r7, #120]	; 0x78
 800bbde:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bbe2:	2b3e      	cmp	r3, #62	; 0x3e
 800bbe4:	d91c      	bls.n	800bc20 <USB_EPStartXfer+0xbc2>
 800bbe6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bbea:	095b      	lsrs	r3, r3, #5
 800bbec:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800bbf0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bbf4:	f003 031f 	and.w	r3, r3, #31
 800bbf8:	2b00      	cmp	r3, #0
 800bbfa:	d104      	bne.n	800bc06 <USB_EPStartXfer+0xba8>
 800bbfc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800bc00:	3b01      	subs	r3, #1
 800bc02:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800bc06:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800bc0a:	b29b      	uxth	r3, r3
 800bc0c:	029b      	lsls	r3, r3, #10
 800bc0e:	b29b      	uxth	r3, r3
 800bc10:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bc14:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bc18:	b29a      	uxth	r2, r3
 800bc1a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bc1c:	801a      	strh	r2, [r3, #0]
 800bc1e:	e05f      	b.n	800bce0 <USB_EPStartXfer+0xc82>
 800bc20:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bc24:	2b00      	cmp	r3, #0
 800bc26:	d112      	bne.n	800bc4e <USB_EPStartXfer+0xbf0>
 800bc28:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bc2a:	881b      	ldrh	r3, [r3, #0]
 800bc2c:	b29b      	uxth	r3, r3
 800bc2e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800bc32:	b29a      	uxth	r2, r3
 800bc34:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bc36:	801a      	strh	r2, [r3, #0]
 800bc38:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bc3a:	881b      	ldrh	r3, [r3, #0]
 800bc3c:	b29b      	uxth	r3, r3
 800bc3e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bc42:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bc46:	b29a      	uxth	r2, r3
 800bc48:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bc4a:	801a      	strh	r2, [r3, #0]
 800bc4c:	e048      	b.n	800bce0 <USB_EPStartXfer+0xc82>
 800bc4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bc52:	085b      	lsrs	r3, r3, #1
 800bc54:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800bc58:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bc5c:	f003 0301 	and.w	r3, r3, #1
 800bc60:	2b00      	cmp	r3, #0
 800bc62:	d004      	beq.n	800bc6e <USB_EPStartXfer+0xc10>
 800bc64:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800bc68:	3301      	adds	r3, #1
 800bc6a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800bc6e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800bc72:	b29b      	uxth	r3, r3
 800bc74:	029b      	lsls	r3, r3, #10
 800bc76:	b29a      	uxth	r2, r3
 800bc78:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bc7a:	801a      	strh	r2, [r3, #0]
 800bc7c:	e030      	b.n	800bce0 <USB_EPStartXfer+0xc82>
 800bc7e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bc82:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bc86:	681b      	ldr	r3, [r3, #0]
 800bc88:	785b      	ldrb	r3, [r3, #1]
 800bc8a:	2b01      	cmp	r3, #1
 800bc8c:	d128      	bne.n	800bce0 <USB_EPStartXfer+0xc82>
 800bc8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bc92:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bc96:	681b      	ldr	r3, [r3, #0]
 800bc98:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800bc9c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bca0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bca4:	681b      	ldr	r3, [r3, #0]
 800bca6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bcaa:	b29b      	uxth	r3, r3
 800bcac:	461a      	mov	r2, r3
 800bcae:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800bcb2:	4413      	add	r3, r2
 800bcb4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800bcb8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bcbc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bcc0:	681b      	ldr	r3, [r3, #0]
 800bcc2:	781b      	ldrb	r3, [r3, #0]
 800bcc4:	00da      	lsls	r2, r3, #3
 800bcc6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800bcca:	4413      	add	r3, r2
 800bccc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800bcd0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800bcd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bcd8:	b29a      	uxth	r2, r3
 800bcda:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800bcde:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800bce0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bce4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bce8:	681b      	ldr	r3, [r3, #0]
 800bcea:	891b      	ldrh	r3, [r3, #8]
 800bcec:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800bcf0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bcf4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bcf8:	681b      	ldr	r3, [r3, #0]
 800bcfa:	6959      	ldr	r1, [r3, #20]
 800bcfc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bd00:	b29b      	uxth	r3, r3
 800bd02:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800bd06:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800bd0a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800bd0e:	6800      	ldr	r0, [r0, #0]
 800bd10:	f000 fe15 	bl	800c93e <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800bd14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bd18:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bd1c:	681a      	ldr	r2, [r3, #0]
 800bd1e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bd22:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bd26:	681b      	ldr	r3, [r3, #0]
 800bd28:	781b      	ldrb	r3, [r3, #0]
 800bd2a:	009b      	lsls	r3, r3, #2
 800bd2c:	4413      	add	r3, r2
 800bd2e:	881b      	ldrh	r3, [r3, #0]
 800bd30:	b29b      	uxth	r3, r3
 800bd32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bd36:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bd3a:	817b      	strh	r3, [r7, #10]
 800bd3c:	897b      	ldrh	r3, [r7, #10]
 800bd3e:	f083 0310 	eor.w	r3, r3, #16
 800bd42:	817b      	strh	r3, [r7, #10]
 800bd44:	897b      	ldrh	r3, [r7, #10]
 800bd46:	f083 0320 	eor.w	r3, r3, #32
 800bd4a:	817b      	strh	r3, [r7, #10]
 800bd4c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bd50:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bd54:	681a      	ldr	r2, [r3, #0]
 800bd56:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bd5a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bd5e:	681b      	ldr	r3, [r3, #0]
 800bd60:	781b      	ldrb	r3, [r3, #0]
 800bd62:	009b      	lsls	r3, r3, #2
 800bd64:	441a      	add	r2, r3
 800bd66:	897b      	ldrh	r3, [r7, #10]
 800bd68:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bd6c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bd70:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bd74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bd78:	b29b      	uxth	r3, r3
 800bd7a:	8013      	strh	r3, [r2, #0]
 800bd7c:	f000 bc9f 	b.w	800c6be <USB_EPStartXfer+0x1660>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800bd80:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bd84:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bd88:	681b      	ldr	r3, [r3, #0]
 800bd8a:	7b1b      	ldrb	r3, [r3, #12]
 800bd8c:	2b00      	cmp	r3, #0
 800bd8e:	f040 80ae 	bne.w	800beee <USB_EPStartXfer+0xe90>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800bd92:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bd96:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bd9a:	681b      	ldr	r3, [r3, #0]
 800bd9c:	699a      	ldr	r2, [r3, #24]
 800bd9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bda2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bda6:	681b      	ldr	r3, [r3, #0]
 800bda8:	691b      	ldr	r3, [r3, #16]
 800bdaa:	429a      	cmp	r2, r3
 800bdac:	d917      	bls.n	800bdde <USB_EPStartXfer+0xd80>
      {
        len = ep->maxpacket;
 800bdae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bdb2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bdb6:	681b      	ldr	r3, [r3, #0]
 800bdb8:	691b      	ldr	r3, [r3, #16]
 800bdba:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 800bdbe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bdc2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bdc6:	681b      	ldr	r3, [r3, #0]
 800bdc8:	699a      	ldr	r2, [r3, #24]
 800bdca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bdce:	1ad2      	subs	r2, r2, r3
 800bdd0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bdd4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bdd8:	681b      	ldr	r3, [r3, #0]
 800bdda:	619a      	str	r2, [r3, #24]
 800bddc:	e00e      	b.n	800bdfc <USB_EPStartXfer+0xd9e>
      }
      else
      {
        len = ep->xfer_len;
 800bdde:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bde2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bde6:	681b      	ldr	r3, [r3, #0]
 800bde8:	699b      	ldr	r3, [r3, #24]
 800bdea:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 800bdee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bdf2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bdf6:	681b      	ldr	r3, [r3, #0]
 800bdf8:	2200      	movs	r2, #0
 800bdfa:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800bdfc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800be00:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800be04:	681b      	ldr	r3, [r3, #0]
 800be06:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800be0a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800be0e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800be12:	681b      	ldr	r3, [r3, #0]
 800be14:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800be18:	b29b      	uxth	r3, r3
 800be1a:	461a      	mov	r2, r3
 800be1c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800be20:	4413      	add	r3, r2
 800be22:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800be26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800be2a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800be2e:	681b      	ldr	r3, [r3, #0]
 800be30:	781b      	ldrb	r3, [r3, #0]
 800be32:	00da      	lsls	r2, r3, #3
 800be34:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800be38:	4413      	add	r3, r2
 800be3a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800be3e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800be42:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800be46:	2b3e      	cmp	r3, #62	; 0x3e
 800be48:	d91d      	bls.n	800be86 <USB_EPStartXfer+0xe28>
 800be4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800be4e:	095b      	lsrs	r3, r3, #5
 800be50:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800be54:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800be58:	f003 031f 	and.w	r3, r3, #31
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	d104      	bne.n	800be6a <USB_EPStartXfer+0xe0c>
 800be60:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800be64:	3b01      	subs	r3, #1
 800be66:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800be6a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800be6e:	b29b      	uxth	r3, r3
 800be70:	029b      	lsls	r3, r3, #10
 800be72:	b29b      	uxth	r3, r3
 800be74:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800be78:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800be7c:	b29a      	uxth	r2, r3
 800be7e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800be82:	801a      	strh	r2, [r3, #0]
 800be84:	e3e1      	b.n	800c64a <USB_EPStartXfer+0x15ec>
 800be86:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800be8a:	2b00      	cmp	r3, #0
 800be8c:	d116      	bne.n	800bebc <USB_EPStartXfer+0xe5e>
 800be8e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800be92:	881b      	ldrh	r3, [r3, #0]
 800be94:	b29b      	uxth	r3, r3
 800be96:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800be9a:	b29a      	uxth	r2, r3
 800be9c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bea0:	801a      	strh	r2, [r3, #0]
 800bea2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bea6:	881b      	ldrh	r3, [r3, #0]
 800bea8:	b29b      	uxth	r3, r3
 800beaa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800beae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800beb2:	b29a      	uxth	r2, r3
 800beb4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800beb8:	801a      	strh	r2, [r3, #0]
 800beba:	e3c6      	b.n	800c64a <USB_EPStartXfer+0x15ec>
 800bebc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bec0:	085b      	lsrs	r3, r3, #1
 800bec2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800bec6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800beca:	f003 0301 	and.w	r3, r3, #1
 800bece:	2b00      	cmp	r3, #0
 800bed0:	d004      	beq.n	800bedc <USB_EPStartXfer+0xe7e>
 800bed2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800bed6:	3301      	adds	r3, #1
 800bed8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800bedc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800bee0:	b29b      	uxth	r3, r3
 800bee2:	029b      	lsls	r3, r3, #10
 800bee4:	b29a      	uxth	r2, r3
 800bee6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800beea:	801a      	strh	r2, [r3, #0]
 800beec:	e3ad      	b.n	800c64a <USB_EPStartXfer+0x15ec>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800beee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bef2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bef6:	681b      	ldr	r3, [r3, #0]
 800bef8:	78db      	ldrb	r3, [r3, #3]
 800befa:	2b02      	cmp	r3, #2
 800befc:	f040 8200 	bne.w	800c300 <USB_EPStartXfer+0x12a2>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800bf00:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bf04:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bf08:	681b      	ldr	r3, [r3, #0]
 800bf0a:	785b      	ldrb	r3, [r3, #1]
 800bf0c:	2b00      	cmp	r3, #0
 800bf0e:	f040 8091 	bne.w	800c034 <USB_EPStartXfer+0xfd6>
 800bf12:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bf16:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bf1a:	681b      	ldr	r3, [r3, #0]
 800bf1c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800bf20:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bf24:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bf28:	681b      	ldr	r3, [r3, #0]
 800bf2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bf2e:	b29b      	uxth	r3, r3
 800bf30:	461a      	mov	r2, r3
 800bf32:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800bf36:	4413      	add	r3, r2
 800bf38:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800bf3c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bf40:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bf44:	681b      	ldr	r3, [r3, #0]
 800bf46:	781b      	ldrb	r3, [r3, #0]
 800bf48:	00da      	lsls	r2, r3, #3
 800bf4a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800bf4e:	4413      	add	r3, r2
 800bf50:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800bf54:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800bf58:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bf5c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bf60:	681b      	ldr	r3, [r3, #0]
 800bf62:	691b      	ldr	r3, [r3, #16]
 800bf64:	2b3e      	cmp	r3, #62	; 0x3e
 800bf66:	d925      	bls.n	800bfb4 <USB_EPStartXfer+0xf56>
 800bf68:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bf6c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bf70:	681b      	ldr	r3, [r3, #0]
 800bf72:	691b      	ldr	r3, [r3, #16]
 800bf74:	095b      	lsrs	r3, r3, #5
 800bf76:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800bf7a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bf7e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bf82:	681b      	ldr	r3, [r3, #0]
 800bf84:	691b      	ldr	r3, [r3, #16]
 800bf86:	f003 031f 	and.w	r3, r3, #31
 800bf8a:	2b00      	cmp	r3, #0
 800bf8c:	d104      	bne.n	800bf98 <USB_EPStartXfer+0xf3a>
 800bf8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bf92:	3b01      	subs	r3, #1
 800bf94:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800bf98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bf9c:	b29b      	uxth	r3, r3
 800bf9e:	029b      	lsls	r3, r3, #10
 800bfa0:	b29b      	uxth	r3, r3
 800bfa2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bfa6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bfaa:	b29a      	uxth	r2, r3
 800bfac:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800bfb0:	801a      	strh	r2, [r3, #0]
 800bfb2:	e074      	b.n	800c09e <USB_EPStartXfer+0x1040>
 800bfb4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bfb8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bfbc:	681b      	ldr	r3, [r3, #0]
 800bfbe:	691b      	ldr	r3, [r3, #16]
 800bfc0:	2b00      	cmp	r3, #0
 800bfc2:	d116      	bne.n	800bff2 <USB_EPStartXfer+0xf94>
 800bfc4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800bfc8:	881b      	ldrh	r3, [r3, #0]
 800bfca:	b29b      	uxth	r3, r3
 800bfcc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800bfd0:	b29a      	uxth	r2, r3
 800bfd2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800bfd6:	801a      	strh	r2, [r3, #0]
 800bfd8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800bfdc:	881b      	ldrh	r3, [r3, #0]
 800bfde:	b29b      	uxth	r3, r3
 800bfe0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bfe4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bfe8:	b29a      	uxth	r2, r3
 800bfea:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800bfee:	801a      	strh	r2, [r3, #0]
 800bff0:	e055      	b.n	800c09e <USB_EPStartXfer+0x1040>
 800bff2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bff6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bffa:	681b      	ldr	r3, [r3, #0]
 800bffc:	691b      	ldr	r3, [r3, #16]
 800bffe:	085b      	lsrs	r3, r3, #1
 800c000:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800c004:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c008:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c00c:	681b      	ldr	r3, [r3, #0]
 800c00e:	691b      	ldr	r3, [r3, #16]
 800c010:	f003 0301 	and.w	r3, r3, #1
 800c014:	2b00      	cmp	r3, #0
 800c016:	d004      	beq.n	800c022 <USB_EPStartXfer+0xfc4>
 800c018:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c01c:	3301      	adds	r3, #1
 800c01e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800c022:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c026:	b29b      	uxth	r3, r3
 800c028:	029b      	lsls	r3, r3, #10
 800c02a:	b29a      	uxth	r2, r3
 800c02c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c030:	801a      	strh	r2, [r3, #0]
 800c032:	e034      	b.n	800c09e <USB_EPStartXfer+0x1040>
 800c034:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c038:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c03c:	681b      	ldr	r3, [r3, #0]
 800c03e:	785b      	ldrb	r3, [r3, #1]
 800c040:	2b01      	cmp	r3, #1
 800c042:	d12c      	bne.n	800c09e <USB_EPStartXfer+0x1040>
 800c044:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c048:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c04c:	681b      	ldr	r3, [r3, #0]
 800c04e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c052:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c056:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c05a:	681b      	ldr	r3, [r3, #0]
 800c05c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c060:	b29b      	uxth	r3, r3
 800c062:	461a      	mov	r2, r3
 800c064:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800c068:	4413      	add	r3, r2
 800c06a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c06e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c072:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c076:	681b      	ldr	r3, [r3, #0]
 800c078:	781b      	ldrb	r3, [r3, #0]
 800c07a:	00da      	lsls	r2, r3, #3
 800c07c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800c080:	4413      	add	r3, r2
 800c082:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800c086:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800c08a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c08e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c092:	681b      	ldr	r3, [r3, #0]
 800c094:	691b      	ldr	r3, [r3, #16]
 800c096:	b29a      	uxth	r2, r3
 800c098:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800c09c:	801a      	strh	r2, [r3, #0]
 800c09e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c0a2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c0a6:	681b      	ldr	r3, [r3, #0]
 800c0a8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800c0ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c0b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c0b4:	681b      	ldr	r3, [r3, #0]
 800c0b6:	785b      	ldrb	r3, [r3, #1]
 800c0b8:	2b00      	cmp	r3, #0
 800c0ba:	f040 8091 	bne.w	800c1e0 <USB_EPStartXfer+0x1182>
 800c0be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c0c2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c0c6:	681b      	ldr	r3, [r3, #0]
 800c0c8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800c0cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c0d0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c0d4:	681b      	ldr	r3, [r3, #0]
 800c0d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c0da:	b29b      	uxth	r3, r3
 800c0dc:	461a      	mov	r2, r3
 800c0de:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c0e2:	4413      	add	r3, r2
 800c0e4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800c0e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c0ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c0f0:	681b      	ldr	r3, [r3, #0]
 800c0f2:	781b      	ldrb	r3, [r3, #0]
 800c0f4:	00da      	lsls	r2, r3, #3
 800c0f6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c0fa:	4413      	add	r3, r2
 800c0fc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800c100:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800c104:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c108:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c10c:	681b      	ldr	r3, [r3, #0]
 800c10e:	691b      	ldr	r3, [r3, #16]
 800c110:	2b3e      	cmp	r3, #62	; 0x3e
 800c112:	d925      	bls.n	800c160 <USB_EPStartXfer+0x1102>
 800c114:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c118:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c11c:	681b      	ldr	r3, [r3, #0]
 800c11e:	691b      	ldr	r3, [r3, #16]
 800c120:	095b      	lsrs	r3, r3, #5
 800c122:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800c126:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c12a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c12e:	681b      	ldr	r3, [r3, #0]
 800c130:	691b      	ldr	r3, [r3, #16]
 800c132:	f003 031f 	and.w	r3, r3, #31
 800c136:	2b00      	cmp	r3, #0
 800c138:	d104      	bne.n	800c144 <USB_EPStartXfer+0x10e6>
 800c13a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c13e:	3b01      	subs	r3, #1
 800c140:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800c144:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c148:	b29b      	uxth	r3, r3
 800c14a:	029b      	lsls	r3, r3, #10
 800c14c:	b29b      	uxth	r3, r3
 800c14e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c152:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c156:	b29a      	uxth	r2, r3
 800c158:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c15c:	801a      	strh	r2, [r3, #0]
 800c15e:	e06d      	b.n	800c23c <USB_EPStartXfer+0x11de>
 800c160:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c164:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c168:	681b      	ldr	r3, [r3, #0]
 800c16a:	691b      	ldr	r3, [r3, #16]
 800c16c:	2b00      	cmp	r3, #0
 800c16e:	d116      	bne.n	800c19e <USB_EPStartXfer+0x1140>
 800c170:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c174:	881b      	ldrh	r3, [r3, #0]
 800c176:	b29b      	uxth	r3, r3
 800c178:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800c17c:	b29a      	uxth	r2, r3
 800c17e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c182:	801a      	strh	r2, [r3, #0]
 800c184:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c188:	881b      	ldrh	r3, [r3, #0]
 800c18a:	b29b      	uxth	r3, r3
 800c18c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c190:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c194:	b29a      	uxth	r2, r3
 800c196:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c19a:	801a      	strh	r2, [r3, #0]
 800c19c:	e04e      	b.n	800c23c <USB_EPStartXfer+0x11de>
 800c19e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c1a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c1a6:	681b      	ldr	r3, [r3, #0]
 800c1a8:	691b      	ldr	r3, [r3, #16]
 800c1aa:	085b      	lsrs	r3, r3, #1
 800c1ac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800c1b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c1b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c1b8:	681b      	ldr	r3, [r3, #0]
 800c1ba:	691b      	ldr	r3, [r3, #16]
 800c1bc:	f003 0301 	and.w	r3, r3, #1
 800c1c0:	2b00      	cmp	r3, #0
 800c1c2:	d004      	beq.n	800c1ce <USB_EPStartXfer+0x1170>
 800c1c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c1c8:	3301      	adds	r3, #1
 800c1ca:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800c1ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c1d2:	b29b      	uxth	r3, r3
 800c1d4:	029b      	lsls	r3, r3, #10
 800c1d6:	b29a      	uxth	r2, r3
 800c1d8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c1dc:	801a      	strh	r2, [r3, #0]
 800c1de:	e02d      	b.n	800c23c <USB_EPStartXfer+0x11de>
 800c1e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c1e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c1e8:	681b      	ldr	r3, [r3, #0]
 800c1ea:	785b      	ldrb	r3, [r3, #1]
 800c1ec:	2b01      	cmp	r3, #1
 800c1ee:	d125      	bne.n	800c23c <USB_EPStartXfer+0x11de>
 800c1f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c1f4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c1f8:	681b      	ldr	r3, [r3, #0]
 800c1fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c1fe:	b29b      	uxth	r3, r3
 800c200:	461a      	mov	r2, r3
 800c202:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800c206:	4413      	add	r3, r2
 800c208:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800c20c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c210:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c214:	681b      	ldr	r3, [r3, #0]
 800c216:	781b      	ldrb	r3, [r3, #0]
 800c218:	00da      	lsls	r2, r3, #3
 800c21a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800c21e:	4413      	add	r3, r2
 800c220:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800c224:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800c228:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c22c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c230:	681b      	ldr	r3, [r3, #0]
 800c232:	691b      	ldr	r3, [r3, #16]
 800c234:	b29a      	uxth	r2, r3
 800c236:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c23a:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800c23c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c240:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c244:	681b      	ldr	r3, [r3, #0]
 800c246:	69db      	ldr	r3, [r3, #28]
 800c248:	2b00      	cmp	r3, #0
 800c24a:	f000 81fe 	beq.w	800c64a <USB_EPStartXfer+0x15ec>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800c24e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c252:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c256:	681a      	ldr	r2, [r3, #0]
 800c258:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c25c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c260:	681b      	ldr	r3, [r3, #0]
 800c262:	781b      	ldrb	r3, [r3, #0]
 800c264:	009b      	lsls	r3, r3, #2
 800c266:	4413      	add	r3, r2
 800c268:	881b      	ldrh	r3, [r3, #0]
 800c26a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800c26e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800c272:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c276:	2b00      	cmp	r3, #0
 800c278:	d005      	beq.n	800c286 <USB_EPStartXfer+0x1228>
 800c27a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800c27e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c282:	2b00      	cmp	r3, #0
 800c284:	d10d      	bne.n	800c2a2 <USB_EPStartXfer+0x1244>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800c286:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800c28a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800c28e:	2b00      	cmp	r3, #0
 800c290:	f040 81db 	bne.w	800c64a <USB_EPStartXfer+0x15ec>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800c294:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800c298:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c29c:	2b00      	cmp	r3, #0
 800c29e:	f040 81d4 	bne.w	800c64a <USB_EPStartXfer+0x15ec>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800c2a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c2a6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c2aa:	681a      	ldr	r2, [r3, #0]
 800c2ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c2b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c2b4:	681b      	ldr	r3, [r3, #0]
 800c2b6:	781b      	ldrb	r3, [r3, #0]
 800c2b8:	009b      	lsls	r3, r3, #2
 800c2ba:	4413      	add	r3, r2
 800c2bc:	881b      	ldrh	r3, [r3, #0]
 800c2be:	b29b      	uxth	r3, r3
 800c2c0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c2c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c2c8:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 800c2cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c2d0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c2d4:	681a      	ldr	r2, [r3, #0]
 800c2d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c2da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c2de:	681b      	ldr	r3, [r3, #0]
 800c2e0:	781b      	ldrb	r3, [r3, #0]
 800c2e2:	009b      	lsls	r3, r3, #2
 800c2e4:	441a      	add	r2, r3
 800c2e6:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 800c2ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c2ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c2f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c2f6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800c2fa:	b29b      	uxth	r3, r3
 800c2fc:	8013      	strh	r3, [r2, #0]
 800c2fe:	e1a4      	b.n	800c64a <USB_EPStartXfer+0x15ec>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800c300:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c304:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c308:	681b      	ldr	r3, [r3, #0]
 800c30a:	78db      	ldrb	r3, [r3, #3]
 800c30c:	2b01      	cmp	r3, #1
 800c30e:	f040 819a 	bne.w	800c646 <USB_EPStartXfer+0x15e8>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800c312:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c316:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c31a:	681b      	ldr	r3, [r3, #0]
 800c31c:	699a      	ldr	r2, [r3, #24]
 800c31e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c322:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c326:	681b      	ldr	r3, [r3, #0]
 800c328:	691b      	ldr	r3, [r3, #16]
 800c32a:	429a      	cmp	r2, r3
 800c32c:	d917      	bls.n	800c35e <USB_EPStartXfer+0x1300>
        {
          len = ep->maxpacket;
 800c32e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c332:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c336:	681b      	ldr	r3, [r3, #0]
 800c338:	691b      	ldr	r3, [r3, #16]
 800c33a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 800c33e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c342:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c346:	681b      	ldr	r3, [r3, #0]
 800c348:	699a      	ldr	r2, [r3, #24]
 800c34a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c34e:	1ad2      	subs	r2, r2, r3
 800c350:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c354:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c358:	681b      	ldr	r3, [r3, #0]
 800c35a:	619a      	str	r2, [r3, #24]
 800c35c:	e00e      	b.n	800c37c <USB_EPStartXfer+0x131e>
        }
        else
        {
          len = ep->xfer_len;
 800c35e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c362:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c366:	681b      	ldr	r3, [r3, #0]
 800c368:	699b      	ldr	r3, [r3, #24]
 800c36a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 800c36e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c372:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c376:	681b      	ldr	r3, [r3, #0]
 800c378:	2200      	movs	r2, #0
 800c37a:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800c37c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c380:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c384:	681b      	ldr	r3, [r3, #0]
 800c386:	785b      	ldrb	r3, [r3, #1]
 800c388:	2b00      	cmp	r3, #0
 800c38a:	d178      	bne.n	800c47e <USB_EPStartXfer+0x1420>
 800c38c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c390:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c394:	681b      	ldr	r3, [r3, #0]
 800c396:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800c39a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c39e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c3a2:	681b      	ldr	r3, [r3, #0]
 800c3a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c3a8:	b29b      	uxth	r3, r3
 800c3aa:	461a      	mov	r2, r3
 800c3ac:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800c3b0:	4413      	add	r3, r2
 800c3b2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800c3b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c3ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c3be:	681b      	ldr	r3, [r3, #0]
 800c3c0:	781b      	ldrb	r3, [r3, #0]
 800c3c2:	00da      	lsls	r2, r3, #3
 800c3c4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800c3c8:	4413      	add	r3, r2
 800c3ca:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800c3ce:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800c3d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c3d6:	2b3e      	cmp	r3, #62	; 0x3e
 800c3d8:	d91d      	bls.n	800c416 <USB_EPStartXfer+0x13b8>
 800c3da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c3de:	095b      	lsrs	r3, r3, #5
 800c3e0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800c3e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c3e8:	f003 031f 	and.w	r3, r3, #31
 800c3ec:	2b00      	cmp	r3, #0
 800c3ee:	d104      	bne.n	800c3fa <USB_EPStartXfer+0x139c>
 800c3f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c3f4:	3b01      	subs	r3, #1
 800c3f6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800c3fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c3fe:	b29b      	uxth	r3, r3
 800c400:	029b      	lsls	r3, r3, #10
 800c402:	b29b      	uxth	r3, r3
 800c404:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c408:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c40c:	b29a      	uxth	r2, r3
 800c40e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c412:	801a      	strh	r2, [r3, #0]
 800c414:	e064      	b.n	800c4e0 <USB_EPStartXfer+0x1482>
 800c416:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c41a:	2b00      	cmp	r3, #0
 800c41c:	d116      	bne.n	800c44c <USB_EPStartXfer+0x13ee>
 800c41e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c422:	881b      	ldrh	r3, [r3, #0]
 800c424:	b29b      	uxth	r3, r3
 800c426:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800c42a:	b29a      	uxth	r2, r3
 800c42c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c430:	801a      	strh	r2, [r3, #0]
 800c432:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c436:	881b      	ldrh	r3, [r3, #0]
 800c438:	b29b      	uxth	r3, r3
 800c43a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c43e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c442:	b29a      	uxth	r2, r3
 800c444:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c448:	801a      	strh	r2, [r3, #0]
 800c44a:	e049      	b.n	800c4e0 <USB_EPStartXfer+0x1482>
 800c44c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c450:	085b      	lsrs	r3, r3, #1
 800c452:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800c456:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c45a:	f003 0301 	and.w	r3, r3, #1
 800c45e:	2b00      	cmp	r3, #0
 800c460:	d004      	beq.n	800c46c <USB_EPStartXfer+0x140e>
 800c462:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c466:	3301      	adds	r3, #1
 800c468:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800c46c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c470:	b29b      	uxth	r3, r3
 800c472:	029b      	lsls	r3, r3, #10
 800c474:	b29a      	uxth	r2, r3
 800c476:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c47a:	801a      	strh	r2, [r3, #0]
 800c47c:	e030      	b.n	800c4e0 <USB_EPStartXfer+0x1482>
 800c47e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c482:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c486:	681b      	ldr	r3, [r3, #0]
 800c488:	785b      	ldrb	r3, [r3, #1]
 800c48a:	2b01      	cmp	r3, #1
 800c48c:	d128      	bne.n	800c4e0 <USB_EPStartXfer+0x1482>
 800c48e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c492:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c496:	681b      	ldr	r3, [r3, #0]
 800c498:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800c49c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c4a0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c4a4:	681b      	ldr	r3, [r3, #0]
 800c4a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c4aa:	b29b      	uxth	r3, r3
 800c4ac:	461a      	mov	r2, r3
 800c4ae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c4b2:	4413      	add	r3, r2
 800c4b4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800c4b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c4bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c4c0:	681b      	ldr	r3, [r3, #0]
 800c4c2:	781b      	ldrb	r3, [r3, #0]
 800c4c4:	00da      	lsls	r2, r3, #3
 800c4c6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c4ca:	4413      	add	r3, r2
 800c4cc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800c4d0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800c4d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c4d8:	b29a      	uxth	r2, r3
 800c4da:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800c4de:	801a      	strh	r2, [r3, #0]
 800c4e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c4e4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c4e8:	681b      	ldr	r3, [r3, #0]
 800c4ea:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800c4ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c4f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c4f6:	681b      	ldr	r3, [r3, #0]
 800c4f8:	785b      	ldrb	r3, [r3, #1]
 800c4fa:	2b00      	cmp	r3, #0
 800c4fc:	d178      	bne.n	800c5f0 <USB_EPStartXfer+0x1592>
 800c4fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c502:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c506:	681b      	ldr	r3, [r3, #0]
 800c508:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800c50c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c510:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c514:	681b      	ldr	r3, [r3, #0]
 800c516:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c51a:	b29b      	uxth	r3, r3
 800c51c:	461a      	mov	r2, r3
 800c51e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800c522:	4413      	add	r3, r2
 800c524:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800c528:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c52c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c530:	681b      	ldr	r3, [r3, #0]
 800c532:	781b      	ldrb	r3, [r3, #0]
 800c534:	00da      	lsls	r2, r3, #3
 800c536:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800c53a:	4413      	add	r3, r2
 800c53c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800c540:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800c544:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c548:	2b3e      	cmp	r3, #62	; 0x3e
 800c54a:	d91d      	bls.n	800c588 <USB_EPStartXfer+0x152a>
 800c54c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c550:	095b      	lsrs	r3, r3, #5
 800c552:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800c556:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c55a:	f003 031f 	and.w	r3, r3, #31
 800c55e:	2b00      	cmp	r3, #0
 800c560:	d104      	bne.n	800c56c <USB_EPStartXfer+0x150e>
 800c562:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c566:	3b01      	subs	r3, #1
 800c568:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800c56c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c570:	b29b      	uxth	r3, r3
 800c572:	029b      	lsls	r3, r3, #10
 800c574:	b29b      	uxth	r3, r3
 800c576:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c57a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c57e:	b29a      	uxth	r2, r3
 800c580:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800c584:	801a      	strh	r2, [r3, #0]
 800c586:	e060      	b.n	800c64a <USB_EPStartXfer+0x15ec>
 800c588:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c58c:	2b00      	cmp	r3, #0
 800c58e:	d116      	bne.n	800c5be <USB_EPStartXfer+0x1560>
 800c590:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800c594:	881b      	ldrh	r3, [r3, #0]
 800c596:	b29b      	uxth	r3, r3
 800c598:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800c59c:	b29a      	uxth	r2, r3
 800c59e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800c5a2:	801a      	strh	r2, [r3, #0]
 800c5a4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800c5a8:	881b      	ldrh	r3, [r3, #0]
 800c5aa:	b29b      	uxth	r3, r3
 800c5ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c5b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c5b4:	b29a      	uxth	r2, r3
 800c5b6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800c5ba:	801a      	strh	r2, [r3, #0]
 800c5bc:	e045      	b.n	800c64a <USB_EPStartXfer+0x15ec>
 800c5be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c5c2:	085b      	lsrs	r3, r3, #1
 800c5c4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800c5c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c5cc:	f003 0301 	and.w	r3, r3, #1
 800c5d0:	2b00      	cmp	r3, #0
 800c5d2:	d004      	beq.n	800c5de <USB_EPStartXfer+0x1580>
 800c5d4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c5d8:	3301      	adds	r3, #1
 800c5da:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800c5de:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c5e2:	b29b      	uxth	r3, r3
 800c5e4:	029b      	lsls	r3, r3, #10
 800c5e6:	b29a      	uxth	r2, r3
 800c5e8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800c5ec:	801a      	strh	r2, [r3, #0]
 800c5ee:	e02c      	b.n	800c64a <USB_EPStartXfer+0x15ec>
 800c5f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c5f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c5f8:	681b      	ldr	r3, [r3, #0]
 800c5fa:	785b      	ldrb	r3, [r3, #1]
 800c5fc:	2b01      	cmp	r3, #1
 800c5fe:	d124      	bne.n	800c64a <USB_EPStartXfer+0x15ec>
 800c600:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c604:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c608:	681b      	ldr	r3, [r3, #0]
 800c60a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c60e:	b29b      	uxth	r3, r3
 800c610:	461a      	mov	r2, r3
 800c612:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800c616:	4413      	add	r3, r2
 800c618:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800c61c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c620:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c624:	681b      	ldr	r3, [r3, #0]
 800c626:	781b      	ldrb	r3, [r3, #0]
 800c628:	00da      	lsls	r2, r3, #3
 800c62a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800c62e:	4413      	add	r3, r2
 800c630:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800c634:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800c638:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c63c:	b29a      	uxth	r2, r3
 800c63e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800c642:	801a      	strh	r2, [r3, #0]
 800c644:	e001      	b.n	800c64a <USB_EPStartXfer+0x15ec>
      }
      else
      {
        return HAL_ERROR;
 800c646:	2301      	movs	r3, #1
 800c648:	e03a      	b.n	800c6c0 <USB_EPStartXfer+0x1662>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800c64a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c64e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c652:	681a      	ldr	r2, [r3, #0]
 800c654:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c658:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c65c:	681b      	ldr	r3, [r3, #0]
 800c65e:	781b      	ldrb	r3, [r3, #0]
 800c660:	009b      	lsls	r3, r3, #2
 800c662:	4413      	add	r3, r2
 800c664:	881b      	ldrh	r3, [r3, #0]
 800c666:	b29b      	uxth	r3, r3
 800c668:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c66c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c670:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800c674:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800c678:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800c67c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800c680:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800c684:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800c688:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800c68c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c690:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c694:	681a      	ldr	r2, [r3, #0]
 800c696:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c69a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c69e:	681b      	ldr	r3, [r3, #0]
 800c6a0:	781b      	ldrb	r3, [r3, #0]
 800c6a2:	009b      	lsls	r3, r3, #2
 800c6a4:	441a      	add	r2, r3
 800c6a6:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800c6aa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c6ae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c6b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c6b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c6ba:	b29b      	uxth	r3, r3
 800c6bc:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800c6be:	2300      	movs	r3, #0
}
 800c6c0:	4618      	mov	r0, r3
 800c6c2:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800c6c6:	46bd      	mov	sp, r7
 800c6c8:	bd80      	pop	{r7, pc}

0800c6ca <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800c6ca:	b480      	push	{r7}
 800c6cc:	b085      	sub	sp, #20
 800c6ce:	af00      	add	r7, sp, #0
 800c6d0:	6078      	str	r0, [r7, #4]
 800c6d2:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800c6d4:	683b      	ldr	r3, [r7, #0]
 800c6d6:	785b      	ldrb	r3, [r3, #1]
 800c6d8:	2b00      	cmp	r3, #0
 800c6da:	d020      	beq.n	800c71e <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800c6dc:	687a      	ldr	r2, [r7, #4]
 800c6de:	683b      	ldr	r3, [r7, #0]
 800c6e0:	781b      	ldrb	r3, [r3, #0]
 800c6e2:	009b      	lsls	r3, r3, #2
 800c6e4:	4413      	add	r3, r2
 800c6e6:	881b      	ldrh	r3, [r3, #0]
 800c6e8:	b29b      	uxth	r3, r3
 800c6ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c6ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c6f2:	81bb      	strh	r3, [r7, #12]
 800c6f4:	89bb      	ldrh	r3, [r7, #12]
 800c6f6:	f083 0310 	eor.w	r3, r3, #16
 800c6fa:	81bb      	strh	r3, [r7, #12]
 800c6fc:	687a      	ldr	r2, [r7, #4]
 800c6fe:	683b      	ldr	r3, [r7, #0]
 800c700:	781b      	ldrb	r3, [r3, #0]
 800c702:	009b      	lsls	r3, r3, #2
 800c704:	441a      	add	r2, r3
 800c706:	89bb      	ldrh	r3, [r7, #12]
 800c708:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c70c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c710:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c714:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c718:	b29b      	uxth	r3, r3
 800c71a:	8013      	strh	r3, [r2, #0]
 800c71c:	e01f      	b.n	800c75e <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800c71e:	687a      	ldr	r2, [r7, #4]
 800c720:	683b      	ldr	r3, [r7, #0]
 800c722:	781b      	ldrb	r3, [r3, #0]
 800c724:	009b      	lsls	r3, r3, #2
 800c726:	4413      	add	r3, r2
 800c728:	881b      	ldrh	r3, [r3, #0]
 800c72a:	b29b      	uxth	r3, r3
 800c72c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c730:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c734:	81fb      	strh	r3, [r7, #14]
 800c736:	89fb      	ldrh	r3, [r7, #14]
 800c738:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800c73c:	81fb      	strh	r3, [r7, #14]
 800c73e:	687a      	ldr	r2, [r7, #4]
 800c740:	683b      	ldr	r3, [r7, #0]
 800c742:	781b      	ldrb	r3, [r3, #0]
 800c744:	009b      	lsls	r3, r3, #2
 800c746:	441a      	add	r2, r3
 800c748:	89fb      	ldrh	r3, [r7, #14]
 800c74a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c74e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c752:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c756:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c75a:	b29b      	uxth	r3, r3
 800c75c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800c75e:	2300      	movs	r3, #0
}
 800c760:	4618      	mov	r0, r3
 800c762:	3714      	adds	r7, #20
 800c764:	46bd      	mov	sp, r7
 800c766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c76a:	4770      	bx	lr

0800c76c <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800c76c:	b480      	push	{r7}
 800c76e:	b087      	sub	sp, #28
 800c770:	af00      	add	r7, sp, #0
 800c772:	6078      	str	r0, [r7, #4]
 800c774:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800c776:	683b      	ldr	r3, [r7, #0]
 800c778:	7b1b      	ldrb	r3, [r3, #12]
 800c77a:	2b00      	cmp	r3, #0
 800c77c:	f040 809d 	bne.w	800c8ba <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800c780:	683b      	ldr	r3, [r7, #0]
 800c782:	785b      	ldrb	r3, [r3, #1]
 800c784:	2b00      	cmp	r3, #0
 800c786:	d04c      	beq.n	800c822 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c788:	687a      	ldr	r2, [r7, #4]
 800c78a:	683b      	ldr	r3, [r7, #0]
 800c78c:	781b      	ldrb	r3, [r3, #0]
 800c78e:	009b      	lsls	r3, r3, #2
 800c790:	4413      	add	r3, r2
 800c792:	881b      	ldrh	r3, [r3, #0]
 800c794:	823b      	strh	r3, [r7, #16]
 800c796:	8a3b      	ldrh	r3, [r7, #16]
 800c798:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c79c:	2b00      	cmp	r3, #0
 800c79e:	d01b      	beq.n	800c7d8 <USB_EPClearStall+0x6c>
 800c7a0:	687a      	ldr	r2, [r7, #4]
 800c7a2:	683b      	ldr	r3, [r7, #0]
 800c7a4:	781b      	ldrb	r3, [r3, #0]
 800c7a6:	009b      	lsls	r3, r3, #2
 800c7a8:	4413      	add	r3, r2
 800c7aa:	881b      	ldrh	r3, [r3, #0]
 800c7ac:	b29b      	uxth	r3, r3
 800c7ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c7b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c7b6:	81fb      	strh	r3, [r7, #14]
 800c7b8:	687a      	ldr	r2, [r7, #4]
 800c7ba:	683b      	ldr	r3, [r7, #0]
 800c7bc:	781b      	ldrb	r3, [r3, #0]
 800c7be:	009b      	lsls	r3, r3, #2
 800c7c0:	441a      	add	r2, r3
 800c7c2:	89fb      	ldrh	r3, [r7, #14]
 800c7c4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c7c8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c7cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c7d0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800c7d4:	b29b      	uxth	r3, r3
 800c7d6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800c7d8:	683b      	ldr	r3, [r7, #0]
 800c7da:	78db      	ldrb	r3, [r3, #3]
 800c7dc:	2b01      	cmp	r3, #1
 800c7de:	d06c      	beq.n	800c8ba <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800c7e0:	687a      	ldr	r2, [r7, #4]
 800c7e2:	683b      	ldr	r3, [r7, #0]
 800c7e4:	781b      	ldrb	r3, [r3, #0]
 800c7e6:	009b      	lsls	r3, r3, #2
 800c7e8:	4413      	add	r3, r2
 800c7ea:	881b      	ldrh	r3, [r3, #0]
 800c7ec:	b29b      	uxth	r3, r3
 800c7ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c7f2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c7f6:	81bb      	strh	r3, [r7, #12]
 800c7f8:	89bb      	ldrh	r3, [r7, #12]
 800c7fa:	f083 0320 	eor.w	r3, r3, #32
 800c7fe:	81bb      	strh	r3, [r7, #12]
 800c800:	687a      	ldr	r2, [r7, #4]
 800c802:	683b      	ldr	r3, [r7, #0]
 800c804:	781b      	ldrb	r3, [r3, #0]
 800c806:	009b      	lsls	r3, r3, #2
 800c808:	441a      	add	r2, r3
 800c80a:	89bb      	ldrh	r3, [r7, #12]
 800c80c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c810:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c814:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c818:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c81c:	b29b      	uxth	r3, r3
 800c81e:	8013      	strh	r3, [r2, #0]
 800c820:	e04b      	b.n	800c8ba <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c822:	687a      	ldr	r2, [r7, #4]
 800c824:	683b      	ldr	r3, [r7, #0]
 800c826:	781b      	ldrb	r3, [r3, #0]
 800c828:	009b      	lsls	r3, r3, #2
 800c82a:	4413      	add	r3, r2
 800c82c:	881b      	ldrh	r3, [r3, #0]
 800c82e:	82fb      	strh	r3, [r7, #22]
 800c830:	8afb      	ldrh	r3, [r7, #22]
 800c832:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c836:	2b00      	cmp	r3, #0
 800c838:	d01b      	beq.n	800c872 <USB_EPClearStall+0x106>
 800c83a:	687a      	ldr	r2, [r7, #4]
 800c83c:	683b      	ldr	r3, [r7, #0]
 800c83e:	781b      	ldrb	r3, [r3, #0]
 800c840:	009b      	lsls	r3, r3, #2
 800c842:	4413      	add	r3, r2
 800c844:	881b      	ldrh	r3, [r3, #0]
 800c846:	b29b      	uxth	r3, r3
 800c848:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c84c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c850:	82bb      	strh	r3, [r7, #20]
 800c852:	687a      	ldr	r2, [r7, #4]
 800c854:	683b      	ldr	r3, [r7, #0]
 800c856:	781b      	ldrb	r3, [r3, #0]
 800c858:	009b      	lsls	r3, r3, #2
 800c85a:	441a      	add	r2, r3
 800c85c:	8abb      	ldrh	r3, [r7, #20]
 800c85e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c862:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c866:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800c86a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c86e:	b29b      	uxth	r3, r3
 800c870:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800c872:	687a      	ldr	r2, [r7, #4]
 800c874:	683b      	ldr	r3, [r7, #0]
 800c876:	781b      	ldrb	r3, [r3, #0]
 800c878:	009b      	lsls	r3, r3, #2
 800c87a:	4413      	add	r3, r2
 800c87c:	881b      	ldrh	r3, [r3, #0]
 800c87e:	b29b      	uxth	r3, r3
 800c880:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c884:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c888:	827b      	strh	r3, [r7, #18]
 800c88a:	8a7b      	ldrh	r3, [r7, #18]
 800c88c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800c890:	827b      	strh	r3, [r7, #18]
 800c892:	8a7b      	ldrh	r3, [r7, #18]
 800c894:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800c898:	827b      	strh	r3, [r7, #18]
 800c89a:	687a      	ldr	r2, [r7, #4]
 800c89c:	683b      	ldr	r3, [r7, #0]
 800c89e:	781b      	ldrb	r3, [r3, #0]
 800c8a0:	009b      	lsls	r3, r3, #2
 800c8a2:	441a      	add	r2, r3
 800c8a4:	8a7b      	ldrh	r3, [r7, #18]
 800c8a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c8aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c8ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c8b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c8b6:	b29b      	uxth	r3, r3
 800c8b8:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800c8ba:	2300      	movs	r3, #0
}
 800c8bc:	4618      	mov	r0, r3
 800c8be:	371c      	adds	r7, #28
 800c8c0:	46bd      	mov	sp, r7
 800c8c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8c6:	4770      	bx	lr

0800c8c8 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800c8c8:	b480      	push	{r7}
 800c8ca:	b083      	sub	sp, #12
 800c8cc:	af00      	add	r7, sp, #0
 800c8ce:	6078      	str	r0, [r7, #4]
 800c8d0:	460b      	mov	r3, r1
 800c8d2:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800c8d4:	78fb      	ldrb	r3, [r7, #3]
 800c8d6:	2b00      	cmp	r3, #0
 800c8d8:	d103      	bne.n	800c8e2 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	2280      	movs	r2, #128	; 0x80
 800c8de:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800c8e2:	2300      	movs	r3, #0
}
 800c8e4:	4618      	mov	r0, r3
 800c8e6:	370c      	adds	r7, #12
 800c8e8:	46bd      	mov	sp, r7
 800c8ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8ee:	4770      	bx	lr

0800c8f0 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800c8f0:	b480      	push	{r7}
 800c8f2:	b083      	sub	sp, #12
 800c8f4:	af00      	add	r7, sp, #0
 800c8f6:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800c8fe:	b29b      	uxth	r3, r3
 800c900:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c904:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c908:	b29a      	uxth	r2, r3
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 800c910:	2300      	movs	r3, #0
}
 800c912:	4618      	mov	r0, r3
 800c914:	370c      	adds	r7, #12
 800c916:	46bd      	mov	sp, r7
 800c918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c91c:	4770      	bx	lr

0800c91e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800c91e:	b480      	push	{r7}
 800c920:	b085      	sub	sp, #20
 800c922:	af00      	add	r7, sp, #0
 800c924:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800c92c:	b29b      	uxth	r3, r3
 800c92e:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800c930:	68fb      	ldr	r3, [r7, #12]
}
 800c932:	4618      	mov	r0, r3
 800c934:	3714      	adds	r7, #20
 800c936:	46bd      	mov	sp, r7
 800c938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c93c:	4770      	bx	lr

0800c93e <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800c93e:	b480      	push	{r7}
 800c940:	b08d      	sub	sp, #52	; 0x34
 800c942:	af00      	add	r7, sp, #0
 800c944:	60f8      	str	r0, [r7, #12]
 800c946:	60b9      	str	r1, [r7, #8]
 800c948:	4611      	mov	r1, r2
 800c94a:	461a      	mov	r2, r3
 800c94c:	460b      	mov	r3, r1
 800c94e:	80fb      	strh	r3, [r7, #6]
 800c950:	4613      	mov	r3, r2
 800c952:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800c954:	88bb      	ldrh	r3, [r7, #4]
 800c956:	3301      	adds	r3, #1
 800c958:	085b      	lsrs	r3, r3, #1
 800c95a:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 800c95c:	68fb      	ldr	r3, [r7, #12]
 800c95e:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t temp1;
  uint32_t temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800c960:	68bb      	ldr	r3, [r7, #8]
 800c962:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800c964:	88fa      	ldrh	r2, [r7, #6]
 800c966:	69fb      	ldr	r3, [r7, #28]
 800c968:	4413      	add	r3, r2
 800c96a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c96e:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 800c970:	6a3b      	ldr	r3, [r7, #32]
 800c972:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c974:	e01b      	b.n	800c9ae <USB_WritePMA+0x70>
  {
    temp1 = *pBuf;
 800c976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c978:	781b      	ldrb	r3, [r3, #0]
 800c97a:	61bb      	str	r3, [r7, #24]
    pBuf++;
 800c97c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c97e:	3301      	adds	r3, #1
 800c980:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 800c982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c984:	781b      	ldrb	r3, [r3, #0]
 800c986:	b29b      	uxth	r3, r3
 800c988:	021b      	lsls	r3, r3, #8
 800c98a:	b29b      	uxth	r3, r3
 800c98c:	461a      	mov	r2, r3
 800c98e:	69bb      	ldr	r3, [r7, #24]
 800c990:	4313      	orrs	r3, r2
 800c992:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 800c994:	697b      	ldr	r3, [r7, #20]
 800c996:	b29a      	uxth	r2, r3
 800c998:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c99a:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800c99c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c99e:	3302      	adds	r3, #2
 800c9a0:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800c9a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9a4:	3301      	adds	r3, #1
 800c9a6:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 800c9a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9aa:	3b01      	subs	r3, #1
 800c9ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c9ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9b0:	2b00      	cmp	r3, #0
 800c9b2:	d1e0      	bne.n	800c976 <USB_WritePMA+0x38>
  }
}
 800c9b4:	bf00      	nop
 800c9b6:	bf00      	nop
 800c9b8:	3734      	adds	r7, #52	; 0x34
 800c9ba:	46bd      	mov	sp, r7
 800c9bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9c0:	4770      	bx	lr

0800c9c2 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800c9c2:	b480      	push	{r7}
 800c9c4:	b08b      	sub	sp, #44	; 0x2c
 800c9c6:	af00      	add	r7, sp, #0
 800c9c8:	60f8      	str	r0, [r7, #12]
 800c9ca:	60b9      	str	r1, [r7, #8]
 800c9cc:	4611      	mov	r1, r2
 800c9ce:	461a      	mov	r2, r3
 800c9d0:	460b      	mov	r3, r1
 800c9d2:	80fb      	strh	r3, [r7, #6]
 800c9d4:	4613      	mov	r3, r2
 800c9d6:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800c9d8:	88bb      	ldrh	r3, [r7, #4]
 800c9da:	085b      	lsrs	r3, r3, #1
 800c9dc:	b29b      	uxth	r3, r3
 800c9de:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800c9e0:	68fb      	ldr	r3, [r7, #12]
 800c9e2:	617b      	str	r3, [r7, #20]
  uint32_t i;
  uint32_t temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800c9e4:	68bb      	ldr	r3, [r7, #8]
 800c9e6:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800c9e8:	88fa      	ldrh	r2, [r7, #6]
 800c9ea:	697b      	ldr	r3, [r7, #20]
 800c9ec:	4413      	add	r3, r2
 800c9ee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c9f2:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800c9f4:	69bb      	ldr	r3, [r7, #24]
 800c9f6:	627b      	str	r3, [r7, #36]	; 0x24
 800c9f8:	e018      	b.n	800ca2c <USB_ReadPMA+0x6a>
  {
    temp = *(__IO uint16_t *)pdwVal;
 800c9fa:	6a3b      	ldr	r3, [r7, #32]
 800c9fc:	881b      	ldrh	r3, [r3, #0]
 800c9fe:	b29b      	uxth	r3, r3
 800ca00:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800ca02:	6a3b      	ldr	r3, [r7, #32]
 800ca04:	3302      	adds	r3, #2
 800ca06:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800ca08:	693b      	ldr	r3, [r7, #16]
 800ca0a:	b2da      	uxtb	r2, r3
 800ca0c:	69fb      	ldr	r3, [r7, #28]
 800ca0e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800ca10:	69fb      	ldr	r3, [r7, #28]
 800ca12:	3301      	adds	r3, #1
 800ca14:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800ca16:	693b      	ldr	r3, [r7, #16]
 800ca18:	0a1b      	lsrs	r3, r3, #8
 800ca1a:	b2da      	uxtb	r2, r3
 800ca1c:	69fb      	ldr	r3, [r7, #28]
 800ca1e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800ca20:	69fb      	ldr	r3, [r7, #28]
 800ca22:	3301      	adds	r3, #1
 800ca24:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 800ca26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca28:	3b01      	subs	r3, #1
 800ca2a:	627b      	str	r3, [r7, #36]	; 0x24
 800ca2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca2e:	2b00      	cmp	r3, #0
 800ca30:	d1e3      	bne.n	800c9fa <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800ca32:	88bb      	ldrh	r3, [r7, #4]
 800ca34:	f003 0301 	and.w	r3, r3, #1
 800ca38:	b29b      	uxth	r3, r3
 800ca3a:	2b00      	cmp	r3, #0
 800ca3c:	d007      	beq.n	800ca4e <USB_ReadPMA+0x8c>
  {
    temp = *pdwVal;
 800ca3e:	6a3b      	ldr	r3, [r7, #32]
 800ca40:	881b      	ldrh	r3, [r3, #0]
 800ca42:	b29b      	uxth	r3, r3
 800ca44:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800ca46:	693b      	ldr	r3, [r7, #16]
 800ca48:	b2da      	uxtb	r2, r3
 800ca4a:	69fb      	ldr	r3, [r7, #28]
 800ca4c:	701a      	strb	r2, [r3, #0]
  }
}
 800ca4e:	bf00      	nop
 800ca50:	372c      	adds	r7, #44	; 0x2c
 800ca52:	46bd      	mov	sp, r7
 800ca54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca58:	4770      	bx	lr

0800ca5a <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ca5a:	b580      	push	{r7, lr}
 800ca5c:	b084      	sub	sp, #16
 800ca5e:	af00      	add	r7, sp, #0
 800ca60:	6078      	str	r0, [r7, #4]
 800ca62:	460b      	mov	r3, r1
 800ca64:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800ca66:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800ca6a:	f004 f973 	bl	8010d54 <USBD_static_malloc>
 800ca6e:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800ca70:	68fb      	ldr	r3, [r7, #12]
 800ca72:	2b00      	cmp	r3, #0
 800ca74:	d105      	bne.n	800ca82 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	2200      	movs	r2, #0
 800ca7a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800ca7e:	2302      	movs	r3, #2
 800ca80:	e066      	b.n	800cb50 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	68fa      	ldr	r2, [r7, #12]
 800ca86:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	7c1b      	ldrb	r3, [r3, #16]
 800ca8e:	2b00      	cmp	r3, #0
 800ca90:	d119      	bne.n	800cac6 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800ca92:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ca96:	2202      	movs	r2, #2
 800ca98:	2181      	movs	r1, #129	; 0x81
 800ca9a:	6878      	ldr	r0, [r7, #4]
 800ca9c:	f003 ffff 	bl	8010a9e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	2201      	movs	r2, #1
 800caa4:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800caa6:	f44f 7300 	mov.w	r3, #512	; 0x200
 800caaa:	2202      	movs	r2, #2
 800caac:	2101      	movs	r1, #1
 800caae:	6878      	ldr	r0, [r7, #4]
 800cab0:	f003 fff5 	bl	8010a9e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	2201      	movs	r2, #1
 800cab8:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	2210      	movs	r2, #16
 800cac0:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800cac4:	e016      	b.n	800caf4 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800cac6:	2340      	movs	r3, #64	; 0x40
 800cac8:	2202      	movs	r2, #2
 800caca:	2181      	movs	r1, #129	; 0x81
 800cacc:	6878      	ldr	r0, [r7, #4]
 800cace:	f003 ffe6 	bl	8010a9e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	2201      	movs	r2, #1
 800cad6:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800cad8:	2340      	movs	r3, #64	; 0x40
 800cada:	2202      	movs	r2, #2
 800cadc:	2101      	movs	r1, #1
 800cade:	6878      	ldr	r0, [r7, #4]
 800cae0:	f003 ffdd 	bl	8010a9e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	2201      	movs	r2, #1
 800cae8:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	2210      	movs	r2, #16
 800caf0:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800caf4:	2308      	movs	r3, #8
 800caf6:	2203      	movs	r2, #3
 800caf8:	2182      	movs	r1, #130	; 0x82
 800cafa:	6878      	ldr	r0, [r7, #4]
 800cafc:	f003 ffcf 	bl	8010a9e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	2201      	movs	r2, #1
 800cb04:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800cb0e:	681b      	ldr	r3, [r3, #0]
 800cb10:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800cb12:	68fb      	ldr	r3, [r7, #12]
 800cb14:	2200      	movs	r2, #0
 800cb16:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800cb1a:	68fb      	ldr	r3, [r7, #12]
 800cb1c:	2200      	movs	r2, #0
 800cb1e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	7c1b      	ldrb	r3, [r3, #16]
 800cb26:	2b00      	cmp	r3, #0
 800cb28:	d109      	bne.n	800cb3e <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800cb2a:	68fb      	ldr	r3, [r7, #12]
 800cb2c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800cb30:	f44f 7300 	mov.w	r3, #512	; 0x200
 800cb34:	2101      	movs	r1, #1
 800cb36:	6878      	ldr	r0, [r7, #4]
 800cb38:	f004 f8a1 	bl	8010c7e <USBD_LL_PrepareReceive>
 800cb3c:	e007      	b.n	800cb4e <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800cb3e:	68fb      	ldr	r3, [r7, #12]
 800cb40:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800cb44:	2340      	movs	r3, #64	; 0x40
 800cb46:	2101      	movs	r1, #1
 800cb48:	6878      	ldr	r0, [r7, #4]
 800cb4a:	f004 f898 	bl	8010c7e <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800cb4e:	2300      	movs	r3, #0
}
 800cb50:	4618      	mov	r0, r3
 800cb52:	3710      	adds	r7, #16
 800cb54:	46bd      	mov	sp, r7
 800cb56:	bd80      	pop	{r7, pc}

0800cb58 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800cb58:	b580      	push	{r7, lr}
 800cb5a:	b082      	sub	sp, #8
 800cb5c:	af00      	add	r7, sp, #0
 800cb5e:	6078      	str	r0, [r7, #4]
 800cb60:	460b      	mov	r3, r1
 800cb62:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800cb64:	2181      	movs	r1, #129	; 0x81
 800cb66:	6878      	ldr	r0, [r7, #4]
 800cb68:	f003 ffbf 	bl	8010aea <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	2200      	movs	r2, #0
 800cb70:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800cb72:	2101      	movs	r1, #1
 800cb74:	6878      	ldr	r0, [r7, #4]
 800cb76:	f003 ffb8 	bl	8010aea <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	2200      	movs	r2, #0
 800cb7e:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800cb82:	2182      	movs	r1, #130	; 0x82
 800cb84:	6878      	ldr	r0, [r7, #4]
 800cb86:	f003 ffb0 	bl	8010aea <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	2200      	movs	r2, #0
 800cb8e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	2200      	movs	r2, #0
 800cb96:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800cba0:	2b00      	cmp	r3, #0
 800cba2:	d00e      	beq.n	800cbc2 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800cbaa:	685b      	ldr	r3, [r3, #4]
 800cbac:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800cbb4:	4618      	mov	r0, r3
 800cbb6:	f004 f8db 	bl	8010d70 <USBD_static_free>
    pdev->pClassData = NULL;
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	2200      	movs	r2, #0
 800cbbe:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800cbc2:	2300      	movs	r3, #0
}
 800cbc4:	4618      	mov	r0, r3
 800cbc6:	3708      	adds	r7, #8
 800cbc8:	46bd      	mov	sp, r7
 800cbca:	bd80      	pop	{r7, pc}

0800cbcc <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800cbcc:	b580      	push	{r7, lr}
 800cbce:	b086      	sub	sp, #24
 800cbd0:	af00      	add	r7, sp, #0
 800cbd2:	6078      	str	r0, [r7, #4]
 800cbd4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800cbdc:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800cbde:	2300      	movs	r3, #0
 800cbe0:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800cbe2:	2300      	movs	r3, #0
 800cbe4:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800cbe6:	2300      	movs	r3, #0
 800cbe8:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800cbea:	693b      	ldr	r3, [r7, #16]
 800cbec:	2b00      	cmp	r3, #0
 800cbee:	d101      	bne.n	800cbf4 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800cbf0:	2303      	movs	r3, #3
 800cbf2:	e0af      	b.n	800cd54 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800cbf4:	683b      	ldr	r3, [r7, #0]
 800cbf6:	781b      	ldrb	r3, [r3, #0]
 800cbf8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800cbfc:	2b00      	cmp	r3, #0
 800cbfe:	d03f      	beq.n	800cc80 <USBD_CDC_Setup+0xb4>
 800cc00:	2b20      	cmp	r3, #32
 800cc02:	f040 809f 	bne.w	800cd44 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800cc06:	683b      	ldr	r3, [r7, #0]
 800cc08:	88db      	ldrh	r3, [r3, #6]
 800cc0a:	2b00      	cmp	r3, #0
 800cc0c:	d02e      	beq.n	800cc6c <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800cc0e:	683b      	ldr	r3, [r7, #0]
 800cc10:	781b      	ldrb	r3, [r3, #0]
 800cc12:	b25b      	sxtb	r3, r3
 800cc14:	2b00      	cmp	r3, #0
 800cc16:	da16      	bge.n	800cc46 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800cc1e:	689b      	ldr	r3, [r3, #8]
 800cc20:	683a      	ldr	r2, [r7, #0]
 800cc22:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800cc24:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800cc26:	683a      	ldr	r2, [r7, #0]
 800cc28:	88d2      	ldrh	r2, [r2, #6]
 800cc2a:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800cc2c:	683b      	ldr	r3, [r7, #0]
 800cc2e:	88db      	ldrh	r3, [r3, #6]
 800cc30:	2b07      	cmp	r3, #7
 800cc32:	bf28      	it	cs
 800cc34:	2307      	movcs	r3, #7
 800cc36:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800cc38:	693b      	ldr	r3, [r7, #16]
 800cc3a:	89fa      	ldrh	r2, [r7, #14]
 800cc3c:	4619      	mov	r1, r3
 800cc3e:	6878      	ldr	r0, [r7, #4]
 800cc40:	f001 fa9f 	bl	800e182 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800cc44:	e085      	b.n	800cd52 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800cc46:	683b      	ldr	r3, [r7, #0]
 800cc48:	785a      	ldrb	r2, [r3, #1]
 800cc4a:	693b      	ldr	r3, [r7, #16]
 800cc4c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800cc50:	683b      	ldr	r3, [r7, #0]
 800cc52:	88db      	ldrh	r3, [r3, #6]
 800cc54:	b2da      	uxtb	r2, r3
 800cc56:	693b      	ldr	r3, [r7, #16]
 800cc58:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800cc5c:	6939      	ldr	r1, [r7, #16]
 800cc5e:	683b      	ldr	r3, [r7, #0]
 800cc60:	88db      	ldrh	r3, [r3, #6]
 800cc62:	461a      	mov	r2, r3
 800cc64:	6878      	ldr	r0, [r7, #4]
 800cc66:	f001 fab8 	bl	800e1da <USBD_CtlPrepareRx>
      break;
 800cc6a:	e072      	b.n	800cd52 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800cc72:	689b      	ldr	r3, [r3, #8]
 800cc74:	683a      	ldr	r2, [r7, #0]
 800cc76:	7850      	ldrb	r0, [r2, #1]
 800cc78:	2200      	movs	r2, #0
 800cc7a:	6839      	ldr	r1, [r7, #0]
 800cc7c:	4798      	blx	r3
      break;
 800cc7e:	e068      	b.n	800cd52 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800cc80:	683b      	ldr	r3, [r7, #0]
 800cc82:	785b      	ldrb	r3, [r3, #1]
 800cc84:	2b0b      	cmp	r3, #11
 800cc86:	d852      	bhi.n	800cd2e <USBD_CDC_Setup+0x162>
 800cc88:	a201      	add	r2, pc, #4	; (adr r2, 800cc90 <USBD_CDC_Setup+0xc4>)
 800cc8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc8e:	bf00      	nop
 800cc90:	0800ccc1 	.word	0x0800ccc1
 800cc94:	0800cd3d 	.word	0x0800cd3d
 800cc98:	0800cd2f 	.word	0x0800cd2f
 800cc9c:	0800cd2f 	.word	0x0800cd2f
 800cca0:	0800cd2f 	.word	0x0800cd2f
 800cca4:	0800cd2f 	.word	0x0800cd2f
 800cca8:	0800cd2f 	.word	0x0800cd2f
 800ccac:	0800cd2f 	.word	0x0800cd2f
 800ccb0:	0800cd2f 	.word	0x0800cd2f
 800ccb4:	0800cd2f 	.word	0x0800cd2f
 800ccb8:	0800cceb 	.word	0x0800cceb
 800ccbc:	0800cd15 	.word	0x0800cd15
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ccc6:	b2db      	uxtb	r3, r3
 800ccc8:	2b03      	cmp	r3, #3
 800ccca:	d107      	bne.n	800ccdc <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800cccc:	f107 030a 	add.w	r3, r7, #10
 800ccd0:	2202      	movs	r2, #2
 800ccd2:	4619      	mov	r1, r3
 800ccd4:	6878      	ldr	r0, [r7, #4]
 800ccd6:	f001 fa54 	bl	800e182 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800ccda:	e032      	b.n	800cd42 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800ccdc:	6839      	ldr	r1, [r7, #0]
 800ccde:	6878      	ldr	r0, [r7, #4]
 800cce0:	f001 f9de 	bl	800e0a0 <USBD_CtlError>
            ret = USBD_FAIL;
 800cce4:	2303      	movs	r3, #3
 800cce6:	75fb      	strb	r3, [r7, #23]
          break;
 800cce8:	e02b      	b.n	800cd42 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ccf0:	b2db      	uxtb	r3, r3
 800ccf2:	2b03      	cmp	r3, #3
 800ccf4:	d107      	bne.n	800cd06 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800ccf6:	f107 030d 	add.w	r3, r7, #13
 800ccfa:	2201      	movs	r2, #1
 800ccfc:	4619      	mov	r1, r3
 800ccfe:	6878      	ldr	r0, [r7, #4]
 800cd00:	f001 fa3f 	bl	800e182 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800cd04:	e01d      	b.n	800cd42 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800cd06:	6839      	ldr	r1, [r7, #0]
 800cd08:	6878      	ldr	r0, [r7, #4]
 800cd0a:	f001 f9c9 	bl	800e0a0 <USBD_CtlError>
            ret = USBD_FAIL;
 800cd0e:	2303      	movs	r3, #3
 800cd10:	75fb      	strb	r3, [r7, #23]
          break;
 800cd12:	e016      	b.n	800cd42 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cd1a:	b2db      	uxtb	r3, r3
 800cd1c:	2b03      	cmp	r3, #3
 800cd1e:	d00f      	beq.n	800cd40 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800cd20:	6839      	ldr	r1, [r7, #0]
 800cd22:	6878      	ldr	r0, [r7, #4]
 800cd24:	f001 f9bc 	bl	800e0a0 <USBD_CtlError>
            ret = USBD_FAIL;
 800cd28:	2303      	movs	r3, #3
 800cd2a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800cd2c:	e008      	b.n	800cd40 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800cd2e:	6839      	ldr	r1, [r7, #0]
 800cd30:	6878      	ldr	r0, [r7, #4]
 800cd32:	f001 f9b5 	bl	800e0a0 <USBD_CtlError>
          ret = USBD_FAIL;
 800cd36:	2303      	movs	r3, #3
 800cd38:	75fb      	strb	r3, [r7, #23]
          break;
 800cd3a:	e002      	b.n	800cd42 <USBD_CDC_Setup+0x176>
          break;
 800cd3c:	bf00      	nop
 800cd3e:	e008      	b.n	800cd52 <USBD_CDC_Setup+0x186>
          break;
 800cd40:	bf00      	nop
      }
      break;
 800cd42:	e006      	b.n	800cd52 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800cd44:	6839      	ldr	r1, [r7, #0]
 800cd46:	6878      	ldr	r0, [r7, #4]
 800cd48:	f001 f9aa 	bl	800e0a0 <USBD_CtlError>
      ret = USBD_FAIL;
 800cd4c:	2303      	movs	r3, #3
 800cd4e:	75fb      	strb	r3, [r7, #23]
      break;
 800cd50:	bf00      	nop
  }

  return (uint8_t)ret;
 800cd52:	7dfb      	ldrb	r3, [r7, #23]
}
 800cd54:	4618      	mov	r0, r3
 800cd56:	3718      	adds	r7, #24
 800cd58:	46bd      	mov	sp, r7
 800cd5a:	bd80      	pop	{r7, pc}

0800cd5c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800cd5c:	b580      	push	{r7, lr}
 800cd5e:	b084      	sub	sp, #16
 800cd60:	af00      	add	r7, sp, #0
 800cd62:	6078      	str	r0, [r7, #4]
 800cd64:	460b      	mov	r3, r1
 800cd66:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800cd6e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800cd76:	2b00      	cmp	r3, #0
 800cd78:	d101      	bne.n	800cd7e <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800cd7a:	2303      	movs	r3, #3
 800cd7c:	e04f      	b.n	800ce1e <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800cd84:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800cd86:	78fa      	ldrb	r2, [r7, #3]
 800cd88:	6879      	ldr	r1, [r7, #4]
 800cd8a:	4613      	mov	r3, r2
 800cd8c:	009b      	lsls	r3, r3, #2
 800cd8e:	4413      	add	r3, r2
 800cd90:	009b      	lsls	r3, r3, #2
 800cd92:	440b      	add	r3, r1
 800cd94:	3318      	adds	r3, #24
 800cd96:	681b      	ldr	r3, [r3, #0]
 800cd98:	2b00      	cmp	r3, #0
 800cd9a:	d029      	beq.n	800cdf0 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800cd9c:	78fa      	ldrb	r2, [r7, #3]
 800cd9e:	6879      	ldr	r1, [r7, #4]
 800cda0:	4613      	mov	r3, r2
 800cda2:	009b      	lsls	r3, r3, #2
 800cda4:	4413      	add	r3, r2
 800cda6:	009b      	lsls	r3, r3, #2
 800cda8:	440b      	add	r3, r1
 800cdaa:	3318      	adds	r3, #24
 800cdac:	681a      	ldr	r2, [r3, #0]
 800cdae:	78f9      	ldrb	r1, [r7, #3]
 800cdb0:	68f8      	ldr	r0, [r7, #12]
 800cdb2:	460b      	mov	r3, r1
 800cdb4:	009b      	lsls	r3, r3, #2
 800cdb6:	440b      	add	r3, r1
 800cdb8:	00db      	lsls	r3, r3, #3
 800cdba:	4403      	add	r3, r0
 800cdbc:	3338      	adds	r3, #56	; 0x38
 800cdbe:	681b      	ldr	r3, [r3, #0]
 800cdc0:	fbb2 f1f3 	udiv	r1, r2, r3
 800cdc4:	fb01 f303 	mul.w	r3, r1, r3
 800cdc8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800cdca:	2b00      	cmp	r3, #0
 800cdcc:	d110      	bne.n	800cdf0 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800cdce:	78fa      	ldrb	r2, [r7, #3]
 800cdd0:	6879      	ldr	r1, [r7, #4]
 800cdd2:	4613      	mov	r3, r2
 800cdd4:	009b      	lsls	r3, r3, #2
 800cdd6:	4413      	add	r3, r2
 800cdd8:	009b      	lsls	r3, r3, #2
 800cdda:	440b      	add	r3, r1
 800cddc:	3318      	adds	r3, #24
 800cdde:	2200      	movs	r2, #0
 800cde0:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800cde2:	78f9      	ldrb	r1, [r7, #3]
 800cde4:	2300      	movs	r3, #0
 800cde6:	2200      	movs	r2, #0
 800cde8:	6878      	ldr	r0, [r7, #4]
 800cdea:	f003 ff27 	bl	8010c3c <USBD_LL_Transmit>
 800cdee:	e015      	b.n	800ce1c <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800cdf0:	68bb      	ldr	r3, [r7, #8]
 800cdf2:	2200      	movs	r2, #0
 800cdf4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800cdfe:	691b      	ldr	r3, [r3, #16]
 800ce00:	2b00      	cmp	r3, #0
 800ce02:	d00b      	beq.n	800ce1c <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ce0a:	691b      	ldr	r3, [r3, #16]
 800ce0c:	68ba      	ldr	r2, [r7, #8]
 800ce0e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800ce12:	68ba      	ldr	r2, [r7, #8]
 800ce14:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800ce18:	78fa      	ldrb	r2, [r7, #3]
 800ce1a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800ce1c:	2300      	movs	r3, #0
}
 800ce1e:	4618      	mov	r0, r3
 800ce20:	3710      	adds	r7, #16
 800ce22:	46bd      	mov	sp, r7
 800ce24:	bd80      	pop	{r7, pc}

0800ce26 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800ce26:	b580      	push	{r7, lr}
 800ce28:	b084      	sub	sp, #16
 800ce2a:	af00      	add	r7, sp, #0
 800ce2c:	6078      	str	r0, [r7, #4]
 800ce2e:	460b      	mov	r3, r1
 800ce30:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ce38:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ce40:	2b00      	cmp	r3, #0
 800ce42:	d101      	bne.n	800ce48 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800ce44:	2303      	movs	r3, #3
 800ce46:	e015      	b.n	800ce74 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800ce48:	78fb      	ldrb	r3, [r7, #3]
 800ce4a:	4619      	mov	r1, r3
 800ce4c:	6878      	ldr	r0, [r7, #4]
 800ce4e:	f003 ff37 	bl	8010cc0 <USBD_LL_GetRxDataSize>
 800ce52:	4602      	mov	r2, r0
 800ce54:	68fb      	ldr	r3, [r7, #12]
 800ce56:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ce60:	68db      	ldr	r3, [r3, #12]
 800ce62:	68fa      	ldr	r2, [r7, #12]
 800ce64:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800ce68:	68fa      	ldr	r2, [r7, #12]
 800ce6a:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800ce6e:	4611      	mov	r1, r2
 800ce70:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800ce72:	2300      	movs	r3, #0
}
 800ce74:	4618      	mov	r0, r3
 800ce76:	3710      	adds	r7, #16
 800ce78:	46bd      	mov	sp, r7
 800ce7a:	bd80      	pop	{r7, pc}

0800ce7c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800ce7c:	b580      	push	{r7, lr}
 800ce7e:	b084      	sub	sp, #16
 800ce80:	af00      	add	r7, sp, #0
 800ce82:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ce8a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800ce8c:	68fb      	ldr	r3, [r7, #12]
 800ce8e:	2b00      	cmp	r3, #0
 800ce90:	d101      	bne.n	800ce96 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800ce92:	2303      	movs	r3, #3
 800ce94:	e01b      	b.n	800cece <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ce9c:	2b00      	cmp	r3, #0
 800ce9e:	d015      	beq.n	800cecc <USBD_CDC_EP0_RxReady+0x50>
 800cea0:	68fb      	ldr	r3, [r7, #12]
 800cea2:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800cea6:	2bff      	cmp	r3, #255	; 0xff
 800cea8:	d010      	beq.n	800cecc <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ceb0:	689b      	ldr	r3, [r3, #8]
 800ceb2:	68fa      	ldr	r2, [r7, #12]
 800ceb4:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800ceb8:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800ceba:	68fa      	ldr	r2, [r7, #12]
 800cebc:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800cec0:	b292      	uxth	r2, r2
 800cec2:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800cec4:	68fb      	ldr	r3, [r7, #12]
 800cec6:	22ff      	movs	r2, #255	; 0xff
 800cec8:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800cecc:	2300      	movs	r3, #0
}
 800cece:	4618      	mov	r0, r3
 800ced0:	3710      	adds	r7, #16
 800ced2:	46bd      	mov	sp, r7
 800ced4:	bd80      	pop	{r7, pc}
	...

0800ced8 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800ced8:	b480      	push	{r7}
 800ceda:	b083      	sub	sp, #12
 800cedc:	af00      	add	r7, sp, #0
 800cede:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	2243      	movs	r2, #67	; 0x43
 800cee4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800cee6:	4b03      	ldr	r3, [pc, #12]	; (800cef4 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800cee8:	4618      	mov	r0, r3
 800ceea:	370c      	adds	r7, #12
 800ceec:	46bd      	mov	sp, r7
 800ceee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cef2:	4770      	bx	lr
 800cef4:	20000094 	.word	0x20000094

0800cef8 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800cef8:	b480      	push	{r7}
 800cefa:	b083      	sub	sp, #12
 800cefc:	af00      	add	r7, sp, #0
 800cefe:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	2243      	movs	r2, #67	; 0x43
 800cf04:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800cf06:	4b03      	ldr	r3, [pc, #12]	; (800cf14 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800cf08:	4618      	mov	r0, r3
 800cf0a:	370c      	adds	r7, #12
 800cf0c:	46bd      	mov	sp, r7
 800cf0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf12:	4770      	bx	lr
 800cf14:	20000050 	.word	0x20000050

0800cf18 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800cf18:	b480      	push	{r7}
 800cf1a:	b083      	sub	sp, #12
 800cf1c:	af00      	add	r7, sp, #0
 800cf1e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	2243      	movs	r2, #67	; 0x43
 800cf24:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800cf26:	4b03      	ldr	r3, [pc, #12]	; (800cf34 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800cf28:	4618      	mov	r0, r3
 800cf2a:	370c      	adds	r7, #12
 800cf2c:	46bd      	mov	sp, r7
 800cf2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf32:	4770      	bx	lr
 800cf34:	200000d8 	.word	0x200000d8

0800cf38 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800cf38:	b480      	push	{r7}
 800cf3a:	b083      	sub	sp, #12
 800cf3c:	af00      	add	r7, sp, #0
 800cf3e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	220a      	movs	r2, #10
 800cf44:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800cf46:	4b03      	ldr	r3, [pc, #12]	; (800cf54 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800cf48:	4618      	mov	r0, r3
 800cf4a:	370c      	adds	r7, #12
 800cf4c:	46bd      	mov	sp, r7
 800cf4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf52:	4770      	bx	lr
 800cf54:	2000000c 	.word	0x2000000c

0800cf58 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800cf58:	b480      	push	{r7}
 800cf5a:	b083      	sub	sp, #12
 800cf5c:	af00      	add	r7, sp, #0
 800cf5e:	6078      	str	r0, [r7, #4]
 800cf60:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800cf62:	683b      	ldr	r3, [r7, #0]
 800cf64:	2b00      	cmp	r3, #0
 800cf66:	d101      	bne.n	800cf6c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800cf68:	2303      	movs	r3, #3
 800cf6a:	e004      	b.n	800cf76 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	683a      	ldr	r2, [r7, #0]
 800cf70:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800cf74:	2300      	movs	r3, #0
}
 800cf76:	4618      	mov	r0, r3
 800cf78:	370c      	adds	r7, #12
 800cf7a:	46bd      	mov	sp, r7
 800cf7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf80:	4770      	bx	lr

0800cf82 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800cf82:	b480      	push	{r7}
 800cf84:	b087      	sub	sp, #28
 800cf86:	af00      	add	r7, sp, #0
 800cf88:	60f8      	str	r0, [r7, #12]
 800cf8a:	60b9      	str	r1, [r7, #8]
 800cf8c:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800cf8e:	68fb      	ldr	r3, [r7, #12]
 800cf90:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800cf94:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800cf96:	697b      	ldr	r3, [r7, #20]
 800cf98:	2b00      	cmp	r3, #0
 800cf9a:	d101      	bne.n	800cfa0 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800cf9c:	2303      	movs	r3, #3
 800cf9e:	e008      	b.n	800cfb2 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800cfa0:	697b      	ldr	r3, [r7, #20]
 800cfa2:	68ba      	ldr	r2, [r7, #8]
 800cfa4:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800cfa8:	697b      	ldr	r3, [r7, #20]
 800cfaa:	687a      	ldr	r2, [r7, #4]
 800cfac:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800cfb0:	2300      	movs	r3, #0
}
 800cfb2:	4618      	mov	r0, r3
 800cfb4:	371c      	adds	r7, #28
 800cfb6:	46bd      	mov	sp, r7
 800cfb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfbc:	4770      	bx	lr

0800cfbe <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800cfbe:	b480      	push	{r7}
 800cfc0:	b085      	sub	sp, #20
 800cfc2:	af00      	add	r7, sp, #0
 800cfc4:	6078      	str	r0, [r7, #4]
 800cfc6:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800cfce:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800cfd0:	68fb      	ldr	r3, [r7, #12]
 800cfd2:	2b00      	cmp	r3, #0
 800cfd4:	d101      	bne.n	800cfda <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800cfd6:	2303      	movs	r3, #3
 800cfd8:	e004      	b.n	800cfe4 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800cfda:	68fb      	ldr	r3, [r7, #12]
 800cfdc:	683a      	ldr	r2, [r7, #0]
 800cfde:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800cfe2:	2300      	movs	r3, #0
}
 800cfe4:	4618      	mov	r0, r3
 800cfe6:	3714      	adds	r7, #20
 800cfe8:	46bd      	mov	sp, r7
 800cfea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfee:	4770      	bx	lr

0800cff0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800cff0:	b580      	push	{r7, lr}
 800cff2:	b084      	sub	sp, #16
 800cff4:	af00      	add	r7, sp, #0
 800cff6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800cffe:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d006:	2b00      	cmp	r3, #0
 800d008:	d101      	bne.n	800d00e <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800d00a:	2303      	movs	r3, #3
 800d00c:	e016      	b.n	800d03c <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	7c1b      	ldrb	r3, [r3, #16]
 800d012:	2b00      	cmp	r3, #0
 800d014:	d109      	bne.n	800d02a <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800d016:	68fb      	ldr	r3, [r7, #12]
 800d018:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d01c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d020:	2101      	movs	r1, #1
 800d022:	6878      	ldr	r0, [r7, #4]
 800d024:	f003 fe2b 	bl	8010c7e <USBD_LL_PrepareReceive>
 800d028:	e007      	b.n	800d03a <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800d02a:	68fb      	ldr	r3, [r7, #12]
 800d02c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d030:	2340      	movs	r3, #64	; 0x40
 800d032:	2101      	movs	r1, #1
 800d034:	6878      	ldr	r0, [r7, #4]
 800d036:	f003 fe22 	bl	8010c7e <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800d03a:	2300      	movs	r3, #0
}
 800d03c:	4618      	mov	r0, r3
 800d03e:	3710      	adds	r7, #16
 800d040:	46bd      	mov	sp, r7
 800d042:	bd80      	pop	{r7, pc}

0800d044 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800d044:	b580      	push	{r7, lr}
 800d046:	b086      	sub	sp, #24
 800d048:	af00      	add	r7, sp, #0
 800d04a:	60f8      	str	r0, [r7, #12]
 800d04c:	60b9      	str	r1, [r7, #8]
 800d04e:	4613      	mov	r3, r2
 800d050:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800d052:	68fb      	ldr	r3, [r7, #12]
 800d054:	2b00      	cmp	r3, #0
 800d056:	d101      	bne.n	800d05c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800d058:	2303      	movs	r3, #3
 800d05a:	e01f      	b.n	800d09c <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800d05c:	68fb      	ldr	r3, [r7, #12]
 800d05e:	2200      	movs	r2, #0
 800d060:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800d064:	68fb      	ldr	r3, [r7, #12]
 800d066:	2200      	movs	r2, #0
 800d068:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800d06c:	68fb      	ldr	r3, [r7, #12]
 800d06e:	2200      	movs	r2, #0
 800d070:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800d074:	68bb      	ldr	r3, [r7, #8]
 800d076:	2b00      	cmp	r3, #0
 800d078:	d003      	beq.n	800d082 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800d07a:	68fb      	ldr	r3, [r7, #12]
 800d07c:	68ba      	ldr	r2, [r7, #8]
 800d07e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d082:	68fb      	ldr	r3, [r7, #12]
 800d084:	2201      	movs	r2, #1
 800d086:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800d08a:	68fb      	ldr	r3, [r7, #12]
 800d08c:	79fa      	ldrb	r2, [r7, #7]
 800d08e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800d090:	68f8      	ldr	r0, [r7, #12]
 800d092:	f003 fc89 	bl	80109a8 <USBD_LL_Init>
 800d096:	4603      	mov	r3, r0
 800d098:	75fb      	strb	r3, [r7, #23]

  return ret;
 800d09a:	7dfb      	ldrb	r3, [r7, #23]
}
 800d09c:	4618      	mov	r0, r3
 800d09e:	3718      	adds	r7, #24
 800d0a0:	46bd      	mov	sp, r7
 800d0a2:	bd80      	pop	{r7, pc}

0800d0a4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800d0a4:	b580      	push	{r7, lr}
 800d0a6:	b084      	sub	sp, #16
 800d0a8:	af00      	add	r7, sp, #0
 800d0aa:	6078      	str	r0, [r7, #4]
 800d0ac:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800d0ae:	2300      	movs	r3, #0
 800d0b0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800d0b2:	683b      	ldr	r3, [r7, #0]
 800d0b4:	2b00      	cmp	r3, #0
 800d0b6:	d101      	bne.n	800d0bc <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800d0b8:	2303      	movs	r3, #3
 800d0ba:	e016      	b.n	800d0ea <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	683a      	ldr	r2, [r7, #0]
 800d0c0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d0ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d0cc:	2b00      	cmp	r3, #0
 800d0ce:	d00b      	beq.n	800d0e8 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d0d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d0d8:	f107 020e 	add.w	r2, r7, #14
 800d0dc:	4610      	mov	r0, r2
 800d0de:	4798      	blx	r3
 800d0e0:	4602      	mov	r2, r0
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800d0e8:	2300      	movs	r3, #0
}
 800d0ea:	4618      	mov	r0, r3
 800d0ec:	3710      	adds	r7, #16
 800d0ee:	46bd      	mov	sp, r7
 800d0f0:	bd80      	pop	{r7, pc}

0800d0f2 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800d0f2:	b580      	push	{r7, lr}
 800d0f4:	b082      	sub	sp, #8
 800d0f6:	af00      	add	r7, sp, #0
 800d0f8:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800d0fa:	6878      	ldr	r0, [r7, #4]
 800d0fc:	f003 fcb4 	bl	8010a68 <USBD_LL_Start>
 800d100:	4603      	mov	r3, r0
}
 800d102:	4618      	mov	r0, r3
 800d104:	3708      	adds	r7, #8
 800d106:	46bd      	mov	sp, r7
 800d108:	bd80      	pop	{r7, pc}

0800d10a <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800d10a:	b480      	push	{r7}
 800d10c:	b083      	sub	sp, #12
 800d10e:	af00      	add	r7, sp, #0
 800d110:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800d112:	2300      	movs	r3, #0
}
 800d114:	4618      	mov	r0, r3
 800d116:	370c      	adds	r7, #12
 800d118:	46bd      	mov	sp, r7
 800d11a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d11e:	4770      	bx	lr

0800d120 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d120:	b580      	push	{r7, lr}
 800d122:	b084      	sub	sp, #16
 800d124:	af00      	add	r7, sp, #0
 800d126:	6078      	str	r0, [r7, #4]
 800d128:	460b      	mov	r3, r1
 800d12a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800d12c:	2303      	movs	r3, #3
 800d12e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d136:	2b00      	cmp	r3, #0
 800d138:	d009      	beq.n	800d14e <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d140:	681b      	ldr	r3, [r3, #0]
 800d142:	78fa      	ldrb	r2, [r7, #3]
 800d144:	4611      	mov	r1, r2
 800d146:	6878      	ldr	r0, [r7, #4]
 800d148:	4798      	blx	r3
 800d14a:	4603      	mov	r3, r0
 800d14c:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800d14e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d150:	4618      	mov	r0, r3
 800d152:	3710      	adds	r7, #16
 800d154:	46bd      	mov	sp, r7
 800d156:	bd80      	pop	{r7, pc}

0800d158 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d158:	b580      	push	{r7, lr}
 800d15a:	b082      	sub	sp, #8
 800d15c:	af00      	add	r7, sp, #0
 800d15e:	6078      	str	r0, [r7, #4]
 800d160:	460b      	mov	r3, r1
 800d162:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d16a:	2b00      	cmp	r3, #0
 800d16c:	d007      	beq.n	800d17e <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d174:	685b      	ldr	r3, [r3, #4]
 800d176:	78fa      	ldrb	r2, [r7, #3]
 800d178:	4611      	mov	r1, r2
 800d17a:	6878      	ldr	r0, [r7, #4]
 800d17c:	4798      	blx	r3
  }

  return USBD_OK;
 800d17e:	2300      	movs	r3, #0
}
 800d180:	4618      	mov	r0, r3
 800d182:	3708      	adds	r7, #8
 800d184:	46bd      	mov	sp, r7
 800d186:	bd80      	pop	{r7, pc}

0800d188 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800d188:	b580      	push	{r7, lr}
 800d18a:	b084      	sub	sp, #16
 800d18c:	af00      	add	r7, sp, #0
 800d18e:	6078      	str	r0, [r7, #4]
 800d190:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800d192:	687b      	ldr	r3, [r7, #4]
 800d194:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800d198:	6839      	ldr	r1, [r7, #0]
 800d19a:	4618      	mov	r0, r3
 800d19c:	f000 ff46 	bl	800e02c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	2201      	movs	r2, #1
 800d1a4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800d1ae:	461a      	mov	r2, r3
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800d1bc:	f003 031f 	and.w	r3, r3, #31
 800d1c0:	2b02      	cmp	r3, #2
 800d1c2:	d01a      	beq.n	800d1fa <USBD_LL_SetupStage+0x72>
 800d1c4:	2b02      	cmp	r3, #2
 800d1c6:	d822      	bhi.n	800d20e <USBD_LL_SetupStage+0x86>
 800d1c8:	2b00      	cmp	r3, #0
 800d1ca:	d002      	beq.n	800d1d2 <USBD_LL_SetupStage+0x4a>
 800d1cc:	2b01      	cmp	r3, #1
 800d1ce:	d00a      	beq.n	800d1e6 <USBD_LL_SetupStage+0x5e>
 800d1d0:	e01d      	b.n	800d20e <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800d1d8:	4619      	mov	r1, r3
 800d1da:	6878      	ldr	r0, [r7, #4]
 800d1dc:	f000 f9ee 	bl	800d5bc <USBD_StdDevReq>
 800d1e0:	4603      	mov	r3, r0
 800d1e2:	73fb      	strb	r3, [r7, #15]
      break;
 800d1e4:	e020      	b.n	800d228 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800d1ec:	4619      	mov	r1, r3
 800d1ee:	6878      	ldr	r0, [r7, #4]
 800d1f0:	f000 fa52 	bl	800d698 <USBD_StdItfReq>
 800d1f4:	4603      	mov	r3, r0
 800d1f6:	73fb      	strb	r3, [r7, #15]
      break;
 800d1f8:	e016      	b.n	800d228 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800d1fa:	687b      	ldr	r3, [r7, #4]
 800d1fc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800d200:	4619      	mov	r1, r3
 800d202:	6878      	ldr	r0, [r7, #4]
 800d204:	f000 fa91 	bl	800d72a <USBD_StdEPReq>
 800d208:	4603      	mov	r3, r0
 800d20a:	73fb      	strb	r3, [r7, #15]
      break;
 800d20c:	e00c      	b.n	800d228 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800d214:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800d218:	b2db      	uxtb	r3, r3
 800d21a:	4619      	mov	r1, r3
 800d21c:	6878      	ldr	r0, [r7, #4]
 800d21e:	f003 fc83 	bl	8010b28 <USBD_LL_StallEP>
 800d222:	4603      	mov	r3, r0
 800d224:	73fb      	strb	r3, [r7, #15]
      break;
 800d226:	bf00      	nop
  }

  return ret;
 800d228:	7bfb      	ldrb	r3, [r7, #15]
}
 800d22a:	4618      	mov	r0, r3
 800d22c:	3710      	adds	r7, #16
 800d22e:	46bd      	mov	sp, r7
 800d230:	bd80      	pop	{r7, pc}

0800d232 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800d232:	b580      	push	{r7, lr}
 800d234:	b086      	sub	sp, #24
 800d236:	af00      	add	r7, sp, #0
 800d238:	60f8      	str	r0, [r7, #12]
 800d23a:	460b      	mov	r3, r1
 800d23c:	607a      	str	r2, [r7, #4]
 800d23e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800d240:	7afb      	ldrb	r3, [r7, #11]
 800d242:	2b00      	cmp	r3, #0
 800d244:	d138      	bne.n	800d2b8 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800d246:	68fb      	ldr	r3, [r7, #12]
 800d248:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800d24c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800d24e:	68fb      	ldr	r3, [r7, #12]
 800d250:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800d254:	2b03      	cmp	r3, #3
 800d256:	d14a      	bne.n	800d2ee <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800d258:	693b      	ldr	r3, [r7, #16]
 800d25a:	689a      	ldr	r2, [r3, #8]
 800d25c:	693b      	ldr	r3, [r7, #16]
 800d25e:	68db      	ldr	r3, [r3, #12]
 800d260:	429a      	cmp	r2, r3
 800d262:	d913      	bls.n	800d28c <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800d264:	693b      	ldr	r3, [r7, #16]
 800d266:	689a      	ldr	r2, [r3, #8]
 800d268:	693b      	ldr	r3, [r7, #16]
 800d26a:	68db      	ldr	r3, [r3, #12]
 800d26c:	1ad2      	subs	r2, r2, r3
 800d26e:	693b      	ldr	r3, [r7, #16]
 800d270:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800d272:	693b      	ldr	r3, [r7, #16]
 800d274:	68da      	ldr	r2, [r3, #12]
 800d276:	693b      	ldr	r3, [r7, #16]
 800d278:	689b      	ldr	r3, [r3, #8]
 800d27a:	4293      	cmp	r3, r2
 800d27c:	bf28      	it	cs
 800d27e:	4613      	movcs	r3, r2
 800d280:	461a      	mov	r2, r3
 800d282:	6879      	ldr	r1, [r7, #4]
 800d284:	68f8      	ldr	r0, [r7, #12]
 800d286:	f000 ffc5 	bl	800e214 <USBD_CtlContinueRx>
 800d28a:	e030      	b.n	800d2ee <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d28c:	68fb      	ldr	r3, [r7, #12]
 800d28e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d292:	b2db      	uxtb	r3, r3
 800d294:	2b03      	cmp	r3, #3
 800d296:	d10b      	bne.n	800d2b0 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800d298:	68fb      	ldr	r3, [r7, #12]
 800d29a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d29e:	691b      	ldr	r3, [r3, #16]
 800d2a0:	2b00      	cmp	r3, #0
 800d2a2:	d005      	beq.n	800d2b0 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800d2a4:	68fb      	ldr	r3, [r7, #12]
 800d2a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d2aa:	691b      	ldr	r3, [r3, #16]
 800d2ac:	68f8      	ldr	r0, [r7, #12]
 800d2ae:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800d2b0:	68f8      	ldr	r0, [r7, #12]
 800d2b2:	f000 ffc0 	bl	800e236 <USBD_CtlSendStatus>
 800d2b6:	e01a      	b.n	800d2ee <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d2b8:	68fb      	ldr	r3, [r7, #12]
 800d2ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d2be:	b2db      	uxtb	r3, r3
 800d2c0:	2b03      	cmp	r3, #3
 800d2c2:	d114      	bne.n	800d2ee <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800d2c4:	68fb      	ldr	r3, [r7, #12]
 800d2c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d2ca:	699b      	ldr	r3, [r3, #24]
 800d2cc:	2b00      	cmp	r3, #0
 800d2ce:	d00e      	beq.n	800d2ee <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800d2d0:	68fb      	ldr	r3, [r7, #12]
 800d2d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d2d6:	699b      	ldr	r3, [r3, #24]
 800d2d8:	7afa      	ldrb	r2, [r7, #11]
 800d2da:	4611      	mov	r1, r2
 800d2dc:	68f8      	ldr	r0, [r7, #12]
 800d2de:	4798      	blx	r3
 800d2e0:	4603      	mov	r3, r0
 800d2e2:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800d2e4:	7dfb      	ldrb	r3, [r7, #23]
 800d2e6:	2b00      	cmp	r3, #0
 800d2e8:	d001      	beq.n	800d2ee <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800d2ea:	7dfb      	ldrb	r3, [r7, #23]
 800d2ec:	e000      	b.n	800d2f0 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800d2ee:	2300      	movs	r3, #0
}
 800d2f0:	4618      	mov	r0, r3
 800d2f2:	3718      	adds	r7, #24
 800d2f4:	46bd      	mov	sp, r7
 800d2f6:	bd80      	pop	{r7, pc}

0800d2f8 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800d2f8:	b580      	push	{r7, lr}
 800d2fa:	b086      	sub	sp, #24
 800d2fc:	af00      	add	r7, sp, #0
 800d2fe:	60f8      	str	r0, [r7, #12]
 800d300:	460b      	mov	r3, r1
 800d302:	607a      	str	r2, [r7, #4]
 800d304:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800d306:	7afb      	ldrb	r3, [r7, #11]
 800d308:	2b00      	cmp	r3, #0
 800d30a:	d16b      	bne.n	800d3e4 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800d30c:	68fb      	ldr	r3, [r7, #12]
 800d30e:	3314      	adds	r3, #20
 800d310:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800d312:	68fb      	ldr	r3, [r7, #12]
 800d314:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800d318:	2b02      	cmp	r3, #2
 800d31a:	d156      	bne.n	800d3ca <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800d31c:	693b      	ldr	r3, [r7, #16]
 800d31e:	689a      	ldr	r2, [r3, #8]
 800d320:	693b      	ldr	r3, [r7, #16]
 800d322:	68db      	ldr	r3, [r3, #12]
 800d324:	429a      	cmp	r2, r3
 800d326:	d914      	bls.n	800d352 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800d328:	693b      	ldr	r3, [r7, #16]
 800d32a:	689a      	ldr	r2, [r3, #8]
 800d32c:	693b      	ldr	r3, [r7, #16]
 800d32e:	68db      	ldr	r3, [r3, #12]
 800d330:	1ad2      	subs	r2, r2, r3
 800d332:	693b      	ldr	r3, [r7, #16]
 800d334:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800d336:	693b      	ldr	r3, [r7, #16]
 800d338:	689b      	ldr	r3, [r3, #8]
 800d33a:	461a      	mov	r2, r3
 800d33c:	6879      	ldr	r1, [r7, #4]
 800d33e:	68f8      	ldr	r0, [r7, #12]
 800d340:	f000 ff3a 	bl	800e1b8 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d344:	2300      	movs	r3, #0
 800d346:	2200      	movs	r2, #0
 800d348:	2100      	movs	r1, #0
 800d34a:	68f8      	ldr	r0, [r7, #12]
 800d34c:	f003 fc97 	bl	8010c7e <USBD_LL_PrepareReceive>
 800d350:	e03b      	b.n	800d3ca <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800d352:	693b      	ldr	r3, [r7, #16]
 800d354:	68da      	ldr	r2, [r3, #12]
 800d356:	693b      	ldr	r3, [r7, #16]
 800d358:	689b      	ldr	r3, [r3, #8]
 800d35a:	429a      	cmp	r2, r3
 800d35c:	d11c      	bne.n	800d398 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800d35e:	693b      	ldr	r3, [r7, #16]
 800d360:	685a      	ldr	r2, [r3, #4]
 800d362:	693b      	ldr	r3, [r7, #16]
 800d364:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800d366:	429a      	cmp	r2, r3
 800d368:	d316      	bcc.n	800d398 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800d36a:	693b      	ldr	r3, [r7, #16]
 800d36c:	685a      	ldr	r2, [r3, #4]
 800d36e:	68fb      	ldr	r3, [r7, #12]
 800d370:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800d374:	429a      	cmp	r2, r3
 800d376:	d20f      	bcs.n	800d398 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800d378:	2200      	movs	r2, #0
 800d37a:	2100      	movs	r1, #0
 800d37c:	68f8      	ldr	r0, [r7, #12]
 800d37e:	f000 ff1b 	bl	800e1b8 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800d382:	68fb      	ldr	r3, [r7, #12]
 800d384:	2200      	movs	r2, #0
 800d386:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d38a:	2300      	movs	r3, #0
 800d38c:	2200      	movs	r2, #0
 800d38e:	2100      	movs	r1, #0
 800d390:	68f8      	ldr	r0, [r7, #12]
 800d392:	f003 fc74 	bl	8010c7e <USBD_LL_PrepareReceive>
 800d396:	e018      	b.n	800d3ca <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d398:	68fb      	ldr	r3, [r7, #12]
 800d39a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d39e:	b2db      	uxtb	r3, r3
 800d3a0:	2b03      	cmp	r3, #3
 800d3a2:	d10b      	bne.n	800d3bc <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800d3a4:	68fb      	ldr	r3, [r7, #12]
 800d3a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d3aa:	68db      	ldr	r3, [r3, #12]
 800d3ac:	2b00      	cmp	r3, #0
 800d3ae:	d005      	beq.n	800d3bc <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800d3b0:	68fb      	ldr	r3, [r7, #12]
 800d3b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d3b6:	68db      	ldr	r3, [r3, #12]
 800d3b8:	68f8      	ldr	r0, [r7, #12]
 800d3ba:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800d3bc:	2180      	movs	r1, #128	; 0x80
 800d3be:	68f8      	ldr	r0, [r7, #12]
 800d3c0:	f003 fbb2 	bl	8010b28 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800d3c4:	68f8      	ldr	r0, [r7, #12]
 800d3c6:	f000 ff49 	bl	800e25c <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800d3ca:	68fb      	ldr	r3, [r7, #12]
 800d3cc:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800d3d0:	2b01      	cmp	r3, #1
 800d3d2:	d122      	bne.n	800d41a <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800d3d4:	68f8      	ldr	r0, [r7, #12]
 800d3d6:	f7ff fe98 	bl	800d10a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800d3da:	68fb      	ldr	r3, [r7, #12]
 800d3dc:	2200      	movs	r2, #0
 800d3de:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800d3e2:	e01a      	b.n	800d41a <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d3e4:	68fb      	ldr	r3, [r7, #12]
 800d3e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d3ea:	b2db      	uxtb	r3, r3
 800d3ec:	2b03      	cmp	r3, #3
 800d3ee:	d114      	bne.n	800d41a <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800d3f0:	68fb      	ldr	r3, [r7, #12]
 800d3f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d3f6:	695b      	ldr	r3, [r3, #20]
 800d3f8:	2b00      	cmp	r3, #0
 800d3fa:	d00e      	beq.n	800d41a <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800d3fc:	68fb      	ldr	r3, [r7, #12]
 800d3fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d402:	695b      	ldr	r3, [r3, #20]
 800d404:	7afa      	ldrb	r2, [r7, #11]
 800d406:	4611      	mov	r1, r2
 800d408:	68f8      	ldr	r0, [r7, #12]
 800d40a:	4798      	blx	r3
 800d40c:	4603      	mov	r3, r0
 800d40e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800d410:	7dfb      	ldrb	r3, [r7, #23]
 800d412:	2b00      	cmp	r3, #0
 800d414:	d001      	beq.n	800d41a <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800d416:	7dfb      	ldrb	r3, [r7, #23]
 800d418:	e000      	b.n	800d41c <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800d41a:	2300      	movs	r3, #0
}
 800d41c:	4618      	mov	r0, r3
 800d41e:	3718      	adds	r7, #24
 800d420:	46bd      	mov	sp, r7
 800d422:	bd80      	pop	{r7, pc}

0800d424 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800d424:	b580      	push	{r7, lr}
 800d426:	b082      	sub	sp, #8
 800d428:	af00      	add	r7, sp, #0
 800d42a:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	2201      	movs	r2, #1
 800d430:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	2200      	movs	r2, #0
 800d438:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	2200      	movs	r2, #0
 800d440:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	2200      	movs	r2, #0
 800d446:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d450:	2b00      	cmp	r3, #0
 800d452:	d101      	bne.n	800d458 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800d454:	2303      	movs	r3, #3
 800d456:	e02f      	b.n	800d4b8 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d45e:	2b00      	cmp	r3, #0
 800d460:	d00f      	beq.n	800d482 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d468:	685b      	ldr	r3, [r3, #4]
 800d46a:	2b00      	cmp	r3, #0
 800d46c:	d009      	beq.n	800d482 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d474:	685b      	ldr	r3, [r3, #4]
 800d476:	687a      	ldr	r2, [r7, #4]
 800d478:	6852      	ldr	r2, [r2, #4]
 800d47a:	b2d2      	uxtb	r2, r2
 800d47c:	4611      	mov	r1, r2
 800d47e:	6878      	ldr	r0, [r7, #4]
 800d480:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800d482:	2340      	movs	r3, #64	; 0x40
 800d484:	2200      	movs	r2, #0
 800d486:	2100      	movs	r1, #0
 800d488:	6878      	ldr	r0, [r7, #4]
 800d48a:	f003 fb08 	bl	8010a9e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	2201      	movs	r2, #1
 800d492:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800d496:	687b      	ldr	r3, [r7, #4]
 800d498:	2240      	movs	r2, #64	; 0x40
 800d49a:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800d49e:	2340      	movs	r3, #64	; 0x40
 800d4a0:	2200      	movs	r2, #0
 800d4a2:	2180      	movs	r1, #128	; 0x80
 800d4a4:	6878      	ldr	r0, [r7, #4]
 800d4a6:	f003 fafa 	bl	8010a9e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800d4aa:	687b      	ldr	r3, [r7, #4]
 800d4ac:	2201      	movs	r2, #1
 800d4ae:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800d4b0:	687b      	ldr	r3, [r7, #4]
 800d4b2:	2240      	movs	r2, #64	; 0x40
 800d4b4:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800d4b6:	2300      	movs	r3, #0
}
 800d4b8:	4618      	mov	r0, r3
 800d4ba:	3708      	adds	r7, #8
 800d4bc:	46bd      	mov	sp, r7
 800d4be:	bd80      	pop	{r7, pc}

0800d4c0 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800d4c0:	b480      	push	{r7}
 800d4c2:	b083      	sub	sp, #12
 800d4c4:	af00      	add	r7, sp, #0
 800d4c6:	6078      	str	r0, [r7, #4]
 800d4c8:	460b      	mov	r3, r1
 800d4ca:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	78fa      	ldrb	r2, [r7, #3]
 800d4d0:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800d4d2:	2300      	movs	r3, #0
}
 800d4d4:	4618      	mov	r0, r3
 800d4d6:	370c      	adds	r7, #12
 800d4d8:	46bd      	mov	sp, r7
 800d4da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4de:	4770      	bx	lr

0800d4e0 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800d4e0:	b480      	push	{r7}
 800d4e2:	b083      	sub	sp, #12
 800d4e4:	af00      	add	r7, sp, #0
 800d4e6:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d4ee:	b2da      	uxtb	r2, r3
 800d4f0:	687b      	ldr	r3, [r7, #4]
 800d4f2:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	2204      	movs	r2, #4
 800d4fa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800d4fe:	2300      	movs	r3, #0
}
 800d500:	4618      	mov	r0, r3
 800d502:	370c      	adds	r7, #12
 800d504:	46bd      	mov	sp, r7
 800d506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d50a:	4770      	bx	lr

0800d50c <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800d50c:	b480      	push	{r7}
 800d50e:	b083      	sub	sp, #12
 800d510:	af00      	add	r7, sp, #0
 800d512:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d51a:	b2db      	uxtb	r3, r3
 800d51c:	2b04      	cmp	r3, #4
 800d51e:	d106      	bne.n	800d52e <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800d526:	b2da      	uxtb	r2, r3
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800d52e:	2300      	movs	r3, #0
}
 800d530:	4618      	mov	r0, r3
 800d532:	370c      	adds	r7, #12
 800d534:	46bd      	mov	sp, r7
 800d536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d53a:	4770      	bx	lr

0800d53c <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800d53c:	b580      	push	{r7, lr}
 800d53e:	b082      	sub	sp, #8
 800d540:	af00      	add	r7, sp, #0
 800d542:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d54a:	2b00      	cmp	r3, #0
 800d54c:	d101      	bne.n	800d552 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800d54e:	2303      	movs	r3, #3
 800d550:	e012      	b.n	800d578 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d558:	b2db      	uxtb	r3, r3
 800d55a:	2b03      	cmp	r3, #3
 800d55c:	d10b      	bne.n	800d576 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800d55e:	687b      	ldr	r3, [r7, #4]
 800d560:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d564:	69db      	ldr	r3, [r3, #28]
 800d566:	2b00      	cmp	r3, #0
 800d568:	d005      	beq.n	800d576 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800d56a:	687b      	ldr	r3, [r7, #4]
 800d56c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d570:	69db      	ldr	r3, [r3, #28]
 800d572:	6878      	ldr	r0, [r7, #4]
 800d574:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800d576:	2300      	movs	r3, #0
}
 800d578:	4618      	mov	r0, r3
 800d57a:	3708      	adds	r7, #8
 800d57c:	46bd      	mov	sp, r7
 800d57e:	bd80      	pop	{r7, pc}

0800d580 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800d580:	b480      	push	{r7}
 800d582:	b087      	sub	sp, #28
 800d584:	af00      	add	r7, sp, #0
 800d586:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800d58c:	697b      	ldr	r3, [r7, #20]
 800d58e:	781b      	ldrb	r3, [r3, #0]
 800d590:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800d592:	697b      	ldr	r3, [r7, #20]
 800d594:	3301      	adds	r3, #1
 800d596:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800d598:	697b      	ldr	r3, [r7, #20]
 800d59a:	781b      	ldrb	r3, [r3, #0]
 800d59c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800d59e:	8a3b      	ldrh	r3, [r7, #16]
 800d5a0:	021b      	lsls	r3, r3, #8
 800d5a2:	b21a      	sxth	r2, r3
 800d5a4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800d5a8:	4313      	orrs	r3, r2
 800d5aa:	b21b      	sxth	r3, r3
 800d5ac:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800d5ae:	89fb      	ldrh	r3, [r7, #14]
}
 800d5b0:	4618      	mov	r0, r3
 800d5b2:	371c      	adds	r7, #28
 800d5b4:	46bd      	mov	sp, r7
 800d5b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5ba:	4770      	bx	lr

0800d5bc <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d5bc:	b580      	push	{r7, lr}
 800d5be:	b084      	sub	sp, #16
 800d5c0:	af00      	add	r7, sp, #0
 800d5c2:	6078      	str	r0, [r7, #4]
 800d5c4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d5c6:	2300      	movs	r3, #0
 800d5c8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d5ca:	683b      	ldr	r3, [r7, #0]
 800d5cc:	781b      	ldrb	r3, [r3, #0]
 800d5ce:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d5d2:	2b40      	cmp	r3, #64	; 0x40
 800d5d4:	d005      	beq.n	800d5e2 <USBD_StdDevReq+0x26>
 800d5d6:	2b40      	cmp	r3, #64	; 0x40
 800d5d8:	d853      	bhi.n	800d682 <USBD_StdDevReq+0xc6>
 800d5da:	2b00      	cmp	r3, #0
 800d5dc:	d00b      	beq.n	800d5f6 <USBD_StdDevReq+0x3a>
 800d5de:	2b20      	cmp	r3, #32
 800d5e0:	d14f      	bne.n	800d682 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800d5e2:	687b      	ldr	r3, [r7, #4]
 800d5e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d5e8:	689b      	ldr	r3, [r3, #8]
 800d5ea:	6839      	ldr	r1, [r7, #0]
 800d5ec:	6878      	ldr	r0, [r7, #4]
 800d5ee:	4798      	blx	r3
 800d5f0:	4603      	mov	r3, r0
 800d5f2:	73fb      	strb	r3, [r7, #15]
      break;
 800d5f4:	e04a      	b.n	800d68c <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d5f6:	683b      	ldr	r3, [r7, #0]
 800d5f8:	785b      	ldrb	r3, [r3, #1]
 800d5fa:	2b09      	cmp	r3, #9
 800d5fc:	d83b      	bhi.n	800d676 <USBD_StdDevReq+0xba>
 800d5fe:	a201      	add	r2, pc, #4	; (adr r2, 800d604 <USBD_StdDevReq+0x48>)
 800d600:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d604:	0800d659 	.word	0x0800d659
 800d608:	0800d66d 	.word	0x0800d66d
 800d60c:	0800d677 	.word	0x0800d677
 800d610:	0800d663 	.word	0x0800d663
 800d614:	0800d677 	.word	0x0800d677
 800d618:	0800d637 	.word	0x0800d637
 800d61c:	0800d62d 	.word	0x0800d62d
 800d620:	0800d677 	.word	0x0800d677
 800d624:	0800d64f 	.word	0x0800d64f
 800d628:	0800d641 	.word	0x0800d641
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800d62c:	6839      	ldr	r1, [r7, #0]
 800d62e:	6878      	ldr	r0, [r7, #4]
 800d630:	f000 f9de 	bl	800d9f0 <USBD_GetDescriptor>
          break;
 800d634:	e024      	b.n	800d680 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800d636:	6839      	ldr	r1, [r7, #0]
 800d638:	6878      	ldr	r0, [r7, #4]
 800d63a:	f000 fb6d 	bl	800dd18 <USBD_SetAddress>
          break;
 800d63e:	e01f      	b.n	800d680 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800d640:	6839      	ldr	r1, [r7, #0]
 800d642:	6878      	ldr	r0, [r7, #4]
 800d644:	f000 fbac 	bl	800dda0 <USBD_SetConfig>
 800d648:	4603      	mov	r3, r0
 800d64a:	73fb      	strb	r3, [r7, #15]
          break;
 800d64c:	e018      	b.n	800d680 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800d64e:	6839      	ldr	r1, [r7, #0]
 800d650:	6878      	ldr	r0, [r7, #4]
 800d652:	f000 fc4b 	bl	800deec <USBD_GetConfig>
          break;
 800d656:	e013      	b.n	800d680 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800d658:	6839      	ldr	r1, [r7, #0]
 800d65a:	6878      	ldr	r0, [r7, #4]
 800d65c:	f000 fc7c 	bl	800df58 <USBD_GetStatus>
          break;
 800d660:	e00e      	b.n	800d680 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800d662:	6839      	ldr	r1, [r7, #0]
 800d664:	6878      	ldr	r0, [r7, #4]
 800d666:	f000 fcab 	bl	800dfc0 <USBD_SetFeature>
          break;
 800d66a:	e009      	b.n	800d680 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800d66c:	6839      	ldr	r1, [r7, #0]
 800d66e:	6878      	ldr	r0, [r7, #4]
 800d670:	f000 fcba 	bl	800dfe8 <USBD_ClrFeature>
          break;
 800d674:	e004      	b.n	800d680 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800d676:	6839      	ldr	r1, [r7, #0]
 800d678:	6878      	ldr	r0, [r7, #4]
 800d67a:	f000 fd11 	bl	800e0a0 <USBD_CtlError>
          break;
 800d67e:	bf00      	nop
      }
      break;
 800d680:	e004      	b.n	800d68c <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800d682:	6839      	ldr	r1, [r7, #0]
 800d684:	6878      	ldr	r0, [r7, #4]
 800d686:	f000 fd0b 	bl	800e0a0 <USBD_CtlError>
      break;
 800d68a:	bf00      	nop
  }

  return ret;
 800d68c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d68e:	4618      	mov	r0, r3
 800d690:	3710      	adds	r7, #16
 800d692:	46bd      	mov	sp, r7
 800d694:	bd80      	pop	{r7, pc}
 800d696:	bf00      	nop

0800d698 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d698:	b580      	push	{r7, lr}
 800d69a:	b084      	sub	sp, #16
 800d69c:	af00      	add	r7, sp, #0
 800d69e:	6078      	str	r0, [r7, #4]
 800d6a0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d6a2:	2300      	movs	r3, #0
 800d6a4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d6a6:	683b      	ldr	r3, [r7, #0]
 800d6a8:	781b      	ldrb	r3, [r3, #0]
 800d6aa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d6ae:	2b40      	cmp	r3, #64	; 0x40
 800d6b0:	d005      	beq.n	800d6be <USBD_StdItfReq+0x26>
 800d6b2:	2b40      	cmp	r3, #64	; 0x40
 800d6b4:	d82f      	bhi.n	800d716 <USBD_StdItfReq+0x7e>
 800d6b6:	2b00      	cmp	r3, #0
 800d6b8:	d001      	beq.n	800d6be <USBD_StdItfReq+0x26>
 800d6ba:	2b20      	cmp	r3, #32
 800d6bc:	d12b      	bne.n	800d716 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800d6be:	687b      	ldr	r3, [r7, #4]
 800d6c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d6c4:	b2db      	uxtb	r3, r3
 800d6c6:	3b01      	subs	r3, #1
 800d6c8:	2b02      	cmp	r3, #2
 800d6ca:	d81d      	bhi.n	800d708 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800d6cc:	683b      	ldr	r3, [r7, #0]
 800d6ce:	889b      	ldrh	r3, [r3, #4]
 800d6d0:	b2db      	uxtb	r3, r3
 800d6d2:	2b01      	cmp	r3, #1
 800d6d4:	d813      	bhi.n	800d6fe <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d6dc:	689b      	ldr	r3, [r3, #8]
 800d6de:	6839      	ldr	r1, [r7, #0]
 800d6e0:	6878      	ldr	r0, [r7, #4]
 800d6e2:	4798      	blx	r3
 800d6e4:	4603      	mov	r3, r0
 800d6e6:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800d6e8:	683b      	ldr	r3, [r7, #0]
 800d6ea:	88db      	ldrh	r3, [r3, #6]
 800d6ec:	2b00      	cmp	r3, #0
 800d6ee:	d110      	bne.n	800d712 <USBD_StdItfReq+0x7a>
 800d6f0:	7bfb      	ldrb	r3, [r7, #15]
 800d6f2:	2b00      	cmp	r3, #0
 800d6f4:	d10d      	bne.n	800d712 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800d6f6:	6878      	ldr	r0, [r7, #4]
 800d6f8:	f000 fd9d 	bl	800e236 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800d6fc:	e009      	b.n	800d712 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800d6fe:	6839      	ldr	r1, [r7, #0]
 800d700:	6878      	ldr	r0, [r7, #4]
 800d702:	f000 fccd 	bl	800e0a0 <USBD_CtlError>
          break;
 800d706:	e004      	b.n	800d712 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800d708:	6839      	ldr	r1, [r7, #0]
 800d70a:	6878      	ldr	r0, [r7, #4]
 800d70c:	f000 fcc8 	bl	800e0a0 <USBD_CtlError>
          break;
 800d710:	e000      	b.n	800d714 <USBD_StdItfReq+0x7c>
          break;
 800d712:	bf00      	nop
      }
      break;
 800d714:	e004      	b.n	800d720 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800d716:	6839      	ldr	r1, [r7, #0]
 800d718:	6878      	ldr	r0, [r7, #4]
 800d71a:	f000 fcc1 	bl	800e0a0 <USBD_CtlError>
      break;
 800d71e:	bf00      	nop
  }

  return ret;
 800d720:	7bfb      	ldrb	r3, [r7, #15]
}
 800d722:	4618      	mov	r0, r3
 800d724:	3710      	adds	r7, #16
 800d726:	46bd      	mov	sp, r7
 800d728:	bd80      	pop	{r7, pc}

0800d72a <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d72a:	b580      	push	{r7, lr}
 800d72c:	b084      	sub	sp, #16
 800d72e:	af00      	add	r7, sp, #0
 800d730:	6078      	str	r0, [r7, #4]
 800d732:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800d734:	2300      	movs	r3, #0
 800d736:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800d738:	683b      	ldr	r3, [r7, #0]
 800d73a:	889b      	ldrh	r3, [r3, #4]
 800d73c:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d73e:	683b      	ldr	r3, [r7, #0]
 800d740:	781b      	ldrb	r3, [r3, #0]
 800d742:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d746:	2b40      	cmp	r3, #64	; 0x40
 800d748:	d007      	beq.n	800d75a <USBD_StdEPReq+0x30>
 800d74a:	2b40      	cmp	r3, #64	; 0x40
 800d74c:	f200 8145 	bhi.w	800d9da <USBD_StdEPReq+0x2b0>
 800d750:	2b00      	cmp	r3, #0
 800d752:	d00c      	beq.n	800d76e <USBD_StdEPReq+0x44>
 800d754:	2b20      	cmp	r3, #32
 800d756:	f040 8140 	bne.w	800d9da <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d760:	689b      	ldr	r3, [r3, #8]
 800d762:	6839      	ldr	r1, [r7, #0]
 800d764:	6878      	ldr	r0, [r7, #4]
 800d766:	4798      	blx	r3
 800d768:	4603      	mov	r3, r0
 800d76a:	73fb      	strb	r3, [r7, #15]
      break;
 800d76c:	e13a      	b.n	800d9e4 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d76e:	683b      	ldr	r3, [r7, #0]
 800d770:	785b      	ldrb	r3, [r3, #1]
 800d772:	2b03      	cmp	r3, #3
 800d774:	d007      	beq.n	800d786 <USBD_StdEPReq+0x5c>
 800d776:	2b03      	cmp	r3, #3
 800d778:	f300 8129 	bgt.w	800d9ce <USBD_StdEPReq+0x2a4>
 800d77c:	2b00      	cmp	r3, #0
 800d77e:	d07f      	beq.n	800d880 <USBD_StdEPReq+0x156>
 800d780:	2b01      	cmp	r3, #1
 800d782:	d03c      	beq.n	800d7fe <USBD_StdEPReq+0xd4>
 800d784:	e123      	b.n	800d9ce <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800d786:	687b      	ldr	r3, [r7, #4]
 800d788:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d78c:	b2db      	uxtb	r3, r3
 800d78e:	2b02      	cmp	r3, #2
 800d790:	d002      	beq.n	800d798 <USBD_StdEPReq+0x6e>
 800d792:	2b03      	cmp	r3, #3
 800d794:	d016      	beq.n	800d7c4 <USBD_StdEPReq+0x9a>
 800d796:	e02c      	b.n	800d7f2 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d798:	7bbb      	ldrb	r3, [r7, #14]
 800d79a:	2b00      	cmp	r3, #0
 800d79c:	d00d      	beq.n	800d7ba <USBD_StdEPReq+0x90>
 800d79e:	7bbb      	ldrb	r3, [r7, #14]
 800d7a0:	2b80      	cmp	r3, #128	; 0x80
 800d7a2:	d00a      	beq.n	800d7ba <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800d7a4:	7bbb      	ldrb	r3, [r7, #14]
 800d7a6:	4619      	mov	r1, r3
 800d7a8:	6878      	ldr	r0, [r7, #4]
 800d7aa:	f003 f9bd 	bl	8010b28 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800d7ae:	2180      	movs	r1, #128	; 0x80
 800d7b0:	6878      	ldr	r0, [r7, #4]
 800d7b2:	f003 f9b9 	bl	8010b28 <USBD_LL_StallEP>
 800d7b6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800d7b8:	e020      	b.n	800d7fc <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800d7ba:	6839      	ldr	r1, [r7, #0]
 800d7bc:	6878      	ldr	r0, [r7, #4]
 800d7be:	f000 fc6f 	bl	800e0a0 <USBD_CtlError>
              break;
 800d7c2:	e01b      	b.n	800d7fc <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800d7c4:	683b      	ldr	r3, [r7, #0]
 800d7c6:	885b      	ldrh	r3, [r3, #2]
 800d7c8:	2b00      	cmp	r3, #0
 800d7ca:	d10e      	bne.n	800d7ea <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800d7cc:	7bbb      	ldrb	r3, [r7, #14]
 800d7ce:	2b00      	cmp	r3, #0
 800d7d0:	d00b      	beq.n	800d7ea <USBD_StdEPReq+0xc0>
 800d7d2:	7bbb      	ldrb	r3, [r7, #14]
 800d7d4:	2b80      	cmp	r3, #128	; 0x80
 800d7d6:	d008      	beq.n	800d7ea <USBD_StdEPReq+0xc0>
 800d7d8:	683b      	ldr	r3, [r7, #0]
 800d7da:	88db      	ldrh	r3, [r3, #6]
 800d7dc:	2b00      	cmp	r3, #0
 800d7de:	d104      	bne.n	800d7ea <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800d7e0:	7bbb      	ldrb	r3, [r7, #14]
 800d7e2:	4619      	mov	r1, r3
 800d7e4:	6878      	ldr	r0, [r7, #4]
 800d7e6:	f003 f99f 	bl	8010b28 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800d7ea:	6878      	ldr	r0, [r7, #4]
 800d7ec:	f000 fd23 	bl	800e236 <USBD_CtlSendStatus>

              break;
 800d7f0:	e004      	b.n	800d7fc <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800d7f2:	6839      	ldr	r1, [r7, #0]
 800d7f4:	6878      	ldr	r0, [r7, #4]
 800d7f6:	f000 fc53 	bl	800e0a0 <USBD_CtlError>
              break;
 800d7fa:	bf00      	nop
          }
          break;
 800d7fc:	e0ec      	b.n	800d9d8 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d804:	b2db      	uxtb	r3, r3
 800d806:	2b02      	cmp	r3, #2
 800d808:	d002      	beq.n	800d810 <USBD_StdEPReq+0xe6>
 800d80a:	2b03      	cmp	r3, #3
 800d80c:	d016      	beq.n	800d83c <USBD_StdEPReq+0x112>
 800d80e:	e030      	b.n	800d872 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d810:	7bbb      	ldrb	r3, [r7, #14]
 800d812:	2b00      	cmp	r3, #0
 800d814:	d00d      	beq.n	800d832 <USBD_StdEPReq+0x108>
 800d816:	7bbb      	ldrb	r3, [r7, #14]
 800d818:	2b80      	cmp	r3, #128	; 0x80
 800d81a:	d00a      	beq.n	800d832 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800d81c:	7bbb      	ldrb	r3, [r7, #14]
 800d81e:	4619      	mov	r1, r3
 800d820:	6878      	ldr	r0, [r7, #4]
 800d822:	f003 f981 	bl	8010b28 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800d826:	2180      	movs	r1, #128	; 0x80
 800d828:	6878      	ldr	r0, [r7, #4]
 800d82a:	f003 f97d 	bl	8010b28 <USBD_LL_StallEP>
 800d82e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800d830:	e025      	b.n	800d87e <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800d832:	6839      	ldr	r1, [r7, #0]
 800d834:	6878      	ldr	r0, [r7, #4]
 800d836:	f000 fc33 	bl	800e0a0 <USBD_CtlError>
              break;
 800d83a:	e020      	b.n	800d87e <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800d83c:	683b      	ldr	r3, [r7, #0]
 800d83e:	885b      	ldrh	r3, [r3, #2]
 800d840:	2b00      	cmp	r3, #0
 800d842:	d11b      	bne.n	800d87c <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800d844:	7bbb      	ldrb	r3, [r7, #14]
 800d846:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d84a:	2b00      	cmp	r3, #0
 800d84c:	d004      	beq.n	800d858 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800d84e:	7bbb      	ldrb	r3, [r7, #14]
 800d850:	4619      	mov	r1, r3
 800d852:	6878      	ldr	r0, [r7, #4]
 800d854:	f003 f987 	bl	8010b66 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800d858:	6878      	ldr	r0, [r7, #4]
 800d85a:	f000 fcec 	bl	800e236 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d864:	689b      	ldr	r3, [r3, #8]
 800d866:	6839      	ldr	r1, [r7, #0]
 800d868:	6878      	ldr	r0, [r7, #4]
 800d86a:	4798      	blx	r3
 800d86c:	4603      	mov	r3, r0
 800d86e:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800d870:	e004      	b.n	800d87c <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800d872:	6839      	ldr	r1, [r7, #0]
 800d874:	6878      	ldr	r0, [r7, #4]
 800d876:	f000 fc13 	bl	800e0a0 <USBD_CtlError>
              break;
 800d87a:	e000      	b.n	800d87e <USBD_StdEPReq+0x154>
              break;
 800d87c:	bf00      	nop
          }
          break;
 800d87e:	e0ab      	b.n	800d9d8 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800d880:	687b      	ldr	r3, [r7, #4]
 800d882:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d886:	b2db      	uxtb	r3, r3
 800d888:	2b02      	cmp	r3, #2
 800d88a:	d002      	beq.n	800d892 <USBD_StdEPReq+0x168>
 800d88c:	2b03      	cmp	r3, #3
 800d88e:	d032      	beq.n	800d8f6 <USBD_StdEPReq+0x1cc>
 800d890:	e097      	b.n	800d9c2 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d892:	7bbb      	ldrb	r3, [r7, #14]
 800d894:	2b00      	cmp	r3, #0
 800d896:	d007      	beq.n	800d8a8 <USBD_StdEPReq+0x17e>
 800d898:	7bbb      	ldrb	r3, [r7, #14]
 800d89a:	2b80      	cmp	r3, #128	; 0x80
 800d89c:	d004      	beq.n	800d8a8 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800d89e:	6839      	ldr	r1, [r7, #0]
 800d8a0:	6878      	ldr	r0, [r7, #4]
 800d8a2:	f000 fbfd 	bl	800e0a0 <USBD_CtlError>
                break;
 800d8a6:	e091      	b.n	800d9cc <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d8a8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d8ac:	2b00      	cmp	r3, #0
 800d8ae:	da0b      	bge.n	800d8c8 <USBD_StdEPReq+0x19e>
 800d8b0:	7bbb      	ldrb	r3, [r7, #14]
 800d8b2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d8b6:	4613      	mov	r3, r2
 800d8b8:	009b      	lsls	r3, r3, #2
 800d8ba:	4413      	add	r3, r2
 800d8bc:	009b      	lsls	r3, r3, #2
 800d8be:	3310      	adds	r3, #16
 800d8c0:	687a      	ldr	r2, [r7, #4]
 800d8c2:	4413      	add	r3, r2
 800d8c4:	3304      	adds	r3, #4
 800d8c6:	e00b      	b.n	800d8e0 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800d8c8:	7bbb      	ldrb	r3, [r7, #14]
 800d8ca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d8ce:	4613      	mov	r3, r2
 800d8d0:	009b      	lsls	r3, r3, #2
 800d8d2:	4413      	add	r3, r2
 800d8d4:	009b      	lsls	r3, r3, #2
 800d8d6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800d8da:	687a      	ldr	r2, [r7, #4]
 800d8dc:	4413      	add	r3, r2
 800d8de:	3304      	adds	r3, #4
 800d8e0:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800d8e2:	68bb      	ldr	r3, [r7, #8]
 800d8e4:	2200      	movs	r2, #0
 800d8e6:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800d8e8:	68bb      	ldr	r3, [r7, #8]
 800d8ea:	2202      	movs	r2, #2
 800d8ec:	4619      	mov	r1, r3
 800d8ee:	6878      	ldr	r0, [r7, #4]
 800d8f0:	f000 fc47 	bl	800e182 <USBD_CtlSendData>
              break;
 800d8f4:	e06a      	b.n	800d9cc <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800d8f6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d8fa:	2b00      	cmp	r3, #0
 800d8fc:	da11      	bge.n	800d922 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800d8fe:	7bbb      	ldrb	r3, [r7, #14]
 800d900:	f003 020f 	and.w	r2, r3, #15
 800d904:	6879      	ldr	r1, [r7, #4]
 800d906:	4613      	mov	r3, r2
 800d908:	009b      	lsls	r3, r3, #2
 800d90a:	4413      	add	r3, r2
 800d90c:	009b      	lsls	r3, r3, #2
 800d90e:	440b      	add	r3, r1
 800d910:	3324      	adds	r3, #36	; 0x24
 800d912:	881b      	ldrh	r3, [r3, #0]
 800d914:	2b00      	cmp	r3, #0
 800d916:	d117      	bne.n	800d948 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800d918:	6839      	ldr	r1, [r7, #0]
 800d91a:	6878      	ldr	r0, [r7, #4]
 800d91c:	f000 fbc0 	bl	800e0a0 <USBD_CtlError>
                  break;
 800d920:	e054      	b.n	800d9cc <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800d922:	7bbb      	ldrb	r3, [r7, #14]
 800d924:	f003 020f 	and.w	r2, r3, #15
 800d928:	6879      	ldr	r1, [r7, #4]
 800d92a:	4613      	mov	r3, r2
 800d92c:	009b      	lsls	r3, r3, #2
 800d92e:	4413      	add	r3, r2
 800d930:	009b      	lsls	r3, r3, #2
 800d932:	440b      	add	r3, r1
 800d934:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800d938:	881b      	ldrh	r3, [r3, #0]
 800d93a:	2b00      	cmp	r3, #0
 800d93c:	d104      	bne.n	800d948 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800d93e:	6839      	ldr	r1, [r7, #0]
 800d940:	6878      	ldr	r0, [r7, #4]
 800d942:	f000 fbad 	bl	800e0a0 <USBD_CtlError>
                  break;
 800d946:	e041      	b.n	800d9cc <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d948:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d94c:	2b00      	cmp	r3, #0
 800d94e:	da0b      	bge.n	800d968 <USBD_StdEPReq+0x23e>
 800d950:	7bbb      	ldrb	r3, [r7, #14]
 800d952:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d956:	4613      	mov	r3, r2
 800d958:	009b      	lsls	r3, r3, #2
 800d95a:	4413      	add	r3, r2
 800d95c:	009b      	lsls	r3, r3, #2
 800d95e:	3310      	adds	r3, #16
 800d960:	687a      	ldr	r2, [r7, #4]
 800d962:	4413      	add	r3, r2
 800d964:	3304      	adds	r3, #4
 800d966:	e00b      	b.n	800d980 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800d968:	7bbb      	ldrb	r3, [r7, #14]
 800d96a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d96e:	4613      	mov	r3, r2
 800d970:	009b      	lsls	r3, r3, #2
 800d972:	4413      	add	r3, r2
 800d974:	009b      	lsls	r3, r3, #2
 800d976:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800d97a:	687a      	ldr	r2, [r7, #4]
 800d97c:	4413      	add	r3, r2
 800d97e:	3304      	adds	r3, #4
 800d980:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800d982:	7bbb      	ldrb	r3, [r7, #14]
 800d984:	2b00      	cmp	r3, #0
 800d986:	d002      	beq.n	800d98e <USBD_StdEPReq+0x264>
 800d988:	7bbb      	ldrb	r3, [r7, #14]
 800d98a:	2b80      	cmp	r3, #128	; 0x80
 800d98c:	d103      	bne.n	800d996 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800d98e:	68bb      	ldr	r3, [r7, #8]
 800d990:	2200      	movs	r2, #0
 800d992:	601a      	str	r2, [r3, #0]
 800d994:	e00e      	b.n	800d9b4 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800d996:	7bbb      	ldrb	r3, [r7, #14]
 800d998:	4619      	mov	r1, r3
 800d99a:	6878      	ldr	r0, [r7, #4]
 800d99c:	f003 f902 	bl	8010ba4 <USBD_LL_IsStallEP>
 800d9a0:	4603      	mov	r3, r0
 800d9a2:	2b00      	cmp	r3, #0
 800d9a4:	d003      	beq.n	800d9ae <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800d9a6:	68bb      	ldr	r3, [r7, #8]
 800d9a8:	2201      	movs	r2, #1
 800d9aa:	601a      	str	r2, [r3, #0]
 800d9ac:	e002      	b.n	800d9b4 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800d9ae:	68bb      	ldr	r3, [r7, #8]
 800d9b0:	2200      	movs	r2, #0
 800d9b2:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800d9b4:	68bb      	ldr	r3, [r7, #8]
 800d9b6:	2202      	movs	r2, #2
 800d9b8:	4619      	mov	r1, r3
 800d9ba:	6878      	ldr	r0, [r7, #4]
 800d9bc:	f000 fbe1 	bl	800e182 <USBD_CtlSendData>
              break;
 800d9c0:	e004      	b.n	800d9cc <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800d9c2:	6839      	ldr	r1, [r7, #0]
 800d9c4:	6878      	ldr	r0, [r7, #4]
 800d9c6:	f000 fb6b 	bl	800e0a0 <USBD_CtlError>
              break;
 800d9ca:	bf00      	nop
          }
          break;
 800d9cc:	e004      	b.n	800d9d8 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800d9ce:	6839      	ldr	r1, [r7, #0]
 800d9d0:	6878      	ldr	r0, [r7, #4]
 800d9d2:	f000 fb65 	bl	800e0a0 <USBD_CtlError>
          break;
 800d9d6:	bf00      	nop
      }
      break;
 800d9d8:	e004      	b.n	800d9e4 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800d9da:	6839      	ldr	r1, [r7, #0]
 800d9dc:	6878      	ldr	r0, [r7, #4]
 800d9de:	f000 fb5f 	bl	800e0a0 <USBD_CtlError>
      break;
 800d9e2:	bf00      	nop
  }

  return ret;
 800d9e4:	7bfb      	ldrb	r3, [r7, #15]
}
 800d9e6:	4618      	mov	r0, r3
 800d9e8:	3710      	adds	r7, #16
 800d9ea:	46bd      	mov	sp, r7
 800d9ec:	bd80      	pop	{r7, pc}
	...

0800d9f0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d9f0:	b580      	push	{r7, lr}
 800d9f2:	b084      	sub	sp, #16
 800d9f4:	af00      	add	r7, sp, #0
 800d9f6:	6078      	str	r0, [r7, #4]
 800d9f8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800d9fa:	2300      	movs	r3, #0
 800d9fc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800d9fe:	2300      	movs	r3, #0
 800da00:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800da02:	2300      	movs	r3, #0
 800da04:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800da06:	683b      	ldr	r3, [r7, #0]
 800da08:	885b      	ldrh	r3, [r3, #2]
 800da0a:	0a1b      	lsrs	r3, r3, #8
 800da0c:	b29b      	uxth	r3, r3
 800da0e:	3b01      	subs	r3, #1
 800da10:	2b0e      	cmp	r3, #14
 800da12:	f200 8152 	bhi.w	800dcba <USBD_GetDescriptor+0x2ca>
 800da16:	a201      	add	r2, pc, #4	; (adr r2, 800da1c <USBD_GetDescriptor+0x2c>)
 800da18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800da1c:	0800da8d 	.word	0x0800da8d
 800da20:	0800daa5 	.word	0x0800daa5
 800da24:	0800dae5 	.word	0x0800dae5
 800da28:	0800dcbb 	.word	0x0800dcbb
 800da2c:	0800dcbb 	.word	0x0800dcbb
 800da30:	0800dc5b 	.word	0x0800dc5b
 800da34:	0800dc87 	.word	0x0800dc87
 800da38:	0800dcbb 	.word	0x0800dcbb
 800da3c:	0800dcbb 	.word	0x0800dcbb
 800da40:	0800dcbb 	.word	0x0800dcbb
 800da44:	0800dcbb 	.word	0x0800dcbb
 800da48:	0800dcbb 	.word	0x0800dcbb
 800da4c:	0800dcbb 	.word	0x0800dcbb
 800da50:	0800dcbb 	.word	0x0800dcbb
 800da54:	0800da59 	.word	0x0800da59
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800da5e:	69db      	ldr	r3, [r3, #28]
 800da60:	2b00      	cmp	r3, #0
 800da62:	d00b      	beq.n	800da7c <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800da6a:	69db      	ldr	r3, [r3, #28]
 800da6c:	687a      	ldr	r2, [r7, #4]
 800da6e:	7c12      	ldrb	r2, [r2, #16]
 800da70:	f107 0108 	add.w	r1, r7, #8
 800da74:	4610      	mov	r0, r2
 800da76:	4798      	blx	r3
 800da78:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800da7a:	e126      	b.n	800dcca <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800da7c:	6839      	ldr	r1, [r7, #0]
 800da7e:	6878      	ldr	r0, [r7, #4]
 800da80:	f000 fb0e 	bl	800e0a0 <USBD_CtlError>
        err++;
 800da84:	7afb      	ldrb	r3, [r7, #11]
 800da86:	3301      	adds	r3, #1
 800da88:	72fb      	strb	r3, [r7, #11]
      break;
 800da8a:	e11e      	b.n	800dcca <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800da92:	681b      	ldr	r3, [r3, #0]
 800da94:	687a      	ldr	r2, [r7, #4]
 800da96:	7c12      	ldrb	r2, [r2, #16]
 800da98:	f107 0108 	add.w	r1, r7, #8
 800da9c:	4610      	mov	r0, r2
 800da9e:	4798      	blx	r3
 800daa0:	60f8      	str	r0, [r7, #12]
      break;
 800daa2:	e112      	b.n	800dcca <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	7c1b      	ldrb	r3, [r3, #16]
 800daa8:	2b00      	cmp	r3, #0
 800daaa:	d10d      	bne.n	800dac8 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800daac:	687b      	ldr	r3, [r7, #4]
 800daae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dab2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dab4:	f107 0208 	add.w	r2, r7, #8
 800dab8:	4610      	mov	r0, r2
 800daba:	4798      	blx	r3
 800dabc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800dabe:	68fb      	ldr	r3, [r7, #12]
 800dac0:	3301      	adds	r3, #1
 800dac2:	2202      	movs	r2, #2
 800dac4:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800dac6:	e100      	b.n	800dcca <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dace:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dad0:	f107 0208 	add.w	r2, r7, #8
 800dad4:	4610      	mov	r0, r2
 800dad6:	4798      	blx	r3
 800dad8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800dada:	68fb      	ldr	r3, [r7, #12]
 800dadc:	3301      	adds	r3, #1
 800dade:	2202      	movs	r2, #2
 800dae0:	701a      	strb	r2, [r3, #0]
      break;
 800dae2:	e0f2      	b.n	800dcca <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800dae4:	683b      	ldr	r3, [r7, #0]
 800dae6:	885b      	ldrh	r3, [r3, #2]
 800dae8:	b2db      	uxtb	r3, r3
 800daea:	2b05      	cmp	r3, #5
 800daec:	f200 80ac 	bhi.w	800dc48 <USBD_GetDescriptor+0x258>
 800daf0:	a201      	add	r2, pc, #4	; (adr r2, 800daf8 <USBD_GetDescriptor+0x108>)
 800daf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800daf6:	bf00      	nop
 800daf8:	0800db11 	.word	0x0800db11
 800dafc:	0800db45 	.word	0x0800db45
 800db00:	0800db79 	.word	0x0800db79
 800db04:	0800dbad 	.word	0x0800dbad
 800db08:	0800dbe1 	.word	0x0800dbe1
 800db0c:	0800dc15 	.word	0x0800dc15
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800db10:	687b      	ldr	r3, [r7, #4]
 800db12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800db16:	685b      	ldr	r3, [r3, #4]
 800db18:	2b00      	cmp	r3, #0
 800db1a:	d00b      	beq.n	800db34 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800db22:	685b      	ldr	r3, [r3, #4]
 800db24:	687a      	ldr	r2, [r7, #4]
 800db26:	7c12      	ldrb	r2, [r2, #16]
 800db28:	f107 0108 	add.w	r1, r7, #8
 800db2c:	4610      	mov	r0, r2
 800db2e:	4798      	blx	r3
 800db30:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800db32:	e091      	b.n	800dc58 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800db34:	6839      	ldr	r1, [r7, #0]
 800db36:	6878      	ldr	r0, [r7, #4]
 800db38:	f000 fab2 	bl	800e0a0 <USBD_CtlError>
            err++;
 800db3c:	7afb      	ldrb	r3, [r7, #11]
 800db3e:	3301      	adds	r3, #1
 800db40:	72fb      	strb	r3, [r7, #11]
          break;
 800db42:	e089      	b.n	800dc58 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800db4a:	689b      	ldr	r3, [r3, #8]
 800db4c:	2b00      	cmp	r3, #0
 800db4e:	d00b      	beq.n	800db68 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800db56:	689b      	ldr	r3, [r3, #8]
 800db58:	687a      	ldr	r2, [r7, #4]
 800db5a:	7c12      	ldrb	r2, [r2, #16]
 800db5c:	f107 0108 	add.w	r1, r7, #8
 800db60:	4610      	mov	r0, r2
 800db62:	4798      	blx	r3
 800db64:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800db66:	e077      	b.n	800dc58 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800db68:	6839      	ldr	r1, [r7, #0]
 800db6a:	6878      	ldr	r0, [r7, #4]
 800db6c:	f000 fa98 	bl	800e0a0 <USBD_CtlError>
            err++;
 800db70:	7afb      	ldrb	r3, [r7, #11]
 800db72:	3301      	adds	r3, #1
 800db74:	72fb      	strb	r3, [r7, #11]
          break;
 800db76:	e06f      	b.n	800dc58 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800db78:	687b      	ldr	r3, [r7, #4]
 800db7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800db7e:	68db      	ldr	r3, [r3, #12]
 800db80:	2b00      	cmp	r3, #0
 800db82:	d00b      	beq.n	800db9c <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800db8a:	68db      	ldr	r3, [r3, #12]
 800db8c:	687a      	ldr	r2, [r7, #4]
 800db8e:	7c12      	ldrb	r2, [r2, #16]
 800db90:	f107 0108 	add.w	r1, r7, #8
 800db94:	4610      	mov	r0, r2
 800db96:	4798      	blx	r3
 800db98:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800db9a:	e05d      	b.n	800dc58 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800db9c:	6839      	ldr	r1, [r7, #0]
 800db9e:	6878      	ldr	r0, [r7, #4]
 800dba0:	f000 fa7e 	bl	800e0a0 <USBD_CtlError>
            err++;
 800dba4:	7afb      	ldrb	r3, [r7, #11]
 800dba6:	3301      	adds	r3, #1
 800dba8:	72fb      	strb	r3, [r7, #11]
          break;
 800dbaa:	e055      	b.n	800dc58 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dbb2:	691b      	ldr	r3, [r3, #16]
 800dbb4:	2b00      	cmp	r3, #0
 800dbb6:	d00b      	beq.n	800dbd0 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dbbe:	691b      	ldr	r3, [r3, #16]
 800dbc0:	687a      	ldr	r2, [r7, #4]
 800dbc2:	7c12      	ldrb	r2, [r2, #16]
 800dbc4:	f107 0108 	add.w	r1, r7, #8
 800dbc8:	4610      	mov	r0, r2
 800dbca:	4798      	blx	r3
 800dbcc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800dbce:	e043      	b.n	800dc58 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800dbd0:	6839      	ldr	r1, [r7, #0]
 800dbd2:	6878      	ldr	r0, [r7, #4]
 800dbd4:	f000 fa64 	bl	800e0a0 <USBD_CtlError>
            err++;
 800dbd8:	7afb      	ldrb	r3, [r7, #11]
 800dbda:	3301      	adds	r3, #1
 800dbdc:	72fb      	strb	r3, [r7, #11]
          break;
 800dbde:	e03b      	b.n	800dc58 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800dbe0:	687b      	ldr	r3, [r7, #4]
 800dbe2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dbe6:	695b      	ldr	r3, [r3, #20]
 800dbe8:	2b00      	cmp	r3, #0
 800dbea:	d00b      	beq.n	800dc04 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dbf2:	695b      	ldr	r3, [r3, #20]
 800dbf4:	687a      	ldr	r2, [r7, #4]
 800dbf6:	7c12      	ldrb	r2, [r2, #16]
 800dbf8:	f107 0108 	add.w	r1, r7, #8
 800dbfc:	4610      	mov	r0, r2
 800dbfe:	4798      	blx	r3
 800dc00:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800dc02:	e029      	b.n	800dc58 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800dc04:	6839      	ldr	r1, [r7, #0]
 800dc06:	6878      	ldr	r0, [r7, #4]
 800dc08:	f000 fa4a 	bl	800e0a0 <USBD_CtlError>
            err++;
 800dc0c:	7afb      	ldrb	r3, [r7, #11]
 800dc0e:	3301      	adds	r3, #1
 800dc10:	72fb      	strb	r3, [r7, #11]
          break;
 800dc12:	e021      	b.n	800dc58 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800dc14:	687b      	ldr	r3, [r7, #4]
 800dc16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dc1a:	699b      	ldr	r3, [r3, #24]
 800dc1c:	2b00      	cmp	r3, #0
 800dc1e:	d00b      	beq.n	800dc38 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800dc20:	687b      	ldr	r3, [r7, #4]
 800dc22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dc26:	699b      	ldr	r3, [r3, #24]
 800dc28:	687a      	ldr	r2, [r7, #4]
 800dc2a:	7c12      	ldrb	r2, [r2, #16]
 800dc2c:	f107 0108 	add.w	r1, r7, #8
 800dc30:	4610      	mov	r0, r2
 800dc32:	4798      	blx	r3
 800dc34:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800dc36:	e00f      	b.n	800dc58 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800dc38:	6839      	ldr	r1, [r7, #0]
 800dc3a:	6878      	ldr	r0, [r7, #4]
 800dc3c:	f000 fa30 	bl	800e0a0 <USBD_CtlError>
            err++;
 800dc40:	7afb      	ldrb	r3, [r7, #11]
 800dc42:	3301      	adds	r3, #1
 800dc44:	72fb      	strb	r3, [r7, #11]
          break;
 800dc46:	e007      	b.n	800dc58 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800dc48:	6839      	ldr	r1, [r7, #0]
 800dc4a:	6878      	ldr	r0, [r7, #4]
 800dc4c:	f000 fa28 	bl	800e0a0 <USBD_CtlError>
          err++;
 800dc50:	7afb      	ldrb	r3, [r7, #11]
 800dc52:	3301      	adds	r3, #1
 800dc54:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800dc56:	bf00      	nop
      }
      break;
 800dc58:	e037      	b.n	800dcca <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800dc5a:	687b      	ldr	r3, [r7, #4]
 800dc5c:	7c1b      	ldrb	r3, [r3, #16]
 800dc5e:	2b00      	cmp	r3, #0
 800dc60:	d109      	bne.n	800dc76 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800dc62:	687b      	ldr	r3, [r7, #4]
 800dc64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dc68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dc6a:	f107 0208 	add.w	r2, r7, #8
 800dc6e:	4610      	mov	r0, r2
 800dc70:	4798      	blx	r3
 800dc72:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800dc74:	e029      	b.n	800dcca <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800dc76:	6839      	ldr	r1, [r7, #0]
 800dc78:	6878      	ldr	r0, [r7, #4]
 800dc7a:	f000 fa11 	bl	800e0a0 <USBD_CtlError>
        err++;
 800dc7e:	7afb      	ldrb	r3, [r7, #11]
 800dc80:	3301      	adds	r3, #1
 800dc82:	72fb      	strb	r3, [r7, #11]
      break;
 800dc84:	e021      	b.n	800dcca <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800dc86:	687b      	ldr	r3, [r7, #4]
 800dc88:	7c1b      	ldrb	r3, [r3, #16]
 800dc8a:	2b00      	cmp	r3, #0
 800dc8c:	d10d      	bne.n	800dcaa <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800dc8e:	687b      	ldr	r3, [r7, #4]
 800dc90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dc94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dc96:	f107 0208 	add.w	r2, r7, #8
 800dc9a:	4610      	mov	r0, r2
 800dc9c:	4798      	blx	r3
 800dc9e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800dca0:	68fb      	ldr	r3, [r7, #12]
 800dca2:	3301      	adds	r3, #1
 800dca4:	2207      	movs	r2, #7
 800dca6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800dca8:	e00f      	b.n	800dcca <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800dcaa:	6839      	ldr	r1, [r7, #0]
 800dcac:	6878      	ldr	r0, [r7, #4]
 800dcae:	f000 f9f7 	bl	800e0a0 <USBD_CtlError>
        err++;
 800dcb2:	7afb      	ldrb	r3, [r7, #11]
 800dcb4:	3301      	adds	r3, #1
 800dcb6:	72fb      	strb	r3, [r7, #11]
      break;
 800dcb8:	e007      	b.n	800dcca <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800dcba:	6839      	ldr	r1, [r7, #0]
 800dcbc:	6878      	ldr	r0, [r7, #4]
 800dcbe:	f000 f9ef 	bl	800e0a0 <USBD_CtlError>
      err++;
 800dcc2:	7afb      	ldrb	r3, [r7, #11]
 800dcc4:	3301      	adds	r3, #1
 800dcc6:	72fb      	strb	r3, [r7, #11]
      break;
 800dcc8:	bf00      	nop
  }

  if (err != 0U)
 800dcca:	7afb      	ldrb	r3, [r7, #11]
 800dccc:	2b00      	cmp	r3, #0
 800dcce:	d11e      	bne.n	800dd0e <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800dcd0:	683b      	ldr	r3, [r7, #0]
 800dcd2:	88db      	ldrh	r3, [r3, #6]
 800dcd4:	2b00      	cmp	r3, #0
 800dcd6:	d016      	beq.n	800dd06 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800dcd8:	893b      	ldrh	r3, [r7, #8]
 800dcda:	2b00      	cmp	r3, #0
 800dcdc:	d00e      	beq.n	800dcfc <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800dcde:	683b      	ldr	r3, [r7, #0]
 800dce0:	88da      	ldrh	r2, [r3, #6]
 800dce2:	893b      	ldrh	r3, [r7, #8]
 800dce4:	4293      	cmp	r3, r2
 800dce6:	bf28      	it	cs
 800dce8:	4613      	movcs	r3, r2
 800dcea:	b29b      	uxth	r3, r3
 800dcec:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800dcee:	893b      	ldrh	r3, [r7, #8]
 800dcf0:	461a      	mov	r2, r3
 800dcf2:	68f9      	ldr	r1, [r7, #12]
 800dcf4:	6878      	ldr	r0, [r7, #4]
 800dcf6:	f000 fa44 	bl	800e182 <USBD_CtlSendData>
 800dcfa:	e009      	b.n	800dd10 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800dcfc:	6839      	ldr	r1, [r7, #0]
 800dcfe:	6878      	ldr	r0, [r7, #4]
 800dd00:	f000 f9ce 	bl	800e0a0 <USBD_CtlError>
 800dd04:	e004      	b.n	800dd10 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800dd06:	6878      	ldr	r0, [r7, #4]
 800dd08:	f000 fa95 	bl	800e236 <USBD_CtlSendStatus>
 800dd0c:	e000      	b.n	800dd10 <USBD_GetDescriptor+0x320>
    return;
 800dd0e:	bf00      	nop
  }
}
 800dd10:	3710      	adds	r7, #16
 800dd12:	46bd      	mov	sp, r7
 800dd14:	bd80      	pop	{r7, pc}
 800dd16:	bf00      	nop

0800dd18 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dd18:	b580      	push	{r7, lr}
 800dd1a:	b084      	sub	sp, #16
 800dd1c:	af00      	add	r7, sp, #0
 800dd1e:	6078      	str	r0, [r7, #4]
 800dd20:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800dd22:	683b      	ldr	r3, [r7, #0]
 800dd24:	889b      	ldrh	r3, [r3, #4]
 800dd26:	2b00      	cmp	r3, #0
 800dd28:	d131      	bne.n	800dd8e <USBD_SetAddress+0x76>
 800dd2a:	683b      	ldr	r3, [r7, #0]
 800dd2c:	88db      	ldrh	r3, [r3, #6]
 800dd2e:	2b00      	cmp	r3, #0
 800dd30:	d12d      	bne.n	800dd8e <USBD_SetAddress+0x76>
 800dd32:	683b      	ldr	r3, [r7, #0]
 800dd34:	885b      	ldrh	r3, [r3, #2]
 800dd36:	2b7f      	cmp	r3, #127	; 0x7f
 800dd38:	d829      	bhi.n	800dd8e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800dd3a:	683b      	ldr	r3, [r7, #0]
 800dd3c:	885b      	ldrh	r3, [r3, #2]
 800dd3e:	b2db      	uxtb	r3, r3
 800dd40:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dd44:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dd46:	687b      	ldr	r3, [r7, #4]
 800dd48:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dd4c:	b2db      	uxtb	r3, r3
 800dd4e:	2b03      	cmp	r3, #3
 800dd50:	d104      	bne.n	800dd5c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800dd52:	6839      	ldr	r1, [r7, #0]
 800dd54:	6878      	ldr	r0, [r7, #4]
 800dd56:	f000 f9a3 	bl	800e0a0 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dd5a:	e01d      	b.n	800dd98 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800dd5c:	687b      	ldr	r3, [r7, #4]
 800dd5e:	7bfa      	ldrb	r2, [r7, #15]
 800dd60:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800dd64:	7bfb      	ldrb	r3, [r7, #15]
 800dd66:	4619      	mov	r1, r3
 800dd68:	6878      	ldr	r0, [r7, #4]
 800dd6a:	f002 ff48 	bl	8010bfe <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800dd6e:	6878      	ldr	r0, [r7, #4]
 800dd70:	f000 fa61 	bl	800e236 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800dd74:	7bfb      	ldrb	r3, [r7, #15]
 800dd76:	2b00      	cmp	r3, #0
 800dd78:	d004      	beq.n	800dd84 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800dd7a:	687b      	ldr	r3, [r7, #4]
 800dd7c:	2202      	movs	r2, #2
 800dd7e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dd82:	e009      	b.n	800dd98 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800dd84:	687b      	ldr	r3, [r7, #4]
 800dd86:	2201      	movs	r2, #1
 800dd88:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dd8c:	e004      	b.n	800dd98 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800dd8e:	6839      	ldr	r1, [r7, #0]
 800dd90:	6878      	ldr	r0, [r7, #4]
 800dd92:	f000 f985 	bl	800e0a0 <USBD_CtlError>
  }
}
 800dd96:	bf00      	nop
 800dd98:	bf00      	nop
 800dd9a:	3710      	adds	r7, #16
 800dd9c:	46bd      	mov	sp, r7
 800dd9e:	bd80      	pop	{r7, pc}

0800dda0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dda0:	b580      	push	{r7, lr}
 800dda2:	b084      	sub	sp, #16
 800dda4:	af00      	add	r7, sp, #0
 800dda6:	6078      	str	r0, [r7, #4]
 800dda8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ddaa:	2300      	movs	r3, #0
 800ddac:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800ddae:	683b      	ldr	r3, [r7, #0]
 800ddb0:	885b      	ldrh	r3, [r3, #2]
 800ddb2:	b2da      	uxtb	r2, r3
 800ddb4:	4b4c      	ldr	r3, [pc, #304]	; (800dee8 <USBD_SetConfig+0x148>)
 800ddb6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800ddb8:	4b4b      	ldr	r3, [pc, #300]	; (800dee8 <USBD_SetConfig+0x148>)
 800ddba:	781b      	ldrb	r3, [r3, #0]
 800ddbc:	2b01      	cmp	r3, #1
 800ddbe:	d905      	bls.n	800ddcc <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800ddc0:	6839      	ldr	r1, [r7, #0]
 800ddc2:	6878      	ldr	r0, [r7, #4]
 800ddc4:	f000 f96c 	bl	800e0a0 <USBD_CtlError>
    return USBD_FAIL;
 800ddc8:	2303      	movs	r3, #3
 800ddca:	e088      	b.n	800dede <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ddd2:	b2db      	uxtb	r3, r3
 800ddd4:	2b02      	cmp	r3, #2
 800ddd6:	d002      	beq.n	800ddde <USBD_SetConfig+0x3e>
 800ddd8:	2b03      	cmp	r3, #3
 800ddda:	d025      	beq.n	800de28 <USBD_SetConfig+0x88>
 800dddc:	e071      	b.n	800dec2 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800ddde:	4b42      	ldr	r3, [pc, #264]	; (800dee8 <USBD_SetConfig+0x148>)
 800dde0:	781b      	ldrb	r3, [r3, #0]
 800dde2:	2b00      	cmp	r3, #0
 800dde4:	d01c      	beq.n	800de20 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800dde6:	4b40      	ldr	r3, [pc, #256]	; (800dee8 <USBD_SetConfig+0x148>)
 800dde8:	781b      	ldrb	r3, [r3, #0]
 800ddea:	461a      	mov	r2, r3
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800ddf0:	4b3d      	ldr	r3, [pc, #244]	; (800dee8 <USBD_SetConfig+0x148>)
 800ddf2:	781b      	ldrb	r3, [r3, #0]
 800ddf4:	4619      	mov	r1, r3
 800ddf6:	6878      	ldr	r0, [r7, #4]
 800ddf8:	f7ff f992 	bl	800d120 <USBD_SetClassConfig>
 800ddfc:	4603      	mov	r3, r0
 800ddfe:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800de00:	7bfb      	ldrb	r3, [r7, #15]
 800de02:	2b00      	cmp	r3, #0
 800de04:	d004      	beq.n	800de10 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800de06:	6839      	ldr	r1, [r7, #0]
 800de08:	6878      	ldr	r0, [r7, #4]
 800de0a:	f000 f949 	bl	800e0a0 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800de0e:	e065      	b.n	800dedc <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800de10:	6878      	ldr	r0, [r7, #4]
 800de12:	f000 fa10 	bl	800e236 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800de16:	687b      	ldr	r3, [r7, #4]
 800de18:	2203      	movs	r2, #3
 800de1a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800de1e:	e05d      	b.n	800dedc <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800de20:	6878      	ldr	r0, [r7, #4]
 800de22:	f000 fa08 	bl	800e236 <USBD_CtlSendStatus>
      break;
 800de26:	e059      	b.n	800dedc <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800de28:	4b2f      	ldr	r3, [pc, #188]	; (800dee8 <USBD_SetConfig+0x148>)
 800de2a:	781b      	ldrb	r3, [r3, #0]
 800de2c:	2b00      	cmp	r3, #0
 800de2e:	d112      	bne.n	800de56 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800de30:	687b      	ldr	r3, [r7, #4]
 800de32:	2202      	movs	r2, #2
 800de34:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800de38:	4b2b      	ldr	r3, [pc, #172]	; (800dee8 <USBD_SetConfig+0x148>)
 800de3a:	781b      	ldrb	r3, [r3, #0]
 800de3c:	461a      	mov	r2, r3
 800de3e:	687b      	ldr	r3, [r7, #4]
 800de40:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800de42:	4b29      	ldr	r3, [pc, #164]	; (800dee8 <USBD_SetConfig+0x148>)
 800de44:	781b      	ldrb	r3, [r3, #0]
 800de46:	4619      	mov	r1, r3
 800de48:	6878      	ldr	r0, [r7, #4]
 800de4a:	f7ff f985 	bl	800d158 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800de4e:	6878      	ldr	r0, [r7, #4]
 800de50:	f000 f9f1 	bl	800e236 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800de54:	e042      	b.n	800dedc <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800de56:	4b24      	ldr	r3, [pc, #144]	; (800dee8 <USBD_SetConfig+0x148>)
 800de58:	781b      	ldrb	r3, [r3, #0]
 800de5a:	461a      	mov	r2, r3
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	685b      	ldr	r3, [r3, #4]
 800de60:	429a      	cmp	r2, r3
 800de62:	d02a      	beq.n	800deba <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800de64:	687b      	ldr	r3, [r7, #4]
 800de66:	685b      	ldr	r3, [r3, #4]
 800de68:	b2db      	uxtb	r3, r3
 800de6a:	4619      	mov	r1, r3
 800de6c:	6878      	ldr	r0, [r7, #4]
 800de6e:	f7ff f973 	bl	800d158 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800de72:	4b1d      	ldr	r3, [pc, #116]	; (800dee8 <USBD_SetConfig+0x148>)
 800de74:	781b      	ldrb	r3, [r3, #0]
 800de76:	461a      	mov	r2, r3
 800de78:	687b      	ldr	r3, [r7, #4]
 800de7a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800de7c:	4b1a      	ldr	r3, [pc, #104]	; (800dee8 <USBD_SetConfig+0x148>)
 800de7e:	781b      	ldrb	r3, [r3, #0]
 800de80:	4619      	mov	r1, r3
 800de82:	6878      	ldr	r0, [r7, #4]
 800de84:	f7ff f94c 	bl	800d120 <USBD_SetClassConfig>
 800de88:	4603      	mov	r3, r0
 800de8a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800de8c:	7bfb      	ldrb	r3, [r7, #15]
 800de8e:	2b00      	cmp	r3, #0
 800de90:	d00f      	beq.n	800deb2 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800de92:	6839      	ldr	r1, [r7, #0]
 800de94:	6878      	ldr	r0, [r7, #4]
 800de96:	f000 f903 	bl	800e0a0 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800de9a:	687b      	ldr	r3, [r7, #4]
 800de9c:	685b      	ldr	r3, [r3, #4]
 800de9e:	b2db      	uxtb	r3, r3
 800dea0:	4619      	mov	r1, r3
 800dea2:	6878      	ldr	r0, [r7, #4]
 800dea4:	f7ff f958 	bl	800d158 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800dea8:	687b      	ldr	r3, [r7, #4]
 800deaa:	2202      	movs	r2, #2
 800deac:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800deb0:	e014      	b.n	800dedc <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800deb2:	6878      	ldr	r0, [r7, #4]
 800deb4:	f000 f9bf 	bl	800e236 <USBD_CtlSendStatus>
      break;
 800deb8:	e010      	b.n	800dedc <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800deba:	6878      	ldr	r0, [r7, #4]
 800debc:	f000 f9bb 	bl	800e236 <USBD_CtlSendStatus>
      break;
 800dec0:	e00c      	b.n	800dedc <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800dec2:	6839      	ldr	r1, [r7, #0]
 800dec4:	6878      	ldr	r0, [r7, #4]
 800dec6:	f000 f8eb 	bl	800e0a0 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800deca:	4b07      	ldr	r3, [pc, #28]	; (800dee8 <USBD_SetConfig+0x148>)
 800decc:	781b      	ldrb	r3, [r3, #0]
 800dece:	4619      	mov	r1, r3
 800ded0:	6878      	ldr	r0, [r7, #4]
 800ded2:	f7ff f941 	bl	800d158 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800ded6:	2303      	movs	r3, #3
 800ded8:	73fb      	strb	r3, [r7, #15]
      break;
 800deda:	bf00      	nop
  }

  return ret;
 800dedc:	7bfb      	ldrb	r3, [r7, #15]
}
 800dede:	4618      	mov	r0, r3
 800dee0:	3710      	adds	r7, #16
 800dee2:	46bd      	mov	sp, r7
 800dee4:	bd80      	pop	{r7, pc}
 800dee6:	bf00      	nop
 800dee8:	20000924 	.word	0x20000924

0800deec <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800deec:	b580      	push	{r7, lr}
 800deee:	b082      	sub	sp, #8
 800def0:	af00      	add	r7, sp, #0
 800def2:	6078      	str	r0, [r7, #4]
 800def4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800def6:	683b      	ldr	r3, [r7, #0]
 800def8:	88db      	ldrh	r3, [r3, #6]
 800defa:	2b01      	cmp	r3, #1
 800defc:	d004      	beq.n	800df08 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800defe:	6839      	ldr	r1, [r7, #0]
 800df00:	6878      	ldr	r0, [r7, #4]
 800df02:	f000 f8cd 	bl	800e0a0 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800df06:	e023      	b.n	800df50 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800df08:	687b      	ldr	r3, [r7, #4]
 800df0a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800df0e:	b2db      	uxtb	r3, r3
 800df10:	2b02      	cmp	r3, #2
 800df12:	dc02      	bgt.n	800df1a <USBD_GetConfig+0x2e>
 800df14:	2b00      	cmp	r3, #0
 800df16:	dc03      	bgt.n	800df20 <USBD_GetConfig+0x34>
 800df18:	e015      	b.n	800df46 <USBD_GetConfig+0x5a>
 800df1a:	2b03      	cmp	r3, #3
 800df1c:	d00b      	beq.n	800df36 <USBD_GetConfig+0x4a>
 800df1e:	e012      	b.n	800df46 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800df20:	687b      	ldr	r3, [r7, #4]
 800df22:	2200      	movs	r2, #0
 800df24:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800df26:	687b      	ldr	r3, [r7, #4]
 800df28:	3308      	adds	r3, #8
 800df2a:	2201      	movs	r2, #1
 800df2c:	4619      	mov	r1, r3
 800df2e:	6878      	ldr	r0, [r7, #4]
 800df30:	f000 f927 	bl	800e182 <USBD_CtlSendData>
        break;
 800df34:	e00c      	b.n	800df50 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800df36:	687b      	ldr	r3, [r7, #4]
 800df38:	3304      	adds	r3, #4
 800df3a:	2201      	movs	r2, #1
 800df3c:	4619      	mov	r1, r3
 800df3e:	6878      	ldr	r0, [r7, #4]
 800df40:	f000 f91f 	bl	800e182 <USBD_CtlSendData>
        break;
 800df44:	e004      	b.n	800df50 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800df46:	6839      	ldr	r1, [r7, #0]
 800df48:	6878      	ldr	r0, [r7, #4]
 800df4a:	f000 f8a9 	bl	800e0a0 <USBD_CtlError>
        break;
 800df4e:	bf00      	nop
}
 800df50:	bf00      	nop
 800df52:	3708      	adds	r7, #8
 800df54:	46bd      	mov	sp, r7
 800df56:	bd80      	pop	{r7, pc}

0800df58 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800df58:	b580      	push	{r7, lr}
 800df5a:	b082      	sub	sp, #8
 800df5c:	af00      	add	r7, sp, #0
 800df5e:	6078      	str	r0, [r7, #4]
 800df60:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800df62:	687b      	ldr	r3, [r7, #4]
 800df64:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800df68:	b2db      	uxtb	r3, r3
 800df6a:	3b01      	subs	r3, #1
 800df6c:	2b02      	cmp	r3, #2
 800df6e:	d81e      	bhi.n	800dfae <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800df70:	683b      	ldr	r3, [r7, #0]
 800df72:	88db      	ldrh	r3, [r3, #6]
 800df74:	2b02      	cmp	r3, #2
 800df76:	d004      	beq.n	800df82 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800df78:	6839      	ldr	r1, [r7, #0]
 800df7a:	6878      	ldr	r0, [r7, #4]
 800df7c:	f000 f890 	bl	800e0a0 <USBD_CtlError>
        break;
 800df80:	e01a      	b.n	800dfb8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800df82:	687b      	ldr	r3, [r7, #4]
 800df84:	2201      	movs	r2, #1
 800df86:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800df88:	687b      	ldr	r3, [r7, #4]
 800df8a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800df8e:	2b00      	cmp	r3, #0
 800df90:	d005      	beq.n	800df9e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800df92:	687b      	ldr	r3, [r7, #4]
 800df94:	68db      	ldr	r3, [r3, #12]
 800df96:	f043 0202 	orr.w	r2, r3, #2
 800df9a:	687b      	ldr	r3, [r7, #4]
 800df9c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800df9e:	687b      	ldr	r3, [r7, #4]
 800dfa0:	330c      	adds	r3, #12
 800dfa2:	2202      	movs	r2, #2
 800dfa4:	4619      	mov	r1, r3
 800dfa6:	6878      	ldr	r0, [r7, #4]
 800dfa8:	f000 f8eb 	bl	800e182 <USBD_CtlSendData>
      break;
 800dfac:	e004      	b.n	800dfb8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800dfae:	6839      	ldr	r1, [r7, #0]
 800dfb0:	6878      	ldr	r0, [r7, #4]
 800dfb2:	f000 f875 	bl	800e0a0 <USBD_CtlError>
      break;
 800dfb6:	bf00      	nop
  }
}
 800dfb8:	bf00      	nop
 800dfba:	3708      	adds	r7, #8
 800dfbc:	46bd      	mov	sp, r7
 800dfbe:	bd80      	pop	{r7, pc}

0800dfc0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dfc0:	b580      	push	{r7, lr}
 800dfc2:	b082      	sub	sp, #8
 800dfc4:	af00      	add	r7, sp, #0
 800dfc6:	6078      	str	r0, [r7, #4]
 800dfc8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800dfca:	683b      	ldr	r3, [r7, #0]
 800dfcc:	885b      	ldrh	r3, [r3, #2]
 800dfce:	2b01      	cmp	r3, #1
 800dfd0:	d106      	bne.n	800dfe0 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800dfd2:	687b      	ldr	r3, [r7, #4]
 800dfd4:	2201      	movs	r2, #1
 800dfd6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800dfda:	6878      	ldr	r0, [r7, #4]
 800dfdc:	f000 f92b 	bl	800e236 <USBD_CtlSendStatus>
  }
}
 800dfe0:	bf00      	nop
 800dfe2:	3708      	adds	r7, #8
 800dfe4:	46bd      	mov	sp, r7
 800dfe6:	bd80      	pop	{r7, pc}

0800dfe8 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dfe8:	b580      	push	{r7, lr}
 800dfea:	b082      	sub	sp, #8
 800dfec:	af00      	add	r7, sp, #0
 800dfee:	6078      	str	r0, [r7, #4]
 800dff0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800dff2:	687b      	ldr	r3, [r7, #4]
 800dff4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dff8:	b2db      	uxtb	r3, r3
 800dffa:	3b01      	subs	r3, #1
 800dffc:	2b02      	cmp	r3, #2
 800dffe:	d80b      	bhi.n	800e018 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800e000:	683b      	ldr	r3, [r7, #0]
 800e002:	885b      	ldrh	r3, [r3, #2]
 800e004:	2b01      	cmp	r3, #1
 800e006:	d10c      	bne.n	800e022 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800e008:	687b      	ldr	r3, [r7, #4]
 800e00a:	2200      	movs	r2, #0
 800e00c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800e010:	6878      	ldr	r0, [r7, #4]
 800e012:	f000 f910 	bl	800e236 <USBD_CtlSendStatus>
      }
      break;
 800e016:	e004      	b.n	800e022 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800e018:	6839      	ldr	r1, [r7, #0]
 800e01a:	6878      	ldr	r0, [r7, #4]
 800e01c:	f000 f840 	bl	800e0a0 <USBD_CtlError>
      break;
 800e020:	e000      	b.n	800e024 <USBD_ClrFeature+0x3c>
      break;
 800e022:	bf00      	nop
  }
}
 800e024:	bf00      	nop
 800e026:	3708      	adds	r7, #8
 800e028:	46bd      	mov	sp, r7
 800e02a:	bd80      	pop	{r7, pc}

0800e02c <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800e02c:	b580      	push	{r7, lr}
 800e02e:	b084      	sub	sp, #16
 800e030:	af00      	add	r7, sp, #0
 800e032:	6078      	str	r0, [r7, #4]
 800e034:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800e036:	683b      	ldr	r3, [r7, #0]
 800e038:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800e03a:	68fb      	ldr	r3, [r7, #12]
 800e03c:	781a      	ldrb	r2, [r3, #0]
 800e03e:	687b      	ldr	r3, [r7, #4]
 800e040:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800e042:	68fb      	ldr	r3, [r7, #12]
 800e044:	3301      	adds	r3, #1
 800e046:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800e048:	68fb      	ldr	r3, [r7, #12]
 800e04a:	781a      	ldrb	r2, [r3, #0]
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800e050:	68fb      	ldr	r3, [r7, #12]
 800e052:	3301      	adds	r3, #1
 800e054:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800e056:	68f8      	ldr	r0, [r7, #12]
 800e058:	f7ff fa92 	bl	800d580 <SWAPBYTE>
 800e05c:	4603      	mov	r3, r0
 800e05e:	461a      	mov	r2, r3
 800e060:	687b      	ldr	r3, [r7, #4]
 800e062:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800e064:	68fb      	ldr	r3, [r7, #12]
 800e066:	3301      	adds	r3, #1
 800e068:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800e06a:	68fb      	ldr	r3, [r7, #12]
 800e06c:	3301      	adds	r3, #1
 800e06e:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800e070:	68f8      	ldr	r0, [r7, #12]
 800e072:	f7ff fa85 	bl	800d580 <SWAPBYTE>
 800e076:	4603      	mov	r3, r0
 800e078:	461a      	mov	r2, r3
 800e07a:	687b      	ldr	r3, [r7, #4]
 800e07c:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800e07e:	68fb      	ldr	r3, [r7, #12]
 800e080:	3301      	adds	r3, #1
 800e082:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800e084:	68fb      	ldr	r3, [r7, #12]
 800e086:	3301      	adds	r3, #1
 800e088:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800e08a:	68f8      	ldr	r0, [r7, #12]
 800e08c:	f7ff fa78 	bl	800d580 <SWAPBYTE>
 800e090:	4603      	mov	r3, r0
 800e092:	461a      	mov	r2, r3
 800e094:	687b      	ldr	r3, [r7, #4]
 800e096:	80da      	strh	r2, [r3, #6]
}
 800e098:	bf00      	nop
 800e09a:	3710      	adds	r7, #16
 800e09c:	46bd      	mov	sp, r7
 800e09e:	bd80      	pop	{r7, pc}

0800e0a0 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e0a0:	b580      	push	{r7, lr}
 800e0a2:	b082      	sub	sp, #8
 800e0a4:	af00      	add	r7, sp, #0
 800e0a6:	6078      	str	r0, [r7, #4]
 800e0a8:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800e0aa:	2180      	movs	r1, #128	; 0x80
 800e0ac:	6878      	ldr	r0, [r7, #4]
 800e0ae:	f002 fd3b 	bl	8010b28 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800e0b2:	2100      	movs	r1, #0
 800e0b4:	6878      	ldr	r0, [r7, #4]
 800e0b6:	f002 fd37 	bl	8010b28 <USBD_LL_StallEP>
}
 800e0ba:	bf00      	nop
 800e0bc:	3708      	adds	r7, #8
 800e0be:	46bd      	mov	sp, r7
 800e0c0:	bd80      	pop	{r7, pc}

0800e0c2 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800e0c2:	b580      	push	{r7, lr}
 800e0c4:	b086      	sub	sp, #24
 800e0c6:	af00      	add	r7, sp, #0
 800e0c8:	60f8      	str	r0, [r7, #12]
 800e0ca:	60b9      	str	r1, [r7, #8]
 800e0cc:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800e0ce:	2300      	movs	r3, #0
 800e0d0:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800e0d2:	68fb      	ldr	r3, [r7, #12]
 800e0d4:	2b00      	cmp	r3, #0
 800e0d6:	d036      	beq.n	800e146 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800e0d8:	68fb      	ldr	r3, [r7, #12]
 800e0da:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800e0dc:	6938      	ldr	r0, [r7, #16]
 800e0de:	f000 f836 	bl	800e14e <USBD_GetLen>
 800e0e2:	4603      	mov	r3, r0
 800e0e4:	3301      	adds	r3, #1
 800e0e6:	b29b      	uxth	r3, r3
 800e0e8:	005b      	lsls	r3, r3, #1
 800e0ea:	b29a      	uxth	r2, r3
 800e0ec:	687b      	ldr	r3, [r7, #4]
 800e0ee:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800e0f0:	7dfb      	ldrb	r3, [r7, #23]
 800e0f2:	68ba      	ldr	r2, [r7, #8]
 800e0f4:	4413      	add	r3, r2
 800e0f6:	687a      	ldr	r2, [r7, #4]
 800e0f8:	7812      	ldrb	r2, [r2, #0]
 800e0fa:	701a      	strb	r2, [r3, #0]
  idx++;
 800e0fc:	7dfb      	ldrb	r3, [r7, #23]
 800e0fe:	3301      	adds	r3, #1
 800e100:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800e102:	7dfb      	ldrb	r3, [r7, #23]
 800e104:	68ba      	ldr	r2, [r7, #8]
 800e106:	4413      	add	r3, r2
 800e108:	2203      	movs	r2, #3
 800e10a:	701a      	strb	r2, [r3, #0]
  idx++;
 800e10c:	7dfb      	ldrb	r3, [r7, #23]
 800e10e:	3301      	adds	r3, #1
 800e110:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800e112:	e013      	b.n	800e13c <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800e114:	7dfb      	ldrb	r3, [r7, #23]
 800e116:	68ba      	ldr	r2, [r7, #8]
 800e118:	4413      	add	r3, r2
 800e11a:	693a      	ldr	r2, [r7, #16]
 800e11c:	7812      	ldrb	r2, [r2, #0]
 800e11e:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800e120:	693b      	ldr	r3, [r7, #16]
 800e122:	3301      	adds	r3, #1
 800e124:	613b      	str	r3, [r7, #16]
    idx++;
 800e126:	7dfb      	ldrb	r3, [r7, #23]
 800e128:	3301      	adds	r3, #1
 800e12a:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800e12c:	7dfb      	ldrb	r3, [r7, #23]
 800e12e:	68ba      	ldr	r2, [r7, #8]
 800e130:	4413      	add	r3, r2
 800e132:	2200      	movs	r2, #0
 800e134:	701a      	strb	r2, [r3, #0]
    idx++;
 800e136:	7dfb      	ldrb	r3, [r7, #23]
 800e138:	3301      	adds	r3, #1
 800e13a:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800e13c:	693b      	ldr	r3, [r7, #16]
 800e13e:	781b      	ldrb	r3, [r3, #0]
 800e140:	2b00      	cmp	r3, #0
 800e142:	d1e7      	bne.n	800e114 <USBD_GetString+0x52>
 800e144:	e000      	b.n	800e148 <USBD_GetString+0x86>
    return;
 800e146:	bf00      	nop
  }
}
 800e148:	3718      	adds	r7, #24
 800e14a:	46bd      	mov	sp, r7
 800e14c:	bd80      	pop	{r7, pc}

0800e14e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800e14e:	b480      	push	{r7}
 800e150:	b085      	sub	sp, #20
 800e152:	af00      	add	r7, sp, #0
 800e154:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800e156:	2300      	movs	r3, #0
 800e158:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800e15a:	687b      	ldr	r3, [r7, #4]
 800e15c:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800e15e:	e005      	b.n	800e16c <USBD_GetLen+0x1e>
  {
    len++;
 800e160:	7bfb      	ldrb	r3, [r7, #15]
 800e162:	3301      	adds	r3, #1
 800e164:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800e166:	68bb      	ldr	r3, [r7, #8]
 800e168:	3301      	adds	r3, #1
 800e16a:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800e16c:	68bb      	ldr	r3, [r7, #8]
 800e16e:	781b      	ldrb	r3, [r3, #0]
 800e170:	2b00      	cmp	r3, #0
 800e172:	d1f5      	bne.n	800e160 <USBD_GetLen+0x12>
  }

  return len;
 800e174:	7bfb      	ldrb	r3, [r7, #15]
}
 800e176:	4618      	mov	r0, r3
 800e178:	3714      	adds	r7, #20
 800e17a:	46bd      	mov	sp, r7
 800e17c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e180:	4770      	bx	lr

0800e182 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800e182:	b580      	push	{r7, lr}
 800e184:	b084      	sub	sp, #16
 800e186:	af00      	add	r7, sp, #0
 800e188:	60f8      	str	r0, [r7, #12]
 800e18a:	60b9      	str	r1, [r7, #8]
 800e18c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800e18e:	68fb      	ldr	r3, [r7, #12]
 800e190:	2202      	movs	r2, #2
 800e192:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800e196:	68fb      	ldr	r3, [r7, #12]
 800e198:	687a      	ldr	r2, [r7, #4]
 800e19a:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800e19c:	68fb      	ldr	r3, [r7, #12]
 800e19e:	687a      	ldr	r2, [r7, #4]
 800e1a0:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800e1a2:	687b      	ldr	r3, [r7, #4]
 800e1a4:	68ba      	ldr	r2, [r7, #8]
 800e1a6:	2100      	movs	r1, #0
 800e1a8:	68f8      	ldr	r0, [r7, #12]
 800e1aa:	f002 fd47 	bl	8010c3c <USBD_LL_Transmit>

  return USBD_OK;
 800e1ae:	2300      	movs	r3, #0
}
 800e1b0:	4618      	mov	r0, r3
 800e1b2:	3710      	adds	r7, #16
 800e1b4:	46bd      	mov	sp, r7
 800e1b6:	bd80      	pop	{r7, pc}

0800e1b8 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800e1b8:	b580      	push	{r7, lr}
 800e1ba:	b084      	sub	sp, #16
 800e1bc:	af00      	add	r7, sp, #0
 800e1be:	60f8      	str	r0, [r7, #12]
 800e1c0:	60b9      	str	r1, [r7, #8]
 800e1c2:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800e1c4:	687b      	ldr	r3, [r7, #4]
 800e1c6:	68ba      	ldr	r2, [r7, #8]
 800e1c8:	2100      	movs	r1, #0
 800e1ca:	68f8      	ldr	r0, [r7, #12]
 800e1cc:	f002 fd36 	bl	8010c3c <USBD_LL_Transmit>

  return USBD_OK;
 800e1d0:	2300      	movs	r3, #0
}
 800e1d2:	4618      	mov	r0, r3
 800e1d4:	3710      	adds	r7, #16
 800e1d6:	46bd      	mov	sp, r7
 800e1d8:	bd80      	pop	{r7, pc}

0800e1da <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800e1da:	b580      	push	{r7, lr}
 800e1dc:	b084      	sub	sp, #16
 800e1de:	af00      	add	r7, sp, #0
 800e1e0:	60f8      	str	r0, [r7, #12]
 800e1e2:	60b9      	str	r1, [r7, #8]
 800e1e4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800e1e6:	68fb      	ldr	r3, [r7, #12]
 800e1e8:	2203      	movs	r2, #3
 800e1ea:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800e1ee:	68fb      	ldr	r3, [r7, #12]
 800e1f0:	687a      	ldr	r2, [r7, #4]
 800e1f2:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800e1f6:	68fb      	ldr	r3, [r7, #12]
 800e1f8:	687a      	ldr	r2, [r7, #4]
 800e1fa:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800e1fe:	687b      	ldr	r3, [r7, #4]
 800e200:	68ba      	ldr	r2, [r7, #8]
 800e202:	2100      	movs	r1, #0
 800e204:	68f8      	ldr	r0, [r7, #12]
 800e206:	f002 fd3a 	bl	8010c7e <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e20a:	2300      	movs	r3, #0
}
 800e20c:	4618      	mov	r0, r3
 800e20e:	3710      	adds	r7, #16
 800e210:	46bd      	mov	sp, r7
 800e212:	bd80      	pop	{r7, pc}

0800e214 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800e214:	b580      	push	{r7, lr}
 800e216:	b084      	sub	sp, #16
 800e218:	af00      	add	r7, sp, #0
 800e21a:	60f8      	str	r0, [r7, #12]
 800e21c:	60b9      	str	r1, [r7, #8]
 800e21e:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	68ba      	ldr	r2, [r7, #8]
 800e224:	2100      	movs	r1, #0
 800e226:	68f8      	ldr	r0, [r7, #12]
 800e228:	f002 fd29 	bl	8010c7e <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e22c:	2300      	movs	r3, #0
}
 800e22e:	4618      	mov	r0, r3
 800e230:	3710      	adds	r7, #16
 800e232:	46bd      	mov	sp, r7
 800e234:	bd80      	pop	{r7, pc}

0800e236 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800e236:	b580      	push	{r7, lr}
 800e238:	b082      	sub	sp, #8
 800e23a:	af00      	add	r7, sp, #0
 800e23c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800e23e:	687b      	ldr	r3, [r7, #4]
 800e240:	2204      	movs	r2, #4
 800e242:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800e246:	2300      	movs	r3, #0
 800e248:	2200      	movs	r2, #0
 800e24a:	2100      	movs	r1, #0
 800e24c:	6878      	ldr	r0, [r7, #4]
 800e24e:	f002 fcf5 	bl	8010c3c <USBD_LL_Transmit>

  return USBD_OK;
 800e252:	2300      	movs	r3, #0
}
 800e254:	4618      	mov	r0, r3
 800e256:	3708      	adds	r7, #8
 800e258:	46bd      	mov	sp, r7
 800e25a:	bd80      	pop	{r7, pc}

0800e25c <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800e25c:	b580      	push	{r7, lr}
 800e25e:	b082      	sub	sp, #8
 800e260:	af00      	add	r7, sp, #0
 800e262:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800e264:	687b      	ldr	r3, [r7, #4]
 800e266:	2205      	movs	r2, #5
 800e268:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e26c:	2300      	movs	r3, #0
 800e26e:	2200      	movs	r2, #0
 800e270:	2100      	movs	r1, #0
 800e272:	6878      	ldr	r0, [r7, #4]
 800e274:	f002 fd03 	bl	8010c7e <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e278:	2300      	movs	r3, #0
}
 800e27a:	4618      	mov	r0, r3
 800e27c:	3708      	adds	r7, #8
 800e27e:	46bd      	mov	sp, r7
 800e280:	bd80      	pop	{r7, pc}

0800e282 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800e282:	b480      	push	{r7}
 800e284:	b085      	sub	sp, #20
 800e286:	af00      	add	r7, sp, #0
 800e288:	4603      	mov	r3, r0
 800e28a:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800e28c:	2300      	movs	r3, #0
 800e28e:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800e290:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800e294:	2b84      	cmp	r3, #132	; 0x84
 800e296:	d005      	beq.n	800e2a4 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800e298:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800e29c:	68fb      	ldr	r3, [r7, #12]
 800e29e:	4413      	add	r3, r2
 800e2a0:	3303      	adds	r3, #3
 800e2a2:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800e2a4:	68fb      	ldr	r3, [r7, #12]
}
 800e2a6:	4618      	mov	r0, r3
 800e2a8:	3714      	adds	r7, #20
 800e2aa:	46bd      	mov	sp, r7
 800e2ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2b0:	4770      	bx	lr

0800e2b2 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800e2b2:	b580      	push	{r7, lr}
 800e2b4:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800e2b6:	f000 fe6d 	bl	800ef94 <vTaskStartScheduler>
  
  return osOK;
 800e2ba:	2300      	movs	r3, #0
}
 800e2bc:	4618      	mov	r0, r3
 800e2be:	bd80      	pop	{r7, pc}

0800e2c0 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800e2c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e2c2:	b087      	sub	sp, #28
 800e2c4:	af02      	add	r7, sp, #8
 800e2c6:	6078      	str	r0, [r7, #4]
 800e2c8:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800e2ca:	687b      	ldr	r3, [r7, #4]
 800e2cc:	685c      	ldr	r4, [r3, #4]
 800e2ce:	687b      	ldr	r3, [r7, #4]
 800e2d0:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800e2d2:	687b      	ldr	r3, [r7, #4]
 800e2d4:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800e2d6:	b29e      	uxth	r6, r3
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800e2d8:	687b      	ldr	r3, [r7, #4]
 800e2da:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800e2de:	4618      	mov	r0, r3
 800e2e0:	f7ff ffcf 	bl	800e282 <makeFreeRtosPriority>
 800e2e4:	4602      	mov	r2, r0
 800e2e6:	f107 030c 	add.w	r3, r7, #12
 800e2ea:	9301      	str	r3, [sp, #4]
 800e2ec:	9200      	str	r2, [sp, #0]
 800e2ee:	683b      	ldr	r3, [r7, #0]
 800e2f0:	4632      	mov	r2, r6
 800e2f2:	4629      	mov	r1, r5
 800e2f4:	4620      	mov	r0, r4
 800e2f6:	f000 fccf 	bl	800ec98 <xTaskCreate>
 800e2fa:	4603      	mov	r3, r0
 800e2fc:	2b01      	cmp	r3, #1
 800e2fe:	d001      	beq.n	800e304 <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 800e300:	2300      	movs	r3, #0
 800e302:	e000      	b.n	800e306 <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 800e304:	68fb      	ldr	r3, [r7, #12]
}
 800e306:	4618      	mov	r0, r3
 800e308:	3714      	adds	r7, #20
 800e30a:	46bd      	mov	sp, r7
 800e30c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800e30e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800e30e:	b580      	push	{r7, lr}
 800e310:	b084      	sub	sp, #16
 800e312:	af00      	add	r7, sp, #0
 800e314:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800e316:	687b      	ldr	r3, [r7, #4]
 800e318:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800e31a:	68fb      	ldr	r3, [r7, #12]
 800e31c:	2b00      	cmp	r3, #0
 800e31e:	d001      	beq.n	800e324 <osDelay+0x16>
 800e320:	68fb      	ldr	r3, [r7, #12]
 800e322:	e000      	b.n	800e326 <osDelay+0x18>
 800e324:	2301      	movs	r3, #1
 800e326:	4618      	mov	r0, r3
 800e328:	f000 fe00 	bl	800ef2c <vTaskDelay>
  
  return osOK;
 800e32c:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800e32e:	4618      	mov	r0, r3
 800e330:	3710      	adds	r7, #16
 800e332:	46bd      	mov	sp, r7
 800e334:	bd80      	pop	{r7, pc}

0800e336 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800e336:	b480      	push	{r7}
 800e338:	b083      	sub	sp, #12
 800e33a:	af00      	add	r7, sp, #0
 800e33c:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e33e:	687b      	ldr	r3, [r7, #4]
 800e340:	f103 0208 	add.w	r2, r3, #8
 800e344:	687b      	ldr	r3, [r7, #4]
 800e346:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800e348:	687b      	ldr	r3, [r7, #4]
 800e34a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e34e:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e350:	687b      	ldr	r3, [r7, #4]
 800e352:	f103 0208 	add.w	r2, r3, #8
 800e356:	687b      	ldr	r3, [r7, #4]
 800e358:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e35a:	687b      	ldr	r3, [r7, #4]
 800e35c:	f103 0208 	add.w	r2, r3, #8
 800e360:	687b      	ldr	r3, [r7, #4]
 800e362:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800e364:	687b      	ldr	r3, [r7, #4]
 800e366:	2200      	movs	r2, #0
 800e368:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800e36a:	bf00      	nop
 800e36c:	370c      	adds	r7, #12
 800e36e:	46bd      	mov	sp, r7
 800e370:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e374:	4770      	bx	lr

0800e376 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800e376:	b480      	push	{r7}
 800e378:	b083      	sub	sp, #12
 800e37a:	af00      	add	r7, sp, #0
 800e37c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800e37e:	687b      	ldr	r3, [r7, #4]
 800e380:	2200      	movs	r2, #0
 800e382:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800e384:	bf00      	nop
 800e386:	370c      	adds	r7, #12
 800e388:	46bd      	mov	sp, r7
 800e38a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e38e:	4770      	bx	lr

0800e390 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800e390:	b480      	push	{r7}
 800e392:	b085      	sub	sp, #20
 800e394:	af00      	add	r7, sp, #0
 800e396:	6078      	str	r0, [r7, #4]
 800e398:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800e39a:	687b      	ldr	r3, [r7, #4]
 800e39c:	685b      	ldr	r3, [r3, #4]
 800e39e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800e3a0:	683b      	ldr	r3, [r7, #0]
 800e3a2:	68fa      	ldr	r2, [r7, #12]
 800e3a4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800e3a6:	68fb      	ldr	r3, [r7, #12]
 800e3a8:	689a      	ldr	r2, [r3, #8]
 800e3aa:	683b      	ldr	r3, [r7, #0]
 800e3ac:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800e3ae:	68fb      	ldr	r3, [r7, #12]
 800e3b0:	689b      	ldr	r3, [r3, #8]
 800e3b2:	683a      	ldr	r2, [r7, #0]
 800e3b4:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800e3b6:	68fb      	ldr	r3, [r7, #12]
 800e3b8:	683a      	ldr	r2, [r7, #0]
 800e3ba:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800e3bc:	683b      	ldr	r3, [r7, #0]
 800e3be:	687a      	ldr	r2, [r7, #4]
 800e3c0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800e3c2:	687b      	ldr	r3, [r7, #4]
 800e3c4:	681b      	ldr	r3, [r3, #0]
 800e3c6:	1c5a      	adds	r2, r3, #1
 800e3c8:	687b      	ldr	r3, [r7, #4]
 800e3ca:	601a      	str	r2, [r3, #0]
}
 800e3cc:	bf00      	nop
 800e3ce:	3714      	adds	r7, #20
 800e3d0:	46bd      	mov	sp, r7
 800e3d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3d6:	4770      	bx	lr

0800e3d8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800e3d8:	b480      	push	{r7}
 800e3da:	b085      	sub	sp, #20
 800e3dc:	af00      	add	r7, sp, #0
 800e3de:	6078      	str	r0, [r7, #4]
 800e3e0:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800e3e2:	683b      	ldr	r3, [r7, #0]
 800e3e4:	681b      	ldr	r3, [r3, #0]
 800e3e6:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800e3e8:	68bb      	ldr	r3, [r7, #8]
 800e3ea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e3ee:	d103      	bne.n	800e3f8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800e3f0:	687b      	ldr	r3, [r7, #4]
 800e3f2:	691b      	ldr	r3, [r3, #16]
 800e3f4:	60fb      	str	r3, [r7, #12]
 800e3f6:	e00c      	b.n	800e412 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800e3f8:	687b      	ldr	r3, [r7, #4]
 800e3fa:	3308      	adds	r3, #8
 800e3fc:	60fb      	str	r3, [r7, #12]
 800e3fe:	e002      	b.n	800e406 <vListInsert+0x2e>
 800e400:	68fb      	ldr	r3, [r7, #12]
 800e402:	685b      	ldr	r3, [r3, #4]
 800e404:	60fb      	str	r3, [r7, #12]
 800e406:	68fb      	ldr	r3, [r7, #12]
 800e408:	685b      	ldr	r3, [r3, #4]
 800e40a:	681b      	ldr	r3, [r3, #0]
 800e40c:	68ba      	ldr	r2, [r7, #8]
 800e40e:	429a      	cmp	r2, r3
 800e410:	d2f6      	bcs.n	800e400 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800e412:	68fb      	ldr	r3, [r7, #12]
 800e414:	685a      	ldr	r2, [r3, #4]
 800e416:	683b      	ldr	r3, [r7, #0]
 800e418:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800e41a:	683b      	ldr	r3, [r7, #0]
 800e41c:	685b      	ldr	r3, [r3, #4]
 800e41e:	683a      	ldr	r2, [r7, #0]
 800e420:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800e422:	683b      	ldr	r3, [r7, #0]
 800e424:	68fa      	ldr	r2, [r7, #12]
 800e426:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800e428:	68fb      	ldr	r3, [r7, #12]
 800e42a:	683a      	ldr	r2, [r7, #0]
 800e42c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800e42e:	683b      	ldr	r3, [r7, #0]
 800e430:	687a      	ldr	r2, [r7, #4]
 800e432:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800e434:	687b      	ldr	r3, [r7, #4]
 800e436:	681b      	ldr	r3, [r3, #0]
 800e438:	1c5a      	adds	r2, r3, #1
 800e43a:	687b      	ldr	r3, [r7, #4]
 800e43c:	601a      	str	r2, [r3, #0]
}
 800e43e:	bf00      	nop
 800e440:	3714      	adds	r7, #20
 800e442:	46bd      	mov	sp, r7
 800e444:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e448:	4770      	bx	lr

0800e44a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800e44a:	b480      	push	{r7}
 800e44c:	b085      	sub	sp, #20
 800e44e:	af00      	add	r7, sp, #0
 800e450:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800e452:	687b      	ldr	r3, [r7, #4]
 800e454:	691b      	ldr	r3, [r3, #16]
 800e456:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800e458:	687b      	ldr	r3, [r7, #4]
 800e45a:	685b      	ldr	r3, [r3, #4]
 800e45c:	687a      	ldr	r2, [r7, #4]
 800e45e:	6892      	ldr	r2, [r2, #8]
 800e460:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800e462:	687b      	ldr	r3, [r7, #4]
 800e464:	689b      	ldr	r3, [r3, #8]
 800e466:	687a      	ldr	r2, [r7, #4]
 800e468:	6852      	ldr	r2, [r2, #4]
 800e46a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800e46c:	68fb      	ldr	r3, [r7, #12]
 800e46e:	685b      	ldr	r3, [r3, #4]
 800e470:	687a      	ldr	r2, [r7, #4]
 800e472:	429a      	cmp	r2, r3
 800e474:	d103      	bne.n	800e47e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800e476:	687b      	ldr	r3, [r7, #4]
 800e478:	689a      	ldr	r2, [r3, #8]
 800e47a:	68fb      	ldr	r3, [r7, #12]
 800e47c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800e47e:	687b      	ldr	r3, [r7, #4]
 800e480:	2200      	movs	r2, #0
 800e482:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800e484:	68fb      	ldr	r3, [r7, #12]
 800e486:	681b      	ldr	r3, [r3, #0]
 800e488:	1e5a      	subs	r2, r3, #1
 800e48a:	68fb      	ldr	r3, [r7, #12]
 800e48c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800e48e:	68fb      	ldr	r3, [r7, #12]
 800e490:	681b      	ldr	r3, [r3, #0]
}
 800e492:	4618      	mov	r0, r3
 800e494:	3714      	adds	r7, #20
 800e496:	46bd      	mov	sp, r7
 800e498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e49c:	4770      	bx	lr
	...

0800e4a0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800e4a0:	b580      	push	{r7, lr}
 800e4a2:	b084      	sub	sp, #16
 800e4a4:	af00      	add	r7, sp, #0
 800e4a6:	6078      	str	r0, [r7, #4]
 800e4a8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800e4aa:	687b      	ldr	r3, [r7, #4]
 800e4ac:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800e4ae:	68fb      	ldr	r3, [r7, #12]
 800e4b0:	2b00      	cmp	r3, #0
 800e4b2:	d10a      	bne.n	800e4ca <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800e4b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4b8:	f383 8811 	msr	BASEPRI, r3
 800e4bc:	f3bf 8f6f 	isb	sy
 800e4c0:	f3bf 8f4f 	dsb	sy
 800e4c4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800e4c6:	bf00      	nop
 800e4c8:	e7fe      	b.n	800e4c8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800e4ca:	f001 fcdb 	bl	800fe84 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e4ce:	68fb      	ldr	r3, [r7, #12]
 800e4d0:	681a      	ldr	r2, [r3, #0]
 800e4d2:	68fb      	ldr	r3, [r7, #12]
 800e4d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e4d6:	68f9      	ldr	r1, [r7, #12]
 800e4d8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800e4da:	fb01 f303 	mul.w	r3, r1, r3
 800e4de:	441a      	add	r2, r3
 800e4e0:	68fb      	ldr	r3, [r7, #12]
 800e4e2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800e4e4:	68fb      	ldr	r3, [r7, #12]
 800e4e6:	2200      	movs	r2, #0
 800e4e8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800e4ea:	68fb      	ldr	r3, [r7, #12]
 800e4ec:	681a      	ldr	r2, [r3, #0]
 800e4ee:	68fb      	ldr	r3, [r7, #12]
 800e4f0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e4f2:	68fb      	ldr	r3, [r7, #12]
 800e4f4:	681a      	ldr	r2, [r3, #0]
 800e4f6:	68fb      	ldr	r3, [r7, #12]
 800e4f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e4fa:	3b01      	subs	r3, #1
 800e4fc:	68f9      	ldr	r1, [r7, #12]
 800e4fe:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800e500:	fb01 f303 	mul.w	r3, r1, r3
 800e504:	441a      	add	r2, r3
 800e506:	68fb      	ldr	r3, [r7, #12]
 800e508:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800e50a:	68fb      	ldr	r3, [r7, #12]
 800e50c:	22ff      	movs	r2, #255	; 0xff
 800e50e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800e512:	68fb      	ldr	r3, [r7, #12]
 800e514:	22ff      	movs	r2, #255	; 0xff
 800e516:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800e51a:	683b      	ldr	r3, [r7, #0]
 800e51c:	2b00      	cmp	r3, #0
 800e51e:	d114      	bne.n	800e54a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e520:	68fb      	ldr	r3, [r7, #12]
 800e522:	691b      	ldr	r3, [r3, #16]
 800e524:	2b00      	cmp	r3, #0
 800e526:	d01a      	beq.n	800e55e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e528:	68fb      	ldr	r3, [r7, #12]
 800e52a:	3310      	adds	r3, #16
 800e52c:	4618      	mov	r0, r3
 800e52e:	f000 ff69 	bl	800f404 <xTaskRemoveFromEventList>
 800e532:	4603      	mov	r3, r0
 800e534:	2b00      	cmp	r3, #0
 800e536:	d012      	beq.n	800e55e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800e538:	4b0c      	ldr	r3, [pc, #48]	; (800e56c <xQueueGenericReset+0xcc>)
 800e53a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e53e:	601a      	str	r2, [r3, #0]
 800e540:	f3bf 8f4f 	dsb	sy
 800e544:	f3bf 8f6f 	isb	sy
 800e548:	e009      	b.n	800e55e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800e54a:	68fb      	ldr	r3, [r7, #12]
 800e54c:	3310      	adds	r3, #16
 800e54e:	4618      	mov	r0, r3
 800e550:	f7ff fef1 	bl	800e336 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800e554:	68fb      	ldr	r3, [r7, #12]
 800e556:	3324      	adds	r3, #36	; 0x24
 800e558:	4618      	mov	r0, r3
 800e55a:	f7ff feec 	bl	800e336 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800e55e:	f001 fcc1 	bl	800fee4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800e562:	2301      	movs	r3, #1
}
 800e564:	4618      	mov	r0, r3
 800e566:	3710      	adds	r7, #16
 800e568:	46bd      	mov	sp, r7
 800e56a:	bd80      	pop	{r7, pc}
 800e56c:	e000ed04 	.word	0xe000ed04

0800e570 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800e570:	b580      	push	{r7, lr}
 800e572:	b08a      	sub	sp, #40	; 0x28
 800e574:	af02      	add	r7, sp, #8
 800e576:	60f8      	str	r0, [r7, #12]
 800e578:	60b9      	str	r1, [r7, #8]
 800e57a:	4613      	mov	r3, r2
 800e57c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800e57e:	68fb      	ldr	r3, [r7, #12]
 800e580:	2b00      	cmp	r3, #0
 800e582:	d10a      	bne.n	800e59a <xQueueGenericCreate+0x2a>
	__asm volatile
 800e584:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e588:	f383 8811 	msr	BASEPRI, r3
 800e58c:	f3bf 8f6f 	isb	sy
 800e590:	f3bf 8f4f 	dsb	sy
 800e594:	613b      	str	r3, [r7, #16]
}
 800e596:	bf00      	nop
 800e598:	e7fe      	b.n	800e598 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e59a:	68fb      	ldr	r3, [r7, #12]
 800e59c:	68ba      	ldr	r2, [r7, #8]
 800e59e:	fb02 f303 	mul.w	r3, r2, r3
 800e5a2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800e5a4:	69fb      	ldr	r3, [r7, #28]
 800e5a6:	3348      	adds	r3, #72	; 0x48
 800e5a8:	4618      	mov	r0, r3
 800e5aa:	f001 fd4d 	bl	8010048 <pvPortMalloc>
 800e5ae:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800e5b0:	69bb      	ldr	r3, [r7, #24]
 800e5b2:	2b00      	cmp	r3, #0
 800e5b4:	d00d      	beq.n	800e5d2 <xQueueGenericCreate+0x62>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800e5b6:	69bb      	ldr	r3, [r7, #24]
 800e5b8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e5ba:	697b      	ldr	r3, [r7, #20]
 800e5bc:	3348      	adds	r3, #72	; 0x48
 800e5be:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800e5c0:	79fa      	ldrb	r2, [r7, #7]
 800e5c2:	69bb      	ldr	r3, [r7, #24]
 800e5c4:	9300      	str	r3, [sp, #0]
 800e5c6:	4613      	mov	r3, r2
 800e5c8:	697a      	ldr	r2, [r7, #20]
 800e5ca:	68b9      	ldr	r1, [r7, #8]
 800e5cc:	68f8      	ldr	r0, [r7, #12]
 800e5ce:	f000 f805 	bl	800e5dc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800e5d2:	69bb      	ldr	r3, [r7, #24]
	}
 800e5d4:	4618      	mov	r0, r3
 800e5d6:	3720      	adds	r7, #32
 800e5d8:	46bd      	mov	sp, r7
 800e5da:	bd80      	pop	{r7, pc}

0800e5dc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800e5dc:	b580      	push	{r7, lr}
 800e5de:	b084      	sub	sp, #16
 800e5e0:	af00      	add	r7, sp, #0
 800e5e2:	60f8      	str	r0, [r7, #12]
 800e5e4:	60b9      	str	r1, [r7, #8]
 800e5e6:	607a      	str	r2, [r7, #4]
 800e5e8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800e5ea:	68bb      	ldr	r3, [r7, #8]
 800e5ec:	2b00      	cmp	r3, #0
 800e5ee:	d103      	bne.n	800e5f8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800e5f0:	69bb      	ldr	r3, [r7, #24]
 800e5f2:	69ba      	ldr	r2, [r7, #24]
 800e5f4:	601a      	str	r2, [r3, #0]
 800e5f6:	e002      	b.n	800e5fe <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800e5f8:	69bb      	ldr	r3, [r7, #24]
 800e5fa:	687a      	ldr	r2, [r7, #4]
 800e5fc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800e5fe:	69bb      	ldr	r3, [r7, #24]
 800e600:	68fa      	ldr	r2, [r7, #12]
 800e602:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800e604:	69bb      	ldr	r3, [r7, #24]
 800e606:	68ba      	ldr	r2, [r7, #8]
 800e608:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800e60a:	2101      	movs	r1, #1
 800e60c:	69b8      	ldr	r0, [r7, #24]
 800e60e:	f7ff ff47 	bl	800e4a0 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800e612:	bf00      	nop
 800e614:	3710      	adds	r7, #16
 800e616:	46bd      	mov	sp, r7
 800e618:	bd80      	pop	{r7, pc}

0800e61a <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800e61a:	b580      	push	{r7, lr}
 800e61c:	b082      	sub	sp, #8
 800e61e:	af00      	add	r7, sp, #0
 800e620:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800e622:	687b      	ldr	r3, [r7, #4]
 800e624:	2b00      	cmp	r3, #0
 800e626:	d00e      	beq.n	800e646 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800e628:	687b      	ldr	r3, [r7, #4]
 800e62a:	2200      	movs	r2, #0
 800e62c:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800e62e:	687b      	ldr	r3, [r7, #4]
 800e630:	2200      	movs	r2, #0
 800e632:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800e634:	687b      	ldr	r3, [r7, #4]
 800e636:	2200      	movs	r2, #0
 800e638:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800e63a:	2300      	movs	r3, #0
 800e63c:	2200      	movs	r2, #0
 800e63e:	2100      	movs	r1, #0
 800e640:	6878      	ldr	r0, [r7, #4]
 800e642:	f000 f81d 	bl	800e680 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800e646:	bf00      	nop
 800e648:	3708      	adds	r7, #8
 800e64a:	46bd      	mov	sp, r7
 800e64c:	bd80      	pop	{r7, pc}

0800e64e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800e64e:	b580      	push	{r7, lr}
 800e650:	b086      	sub	sp, #24
 800e652:	af00      	add	r7, sp, #0
 800e654:	4603      	mov	r3, r0
 800e656:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800e658:	2301      	movs	r3, #1
 800e65a:	617b      	str	r3, [r7, #20]
 800e65c:	2300      	movs	r3, #0
 800e65e:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800e660:	79fb      	ldrb	r3, [r7, #7]
 800e662:	461a      	mov	r2, r3
 800e664:	6939      	ldr	r1, [r7, #16]
 800e666:	6978      	ldr	r0, [r7, #20]
 800e668:	f7ff ff82 	bl	800e570 <xQueueGenericCreate>
 800e66c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800e66e:	68f8      	ldr	r0, [r7, #12]
 800e670:	f7ff ffd3 	bl	800e61a <prvInitialiseMutex>

		return xNewQueue;
 800e674:	68fb      	ldr	r3, [r7, #12]
	}
 800e676:	4618      	mov	r0, r3
 800e678:	3718      	adds	r7, #24
 800e67a:	46bd      	mov	sp, r7
 800e67c:	bd80      	pop	{r7, pc}
	...

0800e680 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800e680:	b580      	push	{r7, lr}
 800e682:	b08e      	sub	sp, #56	; 0x38
 800e684:	af00      	add	r7, sp, #0
 800e686:	60f8      	str	r0, [r7, #12]
 800e688:	60b9      	str	r1, [r7, #8]
 800e68a:	607a      	str	r2, [r7, #4]
 800e68c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800e68e:	2300      	movs	r3, #0
 800e690:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e692:	68fb      	ldr	r3, [r7, #12]
 800e694:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800e696:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e698:	2b00      	cmp	r3, #0
 800e69a:	d10a      	bne.n	800e6b2 <xQueueGenericSend+0x32>
	__asm volatile
 800e69c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e6a0:	f383 8811 	msr	BASEPRI, r3
 800e6a4:	f3bf 8f6f 	isb	sy
 800e6a8:	f3bf 8f4f 	dsb	sy
 800e6ac:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800e6ae:	bf00      	nop
 800e6b0:	e7fe      	b.n	800e6b0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e6b2:	68bb      	ldr	r3, [r7, #8]
 800e6b4:	2b00      	cmp	r3, #0
 800e6b6:	d103      	bne.n	800e6c0 <xQueueGenericSend+0x40>
 800e6b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e6ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e6bc:	2b00      	cmp	r3, #0
 800e6be:	d101      	bne.n	800e6c4 <xQueueGenericSend+0x44>
 800e6c0:	2301      	movs	r3, #1
 800e6c2:	e000      	b.n	800e6c6 <xQueueGenericSend+0x46>
 800e6c4:	2300      	movs	r3, #0
 800e6c6:	2b00      	cmp	r3, #0
 800e6c8:	d10a      	bne.n	800e6e0 <xQueueGenericSend+0x60>
	__asm volatile
 800e6ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e6ce:	f383 8811 	msr	BASEPRI, r3
 800e6d2:	f3bf 8f6f 	isb	sy
 800e6d6:	f3bf 8f4f 	dsb	sy
 800e6da:	627b      	str	r3, [r7, #36]	; 0x24
}
 800e6dc:	bf00      	nop
 800e6de:	e7fe      	b.n	800e6de <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800e6e0:	683b      	ldr	r3, [r7, #0]
 800e6e2:	2b02      	cmp	r3, #2
 800e6e4:	d103      	bne.n	800e6ee <xQueueGenericSend+0x6e>
 800e6e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e6e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e6ea:	2b01      	cmp	r3, #1
 800e6ec:	d101      	bne.n	800e6f2 <xQueueGenericSend+0x72>
 800e6ee:	2301      	movs	r3, #1
 800e6f0:	e000      	b.n	800e6f4 <xQueueGenericSend+0x74>
 800e6f2:	2300      	movs	r3, #0
 800e6f4:	2b00      	cmp	r3, #0
 800e6f6:	d10a      	bne.n	800e70e <xQueueGenericSend+0x8e>
	__asm volatile
 800e6f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e6fc:	f383 8811 	msr	BASEPRI, r3
 800e700:	f3bf 8f6f 	isb	sy
 800e704:	f3bf 8f4f 	dsb	sy
 800e708:	623b      	str	r3, [r7, #32]
}
 800e70a:	bf00      	nop
 800e70c:	e7fe      	b.n	800e70c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e70e:	f001 f81b 	bl	800f748 <xTaskGetSchedulerState>
 800e712:	4603      	mov	r3, r0
 800e714:	2b00      	cmp	r3, #0
 800e716:	d102      	bne.n	800e71e <xQueueGenericSend+0x9e>
 800e718:	687b      	ldr	r3, [r7, #4]
 800e71a:	2b00      	cmp	r3, #0
 800e71c:	d101      	bne.n	800e722 <xQueueGenericSend+0xa2>
 800e71e:	2301      	movs	r3, #1
 800e720:	e000      	b.n	800e724 <xQueueGenericSend+0xa4>
 800e722:	2300      	movs	r3, #0
 800e724:	2b00      	cmp	r3, #0
 800e726:	d10a      	bne.n	800e73e <xQueueGenericSend+0xbe>
	__asm volatile
 800e728:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e72c:	f383 8811 	msr	BASEPRI, r3
 800e730:	f3bf 8f6f 	isb	sy
 800e734:	f3bf 8f4f 	dsb	sy
 800e738:	61fb      	str	r3, [r7, #28]
}
 800e73a:	bf00      	nop
 800e73c:	e7fe      	b.n	800e73c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e73e:	f001 fba1 	bl	800fe84 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e742:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e744:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e746:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e748:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e74a:	429a      	cmp	r2, r3
 800e74c:	d302      	bcc.n	800e754 <xQueueGenericSend+0xd4>
 800e74e:	683b      	ldr	r3, [r7, #0]
 800e750:	2b02      	cmp	r3, #2
 800e752:	d129      	bne.n	800e7a8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e754:	683a      	ldr	r2, [r7, #0]
 800e756:	68b9      	ldr	r1, [r7, #8]
 800e758:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e75a:	f000 f9b3 	bl	800eac4 <prvCopyDataToQueue>
 800e75e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e760:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e764:	2b00      	cmp	r3, #0
 800e766:	d010      	beq.n	800e78a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e768:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e76a:	3324      	adds	r3, #36	; 0x24
 800e76c:	4618      	mov	r0, r3
 800e76e:	f000 fe49 	bl	800f404 <xTaskRemoveFromEventList>
 800e772:	4603      	mov	r3, r0
 800e774:	2b00      	cmp	r3, #0
 800e776:	d013      	beq.n	800e7a0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800e778:	4b3f      	ldr	r3, [pc, #252]	; (800e878 <xQueueGenericSend+0x1f8>)
 800e77a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e77e:	601a      	str	r2, [r3, #0]
 800e780:	f3bf 8f4f 	dsb	sy
 800e784:	f3bf 8f6f 	isb	sy
 800e788:	e00a      	b.n	800e7a0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800e78a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e78c:	2b00      	cmp	r3, #0
 800e78e:	d007      	beq.n	800e7a0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800e790:	4b39      	ldr	r3, [pc, #228]	; (800e878 <xQueueGenericSend+0x1f8>)
 800e792:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e796:	601a      	str	r2, [r3, #0]
 800e798:	f3bf 8f4f 	dsb	sy
 800e79c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800e7a0:	f001 fba0 	bl	800fee4 <vPortExitCritical>
				return pdPASS;
 800e7a4:	2301      	movs	r3, #1
 800e7a6:	e063      	b.n	800e870 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e7a8:	687b      	ldr	r3, [r7, #4]
 800e7aa:	2b00      	cmp	r3, #0
 800e7ac:	d103      	bne.n	800e7b6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800e7ae:	f001 fb99 	bl	800fee4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800e7b2:	2300      	movs	r3, #0
 800e7b4:	e05c      	b.n	800e870 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e7b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e7b8:	2b00      	cmp	r3, #0
 800e7ba:	d106      	bne.n	800e7ca <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e7bc:	f107 0314 	add.w	r3, r7, #20
 800e7c0:	4618      	mov	r0, r3
 800e7c2:	f000 fe81 	bl	800f4c8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e7c6:	2301      	movs	r3, #1
 800e7c8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e7ca:	f001 fb8b 	bl	800fee4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e7ce:	f000 fc31 	bl	800f034 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e7d2:	f001 fb57 	bl	800fe84 <vPortEnterCritical>
 800e7d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7d8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e7dc:	b25b      	sxtb	r3, r3
 800e7de:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e7e2:	d103      	bne.n	800e7ec <xQueueGenericSend+0x16c>
 800e7e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7e6:	2200      	movs	r2, #0
 800e7e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e7ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7ee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e7f2:	b25b      	sxtb	r3, r3
 800e7f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e7f8:	d103      	bne.n	800e802 <xQueueGenericSend+0x182>
 800e7fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7fc:	2200      	movs	r2, #0
 800e7fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e802:	f001 fb6f 	bl	800fee4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e806:	1d3a      	adds	r2, r7, #4
 800e808:	f107 0314 	add.w	r3, r7, #20
 800e80c:	4611      	mov	r1, r2
 800e80e:	4618      	mov	r0, r3
 800e810:	f000 fe70 	bl	800f4f4 <xTaskCheckForTimeOut>
 800e814:	4603      	mov	r3, r0
 800e816:	2b00      	cmp	r3, #0
 800e818:	d124      	bne.n	800e864 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800e81a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e81c:	f000 fa24 	bl	800ec68 <prvIsQueueFull>
 800e820:	4603      	mov	r3, r0
 800e822:	2b00      	cmp	r3, #0
 800e824:	d018      	beq.n	800e858 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800e826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e828:	3310      	adds	r3, #16
 800e82a:	687a      	ldr	r2, [r7, #4]
 800e82c:	4611      	mov	r1, r2
 800e82e:	4618      	mov	r0, r3
 800e830:	f000 fdc4 	bl	800f3bc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800e834:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e836:	f000 f9af 	bl	800eb98 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800e83a:	f000 fc09 	bl	800f050 <xTaskResumeAll>
 800e83e:	4603      	mov	r3, r0
 800e840:	2b00      	cmp	r3, #0
 800e842:	f47f af7c 	bne.w	800e73e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800e846:	4b0c      	ldr	r3, [pc, #48]	; (800e878 <xQueueGenericSend+0x1f8>)
 800e848:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e84c:	601a      	str	r2, [r3, #0]
 800e84e:	f3bf 8f4f 	dsb	sy
 800e852:	f3bf 8f6f 	isb	sy
 800e856:	e772      	b.n	800e73e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800e858:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e85a:	f000 f99d 	bl	800eb98 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e85e:	f000 fbf7 	bl	800f050 <xTaskResumeAll>
 800e862:	e76c      	b.n	800e73e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800e864:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e866:	f000 f997 	bl	800eb98 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e86a:	f000 fbf1 	bl	800f050 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800e86e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800e870:	4618      	mov	r0, r3
 800e872:	3738      	adds	r7, #56	; 0x38
 800e874:	46bd      	mov	sp, r7
 800e876:	bd80      	pop	{r7, pc}
 800e878:	e000ed04 	.word	0xe000ed04

0800e87c <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800e87c:	b580      	push	{r7, lr}
 800e87e:	b08e      	sub	sp, #56	; 0x38
 800e880:	af00      	add	r7, sp, #0
 800e882:	6078      	str	r0, [r7, #4]
 800e884:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800e886:	2300      	movs	r3, #0
 800e888:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e88a:	687b      	ldr	r3, [r7, #4]
 800e88c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800e88e:	2300      	movs	r3, #0
 800e890:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800e892:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e894:	2b00      	cmp	r3, #0
 800e896:	d10a      	bne.n	800e8ae <xQueueSemaphoreTake+0x32>
	__asm volatile
 800e898:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e89c:	f383 8811 	msr	BASEPRI, r3
 800e8a0:	f3bf 8f6f 	isb	sy
 800e8a4:	f3bf 8f4f 	dsb	sy
 800e8a8:	623b      	str	r3, [r7, #32]
}
 800e8aa:	bf00      	nop
 800e8ac:	e7fe      	b.n	800e8ac <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800e8ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e8b2:	2b00      	cmp	r3, #0
 800e8b4:	d00a      	beq.n	800e8cc <xQueueSemaphoreTake+0x50>
	__asm volatile
 800e8b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e8ba:	f383 8811 	msr	BASEPRI, r3
 800e8be:	f3bf 8f6f 	isb	sy
 800e8c2:	f3bf 8f4f 	dsb	sy
 800e8c6:	61fb      	str	r3, [r7, #28]
}
 800e8c8:	bf00      	nop
 800e8ca:	e7fe      	b.n	800e8ca <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e8cc:	f000 ff3c 	bl	800f748 <xTaskGetSchedulerState>
 800e8d0:	4603      	mov	r3, r0
 800e8d2:	2b00      	cmp	r3, #0
 800e8d4:	d102      	bne.n	800e8dc <xQueueSemaphoreTake+0x60>
 800e8d6:	683b      	ldr	r3, [r7, #0]
 800e8d8:	2b00      	cmp	r3, #0
 800e8da:	d101      	bne.n	800e8e0 <xQueueSemaphoreTake+0x64>
 800e8dc:	2301      	movs	r3, #1
 800e8de:	e000      	b.n	800e8e2 <xQueueSemaphoreTake+0x66>
 800e8e0:	2300      	movs	r3, #0
 800e8e2:	2b00      	cmp	r3, #0
 800e8e4:	d10a      	bne.n	800e8fc <xQueueSemaphoreTake+0x80>
	__asm volatile
 800e8e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e8ea:	f383 8811 	msr	BASEPRI, r3
 800e8ee:	f3bf 8f6f 	isb	sy
 800e8f2:	f3bf 8f4f 	dsb	sy
 800e8f6:	61bb      	str	r3, [r7, #24]
}
 800e8f8:	bf00      	nop
 800e8fa:	e7fe      	b.n	800e8fa <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e8fc:	f001 fac2 	bl	800fe84 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800e900:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e902:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e904:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800e906:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e908:	2b00      	cmp	r3, #0
 800e90a:	d024      	beq.n	800e956 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800e90c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e90e:	1e5a      	subs	r2, r3, #1
 800e910:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e912:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e914:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e916:	681b      	ldr	r3, [r3, #0]
 800e918:	2b00      	cmp	r3, #0
 800e91a:	d104      	bne.n	800e926 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800e91c:	f001 f8bc 	bl	800fa98 <pvTaskIncrementMutexHeldCount>
 800e920:	4602      	mov	r2, r0
 800e922:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e924:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e926:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e928:	691b      	ldr	r3, [r3, #16]
 800e92a:	2b00      	cmp	r3, #0
 800e92c:	d00f      	beq.n	800e94e <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e92e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e930:	3310      	adds	r3, #16
 800e932:	4618      	mov	r0, r3
 800e934:	f000 fd66 	bl	800f404 <xTaskRemoveFromEventList>
 800e938:	4603      	mov	r3, r0
 800e93a:	2b00      	cmp	r3, #0
 800e93c:	d007      	beq.n	800e94e <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800e93e:	4b54      	ldr	r3, [pc, #336]	; (800ea90 <xQueueSemaphoreTake+0x214>)
 800e940:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e944:	601a      	str	r2, [r3, #0]
 800e946:	f3bf 8f4f 	dsb	sy
 800e94a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800e94e:	f001 fac9 	bl	800fee4 <vPortExitCritical>
				return pdPASS;
 800e952:	2301      	movs	r3, #1
 800e954:	e097      	b.n	800ea86 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e956:	683b      	ldr	r3, [r7, #0]
 800e958:	2b00      	cmp	r3, #0
 800e95a:	d111      	bne.n	800e980 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800e95c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e95e:	2b00      	cmp	r3, #0
 800e960:	d00a      	beq.n	800e978 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800e962:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e966:	f383 8811 	msr	BASEPRI, r3
 800e96a:	f3bf 8f6f 	isb	sy
 800e96e:	f3bf 8f4f 	dsb	sy
 800e972:	617b      	str	r3, [r7, #20]
}
 800e974:	bf00      	nop
 800e976:	e7fe      	b.n	800e976 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800e978:	f001 fab4 	bl	800fee4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800e97c:	2300      	movs	r3, #0
 800e97e:	e082      	b.n	800ea86 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e980:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e982:	2b00      	cmp	r3, #0
 800e984:	d106      	bne.n	800e994 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e986:	f107 030c 	add.w	r3, r7, #12
 800e98a:	4618      	mov	r0, r3
 800e98c:	f000 fd9c 	bl	800f4c8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e990:	2301      	movs	r3, #1
 800e992:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e994:	f001 faa6 	bl	800fee4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e998:	f000 fb4c 	bl	800f034 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e99c:	f001 fa72 	bl	800fe84 <vPortEnterCritical>
 800e9a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9a2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e9a6:	b25b      	sxtb	r3, r3
 800e9a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e9ac:	d103      	bne.n	800e9b6 <xQueueSemaphoreTake+0x13a>
 800e9ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9b0:	2200      	movs	r2, #0
 800e9b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e9b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9b8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e9bc:	b25b      	sxtb	r3, r3
 800e9be:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e9c2:	d103      	bne.n	800e9cc <xQueueSemaphoreTake+0x150>
 800e9c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9c6:	2200      	movs	r2, #0
 800e9c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e9cc:	f001 fa8a 	bl	800fee4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e9d0:	463a      	mov	r2, r7
 800e9d2:	f107 030c 	add.w	r3, r7, #12
 800e9d6:	4611      	mov	r1, r2
 800e9d8:	4618      	mov	r0, r3
 800e9da:	f000 fd8b 	bl	800f4f4 <xTaskCheckForTimeOut>
 800e9de:	4603      	mov	r3, r0
 800e9e0:	2b00      	cmp	r3, #0
 800e9e2:	d132      	bne.n	800ea4a <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e9e4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e9e6:	f000 f929 	bl	800ec3c <prvIsQueueEmpty>
 800e9ea:	4603      	mov	r3, r0
 800e9ec:	2b00      	cmp	r3, #0
 800e9ee:	d026      	beq.n	800ea3e <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e9f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9f2:	681b      	ldr	r3, [r3, #0]
 800e9f4:	2b00      	cmp	r3, #0
 800e9f6:	d109      	bne.n	800ea0c <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800e9f8:	f001 fa44 	bl	800fe84 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800e9fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9fe:	689b      	ldr	r3, [r3, #8]
 800ea00:	4618      	mov	r0, r3
 800ea02:	f000 febf 	bl	800f784 <xTaskPriorityInherit>
 800ea06:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800ea08:	f001 fa6c 	bl	800fee4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ea0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea0e:	3324      	adds	r3, #36	; 0x24
 800ea10:	683a      	ldr	r2, [r7, #0]
 800ea12:	4611      	mov	r1, r2
 800ea14:	4618      	mov	r0, r3
 800ea16:	f000 fcd1 	bl	800f3bc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ea1a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ea1c:	f000 f8bc 	bl	800eb98 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ea20:	f000 fb16 	bl	800f050 <xTaskResumeAll>
 800ea24:	4603      	mov	r3, r0
 800ea26:	2b00      	cmp	r3, #0
 800ea28:	f47f af68 	bne.w	800e8fc <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800ea2c:	4b18      	ldr	r3, [pc, #96]	; (800ea90 <xQueueSemaphoreTake+0x214>)
 800ea2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ea32:	601a      	str	r2, [r3, #0]
 800ea34:	f3bf 8f4f 	dsb	sy
 800ea38:	f3bf 8f6f 	isb	sy
 800ea3c:	e75e      	b.n	800e8fc <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800ea3e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ea40:	f000 f8aa 	bl	800eb98 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ea44:	f000 fb04 	bl	800f050 <xTaskResumeAll>
 800ea48:	e758      	b.n	800e8fc <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800ea4a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ea4c:	f000 f8a4 	bl	800eb98 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ea50:	f000 fafe 	bl	800f050 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ea54:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ea56:	f000 f8f1 	bl	800ec3c <prvIsQueueEmpty>
 800ea5a:	4603      	mov	r3, r0
 800ea5c:	2b00      	cmp	r3, #0
 800ea5e:	f43f af4d 	beq.w	800e8fc <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800ea62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea64:	2b00      	cmp	r3, #0
 800ea66:	d00d      	beq.n	800ea84 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800ea68:	f001 fa0c 	bl	800fe84 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800ea6c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ea6e:	f000 f811 	bl	800ea94 <prvGetDisinheritPriorityAfterTimeout>
 800ea72:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800ea74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea76:	689b      	ldr	r3, [r3, #8]
 800ea78:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ea7a:	4618      	mov	r0, r3
 800ea7c:	f000 ff7e 	bl	800f97c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800ea80:	f001 fa30 	bl	800fee4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800ea84:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800ea86:	4618      	mov	r0, r3
 800ea88:	3738      	adds	r7, #56	; 0x38
 800ea8a:	46bd      	mov	sp, r7
 800ea8c:	bd80      	pop	{r7, pc}
 800ea8e:	bf00      	nop
 800ea90:	e000ed04 	.word	0xe000ed04

0800ea94 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800ea94:	b480      	push	{r7}
 800ea96:	b085      	sub	sp, #20
 800ea98:	af00      	add	r7, sp, #0
 800ea9a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800ea9c:	687b      	ldr	r3, [r7, #4]
 800ea9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eaa0:	2b00      	cmp	r3, #0
 800eaa2:	d006      	beq.n	800eab2 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800eaa4:	687b      	ldr	r3, [r7, #4]
 800eaa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eaa8:	681b      	ldr	r3, [r3, #0]
 800eaaa:	f1c3 0307 	rsb	r3, r3, #7
 800eaae:	60fb      	str	r3, [r7, #12]
 800eab0:	e001      	b.n	800eab6 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800eab2:	2300      	movs	r3, #0
 800eab4:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800eab6:	68fb      	ldr	r3, [r7, #12]
	}
 800eab8:	4618      	mov	r0, r3
 800eaba:	3714      	adds	r7, #20
 800eabc:	46bd      	mov	sp, r7
 800eabe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eac2:	4770      	bx	lr

0800eac4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800eac4:	b580      	push	{r7, lr}
 800eac6:	b086      	sub	sp, #24
 800eac8:	af00      	add	r7, sp, #0
 800eaca:	60f8      	str	r0, [r7, #12]
 800eacc:	60b9      	str	r1, [r7, #8]
 800eace:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800ead0:	2300      	movs	r3, #0
 800ead2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ead4:	68fb      	ldr	r3, [r7, #12]
 800ead6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ead8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800eada:	68fb      	ldr	r3, [r7, #12]
 800eadc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eade:	2b00      	cmp	r3, #0
 800eae0:	d10d      	bne.n	800eafe <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800eae2:	68fb      	ldr	r3, [r7, #12]
 800eae4:	681b      	ldr	r3, [r3, #0]
 800eae6:	2b00      	cmp	r3, #0
 800eae8:	d14d      	bne.n	800eb86 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800eaea:	68fb      	ldr	r3, [r7, #12]
 800eaec:	689b      	ldr	r3, [r3, #8]
 800eaee:	4618      	mov	r0, r3
 800eaf0:	f000 febe 	bl	800f870 <xTaskPriorityDisinherit>
 800eaf4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800eaf6:	68fb      	ldr	r3, [r7, #12]
 800eaf8:	2200      	movs	r2, #0
 800eafa:	609a      	str	r2, [r3, #8]
 800eafc:	e043      	b.n	800eb86 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800eafe:	687b      	ldr	r3, [r7, #4]
 800eb00:	2b00      	cmp	r3, #0
 800eb02:	d119      	bne.n	800eb38 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800eb04:	68fb      	ldr	r3, [r7, #12]
 800eb06:	6858      	ldr	r0, [r3, #4]
 800eb08:	68fb      	ldr	r3, [r7, #12]
 800eb0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eb0c:	461a      	mov	r2, r3
 800eb0e:	68b9      	ldr	r1, [r7, #8]
 800eb10:	f003 f89a 	bl	8011c48 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800eb14:	68fb      	ldr	r3, [r7, #12]
 800eb16:	685a      	ldr	r2, [r3, #4]
 800eb18:	68fb      	ldr	r3, [r7, #12]
 800eb1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eb1c:	441a      	add	r2, r3
 800eb1e:	68fb      	ldr	r3, [r7, #12]
 800eb20:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800eb22:	68fb      	ldr	r3, [r7, #12]
 800eb24:	685a      	ldr	r2, [r3, #4]
 800eb26:	68fb      	ldr	r3, [r7, #12]
 800eb28:	689b      	ldr	r3, [r3, #8]
 800eb2a:	429a      	cmp	r2, r3
 800eb2c:	d32b      	bcc.n	800eb86 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800eb2e:	68fb      	ldr	r3, [r7, #12]
 800eb30:	681a      	ldr	r2, [r3, #0]
 800eb32:	68fb      	ldr	r3, [r7, #12]
 800eb34:	605a      	str	r2, [r3, #4]
 800eb36:	e026      	b.n	800eb86 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800eb38:	68fb      	ldr	r3, [r7, #12]
 800eb3a:	68d8      	ldr	r0, [r3, #12]
 800eb3c:	68fb      	ldr	r3, [r7, #12]
 800eb3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eb40:	461a      	mov	r2, r3
 800eb42:	68b9      	ldr	r1, [r7, #8]
 800eb44:	f003 f880 	bl	8011c48 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800eb48:	68fb      	ldr	r3, [r7, #12]
 800eb4a:	68da      	ldr	r2, [r3, #12]
 800eb4c:	68fb      	ldr	r3, [r7, #12]
 800eb4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eb50:	425b      	negs	r3, r3
 800eb52:	441a      	add	r2, r3
 800eb54:	68fb      	ldr	r3, [r7, #12]
 800eb56:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800eb58:	68fb      	ldr	r3, [r7, #12]
 800eb5a:	68da      	ldr	r2, [r3, #12]
 800eb5c:	68fb      	ldr	r3, [r7, #12]
 800eb5e:	681b      	ldr	r3, [r3, #0]
 800eb60:	429a      	cmp	r2, r3
 800eb62:	d207      	bcs.n	800eb74 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800eb64:	68fb      	ldr	r3, [r7, #12]
 800eb66:	689a      	ldr	r2, [r3, #8]
 800eb68:	68fb      	ldr	r3, [r7, #12]
 800eb6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eb6c:	425b      	negs	r3, r3
 800eb6e:	441a      	add	r2, r3
 800eb70:	68fb      	ldr	r3, [r7, #12]
 800eb72:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800eb74:	687b      	ldr	r3, [r7, #4]
 800eb76:	2b02      	cmp	r3, #2
 800eb78:	d105      	bne.n	800eb86 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800eb7a:	693b      	ldr	r3, [r7, #16]
 800eb7c:	2b00      	cmp	r3, #0
 800eb7e:	d002      	beq.n	800eb86 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800eb80:	693b      	ldr	r3, [r7, #16]
 800eb82:	3b01      	subs	r3, #1
 800eb84:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800eb86:	693b      	ldr	r3, [r7, #16]
 800eb88:	1c5a      	adds	r2, r3, #1
 800eb8a:	68fb      	ldr	r3, [r7, #12]
 800eb8c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800eb8e:	697b      	ldr	r3, [r7, #20]
}
 800eb90:	4618      	mov	r0, r3
 800eb92:	3718      	adds	r7, #24
 800eb94:	46bd      	mov	sp, r7
 800eb96:	bd80      	pop	{r7, pc}

0800eb98 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800eb98:	b580      	push	{r7, lr}
 800eb9a:	b084      	sub	sp, #16
 800eb9c:	af00      	add	r7, sp, #0
 800eb9e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800eba0:	f001 f970 	bl	800fe84 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800eba4:	687b      	ldr	r3, [r7, #4]
 800eba6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ebaa:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ebac:	e011      	b.n	800ebd2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ebae:	687b      	ldr	r3, [r7, #4]
 800ebb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ebb2:	2b00      	cmp	r3, #0
 800ebb4:	d012      	beq.n	800ebdc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ebb6:	687b      	ldr	r3, [r7, #4]
 800ebb8:	3324      	adds	r3, #36	; 0x24
 800ebba:	4618      	mov	r0, r3
 800ebbc:	f000 fc22 	bl	800f404 <xTaskRemoveFromEventList>
 800ebc0:	4603      	mov	r3, r0
 800ebc2:	2b00      	cmp	r3, #0
 800ebc4:	d001      	beq.n	800ebca <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800ebc6:	f000 fcf7 	bl	800f5b8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800ebca:	7bfb      	ldrb	r3, [r7, #15]
 800ebcc:	3b01      	subs	r3, #1
 800ebce:	b2db      	uxtb	r3, r3
 800ebd0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ebd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ebd6:	2b00      	cmp	r3, #0
 800ebd8:	dce9      	bgt.n	800ebae <prvUnlockQueue+0x16>
 800ebda:	e000      	b.n	800ebde <prvUnlockQueue+0x46>
					break;
 800ebdc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800ebde:	687b      	ldr	r3, [r7, #4]
 800ebe0:	22ff      	movs	r2, #255	; 0xff
 800ebe2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800ebe6:	f001 f97d 	bl	800fee4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800ebea:	f001 f94b 	bl	800fe84 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800ebee:	687b      	ldr	r3, [r7, #4]
 800ebf0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ebf4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ebf6:	e011      	b.n	800ec1c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ebf8:	687b      	ldr	r3, [r7, #4]
 800ebfa:	691b      	ldr	r3, [r3, #16]
 800ebfc:	2b00      	cmp	r3, #0
 800ebfe:	d012      	beq.n	800ec26 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ec00:	687b      	ldr	r3, [r7, #4]
 800ec02:	3310      	adds	r3, #16
 800ec04:	4618      	mov	r0, r3
 800ec06:	f000 fbfd 	bl	800f404 <xTaskRemoveFromEventList>
 800ec0a:	4603      	mov	r3, r0
 800ec0c:	2b00      	cmp	r3, #0
 800ec0e:	d001      	beq.n	800ec14 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800ec10:	f000 fcd2 	bl	800f5b8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800ec14:	7bbb      	ldrb	r3, [r7, #14]
 800ec16:	3b01      	subs	r3, #1
 800ec18:	b2db      	uxtb	r3, r3
 800ec1a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ec1c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ec20:	2b00      	cmp	r3, #0
 800ec22:	dce9      	bgt.n	800ebf8 <prvUnlockQueue+0x60>
 800ec24:	e000      	b.n	800ec28 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800ec26:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800ec28:	687b      	ldr	r3, [r7, #4]
 800ec2a:	22ff      	movs	r2, #255	; 0xff
 800ec2c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800ec30:	f001 f958 	bl	800fee4 <vPortExitCritical>
}
 800ec34:	bf00      	nop
 800ec36:	3710      	adds	r7, #16
 800ec38:	46bd      	mov	sp, r7
 800ec3a:	bd80      	pop	{r7, pc}

0800ec3c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800ec3c:	b580      	push	{r7, lr}
 800ec3e:	b084      	sub	sp, #16
 800ec40:	af00      	add	r7, sp, #0
 800ec42:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ec44:	f001 f91e 	bl	800fe84 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800ec48:	687b      	ldr	r3, [r7, #4]
 800ec4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ec4c:	2b00      	cmp	r3, #0
 800ec4e:	d102      	bne.n	800ec56 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800ec50:	2301      	movs	r3, #1
 800ec52:	60fb      	str	r3, [r7, #12]
 800ec54:	e001      	b.n	800ec5a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800ec56:	2300      	movs	r3, #0
 800ec58:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ec5a:	f001 f943 	bl	800fee4 <vPortExitCritical>

	return xReturn;
 800ec5e:	68fb      	ldr	r3, [r7, #12]
}
 800ec60:	4618      	mov	r0, r3
 800ec62:	3710      	adds	r7, #16
 800ec64:	46bd      	mov	sp, r7
 800ec66:	bd80      	pop	{r7, pc}

0800ec68 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800ec68:	b580      	push	{r7, lr}
 800ec6a:	b084      	sub	sp, #16
 800ec6c:	af00      	add	r7, sp, #0
 800ec6e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ec70:	f001 f908 	bl	800fe84 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800ec74:	687b      	ldr	r3, [r7, #4]
 800ec76:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ec78:	687b      	ldr	r3, [r7, #4]
 800ec7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ec7c:	429a      	cmp	r2, r3
 800ec7e:	d102      	bne.n	800ec86 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800ec80:	2301      	movs	r3, #1
 800ec82:	60fb      	str	r3, [r7, #12]
 800ec84:	e001      	b.n	800ec8a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800ec86:	2300      	movs	r3, #0
 800ec88:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ec8a:	f001 f92b 	bl	800fee4 <vPortExitCritical>

	return xReturn;
 800ec8e:	68fb      	ldr	r3, [r7, #12]
}
 800ec90:	4618      	mov	r0, r3
 800ec92:	3710      	adds	r7, #16
 800ec94:	46bd      	mov	sp, r7
 800ec96:	bd80      	pop	{r7, pc}

0800ec98 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800ec98:	b580      	push	{r7, lr}
 800ec9a:	b08c      	sub	sp, #48	; 0x30
 800ec9c:	af04      	add	r7, sp, #16
 800ec9e:	60f8      	str	r0, [r7, #12]
 800eca0:	60b9      	str	r1, [r7, #8]
 800eca2:	603b      	str	r3, [r7, #0]
 800eca4:	4613      	mov	r3, r2
 800eca6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800eca8:	88fb      	ldrh	r3, [r7, #6]
 800ecaa:	009b      	lsls	r3, r3, #2
 800ecac:	4618      	mov	r0, r3
 800ecae:	f001 f9cb 	bl	8010048 <pvPortMalloc>
 800ecb2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800ecb4:	697b      	ldr	r3, [r7, #20]
 800ecb6:	2b00      	cmp	r3, #0
 800ecb8:	d00e      	beq.n	800ecd8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800ecba:	20a0      	movs	r0, #160	; 0xa0
 800ecbc:	f001 f9c4 	bl	8010048 <pvPortMalloc>
 800ecc0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800ecc2:	69fb      	ldr	r3, [r7, #28]
 800ecc4:	2b00      	cmp	r3, #0
 800ecc6:	d003      	beq.n	800ecd0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800ecc8:	69fb      	ldr	r3, [r7, #28]
 800ecca:	697a      	ldr	r2, [r7, #20]
 800eccc:	631a      	str	r2, [r3, #48]	; 0x30
 800ecce:	e005      	b.n	800ecdc <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800ecd0:	6978      	ldr	r0, [r7, #20]
 800ecd2:	f001 fa85 	bl	80101e0 <vPortFree>
 800ecd6:	e001      	b.n	800ecdc <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800ecd8:	2300      	movs	r3, #0
 800ecda:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800ecdc:	69fb      	ldr	r3, [r7, #28]
 800ecde:	2b00      	cmp	r3, #0
 800ece0:	d013      	beq.n	800ed0a <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800ece2:	88fa      	ldrh	r2, [r7, #6]
 800ece4:	2300      	movs	r3, #0
 800ece6:	9303      	str	r3, [sp, #12]
 800ece8:	69fb      	ldr	r3, [r7, #28]
 800ecea:	9302      	str	r3, [sp, #8]
 800ecec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ecee:	9301      	str	r3, [sp, #4]
 800ecf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ecf2:	9300      	str	r3, [sp, #0]
 800ecf4:	683b      	ldr	r3, [r7, #0]
 800ecf6:	68b9      	ldr	r1, [r7, #8]
 800ecf8:	68f8      	ldr	r0, [r7, #12]
 800ecfa:	f000 f80f 	bl	800ed1c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ecfe:	69f8      	ldr	r0, [r7, #28]
 800ed00:	f000 f8aa 	bl	800ee58 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800ed04:	2301      	movs	r3, #1
 800ed06:	61bb      	str	r3, [r7, #24]
 800ed08:	e002      	b.n	800ed10 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800ed0a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ed0e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800ed10:	69bb      	ldr	r3, [r7, #24]
	}
 800ed12:	4618      	mov	r0, r3
 800ed14:	3720      	adds	r7, #32
 800ed16:	46bd      	mov	sp, r7
 800ed18:	bd80      	pop	{r7, pc}
	...

0800ed1c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800ed1c:	b580      	push	{r7, lr}
 800ed1e:	b088      	sub	sp, #32
 800ed20:	af00      	add	r7, sp, #0
 800ed22:	60f8      	str	r0, [r7, #12]
 800ed24:	60b9      	str	r1, [r7, #8]
 800ed26:	607a      	str	r2, [r7, #4]
 800ed28:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800ed2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed2c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ed2e:	687b      	ldr	r3, [r7, #4]
 800ed30:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800ed34:	3b01      	subs	r3, #1
 800ed36:	009b      	lsls	r3, r3, #2
 800ed38:	4413      	add	r3, r2
 800ed3a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800ed3c:	69bb      	ldr	r3, [r7, #24]
 800ed3e:	f023 0307 	bic.w	r3, r3, #7
 800ed42:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800ed44:	69bb      	ldr	r3, [r7, #24]
 800ed46:	f003 0307 	and.w	r3, r3, #7
 800ed4a:	2b00      	cmp	r3, #0
 800ed4c:	d00a      	beq.n	800ed64 <prvInitialiseNewTask+0x48>
	__asm volatile
 800ed4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed52:	f383 8811 	msr	BASEPRI, r3
 800ed56:	f3bf 8f6f 	isb	sy
 800ed5a:	f3bf 8f4f 	dsb	sy
 800ed5e:	617b      	str	r3, [r7, #20]
}
 800ed60:	bf00      	nop
 800ed62:	e7fe      	b.n	800ed62 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800ed64:	68bb      	ldr	r3, [r7, #8]
 800ed66:	2b00      	cmp	r3, #0
 800ed68:	d01f      	beq.n	800edaa <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ed6a:	2300      	movs	r3, #0
 800ed6c:	61fb      	str	r3, [r7, #28]
 800ed6e:	e012      	b.n	800ed96 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800ed70:	68ba      	ldr	r2, [r7, #8]
 800ed72:	69fb      	ldr	r3, [r7, #28]
 800ed74:	4413      	add	r3, r2
 800ed76:	7819      	ldrb	r1, [r3, #0]
 800ed78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ed7a:	69fb      	ldr	r3, [r7, #28]
 800ed7c:	4413      	add	r3, r2
 800ed7e:	3334      	adds	r3, #52	; 0x34
 800ed80:	460a      	mov	r2, r1
 800ed82:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800ed84:	68ba      	ldr	r2, [r7, #8]
 800ed86:	69fb      	ldr	r3, [r7, #28]
 800ed88:	4413      	add	r3, r2
 800ed8a:	781b      	ldrb	r3, [r3, #0]
 800ed8c:	2b00      	cmp	r3, #0
 800ed8e:	d006      	beq.n	800ed9e <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ed90:	69fb      	ldr	r3, [r7, #28]
 800ed92:	3301      	adds	r3, #1
 800ed94:	61fb      	str	r3, [r7, #28]
 800ed96:	69fb      	ldr	r3, [r7, #28]
 800ed98:	2b0f      	cmp	r3, #15
 800ed9a:	d9e9      	bls.n	800ed70 <prvInitialiseNewTask+0x54>
 800ed9c:	e000      	b.n	800eda0 <prvInitialiseNewTask+0x84>
			{
				break;
 800ed9e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800eda0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eda2:	2200      	movs	r2, #0
 800eda4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800eda8:	e003      	b.n	800edb2 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800edaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800edac:	2200      	movs	r2, #0
 800edae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800edb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800edb4:	2b06      	cmp	r3, #6
 800edb6:	d901      	bls.n	800edbc <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800edb8:	2306      	movs	r3, #6
 800edba:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800edbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800edbe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800edc0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800edc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800edc4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800edc6:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800edc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800edca:	2200      	movs	r2, #0
 800edcc:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800edce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800edd0:	3304      	adds	r3, #4
 800edd2:	4618      	mov	r0, r3
 800edd4:	f7ff facf 	bl	800e376 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800edd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800edda:	3318      	adds	r3, #24
 800eddc:	4618      	mov	r0, r3
 800edde:	f7ff faca 	bl	800e376 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800ede2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ede4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ede6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ede8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800edea:	f1c3 0207 	rsb	r2, r3, #7
 800edee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800edf0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800edf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800edf4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800edf6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800edf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800edfa:	2200      	movs	r2, #0
 800edfc:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800ee00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee02:	2200      	movs	r2, #0
 800ee04:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800ee08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee0a:	334c      	adds	r3, #76	; 0x4c
 800ee0c:	224c      	movs	r2, #76	; 0x4c
 800ee0e:	2100      	movs	r1, #0
 800ee10:	4618      	mov	r0, r3
 800ee12:	f002 fe45 	bl	8011aa0 <memset>
 800ee16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee18:	4a0c      	ldr	r2, [pc, #48]	; (800ee4c <prvInitialiseNewTask+0x130>)
 800ee1a:	651a      	str	r2, [r3, #80]	; 0x50
 800ee1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee1e:	4a0c      	ldr	r2, [pc, #48]	; (800ee50 <prvInitialiseNewTask+0x134>)
 800ee20:	655a      	str	r2, [r3, #84]	; 0x54
 800ee22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee24:	4a0b      	ldr	r2, [pc, #44]	; (800ee54 <prvInitialiseNewTask+0x138>)
 800ee26:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800ee28:	683a      	ldr	r2, [r7, #0]
 800ee2a:	68f9      	ldr	r1, [r7, #12]
 800ee2c:	69b8      	ldr	r0, [r7, #24]
 800ee2e:	f000 fef9 	bl	800fc24 <pxPortInitialiseStack>
 800ee32:	4602      	mov	r2, r0
 800ee34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee36:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800ee38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee3a:	2b00      	cmp	r3, #0
 800ee3c:	d002      	beq.n	800ee44 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800ee3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ee42:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ee44:	bf00      	nop
 800ee46:	3720      	adds	r7, #32
 800ee48:	46bd      	mov	sp, r7
 800ee4a:	bd80      	pop	{r7, pc}
 800ee4c:	20003460 	.word	0x20003460
 800ee50:	200034c8 	.word	0x200034c8
 800ee54:	20003530 	.word	0x20003530

0800ee58 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800ee58:	b580      	push	{r7, lr}
 800ee5a:	b082      	sub	sp, #8
 800ee5c:	af00      	add	r7, sp, #0
 800ee5e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800ee60:	f001 f810 	bl	800fe84 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800ee64:	4b2a      	ldr	r3, [pc, #168]	; (800ef10 <prvAddNewTaskToReadyList+0xb8>)
 800ee66:	681b      	ldr	r3, [r3, #0]
 800ee68:	3301      	adds	r3, #1
 800ee6a:	4a29      	ldr	r2, [pc, #164]	; (800ef10 <prvAddNewTaskToReadyList+0xb8>)
 800ee6c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800ee6e:	4b29      	ldr	r3, [pc, #164]	; (800ef14 <prvAddNewTaskToReadyList+0xbc>)
 800ee70:	681b      	ldr	r3, [r3, #0]
 800ee72:	2b00      	cmp	r3, #0
 800ee74:	d109      	bne.n	800ee8a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800ee76:	4a27      	ldr	r2, [pc, #156]	; (800ef14 <prvAddNewTaskToReadyList+0xbc>)
 800ee78:	687b      	ldr	r3, [r7, #4]
 800ee7a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800ee7c:	4b24      	ldr	r3, [pc, #144]	; (800ef10 <prvAddNewTaskToReadyList+0xb8>)
 800ee7e:	681b      	ldr	r3, [r3, #0]
 800ee80:	2b01      	cmp	r3, #1
 800ee82:	d110      	bne.n	800eea6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800ee84:	f000 fbbc 	bl	800f600 <prvInitialiseTaskLists>
 800ee88:	e00d      	b.n	800eea6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800ee8a:	4b23      	ldr	r3, [pc, #140]	; (800ef18 <prvAddNewTaskToReadyList+0xc0>)
 800ee8c:	681b      	ldr	r3, [r3, #0]
 800ee8e:	2b00      	cmp	r3, #0
 800ee90:	d109      	bne.n	800eea6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800ee92:	4b20      	ldr	r3, [pc, #128]	; (800ef14 <prvAddNewTaskToReadyList+0xbc>)
 800ee94:	681b      	ldr	r3, [r3, #0]
 800ee96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ee98:	687b      	ldr	r3, [r7, #4]
 800ee9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ee9c:	429a      	cmp	r2, r3
 800ee9e:	d802      	bhi.n	800eea6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800eea0:	4a1c      	ldr	r2, [pc, #112]	; (800ef14 <prvAddNewTaskToReadyList+0xbc>)
 800eea2:	687b      	ldr	r3, [r7, #4]
 800eea4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800eea6:	4b1d      	ldr	r3, [pc, #116]	; (800ef1c <prvAddNewTaskToReadyList+0xc4>)
 800eea8:	681b      	ldr	r3, [r3, #0]
 800eeaa:	3301      	adds	r3, #1
 800eeac:	4a1b      	ldr	r2, [pc, #108]	; (800ef1c <prvAddNewTaskToReadyList+0xc4>)
 800eeae:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800eeb0:	687b      	ldr	r3, [r7, #4]
 800eeb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eeb4:	2201      	movs	r2, #1
 800eeb6:	409a      	lsls	r2, r3
 800eeb8:	4b19      	ldr	r3, [pc, #100]	; (800ef20 <prvAddNewTaskToReadyList+0xc8>)
 800eeba:	681b      	ldr	r3, [r3, #0]
 800eebc:	4313      	orrs	r3, r2
 800eebe:	4a18      	ldr	r2, [pc, #96]	; (800ef20 <prvAddNewTaskToReadyList+0xc8>)
 800eec0:	6013      	str	r3, [r2, #0]
 800eec2:	687b      	ldr	r3, [r7, #4]
 800eec4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eec6:	4613      	mov	r3, r2
 800eec8:	009b      	lsls	r3, r3, #2
 800eeca:	4413      	add	r3, r2
 800eecc:	009b      	lsls	r3, r3, #2
 800eece:	4a15      	ldr	r2, [pc, #84]	; (800ef24 <prvAddNewTaskToReadyList+0xcc>)
 800eed0:	441a      	add	r2, r3
 800eed2:	687b      	ldr	r3, [r7, #4]
 800eed4:	3304      	adds	r3, #4
 800eed6:	4619      	mov	r1, r3
 800eed8:	4610      	mov	r0, r2
 800eeda:	f7ff fa59 	bl	800e390 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800eede:	f001 f801 	bl	800fee4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800eee2:	4b0d      	ldr	r3, [pc, #52]	; (800ef18 <prvAddNewTaskToReadyList+0xc0>)
 800eee4:	681b      	ldr	r3, [r3, #0]
 800eee6:	2b00      	cmp	r3, #0
 800eee8:	d00e      	beq.n	800ef08 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800eeea:	4b0a      	ldr	r3, [pc, #40]	; (800ef14 <prvAddNewTaskToReadyList+0xbc>)
 800eeec:	681b      	ldr	r3, [r3, #0]
 800eeee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eef0:	687b      	ldr	r3, [r7, #4]
 800eef2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eef4:	429a      	cmp	r2, r3
 800eef6:	d207      	bcs.n	800ef08 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800eef8:	4b0b      	ldr	r3, [pc, #44]	; (800ef28 <prvAddNewTaskToReadyList+0xd0>)
 800eefa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800eefe:	601a      	str	r2, [r3, #0]
 800ef00:	f3bf 8f4f 	dsb	sy
 800ef04:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ef08:	bf00      	nop
 800ef0a:	3708      	adds	r7, #8
 800ef0c:	46bd      	mov	sp, r7
 800ef0e:	bd80      	pop	{r7, pc}
 800ef10:	20000a28 	.word	0x20000a28
 800ef14:	20000928 	.word	0x20000928
 800ef18:	20000a34 	.word	0x20000a34
 800ef1c:	20000a44 	.word	0x20000a44
 800ef20:	20000a30 	.word	0x20000a30
 800ef24:	2000092c 	.word	0x2000092c
 800ef28:	e000ed04 	.word	0xe000ed04

0800ef2c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800ef2c:	b580      	push	{r7, lr}
 800ef2e:	b084      	sub	sp, #16
 800ef30:	af00      	add	r7, sp, #0
 800ef32:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800ef34:	2300      	movs	r3, #0
 800ef36:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800ef38:	687b      	ldr	r3, [r7, #4]
 800ef3a:	2b00      	cmp	r3, #0
 800ef3c:	d017      	beq.n	800ef6e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800ef3e:	4b13      	ldr	r3, [pc, #76]	; (800ef8c <vTaskDelay+0x60>)
 800ef40:	681b      	ldr	r3, [r3, #0]
 800ef42:	2b00      	cmp	r3, #0
 800ef44:	d00a      	beq.n	800ef5c <vTaskDelay+0x30>
	__asm volatile
 800ef46:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef4a:	f383 8811 	msr	BASEPRI, r3
 800ef4e:	f3bf 8f6f 	isb	sy
 800ef52:	f3bf 8f4f 	dsb	sy
 800ef56:	60bb      	str	r3, [r7, #8]
}
 800ef58:	bf00      	nop
 800ef5a:	e7fe      	b.n	800ef5a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800ef5c:	f000 f86a 	bl	800f034 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800ef60:	2100      	movs	r1, #0
 800ef62:	6878      	ldr	r0, [r7, #4]
 800ef64:	f000 fdf8 	bl	800fb58 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800ef68:	f000 f872 	bl	800f050 <xTaskResumeAll>
 800ef6c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800ef6e:	68fb      	ldr	r3, [r7, #12]
 800ef70:	2b00      	cmp	r3, #0
 800ef72:	d107      	bne.n	800ef84 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800ef74:	4b06      	ldr	r3, [pc, #24]	; (800ef90 <vTaskDelay+0x64>)
 800ef76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ef7a:	601a      	str	r2, [r3, #0]
 800ef7c:	f3bf 8f4f 	dsb	sy
 800ef80:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ef84:	bf00      	nop
 800ef86:	3710      	adds	r7, #16
 800ef88:	46bd      	mov	sp, r7
 800ef8a:	bd80      	pop	{r7, pc}
 800ef8c:	20000a50 	.word	0x20000a50
 800ef90:	e000ed04 	.word	0xe000ed04

0800ef94 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800ef94:	b580      	push	{r7, lr}
 800ef96:	b086      	sub	sp, #24
 800ef98:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 800ef9a:	4b1e      	ldr	r3, [pc, #120]	; (800f014 <vTaskStartScheduler+0x80>)
 800ef9c:	9301      	str	r3, [sp, #4]
 800ef9e:	2300      	movs	r3, #0
 800efa0:	9300      	str	r3, [sp, #0]
 800efa2:	2300      	movs	r3, #0
 800efa4:	2280      	movs	r2, #128	; 0x80
 800efa6:	491c      	ldr	r1, [pc, #112]	; (800f018 <vTaskStartScheduler+0x84>)
 800efa8:	481c      	ldr	r0, [pc, #112]	; (800f01c <vTaskStartScheduler+0x88>)
 800efaa:	f7ff fe75 	bl	800ec98 <xTaskCreate>
 800efae:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800efb0:	68fb      	ldr	r3, [r7, #12]
 800efb2:	2b01      	cmp	r3, #1
 800efb4:	d11b      	bne.n	800efee <vTaskStartScheduler+0x5a>
	__asm volatile
 800efb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800efba:	f383 8811 	msr	BASEPRI, r3
 800efbe:	f3bf 8f6f 	isb	sy
 800efc2:	f3bf 8f4f 	dsb	sy
 800efc6:	60bb      	str	r3, [r7, #8]
}
 800efc8:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800efca:	4b15      	ldr	r3, [pc, #84]	; (800f020 <vTaskStartScheduler+0x8c>)
 800efcc:	681b      	ldr	r3, [r3, #0]
 800efce:	334c      	adds	r3, #76	; 0x4c
 800efd0:	4a14      	ldr	r2, [pc, #80]	; (800f024 <vTaskStartScheduler+0x90>)
 800efd2:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800efd4:	4b14      	ldr	r3, [pc, #80]	; (800f028 <vTaskStartScheduler+0x94>)
 800efd6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800efda:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800efdc:	4b13      	ldr	r3, [pc, #76]	; (800f02c <vTaskStartScheduler+0x98>)
 800efde:	2201      	movs	r2, #1
 800efe0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800efe2:	4b13      	ldr	r3, [pc, #76]	; (800f030 <vTaskStartScheduler+0x9c>)
 800efe4:	2200      	movs	r2, #0
 800efe6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800efe8:	f000 feaa 	bl	800fd40 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800efec:	e00e      	b.n	800f00c <vTaskStartScheduler+0x78>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800efee:	68fb      	ldr	r3, [r7, #12]
 800eff0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800eff4:	d10a      	bne.n	800f00c <vTaskStartScheduler+0x78>
	__asm volatile
 800eff6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800effa:	f383 8811 	msr	BASEPRI, r3
 800effe:	f3bf 8f6f 	isb	sy
 800f002:	f3bf 8f4f 	dsb	sy
 800f006:	607b      	str	r3, [r7, #4]
}
 800f008:	bf00      	nop
 800f00a:	e7fe      	b.n	800f00a <vTaskStartScheduler+0x76>
}
 800f00c:	bf00      	nop
 800f00e:	3710      	adds	r7, #16
 800f010:	46bd      	mov	sp, r7
 800f012:	bd80      	pop	{r7, pc}
 800f014:	20000a4c 	.word	0x20000a4c
 800f018:	08013b50 	.word	0x08013b50
 800f01c:	0800f5d1 	.word	0x0800f5d1
 800f020:	20000928 	.word	0x20000928
 800f024:	200001e0 	.word	0x200001e0
 800f028:	20000a48 	.word	0x20000a48
 800f02c:	20000a34 	.word	0x20000a34
 800f030:	20000a2c 	.word	0x20000a2c

0800f034 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800f034:	b480      	push	{r7}
 800f036:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800f038:	4b04      	ldr	r3, [pc, #16]	; (800f04c <vTaskSuspendAll+0x18>)
 800f03a:	681b      	ldr	r3, [r3, #0]
 800f03c:	3301      	adds	r3, #1
 800f03e:	4a03      	ldr	r2, [pc, #12]	; (800f04c <vTaskSuspendAll+0x18>)
 800f040:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800f042:	bf00      	nop
 800f044:	46bd      	mov	sp, r7
 800f046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f04a:	4770      	bx	lr
 800f04c:	20000a50 	.word	0x20000a50

0800f050 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800f050:	b580      	push	{r7, lr}
 800f052:	b084      	sub	sp, #16
 800f054:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800f056:	2300      	movs	r3, #0
 800f058:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800f05a:	2300      	movs	r3, #0
 800f05c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800f05e:	4b41      	ldr	r3, [pc, #260]	; (800f164 <xTaskResumeAll+0x114>)
 800f060:	681b      	ldr	r3, [r3, #0]
 800f062:	2b00      	cmp	r3, #0
 800f064:	d10a      	bne.n	800f07c <xTaskResumeAll+0x2c>
	__asm volatile
 800f066:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f06a:	f383 8811 	msr	BASEPRI, r3
 800f06e:	f3bf 8f6f 	isb	sy
 800f072:	f3bf 8f4f 	dsb	sy
 800f076:	603b      	str	r3, [r7, #0]
}
 800f078:	bf00      	nop
 800f07a:	e7fe      	b.n	800f07a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800f07c:	f000 ff02 	bl	800fe84 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800f080:	4b38      	ldr	r3, [pc, #224]	; (800f164 <xTaskResumeAll+0x114>)
 800f082:	681b      	ldr	r3, [r3, #0]
 800f084:	3b01      	subs	r3, #1
 800f086:	4a37      	ldr	r2, [pc, #220]	; (800f164 <xTaskResumeAll+0x114>)
 800f088:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f08a:	4b36      	ldr	r3, [pc, #216]	; (800f164 <xTaskResumeAll+0x114>)
 800f08c:	681b      	ldr	r3, [r3, #0]
 800f08e:	2b00      	cmp	r3, #0
 800f090:	d161      	bne.n	800f156 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800f092:	4b35      	ldr	r3, [pc, #212]	; (800f168 <xTaskResumeAll+0x118>)
 800f094:	681b      	ldr	r3, [r3, #0]
 800f096:	2b00      	cmp	r3, #0
 800f098:	d05d      	beq.n	800f156 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f09a:	e02e      	b.n	800f0fa <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f09c:	4b33      	ldr	r3, [pc, #204]	; (800f16c <xTaskResumeAll+0x11c>)
 800f09e:	68db      	ldr	r3, [r3, #12]
 800f0a0:	68db      	ldr	r3, [r3, #12]
 800f0a2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f0a4:	68fb      	ldr	r3, [r7, #12]
 800f0a6:	3318      	adds	r3, #24
 800f0a8:	4618      	mov	r0, r3
 800f0aa:	f7ff f9ce 	bl	800e44a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f0ae:	68fb      	ldr	r3, [r7, #12]
 800f0b0:	3304      	adds	r3, #4
 800f0b2:	4618      	mov	r0, r3
 800f0b4:	f7ff f9c9 	bl	800e44a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800f0b8:	68fb      	ldr	r3, [r7, #12]
 800f0ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f0bc:	2201      	movs	r2, #1
 800f0be:	409a      	lsls	r2, r3
 800f0c0:	4b2b      	ldr	r3, [pc, #172]	; (800f170 <xTaskResumeAll+0x120>)
 800f0c2:	681b      	ldr	r3, [r3, #0]
 800f0c4:	4313      	orrs	r3, r2
 800f0c6:	4a2a      	ldr	r2, [pc, #168]	; (800f170 <xTaskResumeAll+0x120>)
 800f0c8:	6013      	str	r3, [r2, #0]
 800f0ca:	68fb      	ldr	r3, [r7, #12]
 800f0cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f0ce:	4613      	mov	r3, r2
 800f0d0:	009b      	lsls	r3, r3, #2
 800f0d2:	4413      	add	r3, r2
 800f0d4:	009b      	lsls	r3, r3, #2
 800f0d6:	4a27      	ldr	r2, [pc, #156]	; (800f174 <xTaskResumeAll+0x124>)
 800f0d8:	441a      	add	r2, r3
 800f0da:	68fb      	ldr	r3, [r7, #12]
 800f0dc:	3304      	adds	r3, #4
 800f0de:	4619      	mov	r1, r3
 800f0e0:	4610      	mov	r0, r2
 800f0e2:	f7ff f955 	bl	800e390 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f0e6:	68fb      	ldr	r3, [r7, #12]
 800f0e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f0ea:	4b23      	ldr	r3, [pc, #140]	; (800f178 <xTaskResumeAll+0x128>)
 800f0ec:	681b      	ldr	r3, [r3, #0]
 800f0ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f0f0:	429a      	cmp	r2, r3
 800f0f2:	d302      	bcc.n	800f0fa <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800f0f4:	4b21      	ldr	r3, [pc, #132]	; (800f17c <xTaskResumeAll+0x12c>)
 800f0f6:	2201      	movs	r2, #1
 800f0f8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f0fa:	4b1c      	ldr	r3, [pc, #112]	; (800f16c <xTaskResumeAll+0x11c>)
 800f0fc:	681b      	ldr	r3, [r3, #0]
 800f0fe:	2b00      	cmp	r3, #0
 800f100:	d1cc      	bne.n	800f09c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800f102:	68fb      	ldr	r3, [r7, #12]
 800f104:	2b00      	cmp	r3, #0
 800f106:	d001      	beq.n	800f10c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800f108:	f000 fafe 	bl	800f708 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800f10c:	4b1c      	ldr	r3, [pc, #112]	; (800f180 <xTaskResumeAll+0x130>)
 800f10e:	681b      	ldr	r3, [r3, #0]
 800f110:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800f112:	687b      	ldr	r3, [r7, #4]
 800f114:	2b00      	cmp	r3, #0
 800f116:	d010      	beq.n	800f13a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800f118:	f000 f836 	bl	800f188 <xTaskIncrementTick>
 800f11c:	4603      	mov	r3, r0
 800f11e:	2b00      	cmp	r3, #0
 800f120:	d002      	beq.n	800f128 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800f122:	4b16      	ldr	r3, [pc, #88]	; (800f17c <xTaskResumeAll+0x12c>)
 800f124:	2201      	movs	r2, #1
 800f126:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800f128:	687b      	ldr	r3, [r7, #4]
 800f12a:	3b01      	subs	r3, #1
 800f12c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800f12e:	687b      	ldr	r3, [r7, #4]
 800f130:	2b00      	cmp	r3, #0
 800f132:	d1f1      	bne.n	800f118 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800f134:	4b12      	ldr	r3, [pc, #72]	; (800f180 <xTaskResumeAll+0x130>)
 800f136:	2200      	movs	r2, #0
 800f138:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800f13a:	4b10      	ldr	r3, [pc, #64]	; (800f17c <xTaskResumeAll+0x12c>)
 800f13c:	681b      	ldr	r3, [r3, #0]
 800f13e:	2b00      	cmp	r3, #0
 800f140:	d009      	beq.n	800f156 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800f142:	2301      	movs	r3, #1
 800f144:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800f146:	4b0f      	ldr	r3, [pc, #60]	; (800f184 <xTaskResumeAll+0x134>)
 800f148:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f14c:	601a      	str	r2, [r3, #0]
 800f14e:	f3bf 8f4f 	dsb	sy
 800f152:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800f156:	f000 fec5 	bl	800fee4 <vPortExitCritical>

	return xAlreadyYielded;
 800f15a:	68bb      	ldr	r3, [r7, #8]
}
 800f15c:	4618      	mov	r0, r3
 800f15e:	3710      	adds	r7, #16
 800f160:	46bd      	mov	sp, r7
 800f162:	bd80      	pop	{r7, pc}
 800f164:	20000a50 	.word	0x20000a50
 800f168:	20000a28 	.word	0x20000a28
 800f16c:	200009e8 	.word	0x200009e8
 800f170:	20000a30 	.word	0x20000a30
 800f174:	2000092c 	.word	0x2000092c
 800f178:	20000928 	.word	0x20000928
 800f17c:	20000a3c 	.word	0x20000a3c
 800f180:	20000a38 	.word	0x20000a38
 800f184:	e000ed04 	.word	0xe000ed04

0800f188 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800f188:	b580      	push	{r7, lr}
 800f18a:	b086      	sub	sp, #24
 800f18c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800f18e:	2300      	movs	r3, #0
 800f190:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f192:	4b4e      	ldr	r3, [pc, #312]	; (800f2cc <xTaskIncrementTick+0x144>)
 800f194:	681b      	ldr	r3, [r3, #0]
 800f196:	2b00      	cmp	r3, #0
 800f198:	f040 808e 	bne.w	800f2b8 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800f19c:	4b4c      	ldr	r3, [pc, #304]	; (800f2d0 <xTaskIncrementTick+0x148>)
 800f19e:	681b      	ldr	r3, [r3, #0]
 800f1a0:	3301      	adds	r3, #1
 800f1a2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800f1a4:	4a4a      	ldr	r2, [pc, #296]	; (800f2d0 <xTaskIncrementTick+0x148>)
 800f1a6:	693b      	ldr	r3, [r7, #16]
 800f1a8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800f1aa:	693b      	ldr	r3, [r7, #16]
 800f1ac:	2b00      	cmp	r3, #0
 800f1ae:	d120      	bne.n	800f1f2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800f1b0:	4b48      	ldr	r3, [pc, #288]	; (800f2d4 <xTaskIncrementTick+0x14c>)
 800f1b2:	681b      	ldr	r3, [r3, #0]
 800f1b4:	681b      	ldr	r3, [r3, #0]
 800f1b6:	2b00      	cmp	r3, #0
 800f1b8:	d00a      	beq.n	800f1d0 <xTaskIncrementTick+0x48>
	__asm volatile
 800f1ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f1be:	f383 8811 	msr	BASEPRI, r3
 800f1c2:	f3bf 8f6f 	isb	sy
 800f1c6:	f3bf 8f4f 	dsb	sy
 800f1ca:	603b      	str	r3, [r7, #0]
}
 800f1cc:	bf00      	nop
 800f1ce:	e7fe      	b.n	800f1ce <xTaskIncrementTick+0x46>
 800f1d0:	4b40      	ldr	r3, [pc, #256]	; (800f2d4 <xTaskIncrementTick+0x14c>)
 800f1d2:	681b      	ldr	r3, [r3, #0]
 800f1d4:	60fb      	str	r3, [r7, #12]
 800f1d6:	4b40      	ldr	r3, [pc, #256]	; (800f2d8 <xTaskIncrementTick+0x150>)
 800f1d8:	681b      	ldr	r3, [r3, #0]
 800f1da:	4a3e      	ldr	r2, [pc, #248]	; (800f2d4 <xTaskIncrementTick+0x14c>)
 800f1dc:	6013      	str	r3, [r2, #0]
 800f1de:	4a3e      	ldr	r2, [pc, #248]	; (800f2d8 <xTaskIncrementTick+0x150>)
 800f1e0:	68fb      	ldr	r3, [r7, #12]
 800f1e2:	6013      	str	r3, [r2, #0]
 800f1e4:	4b3d      	ldr	r3, [pc, #244]	; (800f2dc <xTaskIncrementTick+0x154>)
 800f1e6:	681b      	ldr	r3, [r3, #0]
 800f1e8:	3301      	adds	r3, #1
 800f1ea:	4a3c      	ldr	r2, [pc, #240]	; (800f2dc <xTaskIncrementTick+0x154>)
 800f1ec:	6013      	str	r3, [r2, #0]
 800f1ee:	f000 fa8b 	bl	800f708 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800f1f2:	4b3b      	ldr	r3, [pc, #236]	; (800f2e0 <xTaskIncrementTick+0x158>)
 800f1f4:	681b      	ldr	r3, [r3, #0]
 800f1f6:	693a      	ldr	r2, [r7, #16]
 800f1f8:	429a      	cmp	r2, r3
 800f1fa:	d348      	bcc.n	800f28e <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f1fc:	4b35      	ldr	r3, [pc, #212]	; (800f2d4 <xTaskIncrementTick+0x14c>)
 800f1fe:	681b      	ldr	r3, [r3, #0]
 800f200:	681b      	ldr	r3, [r3, #0]
 800f202:	2b00      	cmp	r3, #0
 800f204:	d104      	bne.n	800f210 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f206:	4b36      	ldr	r3, [pc, #216]	; (800f2e0 <xTaskIncrementTick+0x158>)
 800f208:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f20c:	601a      	str	r2, [r3, #0]
					break;
 800f20e:	e03e      	b.n	800f28e <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f210:	4b30      	ldr	r3, [pc, #192]	; (800f2d4 <xTaskIncrementTick+0x14c>)
 800f212:	681b      	ldr	r3, [r3, #0]
 800f214:	68db      	ldr	r3, [r3, #12]
 800f216:	68db      	ldr	r3, [r3, #12]
 800f218:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800f21a:	68bb      	ldr	r3, [r7, #8]
 800f21c:	685b      	ldr	r3, [r3, #4]
 800f21e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800f220:	693a      	ldr	r2, [r7, #16]
 800f222:	687b      	ldr	r3, [r7, #4]
 800f224:	429a      	cmp	r2, r3
 800f226:	d203      	bcs.n	800f230 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800f228:	4a2d      	ldr	r2, [pc, #180]	; (800f2e0 <xTaskIncrementTick+0x158>)
 800f22a:	687b      	ldr	r3, [r7, #4]
 800f22c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800f22e:	e02e      	b.n	800f28e <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f230:	68bb      	ldr	r3, [r7, #8]
 800f232:	3304      	adds	r3, #4
 800f234:	4618      	mov	r0, r3
 800f236:	f7ff f908 	bl	800e44a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800f23a:	68bb      	ldr	r3, [r7, #8]
 800f23c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f23e:	2b00      	cmp	r3, #0
 800f240:	d004      	beq.n	800f24c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f242:	68bb      	ldr	r3, [r7, #8]
 800f244:	3318      	adds	r3, #24
 800f246:	4618      	mov	r0, r3
 800f248:	f7ff f8ff 	bl	800e44a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800f24c:	68bb      	ldr	r3, [r7, #8]
 800f24e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f250:	2201      	movs	r2, #1
 800f252:	409a      	lsls	r2, r3
 800f254:	4b23      	ldr	r3, [pc, #140]	; (800f2e4 <xTaskIncrementTick+0x15c>)
 800f256:	681b      	ldr	r3, [r3, #0]
 800f258:	4313      	orrs	r3, r2
 800f25a:	4a22      	ldr	r2, [pc, #136]	; (800f2e4 <xTaskIncrementTick+0x15c>)
 800f25c:	6013      	str	r3, [r2, #0]
 800f25e:	68bb      	ldr	r3, [r7, #8]
 800f260:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f262:	4613      	mov	r3, r2
 800f264:	009b      	lsls	r3, r3, #2
 800f266:	4413      	add	r3, r2
 800f268:	009b      	lsls	r3, r3, #2
 800f26a:	4a1f      	ldr	r2, [pc, #124]	; (800f2e8 <xTaskIncrementTick+0x160>)
 800f26c:	441a      	add	r2, r3
 800f26e:	68bb      	ldr	r3, [r7, #8]
 800f270:	3304      	adds	r3, #4
 800f272:	4619      	mov	r1, r3
 800f274:	4610      	mov	r0, r2
 800f276:	f7ff f88b 	bl	800e390 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f27a:	68bb      	ldr	r3, [r7, #8]
 800f27c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f27e:	4b1b      	ldr	r3, [pc, #108]	; (800f2ec <xTaskIncrementTick+0x164>)
 800f280:	681b      	ldr	r3, [r3, #0]
 800f282:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f284:	429a      	cmp	r2, r3
 800f286:	d3b9      	bcc.n	800f1fc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800f288:	2301      	movs	r3, #1
 800f28a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f28c:	e7b6      	b.n	800f1fc <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800f28e:	4b17      	ldr	r3, [pc, #92]	; (800f2ec <xTaskIncrementTick+0x164>)
 800f290:	681b      	ldr	r3, [r3, #0]
 800f292:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f294:	4914      	ldr	r1, [pc, #80]	; (800f2e8 <xTaskIncrementTick+0x160>)
 800f296:	4613      	mov	r3, r2
 800f298:	009b      	lsls	r3, r3, #2
 800f29a:	4413      	add	r3, r2
 800f29c:	009b      	lsls	r3, r3, #2
 800f29e:	440b      	add	r3, r1
 800f2a0:	681b      	ldr	r3, [r3, #0]
 800f2a2:	2b01      	cmp	r3, #1
 800f2a4:	d901      	bls.n	800f2aa <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800f2a6:	2301      	movs	r3, #1
 800f2a8:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800f2aa:	4b11      	ldr	r3, [pc, #68]	; (800f2f0 <xTaskIncrementTick+0x168>)
 800f2ac:	681b      	ldr	r3, [r3, #0]
 800f2ae:	2b00      	cmp	r3, #0
 800f2b0:	d007      	beq.n	800f2c2 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800f2b2:	2301      	movs	r3, #1
 800f2b4:	617b      	str	r3, [r7, #20]
 800f2b6:	e004      	b.n	800f2c2 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800f2b8:	4b0e      	ldr	r3, [pc, #56]	; (800f2f4 <xTaskIncrementTick+0x16c>)
 800f2ba:	681b      	ldr	r3, [r3, #0]
 800f2bc:	3301      	adds	r3, #1
 800f2be:	4a0d      	ldr	r2, [pc, #52]	; (800f2f4 <xTaskIncrementTick+0x16c>)
 800f2c0:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800f2c2:	697b      	ldr	r3, [r7, #20]
}
 800f2c4:	4618      	mov	r0, r3
 800f2c6:	3718      	adds	r7, #24
 800f2c8:	46bd      	mov	sp, r7
 800f2ca:	bd80      	pop	{r7, pc}
 800f2cc:	20000a50 	.word	0x20000a50
 800f2d0:	20000a2c 	.word	0x20000a2c
 800f2d4:	200009e0 	.word	0x200009e0
 800f2d8:	200009e4 	.word	0x200009e4
 800f2dc:	20000a40 	.word	0x20000a40
 800f2e0:	20000a48 	.word	0x20000a48
 800f2e4:	20000a30 	.word	0x20000a30
 800f2e8:	2000092c 	.word	0x2000092c
 800f2ec:	20000928 	.word	0x20000928
 800f2f0:	20000a3c 	.word	0x20000a3c
 800f2f4:	20000a38 	.word	0x20000a38

0800f2f8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800f2f8:	b480      	push	{r7}
 800f2fa:	b087      	sub	sp, #28
 800f2fc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800f2fe:	4b29      	ldr	r3, [pc, #164]	; (800f3a4 <vTaskSwitchContext+0xac>)
 800f300:	681b      	ldr	r3, [r3, #0]
 800f302:	2b00      	cmp	r3, #0
 800f304:	d003      	beq.n	800f30e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800f306:	4b28      	ldr	r3, [pc, #160]	; (800f3a8 <vTaskSwitchContext+0xb0>)
 800f308:	2201      	movs	r2, #1
 800f30a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800f30c:	e044      	b.n	800f398 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800f30e:	4b26      	ldr	r3, [pc, #152]	; (800f3a8 <vTaskSwitchContext+0xb0>)
 800f310:	2200      	movs	r2, #0
 800f312:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f314:	4b25      	ldr	r3, [pc, #148]	; (800f3ac <vTaskSwitchContext+0xb4>)
 800f316:	681b      	ldr	r3, [r3, #0]
 800f318:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800f31a:	68fb      	ldr	r3, [r7, #12]
 800f31c:	fab3 f383 	clz	r3, r3
 800f320:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800f322:	7afb      	ldrb	r3, [r7, #11]
 800f324:	f1c3 031f 	rsb	r3, r3, #31
 800f328:	617b      	str	r3, [r7, #20]
 800f32a:	4921      	ldr	r1, [pc, #132]	; (800f3b0 <vTaskSwitchContext+0xb8>)
 800f32c:	697a      	ldr	r2, [r7, #20]
 800f32e:	4613      	mov	r3, r2
 800f330:	009b      	lsls	r3, r3, #2
 800f332:	4413      	add	r3, r2
 800f334:	009b      	lsls	r3, r3, #2
 800f336:	440b      	add	r3, r1
 800f338:	681b      	ldr	r3, [r3, #0]
 800f33a:	2b00      	cmp	r3, #0
 800f33c:	d10a      	bne.n	800f354 <vTaskSwitchContext+0x5c>
	__asm volatile
 800f33e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f342:	f383 8811 	msr	BASEPRI, r3
 800f346:	f3bf 8f6f 	isb	sy
 800f34a:	f3bf 8f4f 	dsb	sy
 800f34e:	607b      	str	r3, [r7, #4]
}
 800f350:	bf00      	nop
 800f352:	e7fe      	b.n	800f352 <vTaskSwitchContext+0x5a>
 800f354:	697a      	ldr	r2, [r7, #20]
 800f356:	4613      	mov	r3, r2
 800f358:	009b      	lsls	r3, r3, #2
 800f35a:	4413      	add	r3, r2
 800f35c:	009b      	lsls	r3, r3, #2
 800f35e:	4a14      	ldr	r2, [pc, #80]	; (800f3b0 <vTaskSwitchContext+0xb8>)
 800f360:	4413      	add	r3, r2
 800f362:	613b      	str	r3, [r7, #16]
 800f364:	693b      	ldr	r3, [r7, #16]
 800f366:	685b      	ldr	r3, [r3, #4]
 800f368:	685a      	ldr	r2, [r3, #4]
 800f36a:	693b      	ldr	r3, [r7, #16]
 800f36c:	605a      	str	r2, [r3, #4]
 800f36e:	693b      	ldr	r3, [r7, #16]
 800f370:	685a      	ldr	r2, [r3, #4]
 800f372:	693b      	ldr	r3, [r7, #16]
 800f374:	3308      	adds	r3, #8
 800f376:	429a      	cmp	r2, r3
 800f378:	d104      	bne.n	800f384 <vTaskSwitchContext+0x8c>
 800f37a:	693b      	ldr	r3, [r7, #16]
 800f37c:	685b      	ldr	r3, [r3, #4]
 800f37e:	685a      	ldr	r2, [r3, #4]
 800f380:	693b      	ldr	r3, [r7, #16]
 800f382:	605a      	str	r2, [r3, #4]
 800f384:	693b      	ldr	r3, [r7, #16]
 800f386:	685b      	ldr	r3, [r3, #4]
 800f388:	68db      	ldr	r3, [r3, #12]
 800f38a:	4a0a      	ldr	r2, [pc, #40]	; (800f3b4 <vTaskSwitchContext+0xbc>)
 800f38c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800f38e:	4b09      	ldr	r3, [pc, #36]	; (800f3b4 <vTaskSwitchContext+0xbc>)
 800f390:	681b      	ldr	r3, [r3, #0]
 800f392:	334c      	adds	r3, #76	; 0x4c
 800f394:	4a08      	ldr	r2, [pc, #32]	; (800f3b8 <vTaskSwitchContext+0xc0>)
 800f396:	6013      	str	r3, [r2, #0]
}
 800f398:	bf00      	nop
 800f39a:	371c      	adds	r7, #28
 800f39c:	46bd      	mov	sp, r7
 800f39e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3a2:	4770      	bx	lr
 800f3a4:	20000a50 	.word	0x20000a50
 800f3a8:	20000a3c 	.word	0x20000a3c
 800f3ac:	20000a30 	.word	0x20000a30
 800f3b0:	2000092c 	.word	0x2000092c
 800f3b4:	20000928 	.word	0x20000928
 800f3b8:	200001e0 	.word	0x200001e0

0800f3bc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800f3bc:	b580      	push	{r7, lr}
 800f3be:	b084      	sub	sp, #16
 800f3c0:	af00      	add	r7, sp, #0
 800f3c2:	6078      	str	r0, [r7, #4]
 800f3c4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800f3c6:	687b      	ldr	r3, [r7, #4]
 800f3c8:	2b00      	cmp	r3, #0
 800f3ca:	d10a      	bne.n	800f3e2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800f3cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f3d0:	f383 8811 	msr	BASEPRI, r3
 800f3d4:	f3bf 8f6f 	isb	sy
 800f3d8:	f3bf 8f4f 	dsb	sy
 800f3dc:	60fb      	str	r3, [r7, #12]
}
 800f3de:	bf00      	nop
 800f3e0:	e7fe      	b.n	800f3e0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800f3e2:	4b07      	ldr	r3, [pc, #28]	; (800f400 <vTaskPlaceOnEventList+0x44>)
 800f3e4:	681b      	ldr	r3, [r3, #0]
 800f3e6:	3318      	adds	r3, #24
 800f3e8:	4619      	mov	r1, r3
 800f3ea:	6878      	ldr	r0, [r7, #4]
 800f3ec:	f7fe fff4 	bl	800e3d8 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800f3f0:	2101      	movs	r1, #1
 800f3f2:	6838      	ldr	r0, [r7, #0]
 800f3f4:	f000 fbb0 	bl	800fb58 <prvAddCurrentTaskToDelayedList>
}
 800f3f8:	bf00      	nop
 800f3fa:	3710      	adds	r7, #16
 800f3fc:	46bd      	mov	sp, r7
 800f3fe:	bd80      	pop	{r7, pc}
 800f400:	20000928 	.word	0x20000928

0800f404 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800f404:	b580      	push	{r7, lr}
 800f406:	b086      	sub	sp, #24
 800f408:	af00      	add	r7, sp, #0
 800f40a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f40c:	687b      	ldr	r3, [r7, #4]
 800f40e:	68db      	ldr	r3, [r3, #12]
 800f410:	68db      	ldr	r3, [r3, #12]
 800f412:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800f414:	693b      	ldr	r3, [r7, #16]
 800f416:	2b00      	cmp	r3, #0
 800f418:	d10a      	bne.n	800f430 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800f41a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f41e:	f383 8811 	msr	BASEPRI, r3
 800f422:	f3bf 8f6f 	isb	sy
 800f426:	f3bf 8f4f 	dsb	sy
 800f42a:	60fb      	str	r3, [r7, #12]
}
 800f42c:	bf00      	nop
 800f42e:	e7fe      	b.n	800f42e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800f430:	693b      	ldr	r3, [r7, #16]
 800f432:	3318      	adds	r3, #24
 800f434:	4618      	mov	r0, r3
 800f436:	f7ff f808 	bl	800e44a <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f43a:	4b1d      	ldr	r3, [pc, #116]	; (800f4b0 <xTaskRemoveFromEventList+0xac>)
 800f43c:	681b      	ldr	r3, [r3, #0]
 800f43e:	2b00      	cmp	r3, #0
 800f440:	d11c      	bne.n	800f47c <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800f442:	693b      	ldr	r3, [r7, #16]
 800f444:	3304      	adds	r3, #4
 800f446:	4618      	mov	r0, r3
 800f448:	f7fe ffff 	bl	800e44a <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800f44c:	693b      	ldr	r3, [r7, #16]
 800f44e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f450:	2201      	movs	r2, #1
 800f452:	409a      	lsls	r2, r3
 800f454:	4b17      	ldr	r3, [pc, #92]	; (800f4b4 <xTaskRemoveFromEventList+0xb0>)
 800f456:	681b      	ldr	r3, [r3, #0]
 800f458:	4313      	orrs	r3, r2
 800f45a:	4a16      	ldr	r2, [pc, #88]	; (800f4b4 <xTaskRemoveFromEventList+0xb0>)
 800f45c:	6013      	str	r3, [r2, #0]
 800f45e:	693b      	ldr	r3, [r7, #16]
 800f460:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f462:	4613      	mov	r3, r2
 800f464:	009b      	lsls	r3, r3, #2
 800f466:	4413      	add	r3, r2
 800f468:	009b      	lsls	r3, r3, #2
 800f46a:	4a13      	ldr	r2, [pc, #76]	; (800f4b8 <xTaskRemoveFromEventList+0xb4>)
 800f46c:	441a      	add	r2, r3
 800f46e:	693b      	ldr	r3, [r7, #16]
 800f470:	3304      	adds	r3, #4
 800f472:	4619      	mov	r1, r3
 800f474:	4610      	mov	r0, r2
 800f476:	f7fe ff8b 	bl	800e390 <vListInsertEnd>
 800f47a:	e005      	b.n	800f488 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800f47c:	693b      	ldr	r3, [r7, #16]
 800f47e:	3318      	adds	r3, #24
 800f480:	4619      	mov	r1, r3
 800f482:	480e      	ldr	r0, [pc, #56]	; (800f4bc <xTaskRemoveFromEventList+0xb8>)
 800f484:	f7fe ff84 	bl	800e390 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800f488:	693b      	ldr	r3, [r7, #16]
 800f48a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f48c:	4b0c      	ldr	r3, [pc, #48]	; (800f4c0 <xTaskRemoveFromEventList+0xbc>)
 800f48e:	681b      	ldr	r3, [r3, #0]
 800f490:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f492:	429a      	cmp	r2, r3
 800f494:	d905      	bls.n	800f4a2 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800f496:	2301      	movs	r3, #1
 800f498:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800f49a:	4b0a      	ldr	r3, [pc, #40]	; (800f4c4 <xTaskRemoveFromEventList+0xc0>)
 800f49c:	2201      	movs	r2, #1
 800f49e:	601a      	str	r2, [r3, #0]
 800f4a0:	e001      	b.n	800f4a6 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800f4a2:	2300      	movs	r3, #0
 800f4a4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800f4a6:	697b      	ldr	r3, [r7, #20]
}
 800f4a8:	4618      	mov	r0, r3
 800f4aa:	3718      	adds	r7, #24
 800f4ac:	46bd      	mov	sp, r7
 800f4ae:	bd80      	pop	{r7, pc}
 800f4b0:	20000a50 	.word	0x20000a50
 800f4b4:	20000a30 	.word	0x20000a30
 800f4b8:	2000092c 	.word	0x2000092c
 800f4bc:	200009e8 	.word	0x200009e8
 800f4c0:	20000928 	.word	0x20000928
 800f4c4:	20000a3c 	.word	0x20000a3c

0800f4c8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800f4c8:	b480      	push	{r7}
 800f4ca:	b083      	sub	sp, #12
 800f4cc:	af00      	add	r7, sp, #0
 800f4ce:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800f4d0:	4b06      	ldr	r3, [pc, #24]	; (800f4ec <vTaskInternalSetTimeOutState+0x24>)
 800f4d2:	681a      	ldr	r2, [r3, #0]
 800f4d4:	687b      	ldr	r3, [r7, #4]
 800f4d6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800f4d8:	4b05      	ldr	r3, [pc, #20]	; (800f4f0 <vTaskInternalSetTimeOutState+0x28>)
 800f4da:	681a      	ldr	r2, [r3, #0]
 800f4dc:	687b      	ldr	r3, [r7, #4]
 800f4de:	605a      	str	r2, [r3, #4]
}
 800f4e0:	bf00      	nop
 800f4e2:	370c      	adds	r7, #12
 800f4e4:	46bd      	mov	sp, r7
 800f4e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4ea:	4770      	bx	lr
 800f4ec:	20000a40 	.word	0x20000a40
 800f4f0:	20000a2c 	.word	0x20000a2c

0800f4f4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800f4f4:	b580      	push	{r7, lr}
 800f4f6:	b088      	sub	sp, #32
 800f4f8:	af00      	add	r7, sp, #0
 800f4fa:	6078      	str	r0, [r7, #4]
 800f4fc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800f4fe:	687b      	ldr	r3, [r7, #4]
 800f500:	2b00      	cmp	r3, #0
 800f502:	d10a      	bne.n	800f51a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800f504:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f508:	f383 8811 	msr	BASEPRI, r3
 800f50c:	f3bf 8f6f 	isb	sy
 800f510:	f3bf 8f4f 	dsb	sy
 800f514:	613b      	str	r3, [r7, #16]
}
 800f516:	bf00      	nop
 800f518:	e7fe      	b.n	800f518 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800f51a:	683b      	ldr	r3, [r7, #0]
 800f51c:	2b00      	cmp	r3, #0
 800f51e:	d10a      	bne.n	800f536 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800f520:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f524:	f383 8811 	msr	BASEPRI, r3
 800f528:	f3bf 8f6f 	isb	sy
 800f52c:	f3bf 8f4f 	dsb	sy
 800f530:	60fb      	str	r3, [r7, #12]
}
 800f532:	bf00      	nop
 800f534:	e7fe      	b.n	800f534 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800f536:	f000 fca5 	bl	800fe84 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800f53a:	4b1d      	ldr	r3, [pc, #116]	; (800f5b0 <xTaskCheckForTimeOut+0xbc>)
 800f53c:	681b      	ldr	r3, [r3, #0]
 800f53e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800f540:	687b      	ldr	r3, [r7, #4]
 800f542:	685b      	ldr	r3, [r3, #4]
 800f544:	69ba      	ldr	r2, [r7, #24]
 800f546:	1ad3      	subs	r3, r2, r3
 800f548:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800f54a:	683b      	ldr	r3, [r7, #0]
 800f54c:	681b      	ldr	r3, [r3, #0]
 800f54e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f552:	d102      	bne.n	800f55a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800f554:	2300      	movs	r3, #0
 800f556:	61fb      	str	r3, [r7, #28]
 800f558:	e023      	b.n	800f5a2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800f55a:	687b      	ldr	r3, [r7, #4]
 800f55c:	681a      	ldr	r2, [r3, #0]
 800f55e:	4b15      	ldr	r3, [pc, #84]	; (800f5b4 <xTaskCheckForTimeOut+0xc0>)
 800f560:	681b      	ldr	r3, [r3, #0]
 800f562:	429a      	cmp	r2, r3
 800f564:	d007      	beq.n	800f576 <xTaskCheckForTimeOut+0x82>
 800f566:	687b      	ldr	r3, [r7, #4]
 800f568:	685b      	ldr	r3, [r3, #4]
 800f56a:	69ba      	ldr	r2, [r7, #24]
 800f56c:	429a      	cmp	r2, r3
 800f56e:	d302      	bcc.n	800f576 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800f570:	2301      	movs	r3, #1
 800f572:	61fb      	str	r3, [r7, #28]
 800f574:	e015      	b.n	800f5a2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800f576:	683b      	ldr	r3, [r7, #0]
 800f578:	681b      	ldr	r3, [r3, #0]
 800f57a:	697a      	ldr	r2, [r7, #20]
 800f57c:	429a      	cmp	r2, r3
 800f57e:	d20b      	bcs.n	800f598 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800f580:	683b      	ldr	r3, [r7, #0]
 800f582:	681a      	ldr	r2, [r3, #0]
 800f584:	697b      	ldr	r3, [r7, #20]
 800f586:	1ad2      	subs	r2, r2, r3
 800f588:	683b      	ldr	r3, [r7, #0]
 800f58a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800f58c:	6878      	ldr	r0, [r7, #4]
 800f58e:	f7ff ff9b 	bl	800f4c8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800f592:	2300      	movs	r3, #0
 800f594:	61fb      	str	r3, [r7, #28]
 800f596:	e004      	b.n	800f5a2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800f598:	683b      	ldr	r3, [r7, #0]
 800f59a:	2200      	movs	r2, #0
 800f59c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800f59e:	2301      	movs	r3, #1
 800f5a0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800f5a2:	f000 fc9f 	bl	800fee4 <vPortExitCritical>

	return xReturn;
 800f5a6:	69fb      	ldr	r3, [r7, #28]
}
 800f5a8:	4618      	mov	r0, r3
 800f5aa:	3720      	adds	r7, #32
 800f5ac:	46bd      	mov	sp, r7
 800f5ae:	bd80      	pop	{r7, pc}
 800f5b0:	20000a2c 	.word	0x20000a2c
 800f5b4:	20000a40 	.word	0x20000a40

0800f5b8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800f5b8:	b480      	push	{r7}
 800f5ba:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800f5bc:	4b03      	ldr	r3, [pc, #12]	; (800f5cc <vTaskMissedYield+0x14>)
 800f5be:	2201      	movs	r2, #1
 800f5c0:	601a      	str	r2, [r3, #0]
}
 800f5c2:	bf00      	nop
 800f5c4:	46bd      	mov	sp, r7
 800f5c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5ca:	4770      	bx	lr
 800f5cc:	20000a3c 	.word	0x20000a3c

0800f5d0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800f5d0:	b580      	push	{r7, lr}
 800f5d2:	b082      	sub	sp, #8
 800f5d4:	af00      	add	r7, sp, #0
 800f5d6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800f5d8:	f000 f852 	bl	800f680 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800f5dc:	4b06      	ldr	r3, [pc, #24]	; (800f5f8 <prvIdleTask+0x28>)
 800f5de:	681b      	ldr	r3, [r3, #0]
 800f5e0:	2b01      	cmp	r3, #1
 800f5e2:	d9f9      	bls.n	800f5d8 <prvIdleTask+0x8>
			{
				taskYIELD();
 800f5e4:	4b05      	ldr	r3, [pc, #20]	; (800f5fc <prvIdleTask+0x2c>)
 800f5e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f5ea:	601a      	str	r2, [r3, #0]
 800f5ec:	f3bf 8f4f 	dsb	sy
 800f5f0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800f5f4:	e7f0      	b.n	800f5d8 <prvIdleTask+0x8>
 800f5f6:	bf00      	nop
 800f5f8:	2000092c 	.word	0x2000092c
 800f5fc:	e000ed04 	.word	0xe000ed04

0800f600 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800f600:	b580      	push	{r7, lr}
 800f602:	b082      	sub	sp, #8
 800f604:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800f606:	2300      	movs	r3, #0
 800f608:	607b      	str	r3, [r7, #4]
 800f60a:	e00c      	b.n	800f626 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800f60c:	687a      	ldr	r2, [r7, #4]
 800f60e:	4613      	mov	r3, r2
 800f610:	009b      	lsls	r3, r3, #2
 800f612:	4413      	add	r3, r2
 800f614:	009b      	lsls	r3, r3, #2
 800f616:	4a12      	ldr	r2, [pc, #72]	; (800f660 <prvInitialiseTaskLists+0x60>)
 800f618:	4413      	add	r3, r2
 800f61a:	4618      	mov	r0, r3
 800f61c:	f7fe fe8b 	bl	800e336 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800f620:	687b      	ldr	r3, [r7, #4]
 800f622:	3301      	adds	r3, #1
 800f624:	607b      	str	r3, [r7, #4]
 800f626:	687b      	ldr	r3, [r7, #4]
 800f628:	2b06      	cmp	r3, #6
 800f62a:	d9ef      	bls.n	800f60c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800f62c:	480d      	ldr	r0, [pc, #52]	; (800f664 <prvInitialiseTaskLists+0x64>)
 800f62e:	f7fe fe82 	bl	800e336 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800f632:	480d      	ldr	r0, [pc, #52]	; (800f668 <prvInitialiseTaskLists+0x68>)
 800f634:	f7fe fe7f 	bl	800e336 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800f638:	480c      	ldr	r0, [pc, #48]	; (800f66c <prvInitialiseTaskLists+0x6c>)
 800f63a:	f7fe fe7c 	bl	800e336 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800f63e:	480c      	ldr	r0, [pc, #48]	; (800f670 <prvInitialiseTaskLists+0x70>)
 800f640:	f7fe fe79 	bl	800e336 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800f644:	480b      	ldr	r0, [pc, #44]	; (800f674 <prvInitialiseTaskLists+0x74>)
 800f646:	f7fe fe76 	bl	800e336 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800f64a:	4b0b      	ldr	r3, [pc, #44]	; (800f678 <prvInitialiseTaskLists+0x78>)
 800f64c:	4a05      	ldr	r2, [pc, #20]	; (800f664 <prvInitialiseTaskLists+0x64>)
 800f64e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800f650:	4b0a      	ldr	r3, [pc, #40]	; (800f67c <prvInitialiseTaskLists+0x7c>)
 800f652:	4a05      	ldr	r2, [pc, #20]	; (800f668 <prvInitialiseTaskLists+0x68>)
 800f654:	601a      	str	r2, [r3, #0]
}
 800f656:	bf00      	nop
 800f658:	3708      	adds	r7, #8
 800f65a:	46bd      	mov	sp, r7
 800f65c:	bd80      	pop	{r7, pc}
 800f65e:	bf00      	nop
 800f660:	2000092c 	.word	0x2000092c
 800f664:	200009b8 	.word	0x200009b8
 800f668:	200009cc 	.word	0x200009cc
 800f66c:	200009e8 	.word	0x200009e8
 800f670:	200009fc 	.word	0x200009fc
 800f674:	20000a14 	.word	0x20000a14
 800f678:	200009e0 	.word	0x200009e0
 800f67c:	200009e4 	.word	0x200009e4

0800f680 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800f680:	b580      	push	{r7, lr}
 800f682:	b082      	sub	sp, #8
 800f684:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800f686:	e019      	b.n	800f6bc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800f688:	f000 fbfc 	bl	800fe84 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f68c:	4b10      	ldr	r3, [pc, #64]	; (800f6d0 <prvCheckTasksWaitingTermination+0x50>)
 800f68e:	68db      	ldr	r3, [r3, #12]
 800f690:	68db      	ldr	r3, [r3, #12]
 800f692:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f694:	687b      	ldr	r3, [r7, #4]
 800f696:	3304      	adds	r3, #4
 800f698:	4618      	mov	r0, r3
 800f69a:	f7fe fed6 	bl	800e44a <uxListRemove>
				--uxCurrentNumberOfTasks;
 800f69e:	4b0d      	ldr	r3, [pc, #52]	; (800f6d4 <prvCheckTasksWaitingTermination+0x54>)
 800f6a0:	681b      	ldr	r3, [r3, #0]
 800f6a2:	3b01      	subs	r3, #1
 800f6a4:	4a0b      	ldr	r2, [pc, #44]	; (800f6d4 <prvCheckTasksWaitingTermination+0x54>)
 800f6a6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800f6a8:	4b0b      	ldr	r3, [pc, #44]	; (800f6d8 <prvCheckTasksWaitingTermination+0x58>)
 800f6aa:	681b      	ldr	r3, [r3, #0]
 800f6ac:	3b01      	subs	r3, #1
 800f6ae:	4a0a      	ldr	r2, [pc, #40]	; (800f6d8 <prvCheckTasksWaitingTermination+0x58>)
 800f6b0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800f6b2:	f000 fc17 	bl	800fee4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800f6b6:	6878      	ldr	r0, [r7, #4]
 800f6b8:	f000 f810 	bl	800f6dc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800f6bc:	4b06      	ldr	r3, [pc, #24]	; (800f6d8 <prvCheckTasksWaitingTermination+0x58>)
 800f6be:	681b      	ldr	r3, [r3, #0]
 800f6c0:	2b00      	cmp	r3, #0
 800f6c2:	d1e1      	bne.n	800f688 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800f6c4:	bf00      	nop
 800f6c6:	bf00      	nop
 800f6c8:	3708      	adds	r7, #8
 800f6ca:	46bd      	mov	sp, r7
 800f6cc:	bd80      	pop	{r7, pc}
 800f6ce:	bf00      	nop
 800f6d0:	200009fc 	.word	0x200009fc
 800f6d4:	20000a28 	.word	0x20000a28
 800f6d8:	20000a10 	.word	0x20000a10

0800f6dc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800f6dc:	b580      	push	{r7, lr}
 800f6de:	b082      	sub	sp, #8
 800f6e0:	af00      	add	r7, sp, #0
 800f6e2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800f6e4:	687b      	ldr	r3, [r7, #4]
 800f6e6:	334c      	adds	r3, #76	; 0x4c
 800f6e8:	4618      	mov	r0, r3
 800f6ea:	f002 f9f5 	bl	8011ad8 <_reclaim_reent>

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 800f6ee:	687b      	ldr	r3, [r7, #4]
 800f6f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f6f2:	4618      	mov	r0, r3
 800f6f4:	f000 fd74 	bl	80101e0 <vPortFree>
			vPortFree( pxTCB );
 800f6f8:	6878      	ldr	r0, [r7, #4]
 800f6fa:	f000 fd71 	bl	80101e0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800f6fe:	bf00      	nop
 800f700:	3708      	adds	r7, #8
 800f702:	46bd      	mov	sp, r7
 800f704:	bd80      	pop	{r7, pc}
	...

0800f708 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800f708:	b480      	push	{r7}
 800f70a:	b083      	sub	sp, #12
 800f70c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f70e:	4b0c      	ldr	r3, [pc, #48]	; (800f740 <prvResetNextTaskUnblockTime+0x38>)
 800f710:	681b      	ldr	r3, [r3, #0]
 800f712:	681b      	ldr	r3, [r3, #0]
 800f714:	2b00      	cmp	r3, #0
 800f716:	d104      	bne.n	800f722 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800f718:	4b0a      	ldr	r3, [pc, #40]	; (800f744 <prvResetNextTaskUnblockTime+0x3c>)
 800f71a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f71e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800f720:	e008      	b.n	800f734 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f722:	4b07      	ldr	r3, [pc, #28]	; (800f740 <prvResetNextTaskUnblockTime+0x38>)
 800f724:	681b      	ldr	r3, [r3, #0]
 800f726:	68db      	ldr	r3, [r3, #12]
 800f728:	68db      	ldr	r3, [r3, #12]
 800f72a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800f72c:	687b      	ldr	r3, [r7, #4]
 800f72e:	685b      	ldr	r3, [r3, #4]
 800f730:	4a04      	ldr	r2, [pc, #16]	; (800f744 <prvResetNextTaskUnblockTime+0x3c>)
 800f732:	6013      	str	r3, [r2, #0]
}
 800f734:	bf00      	nop
 800f736:	370c      	adds	r7, #12
 800f738:	46bd      	mov	sp, r7
 800f73a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f73e:	4770      	bx	lr
 800f740:	200009e0 	.word	0x200009e0
 800f744:	20000a48 	.word	0x20000a48

0800f748 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800f748:	b480      	push	{r7}
 800f74a:	b083      	sub	sp, #12
 800f74c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800f74e:	4b0b      	ldr	r3, [pc, #44]	; (800f77c <xTaskGetSchedulerState+0x34>)
 800f750:	681b      	ldr	r3, [r3, #0]
 800f752:	2b00      	cmp	r3, #0
 800f754:	d102      	bne.n	800f75c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800f756:	2301      	movs	r3, #1
 800f758:	607b      	str	r3, [r7, #4]
 800f75a:	e008      	b.n	800f76e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f75c:	4b08      	ldr	r3, [pc, #32]	; (800f780 <xTaskGetSchedulerState+0x38>)
 800f75e:	681b      	ldr	r3, [r3, #0]
 800f760:	2b00      	cmp	r3, #0
 800f762:	d102      	bne.n	800f76a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800f764:	2302      	movs	r3, #2
 800f766:	607b      	str	r3, [r7, #4]
 800f768:	e001      	b.n	800f76e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800f76a:	2300      	movs	r3, #0
 800f76c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800f76e:	687b      	ldr	r3, [r7, #4]
	}
 800f770:	4618      	mov	r0, r3
 800f772:	370c      	adds	r7, #12
 800f774:	46bd      	mov	sp, r7
 800f776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f77a:	4770      	bx	lr
 800f77c:	20000a34 	.word	0x20000a34
 800f780:	20000a50 	.word	0x20000a50

0800f784 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800f784:	b580      	push	{r7, lr}
 800f786:	b084      	sub	sp, #16
 800f788:	af00      	add	r7, sp, #0
 800f78a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800f78c:	687b      	ldr	r3, [r7, #4]
 800f78e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800f790:	2300      	movs	r3, #0
 800f792:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800f794:	687b      	ldr	r3, [r7, #4]
 800f796:	2b00      	cmp	r3, #0
 800f798:	d05e      	beq.n	800f858 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800f79a:	68bb      	ldr	r3, [r7, #8]
 800f79c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f79e:	4b31      	ldr	r3, [pc, #196]	; (800f864 <xTaskPriorityInherit+0xe0>)
 800f7a0:	681b      	ldr	r3, [r3, #0]
 800f7a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f7a4:	429a      	cmp	r2, r3
 800f7a6:	d24e      	bcs.n	800f846 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800f7a8:	68bb      	ldr	r3, [r7, #8]
 800f7aa:	699b      	ldr	r3, [r3, #24]
 800f7ac:	2b00      	cmp	r3, #0
 800f7ae:	db06      	blt.n	800f7be <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f7b0:	4b2c      	ldr	r3, [pc, #176]	; (800f864 <xTaskPriorityInherit+0xe0>)
 800f7b2:	681b      	ldr	r3, [r3, #0]
 800f7b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f7b6:	f1c3 0207 	rsb	r2, r3, #7
 800f7ba:	68bb      	ldr	r3, [r7, #8]
 800f7bc:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800f7be:	68bb      	ldr	r3, [r7, #8]
 800f7c0:	6959      	ldr	r1, [r3, #20]
 800f7c2:	68bb      	ldr	r3, [r7, #8]
 800f7c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f7c6:	4613      	mov	r3, r2
 800f7c8:	009b      	lsls	r3, r3, #2
 800f7ca:	4413      	add	r3, r2
 800f7cc:	009b      	lsls	r3, r3, #2
 800f7ce:	4a26      	ldr	r2, [pc, #152]	; (800f868 <xTaskPriorityInherit+0xe4>)
 800f7d0:	4413      	add	r3, r2
 800f7d2:	4299      	cmp	r1, r3
 800f7d4:	d12f      	bne.n	800f836 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f7d6:	68bb      	ldr	r3, [r7, #8]
 800f7d8:	3304      	adds	r3, #4
 800f7da:	4618      	mov	r0, r3
 800f7dc:	f7fe fe35 	bl	800e44a <uxListRemove>
 800f7e0:	4603      	mov	r3, r0
 800f7e2:	2b00      	cmp	r3, #0
 800f7e4:	d10a      	bne.n	800f7fc <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800f7e6:	68bb      	ldr	r3, [r7, #8]
 800f7e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f7ea:	2201      	movs	r2, #1
 800f7ec:	fa02 f303 	lsl.w	r3, r2, r3
 800f7f0:	43da      	mvns	r2, r3
 800f7f2:	4b1e      	ldr	r3, [pc, #120]	; (800f86c <xTaskPriorityInherit+0xe8>)
 800f7f4:	681b      	ldr	r3, [r3, #0]
 800f7f6:	4013      	ands	r3, r2
 800f7f8:	4a1c      	ldr	r2, [pc, #112]	; (800f86c <xTaskPriorityInherit+0xe8>)
 800f7fa:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800f7fc:	4b19      	ldr	r3, [pc, #100]	; (800f864 <xTaskPriorityInherit+0xe0>)
 800f7fe:	681b      	ldr	r3, [r3, #0]
 800f800:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f802:	68bb      	ldr	r3, [r7, #8]
 800f804:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800f806:	68bb      	ldr	r3, [r7, #8]
 800f808:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f80a:	2201      	movs	r2, #1
 800f80c:	409a      	lsls	r2, r3
 800f80e:	4b17      	ldr	r3, [pc, #92]	; (800f86c <xTaskPriorityInherit+0xe8>)
 800f810:	681b      	ldr	r3, [r3, #0]
 800f812:	4313      	orrs	r3, r2
 800f814:	4a15      	ldr	r2, [pc, #84]	; (800f86c <xTaskPriorityInherit+0xe8>)
 800f816:	6013      	str	r3, [r2, #0]
 800f818:	68bb      	ldr	r3, [r7, #8]
 800f81a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f81c:	4613      	mov	r3, r2
 800f81e:	009b      	lsls	r3, r3, #2
 800f820:	4413      	add	r3, r2
 800f822:	009b      	lsls	r3, r3, #2
 800f824:	4a10      	ldr	r2, [pc, #64]	; (800f868 <xTaskPriorityInherit+0xe4>)
 800f826:	441a      	add	r2, r3
 800f828:	68bb      	ldr	r3, [r7, #8]
 800f82a:	3304      	adds	r3, #4
 800f82c:	4619      	mov	r1, r3
 800f82e:	4610      	mov	r0, r2
 800f830:	f7fe fdae 	bl	800e390 <vListInsertEnd>
 800f834:	e004      	b.n	800f840 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800f836:	4b0b      	ldr	r3, [pc, #44]	; (800f864 <xTaskPriorityInherit+0xe0>)
 800f838:	681b      	ldr	r3, [r3, #0]
 800f83a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f83c:	68bb      	ldr	r3, [r7, #8]
 800f83e:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800f840:	2301      	movs	r3, #1
 800f842:	60fb      	str	r3, [r7, #12]
 800f844:	e008      	b.n	800f858 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800f846:	68bb      	ldr	r3, [r7, #8]
 800f848:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f84a:	4b06      	ldr	r3, [pc, #24]	; (800f864 <xTaskPriorityInherit+0xe0>)
 800f84c:	681b      	ldr	r3, [r3, #0]
 800f84e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f850:	429a      	cmp	r2, r3
 800f852:	d201      	bcs.n	800f858 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800f854:	2301      	movs	r3, #1
 800f856:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800f858:	68fb      	ldr	r3, [r7, #12]
	}
 800f85a:	4618      	mov	r0, r3
 800f85c:	3710      	adds	r7, #16
 800f85e:	46bd      	mov	sp, r7
 800f860:	bd80      	pop	{r7, pc}
 800f862:	bf00      	nop
 800f864:	20000928 	.word	0x20000928
 800f868:	2000092c 	.word	0x2000092c
 800f86c:	20000a30 	.word	0x20000a30

0800f870 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800f870:	b580      	push	{r7, lr}
 800f872:	b086      	sub	sp, #24
 800f874:	af00      	add	r7, sp, #0
 800f876:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800f878:	687b      	ldr	r3, [r7, #4]
 800f87a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800f87c:	2300      	movs	r3, #0
 800f87e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800f880:	687b      	ldr	r3, [r7, #4]
 800f882:	2b00      	cmp	r3, #0
 800f884:	d06e      	beq.n	800f964 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800f886:	4b3a      	ldr	r3, [pc, #232]	; (800f970 <xTaskPriorityDisinherit+0x100>)
 800f888:	681b      	ldr	r3, [r3, #0]
 800f88a:	693a      	ldr	r2, [r7, #16]
 800f88c:	429a      	cmp	r2, r3
 800f88e:	d00a      	beq.n	800f8a6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800f890:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f894:	f383 8811 	msr	BASEPRI, r3
 800f898:	f3bf 8f6f 	isb	sy
 800f89c:	f3bf 8f4f 	dsb	sy
 800f8a0:	60fb      	str	r3, [r7, #12]
}
 800f8a2:	bf00      	nop
 800f8a4:	e7fe      	b.n	800f8a4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800f8a6:	693b      	ldr	r3, [r7, #16]
 800f8a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f8aa:	2b00      	cmp	r3, #0
 800f8ac:	d10a      	bne.n	800f8c4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800f8ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f8b2:	f383 8811 	msr	BASEPRI, r3
 800f8b6:	f3bf 8f6f 	isb	sy
 800f8ba:	f3bf 8f4f 	dsb	sy
 800f8be:	60bb      	str	r3, [r7, #8]
}
 800f8c0:	bf00      	nop
 800f8c2:	e7fe      	b.n	800f8c2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800f8c4:	693b      	ldr	r3, [r7, #16]
 800f8c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f8c8:	1e5a      	subs	r2, r3, #1
 800f8ca:	693b      	ldr	r3, [r7, #16]
 800f8cc:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800f8ce:	693b      	ldr	r3, [r7, #16]
 800f8d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f8d2:	693b      	ldr	r3, [r7, #16]
 800f8d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f8d6:	429a      	cmp	r2, r3
 800f8d8:	d044      	beq.n	800f964 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800f8da:	693b      	ldr	r3, [r7, #16]
 800f8dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f8de:	2b00      	cmp	r3, #0
 800f8e0:	d140      	bne.n	800f964 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f8e2:	693b      	ldr	r3, [r7, #16]
 800f8e4:	3304      	adds	r3, #4
 800f8e6:	4618      	mov	r0, r3
 800f8e8:	f7fe fdaf 	bl	800e44a <uxListRemove>
 800f8ec:	4603      	mov	r3, r0
 800f8ee:	2b00      	cmp	r3, #0
 800f8f0:	d115      	bne.n	800f91e <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800f8f2:	693b      	ldr	r3, [r7, #16]
 800f8f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f8f6:	491f      	ldr	r1, [pc, #124]	; (800f974 <xTaskPriorityDisinherit+0x104>)
 800f8f8:	4613      	mov	r3, r2
 800f8fa:	009b      	lsls	r3, r3, #2
 800f8fc:	4413      	add	r3, r2
 800f8fe:	009b      	lsls	r3, r3, #2
 800f900:	440b      	add	r3, r1
 800f902:	681b      	ldr	r3, [r3, #0]
 800f904:	2b00      	cmp	r3, #0
 800f906:	d10a      	bne.n	800f91e <xTaskPriorityDisinherit+0xae>
 800f908:	693b      	ldr	r3, [r7, #16]
 800f90a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f90c:	2201      	movs	r2, #1
 800f90e:	fa02 f303 	lsl.w	r3, r2, r3
 800f912:	43da      	mvns	r2, r3
 800f914:	4b18      	ldr	r3, [pc, #96]	; (800f978 <xTaskPriorityDisinherit+0x108>)
 800f916:	681b      	ldr	r3, [r3, #0]
 800f918:	4013      	ands	r3, r2
 800f91a:	4a17      	ldr	r2, [pc, #92]	; (800f978 <xTaskPriorityDisinherit+0x108>)
 800f91c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800f91e:	693b      	ldr	r3, [r7, #16]
 800f920:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f922:	693b      	ldr	r3, [r7, #16]
 800f924:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f926:	693b      	ldr	r3, [r7, #16]
 800f928:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f92a:	f1c3 0207 	rsb	r2, r3, #7
 800f92e:	693b      	ldr	r3, [r7, #16]
 800f930:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800f932:	693b      	ldr	r3, [r7, #16]
 800f934:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f936:	2201      	movs	r2, #1
 800f938:	409a      	lsls	r2, r3
 800f93a:	4b0f      	ldr	r3, [pc, #60]	; (800f978 <xTaskPriorityDisinherit+0x108>)
 800f93c:	681b      	ldr	r3, [r3, #0]
 800f93e:	4313      	orrs	r3, r2
 800f940:	4a0d      	ldr	r2, [pc, #52]	; (800f978 <xTaskPriorityDisinherit+0x108>)
 800f942:	6013      	str	r3, [r2, #0]
 800f944:	693b      	ldr	r3, [r7, #16]
 800f946:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f948:	4613      	mov	r3, r2
 800f94a:	009b      	lsls	r3, r3, #2
 800f94c:	4413      	add	r3, r2
 800f94e:	009b      	lsls	r3, r3, #2
 800f950:	4a08      	ldr	r2, [pc, #32]	; (800f974 <xTaskPriorityDisinherit+0x104>)
 800f952:	441a      	add	r2, r3
 800f954:	693b      	ldr	r3, [r7, #16]
 800f956:	3304      	adds	r3, #4
 800f958:	4619      	mov	r1, r3
 800f95a:	4610      	mov	r0, r2
 800f95c:	f7fe fd18 	bl	800e390 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800f960:	2301      	movs	r3, #1
 800f962:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800f964:	697b      	ldr	r3, [r7, #20]
	}
 800f966:	4618      	mov	r0, r3
 800f968:	3718      	adds	r7, #24
 800f96a:	46bd      	mov	sp, r7
 800f96c:	bd80      	pop	{r7, pc}
 800f96e:	bf00      	nop
 800f970:	20000928 	.word	0x20000928
 800f974:	2000092c 	.word	0x2000092c
 800f978:	20000a30 	.word	0x20000a30

0800f97c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800f97c:	b580      	push	{r7, lr}
 800f97e:	b088      	sub	sp, #32
 800f980:	af00      	add	r7, sp, #0
 800f982:	6078      	str	r0, [r7, #4]
 800f984:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800f986:	687b      	ldr	r3, [r7, #4]
 800f988:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800f98a:	2301      	movs	r3, #1
 800f98c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800f98e:	687b      	ldr	r3, [r7, #4]
 800f990:	2b00      	cmp	r3, #0
 800f992:	d077      	beq.n	800fa84 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800f994:	69bb      	ldr	r3, [r7, #24]
 800f996:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f998:	2b00      	cmp	r3, #0
 800f99a:	d10a      	bne.n	800f9b2 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800f99c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f9a0:	f383 8811 	msr	BASEPRI, r3
 800f9a4:	f3bf 8f6f 	isb	sy
 800f9a8:	f3bf 8f4f 	dsb	sy
 800f9ac:	60fb      	str	r3, [r7, #12]
}
 800f9ae:	bf00      	nop
 800f9b0:	e7fe      	b.n	800f9b0 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800f9b2:	69bb      	ldr	r3, [r7, #24]
 800f9b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f9b6:	683a      	ldr	r2, [r7, #0]
 800f9b8:	429a      	cmp	r2, r3
 800f9ba:	d902      	bls.n	800f9c2 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800f9bc:	683b      	ldr	r3, [r7, #0]
 800f9be:	61fb      	str	r3, [r7, #28]
 800f9c0:	e002      	b.n	800f9c8 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800f9c2:	69bb      	ldr	r3, [r7, #24]
 800f9c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f9c6:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800f9c8:	69bb      	ldr	r3, [r7, #24]
 800f9ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f9cc:	69fa      	ldr	r2, [r7, #28]
 800f9ce:	429a      	cmp	r2, r3
 800f9d0:	d058      	beq.n	800fa84 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800f9d2:	69bb      	ldr	r3, [r7, #24]
 800f9d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f9d6:	697a      	ldr	r2, [r7, #20]
 800f9d8:	429a      	cmp	r2, r3
 800f9da:	d153      	bne.n	800fa84 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800f9dc:	4b2b      	ldr	r3, [pc, #172]	; (800fa8c <vTaskPriorityDisinheritAfterTimeout+0x110>)
 800f9de:	681b      	ldr	r3, [r3, #0]
 800f9e0:	69ba      	ldr	r2, [r7, #24]
 800f9e2:	429a      	cmp	r2, r3
 800f9e4:	d10a      	bne.n	800f9fc <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800f9e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f9ea:	f383 8811 	msr	BASEPRI, r3
 800f9ee:	f3bf 8f6f 	isb	sy
 800f9f2:	f3bf 8f4f 	dsb	sy
 800f9f6:	60bb      	str	r3, [r7, #8]
}
 800f9f8:	bf00      	nop
 800f9fa:	e7fe      	b.n	800f9fa <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800f9fc:	69bb      	ldr	r3, [r7, #24]
 800f9fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fa00:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800fa02:	69bb      	ldr	r3, [r7, #24]
 800fa04:	69fa      	ldr	r2, [r7, #28]
 800fa06:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800fa08:	69bb      	ldr	r3, [r7, #24]
 800fa0a:	699b      	ldr	r3, [r3, #24]
 800fa0c:	2b00      	cmp	r3, #0
 800fa0e:	db04      	blt.n	800fa1a <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fa10:	69fb      	ldr	r3, [r7, #28]
 800fa12:	f1c3 0207 	rsb	r2, r3, #7
 800fa16:	69bb      	ldr	r3, [r7, #24]
 800fa18:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800fa1a:	69bb      	ldr	r3, [r7, #24]
 800fa1c:	6959      	ldr	r1, [r3, #20]
 800fa1e:	693a      	ldr	r2, [r7, #16]
 800fa20:	4613      	mov	r3, r2
 800fa22:	009b      	lsls	r3, r3, #2
 800fa24:	4413      	add	r3, r2
 800fa26:	009b      	lsls	r3, r3, #2
 800fa28:	4a19      	ldr	r2, [pc, #100]	; (800fa90 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800fa2a:	4413      	add	r3, r2
 800fa2c:	4299      	cmp	r1, r3
 800fa2e:	d129      	bne.n	800fa84 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800fa30:	69bb      	ldr	r3, [r7, #24]
 800fa32:	3304      	adds	r3, #4
 800fa34:	4618      	mov	r0, r3
 800fa36:	f7fe fd08 	bl	800e44a <uxListRemove>
 800fa3a:	4603      	mov	r3, r0
 800fa3c:	2b00      	cmp	r3, #0
 800fa3e:	d10a      	bne.n	800fa56 <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800fa40:	69bb      	ldr	r3, [r7, #24]
 800fa42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fa44:	2201      	movs	r2, #1
 800fa46:	fa02 f303 	lsl.w	r3, r2, r3
 800fa4a:	43da      	mvns	r2, r3
 800fa4c:	4b11      	ldr	r3, [pc, #68]	; (800fa94 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800fa4e:	681b      	ldr	r3, [r3, #0]
 800fa50:	4013      	ands	r3, r2
 800fa52:	4a10      	ldr	r2, [pc, #64]	; (800fa94 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800fa54:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800fa56:	69bb      	ldr	r3, [r7, #24]
 800fa58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fa5a:	2201      	movs	r2, #1
 800fa5c:	409a      	lsls	r2, r3
 800fa5e:	4b0d      	ldr	r3, [pc, #52]	; (800fa94 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800fa60:	681b      	ldr	r3, [r3, #0]
 800fa62:	4313      	orrs	r3, r2
 800fa64:	4a0b      	ldr	r2, [pc, #44]	; (800fa94 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800fa66:	6013      	str	r3, [r2, #0]
 800fa68:	69bb      	ldr	r3, [r7, #24]
 800fa6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fa6c:	4613      	mov	r3, r2
 800fa6e:	009b      	lsls	r3, r3, #2
 800fa70:	4413      	add	r3, r2
 800fa72:	009b      	lsls	r3, r3, #2
 800fa74:	4a06      	ldr	r2, [pc, #24]	; (800fa90 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800fa76:	441a      	add	r2, r3
 800fa78:	69bb      	ldr	r3, [r7, #24]
 800fa7a:	3304      	adds	r3, #4
 800fa7c:	4619      	mov	r1, r3
 800fa7e:	4610      	mov	r0, r2
 800fa80:	f7fe fc86 	bl	800e390 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800fa84:	bf00      	nop
 800fa86:	3720      	adds	r7, #32
 800fa88:	46bd      	mov	sp, r7
 800fa8a:	bd80      	pop	{r7, pc}
 800fa8c:	20000928 	.word	0x20000928
 800fa90:	2000092c 	.word	0x2000092c
 800fa94:	20000a30 	.word	0x20000a30

0800fa98 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800fa98:	b480      	push	{r7}
 800fa9a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800fa9c:	4b07      	ldr	r3, [pc, #28]	; (800fabc <pvTaskIncrementMutexHeldCount+0x24>)
 800fa9e:	681b      	ldr	r3, [r3, #0]
 800faa0:	2b00      	cmp	r3, #0
 800faa2:	d004      	beq.n	800faae <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800faa4:	4b05      	ldr	r3, [pc, #20]	; (800fabc <pvTaskIncrementMutexHeldCount+0x24>)
 800faa6:	681b      	ldr	r3, [r3, #0]
 800faa8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800faaa:	3201      	adds	r2, #1
 800faac:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800faae:	4b03      	ldr	r3, [pc, #12]	; (800fabc <pvTaskIncrementMutexHeldCount+0x24>)
 800fab0:	681b      	ldr	r3, [r3, #0]
	}
 800fab2:	4618      	mov	r0, r3
 800fab4:	46bd      	mov	sp, r7
 800fab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faba:	4770      	bx	lr
 800fabc:	20000928 	.word	0x20000928

0800fac0 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 800fac0:	b580      	push	{r7, lr}
 800fac2:	b084      	sub	sp, #16
 800fac4:	af00      	add	r7, sp, #0
 800fac6:	6078      	str	r0, [r7, #4]
 800fac8:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 800faca:	f000 f9db 	bl	800fe84 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 800face:	4b20      	ldr	r3, [pc, #128]	; (800fb50 <ulTaskNotifyTake+0x90>)
 800fad0:	681b      	ldr	r3, [r3, #0]
 800fad2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800fad6:	2b00      	cmp	r3, #0
 800fad8:	d113      	bne.n	800fb02 <ulTaskNotifyTake+0x42>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800fada:	4b1d      	ldr	r3, [pc, #116]	; (800fb50 <ulTaskNotifyTake+0x90>)
 800fadc:	681b      	ldr	r3, [r3, #0]
 800fade:	2201      	movs	r2, #1
 800fae0:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c

				if( xTicksToWait > ( TickType_t ) 0 )
 800fae4:	683b      	ldr	r3, [r7, #0]
 800fae6:	2b00      	cmp	r3, #0
 800fae8:	d00b      	beq.n	800fb02 <ulTaskNotifyTake+0x42>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800faea:	2101      	movs	r1, #1
 800faec:	6838      	ldr	r0, [r7, #0]
 800faee:	f000 f833 	bl	800fb58 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800faf2:	4b18      	ldr	r3, [pc, #96]	; (800fb54 <ulTaskNotifyTake+0x94>)
 800faf4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800faf8:	601a      	str	r2, [r3, #0]
 800fafa:	f3bf 8f4f 	dsb	sy
 800fafe:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800fb02:	f000 f9ef 	bl	800fee4 <vPortExitCritical>

		taskENTER_CRITICAL();
 800fb06:	f000 f9bd 	bl	800fe84 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 800fb0a:	4b11      	ldr	r3, [pc, #68]	; (800fb50 <ulTaskNotifyTake+0x90>)
 800fb0c:	681b      	ldr	r3, [r3, #0]
 800fb0e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800fb12:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 800fb14:	68fb      	ldr	r3, [r7, #12]
 800fb16:	2b00      	cmp	r3, #0
 800fb18:	d00e      	beq.n	800fb38 <ulTaskNotifyTake+0x78>
			{
				if( xClearCountOnExit != pdFALSE )
 800fb1a:	687b      	ldr	r3, [r7, #4]
 800fb1c:	2b00      	cmp	r3, #0
 800fb1e:	d005      	beq.n	800fb2c <ulTaskNotifyTake+0x6c>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 800fb20:	4b0b      	ldr	r3, [pc, #44]	; (800fb50 <ulTaskNotifyTake+0x90>)
 800fb22:	681b      	ldr	r3, [r3, #0]
 800fb24:	2200      	movs	r2, #0
 800fb26:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 800fb2a:	e005      	b.n	800fb38 <ulTaskNotifyTake+0x78>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 800fb2c:	4b08      	ldr	r3, [pc, #32]	; (800fb50 <ulTaskNotifyTake+0x90>)
 800fb2e:	681b      	ldr	r3, [r3, #0]
 800fb30:	68fa      	ldr	r2, [r7, #12]
 800fb32:	3a01      	subs	r2, #1
 800fb34:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800fb38:	4b05      	ldr	r3, [pc, #20]	; (800fb50 <ulTaskNotifyTake+0x90>)
 800fb3a:	681b      	ldr	r3, [r3, #0]
 800fb3c:	2200      	movs	r2, #0
 800fb3e:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
		}
		taskEXIT_CRITICAL();
 800fb42:	f000 f9cf 	bl	800fee4 <vPortExitCritical>

		return ulReturn;
 800fb46:	68fb      	ldr	r3, [r7, #12]
	}
 800fb48:	4618      	mov	r0, r3
 800fb4a:	3710      	adds	r7, #16
 800fb4c:	46bd      	mov	sp, r7
 800fb4e:	bd80      	pop	{r7, pc}
 800fb50:	20000928 	.word	0x20000928
 800fb54:	e000ed04 	.word	0xe000ed04

0800fb58 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800fb58:	b580      	push	{r7, lr}
 800fb5a:	b084      	sub	sp, #16
 800fb5c:	af00      	add	r7, sp, #0
 800fb5e:	6078      	str	r0, [r7, #4]
 800fb60:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800fb62:	4b29      	ldr	r3, [pc, #164]	; (800fc08 <prvAddCurrentTaskToDelayedList+0xb0>)
 800fb64:	681b      	ldr	r3, [r3, #0]
 800fb66:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800fb68:	4b28      	ldr	r3, [pc, #160]	; (800fc0c <prvAddCurrentTaskToDelayedList+0xb4>)
 800fb6a:	681b      	ldr	r3, [r3, #0]
 800fb6c:	3304      	adds	r3, #4
 800fb6e:	4618      	mov	r0, r3
 800fb70:	f7fe fc6b 	bl	800e44a <uxListRemove>
 800fb74:	4603      	mov	r3, r0
 800fb76:	2b00      	cmp	r3, #0
 800fb78:	d10b      	bne.n	800fb92 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800fb7a:	4b24      	ldr	r3, [pc, #144]	; (800fc0c <prvAddCurrentTaskToDelayedList+0xb4>)
 800fb7c:	681b      	ldr	r3, [r3, #0]
 800fb7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fb80:	2201      	movs	r2, #1
 800fb82:	fa02 f303 	lsl.w	r3, r2, r3
 800fb86:	43da      	mvns	r2, r3
 800fb88:	4b21      	ldr	r3, [pc, #132]	; (800fc10 <prvAddCurrentTaskToDelayedList+0xb8>)
 800fb8a:	681b      	ldr	r3, [r3, #0]
 800fb8c:	4013      	ands	r3, r2
 800fb8e:	4a20      	ldr	r2, [pc, #128]	; (800fc10 <prvAddCurrentTaskToDelayedList+0xb8>)
 800fb90:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800fb92:	687b      	ldr	r3, [r7, #4]
 800fb94:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800fb98:	d10a      	bne.n	800fbb0 <prvAddCurrentTaskToDelayedList+0x58>
 800fb9a:	683b      	ldr	r3, [r7, #0]
 800fb9c:	2b00      	cmp	r3, #0
 800fb9e:	d007      	beq.n	800fbb0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800fba0:	4b1a      	ldr	r3, [pc, #104]	; (800fc0c <prvAddCurrentTaskToDelayedList+0xb4>)
 800fba2:	681b      	ldr	r3, [r3, #0]
 800fba4:	3304      	adds	r3, #4
 800fba6:	4619      	mov	r1, r3
 800fba8:	481a      	ldr	r0, [pc, #104]	; (800fc14 <prvAddCurrentTaskToDelayedList+0xbc>)
 800fbaa:	f7fe fbf1 	bl	800e390 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800fbae:	e026      	b.n	800fbfe <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800fbb0:	68fa      	ldr	r2, [r7, #12]
 800fbb2:	687b      	ldr	r3, [r7, #4]
 800fbb4:	4413      	add	r3, r2
 800fbb6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800fbb8:	4b14      	ldr	r3, [pc, #80]	; (800fc0c <prvAddCurrentTaskToDelayedList+0xb4>)
 800fbba:	681b      	ldr	r3, [r3, #0]
 800fbbc:	68ba      	ldr	r2, [r7, #8]
 800fbbe:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800fbc0:	68ba      	ldr	r2, [r7, #8]
 800fbc2:	68fb      	ldr	r3, [r7, #12]
 800fbc4:	429a      	cmp	r2, r3
 800fbc6:	d209      	bcs.n	800fbdc <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800fbc8:	4b13      	ldr	r3, [pc, #76]	; (800fc18 <prvAddCurrentTaskToDelayedList+0xc0>)
 800fbca:	681a      	ldr	r2, [r3, #0]
 800fbcc:	4b0f      	ldr	r3, [pc, #60]	; (800fc0c <prvAddCurrentTaskToDelayedList+0xb4>)
 800fbce:	681b      	ldr	r3, [r3, #0]
 800fbd0:	3304      	adds	r3, #4
 800fbd2:	4619      	mov	r1, r3
 800fbd4:	4610      	mov	r0, r2
 800fbd6:	f7fe fbff 	bl	800e3d8 <vListInsert>
}
 800fbda:	e010      	b.n	800fbfe <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800fbdc:	4b0f      	ldr	r3, [pc, #60]	; (800fc1c <prvAddCurrentTaskToDelayedList+0xc4>)
 800fbde:	681a      	ldr	r2, [r3, #0]
 800fbe0:	4b0a      	ldr	r3, [pc, #40]	; (800fc0c <prvAddCurrentTaskToDelayedList+0xb4>)
 800fbe2:	681b      	ldr	r3, [r3, #0]
 800fbe4:	3304      	adds	r3, #4
 800fbe6:	4619      	mov	r1, r3
 800fbe8:	4610      	mov	r0, r2
 800fbea:	f7fe fbf5 	bl	800e3d8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800fbee:	4b0c      	ldr	r3, [pc, #48]	; (800fc20 <prvAddCurrentTaskToDelayedList+0xc8>)
 800fbf0:	681b      	ldr	r3, [r3, #0]
 800fbf2:	68ba      	ldr	r2, [r7, #8]
 800fbf4:	429a      	cmp	r2, r3
 800fbf6:	d202      	bcs.n	800fbfe <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800fbf8:	4a09      	ldr	r2, [pc, #36]	; (800fc20 <prvAddCurrentTaskToDelayedList+0xc8>)
 800fbfa:	68bb      	ldr	r3, [r7, #8]
 800fbfc:	6013      	str	r3, [r2, #0]
}
 800fbfe:	bf00      	nop
 800fc00:	3710      	adds	r7, #16
 800fc02:	46bd      	mov	sp, r7
 800fc04:	bd80      	pop	{r7, pc}
 800fc06:	bf00      	nop
 800fc08:	20000a2c 	.word	0x20000a2c
 800fc0c:	20000928 	.word	0x20000928
 800fc10:	20000a30 	.word	0x20000a30
 800fc14:	20000a14 	.word	0x20000a14
 800fc18:	200009e4 	.word	0x200009e4
 800fc1c:	200009e0 	.word	0x200009e0
 800fc20:	20000a48 	.word	0x20000a48

0800fc24 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800fc24:	b480      	push	{r7}
 800fc26:	b085      	sub	sp, #20
 800fc28:	af00      	add	r7, sp, #0
 800fc2a:	60f8      	str	r0, [r7, #12]
 800fc2c:	60b9      	str	r1, [r7, #8]
 800fc2e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800fc30:	68fb      	ldr	r3, [r7, #12]
 800fc32:	3b04      	subs	r3, #4
 800fc34:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800fc36:	68fb      	ldr	r3, [r7, #12]
 800fc38:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800fc3c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800fc3e:	68fb      	ldr	r3, [r7, #12]
 800fc40:	3b04      	subs	r3, #4
 800fc42:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800fc44:	68bb      	ldr	r3, [r7, #8]
 800fc46:	f023 0201 	bic.w	r2, r3, #1
 800fc4a:	68fb      	ldr	r3, [r7, #12]
 800fc4c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800fc4e:	68fb      	ldr	r3, [r7, #12]
 800fc50:	3b04      	subs	r3, #4
 800fc52:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800fc54:	4a0c      	ldr	r2, [pc, #48]	; (800fc88 <pxPortInitialiseStack+0x64>)
 800fc56:	68fb      	ldr	r3, [r7, #12]
 800fc58:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800fc5a:	68fb      	ldr	r3, [r7, #12]
 800fc5c:	3b14      	subs	r3, #20
 800fc5e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800fc60:	687a      	ldr	r2, [r7, #4]
 800fc62:	68fb      	ldr	r3, [r7, #12]
 800fc64:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800fc66:	68fb      	ldr	r3, [r7, #12]
 800fc68:	3b04      	subs	r3, #4
 800fc6a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800fc6c:	68fb      	ldr	r3, [r7, #12]
 800fc6e:	f06f 0202 	mvn.w	r2, #2
 800fc72:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800fc74:	68fb      	ldr	r3, [r7, #12]
 800fc76:	3b20      	subs	r3, #32
 800fc78:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800fc7a:	68fb      	ldr	r3, [r7, #12]
}
 800fc7c:	4618      	mov	r0, r3
 800fc7e:	3714      	adds	r7, #20
 800fc80:	46bd      	mov	sp, r7
 800fc82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc86:	4770      	bx	lr
 800fc88:	0800fc8d 	.word	0x0800fc8d

0800fc8c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800fc8c:	b480      	push	{r7}
 800fc8e:	b085      	sub	sp, #20
 800fc90:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800fc92:	2300      	movs	r3, #0
 800fc94:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800fc96:	4b12      	ldr	r3, [pc, #72]	; (800fce0 <prvTaskExitError+0x54>)
 800fc98:	681b      	ldr	r3, [r3, #0]
 800fc9a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800fc9e:	d00a      	beq.n	800fcb6 <prvTaskExitError+0x2a>
	__asm volatile
 800fca0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fca4:	f383 8811 	msr	BASEPRI, r3
 800fca8:	f3bf 8f6f 	isb	sy
 800fcac:	f3bf 8f4f 	dsb	sy
 800fcb0:	60fb      	str	r3, [r7, #12]
}
 800fcb2:	bf00      	nop
 800fcb4:	e7fe      	b.n	800fcb4 <prvTaskExitError+0x28>
	__asm volatile
 800fcb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fcba:	f383 8811 	msr	BASEPRI, r3
 800fcbe:	f3bf 8f6f 	isb	sy
 800fcc2:	f3bf 8f4f 	dsb	sy
 800fcc6:	60bb      	str	r3, [r7, #8]
}
 800fcc8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800fcca:	bf00      	nop
 800fccc:	687b      	ldr	r3, [r7, #4]
 800fcce:	2b00      	cmp	r3, #0
 800fcd0:	d0fc      	beq.n	800fccc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800fcd2:	bf00      	nop
 800fcd4:	bf00      	nop
 800fcd6:	3714      	adds	r7, #20
 800fcd8:	46bd      	mov	sp, r7
 800fcda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcde:	4770      	bx	lr
 800fce0:	2000011c 	.word	0x2000011c
	...

0800fcf0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800fcf0:	4b07      	ldr	r3, [pc, #28]	; (800fd10 <pxCurrentTCBConst2>)
 800fcf2:	6819      	ldr	r1, [r3, #0]
 800fcf4:	6808      	ldr	r0, [r1, #0]
 800fcf6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fcfa:	f380 8809 	msr	PSP, r0
 800fcfe:	f3bf 8f6f 	isb	sy
 800fd02:	f04f 0000 	mov.w	r0, #0
 800fd06:	f380 8811 	msr	BASEPRI, r0
 800fd0a:	4770      	bx	lr
 800fd0c:	f3af 8000 	nop.w

0800fd10 <pxCurrentTCBConst2>:
 800fd10:	20000928 	.word	0x20000928
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800fd14:	bf00      	nop
 800fd16:	bf00      	nop

0800fd18 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800fd18:	4808      	ldr	r0, [pc, #32]	; (800fd3c <prvPortStartFirstTask+0x24>)
 800fd1a:	6800      	ldr	r0, [r0, #0]
 800fd1c:	6800      	ldr	r0, [r0, #0]
 800fd1e:	f380 8808 	msr	MSP, r0
 800fd22:	f04f 0000 	mov.w	r0, #0
 800fd26:	f380 8814 	msr	CONTROL, r0
 800fd2a:	b662      	cpsie	i
 800fd2c:	b661      	cpsie	f
 800fd2e:	f3bf 8f4f 	dsb	sy
 800fd32:	f3bf 8f6f 	isb	sy
 800fd36:	df00      	svc	0
 800fd38:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800fd3a:	bf00      	nop
 800fd3c:	e000ed08 	.word	0xe000ed08

0800fd40 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800fd40:	b580      	push	{r7, lr}
 800fd42:	b086      	sub	sp, #24
 800fd44:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800fd46:	4b46      	ldr	r3, [pc, #280]	; (800fe60 <xPortStartScheduler+0x120>)
 800fd48:	681b      	ldr	r3, [r3, #0]
 800fd4a:	4a46      	ldr	r2, [pc, #280]	; (800fe64 <xPortStartScheduler+0x124>)
 800fd4c:	4293      	cmp	r3, r2
 800fd4e:	d10a      	bne.n	800fd66 <xPortStartScheduler+0x26>
	__asm volatile
 800fd50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd54:	f383 8811 	msr	BASEPRI, r3
 800fd58:	f3bf 8f6f 	isb	sy
 800fd5c:	f3bf 8f4f 	dsb	sy
 800fd60:	613b      	str	r3, [r7, #16]
}
 800fd62:	bf00      	nop
 800fd64:	e7fe      	b.n	800fd64 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800fd66:	4b3e      	ldr	r3, [pc, #248]	; (800fe60 <xPortStartScheduler+0x120>)
 800fd68:	681b      	ldr	r3, [r3, #0]
 800fd6a:	4a3f      	ldr	r2, [pc, #252]	; (800fe68 <xPortStartScheduler+0x128>)
 800fd6c:	4293      	cmp	r3, r2
 800fd6e:	d10a      	bne.n	800fd86 <xPortStartScheduler+0x46>
	__asm volatile
 800fd70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd74:	f383 8811 	msr	BASEPRI, r3
 800fd78:	f3bf 8f6f 	isb	sy
 800fd7c:	f3bf 8f4f 	dsb	sy
 800fd80:	60fb      	str	r3, [r7, #12]
}
 800fd82:	bf00      	nop
 800fd84:	e7fe      	b.n	800fd84 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800fd86:	4b39      	ldr	r3, [pc, #228]	; (800fe6c <xPortStartScheduler+0x12c>)
 800fd88:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800fd8a:	697b      	ldr	r3, [r7, #20]
 800fd8c:	781b      	ldrb	r3, [r3, #0]
 800fd8e:	b2db      	uxtb	r3, r3
 800fd90:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800fd92:	697b      	ldr	r3, [r7, #20]
 800fd94:	22ff      	movs	r2, #255	; 0xff
 800fd96:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800fd98:	697b      	ldr	r3, [r7, #20]
 800fd9a:	781b      	ldrb	r3, [r3, #0]
 800fd9c:	b2db      	uxtb	r3, r3
 800fd9e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800fda0:	78fb      	ldrb	r3, [r7, #3]
 800fda2:	b2db      	uxtb	r3, r3
 800fda4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800fda8:	b2da      	uxtb	r2, r3
 800fdaa:	4b31      	ldr	r3, [pc, #196]	; (800fe70 <xPortStartScheduler+0x130>)
 800fdac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800fdae:	4b31      	ldr	r3, [pc, #196]	; (800fe74 <xPortStartScheduler+0x134>)
 800fdb0:	2207      	movs	r2, #7
 800fdb2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800fdb4:	e009      	b.n	800fdca <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800fdb6:	4b2f      	ldr	r3, [pc, #188]	; (800fe74 <xPortStartScheduler+0x134>)
 800fdb8:	681b      	ldr	r3, [r3, #0]
 800fdba:	3b01      	subs	r3, #1
 800fdbc:	4a2d      	ldr	r2, [pc, #180]	; (800fe74 <xPortStartScheduler+0x134>)
 800fdbe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800fdc0:	78fb      	ldrb	r3, [r7, #3]
 800fdc2:	b2db      	uxtb	r3, r3
 800fdc4:	005b      	lsls	r3, r3, #1
 800fdc6:	b2db      	uxtb	r3, r3
 800fdc8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800fdca:	78fb      	ldrb	r3, [r7, #3]
 800fdcc:	b2db      	uxtb	r3, r3
 800fdce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fdd2:	2b80      	cmp	r3, #128	; 0x80
 800fdd4:	d0ef      	beq.n	800fdb6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800fdd6:	4b27      	ldr	r3, [pc, #156]	; (800fe74 <xPortStartScheduler+0x134>)
 800fdd8:	681b      	ldr	r3, [r3, #0]
 800fdda:	f1c3 0307 	rsb	r3, r3, #7
 800fdde:	2b04      	cmp	r3, #4
 800fde0:	d00a      	beq.n	800fdf8 <xPortStartScheduler+0xb8>
	__asm volatile
 800fde2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fde6:	f383 8811 	msr	BASEPRI, r3
 800fdea:	f3bf 8f6f 	isb	sy
 800fdee:	f3bf 8f4f 	dsb	sy
 800fdf2:	60bb      	str	r3, [r7, #8]
}
 800fdf4:	bf00      	nop
 800fdf6:	e7fe      	b.n	800fdf6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800fdf8:	4b1e      	ldr	r3, [pc, #120]	; (800fe74 <xPortStartScheduler+0x134>)
 800fdfa:	681b      	ldr	r3, [r3, #0]
 800fdfc:	021b      	lsls	r3, r3, #8
 800fdfe:	4a1d      	ldr	r2, [pc, #116]	; (800fe74 <xPortStartScheduler+0x134>)
 800fe00:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800fe02:	4b1c      	ldr	r3, [pc, #112]	; (800fe74 <xPortStartScheduler+0x134>)
 800fe04:	681b      	ldr	r3, [r3, #0]
 800fe06:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800fe0a:	4a1a      	ldr	r2, [pc, #104]	; (800fe74 <xPortStartScheduler+0x134>)
 800fe0c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800fe0e:	687b      	ldr	r3, [r7, #4]
 800fe10:	b2da      	uxtb	r2, r3
 800fe12:	697b      	ldr	r3, [r7, #20]
 800fe14:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800fe16:	4b18      	ldr	r3, [pc, #96]	; (800fe78 <xPortStartScheduler+0x138>)
 800fe18:	681b      	ldr	r3, [r3, #0]
 800fe1a:	4a17      	ldr	r2, [pc, #92]	; (800fe78 <xPortStartScheduler+0x138>)
 800fe1c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800fe20:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800fe22:	4b15      	ldr	r3, [pc, #84]	; (800fe78 <xPortStartScheduler+0x138>)
 800fe24:	681b      	ldr	r3, [r3, #0]
 800fe26:	4a14      	ldr	r2, [pc, #80]	; (800fe78 <xPortStartScheduler+0x138>)
 800fe28:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800fe2c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800fe2e:	f000 f8dd 	bl	800ffec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800fe32:	4b12      	ldr	r3, [pc, #72]	; (800fe7c <xPortStartScheduler+0x13c>)
 800fe34:	2200      	movs	r2, #0
 800fe36:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800fe38:	f000 f8fc 	bl	8010034 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800fe3c:	4b10      	ldr	r3, [pc, #64]	; (800fe80 <xPortStartScheduler+0x140>)
 800fe3e:	681b      	ldr	r3, [r3, #0]
 800fe40:	4a0f      	ldr	r2, [pc, #60]	; (800fe80 <xPortStartScheduler+0x140>)
 800fe42:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800fe46:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800fe48:	f7ff ff66 	bl	800fd18 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800fe4c:	f7ff fa54 	bl	800f2f8 <vTaskSwitchContext>
	prvTaskExitError();
 800fe50:	f7ff ff1c 	bl	800fc8c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800fe54:	2300      	movs	r3, #0
}
 800fe56:	4618      	mov	r0, r3
 800fe58:	3718      	adds	r7, #24
 800fe5a:	46bd      	mov	sp, r7
 800fe5c:	bd80      	pop	{r7, pc}
 800fe5e:	bf00      	nop
 800fe60:	e000ed00 	.word	0xe000ed00
 800fe64:	410fc271 	.word	0x410fc271
 800fe68:	410fc270 	.word	0x410fc270
 800fe6c:	e000e400 	.word	0xe000e400
 800fe70:	20000a54 	.word	0x20000a54
 800fe74:	20000a58 	.word	0x20000a58
 800fe78:	e000ed20 	.word	0xe000ed20
 800fe7c:	2000011c 	.word	0x2000011c
 800fe80:	e000ef34 	.word	0xe000ef34

0800fe84 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800fe84:	b480      	push	{r7}
 800fe86:	b083      	sub	sp, #12
 800fe88:	af00      	add	r7, sp, #0
	__asm volatile
 800fe8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe8e:	f383 8811 	msr	BASEPRI, r3
 800fe92:	f3bf 8f6f 	isb	sy
 800fe96:	f3bf 8f4f 	dsb	sy
 800fe9a:	607b      	str	r3, [r7, #4]
}
 800fe9c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800fe9e:	4b0f      	ldr	r3, [pc, #60]	; (800fedc <vPortEnterCritical+0x58>)
 800fea0:	681b      	ldr	r3, [r3, #0]
 800fea2:	3301      	adds	r3, #1
 800fea4:	4a0d      	ldr	r2, [pc, #52]	; (800fedc <vPortEnterCritical+0x58>)
 800fea6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800fea8:	4b0c      	ldr	r3, [pc, #48]	; (800fedc <vPortEnterCritical+0x58>)
 800feaa:	681b      	ldr	r3, [r3, #0]
 800feac:	2b01      	cmp	r3, #1
 800feae:	d10f      	bne.n	800fed0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800feb0:	4b0b      	ldr	r3, [pc, #44]	; (800fee0 <vPortEnterCritical+0x5c>)
 800feb2:	681b      	ldr	r3, [r3, #0]
 800feb4:	b2db      	uxtb	r3, r3
 800feb6:	2b00      	cmp	r3, #0
 800feb8:	d00a      	beq.n	800fed0 <vPortEnterCritical+0x4c>
	__asm volatile
 800feba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800febe:	f383 8811 	msr	BASEPRI, r3
 800fec2:	f3bf 8f6f 	isb	sy
 800fec6:	f3bf 8f4f 	dsb	sy
 800feca:	603b      	str	r3, [r7, #0]
}
 800fecc:	bf00      	nop
 800fece:	e7fe      	b.n	800fece <vPortEnterCritical+0x4a>
	}
}
 800fed0:	bf00      	nop
 800fed2:	370c      	adds	r7, #12
 800fed4:	46bd      	mov	sp, r7
 800fed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800feda:	4770      	bx	lr
 800fedc:	2000011c 	.word	0x2000011c
 800fee0:	e000ed04 	.word	0xe000ed04

0800fee4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800fee4:	b480      	push	{r7}
 800fee6:	b083      	sub	sp, #12
 800fee8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800feea:	4b12      	ldr	r3, [pc, #72]	; (800ff34 <vPortExitCritical+0x50>)
 800feec:	681b      	ldr	r3, [r3, #0]
 800feee:	2b00      	cmp	r3, #0
 800fef0:	d10a      	bne.n	800ff08 <vPortExitCritical+0x24>
	__asm volatile
 800fef2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fef6:	f383 8811 	msr	BASEPRI, r3
 800fefa:	f3bf 8f6f 	isb	sy
 800fefe:	f3bf 8f4f 	dsb	sy
 800ff02:	607b      	str	r3, [r7, #4]
}
 800ff04:	bf00      	nop
 800ff06:	e7fe      	b.n	800ff06 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800ff08:	4b0a      	ldr	r3, [pc, #40]	; (800ff34 <vPortExitCritical+0x50>)
 800ff0a:	681b      	ldr	r3, [r3, #0]
 800ff0c:	3b01      	subs	r3, #1
 800ff0e:	4a09      	ldr	r2, [pc, #36]	; (800ff34 <vPortExitCritical+0x50>)
 800ff10:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800ff12:	4b08      	ldr	r3, [pc, #32]	; (800ff34 <vPortExitCritical+0x50>)
 800ff14:	681b      	ldr	r3, [r3, #0]
 800ff16:	2b00      	cmp	r3, #0
 800ff18:	d105      	bne.n	800ff26 <vPortExitCritical+0x42>
 800ff1a:	2300      	movs	r3, #0
 800ff1c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800ff1e:	683b      	ldr	r3, [r7, #0]
 800ff20:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800ff24:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800ff26:	bf00      	nop
 800ff28:	370c      	adds	r7, #12
 800ff2a:	46bd      	mov	sp, r7
 800ff2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff30:	4770      	bx	lr
 800ff32:	bf00      	nop
 800ff34:	2000011c 	.word	0x2000011c
	...

0800ff40 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800ff40:	f3ef 8009 	mrs	r0, PSP
 800ff44:	f3bf 8f6f 	isb	sy
 800ff48:	4b15      	ldr	r3, [pc, #84]	; (800ffa0 <pxCurrentTCBConst>)
 800ff4a:	681a      	ldr	r2, [r3, #0]
 800ff4c:	f01e 0f10 	tst.w	lr, #16
 800ff50:	bf08      	it	eq
 800ff52:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800ff56:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ff5a:	6010      	str	r0, [r2, #0]
 800ff5c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800ff60:	f04f 0050 	mov.w	r0, #80	; 0x50
 800ff64:	f380 8811 	msr	BASEPRI, r0
 800ff68:	f3bf 8f4f 	dsb	sy
 800ff6c:	f3bf 8f6f 	isb	sy
 800ff70:	f7ff f9c2 	bl	800f2f8 <vTaskSwitchContext>
 800ff74:	f04f 0000 	mov.w	r0, #0
 800ff78:	f380 8811 	msr	BASEPRI, r0
 800ff7c:	bc09      	pop	{r0, r3}
 800ff7e:	6819      	ldr	r1, [r3, #0]
 800ff80:	6808      	ldr	r0, [r1, #0]
 800ff82:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ff86:	f01e 0f10 	tst.w	lr, #16
 800ff8a:	bf08      	it	eq
 800ff8c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800ff90:	f380 8809 	msr	PSP, r0
 800ff94:	f3bf 8f6f 	isb	sy
 800ff98:	4770      	bx	lr
 800ff9a:	bf00      	nop
 800ff9c:	f3af 8000 	nop.w

0800ffa0 <pxCurrentTCBConst>:
 800ffa0:	20000928 	.word	0x20000928
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800ffa4:	bf00      	nop
 800ffa6:	bf00      	nop

0800ffa8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800ffa8:	b580      	push	{r7, lr}
 800ffaa:	b082      	sub	sp, #8
 800ffac:	af00      	add	r7, sp, #0
	__asm volatile
 800ffae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ffb2:	f383 8811 	msr	BASEPRI, r3
 800ffb6:	f3bf 8f6f 	isb	sy
 800ffba:	f3bf 8f4f 	dsb	sy
 800ffbe:	607b      	str	r3, [r7, #4]
}
 800ffc0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800ffc2:	f7ff f8e1 	bl	800f188 <xTaskIncrementTick>
 800ffc6:	4603      	mov	r3, r0
 800ffc8:	2b00      	cmp	r3, #0
 800ffca:	d003      	beq.n	800ffd4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800ffcc:	4b06      	ldr	r3, [pc, #24]	; (800ffe8 <SysTick_Handler+0x40>)
 800ffce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ffd2:	601a      	str	r2, [r3, #0]
 800ffd4:	2300      	movs	r3, #0
 800ffd6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ffd8:	683b      	ldr	r3, [r7, #0]
 800ffda:	f383 8811 	msr	BASEPRI, r3
}
 800ffde:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800ffe0:	bf00      	nop
 800ffe2:	3708      	adds	r7, #8
 800ffe4:	46bd      	mov	sp, r7
 800ffe6:	bd80      	pop	{r7, pc}
 800ffe8:	e000ed04 	.word	0xe000ed04

0800ffec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800ffec:	b480      	push	{r7}
 800ffee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800fff0:	4b0b      	ldr	r3, [pc, #44]	; (8010020 <vPortSetupTimerInterrupt+0x34>)
 800fff2:	2200      	movs	r2, #0
 800fff4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800fff6:	4b0b      	ldr	r3, [pc, #44]	; (8010024 <vPortSetupTimerInterrupt+0x38>)
 800fff8:	2200      	movs	r2, #0
 800fffa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800fffc:	4b0a      	ldr	r3, [pc, #40]	; (8010028 <vPortSetupTimerInterrupt+0x3c>)
 800fffe:	681b      	ldr	r3, [r3, #0]
 8010000:	4a0a      	ldr	r2, [pc, #40]	; (801002c <vPortSetupTimerInterrupt+0x40>)
 8010002:	fba2 2303 	umull	r2, r3, r2, r3
 8010006:	099b      	lsrs	r3, r3, #6
 8010008:	4a09      	ldr	r2, [pc, #36]	; (8010030 <vPortSetupTimerInterrupt+0x44>)
 801000a:	3b01      	subs	r3, #1
 801000c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801000e:	4b04      	ldr	r3, [pc, #16]	; (8010020 <vPortSetupTimerInterrupt+0x34>)
 8010010:	2207      	movs	r2, #7
 8010012:	601a      	str	r2, [r3, #0]
}
 8010014:	bf00      	nop
 8010016:	46bd      	mov	sp, r7
 8010018:	f85d 7b04 	ldr.w	r7, [sp], #4
 801001c:	4770      	bx	lr
 801001e:	bf00      	nop
 8010020:	e000e010 	.word	0xe000e010
 8010024:	e000e018 	.word	0xe000e018
 8010028:	20000000 	.word	0x20000000
 801002c:	10624dd3 	.word	0x10624dd3
 8010030:	e000e014 	.word	0xe000e014

08010034 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8010034:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8010044 <vPortEnableVFP+0x10>
 8010038:	6801      	ldr	r1, [r0, #0]
 801003a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801003e:	6001      	str	r1, [r0, #0]
 8010040:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8010042:	bf00      	nop
 8010044:	e000ed88 	.word	0xe000ed88

08010048 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8010048:	b580      	push	{r7, lr}
 801004a:	b08a      	sub	sp, #40	; 0x28
 801004c:	af00      	add	r7, sp, #0
 801004e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8010050:	2300      	movs	r3, #0
 8010052:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8010054:	f7fe ffee 	bl	800f034 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8010058:	4b5b      	ldr	r3, [pc, #364]	; (80101c8 <pvPortMalloc+0x180>)
 801005a:	681b      	ldr	r3, [r3, #0]
 801005c:	2b00      	cmp	r3, #0
 801005e:	d101      	bne.n	8010064 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8010060:	f000 f920 	bl	80102a4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8010064:	4b59      	ldr	r3, [pc, #356]	; (80101cc <pvPortMalloc+0x184>)
 8010066:	681a      	ldr	r2, [r3, #0]
 8010068:	687b      	ldr	r3, [r7, #4]
 801006a:	4013      	ands	r3, r2
 801006c:	2b00      	cmp	r3, #0
 801006e:	f040 8093 	bne.w	8010198 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8010072:	687b      	ldr	r3, [r7, #4]
 8010074:	2b00      	cmp	r3, #0
 8010076:	d01d      	beq.n	80100b4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8010078:	2208      	movs	r2, #8
 801007a:	687b      	ldr	r3, [r7, #4]
 801007c:	4413      	add	r3, r2
 801007e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8010080:	687b      	ldr	r3, [r7, #4]
 8010082:	f003 0307 	and.w	r3, r3, #7
 8010086:	2b00      	cmp	r3, #0
 8010088:	d014      	beq.n	80100b4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801008a:	687b      	ldr	r3, [r7, #4]
 801008c:	f023 0307 	bic.w	r3, r3, #7
 8010090:	3308      	adds	r3, #8
 8010092:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010094:	687b      	ldr	r3, [r7, #4]
 8010096:	f003 0307 	and.w	r3, r3, #7
 801009a:	2b00      	cmp	r3, #0
 801009c:	d00a      	beq.n	80100b4 <pvPortMalloc+0x6c>
	__asm volatile
 801009e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80100a2:	f383 8811 	msr	BASEPRI, r3
 80100a6:	f3bf 8f6f 	isb	sy
 80100aa:	f3bf 8f4f 	dsb	sy
 80100ae:	617b      	str	r3, [r7, #20]
}
 80100b0:	bf00      	nop
 80100b2:	e7fe      	b.n	80100b2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80100b4:	687b      	ldr	r3, [r7, #4]
 80100b6:	2b00      	cmp	r3, #0
 80100b8:	d06e      	beq.n	8010198 <pvPortMalloc+0x150>
 80100ba:	4b45      	ldr	r3, [pc, #276]	; (80101d0 <pvPortMalloc+0x188>)
 80100bc:	681b      	ldr	r3, [r3, #0]
 80100be:	687a      	ldr	r2, [r7, #4]
 80100c0:	429a      	cmp	r2, r3
 80100c2:	d869      	bhi.n	8010198 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80100c4:	4b43      	ldr	r3, [pc, #268]	; (80101d4 <pvPortMalloc+0x18c>)
 80100c6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80100c8:	4b42      	ldr	r3, [pc, #264]	; (80101d4 <pvPortMalloc+0x18c>)
 80100ca:	681b      	ldr	r3, [r3, #0]
 80100cc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80100ce:	e004      	b.n	80100da <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80100d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80100d2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80100d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80100d6:	681b      	ldr	r3, [r3, #0]
 80100d8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80100da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80100dc:	685b      	ldr	r3, [r3, #4]
 80100de:	687a      	ldr	r2, [r7, #4]
 80100e0:	429a      	cmp	r2, r3
 80100e2:	d903      	bls.n	80100ec <pvPortMalloc+0xa4>
 80100e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80100e6:	681b      	ldr	r3, [r3, #0]
 80100e8:	2b00      	cmp	r3, #0
 80100ea:	d1f1      	bne.n	80100d0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80100ec:	4b36      	ldr	r3, [pc, #216]	; (80101c8 <pvPortMalloc+0x180>)
 80100ee:	681b      	ldr	r3, [r3, #0]
 80100f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80100f2:	429a      	cmp	r2, r3
 80100f4:	d050      	beq.n	8010198 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80100f6:	6a3b      	ldr	r3, [r7, #32]
 80100f8:	681b      	ldr	r3, [r3, #0]
 80100fa:	2208      	movs	r2, #8
 80100fc:	4413      	add	r3, r2
 80100fe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8010100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010102:	681a      	ldr	r2, [r3, #0]
 8010104:	6a3b      	ldr	r3, [r7, #32]
 8010106:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8010108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801010a:	685a      	ldr	r2, [r3, #4]
 801010c:	687b      	ldr	r3, [r7, #4]
 801010e:	1ad2      	subs	r2, r2, r3
 8010110:	2308      	movs	r3, #8
 8010112:	005b      	lsls	r3, r3, #1
 8010114:	429a      	cmp	r2, r3
 8010116:	d91f      	bls.n	8010158 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8010118:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801011a:	687b      	ldr	r3, [r7, #4]
 801011c:	4413      	add	r3, r2
 801011e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010120:	69bb      	ldr	r3, [r7, #24]
 8010122:	f003 0307 	and.w	r3, r3, #7
 8010126:	2b00      	cmp	r3, #0
 8010128:	d00a      	beq.n	8010140 <pvPortMalloc+0xf8>
	__asm volatile
 801012a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801012e:	f383 8811 	msr	BASEPRI, r3
 8010132:	f3bf 8f6f 	isb	sy
 8010136:	f3bf 8f4f 	dsb	sy
 801013a:	613b      	str	r3, [r7, #16]
}
 801013c:	bf00      	nop
 801013e:	e7fe      	b.n	801013e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8010140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010142:	685a      	ldr	r2, [r3, #4]
 8010144:	687b      	ldr	r3, [r7, #4]
 8010146:	1ad2      	subs	r2, r2, r3
 8010148:	69bb      	ldr	r3, [r7, #24]
 801014a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 801014c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801014e:	687a      	ldr	r2, [r7, #4]
 8010150:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8010152:	69b8      	ldr	r0, [r7, #24]
 8010154:	f000 f908 	bl	8010368 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8010158:	4b1d      	ldr	r3, [pc, #116]	; (80101d0 <pvPortMalloc+0x188>)
 801015a:	681a      	ldr	r2, [r3, #0]
 801015c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801015e:	685b      	ldr	r3, [r3, #4]
 8010160:	1ad3      	subs	r3, r2, r3
 8010162:	4a1b      	ldr	r2, [pc, #108]	; (80101d0 <pvPortMalloc+0x188>)
 8010164:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8010166:	4b1a      	ldr	r3, [pc, #104]	; (80101d0 <pvPortMalloc+0x188>)
 8010168:	681a      	ldr	r2, [r3, #0]
 801016a:	4b1b      	ldr	r3, [pc, #108]	; (80101d8 <pvPortMalloc+0x190>)
 801016c:	681b      	ldr	r3, [r3, #0]
 801016e:	429a      	cmp	r2, r3
 8010170:	d203      	bcs.n	801017a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8010172:	4b17      	ldr	r3, [pc, #92]	; (80101d0 <pvPortMalloc+0x188>)
 8010174:	681b      	ldr	r3, [r3, #0]
 8010176:	4a18      	ldr	r2, [pc, #96]	; (80101d8 <pvPortMalloc+0x190>)
 8010178:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801017a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801017c:	685a      	ldr	r2, [r3, #4]
 801017e:	4b13      	ldr	r3, [pc, #76]	; (80101cc <pvPortMalloc+0x184>)
 8010180:	681b      	ldr	r3, [r3, #0]
 8010182:	431a      	orrs	r2, r3
 8010184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010186:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8010188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801018a:	2200      	movs	r2, #0
 801018c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 801018e:	4b13      	ldr	r3, [pc, #76]	; (80101dc <pvPortMalloc+0x194>)
 8010190:	681b      	ldr	r3, [r3, #0]
 8010192:	3301      	adds	r3, #1
 8010194:	4a11      	ldr	r2, [pc, #68]	; (80101dc <pvPortMalloc+0x194>)
 8010196:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8010198:	f7fe ff5a 	bl	800f050 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801019c:	69fb      	ldr	r3, [r7, #28]
 801019e:	f003 0307 	and.w	r3, r3, #7
 80101a2:	2b00      	cmp	r3, #0
 80101a4:	d00a      	beq.n	80101bc <pvPortMalloc+0x174>
	__asm volatile
 80101a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80101aa:	f383 8811 	msr	BASEPRI, r3
 80101ae:	f3bf 8f6f 	isb	sy
 80101b2:	f3bf 8f4f 	dsb	sy
 80101b6:	60fb      	str	r3, [r7, #12]
}
 80101b8:	bf00      	nop
 80101ba:	e7fe      	b.n	80101ba <pvPortMalloc+0x172>
	return pvReturn;
 80101bc:	69fb      	ldr	r3, [r7, #28]
}
 80101be:	4618      	mov	r0, r3
 80101c0:	3728      	adds	r7, #40	; 0x28
 80101c2:	46bd      	mov	sp, r7
 80101c4:	bd80      	pop	{r7, pc}
 80101c6:	bf00      	nop
 80101c8:	20001a64 	.word	0x20001a64
 80101cc:	20001a78 	.word	0x20001a78
 80101d0:	20001a68 	.word	0x20001a68
 80101d4:	20001a5c 	.word	0x20001a5c
 80101d8:	20001a6c 	.word	0x20001a6c
 80101dc:	20001a70 	.word	0x20001a70

080101e0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80101e0:	b580      	push	{r7, lr}
 80101e2:	b086      	sub	sp, #24
 80101e4:	af00      	add	r7, sp, #0
 80101e6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80101e8:	687b      	ldr	r3, [r7, #4]
 80101ea:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80101ec:	687b      	ldr	r3, [r7, #4]
 80101ee:	2b00      	cmp	r3, #0
 80101f0:	d04d      	beq.n	801028e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80101f2:	2308      	movs	r3, #8
 80101f4:	425b      	negs	r3, r3
 80101f6:	697a      	ldr	r2, [r7, #20]
 80101f8:	4413      	add	r3, r2
 80101fa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80101fc:	697b      	ldr	r3, [r7, #20]
 80101fe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8010200:	693b      	ldr	r3, [r7, #16]
 8010202:	685a      	ldr	r2, [r3, #4]
 8010204:	4b24      	ldr	r3, [pc, #144]	; (8010298 <vPortFree+0xb8>)
 8010206:	681b      	ldr	r3, [r3, #0]
 8010208:	4013      	ands	r3, r2
 801020a:	2b00      	cmp	r3, #0
 801020c:	d10a      	bne.n	8010224 <vPortFree+0x44>
	__asm volatile
 801020e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010212:	f383 8811 	msr	BASEPRI, r3
 8010216:	f3bf 8f6f 	isb	sy
 801021a:	f3bf 8f4f 	dsb	sy
 801021e:	60fb      	str	r3, [r7, #12]
}
 8010220:	bf00      	nop
 8010222:	e7fe      	b.n	8010222 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8010224:	693b      	ldr	r3, [r7, #16]
 8010226:	681b      	ldr	r3, [r3, #0]
 8010228:	2b00      	cmp	r3, #0
 801022a:	d00a      	beq.n	8010242 <vPortFree+0x62>
	__asm volatile
 801022c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010230:	f383 8811 	msr	BASEPRI, r3
 8010234:	f3bf 8f6f 	isb	sy
 8010238:	f3bf 8f4f 	dsb	sy
 801023c:	60bb      	str	r3, [r7, #8]
}
 801023e:	bf00      	nop
 8010240:	e7fe      	b.n	8010240 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8010242:	693b      	ldr	r3, [r7, #16]
 8010244:	685a      	ldr	r2, [r3, #4]
 8010246:	4b14      	ldr	r3, [pc, #80]	; (8010298 <vPortFree+0xb8>)
 8010248:	681b      	ldr	r3, [r3, #0]
 801024a:	4013      	ands	r3, r2
 801024c:	2b00      	cmp	r3, #0
 801024e:	d01e      	beq.n	801028e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8010250:	693b      	ldr	r3, [r7, #16]
 8010252:	681b      	ldr	r3, [r3, #0]
 8010254:	2b00      	cmp	r3, #0
 8010256:	d11a      	bne.n	801028e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8010258:	693b      	ldr	r3, [r7, #16]
 801025a:	685a      	ldr	r2, [r3, #4]
 801025c:	4b0e      	ldr	r3, [pc, #56]	; (8010298 <vPortFree+0xb8>)
 801025e:	681b      	ldr	r3, [r3, #0]
 8010260:	43db      	mvns	r3, r3
 8010262:	401a      	ands	r2, r3
 8010264:	693b      	ldr	r3, [r7, #16]
 8010266:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8010268:	f7fe fee4 	bl	800f034 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801026c:	693b      	ldr	r3, [r7, #16]
 801026e:	685a      	ldr	r2, [r3, #4]
 8010270:	4b0a      	ldr	r3, [pc, #40]	; (801029c <vPortFree+0xbc>)
 8010272:	681b      	ldr	r3, [r3, #0]
 8010274:	4413      	add	r3, r2
 8010276:	4a09      	ldr	r2, [pc, #36]	; (801029c <vPortFree+0xbc>)
 8010278:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801027a:	6938      	ldr	r0, [r7, #16]
 801027c:	f000 f874 	bl	8010368 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8010280:	4b07      	ldr	r3, [pc, #28]	; (80102a0 <vPortFree+0xc0>)
 8010282:	681b      	ldr	r3, [r3, #0]
 8010284:	3301      	adds	r3, #1
 8010286:	4a06      	ldr	r2, [pc, #24]	; (80102a0 <vPortFree+0xc0>)
 8010288:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 801028a:	f7fe fee1 	bl	800f050 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801028e:	bf00      	nop
 8010290:	3718      	adds	r7, #24
 8010292:	46bd      	mov	sp, r7
 8010294:	bd80      	pop	{r7, pc}
 8010296:	bf00      	nop
 8010298:	20001a78 	.word	0x20001a78
 801029c:	20001a68 	.word	0x20001a68
 80102a0:	20001a74 	.word	0x20001a74

080102a4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80102a4:	b480      	push	{r7}
 80102a6:	b085      	sub	sp, #20
 80102a8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80102aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80102ae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80102b0:	4b27      	ldr	r3, [pc, #156]	; (8010350 <prvHeapInit+0xac>)
 80102b2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80102b4:	68fb      	ldr	r3, [r7, #12]
 80102b6:	f003 0307 	and.w	r3, r3, #7
 80102ba:	2b00      	cmp	r3, #0
 80102bc:	d00c      	beq.n	80102d8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80102be:	68fb      	ldr	r3, [r7, #12]
 80102c0:	3307      	adds	r3, #7
 80102c2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80102c4:	68fb      	ldr	r3, [r7, #12]
 80102c6:	f023 0307 	bic.w	r3, r3, #7
 80102ca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80102cc:	68ba      	ldr	r2, [r7, #8]
 80102ce:	68fb      	ldr	r3, [r7, #12]
 80102d0:	1ad3      	subs	r3, r2, r3
 80102d2:	4a1f      	ldr	r2, [pc, #124]	; (8010350 <prvHeapInit+0xac>)
 80102d4:	4413      	add	r3, r2
 80102d6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80102d8:	68fb      	ldr	r3, [r7, #12]
 80102da:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80102dc:	4a1d      	ldr	r2, [pc, #116]	; (8010354 <prvHeapInit+0xb0>)
 80102de:	687b      	ldr	r3, [r7, #4]
 80102e0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80102e2:	4b1c      	ldr	r3, [pc, #112]	; (8010354 <prvHeapInit+0xb0>)
 80102e4:	2200      	movs	r2, #0
 80102e6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80102e8:	687b      	ldr	r3, [r7, #4]
 80102ea:	68ba      	ldr	r2, [r7, #8]
 80102ec:	4413      	add	r3, r2
 80102ee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80102f0:	2208      	movs	r2, #8
 80102f2:	68fb      	ldr	r3, [r7, #12]
 80102f4:	1a9b      	subs	r3, r3, r2
 80102f6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80102f8:	68fb      	ldr	r3, [r7, #12]
 80102fa:	f023 0307 	bic.w	r3, r3, #7
 80102fe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8010300:	68fb      	ldr	r3, [r7, #12]
 8010302:	4a15      	ldr	r2, [pc, #84]	; (8010358 <prvHeapInit+0xb4>)
 8010304:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8010306:	4b14      	ldr	r3, [pc, #80]	; (8010358 <prvHeapInit+0xb4>)
 8010308:	681b      	ldr	r3, [r3, #0]
 801030a:	2200      	movs	r2, #0
 801030c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801030e:	4b12      	ldr	r3, [pc, #72]	; (8010358 <prvHeapInit+0xb4>)
 8010310:	681b      	ldr	r3, [r3, #0]
 8010312:	2200      	movs	r2, #0
 8010314:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8010316:	687b      	ldr	r3, [r7, #4]
 8010318:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801031a:	683b      	ldr	r3, [r7, #0]
 801031c:	68fa      	ldr	r2, [r7, #12]
 801031e:	1ad2      	subs	r2, r2, r3
 8010320:	683b      	ldr	r3, [r7, #0]
 8010322:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8010324:	4b0c      	ldr	r3, [pc, #48]	; (8010358 <prvHeapInit+0xb4>)
 8010326:	681a      	ldr	r2, [r3, #0]
 8010328:	683b      	ldr	r3, [r7, #0]
 801032a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801032c:	683b      	ldr	r3, [r7, #0]
 801032e:	685b      	ldr	r3, [r3, #4]
 8010330:	4a0a      	ldr	r2, [pc, #40]	; (801035c <prvHeapInit+0xb8>)
 8010332:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8010334:	683b      	ldr	r3, [r7, #0]
 8010336:	685b      	ldr	r3, [r3, #4]
 8010338:	4a09      	ldr	r2, [pc, #36]	; (8010360 <prvHeapInit+0xbc>)
 801033a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801033c:	4b09      	ldr	r3, [pc, #36]	; (8010364 <prvHeapInit+0xc0>)
 801033e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8010342:	601a      	str	r2, [r3, #0]
}
 8010344:	bf00      	nop
 8010346:	3714      	adds	r7, #20
 8010348:	46bd      	mov	sp, r7
 801034a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801034e:	4770      	bx	lr
 8010350:	20000a5c 	.word	0x20000a5c
 8010354:	20001a5c 	.word	0x20001a5c
 8010358:	20001a64 	.word	0x20001a64
 801035c:	20001a6c 	.word	0x20001a6c
 8010360:	20001a68 	.word	0x20001a68
 8010364:	20001a78 	.word	0x20001a78

08010368 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8010368:	b480      	push	{r7}
 801036a:	b085      	sub	sp, #20
 801036c:	af00      	add	r7, sp, #0
 801036e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8010370:	4b28      	ldr	r3, [pc, #160]	; (8010414 <prvInsertBlockIntoFreeList+0xac>)
 8010372:	60fb      	str	r3, [r7, #12]
 8010374:	e002      	b.n	801037c <prvInsertBlockIntoFreeList+0x14>
 8010376:	68fb      	ldr	r3, [r7, #12]
 8010378:	681b      	ldr	r3, [r3, #0]
 801037a:	60fb      	str	r3, [r7, #12]
 801037c:	68fb      	ldr	r3, [r7, #12]
 801037e:	681b      	ldr	r3, [r3, #0]
 8010380:	687a      	ldr	r2, [r7, #4]
 8010382:	429a      	cmp	r2, r3
 8010384:	d8f7      	bhi.n	8010376 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8010386:	68fb      	ldr	r3, [r7, #12]
 8010388:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801038a:	68fb      	ldr	r3, [r7, #12]
 801038c:	685b      	ldr	r3, [r3, #4]
 801038e:	68ba      	ldr	r2, [r7, #8]
 8010390:	4413      	add	r3, r2
 8010392:	687a      	ldr	r2, [r7, #4]
 8010394:	429a      	cmp	r2, r3
 8010396:	d108      	bne.n	80103aa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8010398:	68fb      	ldr	r3, [r7, #12]
 801039a:	685a      	ldr	r2, [r3, #4]
 801039c:	687b      	ldr	r3, [r7, #4]
 801039e:	685b      	ldr	r3, [r3, #4]
 80103a0:	441a      	add	r2, r3
 80103a2:	68fb      	ldr	r3, [r7, #12]
 80103a4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80103a6:	68fb      	ldr	r3, [r7, #12]
 80103a8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80103aa:	687b      	ldr	r3, [r7, #4]
 80103ac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80103ae:	687b      	ldr	r3, [r7, #4]
 80103b0:	685b      	ldr	r3, [r3, #4]
 80103b2:	68ba      	ldr	r2, [r7, #8]
 80103b4:	441a      	add	r2, r3
 80103b6:	68fb      	ldr	r3, [r7, #12]
 80103b8:	681b      	ldr	r3, [r3, #0]
 80103ba:	429a      	cmp	r2, r3
 80103bc:	d118      	bne.n	80103f0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80103be:	68fb      	ldr	r3, [r7, #12]
 80103c0:	681a      	ldr	r2, [r3, #0]
 80103c2:	4b15      	ldr	r3, [pc, #84]	; (8010418 <prvInsertBlockIntoFreeList+0xb0>)
 80103c4:	681b      	ldr	r3, [r3, #0]
 80103c6:	429a      	cmp	r2, r3
 80103c8:	d00d      	beq.n	80103e6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80103ca:	687b      	ldr	r3, [r7, #4]
 80103cc:	685a      	ldr	r2, [r3, #4]
 80103ce:	68fb      	ldr	r3, [r7, #12]
 80103d0:	681b      	ldr	r3, [r3, #0]
 80103d2:	685b      	ldr	r3, [r3, #4]
 80103d4:	441a      	add	r2, r3
 80103d6:	687b      	ldr	r3, [r7, #4]
 80103d8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80103da:	68fb      	ldr	r3, [r7, #12]
 80103dc:	681b      	ldr	r3, [r3, #0]
 80103de:	681a      	ldr	r2, [r3, #0]
 80103e0:	687b      	ldr	r3, [r7, #4]
 80103e2:	601a      	str	r2, [r3, #0]
 80103e4:	e008      	b.n	80103f8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80103e6:	4b0c      	ldr	r3, [pc, #48]	; (8010418 <prvInsertBlockIntoFreeList+0xb0>)
 80103e8:	681a      	ldr	r2, [r3, #0]
 80103ea:	687b      	ldr	r3, [r7, #4]
 80103ec:	601a      	str	r2, [r3, #0]
 80103ee:	e003      	b.n	80103f8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80103f0:	68fb      	ldr	r3, [r7, #12]
 80103f2:	681a      	ldr	r2, [r3, #0]
 80103f4:	687b      	ldr	r3, [r7, #4]
 80103f6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80103f8:	68fa      	ldr	r2, [r7, #12]
 80103fa:	687b      	ldr	r3, [r7, #4]
 80103fc:	429a      	cmp	r2, r3
 80103fe:	d002      	beq.n	8010406 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8010400:	68fb      	ldr	r3, [r7, #12]
 8010402:	687a      	ldr	r2, [r7, #4]
 8010404:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010406:	bf00      	nop
 8010408:	3714      	adds	r7, #20
 801040a:	46bd      	mov	sp, r7
 801040c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010410:	4770      	bx	lr
 8010412:	bf00      	nop
 8010414:	20001a5c 	.word	0x20001a5c
 8010418:	20001a64 	.word	0x20001a64

0801041c <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 801041c:	b580      	push	{r7, lr}
 801041e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 8010420:	2200      	movs	r2, #0
 8010422:	4912      	ldr	r1, [pc, #72]	; (801046c <MX_USB_Device_Init+0x50>)
 8010424:	4812      	ldr	r0, [pc, #72]	; (8010470 <MX_USB_Device_Init+0x54>)
 8010426:	f7fc fe0d 	bl	800d044 <USBD_Init>
 801042a:	4603      	mov	r3, r0
 801042c:	2b00      	cmp	r3, #0
 801042e:	d001      	beq.n	8010434 <MX_USB_Device_Init+0x18>
    Error_Handler();
 8010430:	f7f1 fc50 	bl	8001cd4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 8010434:	490f      	ldr	r1, [pc, #60]	; (8010474 <MX_USB_Device_Init+0x58>)
 8010436:	480e      	ldr	r0, [pc, #56]	; (8010470 <MX_USB_Device_Init+0x54>)
 8010438:	f7fc fe34 	bl	800d0a4 <USBD_RegisterClass>
 801043c:	4603      	mov	r3, r0
 801043e:	2b00      	cmp	r3, #0
 8010440:	d001      	beq.n	8010446 <MX_USB_Device_Init+0x2a>
    Error_Handler();
 8010442:	f7f1 fc47 	bl	8001cd4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 8010446:	490c      	ldr	r1, [pc, #48]	; (8010478 <MX_USB_Device_Init+0x5c>)
 8010448:	4809      	ldr	r0, [pc, #36]	; (8010470 <MX_USB_Device_Init+0x54>)
 801044a:	f7fc fd85 	bl	800cf58 <USBD_CDC_RegisterInterface>
 801044e:	4603      	mov	r3, r0
 8010450:	2b00      	cmp	r3, #0
 8010452:	d001      	beq.n	8010458 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 8010454:	f7f1 fc3e 	bl	8001cd4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 8010458:	4805      	ldr	r0, [pc, #20]	; (8010470 <MX_USB_Device_Init+0x54>)
 801045a:	f7fc fe4a 	bl	800d0f2 <USBD_Start>
 801045e:	4603      	mov	r3, r0
 8010460:	2b00      	cmp	r3, #0
 8010462:	d001      	beq.n	8010468 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 8010464:	f7f1 fc36 	bl	8001cd4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 8010468:	bf00      	nop
 801046a:	bd80      	pop	{r7, pc}
 801046c:	20000134 	.word	0x20000134
 8010470:	20001a7c 	.word	0x20001a7c
 8010474:	20000018 	.word	0x20000018
 8010478:	20000120 	.word	0x20000120

0801047c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 801047c:	b580      	push	{r7, lr}
 801047e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8010480:	2200      	movs	r2, #0
 8010482:	4905      	ldr	r1, [pc, #20]	; (8010498 <CDC_Init_FS+0x1c>)
 8010484:	4805      	ldr	r0, [pc, #20]	; (801049c <CDC_Init_FS+0x20>)
 8010486:	f7fc fd7c 	bl	800cf82 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 801048a:	4905      	ldr	r1, [pc, #20]	; (80104a0 <CDC_Init_FS+0x24>)
 801048c:	4803      	ldr	r0, [pc, #12]	; (801049c <CDC_Init_FS+0x20>)
 801048e:	f7fc fd96 	bl	800cfbe <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8010492:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8010494:	4618      	mov	r0, r3
 8010496:	bd80      	pop	{r7, pc}
 8010498:	2000254c 	.word	0x2000254c
 801049c:	20001a7c 	.word	0x20001a7c
 80104a0:	20001d4c 	.word	0x20001d4c

080104a4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80104a4:	b480      	push	{r7}
 80104a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80104a8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80104aa:	4618      	mov	r0, r3
 80104ac:	46bd      	mov	sp, r7
 80104ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104b2:	4770      	bx	lr

080104b4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80104b4:	b480      	push	{r7}
 80104b6:	b083      	sub	sp, #12
 80104b8:	af00      	add	r7, sp, #0
 80104ba:	4603      	mov	r3, r0
 80104bc:	6039      	str	r1, [r7, #0]
 80104be:	71fb      	strb	r3, [r7, #7]
 80104c0:	4613      	mov	r3, r2
 80104c2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80104c4:	79fb      	ldrb	r3, [r7, #7]
 80104c6:	2b23      	cmp	r3, #35	; 0x23
 80104c8:	d84a      	bhi.n	8010560 <CDC_Control_FS+0xac>
 80104ca:	a201      	add	r2, pc, #4	; (adr r2, 80104d0 <CDC_Control_FS+0x1c>)
 80104cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80104d0:	08010561 	.word	0x08010561
 80104d4:	08010561 	.word	0x08010561
 80104d8:	08010561 	.word	0x08010561
 80104dc:	08010561 	.word	0x08010561
 80104e0:	08010561 	.word	0x08010561
 80104e4:	08010561 	.word	0x08010561
 80104e8:	08010561 	.word	0x08010561
 80104ec:	08010561 	.word	0x08010561
 80104f0:	08010561 	.word	0x08010561
 80104f4:	08010561 	.word	0x08010561
 80104f8:	08010561 	.word	0x08010561
 80104fc:	08010561 	.word	0x08010561
 8010500:	08010561 	.word	0x08010561
 8010504:	08010561 	.word	0x08010561
 8010508:	08010561 	.word	0x08010561
 801050c:	08010561 	.word	0x08010561
 8010510:	08010561 	.word	0x08010561
 8010514:	08010561 	.word	0x08010561
 8010518:	08010561 	.word	0x08010561
 801051c:	08010561 	.word	0x08010561
 8010520:	08010561 	.word	0x08010561
 8010524:	08010561 	.word	0x08010561
 8010528:	08010561 	.word	0x08010561
 801052c:	08010561 	.word	0x08010561
 8010530:	08010561 	.word	0x08010561
 8010534:	08010561 	.word	0x08010561
 8010538:	08010561 	.word	0x08010561
 801053c:	08010561 	.word	0x08010561
 8010540:	08010561 	.word	0x08010561
 8010544:	08010561 	.word	0x08010561
 8010548:	08010561 	.word	0x08010561
 801054c:	08010561 	.word	0x08010561
 8010550:	08010561 	.word	0x08010561
 8010554:	08010561 	.word	0x08010561
 8010558:	08010561 	.word	0x08010561
 801055c:	08010561 	.word	0x08010561
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8010560:	bf00      	nop
  }

  return (USBD_OK);
 8010562:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8010564:	4618      	mov	r0, r3
 8010566:	370c      	adds	r7, #12
 8010568:	46bd      	mov	sp, r7
 801056a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801056e:	4770      	bx	lr

08010570 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8010570:	b580      	push	{r7, lr}
 8010572:	b082      	sub	sp, #8
 8010574:	af00      	add	r7, sp, #0
 8010576:	6078      	str	r0, [r7, #4]
 8010578:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 801057a:	6879      	ldr	r1, [r7, #4]
 801057c:	4805      	ldr	r0, [pc, #20]	; (8010594 <CDC_Receive_FS+0x24>)
 801057e:	f7fc fd1e 	bl	800cfbe <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8010582:	4804      	ldr	r0, [pc, #16]	; (8010594 <CDC_Receive_FS+0x24>)
 8010584:	f7fc fd34 	bl	800cff0 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8010588:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 801058a:	4618      	mov	r0, r3
 801058c:	3708      	adds	r7, #8
 801058e:	46bd      	mov	sp, r7
 8010590:	bd80      	pop	{r7, pc}
 8010592:	bf00      	nop
 8010594:	20001a7c 	.word	0x20001a7c

08010598 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8010598:	b480      	push	{r7}
 801059a:	b087      	sub	sp, #28
 801059c:	af00      	add	r7, sp, #0
 801059e:	60f8      	str	r0, [r7, #12]
 80105a0:	60b9      	str	r1, [r7, #8]
 80105a2:	4613      	mov	r3, r2
 80105a4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80105a6:	2300      	movs	r3, #0
 80105a8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80105aa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80105ae:	4618      	mov	r0, r3
 80105b0:	371c      	adds	r7, #28
 80105b2:	46bd      	mov	sp, r7
 80105b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105b8:	4770      	bx	lr
	...

080105bc <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80105bc:	b480      	push	{r7}
 80105be:	b083      	sub	sp, #12
 80105c0:	af00      	add	r7, sp, #0
 80105c2:	4603      	mov	r3, r0
 80105c4:	6039      	str	r1, [r7, #0]
 80105c6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 80105c8:	683b      	ldr	r3, [r7, #0]
 80105ca:	2212      	movs	r2, #18
 80105cc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 80105ce:	4b03      	ldr	r3, [pc, #12]	; (80105dc <USBD_CDC_DeviceDescriptor+0x20>)
}
 80105d0:	4618      	mov	r0, r3
 80105d2:	370c      	adds	r7, #12
 80105d4:	46bd      	mov	sp, r7
 80105d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105da:	4770      	bx	lr
 80105dc:	20000154 	.word	0x20000154

080105e0 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80105e0:	b480      	push	{r7}
 80105e2:	b083      	sub	sp, #12
 80105e4:	af00      	add	r7, sp, #0
 80105e6:	4603      	mov	r3, r0
 80105e8:	6039      	str	r1, [r7, #0]
 80105ea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80105ec:	683b      	ldr	r3, [r7, #0]
 80105ee:	2204      	movs	r2, #4
 80105f0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80105f2:	4b03      	ldr	r3, [pc, #12]	; (8010600 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 80105f4:	4618      	mov	r0, r3
 80105f6:	370c      	adds	r7, #12
 80105f8:	46bd      	mov	sp, r7
 80105fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105fe:	4770      	bx	lr
 8010600:	20000168 	.word	0x20000168

08010604 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010604:	b580      	push	{r7, lr}
 8010606:	b082      	sub	sp, #8
 8010608:	af00      	add	r7, sp, #0
 801060a:	4603      	mov	r3, r0
 801060c:	6039      	str	r1, [r7, #0]
 801060e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8010610:	79fb      	ldrb	r3, [r7, #7]
 8010612:	2b00      	cmp	r3, #0
 8010614:	d105      	bne.n	8010622 <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8010616:	683a      	ldr	r2, [r7, #0]
 8010618:	4907      	ldr	r1, [pc, #28]	; (8010638 <USBD_CDC_ProductStrDescriptor+0x34>)
 801061a:	4808      	ldr	r0, [pc, #32]	; (801063c <USBD_CDC_ProductStrDescriptor+0x38>)
 801061c:	f7fd fd51 	bl	800e0c2 <USBD_GetString>
 8010620:	e004      	b.n	801062c <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8010622:	683a      	ldr	r2, [r7, #0]
 8010624:	4904      	ldr	r1, [pc, #16]	; (8010638 <USBD_CDC_ProductStrDescriptor+0x34>)
 8010626:	4805      	ldr	r0, [pc, #20]	; (801063c <USBD_CDC_ProductStrDescriptor+0x38>)
 8010628:	f7fd fd4b 	bl	800e0c2 <USBD_GetString>
  }
  return USBD_StrDesc;
 801062c:	4b02      	ldr	r3, [pc, #8]	; (8010638 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 801062e:	4618      	mov	r0, r3
 8010630:	3708      	adds	r7, #8
 8010632:	46bd      	mov	sp, r7
 8010634:	bd80      	pop	{r7, pc}
 8010636:	bf00      	nop
 8010638:	20002d4c 	.word	0x20002d4c
 801063c:	08013b58 	.word	0x08013b58

08010640 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010640:	b580      	push	{r7, lr}
 8010642:	b082      	sub	sp, #8
 8010644:	af00      	add	r7, sp, #0
 8010646:	4603      	mov	r3, r0
 8010648:	6039      	str	r1, [r7, #0]
 801064a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 801064c:	683a      	ldr	r2, [r7, #0]
 801064e:	4904      	ldr	r1, [pc, #16]	; (8010660 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 8010650:	4804      	ldr	r0, [pc, #16]	; (8010664 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 8010652:	f7fd fd36 	bl	800e0c2 <USBD_GetString>
  return USBD_StrDesc;
 8010656:	4b02      	ldr	r3, [pc, #8]	; (8010660 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 8010658:	4618      	mov	r0, r3
 801065a:	3708      	adds	r7, #8
 801065c:	46bd      	mov	sp, r7
 801065e:	bd80      	pop	{r7, pc}
 8010660:	20002d4c 	.word	0x20002d4c
 8010664:	08013b70 	.word	0x08013b70

08010668 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010668:	b580      	push	{r7, lr}
 801066a:	b082      	sub	sp, #8
 801066c:	af00      	add	r7, sp, #0
 801066e:	4603      	mov	r3, r0
 8010670:	6039      	str	r1, [r7, #0]
 8010672:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8010674:	683b      	ldr	r3, [r7, #0]
 8010676:	221a      	movs	r2, #26
 8010678:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801067a:	f000 f843 	bl	8010704 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 801067e:	4b02      	ldr	r3, [pc, #8]	; (8010688 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 8010680:	4618      	mov	r0, r3
 8010682:	3708      	adds	r7, #8
 8010684:	46bd      	mov	sp, r7
 8010686:	bd80      	pop	{r7, pc}
 8010688:	2000016c 	.word	0x2000016c

0801068c <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801068c:	b580      	push	{r7, lr}
 801068e:	b082      	sub	sp, #8
 8010690:	af00      	add	r7, sp, #0
 8010692:	4603      	mov	r3, r0
 8010694:	6039      	str	r1, [r7, #0]
 8010696:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8010698:	79fb      	ldrb	r3, [r7, #7]
 801069a:	2b00      	cmp	r3, #0
 801069c:	d105      	bne.n	80106aa <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 801069e:	683a      	ldr	r2, [r7, #0]
 80106a0:	4907      	ldr	r1, [pc, #28]	; (80106c0 <USBD_CDC_ConfigStrDescriptor+0x34>)
 80106a2:	4808      	ldr	r0, [pc, #32]	; (80106c4 <USBD_CDC_ConfigStrDescriptor+0x38>)
 80106a4:	f7fd fd0d 	bl	800e0c2 <USBD_GetString>
 80106a8:	e004      	b.n	80106b4 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 80106aa:	683a      	ldr	r2, [r7, #0]
 80106ac:	4904      	ldr	r1, [pc, #16]	; (80106c0 <USBD_CDC_ConfigStrDescriptor+0x34>)
 80106ae:	4805      	ldr	r0, [pc, #20]	; (80106c4 <USBD_CDC_ConfigStrDescriptor+0x38>)
 80106b0:	f7fd fd07 	bl	800e0c2 <USBD_GetString>
  }
  return USBD_StrDesc;
 80106b4:	4b02      	ldr	r3, [pc, #8]	; (80106c0 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 80106b6:	4618      	mov	r0, r3
 80106b8:	3708      	adds	r7, #8
 80106ba:	46bd      	mov	sp, r7
 80106bc:	bd80      	pop	{r7, pc}
 80106be:	bf00      	nop
 80106c0:	20002d4c 	.word	0x20002d4c
 80106c4:	08013b84 	.word	0x08013b84

080106c8 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80106c8:	b580      	push	{r7, lr}
 80106ca:	b082      	sub	sp, #8
 80106cc:	af00      	add	r7, sp, #0
 80106ce:	4603      	mov	r3, r0
 80106d0:	6039      	str	r1, [r7, #0]
 80106d2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80106d4:	79fb      	ldrb	r3, [r7, #7]
 80106d6:	2b00      	cmp	r3, #0
 80106d8:	d105      	bne.n	80106e6 <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 80106da:	683a      	ldr	r2, [r7, #0]
 80106dc:	4907      	ldr	r1, [pc, #28]	; (80106fc <USBD_CDC_InterfaceStrDescriptor+0x34>)
 80106de:	4808      	ldr	r0, [pc, #32]	; (8010700 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 80106e0:	f7fd fcef 	bl	800e0c2 <USBD_GetString>
 80106e4:	e004      	b.n	80106f0 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 80106e6:	683a      	ldr	r2, [r7, #0]
 80106e8:	4904      	ldr	r1, [pc, #16]	; (80106fc <USBD_CDC_InterfaceStrDescriptor+0x34>)
 80106ea:	4805      	ldr	r0, [pc, #20]	; (8010700 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 80106ec:	f7fd fce9 	bl	800e0c2 <USBD_GetString>
  }
  return USBD_StrDesc;
 80106f0:	4b02      	ldr	r3, [pc, #8]	; (80106fc <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 80106f2:	4618      	mov	r0, r3
 80106f4:	3708      	adds	r7, #8
 80106f6:	46bd      	mov	sp, r7
 80106f8:	bd80      	pop	{r7, pc}
 80106fa:	bf00      	nop
 80106fc:	20002d4c 	.word	0x20002d4c
 8010700:	08013b90 	.word	0x08013b90

08010704 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8010704:	b580      	push	{r7, lr}
 8010706:	b084      	sub	sp, #16
 8010708:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801070a:	4b0f      	ldr	r3, [pc, #60]	; (8010748 <Get_SerialNum+0x44>)
 801070c:	681b      	ldr	r3, [r3, #0]
 801070e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8010710:	4b0e      	ldr	r3, [pc, #56]	; (801074c <Get_SerialNum+0x48>)
 8010712:	681b      	ldr	r3, [r3, #0]
 8010714:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8010716:	4b0e      	ldr	r3, [pc, #56]	; (8010750 <Get_SerialNum+0x4c>)
 8010718:	681b      	ldr	r3, [r3, #0]
 801071a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 801071c:	68fa      	ldr	r2, [r7, #12]
 801071e:	687b      	ldr	r3, [r7, #4]
 8010720:	4413      	add	r3, r2
 8010722:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8010724:	68fb      	ldr	r3, [r7, #12]
 8010726:	2b00      	cmp	r3, #0
 8010728:	d009      	beq.n	801073e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801072a:	2208      	movs	r2, #8
 801072c:	4909      	ldr	r1, [pc, #36]	; (8010754 <Get_SerialNum+0x50>)
 801072e:	68f8      	ldr	r0, [r7, #12]
 8010730:	f000 f814 	bl	801075c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8010734:	2204      	movs	r2, #4
 8010736:	4908      	ldr	r1, [pc, #32]	; (8010758 <Get_SerialNum+0x54>)
 8010738:	68b8      	ldr	r0, [r7, #8]
 801073a:	f000 f80f 	bl	801075c <IntToUnicode>
  }
}
 801073e:	bf00      	nop
 8010740:	3710      	adds	r7, #16
 8010742:	46bd      	mov	sp, r7
 8010744:	bd80      	pop	{r7, pc}
 8010746:	bf00      	nop
 8010748:	1fff7590 	.word	0x1fff7590
 801074c:	1fff7594 	.word	0x1fff7594
 8010750:	1fff7598 	.word	0x1fff7598
 8010754:	2000016e 	.word	0x2000016e
 8010758:	2000017e 	.word	0x2000017e

0801075c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 801075c:	b480      	push	{r7}
 801075e:	b087      	sub	sp, #28
 8010760:	af00      	add	r7, sp, #0
 8010762:	60f8      	str	r0, [r7, #12]
 8010764:	60b9      	str	r1, [r7, #8]
 8010766:	4613      	mov	r3, r2
 8010768:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 801076a:	2300      	movs	r3, #0
 801076c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 801076e:	2300      	movs	r3, #0
 8010770:	75fb      	strb	r3, [r7, #23]
 8010772:	e027      	b.n	80107c4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8010774:	68fb      	ldr	r3, [r7, #12]
 8010776:	0f1b      	lsrs	r3, r3, #28
 8010778:	2b09      	cmp	r3, #9
 801077a:	d80b      	bhi.n	8010794 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 801077c:	68fb      	ldr	r3, [r7, #12]
 801077e:	0f1b      	lsrs	r3, r3, #28
 8010780:	b2da      	uxtb	r2, r3
 8010782:	7dfb      	ldrb	r3, [r7, #23]
 8010784:	005b      	lsls	r3, r3, #1
 8010786:	4619      	mov	r1, r3
 8010788:	68bb      	ldr	r3, [r7, #8]
 801078a:	440b      	add	r3, r1
 801078c:	3230      	adds	r2, #48	; 0x30
 801078e:	b2d2      	uxtb	r2, r2
 8010790:	701a      	strb	r2, [r3, #0]
 8010792:	e00a      	b.n	80107aa <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8010794:	68fb      	ldr	r3, [r7, #12]
 8010796:	0f1b      	lsrs	r3, r3, #28
 8010798:	b2da      	uxtb	r2, r3
 801079a:	7dfb      	ldrb	r3, [r7, #23]
 801079c:	005b      	lsls	r3, r3, #1
 801079e:	4619      	mov	r1, r3
 80107a0:	68bb      	ldr	r3, [r7, #8]
 80107a2:	440b      	add	r3, r1
 80107a4:	3237      	adds	r2, #55	; 0x37
 80107a6:	b2d2      	uxtb	r2, r2
 80107a8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80107aa:	68fb      	ldr	r3, [r7, #12]
 80107ac:	011b      	lsls	r3, r3, #4
 80107ae:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80107b0:	7dfb      	ldrb	r3, [r7, #23]
 80107b2:	005b      	lsls	r3, r3, #1
 80107b4:	3301      	adds	r3, #1
 80107b6:	68ba      	ldr	r2, [r7, #8]
 80107b8:	4413      	add	r3, r2
 80107ba:	2200      	movs	r2, #0
 80107bc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80107be:	7dfb      	ldrb	r3, [r7, #23]
 80107c0:	3301      	adds	r3, #1
 80107c2:	75fb      	strb	r3, [r7, #23]
 80107c4:	7dfa      	ldrb	r2, [r7, #23]
 80107c6:	79fb      	ldrb	r3, [r7, #7]
 80107c8:	429a      	cmp	r2, r3
 80107ca:	d3d3      	bcc.n	8010774 <IntToUnicode+0x18>
  }
}
 80107cc:	bf00      	nop
 80107ce:	bf00      	nop
 80107d0:	371c      	adds	r7, #28
 80107d2:	46bd      	mov	sp, r7
 80107d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107d8:	4770      	bx	lr
	...

080107dc <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80107dc:	b580      	push	{r7, lr}
 80107de:	b098      	sub	sp, #96	; 0x60
 80107e0:	af00      	add	r7, sp, #0
 80107e2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80107e4:	f107 030c 	add.w	r3, r7, #12
 80107e8:	2254      	movs	r2, #84	; 0x54
 80107ea:	2100      	movs	r1, #0
 80107ec:	4618      	mov	r0, r3
 80107ee:	f001 f957 	bl	8011aa0 <memset>
  if(pcdHandle->Instance==USB)
 80107f2:	687b      	ldr	r3, [r7, #4]
 80107f4:	681b      	ldr	r3, [r3, #0]
 80107f6:	4a15      	ldr	r2, [pc, #84]	; (801084c <HAL_PCD_MspInit+0x70>)
 80107f8:	4293      	cmp	r3, r2
 80107fa:	d122      	bne.n	8010842 <HAL_PCD_MspInit+0x66>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80107fc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8010800:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8010802:	2300      	movs	r3, #0
 8010804:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8010806:	f107 030c 	add.w	r3, r7, #12
 801080a:	4618      	mov	r0, r3
 801080c:	f7f6 fdae 	bl	800736c <HAL_RCCEx_PeriphCLKConfig>
 8010810:	4603      	mov	r3, r0
 8010812:	2b00      	cmp	r3, #0
 8010814:	d001      	beq.n	801081a <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 8010816:	f7f1 fa5d 	bl	8001cd4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 801081a:	4b0d      	ldr	r3, [pc, #52]	; (8010850 <HAL_PCD_MspInit+0x74>)
 801081c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801081e:	4a0c      	ldr	r2, [pc, #48]	; (8010850 <HAL_PCD_MspInit+0x74>)
 8010820:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8010824:	6593      	str	r3, [r2, #88]	; 0x58
 8010826:	4b0a      	ldr	r3, [pc, #40]	; (8010850 <HAL_PCD_MspInit+0x74>)
 8010828:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801082a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801082e:	60bb      	str	r3, [r7, #8]
 8010830:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 5, 0);
 8010832:	2200      	movs	r2, #0
 8010834:	2105      	movs	r1, #5
 8010836:	2014      	movs	r0, #20
 8010838:	f7f3 fd52 	bl	80042e0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 801083c:	2014      	movs	r0, #20
 801083e:	f7f3 fd69 	bl	8004314 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8010842:	bf00      	nop
 8010844:	3760      	adds	r7, #96	; 0x60
 8010846:	46bd      	mov	sp, r7
 8010848:	bd80      	pop	{r7, pc}
 801084a:	bf00      	nop
 801084c:	40005c00 	.word	0x40005c00
 8010850:	40021000 	.word	0x40021000

08010854 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010854:	b580      	push	{r7, lr}
 8010856:	b082      	sub	sp, #8
 8010858:	af00      	add	r7, sp, #0
 801085a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 801085c:	687b      	ldr	r3, [r7, #4]
 801085e:	f8d3 22f0 	ldr.w	r2, [r3, #752]	; 0x2f0
 8010862:	687b      	ldr	r3, [r7, #4]
 8010864:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8010868:	4619      	mov	r1, r3
 801086a:	4610      	mov	r0, r2
 801086c:	f7fc fc8c 	bl	800d188 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 8010870:	bf00      	nop
 8010872:	3708      	adds	r7, #8
 8010874:	46bd      	mov	sp, r7
 8010876:	bd80      	pop	{r7, pc}

08010878 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010878:	b580      	push	{r7, lr}
 801087a:	b082      	sub	sp, #8
 801087c:	af00      	add	r7, sp, #0
 801087e:	6078      	str	r0, [r7, #4]
 8010880:	460b      	mov	r3, r1
 8010882:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8010884:	687b      	ldr	r3, [r7, #4]
 8010886:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 801088a:	78fa      	ldrb	r2, [r7, #3]
 801088c:	6879      	ldr	r1, [r7, #4]
 801088e:	4613      	mov	r3, r2
 8010890:	009b      	lsls	r3, r3, #2
 8010892:	4413      	add	r3, r2
 8010894:	00db      	lsls	r3, r3, #3
 8010896:	440b      	add	r3, r1
 8010898:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 801089c:	681a      	ldr	r2, [r3, #0]
 801089e:	78fb      	ldrb	r3, [r7, #3]
 80108a0:	4619      	mov	r1, r3
 80108a2:	f7fc fcc6 	bl	800d232 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 80108a6:	bf00      	nop
 80108a8:	3708      	adds	r7, #8
 80108aa:	46bd      	mov	sp, r7
 80108ac:	bd80      	pop	{r7, pc}

080108ae <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80108ae:	b580      	push	{r7, lr}
 80108b0:	b082      	sub	sp, #8
 80108b2:	af00      	add	r7, sp, #0
 80108b4:	6078      	str	r0, [r7, #4]
 80108b6:	460b      	mov	r3, r1
 80108b8:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80108ba:	687b      	ldr	r3, [r7, #4]
 80108bc:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 80108c0:	78fa      	ldrb	r2, [r7, #3]
 80108c2:	6879      	ldr	r1, [r7, #4]
 80108c4:	4613      	mov	r3, r2
 80108c6:	009b      	lsls	r3, r3, #2
 80108c8:	4413      	add	r3, r2
 80108ca:	00db      	lsls	r3, r3, #3
 80108cc:	440b      	add	r3, r1
 80108ce:	333c      	adds	r3, #60	; 0x3c
 80108d0:	681a      	ldr	r2, [r3, #0]
 80108d2:	78fb      	ldrb	r3, [r7, #3]
 80108d4:	4619      	mov	r1, r3
 80108d6:	f7fc fd0f 	bl	800d2f8 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 80108da:	bf00      	nop
 80108dc:	3708      	adds	r7, #8
 80108de:	46bd      	mov	sp, r7
 80108e0:	bd80      	pop	{r7, pc}

080108e2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80108e2:	b580      	push	{r7, lr}
 80108e4:	b082      	sub	sp, #8
 80108e6:	af00      	add	r7, sp, #0
 80108e8:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80108ea:	687b      	ldr	r3, [r7, #4]
 80108ec:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 80108f0:	4618      	mov	r0, r3
 80108f2:	f7fc fe23 	bl	800d53c <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 80108f6:	bf00      	nop
 80108f8:	3708      	adds	r7, #8
 80108fa:	46bd      	mov	sp, r7
 80108fc:	bd80      	pop	{r7, pc}

080108fe <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80108fe:	b580      	push	{r7, lr}
 8010900:	b084      	sub	sp, #16
 8010902:	af00      	add	r7, sp, #0
 8010904:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8010906:	2301      	movs	r3, #1
 8010908:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 801090a:	687b      	ldr	r3, [r7, #4]
 801090c:	689b      	ldr	r3, [r3, #8]
 801090e:	2b02      	cmp	r3, #2
 8010910:	d001      	beq.n	8010916 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8010912:	f7f1 f9df 	bl	8001cd4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8010916:	687b      	ldr	r3, [r7, #4]
 8010918:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 801091c:	7bfa      	ldrb	r2, [r7, #15]
 801091e:	4611      	mov	r1, r2
 8010920:	4618      	mov	r0, r3
 8010922:	f7fc fdcd 	bl	800d4c0 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8010926:	687b      	ldr	r3, [r7, #4]
 8010928:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 801092c:	4618      	mov	r0, r3
 801092e:	f7fc fd79 	bl	800d424 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 8010932:	bf00      	nop
 8010934:	3710      	adds	r7, #16
 8010936:	46bd      	mov	sp, r7
 8010938:	bd80      	pop	{r7, pc}
	...

0801093c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801093c:	b580      	push	{r7, lr}
 801093e:	b082      	sub	sp, #8
 8010940:	af00      	add	r7, sp, #0
 8010942:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8010944:	687b      	ldr	r3, [r7, #4]
 8010946:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 801094a:	4618      	mov	r0, r3
 801094c:	f7fc fdc8 	bl	800d4e0 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8010950:	687b      	ldr	r3, [r7, #4]
 8010952:	699b      	ldr	r3, [r3, #24]
 8010954:	2b00      	cmp	r3, #0
 8010956:	d005      	beq.n	8010964 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8010958:	4b04      	ldr	r3, [pc, #16]	; (801096c <HAL_PCD_SuspendCallback+0x30>)
 801095a:	691b      	ldr	r3, [r3, #16]
 801095c:	4a03      	ldr	r2, [pc, #12]	; (801096c <HAL_PCD_SuspendCallback+0x30>)
 801095e:	f043 0306 	orr.w	r3, r3, #6
 8010962:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 8010964:	bf00      	nop
 8010966:	3708      	adds	r7, #8
 8010968:	46bd      	mov	sp, r7
 801096a:	bd80      	pop	{r7, pc}
 801096c:	e000ed00 	.word	0xe000ed00

08010970 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010970:	b580      	push	{r7, lr}
 8010972:	b082      	sub	sp, #8
 8010974:	af00      	add	r7, sp, #0
 8010976:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8010978:	687b      	ldr	r3, [r7, #4]
 801097a:	699b      	ldr	r3, [r3, #24]
 801097c:	2b00      	cmp	r3, #0
 801097e:	d007      	beq.n	8010990 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8010980:	4b08      	ldr	r3, [pc, #32]	; (80109a4 <HAL_PCD_ResumeCallback+0x34>)
 8010982:	691b      	ldr	r3, [r3, #16]
 8010984:	4a07      	ldr	r2, [pc, #28]	; (80109a4 <HAL_PCD_ResumeCallback+0x34>)
 8010986:	f023 0306 	bic.w	r3, r3, #6
 801098a:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 801098c:	f000 f9fa 	bl	8010d84 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8010990:	687b      	ldr	r3, [r7, #4]
 8010992:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8010996:	4618      	mov	r0, r3
 8010998:	f7fc fdb8 	bl	800d50c <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 801099c:	bf00      	nop
 801099e:	3708      	adds	r7, #8
 80109a0:	46bd      	mov	sp, r7
 80109a2:	bd80      	pop	{r7, pc}
 80109a4:	e000ed00 	.word	0xe000ed00

080109a8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80109a8:	b580      	push	{r7, lr}
 80109aa:	b082      	sub	sp, #8
 80109ac:	af00      	add	r7, sp, #0
 80109ae:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 80109b0:	4a2b      	ldr	r2, [pc, #172]	; (8010a60 <USBD_LL_Init+0xb8>)
 80109b2:	687b      	ldr	r3, [r7, #4]
 80109b4:	f8c2 32f0 	str.w	r3, [r2, #752]	; 0x2f0
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 80109b8:	687b      	ldr	r3, [r7, #4]
 80109ba:	4a29      	ldr	r2, [pc, #164]	; (8010a60 <USBD_LL_Init+0xb8>)
 80109bc:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_FS.Instance = USB;
 80109c0:	4b27      	ldr	r3, [pc, #156]	; (8010a60 <USBD_LL_Init+0xb8>)
 80109c2:	4a28      	ldr	r2, [pc, #160]	; (8010a64 <USBD_LL_Init+0xbc>)
 80109c4:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80109c6:	4b26      	ldr	r3, [pc, #152]	; (8010a60 <USBD_LL_Init+0xb8>)
 80109c8:	2208      	movs	r2, #8
 80109ca:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80109cc:	4b24      	ldr	r3, [pc, #144]	; (8010a60 <USBD_LL_Init+0xb8>)
 80109ce:	2202      	movs	r2, #2
 80109d0:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80109d2:	4b23      	ldr	r3, [pc, #140]	; (8010a60 <USBD_LL_Init+0xb8>)
 80109d4:	2202      	movs	r2, #2
 80109d6:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 80109d8:	4b21      	ldr	r3, [pc, #132]	; (8010a60 <USBD_LL_Init+0xb8>)
 80109da:	2200      	movs	r2, #0
 80109dc:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80109de:	4b20      	ldr	r3, [pc, #128]	; (8010a60 <USBD_LL_Init+0xb8>)
 80109e0:	2200      	movs	r2, #0
 80109e2:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80109e4:	4b1e      	ldr	r3, [pc, #120]	; (8010a60 <USBD_LL_Init+0xb8>)
 80109e6:	2200      	movs	r2, #0
 80109e8:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80109ea:	4b1d      	ldr	r3, [pc, #116]	; (8010a60 <USBD_LL_Init+0xb8>)
 80109ec:	2200      	movs	r2, #0
 80109ee:	621a      	str	r2, [r3, #32]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80109f0:	481b      	ldr	r0, [pc, #108]	; (8010a60 <USBD_LL_Init+0xb8>)
 80109f2:	f7f4 f982 	bl	8004cfa <HAL_PCD_Init>
 80109f6:	4603      	mov	r3, r0
 80109f8:	2b00      	cmp	r3, #0
 80109fa:	d001      	beq.n	8010a00 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 80109fc:	f7f1 f96a 	bl	8001cd4 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8010a00:	687b      	ldr	r3, [r7, #4]
 8010a02:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8010a06:	2318      	movs	r3, #24
 8010a08:	2200      	movs	r2, #0
 8010a0a:	2100      	movs	r1, #0
 8010a0c:	f7f5 fe3b 	bl	8006686 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8010a10:	687b      	ldr	r3, [r7, #4]
 8010a12:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8010a16:	2358      	movs	r3, #88	; 0x58
 8010a18:	2200      	movs	r2, #0
 8010a1a:	2180      	movs	r1, #128	; 0x80
 8010a1c:	f7f5 fe33 	bl	8006686 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8010a20:	687b      	ldr	r3, [r7, #4]
 8010a22:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8010a26:	23c0      	movs	r3, #192	; 0xc0
 8010a28:	2200      	movs	r2, #0
 8010a2a:	2181      	movs	r1, #129	; 0x81
 8010a2c:	f7f5 fe2b 	bl	8006686 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8010a30:	687b      	ldr	r3, [r7, #4]
 8010a32:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8010a36:	f44f 7388 	mov.w	r3, #272	; 0x110
 8010a3a:	2200      	movs	r2, #0
 8010a3c:	2101      	movs	r1, #1
 8010a3e:	f7f5 fe22 	bl	8006686 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8010a42:	687b      	ldr	r3, [r7, #4]
 8010a44:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8010a48:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010a4c:	2200      	movs	r2, #0
 8010a4e:	2182      	movs	r1, #130	; 0x82
 8010a50:	f7f5 fe19 	bl	8006686 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8010a54:	2300      	movs	r3, #0
}
 8010a56:	4618      	mov	r0, r3
 8010a58:	3708      	adds	r7, #8
 8010a5a:	46bd      	mov	sp, r7
 8010a5c:	bd80      	pop	{r7, pc}
 8010a5e:	bf00      	nop
 8010a60:	20002f4c 	.word	0x20002f4c
 8010a64:	40005c00 	.word	0x40005c00

08010a68 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8010a68:	b580      	push	{r7, lr}
 8010a6a:	b084      	sub	sp, #16
 8010a6c:	af00      	add	r7, sp, #0
 8010a6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010a70:	2300      	movs	r3, #0
 8010a72:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010a74:	2300      	movs	r3, #0
 8010a76:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8010a78:	687b      	ldr	r3, [r7, #4]
 8010a7a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8010a7e:	4618      	mov	r0, r3
 8010a80:	f7f4 fa20 	bl	8004ec4 <HAL_PCD_Start>
 8010a84:	4603      	mov	r3, r0
 8010a86:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010a88:	7bfb      	ldrb	r3, [r7, #15]
 8010a8a:	4618      	mov	r0, r3
 8010a8c:	f000 f980 	bl	8010d90 <USBD_Get_USB_Status>
 8010a90:	4603      	mov	r3, r0
 8010a92:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010a94:	7bbb      	ldrb	r3, [r7, #14]
}
 8010a96:	4618      	mov	r0, r3
 8010a98:	3710      	adds	r7, #16
 8010a9a:	46bd      	mov	sp, r7
 8010a9c:	bd80      	pop	{r7, pc}

08010a9e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8010a9e:	b580      	push	{r7, lr}
 8010aa0:	b084      	sub	sp, #16
 8010aa2:	af00      	add	r7, sp, #0
 8010aa4:	6078      	str	r0, [r7, #4]
 8010aa6:	4608      	mov	r0, r1
 8010aa8:	4611      	mov	r1, r2
 8010aaa:	461a      	mov	r2, r3
 8010aac:	4603      	mov	r3, r0
 8010aae:	70fb      	strb	r3, [r7, #3]
 8010ab0:	460b      	mov	r3, r1
 8010ab2:	70bb      	strb	r3, [r7, #2]
 8010ab4:	4613      	mov	r3, r2
 8010ab6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010ab8:	2300      	movs	r3, #0
 8010aba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010abc:	2300      	movs	r3, #0
 8010abe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8010ac0:	687b      	ldr	r3, [r7, #4]
 8010ac2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8010ac6:	78bb      	ldrb	r3, [r7, #2]
 8010ac8:	883a      	ldrh	r2, [r7, #0]
 8010aca:	78f9      	ldrb	r1, [r7, #3]
 8010acc:	f7f4 fb68 	bl	80051a0 <HAL_PCD_EP_Open>
 8010ad0:	4603      	mov	r3, r0
 8010ad2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010ad4:	7bfb      	ldrb	r3, [r7, #15]
 8010ad6:	4618      	mov	r0, r3
 8010ad8:	f000 f95a 	bl	8010d90 <USBD_Get_USB_Status>
 8010adc:	4603      	mov	r3, r0
 8010ade:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010ae0:	7bbb      	ldrb	r3, [r7, #14]
}
 8010ae2:	4618      	mov	r0, r3
 8010ae4:	3710      	adds	r7, #16
 8010ae6:	46bd      	mov	sp, r7
 8010ae8:	bd80      	pop	{r7, pc}

08010aea <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010aea:	b580      	push	{r7, lr}
 8010aec:	b084      	sub	sp, #16
 8010aee:	af00      	add	r7, sp, #0
 8010af0:	6078      	str	r0, [r7, #4]
 8010af2:	460b      	mov	r3, r1
 8010af4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010af6:	2300      	movs	r3, #0
 8010af8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010afa:	2300      	movs	r3, #0
 8010afc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8010afe:	687b      	ldr	r3, [r7, #4]
 8010b00:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8010b04:	78fa      	ldrb	r2, [r7, #3]
 8010b06:	4611      	mov	r1, r2
 8010b08:	4618      	mov	r0, r3
 8010b0a:	f7f4 fbaf 	bl	800526c <HAL_PCD_EP_Close>
 8010b0e:	4603      	mov	r3, r0
 8010b10:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010b12:	7bfb      	ldrb	r3, [r7, #15]
 8010b14:	4618      	mov	r0, r3
 8010b16:	f000 f93b 	bl	8010d90 <USBD_Get_USB_Status>
 8010b1a:	4603      	mov	r3, r0
 8010b1c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010b1e:	7bbb      	ldrb	r3, [r7, #14]
}
 8010b20:	4618      	mov	r0, r3
 8010b22:	3710      	adds	r7, #16
 8010b24:	46bd      	mov	sp, r7
 8010b26:	bd80      	pop	{r7, pc}

08010b28 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010b28:	b580      	push	{r7, lr}
 8010b2a:	b084      	sub	sp, #16
 8010b2c:	af00      	add	r7, sp, #0
 8010b2e:	6078      	str	r0, [r7, #4]
 8010b30:	460b      	mov	r3, r1
 8010b32:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010b34:	2300      	movs	r3, #0
 8010b36:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010b38:	2300      	movs	r3, #0
 8010b3a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8010b3c:	687b      	ldr	r3, [r7, #4]
 8010b3e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8010b42:	78fa      	ldrb	r2, [r7, #3]
 8010b44:	4611      	mov	r1, r2
 8010b46:	4618      	mov	r0, r3
 8010b48:	f7f4 fc70 	bl	800542c <HAL_PCD_EP_SetStall>
 8010b4c:	4603      	mov	r3, r0
 8010b4e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010b50:	7bfb      	ldrb	r3, [r7, #15]
 8010b52:	4618      	mov	r0, r3
 8010b54:	f000 f91c 	bl	8010d90 <USBD_Get_USB_Status>
 8010b58:	4603      	mov	r3, r0
 8010b5a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010b5c:	7bbb      	ldrb	r3, [r7, #14]
}
 8010b5e:	4618      	mov	r0, r3
 8010b60:	3710      	adds	r7, #16
 8010b62:	46bd      	mov	sp, r7
 8010b64:	bd80      	pop	{r7, pc}

08010b66 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010b66:	b580      	push	{r7, lr}
 8010b68:	b084      	sub	sp, #16
 8010b6a:	af00      	add	r7, sp, #0
 8010b6c:	6078      	str	r0, [r7, #4]
 8010b6e:	460b      	mov	r3, r1
 8010b70:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010b72:	2300      	movs	r3, #0
 8010b74:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010b76:	2300      	movs	r3, #0
 8010b78:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8010b7a:	687b      	ldr	r3, [r7, #4]
 8010b7c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8010b80:	78fa      	ldrb	r2, [r7, #3]
 8010b82:	4611      	mov	r1, r2
 8010b84:	4618      	mov	r0, r3
 8010b86:	f7f4 fca3 	bl	80054d0 <HAL_PCD_EP_ClrStall>
 8010b8a:	4603      	mov	r3, r0
 8010b8c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010b8e:	7bfb      	ldrb	r3, [r7, #15]
 8010b90:	4618      	mov	r0, r3
 8010b92:	f000 f8fd 	bl	8010d90 <USBD_Get_USB_Status>
 8010b96:	4603      	mov	r3, r0
 8010b98:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010b9a:	7bbb      	ldrb	r3, [r7, #14]
}
 8010b9c:	4618      	mov	r0, r3
 8010b9e:	3710      	adds	r7, #16
 8010ba0:	46bd      	mov	sp, r7
 8010ba2:	bd80      	pop	{r7, pc}

08010ba4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010ba4:	b480      	push	{r7}
 8010ba6:	b085      	sub	sp, #20
 8010ba8:	af00      	add	r7, sp, #0
 8010baa:	6078      	str	r0, [r7, #4]
 8010bac:	460b      	mov	r3, r1
 8010bae:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8010bb0:	687b      	ldr	r3, [r7, #4]
 8010bb2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8010bb6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8010bb8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8010bbc:	2b00      	cmp	r3, #0
 8010bbe:	da0c      	bge.n	8010bda <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8010bc0:	78fb      	ldrb	r3, [r7, #3]
 8010bc2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010bc6:	68f9      	ldr	r1, [r7, #12]
 8010bc8:	1c5a      	adds	r2, r3, #1
 8010bca:	4613      	mov	r3, r2
 8010bcc:	009b      	lsls	r3, r3, #2
 8010bce:	4413      	add	r3, r2
 8010bd0:	00db      	lsls	r3, r3, #3
 8010bd2:	440b      	add	r3, r1
 8010bd4:	3302      	adds	r3, #2
 8010bd6:	781b      	ldrb	r3, [r3, #0]
 8010bd8:	e00b      	b.n	8010bf2 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8010bda:	78fb      	ldrb	r3, [r7, #3]
 8010bdc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8010be0:	68f9      	ldr	r1, [r7, #12]
 8010be2:	4613      	mov	r3, r2
 8010be4:	009b      	lsls	r3, r3, #2
 8010be6:	4413      	add	r3, r2
 8010be8:	00db      	lsls	r3, r3, #3
 8010bea:	440b      	add	r3, r1
 8010bec:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8010bf0:	781b      	ldrb	r3, [r3, #0]
  }
}
 8010bf2:	4618      	mov	r0, r3
 8010bf4:	3714      	adds	r7, #20
 8010bf6:	46bd      	mov	sp, r7
 8010bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bfc:	4770      	bx	lr

08010bfe <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8010bfe:	b580      	push	{r7, lr}
 8010c00:	b084      	sub	sp, #16
 8010c02:	af00      	add	r7, sp, #0
 8010c04:	6078      	str	r0, [r7, #4]
 8010c06:	460b      	mov	r3, r1
 8010c08:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010c0a:	2300      	movs	r3, #0
 8010c0c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010c0e:	2300      	movs	r3, #0
 8010c10:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8010c12:	687b      	ldr	r3, [r7, #4]
 8010c14:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8010c18:	78fa      	ldrb	r2, [r7, #3]
 8010c1a:	4611      	mov	r1, r2
 8010c1c:	4618      	mov	r0, r3
 8010c1e:	f7f4 fa9a 	bl	8005156 <HAL_PCD_SetAddress>
 8010c22:	4603      	mov	r3, r0
 8010c24:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010c26:	7bfb      	ldrb	r3, [r7, #15]
 8010c28:	4618      	mov	r0, r3
 8010c2a:	f000 f8b1 	bl	8010d90 <USBD_Get_USB_Status>
 8010c2e:	4603      	mov	r3, r0
 8010c30:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010c32:	7bbb      	ldrb	r3, [r7, #14]
}
 8010c34:	4618      	mov	r0, r3
 8010c36:	3710      	adds	r7, #16
 8010c38:	46bd      	mov	sp, r7
 8010c3a:	bd80      	pop	{r7, pc}

08010c3c <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8010c3c:	b580      	push	{r7, lr}
 8010c3e:	b086      	sub	sp, #24
 8010c40:	af00      	add	r7, sp, #0
 8010c42:	60f8      	str	r0, [r7, #12]
 8010c44:	607a      	str	r2, [r7, #4]
 8010c46:	603b      	str	r3, [r7, #0]
 8010c48:	460b      	mov	r3, r1
 8010c4a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010c4c:	2300      	movs	r3, #0
 8010c4e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010c50:	2300      	movs	r3, #0
 8010c52:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8010c54:	68fb      	ldr	r3, [r7, #12]
 8010c56:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8010c5a:	7af9      	ldrb	r1, [r7, #11]
 8010c5c:	683b      	ldr	r3, [r7, #0]
 8010c5e:	687a      	ldr	r2, [r7, #4]
 8010c60:	f7f4 fba1 	bl	80053a6 <HAL_PCD_EP_Transmit>
 8010c64:	4603      	mov	r3, r0
 8010c66:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010c68:	7dfb      	ldrb	r3, [r7, #23]
 8010c6a:	4618      	mov	r0, r3
 8010c6c:	f000 f890 	bl	8010d90 <USBD_Get_USB_Status>
 8010c70:	4603      	mov	r3, r0
 8010c72:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8010c74:	7dbb      	ldrb	r3, [r7, #22]
}
 8010c76:	4618      	mov	r0, r3
 8010c78:	3718      	adds	r7, #24
 8010c7a:	46bd      	mov	sp, r7
 8010c7c:	bd80      	pop	{r7, pc}

08010c7e <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8010c7e:	b580      	push	{r7, lr}
 8010c80:	b086      	sub	sp, #24
 8010c82:	af00      	add	r7, sp, #0
 8010c84:	60f8      	str	r0, [r7, #12]
 8010c86:	607a      	str	r2, [r7, #4]
 8010c88:	603b      	str	r3, [r7, #0]
 8010c8a:	460b      	mov	r3, r1
 8010c8c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010c8e:	2300      	movs	r3, #0
 8010c90:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010c92:	2300      	movs	r3, #0
 8010c94:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8010c96:	68fb      	ldr	r3, [r7, #12]
 8010c98:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8010c9c:	7af9      	ldrb	r1, [r7, #11]
 8010c9e:	683b      	ldr	r3, [r7, #0]
 8010ca0:	687a      	ldr	r2, [r7, #4]
 8010ca2:	f7f4 fb2b 	bl	80052fc <HAL_PCD_EP_Receive>
 8010ca6:	4603      	mov	r3, r0
 8010ca8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010caa:	7dfb      	ldrb	r3, [r7, #23]
 8010cac:	4618      	mov	r0, r3
 8010cae:	f000 f86f 	bl	8010d90 <USBD_Get_USB_Status>
 8010cb2:	4603      	mov	r3, r0
 8010cb4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8010cb6:	7dbb      	ldrb	r3, [r7, #22]
}
 8010cb8:	4618      	mov	r0, r3
 8010cba:	3718      	adds	r7, #24
 8010cbc:	46bd      	mov	sp, r7
 8010cbe:	bd80      	pop	{r7, pc}

08010cc0 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010cc0:	b580      	push	{r7, lr}
 8010cc2:	b082      	sub	sp, #8
 8010cc4:	af00      	add	r7, sp, #0
 8010cc6:	6078      	str	r0, [r7, #4]
 8010cc8:	460b      	mov	r3, r1
 8010cca:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8010ccc:	687b      	ldr	r3, [r7, #4]
 8010cce:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8010cd2:	78fa      	ldrb	r2, [r7, #3]
 8010cd4:	4611      	mov	r1, r2
 8010cd6:	4618      	mov	r0, r3
 8010cd8:	f7f4 fb4d 	bl	8005376 <HAL_PCD_EP_GetRxCount>
 8010cdc:	4603      	mov	r3, r0
}
 8010cde:	4618      	mov	r0, r3
 8010ce0:	3708      	adds	r7, #8
 8010ce2:	46bd      	mov	sp, r7
 8010ce4:	bd80      	pop	{r7, pc}
	...

08010ce8 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010ce8:	b580      	push	{r7, lr}
 8010cea:	b082      	sub	sp, #8
 8010cec:	af00      	add	r7, sp, #0
 8010cee:	6078      	str	r0, [r7, #4]
 8010cf0:	460b      	mov	r3, r1
 8010cf2:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 8010cf4:	78fb      	ldrb	r3, [r7, #3]
 8010cf6:	2b00      	cmp	r3, #0
 8010cf8:	d002      	beq.n	8010d00 <HAL_PCDEx_LPM_Callback+0x18>
 8010cfa:	2b01      	cmp	r3, #1
 8010cfc:	d013      	beq.n	8010d26 <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 8010cfe:	e023      	b.n	8010d48 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 8010d00:	687b      	ldr	r3, [r7, #4]
 8010d02:	699b      	ldr	r3, [r3, #24]
 8010d04:	2b00      	cmp	r3, #0
 8010d06:	d007      	beq.n	8010d18 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8010d08:	f000 f83c 	bl	8010d84 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8010d0c:	4b10      	ldr	r3, [pc, #64]	; (8010d50 <HAL_PCDEx_LPM_Callback+0x68>)
 8010d0e:	691b      	ldr	r3, [r3, #16]
 8010d10:	4a0f      	ldr	r2, [pc, #60]	; (8010d50 <HAL_PCDEx_LPM_Callback+0x68>)
 8010d12:	f023 0306 	bic.w	r3, r3, #6
 8010d16:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 8010d18:	687b      	ldr	r3, [r7, #4]
 8010d1a:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8010d1e:	4618      	mov	r0, r3
 8010d20:	f7fc fbf4 	bl	800d50c <USBD_LL_Resume>
    break;
 8010d24:	e010      	b.n	8010d48 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 8010d26:	687b      	ldr	r3, [r7, #4]
 8010d28:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8010d2c:	4618      	mov	r0, r3
 8010d2e:	f7fc fbd7 	bl	800d4e0 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8010d32:	687b      	ldr	r3, [r7, #4]
 8010d34:	699b      	ldr	r3, [r3, #24]
 8010d36:	2b00      	cmp	r3, #0
 8010d38:	d005      	beq.n	8010d46 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8010d3a:	4b05      	ldr	r3, [pc, #20]	; (8010d50 <HAL_PCDEx_LPM_Callback+0x68>)
 8010d3c:	691b      	ldr	r3, [r3, #16]
 8010d3e:	4a04      	ldr	r2, [pc, #16]	; (8010d50 <HAL_PCDEx_LPM_Callback+0x68>)
 8010d40:	f043 0306 	orr.w	r3, r3, #6
 8010d44:	6113      	str	r3, [r2, #16]
    break;
 8010d46:	bf00      	nop
}
 8010d48:	bf00      	nop
 8010d4a:	3708      	adds	r7, #8
 8010d4c:	46bd      	mov	sp, r7
 8010d4e:	bd80      	pop	{r7, pc}
 8010d50:	e000ed00 	.word	0xe000ed00

08010d54 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8010d54:	b480      	push	{r7}
 8010d56:	b083      	sub	sp, #12
 8010d58:	af00      	add	r7, sp, #0
 8010d5a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8010d5c:	4b03      	ldr	r3, [pc, #12]	; (8010d6c <USBD_static_malloc+0x18>)
}
 8010d5e:	4618      	mov	r0, r3
 8010d60:	370c      	adds	r7, #12
 8010d62:	46bd      	mov	sp, r7
 8010d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d68:	4770      	bx	lr
 8010d6a:	bf00      	nop
 8010d6c:	20003240 	.word	0x20003240

08010d70 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8010d70:	b480      	push	{r7}
 8010d72:	b083      	sub	sp, #12
 8010d74:	af00      	add	r7, sp, #0
 8010d76:	6078      	str	r0, [r7, #4]

}
 8010d78:	bf00      	nop
 8010d7a:	370c      	adds	r7, #12
 8010d7c:	46bd      	mov	sp, r7
 8010d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d82:	4770      	bx	lr

08010d84 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8010d84:	b580      	push	{r7, lr}
 8010d86:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8010d88:	f7f0 ff34 	bl	8001bf4 <SystemClock_Config>
}
 8010d8c:	bf00      	nop
 8010d8e:	bd80      	pop	{r7, pc}

08010d90 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8010d90:	b480      	push	{r7}
 8010d92:	b085      	sub	sp, #20
 8010d94:	af00      	add	r7, sp, #0
 8010d96:	4603      	mov	r3, r0
 8010d98:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010d9a:	2300      	movs	r3, #0
 8010d9c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8010d9e:	79fb      	ldrb	r3, [r7, #7]
 8010da0:	2b03      	cmp	r3, #3
 8010da2:	d817      	bhi.n	8010dd4 <USBD_Get_USB_Status+0x44>
 8010da4:	a201      	add	r2, pc, #4	; (adr r2, 8010dac <USBD_Get_USB_Status+0x1c>)
 8010da6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010daa:	bf00      	nop
 8010dac:	08010dbd 	.word	0x08010dbd
 8010db0:	08010dc3 	.word	0x08010dc3
 8010db4:	08010dc9 	.word	0x08010dc9
 8010db8:	08010dcf 	.word	0x08010dcf
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8010dbc:	2300      	movs	r3, #0
 8010dbe:	73fb      	strb	r3, [r7, #15]
    break;
 8010dc0:	e00b      	b.n	8010dda <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8010dc2:	2303      	movs	r3, #3
 8010dc4:	73fb      	strb	r3, [r7, #15]
    break;
 8010dc6:	e008      	b.n	8010dda <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8010dc8:	2301      	movs	r3, #1
 8010dca:	73fb      	strb	r3, [r7, #15]
    break;
 8010dcc:	e005      	b.n	8010dda <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8010dce:	2303      	movs	r3, #3
 8010dd0:	73fb      	strb	r3, [r7, #15]
    break;
 8010dd2:	e002      	b.n	8010dda <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8010dd4:	2303      	movs	r3, #3
 8010dd6:	73fb      	strb	r3, [r7, #15]
    break;
 8010dd8:	bf00      	nop
  }
  return usb_status;
 8010dda:	7bfb      	ldrb	r3, [r7, #15]
}
 8010ddc:	4618      	mov	r0, r3
 8010dde:	3714      	adds	r7, #20
 8010de0:	46bd      	mov	sp, r7
 8010de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010de6:	4770      	bx	lr

08010de8 <__cvt>:
 8010de8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010dec:	ec55 4b10 	vmov	r4, r5, d0
 8010df0:	2d00      	cmp	r5, #0
 8010df2:	460e      	mov	r6, r1
 8010df4:	4619      	mov	r1, r3
 8010df6:	462b      	mov	r3, r5
 8010df8:	bfbb      	ittet	lt
 8010dfa:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8010dfe:	461d      	movlt	r5, r3
 8010e00:	2300      	movge	r3, #0
 8010e02:	232d      	movlt	r3, #45	; 0x2d
 8010e04:	700b      	strb	r3, [r1, #0]
 8010e06:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010e08:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8010e0c:	4691      	mov	r9, r2
 8010e0e:	f023 0820 	bic.w	r8, r3, #32
 8010e12:	bfbc      	itt	lt
 8010e14:	4622      	movlt	r2, r4
 8010e16:	4614      	movlt	r4, r2
 8010e18:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8010e1c:	d005      	beq.n	8010e2a <__cvt+0x42>
 8010e1e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8010e22:	d100      	bne.n	8010e26 <__cvt+0x3e>
 8010e24:	3601      	adds	r6, #1
 8010e26:	2102      	movs	r1, #2
 8010e28:	e000      	b.n	8010e2c <__cvt+0x44>
 8010e2a:	2103      	movs	r1, #3
 8010e2c:	ab03      	add	r3, sp, #12
 8010e2e:	9301      	str	r3, [sp, #4]
 8010e30:	ab02      	add	r3, sp, #8
 8010e32:	9300      	str	r3, [sp, #0]
 8010e34:	ec45 4b10 	vmov	d0, r4, r5
 8010e38:	4653      	mov	r3, sl
 8010e3a:	4632      	mov	r2, r6
 8010e3c:	f000 ff9c 	bl	8011d78 <_dtoa_r>
 8010e40:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8010e44:	4607      	mov	r7, r0
 8010e46:	d102      	bne.n	8010e4e <__cvt+0x66>
 8010e48:	f019 0f01 	tst.w	r9, #1
 8010e4c:	d022      	beq.n	8010e94 <__cvt+0xac>
 8010e4e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8010e52:	eb07 0906 	add.w	r9, r7, r6
 8010e56:	d110      	bne.n	8010e7a <__cvt+0x92>
 8010e58:	783b      	ldrb	r3, [r7, #0]
 8010e5a:	2b30      	cmp	r3, #48	; 0x30
 8010e5c:	d10a      	bne.n	8010e74 <__cvt+0x8c>
 8010e5e:	2200      	movs	r2, #0
 8010e60:	2300      	movs	r3, #0
 8010e62:	4620      	mov	r0, r4
 8010e64:	4629      	mov	r1, r5
 8010e66:	f7ef fe57 	bl	8000b18 <__aeabi_dcmpeq>
 8010e6a:	b918      	cbnz	r0, 8010e74 <__cvt+0x8c>
 8010e6c:	f1c6 0601 	rsb	r6, r6, #1
 8010e70:	f8ca 6000 	str.w	r6, [sl]
 8010e74:	f8da 3000 	ldr.w	r3, [sl]
 8010e78:	4499      	add	r9, r3
 8010e7a:	2200      	movs	r2, #0
 8010e7c:	2300      	movs	r3, #0
 8010e7e:	4620      	mov	r0, r4
 8010e80:	4629      	mov	r1, r5
 8010e82:	f7ef fe49 	bl	8000b18 <__aeabi_dcmpeq>
 8010e86:	b108      	cbz	r0, 8010e8c <__cvt+0xa4>
 8010e88:	f8cd 900c 	str.w	r9, [sp, #12]
 8010e8c:	2230      	movs	r2, #48	; 0x30
 8010e8e:	9b03      	ldr	r3, [sp, #12]
 8010e90:	454b      	cmp	r3, r9
 8010e92:	d307      	bcc.n	8010ea4 <__cvt+0xbc>
 8010e94:	9b03      	ldr	r3, [sp, #12]
 8010e96:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010e98:	1bdb      	subs	r3, r3, r7
 8010e9a:	4638      	mov	r0, r7
 8010e9c:	6013      	str	r3, [r2, #0]
 8010e9e:	b004      	add	sp, #16
 8010ea0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010ea4:	1c59      	adds	r1, r3, #1
 8010ea6:	9103      	str	r1, [sp, #12]
 8010ea8:	701a      	strb	r2, [r3, #0]
 8010eaa:	e7f0      	b.n	8010e8e <__cvt+0xa6>

08010eac <__exponent>:
 8010eac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010eae:	4603      	mov	r3, r0
 8010eb0:	2900      	cmp	r1, #0
 8010eb2:	bfb8      	it	lt
 8010eb4:	4249      	neglt	r1, r1
 8010eb6:	f803 2b02 	strb.w	r2, [r3], #2
 8010eba:	bfb4      	ite	lt
 8010ebc:	222d      	movlt	r2, #45	; 0x2d
 8010ebe:	222b      	movge	r2, #43	; 0x2b
 8010ec0:	2909      	cmp	r1, #9
 8010ec2:	7042      	strb	r2, [r0, #1]
 8010ec4:	dd2a      	ble.n	8010f1c <__exponent+0x70>
 8010ec6:	f10d 0207 	add.w	r2, sp, #7
 8010eca:	4617      	mov	r7, r2
 8010ecc:	260a      	movs	r6, #10
 8010ece:	4694      	mov	ip, r2
 8010ed0:	fb91 f5f6 	sdiv	r5, r1, r6
 8010ed4:	fb06 1415 	mls	r4, r6, r5, r1
 8010ed8:	3430      	adds	r4, #48	; 0x30
 8010eda:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8010ede:	460c      	mov	r4, r1
 8010ee0:	2c63      	cmp	r4, #99	; 0x63
 8010ee2:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 8010ee6:	4629      	mov	r1, r5
 8010ee8:	dcf1      	bgt.n	8010ece <__exponent+0x22>
 8010eea:	3130      	adds	r1, #48	; 0x30
 8010eec:	f1ac 0402 	sub.w	r4, ip, #2
 8010ef0:	f802 1c01 	strb.w	r1, [r2, #-1]
 8010ef4:	1c41      	adds	r1, r0, #1
 8010ef6:	4622      	mov	r2, r4
 8010ef8:	42ba      	cmp	r2, r7
 8010efa:	d30a      	bcc.n	8010f12 <__exponent+0x66>
 8010efc:	f10d 0209 	add.w	r2, sp, #9
 8010f00:	eba2 020c 	sub.w	r2, r2, ip
 8010f04:	42bc      	cmp	r4, r7
 8010f06:	bf88      	it	hi
 8010f08:	2200      	movhi	r2, #0
 8010f0a:	4413      	add	r3, r2
 8010f0c:	1a18      	subs	r0, r3, r0
 8010f0e:	b003      	add	sp, #12
 8010f10:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010f12:	f812 5b01 	ldrb.w	r5, [r2], #1
 8010f16:	f801 5f01 	strb.w	r5, [r1, #1]!
 8010f1a:	e7ed      	b.n	8010ef8 <__exponent+0x4c>
 8010f1c:	2330      	movs	r3, #48	; 0x30
 8010f1e:	3130      	adds	r1, #48	; 0x30
 8010f20:	7083      	strb	r3, [r0, #2]
 8010f22:	70c1      	strb	r1, [r0, #3]
 8010f24:	1d03      	adds	r3, r0, #4
 8010f26:	e7f1      	b.n	8010f0c <__exponent+0x60>

08010f28 <_printf_float>:
 8010f28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010f2c:	ed2d 8b02 	vpush	{d8}
 8010f30:	b08d      	sub	sp, #52	; 0x34
 8010f32:	460c      	mov	r4, r1
 8010f34:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8010f38:	4616      	mov	r6, r2
 8010f3a:	461f      	mov	r7, r3
 8010f3c:	4605      	mov	r5, r0
 8010f3e:	f000 fdb7 	bl	8011ab0 <_localeconv_r>
 8010f42:	f8d0 a000 	ldr.w	sl, [r0]
 8010f46:	4650      	mov	r0, sl
 8010f48:	f7ef f9ba 	bl	80002c0 <strlen>
 8010f4c:	2300      	movs	r3, #0
 8010f4e:	930a      	str	r3, [sp, #40]	; 0x28
 8010f50:	6823      	ldr	r3, [r4, #0]
 8010f52:	9305      	str	r3, [sp, #20]
 8010f54:	f8d8 3000 	ldr.w	r3, [r8]
 8010f58:	f894 b018 	ldrb.w	fp, [r4, #24]
 8010f5c:	3307      	adds	r3, #7
 8010f5e:	f023 0307 	bic.w	r3, r3, #7
 8010f62:	f103 0208 	add.w	r2, r3, #8
 8010f66:	f8c8 2000 	str.w	r2, [r8]
 8010f6a:	e9d3 8900 	ldrd	r8, r9, [r3]
 8010f6e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8010f72:	9307      	str	r3, [sp, #28]
 8010f74:	f8cd 8018 	str.w	r8, [sp, #24]
 8010f78:	ee08 0a10 	vmov	s16, r0
 8010f7c:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8010f80:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010f84:	4b9e      	ldr	r3, [pc, #632]	; (8011200 <_printf_float+0x2d8>)
 8010f86:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010f8a:	f7ef fdf7 	bl	8000b7c <__aeabi_dcmpun>
 8010f8e:	bb88      	cbnz	r0, 8010ff4 <_printf_float+0xcc>
 8010f90:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010f94:	4b9a      	ldr	r3, [pc, #616]	; (8011200 <_printf_float+0x2d8>)
 8010f96:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010f9a:	f7ef fdd1 	bl	8000b40 <__aeabi_dcmple>
 8010f9e:	bb48      	cbnz	r0, 8010ff4 <_printf_float+0xcc>
 8010fa0:	2200      	movs	r2, #0
 8010fa2:	2300      	movs	r3, #0
 8010fa4:	4640      	mov	r0, r8
 8010fa6:	4649      	mov	r1, r9
 8010fa8:	f7ef fdc0 	bl	8000b2c <__aeabi_dcmplt>
 8010fac:	b110      	cbz	r0, 8010fb4 <_printf_float+0x8c>
 8010fae:	232d      	movs	r3, #45	; 0x2d
 8010fb0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010fb4:	4a93      	ldr	r2, [pc, #588]	; (8011204 <_printf_float+0x2dc>)
 8010fb6:	4b94      	ldr	r3, [pc, #592]	; (8011208 <_printf_float+0x2e0>)
 8010fb8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8010fbc:	bf94      	ite	ls
 8010fbe:	4690      	movls	r8, r2
 8010fc0:	4698      	movhi	r8, r3
 8010fc2:	2303      	movs	r3, #3
 8010fc4:	6123      	str	r3, [r4, #16]
 8010fc6:	9b05      	ldr	r3, [sp, #20]
 8010fc8:	f023 0304 	bic.w	r3, r3, #4
 8010fcc:	6023      	str	r3, [r4, #0]
 8010fce:	f04f 0900 	mov.w	r9, #0
 8010fd2:	9700      	str	r7, [sp, #0]
 8010fd4:	4633      	mov	r3, r6
 8010fd6:	aa0b      	add	r2, sp, #44	; 0x2c
 8010fd8:	4621      	mov	r1, r4
 8010fda:	4628      	mov	r0, r5
 8010fdc:	f000 f9da 	bl	8011394 <_printf_common>
 8010fe0:	3001      	adds	r0, #1
 8010fe2:	f040 8090 	bne.w	8011106 <_printf_float+0x1de>
 8010fe6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010fea:	b00d      	add	sp, #52	; 0x34
 8010fec:	ecbd 8b02 	vpop	{d8}
 8010ff0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010ff4:	4642      	mov	r2, r8
 8010ff6:	464b      	mov	r3, r9
 8010ff8:	4640      	mov	r0, r8
 8010ffa:	4649      	mov	r1, r9
 8010ffc:	f7ef fdbe 	bl	8000b7c <__aeabi_dcmpun>
 8011000:	b140      	cbz	r0, 8011014 <_printf_float+0xec>
 8011002:	464b      	mov	r3, r9
 8011004:	2b00      	cmp	r3, #0
 8011006:	bfbc      	itt	lt
 8011008:	232d      	movlt	r3, #45	; 0x2d
 801100a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 801100e:	4a7f      	ldr	r2, [pc, #508]	; (801120c <_printf_float+0x2e4>)
 8011010:	4b7f      	ldr	r3, [pc, #508]	; (8011210 <_printf_float+0x2e8>)
 8011012:	e7d1      	b.n	8010fb8 <_printf_float+0x90>
 8011014:	6863      	ldr	r3, [r4, #4]
 8011016:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 801101a:	9206      	str	r2, [sp, #24]
 801101c:	1c5a      	adds	r2, r3, #1
 801101e:	d13f      	bne.n	80110a0 <_printf_float+0x178>
 8011020:	2306      	movs	r3, #6
 8011022:	6063      	str	r3, [r4, #4]
 8011024:	9b05      	ldr	r3, [sp, #20]
 8011026:	6861      	ldr	r1, [r4, #4]
 8011028:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 801102c:	2300      	movs	r3, #0
 801102e:	9303      	str	r3, [sp, #12]
 8011030:	ab0a      	add	r3, sp, #40	; 0x28
 8011032:	e9cd b301 	strd	fp, r3, [sp, #4]
 8011036:	ab09      	add	r3, sp, #36	; 0x24
 8011038:	ec49 8b10 	vmov	d0, r8, r9
 801103c:	9300      	str	r3, [sp, #0]
 801103e:	6022      	str	r2, [r4, #0]
 8011040:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8011044:	4628      	mov	r0, r5
 8011046:	f7ff fecf 	bl	8010de8 <__cvt>
 801104a:	9b06      	ldr	r3, [sp, #24]
 801104c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801104e:	2b47      	cmp	r3, #71	; 0x47
 8011050:	4680      	mov	r8, r0
 8011052:	d108      	bne.n	8011066 <_printf_float+0x13e>
 8011054:	1cc8      	adds	r0, r1, #3
 8011056:	db02      	blt.n	801105e <_printf_float+0x136>
 8011058:	6863      	ldr	r3, [r4, #4]
 801105a:	4299      	cmp	r1, r3
 801105c:	dd41      	ble.n	80110e2 <_printf_float+0x1ba>
 801105e:	f1ab 0302 	sub.w	r3, fp, #2
 8011062:	fa5f fb83 	uxtb.w	fp, r3
 8011066:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801106a:	d820      	bhi.n	80110ae <_printf_float+0x186>
 801106c:	3901      	subs	r1, #1
 801106e:	465a      	mov	r2, fp
 8011070:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8011074:	9109      	str	r1, [sp, #36]	; 0x24
 8011076:	f7ff ff19 	bl	8010eac <__exponent>
 801107a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801107c:	1813      	adds	r3, r2, r0
 801107e:	2a01      	cmp	r2, #1
 8011080:	4681      	mov	r9, r0
 8011082:	6123      	str	r3, [r4, #16]
 8011084:	dc02      	bgt.n	801108c <_printf_float+0x164>
 8011086:	6822      	ldr	r2, [r4, #0]
 8011088:	07d2      	lsls	r2, r2, #31
 801108a:	d501      	bpl.n	8011090 <_printf_float+0x168>
 801108c:	3301      	adds	r3, #1
 801108e:	6123      	str	r3, [r4, #16]
 8011090:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8011094:	2b00      	cmp	r3, #0
 8011096:	d09c      	beq.n	8010fd2 <_printf_float+0xaa>
 8011098:	232d      	movs	r3, #45	; 0x2d
 801109a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801109e:	e798      	b.n	8010fd2 <_printf_float+0xaa>
 80110a0:	9a06      	ldr	r2, [sp, #24]
 80110a2:	2a47      	cmp	r2, #71	; 0x47
 80110a4:	d1be      	bne.n	8011024 <_printf_float+0xfc>
 80110a6:	2b00      	cmp	r3, #0
 80110a8:	d1bc      	bne.n	8011024 <_printf_float+0xfc>
 80110aa:	2301      	movs	r3, #1
 80110ac:	e7b9      	b.n	8011022 <_printf_float+0xfa>
 80110ae:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80110b2:	d118      	bne.n	80110e6 <_printf_float+0x1be>
 80110b4:	2900      	cmp	r1, #0
 80110b6:	6863      	ldr	r3, [r4, #4]
 80110b8:	dd0b      	ble.n	80110d2 <_printf_float+0x1aa>
 80110ba:	6121      	str	r1, [r4, #16]
 80110bc:	b913      	cbnz	r3, 80110c4 <_printf_float+0x19c>
 80110be:	6822      	ldr	r2, [r4, #0]
 80110c0:	07d0      	lsls	r0, r2, #31
 80110c2:	d502      	bpl.n	80110ca <_printf_float+0x1a2>
 80110c4:	3301      	adds	r3, #1
 80110c6:	440b      	add	r3, r1
 80110c8:	6123      	str	r3, [r4, #16]
 80110ca:	65a1      	str	r1, [r4, #88]	; 0x58
 80110cc:	f04f 0900 	mov.w	r9, #0
 80110d0:	e7de      	b.n	8011090 <_printf_float+0x168>
 80110d2:	b913      	cbnz	r3, 80110da <_printf_float+0x1b2>
 80110d4:	6822      	ldr	r2, [r4, #0]
 80110d6:	07d2      	lsls	r2, r2, #31
 80110d8:	d501      	bpl.n	80110de <_printf_float+0x1b6>
 80110da:	3302      	adds	r3, #2
 80110dc:	e7f4      	b.n	80110c8 <_printf_float+0x1a0>
 80110de:	2301      	movs	r3, #1
 80110e0:	e7f2      	b.n	80110c8 <_printf_float+0x1a0>
 80110e2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80110e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80110e8:	4299      	cmp	r1, r3
 80110ea:	db05      	blt.n	80110f8 <_printf_float+0x1d0>
 80110ec:	6823      	ldr	r3, [r4, #0]
 80110ee:	6121      	str	r1, [r4, #16]
 80110f0:	07d8      	lsls	r0, r3, #31
 80110f2:	d5ea      	bpl.n	80110ca <_printf_float+0x1a2>
 80110f4:	1c4b      	adds	r3, r1, #1
 80110f6:	e7e7      	b.n	80110c8 <_printf_float+0x1a0>
 80110f8:	2900      	cmp	r1, #0
 80110fa:	bfd4      	ite	le
 80110fc:	f1c1 0202 	rsble	r2, r1, #2
 8011100:	2201      	movgt	r2, #1
 8011102:	4413      	add	r3, r2
 8011104:	e7e0      	b.n	80110c8 <_printf_float+0x1a0>
 8011106:	6823      	ldr	r3, [r4, #0]
 8011108:	055a      	lsls	r2, r3, #21
 801110a:	d407      	bmi.n	801111c <_printf_float+0x1f4>
 801110c:	6923      	ldr	r3, [r4, #16]
 801110e:	4642      	mov	r2, r8
 8011110:	4631      	mov	r1, r6
 8011112:	4628      	mov	r0, r5
 8011114:	47b8      	blx	r7
 8011116:	3001      	adds	r0, #1
 8011118:	d12c      	bne.n	8011174 <_printf_float+0x24c>
 801111a:	e764      	b.n	8010fe6 <_printf_float+0xbe>
 801111c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8011120:	f240 80e0 	bls.w	80112e4 <_printf_float+0x3bc>
 8011124:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8011128:	2200      	movs	r2, #0
 801112a:	2300      	movs	r3, #0
 801112c:	f7ef fcf4 	bl	8000b18 <__aeabi_dcmpeq>
 8011130:	2800      	cmp	r0, #0
 8011132:	d034      	beq.n	801119e <_printf_float+0x276>
 8011134:	4a37      	ldr	r2, [pc, #220]	; (8011214 <_printf_float+0x2ec>)
 8011136:	2301      	movs	r3, #1
 8011138:	4631      	mov	r1, r6
 801113a:	4628      	mov	r0, r5
 801113c:	47b8      	blx	r7
 801113e:	3001      	adds	r0, #1
 8011140:	f43f af51 	beq.w	8010fe6 <_printf_float+0xbe>
 8011144:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8011148:	429a      	cmp	r2, r3
 801114a:	db02      	blt.n	8011152 <_printf_float+0x22a>
 801114c:	6823      	ldr	r3, [r4, #0]
 801114e:	07d8      	lsls	r0, r3, #31
 8011150:	d510      	bpl.n	8011174 <_printf_float+0x24c>
 8011152:	ee18 3a10 	vmov	r3, s16
 8011156:	4652      	mov	r2, sl
 8011158:	4631      	mov	r1, r6
 801115a:	4628      	mov	r0, r5
 801115c:	47b8      	blx	r7
 801115e:	3001      	adds	r0, #1
 8011160:	f43f af41 	beq.w	8010fe6 <_printf_float+0xbe>
 8011164:	f04f 0800 	mov.w	r8, #0
 8011168:	f104 091a 	add.w	r9, r4, #26
 801116c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801116e:	3b01      	subs	r3, #1
 8011170:	4543      	cmp	r3, r8
 8011172:	dc09      	bgt.n	8011188 <_printf_float+0x260>
 8011174:	6823      	ldr	r3, [r4, #0]
 8011176:	079b      	lsls	r3, r3, #30
 8011178:	f100 8107 	bmi.w	801138a <_printf_float+0x462>
 801117c:	68e0      	ldr	r0, [r4, #12]
 801117e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011180:	4298      	cmp	r0, r3
 8011182:	bfb8      	it	lt
 8011184:	4618      	movlt	r0, r3
 8011186:	e730      	b.n	8010fea <_printf_float+0xc2>
 8011188:	2301      	movs	r3, #1
 801118a:	464a      	mov	r2, r9
 801118c:	4631      	mov	r1, r6
 801118e:	4628      	mov	r0, r5
 8011190:	47b8      	blx	r7
 8011192:	3001      	adds	r0, #1
 8011194:	f43f af27 	beq.w	8010fe6 <_printf_float+0xbe>
 8011198:	f108 0801 	add.w	r8, r8, #1
 801119c:	e7e6      	b.n	801116c <_printf_float+0x244>
 801119e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80111a0:	2b00      	cmp	r3, #0
 80111a2:	dc39      	bgt.n	8011218 <_printf_float+0x2f0>
 80111a4:	4a1b      	ldr	r2, [pc, #108]	; (8011214 <_printf_float+0x2ec>)
 80111a6:	2301      	movs	r3, #1
 80111a8:	4631      	mov	r1, r6
 80111aa:	4628      	mov	r0, r5
 80111ac:	47b8      	blx	r7
 80111ae:	3001      	adds	r0, #1
 80111b0:	f43f af19 	beq.w	8010fe6 <_printf_float+0xbe>
 80111b4:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80111b8:	4313      	orrs	r3, r2
 80111ba:	d102      	bne.n	80111c2 <_printf_float+0x29a>
 80111bc:	6823      	ldr	r3, [r4, #0]
 80111be:	07d9      	lsls	r1, r3, #31
 80111c0:	d5d8      	bpl.n	8011174 <_printf_float+0x24c>
 80111c2:	ee18 3a10 	vmov	r3, s16
 80111c6:	4652      	mov	r2, sl
 80111c8:	4631      	mov	r1, r6
 80111ca:	4628      	mov	r0, r5
 80111cc:	47b8      	blx	r7
 80111ce:	3001      	adds	r0, #1
 80111d0:	f43f af09 	beq.w	8010fe6 <_printf_float+0xbe>
 80111d4:	f04f 0900 	mov.w	r9, #0
 80111d8:	f104 0a1a 	add.w	sl, r4, #26
 80111dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80111de:	425b      	negs	r3, r3
 80111e0:	454b      	cmp	r3, r9
 80111e2:	dc01      	bgt.n	80111e8 <_printf_float+0x2c0>
 80111e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80111e6:	e792      	b.n	801110e <_printf_float+0x1e6>
 80111e8:	2301      	movs	r3, #1
 80111ea:	4652      	mov	r2, sl
 80111ec:	4631      	mov	r1, r6
 80111ee:	4628      	mov	r0, r5
 80111f0:	47b8      	blx	r7
 80111f2:	3001      	adds	r0, #1
 80111f4:	f43f aef7 	beq.w	8010fe6 <_printf_float+0xbe>
 80111f8:	f109 0901 	add.w	r9, r9, #1
 80111fc:	e7ee      	b.n	80111dc <_printf_float+0x2b4>
 80111fe:	bf00      	nop
 8011200:	7fefffff 	.word	0x7fefffff
 8011204:	08013be0 	.word	0x08013be0
 8011208:	08013be4 	.word	0x08013be4
 801120c:	08013be8 	.word	0x08013be8
 8011210:	08013bec 	.word	0x08013bec
 8011214:	08013bf0 	.word	0x08013bf0
 8011218:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801121a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801121c:	429a      	cmp	r2, r3
 801121e:	bfa8      	it	ge
 8011220:	461a      	movge	r2, r3
 8011222:	2a00      	cmp	r2, #0
 8011224:	4691      	mov	r9, r2
 8011226:	dc37      	bgt.n	8011298 <_printf_float+0x370>
 8011228:	f04f 0b00 	mov.w	fp, #0
 801122c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8011230:	f104 021a 	add.w	r2, r4, #26
 8011234:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8011236:	9305      	str	r3, [sp, #20]
 8011238:	eba3 0309 	sub.w	r3, r3, r9
 801123c:	455b      	cmp	r3, fp
 801123e:	dc33      	bgt.n	80112a8 <_printf_float+0x380>
 8011240:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8011244:	429a      	cmp	r2, r3
 8011246:	db3b      	blt.n	80112c0 <_printf_float+0x398>
 8011248:	6823      	ldr	r3, [r4, #0]
 801124a:	07da      	lsls	r2, r3, #31
 801124c:	d438      	bmi.n	80112c0 <_printf_float+0x398>
 801124e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8011252:	eba2 0903 	sub.w	r9, r2, r3
 8011256:	9b05      	ldr	r3, [sp, #20]
 8011258:	1ad2      	subs	r2, r2, r3
 801125a:	4591      	cmp	r9, r2
 801125c:	bfa8      	it	ge
 801125e:	4691      	movge	r9, r2
 8011260:	f1b9 0f00 	cmp.w	r9, #0
 8011264:	dc35      	bgt.n	80112d2 <_printf_float+0x3aa>
 8011266:	f04f 0800 	mov.w	r8, #0
 801126a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801126e:	f104 0a1a 	add.w	sl, r4, #26
 8011272:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8011276:	1a9b      	subs	r3, r3, r2
 8011278:	eba3 0309 	sub.w	r3, r3, r9
 801127c:	4543      	cmp	r3, r8
 801127e:	f77f af79 	ble.w	8011174 <_printf_float+0x24c>
 8011282:	2301      	movs	r3, #1
 8011284:	4652      	mov	r2, sl
 8011286:	4631      	mov	r1, r6
 8011288:	4628      	mov	r0, r5
 801128a:	47b8      	blx	r7
 801128c:	3001      	adds	r0, #1
 801128e:	f43f aeaa 	beq.w	8010fe6 <_printf_float+0xbe>
 8011292:	f108 0801 	add.w	r8, r8, #1
 8011296:	e7ec      	b.n	8011272 <_printf_float+0x34a>
 8011298:	4613      	mov	r3, r2
 801129a:	4631      	mov	r1, r6
 801129c:	4642      	mov	r2, r8
 801129e:	4628      	mov	r0, r5
 80112a0:	47b8      	blx	r7
 80112a2:	3001      	adds	r0, #1
 80112a4:	d1c0      	bne.n	8011228 <_printf_float+0x300>
 80112a6:	e69e      	b.n	8010fe6 <_printf_float+0xbe>
 80112a8:	2301      	movs	r3, #1
 80112aa:	4631      	mov	r1, r6
 80112ac:	4628      	mov	r0, r5
 80112ae:	9205      	str	r2, [sp, #20]
 80112b0:	47b8      	blx	r7
 80112b2:	3001      	adds	r0, #1
 80112b4:	f43f ae97 	beq.w	8010fe6 <_printf_float+0xbe>
 80112b8:	9a05      	ldr	r2, [sp, #20]
 80112ba:	f10b 0b01 	add.w	fp, fp, #1
 80112be:	e7b9      	b.n	8011234 <_printf_float+0x30c>
 80112c0:	ee18 3a10 	vmov	r3, s16
 80112c4:	4652      	mov	r2, sl
 80112c6:	4631      	mov	r1, r6
 80112c8:	4628      	mov	r0, r5
 80112ca:	47b8      	blx	r7
 80112cc:	3001      	adds	r0, #1
 80112ce:	d1be      	bne.n	801124e <_printf_float+0x326>
 80112d0:	e689      	b.n	8010fe6 <_printf_float+0xbe>
 80112d2:	9a05      	ldr	r2, [sp, #20]
 80112d4:	464b      	mov	r3, r9
 80112d6:	4442      	add	r2, r8
 80112d8:	4631      	mov	r1, r6
 80112da:	4628      	mov	r0, r5
 80112dc:	47b8      	blx	r7
 80112de:	3001      	adds	r0, #1
 80112e0:	d1c1      	bne.n	8011266 <_printf_float+0x33e>
 80112e2:	e680      	b.n	8010fe6 <_printf_float+0xbe>
 80112e4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80112e6:	2a01      	cmp	r2, #1
 80112e8:	dc01      	bgt.n	80112ee <_printf_float+0x3c6>
 80112ea:	07db      	lsls	r3, r3, #31
 80112ec:	d53a      	bpl.n	8011364 <_printf_float+0x43c>
 80112ee:	2301      	movs	r3, #1
 80112f0:	4642      	mov	r2, r8
 80112f2:	4631      	mov	r1, r6
 80112f4:	4628      	mov	r0, r5
 80112f6:	47b8      	blx	r7
 80112f8:	3001      	adds	r0, #1
 80112fa:	f43f ae74 	beq.w	8010fe6 <_printf_float+0xbe>
 80112fe:	ee18 3a10 	vmov	r3, s16
 8011302:	4652      	mov	r2, sl
 8011304:	4631      	mov	r1, r6
 8011306:	4628      	mov	r0, r5
 8011308:	47b8      	blx	r7
 801130a:	3001      	adds	r0, #1
 801130c:	f43f ae6b 	beq.w	8010fe6 <_printf_float+0xbe>
 8011310:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8011314:	2200      	movs	r2, #0
 8011316:	2300      	movs	r3, #0
 8011318:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 801131c:	f7ef fbfc 	bl	8000b18 <__aeabi_dcmpeq>
 8011320:	b9d8      	cbnz	r0, 801135a <_printf_float+0x432>
 8011322:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8011326:	f108 0201 	add.w	r2, r8, #1
 801132a:	4631      	mov	r1, r6
 801132c:	4628      	mov	r0, r5
 801132e:	47b8      	blx	r7
 8011330:	3001      	adds	r0, #1
 8011332:	d10e      	bne.n	8011352 <_printf_float+0x42a>
 8011334:	e657      	b.n	8010fe6 <_printf_float+0xbe>
 8011336:	2301      	movs	r3, #1
 8011338:	4652      	mov	r2, sl
 801133a:	4631      	mov	r1, r6
 801133c:	4628      	mov	r0, r5
 801133e:	47b8      	blx	r7
 8011340:	3001      	adds	r0, #1
 8011342:	f43f ae50 	beq.w	8010fe6 <_printf_float+0xbe>
 8011346:	f108 0801 	add.w	r8, r8, #1
 801134a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801134c:	3b01      	subs	r3, #1
 801134e:	4543      	cmp	r3, r8
 8011350:	dcf1      	bgt.n	8011336 <_printf_float+0x40e>
 8011352:	464b      	mov	r3, r9
 8011354:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8011358:	e6da      	b.n	8011110 <_printf_float+0x1e8>
 801135a:	f04f 0800 	mov.w	r8, #0
 801135e:	f104 0a1a 	add.w	sl, r4, #26
 8011362:	e7f2      	b.n	801134a <_printf_float+0x422>
 8011364:	2301      	movs	r3, #1
 8011366:	4642      	mov	r2, r8
 8011368:	e7df      	b.n	801132a <_printf_float+0x402>
 801136a:	2301      	movs	r3, #1
 801136c:	464a      	mov	r2, r9
 801136e:	4631      	mov	r1, r6
 8011370:	4628      	mov	r0, r5
 8011372:	47b8      	blx	r7
 8011374:	3001      	adds	r0, #1
 8011376:	f43f ae36 	beq.w	8010fe6 <_printf_float+0xbe>
 801137a:	f108 0801 	add.w	r8, r8, #1
 801137e:	68e3      	ldr	r3, [r4, #12]
 8011380:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8011382:	1a5b      	subs	r3, r3, r1
 8011384:	4543      	cmp	r3, r8
 8011386:	dcf0      	bgt.n	801136a <_printf_float+0x442>
 8011388:	e6f8      	b.n	801117c <_printf_float+0x254>
 801138a:	f04f 0800 	mov.w	r8, #0
 801138e:	f104 0919 	add.w	r9, r4, #25
 8011392:	e7f4      	b.n	801137e <_printf_float+0x456>

08011394 <_printf_common>:
 8011394:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011398:	4616      	mov	r6, r2
 801139a:	4699      	mov	r9, r3
 801139c:	688a      	ldr	r2, [r1, #8]
 801139e:	690b      	ldr	r3, [r1, #16]
 80113a0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80113a4:	4293      	cmp	r3, r2
 80113a6:	bfb8      	it	lt
 80113a8:	4613      	movlt	r3, r2
 80113aa:	6033      	str	r3, [r6, #0]
 80113ac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80113b0:	4607      	mov	r7, r0
 80113b2:	460c      	mov	r4, r1
 80113b4:	b10a      	cbz	r2, 80113ba <_printf_common+0x26>
 80113b6:	3301      	adds	r3, #1
 80113b8:	6033      	str	r3, [r6, #0]
 80113ba:	6823      	ldr	r3, [r4, #0]
 80113bc:	0699      	lsls	r1, r3, #26
 80113be:	bf42      	ittt	mi
 80113c0:	6833      	ldrmi	r3, [r6, #0]
 80113c2:	3302      	addmi	r3, #2
 80113c4:	6033      	strmi	r3, [r6, #0]
 80113c6:	6825      	ldr	r5, [r4, #0]
 80113c8:	f015 0506 	ands.w	r5, r5, #6
 80113cc:	d106      	bne.n	80113dc <_printf_common+0x48>
 80113ce:	f104 0a19 	add.w	sl, r4, #25
 80113d2:	68e3      	ldr	r3, [r4, #12]
 80113d4:	6832      	ldr	r2, [r6, #0]
 80113d6:	1a9b      	subs	r3, r3, r2
 80113d8:	42ab      	cmp	r3, r5
 80113da:	dc26      	bgt.n	801142a <_printf_common+0x96>
 80113dc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80113e0:	1e13      	subs	r3, r2, #0
 80113e2:	6822      	ldr	r2, [r4, #0]
 80113e4:	bf18      	it	ne
 80113e6:	2301      	movne	r3, #1
 80113e8:	0692      	lsls	r2, r2, #26
 80113ea:	d42b      	bmi.n	8011444 <_printf_common+0xb0>
 80113ec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80113f0:	4649      	mov	r1, r9
 80113f2:	4638      	mov	r0, r7
 80113f4:	47c0      	blx	r8
 80113f6:	3001      	adds	r0, #1
 80113f8:	d01e      	beq.n	8011438 <_printf_common+0xa4>
 80113fa:	6823      	ldr	r3, [r4, #0]
 80113fc:	6922      	ldr	r2, [r4, #16]
 80113fe:	f003 0306 	and.w	r3, r3, #6
 8011402:	2b04      	cmp	r3, #4
 8011404:	bf02      	ittt	eq
 8011406:	68e5      	ldreq	r5, [r4, #12]
 8011408:	6833      	ldreq	r3, [r6, #0]
 801140a:	1aed      	subeq	r5, r5, r3
 801140c:	68a3      	ldr	r3, [r4, #8]
 801140e:	bf0c      	ite	eq
 8011410:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011414:	2500      	movne	r5, #0
 8011416:	4293      	cmp	r3, r2
 8011418:	bfc4      	itt	gt
 801141a:	1a9b      	subgt	r3, r3, r2
 801141c:	18ed      	addgt	r5, r5, r3
 801141e:	2600      	movs	r6, #0
 8011420:	341a      	adds	r4, #26
 8011422:	42b5      	cmp	r5, r6
 8011424:	d11a      	bne.n	801145c <_printf_common+0xc8>
 8011426:	2000      	movs	r0, #0
 8011428:	e008      	b.n	801143c <_printf_common+0xa8>
 801142a:	2301      	movs	r3, #1
 801142c:	4652      	mov	r2, sl
 801142e:	4649      	mov	r1, r9
 8011430:	4638      	mov	r0, r7
 8011432:	47c0      	blx	r8
 8011434:	3001      	adds	r0, #1
 8011436:	d103      	bne.n	8011440 <_printf_common+0xac>
 8011438:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801143c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011440:	3501      	adds	r5, #1
 8011442:	e7c6      	b.n	80113d2 <_printf_common+0x3e>
 8011444:	18e1      	adds	r1, r4, r3
 8011446:	1c5a      	adds	r2, r3, #1
 8011448:	2030      	movs	r0, #48	; 0x30
 801144a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801144e:	4422      	add	r2, r4
 8011450:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8011454:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8011458:	3302      	adds	r3, #2
 801145a:	e7c7      	b.n	80113ec <_printf_common+0x58>
 801145c:	2301      	movs	r3, #1
 801145e:	4622      	mov	r2, r4
 8011460:	4649      	mov	r1, r9
 8011462:	4638      	mov	r0, r7
 8011464:	47c0      	blx	r8
 8011466:	3001      	adds	r0, #1
 8011468:	d0e6      	beq.n	8011438 <_printf_common+0xa4>
 801146a:	3601      	adds	r6, #1
 801146c:	e7d9      	b.n	8011422 <_printf_common+0x8e>
	...

08011470 <_printf_i>:
 8011470:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011474:	7e0f      	ldrb	r7, [r1, #24]
 8011476:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8011478:	2f78      	cmp	r7, #120	; 0x78
 801147a:	4691      	mov	r9, r2
 801147c:	4680      	mov	r8, r0
 801147e:	460c      	mov	r4, r1
 8011480:	469a      	mov	sl, r3
 8011482:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8011486:	d807      	bhi.n	8011498 <_printf_i+0x28>
 8011488:	2f62      	cmp	r7, #98	; 0x62
 801148a:	d80a      	bhi.n	80114a2 <_printf_i+0x32>
 801148c:	2f00      	cmp	r7, #0
 801148e:	f000 80d4 	beq.w	801163a <_printf_i+0x1ca>
 8011492:	2f58      	cmp	r7, #88	; 0x58
 8011494:	f000 80c0 	beq.w	8011618 <_printf_i+0x1a8>
 8011498:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801149c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80114a0:	e03a      	b.n	8011518 <_printf_i+0xa8>
 80114a2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80114a6:	2b15      	cmp	r3, #21
 80114a8:	d8f6      	bhi.n	8011498 <_printf_i+0x28>
 80114aa:	a101      	add	r1, pc, #4	; (adr r1, 80114b0 <_printf_i+0x40>)
 80114ac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80114b0:	08011509 	.word	0x08011509
 80114b4:	0801151d 	.word	0x0801151d
 80114b8:	08011499 	.word	0x08011499
 80114bc:	08011499 	.word	0x08011499
 80114c0:	08011499 	.word	0x08011499
 80114c4:	08011499 	.word	0x08011499
 80114c8:	0801151d 	.word	0x0801151d
 80114cc:	08011499 	.word	0x08011499
 80114d0:	08011499 	.word	0x08011499
 80114d4:	08011499 	.word	0x08011499
 80114d8:	08011499 	.word	0x08011499
 80114dc:	08011621 	.word	0x08011621
 80114e0:	08011549 	.word	0x08011549
 80114e4:	080115db 	.word	0x080115db
 80114e8:	08011499 	.word	0x08011499
 80114ec:	08011499 	.word	0x08011499
 80114f0:	08011643 	.word	0x08011643
 80114f4:	08011499 	.word	0x08011499
 80114f8:	08011549 	.word	0x08011549
 80114fc:	08011499 	.word	0x08011499
 8011500:	08011499 	.word	0x08011499
 8011504:	080115e3 	.word	0x080115e3
 8011508:	682b      	ldr	r3, [r5, #0]
 801150a:	1d1a      	adds	r2, r3, #4
 801150c:	681b      	ldr	r3, [r3, #0]
 801150e:	602a      	str	r2, [r5, #0]
 8011510:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011514:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8011518:	2301      	movs	r3, #1
 801151a:	e09f      	b.n	801165c <_printf_i+0x1ec>
 801151c:	6820      	ldr	r0, [r4, #0]
 801151e:	682b      	ldr	r3, [r5, #0]
 8011520:	0607      	lsls	r7, r0, #24
 8011522:	f103 0104 	add.w	r1, r3, #4
 8011526:	6029      	str	r1, [r5, #0]
 8011528:	d501      	bpl.n	801152e <_printf_i+0xbe>
 801152a:	681e      	ldr	r6, [r3, #0]
 801152c:	e003      	b.n	8011536 <_printf_i+0xc6>
 801152e:	0646      	lsls	r6, r0, #25
 8011530:	d5fb      	bpl.n	801152a <_printf_i+0xba>
 8011532:	f9b3 6000 	ldrsh.w	r6, [r3]
 8011536:	2e00      	cmp	r6, #0
 8011538:	da03      	bge.n	8011542 <_printf_i+0xd2>
 801153a:	232d      	movs	r3, #45	; 0x2d
 801153c:	4276      	negs	r6, r6
 801153e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011542:	485a      	ldr	r0, [pc, #360]	; (80116ac <_printf_i+0x23c>)
 8011544:	230a      	movs	r3, #10
 8011546:	e012      	b.n	801156e <_printf_i+0xfe>
 8011548:	682b      	ldr	r3, [r5, #0]
 801154a:	6820      	ldr	r0, [r4, #0]
 801154c:	1d19      	adds	r1, r3, #4
 801154e:	6029      	str	r1, [r5, #0]
 8011550:	0605      	lsls	r5, r0, #24
 8011552:	d501      	bpl.n	8011558 <_printf_i+0xe8>
 8011554:	681e      	ldr	r6, [r3, #0]
 8011556:	e002      	b.n	801155e <_printf_i+0xee>
 8011558:	0641      	lsls	r1, r0, #25
 801155a:	d5fb      	bpl.n	8011554 <_printf_i+0xe4>
 801155c:	881e      	ldrh	r6, [r3, #0]
 801155e:	4853      	ldr	r0, [pc, #332]	; (80116ac <_printf_i+0x23c>)
 8011560:	2f6f      	cmp	r7, #111	; 0x6f
 8011562:	bf0c      	ite	eq
 8011564:	2308      	moveq	r3, #8
 8011566:	230a      	movne	r3, #10
 8011568:	2100      	movs	r1, #0
 801156a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801156e:	6865      	ldr	r5, [r4, #4]
 8011570:	60a5      	str	r5, [r4, #8]
 8011572:	2d00      	cmp	r5, #0
 8011574:	bfa2      	ittt	ge
 8011576:	6821      	ldrge	r1, [r4, #0]
 8011578:	f021 0104 	bicge.w	r1, r1, #4
 801157c:	6021      	strge	r1, [r4, #0]
 801157e:	b90e      	cbnz	r6, 8011584 <_printf_i+0x114>
 8011580:	2d00      	cmp	r5, #0
 8011582:	d04b      	beq.n	801161c <_printf_i+0x1ac>
 8011584:	4615      	mov	r5, r2
 8011586:	fbb6 f1f3 	udiv	r1, r6, r3
 801158a:	fb03 6711 	mls	r7, r3, r1, r6
 801158e:	5dc7      	ldrb	r7, [r0, r7]
 8011590:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8011594:	4637      	mov	r7, r6
 8011596:	42bb      	cmp	r3, r7
 8011598:	460e      	mov	r6, r1
 801159a:	d9f4      	bls.n	8011586 <_printf_i+0x116>
 801159c:	2b08      	cmp	r3, #8
 801159e:	d10b      	bne.n	80115b8 <_printf_i+0x148>
 80115a0:	6823      	ldr	r3, [r4, #0]
 80115a2:	07de      	lsls	r6, r3, #31
 80115a4:	d508      	bpl.n	80115b8 <_printf_i+0x148>
 80115a6:	6923      	ldr	r3, [r4, #16]
 80115a8:	6861      	ldr	r1, [r4, #4]
 80115aa:	4299      	cmp	r1, r3
 80115ac:	bfde      	ittt	le
 80115ae:	2330      	movle	r3, #48	; 0x30
 80115b0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80115b4:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80115b8:	1b52      	subs	r2, r2, r5
 80115ba:	6122      	str	r2, [r4, #16]
 80115bc:	f8cd a000 	str.w	sl, [sp]
 80115c0:	464b      	mov	r3, r9
 80115c2:	aa03      	add	r2, sp, #12
 80115c4:	4621      	mov	r1, r4
 80115c6:	4640      	mov	r0, r8
 80115c8:	f7ff fee4 	bl	8011394 <_printf_common>
 80115cc:	3001      	adds	r0, #1
 80115ce:	d14a      	bne.n	8011666 <_printf_i+0x1f6>
 80115d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80115d4:	b004      	add	sp, #16
 80115d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80115da:	6823      	ldr	r3, [r4, #0]
 80115dc:	f043 0320 	orr.w	r3, r3, #32
 80115e0:	6023      	str	r3, [r4, #0]
 80115e2:	4833      	ldr	r0, [pc, #204]	; (80116b0 <_printf_i+0x240>)
 80115e4:	2778      	movs	r7, #120	; 0x78
 80115e6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80115ea:	6823      	ldr	r3, [r4, #0]
 80115ec:	6829      	ldr	r1, [r5, #0]
 80115ee:	061f      	lsls	r7, r3, #24
 80115f0:	f851 6b04 	ldr.w	r6, [r1], #4
 80115f4:	d402      	bmi.n	80115fc <_printf_i+0x18c>
 80115f6:	065f      	lsls	r7, r3, #25
 80115f8:	bf48      	it	mi
 80115fa:	b2b6      	uxthmi	r6, r6
 80115fc:	07df      	lsls	r7, r3, #31
 80115fe:	bf48      	it	mi
 8011600:	f043 0320 	orrmi.w	r3, r3, #32
 8011604:	6029      	str	r1, [r5, #0]
 8011606:	bf48      	it	mi
 8011608:	6023      	strmi	r3, [r4, #0]
 801160a:	b91e      	cbnz	r6, 8011614 <_printf_i+0x1a4>
 801160c:	6823      	ldr	r3, [r4, #0]
 801160e:	f023 0320 	bic.w	r3, r3, #32
 8011612:	6023      	str	r3, [r4, #0]
 8011614:	2310      	movs	r3, #16
 8011616:	e7a7      	b.n	8011568 <_printf_i+0xf8>
 8011618:	4824      	ldr	r0, [pc, #144]	; (80116ac <_printf_i+0x23c>)
 801161a:	e7e4      	b.n	80115e6 <_printf_i+0x176>
 801161c:	4615      	mov	r5, r2
 801161e:	e7bd      	b.n	801159c <_printf_i+0x12c>
 8011620:	682b      	ldr	r3, [r5, #0]
 8011622:	6826      	ldr	r6, [r4, #0]
 8011624:	6961      	ldr	r1, [r4, #20]
 8011626:	1d18      	adds	r0, r3, #4
 8011628:	6028      	str	r0, [r5, #0]
 801162a:	0635      	lsls	r5, r6, #24
 801162c:	681b      	ldr	r3, [r3, #0]
 801162e:	d501      	bpl.n	8011634 <_printf_i+0x1c4>
 8011630:	6019      	str	r1, [r3, #0]
 8011632:	e002      	b.n	801163a <_printf_i+0x1ca>
 8011634:	0670      	lsls	r0, r6, #25
 8011636:	d5fb      	bpl.n	8011630 <_printf_i+0x1c0>
 8011638:	8019      	strh	r1, [r3, #0]
 801163a:	2300      	movs	r3, #0
 801163c:	6123      	str	r3, [r4, #16]
 801163e:	4615      	mov	r5, r2
 8011640:	e7bc      	b.n	80115bc <_printf_i+0x14c>
 8011642:	682b      	ldr	r3, [r5, #0]
 8011644:	1d1a      	adds	r2, r3, #4
 8011646:	602a      	str	r2, [r5, #0]
 8011648:	681d      	ldr	r5, [r3, #0]
 801164a:	6862      	ldr	r2, [r4, #4]
 801164c:	2100      	movs	r1, #0
 801164e:	4628      	mov	r0, r5
 8011650:	f7ee fde6 	bl	8000220 <memchr>
 8011654:	b108      	cbz	r0, 801165a <_printf_i+0x1ea>
 8011656:	1b40      	subs	r0, r0, r5
 8011658:	6060      	str	r0, [r4, #4]
 801165a:	6863      	ldr	r3, [r4, #4]
 801165c:	6123      	str	r3, [r4, #16]
 801165e:	2300      	movs	r3, #0
 8011660:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011664:	e7aa      	b.n	80115bc <_printf_i+0x14c>
 8011666:	6923      	ldr	r3, [r4, #16]
 8011668:	462a      	mov	r2, r5
 801166a:	4649      	mov	r1, r9
 801166c:	4640      	mov	r0, r8
 801166e:	47d0      	blx	sl
 8011670:	3001      	adds	r0, #1
 8011672:	d0ad      	beq.n	80115d0 <_printf_i+0x160>
 8011674:	6823      	ldr	r3, [r4, #0]
 8011676:	079b      	lsls	r3, r3, #30
 8011678:	d413      	bmi.n	80116a2 <_printf_i+0x232>
 801167a:	68e0      	ldr	r0, [r4, #12]
 801167c:	9b03      	ldr	r3, [sp, #12]
 801167e:	4298      	cmp	r0, r3
 8011680:	bfb8      	it	lt
 8011682:	4618      	movlt	r0, r3
 8011684:	e7a6      	b.n	80115d4 <_printf_i+0x164>
 8011686:	2301      	movs	r3, #1
 8011688:	4632      	mov	r2, r6
 801168a:	4649      	mov	r1, r9
 801168c:	4640      	mov	r0, r8
 801168e:	47d0      	blx	sl
 8011690:	3001      	adds	r0, #1
 8011692:	d09d      	beq.n	80115d0 <_printf_i+0x160>
 8011694:	3501      	adds	r5, #1
 8011696:	68e3      	ldr	r3, [r4, #12]
 8011698:	9903      	ldr	r1, [sp, #12]
 801169a:	1a5b      	subs	r3, r3, r1
 801169c:	42ab      	cmp	r3, r5
 801169e:	dcf2      	bgt.n	8011686 <_printf_i+0x216>
 80116a0:	e7eb      	b.n	801167a <_printf_i+0x20a>
 80116a2:	2500      	movs	r5, #0
 80116a4:	f104 0619 	add.w	r6, r4, #25
 80116a8:	e7f5      	b.n	8011696 <_printf_i+0x226>
 80116aa:	bf00      	nop
 80116ac:	08013bf2 	.word	0x08013bf2
 80116b0:	08013c03 	.word	0x08013c03

080116b4 <std>:
 80116b4:	2300      	movs	r3, #0
 80116b6:	b510      	push	{r4, lr}
 80116b8:	4604      	mov	r4, r0
 80116ba:	e9c0 3300 	strd	r3, r3, [r0]
 80116be:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80116c2:	6083      	str	r3, [r0, #8]
 80116c4:	8181      	strh	r1, [r0, #12]
 80116c6:	6643      	str	r3, [r0, #100]	; 0x64
 80116c8:	81c2      	strh	r2, [r0, #14]
 80116ca:	6183      	str	r3, [r0, #24]
 80116cc:	4619      	mov	r1, r3
 80116ce:	2208      	movs	r2, #8
 80116d0:	305c      	adds	r0, #92	; 0x5c
 80116d2:	f000 f9e5 	bl	8011aa0 <memset>
 80116d6:	4b05      	ldr	r3, [pc, #20]	; (80116ec <std+0x38>)
 80116d8:	6263      	str	r3, [r4, #36]	; 0x24
 80116da:	4b05      	ldr	r3, [pc, #20]	; (80116f0 <std+0x3c>)
 80116dc:	62a3      	str	r3, [r4, #40]	; 0x28
 80116de:	4b05      	ldr	r3, [pc, #20]	; (80116f4 <std+0x40>)
 80116e0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80116e2:	4b05      	ldr	r3, [pc, #20]	; (80116f8 <std+0x44>)
 80116e4:	6224      	str	r4, [r4, #32]
 80116e6:	6323      	str	r3, [r4, #48]	; 0x30
 80116e8:	bd10      	pop	{r4, pc}
 80116ea:	bf00      	nop
 80116ec:	080118f1 	.word	0x080118f1
 80116f0:	08011913 	.word	0x08011913
 80116f4:	0801194b 	.word	0x0801194b
 80116f8:	0801196f 	.word	0x0801196f

080116fc <stdio_exit_handler>:
 80116fc:	4a02      	ldr	r2, [pc, #8]	; (8011708 <stdio_exit_handler+0xc>)
 80116fe:	4903      	ldr	r1, [pc, #12]	; (801170c <stdio_exit_handler+0x10>)
 8011700:	4803      	ldr	r0, [pc, #12]	; (8011710 <stdio_exit_handler+0x14>)
 8011702:	f000 b869 	b.w	80117d8 <_fwalk_sglue>
 8011706:	bf00      	nop
 8011708:	20000188 	.word	0x20000188
 801170c:	080135e9 	.word	0x080135e9
 8011710:	20000194 	.word	0x20000194

08011714 <cleanup_stdio>:
 8011714:	6841      	ldr	r1, [r0, #4]
 8011716:	4b0c      	ldr	r3, [pc, #48]	; (8011748 <cleanup_stdio+0x34>)
 8011718:	4299      	cmp	r1, r3
 801171a:	b510      	push	{r4, lr}
 801171c:	4604      	mov	r4, r0
 801171e:	d001      	beq.n	8011724 <cleanup_stdio+0x10>
 8011720:	f001 ff62 	bl	80135e8 <_fflush_r>
 8011724:	68a1      	ldr	r1, [r4, #8]
 8011726:	4b09      	ldr	r3, [pc, #36]	; (801174c <cleanup_stdio+0x38>)
 8011728:	4299      	cmp	r1, r3
 801172a:	d002      	beq.n	8011732 <cleanup_stdio+0x1e>
 801172c:	4620      	mov	r0, r4
 801172e:	f001 ff5b 	bl	80135e8 <_fflush_r>
 8011732:	68e1      	ldr	r1, [r4, #12]
 8011734:	4b06      	ldr	r3, [pc, #24]	; (8011750 <cleanup_stdio+0x3c>)
 8011736:	4299      	cmp	r1, r3
 8011738:	d004      	beq.n	8011744 <cleanup_stdio+0x30>
 801173a:	4620      	mov	r0, r4
 801173c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011740:	f001 bf52 	b.w	80135e8 <_fflush_r>
 8011744:	bd10      	pop	{r4, pc}
 8011746:	bf00      	nop
 8011748:	20003460 	.word	0x20003460
 801174c:	200034c8 	.word	0x200034c8
 8011750:	20003530 	.word	0x20003530

08011754 <global_stdio_init.part.0>:
 8011754:	b510      	push	{r4, lr}
 8011756:	4b0b      	ldr	r3, [pc, #44]	; (8011784 <global_stdio_init.part.0+0x30>)
 8011758:	4c0b      	ldr	r4, [pc, #44]	; (8011788 <global_stdio_init.part.0+0x34>)
 801175a:	4a0c      	ldr	r2, [pc, #48]	; (801178c <global_stdio_init.part.0+0x38>)
 801175c:	601a      	str	r2, [r3, #0]
 801175e:	4620      	mov	r0, r4
 8011760:	2200      	movs	r2, #0
 8011762:	2104      	movs	r1, #4
 8011764:	f7ff ffa6 	bl	80116b4 <std>
 8011768:	f104 0068 	add.w	r0, r4, #104	; 0x68
 801176c:	2201      	movs	r2, #1
 801176e:	2109      	movs	r1, #9
 8011770:	f7ff ffa0 	bl	80116b4 <std>
 8011774:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8011778:	2202      	movs	r2, #2
 801177a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801177e:	2112      	movs	r1, #18
 8011780:	f7ff bf98 	b.w	80116b4 <std>
 8011784:	20003598 	.word	0x20003598
 8011788:	20003460 	.word	0x20003460
 801178c:	080116fd 	.word	0x080116fd

08011790 <__sfp_lock_acquire>:
 8011790:	4801      	ldr	r0, [pc, #4]	; (8011798 <__sfp_lock_acquire+0x8>)
 8011792:	f000 ba57 	b.w	8011c44 <__retarget_lock_acquire_recursive>
 8011796:	bf00      	nop
 8011798:	200035a1 	.word	0x200035a1

0801179c <__sfp_lock_release>:
 801179c:	4801      	ldr	r0, [pc, #4]	; (80117a4 <__sfp_lock_release+0x8>)
 801179e:	f000 ba52 	b.w	8011c46 <__retarget_lock_release_recursive>
 80117a2:	bf00      	nop
 80117a4:	200035a1 	.word	0x200035a1

080117a8 <__sinit>:
 80117a8:	b510      	push	{r4, lr}
 80117aa:	4604      	mov	r4, r0
 80117ac:	f7ff fff0 	bl	8011790 <__sfp_lock_acquire>
 80117b0:	6a23      	ldr	r3, [r4, #32]
 80117b2:	b11b      	cbz	r3, 80117bc <__sinit+0x14>
 80117b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80117b8:	f7ff bff0 	b.w	801179c <__sfp_lock_release>
 80117bc:	4b04      	ldr	r3, [pc, #16]	; (80117d0 <__sinit+0x28>)
 80117be:	6223      	str	r3, [r4, #32]
 80117c0:	4b04      	ldr	r3, [pc, #16]	; (80117d4 <__sinit+0x2c>)
 80117c2:	681b      	ldr	r3, [r3, #0]
 80117c4:	2b00      	cmp	r3, #0
 80117c6:	d1f5      	bne.n	80117b4 <__sinit+0xc>
 80117c8:	f7ff ffc4 	bl	8011754 <global_stdio_init.part.0>
 80117cc:	e7f2      	b.n	80117b4 <__sinit+0xc>
 80117ce:	bf00      	nop
 80117d0:	08011715 	.word	0x08011715
 80117d4:	20003598 	.word	0x20003598

080117d8 <_fwalk_sglue>:
 80117d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80117dc:	4607      	mov	r7, r0
 80117de:	4688      	mov	r8, r1
 80117e0:	4614      	mov	r4, r2
 80117e2:	2600      	movs	r6, #0
 80117e4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80117e8:	f1b9 0901 	subs.w	r9, r9, #1
 80117ec:	d505      	bpl.n	80117fa <_fwalk_sglue+0x22>
 80117ee:	6824      	ldr	r4, [r4, #0]
 80117f0:	2c00      	cmp	r4, #0
 80117f2:	d1f7      	bne.n	80117e4 <_fwalk_sglue+0xc>
 80117f4:	4630      	mov	r0, r6
 80117f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80117fa:	89ab      	ldrh	r3, [r5, #12]
 80117fc:	2b01      	cmp	r3, #1
 80117fe:	d907      	bls.n	8011810 <_fwalk_sglue+0x38>
 8011800:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011804:	3301      	adds	r3, #1
 8011806:	d003      	beq.n	8011810 <_fwalk_sglue+0x38>
 8011808:	4629      	mov	r1, r5
 801180a:	4638      	mov	r0, r7
 801180c:	47c0      	blx	r8
 801180e:	4306      	orrs	r6, r0
 8011810:	3568      	adds	r5, #104	; 0x68
 8011812:	e7e9      	b.n	80117e8 <_fwalk_sglue+0x10>

08011814 <iprintf>:
 8011814:	b40f      	push	{r0, r1, r2, r3}
 8011816:	b507      	push	{r0, r1, r2, lr}
 8011818:	4906      	ldr	r1, [pc, #24]	; (8011834 <iprintf+0x20>)
 801181a:	ab04      	add	r3, sp, #16
 801181c:	6808      	ldr	r0, [r1, #0]
 801181e:	f853 2b04 	ldr.w	r2, [r3], #4
 8011822:	6881      	ldr	r1, [r0, #8]
 8011824:	9301      	str	r3, [sp, #4]
 8011826:	f001 fd3f 	bl	80132a8 <_vfiprintf_r>
 801182a:	b003      	add	sp, #12
 801182c:	f85d eb04 	ldr.w	lr, [sp], #4
 8011830:	b004      	add	sp, #16
 8011832:	4770      	bx	lr
 8011834:	200001e0 	.word	0x200001e0

08011838 <_puts_r>:
 8011838:	6a03      	ldr	r3, [r0, #32]
 801183a:	b570      	push	{r4, r5, r6, lr}
 801183c:	6884      	ldr	r4, [r0, #8]
 801183e:	4605      	mov	r5, r0
 8011840:	460e      	mov	r6, r1
 8011842:	b90b      	cbnz	r3, 8011848 <_puts_r+0x10>
 8011844:	f7ff ffb0 	bl	80117a8 <__sinit>
 8011848:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801184a:	07db      	lsls	r3, r3, #31
 801184c:	d405      	bmi.n	801185a <_puts_r+0x22>
 801184e:	89a3      	ldrh	r3, [r4, #12]
 8011850:	0598      	lsls	r0, r3, #22
 8011852:	d402      	bmi.n	801185a <_puts_r+0x22>
 8011854:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011856:	f000 f9f5 	bl	8011c44 <__retarget_lock_acquire_recursive>
 801185a:	89a3      	ldrh	r3, [r4, #12]
 801185c:	0719      	lsls	r1, r3, #28
 801185e:	d513      	bpl.n	8011888 <_puts_r+0x50>
 8011860:	6923      	ldr	r3, [r4, #16]
 8011862:	b18b      	cbz	r3, 8011888 <_puts_r+0x50>
 8011864:	3e01      	subs	r6, #1
 8011866:	68a3      	ldr	r3, [r4, #8]
 8011868:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801186c:	3b01      	subs	r3, #1
 801186e:	60a3      	str	r3, [r4, #8]
 8011870:	b9e9      	cbnz	r1, 80118ae <_puts_r+0x76>
 8011872:	2b00      	cmp	r3, #0
 8011874:	da2e      	bge.n	80118d4 <_puts_r+0x9c>
 8011876:	4622      	mov	r2, r4
 8011878:	210a      	movs	r1, #10
 801187a:	4628      	mov	r0, r5
 801187c:	f000 f87b 	bl	8011976 <__swbuf_r>
 8011880:	3001      	adds	r0, #1
 8011882:	d007      	beq.n	8011894 <_puts_r+0x5c>
 8011884:	250a      	movs	r5, #10
 8011886:	e007      	b.n	8011898 <_puts_r+0x60>
 8011888:	4621      	mov	r1, r4
 801188a:	4628      	mov	r0, r5
 801188c:	f000 f8b0 	bl	80119f0 <__swsetup_r>
 8011890:	2800      	cmp	r0, #0
 8011892:	d0e7      	beq.n	8011864 <_puts_r+0x2c>
 8011894:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8011898:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801189a:	07da      	lsls	r2, r3, #31
 801189c:	d405      	bmi.n	80118aa <_puts_r+0x72>
 801189e:	89a3      	ldrh	r3, [r4, #12]
 80118a0:	059b      	lsls	r3, r3, #22
 80118a2:	d402      	bmi.n	80118aa <_puts_r+0x72>
 80118a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80118a6:	f000 f9ce 	bl	8011c46 <__retarget_lock_release_recursive>
 80118aa:	4628      	mov	r0, r5
 80118ac:	bd70      	pop	{r4, r5, r6, pc}
 80118ae:	2b00      	cmp	r3, #0
 80118b0:	da04      	bge.n	80118bc <_puts_r+0x84>
 80118b2:	69a2      	ldr	r2, [r4, #24]
 80118b4:	429a      	cmp	r2, r3
 80118b6:	dc06      	bgt.n	80118c6 <_puts_r+0x8e>
 80118b8:	290a      	cmp	r1, #10
 80118ba:	d004      	beq.n	80118c6 <_puts_r+0x8e>
 80118bc:	6823      	ldr	r3, [r4, #0]
 80118be:	1c5a      	adds	r2, r3, #1
 80118c0:	6022      	str	r2, [r4, #0]
 80118c2:	7019      	strb	r1, [r3, #0]
 80118c4:	e7cf      	b.n	8011866 <_puts_r+0x2e>
 80118c6:	4622      	mov	r2, r4
 80118c8:	4628      	mov	r0, r5
 80118ca:	f000 f854 	bl	8011976 <__swbuf_r>
 80118ce:	3001      	adds	r0, #1
 80118d0:	d1c9      	bne.n	8011866 <_puts_r+0x2e>
 80118d2:	e7df      	b.n	8011894 <_puts_r+0x5c>
 80118d4:	6823      	ldr	r3, [r4, #0]
 80118d6:	250a      	movs	r5, #10
 80118d8:	1c5a      	adds	r2, r3, #1
 80118da:	6022      	str	r2, [r4, #0]
 80118dc:	701d      	strb	r5, [r3, #0]
 80118de:	e7db      	b.n	8011898 <_puts_r+0x60>

080118e0 <puts>:
 80118e0:	4b02      	ldr	r3, [pc, #8]	; (80118ec <puts+0xc>)
 80118e2:	4601      	mov	r1, r0
 80118e4:	6818      	ldr	r0, [r3, #0]
 80118e6:	f7ff bfa7 	b.w	8011838 <_puts_r>
 80118ea:	bf00      	nop
 80118ec:	200001e0 	.word	0x200001e0

080118f0 <__sread>:
 80118f0:	b510      	push	{r4, lr}
 80118f2:	460c      	mov	r4, r1
 80118f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80118f8:	f000 f956 	bl	8011ba8 <_read_r>
 80118fc:	2800      	cmp	r0, #0
 80118fe:	bfab      	itete	ge
 8011900:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8011902:	89a3      	ldrhlt	r3, [r4, #12]
 8011904:	181b      	addge	r3, r3, r0
 8011906:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801190a:	bfac      	ite	ge
 801190c:	6563      	strge	r3, [r4, #84]	; 0x54
 801190e:	81a3      	strhlt	r3, [r4, #12]
 8011910:	bd10      	pop	{r4, pc}

08011912 <__swrite>:
 8011912:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011916:	461f      	mov	r7, r3
 8011918:	898b      	ldrh	r3, [r1, #12]
 801191a:	05db      	lsls	r3, r3, #23
 801191c:	4605      	mov	r5, r0
 801191e:	460c      	mov	r4, r1
 8011920:	4616      	mov	r6, r2
 8011922:	d505      	bpl.n	8011930 <__swrite+0x1e>
 8011924:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011928:	2302      	movs	r3, #2
 801192a:	2200      	movs	r2, #0
 801192c:	f000 f92a 	bl	8011b84 <_lseek_r>
 8011930:	89a3      	ldrh	r3, [r4, #12]
 8011932:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011936:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801193a:	81a3      	strh	r3, [r4, #12]
 801193c:	4632      	mov	r2, r6
 801193e:	463b      	mov	r3, r7
 8011940:	4628      	mov	r0, r5
 8011942:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011946:	f000 b941 	b.w	8011bcc <_write_r>

0801194a <__sseek>:
 801194a:	b510      	push	{r4, lr}
 801194c:	460c      	mov	r4, r1
 801194e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011952:	f000 f917 	bl	8011b84 <_lseek_r>
 8011956:	1c43      	adds	r3, r0, #1
 8011958:	89a3      	ldrh	r3, [r4, #12]
 801195a:	bf15      	itete	ne
 801195c:	6560      	strne	r0, [r4, #84]	; 0x54
 801195e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8011962:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8011966:	81a3      	strheq	r3, [r4, #12]
 8011968:	bf18      	it	ne
 801196a:	81a3      	strhne	r3, [r4, #12]
 801196c:	bd10      	pop	{r4, pc}

0801196e <__sclose>:
 801196e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011972:	f000 b8a1 	b.w	8011ab8 <_close_r>

08011976 <__swbuf_r>:
 8011976:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011978:	460e      	mov	r6, r1
 801197a:	4614      	mov	r4, r2
 801197c:	4605      	mov	r5, r0
 801197e:	b118      	cbz	r0, 8011988 <__swbuf_r+0x12>
 8011980:	6a03      	ldr	r3, [r0, #32]
 8011982:	b90b      	cbnz	r3, 8011988 <__swbuf_r+0x12>
 8011984:	f7ff ff10 	bl	80117a8 <__sinit>
 8011988:	69a3      	ldr	r3, [r4, #24]
 801198a:	60a3      	str	r3, [r4, #8]
 801198c:	89a3      	ldrh	r3, [r4, #12]
 801198e:	071a      	lsls	r2, r3, #28
 8011990:	d525      	bpl.n	80119de <__swbuf_r+0x68>
 8011992:	6923      	ldr	r3, [r4, #16]
 8011994:	b31b      	cbz	r3, 80119de <__swbuf_r+0x68>
 8011996:	6823      	ldr	r3, [r4, #0]
 8011998:	6922      	ldr	r2, [r4, #16]
 801199a:	1a98      	subs	r0, r3, r2
 801199c:	6963      	ldr	r3, [r4, #20]
 801199e:	b2f6      	uxtb	r6, r6
 80119a0:	4283      	cmp	r3, r0
 80119a2:	4637      	mov	r7, r6
 80119a4:	dc04      	bgt.n	80119b0 <__swbuf_r+0x3a>
 80119a6:	4621      	mov	r1, r4
 80119a8:	4628      	mov	r0, r5
 80119aa:	f001 fe1d 	bl	80135e8 <_fflush_r>
 80119ae:	b9e0      	cbnz	r0, 80119ea <__swbuf_r+0x74>
 80119b0:	68a3      	ldr	r3, [r4, #8]
 80119b2:	3b01      	subs	r3, #1
 80119b4:	60a3      	str	r3, [r4, #8]
 80119b6:	6823      	ldr	r3, [r4, #0]
 80119b8:	1c5a      	adds	r2, r3, #1
 80119ba:	6022      	str	r2, [r4, #0]
 80119bc:	701e      	strb	r6, [r3, #0]
 80119be:	6962      	ldr	r2, [r4, #20]
 80119c0:	1c43      	adds	r3, r0, #1
 80119c2:	429a      	cmp	r2, r3
 80119c4:	d004      	beq.n	80119d0 <__swbuf_r+0x5a>
 80119c6:	89a3      	ldrh	r3, [r4, #12]
 80119c8:	07db      	lsls	r3, r3, #31
 80119ca:	d506      	bpl.n	80119da <__swbuf_r+0x64>
 80119cc:	2e0a      	cmp	r6, #10
 80119ce:	d104      	bne.n	80119da <__swbuf_r+0x64>
 80119d0:	4621      	mov	r1, r4
 80119d2:	4628      	mov	r0, r5
 80119d4:	f001 fe08 	bl	80135e8 <_fflush_r>
 80119d8:	b938      	cbnz	r0, 80119ea <__swbuf_r+0x74>
 80119da:	4638      	mov	r0, r7
 80119dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80119de:	4621      	mov	r1, r4
 80119e0:	4628      	mov	r0, r5
 80119e2:	f000 f805 	bl	80119f0 <__swsetup_r>
 80119e6:	2800      	cmp	r0, #0
 80119e8:	d0d5      	beq.n	8011996 <__swbuf_r+0x20>
 80119ea:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80119ee:	e7f4      	b.n	80119da <__swbuf_r+0x64>

080119f0 <__swsetup_r>:
 80119f0:	b538      	push	{r3, r4, r5, lr}
 80119f2:	4b2a      	ldr	r3, [pc, #168]	; (8011a9c <__swsetup_r+0xac>)
 80119f4:	4605      	mov	r5, r0
 80119f6:	6818      	ldr	r0, [r3, #0]
 80119f8:	460c      	mov	r4, r1
 80119fa:	b118      	cbz	r0, 8011a04 <__swsetup_r+0x14>
 80119fc:	6a03      	ldr	r3, [r0, #32]
 80119fe:	b90b      	cbnz	r3, 8011a04 <__swsetup_r+0x14>
 8011a00:	f7ff fed2 	bl	80117a8 <__sinit>
 8011a04:	89a3      	ldrh	r3, [r4, #12]
 8011a06:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011a0a:	0718      	lsls	r0, r3, #28
 8011a0c:	d422      	bmi.n	8011a54 <__swsetup_r+0x64>
 8011a0e:	06d9      	lsls	r1, r3, #27
 8011a10:	d407      	bmi.n	8011a22 <__swsetup_r+0x32>
 8011a12:	2309      	movs	r3, #9
 8011a14:	602b      	str	r3, [r5, #0]
 8011a16:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8011a1a:	81a3      	strh	r3, [r4, #12]
 8011a1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011a20:	e034      	b.n	8011a8c <__swsetup_r+0x9c>
 8011a22:	0758      	lsls	r0, r3, #29
 8011a24:	d512      	bpl.n	8011a4c <__swsetup_r+0x5c>
 8011a26:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011a28:	b141      	cbz	r1, 8011a3c <__swsetup_r+0x4c>
 8011a2a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011a2e:	4299      	cmp	r1, r3
 8011a30:	d002      	beq.n	8011a38 <__swsetup_r+0x48>
 8011a32:	4628      	mov	r0, r5
 8011a34:	f000 ff92 	bl	801295c <_free_r>
 8011a38:	2300      	movs	r3, #0
 8011a3a:	6363      	str	r3, [r4, #52]	; 0x34
 8011a3c:	89a3      	ldrh	r3, [r4, #12]
 8011a3e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8011a42:	81a3      	strh	r3, [r4, #12]
 8011a44:	2300      	movs	r3, #0
 8011a46:	6063      	str	r3, [r4, #4]
 8011a48:	6923      	ldr	r3, [r4, #16]
 8011a4a:	6023      	str	r3, [r4, #0]
 8011a4c:	89a3      	ldrh	r3, [r4, #12]
 8011a4e:	f043 0308 	orr.w	r3, r3, #8
 8011a52:	81a3      	strh	r3, [r4, #12]
 8011a54:	6923      	ldr	r3, [r4, #16]
 8011a56:	b94b      	cbnz	r3, 8011a6c <__swsetup_r+0x7c>
 8011a58:	89a3      	ldrh	r3, [r4, #12]
 8011a5a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8011a5e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011a62:	d003      	beq.n	8011a6c <__swsetup_r+0x7c>
 8011a64:	4621      	mov	r1, r4
 8011a66:	4628      	mov	r0, r5
 8011a68:	f001 fe0c 	bl	8013684 <__smakebuf_r>
 8011a6c:	89a0      	ldrh	r0, [r4, #12]
 8011a6e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011a72:	f010 0301 	ands.w	r3, r0, #1
 8011a76:	d00a      	beq.n	8011a8e <__swsetup_r+0x9e>
 8011a78:	2300      	movs	r3, #0
 8011a7a:	60a3      	str	r3, [r4, #8]
 8011a7c:	6963      	ldr	r3, [r4, #20]
 8011a7e:	425b      	negs	r3, r3
 8011a80:	61a3      	str	r3, [r4, #24]
 8011a82:	6923      	ldr	r3, [r4, #16]
 8011a84:	b943      	cbnz	r3, 8011a98 <__swsetup_r+0xa8>
 8011a86:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8011a8a:	d1c4      	bne.n	8011a16 <__swsetup_r+0x26>
 8011a8c:	bd38      	pop	{r3, r4, r5, pc}
 8011a8e:	0781      	lsls	r1, r0, #30
 8011a90:	bf58      	it	pl
 8011a92:	6963      	ldrpl	r3, [r4, #20]
 8011a94:	60a3      	str	r3, [r4, #8]
 8011a96:	e7f4      	b.n	8011a82 <__swsetup_r+0x92>
 8011a98:	2000      	movs	r0, #0
 8011a9a:	e7f7      	b.n	8011a8c <__swsetup_r+0x9c>
 8011a9c:	200001e0 	.word	0x200001e0

08011aa0 <memset>:
 8011aa0:	4402      	add	r2, r0
 8011aa2:	4603      	mov	r3, r0
 8011aa4:	4293      	cmp	r3, r2
 8011aa6:	d100      	bne.n	8011aaa <memset+0xa>
 8011aa8:	4770      	bx	lr
 8011aaa:	f803 1b01 	strb.w	r1, [r3], #1
 8011aae:	e7f9      	b.n	8011aa4 <memset+0x4>

08011ab0 <_localeconv_r>:
 8011ab0:	4800      	ldr	r0, [pc, #0]	; (8011ab4 <_localeconv_r+0x4>)
 8011ab2:	4770      	bx	lr
 8011ab4:	200002d4 	.word	0x200002d4

08011ab8 <_close_r>:
 8011ab8:	b538      	push	{r3, r4, r5, lr}
 8011aba:	4d06      	ldr	r5, [pc, #24]	; (8011ad4 <_close_r+0x1c>)
 8011abc:	2300      	movs	r3, #0
 8011abe:	4604      	mov	r4, r0
 8011ac0:	4608      	mov	r0, r1
 8011ac2:	602b      	str	r3, [r5, #0]
 8011ac4:	f7f0 fa41 	bl	8001f4a <_close>
 8011ac8:	1c43      	adds	r3, r0, #1
 8011aca:	d102      	bne.n	8011ad2 <_close_r+0x1a>
 8011acc:	682b      	ldr	r3, [r5, #0]
 8011ace:	b103      	cbz	r3, 8011ad2 <_close_r+0x1a>
 8011ad0:	6023      	str	r3, [r4, #0]
 8011ad2:	bd38      	pop	{r3, r4, r5, pc}
 8011ad4:	2000359c 	.word	0x2000359c

08011ad8 <_reclaim_reent>:
 8011ad8:	4b29      	ldr	r3, [pc, #164]	; (8011b80 <_reclaim_reent+0xa8>)
 8011ada:	681b      	ldr	r3, [r3, #0]
 8011adc:	4283      	cmp	r3, r0
 8011ade:	b570      	push	{r4, r5, r6, lr}
 8011ae0:	4604      	mov	r4, r0
 8011ae2:	d04b      	beq.n	8011b7c <_reclaim_reent+0xa4>
 8011ae4:	69c3      	ldr	r3, [r0, #28]
 8011ae6:	b143      	cbz	r3, 8011afa <_reclaim_reent+0x22>
 8011ae8:	68db      	ldr	r3, [r3, #12]
 8011aea:	2b00      	cmp	r3, #0
 8011aec:	d144      	bne.n	8011b78 <_reclaim_reent+0xa0>
 8011aee:	69e3      	ldr	r3, [r4, #28]
 8011af0:	6819      	ldr	r1, [r3, #0]
 8011af2:	b111      	cbz	r1, 8011afa <_reclaim_reent+0x22>
 8011af4:	4620      	mov	r0, r4
 8011af6:	f000 ff31 	bl	801295c <_free_r>
 8011afa:	6961      	ldr	r1, [r4, #20]
 8011afc:	b111      	cbz	r1, 8011b04 <_reclaim_reent+0x2c>
 8011afe:	4620      	mov	r0, r4
 8011b00:	f000 ff2c 	bl	801295c <_free_r>
 8011b04:	69e1      	ldr	r1, [r4, #28]
 8011b06:	b111      	cbz	r1, 8011b0e <_reclaim_reent+0x36>
 8011b08:	4620      	mov	r0, r4
 8011b0a:	f000 ff27 	bl	801295c <_free_r>
 8011b0e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8011b10:	b111      	cbz	r1, 8011b18 <_reclaim_reent+0x40>
 8011b12:	4620      	mov	r0, r4
 8011b14:	f000 ff22 	bl	801295c <_free_r>
 8011b18:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011b1a:	b111      	cbz	r1, 8011b22 <_reclaim_reent+0x4a>
 8011b1c:	4620      	mov	r0, r4
 8011b1e:	f000 ff1d 	bl	801295c <_free_r>
 8011b22:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8011b24:	b111      	cbz	r1, 8011b2c <_reclaim_reent+0x54>
 8011b26:	4620      	mov	r0, r4
 8011b28:	f000 ff18 	bl	801295c <_free_r>
 8011b2c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8011b2e:	b111      	cbz	r1, 8011b36 <_reclaim_reent+0x5e>
 8011b30:	4620      	mov	r0, r4
 8011b32:	f000 ff13 	bl	801295c <_free_r>
 8011b36:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8011b38:	b111      	cbz	r1, 8011b40 <_reclaim_reent+0x68>
 8011b3a:	4620      	mov	r0, r4
 8011b3c:	f000 ff0e 	bl	801295c <_free_r>
 8011b40:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8011b42:	b111      	cbz	r1, 8011b4a <_reclaim_reent+0x72>
 8011b44:	4620      	mov	r0, r4
 8011b46:	f000 ff09 	bl	801295c <_free_r>
 8011b4a:	6a23      	ldr	r3, [r4, #32]
 8011b4c:	b1b3      	cbz	r3, 8011b7c <_reclaim_reent+0xa4>
 8011b4e:	4620      	mov	r0, r4
 8011b50:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011b54:	4718      	bx	r3
 8011b56:	5949      	ldr	r1, [r1, r5]
 8011b58:	b941      	cbnz	r1, 8011b6c <_reclaim_reent+0x94>
 8011b5a:	3504      	adds	r5, #4
 8011b5c:	69e3      	ldr	r3, [r4, #28]
 8011b5e:	2d80      	cmp	r5, #128	; 0x80
 8011b60:	68d9      	ldr	r1, [r3, #12]
 8011b62:	d1f8      	bne.n	8011b56 <_reclaim_reent+0x7e>
 8011b64:	4620      	mov	r0, r4
 8011b66:	f000 fef9 	bl	801295c <_free_r>
 8011b6a:	e7c0      	b.n	8011aee <_reclaim_reent+0x16>
 8011b6c:	680e      	ldr	r6, [r1, #0]
 8011b6e:	4620      	mov	r0, r4
 8011b70:	f000 fef4 	bl	801295c <_free_r>
 8011b74:	4631      	mov	r1, r6
 8011b76:	e7ef      	b.n	8011b58 <_reclaim_reent+0x80>
 8011b78:	2500      	movs	r5, #0
 8011b7a:	e7ef      	b.n	8011b5c <_reclaim_reent+0x84>
 8011b7c:	bd70      	pop	{r4, r5, r6, pc}
 8011b7e:	bf00      	nop
 8011b80:	200001e0 	.word	0x200001e0

08011b84 <_lseek_r>:
 8011b84:	b538      	push	{r3, r4, r5, lr}
 8011b86:	4d07      	ldr	r5, [pc, #28]	; (8011ba4 <_lseek_r+0x20>)
 8011b88:	4604      	mov	r4, r0
 8011b8a:	4608      	mov	r0, r1
 8011b8c:	4611      	mov	r1, r2
 8011b8e:	2200      	movs	r2, #0
 8011b90:	602a      	str	r2, [r5, #0]
 8011b92:	461a      	mov	r2, r3
 8011b94:	f7f0 fa00 	bl	8001f98 <_lseek>
 8011b98:	1c43      	adds	r3, r0, #1
 8011b9a:	d102      	bne.n	8011ba2 <_lseek_r+0x1e>
 8011b9c:	682b      	ldr	r3, [r5, #0]
 8011b9e:	b103      	cbz	r3, 8011ba2 <_lseek_r+0x1e>
 8011ba0:	6023      	str	r3, [r4, #0]
 8011ba2:	bd38      	pop	{r3, r4, r5, pc}
 8011ba4:	2000359c 	.word	0x2000359c

08011ba8 <_read_r>:
 8011ba8:	b538      	push	{r3, r4, r5, lr}
 8011baa:	4d07      	ldr	r5, [pc, #28]	; (8011bc8 <_read_r+0x20>)
 8011bac:	4604      	mov	r4, r0
 8011bae:	4608      	mov	r0, r1
 8011bb0:	4611      	mov	r1, r2
 8011bb2:	2200      	movs	r2, #0
 8011bb4:	602a      	str	r2, [r5, #0]
 8011bb6:	461a      	mov	r2, r3
 8011bb8:	f7f0 f98e 	bl	8001ed8 <_read>
 8011bbc:	1c43      	adds	r3, r0, #1
 8011bbe:	d102      	bne.n	8011bc6 <_read_r+0x1e>
 8011bc0:	682b      	ldr	r3, [r5, #0]
 8011bc2:	b103      	cbz	r3, 8011bc6 <_read_r+0x1e>
 8011bc4:	6023      	str	r3, [r4, #0]
 8011bc6:	bd38      	pop	{r3, r4, r5, pc}
 8011bc8:	2000359c 	.word	0x2000359c

08011bcc <_write_r>:
 8011bcc:	b538      	push	{r3, r4, r5, lr}
 8011bce:	4d07      	ldr	r5, [pc, #28]	; (8011bec <_write_r+0x20>)
 8011bd0:	4604      	mov	r4, r0
 8011bd2:	4608      	mov	r0, r1
 8011bd4:	4611      	mov	r1, r2
 8011bd6:	2200      	movs	r2, #0
 8011bd8:	602a      	str	r2, [r5, #0]
 8011bda:	461a      	mov	r2, r3
 8011bdc:	f7f0 f999 	bl	8001f12 <_write>
 8011be0:	1c43      	adds	r3, r0, #1
 8011be2:	d102      	bne.n	8011bea <_write_r+0x1e>
 8011be4:	682b      	ldr	r3, [r5, #0]
 8011be6:	b103      	cbz	r3, 8011bea <_write_r+0x1e>
 8011be8:	6023      	str	r3, [r4, #0]
 8011bea:	bd38      	pop	{r3, r4, r5, pc}
 8011bec:	2000359c 	.word	0x2000359c

08011bf0 <__errno>:
 8011bf0:	4b01      	ldr	r3, [pc, #4]	; (8011bf8 <__errno+0x8>)
 8011bf2:	6818      	ldr	r0, [r3, #0]
 8011bf4:	4770      	bx	lr
 8011bf6:	bf00      	nop
 8011bf8:	200001e0 	.word	0x200001e0

08011bfc <__libc_init_array>:
 8011bfc:	b570      	push	{r4, r5, r6, lr}
 8011bfe:	4d0d      	ldr	r5, [pc, #52]	; (8011c34 <__libc_init_array+0x38>)
 8011c00:	4c0d      	ldr	r4, [pc, #52]	; (8011c38 <__libc_init_array+0x3c>)
 8011c02:	1b64      	subs	r4, r4, r5
 8011c04:	10a4      	asrs	r4, r4, #2
 8011c06:	2600      	movs	r6, #0
 8011c08:	42a6      	cmp	r6, r4
 8011c0a:	d109      	bne.n	8011c20 <__libc_init_array+0x24>
 8011c0c:	4d0b      	ldr	r5, [pc, #44]	; (8011c3c <__libc_init_array+0x40>)
 8011c0e:	4c0c      	ldr	r4, [pc, #48]	; (8011c40 <__libc_init_array+0x44>)
 8011c10:	f001 fe58 	bl	80138c4 <_init>
 8011c14:	1b64      	subs	r4, r4, r5
 8011c16:	10a4      	asrs	r4, r4, #2
 8011c18:	2600      	movs	r6, #0
 8011c1a:	42a6      	cmp	r6, r4
 8011c1c:	d105      	bne.n	8011c2a <__libc_init_array+0x2e>
 8011c1e:	bd70      	pop	{r4, r5, r6, pc}
 8011c20:	f855 3b04 	ldr.w	r3, [r5], #4
 8011c24:	4798      	blx	r3
 8011c26:	3601      	adds	r6, #1
 8011c28:	e7ee      	b.n	8011c08 <__libc_init_array+0xc>
 8011c2a:	f855 3b04 	ldr.w	r3, [r5], #4
 8011c2e:	4798      	blx	r3
 8011c30:	3601      	adds	r6, #1
 8011c32:	e7f2      	b.n	8011c1a <__libc_init_array+0x1e>
 8011c34:	08013f5c 	.word	0x08013f5c
 8011c38:	08013f5c 	.word	0x08013f5c
 8011c3c:	08013f5c 	.word	0x08013f5c
 8011c40:	08013f60 	.word	0x08013f60

08011c44 <__retarget_lock_acquire_recursive>:
 8011c44:	4770      	bx	lr

08011c46 <__retarget_lock_release_recursive>:
 8011c46:	4770      	bx	lr

08011c48 <memcpy>:
 8011c48:	440a      	add	r2, r1
 8011c4a:	4291      	cmp	r1, r2
 8011c4c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8011c50:	d100      	bne.n	8011c54 <memcpy+0xc>
 8011c52:	4770      	bx	lr
 8011c54:	b510      	push	{r4, lr}
 8011c56:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011c5a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011c5e:	4291      	cmp	r1, r2
 8011c60:	d1f9      	bne.n	8011c56 <memcpy+0xe>
 8011c62:	bd10      	pop	{r4, pc}

08011c64 <quorem>:
 8011c64:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011c68:	6903      	ldr	r3, [r0, #16]
 8011c6a:	690c      	ldr	r4, [r1, #16]
 8011c6c:	42a3      	cmp	r3, r4
 8011c6e:	4607      	mov	r7, r0
 8011c70:	db7e      	blt.n	8011d70 <quorem+0x10c>
 8011c72:	3c01      	subs	r4, #1
 8011c74:	f101 0814 	add.w	r8, r1, #20
 8011c78:	f100 0514 	add.w	r5, r0, #20
 8011c7c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8011c80:	9301      	str	r3, [sp, #4]
 8011c82:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8011c86:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8011c8a:	3301      	adds	r3, #1
 8011c8c:	429a      	cmp	r2, r3
 8011c8e:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8011c92:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8011c96:	fbb2 f6f3 	udiv	r6, r2, r3
 8011c9a:	d331      	bcc.n	8011d00 <quorem+0x9c>
 8011c9c:	f04f 0e00 	mov.w	lr, #0
 8011ca0:	4640      	mov	r0, r8
 8011ca2:	46ac      	mov	ip, r5
 8011ca4:	46f2      	mov	sl, lr
 8011ca6:	f850 2b04 	ldr.w	r2, [r0], #4
 8011caa:	b293      	uxth	r3, r2
 8011cac:	fb06 e303 	mla	r3, r6, r3, lr
 8011cb0:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8011cb4:	0c1a      	lsrs	r2, r3, #16
 8011cb6:	b29b      	uxth	r3, r3
 8011cb8:	ebaa 0303 	sub.w	r3, sl, r3
 8011cbc:	f8dc a000 	ldr.w	sl, [ip]
 8011cc0:	fa13 f38a 	uxtah	r3, r3, sl
 8011cc4:	fb06 220e 	mla	r2, r6, lr, r2
 8011cc8:	9300      	str	r3, [sp, #0]
 8011cca:	9b00      	ldr	r3, [sp, #0]
 8011ccc:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8011cd0:	b292      	uxth	r2, r2
 8011cd2:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8011cd6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8011cda:	f8bd 3000 	ldrh.w	r3, [sp]
 8011cde:	4581      	cmp	r9, r0
 8011ce0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011ce4:	f84c 3b04 	str.w	r3, [ip], #4
 8011ce8:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8011cec:	d2db      	bcs.n	8011ca6 <quorem+0x42>
 8011cee:	f855 300b 	ldr.w	r3, [r5, fp]
 8011cf2:	b92b      	cbnz	r3, 8011d00 <quorem+0x9c>
 8011cf4:	9b01      	ldr	r3, [sp, #4]
 8011cf6:	3b04      	subs	r3, #4
 8011cf8:	429d      	cmp	r5, r3
 8011cfa:	461a      	mov	r2, r3
 8011cfc:	d32c      	bcc.n	8011d58 <quorem+0xf4>
 8011cfe:	613c      	str	r4, [r7, #16]
 8011d00:	4638      	mov	r0, r7
 8011d02:	f001 f9a7 	bl	8013054 <__mcmp>
 8011d06:	2800      	cmp	r0, #0
 8011d08:	db22      	blt.n	8011d50 <quorem+0xec>
 8011d0a:	3601      	adds	r6, #1
 8011d0c:	4629      	mov	r1, r5
 8011d0e:	2000      	movs	r0, #0
 8011d10:	f858 2b04 	ldr.w	r2, [r8], #4
 8011d14:	f8d1 c000 	ldr.w	ip, [r1]
 8011d18:	b293      	uxth	r3, r2
 8011d1a:	1ac3      	subs	r3, r0, r3
 8011d1c:	0c12      	lsrs	r2, r2, #16
 8011d1e:	fa13 f38c 	uxtah	r3, r3, ip
 8011d22:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8011d26:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8011d2a:	b29b      	uxth	r3, r3
 8011d2c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011d30:	45c1      	cmp	r9, r8
 8011d32:	f841 3b04 	str.w	r3, [r1], #4
 8011d36:	ea4f 4022 	mov.w	r0, r2, asr #16
 8011d3a:	d2e9      	bcs.n	8011d10 <quorem+0xac>
 8011d3c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8011d40:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8011d44:	b922      	cbnz	r2, 8011d50 <quorem+0xec>
 8011d46:	3b04      	subs	r3, #4
 8011d48:	429d      	cmp	r5, r3
 8011d4a:	461a      	mov	r2, r3
 8011d4c:	d30a      	bcc.n	8011d64 <quorem+0x100>
 8011d4e:	613c      	str	r4, [r7, #16]
 8011d50:	4630      	mov	r0, r6
 8011d52:	b003      	add	sp, #12
 8011d54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011d58:	6812      	ldr	r2, [r2, #0]
 8011d5a:	3b04      	subs	r3, #4
 8011d5c:	2a00      	cmp	r2, #0
 8011d5e:	d1ce      	bne.n	8011cfe <quorem+0x9a>
 8011d60:	3c01      	subs	r4, #1
 8011d62:	e7c9      	b.n	8011cf8 <quorem+0x94>
 8011d64:	6812      	ldr	r2, [r2, #0]
 8011d66:	3b04      	subs	r3, #4
 8011d68:	2a00      	cmp	r2, #0
 8011d6a:	d1f0      	bne.n	8011d4e <quorem+0xea>
 8011d6c:	3c01      	subs	r4, #1
 8011d6e:	e7eb      	b.n	8011d48 <quorem+0xe4>
 8011d70:	2000      	movs	r0, #0
 8011d72:	e7ee      	b.n	8011d52 <quorem+0xee>
 8011d74:	0000      	movs	r0, r0
	...

08011d78 <_dtoa_r>:
 8011d78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011d7c:	ed2d 8b04 	vpush	{d8-d9}
 8011d80:	69c5      	ldr	r5, [r0, #28]
 8011d82:	b093      	sub	sp, #76	; 0x4c
 8011d84:	ed8d 0b02 	vstr	d0, [sp, #8]
 8011d88:	ec57 6b10 	vmov	r6, r7, d0
 8011d8c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8011d90:	9107      	str	r1, [sp, #28]
 8011d92:	4604      	mov	r4, r0
 8011d94:	920a      	str	r2, [sp, #40]	; 0x28
 8011d96:	930d      	str	r3, [sp, #52]	; 0x34
 8011d98:	b975      	cbnz	r5, 8011db8 <_dtoa_r+0x40>
 8011d9a:	2010      	movs	r0, #16
 8011d9c:	f000 fe2a 	bl	80129f4 <malloc>
 8011da0:	4602      	mov	r2, r0
 8011da2:	61e0      	str	r0, [r4, #28]
 8011da4:	b920      	cbnz	r0, 8011db0 <_dtoa_r+0x38>
 8011da6:	4bae      	ldr	r3, [pc, #696]	; (8012060 <_dtoa_r+0x2e8>)
 8011da8:	21ef      	movs	r1, #239	; 0xef
 8011daa:	48ae      	ldr	r0, [pc, #696]	; (8012064 <_dtoa_r+0x2ec>)
 8011dac:	f001 fcd8 	bl	8013760 <__assert_func>
 8011db0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8011db4:	6005      	str	r5, [r0, #0]
 8011db6:	60c5      	str	r5, [r0, #12]
 8011db8:	69e3      	ldr	r3, [r4, #28]
 8011dba:	6819      	ldr	r1, [r3, #0]
 8011dbc:	b151      	cbz	r1, 8011dd4 <_dtoa_r+0x5c>
 8011dbe:	685a      	ldr	r2, [r3, #4]
 8011dc0:	604a      	str	r2, [r1, #4]
 8011dc2:	2301      	movs	r3, #1
 8011dc4:	4093      	lsls	r3, r2
 8011dc6:	608b      	str	r3, [r1, #8]
 8011dc8:	4620      	mov	r0, r4
 8011dca:	f000 ff07 	bl	8012bdc <_Bfree>
 8011dce:	69e3      	ldr	r3, [r4, #28]
 8011dd0:	2200      	movs	r2, #0
 8011dd2:	601a      	str	r2, [r3, #0]
 8011dd4:	1e3b      	subs	r3, r7, #0
 8011dd6:	bfbb      	ittet	lt
 8011dd8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8011ddc:	9303      	strlt	r3, [sp, #12]
 8011dde:	2300      	movge	r3, #0
 8011de0:	2201      	movlt	r2, #1
 8011de2:	bfac      	ite	ge
 8011de4:	f8c8 3000 	strge.w	r3, [r8]
 8011de8:	f8c8 2000 	strlt.w	r2, [r8]
 8011dec:	4b9e      	ldr	r3, [pc, #632]	; (8012068 <_dtoa_r+0x2f0>)
 8011dee:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8011df2:	ea33 0308 	bics.w	r3, r3, r8
 8011df6:	d11b      	bne.n	8011e30 <_dtoa_r+0xb8>
 8011df8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8011dfa:	f242 730f 	movw	r3, #9999	; 0x270f
 8011dfe:	6013      	str	r3, [r2, #0]
 8011e00:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8011e04:	4333      	orrs	r3, r6
 8011e06:	f000 8593 	beq.w	8012930 <_dtoa_r+0xbb8>
 8011e0a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011e0c:	b963      	cbnz	r3, 8011e28 <_dtoa_r+0xb0>
 8011e0e:	4b97      	ldr	r3, [pc, #604]	; (801206c <_dtoa_r+0x2f4>)
 8011e10:	e027      	b.n	8011e62 <_dtoa_r+0xea>
 8011e12:	4b97      	ldr	r3, [pc, #604]	; (8012070 <_dtoa_r+0x2f8>)
 8011e14:	9300      	str	r3, [sp, #0]
 8011e16:	3308      	adds	r3, #8
 8011e18:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8011e1a:	6013      	str	r3, [r2, #0]
 8011e1c:	9800      	ldr	r0, [sp, #0]
 8011e1e:	b013      	add	sp, #76	; 0x4c
 8011e20:	ecbd 8b04 	vpop	{d8-d9}
 8011e24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011e28:	4b90      	ldr	r3, [pc, #576]	; (801206c <_dtoa_r+0x2f4>)
 8011e2a:	9300      	str	r3, [sp, #0]
 8011e2c:	3303      	adds	r3, #3
 8011e2e:	e7f3      	b.n	8011e18 <_dtoa_r+0xa0>
 8011e30:	ed9d 7b02 	vldr	d7, [sp, #8]
 8011e34:	2200      	movs	r2, #0
 8011e36:	ec51 0b17 	vmov	r0, r1, d7
 8011e3a:	eeb0 8a47 	vmov.f32	s16, s14
 8011e3e:	eef0 8a67 	vmov.f32	s17, s15
 8011e42:	2300      	movs	r3, #0
 8011e44:	f7ee fe68 	bl	8000b18 <__aeabi_dcmpeq>
 8011e48:	4681      	mov	r9, r0
 8011e4a:	b160      	cbz	r0, 8011e66 <_dtoa_r+0xee>
 8011e4c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8011e4e:	2301      	movs	r3, #1
 8011e50:	6013      	str	r3, [r2, #0]
 8011e52:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011e54:	2b00      	cmp	r3, #0
 8011e56:	f000 8568 	beq.w	801292a <_dtoa_r+0xbb2>
 8011e5a:	4b86      	ldr	r3, [pc, #536]	; (8012074 <_dtoa_r+0x2fc>)
 8011e5c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8011e5e:	6013      	str	r3, [r2, #0]
 8011e60:	3b01      	subs	r3, #1
 8011e62:	9300      	str	r3, [sp, #0]
 8011e64:	e7da      	b.n	8011e1c <_dtoa_r+0xa4>
 8011e66:	aa10      	add	r2, sp, #64	; 0x40
 8011e68:	a911      	add	r1, sp, #68	; 0x44
 8011e6a:	4620      	mov	r0, r4
 8011e6c:	eeb0 0a48 	vmov.f32	s0, s16
 8011e70:	eef0 0a68 	vmov.f32	s1, s17
 8011e74:	f001 f994 	bl	80131a0 <__d2b>
 8011e78:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8011e7c:	4682      	mov	sl, r0
 8011e7e:	2d00      	cmp	r5, #0
 8011e80:	d07f      	beq.n	8011f82 <_dtoa_r+0x20a>
 8011e82:	ee18 3a90 	vmov	r3, s17
 8011e86:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8011e8a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8011e8e:	ec51 0b18 	vmov	r0, r1, d8
 8011e92:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8011e96:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8011e9a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8011e9e:	4619      	mov	r1, r3
 8011ea0:	2200      	movs	r2, #0
 8011ea2:	4b75      	ldr	r3, [pc, #468]	; (8012078 <_dtoa_r+0x300>)
 8011ea4:	f7ee fa18 	bl	80002d8 <__aeabi_dsub>
 8011ea8:	a367      	add	r3, pc, #412	; (adr r3, 8012048 <_dtoa_r+0x2d0>)
 8011eaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011eae:	f7ee fbcb 	bl	8000648 <__aeabi_dmul>
 8011eb2:	a367      	add	r3, pc, #412	; (adr r3, 8012050 <_dtoa_r+0x2d8>)
 8011eb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011eb8:	f7ee fa10 	bl	80002dc <__adddf3>
 8011ebc:	4606      	mov	r6, r0
 8011ebe:	4628      	mov	r0, r5
 8011ec0:	460f      	mov	r7, r1
 8011ec2:	f7ee fb57 	bl	8000574 <__aeabi_i2d>
 8011ec6:	a364      	add	r3, pc, #400	; (adr r3, 8012058 <_dtoa_r+0x2e0>)
 8011ec8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ecc:	f7ee fbbc 	bl	8000648 <__aeabi_dmul>
 8011ed0:	4602      	mov	r2, r0
 8011ed2:	460b      	mov	r3, r1
 8011ed4:	4630      	mov	r0, r6
 8011ed6:	4639      	mov	r1, r7
 8011ed8:	f7ee fa00 	bl	80002dc <__adddf3>
 8011edc:	4606      	mov	r6, r0
 8011ede:	460f      	mov	r7, r1
 8011ee0:	f7ee fe62 	bl	8000ba8 <__aeabi_d2iz>
 8011ee4:	2200      	movs	r2, #0
 8011ee6:	4683      	mov	fp, r0
 8011ee8:	2300      	movs	r3, #0
 8011eea:	4630      	mov	r0, r6
 8011eec:	4639      	mov	r1, r7
 8011eee:	f7ee fe1d 	bl	8000b2c <__aeabi_dcmplt>
 8011ef2:	b148      	cbz	r0, 8011f08 <_dtoa_r+0x190>
 8011ef4:	4658      	mov	r0, fp
 8011ef6:	f7ee fb3d 	bl	8000574 <__aeabi_i2d>
 8011efa:	4632      	mov	r2, r6
 8011efc:	463b      	mov	r3, r7
 8011efe:	f7ee fe0b 	bl	8000b18 <__aeabi_dcmpeq>
 8011f02:	b908      	cbnz	r0, 8011f08 <_dtoa_r+0x190>
 8011f04:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8011f08:	f1bb 0f16 	cmp.w	fp, #22
 8011f0c:	d857      	bhi.n	8011fbe <_dtoa_r+0x246>
 8011f0e:	4b5b      	ldr	r3, [pc, #364]	; (801207c <_dtoa_r+0x304>)
 8011f10:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8011f14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f18:	ec51 0b18 	vmov	r0, r1, d8
 8011f1c:	f7ee fe06 	bl	8000b2c <__aeabi_dcmplt>
 8011f20:	2800      	cmp	r0, #0
 8011f22:	d04e      	beq.n	8011fc2 <_dtoa_r+0x24a>
 8011f24:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8011f28:	2300      	movs	r3, #0
 8011f2a:	930c      	str	r3, [sp, #48]	; 0x30
 8011f2c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8011f2e:	1b5b      	subs	r3, r3, r5
 8011f30:	1e5a      	subs	r2, r3, #1
 8011f32:	bf45      	ittet	mi
 8011f34:	f1c3 0301 	rsbmi	r3, r3, #1
 8011f38:	9305      	strmi	r3, [sp, #20]
 8011f3a:	2300      	movpl	r3, #0
 8011f3c:	2300      	movmi	r3, #0
 8011f3e:	9206      	str	r2, [sp, #24]
 8011f40:	bf54      	ite	pl
 8011f42:	9305      	strpl	r3, [sp, #20]
 8011f44:	9306      	strmi	r3, [sp, #24]
 8011f46:	f1bb 0f00 	cmp.w	fp, #0
 8011f4a:	db3c      	blt.n	8011fc6 <_dtoa_r+0x24e>
 8011f4c:	9b06      	ldr	r3, [sp, #24]
 8011f4e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8011f52:	445b      	add	r3, fp
 8011f54:	9306      	str	r3, [sp, #24]
 8011f56:	2300      	movs	r3, #0
 8011f58:	9308      	str	r3, [sp, #32]
 8011f5a:	9b07      	ldr	r3, [sp, #28]
 8011f5c:	2b09      	cmp	r3, #9
 8011f5e:	d868      	bhi.n	8012032 <_dtoa_r+0x2ba>
 8011f60:	2b05      	cmp	r3, #5
 8011f62:	bfc4      	itt	gt
 8011f64:	3b04      	subgt	r3, #4
 8011f66:	9307      	strgt	r3, [sp, #28]
 8011f68:	9b07      	ldr	r3, [sp, #28]
 8011f6a:	f1a3 0302 	sub.w	r3, r3, #2
 8011f6e:	bfcc      	ite	gt
 8011f70:	2500      	movgt	r5, #0
 8011f72:	2501      	movle	r5, #1
 8011f74:	2b03      	cmp	r3, #3
 8011f76:	f200 8085 	bhi.w	8012084 <_dtoa_r+0x30c>
 8011f7a:	e8df f003 	tbb	[pc, r3]
 8011f7e:	3b2e      	.short	0x3b2e
 8011f80:	5839      	.short	0x5839
 8011f82:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8011f86:	441d      	add	r5, r3
 8011f88:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8011f8c:	2b20      	cmp	r3, #32
 8011f8e:	bfc1      	itttt	gt
 8011f90:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8011f94:	fa08 f803 	lslgt.w	r8, r8, r3
 8011f98:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8011f9c:	fa26 f303 	lsrgt.w	r3, r6, r3
 8011fa0:	bfd6      	itet	le
 8011fa2:	f1c3 0320 	rsble	r3, r3, #32
 8011fa6:	ea48 0003 	orrgt.w	r0, r8, r3
 8011faa:	fa06 f003 	lslle.w	r0, r6, r3
 8011fae:	f7ee fad1 	bl	8000554 <__aeabi_ui2d>
 8011fb2:	2201      	movs	r2, #1
 8011fb4:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8011fb8:	3d01      	subs	r5, #1
 8011fba:	920e      	str	r2, [sp, #56]	; 0x38
 8011fbc:	e76f      	b.n	8011e9e <_dtoa_r+0x126>
 8011fbe:	2301      	movs	r3, #1
 8011fc0:	e7b3      	b.n	8011f2a <_dtoa_r+0x1b2>
 8011fc2:	900c      	str	r0, [sp, #48]	; 0x30
 8011fc4:	e7b2      	b.n	8011f2c <_dtoa_r+0x1b4>
 8011fc6:	9b05      	ldr	r3, [sp, #20]
 8011fc8:	eba3 030b 	sub.w	r3, r3, fp
 8011fcc:	9305      	str	r3, [sp, #20]
 8011fce:	f1cb 0300 	rsb	r3, fp, #0
 8011fd2:	9308      	str	r3, [sp, #32]
 8011fd4:	2300      	movs	r3, #0
 8011fd6:	930b      	str	r3, [sp, #44]	; 0x2c
 8011fd8:	e7bf      	b.n	8011f5a <_dtoa_r+0x1e2>
 8011fda:	2300      	movs	r3, #0
 8011fdc:	9309      	str	r3, [sp, #36]	; 0x24
 8011fde:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011fe0:	2b00      	cmp	r3, #0
 8011fe2:	dc52      	bgt.n	801208a <_dtoa_r+0x312>
 8011fe4:	2301      	movs	r3, #1
 8011fe6:	9301      	str	r3, [sp, #4]
 8011fe8:	9304      	str	r3, [sp, #16]
 8011fea:	461a      	mov	r2, r3
 8011fec:	920a      	str	r2, [sp, #40]	; 0x28
 8011fee:	e00b      	b.n	8012008 <_dtoa_r+0x290>
 8011ff0:	2301      	movs	r3, #1
 8011ff2:	e7f3      	b.n	8011fdc <_dtoa_r+0x264>
 8011ff4:	2300      	movs	r3, #0
 8011ff6:	9309      	str	r3, [sp, #36]	; 0x24
 8011ff8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011ffa:	445b      	add	r3, fp
 8011ffc:	9301      	str	r3, [sp, #4]
 8011ffe:	3301      	adds	r3, #1
 8012000:	2b01      	cmp	r3, #1
 8012002:	9304      	str	r3, [sp, #16]
 8012004:	bfb8      	it	lt
 8012006:	2301      	movlt	r3, #1
 8012008:	69e0      	ldr	r0, [r4, #28]
 801200a:	2100      	movs	r1, #0
 801200c:	2204      	movs	r2, #4
 801200e:	f102 0614 	add.w	r6, r2, #20
 8012012:	429e      	cmp	r6, r3
 8012014:	d93d      	bls.n	8012092 <_dtoa_r+0x31a>
 8012016:	6041      	str	r1, [r0, #4]
 8012018:	4620      	mov	r0, r4
 801201a:	f000 fd9f 	bl	8012b5c <_Balloc>
 801201e:	9000      	str	r0, [sp, #0]
 8012020:	2800      	cmp	r0, #0
 8012022:	d139      	bne.n	8012098 <_dtoa_r+0x320>
 8012024:	4b16      	ldr	r3, [pc, #88]	; (8012080 <_dtoa_r+0x308>)
 8012026:	4602      	mov	r2, r0
 8012028:	f240 11af 	movw	r1, #431	; 0x1af
 801202c:	e6bd      	b.n	8011daa <_dtoa_r+0x32>
 801202e:	2301      	movs	r3, #1
 8012030:	e7e1      	b.n	8011ff6 <_dtoa_r+0x27e>
 8012032:	2501      	movs	r5, #1
 8012034:	2300      	movs	r3, #0
 8012036:	9307      	str	r3, [sp, #28]
 8012038:	9509      	str	r5, [sp, #36]	; 0x24
 801203a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801203e:	9301      	str	r3, [sp, #4]
 8012040:	9304      	str	r3, [sp, #16]
 8012042:	2200      	movs	r2, #0
 8012044:	2312      	movs	r3, #18
 8012046:	e7d1      	b.n	8011fec <_dtoa_r+0x274>
 8012048:	636f4361 	.word	0x636f4361
 801204c:	3fd287a7 	.word	0x3fd287a7
 8012050:	8b60c8b3 	.word	0x8b60c8b3
 8012054:	3fc68a28 	.word	0x3fc68a28
 8012058:	509f79fb 	.word	0x509f79fb
 801205c:	3fd34413 	.word	0x3fd34413
 8012060:	08013c21 	.word	0x08013c21
 8012064:	08013c38 	.word	0x08013c38
 8012068:	7ff00000 	.word	0x7ff00000
 801206c:	08013c1d 	.word	0x08013c1d
 8012070:	08013c14 	.word	0x08013c14
 8012074:	08013bf1 	.word	0x08013bf1
 8012078:	3ff80000 	.word	0x3ff80000
 801207c:	08013d28 	.word	0x08013d28
 8012080:	08013c90 	.word	0x08013c90
 8012084:	2301      	movs	r3, #1
 8012086:	9309      	str	r3, [sp, #36]	; 0x24
 8012088:	e7d7      	b.n	801203a <_dtoa_r+0x2c2>
 801208a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801208c:	9301      	str	r3, [sp, #4]
 801208e:	9304      	str	r3, [sp, #16]
 8012090:	e7ba      	b.n	8012008 <_dtoa_r+0x290>
 8012092:	3101      	adds	r1, #1
 8012094:	0052      	lsls	r2, r2, #1
 8012096:	e7ba      	b.n	801200e <_dtoa_r+0x296>
 8012098:	69e3      	ldr	r3, [r4, #28]
 801209a:	9a00      	ldr	r2, [sp, #0]
 801209c:	601a      	str	r2, [r3, #0]
 801209e:	9b04      	ldr	r3, [sp, #16]
 80120a0:	2b0e      	cmp	r3, #14
 80120a2:	f200 80a8 	bhi.w	80121f6 <_dtoa_r+0x47e>
 80120a6:	2d00      	cmp	r5, #0
 80120a8:	f000 80a5 	beq.w	80121f6 <_dtoa_r+0x47e>
 80120ac:	f1bb 0f00 	cmp.w	fp, #0
 80120b0:	dd38      	ble.n	8012124 <_dtoa_r+0x3ac>
 80120b2:	4bc0      	ldr	r3, [pc, #768]	; (80123b4 <_dtoa_r+0x63c>)
 80120b4:	f00b 020f 	and.w	r2, fp, #15
 80120b8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80120bc:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80120c0:	e9d3 6700 	ldrd	r6, r7, [r3]
 80120c4:	ea4f 182b 	mov.w	r8, fp, asr #4
 80120c8:	d019      	beq.n	80120fe <_dtoa_r+0x386>
 80120ca:	4bbb      	ldr	r3, [pc, #748]	; (80123b8 <_dtoa_r+0x640>)
 80120cc:	ec51 0b18 	vmov	r0, r1, d8
 80120d0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80120d4:	f7ee fbe2 	bl	800089c <__aeabi_ddiv>
 80120d8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80120dc:	f008 080f 	and.w	r8, r8, #15
 80120e0:	2503      	movs	r5, #3
 80120e2:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 80123b8 <_dtoa_r+0x640>
 80120e6:	f1b8 0f00 	cmp.w	r8, #0
 80120ea:	d10a      	bne.n	8012102 <_dtoa_r+0x38a>
 80120ec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80120f0:	4632      	mov	r2, r6
 80120f2:	463b      	mov	r3, r7
 80120f4:	f7ee fbd2 	bl	800089c <__aeabi_ddiv>
 80120f8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80120fc:	e02b      	b.n	8012156 <_dtoa_r+0x3de>
 80120fe:	2502      	movs	r5, #2
 8012100:	e7ef      	b.n	80120e2 <_dtoa_r+0x36a>
 8012102:	f018 0f01 	tst.w	r8, #1
 8012106:	d008      	beq.n	801211a <_dtoa_r+0x3a2>
 8012108:	4630      	mov	r0, r6
 801210a:	4639      	mov	r1, r7
 801210c:	e9d9 2300 	ldrd	r2, r3, [r9]
 8012110:	f7ee fa9a 	bl	8000648 <__aeabi_dmul>
 8012114:	3501      	adds	r5, #1
 8012116:	4606      	mov	r6, r0
 8012118:	460f      	mov	r7, r1
 801211a:	ea4f 0868 	mov.w	r8, r8, asr #1
 801211e:	f109 0908 	add.w	r9, r9, #8
 8012122:	e7e0      	b.n	80120e6 <_dtoa_r+0x36e>
 8012124:	f000 809f 	beq.w	8012266 <_dtoa_r+0x4ee>
 8012128:	f1cb 0600 	rsb	r6, fp, #0
 801212c:	4ba1      	ldr	r3, [pc, #644]	; (80123b4 <_dtoa_r+0x63c>)
 801212e:	4fa2      	ldr	r7, [pc, #648]	; (80123b8 <_dtoa_r+0x640>)
 8012130:	f006 020f 	and.w	r2, r6, #15
 8012134:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8012138:	e9d3 2300 	ldrd	r2, r3, [r3]
 801213c:	ec51 0b18 	vmov	r0, r1, d8
 8012140:	f7ee fa82 	bl	8000648 <__aeabi_dmul>
 8012144:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012148:	1136      	asrs	r6, r6, #4
 801214a:	2300      	movs	r3, #0
 801214c:	2502      	movs	r5, #2
 801214e:	2e00      	cmp	r6, #0
 8012150:	d17e      	bne.n	8012250 <_dtoa_r+0x4d8>
 8012152:	2b00      	cmp	r3, #0
 8012154:	d1d0      	bne.n	80120f8 <_dtoa_r+0x380>
 8012156:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012158:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 801215c:	2b00      	cmp	r3, #0
 801215e:	f000 8084 	beq.w	801226a <_dtoa_r+0x4f2>
 8012162:	4b96      	ldr	r3, [pc, #600]	; (80123bc <_dtoa_r+0x644>)
 8012164:	2200      	movs	r2, #0
 8012166:	4640      	mov	r0, r8
 8012168:	4649      	mov	r1, r9
 801216a:	f7ee fcdf 	bl	8000b2c <__aeabi_dcmplt>
 801216e:	2800      	cmp	r0, #0
 8012170:	d07b      	beq.n	801226a <_dtoa_r+0x4f2>
 8012172:	9b04      	ldr	r3, [sp, #16]
 8012174:	2b00      	cmp	r3, #0
 8012176:	d078      	beq.n	801226a <_dtoa_r+0x4f2>
 8012178:	9b01      	ldr	r3, [sp, #4]
 801217a:	2b00      	cmp	r3, #0
 801217c:	dd39      	ble.n	80121f2 <_dtoa_r+0x47a>
 801217e:	4b90      	ldr	r3, [pc, #576]	; (80123c0 <_dtoa_r+0x648>)
 8012180:	2200      	movs	r2, #0
 8012182:	4640      	mov	r0, r8
 8012184:	4649      	mov	r1, r9
 8012186:	f7ee fa5f 	bl	8000648 <__aeabi_dmul>
 801218a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801218e:	9e01      	ldr	r6, [sp, #4]
 8012190:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 8012194:	3501      	adds	r5, #1
 8012196:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 801219a:	4628      	mov	r0, r5
 801219c:	f7ee f9ea 	bl	8000574 <__aeabi_i2d>
 80121a0:	4642      	mov	r2, r8
 80121a2:	464b      	mov	r3, r9
 80121a4:	f7ee fa50 	bl	8000648 <__aeabi_dmul>
 80121a8:	4b86      	ldr	r3, [pc, #536]	; (80123c4 <_dtoa_r+0x64c>)
 80121aa:	2200      	movs	r2, #0
 80121ac:	f7ee f896 	bl	80002dc <__adddf3>
 80121b0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80121b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80121b8:	9303      	str	r3, [sp, #12]
 80121ba:	2e00      	cmp	r6, #0
 80121bc:	d158      	bne.n	8012270 <_dtoa_r+0x4f8>
 80121be:	4b82      	ldr	r3, [pc, #520]	; (80123c8 <_dtoa_r+0x650>)
 80121c0:	2200      	movs	r2, #0
 80121c2:	4640      	mov	r0, r8
 80121c4:	4649      	mov	r1, r9
 80121c6:	f7ee f887 	bl	80002d8 <__aeabi_dsub>
 80121ca:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80121ce:	4680      	mov	r8, r0
 80121d0:	4689      	mov	r9, r1
 80121d2:	f7ee fcc9 	bl	8000b68 <__aeabi_dcmpgt>
 80121d6:	2800      	cmp	r0, #0
 80121d8:	f040 8296 	bne.w	8012708 <_dtoa_r+0x990>
 80121dc:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80121e0:	4640      	mov	r0, r8
 80121e2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80121e6:	4649      	mov	r1, r9
 80121e8:	f7ee fca0 	bl	8000b2c <__aeabi_dcmplt>
 80121ec:	2800      	cmp	r0, #0
 80121ee:	f040 8289 	bne.w	8012704 <_dtoa_r+0x98c>
 80121f2:	ed8d 8b02 	vstr	d8, [sp, #8]
 80121f6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80121f8:	2b00      	cmp	r3, #0
 80121fa:	f2c0 814e 	blt.w	801249a <_dtoa_r+0x722>
 80121fe:	f1bb 0f0e 	cmp.w	fp, #14
 8012202:	f300 814a 	bgt.w	801249a <_dtoa_r+0x722>
 8012206:	4b6b      	ldr	r3, [pc, #428]	; (80123b4 <_dtoa_r+0x63c>)
 8012208:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801220c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8012210:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012212:	2b00      	cmp	r3, #0
 8012214:	f280 80dc 	bge.w	80123d0 <_dtoa_r+0x658>
 8012218:	9b04      	ldr	r3, [sp, #16]
 801221a:	2b00      	cmp	r3, #0
 801221c:	f300 80d8 	bgt.w	80123d0 <_dtoa_r+0x658>
 8012220:	f040 826f 	bne.w	8012702 <_dtoa_r+0x98a>
 8012224:	4b68      	ldr	r3, [pc, #416]	; (80123c8 <_dtoa_r+0x650>)
 8012226:	2200      	movs	r2, #0
 8012228:	4640      	mov	r0, r8
 801222a:	4649      	mov	r1, r9
 801222c:	f7ee fa0c 	bl	8000648 <__aeabi_dmul>
 8012230:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8012234:	f7ee fc8e 	bl	8000b54 <__aeabi_dcmpge>
 8012238:	9e04      	ldr	r6, [sp, #16]
 801223a:	4637      	mov	r7, r6
 801223c:	2800      	cmp	r0, #0
 801223e:	f040 8245 	bne.w	80126cc <_dtoa_r+0x954>
 8012242:	9d00      	ldr	r5, [sp, #0]
 8012244:	2331      	movs	r3, #49	; 0x31
 8012246:	f805 3b01 	strb.w	r3, [r5], #1
 801224a:	f10b 0b01 	add.w	fp, fp, #1
 801224e:	e241      	b.n	80126d4 <_dtoa_r+0x95c>
 8012250:	07f2      	lsls	r2, r6, #31
 8012252:	d505      	bpl.n	8012260 <_dtoa_r+0x4e8>
 8012254:	e9d7 2300 	ldrd	r2, r3, [r7]
 8012258:	f7ee f9f6 	bl	8000648 <__aeabi_dmul>
 801225c:	3501      	adds	r5, #1
 801225e:	2301      	movs	r3, #1
 8012260:	1076      	asrs	r6, r6, #1
 8012262:	3708      	adds	r7, #8
 8012264:	e773      	b.n	801214e <_dtoa_r+0x3d6>
 8012266:	2502      	movs	r5, #2
 8012268:	e775      	b.n	8012156 <_dtoa_r+0x3de>
 801226a:	9e04      	ldr	r6, [sp, #16]
 801226c:	465f      	mov	r7, fp
 801226e:	e792      	b.n	8012196 <_dtoa_r+0x41e>
 8012270:	9900      	ldr	r1, [sp, #0]
 8012272:	4b50      	ldr	r3, [pc, #320]	; (80123b4 <_dtoa_r+0x63c>)
 8012274:	ed9d 7b02 	vldr	d7, [sp, #8]
 8012278:	4431      	add	r1, r6
 801227a:	9102      	str	r1, [sp, #8]
 801227c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801227e:	eeb0 9a47 	vmov.f32	s18, s14
 8012282:	eef0 9a67 	vmov.f32	s19, s15
 8012286:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 801228a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801228e:	2900      	cmp	r1, #0
 8012290:	d044      	beq.n	801231c <_dtoa_r+0x5a4>
 8012292:	494e      	ldr	r1, [pc, #312]	; (80123cc <_dtoa_r+0x654>)
 8012294:	2000      	movs	r0, #0
 8012296:	f7ee fb01 	bl	800089c <__aeabi_ddiv>
 801229a:	ec53 2b19 	vmov	r2, r3, d9
 801229e:	f7ee f81b 	bl	80002d8 <__aeabi_dsub>
 80122a2:	9d00      	ldr	r5, [sp, #0]
 80122a4:	ec41 0b19 	vmov	d9, r0, r1
 80122a8:	4649      	mov	r1, r9
 80122aa:	4640      	mov	r0, r8
 80122ac:	f7ee fc7c 	bl	8000ba8 <__aeabi_d2iz>
 80122b0:	4606      	mov	r6, r0
 80122b2:	f7ee f95f 	bl	8000574 <__aeabi_i2d>
 80122b6:	4602      	mov	r2, r0
 80122b8:	460b      	mov	r3, r1
 80122ba:	4640      	mov	r0, r8
 80122bc:	4649      	mov	r1, r9
 80122be:	f7ee f80b 	bl	80002d8 <__aeabi_dsub>
 80122c2:	3630      	adds	r6, #48	; 0x30
 80122c4:	f805 6b01 	strb.w	r6, [r5], #1
 80122c8:	ec53 2b19 	vmov	r2, r3, d9
 80122cc:	4680      	mov	r8, r0
 80122ce:	4689      	mov	r9, r1
 80122d0:	f7ee fc2c 	bl	8000b2c <__aeabi_dcmplt>
 80122d4:	2800      	cmp	r0, #0
 80122d6:	d164      	bne.n	80123a2 <_dtoa_r+0x62a>
 80122d8:	4642      	mov	r2, r8
 80122da:	464b      	mov	r3, r9
 80122dc:	4937      	ldr	r1, [pc, #220]	; (80123bc <_dtoa_r+0x644>)
 80122de:	2000      	movs	r0, #0
 80122e0:	f7ed fffa 	bl	80002d8 <__aeabi_dsub>
 80122e4:	ec53 2b19 	vmov	r2, r3, d9
 80122e8:	f7ee fc20 	bl	8000b2c <__aeabi_dcmplt>
 80122ec:	2800      	cmp	r0, #0
 80122ee:	f040 80b6 	bne.w	801245e <_dtoa_r+0x6e6>
 80122f2:	9b02      	ldr	r3, [sp, #8]
 80122f4:	429d      	cmp	r5, r3
 80122f6:	f43f af7c 	beq.w	80121f2 <_dtoa_r+0x47a>
 80122fa:	4b31      	ldr	r3, [pc, #196]	; (80123c0 <_dtoa_r+0x648>)
 80122fc:	ec51 0b19 	vmov	r0, r1, d9
 8012300:	2200      	movs	r2, #0
 8012302:	f7ee f9a1 	bl	8000648 <__aeabi_dmul>
 8012306:	4b2e      	ldr	r3, [pc, #184]	; (80123c0 <_dtoa_r+0x648>)
 8012308:	ec41 0b19 	vmov	d9, r0, r1
 801230c:	2200      	movs	r2, #0
 801230e:	4640      	mov	r0, r8
 8012310:	4649      	mov	r1, r9
 8012312:	f7ee f999 	bl	8000648 <__aeabi_dmul>
 8012316:	4680      	mov	r8, r0
 8012318:	4689      	mov	r9, r1
 801231a:	e7c5      	b.n	80122a8 <_dtoa_r+0x530>
 801231c:	ec51 0b17 	vmov	r0, r1, d7
 8012320:	f7ee f992 	bl	8000648 <__aeabi_dmul>
 8012324:	9b02      	ldr	r3, [sp, #8]
 8012326:	9d00      	ldr	r5, [sp, #0]
 8012328:	930f      	str	r3, [sp, #60]	; 0x3c
 801232a:	ec41 0b19 	vmov	d9, r0, r1
 801232e:	4649      	mov	r1, r9
 8012330:	4640      	mov	r0, r8
 8012332:	f7ee fc39 	bl	8000ba8 <__aeabi_d2iz>
 8012336:	4606      	mov	r6, r0
 8012338:	f7ee f91c 	bl	8000574 <__aeabi_i2d>
 801233c:	3630      	adds	r6, #48	; 0x30
 801233e:	4602      	mov	r2, r0
 8012340:	460b      	mov	r3, r1
 8012342:	4640      	mov	r0, r8
 8012344:	4649      	mov	r1, r9
 8012346:	f7ed ffc7 	bl	80002d8 <__aeabi_dsub>
 801234a:	f805 6b01 	strb.w	r6, [r5], #1
 801234e:	9b02      	ldr	r3, [sp, #8]
 8012350:	429d      	cmp	r5, r3
 8012352:	4680      	mov	r8, r0
 8012354:	4689      	mov	r9, r1
 8012356:	f04f 0200 	mov.w	r2, #0
 801235a:	d124      	bne.n	80123a6 <_dtoa_r+0x62e>
 801235c:	4b1b      	ldr	r3, [pc, #108]	; (80123cc <_dtoa_r+0x654>)
 801235e:	ec51 0b19 	vmov	r0, r1, d9
 8012362:	f7ed ffbb 	bl	80002dc <__adddf3>
 8012366:	4602      	mov	r2, r0
 8012368:	460b      	mov	r3, r1
 801236a:	4640      	mov	r0, r8
 801236c:	4649      	mov	r1, r9
 801236e:	f7ee fbfb 	bl	8000b68 <__aeabi_dcmpgt>
 8012372:	2800      	cmp	r0, #0
 8012374:	d173      	bne.n	801245e <_dtoa_r+0x6e6>
 8012376:	ec53 2b19 	vmov	r2, r3, d9
 801237a:	4914      	ldr	r1, [pc, #80]	; (80123cc <_dtoa_r+0x654>)
 801237c:	2000      	movs	r0, #0
 801237e:	f7ed ffab 	bl	80002d8 <__aeabi_dsub>
 8012382:	4602      	mov	r2, r0
 8012384:	460b      	mov	r3, r1
 8012386:	4640      	mov	r0, r8
 8012388:	4649      	mov	r1, r9
 801238a:	f7ee fbcf 	bl	8000b2c <__aeabi_dcmplt>
 801238e:	2800      	cmp	r0, #0
 8012390:	f43f af2f 	beq.w	80121f2 <_dtoa_r+0x47a>
 8012394:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8012396:	1e6b      	subs	r3, r5, #1
 8012398:	930f      	str	r3, [sp, #60]	; 0x3c
 801239a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801239e:	2b30      	cmp	r3, #48	; 0x30
 80123a0:	d0f8      	beq.n	8012394 <_dtoa_r+0x61c>
 80123a2:	46bb      	mov	fp, r7
 80123a4:	e04a      	b.n	801243c <_dtoa_r+0x6c4>
 80123a6:	4b06      	ldr	r3, [pc, #24]	; (80123c0 <_dtoa_r+0x648>)
 80123a8:	f7ee f94e 	bl	8000648 <__aeabi_dmul>
 80123ac:	4680      	mov	r8, r0
 80123ae:	4689      	mov	r9, r1
 80123b0:	e7bd      	b.n	801232e <_dtoa_r+0x5b6>
 80123b2:	bf00      	nop
 80123b4:	08013d28 	.word	0x08013d28
 80123b8:	08013d00 	.word	0x08013d00
 80123bc:	3ff00000 	.word	0x3ff00000
 80123c0:	40240000 	.word	0x40240000
 80123c4:	401c0000 	.word	0x401c0000
 80123c8:	40140000 	.word	0x40140000
 80123cc:	3fe00000 	.word	0x3fe00000
 80123d0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80123d4:	9d00      	ldr	r5, [sp, #0]
 80123d6:	4642      	mov	r2, r8
 80123d8:	464b      	mov	r3, r9
 80123da:	4630      	mov	r0, r6
 80123dc:	4639      	mov	r1, r7
 80123de:	f7ee fa5d 	bl	800089c <__aeabi_ddiv>
 80123e2:	f7ee fbe1 	bl	8000ba8 <__aeabi_d2iz>
 80123e6:	9001      	str	r0, [sp, #4]
 80123e8:	f7ee f8c4 	bl	8000574 <__aeabi_i2d>
 80123ec:	4642      	mov	r2, r8
 80123ee:	464b      	mov	r3, r9
 80123f0:	f7ee f92a 	bl	8000648 <__aeabi_dmul>
 80123f4:	4602      	mov	r2, r0
 80123f6:	460b      	mov	r3, r1
 80123f8:	4630      	mov	r0, r6
 80123fa:	4639      	mov	r1, r7
 80123fc:	f7ed ff6c 	bl	80002d8 <__aeabi_dsub>
 8012400:	9e01      	ldr	r6, [sp, #4]
 8012402:	9f04      	ldr	r7, [sp, #16]
 8012404:	3630      	adds	r6, #48	; 0x30
 8012406:	f805 6b01 	strb.w	r6, [r5], #1
 801240a:	9e00      	ldr	r6, [sp, #0]
 801240c:	1bae      	subs	r6, r5, r6
 801240e:	42b7      	cmp	r7, r6
 8012410:	4602      	mov	r2, r0
 8012412:	460b      	mov	r3, r1
 8012414:	d134      	bne.n	8012480 <_dtoa_r+0x708>
 8012416:	f7ed ff61 	bl	80002dc <__adddf3>
 801241a:	4642      	mov	r2, r8
 801241c:	464b      	mov	r3, r9
 801241e:	4606      	mov	r6, r0
 8012420:	460f      	mov	r7, r1
 8012422:	f7ee fba1 	bl	8000b68 <__aeabi_dcmpgt>
 8012426:	b9c8      	cbnz	r0, 801245c <_dtoa_r+0x6e4>
 8012428:	4642      	mov	r2, r8
 801242a:	464b      	mov	r3, r9
 801242c:	4630      	mov	r0, r6
 801242e:	4639      	mov	r1, r7
 8012430:	f7ee fb72 	bl	8000b18 <__aeabi_dcmpeq>
 8012434:	b110      	cbz	r0, 801243c <_dtoa_r+0x6c4>
 8012436:	9b01      	ldr	r3, [sp, #4]
 8012438:	07db      	lsls	r3, r3, #31
 801243a:	d40f      	bmi.n	801245c <_dtoa_r+0x6e4>
 801243c:	4651      	mov	r1, sl
 801243e:	4620      	mov	r0, r4
 8012440:	f000 fbcc 	bl	8012bdc <_Bfree>
 8012444:	2300      	movs	r3, #0
 8012446:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8012448:	702b      	strb	r3, [r5, #0]
 801244a:	f10b 0301 	add.w	r3, fp, #1
 801244e:	6013      	str	r3, [r2, #0]
 8012450:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012452:	2b00      	cmp	r3, #0
 8012454:	f43f ace2 	beq.w	8011e1c <_dtoa_r+0xa4>
 8012458:	601d      	str	r5, [r3, #0]
 801245a:	e4df      	b.n	8011e1c <_dtoa_r+0xa4>
 801245c:	465f      	mov	r7, fp
 801245e:	462b      	mov	r3, r5
 8012460:	461d      	mov	r5, r3
 8012462:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8012466:	2a39      	cmp	r2, #57	; 0x39
 8012468:	d106      	bne.n	8012478 <_dtoa_r+0x700>
 801246a:	9a00      	ldr	r2, [sp, #0]
 801246c:	429a      	cmp	r2, r3
 801246e:	d1f7      	bne.n	8012460 <_dtoa_r+0x6e8>
 8012470:	9900      	ldr	r1, [sp, #0]
 8012472:	2230      	movs	r2, #48	; 0x30
 8012474:	3701      	adds	r7, #1
 8012476:	700a      	strb	r2, [r1, #0]
 8012478:	781a      	ldrb	r2, [r3, #0]
 801247a:	3201      	adds	r2, #1
 801247c:	701a      	strb	r2, [r3, #0]
 801247e:	e790      	b.n	80123a2 <_dtoa_r+0x62a>
 8012480:	4ba3      	ldr	r3, [pc, #652]	; (8012710 <_dtoa_r+0x998>)
 8012482:	2200      	movs	r2, #0
 8012484:	f7ee f8e0 	bl	8000648 <__aeabi_dmul>
 8012488:	2200      	movs	r2, #0
 801248a:	2300      	movs	r3, #0
 801248c:	4606      	mov	r6, r0
 801248e:	460f      	mov	r7, r1
 8012490:	f7ee fb42 	bl	8000b18 <__aeabi_dcmpeq>
 8012494:	2800      	cmp	r0, #0
 8012496:	d09e      	beq.n	80123d6 <_dtoa_r+0x65e>
 8012498:	e7d0      	b.n	801243c <_dtoa_r+0x6c4>
 801249a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801249c:	2a00      	cmp	r2, #0
 801249e:	f000 80ca 	beq.w	8012636 <_dtoa_r+0x8be>
 80124a2:	9a07      	ldr	r2, [sp, #28]
 80124a4:	2a01      	cmp	r2, #1
 80124a6:	f300 80ad 	bgt.w	8012604 <_dtoa_r+0x88c>
 80124aa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80124ac:	2a00      	cmp	r2, #0
 80124ae:	f000 80a5 	beq.w	80125fc <_dtoa_r+0x884>
 80124b2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80124b6:	9e08      	ldr	r6, [sp, #32]
 80124b8:	9d05      	ldr	r5, [sp, #20]
 80124ba:	9a05      	ldr	r2, [sp, #20]
 80124bc:	441a      	add	r2, r3
 80124be:	9205      	str	r2, [sp, #20]
 80124c0:	9a06      	ldr	r2, [sp, #24]
 80124c2:	2101      	movs	r1, #1
 80124c4:	441a      	add	r2, r3
 80124c6:	4620      	mov	r0, r4
 80124c8:	9206      	str	r2, [sp, #24]
 80124ca:	f000 fc3d 	bl	8012d48 <__i2b>
 80124ce:	4607      	mov	r7, r0
 80124d0:	b165      	cbz	r5, 80124ec <_dtoa_r+0x774>
 80124d2:	9b06      	ldr	r3, [sp, #24]
 80124d4:	2b00      	cmp	r3, #0
 80124d6:	dd09      	ble.n	80124ec <_dtoa_r+0x774>
 80124d8:	42ab      	cmp	r3, r5
 80124da:	9a05      	ldr	r2, [sp, #20]
 80124dc:	bfa8      	it	ge
 80124de:	462b      	movge	r3, r5
 80124e0:	1ad2      	subs	r2, r2, r3
 80124e2:	9205      	str	r2, [sp, #20]
 80124e4:	9a06      	ldr	r2, [sp, #24]
 80124e6:	1aed      	subs	r5, r5, r3
 80124e8:	1ad3      	subs	r3, r2, r3
 80124ea:	9306      	str	r3, [sp, #24]
 80124ec:	9b08      	ldr	r3, [sp, #32]
 80124ee:	b1f3      	cbz	r3, 801252e <_dtoa_r+0x7b6>
 80124f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80124f2:	2b00      	cmp	r3, #0
 80124f4:	f000 80a3 	beq.w	801263e <_dtoa_r+0x8c6>
 80124f8:	2e00      	cmp	r6, #0
 80124fa:	dd10      	ble.n	801251e <_dtoa_r+0x7a6>
 80124fc:	4639      	mov	r1, r7
 80124fe:	4632      	mov	r2, r6
 8012500:	4620      	mov	r0, r4
 8012502:	f000 fce1 	bl	8012ec8 <__pow5mult>
 8012506:	4652      	mov	r2, sl
 8012508:	4601      	mov	r1, r0
 801250a:	4607      	mov	r7, r0
 801250c:	4620      	mov	r0, r4
 801250e:	f000 fc31 	bl	8012d74 <__multiply>
 8012512:	4651      	mov	r1, sl
 8012514:	4680      	mov	r8, r0
 8012516:	4620      	mov	r0, r4
 8012518:	f000 fb60 	bl	8012bdc <_Bfree>
 801251c:	46c2      	mov	sl, r8
 801251e:	9b08      	ldr	r3, [sp, #32]
 8012520:	1b9a      	subs	r2, r3, r6
 8012522:	d004      	beq.n	801252e <_dtoa_r+0x7b6>
 8012524:	4651      	mov	r1, sl
 8012526:	4620      	mov	r0, r4
 8012528:	f000 fcce 	bl	8012ec8 <__pow5mult>
 801252c:	4682      	mov	sl, r0
 801252e:	2101      	movs	r1, #1
 8012530:	4620      	mov	r0, r4
 8012532:	f000 fc09 	bl	8012d48 <__i2b>
 8012536:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012538:	2b00      	cmp	r3, #0
 801253a:	4606      	mov	r6, r0
 801253c:	f340 8081 	ble.w	8012642 <_dtoa_r+0x8ca>
 8012540:	461a      	mov	r2, r3
 8012542:	4601      	mov	r1, r0
 8012544:	4620      	mov	r0, r4
 8012546:	f000 fcbf 	bl	8012ec8 <__pow5mult>
 801254a:	9b07      	ldr	r3, [sp, #28]
 801254c:	2b01      	cmp	r3, #1
 801254e:	4606      	mov	r6, r0
 8012550:	dd7a      	ble.n	8012648 <_dtoa_r+0x8d0>
 8012552:	f04f 0800 	mov.w	r8, #0
 8012556:	6933      	ldr	r3, [r6, #16]
 8012558:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 801255c:	6918      	ldr	r0, [r3, #16]
 801255e:	f000 fba5 	bl	8012cac <__hi0bits>
 8012562:	f1c0 0020 	rsb	r0, r0, #32
 8012566:	9b06      	ldr	r3, [sp, #24]
 8012568:	4418      	add	r0, r3
 801256a:	f010 001f 	ands.w	r0, r0, #31
 801256e:	f000 8094 	beq.w	801269a <_dtoa_r+0x922>
 8012572:	f1c0 0320 	rsb	r3, r0, #32
 8012576:	2b04      	cmp	r3, #4
 8012578:	f340 8085 	ble.w	8012686 <_dtoa_r+0x90e>
 801257c:	9b05      	ldr	r3, [sp, #20]
 801257e:	f1c0 001c 	rsb	r0, r0, #28
 8012582:	4403      	add	r3, r0
 8012584:	9305      	str	r3, [sp, #20]
 8012586:	9b06      	ldr	r3, [sp, #24]
 8012588:	4403      	add	r3, r0
 801258a:	4405      	add	r5, r0
 801258c:	9306      	str	r3, [sp, #24]
 801258e:	9b05      	ldr	r3, [sp, #20]
 8012590:	2b00      	cmp	r3, #0
 8012592:	dd05      	ble.n	80125a0 <_dtoa_r+0x828>
 8012594:	4651      	mov	r1, sl
 8012596:	461a      	mov	r2, r3
 8012598:	4620      	mov	r0, r4
 801259a:	f000 fcef 	bl	8012f7c <__lshift>
 801259e:	4682      	mov	sl, r0
 80125a0:	9b06      	ldr	r3, [sp, #24]
 80125a2:	2b00      	cmp	r3, #0
 80125a4:	dd05      	ble.n	80125b2 <_dtoa_r+0x83a>
 80125a6:	4631      	mov	r1, r6
 80125a8:	461a      	mov	r2, r3
 80125aa:	4620      	mov	r0, r4
 80125ac:	f000 fce6 	bl	8012f7c <__lshift>
 80125b0:	4606      	mov	r6, r0
 80125b2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80125b4:	2b00      	cmp	r3, #0
 80125b6:	d072      	beq.n	801269e <_dtoa_r+0x926>
 80125b8:	4631      	mov	r1, r6
 80125ba:	4650      	mov	r0, sl
 80125bc:	f000 fd4a 	bl	8013054 <__mcmp>
 80125c0:	2800      	cmp	r0, #0
 80125c2:	da6c      	bge.n	801269e <_dtoa_r+0x926>
 80125c4:	2300      	movs	r3, #0
 80125c6:	4651      	mov	r1, sl
 80125c8:	220a      	movs	r2, #10
 80125ca:	4620      	mov	r0, r4
 80125cc:	f000 fb28 	bl	8012c20 <__multadd>
 80125d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80125d2:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80125d6:	4682      	mov	sl, r0
 80125d8:	2b00      	cmp	r3, #0
 80125da:	f000 81b0 	beq.w	801293e <_dtoa_r+0xbc6>
 80125de:	2300      	movs	r3, #0
 80125e0:	4639      	mov	r1, r7
 80125e2:	220a      	movs	r2, #10
 80125e4:	4620      	mov	r0, r4
 80125e6:	f000 fb1b 	bl	8012c20 <__multadd>
 80125ea:	9b01      	ldr	r3, [sp, #4]
 80125ec:	2b00      	cmp	r3, #0
 80125ee:	4607      	mov	r7, r0
 80125f0:	f300 8096 	bgt.w	8012720 <_dtoa_r+0x9a8>
 80125f4:	9b07      	ldr	r3, [sp, #28]
 80125f6:	2b02      	cmp	r3, #2
 80125f8:	dc59      	bgt.n	80126ae <_dtoa_r+0x936>
 80125fa:	e091      	b.n	8012720 <_dtoa_r+0x9a8>
 80125fc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80125fe:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8012602:	e758      	b.n	80124b6 <_dtoa_r+0x73e>
 8012604:	9b04      	ldr	r3, [sp, #16]
 8012606:	1e5e      	subs	r6, r3, #1
 8012608:	9b08      	ldr	r3, [sp, #32]
 801260a:	42b3      	cmp	r3, r6
 801260c:	bfbf      	itttt	lt
 801260e:	9b08      	ldrlt	r3, [sp, #32]
 8012610:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8012612:	9608      	strlt	r6, [sp, #32]
 8012614:	1af3      	sublt	r3, r6, r3
 8012616:	bfb4      	ite	lt
 8012618:	18d2      	addlt	r2, r2, r3
 801261a:	1b9e      	subge	r6, r3, r6
 801261c:	9b04      	ldr	r3, [sp, #16]
 801261e:	bfbc      	itt	lt
 8012620:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8012622:	2600      	movlt	r6, #0
 8012624:	2b00      	cmp	r3, #0
 8012626:	bfb7      	itett	lt
 8012628:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 801262c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8012630:	1a9d      	sublt	r5, r3, r2
 8012632:	2300      	movlt	r3, #0
 8012634:	e741      	b.n	80124ba <_dtoa_r+0x742>
 8012636:	9e08      	ldr	r6, [sp, #32]
 8012638:	9d05      	ldr	r5, [sp, #20]
 801263a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801263c:	e748      	b.n	80124d0 <_dtoa_r+0x758>
 801263e:	9a08      	ldr	r2, [sp, #32]
 8012640:	e770      	b.n	8012524 <_dtoa_r+0x7ac>
 8012642:	9b07      	ldr	r3, [sp, #28]
 8012644:	2b01      	cmp	r3, #1
 8012646:	dc19      	bgt.n	801267c <_dtoa_r+0x904>
 8012648:	9b02      	ldr	r3, [sp, #8]
 801264a:	b9bb      	cbnz	r3, 801267c <_dtoa_r+0x904>
 801264c:	9b03      	ldr	r3, [sp, #12]
 801264e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8012652:	b99b      	cbnz	r3, 801267c <_dtoa_r+0x904>
 8012654:	9b03      	ldr	r3, [sp, #12]
 8012656:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801265a:	0d1b      	lsrs	r3, r3, #20
 801265c:	051b      	lsls	r3, r3, #20
 801265e:	b183      	cbz	r3, 8012682 <_dtoa_r+0x90a>
 8012660:	9b05      	ldr	r3, [sp, #20]
 8012662:	3301      	adds	r3, #1
 8012664:	9305      	str	r3, [sp, #20]
 8012666:	9b06      	ldr	r3, [sp, #24]
 8012668:	3301      	adds	r3, #1
 801266a:	9306      	str	r3, [sp, #24]
 801266c:	f04f 0801 	mov.w	r8, #1
 8012670:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012672:	2b00      	cmp	r3, #0
 8012674:	f47f af6f 	bne.w	8012556 <_dtoa_r+0x7de>
 8012678:	2001      	movs	r0, #1
 801267a:	e774      	b.n	8012566 <_dtoa_r+0x7ee>
 801267c:	f04f 0800 	mov.w	r8, #0
 8012680:	e7f6      	b.n	8012670 <_dtoa_r+0x8f8>
 8012682:	4698      	mov	r8, r3
 8012684:	e7f4      	b.n	8012670 <_dtoa_r+0x8f8>
 8012686:	d082      	beq.n	801258e <_dtoa_r+0x816>
 8012688:	9a05      	ldr	r2, [sp, #20]
 801268a:	331c      	adds	r3, #28
 801268c:	441a      	add	r2, r3
 801268e:	9205      	str	r2, [sp, #20]
 8012690:	9a06      	ldr	r2, [sp, #24]
 8012692:	441a      	add	r2, r3
 8012694:	441d      	add	r5, r3
 8012696:	9206      	str	r2, [sp, #24]
 8012698:	e779      	b.n	801258e <_dtoa_r+0x816>
 801269a:	4603      	mov	r3, r0
 801269c:	e7f4      	b.n	8012688 <_dtoa_r+0x910>
 801269e:	9b04      	ldr	r3, [sp, #16]
 80126a0:	2b00      	cmp	r3, #0
 80126a2:	dc37      	bgt.n	8012714 <_dtoa_r+0x99c>
 80126a4:	9b07      	ldr	r3, [sp, #28]
 80126a6:	2b02      	cmp	r3, #2
 80126a8:	dd34      	ble.n	8012714 <_dtoa_r+0x99c>
 80126aa:	9b04      	ldr	r3, [sp, #16]
 80126ac:	9301      	str	r3, [sp, #4]
 80126ae:	9b01      	ldr	r3, [sp, #4]
 80126b0:	b963      	cbnz	r3, 80126cc <_dtoa_r+0x954>
 80126b2:	4631      	mov	r1, r6
 80126b4:	2205      	movs	r2, #5
 80126b6:	4620      	mov	r0, r4
 80126b8:	f000 fab2 	bl	8012c20 <__multadd>
 80126bc:	4601      	mov	r1, r0
 80126be:	4606      	mov	r6, r0
 80126c0:	4650      	mov	r0, sl
 80126c2:	f000 fcc7 	bl	8013054 <__mcmp>
 80126c6:	2800      	cmp	r0, #0
 80126c8:	f73f adbb 	bgt.w	8012242 <_dtoa_r+0x4ca>
 80126cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80126ce:	9d00      	ldr	r5, [sp, #0]
 80126d0:	ea6f 0b03 	mvn.w	fp, r3
 80126d4:	f04f 0800 	mov.w	r8, #0
 80126d8:	4631      	mov	r1, r6
 80126da:	4620      	mov	r0, r4
 80126dc:	f000 fa7e 	bl	8012bdc <_Bfree>
 80126e0:	2f00      	cmp	r7, #0
 80126e2:	f43f aeab 	beq.w	801243c <_dtoa_r+0x6c4>
 80126e6:	f1b8 0f00 	cmp.w	r8, #0
 80126ea:	d005      	beq.n	80126f8 <_dtoa_r+0x980>
 80126ec:	45b8      	cmp	r8, r7
 80126ee:	d003      	beq.n	80126f8 <_dtoa_r+0x980>
 80126f0:	4641      	mov	r1, r8
 80126f2:	4620      	mov	r0, r4
 80126f4:	f000 fa72 	bl	8012bdc <_Bfree>
 80126f8:	4639      	mov	r1, r7
 80126fa:	4620      	mov	r0, r4
 80126fc:	f000 fa6e 	bl	8012bdc <_Bfree>
 8012700:	e69c      	b.n	801243c <_dtoa_r+0x6c4>
 8012702:	2600      	movs	r6, #0
 8012704:	4637      	mov	r7, r6
 8012706:	e7e1      	b.n	80126cc <_dtoa_r+0x954>
 8012708:	46bb      	mov	fp, r7
 801270a:	4637      	mov	r7, r6
 801270c:	e599      	b.n	8012242 <_dtoa_r+0x4ca>
 801270e:	bf00      	nop
 8012710:	40240000 	.word	0x40240000
 8012714:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012716:	2b00      	cmp	r3, #0
 8012718:	f000 80c8 	beq.w	80128ac <_dtoa_r+0xb34>
 801271c:	9b04      	ldr	r3, [sp, #16]
 801271e:	9301      	str	r3, [sp, #4]
 8012720:	2d00      	cmp	r5, #0
 8012722:	dd05      	ble.n	8012730 <_dtoa_r+0x9b8>
 8012724:	4639      	mov	r1, r7
 8012726:	462a      	mov	r2, r5
 8012728:	4620      	mov	r0, r4
 801272a:	f000 fc27 	bl	8012f7c <__lshift>
 801272e:	4607      	mov	r7, r0
 8012730:	f1b8 0f00 	cmp.w	r8, #0
 8012734:	d05b      	beq.n	80127ee <_dtoa_r+0xa76>
 8012736:	6879      	ldr	r1, [r7, #4]
 8012738:	4620      	mov	r0, r4
 801273a:	f000 fa0f 	bl	8012b5c <_Balloc>
 801273e:	4605      	mov	r5, r0
 8012740:	b928      	cbnz	r0, 801274e <_dtoa_r+0x9d6>
 8012742:	4b83      	ldr	r3, [pc, #524]	; (8012950 <_dtoa_r+0xbd8>)
 8012744:	4602      	mov	r2, r0
 8012746:	f240 21ef 	movw	r1, #751	; 0x2ef
 801274a:	f7ff bb2e 	b.w	8011daa <_dtoa_r+0x32>
 801274e:	693a      	ldr	r2, [r7, #16]
 8012750:	3202      	adds	r2, #2
 8012752:	0092      	lsls	r2, r2, #2
 8012754:	f107 010c 	add.w	r1, r7, #12
 8012758:	300c      	adds	r0, #12
 801275a:	f7ff fa75 	bl	8011c48 <memcpy>
 801275e:	2201      	movs	r2, #1
 8012760:	4629      	mov	r1, r5
 8012762:	4620      	mov	r0, r4
 8012764:	f000 fc0a 	bl	8012f7c <__lshift>
 8012768:	9b00      	ldr	r3, [sp, #0]
 801276a:	3301      	adds	r3, #1
 801276c:	9304      	str	r3, [sp, #16]
 801276e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012772:	4413      	add	r3, r2
 8012774:	9308      	str	r3, [sp, #32]
 8012776:	9b02      	ldr	r3, [sp, #8]
 8012778:	f003 0301 	and.w	r3, r3, #1
 801277c:	46b8      	mov	r8, r7
 801277e:	9306      	str	r3, [sp, #24]
 8012780:	4607      	mov	r7, r0
 8012782:	9b04      	ldr	r3, [sp, #16]
 8012784:	4631      	mov	r1, r6
 8012786:	3b01      	subs	r3, #1
 8012788:	4650      	mov	r0, sl
 801278a:	9301      	str	r3, [sp, #4]
 801278c:	f7ff fa6a 	bl	8011c64 <quorem>
 8012790:	4641      	mov	r1, r8
 8012792:	9002      	str	r0, [sp, #8]
 8012794:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8012798:	4650      	mov	r0, sl
 801279a:	f000 fc5b 	bl	8013054 <__mcmp>
 801279e:	463a      	mov	r2, r7
 80127a0:	9005      	str	r0, [sp, #20]
 80127a2:	4631      	mov	r1, r6
 80127a4:	4620      	mov	r0, r4
 80127a6:	f000 fc71 	bl	801308c <__mdiff>
 80127aa:	68c2      	ldr	r2, [r0, #12]
 80127ac:	4605      	mov	r5, r0
 80127ae:	bb02      	cbnz	r2, 80127f2 <_dtoa_r+0xa7a>
 80127b0:	4601      	mov	r1, r0
 80127b2:	4650      	mov	r0, sl
 80127b4:	f000 fc4e 	bl	8013054 <__mcmp>
 80127b8:	4602      	mov	r2, r0
 80127ba:	4629      	mov	r1, r5
 80127bc:	4620      	mov	r0, r4
 80127be:	9209      	str	r2, [sp, #36]	; 0x24
 80127c0:	f000 fa0c 	bl	8012bdc <_Bfree>
 80127c4:	9b07      	ldr	r3, [sp, #28]
 80127c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80127c8:	9d04      	ldr	r5, [sp, #16]
 80127ca:	ea43 0102 	orr.w	r1, r3, r2
 80127ce:	9b06      	ldr	r3, [sp, #24]
 80127d0:	4319      	orrs	r1, r3
 80127d2:	d110      	bne.n	80127f6 <_dtoa_r+0xa7e>
 80127d4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80127d8:	d029      	beq.n	801282e <_dtoa_r+0xab6>
 80127da:	9b05      	ldr	r3, [sp, #20]
 80127dc:	2b00      	cmp	r3, #0
 80127de:	dd02      	ble.n	80127e6 <_dtoa_r+0xa6e>
 80127e0:	9b02      	ldr	r3, [sp, #8]
 80127e2:	f103 0931 	add.w	r9, r3, #49	; 0x31
 80127e6:	9b01      	ldr	r3, [sp, #4]
 80127e8:	f883 9000 	strb.w	r9, [r3]
 80127ec:	e774      	b.n	80126d8 <_dtoa_r+0x960>
 80127ee:	4638      	mov	r0, r7
 80127f0:	e7ba      	b.n	8012768 <_dtoa_r+0x9f0>
 80127f2:	2201      	movs	r2, #1
 80127f4:	e7e1      	b.n	80127ba <_dtoa_r+0xa42>
 80127f6:	9b05      	ldr	r3, [sp, #20]
 80127f8:	2b00      	cmp	r3, #0
 80127fa:	db04      	blt.n	8012806 <_dtoa_r+0xa8e>
 80127fc:	9907      	ldr	r1, [sp, #28]
 80127fe:	430b      	orrs	r3, r1
 8012800:	9906      	ldr	r1, [sp, #24]
 8012802:	430b      	orrs	r3, r1
 8012804:	d120      	bne.n	8012848 <_dtoa_r+0xad0>
 8012806:	2a00      	cmp	r2, #0
 8012808:	dded      	ble.n	80127e6 <_dtoa_r+0xa6e>
 801280a:	4651      	mov	r1, sl
 801280c:	2201      	movs	r2, #1
 801280e:	4620      	mov	r0, r4
 8012810:	f000 fbb4 	bl	8012f7c <__lshift>
 8012814:	4631      	mov	r1, r6
 8012816:	4682      	mov	sl, r0
 8012818:	f000 fc1c 	bl	8013054 <__mcmp>
 801281c:	2800      	cmp	r0, #0
 801281e:	dc03      	bgt.n	8012828 <_dtoa_r+0xab0>
 8012820:	d1e1      	bne.n	80127e6 <_dtoa_r+0xa6e>
 8012822:	f019 0f01 	tst.w	r9, #1
 8012826:	d0de      	beq.n	80127e6 <_dtoa_r+0xa6e>
 8012828:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 801282c:	d1d8      	bne.n	80127e0 <_dtoa_r+0xa68>
 801282e:	9a01      	ldr	r2, [sp, #4]
 8012830:	2339      	movs	r3, #57	; 0x39
 8012832:	7013      	strb	r3, [r2, #0]
 8012834:	462b      	mov	r3, r5
 8012836:	461d      	mov	r5, r3
 8012838:	3b01      	subs	r3, #1
 801283a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801283e:	2a39      	cmp	r2, #57	; 0x39
 8012840:	d06c      	beq.n	801291c <_dtoa_r+0xba4>
 8012842:	3201      	adds	r2, #1
 8012844:	701a      	strb	r2, [r3, #0]
 8012846:	e747      	b.n	80126d8 <_dtoa_r+0x960>
 8012848:	2a00      	cmp	r2, #0
 801284a:	dd07      	ble.n	801285c <_dtoa_r+0xae4>
 801284c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8012850:	d0ed      	beq.n	801282e <_dtoa_r+0xab6>
 8012852:	9a01      	ldr	r2, [sp, #4]
 8012854:	f109 0301 	add.w	r3, r9, #1
 8012858:	7013      	strb	r3, [r2, #0]
 801285a:	e73d      	b.n	80126d8 <_dtoa_r+0x960>
 801285c:	9b04      	ldr	r3, [sp, #16]
 801285e:	9a08      	ldr	r2, [sp, #32]
 8012860:	f803 9c01 	strb.w	r9, [r3, #-1]
 8012864:	4293      	cmp	r3, r2
 8012866:	d043      	beq.n	80128f0 <_dtoa_r+0xb78>
 8012868:	4651      	mov	r1, sl
 801286a:	2300      	movs	r3, #0
 801286c:	220a      	movs	r2, #10
 801286e:	4620      	mov	r0, r4
 8012870:	f000 f9d6 	bl	8012c20 <__multadd>
 8012874:	45b8      	cmp	r8, r7
 8012876:	4682      	mov	sl, r0
 8012878:	f04f 0300 	mov.w	r3, #0
 801287c:	f04f 020a 	mov.w	r2, #10
 8012880:	4641      	mov	r1, r8
 8012882:	4620      	mov	r0, r4
 8012884:	d107      	bne.n	8012896 <_dtoa_r+0xb1e>
 8012886:	f000 f9cb 	bl	8012c20 <__multadd>
 801288a:	4680      	mov	r8, r0
 801288c:	4607      	mov	r7, r0
 801288e:	9b04      	ldr	r3, [sp, #16]
 8012890:	3301      	adds	r3, #1
 8012892:	9304      	str	r3, [sp, #16]
 8012894:	e775      	b.n	8012782 <_dtoa_r+0xa0a>
 8012896:	f000 f9c3 	bl	8012c20 <__multadd>
 801289a:	4639      	mov	r1, r7
 801289c:	4680      	mov	r8, r0
 801289e:	2300      	movs	r3, #0
 80128a0:	220a      	movs	r2, #10
 80128a2:	4620      	mov	r0, r4
 80128a4:	f000 f9bc 	bl	8012c20 <__multadd>
 80128a8:	4607      	mov	r7, r0
 80128aa:	e7f0      	b.n	801288e <_dtoa_r+0xb16>
 80128ac:	9b04      	ldr	r3, [sp, #16]
 80128ae:	9301      	str	r3, [sp, #4]
 80128b0:	9d00      	ldr	r5, [sp, #0]
 80128b2:	4631      	mov	r1, r6
 80128b4:	4650      	mov	r0, sl
 80128b6:	f7ff f9d5 	bl	8011c64 <quorem>
 80128ba:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80128be:	9b00      	ldr	r3, [sp, #0]
 80128c0:	f805 9b01 	strb.w	r9, [r5], #1
 80128c4:	1aea      	subs	r2, r5, r3
 80128c6:	9b01      	ldr	r3, [sp, #4]
 80128c8:	4293      	cmp	r3, r2
 80128ca:	dd07      	ble.n	80128dc <_dtoa_r+0xb64>
 80128cc:	4651      	mov	r1, sl
 80128ce:	2300      	movs	r3, #0
 80128d0:	220a      	movs	r2, #10
 80128d2:	4620      	mov	r0, r4
 80128d4:	f000 f9a4 	bl	8012c20 <__multadd>
 80128d8:	4682      	mov	sl, r0
 80128da:	e7ea      	b.n	80128b2 <_dtoa_r+0xb3a>
 80128dc:	9b01      	ldr	r3, [sp, #4]
 80128de:	2b00      	cmp	r3, #0
 80128e0:	bfc8      	it	gt
 80128e2:	461d      	movgt	r5, r3
 80128e4:	9b00      	ldr	r3, [sp, #0]
 80128e6:	bfd8      	it	le
 80128e8:	2501      	movle	r5, #1
 80128ea:	441d      	add	r5, r3
 80128ec:	f04f 0800 	mov.w	r8, #0
 80128f0:	4651      	mov	r1, sl
 80128f2:	2201      	movs	r2, #1
 80128f4:	4620      	mov	r0, r4
 80128f6:	f000 fb41 	bl	8012f7c <__lshift>
 80128fa:	4631      	mov	r1, r6
 80128fc:	4682      	mov	sl, r0
 80128fe:	f000 fba9 	bl	8013054 <__mcmp>
 8012902:	2800      	cmp	r0, #0
 8012904:	dc96      	bgt.n	8012834 <_dtoa_r+0xabc>
 8012906:	d102      	bne.n	801290e <_dtoa_r+0xb96>
 8012908:	f019 0f01 	tst.w	r9, #1
 801290c:	d192      	bne.n	8012834 <_dtoa_r+0xabc>
 801290e:	462b      	mov	r3, r5
 8012910:	461d      	mov	r5, r3
 8012912:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8012916:	2a30      	cmp	r2, #48	; 0x30
 8012918:	d0fa      	beq.n	8012910 <_dtoa_r+0xb98>
 801291a:	e6dd      	b.n	80126d8 <_dtoa_r+0x960>
 801291c:	9a00      	ldr	r2, [sp, #0]
 801291e:	429a      	cmp	r2, r3
 8012920:	d189      	bne.n	8012836 <_dtoa_r+0xabe>
 8012922:	f10b 0b01 	add.w	fp, fp, #1
 8012926:	2331      	movs	r3, #49	; 0x31
 8012928:	e796      	b.n	8012858 <_dtoa_r+0xae0>
 801292a:	4b0a      	ldr	r3, [pc, #40]	; (8012954 <_dtoa_r+0xbdc>)
 801292c:	f7ff ba99 	b.w	8011e62 <_dtoa_r+0xea>
 8012930:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012932:	2b00      	cmp	r3, #0
 8012934:	f47f aa6d 	bne.w	8011e12 <_dtoa_r+0x9a>
 8012938:	4b07      	ldr	r3, [pc, #28]	; (8012958 <_dtoa_r+0xbe0>)
 801293a:	f7ff ba92 	b.w	8011e62 <_dtoa_r+0xea>
 801293e:	9b01      	ldr	r3, [sp, #4]
 8012940:	2b00      	cmp	r3, #0
 8012942:	dcb5      	bgt.n	80128b0 <_dtoa_r+0xb38>
 8012944:	9b07      	ldr	r3, [sp, #28]
 8012946:	2b02      	cmp	r3, #2
 8012948:	f73f aeb1 	bgt.w	80126ae <_dtoa_r+0x936>
 801294c:	e7b0      	b.n	80128b0 <_dtoa_r+0xb38>
 801294e:	bf00      	nop
 8012950:	08013c90 	.word	0x08013c90
 8012954:	08013bf0 	.word	0x08013bf0
 8012958:	08013c14 	.word	0x08013c14

0801295c <_free_r>:
 801295c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801295e:	2900      	cmp	r1, #0
 8012960:	d044      	beq.n	80129ec <_free_r+0x90>
 8012962:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012966:	9001      	str	r0, [sp, #4]
 8012968:	2b00      	cmp	r3, #0
 801296a:	f1a1 0404 	sub.w	r4, r1, #4
 801296e:	bfb8      	it	lt
 8012970:	18e4      	addlt	r4, r4, r3
 8012972:	f000 f8e7 	bl	8012b44 <__malloc_lock>
 8012976:	4a1e      	ldr	r2, [pc, #120]	; (80129f0 <_free_r+0x94>)
 8012978:	9801      	ldr	r0, [sp, #4]
 801297a:	6813      	ldr	r3, [r2, #0]
 801297c:	b933      	cbnz	r3, 801298c <_free_r+0x30>
 801297e:	6063      	str	r3, [r4, #4]
 8012980:	6014      	str	r4, [r2, #0]
 8012982:	b003      	add	sp, #12
 8012984:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012988:	f000 b8e2 	b.w	8012b50 <__malloc_unlock>
 801298c:	42a3      	cmp	r3, r4
 801298e:	d908      	bls.n	80129a2 <_free_r+0x46>
 8012990:	6825      	ldr	r5, [r4, #0]
 8012992:	1961      	adds	r1, r4, r5
 8012994:	428b      	cmp	r3, r1
 8012996:	bf01      	itttt	eq
 8012998:	6819      	ldreq	r1, [r3, #0]
 801299a:	685b      	ldreq	r3, [r3, #4]
 801299c:	1949      	addeq	r1, r1, r5
 801299e:	6021      	streq	r1, [r4, #0]
 80129a0:	e7ed      	b.n	801297e <_free_r+0x22>
 80129a2:	461a      	mov	r2, r3
 80129a4:	685b      	ldr	r3, [r3, #4]
 80129a6:	b10b      	cbz	r3, 80129ac <_free_r+0x50>
 80129a8:	42a3      	cmp	r3, r4
 80129aa:	d9fa      	bls.n	80129a2 <_free_r+0x46>
 80129ac:	6811      	ldr	r1, [r2, #0]
 80129ae:	1855      	adds	r5, r2, r1
 80129b0:	42a5      	cmp	r5, r4
 80129b2:	d10b      	bne.n	80129cc <_free_r+0x70>
 80129b4:	6824      	ldr	r4, [r4, #0]
 80129b6:	4421      	add	r1, r4
 80129b8:	1854      	adds	r4, r2, r1
 80129ba:	42a3      	cmp	r3, r4
 80129bc:	6011      	str	r1, [r2, #0]
 80129be:	d1e0      	bne.n	8012982 <_free_r+0x26>
 80129c0:	681c      	ldr	r4, [r3, #0]
 80129c2:	685b      	ldr	r3, [r3, #4]
 80129c4:	6053      	str	r3, [r2, #4]
 80129c6:	440c      	add	r4, r1
 80129c8:	6014      	str	r4, [r2, #0]
 80129ca:	e7da      	b.n	8012982 <_free_r+0x26>
 80129cc:	d902      	bls.n	80129d4 <_free_r+0x78>
 80129ce:	230c      	movs	r3, #12
 80129d0:	6003      	str	r3, [r0, #0]
 80129d2:	e7d6      	b.n	8012982 <_free_r+0x26>
 80129d4:	6825      	ldr	r5, [r4, #0]
 80129d6:	1961      	adds	r1, r4, r5
 80129d8:	428b      	cmp	r3, r1
 80129da:	bf04      	itt	eq
 80129dc:	6819      	ldreq	r1, [r3, #0]
 80129de:	685b      	ldreq	r3, [r3, #4]
 80129e0:	6063      	str	r3, [r4, #4]
 80129e2:	bf04      	itt	eq
 80129e4:	1949      	addeq	r1, r1, r5
 80129e6:	6021      	streq	r1, [r4, #0]
 80129e8:	6054      	str	r4, [r2, #4]
 80129ea:	e7ca      	b.n	8012982 <_free_r+0x26>
 80129ec:	b003      	add	sp, #12
 80129ee:	bd30      	pop	{r4, r5, pc}
 80129f0:	200035a4 	.word	0x200035a4

080129f4 <malloc>:
 80129f4:	4b02      	ldr	r3, [pc, #8]	; (8012a00 <malloc+0xc>)
 80129f6:	4601      	mov	r1, r0
 80129f8:	6818      	ldr	r0, [r3, #0]
 80129fa:	f000 b823 	b.w	8012a44 <_malloc_r>
 80129fe:	bf00      	nop
 8012a00:	200001e0 	.word	0x200001e0

08012a04 <sbrk_aligned>:
 8012a04:	b570      	push	{r4, r5, r6, lr}
 8012a06:	4e0e      	ldr	r6, [pc, #56]	; (8012a40 <sbrk_aligned+0x3c>)
 8012a08:	460c      	mov	r4, r1
 8012a0a:	6831      	ldr	r1, [r6, #0]
 8012a0c:	4605      	mov	r5, r0
 8012a0e:	b911      	cbnz	r1, 8012a16 <sbrk_aligned+0x12>
 8012a10:	f000 fe96 	bl	8013740 <_sbrk_r>
 8012a14:	6030      	str	r0, [r6, #0]
 8012a16:	4621      	mov	r1, r4
 8012a18:	4628      	mov	r0, r5
 8012a1a:	f000 fe91 	bl	8013740 <_sbrk_r>
 8012a1e:	1c43      	adds	r3, r0, #1
 8012a20:	d00a      	beq.n	8012a38 <sbrk_aligned+0x34>
 8012a22:	1cc4      	adds	r4, r0, #3
 8012a24:	f024 0403 	bic.w	r4, r4, #3
 8012a28:	42a0      	cmp	r0, r4
 8012a2a:	d007      	beq.n	8012a3c <sbrk_aligned+0x38>
 8012a2c:	1a21      	subs	r1, r4, r0
 8012a2e:	4628      	mov	r0, r5
 8012a30:	f000 fe86 	bl	8013740 <_sbrk_r>
 8012a34:	3001      	adds	r0, #1
 8012a36:	d101      	bne.n	8012a3c <sbrk_aligned+0x38>
 8012a38:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8012a3c:	4620      	mov	r0, r4
 8012a3e:	bd70      	pop	{r4, r5, r6, pc}
 8012a40:	200035a8 	.word	0x200035a8

08012a44 <_malloc_r>:
 8012a44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012a48:	1ccd      	adds	r5, r1, #3
 8012a4a:	f025 0503 	bic.w	r5, r5, #3
 8012a4e:	3508      	adds	r5, #8
 8012a50:	2d0c      	cmp	r5, #12
 8012a52:	bf38      	it	cc
 8012a54:	250c      	movcc	r5, #12
 8012a56:	2d00      	cmp	r5, #0
 8012a58:	4607      	mov	r7, r0
 8012a5a:	db01      	blt.n	8012a60 <_malloc_r+0x1c>
 8012a5c:	42a9      	cmp	r1, r5
 8012a5e:	d905      	bls.n	8012a6c <_malloc_r+0x28>
 8012a60:	230c      	movs	r3, #12
 8012a62:	603b      	str	r3, [r7, #0]
 8012a64:	2600      	movs	r6, #0
 8012a66:	4630      	mov	r0, r6
 8012a68:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012a6c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8012b40 <_malloc_r+0xfc>
 8012a70:	f000 f868 	bl	8012b44 <__malloc_lock>
 8012a74:	f8d8 3000 	ldr.w	r3, [r8]
 8012a78:	461c      	mov	r4, r3
 8012a7a:	bb5c      	cbnz	r4, 8012ad4 <_malloc_r+0x90>
 8012a7c:	4629      	mov	r1, r5
 8012a7e:	4638      	mov	r0, r7
 8012a80:	f7ff ffc0 	bl	8012a04 <sbrk_aligned>
 8012a84:	1c43      	adds	r3, r0, #1
 8012a86:	4604      	mov	r4, r0
 8012a88:	d155      	bne.n	8012b36 <_malloc_r+0xf2>
 8012a8a:	f8d8 4000 	ldr.w	r4, [r8]
 8012a8e:	4626      	mov	r6, r4
 8012a90:	2e00      	cmp	r6, #0
 8012a92:	d145      	bne.n	8012b20 <_malloc_r+0xdc>
 8012a94:	2c00      	cmp	r4, #0
 8012a96:	d048      	beq.n	8012b2a <_malloc_r+0xe6>
 8012a98:	6823      	ldr	r3, [r4, #0]
 8012a9a:	4631      	mov	r1, r6
 8012a9c:	4638      	mov	r0, r7
 8012a9e:	eb04 0903 	add.w	r9, r4, r3
 8012aa2:	f000 fe4d 	bl	8013740 <_sbrk_r>
 8012aa6:	4581      	cmp	r9, r0
 8012aa8:	d13f      	bne.n	8012b2a <_malloc_r+0xe6>
 8012aaa:	6821      	ldr	r1, [r4, #0]
 8012aac:	1a6d      	subs	r5, r5, r1
 8012aae:	4629      	mov	r1, r5
 8012ab0:	4638      	mov	r0, r7
 8012ab2:	f7ff ffa7 	bl	8012a04 <sbrk_aligned>
 8012ab6:	3001      	adds	r0, #1
 8012ab8:	d037      	beq.n	8012b2a <_malloc_r+0xe6>
 8012aba:	6823      	ldr	r3, [r4, #0]
 8012abc:	442b      	add	r3, r5
 8012abe:	6023      	str	r3, [r4, #0]
 8012ac0:	f8d8 3000 	ldr.w	r3, [r8]
 8012ac4:	2b00      	cmp	r3, #0
 8012ac6:	d038      	beq.n	8012b3a <_malloc_r+0xf6>
 8012ac8:	685a      	ldr	r2, [r3, #4]
 8012aca:	42a2      	cmp	r2, r4
 8012acc:	d12b      	bne.n	8012b26 <_malloc_r+0xe2>
 8012ace:	2200      	movs	r2, #0
 8012ad0:	605a      	str	r2, [r3, #4]
 8012ad2:	e00f      	b.n	8012af4 <_malloc_r+0xb0>
 8012ad4:	6822      	ldr	r2, [r4, #0]
 8012ad6:	1b52      	subs	r2, r2, r5
 8012ad8:	d41f      	bmi.n	8012b1a <_malloc_r+0xd6>
 8012ada:	2a0b      	cmp	r2, #11
 8012adc:	d917      	bls.n	8012b0e <_malloc_r+0xca>
 8012ade:	1961      	adds	r1, r4, r5
 8012ae0:	42a3      	cmp	r3, r4
 8012ae2:	6025      	str	r5, [r4, #0]
 8012ae4:	bf18      	it	ne
 8012ae6:	6059      	strne	r1, [r3, #4]
 8012ae8:	6863      	ldr	r3, [r4, #4]
 8012aea:	bf08      	it	eq
 8012aec:	f8c8 1000 	streq.w	r1, [r8]
 8012af0:	5162      	str	r2, [r4, r5]
 8012af2:	604b      	str	r3, [r1, #4]
 8012af4:	4638      	mov	r0, r7
 8012af6:	f104 060b 	add.w	r6, r4, #11
 8012afa:	f000 f829 	bl	8012b50 <__malloc_unlock>
 8012afe:	f026 0607 	bic.w	r6, r6, #7
 8012b02:	1d23      	adds	r3, r4, #4
 8012b04:	1af2      	subs	r2, r6, r3
 8012b06:	d0ae      	beq.n	8012a66 <_malloc_r+0x22>
 8012b08:	1b9b      	subs	r3, r3, r6
 8012b0a:	50a3      	str	r3, [r4, r2]
 8012b0c:	e7ab      	b.n	8012a66 <_malloc_r+0x22>
 8012b0e:	42a3      	cmp	r3, r4
 8012b10:	6862      	ldr	r2, [r4, #4]
 8012b12:	d1dd      	bne.n	8012ad0 <_malloc_r+0x8c>
 8012b14:	f8c8 2000 	str.w	r2, [r8]
 8012b18:	e7ec      	b.n	8012af4 <_malloc_r+0xb0>
 8012b1a:	4623      	mov	r3, r4
 8012b1c:	6864      	ldr	r4, [r4, #4]
 8012b1e:	e7ac      	b.n	8012a7a <_malloc_r+0x36>
 8012b20:	4634      	mov	r4, r6
 8012b22:	6876      	ldr	r6, [r6, #4]
 8012b24:	e7b4      	b.n	8012a90 <_malloc_r+0x4c>
 8012b26:	4613      	mov	r3, r2
 8012b28:	e7cc      	b.n	8012ac4 <_malloc_r+0x80>
 8012b2a:	230c      	movs	r3, #12
 8012b2c:	603b      	str	r3, [r7, #0]
 8012b2e:	4638      	mov	r0, r7
 8012b30:	f000 f80e 	bl	8012b50 <__malloc_unlock>
 8012b34:	e797      	b.n	8012a66 <_malloc_r+0x22>
 8012b36:	6025      	str	r5, [r4, #0]
 8012b38:	e7dc      	b.n	8012af4 <_malloc_r+0xb0>
 8012b3a:	605b      	str	r3, [r3, #4]
 8012b3c:	deff      	udf	#255	; 0xff
 8012b3e:	bf00      	nop
 8012b40:	200035a4 	.word	0x200035a4

08012b44 <__malloc_lock>:
 8012b44:	4801      	ldr	r0, [pc, #4]	; (8012b4c <__malloc_lock+0x8>)
 8012b46:	f7ff b87d 	b.w	8011c44 <__retarget_lock_acquire_recursive>
 8012b4a:	bf00      	nop
 8012b4c:	200035a0 	.word	0x200035a0

08012b50 <__malloc_unlock>:
 8012b50:	4801      	ldr	r0, [pc, #4]	; (8012b58 <__malloc_unlock+0x8>)
 8012b52:	f7ff b878 	b.w	8011c46 <__retarget_lock_release_recursive>
 8012b56:	bf00      	nop
 8012b58:	200035a0 	.word	0x200035a0

08012b5c <_Balloc>:
 8012b5c:	b570      	push	{r4, r5, r6, lr}
 8012b5e:	69c6      	ldr	r6, [r0, #28]
 8012b60:	4604      	mov	r4, r0
 8012b62:	460d      	mov	r5, r1
 8012b64:	b976      	cbnz	r6, 8012b84 <_Balloc+0x28>
 8012b66:	2010      	movs	r0, #16
 8012b68:	f7ff ff44 	bl	80129f4 <malloc>
 8012b6c:	4602      	mov	r2, r0
 8012b6e:	61e0      	str	r0, [r4, #28]
 8012b70:	b920      	cbnz	r0, 8012b7c <_Balloc+0x20>
 8012b72:	4b18      	ldr	r3, [pc, #96]	; (8012bd4 <_Balloc+0x78>)
 8012b74:	4818      	ldr	r0, [pc, #96]	; (8012bd8 <_Balloc+0x7c>)
 8012b76:	216b      	movs	r1, #107	; 0x6b
 8012b78:	f000 fdf2 	bl	8013760 <__assert_func>
 8012b7c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012b80:	6006      	str	r6, [r0, #0]
 8012b82:	60c6      	str	r6, [r0, #12]
 8012b84:	69e6      	ldr	r6, [r4, #28]
 8012b86:	68f3      	ldr	r3, [r6, #12]
 8012b88:	b183      	cbz	r3, 8012bac <_Balloc+0x50>
 8012b8a:	69e3      	ldr	r3, [r4, #28]
 8012b8c:	68db      	ldr	r3, [r3, #12]
 8012b8e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8012b92:	b9b8      	cbnz	r0, 8012bc4 <_Balloc+0x68>
 8012b94:	2101      	movs	r1, #1
 8012b96:	fa01 f605 	lsl.w	r6, r1, r5
 8012b9a:	1d72      	adds	r2, r6, #5
 8012b9c:	0092      	lsls	r2, r2, #2
 8012b9e:	4620      	mov	r0, r4
 8012ba0:	f000 fdfc 	bl	801379c <_calloc_r>
 8012ba4:	b160      	cbz	r0, 8012bc0 <_Balloc+0x64>
 8012ba6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8012baa:	e00e      	b.n	8012bca <_Balloc+0x6e>
 8012bac:	2221      	movs	r2, #33	; 0x21
 8012bae:	2104      	movs	r1, #4
 8012bb0:	4620      	mov	r0, r4
 8012bb2:	f000 fdf3 	bl	801379c <_calloc_r>
 8012bb6:	69e3      	ldr	r3, [r4, #28]
 8012bb8:	60f0      	str	r0, [r6, #12]
 8012bba:	68db      	ldr	r3, [r3, #12]
 8012bbc:	2b00      	cmp	r3, #0
 8012bbe:	d1e4      	bne.n	8012b8a <_Balloc+0x2e>
 8012bc0:	2000      	movs	r0, #0
 8012bc2:	bd70      	pop	{r4, r5, r6, pc}
 8012bc4:	6802      	ldr	r2, [r0, #0]
 8012bc6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8012bca:	2300      	movs	r3, #0
 8012bcc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8012bd0:	e7f7      	b.n	8012bc2 <_Balloc+0x66>
 8012bd2:	bf00      	nop
 8012bd4:	08013c21 	.word	0x08013c21
 8012bd8:	08013ca1 	.word	0x08013ca1

08012bdc <_Bfree>:
 8012bdc:	b570      	push	{r4, r5, r6, lr}
 8012bde:	69c6      	ldr	r6, [r0, #28]
 8012be0:	4605      	mov	r5, r0
 8012be2:	460c      	mov	r4, r1
 8012be4:	b976      	cbnz	r6, 8012c04 <_Bfree+0x28>
 8012be6:	2010      	movs	r0, #16
 8012be8:	f7ff ff04 	bl	80129f4 <malloc>
 8012bec:	4602      	mov	r2, r0
 8012bee:	61e8      	str	r0, [r5, #28]
 8012bf0:	b920      	cbnz	r0, 8012bfc <_Bfree+0x20>
 8012bf2:	4b09      	ldr	r3, [pc, #36]	; (8012c18 <_Bfree+0x3c>)
 8012bf4:	4809      	ldr	r0, [pc, #36]	; (8012c1c <_Bfree+0x40>)
 8012bf6:	218f      	movs	r1, #143	; 0x8f
 8012bf8:	f000 fdb2 	bl	8013760 <__assert_func>
 8012bfc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8012c00:	6006      	str	r6, [r0, #0]
 8012c02:	60c6      	str	r6, [r0, #12]
 8012c04:	b13c      	cbz	r4, 8012c16 <_Bfree+0x3a>
 8012c06:	69eb      	ldr	r3, [r5, #28]
 8012c08:	6862      	ldr	r2, [r4, #4]
 8012c0a:	68db      	ldr	r3, [r3, #12]
 8012c0c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8012c10:	6021      	str	r1, [r4, #0]
 8012c12:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8012c16:	bd70      	pop	{r4, r5, r6, pc}
 8012c18:	08013c21 	.word	0x08013c21
 8012c1c:	08013ca1 	.word	0x08013ca1

08012c20 <__multadd>:
 8012c20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012c24:	690d      	ldr	r5, [r1, #16]
 8012c26:	4607      	mov	r7, r0
 8012c28:	460c      	mov	r4, r1
 8012c2a:	461e      	mov	r6, r3
 8012c2c:	f101 0c14 	add.w	ip, r1, #20
 8012c30:	2000      	movs	r0, #0
 8012c32:	f8dc 3000 	ldr.w	r3, [ip]
 8012c36:	b299      	uxth	r1, r3
 8012c38:	fb02 6101 	mla	r1, r2, r1, r6
 8012c3c:	0c1e      	lsrs	r6, r3, #16
 8012c3e:	0c0b      	lsrs	r3, r1, #16
 8012c40:	fb02 3306 	mla	r3, r2, r6, r3
 8012c44:	b289      	uxth	r1, r1
 8012c46:	3001      	adds	r0, #1
 8012c48:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8012c4c:	4285      	cmp	r5, r0
 8012c4e:	f84c 1b04 	str.w	r1, [ip], #4
 8012c52:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8012c56:	dcec      	bgt.n	8012c32 <__multadd+0x12>
 8012c58:	b30e      	cbz	r6, 8012c9e <__multadd+0x7e>
 8012c5a:	68a3      	ldr	r3, [r4, #8]
 8012c5c:	42ab      	cmp	r3, r5
 8012c5e:	dc19      	bgt.n	8012c94 <__multadd+0x74>
 8012c60:	6861      	ldr	r1, [r4, #4]
 8012c62:	4638      	mov	r0, r7
 8012c64:	3101      	adds	r1, #1
 8012c66:	f7ff ff79 	bl	8012b5c <_Balloc>
 8012c6a:	4680      	mov	r8, r0
 8012c6c:	b928      	cbnz	r0, 8012c7a <__multadd+0x5a>
 8012c6e:	4602      	mov	r2, r0
 8012c70:	4b0c      	ldr	r3, [pc, #48]	; (8012ca4 <__multadd+0x84>)
 8012c72:	480d      	ldr	r0, [pc, #52]	; (8012ca8 <__multadd+0x88>)
 8012c74:	21ba      	movs	r1, #186	; 0xba
 8012c76:	f000 fd73 	bl	8013760 <__assert_func>
 8012c7a:	6922      	ldr	r2, [r4, #16]
 8012c7c:	3202      	adds	r2, #2
 8012c7e:	f104 010c 	add.w	r1, r4, #12
 8012c82:	0092      	lsls	r2, r2, #2
 8012c84:	300c      	adds	r0, #12
 8012c86:	f7fe ffdf 	bl	8011c48 <memcpy>
 8012c8a:	4621      	mov	r1, r4
 8012c8c:	4638      	mov	r0, r7
 8012c8e:	f7ff ffa5 	bl	8012bdc <_Bfree>
 8012c92:	4644      	mov	r4, r8
 8012c94:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8012c98:	3501      	adds	r5, #1
 8012c9a:	615e      	str	r6, [r3, #20]
 8012c9c:	6125      	str	r5, [r4, #16]
 8012c9e:	4620      	mov	r0, r4
 8012ca0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012ca4:	08013c90 	.word	0x08013c90
 8012ca8:	08013ca1 	.word	0x08013ca1

08012cac <__hi0bits>:
 8012cac:	0c03      	lsrs	r3, r0, #16
 8012cae:	041b      	lsls	r3, r3, #16
 8012cb0:	b9d3      	cbnz	r3, 8012ce8 <__hi0bits+0x3c>
 8012cb2:	0400      	lsls	r0, r0, #16
 8012cb4:	2310      	movs	r3, #16
 8012cb6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8012cba:	bf04      	itt	eq
 8012cbc:	0200      	lsleq	r0, r0, #8
 8012cbe:	3308      	addeq	r3, #8
 8012cc0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8012cc4:	bf04      	itt	eq
 8012cc6:	0100      	lsleq	r0, r0, #4
 8012cc8:	3304      	addeq	r3, #4
 8012cca:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8012cce:	bf04      	itt	eq
 8012cd0:	0080      	lsleq	r0, r0, #2
 8012cd2:	3302      	addeq	r3, #2
 8012cd4:	2800      	cmp	r0, #0
 8012cd6:	db05      	blt.n	8012ce4 <__hi0bits+0x38>
 8012cd8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8012cdc:	f103 0301 	add.w	r3, r3, #1
 8012ce0:	bf08      	it	eq
 8012ce2:	2320      	moveq	r3, #32
 8012ce4:	4618      	mov	r0, r3
 8012ce6:	4770      	bx	lr
 8012ce8:	2300      	movs	r3, #0
 8012cea:	e7e4      	b.n	8012cb6 <__hi0bits+0xa>

08012cec <__lo0bits>:
 8012cec:	6803      	ldr	r3, [r0, #0]
 8012cee:	f013 0207 	ands.w	r2, r3, #7
 8012cf2:	d00c      	beq.n	8012d0e <__lo0bits+0x22>
 8012cf4:	07d9      	lsls	r1, r3, #31
 8012cf6:	d422      	bmi.n	8012d3e <__lo0bits+0x52>
 8012cf8:	079a      	lsls	r2, r3, #30
 8012cfa:	bf49      	itett	mi
 8012cfc:	085b      	lsrmi	r3, r3, #1
 8012cfe:	089b      	lsrpl	r3, r3, #2
 8012d00:	6003      	strmi	r3, [r0, #0]
 8012d02:	2201      	movmi	r2, #1
 8012d04:	bf5c      	itt	pl
 8012d06:	6003      	strpl	r3, [r0, #0]
 8012d08:	2202      	movpl	r2, #2
 8012d0a:	4610      	mov	r0, r2
 8012d0c:	4770      	bx	lr
 8012d0e:	b299      	uxth	r1, r3
 8012d10:	b909      	cbnz	r1, 8012d16 <__lo0bits+0x2a>
 8012d12:	0c1b      	lsrs	r3, r3, #16
 8012d14:	2210      	movs	r2, #16
 8012d16:	b2d9      	uxtb	r1, r3
 8012d18:	b909      	cbnz	r1, 8012d1e <__lo0bits+0x32>
 8012d1a:	3208      	adds	r2, #8
 8012d1c:	0a1b      	lsrs	r3, r3, #8
 8012d1e:	0719      	lsls	r1, r3, #28
 8012d20:	bf04      	itt	eq
 8012d22:	091b      	lsreq	r3, r3, #4
 8012d24:	3204      	addeq	r2, #4
 8012d26:	0799      	lsls	r1, r3, #30
 8012d28:	bf04      	itt	eq
 8012d2a:	089b      	lsreq	r3, r3, #2
 8012d2c:	3202      	addeq	r2, #2
 8012d2e:	07d9      	lsls	r1, r3, #31
 8012d30:	d403      	bmi.n	8012d3a <__lo0bits+0x4e>
 8012d32:	085b      	lsrs	r3, r3, #1
 8012d34:	f102 0201 	add.w	r2, r2, #1
 8012d38:	d003      	beq.n	8012d42 <__lo0bits+0x56>
 8012d3a:	6003      	str	r3, [r0, #0]
 8012d3c:	e7e5      	b.n	8012d0a <__lo0bits+0x1e>
 8012d3e:	2200      	movs	r2, #0
 8012d40:	e7e3      	b.n	8012d0a <__lo0bits+0x1e>
 8012d42:	2220      	movs	r2, #32
 8012d44:	e7e1      	b.n	8012d0a <__lo0bits+0x1e>
	...

08012d48 <__i2b>:
 8012d48:	b510      	push	{r4, lr}
 8012d4a:	460c      	mov	r4, r1
 8012d4c:	2101      	movs	r1, #1
 8012d4e:	f7ff ff05 	bl	8012b5c <_Balloc>
 8012d52:	4602      	mov	r2, r0
 8012d54:	b928      	cbnz	r0, 8012d62 <__i2b+0x1a>
 8012d56:	4b05      	ldr	r3, [pc, #20]	; (8012d6c <__i2b+0x24>)
 8012d58:	4805      	ldr	r0, [pc, #20]	; (8012d70 <__i2b+0x28>)
 8012d5a:	f240 1145 	movw	r1, #325	; 0x145
 8012d5e:	f000 fcff 	bl	8013760 <__assert_func>
 8012d62:	2301      	movs	r3, #1
 8012d64:	6144      	str	r4, [r0, #20]
 8012d66:	6103      	str	r3, [r0, #16]
 8012d68:	bd10      	pop	{r4, pc}
 8012d6a:	bf00      	nop
 8012d6c:	08013c90 	.word	0x08013c90
 8012d70:	08013ca1 	.word	0x08013ca1

08012d74 <__multiply>:
 8012d74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012d78:	4691      	mov	r9, r2
 8012d7a:	690a      	ldr	r2, [r1, #16]
 8012d7c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8012d80:	429a      	cmp	r2, r3
 8012d82:	bfb8      	it	lt
 8012d84:	460b      	movlt	r3, r1
 8012d86:	460c      	mov	r4, r1
 8012d88:	bfbc      	itt	lt
 8012d8a:	464c      	movlt	r4, r9
 8012d8c:	4699      	movlt	r9, r3
 8012d8e:	6927      	ldr	r7, [r4, #16]
 8012d90:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8012d94:	68a3      	ldr	r3, [r4, #8]
 8012d96:	6861      	ldr	r1, [r4, #4]
 8012d98:	eb07 060a 	add.w	r6, r7, sl
 8012d9c:	42b3      	cmp	r3, r6
 8012d9e:	b085      	sub	sp, #20
 8012da0:	bfb8      	it	lt
 8012da2:	3101      	addlt	r1, #1
 8012da4:	f7ff feda 	bl	8012b5c <_Balloc>
 8012da8:	b930      	cbnz	r0, 8012db8 <__multiply+0x44>
 8012daa:	4602      	mov	r2, r0
 8012dac:	4b44      	ldr	r3, [pc, #272]	; (8012ec0 <__multiply+0x14c>)
 8012dae:	4845      	ldr	r0, [pc, #276]	; (8012ec4 <__multiply+0x150>)
 8012db0:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8012db4:	f000 fcd4 	bl	8013760 <__assert_func>
 8012db8:	f100 0514 	add.w	r5, r0, #20
 8012dbc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8012dc0:	462b      	mov	r3, r5
 8012dc2:	2200      	movs	r2, #0
 8012dc4:	4543      	cmp	r3, r8
 8012dc6:	d321      	bcc.n	8012e0c <__multiply+0x98>
 8012dc8:	f104 0314 	add.w	r3, r4, #20
 8012dcc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8012dd0:	f109 0314 	add.w	r3, r9, #20
 8012dd4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8012dd8:	9202      	str	r2, [sp, #8]
 8012dda:	1b3a      	subs	r2, r7, r4
 8012ddc:	3a15      	subs	r2, #21
 8012dde:	f022 0203 	bic.w	r2, r2, #3
 8012de2:	3204      	adds	r2, #4
 8012de4:	f104 0115 	add.w	r1, r4, #21
 8012de8:	428f      	cmp	r7, r1
 8012dea:	bf38      	it	cc
 8012dec:	2204      	movcc	r2, #4
 8012dee:	9201      	str	r2, [sp, #4]
 8012df0:	9a02      	ldr	r2, [sp, #8]
 8012df2:	9303      	str	r3, [sp, #12]
 8012df4:	429a      	cmp	r2, r3
 8012df6:	d80c      	bhi.n	8012e12 <__multiply+0x9e>
 8012df8:	2e00      	cmp	r6, #0
 8012dfa:	dd03      	ble.n	8012e04 <__multiply+0x90>
 8012dfc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8012e00:	2b00      	cmp	r3, #0
 8012e02:	d05b      	beq.n	8012ebc <__multiply+0x148>
 8012e04:	6106      	str	r6, [r0, #16]
 8012e06:	b005      	add	sp, #20
 8012e08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012e0c:	f843 2b04 	str.w	r2, [r3], #4
 8012e10:	e7d8      	b.n	8012dc4 <__multiply+0x50>
 8012e12:	f8b3 a000 	ldrh.w	sl, [r3]
 8012e16:	f1ba 0f00 	cmp.w	sl, #0
 8012e1a:	d024      	beq.n	8012e66 <__multiply+0xf2>
 8012e1c:	f104 0e14 	add.w	lr, r4, #20
 8012e20:	46a9      	mov	r9, r5
 8012e22:	f04f 0c00 	mov.w	ip, #0
 8012e26:	f85e 2b04 	ldr.w	r2, [lr], #4
 8012e2a:	f8d9 1000 	ldr.w	r1, [r9]
 8012e2e:	fa1f fb82 	uxth.w	fp, r2
 8012e32:	b289      	uxth	r1, r1
 8012e34:	fb0a 110b 	mla	r1, sl, fp, r1
 8012e38:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8012e3c:	f8d9 2000 	ldr.w	r2, [r9]
 8012e40:	4461      	add	r1, ip
 8012e42:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8012e46:	fb0a c20b 	mla	r2, sl, fp, ip
 8012e4a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8012e4e:	b289      	uxth	r1, r1
 8012e50:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8012e54:	4577      	cmp	r7, lr
 8012e56:	f849 1b04 	str.w	r1, [r9], #4
 8012e5a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8012e5e:	d8e2      	bhi.n	8012e26 <__multiply+0xb2>
 8012e60:	9a01      	ldr	r2, [sp, #4]
 8012e62:	f845 c002 	str.w	ip, [r5, r2]
 8012e66:	9a03      	ldr	r2, [sp, #12]
 8012e68:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8012e6c:	3304      	adds	r3, #4
 8012e6e:	f1b9 0f00 	cmp.w	r9, #0
 8012e72:	d021      	beq.n	8012eb8 <__multiply+0x144>
 8012e74:	6829      	ldr	r1, [r5, #0]
 8012e76:	f104 0c14 	add.w	ip, r4, #20
 8012e7a:	46ae      	mov	lr, r5
 8012e7c:	f04f 0a00 	mov.w	sl, #0
 8012e80:	f8bc b000 	ldrh.w	fp, [ip]
 8012e84:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8012e88:	fb09 220b 	mla	r2, r9, fp, r2
 8012e8c:	4452      	add	r2, sl
 8012e8e:	b289      	uxth	r1, r1
 8012e90:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8012e94:	f84e 1b04 	str.w	r1, [lr], #4
 8012e98:	f85c 1b04 	ldr.w	r1, [ip], #4
 8012e9c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8012ea0:	f8be 1000 	ldrh.w	r1, [lr]
 8012ea4:	fb09 110a 	mla	r1, r9, sl, r1
 8012ea8:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8012eac:	4567      	cmp	r7, ip
 8012eae:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8012eb2:	d8e5      	bhi.n	8012e80 <__multiply+0x10c>
 8012eb4:	9a01      	ldr	r2, [sp, #4]
 8012eb6:	50a9      	str	r1, [r5, r2]
 8012eb8:	3504      	adds	r5, #4
 8012eba:	e799      	b.n	8012df0 <__multiply+0x7c>
 8012ebc:	3e01      	subs	r6, #1
 8012ebe:	e79b      	b.n	8012df8 <__multiply+0x84>
 8012ec0:	08013c90 	.word	0x08013c90
 8012ec4:	08013ca1 	.word	0x08013ca1

08012ec8 <__pow5mult>:
 8012ec8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012ecc:	4615      	mov	r5, r2
 8012ece:	f012 0203 	ands.w	r2, r2, #3
 8012ed2:	4606      	mov	r6, r0
 8012ed4:	460f      	mov	r7, r1
 8012ed6:	d007      	beq.n	8012ee8 <__pow5mult+0x20>
 8012ed8:	4c25      	ldr	r4, [pc, #148]	; (8012f70 <__pow5mult+0xa8>)
 8012eda:	3a01      	subs	r2, #1
 8012edc:	2300      	movs	r3, #0
 8012ede:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8012ee2:	f7ff fe9d 	bl	8012c20 <__multadd>
 8012ee6:	4607      	mov	r7, r0
 8012ee8:	10ad      	asrs	r5, r5, #2
 8012eea:	d03d      	beq.n	8012f68 <__pow5mult+0xa0>
 8012eec:	69f4      	ldr	r4, [r6, #28]
 8012eee:	b97c      	cbnz	r4, 8012f10 <__pow5mult+0x48>
 8012ef0:	2010      	movs	r0, #16
 8012ef2:	f7ff fd7f 	bl	80129f4 <malloc>
 8012ef6:	4602      	mov	r2, r0
 8012ef8:	61f0      	str	r0, [r6, #28]
 8012efa:	b928      	cbnz	r0, 8012f08 <__pow5mult+0x40>
 8012efc:	4b1d      	ldr	r3, [pc, #116]	; (8012f74 <__pow5mult+0xac>)
 8012efe:	481e      	ldr	r0, [pc, #120]	; (8012f78 <__pow5mult+0xb0>)
 8012f00:	f240 11b3 	movw	r1, #435	; 0x1b3
 8012f04:	f000 fc2c 	bl	8013760 <__assert_func>
 8012f08:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8012f0c:	6004      	str	r4, [r0, #0]
 8012f0e:	60c4      	str	r4, [r0, #12]
 8012f10:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8012f14:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8012f18:	b94c      	cbnz	r4, 8012f2e <__pow5mult+0x66>
 8012f1a:	f240 2171 	movw	r1, #625	; 0x271
 8012f1e:	4630      	mov	r0, r6
 8012f20:	f7ff ff12 	bl	8012d48 <__i2b>
 8012f24:	2300      	movs	r3, #0
 8012f26:	f8c8 0008 	str.w	r0, [r8, #8]
 8012f2a:	4604      	mov	r4, r0
 8012f2c:	6003      	str	r3, [r0, #0]
 8012f2e:	f04f 0900 	mov.w	r9, #0
 8012f32:	07eb      	lsls	r3, r5, #31
 8012f34:	d50a      	bpl.n	8012f4c <__pow5mult+0x84>
 8012f36:	4639      	mov	r1, r7
 8012f38:	4622      	mov	r2, r4
 8012f3a:	4630      	mov	r0, r6
 8012f3c:	f7ff ff1a 	bl	8012d74 <__multiply>
 8012f40:	4639      	mov	r1, r7
 8012f42:	4680      	mov	r8, r0
 8012f44:	4630      	mov	r0, r6
 8012f46:	f7ff fe49 	bl	8012bdc <_Bfree>
 8012f4a:	4647      	mov	r7, r8
 8012f4c:	106d      	asrs	r5, r5, #1
 8012f4e:	d00b      	beq.n	8012f68 <__pow5mult+0xa0>
 8012f50:	6820      	ldr	r0, [r4, #0]
 8012f52:	b938      	cbnz	r0, 8012f64 <__pow5mult+0x9c>
 8012f54:	4622      	mov	r2, r4
 8012f56:	4621      	mov	r1, r4
 8012f58:	4630      	mov	r0, r6
 8012f5a:	f7ff ff0b 	bl	8012d74 <__multiply>
 8012f5e:	6020      	str	r0, [r4, #0]
 8012f60:	f8c0 9000 	str.w	r9, [r0]
 8012f64:	4604      	mov	r4, r0
 8012f66:	e7e4      	b.n	8012f32 <__pow5mult+0x6a>
 8012f68:	4638      	mov	r0, r7
 8012f6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012f6e:	bf00      	nop
 8012f70:	08013df0 	.word	0x08013df0
 8012f74:	08013c21 	.word	0x08013c21
 8012f78:	08013ca1 	.word	0x08013ca1

08012f7c <__lshift>:
 8012f7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012f80:	460c      	mov	r4, r1
 8012f82:	6849      	ldr	r1, [r1, #4]
 8012f84:	6923      	ldr	r3, [r4, #16]
 8012f86:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8012f8a:	68a3      	ldr	r3, [r4, #8]
 8012f8c:	4607      	mov	r7, r0
 8012f8e:	4691      	mov	r9, r2
 8012f90:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8012f94:	f108 0601 	add.w	r6, r8, #1
 8012f98:	42b3      	cmp	r3, r6
 8012f9a:	db0b      	blt.n	8012fb4 <__lshift+0x38>
 8012f9c:	4638      	mov	r0, r7
 8012f9e:	f7ff fddd 	bl	8012b5c <_Balloc>
 8012fa2:	4605      	mov	r5, r0
 8012fa4:	b948      	cbnz	r0, 8012fba <__lshift+0x3e>
 8012fa6:	4602      	mov	r2, r0
 8012fa8:	4b28      	ldr	r3, [pc, #160]	; (801304c <__lshift+0xd0>)
 8012faa:	4829      	ldr	r0, [pc, #164]	; (8013050 <__lshift+0xd4>)
 8012fac:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8012fb0:	f000 fbd6 	bl	8013760 <__assert_func>
 8012fb4:	3101      	adds	r1, #1
 8012fb6:	005b      	lsls	r3, r3, #1
 8012fb8:	e7ee      	b.n	8012f98 <__lshift+0x1c>
 8012fba:	2300      	movs	r3, #0
 8012fbc:	f100 0114 	add.w	r1, r0, #20
 8012fc0:	f100 0210 	add.w	r2, r0, #16
 8012fc4:	4618      	mov	r0, r3
 8012fc6:	4553      	cmp	r3, sl
 8012fc8:	db33      	blt.n	8013032 <__lshift+0xb6>
 8012fca:	6920      	ldr	r0, [r4, #16]
 8012fcc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8012fd0:	f104 0314 	add.w	r3, r4, #20
 8012fd4:	f019 091f 	ands.w	r9, r9, #31
 8012fd8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8012fdc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8012fe0:	d02b      	beq.n	801303a <__lshift+0xbe>
 8012fe2:	f1c9 0e20 	rsb	lr, r9, #32
 8012fe6:	468a      	mov	sl, r1
 8012fe8:	2200      	movs	r2, #0
 8012fea:	6818      	ldr	r0, [r3, #0]
 8012fec:	fa00 f009 	lsl.w	r0, r0, r9
 8012ff0:	4310      	orrs	r0, r2
 8012ff2:	f84a 0b04 	str.w	r0, [sl], #4
 8012ff6:	f853 2b04 	ldr.w	r2, [r3], #4
 8012ffa:	459c      	cmp	ip, r3
 8012ffc:	fa22 f20e 	lsr.w	r2, r2, lr
 8013000:	d8f3      	bhi.n	8012fea <__lshift+0x6e>
 8013002:	ebac 0304 	sub.w	r3, ip, r4
 8013006:	3b15      	subs	r3, #21
 8013008:	f023 0303 	bic.w	r3, r3, #3
 801300c:	3304      	adds	r3, #4
 801300e:	f104 0015 	add.w	r0, r4, #21
 8013012:	4584      	cmp	ip, r0
 8013014:	bf38      	it	cc
 8013016:	2304      	movcc	r3, #4
 8013018:	50ca      	str	r2, [r1, r3]
 801301a:	b10a      	cbz	r2, 8013020 <__lshift+0xa4>
 801301c:	f108 0602 	add.w	r6, r8, #2
 8013020:	3e01      	subs	r6, #1
 8013022:	4638      	mov	r0, r7
 8013024:	612e      	str	r6, [r5, #16]
 8013026:	4621      	mov	r1, r4
 8013028:	f7ff fdd8 	bl	8012bdc <_Bfree>
 801302c:	4628      	mov	r0, r5
 801302e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013032:	f842 0f04 	str.w	r0, [r2, #4]!
 8013036:	3301      	adds	r3, #1
 8013038:	e7c5      	b.n	8012fc6 <__lshift+0x4a>
 801303a:	3904      	subs	r1, #4
 801303c:	f853 2b04 	ldr.w	r2, [r3], #4
 8013040:	f841 2f04 	str.w	r2, [r1, #4]!
 8013044:	459c      	cmp	ip, r3
 8013046:	d8f9      	bhi.n	801303c <__lshift+0xc0>
 8013048:	e7ea      	b.n	8013020 <__lshift+0xa4>
 801304a:	bf00      	nop
 801304c:	08013c90 	.word	0x08013c90
 8013050:	08013ca1 	.word	0x08013ca1

08013054 <__mcmp>:
 8013054:	b530      	push	{r4, r5, lr}
 8013056:	6902      	ldr	r2, [r0, #16]
 8013058:	690c      	ldr	r4, [r1, #16]
 801305a:	1b12      	subs	r2, r2, r4
 801305c:	d10e      	bne.n	801307c <__mcmp+0x28>
 801305e:	f100 0314 	add.w	r3, r0, #20
 8013062:	3114      	adds	r1, #20
 8013064:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8013068:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801306c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8013070:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8013074:	42a5      	cmp	r5, r4
 8013076:	d003      	beq.n	8013080 <__mcmp+0x2c>
 8013078:	d305      	bcc.n	8013086 <__mcmp+0x32>
 801307a:	2201      	movs	r2, #1
 801307c:	4610      	mov	r0, r2
 801307e:	bd30      	pop	{r4, r5, pc}
 8013080:	4283      	cmp	r3, r0
 8013082:	d3f3      	bcc.n	801306c <__mcmp+0x18>
 8013084:	e7fa      	b.n	801307c <__mcmp+0x28>
 8013086:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801308a:	e7f7      	b.n	801307c <__mcmp+0x28>

0801308c <__mdiff>:
 801308c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013090:	460c      	mov	r4, r1
 8013092:	4606      	mov	r6, r0
 8013094:	4611      	mov	r1, r2
 8013096:	4620      	mov	r0, r4
 8013098:	4690      	mov	r8, r2
 801309a:	f7ff ffdb 	bl	8013054 <__mcmp>
 801309e:	1e05      	subs	r5, r0, #0
 80130a0:	d110      	bne.n	80130c4 <__mdiff+0x38>
 80130a2:	4629      	mov	r1, r5
 80130a4:	4630      	mov	r0, r6
 80130a6:	f7ff fd59 	bl	8012b5c <_Balloc>
 80130aa:	b930      	cbnz	r0, 80130ba <__mdiff+0x2e>
 80130ac:	4b3a      	ldr	r3, [pc, #232]	; (8013198 <__mdiff+0x10c>)
 80130ae:	4602      	mov	r2, r0
 80130b0:	f240 2137 	movw	r1, #567	; 0x237
 80130b4:	4839      	ldr	r0, [pc, #228]	; (801319c <__mdiff+0x110>)
 80130b6:	f000 fb53 	bl	8013760 <__assert_func>
 80130ba:	2301      	movs	r3, #1
 80130bc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80130c0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80130c4:	bfa4      	itt	ge
 80130c6:	4643      	movge	r3, r8
 80130c8:	46a0      	movge	r8, r4
 80130ca:	4630      	mov	r0, r6
 80130cc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80130d0:	bfa6      	itte	ge
 80130d2:	461c      	movge	r4, r3
 80130d4:	2500      	movge	r5, #0
 80130d6:	2501      	movlt	r5, #1
 80130d8:	f7ff fd40 	bl	8012b5c <_Balloc>
 80130dc:	b920      	cbnz	r0, 80130e8 <__mdiff+0x5c>
 80130de:	4b2e      	ldr	r3, [pc, #184]	; (8013198 <__mdiff+0x10c>)
 80130e0:	4602      	mov	r2, r0
 80130e2:	f240 2145 	movw	r1, #581	; 0x245
 80130e6:	e7e5      	b.n	80130b4 <__mdiff+0x28>
 80130e8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80130ec:	6926      	ldr	r6, [r4, #16]
 80130ee:	60c5      	str	r5, [r0, #12]
 80130f0:	f104 0914 	add.w	r9, r4, #20
 80130f4:	f108 0514 	add.w	r5, r8, #20
 80130f8:	f100 0e14 	add.w	lr, r0, #20
 80130fc:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8013100:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8013104:	f108 0210 	add.w	r2, r8, #16
 8013108:	46f2      	mov	sl, lr
 801310a:	2100      	movs	r1, #0
 801310c:	f859 3b04 	ldr.w	r3, [r9], #4
 8013110:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8013114:	fa11 f88b 	uxtah	r8, r1, fp
 8013118:	b299      	uxth	r1, r3
 801311a:	0c1b      	lsrs	r3, r3, #16
 801311c:	eba8 0801 	sub.w	r8, r8, r1
 8013120:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8013124:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8013128:	fa1f f888 	uxth.w	r8, r8
 801312c:	1419      	asrs	r1, r3, #16
 801312e:	454e      	cmp	r6, r9
 8013130:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8013134:	f84a 3b04 	str.w	r3, [sl], #4
 8013138:	d8e8      	bhi.n	801310c <__mdiff+0x80>
 801313a:	1b33      	subs	r3, r6, r4
 801313c:	3b15      	subs	r3, #21
 801313e:	f023 0303 	bic.w	r3, r3, #3
 8013142:	3304      	adds	r3, #4
 8013144:	3415      	adds	r4, #21
 8013146:	42a6      	cmp	r6, r4
 8013148:	bf38      	it	cc
 801314a:	2304      	movcc	r3, #4
 801314c:	441d      	add	r5, r3
 801314e:	4473      	add	r3, lr
 8013150:	469e      	mov	lr, r3
 8013152:	462e      	mov	r6, r5
 8013154:	4566      	cmp	r6, ip
 8013156:	d30e      	bcc.n	8013176 <__mdiff+0xea>
 8013158:	f10c 0203 	add.w	r2, ip, #3
 801315c:	1b52      	subs	r2, r2, r5
 801315e:	f022 0203 	bic.w	r2, r2, #3
 8013162:	3d03      	subs	r5, #3
 8013164:	45ac      	cmp	ip, r5
 8013166:	bf38      	it	cc
 8013168:	2200      	movcc	r2, #0
 801316a:	4413      	add	r3, r2
 801316c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8013170:	b17a      	cbz	r2, 8013192 <__mdiff+0x106>
 8013172:	6107      	str	r7, [r0, #16]
 8013174:	e7a4      	b.n	80130c0 <__mdiff+0x34>
 8013176:	f856 8b04 	ldr.w	r8, [r6], #4
 801317a:	fa11 f288 	uxtah	r2, r1, r8
 801317e:	1414      	asrs	r4, r2, #16
 8013180:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8013184:	b292      	uxth	r2, r2
 8013186:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 801318a:	f84e 2b04 	str.w	r2, [lr], #4
 801318e:	1421      	asrs	r1, r4, #16
 8013190:	e7e0      	b.n	8013154 <__mdiff+0xc8>
 8013192:	3f01      	subs	r7, #1
 8013194:	e7ea      	b.n	801316c <__mdiff+0xe0>
 8013196:	bf00      	nop
 8013198:	08013c90 	.word	0x08013c90
 801319c:	08013ca1 	.word	0x08013ca1

080131a0 <__d2b>:
 80131a0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80131a4:	460f      	mov	r7, r1
 80131a6:	2101      	movs	r1, #1
 80131a8:	ec59 8b10 	vmov	r8, r9, d0
 80131ac:	4616      	mov	r6, r2
 80131ae:	f7ff fcd5 	bl	8012b5c <_Balloc>
 80131b2:	4604      	mov	r4, r0
 80131b4:	b930      	cbnz	r0, 80131c4 <__d2b+0x24>
 80131b6:	4602      	mov	r2, r0
 80131b8:	4b24      	ldr	r3, [pc, #144]	; (801324c <__d2b+0xac>)
 80131ba:	4825      	ldr	r0, [pc, #148]	; (8013250 <__d2b+0xb0>)
 80131bc:	f240 310f 	movw	r1, #783	; 0x30f
 80131c0:	f000 face 	bl	8013760 <__assert_func>
 80131c4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80131c8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80131cc:	bb2d      	cbnz	r5, 801321a <__d2b+0x7a>
 80131ce:	9301      	str	r3, [sp, #4]
 80131d0:	f1b8 0300 	subs.w	r3, r8, #0
 80131d4:	d026      	beq.n	8013224 <__d2b+0x84>
 80131d6:	4668      	mov	r0, sp
 80131d8:	9300      	str	r3, [sp, #0]
 80131da:	f7ff fd87 	bl	8012cec <__lo0bits>
 80131de:	e9dd 1200 	ldrd	r1, r2, [sp]
 80131e2:	b1e8      	cbz	r0, 8013220 <__d2b+0x80>
 80131e4:	f1c0 0320 	rsb	r3, r0, #32
 80131e8:	fa02 f303 	lsl.w	r3, r2, r3
 80131ec:	430b      	orrs	r3, r1
 80131ee:	40c2      	lsrs	r2, r0
 80131f0:	6163      	str	r3, [r4, #20]
 80131f2:	9201      	str	r2, [sp, #4]
 80131f4:	9b01      	ldr	r3, [sp, #4]
 80131f6:	61a3      	str	r3, [r4, #24]
 80131f8:	2b00      	cmp	r3, #0
 80131fa:	bf14      	ite	ne
 80131fc:	2202      	movne	r2, #2
 80131fe:	2201      	moveq	r2, #1
 8013200:	6122      	str	r2, [r4, #16]
 8013202:	b1bd      	cbz	r5, 8013234 <__d2b+0x94>
 8013204:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8013208:	4405      	add	r5, r0
 801320a:	603d      	str	r5, [r7, #0]
 801320c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8013210:	6030      	str	r0, [r6, #0]
 8013212:	4620      	mov	r0, r4
 8013214:	b003      	add	sp, #12
 8013216:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801321a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801321e:	e7d6      	b.n	80131ce <__d2b+0x2e>
 8013220:	6161      	str	r1, [r4, #20]
 8013222:	e7e7      	b.n	80131f4 <__d2b+0x54>
 8013224:	a801      	add	r0, sp, #4
 8013226:	f7ff fd61 	bl	8012cec <__lo0bits>
 801322a:	9b01      	ldr	r3, [sp, #4]
 801322c:	6163      	str	r3, [r4, #20]
 801322e:	3020      	adds	r0, #32
 8013230:	2201      	movs	r2, #1
 8013232:	e7e5      	b.n	8013200 <__d2b+0x60>
 8013234:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8013238:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801323c:	6038      	str	r0, [r7, #0]
 801323e:	6918      	ldr	r0, [r3, #16]
 8013240:	f7ff fd34 	bl	8012cac <__hi0bits>
 8013244:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8013248:	e7e2      	b.n	8013210 <__d2b+0x70>
 801324a:	bf00      	nop
 801324c:	08013c90 	.word	0x08013c90
 8013250:	08013ca1 	.word	0x08013ca1

08013254 <__sfputc_r>:
 8013254:	6893      	ldr	r3, [r2, #8]
 8013256:	3b01      	subs	r3, #1
 8013258:	2b00      	cmp	r3, #0
 801325a:	b410      	push	{r4}
 801325c:	6093      	str	r3, [r2, #8]
 801325e:	da08      	bge.n	8013272 <__sfputc_r+0x1e>
 8013260:	6994      	ldr	r4, [r2, #24]
 8013262:	42a3      	cmp	r3, r4
 8013264:	db01      	blt.n	801326a <__sfputc_r+0x16>
 8013266:	290a      	cmp	r1, #10
 8013268:	d103      	bne.n	8013272 <__sfputc_r+0x1e>
 801326a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801326e:	f7fe bb82 	b.w	8011976 <__swbuf_r>
 8013272:	6813      	ldr	r3, [r2, #0]
 8013274:	1c58      	adds	r0, r3, #1
 8013276:	6010      	str	r0, [r2, #0]
 8013278:	7019      	strb	r1, [r3, #0]
 801327a:	4608      	mov	r0, r1
 801327c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013280:	4770      	bx	lr

08013282 <__sfputs_r>:
 8013282:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013284:	4606      	mov	r6, r0
 8013286:	460f      	mov	r7, r1
 8013288:	4614      	mov	r4, r2
 801328a:	18d5      	adds	r5, r2, r3
 801328c:	42ac      	cmp	r4, r5
 801328e:	d101      	bne.n	8013294 <__sfputs_r+0x12>
 8013290:	2000      	movs	r0, #0
 8013292:	e007      	b.n	80132a4 <__sfputs_r+0x22>
 8013294:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013298:	463a      	mov	r2, r7
 801329a:	4630      	mov	r0, r6
 801329c:	f7ff ffda 	bl	8013254 <__sfputc_r>
 80132a0:	1c43      	adds	r3, r0, #1
 80132a2:	d1f3      	bne.n	801328c <__sfputs_r+0xa>
 80132a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080132a8 <_vfiprintf_r>:
 80132a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80132ac:	460d      	mov	r5, r1
 80132ae:	b09d      	sub	sp, #116	; 0x74
 80132b0:	4614      	mov	r4, r2
 80132b2:	4698      	mov	r8, r3
 80132b4:	4606      	mov	r6, r0
 80132b6:	b118      	cbz	r0, 80132c0 <_vfiprintf_r+0x18>
 80132b8:	6a03      	ldr	r3, [r0, #32]
 80132ba:	b90b      	cbnz	r3, 80132c0 <_vfiprintf_r+0x18>
 80132bc:	f7fe fa74 	bl	80117a8 <__sinit>
 80132c0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80132c2:	07d9      	lsls	r1, r3, #31
 80132c4:	d405      	bmi.n	80132d2 <_vfiprintf_r+0x2a>
 80132c6:	89ab      	ldrh	r3, [r5, #12]
 80132c8:	059a      	lsls	r2, r3, #22
 80132ca:	d402      	bmi.n	80132d2 <_vfiprintf_r+0x2a>
 80132cc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80132ce:	f7fe fcb9 	bl	8011c44 <__retarget_lock_acquire_recursive>
 80132d2:	89ab      	ldrh	r3, [r5, #12]
 80132d4:	071b      	lsls	r3, r3, #28
 80132d6:	d501      	bpl.n	80132dc <_vfiprintf_r+0x34>
 80132d8:	692b      	ldr	r3, [r5, #16]
 80132da:	b99b      	cbnz	r3, 8013304 <_vfiprintf_r+0x5c>
 80132dc:	4629      	mov	r1, r5
 80132de:	4630      	mov	r0, r6
 80132e0:	f7fe fb86 	bl	80119f0 <__swsetup_r>
 80132e4:	b170      	cbz	r0, 8013304 <_vfiprintf_r+0x5c>
 80132e6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80132e8:	07dc      	lsls	r4, r3, #31
 80132ea:	d504      	bpl.n	80132f6 <_vfiprintf_r+0x4e>
 80132ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80132f0:	b01d      	add	sp, #116	; 0x74
 80132f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80132f6:	89ab      	ldrh	r3, [r5, #12]
 80132f8:	0598      	lsls	r0, r3, #22
 80132fa:	d4f7      	bmi.n	80132ec <_vfiprintf_r+0x44>
 80132fc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80132fe:	f7fe fca2 	bl	8011c46 <__retarget_lock_release_recursive>
 8013302:	e7f3      	b.n	80132ec <_vfiprintf_r+0x44>
 8013304:	2300      	movs	r3, #0
 8013306:	9309      	str	r3, [sp, #36]	; 0x24
 8013308:	2320      	movs	r3, #32
 801330a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801330e:	f8cd 800c 	str.w	r8, [sp, #12]
 8013312:	2330      	movs	r3, #48	; 0x30
 8013314:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80134c8 <_vfiprintf_r+0x220>
 8013318:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801331c:	f04f 0901 	mov.w	r9, #1
 8013320:	4623      	mov	r3, r4
 8013322:	469a      	mov	sl, r3
 8013324:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013328:	b10a      	cbz	r2, 801332e <_vfiprintf_r+0x86>
 801332a:	2a25      	cmp	r2, #37	; 0x25
 801332c:	d1f9      	bne.n	8013322 <_vfiprintf_r+0x7a>
 801332e:	ebba 0b04 	subs.w	fp, sl, r4
 8013332:	d00b      	beq.n	801334c <_vfiprintf_r+0xa4>
 8013334:	465b      	mov	r3, fp
 8013336:	4622      	mov	r2, r4
 8013338:	4629      	mov	r1, r5
 801333a:	4630      	mov	r0, r6
 801333c:	f7ff ffa1 	bl	8013282 <__sfputs_r>
 8013340:	3001      	adds	r0, #1
 8013342:	f000 80a9 	beq.w	8013498 <_vfiprintf_r+0x1f0>
 8013346:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013348:	445a      	add	r2, fp
 801334a:	9209      	str	r2, [sp, #36]	; 0x24
 801334c:	f89a 3000 	ldrb.w	r3, [sl]
 8013350:	2b00      	cmp	r3, #0
 8013352:	f000 80a1 	beq.w	8013498 <_vfiprintf_r+0x1f0>
 8013356:	2300      	movs	r3, #0
 8013358:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801335c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013360:	f10a 0a01 	add.w	sl, sl, #1
 8013364:	9304      	str	r3, [sp, #16]
 8013366:	9307      	str	r3, [sp, #28]
 8013368:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801336c:	931a      	str	r3, [sp, #104]	; 0x68
 801336e:	4654      	mov	r4, sl
 8013370:	2205      	movs	r2, #5
 8013372:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013376:	4854      	ldr	r0, [pc, #336]	; (80134c8 <_vfiprintf_r+0x220>)
 8013378:	f7ec ff52 	bl	8000220 <memchr>
 801337c:	9a04      	ldr	r2, [sp, #16]
 801337e:	b9d8      	cbnz	r0, 80133b8 <_vfiprintf_r+0x110>
 8013380:	06d1      	lsls	r1, r2, #27
 8013382:	bf44      	itt	mi
 8013384:	2320      	movmi	r3, #32
 8013386:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801338a:	0713      	lsls	r3, r2, #28
 801338c:	bf44      	itt	mi
 801338e:	232b      	movmi	r3, #43	; 0x2b
 8013390:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013394:	f89a 3000 	ldrb.w	r3, [sl]
 8013398:	2b2a      	cmp	r3, #42	; 0x2a
 801339a:	d015      	beq.n	80133c8 <_vfiprintf_r+0x120>
 801339c:	9a07      	ldr	r2, [sp, #28]
 801339e:	4654      	mov	r4, sl
 80133a0:	2000      	movs	r0, #0
 80133a2:	f04f 0c0a 	mov.w	ip, #10
 80133a6:	4621      	mov	r1, r4
 80133a8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80133ac:	3b30      	subs	r3, #48	; 0x30
 80133ae:	2b09      	cmp	r3, #9
 80133b0:	d94d      	bls.n	801344e <_vfiprintf_r+0x1a6>
 80133b2:	b1b0      	cbz	r0, 80133e2 <_vfiprintf_r+0x13a>
 80133b4:	9207      	str	r2, [sp, #28]
 80133b6:	e014      	b.n	80133e2 <_vfiprintf_r+0x13a>
 80133b8:	eba0 0308 	sub.w	r3, r0, r8
 80133bc:	fa09 f303 	lsl.w	r3, r9, r3
 80133c0:	4313      	orrs	r3, r2
 80133c2:	9304      	str	r3, [sp, #16]
 80133c4:	46a2      	mov	sl, r4
 80133c6:	e7d2      	b.n	801336e <_vfiprintf_r+0xc6>
 80133c8:	9b03      	ldr	r3, [sp, #12]
 80133ca:	1d19      	adds	r1, r3, #4
 80133cc:	681b      	ldr	r3, [r3, #0]
 80133ce:	9103      	str	r1, [sp, #12]
 80133d0:	2b00      	cmp	r3, #0
 80133d2:	bfbb      	ittet	lt
 80133d4:	425b      	neglt	r3, r3
 80133d6:	f042 0202 	orrlt.w	r2, r2, #2
 80133da:	9307      	strge	r3, [sp, #28]
 80133dc:	9307      	strlt	r3, [sp, #28]
 80133de:	bfb8      	it	lt
 80133e0:	9204      	strlt	r2, [sp, #16]
 80133e2:	7823      	ldrb	r3, [r4, #0]
 80133e4:	2b2e      	cmp	r3, #46	; 0x2e
 80133e6:	d10c      	bne.n	8013402 <_vfiprintf_r+0x15a>
 80133e8:	7863      	ldrb	r3, [r4, #1]
 80133ea:	2b2a      	cmp	r3, #42	; 0x2a
 80133ec:	d134      	bne.n	8013458 <_vfiprintf_r+0x1b0>
 80133ee:	9b03      	ldr	r3, [sp, #12]
 80133f0:	1d1a      	adds	r2, r3, #4
 80133f2:	681b      	ldr	r3, [r3, #0]
 80133f4:	9203      	str	r2, [sp, #12]
 80133f6:	2b00      	cmp	r3, #0
 80133f8:	bfb8      	it	lt
 80133fa:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80133fe:	3402      	adds	r4, #2
 8013400:	9305      	str	r3, [sp, #20]
 8013402:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80134d8 <_vfiprintf_r+0x230>
 8013406:	7821      	ldrb	r1, [r4, #0]
 8013408:	2203      	movs	r2, #3
 801340a:	4650      	mov	r0, sl
 801340c:	f7ec ff08 	bl	8000220 <memchr>
 8013410:	b138      	cbz	r0, 8013422 <_vfiprintf_r+0x17a>
 8013412:	9b04      	ldr	r3, [sp, #16]
 8013414:	eba0 000a 	sub.w	r0, r0, sl
 8013418:	2240      	movs	r2, #64	; 0x40
 801341a:	4082      	lsls	r2, r0
 801341c:	4313      	orrs	r3, r2
 801341e:	3401      	adds	r4, #1
 8013420:	9304      	str	r3, [sp, #16]
 8013422:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013426:	4829      	ldr	r0, [pc, #164]	; (80134cc <_vfiprintf_r+0x224>)
 8013428:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801342c:	2206      	movs	r2, #6
 801342e:	f7ec fef7 	bl	8000220 <memchr>
 8013432:	2800      	cmp	r0, #0
 8013434:	d03f      	beq.n	80134b6 <_vfiprintf_r+0x20e>
 8013436:	4b26      	ldr	r3, [pc, #152]	; (80134d0 <_vfiprintf_r+0x228>)
 8013438:	bb1b      	cbnz	r3, 8013482 <_vfiprintf_r+0x1da>
 801343a:	9b03      	ldr	r3, [sp, #12]
 801343c:	3307      	adds	r3, #7
 801343e:	f023 0307 	bic.w	r3, r3, #7
 8013442:	3308      	adds	r3, #8
 8013444:	9303      	str	r3, [sp, #12]
 8013446:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013448:	443b      	add	r3, r7
 801344a:	9309      	str	r3, [sp, #36]	; 0x24
 801344c:	e768      	b.n	8013320 <_vfiprintf_r+0x78>
 801344e:	fb0c 3202 	mla	r2, ip, r2, r3
 8013452:	460c      	mov	r4, r1
 8013454:	2001      	movs	r0, #1
 8013456:	e7a6      	b.n	80133a6 <_vfiprintf_r+0xfe>
 8013458:	2300      	movs	r3, #0
 801345a:	3401      	adds	r4, #1
 801345c:	9305      	str	r3, [sp, #20]
 801345e:	4619      	mov	r1, r3
 8013460:	f04f 0c0a 	mov.w	ip, #10
 8013464:	4620      	mov	r0, r4
 8013466:	f810 2b01 	ldrb.w	r2, [r0], #1
 801346a:	3a30      	subs	r2, #48	; 0x30
 801346c:	2a09      	cmp	r2, #9
 801346e:	d903      	bls.n	8013478 <_vfiprintf_r+0x1d0>
 8013470:	2b00      	cmp	r3, #0
 8013472:	d0c6      	beq.n	8013402 <_vfiprintf_r+0x15a>
 8013474:	9105      	str	r1, [sp, #20]
 8013476:	e7c4      	b.n	8013402 <_vfiprintf_r+0x15a>
 8013478:	fb0c 2101 	mla	r1, ip, r1, r2
 801347c:	4604      	mov	r4, r0
 801347e:	2301      	movs	r3, #1
 8013480:	e7f0      	b.n	8013464 <_vfiprintf_r+0x1bc>
 8013482:	ab03      	add	r3, sp, #12
 8013484:	9300      	str	r3, [sp, #0]
 8013486:	462a      	mov	r2, r5
 8013488:	4b12      	ldr	r3, [pc, #72]	; (80134d4 <_vfiprintf_r+0x22c>)
 801348a:	a904      	add	r1, sp, #16
 801348c:	4630      	mov	r0, r6
 801348e:	f7fd fd4b 	bl	8010f28 <_printf_float>
 8013492:	4607      	mov	r7, r0
 8013494:	1c78      	adds	r0, r7, #1
 8013496:	d1d6      	bne.n	8013446 <_vfiprintf_r+0x19e>
 8013498:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801349a:	07d9      	lsls	r1, r3, #31
 801349c:	d405      	bmi.n	80134aa <_vfiprintf_r+0x202>
 801349e:	89ab      	ldrh	r3, [r5, #12]
 80134a0:	059a      	lsls	r2, r3, #22
 80134a2:	d402      	bmi.n	80134aa <_vfiprintf_r+0x202>
 80134a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80134a6:	f7fe fbce 	bl	8011c46 <__retarget_lock_release_recursive>
 80134aa:	89ab      	ldrh	r3, [r5, #12]
 80134ac:	065b      	lsls	r3, r3, #25
 80134ae:	f53f af1d 	bmi.w	80132ec <_vfiprintf_r+0x44>
 80134b2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80134b4:	e71c      	b.n	80132f0 <_vfiprintf_r+0x48>
 80134b6:	ab03      	add	r3, sp, #12
 80134b8:	9300      	str	r3, [sp, #0]
 80134ba:	462a      	mov	r2, r5
 80134bc:	4b05      	ldr	r3, [pc, #20]	; (80134d4 <_vfiprintf_r+0x22c>)
 80134be:	a904      	add	r1, sp, #16
 80134c0:	4630      	mov	r0, r6
 80134c2:	f7fd ffd5 	bl	8011470 <_printf_i>
 80134c6:	e7e4      	b.n	8013492 <_vfiprintf_r+0x1ea>
 80134c8:	08013dfc 	.word	0x08013dfc
 80134cc:	08013e06 	.word	0x08013e06
 80134d0:	08010f29 	.word	0x08010f29
 80134d4:	08013283 	.word	0x08013283
 80134d8:	08013e02 	.word	0x08013e02

080134dc <__sflush_r>:
 80134dc:	898a      	ldrh	r2, [r1, #12]
 80134de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80134e2:	4605      	mov	r5, r0
 80134e4:	0710      	lsls	r0, r2, #28
 80134e6:	460c      	mov	r4, r1
 80134e8:	d458      	bmi.n	801359c <__sflush_r+0xc0>
 80134ea:	684b      	ldr	r3, [r1, #4]
 80134ec:	2b00      	cmp	r3, #0
 80134ee:	dc05      	bgt.n	80134fc <__sflush_r+0x20>
 80134f0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80134f2:	2b00      	cmp	r3, #0
 80134f4:	dc02      	bgt.n	80134fc <__sflush_r+0x20>
 80134f6:	2000      	movs	r0, #0
 80134f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80134fc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80134fe:	2e00      	cmp	r6, #0
 8013500:	d0f9      	beq.n	80134f6 <__sflush_r+0x1a>
 8013502:	2300      	movs	r3, #0
 8013504:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8013508:	682f      	ldr	r7, [r5, #0]
 801350a:	6a21      	ldr	r1, [r4, #32]
 801350c:	602b      	str	r3, [r5, #0]
 801350e:	d032      	beq.n	8013576 <__sflush_r+0x9a>
 8013510:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8013512:	89a3      	ldrh	r3, [r4, #12]
 8013514:	075a      	lsls	r2, r3, #29
 8013516:	d505      	bpl.n	8013524 <__sflush_r+0x48>
 8013518:	6863      	ldr	r3, [r4, #4]
 801351a:	1ac0      	subs	r0, r0, r3
 801351c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801351e:	b10b      	cbz	r3, 8013524 <__sflush_r+0x48>
 8013520:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8013522:	1ac0      	subs	r0, r0, r3
 8013524:	2300      	movs	r3, #0
 8013526:	4602      	mov	r2, r0
 8013528:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801352a:	6a21      	ldr	r1, [r4, #32]
 801352c:	4628      	mov	r0, r5
 801352e:	47b0      	blx	r6
 8013530:	1c43      	adds	r3, r0, #1
 8013532:	89a3      	ldrh	r3, [r4, #12]
 8013534:	d106      	bne.n	8013544 <__sflush_r+0x68>
 8013536:	6829      	ldr	r1, [r5, #0]
 8013538:	291d      	cmp	r1, #29
 801353a:	d82b      	bhi.n	8013594 <__sflush_r+0xb8>
 801353c:	4a29      	ldr	r2, [pc, #164]	; (80135e4 <__sflush_r+0x108>)
 801353e:	410a      	asrs	r2, r1
 8013540:	07d6      	lsls	r6, r2, #31
 8013542:	d427      	bmi.n	8013594 <__sflush_r+0xb8>
 8013544:	2200      	movs	r2, #0
 8013546:	6062      	str	r2, [r4, #4]
 8013548:	04d9      	lsls	r1, r3, #19
 801354a:	6922      	ldr	r2, [r4, #16]
 801354c:	6022      	str	r2, [r4, #0]
 801354e:	d504      	bpl.n	801355a <__sflush_r+0x7e>
 8013550:	1c42      	adds	r2, r0, #1
 8013552:	d101      	bne.n	8013558 <__sflush_r+0x7c>
 8013554:	682b      	ldr	r3, [r5, #0]
 8013556:	b903      	cbnz	r3, 801355a <__sflush_r+0x7e>
 8013558:	6560      	str	r0, [r4, #84]	; 0x54
 801355a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801355c:	602f      	str	r7, [r5, #0]
 801355e:	2900      	cmp	r1, #0
 8013560:	d0c9      	beq.n	80134f6 <__sflush_r+0x1a>
 8013562:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013566:	4299      	cmp	r1, r3
 8013568:	d002      	beq.n	8013570 <__sflush_r+0x94>
 801356a:	4628      	mov	r0, r5
 801356c:	f7ff f9f6 	bl	801295c <_free_r>
 8013570:	2000      	movs	r0, #0
 8013572:	6360      	str	r0, [r4, #52]	; 0x34
 8013574:	e7c0      	b.n	80134f8 <__sflush_r+0x1c>
 8013576:	2301      	movs	r3, #1
 8013578:	4628      	mov	r0, r5
 801357a:	47b0      	blx	r6
 801357c:	1c41      	adds	r1, r0, #1
 801357e:	d1c8      	bne.n	8013512 <__sflush_r+0x36>
 8013580:	682b      	ldr	r3, [r5, #0]
 8013582:	2b00      	cmp	r3, #0
 8013584:	d0c5      	beq.n	8013512 <__sflush_r+0x36>
 8013586:	2b1d      	cmp	r3, #29
 8013588:	d001      	beq.n	801358e <__sflush_r+0xb2>
 801358a:	2b16      	cmp	r3, #22
 801358c:	d101      	bne.n	8013592 <__sflush_r+0xb6>
 801358e:	602f      	str	r7, [r5, #0]
 8013590:	e7b1      	b.n	80134f6 <__sflush_r+0x1a>
 8013592:	89a3      	ldrh	r3, [r4, #12]
 8013594:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013598:	81a3      	strh	r3, [r4, #12]
 801359a:	e7ad      	b.n	80134f8 <__sflush_r+0x1c>
 801359c:	690f      	ldr	r7, [r1, #16]
 801359e:	2f00      	cmp	r7, #0
 80135a0:	d0a9      	beq.n	80134f6 <__sflush_r+0x1a>
 80135a2:	0793      	lsls	r3, r2, #30
 80135a4:	680e      	ldr	r6, [r1, #0]
 80135a6:	bf08      	it	eq
 80135a8:	694b      	ldreq	r3, [r1, #20]
 80135aa:	600f      	str	r7, [r1, #0]
 80135ac:	bf18      	it	ne
 80135ae:	2300      	movne	r3, #0
 80135b0:	eba6 0807 	sub.w	r8, r6, r7
 80135b4:	608b      	str	r3, [r1, #8]
 80135b6:	f1b8 0f00 	cmp.w	r8, #0
 80135ba:	dd9c      	ble.n	80134f6 <__sflush_r+0x1a>
 80135bc:	6a21      	ldr	r1, [r4, #32]
 80135be:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80135c0:	4643      	mov	r3, r8
 80135c2:	463a      	mov	r2, r7
 80135c4:	4628      	mov	r0, r5
 80135c6:	47b0      	blx	r6
 80135c8:	2800      	cmp	r0, #0
 80135ca:	dc06      	bgt.n	80135da <__sflush_r+0xfe>
 80135cc:	89a3      	ldrh	r3, [r4, #12]
 80135ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80135d2:	81a3      	strh	r3, [r4, #12]
 80135d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80135d8:	e78e      	b.n	80134f8 <__sflush_r+0x1c>
 80135da:	4407      	add	r7, r0
 80135dc:	eba8 0800 	sub.w	r8, r8, r0
 80135e0:	e7e9      	b.n	80135b6 <__sflush_r+0xda>
 80135e2:	bf00      	nop
 80135e4:	dfbffffe 	.word	0xdfbffffe

080135e8 <_fflush_r>:
 80135e8:	b538      	push	{r3, r4, r5, lr}
 80135ea:	690b      	ldr	r3, [r1, #16]
 80135ec:	4605      	mov	r5, r0
 80135ee:	460c      	mov	r4, r1
 80135f0:	b913      	cbnz	r3, 80135f8 <_fflush_r+0x10>
 80135f2:	2500      	movs	r5, #0
 80135f4:	4628      	mov	r0, r5
 80135f6:	bd38      	pop	{r3, r4, r5, pc}
 80135f8:	b118      	cbz	r0, 8013602 <_fflush_r+0x1a>
 80135fa:	6a03      	ldr	r3, [r0, #32]
 80135fc:	b90b      	cbnz	r3, 8013602 <_fflush_r+0x1a>
 80135fe:	f7fe f8d3 	bl	80117a8 <__sinit>
 8013602:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013606:	2b00      	cmp	r3, #0
 8013608:	d0f3      	beq.n	80135f2 <_fflush_r+0xa>
 801360a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801360c:	07d0      	lsls	r0, r2, #31
 801360e:	d404      	bmi.n	801361a <_fflush_r+0x32>
 8013610:	0599      	lsls	r1, r3, #22
 8013612:	d402      	bmi.n	801361a <_fflush_r+0x32>
 8013614:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013616:	f7fe fb15 	bl	8011c44 <__retarget_lock_acquire_recursive>
 801361a:	4628      	mov	r0, r5
 801361c:	4621      	mov	r1, r4
 801361e:	f7ff ff5d 	bl	80134dc <__sflush_r>
 8013622:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8013624:	07da      	lsls	r2, r3, #31
 8013626:	4605      	mov	r5, r0
 8013628:	d4e4      	bmi.n	80135f4 <_fflush_r+0xc>
 801362a:	89a3      	ldrh	r3, [r4, #12]
 801362c:	059b      	lsls	r3, r3, #22
 801362e:	d4e1      	bmi.n	80135f4 <_fflush_r+0xc>
 8013630:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013632:	f7fe fb08 	bl	8011c46 <__retarget_lock_release_recursive>
 8013636:	e7dd      	b.n	80135f4 <_fflush_r+0xc>

08013638 <__swhatbuf_r>:
 8013638:	b570      	push	{r4, r5, r6, lr}
 801363a:	460c      	mov	r4, r1
 801363c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013640:	2900      	cmp	r1, #0
 8013642:	b096      	sub	sp, #88	; 0x58
 8013644:	4615      	mov	r5, r2
 8013646:	461e      	mov	r6, r3
 8013648:	da0d      	bge.n	8013666 <__swhatbuf_r+0x2e>
 801364a:	89a3      	ldrh	r3, [r4, #12]
 801364c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8013650:	f04f 0100 	mov.w	r1, #0
 8013654:	bf0c      	ite	eq
 8013656:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 801365a:	2340      	movne	r3, #64	; 0x40
 801365c:	2000      	movs	r0, #0
 801365e:	6031      	str	r1, [r6, #0]
 8013660:	602b      	str	r3, [r5, #0]
 8013662:	b016      	add	sp, #88	; 0x58
 8013664:	bd70      	pop	{r4, r5, r6, pc}
 8013666:	466a      	mov	r2, sp
 8013668:	f000 f848 	bl	80136fc <_fstat_r>
 801366c:	2800      	cmp	r0, #0
 801366e:	dbec      	blt.n	801364a <__swhatbuf_r+0x12>
 8013670:	9901      	ldr	r1, [sp, #4]
 8013672:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8013676:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 801367a:	4259      	negs	r1, r3
 801367c:	4159      	adcs	r1, r3
 801367e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013682:	e7eb      	b.n	801365c <__swhatbuf_r+0x24>

08013684 <__smakebuf_r>:
 8013684:	898b      	ldrh	r3, [r1, #12]
 8013686:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8013688:	079d      	lsls	r5, r3, #30
 801368a:	4606      	mov	r6, r0
 801368c:	460c      	mov	r4, r1
 801368e:	d507      	bpl.n	80136a0 <__smakebuf_r+0x1c>
 8013690:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8013694:	6023      	str	r3, [r4, #0]
 8013696:	6123      	str	r3, [r4, #16]
 8013698:	2301      	movs	r3, #1
 801369a:	6163      	str	r3, [r4, #20]
 801369c:	b002      	add	sp, #8
 801369e:	bd70      	pop	{r4, r5, r6, pc}
 80136a0:	ab01      	add	r3, sp, #4
 80136a2:	466a      	mov	r2, sp
 80136a4:	f7ff ffc8 	bl	8013638 <__swhatbuf_r>
 80136a8:	9900      	ldr	r1, [sp, #0]
 80136aa:	4605      	mov	r5, r0
 80136ac:	4630      	mov	r0, r6
 80136ae:	f7ff f9c9 	bl	8012a44 <_malloc_r>
 80136b2:	b948      	cbnz	r0, 80136c8 <__smakebuf_r+0x44>
 80136b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80136b8:	059a      	lsls	r2, r3, #22
 80136ba:	d4ef      	bmi.n	801369c <__smakebuf_r+0x18>
 80136bc:	f023 0303 	bic.w	r3, r3, #3
 80136c0:	f043 0302 	orr.w	r3, r3, #2
 80136c4:	81a3      	strh	r3, [r4, #12]
 80136c6:	e7e3      	b.n	8013690 <__smakebuf_r+0xc>
 80136c8:	89a3      	ldrh	r3, [r4, #12]
 80136ca:	6020      	str	r0, [r4, #0]
 80136cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80136d0:	81a3      	strh	r3, [r4, #12]
 80136d2:	9b00      	ldr	r3, [sp, #0]
 80136d4:	6163      	str	r3, [r4, #20]
 80136d6:	9b01      	ldr	r3, [sp, #4]
 80136d8:	6120      	str	r0, [r4, #16]
 80136da:	b15b      	cbz	r3, 80136f4 <__smakebuf_r+0x70>
 80136dc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80136e0:	4630      	mov	r0, r6
 80136e2:	f000 f81d 	bl	8013720 <_isatty_r>
 80136e6:	b128      	cbz	r0, 80136f4 <__smakebuf_r+0x70>
 80136e8:	89a3      	ldrh	r3, [r4, #12]
 80136ea:	f023 0303 	bic.w	r3, r3, #3
 80136ee:	f043 0301 	orr.w	r3, r3, #1
 80136f2:	81a3      	strh	r3, [r4, #12]
 80136f4:	89a3      	ldrh	r3, [r4, #12]
 80136f6:	431d      	orrs	r5, r3
 80136f8:	81a5      	strh	r5, [r4, #12]
 80136fa:	e7cf      	b.n	801369c <__smakebuf_r+0x18>

080136fc <_fstat_r>:
 80136fc:	b538      	push	{r3, r4, r5, lr}
 80136fe:	4d07      	ldr	r5, [pc, #28]	; (801371c <_fstat_r+0x20>)
 8013700:	2300      	movs	r3, #0
 8013702:	4604      	mov	r4, r0
 8013704:	4608      	mov	r0, r1
 8013706:	4611      	mov	r1, r2
 8013708:	602b      	str	r3, [r5, #0]
 801370a:	f7ee fc2a 	bl	8001f62 <_fstat>
 801370e:	1c43      	adds	r3, r0, #1
 8013710:	d102      	bne.n	8013718 <_fstat_r+0x1c>
 8013712:	682b      	ldr	r3, [r5, #0]
 8013714:	b103      	cbz	r3, 8013718 <_fstat_r+0x1c>
 8013716:	6023      	str	r3, [r4, #0]
 8013718:	bd38      	pop	{r3, r4, r5, pc}
 801371a:	bf00      	nop
 801371c:	2000359c 	.word	0x2000359c

08013720 <_isatty_r>:
 8013720:	b538      	push	{r3, r4, r5, lr}
 8013722:	4d06      	ldr	r5, [pc, #24]	; (801373c <_isatty_r+0x1c>)
 8013724:	2300      	movs	r3, #0
 8013726:	4604      	mov	r4, r0
 8013728:	4608      	mov	r0, r1
 801372a:	602b      	str	r3, [r5, #0]
 801372c:	f7ee fc29 	bl	8001f82 <_isatty>
 8013730:	1c43      	adds	r3, r0, #1
 8013732:	d102      	bne.n	801373a <_isatty_r+0x1a>
 8013734:	682b      	ldr	r3, [r5, #0]
 8013736:	b103      	cbz	r3, 801373a <_isatty_r+0x1a>
 8013738:	6023      	str	r3, [r4, #0]
 801373a:	bd38      	pop	{r3, r4, r5, pc}
 801373c:	2000359c 	.word	0x2000359c

08013740 <_sbrk_r>:
 8013740:	b538      	push	{r3, r4, r5, lr}
 8013742:	4d06      	ldr	r5, [pc, #24]	; (801375c <_sbrk_r+0x1c>)
 8013744:	2300      	movs	r3, #0
 8013746:	4604      	mov	r4, r0
 8013748:	4608      	mov	r0, r1
 801374a:	602b      	str	r3, [r5, #0]
 801374c:	f7ee fc32 	bl	8001fb4 <_sbrk>
 8013750:	1c43      	adds	r3, r0, #1
 8013752:	d102      	bne.n	801375a <_sbrk_r+0x1a>
 8013754:	682b      	ldr	r3, [r5, #0]
 8013756:	b103      	cbz	r3, 801375a <_sbrk_r+0x1a>
 8013758:	6023      	str	r3, [r4, #0]
 801375a:	bd38      	pop	{r3, r4, r5, pc}
 801375c:	2000359c 	.word	0x2000359c

08013760 <__assert_func>:
 8013760:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8013762:	4614      	mov	r4, r2
 8013764:	461a      	mov	r2, r3
 8013766:	4b09      	ldr	r3, [pc, #36]	; (801378c <__assert_func+0x2c>)
 8013768:	681b      	ldr	r3, [r3, #0]
 801376a:	4605      	mov	r5, r0
 801376c:	68d8      	ldr	r0, [r3, #12]
 801376e:	b14c      	cbz	r4, 8013784 <__assert_func+0x24>
 8013770:	4b07      	ldr	r3, [pc, #28]	; (8013790 <__assert_func+0x30>)
 8013772:	9100      	str	r1, [sp, #0]
 8013774:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8013778:	4906      	ldr	r1, [pc, #24]	; (8013794 <__assert_func+0x34>)
 801377a:	462b      	mov	r3, r5
 801377c:	f000 f844 	bl	8013808 <fiprintf>
 8013780:	f000 f854 	bl	801382c <abort>
 8013784:	4b04      	ldr	r3, [pc, #16]	; (8013798 <__assert_func+0x38>)
 8013786:	461c      	mov	r4, r3
 8013788:	e7f3      	b.n	8013772 <__assert_func+0x12>
 801378a:	bf00      	nop
 801378c:	200001e0 	.word	0x200001e0
 8013790:	08013e17 	.word	0x08013e17
 8013794:	08013e24 	.word	0x08013e24
 8013798:	08013e52 	.word	0x08013e52

0801379c <_calloc_r>:
 801379c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801379e:	fba1 2402 	umull	r2, r4, r1, r2
 80137a2:	b94c      	cbnz	r4, 80137b8 <_calloc_r+0x1c>
 80137a4:	4611      	mov	r1, r2
 80137a6:	9201      	str	r2, [sp, #4]
 80137a8:	f7ff f94c 	bl	8012a44 <_malloc_r>
 80137ac:	9a01      	ldr	r2, [sp, #4]
 80137ae:	4605      	mov	r5, r0
 80137b0:	b930      	cbnz	r0, 80137c0 <_calloc_r+0x24>
 80137b2:	4628      	mov	r0, r5
 80137b4:	b003      	add	sp, #12
 80137b6:	bd30      	pop	{r4, r5, pc}
 80137b8:	220c      	movs	r2, #12
 80137ba:	6002      	str	r2, [r0, #0]
 80137bc:	2500      	movs	r5, #0
 80137be:	e7f8      	b.n	80137b2 <_calloc_r+0x16>
 80137c0:	4621      	mov	r1, r4
 80137c2:	f7fe f96d 	bl	8011aa0 <memset>
 80137c6:	e7f4      	b.n	80137b2 <_calloc_r+0x16>

080137c8 <__ascii_mbtowc>:
 80137c8:	b082      	sub	sp, #8
 80137ca:	b901      	cbnz	r1, 80137ce <__ascii_mbtowc+0x6>
 80137cc:	a901      	add	r1, sp, #4
 80137ce:	b142      	cbz	r2, 80137e2 <__ascii_mbtowc+0x1a>
 80137d0:	b14b      	cbz	r3, 80137e6 <__ascii_mbtowc+0x1e>
 80137d2:	7813      	ldrb	r3, [r2, #0]
 80137d4:	600b      	str	r3, [r1, #0]
 80137d6:	7812      	ldrb	r2, [r2, #0]
 80137d8:	1e10      	subs	r0, r2, #0
 80137da:	bf18      	it	ne
 80137dc:	2001      	movne	r0, #1
 80137de:	b002      	add	sp, #8
 80137e0:	4770      	bx	lr
 80137e2:	4610      	mov	r0, r2
 80137e4:	e7fb      	b.n	80137de <__ascii_mbtowc+0x16>
 80137e6:	f06f 0001 	mvn.w	r0, #1
 80137ea:	e7f8      	b.n	80137de <__ascii_mbtowc+0x16>

080137ec <__ascii_wctomb>:
 80137ec:	b149      	cbz	r1, 8013802 <__ascii_wctomb+0x16>
 80137ee:	2aff      	cmp	r2, #255	; 0xff
 80137f0:	bf85      	ittet	hi
 80137f2:	238a      	movhi	r3, #138	; 0x8a
 80137f4:	6003      	strhi	r3, [r0, #0]
 80137f6:	700a      	strbls	r2, [r1, #0]
 80137f8:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 80137fc:	bf98      	it	ls
 80137fe:	2001      	movls	r0, #1
 8013800:	4770      	bx	lr
 8013802:	4608      	mov	r0, r1
 8013804:	4770      	bx	lr
	...

08013808 <fiprintf>:
 8013808:	b40e      	push	{r1, r2, r3}
 801380a:	b503      	push	{r0, r1, lr}
 801380c:	4601      	mov	r1, r0
 801380e:	ab03      	add	r3, sp, #12
 8013810:	4805      	ldr	r0, [pc, #20]	; (8013828 <fiprintf+0x20>)
 8013812:	f853 2b04 	ldr.w	r2, [r3], #4
 8013816:	6800      	ldr	r0, [r0, #0]
 8013818:	9301      	str	r3, [sp, #4]
 801381a:	f7ff fd45 	bl	80132a8 <_vfiprintf_r>
 801381e:	b002      	add	sp, #8
 8013820:	f85d eb04 	ldr.w	lr, [sp], #4
 8013824:	b003      	add	sp, #12
 8013826:	4770      	bx	lr
 8013828:	200001e0 	.word	0x200001e0

0801382c <abort>:
 801382c:	b508      	push	{r3, lr}
 801382e:	2006      	movs	r0, #6
 8013830:	f000 f82c 	bl	801388c <raise>
 8013834:	2001      	movs	r0, #1
 8013836:	f7ee fb45 	bl	8001ec4 <_exit>

0801383a <_raise_r>:
 801383a:	291f      	cmp	r1, #31
 801383c:	b538      	push	{r3, r4, r5, lr}
 801383e:	4604      	mov	r4, r0
 8013840:	460d      	mov	r5, r1
 8013842:	d904      	bls.n	801384e <_raise_r+0x14>
 8013844:	2316      	movs	r3, #22
 8013846:	6003      	str	r3, [r0, #0]
 8013848:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801384c:	bd38      	pop	{r3, r4, r5, pc}
 801384e:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8013850:	b112      	cbz	r2, 8013858 <_raise_r+0x1e>
 8013852:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8013856:	b94b      	cbnz	r3, 801386c <_raise_r+0x32>
 8013858:	4620      	mov	r0, r4
 801385a:	f000 f831 	bl	80138c0 <_getpid_r>
 801385e:	462a      	mov	r2, r5
 8013860:	4601      	mov	r1, r0
 8013862:	4620      	mov	r0, r4
 8013864:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013868:	f000 b818 	b.w	801389c <_kill_r>
 801386c:	2b01      	cmp	r3, #1
 801386e:	d00a      	beq.n	8013886 <_raise_r+0x4c>
 8013870:	1c59      	adds	r1, r3, #1
 8013872:	d103      	bne.n	801387c <_raise_r+0x42>
 8013874:	2316      	movs	r3, #22
 8013876:	6003      	str	r3, [r0, #0]
 8013878:	2001      	movs	r0, #1
 801387a:	e7e7      	b.n	801384c <_raise_r+0x12>
 801387c:	2400      	movs	r4, #0
 801387e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8013882:	4628      	mov	r0, r5
 8013884:	4798      	blx	r3
 8013886:	2000      	movs	r0, #0
 8013888:	e7e0      	b.n	801384c <_raise_r+0x12>
	...

0801388c <raise>:
 801388c:	4b02      	ldr	r3, [pc, #8]	; (8013898 <raise+0xc>)
 801388e:	4601      	mov	r1, r0
 8013890:	6818      	ldr	r0, [r3, #0]
 8013892:	f7ff bfd2 	b.w	801383a <_raise_r>
 8013896:	bf00      	nop
 8013898:	200001e0 	.word	0x200001e0

0801389c <_kill_r>:
 801389c:	b538      	push	{r3, r4, r5, lr}
 801389e:	4d07      	ldr	r5, [pc, #28]	; (80138bc <_kill_r+0x20>)
 80138a0:	2300      	movs	r3, #0
 80138a2:	4604      	mov	r4, r0
 80138a4:	4608      	mov	r0, r1
 80138a6:	4611      	mov	r1, r2
 80138a8:	602b      	str	r3, [r5, #0]
 80138aa:	f7ee fafb 	bl	8001ea4 <_kill>
 80138ae:	1c43      	adds	r3, r0, #1
 80138b0:	d102      	bne.n	80138b8 <_kill_r+0x1c>
 80138b2:	682b      	ldr	r3, [r5, #0]
 80138b4:	b103      	cbz	r3, 80138b8 <_kill_r+0x1c>
 80138b6:	6023      	str	r3, [r4, #0]
 80138b8:	bd38      	pop	{r3, r4, r5, pc}
 80138ba:	bf00      	nop
 80138bc:	2000359c 	.word	0x2000359c

080138c0 <_getpid_r>:
 80138c0:	f7ee bae8 	b.w	8001e94 <_getpid>

080138c4 <_init>:
 80138c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80138c6:	bf00      	nop
 80138c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80138ca:	bc08      	pop	{r3}
 80138cc:	469e      	mov	lr, r3
 80138ce:	4770      	bx	lr

080138d0 <_fini>:
 80138d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80138d2:	bf00      	nop
 80138d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80138d6:	bc08      	pop	{r3}
 80138d8:	469e      	mov	lr, r3
 80138da:	4770      	bx	lr
