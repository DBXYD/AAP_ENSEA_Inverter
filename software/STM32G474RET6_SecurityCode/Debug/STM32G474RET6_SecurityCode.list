
STM32G474RET6_SecurityCode.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00015274  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008b4  08015458  08015458  00025458  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08015d0c  08015d0c  00030350  2**0
                  CONTENTS
  4 .ARM          00000008  08015d0c  08015d0c  00025d0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08015d14  08015d14  00030350  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08015d14  08015d14  00025d14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08015d18  08015d18  00025d18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000350  20000000  08015d1c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000064a8  20000350  0801606c  00030350  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200067f8  0801606c  000367f8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030350  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00030380  2**0
                  CONTENTS, READONLY
 13 .debug_info   000333c9  00000000  00000000  000303c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00007c15  00000000  00000000  0006378c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002880  00000000  00000000  0006b3a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001efb  00000000  00000000  0006dc28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000326c4  00000000  00000000  0006fb23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000353f7  00000000  00000000  000a21e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00128ded  00000000  00000000  000d75de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000ba5c  00000000  00000000  002003cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000077  00000000  00000000  0020be28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000350 	.word	0x20000350
 80001fc:	00000000 	.word	0x00000000
 8000200:	0801543c 	.word	0x0801543c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000354 	.word	0x20000354
 800021c:	0801543c 	.word	0x0801543c

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_uldivmod>:
 8000bf8:	b953      	cbnz	r3, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfa:	b94a      	cbnz	r2, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bf08      	it	eq
 8000c00:	2800      	cmpeq	r0, #0
 8000c02:	bf1c      	itt	ne
 8000c04:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c08:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c0c:	f000 b970 	b.w	8000ef0 <__aeabi_idiv0>
 8000c10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c18:	f000 f806 	bl	8000c28 <__udivmoddi4>
 8000c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c24:	b004      	add	sp, #16
 8000c26:	4770      	bx	lr

08000c28 <__udivmoddi4>:
 8000c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c2c:	9e08      	ldr	r6, [sp, #32]
 8000c2e:	460d      	mov	r5, r1
 8000c30:	4604      	mov	r4, r0
 8000c32:	460f      	mov	r7, r1
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d14a      	bne.n	8000cce <__udivmoddi4+0xa6>
 8000c38:	428a      	cmp	r2, r1
 8000c3a:	4694      	mov	ip, r2
 8000c3c:	d965      	bls.n	8000d0a <__udivmoddi4+0xe2>
 8000c3e:	fab2 f382 	clz	r3, r2
 8000c42:	b143      	cbz	r3, 8000c56 <__udivmoddi4+0x2e>
 8000c44:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c48:	f1c3 0220 	rsb	r2, r3, #32
 8000c4c:	409f      	lsls	r7, r3
 8000c4e:	fa20 f202 	lsr.w	r2, r0, r2
 8000c52:	4317      	orrs	r7, r2
 8000c54:	409c      	lsls	r4, r3
 8000c56:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c5a:	fa1f f58c 	uxth.w	r5, ip
 8000c5e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c62:	0c22      	lsrs	r2, r4, #16
 8000c64:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c68:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c6c:	fb01 f005 	mul.w	r0, r1, r5
 8000c70:	4290      	cmp	r0, r2
 8000c72:	d90a      	bls.n	8000c8a <__udivmoddi4+0x62>
 8000c74:	eb1c 0202 	adds.w	r2, ip, r2
 8000c78:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000c7c:	f080 811c 	bcs.w	8000eb8 <__udivmoddi4+0x290>
 8000c80:	4290      	cmp	r0, r2
 8000c82:	f240 8119 	bls.w	8000eb8 <__udivmoddi4+0x290>
 8000c86:	3902      	subs	r1, #2
 8000c88:	4462      	add	r2, ip
 8000c8a:	1a12      	subs	r2, r2, r0
 8000c8c:	b2a4      	uxth	r4, r4
 8000c8e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c92:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c96:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c9a:	fb00 f505 	mul.w	r5, r0, r5
 8000c9e:	42a5      	cmp	r5, r4
 8000ca0:	d90a      	bls.n	8000cb8 <__udivmoddi4+0x90>
 8000ca2:	eb1c 0404 	adds.w	r4, ip, r4
 8000ca6:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000caa:	f080 8107 	bcs.w	8000ebc <__udivmoddi4+0x294>
 8000cae:	42a5      	cmp	r5, r4
 8000cb0:	f240 8104 	bls.w	8000ebc <__udivmoddi4+0x294>
 8000cb4:	4464      	add	r4, ip
 8000cb6:	3802      	subs	r0, #2
 8000cb8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000cbc:	1b64      	subs	r4, r4, r5
 8000cbe:	2100      	movs	r1, #0
 8000cc0:	b11e      	cbz	r6, 8000cca <__udivmoddi4+0xa2>
 8000cc2:	40dc      	lsrs	r4, r3
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	e9c6 4300 	strd	r4, r3, [r6]
 8000cca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cce:	428b      	cmp	r3, r1
 8000cd0:	d908      	bls.n	8000ce4 <__udivmoddi4+0xbc>
 8000cd2:	2e00      	cmp	r6, #0
 8000cd4:	f000 80ed 	beq.w	8000eb2 <__udivmoddi4+0x28a>
 8000cd8:	2100      	movs	r1, #0
 8000cda:	e9c6 0500 	strd	r0, r5, [r6]
 8000cde:	4608      	mov	r0, r1
 8000ce0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ce4:	fab3 f183 	clz	r1, r3
 8000ce8:	2900      	cmp	r1, #0
 8000cea:	d149      	bne.n	8000d80 <__udivmoddi4+0x158>
 8000cec:	42ab      	cmp	r3, r5
 8000cee:	d302      	bcc.n	8000cf6 <__udivmoddi4+0xce>
 8000cf0:	4282      	cmp	r2, r0
 8000cf2:	f200 80f8 	bhi.w	8000ee6 <__udivmoddi4+0x2be>
 8000cf6:	1a84      	subs	r4, r0, r2
 8000cf8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cfc:	2001      	movs	r0, #1
 8000cfe:	4617      	mov	r7, r2
 8000d00:	2e00      	cmp	r6, #0
 8000d02:	d0e2      	beq.n	8000cca <__udivmoddi4+0xa2>
 8000d04:	e9c6 4700 	strd	r4, r7, [r6]
 8000d08:	e7df      	b.n	8000cca <__udivmoddi4+0xa2>
 8000d0a:	b902      	cbnz	r2, 8000d0e <__udivmoddi4+0xe6>
 8000d0c:	deff      	udf	#255	; 0xff
 8000d0e:	fab2 f382 	clz	r3, r2
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	f040 8090 	bne.w	8000e38 <__udivmoddi4+0x210>
 8000d18:	1a8a      	subs	r2, r1, r2
 8000d1a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d1e:	fa1f fe8c 	uxth.w	lr, ip
 8000d22:	2101      	movs	r1, #1
 8000d24:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d28:	fb07 2015 	mls	r0, r7, r5, r2
 8000d2c:	0c22      	lsrs	r2, r4, #16
 8000d2e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d32:	fb0e f005 	mul.w	r0, lr, r5
 8000d36:	4290      	cmp	r0, r2
 8000d38:	d908      	bls.n	8000d4c <__udivmoddi4+0x124>
 8000d3a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d3e:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000d42:	d202      	bcs.n	8000d4a <__udivmoddi4+0x122>
 8000d44:	4290      	cmp	r0, r2
 8000d46:	f200 80cb 	bhi.w	8000ee0 <__udivmoddi4+0x2b8>
 8000d4a:	4645      	mov	r5, r8
 8000d4c:	1a12      	subs	r2, r2, r0
 8000d4e:	b2a4      	uxth	r4, r4
 8000d50:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d54:	fb07 2210 	mls	r2, r7, r0, r2
 8000d58:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d5c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d60:	45a6      	cmp	lr, r4
 8000d62:	d908      	bls.n	8000d76 <__udivmoddi4+0x14e>
 8000d64:	eb1c 0404 	adds.w	r4, ip, r4
 8000d68:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000d6c:	d202      	bcs.n	8000d74 <__udivmoddi4+0x14c>
 8000d6e:	45a6      	cmp	lr, r4
 8000d70:	f200 80bb 	bhi.w	8000eea <__udivmoddi4+0x2c2>
 8000d74:	4610      	mov	r0, r2
 8000d76:	eba4 040e 	sub.w	r4, r4, lr
 8000d7a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d7e:	e79f      	b.n	8000cc0 <__udivmoddi4+0x98>
 8000d80:	f1c1 0720 	rsb	r7, r1, #32
 8000d84:	408b      	lsls	r3, r1
 8000d86:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d8a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d8e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d92:	fa20 f307 	lsr.w	r3, r0, r7
 8000d96:	40fd      	lsrs	r5, r7
 8000d98:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d9c:	4323      	orrs	r3, r4
 8000d9e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000da2:	fa1f fe8c 	uxth.w	lr, ip
 8000da6:	fb09 5518 	mls	r5, r9, r8, r5
 8000daa:	0c1c      	lsrs	r4, r3, #16
 8000dac:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000db0:	fb08 f50e 	mul.w	r5, r8, lr
 8000db4:	42a5      	cmp	r5, r4
 8000db6:	fa02 f201 	lsl.w	r2, r2, r1
 8000dba:	fa00 f001 	lsl.w	r0, r0, r1
 8000dbe:	d90b      	bls.n	8000dd8 <__udivmoddi4+0x1b0>
 8000dc0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000dc8:	f080 8088 	bcs.w	8000edc <__udivmoddi4+0x2b4>
 8000dcc:	42a5      	cmp	r5, r4
 8000dce:	f240 8085 	bls.w	8000edc <__udivmoddi4+0x2b4>
 8000dd2:	f1a8 0802 	sub.w	r8, r8, #2
 8000dd6:	4464      	add	r4, ip
 8000dd8:	1b64      	subs	r4, r4, r5
 8000dda:	b29d      	uxth	r5, r3
 8000ddc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000de0:	fb09 4413 	mls	r4, r9, r3, r4
 8000de4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000de8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000dec:	45a6      	cmp	lr, r4
 8000dee:	d908      	bls.n	8000e02 <__udivmoddi4+0x1da>
 8000df0:	eb1c 0404 	adds.w	r4, ip, r4
 8000df4:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000df8:	d26c      	bcs.n	8000ed4 <__udivmoddi4+0x2ac>
 8000dfa:	45a6      	cmp	lr, r4
 8000dfc:	d96a      	bls.n	8000ed4 <__udivmoddi4+0x2ac>
 8000dfe:	3b02      	subs	r3, #2
 8000e00:	4464      	add	r4, ip
 8000e02:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e06:	fba3 9502 	umull	r9, r5, r3, r2
 8000e0a:	eba4 040e 	sub.w	r4, r4, lr
 8000e0e:	42ac      	cmp	r4, r5
 8000e10:	46c8      	mov	r8, r9
 8000e12:	46ae      	mov	lr, r5
 8000e14:	d356      	bcc.n	8000ec4 <__udivmoddi4+0x29c>
 8000e16:	d053      	beq.n	8000ec0 <__udivmoddi4+0x298>
 8000e18:	b156      	cbz	r6, 8000e30 <__udivmoddi4+0x208>
 8000e1a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e1e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e22:	fa04 f707 	lsl.w	r7, r4, r7
 8000e26:	40ca      	lsrs	r2, r1
 8000e28:	40cc      	lsrs	r4, r1
 8000e2a:	4317      	orrs	r7, r2
 8000e2c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e30:	4618      	mov	r0, r3
 8000e32:	2100      	movs	r1, #0
 8000e34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e38:	f1c3 0120 	rsb	r1, r3, #32
 8000e3c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e40:	fa20 f201 	lsr.w	r2, r0, r1
 8000e44:	fa25 f101 	lsr.w	r1, r5, r1
 8000e48:	409d      	lsls	r5, r3
 8000e4a:	432a      	orrs	r2, r5
 8000e4c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e50:	fa1f fe8c 	uxth.w	lr, ip
 8000e54:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e58:	fb07 1510 	mls	r5, r7, r0, r1
 8000e5c:	0c11      	lsrs	r1, r2, #16
 8000e5e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e62:	fb00 f50e 	mul.w	r5, r0, lr
 8000e66:	428d      	cmp	r5, r1
 8000e68:	fa04 f403 	lsl.w	r4, r4, r3
 8000e6c:	d908      	bls.n	8000e80 <__udivmoddi4+0x258>
 8000e6e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e72:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000e76:	d22f      	bcs.n	8000ed8 <__udivmoddi4+0x2b0>
 8000e78:	428d      	cmp	r5, r1
 8000e7a:	d92d      	bls.n	8000ed8 <__udivmoddi4+0x2b0>
 8000e7c:	3802      	subs	r0, #2
 8000e7e:	4461      	add	r1, ip
 8000e80:	1b49      	subs	r1, r1, r5
 8000e82:	b292      	uxth	r2, r2
 8000e84:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e88:	fb07 1115 	mls	r1, r7, r5, r1
 8000e8c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e90:	fb05 f10e 	mul.w	r1, r5, lr
 8000e94:	4291      	cmp	r1, r2
 8000e96:	d908      	bls.n	8000eaa <__udivmoddi4+0x282>
 8000e98:	eb1c 0202 	adds.w	r2, ip, r2
 8000e9c:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000ea0:	d216      	bcs.n	8000ed0 <__udivmoddi4+0x2a8>
 8000ea2:	4291      	cmp	r1, r2
 8000ea4:	d914      	bls.n	8000ed0 <__udivmoddi4+0x2a8>
 8000ea6:	3d02      	subs	r5, #2
 8000ea8:	4462      	add	r2, ip
 8000eaa:	1a52      	subs	r2, r2, r1
 8000eac:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000eb0:	e738      	b.n	8000d24 <__udivmoddi4+0xfc>
 8000eb2:	4631      	mov	r1, r6
 8000eb4:	4630      	mov	r0, r6
 8000eb6:	e708      	b.n	8000cca <__udivmoddi4+0xa2>
 8000eb8:	4639      	mov	r1, r7
 8000eba:	e6e6      	b.n	8000c8a <__udivmoddi4+0x62>
 8000ebc:	4610      	mov	r0, r2
 8000ebe:	e6fb      	b.n	8000cb8 <__udivmoddi4+0x90>
 8000ec0:	4548      	cmp	r0, r9
 8000ec2:	d2a9      	bcs.n	8000e18 <__udivmoddi4+0x1f0>
 8000ec4:	ebb9 0802 	subs.w	r8, r9, r2
 8000ec8:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000ecc:	3b01      	subs	r3, #1
 8000ece:	e7a3      	b.n	8000e18 <__udivmoddi4+0x1f0>
 8000ed0:	4645      	mov	r5, r8
 8000ed2:	e7ea      	b.n	8000eaa <__udivmoddi4+0x282>
 8000ed4:	462b      	mov	r3, r5
 8000ed6:	e794      	b.n	8000e02 <__udivmoddi4+0x1da>
 8000ed8:	4640      	mov	r0, r8
 8000eda:	e7d1      	b.n	8000e80 <__udivmoddi4+0x258>
 8000edc:	46d0      	mov	r8, sl
 8000ede:	e77b      	b.n	8000dd8 <__udivmoddi4+0x1b0>
 8000ee0:	3d02      	subs	r5, #2
 8000ee2:	4462      	add	r2, ip
 8000ee4:	e732      	b.n	8000d4c <__udivmoddi4+0x124>
 8000ee6:	4608      	mov	r0, r1
 8000ee8:	e70a      	b.n	8000d00 <__udivmoddi4+0xd8>
 8000eea:	4464      	add	r4, ip
 8000eec:	3802      	subs	r0, #2
 8000eee:	e742      	b.n	8000d76 <__udivmoddi4+0x14e>

08000ef0 <__aeabi_idiv0>:
 8000ef0:	4770      	bx	lr
 8000ef2:	bf00      	nop

08000ef4 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc3;
ADC_HandleTypeDef hadc4;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b08c      	sub	sp, #48	; 0x30
 8000ef8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000efa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000efe:	2200      	movs	r2, #0
 8000f00:	601a      	str	r2, [r3, #0]
 8000f02:	605a      	str	r2, [r3, #4]
 8000f04:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000f06:	1d3b      	adds	r3, r7, #4
 8000f08:	2220      	movs	r2, #32
 8000f0a:	2100      	movs	r1, #0
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	f012 f9db 	bl	80132c8 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000f12:	4b32      	ldr	r3, [pc, #200]	; (8000fdc <MX_ADC1_Init+0xe8>)
 8000f14:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000f18:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000f1a:	4b30      	ldr	r3, [pc, #192]	; (8000fdc <MX_ADC1_Init+0xe8>)
 8000f1c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000f20:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000f22:	4b2e      	ldr	r3, [pc, #184]	; (8000fdc <MX_ADC1_Init+0xe8>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f28:	4b2c      	ldr	r3, [pc, #176]	; (8000fdc <MX_ADC1_Init+0xe8>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000f2e:	4b2b      	ldr	r3, [pc, #172]	; (8000fdc <MX_ADC1_Init+0xe8>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000f34:	4b29      	ldr	r3, [pc, #164]	; (8000fdc <MX_ADC1_Init+0xe8>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f3a:	4b28      	ldr	r3, [pc, #160]	; (8000fdc <MX_ADC1_Init+0xe8>)
 8000f3c:	2204      	movs	r2, #4
 8000f3e:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000f40:	4b26      	ldr	r3, [pc, #152]	; (8000fdc <MX_ADC1_Init+0xe8>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000f46:	4b25      	ldr	r3, [pc, #148]	; (8000fdc <MX_ADC1_Init+0xe8>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000f4c:	4b23      	ldr	r3, [pc, #140]	; (8000fdc <MX_ADC1_Init+0xe8>)
 8000f4e:	2201      	movs	r2, #1
 8000f50:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f52:	4b22      	ldr	r3, [pc, #136]	; (8000fdc <MX_ADC1_Init+0xe8>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f5a:	4b20      	ldr	r3, [pc, #128]	; (8000fdc <MX_ADC1_Init+0xe8>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f60:	4b1e      	ldr	r3, [pc, #120]	; (8000fdc <MX_ADC1_Init+0xe8>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000f66:	4b1d      	ldr	r3, [pc, #116]	; (8000fdc <MX_ADC1_Init+0xe8>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000f6e:	4b1b      	ldr	r3, [pc, #108]	; (8000fdc <MX_ADC1_Init+0xe8>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000f74:	4b19      	ldr	r3, [pc, #100]	; (8000fdc <MX_ADC1_Init+0xe8>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f7c:	4817      	ldr	r0, [pc, #92]	; (8000fdc <MX_ADC1_Init+0xe8>)
 8000f7e:	f002 ff13 	bl	8003da8 <HAL_ADC_Init>
 8000f82:	4603      	mov	r3, r0
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d001      	beq.n	8000f8c <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000f88:	f000 ff4e 	bl	8001e28 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000f90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f94:	4619      	mov	r1, r3
 8000f96:	4811      	ldr	r0, [pc, #68]	; (8000fdc <MX_ADC1_Init+0xe8>)
 8000f98:	f003 fd2e 	bl	80049f8 <HAL_ADCEx_MultiModeConfigChannel>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d001      	beq.n	8000fa6 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000fa2:	f000 ff41 	bl	8001e28 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000fa6:	4b0e      	ldr	r3, [pc, #56]	; (8000fe0 <MX_ADC1_Init+0xec>)
 8000fa8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000faa:	2306      	movs	r3, #6
 8000fac:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000fb2:	237f      	movs	r3, #127	; 0x7f
 8000fb4:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000fb6:	2304      	movs	r3, #4
 8000fb8:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fbe:	1d3b      	adds	r3, r7, #4
 8000fc0:	4619      	mov	r1, r3
 8000fc2:	4806      	ldr	r0, [pc, #24]	; (8000fdc <MX_ADC1_Init+0xe8>)
 8000fc4:	f003 f8b2 	bl	800412c <HAL_ADC_ConfigChannel>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d001      	beq.n	8000fd2 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8000fce:	f000 ff2b 	bl	8001e28 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000fd2:	bf00      	nop
 8000fd4:	3730      	adds	r7, #48	; 0x30
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	2000036c 	.word	0x2000036c
 8000fe0:	04300002 	.word	0x04300002

08000fe4 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b088      	sub	sp, #32
 8000fe8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000fea:	463b      	mov	r3, r7
 8000fec:	2220      	movs	r2, #32
 8000fee:	2100      	movs	r1, #0
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f012 f969 	bl	80132c8 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000ff6:	4b2b      	ldr	r3, [pc, #172]	; (80010a4 <MX_ADC2_Init+0xc0>)
 8000ff8:	4a2b      	ldr	r2, [pc, #172]	; (80010a8 <MX_ADC2_Init+0xc4>)
 8000ffa:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000ffc:	4b29      	ldr	r3, [pc, #164]	; (80010a4 <MX_ADC2_Init+0xc0>)
 8000ffe:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001002:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001004:	4b27      	ldr	r3, [pc, #156]	; (80010a4 <MX_ADC2_Init+0xc0>)
 8001006:	2200      	movs	r2, #0
 8001008:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800100a:	4b26      	ldr	r3, [pc, #152]	; (80010a4 <MX_ADC2_Init+0xc0>)
 800100c:	2200      	movs	r2, #0
 800100e:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8001010:	4b24      	ldr	r3, [pc, #144]	; (80010a4 <MX_ADC2_Init+0xc0>)
 8001012:	2200      	movs	r2, #0
 8001014:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001016:	4b23      	ldr	r3, [pc, #140]	; (80010a4 <MX_ADC2_Init+0xc0>)
 8001018:	2200      	movs	r2, #0
 800101a:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800101c:	4b21      	ldr	r3, [pc, #132]	; (80010a4 <MX_ADC2_Init+0xc0>)
 800101e:	2204      	movs	r2, #4
 8001020:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8001022:	4b20      	ldr	r3, [pc, #128]	; (80010a4 <MX_ADC2_Init+0xc0>)
 8001024:	2200      	movs	r2, #0
 8001026:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001028:	4b1e      	ldr	r3, [pc, #120]	; (80010a4 <MX_ADC2_Init+0xc0>)
 800102a:	2200      	movs	r2, #0
 800102c:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 800102e:	4b1d      	ldr	r3, [pc, #116]	; (80010a4 <MX_ADC2_Init+0xc0>)
 8001030:	2201      	movs	r2, #1
 8001032:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001034:	4b1b      	ldr	r3, [pc, #108]	; (80010a4 <MX_ADC2_Init+0xc0>)
 8001036:	2200      	movs	r2, #0
 8001038:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800103c:	4b19      	ldr	r3, [pc, #100]	; (80010a4 <MX_ADC2_Init+0xc0>)
 800103e:	2200      	movs	r2, #0
 8001040:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001042:	4b18      	ldr	r3, [pc, #96]	; (80010a4 <MX_ADC2_Init+0xc0>)
 8001044:	2200      	movs	r2, #0
 8001046:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001048:	4b16      	ldr	r3, [pc, #88]	; (80010a4 <MX_ADC2_Init+0xc0>)
 800104a:	2200      	movs	r2, #0
 800104c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001050:	4b14      	ldr	r3, [pc, #80]	; (80010a4 <MX_ADC2_Init+0xc0>)
 8001052:	2200      	movs	r2, #0
 8001054:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8001056:	4b13      	ldr	r3, [pc, #76]	; (80010a4 <MX_ADC2_Init+0xc0>)
 8001058:	2200      	movs	r2, #0
 800105a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800105e:	4811      	ldr	r0, [pc, #68]	; (80010a4 <MX_ADC2_Init+0xc0>)
 8001060:	f002 fea2 	bl	8003da8 <HAL_ADC_Init>
 8001064:	4603      	mov	r3, r0
 8001066:	2b00      	cmp	r3, #0
 8001068:	d001      	beq.n	800106e <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 800106a:	f000 fedd 	bl	8001e28 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800106e:	4b0f      	ldr	r3, [pc, #60]	; (80010ac <MX_ADC2_Init+0xc8>)
 8001070:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001072:	2306      	movs	r3, #6
 8001074:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001076:	2300      	movs	r3, #0
 8001078:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800107a:	237f      	movs	r3, #127	; 0x7f
 800107c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800107e:	2304      	movs	r3, #4
 8001080:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001082:	2300      	movs	r3, #0
 8001084:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001086:	463b      	mov	r3, r7
 8001088:	4619      	mov	r1, r3
 800108a:	4806      	ldr	r0, [pc, #24]	; (80010a4 <MX_ADC2_Init+0xc0>)
 800108c:	f003 f84e 	bl	800412c <HAL_ADC_ConfigChannel>
 8001090:	4603      	mov	r3, r0
 8001092:	2b00      	cmp	r3, #0
 8001094:	d001      	beq.n	800109a <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 8001096:	f000 fec7 	bl	8001e28 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800109a:	bf00      	nop
 800109c:	3720      	adds	r7, #32
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	200003d8 	.word	0x200003d8
 80010a8:	50000100 	.word	0x50000100
 80010ac:	25b00200 	.word	0x25b00200

080010b0 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b08c      	sub	sp, #48	; 0x30
 80010b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80010b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010ba:	2200      	movs	r2, #0
 80010bc:	601a      	str	r2, [r3, #0]
 80010be:	605a      	str	r2, [r3, #4]
 80010c0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80010c2:	1d3b      	adds	r3, r7, #4
 80010c4:	2220      	movs	r2, #32
 80010c6:	2100      	movs	r1, #0
 80010c8:	4618      	mov	r0, r3
 80010ca:	f012 f8fd 	bl	80132c8 <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 80010ce:	4b31      	ldr	r3, [pc, #196]	; (8001194 <MX_ADC3_Init+0xe4>)
 80010d0:	4a31      	ldr	r2, [pc, #196]	; (8001198 <MX_ADC3_Init+0xe8>)
 80010d2:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80010d4:	4b2f      	ldr	r3, [pc, #188]	; (8001194 <MX_ADC3_Init+0xe4>)
 80010d6:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80010da:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80010dc:	4b2d      	ldr	r3, [pc, #180]	; (8001194 <MX_ADC3_Init+0xe4>)
 80010de:	2200      	movs	r2, #0
 80010e0:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80010e2:	4b2c      	ldr	r3, [pc, #176]	; (8001194 <MX_ADC3_Init+0xe4>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	60da      	str	r2, [r3, #12]
  hadc3.Init.GainCompensation = 0;
 80010e8:	4b2a      	ldr	r3, [pc, #168]	; (8001194 <MX_ADC3_Init+0xe4>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	611a      	str	r2, [r3, #16]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80010ee:	4b29      	ldr	r3, [pc, #164]	; (8001194 <MX_ADC3_Init+0xe4>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	615a      	str	r2, [r3, #20]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80010f4:	4b27      	ldr	r3, [pc, #156]	; (8001194 <MX_ADC3_Init+0xe4>)
 80010f6:	2204      	movs	r2, #4
 80010f8:	619a      	str	r2, [r3, #24]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 80010fa:	4b26      	ldr	r3, [pc, #152]	; (8001194 <MX_ADC3_Init+0xe4>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8001100:	4b24      	ldr	r3, [pc, #144]	; (8001194 <MX_ADC3_Init+0xe4>)
 8001102:	2200      	movs	r2, #0
 8001104:	775a      	strb	r2, [r3, #29]
  hadc3.Init.NbrOfConversion = 1;
 8001106:	4b23      	ldr	r3, [pc, #140]	; (8001194 <MX_ADC3_Init+0xe4>)
 8001108:	2201      	movs	r2, #1
 800110a:	621a      	str	r2, [r3, #32]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800110c:	4b21      	ldr	r3, [pc, #132]	; (8001194 <MX_ADC3_Init+0xe4>)
 800110e:	2200      	movs	r2, #0
 8001110:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001114:	4b1f      	ldr	r3, [pc, #124]	; (8001194 <MX_ADC3_Init+0xe4>)
 8001116:	2200      	movs	r2, #0
 8001118:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800111a:	4b1e      	ldr	r3, [pc, #120]	; (8001194 <MX_ADC3_Init+0xe4>)
 800111c:	2200      	movs	r2, #0
 800111e:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8001120:	4b1c      	ldr	r3, [pc, #112]	; (8001194 <MX_ADC3_Init+0xe4>)
 8001122:	2200      	movs	r2, #0
 8001124:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001128:	4b1a      	ldr	r3, [pc, #104]	; (8001194 <MX_ADC3_Init+0xe4>)
 800112a:	2200      	movs	r2, #0
 800112c:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc3.Init.OversamplingMode = DISABLE;
 800112e:	4b19      	ldr	r3, [pc, #100]	; (8001194 <MX_ADC3_Init+0xe4>)
 8001130:	2200      	movs	r2, #0
 8001132:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001136:	4817      	ldr	r0, [pc, #92]	; (8001194 <MX_ADC3_Init+0xe4>)
 8001138:	f002 fe36 	bl	8003da8 <HAL_ADC_Init>
 800113c:	4603      	mov	r3, r0
 800113e:	2b00      	cmp	r3, #0
 8001140:	d001      	beq.n	8001146 <MX_ADC3_Init+0x96>
  {
    Error_Handler();
 8001142:	f000 fe71 	bl	8001e28 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001146:	2300      	movs	r3, #0
 8001148:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 800114a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800114e:	4619      	mov	r1, r3
 8001150:	4810      	ldr	r0, [pc, #64]	; (8001194 <MX_ADC3_Init+0xe4>)
 8001152:	f003 fc51 	bl	80049f8 <HAL_ADCEx_MultiModeConfigChannel>
 8001156:	4603      	mov	r3, r0
 8001158:	2b00      	cmp	r3, #0
 800115a:	d001      	beq.n	8001160 <MX_ADC3_Init+0xb0>
  {
    Error_Handler();
 800115c:	f000 fe64 	bl	8001e28 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001160:	4b0e      	ldr	r3, [pc, #56]	; (800119c <MX_ADC3_Init+0xec>)
 8001162:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001164:	2306      	movs	r3, #6
 8001166:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001168:	2300      	movs	r3, #0
 800116a:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800116c:	237f      	movs	r3, #127	; 0x7f
 800116e:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001170:	2304      	movs	r3, #4
 8001172:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001174:	2300      	movs	r3, #0
 8001176:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001178:	1d3b      	adds	r3, r7, #4
 800117a:	4619      	mov	r1, r3
 800117c:	4805      	ldr	r0, [pc, #20]	; (8001194 <MX_ADC3_Init+0xe4>)
 800117e:	f002 ffd5 	bl	800412c <HAL_ADC_ConfigChannel>
 8001182:	4603      	mov	r3, r0
 8001184:	2b00      	cmp	r3, #0
 8001186:	d001      	beq.n	800118c <MX_ADC3_Init+0xdc>
  {
    Error_Handler();
 8001188:	f000 fe4e 	bl	8001e28 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 800118c:	bf00      	nop
 800118e:	3730      	adds	r7, #48	; 0x30
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}
 8001194:	20000444 	.word	0x20000444
 8001198:	50000400 	.word	0x50000400
 800119c:	04300002 	.word	0x04300002

080011a0 <MX_ADC4_Init>:
/* ADC4 init function */
void MX_ADC4_Init(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b088      	sub	sp, #32
 80011a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC4_Init 0 */

  /* USER CODE END ADC4_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80011a6:	463b      	mov	r3, r7
 80011a8:	2220      	movs	r2, #32
 80011aa:	2100      	movs	r1, #0
 80011ac:	4618      	mov	r0, r3
 80011ae:	f012 f88b 	bl	80132c8 <memset>

  /* USER CODE END ADC4_Init 1 */

  /** Common config
  */
  hadc4.Instance = ADC4;
 80011b2:	4b2b      	ldr	r3, [pc, #172]	; (8001260 <MX_ADC4_Init+0xc0>)
 80011b4:	4a2b      	ldr	r2, [pc, #172]	; (8001264 <MX_ADC4_Init+0xc4>)
 80011b6:	601a      	str	r2, [r3, #0]
  hadc4.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80011b8:	4b29      	ldr	r3, [pc, #164]	; (8001260 <MX_ADC4_Init+0xc0>)
 80011ba:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80011be:	605a      	str	r2, [r3, #4]
  hadc4.Init.Resolution = ADC_RESOLUTION_12B;
 80011c0:	4b27      	ldr	r3, [pc, #156]	; (8001260 <MX_ADC4_Init+0xc0>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	609a      	str	r2, [r3, #8]
  hadc4.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80011c6:	4b26      	ldr	r3, [pc, #152]	; (8001260 <MX_ADC4_Init+0xc0>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	60da      	str	r2, [r3, #12]
  hadc4.Init.GainCompensation = 0;
 80011cc:	4b24      	ldr	r3, [pc, #144]	; (8001260 <MX_ADC4_Init+0xc0>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	611a      	str	r2, [r3, #16]
  hadc4.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80011d2:	4b23      	ldr	r3, [pc, #140]	; (8001260 <MX_ADC4_Init+0xc0>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	615a      	str	r2, [r3, #20]
  hadc4.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80011d8:	4b21      	ldr	r3, [pc, #132]	; (8001260 <MX_ADC4_Init+0xc0>)
 80011da:	2204      	movs	r2, #4
 80011dc:	619a      	str	r2, [r3, #24]
  hadc4.Init.LowPowerAutoWait = DISABLE;
 80011de:	4b20      	ldr	r3, [pc, #128]	; (8001260 <MX_ADC4_Init+0xc0>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	771a      	strb	r2, [r3, #28]
  hadc4.Init.ContinuousConvMode = DISABLE;
 80011e4:	4b1e      	ldr	r3, [pc, #120]	; (8001260 <MX_ADC4_Init+0xc0>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	775a      	strb	r2, [r3, #29]
  hadc4.Init.NbrOfConversion = 1;
 80011ea:	4b1d      	ldr	r3, [pc, #116]	; (8001260 <MX_ADC4_Init+0xc0>)
 80011ec:	2201      	movs	r2, #1
 80011ee:	621a      	str	r2, [r3, #32]
  hadc4.Init.DiscontinuousConvMode = DISABLE;
 80011f0:	4b1b      	ldr	r3, [pc, #108]	; (8001260 <MX_ADC4_Init+0xc0>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc4.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80011f8:	4b19      	ldr	r3, [pc, #100]	; (8001260 <MX_ADC4_Init+0xc0>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc4.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80011fe:	4b18      	ldr	r3, [pc, #96]	; (8001260 <MX_ADC4_Init+0xc0>)
 8001200:	2200      	movs	r2, #0
 8001202:	631a      	str	r2, [r3, #48]	; 0x30
  hadc4.Init.DMAContinuousRequests = DISABLE;
 8001204:	4b16      	ldr	r3, [pc, #88]	; (8001260 <MX_ADC4_Init+0xc0>)
 8001206:	2200      	movs	r2, #0
 8001208:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc4.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800120c:	4b14      	ldr	r3, [pc, #80]	; (8001260 <MX_ADC4_Init+0xc0>)
 800120e:	2200      	movs	r2, #0
 8001210:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc4.Init.OversamplingMode = DISABLE;
 8001212:	4b13      	ldr	r3, [pc, #76]	; (8001260 <MX_ADC4_Init+0xc0>)
 8001214:	2200      	movs	r2, #0
 8001216:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc4) != HAL_OK)
 800121a:	4811      	ldr	r0, [pc, #68]	; (8001260 <MX_ADC4_Init+0xc0>)
 800121c:	f002 fdc4 	bl	8003da8 <HAL_ADC_Init>
 8001220:	4603      	mov	r3, r0
 8001222:	2b00      	cmp	r3, #0
 8001224:	d001      	beq.n	800122a <MX_ADC4_Init+0x8a>
  {
    Error_Handler();
 8001226:	f000 fdff 	bl	8001e28 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800122a:	4b0f      	ldr	r3, [pc, #60]	; (8001268 <MX_ADC4_Init+0xc8>)
 800122c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800122e:	2306      	movs	r3, #6
 8001230:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_47CYCLES_5;
 8001232:	2304      	movs	r3, #4
 8001234:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001236:	237f      	movs	r3, #127	; 0x7f
 8001238:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800123a:	2304      	movs	r3, #4
 800123c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800123e:	2300      	movs	r3, #0
 8001240:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 8001242:	463b      	mov	r3, r7
 8001244:	4619      	mov	r1, r3
 8001246:	4806      	ldr	r0, [pc, #24]	; (8001260 <MX_ADC4_Init+0xc0>)
 8001248:	f002 ff70 	bl	800412c <HAL_ADC_ConfigChannel>
 800124c:	4603      	mov	r3, r0
 800124e:	2b00      	cmp	r3, #0
 8001250:	d001      	beq.n	8001256 <MX_ADC4_Init+0xb6>
  {
    Error_Handler();
 8001252:	f000 fde9 	bl	8001e28 <Error_Handler>
  }
  /* USER CODE BEGIN ADC4_Init 2 */

  /* USER CODE END ADC4_Init 2 */

}
 8001256:	bf00      	nop
 8001258:	3720      	adds	r7, #32
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	200004b0 	.word	0x200004b0
 8001264:	50000500 	.word	0x50000500
 8001268:	10c00010 	.word	0x10c00010

0800126c <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;
static uint32_t HAL_RCC_ADC345_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b0a6      	sub	sp, #152	; 0x98
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001274:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001278:	2200      	movs	r2, #0
 800127a:	601a      	str	r2, [r3, #0]
 800127c:	605a      	str	r2, [r3, #4]
 800127e:	609a      	str	r2, [r3, #8]
 8001280:	60da      	str	r2, [r3, #12]
 8001282:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001284:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001288:	2254      	movs	r2, #84	; 0x54
 800128a:	2100      	movs	r1, #0
 800128c:	4618      	mov	r0, r3
 800128e:	f012 f81b 	bl	80132c8 <memset>
  if(adcHandle->Instance==ADC1)
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800129a:	d141      	bne.n	8001320 <HAL_ADC_MspInit+0xb4>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 800129c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80012a0:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80012a2:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80012a6:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012a8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80012ac:	4618      	mov	r0, r3
 80012ae:	f007 f9fd 	bl	80086ac <HAL_RCCEx_PeriphCLKConfig>
 80012b2:	4603      	mov	r3, r0
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d001      	beq.n	80012bc <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80012b8:	f000 fdb6 	bl	8001e28 <Error_Handler>
    }

    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 80012bc:	4b91      	ldr	r3, [pc, #580]	; (8001504 <HAL_ADC_MspInit+0x298>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	3301      	adds	r3, #1
 80012c2:	4a90      	ldr	r2, [pc, #576]	; (8001504 <HAL_ADC_MspInit+0x298>)
 80012c4:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80012c6:	4b8f      	ldr	r3, [pc, #572]	; (8001504 <HAL_ADC_MspInit+0x298>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	2b01      	cmp	r3, #1
 80012cc:	d10b      	bne.n	80012e6 <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80012ce:	4b8e      	ldr	r3, [pc, #568]	; (8001508 <HAL_ADC_MspInit+0x29c>)
 80012d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012d2:	4a8d      	ldr	r2, [pc, #564]	; (8001508 <HAL_ADC_MspInit+0x29c>)
 80012d4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80012d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012da:	4b8b      	ldr	r3, [pc, #556]	; (8001508 <HAL_ADC_MspInit+0x29c>)
 80012dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012de:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80012e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80012e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012e6:	4b88      	ldr	r3, [pc, #544]	; (8001508 <HAL_ADC_MspInit+0x29c>)
 80012e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012ea:	4a87      	ldr	r2, [pc, #540]	; (8001508 <HAL_ADC_MspInit+0x29c>)
 80012ec:	f043 0301 	orr.w	r3, r3, #1
 80012f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012f2:	4b85      	ldr	r3, [pc, #532]	; (8001508 <HAL_ADC_MspInit+0x29c>)
 80012f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012f6:	f003 0301 	and.w	r3, r3, #1
 80012fa:	62bb      	str	r3, [r7, #40]	; 0x28
 80012fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80012fe:	2303      	movs	r3, #3
 8001300:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001304:	2303      	movs	r3, #3
 8001306:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800130a:	2300      	movs	r3, #0
 800130c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001310:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001314:	4619      	mov	r1, r3
 8001316:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800131a:	f003 fe33 	bl	8004f84 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC4_MspInit 1 */

  /* USER CODE END ADC4_MspInit 1 */
  }
}
 800131e:	e0ed      	b.n	80014fc <HAL_ADC_MspInit+0x290>
  else if(adcHandle->Instance==ADC2)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4a79      	ldr	r2, [pc, #484]	; (800150c <HAL_ADC_MspInit+0x2a0>)
 8001326:	4293      	cmp	r3, r2
 8001328:	d15b      	bne.n	80013e2 <HAL_ADC_MspInit+0x176>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 800132a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800132e:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001330:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001334:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001336:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800133a:	4618      	mov	r0, r3
 800133c:	f007 f9b6 	bl	80086ac <HAL_RCCEx_PeriphCLKConfig>
 8001340:	4603      	mov	r3, r0
 8001342:	2b00      	cmp	r3, #0
 8001344:	d001      	beq.n	800134a <HAL_ADC_MspInit+0xde>
      Error_Handler();
 8001346:	f000 fd6f 	bl	8001e28 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 800134a:	4b6e      	ldr	r3, [pc, #440]	; (8001504 <HAL_ADC_MspInit+0x298>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	3301      	adds	r3, #1
 8001350:	4a6c      	ldr	r2, [pc, #432]	; (8001504 <HAL_ADC_MspInit+0x298>)
 8001352:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001354:	4b6b      	ldr	r3, [pc, #428]	; (8001504 <HAL_ADC_MspInit+0x298>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	2b01      	cmp	r3, #1
 800135a:	d10b      	bne.n	8001374 <HAL_ADC_MspInit+0x108>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800135c:	4b6a      	ldr	r3, [pc, #424]	; (8001508 <HAL_ADC_MspInit+0x29c>)
 800135e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001360:	4a69      	ldr	r2, [pc, #420]	; (8001508 <HAL_ADC_MspInit+0x29c>)
 8001362:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001366:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001368:	4b67      	ldr	r3, [pc, #412]	; (8001508 <HAL_ADC_MspInit+0x29c>)
 800136a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800136c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001370:	627b      	str	r3, [r7, #36]	; 0x24
 8001372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001374:	4b64      	ldr	r3, [pc, #400]	; (8001508 <HAL_ADC_MspInit+0x29c>)
 8001376:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001378:	4a63      	ldr	r2, [pc, #396]	; (8001508 <HAL_ADC_MspInit+0x29c>)
 800137a:	f043 0304 	orr.w	r3, r3, #4
 800137e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001380:	4b61      	ldr	r3, [pc, #388]	; (8001508 <HAL_ADC_MspInit+0x29c>)
 8001382:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001384:	f003 0304 	and.w	r3, r3, #4
 8001388:	623b      	str	r3, [r7, #32]
 800138a:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800138c:	4b5e      	ldr	r3, [pc, #376]	; (8001508 <HAL_ADC_MspInit+0x29c>)
 800138e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001390:	4a5d      	ldr	r2, [pc, #372]	; (8001508 <HAL_ADC_MspInit+0x29c>)
 8001392:	f043 0302 	orr.w	r3, r3, #2
 8001396:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001398:	4b5b      	ldr	r3, [pc, #364]	; (8001508 <HAL_ADC_MspInit+0x29c>)
 800139a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800139c:	f003 0302 	and.w	r3, r3, #2
 80013a0:	61fb      	str	r3, [r7, #28]
 80013a2:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80013a4:	2308      	movs	r3, #8
 80013a6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013aa:	2303      	movs	r3, #3
 80013ac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b0:	2300      	movs	r3, #0
 80013b2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013b6:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80013ba:	4619      	mov	r1, r3
 80013bc:	4854      	ldr	r0, [pc, #336]	; (8001510 <HAL_ADC_MspInit+0x2a4>)
 80013be:	f003 fde1 	bl	8004f84 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80013c2:	2304      	movs	r3, #4
 80013c4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013c8:	2303      	movs	r3, #3
 80013ca:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ce:	2300      	movs	r3, #0
 80013d0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013d4:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80013d8:	4619      	mov	r1, r3
 80013da:	484e      	ldr	r0, [pc, #312]	; (8001514 <HAL_ADC_MspInit+0x2a8>)
 80013dc:	f003 fdd2 	bl	8004f84 <HAL_GPIO_Init>
}
 80013e0:	e08c      	b.n	80014fc <HAL_ADC_MspInit+0x290>
  else if(adcHandle->Instance==ADC3)
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	4a4c      	ldr	r2, [pc, #304]	; (8001518 <HAL_ADC_MspInit+0x2ac>)
 80013e8:	4293      	cmp	r3, r2
 80013ea:	d141      	bne.n	8001470 <HAL_ADC_MspInit+0x204>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 80013ec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80013f0:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 80013f2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80013f6:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013f8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80013fc:	4618      	mov	r0, r3
 80013fe:	f007 f955 	bl	80086ac <HAL_RCCEx_PeriphCLKConfig>
 8001402:	4603      	mov	r3, r0
 8001404:	2b00      	cmp	r3, #0
 8001406:	d001      	beq.n	800140c <HAL_ADC_MspInit+0x1a0>
      Error_Handler();
 8001408:	f000 fd0e 	bl	8001e28 <Error_Handler>
    HAL_RCC_ADC345_CLK_ENABLED++;
 800140c:	4b43      	ldr	r3, [pc, #268]	; (800151c <HAL_ADC_MspInit+0x2b0>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	3301      	adds	r3, #1
 8001412:	4a42      	ldr	r2, [pc, #264]	; (800151c <HAL_ADC_MspInit+0x2b0>)
 8001414:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 8001416:	4b41      	ldr	r3, [pc, #260]	; (800151c <HAL_ADC_MspInit+0x2b0>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	2b01      	cmp	r3, #1
 800141c:	d10b      	bne.n	8001436 <HAL_ADC_MspInit+0x1ca>
      __HAL_RCC_ADC345_CLK_ENABLE();
 800141e:	4b3a      	ldr	r3, [pc, #232]	; (8001508 <HAL_ADC_MspInit+0x29c>)
 8001420:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001422:	4a39      	ldr	r2, [pc, #228]	; (8001508 <HAL_ADC_MspInit+0x29c>)
 8001424:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001428:	64d3      	str	r3, [r2, #76]	; 0x4c
 800142a:	4b37      	ldr	r3, [pc, #220]	; (8001508 <HAL_ADC_MspInit+0x29c>)
 800142c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800142e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001432:	61bb      	str	r3, [r7, #24]
 8001434:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001436:	4b34      	ldr	r3, [pc, #208]	; (8001508 <HAL_ADC_MspInit+0x29c>)
 8001438:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800143a:	4a33      	ldr	r2, [pc, #204]	; (8001508 <HAL_ADC_MspInit+0x29c>)
 800143c:	f043 0302 	orr.w	r3, r3, #2
 8001440:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001442:	4b31      	ldr	r3, [pc, #196]	; (8001508 <HAL_ADC_MspInit+0x29c>)
 8001444:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001446:	f003 0302 	and.w	r3, r3, #2
 800144a:	617b      	str	r3, [r7, #20]
 800144c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_13;
 800144e:	f242 0302 	movw	r3, #8194	; 0x2002
 8001452:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001456:	2303      	movs	r3, #3
 8001458:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800145c:	2300      	movs	r3, #0
 800145e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001462:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001466:	4619      	mov	r1, r3
 8001468:	482a      	ldr	r0, [pc, #168]	; (8001514 <HAL_ADC_MspInit+0x2a8>)
 800146a:	f003 fd8b 	bl	8004f84 <HAL_GPIO_Init>
}
 800146e:	e045      	b.n	80014fc <HAL_ADC_MspInit+0x290>
  else if(adcHandle->Instance==ADC4)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	4a2a      	ldr	r2, [pc, #168]	; (8001520 <HAL_ADC_MspInit+0x2b4>)
 8001476:	4293      	cmp	r3, r2
 8001478:	d140      	bne.n	80014fc <HAL_ADC_MspInit+0x290>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 800147a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800147e:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 8001480:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8001484:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001486:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800148a:	4618      	mov	r0, r3
 800148c:	f007 f90e 	bl	80086ac <HAL_RCCEx_PeriphCLKConfig>
 8001490:	4603      	mov	r3, r0
 8001492:	2b00      	cmp	r3, #0
 8001494:	d001      	beq.n	800149a <HAL_ADC_MspInit+0x22e>
      Error_Handler();
 8001496:	f000 fcc7 	bl	8001e28 <Error_Handler>
    HAL_RCC_ADC345_CLK_ENABLED++;
 800149a:	4b20      	ldr	r3, [pc, #128]	; (800151c <HAL_ADC_MspInit+0x2b0>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	3301      	adds	r3, #1
 80014a0:	4a1e      	ldr	r2, [pc, #120]	; (800151c <HAL_ADC_MspInit+0x2b0>)
 80014a2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 80014a4:	4b1d      	ldr	r3, [pc, #116]	; (800151c <HAL_ADC_MspInit+0x2b0>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	2b01      	cmp	r3, #1
 80014aa:	d10b      	bne.n	80014c4 <HAL_ADC_MspInit+0x258>
      __HAL_RCC_ADC345_CLK_ENABLE();
 80014ac:	4b16      	ldr	r3, [pc, #88]	; (8001508 <HAL_ADC_MspInit+0x29c>)
 80014ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014b0:	4a15      	ldr	r2, [pc, #84]	; (8001508 <HAL_ADC_MspInit+0x29c>)
 80014b2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014b6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014b8:	4b13      	ldr	r3, [pc, #76]	; (8001508 <HAL_ADC_MspInit+0x29c>)
 80014ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014c0:	613b      	str	r3, [r7, #16]
 80014c2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014c4:	4b10      	ldr	r3, [pc, #64]	; (8001508 <HAL_ADC_MspInit+0x29c>)
 80014c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014c8:	4a0f      	ldr	r2, [pc, #60]	; (8001508 <HAL_ADC_MspInit+0x29c>)
 80014ca:	f043 0302 	orr.w	r3, r3, #2
 80014ce:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014d0:	4b0d      	ldr	r3, [pc, #52]	; (8001508 <HAL_ADC_MspInit+0x29c>)
 80014d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014d4:	f003 0302 	and.w	r3, r3, #2
 80014d8:	60fb      	str	r3, [r7, #12]
 80014da:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14;
 80014dc:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 80014e0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014e4:	2303      	movs	r3, #3
 80014e6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ea:	2300      	movs	r3, #0
 80014ec:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014f0:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80014f4:	4619      	mov	r1, r3
 80014f6:	4807      	ldr	r0, [pc, #28]	; (8001514 <HAL_ADC_MspInit+0x2a8>)
 80014f8:	f003 fd44 	bl	8004f84 <HAL_GPIO_Init>
}
 80014fc:	bf00      	nop
 80014fe:	3798      	adds	r7, #152	; 0x98
 8001500:	46bd      	mov	sp, r7
 8001502:	bd80      	pop	{r7, pc}
 8001504:	2000051c 	.word	0x2000051c
 8001508:	40021000 	.word	0x40021000
 800150c:	50000100 	.word	0x50000100
 8001510:	48000800 	.word	0x48000800
 8001514:	48000400 	.word	0x48000400
 8001518:	50000400 	.word	0x50000400
 800151c:	20000520 	.word	0x20000520
 8001520:	50000500 	.word	0x50000500

08001524 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001524:	b5b0      	push	{r4, r5, r7, lr}
 8001526:	b086      	sub	sp, #24
 8001528:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800152a:	4b09      	ldr	r3, [pc, #36]	; (8001550 <MX_FREERTOS_Init+0x2c>)
 800152c:	1d3c      	adds	r4, r7, #4
 800152e:	461d      	mov	r5, r3
 8001530:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001532:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001534:	682b      	ldr	r3, [r5, #0]
 8001536:	6023      	str	r3, [r4, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8001538:	1d3b      	adds	r3, r7, #4
 800153a:	2100      	movs	r1, #0
 800153c:	4618      	mov	r0, r3
 800153e:	f00e f8ed 	bl	800f71c <osThreadCreate>
 8001542:	4603      	mov	r3, r0
 8001544:	4a03      	ldr	r2, [pc, #12]	; (8001554 <MX_FREERTOS_Init+0x30>)
 8001546:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8001548:	bf00      	nop
 800154a:	3718      	adds	r7, #24
 800154c:	46bd      	mov	sp, r7
 800154e:	bdb0      	pop	{r4, r5, r7, pc}
 8001550:	08015464 	.word	0x08015464
 8001554:	20000524 	.word	0x20000524

08001558 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b082      	sub	sp, #8
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001560:	2001      	movs	r0, #1
 8001562:	f00e f902 	bl	800f76a <osDelay>
 8001566:	e7fb      	b.n	8001560 <StartDefaultTask+0x8>

08001568 <MX_CORDIC_Init>:

CORDIC_HandleTypeDef hcordic;

/* CORDIC init function */
void MX_CORDIC_Init(void)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	af00      	add	r7, sp, #0
  /* USER CODE END CORDIC_Init 0 */

  /* USER CODE BEGIN CORDIC_Init 1 */

  /* USER CODE END CORDIC_Init 1 */
  hcordic.Instance = CORDIC;
 800156c:	4b06      	ldr	r3, [pc, #24]	; (8001588 <MX_CORDIC_Init+0x20>)
 800156e:	4a07      	ldr	r2, [pc, #28]	; (800158c <MX_CORDIC_Init+0x24>)
 8001570:	601a      	str	r2, [r3, #0]
  if (HAL_CORDIC_Init(&hcordic) != HAL_OK)
 8001572:	4805      	ldr	r0, [pc, #20]	; (8001588 <MX_CORDIC_Init+0x20>)
 8001574:	f003 fb48 	bl	8004c08 <HAL_CORDIC_Init>
 8001578:	4603      	mov	r3, r0
 800157a:	2b00      	cmp	r3, #0
 800157c:	d001      	beq.n	8001582 <MX_CORDIC_Init+0x1a>
  {
    Error_Handler();
 800157e:	f000 fc53 	bl	8001e28 <Error_Handler>
  }
  /* USER CODE BEGIN CORDIC_Init 2 */

  /* USER CODE END CORDIC_Init 2 */

}
 8001582:	bf00      	nop
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	20000528 	.word	0x20000528
 800158c:	40020c00 	.word	0x40020c00

08001590 <HAL_CORDIC_MspInit>:

void HAL_CORDIC_MspInit(CORDIC_HandleTypeDef* cordicHandle)
{
 8001590:	b480      	push	{r7}
 8001592:	b085      	sub	sp, #20
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]

  if(cordicHandle->Instance==CORDIC)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	4a0a      	ldr	r2, [pc, #40]	; (80015c8 <HAL_CORDIC_MspInit+0x38>)
 800159e:	4293      	cmp	r3, r2
 80015a0:	d10b      	bne.n	80015ba <HAL_CORDIC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CORDIC_MspInit 0 */

  /* USER CODE END CORDIC_MspInit 0 */
    /* CORDIC clock enable */
    __HAL_RCC_CORDIC_CLK_ENABLE();
 80015a2:	4b0a      	ldr	r3, [pc, #40]	; (80015cc <HAL_CORDIC_MspInit+0x3c>)
 80015a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80015a6:	4a09      	ldr	r2, [pc, #36]	; (80015cc <HAL_CORDIC_MspInit+0x3c>)
 80015a8:	f043 0308 	orr.w	r3, r3, #8
 80015ac:	6493      	str	r3, [r2, #72]	; 0x48
 80015ae:	4b07      	ldr	r3, [pc, #28]	; (80015cc <HAL_CORDIC_MspInit+0x3c>)
 80015b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80015b2:	f003 0308 	and.w	r3, r3, #8
 80015b6:	60fb      	str	r3, [r7, #12]
 80015b8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CORDIC_MspInit 1 */

  /* USER CODE END CORDIC_MspInit 1 */
  }
}
 80015ba:	bf00      	nop
 80015bc:	3714      	adds	r7, #20
 80015be:	46bd      	mov	sp, r7
 80015c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c4:	4770      	bx	lr
 80015c6:	bf00      	nop
 80015c8:	40020c00 	.word	0x40020c00
 80015cc:	40021000 	.word	0x40021000

080015d0 <MX_FMAC_Init>:

FMAC_HandleTypeDef hfmac;

/* FMAC init function */
void MX_FMAC_Init(void)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	af00      	add	r7, sp, #0
  /* USER CODE END FMAC_Init 0 */

  /* USER CODE BEGIN FMAC_Init 1 */

  /* USER CODE END FMAC_Init 1 */
  hfmac.Instance = FMAC;
 80015d4:	4b06      	ldr	r3, [pc, #24]	; (80015f0 <MX_FMAC_Init+0x20>)
 80015d6:	4a07      	ldr	r2, [pc, #28]	; (80015f4 <MX_FMAC_Init+0x24>)
 80015d8:	601a      	str	r2, [r3, #0]
  if (HAL_FMAC_Init(&hfmac) != HAL_OK)
 80015da:	4805      	ldr	r0, [pc, #20]	; (80015f0 <MX_FMAC_Init+0x20>)
 80015dc:	f003 fc26 	bl	8004e2c <HAL_FMAC_Init>
 80015e0:	4603      	mov	r3, r0
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d001      	beq.n	80015ea <MX_FMAC_Init+0x1a>
  {
    Error_Handler();
 80015e6:	f000 fc1f 	bl	8001e28 <Error_Handler>
  }
  /* USER CODE BEGIN FMAC_Init 2 */

  /* USER CODE END FMAC_Init 2 */

}
 80015ea:	bf00      	nop
 80015ec:	bd80      	pop	{r7, pc}
 80015ee:	bf00      	nop
 80015f0:	20000550 	.word	0x20000550
 80015f4:	40021400 	.word	0x40021400

080015f8 <HAL_FMAC_MspInit>:

void HAL_FMAC_MspInit(FMAC_HandleTypeDef* fmacHandle)
{
 80015f8:	b480      	push	{r7}
 80015fa:	b085      	sub	sp, #20
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]

  if(fmacHandle->Instance==FMAC)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4a0a      	ldr	r2, [pc, #40]	; (8001630 <HAL_FMAC_MspInit+0x38>)
 8001606:	4293      	cmp	r3, r2
 8001608:	d10b      	bne.n	8001622 <HAL_FMAC_MspInit+0x2a>
  {
  /* USER CODE BEGIN FMAC_MspInit 0 */

  /* USER CODE END FMAC_MspInit 0 */
    /* FMAC clock enable */
    __HAL_RCC_FMAC_CLK_ENABLE();
 800160a:	4b0a      	ldr	r3, [pc, #40]	; (8001634 <HAL_FMAC_MspInit+0x3c>)
 800160c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800160e:	4a09      	ldr	r2, [pc, #36]	; (8001634 <HAL_FMAC_MspInit+0x3c>)
 8001610:	f043 0310 	orr.w	r3, r3, #16
 8001614:	6493      	str	r3, [r2, #72]	; 0x48
 8001616:	4b07      	ldr	r3, [pc, #28]	; (8001634 <HAL_FMAC_MspInit+0x3c>)
 8001618:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800161a:	f003 0310 	and.w	r3, r3, #16
 800161e:	60fb      	str	r3, [r7, #12]
 8001620:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN FMAC_MspInit 1 */

  /* USER CODE END FMAC_MspInit 1 */
  }
}
 8001622:	bf00      	nop
 8001624:	3714      	adds	r7, #20
 8001626:	46bd      	mov	sp, r7
 8001628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162c:	4770      	bx	lr
 800162e:	bf00      	nop
 8001630:	40021400 	.word	0x40021400
 8001634:	40021000 	.word	0x40021000

08001638 <HAL_GPIO_EXTI_Callback>:
extern TaskHandle_t xHandle_Button;
extern QueueHandle_t xExtIQueue;


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b086      	sub	sp, #24
 800163c:	af00      	add	r7, sp, #0
 800163e:	4603      	mov	r3, r0
 8001640:	80fb      	strh	r3, [r7, #6]
	Button_HandleTypeDef button;
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8001642:	2300      	movs	r3, #0
 8001644:	60fb      	str	r3, [r7, #12]
	switch(GPIO_Pin){
 8001646:	88fb      	ldrh	r3, [r7, #6]
 8001648:	2b80      	cmp	r3, #128	; 0x80
 800164a:	d01f      	beq.n	800168c <HAL_GPIO_EXTI_Callback+0x54>
 800164c:	2b80      	cmp	r3, #128	; 0x80
 800164e:	dc28      	bgt.n	80016a2 <HAL_GPIO_EXTI_Callback+0x6a>
 8001650:	2b40      	cmp	r3, #64	; 0x40
 8001652:	d015      	beq.n	8001680 <HAL_GPIO_EXTI_Callback+0x48>
 8001654:	2b40      	cmp	r3, #64	; 0x40
 8001656:	dc24      	bgt.n	80016a2 <HAL_GPIO_EXTI_Callback+0x6a>
 8001658:	2b20      	cmp	r3, #32
 800165a:	d01c      	beq.n	8001696 <HAL_GPIO_EXTI_Callback+0x5e>
 800165c:	2b20      	cmp	r3, #32
 800165e:	dc20      	bgt.n	80016a2 <HAL_GPIO_EXTI_Callback+0x6a>
 8001660:	2b04      	cmp	r3, #4
 8001662:	d002      	beq.n	800166a <HAL_GPIO_EXTI_Callback+0x32>
 8001664:	2b10      	cmp	r3, #16
 8001666:	d005      	beq.n	8001674 <HAL_GPIO_EXTI_Callback+0x3c>
	case ENC_BTN_Pin:	//0x0020 PA5
		button.port = ENC_BTN_GPIO_Port;
		button.pin = ENC_BTN_Pin;
		break;
	default:
		break;
 8001668:	e01b      	b.n	80016a2 <HAL_GPIO_EXTI_Callback+0x6a>
		button.port = USR_BTN_1_GPIO_Port;
 800166a:	4b1c      	ldr	r3, [pc, #112]	; (80016dc <HAL_GPIO_EXTI_Callback+0xa4>)
 800166c:	613b      	str	r3, [r7, #16]
		button.pin = USR_BTN_1_Pin;
 800166e:	2304      	movs	r3, #4
 8001670:	82bb      	strh	r3, [r7, #20]
		break;
 8001672:	e017      	b.n	80016a4 <HAL_GPIO_EXTI_Callback+0x6c>
		button.port = USR_BTN_2_GPIO_Port;
 8001674:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001678:	613b      	str	r3, [r7, #16]
		button.pin = USR_BTN_2_Pin;
 800167a:	2310      	movs	r3, #16
 800167c:	82bb      	strh	r3, [r7, #20]
		break;
 800167e:	e011      	b.n	80016a4 <HAL_GPIO_EXTI_Callback+0x6c>
		button.port = USR_BTN_2_GPIO_Port;
 8001680:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001684:	613b      	str	r3, [r7, #16]
		button.pin = USR_BTN_2_Pin;
 8001686:	2310      	movs	r3, #16
 8001688:	82bb      	strh	r3, [r7, #20]
		break;
 800168a:	e00b      	b.n	80016a4 <HAL_GPIO_EXTI_Callback+0x6c>
		button.port = Soft_NRST_GPIO_Port;
 800168c:	4b14      	ldr	r3, [pc, #80]	; (80016e0 <HAL_GPIO_EXTI_Callback+0xa8>)
 800168e:	613b      	str	r3, [r7, #16]
		button.pin = Soft_NRST_Pin;
 8001690:	2380      	movs	r3, #128	; 0x80
 8001692:	82bb      	strh	r3, [r7, #20]
		break;
 8001694:	e006      	b.n	80016a4 <HAL_GPIO_EXTI_Callback+0x6c>
		button.port = ENC_BTN_GPIO_Port;
 8001696:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800169a:	613b      	str	r3, [r7, #16]
		button.pin = ENC_BTN_Pin;
 800169c:	2320      	movs	r3, #32
 800169e:	82bb      	strh	r3, [r7, #20]
		break;
 80016a0:	e000      	b.n	80016a4 <HAL_GPIO_EXTI_Callback+0x6c>
		break;
 80016a2:	bf00      	nop
	}
//	vTaskNotifyGiveFromISR(xHandle_Button, &higher_priority_task_woken);
    xQueueSendFromISR(xExtIQueue, &button, &xHigherPriorityTaskWoken);
 80016a4:	4b0f      	ldr	r3, [pc, #60]	; (80016e4 <HAL_GPIO_EXTI_Callback+0xac>)
 80016a6:	6818      	ldr	r0, [r3, #0]
 80016a8:	f107 020c 	add.w	r2, r7, #12
 80016ac:	f107 0110 	add.w	r1, r7, #16
 80016b0:	2300      	movs	r3, #0
 80016b2:	f00e fb11 	bl	800fcd8 <xQueueGenericSendFromISR>
    if(xHigherPriorityTaskWoken) portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d00a      	beq.n	80016d2 <HAL_GPIO_EXTI_Callback+0x9a>
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d007      	beq.n	80016d2 <HAL_GPIO_EXTI_Callback+0x9a>
 80016c2:	4b09      	ldr	r3, [pc, #36]	; (80016e8 <HAL_GPIO_EXTI_Callback+0xb0>)
 80016c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80016c8:	601a      	str	r2, [r3, #0]
 80016ca:	f3bf 8f4f 	dsb	sy
 80016ce:	f3bf 8f6f 	isb	sy
}
 80016d2:	bf00      	nop
 80016d4:	3718      	adds	r7, #24
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	bf00      	nop
 80016dc:	48000c00 	.word	0x48000c00
 80016e0:	48000400 	.word	0x48000400
 80016e4:	200005e0 	.word	0x200005e0
 80016e8:	e000ed04 	.word	0xe000ed04

080016ec <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b08c      	sub	sp, #48	; 0x30
 80016f0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016f2:	f107 031c 	add.w	r3, r7, #28
 80016f6:	2200      	movs	r2, #0
 80016f8:	601a      	str	r2, [r3, #0]
 80016fa:	605a      	str	r2, [r3, #4]
 80016fc:	609a      	str	r2, [r3, #8]
 80016fe:	60da      	str	r2, [r3, #12]
 8001700:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001702:	4b70      	ldr	r3, [pc, #448]	; (80018c4 <MX_GPIO_Init+0x1d8>)
 8001704:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001706:	4a6f      	ldr	r2, [pc, #444]	; (80018c4 <MX_GPIO_Init+0x1d8>)
 8001708:	f043 0304 	orr.w	r3, r3, #4
 800170c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800170e:	4b6d      	ldr	r3, [pc, #436]	; (80018c4 <MX_GPIO_Init+0x1d8>)
 8001710:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001712:	f003 0304 	and.w	r3, r3, #4
 8001716:	61bb      	str	r3, [r7, #24]
 8001718:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800171a:	4b6a      	ldr	r3, [pc, #424]	; (80018c4 <MX_GPIO_Init+0x1d8>)
 800171c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800171e:	4a69      	ldr	r2, [pc, #420]	; (80018c4 <MX_GPIO_Init+0x1d8>)
 8001720:	f043 0320 	orr.w	r3, r3, #32
 8001724:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001726:	4b67      	ldr	r3, [pc, #412]	; (80018c4 <MX_GPIO_Init+0x1d8>)
 8001728:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800172a:	f003 0320 	and.w	r3, r3, #32
 800172e:	617b      	str	r3, [r7, #20]
 8001730:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001732:	4b64      	ldr	r3, [pc, #400]	; (80018c4 <MX_GPIO_Init+0x1d8>)
 8001734:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001736:	4a63      	ldr	r2, [pc, #396]	; (80018c4 <MX_GPIO_Init+0x1d8>)
 8001738:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800173c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800173e:	4b61      	ldr	r3, [pc, #388]	; (80018c4 <MX_GPIO_Init+0x1d8>)
 8001740:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001742:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001746:	613b      	str	r3, [r7, #16]
 8001748:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800174a:	4b5e      	ldr	r3, [pc, #376]	; (80018c4 <MX_GPIO_Init+0x1d8>)
 800174c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800174e:	4a5d      	ldr	r2, [pc, #372]	; (80018c4 <MX_GPIO_Init+0x1d8>)
 8001750:	f043 0301 	orr.w	r3, r3, #1
 8001754:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001756:	4b5b      	ldr	r3, [pc, #364]	; (80018c4 <MX_GPIO_Init+0x1d8>)
 8001758:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800175a:	f003 0301 	and.w	r3, r3, #1
 800175e:	60fb      	str	r3, [r7, #12]
 8001760:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001762:	4b58      	ldr	r3, [pc, #352]	; (80018c4 <MX_GPIO_Init+0x1d8>)
 8001764:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001766:	4a57      	ldr	r2, [pc, #348]	; (80018c4 <MX_GPIO_Init+0x1d8>)
 8001768:	f043 0302 	orr.w	r3, r3, #2
 800176c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800176e:	4b55      	ldr	r3, [pc, #340]	; (80018c4 <MX_GPIO_Init+0x1d8>)
 8001770:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001772:	f003 0302 	and.w	r3, r3, #2
 8001776:	60bb      	str	r3, [r7, #8]
 8001778:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800177a:	4b52      	ldr	r3, [pc, #328]	; (80018c4 <MX_GPIO_Init+0x1d8>)
 800177c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800177e:	4a51      	ldr	r2, [pc, #324]	; (80018c4 <MX_GPIO_Init+0x1d8>)
 8001780:	f043 0308 	orr.w	r3, r3, #8
 8001784:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001786:	4b4f      	ldr	r3, [pc, #316]	; (80018c4 <MX_GPIO_Init+0x1d8>)
 8001788:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800178a:	f003 0308 	and.w	r3, r3, #8
 800178e:	607b      	str	r3, [r7, #4]
 8001790:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Pwr_Enable_U_Pin|Pwr_Enable_V_Pin|Pwr_Enable_W_Pin|USR_LED_3_Pin
 8001792:	2200      	movs	r2, #0
 8001794:	f44f 417c 	mov.w	r1, #64512	; 0xfc00
 8001798:	484b      	ldr	r0, [pc, #300]	; (80018c8 <MX_GPIO_Init+0x1dc>)
 800179a:	f003 fd75 	bl	8005288 <HAL_GPIO_WritePin>
                          |USR_LED_2_Pin|USR_LED_1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USR_LED_4_GPIO_Port, USR_LED_4_Pin, GPIO_PIN_RESET);
 800179e:	2200      	movs	r2, #0
 80017a0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80017a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017a8:	f003 fd6e 	bl	8005288 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin */
  GPIO_InitStruct.Pin = Pwr_Enable_U_Pin|Pwr_Enable_V_Pin|Pwr_Enable_W_Pin|USR_LED_3_Pin
 80017ac:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 80017b0:	61fb      	str	r3, [r7, #28]
                          |USR_LED_2_Pin|USR_LED_1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017b2:	2301      	movs	r3, #1
 80017b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b6:	2300      	movs	r3, #0
 80017b8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017ba:	2300      	movs	r3, #0
 80017bc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017be:	f107 031c 	add.w	r3, r7, #28
 80017c2:	4619      	mov	r1, r3
 80017c4:	4840      	ldr	r0, [pc, #256]	; (80018c8 <MX_GPIO_Init+0x1dc>)
 80017c6:	f003 fbdd 	bl	8004f84 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NRST_Pin;
 80017ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80017ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017d0:	2300      	movs	r3, #0
 80017d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d4:	2300      	movs	r3, #0
 80017d6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(NRST_GPIO_Port, &GPIO_InitStruct);
 80017d8:	f107 031c 	add.w	r3, r7, #28
 80017dc:	4619      	mov	r1, r3
 80017de:	483b      	ldr	r0, [pc, #236]	; (80018cc <MX_GPIO_Init+0x1e0>)
 80017e0:	f003 fbd0 	bl	8004f84 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USR_BTN_2_Pin;
 80017e4:	2310      	movs	r3, #16
 80017e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80017e8:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80017ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80017ee:	2301      	movs	r3, #1
 80017f0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USR_BTN_2_GPIO_Port, &GPIO_InitStruct);
 80017f2:	f107 031c 	add.w	r3, r7, #28
 80017f6:	4619      	mov	r1, r3
 80017f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017fc:	f003 fbc2 	bl	8004f84 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENC_BTN_Pin;
 8001800:	2320      	movs	r3, #32
 8001802:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001804:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001808:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800180a:	2300      	movs	r3, #0
 800180c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ENC_BTN_GPIO_Port, &GPIO_InitStruct);
 800180e:	f107 031c 	add.w	r3, r7, #28
 8001812:	4619      	mov	r1, r3
 8001814:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001818:	f003 fbb4 	bl	8004f84 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Nucleo_NRST_Pin;
 800181c:	2301      	movs	r3, #1
 800181e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001820:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001824:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001826:	2300      	movs	r3, #0
 8001828:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Nucleo_NRST_GPIO_Port, &GPIO_InitStruct);
 800182a:	f107 031c 	add.w	r3, r7, #28
 800182e:	4619      	mov	r1, r3
 8001830:	4827      	ldr	r0, [pc, #156]	; (80018d0 <MX_GPIO_Init+0x1e4>)
 8001832:	f003 fba7 	bl	8004f84 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USR_LED_4_Pin;
 8001836:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800183a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800183c:	2301      	movs	r3, #1
 800183e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001840:	2300      	movs	r3, #0
 8001842:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001844:	2300      	movs	r3, #0
 8001846:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USR_LED_4_GPIO_Port, &GPIO_InitStruct);
 8001848:	f107 031c 	add.w	r3, r7, #28
 800184c:	4619      	mov	r1, r3
 800184e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001852:	f003 fb97 	bl	8004f84 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USR_BTN_1_Pin;
 8001856:	2304      	movs	r3, #4
 8001858:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800185a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800185e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001860:	2301      	movs	r3, #1
 8001862:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USR_BTN_1_GPIO_Port, &GPIO_InitStruct);
 8001864:	f107 031c 	add.w	r3, r7, #28
 8001868:	4619      	mov	r1, r3
 800186a:	481a      	ldr	r0, [pc, #104]	; (80018d4 <MX_GPIO_Init+0x1e8>)
 800186c:	f003 fb8a 	bl	8004f84 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = USR_BTN_3_Pin|Soft_NRST_Pin;
 8001870:	23c0      	movs	r3, #192	; 0xc0
 8001872:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001874:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001878:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800187a:	2301      	movs	r3, #1
 800187c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800187e:	f107 031c 	add.w	r3, r7, #28
 8001882:	4619      	mov	r1, r3
 8001884:	4812      	ldr	r0, [pc, #72]	; (80018d0 <MX_GPIO_Init+0x1e4>)
 8001886:	f003 fb7d 	bl	8004f84 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 800188a:	2200      	movs	r2, #0
 800188c:	2105      	movs	r1, #5
 800188e:	2008      	movs	r0, #8
 8001890:	f003 faa4 	bl	8004ddc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001894:	2008      	movs	r0, #8
 8001896:	f003 fabb 	bl	8004e10 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 800189a:	2200      	movs	r2, #0
 800189c:	2105      	movs	r1, #5
 800189e:	200a      	movs	r0, #10
 80018a0:	f003 fa9c 	bl	8004ddc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80018a4:	200a      	movs	r0, #10
 80018a6:	f003 fab3 	bl	8004e10 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 80018aa:	2200      	movs	r2, #0
 80018ac:	2105      	movs	r1, #5
 80018ae:	2017      	movs	r0, #23
 80018b0:	f003 fa94 	bl	8004ddc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80018b4:	2017      	movs	r0, #23
 80018b6:	f003 faab 	bl	8004e10 <HAL_NVIC_EnableIRQ>

}
 80018ba:	bf00      	nop
 80018bc:	3730      	adds	r7, #48	; 0x30
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}
 80018c2:	bf00      	nop
 80018c4:	40021000 	.word	0x40021000
 80018c8:	48000800 	.word	0x48000800
 80018cc:	48001800 	.word	0x48001800
 80018d0:	48000400 	.word	0x48000400
 80018d4:	48000c00 	.word	0x48000c00

080018d8 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80018dc:	4b1b      	ldr	r3, [pc, #108]	; (800194c <MX_I2C2_Init+0x74>)
 80018de:	4a1c      	ldr	r2, [pc, #112]	; (8001950 <MX_I2C2_Init+0x78>)
 80018e0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x30A0A7FB;
 80018e2:	4b1a      	ldr	r3, [pc, #104]	; (800194c <MX_I2C2_Init+0x74>)
 80018e4:	4a1b      	ldr	r2, [pc, #108]	; (8001954 <MX_I2C2_Init+0x7c>)
 80018e6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80018e8:	4b18      	ldr	r3, [pc, #96]	; (800194c <MX_I2C2_Init+0x74>)
 80018ea:	2200      	movs	r2, #0
 80018ec:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80018ee:	4b17      	ldr	r3, [pc, #92]	; (800194c <MX_I2C2_Init+0x74>)
 80018f0:	2201      	movs	r2, #1
 80018f2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80018f4:	4b15      	ldr	r3, [pc, #84]	; (800194c <MX_I2C2_Init+0x74>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80018fa:	4b14      	ldr	r3, [pc, #80]	; (800194c <MX_I2C2_Init+0x74>)
 80018fc:	2200      	movs	r2, #0
 80018fe:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001900:	4b12      	ldr	r3, [pc, #72]	; (800194c <MX_I2C2_Init+0x74>)
 8001902:	2200      	movs	r2, #0
 8001904:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001906:	4b11      	ldr	r3, [pc, #68]	; (800194c <MX_I2C2_Init+0x74>)
 8001908:	2200      	movs	r2, #0
 800190a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800190c:	4b0f      	ldr	r3, [pc, #60]	; (800194c <MX_I2C2_Init+0x74>)
 800190e:	2200      	movs	r2, #0
 8001910:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001912:	480e      	ldr	r0, [pc, #56]	; (800194c <MX_I2C2_Init+0x74>)
 8001914:	f003 fd02 	bl	800531c <HAL_I2C_Init>
 8001918:	4603      	mov	r3, r0
 800191a:	2b00      	cmp	r3, #0
 800191c:	d001      	beq.n	8001922 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800191e:	f000 fa83 	bl	8001e28 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001922:	2100      	movs	r1, #0
 8001924:	4809      	ldr	r0, [pc, #36]	; (800194c <MX_I2C2_Init+0x74>)
 8001926:	f004 faf1 	bl	8005f0c <HAL_I2CEx_ConfigAnalogFilter>
 800192a:	4603      	mov	r3, r0
 800192c:	2b00      	cmp	r3, #0
 800192e:	d001      	beq.n	8001934 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001930:	f000 fa7a 	bl	8001e28 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001934:	2100      	movs	r1, #0
 8001936:	4805      	ldr	r0, [pc, #20]	; (800194c <MX_I2C2_Init+0x74>)
 8001938:	f004 fb33 	bl	8005fa2 <HAL_I2CEx_ConfigDigitalFilter>
 800193c:	4603      	mov	r3, r0
 800193e:	2b00      	cmp	r3, #0
 8001940:	d001      	beq.n	8001946 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001942:	f000 fa71 	bl	8001e28 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001946:	bf00      	nop
 8001948:	bd80      	pop	{r7, pc}
 800194a:	bf00      	nop
 800194c:	20000588 	.word	0x20000588
 8001950:	40005800 	.word	0x40005800
 8001954:	30a0a7fb 	.word	0x30a0a7fb

08001958 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b09e      	sub	sp, #120	; 0x78
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001960:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001964:	2200      	movs	r2, #0
 8001966:	601a      	str	r2, [r3, #0]
 8001968:	605a      	str	r2, [r3, #4]
 800196a:	609a      	str	r2, [r3, #8]
 800196c:	60da      	str	r2, [r3, #12]
 800196e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001970:	f107 0310 	add.w	r3, r7, #16
 8001974:	2254      	movs	r2, #84	; 0x54
 8001976:	2100      	movs	r1, #0
 8001978:	4618      	mov	r0, r3
 800197a:	f011 fca5 	bl	80132c8 <memset>
  if(i2cHandle->Instance==I2C2)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	4a1f      	ldr	r2, [pc, #124]	; (8001a00 <HAL_I2C_MspInit+0xa8>)
 8001984:	4293      	cmp	r3, r2
 8001986:	d137      	bne.n	80019f8 <HAL_I2C_MspInit+0xa0>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001988:	2380      	movs	r3, #128	; 0x80
 800198a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 800198c:	2300      	movs	r3, #0
 800198e:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001990:	f107 0310 	add.w	r3, r7, #16
 8001994:	4618      	mov	r0, r3
 8001996:	f006 fe89 	bl	80086ac <HAL_RCCEx_PeriphCLKConfig>
 800199a:	4603      	mov	r3, r0
 800199c:	2b00      	cmp	r3, #0
 800199e:	d001      	beq.n	80019a4 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80019a0:	f000 fa42 	bl	8001e28 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019a4:	4b17      	ldr	r3, [pc, #92]	; (8001a04 <HAL_I2C_MspInit+0xac>)
 80019a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019a8:	4a16      	ldr	r2, [pc, #88]	; (8001a04 <HAL_I2C_MspInit+0xac>)
 80019aa:	f043 0301 	orr.w	r3, r3, #1
 80019ae:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019b0:	4b14      	ldr	r3, [pc, #80]	; (8001a04 <HAL_I2C_MspInit+0xac>)
 80019b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019b4:	f003 0301 	and.w	r3, r3, #1
 80019b8:	60fb      	str	r3, [r7, #12]
 80019ba:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PA8     ------> I2C2_SDA
    PA9     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80019bc:	f44f 7340 	mov.w	r3, #768	; 0x300
 80019c0:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80019c2:	2312      	movs	r3, #18
 80019c4:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80019c6:	2301      	movs	r3, #1
 80019c8:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019ca:	2300      	movs	r3, #0
 80019cc:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80019ce:	2304      	movs	r3, #4
 80019d0:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019d2:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80019d6:	4619      	mov	r1, r3
 80019d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019dc:	f003 fad2 	bl	8004f84 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80019e0:	4b08      	ldr	r3, [pc, #32]	; (8001a04 <HAL_I2C_MspInit+0xac>)
 80019e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019e4:	4a07      	ldr	r2, [pc, #28]	; (8001a04 <HAL_I2C_MspInit+0xac>)
 80019e6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80019ea:	6593      	str	r3, [r2, #88]	; 0x58
 80019ec:	4b05      	ldr	r3, [pc, #20]	; (8001a04 <HAL_I2C_MspInit+0xac>)
 80019ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019f0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019f4:	60bb      	str	r3, [r7, #8]
 80019f6:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80019f8:	bf00      	nop
 80019fa:	3778      	adds	r7, #120	; 0x78
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bd80      	pop	{r7, pc}
 8001a00:	40005800 	.word	0x40005800
 8001a04:	40021000 	.word	0x40021000

08001a08 <I2C_Scan>:
  /* USER CODE END I2C2_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void I2C_Scan(I2C_HandleTypeDef* i2cHandle){
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b084      	sub	sp, #16
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
	uint8_t i2c_Number = 0;
 8001a10:	2300      	movs	r3, #0
 8001a12:	73fb      	strb	r3, [r7, #15]
	if(i2cHandle->Instance==I2C1) i2c_Number = 2;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	4a23      	ldr	r2, [pc, #140]	; (8001aa8 <I2C_Scan+0xa0>)
 8001a1a:	4293      	cmp	r3, r2
 8001a1c:	d101      	bne.n	8001a22 <I2C_Scan+0x1a>
 8001a1e:	2302      	movs	r3, #2
 8001a20:	73fb      	strb	r3, [r7, #15]
	if(i2cHandle->Instance==I2C2) i2c_Number = 2;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	4a21      	ldr	r2, [pc, #132]	; (8001aac <I2C_Scan+0xa4>)
 8001a28:	4293      	cmp	r3, r2
 8001a2a:	d101      	bne.n	8001a30 <I2C_Scan+0x28>
 8001a2c:	2302      	movs	r3, #2
 8001a2e:	73fb      	strb	r3, [r7, #15]
	if(i2cHandle->Instance==I2C3) i2c_Number = 3;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4a1e      	ldr	r2, [pc, #120]	; (8001ab0 <I2C_Scan+0xa8>)
 8001a36:	4293      	cmp	r3, r2
 8001a38:	d101      	bne.n	8001a3e <I2C_Scan+0x36>
 8001a3a:	2303      	movs	r3, #3
 8001a3c:	73fb      	strb	r3, [r7, #15]
	printf("### Scanning I2C bus number %d ###\r\n", i2c_Number);
 8001a3e:	7bfb      	ldrb	r3, [r7, #15]
 8001a40:	4619      	mov	r1, r3
 8001a42:	481c      	ldr	r0, [pc, #112]	; (8001ab4 <I2C_Scan+0xac>)
 8001a44:	f011 faa6 	bl	8012f94 <iprintf>
	for(uint16_t addr = 0x00; addr < 0x80; addr++){
 8001a48:	2300      	movs	r3, #0
 8001a4a:	81bb      	strh	r3, [r7, #12]
 8001a4c:	e022      	b.n	8001a94 <I2C_Scan+0x8c>
		if(HAL_I2C_IsDeviceReady(i2cHandle, addr<<1, 1, 10) == HAL_OK){
 8001a4e:	89bb      	ldrh	r3, [r7, #12]
 8001a50:	005b      	lsls	r3, r3, #1
 8001a52:	b299      	uxth	r1, r3
 8001a54:	230a      	movs	r3, #10
 8001a56:	2201      	movs	r2, #1
 8001a58:	6878      	ldr	r0, [r7, #4]
 8001a5a:	f003 fefd 	bl	8005858 <HAL_I2C_IsDeviceReady>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d105      	bne.n	8001a70 <I2C_Scan+0x68>
			printf("0x%2x ", addr);
 8001a64:	89bb      	ldrh	r3, [r7, #12]
 8001a66:	4619      	mov	r1, r3
 8001a68:	4813      	ldr	r0, [pc, #76]	; (8001ab8 <I2C_Scan+0xb0>)
 8001a6a:	f011 fa93 	bl	8012f94 <iprintf>
 8001a6e:	e002      	b.n	8001a76 <I2C_Scan+0x6e>
		}
		else{
			printf(" --  ");
 8001a70:	4812      	ldr	r0, [pc, #72]	; (8001abc <I2C_Scan+0xb4>)
 8001a72:	f011 fa8f 	bl	8012f94 <iprintf>
		}
		if((addr+1)%8 == 0){
 8001a76:	89bb      	ldrh	r3, [r7, #12]
 8001a78:	3301      	adds	r3, #1
 8001a7a:	f003 0307 	and.w	r3, r3, #7
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d102      	bne.n	8001a88 <I2C_Scan+0x80>
			printf("\r\n");
 8001a82:	480f      	ldr	r0, [pc, #60]	; (8001ac0 <I2C_Scan+0xb8>)
 8001a84:	f011 faec 	bl	8013060 <puts>
		}
		HAL_Delay(1);
 8001a88:	2001      	movs	r0, #1
 8001a8a:	f001 ff91 	bl	80039b0 <HAL_Delay>
	for(uint16_t addr = 0x00; addr < 0x80; addr++){
 8001a8e:	89bb      	ldrh	r3, [r7, #12]
 8001a90:	3301      	adds	r3, #1
 8001a92:	81bb      	strh	r3, [r7, #12]
 8001a94:	89bb      	ldrh	r3, [r7, #12]
 8001a96:	2b7f      	cmp	r3, #127	; 0x7f
 8001a98:	d9d9      	bls.n	8001a4e <I2C_Scan+0x46>
	}
	printf("\r\n");
 8001a9a:	4809      	ldr	r0, [pc, #36]	; (8001ac0 <I2C_Scan+0xb8>)
 8001a9c:	f011 fae0 	bl	8013060 <puts>
}
 8001aa0:	bf00      	nop
 8001aa2:	3710      	adds	r7, #16
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bd80      	pop	{r7, pc}
 8001aa8:	40005400 	.word	0x40005400
 8001aac:	40005800 	.word	0x40005800
 8001ab0:	40007800 	.word	0x40007800
 8001ab4:	08015478 	.word	0x08015478
 8001ab8:	080154a0 	.word	0x080154a0
 8001abc:	080154a8 	.word	0x080154a8
 8001ac0:	080154b0 	.word	0x080154b0

08001ac4 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b082      	sub	sp, #8
 8001ac8:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001aca:	f001 ff3a 	bl	8003942 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001ace:	f000 f93b 	bl	8001d48 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001ad2:	f7ff fe0b 	bl	80016ec <MX_GPIO_Init>
	MX_ADC1_Init();
 8001ad6:	f7ff fa0d 	bl	8000ef4 <MX_ADC1_Init>
	MX_ADC2_Init();
 8001ada:	f7ff fa83 	bl	8000fe4 <MX_ADC2_Init>
	MX_ADC3_Init();
 8001ade:	f7ff fae7 	bl	80010b0 <MX_ADC3_Init>
	MX_ADC4_Init();
 8001ae2:	f7ff fb5d 	bl	80011a0 <MX_ADC4_Init>
	MX_CORDIC_Init();
 8001ae6:	f7ff fd3f 	bl	8001568 <MX_CORDIC_Init>
	MX_FMAC_Init();
 8001aea:	f7ff fd71 	bl	80015d0 <MX_FMAC_Init>
	MX_I2C2_Init();
 8001aee:	f7ff fef3 	bl	80018d8 <MX_I2C2_Init>
	MX_TIM8_Init();
 8001af2:	f000 fc17 	bl	8002324 <MX_TIM8_Init>
	MX_TIM15_Init();
 8001af6:	f000 fcad 	bl	8002454 <MX_TIM15_Init>
	MX_TIM17_Init();
 8001afa:	f000 fda5 	bl	8002648 <MX_TIM17_Init>
	MX_USART1_UART_Init();
 8001afe:	f000 ff87 	bl	8002a10 <MX_USART1_UART_Init>
	MX_USART3_UART_Init();
 8001b02:	f000 ffd1 	bl	8002aa8 <MX_USART3_UART_Init>
	MX_TIM16_Init();
 8001b06:	f000 fd25 	bl	8002554 <MX_TIM16_Init>
	MX_TIM1_Init();
 8001b0a:	f000 fb45 	bl	8002198 <MX_TIM1_Init>
	MX_USB_Device_Init();
 8001b0e:	f010 f845 	bl	8011b9c <MX_USB_Device_Init>
	MX_TIM3_Init();
 8001b12:	f000 fbaf 	bl	8002274 <MX_TIM3_Init>
	/* USER CODE BEGIN 2 */

	printf(	"*****************************************\r\n"
 8001b16:	485f      	ldr	r0, [pc, #380]	; (8001c94 <main+0x1d0>)
 8001b18:	f011 faa2 	bl	8013060 <puts>
			"* ENSEA INVERTER PROJECT                *\r\n"
			"* Firmware revision 1.1                 *\r\n"
			"* By Nicolas Papazoglou & Alexis Martin *\r\n"
			"*****************************************\r\n");
	I2C_Scan(&hi2c2);
 8001b1c:	485e      	ldr	r0, [pc, #376]	; (8001c98 <main+0x1d4>)
 8001b1e:	f7ff ff73 	bl	8001a08 <I2C_Scan>
	xUartMutex = xSemaphoreCreateMutex();
 8001b22:	2001      	movs	r0, #1
 8001b24:	f00d ffc1 	bl	800faaa <xQueueCreateMutex>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	4a5c      	ldr	r2, [pc, #368]	; (8001c9c <main+0x1d8>)
 8001b2c:	6013      	str	r3, [r2, #0]
	xI2CMutex = xSemaphoreCreateMutex();
 8001b2e:	2001      	movs	r0, #1
 8001b30:	f00d ffbb 	bl	800faaa <xQueueCreateMutex>
 8001b34:	4603      	mov	r3, r0
 8001b36:	4a5a      	ldr	r2, [pc, #360]	; (8001ca0 <main+0x1dc>)
 8001b38:	6013      	str	r3, [r2, #0]
	xTemperatureQueue = xQueueCreate(1, sizeof(float));
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	2104      	movs	r1, #4
 8001b3e:	2001      	movs	r0, #1
 8001b40:	f00d ff44 	bl	800f9cc <xQueueGenericCreate>
 8001b44:	4603      	mov	r3, r0
 8001b46:	4a57      	ldr	r2, [pc, #348]	; (8001ca4 <main+0x1e0>)
 8001b48:	6013      	str	r3, [r2, #0]
	xExtIQueue = xQueueCreate(1, sizeof(Button_HandleTypeDef));
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	2108      	movs	r1, #8
 8001b4e:	2001      	movs	r0, #1
 8001b50:	f00d ff3c 	bl	800f9cc <xQueueGenericCreate>
 8001b54:	4603      	mov	r3, r0
 8001b56:	4a54      	ldr	r2, [pc, #336]	; (8001ca8 <main+0x1e4>)
 8001b58:	6013      	str	r3, [r2, #0]

	if(pdPASS==xTaskCreate(vTask_Break, "Break_Task", STACK_SIZE, (void *) &htim17, Break_Task_Priority, &xHandle_Break)){
 8001b5a:	4b54      	ldr	r3, [pc, #336]	; (8001cac <main+0x1e8>)
 8001b5c:	9301      	str	r3, [sp, #4]
 8001b5e:	2306      	movs	r3, #6
 8001b60:	9300      	str	r3, [sp, #0]
 8001b62:	4b53      	ldr	r3, [pc, #332]	; (8001cb0 <main+0x1ec>)
 8001b64:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b68:	4952      	ldr	r1, [pc, #328]	; (8001cb4 <main+0x1f0>)
 8001b6a:	4853      	ldr	r0, [pc, #332]	; (8001cb8 <main+0x1f4>)
 8001b6c:	f00e fc64 	bl	8010438 <xTaskCreate>
 8001b70:	4603      	mov	r3, r0
 8001b72:	2b01      	cmp	r3, #1
 8001b74:	d103      	bne.n	8001b7e <main+0xba>
		printf("Break_Task successfully created\r\n");
 8001b76:	4851      	ldr	r0, [pc, #324]	; (8001cbc <main+0x1f8>)
 8001b78:	f011 fa72 	bl	8013060 <puts>
 8001b7c:	e002      	b.n	8001b84 <main+0xc0>
	}
	else{
		printf("Break_Task creation error\r\n");
 8001b7e:	4850      	ldr	r0, [pc, #320]	; (8001cc0 <main+0x1fc>)
 8001b80:	f011 fa6e 	bl	8013060 <puts>
	}

	if(pdPASS==xTaskCreate(vTask_Button, "Button_Task", STACK_SIZE, (void *) NULL, Button_Task_Priority, &xHandle_Button)){
 8001b84:	4b4f      	ldr	r3, [pc, #316]	; (8001cc4 <main+0x200>)
 8001b86:	9301      	str	r3, [sp, #4]
 8001b88:	2305      	movs	r3, #5
 8001b8a:	9300      	str	r3, [sp, #0]
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b92:	494d      	ldr	r1, [pc, #308]	; (8001cc8 <main+0x204>)
 8001b94:	484d      	ldr	r0, [pc, #308]	; (8001ccc <main+0x208>)
 8001b96:	f00e fc4f 	bl	8010438 <xTaskCreate>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	2b01      	cmp	r3, #1
 8001b9e:	d103      	bne.n	8001ba8 <main+0xe4>
		printf("Button_Task successfully created\r\n");
 8001ba0:	484b      	ldr	r0, [pc, #300]	; (8001cd0 <main+0x20c>)
 8001ba2:	f011 fa5d 	bl	8013060 <puts>
 8001ba6:	e002      	b.n	8001bae <main+0xea>
	}
	else{
		printf("Button_Task creation error\r\n");
 8001ba8:	484a      	ldr	r0, [pc, #296]	; (8001cd4 <main+0x210>)
 8001baa:	f011 fa59 	bl	8013060 <puts>
	}

	if(pdPASS==xTaskCreate(vTask_LCD, "LCD_Task", STACK_SIZE, (void *) &hi2c2, LCD_Task_Priority, &xHandle_LCD)){
 8001bae:	4b4a      	ldr	r3, [pc, #296]	; (8001cd8 <main+0x214>)
 8001bb0:	9301      	str	r3, [sp, #4]
 8001bb2:	2303      	movs	r3, #3
 8001bb4:	9300      	str	r3, [sp, #0]
 8001bb6:	4b38      	ldr	r3, [pc, #224]	; (8001c98 <main+0x1d4>)
 8001bb8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001bbc:	4947      	ldr	r1, [pc, #284]	; (8001cdc <main+0x218>)
 8001bbe:	4848      	ldr	r0, [pc, #288]	; (8001ce0 <main+0x21c>)
 8001bc0:	f00e fc3a 	bl	8010438 <xTaskCreate>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	2b01      	cmp	r3, #1
 8001bc8:	d103      	bne.n	8001bd2 <main+0x10e>
		printf("LCD_Task successfully created\r\n");
 8001bca:	4846      	ldr	r0, [pc, #280]	; (8001ce4 <main+0x220>)
 8001bcc:	f011 fa48 	bl	8013060 <puts>
 8001bd0:	e002      	b.n	8001bd8 <main+0x114>
	}
	else{
		printf("LCD_Task creation error\r\n");
 8001bd2:	4845      	ldr	r0, [pc, #276]	; (8001ce8 <main+0x224>)
 8001bd4:	f011 fa44 	bl	8013060 <puts>
	}

	if(pdPASS==xTaskCreate(vTask_RotaryEnc, "RotEncorder_Task", STACK_SIZE, (void *) &htim3, RotaryEnc_Task_Priority, &xHandle_Rotary)){
 8001bd8:	4b44      	ldr	r3, [pc, #272]	; (8001cec <main+0x228>)
 8001bda:	9301      	str	r3, [sp, #4]
 8001bdc:	2304      	movs	r3, #4
 8001bde:	9300      	str	r3, [sp, #0]
 8001be0:	4b43      	ldr	r3, [pc, #268]	; (8001cf0 <main+0x22c>)
 8001be2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001be6:	4943      	ldr	r1, [pc, #268]	; (8001cf4 <main+0x230>)
 8001be8:	4843      	ldr	r0, [pc, #268]	; (8001cf8 <main+0x234>)
 8001bea:	f00e fc25 	bl	8010438 <xTaskCreate>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	2b01      	cmp	r3, #1
 8001bf2:	d103      	bne.n	8001bfc <main+0x138>
		printf("RotEncorder_Task successfully created\r\n");
 8001bf4:	4841      	ldr	r0, [pc, #260]	; (8001cfc <main+0x238>)
 8001bf6:	f011 fa33 	bl	8013060 <puts>
 8001bfa:	e002      	b.n	8001c02 <main+0x13e>
	}
	else{
		printf("RotEncorder_Task creation error\r\n");
 8001bfc:	4840      	ldr	r0, [pc, #256]	; (8001d00 <main+0x23c>)
 8001bfe:	f011 fa2f 	bl	8013060 <puts>
	}

	if(pdPASS==xTaskCreate(vTask_LED, "LED_Task", STACK_SIZE, (void *) NULL, LED_Task_Priority, &xHandle_LED)){
 8001c02:	4b40      	ldr	r3, [pc, #256]	; (8001d04 <main+0x240>)
 8001c04:	9301      	str	r3, [sp, #4]
 8001c06:	2301      	movs	r3, #1
 8001c08:	9300      	str	r3, [sp, #0]
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c10:	493d      	ldr	r1, [pc, #244]	; (8001d08 <main+0x244>)
 8001c12:	483e      	ldr	r0, [pc, #248]	; (8001d0c <main+0x248>)
 8001c14:	f00e fc10 	bl	8010438 <xTaskCreate>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	2b01      	cmp	r3, #1
 8001c1c:	d103      	bne.n	8001c26 <main+0x162>
		printf("LED_Task successfully created\r\n");
 8001c1e:	483c      	ldr	r0, [pc, #240]	; (8001d10 <main+0x24c>)
 8001c20:	f011 fa1e 	bl	8013060 <puts>
 8001c24:	e002      	b.n	8001c2c <main+0x168>
	}
	else{
		printf("LED_Task creation error\r\n");
 8001c26:	483b      	ldr	r0, [pc, #236]	; (8001d14 <main+0x250>)
 8001c28:	f011 fa1a 	bl	8013060 <puts>
	}

	if(pdPASS==xTaskCreate(vTask_TCN75A, "TCN75A_Task", STACK_SIZE, (void *) &hi2c2, TCN75A_Task_Priority, &xHandle_TCN75A)){
 8001c2c:	4b3a      	ldr	r3, [pc, #232]	; (8001d18 <main+0x254>)
 8001c2e:	9301      	str	r3, [sp, #4]
 8001c30:	2302      	movs	r3, #2
 8001c32:	9300      	str	r3, [sp, #0]
 8001c34:	4b18      	ldr	r3, [pc, #96]	; (8001c98 <main+0x1d4>)
 8001c36:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c3a:	4938      	ldr	r1, [pc, #224]	; (8001d1c <main+0x258>)
 8001c3c:	4838      	ldr	r0, [pc, #224]	; (8001d20 <main+0x25c>)
 8001c3e:	f00e fbfb 	bl	8010438 <xTaskCreate>
 8001c42:	4603      	mov	r3, r0
 8001c44:	2b01      	cmp	r3, #1
 8001c46:	d103      	bne.n	8001c50 <main+0x18c>
		printf("TCN75A_Task successfully created\r\n");
 8001c48:	4836      	ldr	r0, [pc, #216]	; (8001d24 <main+0x260>)
 8001c4a:	f011 fa09 	bl	8013060 <puts>
 8001c4e:	e002      	b.n	8001c56 <main+0x192>
	}
	else{
		printf("TCN75A_Task creation error\r\n");
 8001c50:	4835      	ldr	r0, [pc, #212]	; (8001d28 <main+0x264>)
 8001c52:	f011 fa05 	bl	8013060 <puts>
	}

	if(pdPASS==xTaskCreate(vTask_Fan, "Fan_Task", STACK_SIZE, (void *) &htim16, Fan_Task_Priority, &xHandle_Fan)){
 8001c56:	4b35      	ldr	r3, [pc, #212]	; (8001d2c <main+0x268>)
 8001c58:	9301      	str	r3, [sp, #4]
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	9300      	str	r3, [sp, #0]
 8001c5e:	4b34      	ldr	r3, [pc, #208]	; (8001d30 <main+0x26c>)
 8001c60:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c64:	4933      	ldr	r1, [pc, #204]	; (8001d34 <main+0x270>)
 8001c66:	4834      	ldr	r0, [pc, #208]	; (8001d38 <main+0x274>)
 8001c68:	f00e fbe6 	bl	8010438 <xTaskCreate>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	2b01      	cmp	r3, #1
 8001c70:	d103      	bne.n	8001c7a <main+0x1b6>
		printf("Fan_Task successfully created\r\n");
 8001c72:	4832      	ldr	r0, [pc, #200]	; (8001d3c <main+0x278>)
 8001c74:	f011 f9f4 	bl	8013060 <puts>
 8001c78:	e002      	b.n	8001c80 <main+0x1bc>
	}
	else{
		printf("Fan_Task creation error\r\n");
 8001c7a:	4831      	ldr	r0, [pc, #196]	; (8001d40 <main+0x27c>)
 8001c7c:	f011 f9f0 	bl	8013060 <puts>
	}



	printf("Starting Scheduler... \r\n");
 8001c80:	4830      	ldr	r0, [pc, #192]	; (8001d44 <main+0x280>)
 8001c82:	f011 f9ed 	bl	8013060 <puts>
	vTaskStartScheduler();
 8001c86:	f00e fd55 	bl	8010734 <vTaskStartScheduler>
	/* USER CODE END 2 */

	/* Call init function for freertos objects (in freertos.c) */
	MX_FREERTOS_Init();
 8001c8a:	f7ff fc4b 	bl	8001524 <MX_FREERTOS_Init>

	/* Start scheduler */
	osKernelStart();
 8001c8e:	f00d fd3e 	bl	800f70e <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */

	while (1)
 8001c92:	e7fe      	b.n	8001c92 <main+0x1ce>
 8001c94:	080154b4 	.word	0x080154b4
 8001c98:	20000588 	.word	0x20000588
 8001c9c:	200005d4 	.word	0x200005d4
 8001ca0:	200005d8 	.word	0x200005d8
 8001ca4:	200005dc 	.word	0x200005dc
 8001ca8:	200005e0 	.word	0x200005e0
 8001cac:	200005e4 	.word	0x200005e4
 8001cb0:	200007cc 	.word	0x200007cc
 8001cb4:	0801558c 	.word	0x0801558c
 8001cb8:	08002e3d 	.word	0x08002e3d
 8001cbc:	08015598 	.word	0x08015598
 8001cc0:	080155bc 	.word	0x080155bc
 8001cc4:	200005e8 	.word	0x200005e8
 8001cc8:	080155d8 	.word	0x080155d8
 8001ccc:	08002fc9 	.word	0x08002fc9
 8001cd0:	080155e4 	.word	0x080155e4
 8001cd4:	08015608 	.word	0x08015608
 8001cd8:	200005ec 	.word	0x200005ec
 8001cdc:	08015624 	.word	0x08015624
 8001ce0:	080032f9 	.word	0x080032f9
 8001ce4:	08015630 	.word	0x08015630
 8001ce8:	08015650 	.word	0x08015650
 8001cec:	200005f0 	.word	0x200005f0
 8001cf0:	2000069c 	.word	0x2000069c
 8001cf4:	0801566c 	.word	0x0801566c
 8001cf8:	0800385d 	.word	0x0800385d
 8001cfc:	08015680 	.word	0x08015680
 8001d00:	080156a8 	.word	0x080156a8
 8001d04:	200005f4 	.word	0x200005f4
 8001d08:	080156cc 	.word	0x080156cc
 8001d0c:	0800376d 	.word	0x0800376d
 8001d10:	080156d8 	.word	0x080156d8
 8001d14:	080156f8 	.word	0x080156f8
 8001d18:	200005f8 	.word	0x200005f8
 8001d1c:	08015714 	.word	0x08015714
 8001d20:	08002c75 	.word	0x08002c75
 8001d24:	08015720 	.word	0x08015720
 8001d28:	08015744 	.word	0x08015744
 8001d2c:	200005fc 	.word	0x200005fc
 8001d30:	20000780 	.word	0x20000780
 8001d34:	08015760 	.word	0x08015760
 8001d38:	08003109 	.word	0x08003109
 8001d3c:	0801576c 	.word	0x0801576c
 8001d40:	0801578c 	.word	0x0801578c
 8001d44:	080157a8 	.word	0x080157a8

08001d48 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b094      	sub	sp, #80	; 0x50
 8001d4c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d4e:	f107 0318 	add.w	r3, r7, #24
 8001d52:	2238      	movs	r2, #56	; 0x38
 8001d54:	2100      	movs	r1, #0
 8001d56:	4618      	mov	r0, r3
 8001d58:	f011 fab6 	bl	80132c8 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d5c:	1d3b      	adds	r3, r7, #4
 8001d5e:	2200      	movs	r2, #0
 8001d60:	601a      	str	r2, [r3, #0]
 8001d62:	605a      	str	r2, [r3, #4]
 8001d64:	609a      	str	r2, [r3, #8]
 8001d66:	60da      	str	r2, [r3, #12]
 8001d68:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001d6a:	2000      	movs	r0, #0
 8001d6c:	f005 fe98 	bl	8007aa0 <HAL_PWREx_ControlVoltageScaling>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8001d70:	2321      	movs	r3, #33	; 0x21
 8001d72:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001d74:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001d78:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d7e:	2302      	movs	r3, #2
 8001d80:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001d82:	2303      	movs	r3, #3
 8001d84:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8001d86:	2304      	movs	r3, #4
 8001d88:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLN = 85;
 8001d8a:	2355      	movs	r3, #85	; 0x55
 8001d8c:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001d8e:	2302      	movs	r3, #2
 8001d90:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 8001d92:	2304      	movs	r3, #4
 8001d94:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001d96:	2302      	movs	r3, #2
 8001d98:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d9a:	f107 0318 	add.w	r3, r7, #24
 8001d9e:	4618      	mov	r0, r3
 8001da0:	f005 ff22 	bl	8007be8 <HAL_RCC_OscConfig>
 8001da4:	4603      	mov	r3, r0
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d001      	beq.n	8001dae <SystemClock_Config+0x66>
	{
		Error_Handler();
 8001daa:	f000 f83d 	bl	8001e28 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001dae:	230f      	movs	r3, #15
 8001db0:	607b      	str	r3, [r7, #4]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001db2:	2303      	movs	r3, #3
 8001db4:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001db6:	2300      	movs	r3, #0
 8001db8:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001dc2:	1d3b      	adds	r3, r7, #4
 8001dc4:	2104      	movs	r1, #4
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	f006 fa26 	bl	8008218 <HAL_RCC_ClockConfig>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d001      	beq.n	8001dd6 <SystemClock_Config+0x8e>
	{
		Error_Handler();
 8001dd2:	f000 f829 	bl	8001e28 <Error_Handler>
	}
}
 8001dd6:	bf00      	nop
 8001dd8:	3750      	adds	r7, #80	; 0x50
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd80      	pop	{r7, pc}
	...

08001de0 <__io_putchar>:

/* USER CODE BEGIN 4 */
PUTCHAR_PROTOTYPE
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b082      	sub	sp, #8
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
	/* Place your implementation of fputc here */
	/* e.g. write a character to the USART1 and Loop until the end of transmission */
	HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 0xFFFF);
 8001de8:	1d39      	adds	r1, r7, #4
 8001dea:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001dee:	2201      	movs	r2, #1
 8001df0:	4803      	ldr	r0, [pc, #12]	; (8001e00 <__io_putchar+0x20>)
 8001df2:	f008 ff43 	bl	800ac7c <HAL_UART_Transmit>

	return ch;
 8001df6:	687b      	ldr	r3, [r7, #4]
}
 8001df8:	4618      	mov	r0, r3
 8001dfa:	3708      	adds	r7, #8
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bd80      	pop	{r7, pc}
 8001e00:	200008a8 	.word	0x200008a8

08001e04 <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b082      	sub	sp, #8
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM6) {
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4a04      	ldr	r2, [pc, #16]	; (8001e24 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d101      	bne.n	8001e1a <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8001e16:	f001 fdad 	bl	8003974 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8001e1a:	bf00      	nop
 8001e1c:	3708      	adds	r7, #8
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}
 8001e22:	bf00      	nop
 8001e24:	40001000 	.word	0x40001000

08001e28 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e2c:	b672      	cpsid	i
}
 8001e2e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001e30:	e7fe      	b.n	8001e30 <Error_Handler+0x8>
	...

08001e34 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b082      	sub	sp, #8
 8001e38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e3a:	4b11      	ldr	r3, [pc, #68]	; (8001e80 <HAL_MspInit+0x4c>)
 8001e3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e3e:	4a10      	ldr	r2, [pc, #64]	; (8001e80 <HAL_MspInit+0x4c>)
 8001e40:	f043 0301 	orr.w	r3, r3, #1
 8001e44:	6613      	str	r3, [r2, #96]	; 0x60
 8001e46:	4b0e      	ldr	r3, [pc, #56]	; (8001e80 <HAL_MspInit+0x4c>)
 8001e48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e4a:	f003 0301 	and.w	r3, r3, #1
 8001e4e:	607b      	str	r3, [r7, #4]
 8001e50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e52:	4b0b      	ldr	r3, [pc, #44]	; (8001e80 <HAL_MspInit+0x4c>)
 8001e54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e56:	4a0a      	ldr	r2, [pc, #40]	; (8001e80 <HAL_MspInit+0x4c>)
 8001e58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e5c:	6593      	str	r3, [r2, #88]	; 0x58
 8001e5e:	4b08      	ldr	r3, [pc, #32]	; (8001e80 <HAL_MspInit+0x4c>)
 8001e60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e66:	603b      	str	r3, [r7, #0]
 8001e68:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	210f      	movs	r1, #15
 8001e6e:	f06f 0001 	mvn.w	r0, #1
 8001e72:	f002 ffb3 	bl	8004ddc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e76:	bf00      	nop
 8001e78:	3708      	adds	r7, #8
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}
 8001e7e:	bf00      	nop
 8001e80:	40021000 	.word	0x40021000

08001e84 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b08c      	sub	sp, #48	; 0x30
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              uwPrescalerValue = 0;
 8001e90:	2300      	movs	r3, #0
 8001e92:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001e94:	4b2c      	ldr	r3, [pc, #176]	; (8001f48 <HAL_InitTick+0xc4>)
 8001e96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e98:	4a2b      	ldr	r2, [pc, #172]	; (8001f48 <HAL_InitTick+0xc4>)
 8001e9a:	f043 0310 	orr.w	r3, r3, #16
 8001e9e:	6593      	str	r3, [r2, #88]	; 0x58
 8001ea0:	4b29      	ldr	r3, [pc, #164]	; (8001f48 <HAL_InitTick+0xc4>)
 8001ea2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ea4:	f003 0310 	and.w	r3, r3, #16
 8001ea8:	60bb      	str	r3, [r7, #8]
 8001eaa:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001eac:	f107 020c 	add.w	r2, r7, #12
 8001eb0:	f107 0310 	add.w	r3, r7, #16
 8001eb4:	4611      	mov	r1, r2
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	f006 fb82 	bl	80085c0 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001ebc:	f006 fb54 	bl	8008568 <HAL_RCC_GetPCLK1Freq>
 8001ec0:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001ec2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ec4:	4a21      	ldr	r2, [pc, #132]	; (8001f4c <HAL_InitTick+0xc8>)
 8001ec6:	fba2 2303 	umull	r2, r3, r2, r3
 8001eca:	0c9b      	lsrs	r3, r3, #18
 8001ecc:	3b01      	subs	r3, #1
 8001ece:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001ed0:	4b1f      	ldr	r3, [pc, #124]	; (8001f50 <HAL_InitTick+0xcc>)
 8001ed2:	4a20      	ldr	r2, [pc, #128]	; (8001f54 <HAL_InitTick+0xd0>)
 8001ed4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001ed6:	4b1e      	ldr	r3, [pc, #120]	; (8001f50 <HAL_InitTick+0xcc>)
 8001ed8:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001edc:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001ede:	4a1c      	ldr	r2, [pc, #112]	; (8001f50 <HAL_InitTick+0xcc>)
 8001ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ee2:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001ee4:	4b1a      	ldr	r3, [pc, #104]	; (8001f50 <HAL_InitTick+0xcc>)
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001eea:	4b19      	ldr	r3, [pc, #100]	; (8001f50 <HAL_InitTick+0xcc>)
 8001eec:	2200      	movs	r2, #0
 8001eee:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 8001ef0:	4817      	ldr	r0, [pc, #92]	; (8001f50 <HAL_InitTick+0xcc>)
 8001ef2:	f006 fe29 	bl	8008b48 <HAL_TIM_Base_Init>
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8001efc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d11b      	bne.n	8001f3c <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001f04:	4812      	ldr	r0, [pc, #72]	; (8001f50 <HAL_InitTick+0xcc>)
 8001f06:	f006 fe77 	bl	8008bf8 <HAL_TIM_Base_Start_IT>
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8001f10:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d111      	bne.n	8001f3c <HAL_InitTick+0xb8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001f18:	2036      	movs	r0, #54	; 0x36
 8001f1a:	f002 ff79 	bl	8004e10 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	2b0f      	cmp	r3, #15
 8001f22:	d808      	bhi.n	8001f36 <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001f24:	2200      	movs	r2, #0
 8001f26:	6879      	ldr	r1, [r7, #4]
 8001f28:	2036      	movs	r0, #54	; 0x36
 8001f2a:	f002 ff57 	bl	8004ddc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001f2e:	4a0a      	ldr	r2, [pc, #40]	; (8001f58 <HAL_InitTick+0xd4>)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6013      	str	r3, [r2, #0]
 8001f34:	e002      	b.n	8001f3c <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 8001f36:	2301      	movs	r3, #1
 8001f38:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001f3c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8001f40:	4618      	mov	r0, r3
 8001f42:	3730      	adds	r7, #48	; 0x30
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bd80      	pop	{r7, pc}
 8001f48:	40021000 	.word	0x40021000
 8001f4c:	431bde83 	.word	0x431bde83
 8001f50:	20000600 	.word	0x20000600
 8001f54:	40001000 	.word	0x40001000
 8001f58:	20000004 	.word	0x20000004

08001f5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001f60:	e7fe      	b.n	8001f60 <NMI_Handler+0x4>

08001f62 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f62:	b480      	push	{r7}
 8001f64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f66:	e7fe      	b.n	8001f66 <HardFault_Handler+0x4>

08001f68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f6c:	e7fe      	b.n	8001f6c <MemManage_Handler+0x4>

08001f6e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f6e:	b480      	push	{r7}
 8001f70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f72:	e7fe      	b.n	8001f72 <BusFault_Handler+0x4>

08001f74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f74:	b480      	push	{r7}
 8001f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f78:	e7fe      	b.n	8001f78 <UsageFault_Handler+0x4>

08001f7a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f7a:	b480      	push	{r7}
 8001f7c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f7e:	bf00      	nop
 8001f80:	46bd      	mov	sp, r7
 8001f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f86:	4770      	bx	lr

08001f88 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USR_BTN_1_Pin);
 8001f8c:	2004      	movs	r0, #4
 8001f8e:	f003 f9ad 	bl	80052ec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8001f92:	bf00      	nop
 8001f94:	bd80      	pop	{r7, pc}

08001f96 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001f96:	b580      	push	{r7, lr}
 8001f98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USR_BTN_2_Pin);
 8001f9a:	2010      	movs	r0, #16
 8001f9c:	f003 f9a6 	bl	80052ec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001fa0:	bf00      	nop
 8001fa2:	bd80      	pop	{r7, pc}

08001fa4 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001fa8:	4802      	ldr	r0, [pc, #8]	; (8001fb4 <USB_LP_IRQHandler+0x10>)
 8001faa:	f004 f94d 	bl	8006248 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8001fae:	bf00      	nop
 8001fb0:	bd80      	pop	{r7, pc}
 8001fb2:	bf00      	nop
 8001fb4:	20006198 	.word	0x20006198

08001fb8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ENC_BTN_Pin);
 8001fbc:	2020      	movs	r0, #32
 8001fbe:	f003 f995 	bl	80052ec <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ENC_BTN_A_Pin);
 8001fc2:	2040      	movs	r0, #64	; 0x40
 8001fc4:	f003 f992 	bl	80052ec <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ENC_BTN_B_Pin);
 8001fc8:	2080      	movs	r0, #128	; 0x80
 8001fca:	f003 f98f 	bl	80052ec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001fce:	bf00      	nop
 8001fd0:	bd80      	pop	{r7, pc}
	...

08001fd4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001fd8:	4802      	ldr	r0, [pc, #8]	; (8001fe4 <TIM6_DAC_IRQHandler+0x10>)
 8001fda:	f007 f98e 	bl	80092fa <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001fde:	bf00      	nop
 8001fe0:	bd80      	pop	{r7, pc}
 8001fe2:	bf00      	nop
 8001fe4:	20000600 	.word	0x20000600

08001fe8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	af00      	add	r7, sp, #0
	return 1;
 8001fec:	2301      	movs	r3, #1
}
 8001fee:	4618      	mov	r0, r3
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff6:	4770      	bx	lr

08001ff8 <_kill>:

int _kill(int pid, int sig)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b082      	sub	sp, #8
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
 8002000:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002002:	f011 fa09 	bl	8013418 <__errno>
 8002006:	4603      	mov	r3, r0
 8002008:	2216      	movs	r2, #22
 800200a:	601a      	str	r2, [r3, #0]
	return -1;
 800200c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002010:	4618      	mov	r0, r3
 8002012:	3708      	adds	r7, #8
 8002014:	46bd      	mov	sp, r7
 8002016:	bd80      	pop	{r7, pc}

08002018 <_exit>:

void _exit (int status)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b082      	sub	sp, #8
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002020:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002024:	6878      	ldr	r0, [r7, #4]
 8002026:	f7ff ffe7 	bl	8001ff8 <_kill>
	while (1) {}		/* Make sure we hang here */
 800202a:	e7fe      	b.n	800202a <_exit+0x12>

0800202c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b086      	sub	sp, #24
 8002030:	af00      	add	r7, sp, #0
 8002032:	60f8      	str	r0, [r7, #12]
 8002034:	60b9      	str	r1, [r7, #8]
 8002036:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002038:	2300      	movs	r3, #0
 800203a:	617b      	str	r3, [r7, #20]
 800203c:	e00a      	b.n	8002054 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800203e:	f3af 8000 	nop.w
 8002042:	4601      	mov	r1, r0
 8002044:	68bb      	ldr	r3, [r7, #8]
 8002046:	1c5a      	adds	r2, r3, #1
 8002048:	60ba      	str	r2, [r7, #8]
 800204a:	b2ca      	uxtb	r2, r1
 800204c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800204e:	697b      	ldr	r3, [r7, #20]
 8002050:	3301      	adds	r3, #1
 8002052:	617b      	str	r3, [r7, #20]
 8002054:	697a      	ldr	r2, [r7, #20]
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	429a      	cmp	r2, r3
 800205a:	dbf0      	blt.n	800203e <_read+0x12>
	}

return len;
 800205c:	687b      	ldr	r3, [r7, #4]
}
 800205e:	4618      	mov	r0, r3
 8002060:	3718      	adds	r7, #24
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}

08002066 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002066:	b580      	push	{r7, lr}
 8002068:	b086      	sub	sp, #24
 800206a:	af00      	add	r7, sp, #0
 800206c:	60f8      	str	r0, [r7, #12]
 800206e:	60b9      	str	r1, [r7, #8]
 8002070:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002072:	2300      	movs	r3, #0
 8002074:	617b      	str	r3, [r7, #20]
 8002076:	e009      	b.n	800208c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002078:	68bb      	ldr	r3, [r7, #8]
 800207a:	1c5a      	adds	r2, r3, #1
 800207c:	60ba      	str	r2, [r7, #8]
 800207e:	781b      	ldrb	r3, [r3, #0]
 8002080:	4618      	mov	r0, r3
 8002082:	f7ff fead 	bl	8001de0 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002086:	697b      	ldr	r3, [r7, #20]
 8002088:	3301      	adds	r3, #1
 800208a:	617b      	str	r3, [r7, #20]
 800208c:	697a      	ldr	r2, [r7, #20]
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	429a      	cmp	r2, r3
 8002092:	dbf1      	blt.n	8002078 <_write+0x12>
	}
	return len;
 8002094:	687b      	ldr	r3, [r7, #4]
}
 8002096:	4618      	mov	r0, r3
 8002098:	3718      	adds	r7, #24
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}

0800209e <_close>:

int _close(int file)
{
 800209e:	b480      	push	{r7}
 80020a0:	b083      	sub	sp, #12
 80020a2:	af00      	add	r7, sp, #0
 80020a4:	6078      	str	r0, [r7, #4]
	return -1;
 80020a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80020aa:	4618      	mov	r0, r3
 80020ac:	370c      	adds	r7, #12
 80020ae:	46bd      	mov	sp, r7
 80020b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b4:	4770      	bx	lr

080020b6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80020b6:	b480      	push	{r7}
 80020b8:	b083      	sub	sp, #12
 80020ba:	af00      	add	r7, sp, #0
 80020bc:	6078      	str	r0, [r7, #4]
 80020be:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80020c6:	605a      	str	r2, [r3, #4]
	return 0;
 80020c8:	2300      	movs	r3, #0
}
 80020ca:	4618      	mov	r0, r3
 80020cc:	370c      	adds	r7, #12
 80020ce:	46bd      	mov	sp, r7
 80020d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d4:	4770      	bx	lr

080020d6 <_isatty>:

int _isatty(int file)
{
 80020d6:	b480      	push	{r7}
 80020d8:	b083      	sub	sp, #12
 80020da:	af00      	add	r7, sp, #0
 80020dc:	6078      	str	r0, [r7, #4]
	return 1;
 80020de:	2301      	movs	r3, #1
}
 80020e0:	4618      	mov	r0, r3
 80020e2:	370c      	adds	r7, #12
 80020e4:	46bd      	mov	sp, r7
 80020e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ea:	4770      	bx	lr

080020ec <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80020ec:	b480      	push	{r7}
 80020ee:	b085      	sub	sp, #20
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	60f8      	str	r0, [r7, #12]
 80020f4:	60b9      	str	r1, [r7, #8]
 80020f6:	607a      	str	r2, [r7, #4]
	return 0;
 80020f8:	2300      	movs	r3, #0
}
 80020fa:	4618      	mov	r0, r3
 80020fc:	3714      	adds	r7, #20
 80020fe:	46bd      	mov	sp, r7
 8002100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002104:	4770      	bx	lr
	...

08002108 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b086      	sub	sp, #24
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002110:	4a14      	ldr	r2, [pc, #80]	; (8002164 <_sbrk+0x5c>)
 8002112:	4b15      	ldr	r3, [pc, #84]	; (8002168 <_sbrk+0x60>)
 8002114:	1ad3      	subs	r3, r2, r3
 8002116:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002118:	697b      	ldr	r3, [r7, #20]
 800211a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800211c:	4b13      	ldr	r3, [pc, #76]	; (800216c <_sbrk+0x64>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d102      	bne.n	800212a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002124:	4b11      	ldr	r3, [pc, #68]	; (800216c <_sbrk+0x64>)
 8002126:	4a12      	ldr	r2, [pc, #72]	; (8002170 <_sbrk+0x68>)
 8002128:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800212a:	4b10      	ldr	r3, [pc, #64]	; (800216c <_sbrk+0x64>)
 800212c:	681a      	ldr	r2, [r3, #0]
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	4413      	add	r3, r2
 8002132:	693a      	ldr	r2, [r7, #16]
 8002134:	429a      	cmp	r2, r3
 8002136:	d207      	bcs.n	8002148 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002138:	f011 f96e 	bl	8013418 <__errno>
 800213c:	4603      	mov	r3, r0
 800213e:	220c      	movs	r2, #12
 8002140:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002142:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002146:	e009      	b.n	800215c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002148:	4b08      	ldr	r3, [pc, #32]	; (800216c <_sbrk+0x64>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800214e:	4b07      	ldr	r3, [pc, #28]	; (800216c <_sbrk+0x64>)
 8002150:	681a      	ldr	r2, [r3, #0]
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	4413      	add	r3, r2
 8002156:	4a05      	ldr	r2, [pc, #20]	; (800216c <_sbrk+0x64>)
 8002158:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800215a:	68fb      	ldr	r3, [r7, #12]
}
 800215c:	4618      	mov	r0, r3
 800215e:	3718      	adds	r7, #24
 8002160:	46bd      	mov	sp, r7
 8002162:	bd80      	pop	{r7, pc}
 8002164:	20020000 	.word	0x20020000
 8002168:	00000400 	.word	0x00000400
 800216c:	2000064c 	.word	0x2000064c
 8002170:	200067f8 	.word	0x200067f8

08002174 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002174:	b480      	push	{r7}
 8002176:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002178:	4b06      	ldr	r3, [pc, #24]	; (8002194 <SystemInit+0x20>)
 800217a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800217e:	4a05      	ldr	r2, [pc, #20]	; (8002194 <SystemInit+0x20>)
 8002180:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002184:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002188:	bf00      	nop
 800218a:	46bd      	mov	sp, r7
 800218c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002190:	4770      	bx	lr
 8002192:	bf00      	nop
 8002194:	e000ed00 	.word	0xe000ed00

08002198 <MX_TIM1_Init>:
TIM_HandleTypeDef htim16;
TIM_HandleTypeDef htim17;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b08c      	sub	sp, #48	; 0x30
 800219c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800219e:	f107 0320 	add.w	r3, r7, #32
 80021a2:	2200      	movs	r2, #0
 80021a4:	601a      	str	r2, [r3, #0]
 80021a6:	605a      	str	r2, [r3, #4]
 80021a8:	609a      	str	r2, [r3, #8]
 80021aa:	60da      	str	r2, [r3, #12]
  TIM_HallSensor_InitTypeDef sConfig = {0};
 80021ac:	f107 0310 	add.w	r3, r7, #16
 80021b0:	2200      	movs	r2, #0
 80021b2:	601a      	str	r2, [r3, #0]
 80021b4:	605a      	str	r2, [r3, #4]
 80021b6:	609a      	str	r2, [r3, #8]
 80021b8:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021ba:	1d3b      	adds	r3, r7, #4
 80021bc:	2200      	movs	r2, #0
 80021be:	601a      	str	r2, [r3, #0]
 80021c0:	605a      	str	r2, [r3, #4]
 80021c2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80021c4:	4b29      	ldr	r3, [pc, #164]	; (800226c <MX_TIM1_Init+0xd4>)
 80021c6:	4a2a      	ldr	r2, [pc, #168]	; (8002270 <MX_TIM1_Init+0xd8>)
 80021c8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80021ca:	4b28      	ldr	r3, [pc, #160]	; (800226c <MX_TIM1_Init+0xd4>)
 80021cc:	2200      	movs	r2, #0
 80021ce:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021d0:	4b26      	ldr	r3, [pc, #152]	; (800226c <MX_TIM1_Init+0xd4>)
 80021d2:	2200      	movs	r2, #0
 80021d4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80021d6:	4b25      	ldr	r3, [pc, #148]	; (800226c <MX_TIM1_Init+0xd4>)
 80021d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80021dc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021de:	4b23      	ldr	r3, [pc, #140]	; (800226c <MX_TIM1_Init+0xd4>)
 80021e0:	2200      	movs	r2, #0
 80021e2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80021e4:	4b21      	ldr	r3, [pc, #132]	; (800226c <MX_TIM1_Init+0xd4>)
 80021e6:	2200      	movs	r2, #0
 80021e8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021ea:	4b20      	ldr	r3, [pc, #128]	; (800226c <MX_TIM1_Init+0xd4>)
 80021ec:	2200      	movs	r2, #0
 80021ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80021f0:	481e      	ldr	r0, [pc, #120]	; (800226c <MX_TIM1_Init+0xd4>)
 80021f2:	f006 fca9 	bl	8008b48 <HAL_TIM_Base_Init>
 80021f6:	4603      	mov	r3, r0
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d001      	beq.n	8002200 <MX_TIM1_Init+0x68>
  {
    Error_Handler();
 80021fc:	f7ff fe14 	bl	8001e28 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002200:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002204:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002206:	f107 0320 	add.w	r3, r7, #32
 800220a:	4619      	mov	r1, r3
 800220c:	4817      	ldr	r0, [pc, #92]	; (800226c <MX_TIM1_Init+0xd4>)
 800220e:	f007 fba3 	bl	8009958 <HAL_TIM_ConfigClockSource>
 8002212:	4603      	mov	r3, r0
 8002214:	2b00      	cmp	r3, #0
 8002216:	d001      	beq.n	800221c <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 8002218:	f7ff fe06 	bl	8001e28 <Error_Handler>
  }
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800221c:	2300      	movs	r3, #0
 800221e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002220:	2300      	movs	r3, #0
 8002222:	617b      	str	r3, [r7, #20]
  sConfig.IC1Filter = 0;
 8002224:	2300      	movs	r3, #0
 8002226:	61bb      	str	r3, [r7, #24]
  sConfig.Commutation_Delay = 0;
 8002228:	2300      	movs	r3, #0
 800222a:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_HallSensor_Init(&htim1, &sConfig) != HAL_OK)
 800222c:	f107 0310 	add.w	r3, r7, #16
 8002230:	4619      	mov	r1, r3
 8002232:	480e      	ldr	r0, [pc, #56]	; (800226c <MX_TIM1_Init+0xd4>)
 8002234:	f008 fa8b 	bl	800a74e <HAL_TIMEx_HallSensor_Init>
 8002238:	4603      	mov	r3, r0
 800223a:	2b00      	cmp	r3, #0
 800223c:	d001      	beq.n	8002242 <MX_TIM1_Init+0xaa>
  {
    Error_Handler();
 800223e:	f7ff fdf3 	bl	8001e28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC2REF;
 8002242:	2350      	movs	r3, #80	; 0x50
 8002244:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002246:	2300      	movs	r3, #0
 8002248:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800224a:	2300      	movs	r3, #0
 800224c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800224e:	1d3b      	adds	r3, r7, #4
 8002250:	4619      	mov	r1, r3
 8002252:	4806      	ldr	r0, [pc, #24]	; (800226c <MX_TIM1_Init+0xd4>)
 8002254:	f008 fb34 	bl	800a8c0 <HAL_TIMEx_MasterConfigSynchronization>
 8002258:	4603      	mov	r3, r0
 800225a:	2b00      	cmp	r3, #0
 800225c:	d001      	beq.n	8002262 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 800225e:	f7ff fde3 	bl	8001e28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002262:	bf00      	nop
 8002264:	3730      	adds	r7, #48	; 0x30
 8002266:	46bd      	mov	sp, r7
 8002268:	bd80      	pop	{r7, pc}
 800226a:	bf00      	nop
 800226c:	20000650 	.word	0x20000650
 8002270:	40012c00 	.word	0x40012c00

08002274 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b08c      	sub	sp, #48	; 0x30
 8002278:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800227a:	f107 030c 	add.w	r3, r7, #12
 800227e:	2224      	movs	r2, #36	; 0x24
 8002280:	2100      	movs	r1, #0
 8002282:	4618      	mov	r0, r3
 8002284:	f011 f820 	bl	80132c8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002288:	463b      	mov	r3, r7
 800228a:	2200      	movs	r2, #0
 800228c:	601a      	str	r2, [r3, #0]
 800228e:	605a      	str	r2, [r3, #4]
 8002290:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002292:	4b21      	ldr	r3, [pc, #132]	; (8002318 <MX_TIM3_Init+0xa4>)
 8002294:	4a21      	ldr	r2, [pc, #132]	; (800231c <MX_TIM3_Init+0xa8>)
 8002296:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002298:	4b1f      	ldr	r3, [pc, #124]	; (8002318 <MX_TIM3_Init+0xa4>)
 800229a:	2200      	movs	r2, #0
 800229c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800229e:	4b1e      	ldr	r3, [pc, #120]	; (8002318 <MX_TIM3_Init+0xa4>)
 80022a0:	2200      	movs	r2, #0
 80022a2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80022a4:	4b1c      	ldr	r3, [pc, #112]	; (8002318 <MX_TIM3_Init+0xa4>)
 80022a6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80022aa:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022ac:	4b1a      	ldr	r3, [pc, #104]	; (8002318 <MX_TIM3_Init+0xa4>)
 80022ae:	2200      	movs	r2, #0
 80022b0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022b2:	4b19      	ldr	r3, [pc, #100]	; (8002318 <MX_TIM3_Init+0xa4>)
 80022b4:	2200      	movs	r2, #0
 80022b6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_X1_TI1;
 80022b8:	4b19      	ldr	r3, [pc, #100]	; (8002320 <MX_TIM3_Init+0xac>)
 80022ba:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80022bc:	2300      	movs	r3, #0
 80022be:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80022c0:	2301      	movs	r3, #1
 80022c2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80022c4:	2300      	movs	r3, #0
 80022c6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80022c8:	2300      	movs	r3, #0
 80022ca:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80022cc:	2300      	movs	r3, #0
 80022ce:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80022d0:	2301      	movs	r3, #1
 80022d2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80022d4:	2300      	movs	r3, #0
 80022d6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80022d8:	2300      	movs	r3, #0
 80022da:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80022dc:	f107 030c 	add.w	r3, r7, #12
 80022e0:	4619      	mov	r1, r3
 80022e2:	480d      	ldr	r0, [pc, #52]	; (8002318 <MX_TIM3_Init+0xa4>)
 80022e4:	f006 fed5 	bl	8009092 <HAL_TIM_Encoder_Init>
 80022e8:	4603      	mov	r3, r0
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d001      	beq.n	80022f2 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 80022ee:	f7ff fd9b 	bl	8001e28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80022f2:	2300      	movs	r3, #0
 80022f4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022f6:	2300      	movs	r3, #0
 80022f8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80022fa:	463b      	mov	r3, r7
 80022fc:	4619      	mov	r1, r3
 80022fe:	4806      	ldr	r0, [pc, #24]	; (8002318 <MX_TIM3_Init+0xa4>)
 8002300:	f008 fade 	bl	800a8c0 <HAL_TIMEx_MasterConfigSynchronization>
 8002304:	4603      	mov	r3, r0
 8002306:	2b00      	cmp	r3, #0
 8002308:	d001      	beq.n	800230e <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 800230a:	f7ff fd8d 	bl	8001e28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800230e:	bf00      	nop
 8002310:	3730      	adds	r7, #48	; 0x30
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}
 8002316:	bf00      	nop
 8002318:	2000069c 	.word	0x2000069c
 800231c:	40000400 	.word	0x40000400
 8002320:	00010006 	.word	0x00010006

08002324 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b08c      	sub	sp, #48	; 0x30
 8002328:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800232a:	f107 0320 	add.w	r3, r7, #32
 800232e:	2200      	movs	r2, #0
 8002330:	601a      	str	r2, [r3, #0]
 8002332:	605a      	str	r2, [r3, #4]
 8002334:	609a      	str	r2, [r3, #8]
 8002336:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002338:	f107 0314 	add.w	r3, r7, #20
 800233c:	2200      	movs	r2, #0
 800233e:	601a      	str	r2, [r3, #0]
 8002340:	605a      	str	r2, [r3, #4]
 8002342:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002344:	1d3b      	adds	r3, r7, #4
 8002346:	2200      	movs	r2, #0
 8002348:	601a      	str	r2, [r3, #0]
 800234a:	605a      	str	r2, [r3, #4]
 800234c:	609a      	str	r2, [r3, #8]
 800234e:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8002350:	4b3e      	ldr	r3, [pc, #248]	; (800244c <MX_TIM8_Init+0x128>)
 8002352:	4a3f      	ldr	r2, [pc, #252]	; (8002450 <MX_TIM8_Init+0x12c>)
 8002354:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8002356:	4b3d      	ldr	r3, [pc, #244]	; (800244c <MX_TIM8_Init+0x128>)
 8002358:	2200      	movs	r2, #0
 800235a:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800235c:	4b3b      	ldr	r3, [pc, #236]	; (800244c <MX_TIM8_Init+0x128>)
 800235e:	2200      	movs	r2, #0
 8002360:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8002362:	4b3a      	ldr	r3, [pc, #232]	; (800244c <MX_TIM8_Init+0x128>)
 8002364:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002368:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800236a:	4b38      	ldr	r3, [pc, #224]	; (800244c <MX_TIM8_Init+0x128>)
 800236c:	2200      	movs	r2, #0
 800236e:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8002370:	4b36      	ldr	r3, [pc, #216]	; (800244c <MX_TIM8_Init+0x128>)
 8002372:	2200      	movs	r2, #0
 8002374:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002376:	4b35      	ldr	r3, [pc, #212]	; (800244c <MX_TIM8_Init+0x128>)
 8002378:	2200      	movs	r2, #0
 800237a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800237c:	4833      	ldr	r0, [pc, #204]	; (800244c <MX_TIM8_Init+0x128>)
 800237e:	f006 fbe3 	bl	8008b48 <HAL_TIM_Base_Init>
 8002382:	4603      	mov	r3, r0
 8002384:	2b00      	cmp	r3, #0
 8002386:	d001      	beq.n	800238c <MX_TIM8_Init+0x68>
  {
    Error_Handler();
 8002388:	f7ff fd4e 	bl	8001e28 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800238c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002390:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8002392:	f107 0320 	add.w	r3, r7, #32
 8002396:	4619      	mov	r1, r3
 8002398:	482c      	ldr	r0, [pc, #176]	; (800244c <MX_TIM8_Init+0x128>)
 800239a:	f007 fadd 	bl	8009958 <HAL_TIM_ConfigClockSource>
 800239e:	4603      	mov	r3, r0
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d001      	beq.n	80023a8 <MX_TIM8_Init+0x84>
  {
    Error_Handler();
 80023a4:	f7ff fd40 	bl	8001e28 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim8) != HAL_OK)
 80023a8:	4828      	ldr	r0, [pc, #160]	; (800244c <MX_TIM8_Init+0x128>)
 80023aa:	f006 fe11 	bl	8008fd0 <HAL_TIM_IC_Init>
 80023ae:	4603      	mov	r3, r0
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d001      	beq.n	80023b8 <MX_TIM8_Init+0x94>
  {
    Error_Handler();
 80023b4:	f7ff fd38 	bl	8001e28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80023b8:	2300      	movs	r3, #0
 80023ba:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80023bc:	2300      	movs	r3, #0
 80023be:	61bb      	str	r3, [r7, #24]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80023c0:	2300      	movs	r3, #0
 80023c2:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80023c4:	f107 0314 	add.w	r3, r7, #20
 80023c8:	4619      	mov	r1, r3
 80023ca:	4820      	ldr	r0, [pc, #128]	; (800244c <MX_TIM8_Init+0x128>)
 80023cc:	f008 fa78 	bl	800a8c0 <HAL_TIMEx_MasterConfigSynchronization>
 80023d0:	4603      	mov	r3, r0
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d001      	beq.n	80023da <MX_TIM8_Init+0xb6>
  {
    Error_Handler();
 80023d6:	f7ff fd27 	bl	8001e28 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80023da:	2300      	movs	r3, #0
 80023dc:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80023de:	2301      	movs	r3, #1
 80023e0:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80023e2:	2300      	movs	r3, #0
 80023e4:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 80023e6:	2300      	movs	r3, #0
 80023e8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim8, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80023ea:	1d3b      	adds	r3, r7, #4
 80023ec:	2200      	movs	r2, #0
 80023ee:	4619      	mov	r1, r3
 80023f0:	4816      	ldr	r0, [pc, #88]	; (800244c <MX_TIM8_Init+0x128>)
 80023f2:	f007 f901 	bl	80095f8 <HAL_TIM_IC_ConfigChannel>
 80023f6:	4603      	mov	r3, r0
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d001      	beq.n	8002400 <MX_TIM8_Init+0xdc>
  {
    Error_Handler();
 80023fc:	f7ff fd14 	bl	8001e28 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim8, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8002400:	1d3b      	adds	r3, r7, #4
 8002402:	2204      	movs	r2, #4
 8002404:	4619      	mov	r1, r3
 8002406:	4811      	ldr	r0, [pc, #68]	; (800244c <MX_TIM8_Init+0x128>)
 8002408:	f007 f8f6 	bl	80095f8 <HAL_TIM_IC_ConfigChannel>
 800240c:	4603      	mov	r3, r0
 800240e:	2b00      	cmp	r3, #0
 8002410:	d001      	beq.n	8002416 <MX_TIM8_Init+0xf2>
  {
    Error_Handler();
 8002412:	f7ff fd09 	bl	8001e28 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim8, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8002416:	1d3b      	adds	r3, r7, #4
 8002418:	2208      	movs	r2, #8
 800241a:	4619      	mov	r1, r3
 800241c:	480b      	ldr	r0, [pc, #44]	; (800244c <MX_TIM8_Init+0x128>)
 800241e:	f007 f8eb 	bl	80095f8 <HAL_TIM_IC_ConfigChannel>
 8002422:	4603      	mov	r3, r0
 8002424:	2b00      	cmp	r3, #0
 8002426:	d001      	beq.n	800242c <MX_TIM8_Init+0x108>
  {
    Error_Handler();
 8002428:	f7ff fcfe 	bl	8001e28 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim8, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 800242c:	1d3b      	adds	r3, r7, #4
 800242e:	220c      	movs	r2, #12
 8002430:	4619      	mov	r1, r3
 8002432:	4806      	ldr	r0, [pc, #24]	; (800244c <MX_TIM8_Init+0x128>)
 8002434:	f007 f8e0 	bl	80095f8 <HAL_TIM_IC_ConfigChannel>
 8002438:	4603      	mov	r3, r0
 800243a:	2b00      	cmp	r3, #0
 800243c:	d001      	beq.n	8002442 <MX_TIM8_Init+0x11e>
  {
    Error_Handler();
 800243e:	f7ff fcf3 	bl	8001e28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8002442:	bf00      	nop
 8002444:	3730      	adds	r7, #48	; 0x30
 8002446:	46bd      	mov	sp, r7
 8002448:	bd80      	pop	{r7, pc}
 800244a:	bf00      	nop
 800244c:	200006e8 	.word	0x200006e8
 8002450:	40013400 	.word	0x40013400

08002454 <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b08c      	sub	sp, #48	; 0x30
 8002458:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800245a:	f107 0320 	add.w	r3, r7, #32
 800245e:	2200      	movs	r2, #0
 8002460:	601a      	str	r2, [r3, #0]
 8002462:	605a      	str	r2, [r3, #4]
 8002464:	609a      	str	r2, [r3, #8]
 8002466:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002468:	f107 0314 	add.w	r3, r7, #20
 800246c:	2200      	movs	r2, #0
 800246e:	601a      	str	r2, [r3, #0]
 8002470:	605a      	str	r2, [r3, #4]
 8002472:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002474:	1d3b      	adds	r3, r7, #4
 8002476:	2200      	movs	r2, #0
 8002478:	601a      	str	r2, [r3, #0]
 800247a:	605a      	str	r2, [r3, #4]
 800247c:	609a      	str	r2, [r3, #8]
 800247e:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8002480:	4b32      	ldr	r3, [pc, #200]	; (800254c <MX_TIM15_Init+0xf8>)
 8002482:	4a33      	ldr	r2, [pc, #204]	; (8002550 <MX_TIM15_Init+0xfc>)
 8002484:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 8002486:	4b31      	ldr	r3, [pc, #196]	; (800254c <MX_TIM15_Init+0xf8>)
 8002488:	2200      	movs	r2, #0
 800248a:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 800248c:	4b2f      	ldr	r3, [pc, #188]	; (800254c <MX_TIM15_Init+0xf8>)
 800248e:	2200      	movs	r2, #0
 8002490:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 8002492:	4b2e      	ldr	r3, [pc, #184]	; (800254c <MX_TIM15_Init+0xf8>)
 8002494:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002498:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800249a:	4b2c      	ldr	r3, [pc, #176]	; (800254c <MX_TIM15_Init+0xf8>)
 800249c:	2200      	movs	r2, #0
 800249e:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 80024a0:	4b2a      	ldr	r3, [pc, #168]	; (800254c <MX_TIM15_Init+0xf8>)
 80024a2:	2200      	movs	r2, #0
 80024a4:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024a6:	4b29      	ldr	r3, [pc, #164]	; (800254c <MX_TIM15_Init+0xf8>)
 80024a8:	2200      	movs	r2, #0
 80024aa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 80024ac:	4827      	ldr	r0, [pc, #156]	; (800254c <MX_TIM15_Init+0xf8>)
 80024ae:	f006 fb4b 	bl	8008b48 <HAL_TIM_Base_Init>
 80024b2:	4603      	mov	r3, r0
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d001      	beq.n	80024bc <MX_TIM15_Init+0x68>
  {
    Error_Handler();
 80024b8:	f7ff fcb6 	bl	8001e28 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80024bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80024c0:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 80024c2:	f107 0320 	add.w	r3, r7, #32
 80024c6:	4619      	mov	r1, r3
 80024c8:	4820      	ldr	r0, [pc, #128]	; (800254c <MX_TIM15_Init+0xf8>)
 80024ca:	f007 fa45 	bl	8009958 <HAL_TIM_ConfigClockSource>
 80024ce:	4603      	mov	r3, r0
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d001      	beq.n	80024d8 <MX_TIM15_Init+0x84>
  {
    Error_Handler();
 80024d4:	f7ff fca8 	bl	8001e28 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim15) != HAL_OK)
 80024d8:	481c      	ldr	r0, [pc, #112]	; (800254c <MX_TIM15_Init+0xf8>)
 80024da:	f006 fd79 	bl	8008fd0 <HAL_TIM_IC_Init>
 80024de:	4603      	mov	r3, r0
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d001      	beq.n	80024e8 <MX_TIM15_Init+0x94>
  {
    Error_Handler();
 80024e4:	f7ff fca0 	bl	8001e28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80024e8:	2300      	movs	r3, #0
 80024ea:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80024ec:	2300      	movs	r3, #0
 80024ee:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 80024f0:	f107 0314 	add.w	r3, r7, #20
 80024f4:	4619      	mov	r1, r3
 80024f6:	4815      	ldr	r0, [pc, #84]	; (800254c <MX_TIM15_Init+0xf8>)
 80024f8:	f008 f9e2 	bl	800a8c0 <HAL_TIMEx_MasterConfigSynchronization>
 80024fc:	4603      	mov	r3, r0
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d001      	beq.n	8002506 <MX_TIM15_Init+0xb2>
  {
    Error_Handler();
 8002502:	f7ff fc91 	bl	8001e28 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002506:	2300      	movs	r3, #0
 8002508:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800250a:	2301      	movs	r3, #1
 800250c:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800250e:	2300      	movs	r3, #0
 8002510:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8002512:	2300      	movs	r3, #0
 8002514:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim15, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002516:	1d3b      	adds	r3, r7, #4
 8002518:	2200      	movs	r2, #0
 800251a:	4619      	mov	r1, r3
 800251c:	480b      	ldr	r0, [pc, #44]	; (800254c <MX_TIM15_Init+0xf8>)
 800251e:	f007 f86b 	bl	80095f8 <HAL_TIM_IC_ConfigChannel>
 8002522:	4603      	mov	r3, r0
 8002524:	2b00      	cmp	r3, #0
 8002526:	d001      	beq.n	800252c <MX_TIM15_Init+0xd8>
  {
    Error_Handler();
 8002528:	f7ff fc7e 	bl	8001e28 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim15, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800252c:	1d3b      	adds	r3, r7, #4
 800252e:	2204      	movs	r2, #4
 8002530:	4619      	mov	r1, r3
 8002532:	4806      	ldr	r0, [pc, #24]	; (800254c <MX_TIM15_Init+0xf8>)
 8002534:	f007 f860 	bl	80095f8 <HAL_TIM_IC_ConfigChannel>
 8002538:	4603      	mov	r3, r0
 800253a:	2b00      	cmp	r3, #0
 800253c:	d001      	beq.n	8002542 <MX_TIM15_Init+0xee>
  {
    Error_Handler();
 800253e:	f7ff fc73 	bl	8001e28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 8002542:	bf00      	nop
 8002544:	3730      	adds	r7, #48	; 0x30
 8002546:	46bd      	mov	sp, r7
 8002548:	bd80      	pop	{r7, pc}
 800254a:	bf00      	nop
 800254c:	20000734 	.word	0x20000734
 8002550:	40014000 	.word	0x40014000

08002554 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b094      	sub	sp, #80	; 0x50
 8002558:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800255a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800255e:	2200      	movs	r2, #0
 8002560:	601a      	str	r2, [r3, #0]
 8002562:	605a      	str	r2, [r3, #4]
 8002564:	609a      	str	r2, [r3, #8]
 8002566:	60da      	str	r2, [r3, #12]
 8002568:	611a      	str	r2, [r3, #16]
 800256a:	615a      	str	r2, [r3, #20]
 800256c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800256e:	463b      	mov	r3, r7
 8002570:	2234      	movs	r2, #52	; 0x34
 8002572:	2100      	movs	r1, #0
 8002574:	4618      	mov	r0, r3
 8002576:	f010 fea7 	bl	80132c8 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 800257a:	4b31      	ldr	r3, [pc, #196]	; (8002640 <MX_TIM16_Init+0xec>)
 800257c:	4a31      	ldr	r2, [pc, #196]	; (8002644 <MX_TIM16_Init+0xf0>)
 800257e:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 8002580:	4b2f      	ldr	r3, [pc, #188]	; (8002640 <MX_TIM16_Init+0xec>)
 8002582:	2200      	movs	r2, #0
 8002584:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002586:	4b2e      	ldr	r3, [pc, #184]	; (8002640 <MX_TIM16_Init+0xec>)
 8002588:	2200      	movs	r2, #0
 800258a:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 8500;
 800258c:	4b2c      	ldr	r3, [pc, #176]	; (8002640 <MX_TIM16_Init+0xec>)
 800258e:	f242 1234 	movw	r2, #8500	; 0x2134
 8002592:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002594:	4b2a      	ldr	r3, [pc, #168]	; (8002640 <MX_TIM16_Init+0xec>)
 8002596:	2200      	movs	r2, #0
 8002598:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800259a:	4b29      	ldr	r3, [pc, #164]	; (8002640 <MX_TIM16_Init+0xec>)
 800259c:	2200      	movs	r2, #0
 800259e:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80025a0:	4b27      	ldr	r3, [pc, #156]	; (8002640 <MX_TIM16_Init+0xec>)
 80025a2:	2280      	movs	r2, #128	; 0x80
 80025a4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80025a6:	4826      	ldr	r0, [pc, #152]	; (8002640 <MX_TIM16_Init+0xec>)
 80025a8:	f006 face 	bl	8008b48 <HAL_TIM_Base_Init>
 80025ac:	4603      	mov	r3, r0
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d001      	beq.n	80025b6 <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 80025b2:	f7ff fc39 	bl	8001e28 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 80025b6:	4822      	ldr	r0, [pc, #136]	; (8002640 <MX_TIM16_Init+0xec>)
 80025b8:	f006 fb96 	bl	8008ce8 <HAL_TIM_PWM_Init>
 80025bc:	4603      	mov	r3, r0
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d001      	beq.n	80025c6 <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 80025c2:	f7ff fc31 	bl	8001e28 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80025c6:	2360      	movs	r3, #96	; 0x60
 80025c8:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 0;
 80025ca:	2300      	movs	r3, #0
 80025cc:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80025ce:	2300      	movs	r3, #0
 80025d0:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80025d2:	2300      	movs	r3, #0
 80025d4:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80025d6:	2300      	movs	r3, #0
 80025d8:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80025da:	2300      	movs	r3, #0
 80025dc:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80025de:	2300      	movs	r3, #0
 80025e0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80025e2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80025e6:	2200      	movs	r2, #0
 80025e8:	4619      	mov	r1, r3
 80025ea:	4815      	ldr	r0, [pc, #84]	; (8002640 <MX_TIM16_Init+0xec>)
 80025ec:	f007 f8a0 	bl	8009730 <HAL_TIM_PWM_ConfigChannel>
 80025f0:	4603      	mov	r3, r0
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d001      	beq.n	80025fa <MX_TIM16_Init+0xa6>
  {
    Error_Handler();
 80025f6:	f7ff fc17 	bl	8001e28 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80025fa:	2300      	movs	r3, #0
 80025fc:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80025fe:	2300      	movs	r3, #0
 8002600:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002602:	2300      	movs	r3, #0
 8002604:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002606:	2300      	movs	r3, #0
 8002608:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800260a:	2300      	movs	r3, #0
 800260c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800260e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002612:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002614:	2300      	movs	r3, #0
 8002616:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002618:	2300      	movs	r3, #0
 800261a:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 800261c:	463b      	mov	r3, r7
 800261e:	4619      	mov	r1, r3
 8002620:	4807      	ldr	r0, [pc, #28]	; (8002640 <MX_TIM16_Init+0xec>)
 8002622:	f008 f9e3 	bl	800a9ec <HAL_TIMEx_ConfigBreakDeadTime>
 8002626:	4603      	mov	r3, r0
 8002628:	2b00      	cmp	r3, #0
 800262a:	d001      	beq.n	8002630 <MX_TIM16_Init+0xdc>
  {
    Error_Handler();
 800262c:	f7ff fbfc 	bl	8001e28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 8002630:	4803      	ldr	r0, [pc, #12]	; (8002640 <MX_TIM16_Init+0xec>)
 8002632:	f000 f991 	bl	8002958 <HAL_TIM_MspPostInit>

}
 8002636:	bf00      	nop
 8002638:	3750      	adds	r7, #80	; 0x50
 800263a:	46bd      	mov	sp, r7
 800263c:	bd80      	pop	{r7, pc}
 800263e:	bf00      	nop
 8002640:	20000780 	.word	0x20000780
 8002644:	40014400 	.word	0x40014400

08002648 <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b094      	sub	sp, #80	; 0x50
 800264c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800264e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002652:	2200      	movs	r2, #0
 8002654:	601a      	str	r2, [r3, #0]
 8002656:	605a      	str	r2, [r3, #4]
 8002658:	609a      	str	r2, [r3, #8]
 800265a:	60da      	str	r2, [r3, #12]
 800265c:	611a      	str	r2, [r3, #16]
 800265e:	615a      	str	r2, [r3, #20]
 8002660:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002662:	463b      	mov	r3, r7
 8002664:	2234      	movs	r2, #52	; 0x34
 8002666:	2100      	movs	r1, #0
 8002668:	4618      	mov	r0, r3
 800266a:	f010 fe2d 	bl	80132c8 <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 800266e:	4b30      	ldr	r3, [pc, #192]	; (8002730 <MX_TIM17_Init+0xe8>)
 8002670:	4a30      	ldr	r2, [pc, #192]	; (8002734 <MX_TIM17_Init+0xec>)
 8002672:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 33-1;
 8002674:	4b2e      	ldr	r3, [pc, #184]	; (8002730 <MX_TIM17_Init+0xe8>)
 8002676:	2220      	movs	r2, #32
 8002678:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 800267a:	4b2d      	ldr	r3, [pc, #180]	; (8002730 <MX_TIM17_Init+0xe8>)
 800267c:	2200      	movs	r2, #0
 800267e:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 255;
 8002680:	4b2b      	ldr	r3, [pc, #172]	; (8002730 <MX_TIM17_Init+0xe8>)
 8002682:	22ff      	movs	r2, #255	; 0xff
 8002684:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002686:	4b2a      	ldr	r3, [pc, #168]	; (8002730 <MX_TIM17_Init+0xe8>)
 8002688:	2200      	movs	r2, #0
 800268a:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 800268c:	4b28      	ldr	r3, [pc, #160]	; (8002730 <MX_TIM17_Init+0xe8>)
 800268e:	2200      	movs	r2, #0
 8002690:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002692:	4b27      	ldr	r3, [pc, #156]	; (8002730 <MX_TIM17_Init+0xe8>)
 8002694:	2200      	movs	r2, #0
 8002696:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8002698:	4825      	ldr	r0, [pc, #148]	; (8002730 <MX_TIM17_Init+0xe8>)
 800269a:	f006 fa55 	bl	8008b48 <HAL_TIM_Base_Init>
 800269e:	4603      	mov	r3, r0
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d001      	beq.n	80026a8 <MX_TIM17_Init+0x60>
  {
    Error_Handler();
 80026a4:	f7ff fbc0 	bl	8001e28 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 80026a8:	4821      	ldr	r0, [pc, #132]	; (8002730 <MX_TIM17_Init+0xe8>)
 80026aa:	f006 fb1d 	bl	8008ce8 <HAL_TIM_PWM_Init>
 80026ae:	4603      	mov	r3, r0
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d001      	beq.n	80026b8 <MX_TIM17_Init+0x70>
  {
    Error_Handler();
 80026b4:	f7ff fbb8 	bl	8001e28 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80026b8:	2360      	movs	r3, #96	; 0x60
 80026ba:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 0;
 80026bc:	2300      	movs	r3, #0
 80026be:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80026c0:	2300      	movs	r3, #0
 80026c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80026c4:	2300      	movs	r3, #0
 80026c6:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80026c8:	2300      	movs	r3, #0
 80026ca:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80026cc:	2300      	movs	r3, #0
 80026ce:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80026d0:	2300      	movs	r3, #0
 80026d2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80026d4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80026d8:	2200      	movs	r2, #0
 80026da:	4619      	mov	r1, r3
 80026dc:	4814      	ldr	r0, [pc, #80]	; (8002730 <MX_TIM17_Init+0xe8>)
 80026de:	f007 f827 	bl	8009730 <HAL_TIM_PWM_ConfigChannel>
 80026e2:	4603      	mov	r3, r0
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d001      	beq.n	80026ec <MX_TIM17_Init+0xa4>
  {
    Error_Handler();
 80026e8:	f7ff fb9e 	bl	8001e28 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80026ec:	2300      	movs	r3, #0
 80026ee:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80026f0:	2300      	movs	r3, #0
 80026f2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80026f4:	2300      	movs	r3, #0
 80026f6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80026f8:	2300      	movs	r3, #0
 80026fa:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80026fc:	2300      	movs	r3, #0
 80026fe:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002700:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002704:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002706:	2300      	movs	r3, #0
 8002708:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800270a:	2300      	movs	r3, #0
 800270c:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 800270e:	463b      	mov	r3, r7
 8002710:	4619      	mov	r1, r3
 8002712:	4807      	ldr	r0, [pc, #28]	; (8002730 <MX_TIM17_Init+0xe8>)
 8002714:	f008 f96a 	bl	800a9ec <HAL_TIMEx_ConfigBreakDeadTime>
 8002718:	4603      	mov	r3, r0
 800271a:	2b00      	cmp	r3, #0
 800271c:	d001      	beq.n	8002722 <MX_TIM17_Init+0xda>
  {
    Error_Handler();
 800271e:	f7ff fb83 	bl	8001e28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 8002722:	4803      	ldr	r0, [pc, #12]	; (8002730 <MX_TIM17_Init+0xe8>)
 8002724:	f000 f918 	bl	8002958 <HAL_TIM_MspPostInit>

}
 8002728:	bf00      	nop
 800272a:	3750      	adds	r7, #80	; 0x50
 800272c:	46bd      	mov	sp, r7
 800272e:	bd80      	pop	{r7, pc}
 8002730:	200007cc 	.word	0x200007cc
 8002734:	40014800 	.word	0x40014800

08002738 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b090      	sub	sp, #64	; 0x40
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002740:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002744:	2200      	movs	r2, #0
 8002746:	601a      	str	r2, [r3, #0]
 8002748:	605a      	str	r2, [r3, #4]
 800274a:	609a      	str	r2, [r3, #8]
 800274c:	60da      	str	r2, [r3, #12]
 800274e:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4a58      	ldr	r2, [pc, #352]	; (80028b8 <HAL_TIM_Base_MspInit+0x180>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d128      	bne.n	80027ac <HAL_TIM_Base_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800275a:	4b58      	ldr	r3, [pc, #352]	; (80028bc <HAL_TIM_Base_MspInit+0x184>)
 800275c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800275e:	4a57      	ldr	r2, [pc, #348]	; (80028bc <HAL_TIM_Base_MspInit+0x184>)
 8002760:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002764:	6613      	str	r3, [r2, #96]	; 0x60
 8002766:	4b55      	ldr	r3, [pc, #340]	; (80028bc <HAL_TIM_Base_MspInit+0x184>)
 8002768:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800276a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800276e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002770:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002772:	4b52      	ldr	r3, [pc, #328]	; (80028bc <HAL_TIM_Base_MspInit+0x184>)
 8002774:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002776:	4a51      	ldr	r2, [pc, #324]	; (80028bc <HAL_TIM_Base_MspInit+0x184>)
 8002778:	f043 0304 	orr.w	r3, r3, #4
 800277c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800277e:	4b4f      	ldr	r3, [pc, #316]	; (80028bc <HAL_TIM_Base_MspInit+0x184>)
 8002780:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002782:	f003 0304 	and.w	r3, r3, #4
 8002786:	627b      	str	r3, [r7, #36]	; 0x24
 8002788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2
    PC2     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 800278a:	2307      	movs	r3, #7
 800278c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800278e:	2302      	movs	r3, #2
 8002790:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002792:	2300      	movs	r3, #0
 8002794:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002796:	2300      	movs	r3, #0
 8002798:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 800279a:	2302      	movs	r3, #2
 800279c:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800279e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80027a2:	4619      	mov	r1, r3
 80027a4:	4846      	ldr	r0, [pc, #280]	; (80028c0 <HAL_TIM_Base_MspInit+0x188>)
 80027a6:	f002 fbed 	bl	8004f84 <HAL_GPIO_Init>
    __HAL_RCC_TIM17_CLK_ENABLE();
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 80027aa:	e080      	b.n	80028ae <HAL_TIM_Base_MspInit+0x176>
  else if(tim_baseHandle->Instance==TIM8)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4a44      	ldr	r2, [pc, #272]	; (80028c4 <HAL_TIM_Base_MspInit+0x18c>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d129      	bne.n	800280a <HAL_TIM_Base_MspInit+0xd2>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80027b6:	4b41      	ldr	r3, [pc, #260]	; (80028bc <HAL_TIM_Base_MspInit+0x184>)
 80027b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027ba:	4a40      	ldr	r2, [pc, #256]	; (80028bc <HAL_TIM_Base_MspInit+0x184>)
 80027bc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80027c0:	6613      	str	r3, [r2, #96]	; 0x60
 80027c2:	4b3e      	ldr	r3, [pc, #248]	; (80028bc <HAL_TIM_Base_MspInit+0x184>)
 80027c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027c6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80027ca:	623b      	str	r3, [r7, #32]
 80027cc:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80027ce:	4b3b      	ldr	r3, [pc, #236]	; (80028bc <HAL_TIM_Base_MspInit+0x184>)
 80027d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027d2:	4a3a      	ldr	r2, [pc, #232]	; (80028bc <HAL_TIM_Base_MspInit+0x184>)
 80027d4:	f043 0304 	orr.w	r3, r3, #4
 80027d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80027da:	4b38      	ldr	r3, [pc, #224]	; (80028bc <HAL_TIM_Base_MspInit+0x184>)
 80027dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027de:	f003 0304 	and.w	r3, r3, #4
 80027e2:	61fb      	str	r3, [r7, #28]
 80027e4:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 80027e6:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80027ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027ec:	2302      	movs	r3, #2
 80027ee:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027f0:	2300      	movs	r3, #0
 80027f2:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027f4:	2300      	movs	r3, #0
 80027f6:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 80027f8:	2304      	movs	r3, #4
 80027fa:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80027fc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002800:	4619      	mov	r1, r3
 8002802:	482f      	ldr	r0, [pc, #188]	; (80028c0 <HAL_TIM_Base_MspInit+0x188>)
 8002804:	f002 fbbe 	bl	8004f84 <HAL_GPIO_Init>
}
 8002808:	e051      	b.n	80028ae <HAL_TIM_Base_MspInit+0x176>
  else if(tim_baseHandle->Instance==TIM15)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4a2e      	ldr	r2, [pc, #184]	; (80028c8 <HAL_TIM_Base_MspInit+0x190>)
 8002810:	4293      	cmp	r3, r2
 8002812:	d129      	bne.n	8002868 <HAL_TIM_Base_MspInit+0x130>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8002814:	4b29      	ldr	r3, [pc, #164]	; (80028bc <HAL_TIM_Base_MspInit+0x184>)
 8002816:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002818:	4a28      	ldr	r2, [pc, #160]	; (80028bc <HAL_TIM_Base_MspInit+0x184>)
 800281a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800281e:	6613      	str	r3, [r2, #96]	; 0x60
 8002820:	4b26      	ldr	r3, [pc, #152]	; (80028bc <HAL_TIM_Base_MspInit+0x184>)
 8002822:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002824:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002828:	61bb      	str	r3, [r7, #24]
 800282a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800282c:	4b23      	ldr	r3, [pc, #140]	; (80028bc <HAL_TIM_Base_MspInit+0x184>)
 800282e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002830:	4a22      	ldr	r2, [pc, #136]	; (80028bc <HAL_TIM_Base_MspInit+0x184>)
 8002832:	f043 0301 	orr.w	r3, r3, #1
 8002836:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002838:	4b20      	ldr	r3, [pc, #128]	; (80028bc <HAL_TIM_Base_MspInit+0x184>)
 800283a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800283c:	f003 0301 	and.w	r3, r3, #1
 8002840:	617b      	str	r3, [r7, #20]
 8002842:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002844:	230c      	movs	r3, #12
 8002846:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002848:	2302      	movs	r3, #2
 800284a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800284c:	2300      	movs	r3, #0
 800284e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002850:	2300      	movs	r3, #0
 8002852:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM15;
 8002854:	2309      	movs	r3, #9
 8002856:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002858:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800285c:	4619      	mov	r1, r3
 800285e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002862:	f002 fb8f 	bl	8004f84 <HAL_GPIO_Init>
}
 8002866:	e022      	b.n	80028ae <HAL_TIM_Base_MspInit+0x176>
  else if(tim_baseHandle->Instance==TIM16)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4a17      	ldr	r2, [pc, #92]	; (80028cc <HAL_TIM_Base_MspInit+0x194>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d10c      	bne.n	800288c <HAL_TIM_Base_MspInit+0x154>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8002872:	4b12      	ldr	r3, [pc, #72]	; (80028bc <HAL_TIM_Base_MspInit+0x184>)
 8002874:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002876:	4a11      	ldr	r2, [pc, #68]	; (80028bc <HAL_TIM_Base_MspInit+0x184>)
 8002878:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800287c:	6613      	str	r3, [r2, #96]	; 0x60
 800287e:	4b0f      	ldr	r3, [pc, #60]	; (80028bc <HAL_TIM_Base_MspInit+0x184>)
 8002880:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002882:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002886:	613b      	str	r3, [r7, #16]
 8002888:	693b      	ldr	r3, [r7, #16]
}
 800288a:	e010      	b.n	80028ae <HAL_TIM_Base_MspInit+0x176>
  else if(tim_baseHandle->Instance==TIM17)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4a0f      	ldr	r2, [pc, #60]	; (80028d0 <HAL_TIM_Base_MspInit+0x198>)
 8002892:	4293      	cmp	r3, r2
 8002894:	d10b      	bne.n	80028ae <HAL_TIM_Base_MspInit+0x176>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8002896:	4b09      	ldr	r3, [pc, #36]	; (80028bc <HAL_TIM_Base_MspInit+0x184>)
 8002898:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800289a:	4a08      	ldr	r2, [pc, #32]	; (80028bc <HAL_TIM_Base_MspInit+0x184>)
 800289c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80028a0:	6613      	str	r3, [r2, #96]	; 0x60
 80028a2:	4b06      	ldr	r3, [pc, #24]	; (80028bc <HAL_TIM_Base_MspInit+0x184>)
 80028a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028a6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80028aa:	60fb      	str	r3, [r7, #12]
 80028ac:	68fb      	ldr	r3, [r7, #12]
}
 80028ae:	bf00      	nop
 80028b0:	3740      	adds	r7, #64	; 0x40
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bd80      	pop	{r7, pc}
 80028b6:	bf00      	nop
 80028b8:	40012c00 	.word	0x40012c00
 80028bc:	40021000 	.word	0x40021000
 80028c0:	48000800 	.word	0x48000800
 80028c4:	40013400 	.word	0x40013400
 80028c8:	40014000 	.word	0x40014000
 80028cc:	40014400 	.word	0x40014400
 80028d0:	40014800 	.word	0x40014800

080028d4 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b08a      	sub	sp, #40	; 0x28
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028dc:	f107 0314 	add.w	r3, r7, #20
 80028e0:	2200      	movs	r2, #0
 80028e2:	601a      	str	r2, [r3, #0]
 80028e4:	605a      	str	r2, [r3, #4]
 80028e6:	609a      	str	r2, [r3, #8]
 80028e8:	60da      	str	r2, [r3, #12]
 80028ea:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4a17      	ldr	r2, [pc, #92]	; (8002950 <HAL_TIM_Encoder_MspInit+0x7c>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d128      	bne.n	8002948 <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80028f6:	4b17      	ldr	r3, [pc, #92]	; (8002954 <HAL_TIM_Encoder_MspInit+0x80>)
 80028f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028fa:	4a16      	ldr	r2, [pc, #88]	; (8002954 <HAL_TIM_Encoder_MspInit+0x80>)
 80028fc:	f043 0302 	orr.w	r3, r3, #2
 8002900:	6593      	str	r3, [r2, #88]	; 0x58
 8002902:	4b14      	ldr	r3, [pc, #80]	; (8002954 <HAL_TIM_Encoder_MspInit+0x80>)
 8002904:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002906:	f003 0302 	and.w	r3, r3, #2
 800290a:	613b      	str	r3, [r7, #16]
 800290c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800290e:	4b11      	ldr	r3, [pc, #68]	; (8002954 <HAL_TIM_Encoder_MspInit+0x80>)
 8002910:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002912:	4a10      	ldr	r2, [pc, #64]	; (8002954 <HAL_TIM_Encoder_MspInit+0x80>)
 8002914:	f043 0301 	orr.w	r3, r3, #1
 8002918:	64d3      	str	r3, [r2, #76]	; 0x4c
 800291a:	4b0e      	ldr	r3, [pc, #56]	; (8002954 <HAL_TIM_Encoder_MspInit+0x80>)
 800291c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800291e:	f003 0301 	and.w	r3, r3, #1
 8002922:	60fb      	str	r3, [r7, #12]
 8002924:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = ENC_BTN_A_Pin|ENC_BTN_B_Pin;
 8002926:	23c0      	movs	r3, #192	; 0xc0
 8002928:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800292a:	2302      	movs	r3, #2
 800292c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800292e:	2300      	movs	r3, #0
 8002930:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002932:	2300      	movs	r3, #0
 8002934:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002936:	2302      	movs	r3, #2
 8002938:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800293a:	f107 0314 	add.w	r3, r7, #20
 800293e:	4619      	mov	r1, r3
 8002940:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002944:	f002 fb1e 	bl	8004f84 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8002948:	bf00      	nop
 800294a:	3728      	adds	r7, #40	; 0x28
 800294c:	46bd      	mov	sp, r7
 800294e:	bd80      	pop	{r7, pc}
 8002950:	40000400 	.word	0x40000400
 8002954:	40021000 	.word	0x40021000

08002958 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b08a      	sub	sp, #40	; 0x28
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002960:	f107 0314 	add.w	r3, r7, #20
 8002964:	2200      	movs	r2, #0
 8002966:	601a      	str	r2, [r3, #0]
 8002968:	605a      	str	r2, [r3, #4]
 800296a:	609a      	str	r2, [r3, #8]
 800296c:	60da      	str	r2, [r3, #12]
 800296e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM16)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4a22      	ldr	r2, [pc, #136]	; (8002a00 <HAL_TIM_MspPostInit+0xa8>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d11c      	bne.n	80029b4 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM16_MspPostInit 0 */

  /* USER CODE END TIM16_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800297a:	4b22      	ldr	r3, [pc, #136]	; (8002a04 <HAL_TIM_MspPostInit+0xac>)
 800297c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800297e:	4a21      	ldr	r2, [pc, #132]	; (8002a04 <HAL_TIM_MspPostInit+0xac>)
 8002980:	f043 0302 	orr.w	r3, r3, #2
 8002984:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002986:	4b1f      	ldr	r3, [pc, #124]	; (8002a04 <HAL_TIM_MspPostInit+0xac>)
 8002988:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800298a:	f003 0302 	and.w	r3, r3, #2
 800298e:	613b      	str	r3, [r7, #16]
 8002990:	693b      	ldr	r3, [r7, #16]
    /**TIM16 GPIO Configuration
    PB4     ------> TIM16_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002992:	2310      	movs	r3, #16
 8002994:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002996:	2302      	movs	r3, #2
 8002998:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800299a:	2300      	movs	r3, #0
 800299c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800299e:	2300      	movs	r3, #0
 80029a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 80029a2:	2301      	movs	r3, #1
 80029a4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029a6:	f107 0314 	add.w	r3, r7, #20
 80029aa:	4619      	mov	r1, r3
 80029ac:	4816      	ldr	r0, [pc, #88]	; (8002a08 <HAL_TIM_MspPostInit+0xb0>)
 80029ae:	f002 fae9 	bl	8004f84 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 80029b2:	e020      	b.n	80029f6 <HAL_TIM_MspPostInit+0x9e>
  else if(timHandle->Instance==TIM17)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4a14      	ldr	r2, [pc, #80]	; (8002a0c <HAL_TIM_MspPostInit+0xb4>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d11b      	bne.n	80029f6 <HAL_TIM_MspPostInit+0x9e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029be:	4b11      	ldr	r3, [pc, #68]	; (8002a04 <HAL_TIM_MspPostInit+0xac>)
 80029c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029c2:	4a10      	ldr	r2, [pc, #64]	; (8002a04 <HAL_TIM_MspPostInit+0xac>)
 80029c4:	f043 0302 	orr.w	r3, r3, #2
 80029c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80029ca:	4b0e      	ldr	r3, [pc, #56]	; (8002a04 <HAL_TIM_MspPostInit+0xac>)
 80029cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029ce:	f003 0302 	and.w	r3, r3, #2
 80029d2:	60fb      	str	r3, [r7, #12]
 80029d4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ISO_PWM_BREAK_Pin;
 80029d6:	2320      	movs	r3, #32
 80029d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029da:	2302      	movs	r3, #2
 80029dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029de:	2300      	movs	r3, #0
 80029e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029e2:	2300      	movs	r3, #0
 80029e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM17;
 80029e6:	230a      	movs	r3, #10
 80029e8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ISO_PWM_BREAK_GPIO_Port, &GPIO_InitStruct);
 80029ea:	f107 0314 	add.w	r3, r7, #20
 80029ee:	4619      	mov	r1, r3
 80029f0:	4805      	ldr	r0, [pc, #20]	; (8002a08 <HAL_TIM_MspPostInit+0xb0>)
 80029f2:	f002 fac7 	bl	8004f84 <HAL_GPIO_Init>
}
 80029f6:	bf00      	nop
 80029f8:	3728      	adds	r7, #40	; 0x28
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bd80      	pop	{r7, pc}
 80029fe:	bf00      	nop
 8002a00:	40014400 	.word	0x40014400
 8002a04:	40021000 	.word	0x40021000
 8002a08:	48000400 	.word	0x48000400
 8002a0c:	40014800 	.word	0x40014800

08002a10 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002a14:	4b22      	ldr	r3, [pc, #136]	; (8002aa0 <MX_USART1_UART_Init+0x90>)
 8002a16:	4a23      	ldr	r2, [pc, #140]	; (8002aa4 <MX_USART1_UART_Init+0x94>)
 8002a18:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002a1a:	4b21      	ldr	r3, [pc, #132]	; (8002aa0 <MX_USART1_UART_Init+0x90>)
 8002a1c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002a20:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002a22:	4b1f      	ldr	r3, [pc, #124]	; (8002aa0 <MX_USART1_UART_Init+0x90>)
 8002a24:	2200      	movs	r2, #0
 8002a26:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002a28:	4b1d      	ldr	r3, [pc, #116]	; (8002aa0 <MX_USART1_UART_Init+0x90>)
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002a2e:	4b1c      	ldr	r3, [pc, #112]	; (8002aa0 <MX_USART1_UART_Init+0x90>)
 8002a30:	2200      	movs	r2, #0
 8002a32:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002a34:	4b1a      	ldr	r3, [pc, #104]	; (8002aa0 <MX_USART1_UART_Init+0x90>)
 8002a36:	220c      	movs	r2, #12
 8002a38:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002a3a:	4b19      	ldr	r3, [pc, #100]	; (8002aa0 <MX_USART1_UART_Init+0x90>)
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002a40:	4b17      	ldr	r3, [pc, #92]	; (8002aa0 <MX_USART1_UART_Init+0x90>)
 8002a42:	2200      	movs	r2, #0
 8002a44:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002a46:	4b16      	ldr	r3, [pc, #88]	; (8002aa0 <MX_USART1_UART_Init+0x90>)
 8002a48:	2200      	movs	r2, #0
 8002a4a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002a4c:	4b14      	ldr	r3, [pc, #80]	; (8002aa0 <MX_USART1_UART_Init+0x90>)
 8002a4e:	2200      	movs	r2, #0
 8002a50:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002a52:	4b13      	ldr	r3, [pc, #76]	; (8002aa0 <MX_USART1_UART_Init+0x90>)
 8002a54:	2200      	movs	r2, #0
 8002a56:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002a58:	4811      	ldr	r0, [pc, #68]	; (8002aa0 <MX_USART1_UART_Init+0x90>)
 8002a5a:	f008 f8bf 	bl	800abdc <HAL_UART_Init>
 8002a5e:	4603      	mov	r3, r0
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d001      	beq.n	8002a68 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8002a64:	f7ff f9e0 	bl	8001e28 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002a68:	2100      	movs	r1, #0
 8002a6a:	480d      	ldr	r0, [pc, #52]	; (8002aa0 <MX_USART1_UART_Init+0x90>)
 8002a6c:	f008 fe86 	bl	800b77c <HAL_UARTEx_SetTxFifoThreshold>
 8002a70:	4603      	mov	r3, r0
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d001      	beq.n	8002a7a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8002a76:	f7ff f9d7 	bl	8001e28 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002a7a:	2100      	movs	r1, #0
 8002a7c:	4808      	ldr	r0, [pc, #32]	; (8002aa0 <MX_USART1_UART_Init+0x90>)
 8002a7e:	f008 febb 	bl	800b7f8 <HAL_UARTEx_SetRxFifoThreshold>
 8002a82:	4603      	mov	r3, r0
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d001      	beq.n	8002a8c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8002a88:	f7ff f9ce 	bl	8001e28 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002a8c:	4804      	ldr	r0, [pc, #16]	; (8002aa0 <MX_USART1_UART_Init+0x90>)
 8002a8e:	f008 fe3c 	bl	800b70a <HAL_UARTEx_DisableFifoMode>
 8002a92:	4603      	mov	r3, r0
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d001      	beq.n	8002a9c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002a98:	f7ff f9c6 	bl	8001e28 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002a9c:	bf00      	nop
 8002a9e:	bd80      	pop	{r7, pc}
 8002aa0:	20000818 	.word	0x20000818
 8002aa4:	40013800 	.word	0x40013800

08002aa8 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002aac:	4b22      	ldr	r3, [pc, #136]	; (8002b38 <MX_USART3_UART_Init+0x90>)
 8002aae:	4a23      	ldr	r2, [pc, #140]	; (8002b3c <MX_USART3_UART_Init+0x94>)
 8002ab0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002ab2:	4b21      	ldr	r3, [pc, #132]	; (8002b38 <MX_USART3_UART_Init+0x90>)
 8002ab4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002ab8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002aba:	4b1f      	ldr	r3, [pc, #124]	; (8002b38 <MX_USART3_UART_Init+0x90>)
 8002abc:	2200      	movs	r2, #0
 8002abe:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002ac0:	4b1d      	ldr	r3, [pc, #116]	; (8002b38 <MX_USART3_UART_Init+0x90>)
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002ac6:	4b1c      	ldr	r3, [pc, #112]	; (8002b38 <MX_USART3_UART_Init+0x90>)
 8002ac8:	2200      	movs	r2, #0
 8002aca:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002acc:	4b1a      	ldr	r3, [pc, #104]	; (8002b38 <MX_USART3_UART_Init+0x90>)
 8002ace:	220c      	movs	r2, #12
 8002ad0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002ad2:	4b19      	ldr	r3, [pc, #100]	; (8002b38 <MX_USART3_UART_Init+0x90>)
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002ad8:	4b17      	ldr	r3, [pc, #92]	; (8002b38 <MX_USART3_UART_Init+0x90>)
 8002ada:	2200      	movs	r2, #0
 8002adc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002ade:	4b16      	ldr	r3, [pc, #88]	; (8002b38 <MX_USART3_UART_Init+0x90>)
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002ae4:	4b14      	ldr	r3, [pc, #80]	; (8002b38 <MX_USART3_UART_Init+0x90>)
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002aea:	4b13      	ldr	r3, [pc, #76]	; (8002b38 <MX_USART3_UART_Init+0x90>)
 8002aec:	2200      	movs	r2, #0
 8002aee:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002af0:	4811      	ldr	r0, [pc, #68]	; (8002b38 <MX_USART3_UART_Init+0x90>)
 8002af2:	f008 f873 	bl	800abdc <HAL_UART_Init>
 8002af6:	4603      	mov	r3, r0
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d001      	beq.n	8002b00 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8002afc:	f7ff f994 	bl	8001e28 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002b00:	2100      	movs	r1, #0
 8002b02:	480d      	ldr	r0, [pc, #52]	; (8002b38 <MX_USART3_UART_Init+0x90>)
 8002b04:	f008 fe3a 	bl	800b77c <HAL_UARTEx_SetTxFifoThreshold>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d001      	beq.n	8002b12 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8002b0e:	f7ff f98b 	bl	8001e28 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002b12:	2100      	movs	r1, #0
 8002b14:	4808      	ldr	r0, [pc, #32]	; (8002b38 <MX_USART3_UART_Init+0x90>)
 8002b16:	f008 fe6f 	bl	800b7f8 <HAL_UARTEx_SetRxFifoThreshold>
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d001      	beq.n	8002b24 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8002b20:	f7ff f982 	bl	8001e28 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8002b24:	4804      	ldr	r0, [pc, #16]	; (8002b38 <MX_USART3_UART_Init+0x90>)
 8002b26:	f008 fdf0 	bl	800b70a <HAL_UARTEx_DisableFifoMode>
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d001      	beq.n	8002b34 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8002b30:	f7ff f97a 	bl	8001e28 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002b34:	bf00      	nop
 8002b36:	bd80      	pop	{r7, pc}
 8002b38:	200008a8 	.word	0x200008a8
 8002b3c:	40004800 	.word	0x40004800

08002b40 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b0a0      	sub	sp, #128	; 0x80
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b48:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	601a      	str	r2, [r3, #0]
 8002b50:	605a      	str	r2, [r3, #4]
 8002b52:	609a      	str	r2, [r3, #8]
 8002b54:	60da      	str	r2, [r3, #12]
 8002b56:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002b58:	f107 0318 	add.w	r3, r7, #24
 8002b5c:	2254      	movs	r2, #84	; 0x54
 8002b5e:	2100      	movs	r1, #0
 8002b60:	4618      	mov	r0, r3
 8002b62:	f010 fbb1 	bl	80132c8 <memset>
  if(uartHandle->Instance==USART1)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	4a3d      	ldr	r2, [pc, #244]	; (8002c60 <HAL_UART_MspInit+0x120>)
 8002b6c:	4293      	cmp	r3, r2
 8002b6e:	d136      	bne.n	8002bde <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002b70:	2301      	movs	r3, #1
 8002b72:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002b74:	2300      	movs	r3, #0
 8002b76:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002b78:	f107 0318 	add.w	r3, r7, #24
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	f005 fd95 	bl	80086ac <HAL_RCCEx_PeriphCLKConfig>
 8002b82:	4603      	mov	r3, r0
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d001      	beq.n	8002b8c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002b88:	f7ff f94e 	bl	8001e28 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002b8c:	4b35      	ldr	r3, [pc, #212]	; (8002c64 <HAL_UART_MspInit+0x124>)
 8002b8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b90:	4a34      	ldr	r2, [pc, #208]	; (8002c64 <HAL_UART_MspInit+0x124>)
 8002b92:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b96:	6613      	str	r3, [r2, #96]	; 0x60
 8002b98:	4b32      	ldr	r3, [pc, #200]	; (8002c64 <HAL_UART_MspInit+0x124>)
 8002b9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b9c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ba0:	617b      	str	r3, [r7, #20]
 8002ba2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ba4:	4b2f      	ldr	r3, [pc, #188]	; (8002c64 <HAL_UART_MspInit+0x124>)
 8002ba6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ba8:	4a2e      	ldr	r2, [pc, #184]	; (8002c64 <HAL_UART_MspInit+0x124>)
 8002baa:	f043 0304 	orr.w	r3, r3, #4
 8002bae:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002bb0:	4b2c      	ldr	r3, [pc, #176]	; (8002c64 <HAL_UART_MspInit+0x124>)
 8002bb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bb4:	f003 0304 	and.w	r3, r3, #4
 8002bb8:	613b      	str	r3, [r7, #16]
 8002bba:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002bbc:	2330      	movs	r3, #48	; 0x30
 8002bbe:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bc0:	2302      	movs	r3, #2
 8002bc2:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bc8:	2300      	movs	r3, #0
 8002bca:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002bcc:	2307      	movs	r3, #7
 8002bce:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002bd0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002bd4:	4619      	mov	r1, r3
 8002bd6:	4824      	ldr	r0, [pc, #144]	; (8002c68 <HAL_UART_MspInit+0x128>)
 8002bd8:	f002 f9d4 	bl	8004f84 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8002bdc:	e03b      	b.n	8002c56 <HAL_UART_MspInit+0x116>
  else if(uartHandle->Instance==USART3)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	4a22      	ldr	r2, [pc, #136]	; (8002c6c <HAL_UART_MspInit+0x12c>)
 8002be4:	4293      	cmp	r3, r2
 8002be6:	d136      	bne.n	8002c56 <HAL_UART_MspInit+0x116>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002be8:	2304      	movs	r3, #4
 8002bea:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002bec:	2300      	movs	r3, #0
 8002bee:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002bf0:	f107 0318 	add.w	r3, r7, #24
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	f005 fd59 	bl	80086ac <HAL_RCCEx_PeriphCLKConfig>
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d001      	beq.n	8002c04 <HAL_UART_MspInit+0xc4>
      Error_Handler();
 8002c00:	f7ff f912 	bl	8001e28 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002c04:	4b17      	ldr	r3, [pc, #92]	; (8002c64 <HAL_UART_MspInit+0x124>)
 8002c06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c08:	4a16      	ldr	r2, [pc, #88]	; (8002c64 <HAL_UART_MspInit+0x124>)
 8002c0a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c0e:	6593      	str	r3, [r2, #88]	; 0x58
 8002c10:	4b14      	ldr	r3, [pc, #80]	; (8002c64 <HAL_UART_MspInit+0x124>)
 8002c12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c14:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c18:	60fb      	str	r3, [r7, #12]
 8002c1a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c1c:	4b11      	ldr	r3, [pc, #68]	; (8002c64 <HAL_UART_MspInit+0x124>)
 8002c1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c20:	4a10      	ldr	r2, [pc, #64]	; (8002c64 <HAL_UART_MspInit+0x124>)
 8002c22:	f043 0302 	orr.w	r3, r3, #2
 8002c26:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002c28:	4b0e      	ldr	r3, [pc, #56]	; (8002c64 <HAL_UART_MspInit+0x124>)
 8002c2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c2c:	f003 0302 	and.w	r3, r3, #2
 8002c30:	60bb      	str	r3, [r7, #8]
 8002c32:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002c34:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002c38:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c3a:	2302      	movs	r3, #2
 8002c3c:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c3e:	2300      	movs	r3, #0
 8002c40:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c42:	2300      	movs	r3, #0
 8002c44:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002c46:	2307      	movs	r3, #7
 8002c48:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c4a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002c4e:	4619      	mov	r1, r3
 8002c50:	4807      	ldr	r0, [pc, #28]	; (8002c70 <HAL_UART_MspInit+0x130>)
 8002c52:	f002 f997 	bl	8004f84 <HAL_GPIO_Init>
}
 8002c56:	bf00      	nop
 8002c58:	3780      	adds	r7, #128	; 0x80
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	bd80      	pop	{r7, pc}
 8002c5e:	bf00      	nop
 8002c60:	40013800 	.word	0x40013800
 8002c64:	40021000 	.word	0x40021000
 8002c68:	48000800 	.word	0x48000800
 8002c6c:	40004800 	.word	0x40004800
 8002c70:	48000400 	.word	0x48000400

08002c74 <vTask_TCN75A>:
extern SemaphoreHandle_t xI2CMutex;
extern QueueHandle_t xTemperatureQueue;
TCN75A_HandleTypeDef hTCN75A1;


void vTask_TCN75A(void *pvParameters){
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b084      	sub	sp, #16
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
	I2C_HandleTypeDef* hi2c = (I2C_HandleTypeDef*) pvParameters;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	60fb      	str	r3, [r7, #12]
	if(xSemaphoreTake(xUartMutex, portMAX_DELAY) == pdTRUE){
 8002c80:	4b30      	ldr	r3, [pc, #192]	; (8002d44 <vTask_TCN75A+0xd0>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002c88:	4618      	mov	r0, r3
 8002c8a:	f00d f9a1 	bl	800ffd0 <xQueueSemaphoreTake>
 8002c8e:	4603      	mov	r3, r0
 8002c90:	2b01      	cmp	r3, #1
 8002c92:	d109      	bne.n	8002ca8 <vTask_TCN75A+0x34>
		printf("Init Task TCN75A...   ");
 8002c94:	482c      	ldr	r0, [pc, #176]	; (8002d48 <vTask_TCN75A+0xd4>)
 8002c96:	f010 f97d 	bl	8012f94 <iprintf>
		xSemaphoreGive(xUartMutex);
 8002c9a:	4b2a      	ldr	r3, [pc, #168]	; (8002d44 <vTask_TCN75A+0xd0>)
 8002c9c:	6818      	ldr	r0, [r3, #0]
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	2100      	movs	r1, #0
 8002ca4:	f00c ff1a 	bl	800fadc <xQueueGenericSend>
	}
	TCN75A_Init(&hTCN75A1, hi2c);
 8002ca8:	68f9      	ldr	r1, [r7, #12]
 8002caa:	4828      	ldr	r0, [pc, #160]	; (8002d4c <vTask_TCN75A+0xd8>)
 8002cac:	f000 f85a 	bl	8002d64 <TCN75A_Init>
	if(xSemaphoreTake(xUartMutex, portMAX_DELAY) == pdTRUE){
 8002cb0:	4b24      	ldr	r3, [pc, #144]	; (8002d44 <vTask_TCN75A+0xd0>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002cb8:	4618      	mov	r0, r3
 8002cba:	f00d f989 	bl	800ffd0 <xQueueSemaphoreTake>
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	2b01      	cmp	r3, #1
 8002cc2:	d109      	bne.n	8002cd8 <vTask_TCN75A+0x64>
		printf(" Done\r\n");
 8002cc4:	4822      	ldr	r0, [pc, #136]	; (8002d50 <vTask_TCN75A+0xdc>)
 8002cc6:	f010 f9cb 	bl	8013060 <puts>
		xSemaphoreGive(xUartMutex);
 8002cca:	4b1e      	ldr	r3, [pc, #120]	; (8002d44 <vTask_TCN75A+0xd0>)
 8002ccc:	6818      	ldr	r0, [r3, #0]
 8002cce:	2300      	movs	r3, #0
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	2100      	movs	r1, #0
 8002cd4:	f00c ff02 	bl	800fadc <xQueueGenericSend>
	}
	vTaskDelay(1000);
 8002cd8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002cdc:	f00d fcf6 	bl	80106cc <vTaskDelay>
	for(;;){
		TCN75A_Read_Temperature(&hTCN75A1);
 8002ce0:	481a      	ldr	r0, [pc, #104]	; (8002d4c <vTask_TCN75A+0xd8>)
 8002ce2:	f000 f861 	bl	8002da8 <TCN75A_Read_Temperature>
		if(xSemaphoreTake(xUartMutex, portMAX_DELAY) == pdTRUE){
 8002ce6:	4b17      	ldr	r3, [pc, #92]	; (8002d44 <vTask_TCN75A+0xd0>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002cee:	4618      	mov	r0, r3
 8002cf0:	f00d f96e 	bl	800ffd0 <xQueueSemaphoreTake>
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	2b01      	cmp	r3, #1
 8002cf8:	d11e      	bne.n	8002d38 <vTask_TCN75A+0xc4>
			printf("Temperature %2.2f°C\r\n",hTCN75A1.temperature);
 8002cfa:	4b14      	ldr	r3, [pc, #80]	; (8002d4c <vTask_TCN75A+0xd8>)
 8002cfc:	68db      	ldr	r3, [r3, #12]
 8002cfe:	4618      	mov	r0, r3
 8002d00:	f7fd fc4a 	bl	8000598 <__aeabi_f2d>
 8002d04:	4602      	mov	r2, r0
 8002d06:	460b      	mov	r3, r1
 8002d08:	4812      	ldr	r0, [pc, #72]	; (8002d54 <vTask_TCN75A+0xe0>)
 8002d0a:	f010 f943 	bl	8012f94 <iprintf>
			xSemaphoreGive(xUartMutex);
 8002d0e:	4b0d      	ldr	r3, [pc, #52]	; (8002d44 <vTask_TCN75A+0xd0>)
 8002d10:	6818      	ldr	r0, [r3, #0]
 8002d12:	2300      	movs	r3, #0
 8002d14:	2200      	movs	r2, #0
 8002d16:	2100      	movs	r1, #0
 8002d18:	f00c fee0 	bl	800fadc <xQueueGenericSend>
			if(pdPASS == xQueueSend(xTemperatureQueue, &hTCN75A1.temperature, portMAX_DELAY)){
 8002d1c:	4b0e      	ldr	r3, [pc, #56]	; (8002d58 <vTask_TCN75A+0xe4>)
 8002d1e:	6818      	ldr	r0, [r3, #0]
 8002d20:	2300      	movs	r3, #0
 8002d22:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002d26:	490d      	ldr	r1, [pc, #52]	; (8002d5c <vTask_TCN75A+0xe8>)
 8002d28:	f00c fed8 	bl	800fadc <xQueueGenericSend>
 8002d2c:	4603      	mov	r3, r0
 8002d2e:	2b01      	cmp	r3, #1
 8002d30:	d102      	bne.n	8002d38 <vTask_TCN75A+0xc4>
				printf("Temperature transmit to fan controller\r\n");
 8002d32:	480b      	ldr	r0, [pc, #44]	; (8002d60 <vTask_TCN75A+0xec>)
 8002d34:	f010 f994 	bl	8013060 <puts>
			}

		}
		vTaskDelay(1000);
 8002d38:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002d3c:	f00d fcc6 	bl	80106cc <vTaskDelay>
	for(;;){
 8002d40:	e7ce      	b.n	8002ce0 <vTask_TCN75A+0x6c>
 8002d42:	bf00      	nop
 8002d44:	200005d4 	.word	0x200005d4
 8002d48:	080157c0 	.word	0x080157c0
 8002d4c:	20000938 	.word	0x20000938
 8002d50:	080157d8 	.word	0x080157d8
 8002d54:	080157e0 	.word	0x080157e0
 8002d58:	200005dc 	.word	0x200005dc
 8002d5c:	20000944 	.word	0x20000944
 8002d60:	080157f8 	.word	0x080157f8

08002d64 <TCN75A_Init>:
	}
}

void TCN75A_Init(TCN75A_HandleTypeDef* hTCN75A, I2C_HandleTypeDef* hi2c){
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b086      	sub	sp, #24
 8002d68:	af02      	add	r7, sp, #8
 8002d6a:	6078      	str	r0, [r7, #4]
 8002d6c:	6039      	str	r1, [r7, #0]
	hTCN75A->hi2c = hi2c;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	683a      	ldr	r2, [r7, #0]
 8002d72:	601a      	str	r2, [r3, #0]
	hTCN75A->I2C_addr = _TCN75A_I2C_ADDR;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2248      	movs	r2, #72	; 0x48
 8002d78:	711a      	strb	r2, [r3, #4]

	uint8_t config[2] = {_TCN75A_RP_CONFIG, _TCN75A_12BITS};
 8002d7a:	f246 0301 	movw	r3, #24577	; 0x6001
 8002d7e:	81bb      	strh	r3, [r7, #12]
	HAL_I2C_Master_Transmit(hTCN75A->hi2c, hTCN75A->I2C_addr<<1, config, 2, HAL_MAX_DELAY);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6818      	ldr	r0, [r3, #0]
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	791b      	ldrb	r3, [r3, #4]
 8002d88:	b29b      	uxth	r3, r3
 8002d8a:	005b      	lsls	r3, r3, #1
 8002d8c:	b299      	uxth	r1, r3
 8002d8e:	f107 020c 	add.w	r2, r7, #12
 8002d92:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002d96:	9300      	str	r3, [sp, #0]
 8002d98:	2302      	movs	r3, #2
 8002d9a:	f002 fb4f 	bl	800543c <HAL_I2C_Master_Transmit>
}
 8002d9e:	bf00      	nop
 8002da0:	3710      	adds	r7, #16
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bd80      	pop	{r7, pc}
	...

08002da8 <TCN75A_Read_Temperature>:

void TCN75A_Read_Temperature(TCN75A_HandleTypeDef* hTCN75A){
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b088      	sub	sp, #32
 8002dac:	af04      	add	r7, sp, #16
 8002dae:	6078      	str	r0, [r7, #4]
	uint8_t data[2] = {0x00, 0x00};
 8002db0:	2300      	movs	r3, #0
 8002db2:	81bb      	strh	r3, [r7, #12]
	if(xSemaphoreTake(xI2CMutex, portMAX_DELAY)==pdTRUE){
 8002db4:	4b20      	ldr	r3, [pc, #128]	; (8002e38 <TCN75A_Read_Temperature+0x90>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	f00d f907 	bl	800ffd0 <xQueueSemaphoreTake>
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	2b01      	cmp	r3, #1
 8002dc6:	d119      	bne.n	8002dfc <TCN75A_Read_Temperature+0x54>
		//HAL_I2C_Master_Transmit(hTCN75A->hi2c, hTCN75A->I2C_addr<<1, data, 1, HAL_MAX_DELAY);
		//HAL_I2C_Master_Receive(hTCN75A->hi2c, hTCN75A->I2C_addr<<1, data, 2, HAL_MAX_DELAY);
		HAL_I2C_Mem_Read(hTCN75A->hi2c, hTCN75A->I2C_addr<<1, _TCN75A_RP_TA, 1, data, 2, HAL_MAX_DELAY);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6818      	ldr	r0, [r3, #0]
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	791b      	ldrb	r3, [r3, #4]
 8002dd0:	b29b      	uxth	r3, r3
 8002dd2:	005b      	lsls	r3, r3, #1
 8002dd4:	b299      	uxth	r1, r3
 8002dd6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002dda:	9302      	str	r3, [sp, #8]
 8002ddc:	2302      	movs	r3, #2
 8002dde:	9301      	str	r3, [sp, #4]
 8002de0:	f107 030c 	add.w	r3, r7, #12
 8002de4:	9300      	str	r3, [sp, #0]
 8002de6:	2301      	movs	r3, #1
 8002de8:	2200      	movs	r2, #0
 8002dea:	f002 fc1b 	bl	8005624 <HAL_I2C_Mem_Read>
		xSemaphoreGive(xI2CMutex);
 8002dee:	4b12      	ldr	r3, [pc, #72]	; (8002e38 <TCN75A_Read_Temperature+0x90>)
 8002df0:	6818      	ldr	r0, [r3, #0]
 8002df2:	2300      	movs	r3, #0
 8002df4:	2200      	movs	r2, #0
 8002df6:	2100      	movs	r1, #0
 8002df8:	f00c fe70 	bl	800fadc <xQueueGenericSend>
	}
		hTCN75A->temperature_raw = (data[0]<<4)|(data[1]>>4);
 8002dfc:	7b3b      	ldrb	r3, [r7, #12]
 8002dfe:	011b      	lsls	r3, r3, #4
 8002e00:	b21a      	sxth	r2, r3
 8002e02:	7b7b      	ldrb	r3, [r7, #13]
 8002e04:	091b      	lsrs	r3, r3, #4
 8002e06:	b2db      	uxtb	r3, r3
 8002e08:	b21b      	sxth	r3, r3
 8002e0a:	4313      	orrs	r3, r2
 8002e0c:	b21b      	sxth	r3, r3
 8002e0e:	b29a      	uxth	r2, r3
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	811a      	strh	r2, [r3, #8]
		hTCN75A->temperature = (float)hTCN75A->temperature_raw / 16.0;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	891b      	ldrh	r3, [r3, #8]
 8002e18:	ee07 3a90 	vmov	s15, r3
 8002e1c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002e20:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 8002e24:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	edc3 7a03 	vstr	s15, [r3, #12]
}
 8002e2e:	bf00      	nop
 8002e30:	3710      	adds	r7, #16
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bd80      	pop	{r7, pc}
 8002e36:	bf00      	nop
 8002e38:	200005d8 	.word	0x200005d8

08002e3c <vTask_Break>:
#include "semphr.h"
#include "adc.h"

extern SemaphoreHandle_t xUartMutex;

void vTask_Break(void *pvParameters){
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b086      	sub	sp, #24
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
	BREAK_HandleTypeDef hbreak1;
	uint16_t VBus_raw;
	if(xSemaphoreTake(xUartMutex, portMAX_DELAY) == pdTRUE){
 8002e44:	4b19      	ldr	r3, [pc, #100]	; (8002eac <vTask_Break+0x70>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	f00d f8bf 	bl	800ffd0 <xQueueSemaphoreTake>
 8002e52:	4603      	mov	r3, r0
 8002e54:	2b01      	cmp	r3, #1
 8002e56:	d109      	bne.n	8002e6c <vTask_Break+0x30>
		printf("Init Break...         ");
 8002e58:	4815      	ldr	r0, [pc, #84]	; (8002eb0 <vTask_Break+0x74>)
 8002e5a:	f010 f89b 	bl	8012f94 <iprintf>
		xSemaphoreGive(xUartMutex);
 8002e5e:	4b13      	ldr	r3, [pc, #76]	; (8002eac <vTask_Break+0x70>)
 8002e60:	6818      	ldr	r0, [r3, #0]
 8002e62:	2300      	movs	r3, #0
 8002e64:	2200      	movs	r2, #0
 8002e66:	2100      	movs	r1, #0
 8002e68:	f00c fe38 	bl	800fadc <xQueueGenericSend>
	}
	Break_Init(&hbreak1, (TIM_HandleTypeDef*)pvParameters);
 8002e6c:	f107 030c 	add.w	r3, r7, #12
 8002e70:	6879      	ldr	r1, [r7, #4]
 8002e72:	4618      	mov	r0, r3
 8002e74:	f000 f820 	bl	8002eb8 <Break_Init>
	if(xSemaphoreTake(xUartMutex, portMAX_DELAY) == pdTRUE){
 8002e78:	4b0c      	ldr	r3, [pc, #48]	; (8002eac <vTask_Break+0x70>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002e80:	4618      	mov	r0, r3
 8002e82:	f00d f8a5 	bl	800ffd0 <xQueueSemaphoreTake>
 8002e86:	4603      	mov	r3, r0
 8002e88:	2b01      	cmp	r3, #1
 8002e8a:	d109      	bne.n	8002ea0 <vTask_Break+0x64>
		printf(" Done\r\n");
 8002e8c:	4809      	ldr	r0, [pc, #36]	; (8002eb4 <vTask_Break+0x78>)
 8002e8e:	f010 f8e7 	bl	8013060 <puts>
		xSemaphoreGive(xUartMutex);
 8002e92:	4b06      	ldr	r3, [pc, #24]	; (8002eac <vTask_Break+0x70>)
 8002e94:	6818      	ldr	r0, [r3, #0]
 8002e96:	2300      	movs	r3, #0
 8002e98:	2200      	movs	r2, #0
 8002e9a:	2100      	movs	r1, #0
 8002e9c:	f00c fe1e 	bl	800fadc <xQueueGenericSend>
//		VBus_raw = HAL_ADC_GetValue(&hadc4);
//		if(xSemaphoreTake(xUartMutex, portMAX_DELAY) == pdTRUE){
//			printf("Vbus 0x%4\r\n", VBus_raw);
//			xSemaphoreGive(xUartMutex);
//		}
		vTaskDelay(1000);
 8002ea0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002ea4:	f00d fc12 	bl	80106cc <vTaskDelay>
 8002ea8:	e7fa      	b.n	8002ea0 <vTask_Break+0x64>
 8002eaa:	bf00      	nop
 8002eac:	200005d4 	.word	0x200005d4
 8002eb0:	08015820 	.word	0x08015820
 8002eb4:	08015838 	.word	0x08015838

08002eb8 <Break_Init>:
	}
}

void Break_Init(BREAK_HandleTypeDef* hbreak, TIM_HandleTypeDef* htim){
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b082      	sub	sp, #8
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
 8002ec0:	6039      	str	r1, [r7, #0]
	hbreak->htim = htim;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	683a      	ldr	r2, [r7, #0]
 8002ec6:	601a      	str	r2, [r3, #0]
	hbreak->Max_Pwm = __HAL_TIM_GET_AUTORELOAD(htim);
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ece:	b29a      	uxth	r2, r3
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	809a      	strh	r2, [r3, #4]
	hbreak->Pwm = 0;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	80da      	strh	r2, [r3, #6]
	hbreak->Channel = BREAK_CHANNEL;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2200      	movs	r2, #0
 8002ede:	721a      	strb	r2, [r3, #8]
	Break_Set_DutyCycle(hbreak, 0);
 8002ee0:	ed9f 0a08 	vldr	s0, [pc, #32]	; 8002f04 <Break_Init+0x4c>
 8002ee4:	6878      	ldr	r0, [r7, #4]
 8002ee6:	f000 f80f 	bl	8002f08 <Break_Set_DutyCycle>
	HAL_TIM_PWM_Start(hbreak->htim, hbreak->Channel);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681a      	ldr	r2, [r3, #0]
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	7a1b      	ldrb	r3, [r3, #8]
 8002ef2:	4619      	mov	r1, r3
 8002ef4:	4610      	mov	r0, r2
 8002ef6:	f005 ff59 	bl	8008dac <HAL_TIM_PWM_Start>
}
 8002efa:	bf00      	nop
 8002efc:	3708      	adds	r7, #8
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bd80      	pop	{r7, pc}
 8002f02:	bf00      	nop
 8002f04:	00000000 	.word	0x00000000

08002f08 <Break_Set_DutyCycle>:

void Break_Set_DutyCycle(BREAK_HandleTypeDef* hbreak, float dutyCycle){
 8002f08:	b480      	push	{r7}
 8002f0a:	b083      	sub	sp, #12
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
 8002f10:	ed87 0a00 	vstr	s0, [r7]
	hbreak->Pwm = (uint16_t)(dutyCycle*((float)hbreak->Max_Pwm));
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	889b      	ldrh	r3, [r3, #4]
 8002f18:	ee07 3a90 	vmov	s15, r3
 8002f1c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002f20:	edd7 7a00 	vldr	s15, [r7]
 8002f24:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f28:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002f2c:	ee17 3a90 	vmov	r3, s15
 8002f30:	b29a      	uxth	r2, r3
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	80da      	strh	r2, [r3, #6]
	__HAL_TIM_SET_COMPARE(hbreak->htim, hbreak->Channel, hbreak->Pwm);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	7a1b      	ldrb	r3, [r3, #8]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d106      	bne.n	8002f4c <Break_Set_DutyCycle+0x44>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	88da      	ldrh	r2, [r3, #6]
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	635a      	str	r2, [r3, #52]	; 0x34
}
 8002f4a:	e036      	b.n	8002fba <Break_Set_DutyCycle+0xb2>
	__HAL_TIM_SET_COMPARE(hbreak->htim, hbreak->Channel, hbreak->Pwm);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	7a1b      	ldrb	r3, [r3, #8]
 8002f50:	2b04      	cmp	r3, #4
 8002f52:	d107      	bne.n	8002f64 <Break_Set_DutyCycle+0x5c>
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	88d9      	ldrh	r1, [r3, #6]
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	681a      	ldr	r2, [r3, #0]
 8002f5e:	460b      	mov	r3, r1
 8002f60:	6393      	str	r3, [r2, #56]	; 0x38
}
 8002f62:	e02a      	b.n	8002fba <Break_Set_DutyCycle+0xb2>
	__HAL_TIM_SET_COMPARE(hbreak->htim, hbreak->Channel, hbreak->Pwm);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	7a1b      	ldrb	r3, [r3, #8]
 8002f68:	2b08      	cmp	r3, #8
 8002f6a:	d107      	bne.n	8002f7c <Break_Set_DutyCycle+0x74>
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	88d9      	ldrh	r1, [r3, #6]
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	681a      	ldr	r2, [r3, #0]
 8002f76:	460b      	mov	r3, r1
 8002f78:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8002f7a:	e01e      	b.n	8002fba <Break_Set_DutyCycle+0xb2>
	__HAL_TIM_SET_COMPARE(hbreak->htim, hbreak->Channel, hbreak->Pwm);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	7a1b      	ldrb	r3, [r3, #8]
 8002f80:	2b0c      	cmp	r3, #12
 8002f82:	d107      	bne.n	8002f94 <Break_Set_DutyCycle+0x8c>
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	88d9      	ldrh	r1, [r3, #6]
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	681a      	ldr	r2, [r3, #0]
 8002f8e:	460b      	mov	r3, r1
 8002f90:	6413      	str	r3, [r2, #64]	; 0x40
}
 8002f92:	e012      	b.n	8002fba <Break_Set_DutyCycle+0xb2>
	__HAL_TIM_SET_COMPARE(hbreak->htim, hbreak->Channel, hbreak->Pwm);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	7a1b      	ldrb	r3, [r3, #8]
 8002f98:	2b10      	cmp	r3, #16
 8002f9a:	d107      	bne.n	8002fac <Break_Set_DutyCycle+0xa4>
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	88d9      	ldrh	r1, [r3, #6]
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	681a      	ldr	r2, [r3, #0]
 8002fa6:	460b      	mov	r3, r1
 8002fa8:	6493      	str	r3, [r2, #72]	; 0x48
}
 8002faa:	e006      	b.n	8002fba <Break_Set_DutyCycle+0xb2>
	__HAL_TIM_SET_COMPARE(hbreak->htim, hbreak->Channel, hbreak->Pwm);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	88d9      	ldrh	r1, [r3, #6]
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	681a      	ldr	r2, [r3, #0]
 8002fb6:	460b      	mov	r3, r1
 8002fb8:	64d3      	str	r3, [r2, #76]	; 0x4c
}
 8002fba:	bf00      	nop
 8002fbc:	370c      	adds	r7, #12
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc4:	4770      	bx	lr
	...

08002fc8 <vTask_Button>:
extern TaskHandle_t xHandle_Button;
extern QueueHandle_t xExtIQueue;
extern TIM_HandleTypeDef htim17;
uint8_t break_state = 0;

void vTask_Button(void *pvParameters){
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b084      	sub	sp, #16
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
	Button_HandleTypeDef button;

	if(xSemaphoreTake(xUartMutex, portMAX_DELAY) == pdTRUE){
 8002fd0:	4b3a      	ldr	r3, [pc, #232]	; (80030bc <vTask_Button+0xf4>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002fd8:	4618      	mov	r0, r3
 8002fda:	f00c fff9 	bl	800ffd0 <xQueueSemaphoreTake>
 8002fde:	4603      	mov	r3, r0
 8002fe0:	2b01      	cmp	r3, #1
 8002fe2:	d109      	bne.n	8002ff8 <vTask_Button+0x30>
		printf("Init Button...         ");
 8002fe4:	4836      	ldr	r0, [pc, #216]	; (80030c0 <vTask_Button+0xf8>)
 8002fe6:	f00f ffd5 	bl	8012f94 <iprintf>
		xSemaphoreGive(xUartMutex);
 8002fea:	4b34      	ldr	r3, [pc, #208]	; (80030bc <vTask_Button+0xf4>)
 8002fec:	6818      	ldr	r0, [r3, #0]
 8002fee:	2300      	movs	r3, #0
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	2100      	movs	r1, #0
 8002ff4:	f00c fd72 	bl	800fadc <xQueueGenericSend>
	}
	Button_Init();
 8002ff8:	f000 f86e 	bl	80030d8 <Button_Init>
	if(xSemaphoreTake(xUartMutex, portMAX_DELAY) == pdTRUE){
 8002ffc:	4b2f      	ldr	r3, [pc, #188]	; (80030bc <vTask_Button+0xf4>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003004:	4618      	mov	r0, r3
 8003006:	f00c ffe3 	bl	800ffd0 <xQueueSemaphoreTake>
 800300a:	4603      	mov	r3, r0
 800300c:	2b01      	cmp	r3, #1
 800300e:	d109      	bne.n	8003024 <vTask_Button+0x5c>
		printf("Done\r\n");
 8003010:	482c      	ldr	r0, [pc, #176]	; (80030c4 <vTask_Button+0xfc>)
 8003012:	f010 f825 	bl	8013060 <puts>
		xSemaphoreGive(xUartMutex);
 8003016:	4b29      	ldr	r3, [pc, #164]	; (80030bc <vTask_Button+0xf4>)
 8003018:	6818      	ldr	r0, [r3, #0]
 800301a:	2300      	movs	r3, #0
 800301c:	2200      	movs	r2, #0
 800301e:	2100      	movs	r1, #0
 8003020:	f00c fd5c 	bl	800fadc <xQueueGenericSend>
	}

	for(;;){
		if(pdPASS == xQueueReceive(xExtIQueue, &button, portMAX_DELAY)){
 8003024:	4b28      	ldr	r3, [pc, #160]	; (80030c8 <vTask_Button+0x100>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f107 0108 	add.w	r1, r7, #8
 800302c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003030:	4618      	mov	r0, r3
 8003032:	f00c feed 	bl	800fe10 <xQueueReceive>
 8003036:	4603      	mov	r3, r0
 8003038:	2b01      	cmp	r3, #1
 800303a:	d139      	bne.n	80030b0 <vTask_Button+0xe8>
			switch(button.pin){
 800303c:	89bb      	ldrh	r3, [r7, #12]
 800303e:	2b80      	cmp	r3, #128	; 0x80
 8003040:	d02f      	beq.n	80030a2 <vTask_Button+0xda>
 8003042:	2b80      	cmp	r3, #128	; 0x80
 8003044:	dc2f      	bgt.n	80030a6 <vTask_Button+0xde>
 8003046:	2b40      	cmp	r3, #64	; 0x40
 8003048:	d02f      	beq.n	80030aa <vTask_Button+0xe2>
 800304a:	2b40      	cmp	r3, #64	; 0x40
 800304c:	dc2b      	bgt.n	80030a6 <vTask_Button+0xde>
 800304e:	2b20      	cmp	r3, #32
 8003050:	d02d      	beq.n	80030ae <vTask_Button+0xe6>
 8003052:	2b20      	cmp	r3, #32
 8003054:	dc27      	bgt.n	80030a6 <vTask_Button+0xde>
 8003056:	2b04      	cmp	r3, #4
 8003058:	d002      	beq.n	8003060 <vTask_Button+0x98>
 800305a:	2b10      	cmp	r3, #16
 800305c:	d00b      	beq.n	8003076 <vTask_Button+0xae>
			case Soft_NRST_Pin:	//0x0080 PB7
				break;
			case ENC_BTN_Pin:	//0x0020 PA5
				break;
			default:
				break;
 800305e:	e022      	b.n	80030a6 <vTask_Button+0xde>
				HAL_GPIO_TogglePin(Pwr_Enable_U_GPIO_Port, Pwr_Enable_U_Pin);
 8003060:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003064:	4819      	ldr	r0, [pc, #100]	; (80030cc <vTask_Button+0x104>)
 8003066:	f002 f927 	bl	80052b8 <HAL_GPIO_TogglePin>
				HAL_GPIO_TogglePin(Pwr_Enable_V_GPIO_Port, Pwr_Enable_V_Pin);
 800306a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800306e:	4817      	ldr	r0, [pc, #92]	; (80030cc <vTask_Button+0x104>)
 8003070:	f002 f922 	bl	80052b8 <HAL_GPIO_TogglePin>
				break;
 8003074:	e01c      	b.n	80030b0 <vTask_Button+0xe8>
				break_state = 1 - break_state;
 8003076:	4b16      	ldr	r3, [pc, #88]	; (80030d0 <vTask_Button+0x108>)
 8003078:	781b      	ldrb	r3, [r3, #0]
 800307a:	f1c3 0301 	rsb	r3, r3, #1
 800307e:	b2da      	uxtb	r2, r3
 8003080:	4b13      	ldr	r3, [pc, #76]	; (80030d0 <vTask_Button+0x108>)
 8003082:	701a      	strb	r2, [r3, #0]
				if(break_state){
 8003084:	4b12      	ldr	r3, [pc, #72]	; (80030d0 <vTask_Button+0x108>)
 8003086:	781b      	ldrb	r3, [r3, #0]
 8003088:	2b00      	cmp	r3, #0
 800308a:	d005      	beq.n	8003098 <vTask_Button+0xd0>
					__HAL_TIM_SET_COMPARE(&htim17, TIM_CHANNEL_1, 256);
 800308c:	4b11      	ldr	r3, [pc, #68]	; (80030d4 <vTask_Button+0x10c>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003094:	635a      	str	r2, [r3, #52]	; 0x34
				break;
 8003096:	e00b      	b.n	80030b0 <vTask_Button+0xe8>
					__HAL_TIM_SET_COMPARE(&htim17, TIM_CHANNEL_1, 0);
 8003098:	4b0e      	ldr	r3, [pc, #56]	; (80030d4 <vTask_Button+0x10c>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	2200      	movs	r2, #0
 800309e:	635a      	str	r2, [r3, #52]	; 0x34
				break;
 80030a0:	e006      	b.n	80030b0 <vTask_Button+0xe8>
				break;
 80030a2:	bf00      	nop
 80030a4:	e004      	b.n	80030b0 <vTask_Button+0xe8>
				break;
 80030a6:	bf00      	nop
 80030a8:	e002      	b.n	80030b0 <vTask_Button+0xe8>
				break;
 80030aa:	bf00      	nop
 80030ac:	e000      	b.n	80030b0 <vTask_Button+0xe8>
				break;
 80030ae:	bf00      	nop
			}
		}
		vTaskDelay(500);
 80030b0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80030b4:	f00d fb0a 	bl	80106cc <vTaskDelay>
		if(pdPASS == xQueueReceive(xExtIQueue, &button, portMAX_DELAY)){
 80030b8:	e7b4      	b.n	8003024 <vTask_Button+0x5c>
 80030ba:	bf00      	nop
 80030bc:	200005d4 	.word	0x200005d4
 80030c0:	08015840 	.word	0x08015840
 80030c4:	08015858 	.word	0x08015858
 80030c8:	200005e0 	.word	0x200005e0
 80030cc:	48000800 	.word	0x48000800
 80030d0:	20000948 	.word	0x20000948
 80030d4:	200007cc 	.word	0x200007cc

080030d8 <Button_Init>:
	}
}

void Button_Init(){
 80030d8:	b580      	push	{r7, lr}
 80030da:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Pwr_Enable_U_GPIO_Port, Pwr_Enable_U_Pin, RESET);
 80030dc:	2200      	movs	r2, #0
 80030de:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80030e2:	4808      	ldr	r0, [pc, #32]	; (8003104 <Button_Init+0x2c>)
 80030e4:	f002 f8d0 	bl	8005288 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Pwr_Enable_V_GPIO_Port, Pwr_Enable_V_Pin, RESET);
 80030e8:	2200      	movs	r2, #0
 80030ea:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80030ee:	4805      	ldr	r0, [pc, #20]	; (8003104 <Button_Init+0x2c>)
 80030f0:	f002 f8ca 	bl	8005288 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Pwr_Enable_W_GPIO_Port, Pwr_Enable_W_Pin, RESET);
 80030f4:	2200      	movs	r2, #0
 80030f6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80030fa:	4802      	ldr	r0, [pc, #8]	; (8003104 <Button_Init+0x2c>)
 80030fc:	f002 f8c4 	bl	8005288 <HAL_GPIO_WritePin>
}
 8003100:	bf00      	nop
 8003102:	bd80      	pop	{r7, pc}
 8003104:	48000800 	.word	0x48000800

08003108 <vTask_Fan>:
#include "semphr.h"

extern SemaphoreHandle_t xUartMutex;
extern QueueHandle_t xTemperatureQueue;

void vTask_Fan(void *pvParameters){
 8003108:	b580      	push	{r7, lr}
 800310a:	b088      	sub	sp, #32
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
	FAN_HandleTypeDef hfan1;
	float temperature;
	float speed = 0;
 8003110:	f04f 0300 	mov.w	r3, #0
 8003114:	61fb      	str	r3, [r7, #28]
	if(xSemaphoreTake(xUartMutex, portMAX_DELAY) == pdTRUE){
 8003116:	4b30      	ldr	r3, [pc, #192]	; (80031d8 <vTask_Fan+0xd0>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800311e:	4618      	mov	r0, r3
 8003120:	f00c ff56 	bl	800ffd0 <xQueueSemaphoreTake>
 8003124:	4603      	mov	r3, r0
 8003126:	2b01      	cmp	r3, #1
 8003128:	d109      	bne.n	800313e <vTask_Fan+0x36>
		printf("Init Fan...           ");
 800312a:	482c      	ldr	r0, [pc, #176]	; (80031dc <vTask_Fan+0xd4>)
 800312c:	f00f ff32 	bl	8012f94 <iprintf>
		xSemaphoreGive(xUartMutex);
 8003130:	4b29      	ldr	r3, [pc, #164]	; (80031d8 <vTask_Fan+0xd0>)
 8003132:	6818      	ldr	r0, [r3, #0]
 8003134:	2300      	movs	r3, #0
 8003136:	2200      	movs	r2, #0
 8003138:	2100      	movs	r1, #0
 800313a:	f00c fccf 	bl	800fadc <xQueueGenericSend>
	}
	Fan_Init(&hfan1, (TIM_HandleTypeDef*)pvParameters);
 800313e:	f107 0310 	add.w	r3, r7, #16
 8003142:	6879      	ldr	r1, [r7, #4]
 8003144:	4618      	mov	r0, r3
 8003146:	f000 f84f 	bl	80031e8 <Fan_Init>
	if(xSemaphoreTake(xUartMutex, portMAX_DELAY) == pdTRUE){
 800314a:	4b23      	ldr	r3, [pc, #140]	; (80031d8 <vTask_Fan+0xd0>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003152:	4618      	mov	r0, r3
 8003154:	f00c ff3c 	bl	800ffd0 <xQueueSemaphoreTake>
 8003158:	4603      	mov	r3, r0
 800315a:	2b01      	cmp	r3, #1
 800315c:	d109      	bne.n	8003172 <vTask_Fan+0x6a>
		printf(" Done\r\n");
 800315e:	4820      	ldr	r0, [pc, #128]	; (80031e0 <vTask_Fan+0xd8>)
 8003160:	f00f ff7e 	bl	8013060 <puts>
		xSemaphoreGive(xUartMutex);
 8003164:	4b1c      	ldr	r3, [pc, #112]	; (80031d8 <vTask_Fan+0xd0>)
 8003166:	6818      	ldr	r0, [r3, #0]
 8003168:	2300      	movs	r3, #0
 800316a:	2200      	movs	r2, #0
 800316c:	2100      	movs	r1, #0
 800316e:	f00c fcb5 	bl	800fadc <xQueueGenericSend>
	}

	for(;;){
		if(pdPASS == xQueueReceive(xTemperatureQueue, &temperature, portMAX_DELAY)){
 8003172:	4b1c      	ldr	r3, [pc, #112]	; (80031e4 <vTask_Fan+0xdc>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f107 010c 	add.w	r1, r7, #12
 800317a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800317e:	4618      	mov	r0, r3
 8003180:	f00c fe46 	bl	800fe10 <xQueueReceive>
 8003184:	4603      	mov	r3, r0
 8003186:	2b01      	cmp	r3, #1
 8003188:	d120      	bne.n	80031cc <vTask_Fan+0xc4>
			speed = (temperature > 30) ? 1 : ((temperature < 29) ? 0 : speed);
 800318a:	edd7 7a03 	vldr	s15, [r7, #12]
 800318e:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8003192:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003196:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800319a:	dd02      	ble.n	80031a2 <vTask_Fan+0x9a>
 800319c:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80031a0:	e00c      	b.n	80031bc <vTask_Fan+0xb4>
 80031a2:	edd7 7a03 	vldr	s15, [r7, #12]
 80031a6:	eeb3 7a0d 	vmov.f32	s14, #61	; 0x41e80000  29.0
 80031aa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80031ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031b2:	d502      	bpl.n	80031ba <vTask_Fan+0xb2>
 80031b4:	f04f 0300 	mov.w	r3, #0
 80031b8:	e000      	b.n	80031bc <vTask_Fan+0xb4>
 80031ba:	69fb      	ldr	r3, [r7, #28]
 80031bc:	61fb      	str	r3, [r7, #28]
			Fan_Set_Speed(&hfan1, speed);
 80031be:	f107 0310 	add.w	r3, r7, #16
 80031c2:	ed97 0a07 	vldr	s0, [r7, #28]
 80031c6:	4618      	mov	r0, r3
 80031c8:	f000 f836 	bl	8003238 <Fan_Set_Speed>
		}
		vTaskDelay(1000);
 80031cc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80031d0:	f00d fa7c 	bl	80106cc <vTaskDelay>
		if(pdPASS == xQueueReceive(xTemperatureQueue, &temperature, portMAX_DELAY)){
 80031d4:	e7cd      	b.n	8003172 <vTask_Fan+0x6a>
 80031d6:	bf00      	nop
 80031d8:	200005d4 	.word	0x200005d4
 80031dc:	08015860 	.word	0x08015860
 80031e0:	08015878 	.word	0x08015878
 80031e4:	200005dc 	.word	0x200005dc

080031e8 <Fan_Init>:
	}
}

void Fan_Init(FAN_HandleTypeDef* hfan, TIM_HandleTypeDef* htim){
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b082      	sub	sp, #8
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
 80031f0:	6039      	str	r1, [r7, #0]
	hfan->htim = htim;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	683a      	ldr	r2, [r7, #0]
 80031f6:	601a      	str	r2, [r3, #0]
	hfan->Max_Pwm = __HAL_TIM_GET_AUTORELOAD(htim);
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031fe:	b29a      	uxth	r2, r3
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	809a      	strh	r2, [r3, #4]
	hfan->Pwm = 0;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2200      	movs	r2, #0
 8003208:	80da      	strh	r2, [r3, #6]
	hfan->Channel = FAN_CHANNEL;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	2200      	movs	r2, #0
 800320e:	721a      	strb	r2, [r3, #8]
	Fan_Set_Speed(hfan, 0);
 8003210:	ed9f 0a08 	vldr	s0, [pc, #32]	; 8003234 <Fan_Init+0x4c>
 8003214:	6878      	ldr	r0, [r7, #4]
 8003216:	f000 f80f 	bl	8003238 <Fan_Set_Speed>
	HAL_TIM_PWM_Start(hfan->htim, hfan->Channel);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681a      	ldr	r2, [r3, #0]
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	7a1b      	ldrb	r3, [r3, #8]
 8003222:	4619      	mov	r1, r3
 8003224:	4610      	mov	r0, r2
 8003226:	f005 fdc1 	bl	8008dac <HAL_TIM_PWM_Start>
}
 800322a:	bf00      	nop
 800322c:	3708      	adds	r7, #8
 800322e:	46bd      	mov	sp, r7
 8003230:	bd80      	pop	{r7, pc}
 8003232:	bf00      	nop
 8003234:	00000000 	.word	0x00000000

08003238 <Fan_Set_Speed>:

void Fan_Set_Speed(FAN_HandleTypeDef* hfan, float speed){
 8003238:	b480      	push	{r7}
 800323a:	b083      	sub	sp, #12
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
 8003240:	ed87 0a00 	vstr	s0, [r7]
	hfan->Pwm = (uint16_t)(speed*((float)hfan->Max_Pwm));
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	889b      	ldrh	r3, [r3, #4]
 8003248:	ee07 3a90 	vmov	s15, r3
 800324c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003250:	edd7 7a00 	vldr	s15, [r7]
 8003254:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003258:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800325c:	ee17 3a90 	vmov	r3, s15
 8003260:	b29a      	uxth	r2, r3
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	80da      	strh	r2, [r3, #6]
	__HAL_TIM_SET_COMPARE(hfan->htim, hfan->Channel, hfan->Pwm);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	7a1b      	ldrb	r3, [r3, #8]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d106      	bne.n	800327c <Fan_Set_Speed+0x44>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	88da      	ldrh	r2, [r3, #6]
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	635a      	str	r2, [r3, #52]	; 0x34
}
 800327a:	e036      	b.n	80032ea <Fan_Set_Speed+0xb2>
	__HAL_TIM_SET_COMPARE(hfan->htim, hfan->Channel, hfan->Pwm);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	7a1b      	ldrb	r3, [r3, #8]
 8003280:	2b04      	cmp	r3, #4
 8003282:	d107      	bne.n	8003294 <Fan_Set_Speed+0x5c>
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	88d9      	ldrh	r1, [r3, #6]
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	681a      	ldr	r2, [r3, #0]
 800328e:	460b      	mov	r3, r1
 8003290:	6393      	str	r3, [r2, #56]	; 0x38
}
 8003292:	e02a      	b.n	80032ea <Fan_Set_Speed+0xb2>
	__HAL_TIM_SET_COMPARE(hfan->htim, hfan->Channel, hfan->Pwm);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	7a1b      	ldrb	r3, [r3, #8]
 8003298:	2b08      	cmp	r3, #8
 800329a:	d107      	bne.n	80032ac <Fan_Set_Speed+0x74>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	88d9      	ldrh	r1, [r3, #6]
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	681a      	ldr	r2, [r3, #0]
 80032a6:	460b      	mov	r3, r1
 80032a8:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 80032aa:	e01e      	b.n	80032ea <Fan_Set_Speed+0xb2>
	__HAL_TIM_SET_COMPARE(hfan->htim, hfan->Channel, hfan->Pwm);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	7a1b      	ldrb	r3, [r3, #8]
 80032b0:	2b0c      	cmp	r3, #12
 80032b2:	d107      	bne.n	80032c4 <Fan_Set_Speed+0x8c>
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	88d9      	ldrh	r1, [r3, #6]
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	681a      	ldr	r2, [r3, #0]
 80032be:	460b      	mov	r3, r1
 80032c0:	6413      	str	r3, [r2, #64]	; 0x40
}
 80032c2:	e012      	b.n	80032ea <Fan_Set_Speed+0xb2>
	__HAL_TIM_SET_COMPARE(hfan->htim, hfan->Channel, hfan->Pwm);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	7a1b      	ldrb	r3, [r3, #8]
 80032c8:	2b10      	cmp	r3, #16
 80032ca:	d107      	bne.n	80032dc <Fan_Set_Speed+0xa4>
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	88d9      	ldrh	r1, [r3, #6]
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	681a      	ldr	r2, [r3, #0]
 80032d6:	460b      	mov	r3, r1
 80032d8:	6493      	str	r3, [r2, #72]	; 0x48
}
 80032da:	e006      	b.n	80032ea <Fan_Set_Speed+0xb2>
	__HAL_TIM_SET_COMPARE(hfan->htim, hfan->Channel, hfan->Pwm);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	88d9      	ldrh	r1, [r3, #6]
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	681a      	ldr	r2, [r3, #0]
 80032e6:	460b      	mov	r3, r1
 80032e8:	64d3      	str	r3, [r2, #76]	; 0x4c
}
 80032ea:	bf00      	nop
 80032ec:	370c      	adds	r7, #12
 80032ee:	46bd      	mov	sp, r7
 80032f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f4:	4770      	bx	lr
	...

080032f8 <vTask_LCD>:
LCD_HandleTypeDef hlcd1;
uint8_t LCD_Text_Buffer[_LCD_MAX_CHAR];
const uint8_t _ROW_16[] = {0x80, 0xC0};

// Task
void vTask_LCD(void *pvParameters){
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b084      	sub	sp, #16
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
	int time = 0;
 8003300:	2300      	movs	r3, #0
 8003302:	60fb      	str	r3, [r7, #12]
	I2C_HandleTypeDef* hi2c = (I2C_HandleTypeDef*) pvParameters;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	60bb      	str	r3, [r7, #8]
	if(xSemaphoreTake(xUartMutex, portMAX_DELAY) == pdTRUE){
 8003308:	4b21      	ldr	r3, [pc, #132]	; (8003390 <vTask_LCD+0x98>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003310:	4618      	mov	r0, r3
 8003312:	f00c fe5d 	bl	800ffd0 <xQueueSemaphoreTake>
 8003316:	4603      	mov	r3, r0
 8003318:	2b01      	cmp	r3, #1
 800331a:	d109      	bne.n	8003330 <vTask_LCD+0x38>
		printf("Init Task LCD...      ");
 800331c:	481d      	ldr	r0, [pc, #116]	; (8003394 <vTask_LCD+0x9c>)
 800331e:	f00f fe39 	bl	8012f94 <iprintf>
		xSemaphoreGive(xUartMutex);
 8003322:	4b1b      	ldr	r3, [pc, #108]	; (8003390 <vTask_LCD+0x98>)
 8003324:	6818      	ldr	r0, [r3, #0]
 8003326:	2300      	movs	r3, #0
 8003328:	2200      	movs	r2, #0
 800332a:	2100      	movs	r1, #0
 800332c:	f00c fbd6 	bl	800fadc <xQueueGenericSend>
	}
	LCD_Init(&hlcd1, hi2c);
 8003330:	68b9      	ldr	r1, [r7, #8]
 8003332:	4819      	ldr	r0, [pc, #100]	; (8003398 <vTask_LCD+0xa0>)
 8003334:	f000 f8a2 	bl	800347c <LCD_Init>
	if(xSemaphoreTake(xUartMutex, portMAX_DELAY) == pdTRUE){
 8003338:	4b15      	ldr	r3, [pc, #84]	; (8003390 <vTask_LCD+0x98>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003340:	4618      	mov	r0, r3
 8003342:	f00c fe45 	bl	800ffd0 <xQueueSemaphoreTake>
 8003346:	4603      	mov	r3, r0
 8003348:	2b01      	cmp	r3, #1
 800334a:	d109      	bne.n	8003360 <vTask_LCD+0x68>
		printf(" Done\r\n");
 800334c:	4813      	ldr	r0, [pc, #76]	; (800339c <vTask_LCD+0xa4>)
 800334e:	f00f fe87 	bl	8013060 <puts>
		xSemaphoreGive(xUartMutex);
 8003352:	4b0f      	ldr	r3, [pc, #60]	; (8003390 <vTask_LCD+0x98>)
 8003354:	6818      	ldr	r0, [r3, #0]
 8003356:	2300      	movs	r3, #0
 8003358:	2200      	movs	r2, #0
 800335a:	2100      	movs	r1, #0
 800335c:	f00c fbbe 	bl	800fadc <xQueueGenericSend>
	}
	for(;;){
		snprintf((char*)(&hlcd1)->LCD_Text_Buffer, _LCD_MAX_CHAR, "Time : %4d sec", time);
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	4a0f      	ldr	r2, [pc, #60]	; (80033a0 <vTask_LCD+0xa8>)
 8003364:	2121      	movs	r1, #33	; 0x21
 8003366:	480f      	ldr	r0, [pc, #60]	; (80033a4 <vTask_LCD+0xac>)
 8003368:	f00f fe82 	bl	8013070 <sniprintf>
		LCD_Print(&hlcd1, (&hlcd1)->LCD_Text_Buffer, _LCD_1ST_LINE);
 800336c:	2200      	movs	r2, #0
 800336e:	490d      	ldr	r1, [pc, #52]	; (80033a4 <vTask_LCD+0xac>)
 8003370:	4809      	ldr	r0, [pc, #36]	; (8003398 <vTask_LCD+0xa0>)
 8003372:	f000 f8df 	bl	8003534 <LCD_Print>
		vTaskDelay(1000);
 8003376:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800337a:	f00d f9a7 	bl	80106cc <vTaskDelay>
		time++;
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	3301      	adds	r3, #1
 8003382:	60fb      	str	r3, [r7, #12]
		HAL_GPIO_TogglePin(USR_LED_1_GPIO_Port, USR_LED_1_Pin);
 8003384:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003388:	4807      	ldr	r0, [pc, #28]	; (80033a8 <vTask_LCD+0xb0>)
 800338a:	f001 ff95 	bl	80052b8 <HAL_GPIO_TogglePin>
	for(;;){
 800338e:	e7e7      	b.n	8003360 <vTask_LCD+0x68>
 8003390:	200005d4 	.word	0x200005d4
 8003394:	08015880 	.word	0x08015880
 8003398:	2000094c 	.word	0x2000094c
 800339c:	08015898 	.word	0x08015898
 80033a0:	080158a0 	.word	0x080158a0
 80033a4:	20000956 	.word	0x20000956
 80033a8:	48000800 	.word	0x48000800

080033ac <LCD_Send_Command>:
	}
}

// Fonction d'écriture d'une commande sur l'écran LCD
HAL_StatusTypeDef LCD_Send_Command(LCD_HandleTypeDef *hlcd, uint8_t command) {
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b086      	sub	sp, #24
 80033b0:	af02      	add	r7, sp, #8
 80033b2:	6078      	str	r0, [r7, #4]
 80033b4:	460b      	mov	r3, r1
 80033b6:	70fb      	strb	r3, [r7, #3]
	uint8_t data[2] = {hlcd->LCD_Command, command};
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	795b      	ldrb	r3, [r3, #5]
 80033bc:	733b      	strb	r3, [r7, #12]
 80033be:	78fb      	ldrb	r3, [r7, #3]
 80033c0:	737b      	strb	r3, [r7, #13]
	HAL_StatusTypeDef ret;
	if(xSemaphoreTake(xI2CMutex, portMAX_DELAY)==pdTRUE){
 80033c2:	4b13      	ldr	r3, [pc, #76]	; (8003410 <LCD_Send_Command+0x64>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80033ca:	4618      	mov	r0, r3
 80033cc:	f00c fe00 	bl	800ffd0 <xQueueSemaphoreTake>
 80033d0:	4603      	mov	r3, r0
 80033d2:	2b01      	cmp	r3, #1
 80033d4:	d117      	bne.n	8003406 <LCD_Send_Command+0x5a>
		ret = HAL_I2C_Master_Transmit(hlcd->LCD_hi2c, hlcd->LCD_I2C_addr<<1, data, sizeof(data), HAL_MAX_DELAY);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6818      	ldr	r0, [r3, #0]
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	791b      	ldrb	r3, [r3, #4]
 80033de:	b29b      	uxth	r3, r3
 80033e0:	005b      	lsls	r3, r3, #1
 80033e2:	b299      	uxth	r1, r3
 80033e4:	f107 020c 	add.w	r2, r7, #12
 80033e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80033ec:	9300      	str	r3, [sp, #0]
 80033ee:	2302      	movs	r3, #2
 80033f0:	f002 f824 	bl	800543c <HAL_I2C_Master_Transmit>
 80033f4:	4603      	mov	r3, r0
 80033f6:	73fb      	strb	r3, [r7, #15]
		xSemaphoreGive(xI2CMutex);
 80033f8:	4b05      	ldr	r3, [pc, #20]	; (8003410 <LCD_Send_Command+0x64>)
 80033fa:	6818      	ldr	r0, [r3, #0]
 80033fc:	2300      	movs	r3, #0
 80033fe:	2200      	movs	r2, #0
 8003400:	2100      	movs	r1, #0
 8003402:	f00c fb6b 	bl	800fadc <xQueueGenericSend>
	}
	return ret;
 8003406:	7bfb      	ldrb	r3, [r7, #15]
}
 8003408:	4618      	mov	r0, r3
 800340a:	3710      	adds	r7, #16
 800340c:	46bd      	mov	sp, r7
 800340e:	bd80      	pop	{r7, pc}
 8003410:	200005d8 	.word	0x200005d8

08003414 <LCD_Send_Data>:

// Fonction d'écriture d'une donnée (caractère) sur l'écran LCD
HAL_StatusTypeDef LCD_Send_Data(LCD_HandleTypeDef *hlcd, uint8_t data) {
 8003414:	b580      	push	{r7, lr}
 8003416:	b086      	sub	sp, #24
 8003418:	af02      	add	r7, sp, #8
 800341a:	6078      	str	r0, [r7, #4]
 800341c:	460b      	mov	r3, r1
 800341e:	70fb      	strb	r3, [r7, #3]
	uint8_t data_array[2] = {hlcd->LCD_Data, data};
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	799b      	ldrb	r3, [r3, #6]
 8003424:	733b      	strb	r3, [r7, #12]
 8003426:	78fb      	ldrb	r3, [r7, #3]
 8003428:	737b      	strb	r3, [r7, #13]
	HAL_StatusTypeDef ret;
	if(xSemaphoreTake(xI2CMutex, portMAX_DELAY)==pdTRUE){
 800342a:	4b13      	ldr	r3, [pc, #76]	; (8003478 <LCD_Send_Data+0x64>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003432:	4618      	mov	r0, r3
 8003434:	f00c fdcc 	bl	800ffd0 <xQueueSemaphoreTake>
 8003438:	4603      	mov	r3, r0
 800343a:	2b01      	cmp	r3, #1
 800343c:	d117      	bne.n	800346e <LCD_Send_Data+0x5a>
		ret = HAL_I2C_Master_Transmit(hlcd->LCD_hi2c, hlcd->LCD_I2C_addr<<1, data_array, sizeof(data_array), HAL_MAX_DELAY);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6818      	ldr	r0, [r3, #0]
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	791b      	ldrb	r3, [r3, #4]
 8003446:	b29b      	uxth	r3, r3
 8003448:	005b      	lsls	r3, r3, #1
 800344a:	b299      	uxth	r1, r3
 800344c:	f107 020c 	add.w	r2, r7, #12
 8003450:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003454:	9300      	str	r3, [sp, #0]
 8003456:	2302      	movs	r3, #2
 8003458:	f001 fff0 	bl	800543c <HAL_I2C_Master_Transmit>
 800345c:	4603      	mov	r3, r0
 800345e:	73fb      	strb	r3, [r7, #15]
		xSemaphoreGive(xI2CMutex);
 8003460:	4b05      	ldr	r3, [pc, #20]	; (8003478 <LCD_Send_Data+0x64>)
 8003462:	6818      	ldr	r0, [r3, #0]
 8003464:	2300      	movs	r3, #0
 8003466:	2200      	movs	r2, #0
 8003468:	2100      	movs	r1, #0
 800346a:	f00c fb37 	bl	800fadc <xQueueGenericSend>
	}
	return ret;
 800346e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003470:	4618      	mov	r0, r3
 8003472:	3710      	adds	r7, #16
 8003474:	46bd      	mov	sp, r7
 8003476:	bd80      	pop	{r7, pc}
 8003478:	200005d8 	.word	0x200005d8

0800347c <LCD_Init>:

// Fonction d'initialisation de l'écran LCD
void LCD_Init(LCD_HandleTypeDef *hlcd, I2C_HandleTypeDef *hi2c) {
 800347c:	b580      	push	{r7, lr}
 800347e:	b082      	sub	sp, #8
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
 8003484:	6039      	str	r1, [r7, #0]
	//	int debug;
	//	uint8_t data[2];
	hlcd->LCD_hi2c = hi2c;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	683a      	ldr	r2, [r7, #0]
 800348a:	601a      	str	r2, [r3, #0]
	hlcd->LCD_I2C_addr = _LCD_I2C_TXT_ADDR;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	223e      	movs	r2, #62	; 0x3e
 8003490:	711a      	strb	r2, [r3, #4]
	hlcd->LCD_Command = _LCD_COMMAND;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2280      	movs	r2, #128	; 0x80
 8003496:	715a      	strb	r2, [r3, #5]
	hlcd->LCD_Data = _LCD_DATA;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2240      	movs	r2, #64	; 0x40
 800349c:	719a      	strb	r2, [r3, #6]
	hlcd->LCD_Background_Color[0] = 0;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2200      	movs	r2, #0
 80034a2:	71da      	strb	r2, [r3, #7]
	hlcd->LCD_Background_Color[1] = 255;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	22ff      	movs	r2, #255	; 0xff
 80034a8:	721a      	strb	r2, [r3, #8]
	hlcd->LCD_Background_Color[2] = 128;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2280      	movs	r2, #128	; 0x80
 80034ae:	725a      	strb	r2, [r3, #9]
	sprintf((char*)hlcd->LCD_Text_Buffer,"");
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	330a      	adds	r3, #10
 80034b4:	491e      	ldr	r1, [pc, #120]	; (8003530 <LCD_Init+0xb4>)
 80034b6:	4618      	mov	r0, r3
 80034b8:	f00f fe0e 	bl	80130d8 <siprintf>

	HAL_Delay(50);
 80034bc:	2032      	movs	r0, #50	; 0x32
 80034be:	f000 fa77 	bl	80039b0 <HAL_Delay>
	LCD_Send_Command(hlcd, _LCD_FUNCTIONSET | _LCD_4BITMODE | _LCD_1LINE | _LCD_5x8DOTS);
 80034c2:	2120      	movs	r1, #32
 80034c4:	6878      	ldr	r0, [r7, #4]
 80034c6:	f7ff ff71 	bl	80033ac <LCD_Send_Command>
	//	LCD_Send_Command(hlcd, 0x28);
	HAL_Delay(5);
 80034ca:	2005      	movs	r0, #5
 80034cc:	f000 fa70 	bl	80039b0 <HAL_Delay>
	LCD_Send_Command(hlcd, _LCD_FUNCTIONSET | _LCD_4BITMODE | _LCD_1LINE | _LCD_5x8DOTS);
 80034d0:	2120      	movs	r1, #32
 80034d2:	6878      	ldr	r0, [r7, #4]
 80034d4:	f7ff ff6a 	bl	80033ac <LCD_Send_Command>
	//	LCD_Send_Command(hlcd, 0x28);
	HAL_Delay(1);
 80034d8:	2001      	movs	r0, #1
 80034da:	f000 fa69 	bl	80039b0 <HAL_Delay>
	LCD_Send_Command(hlcd, _LCD_FUNCTIONSET | _LCD_4BITMODE | _LCD_1LINE | _LCD_5x8DOTS);
 80034de:	2120      	movs	r1, #32
 80034e0:	6878      	ldr	r0, [r7, #4]
 80034e2:	f7ff ff63 	bl	80033ac <LCD_Send_Command>
	//	LCD_Send_Command(hlcd, 0x28);
	HAL_Delay(1);
 80034e6:	2001      	movs	r0, #1
 80034e8:	f000 fa62 	bl	80039b0 <HAL_Delay>
	LCD_Send_Command(hlcd, _LCD_FUNCTIONSET | _LCD_4BITMODE | _LCD_1LINE | _LCD_5x8DOTS);
 80034ec:	2120      	movs	r1, #32
 80034ee:	6878      	ldr	r0, [r7, #4]
 80034f0:	f7ff ff5c 	bl	80033ac <LCD_Send_Command>
	//	LCD_Send_Command(hlcd, 0x28);

	LCD_Send_Command(hlcd, _LCD_DISPLAYCONTROL | _LCD_DISPLAYON | _LCD_CURSORON | _LCD_BLINKON);
 80034f4:	210f      	movs	r1, #15
 80034f6:	6878      	ldr	r0, [r7, #4]
 80034f8:	f7ff ff58 	bl	80033ac <LCD_Send_Command>
	LCD_Send_Command(hlcd, _LCD_CLEARDISPLAY);
 80034fc:	2101      	movs	r1, #1
 80034fe:	6878      	ldr	r0, [r7, #4]
 8003500:	f7ff ff54 	bl	80033ac <LCD_Send_Command>
	HAL_Delay(2);
 8003504:	2002      	movs	r0, #2
 8003506:	f000 fa53 	bl	80039b0 <HAL_Delay>
	LCD_Send_Command(hlcd, _LCD_ENTRYMODESET | _LCD_ENTRYLEFT | _LCD_ENTRYSHIFTDECREMENT);
 800350a:	2106      	movs	r1, #6
 800350c:	6878      	ldr	r0, [r7, #4]
 800350e:	f7ff ff4d 	bl	80033ac <LCD_Send_Command>
	//	LCD_Send_Command(hlcd, 0x28);
	//	LCD_Send_Command(hlcd, 0x01);
	//	LCD_Send_Command(hlcd, 0x0C);
	//	LCD_Send_Command(hlcd, 0x06);

	LCD_Background_Init(hlcd);
 8003512:	6878      	ldr	r0, [r7, #4]
 8003514:	f000 f838 	bl	8003588 <LCD_Background_Init>
	LCD_Set_Background_Color(hlcd, hlcd->LCD_Background_Color, _DIMMING_HALF);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	3307      	adds	r3, #7
 800351c:	2201      	movs	r2, #1
 800351e:	4619      	mov	r1, r3
 8003520:	6878      	ldr	r0, [r7, #4]
 8003522:	f000 f88f 	bl	8003644 <LCD_Set_Background_Color>
}
 8003526:	bf00      	nop
 8003528:	3708      	adds	r7, #8
 800352a:	46bd      	mov	sp, r7
 800352c:	bd80      	pop	{r7, pc}
 800352e:	bf00      	nop
 8003530:	080158b0 	.word	0x080158b0

08003534 <LCD_Print>:

void LCD_Clear(LCD_HandleTypeDef *hlcd) {
	LCD_Send_Command(hlcd, _LCD_CLEARDISPLAY);
}

void LCD_Print(LCD_HandleTypeDef *hlcd, uint8_t *message, uint8_t line){
 8003534:	b580      	push	{r7, lr}
 8003536:	b086      	sub	sp, #24
 8003538:	af00      	add	r7, sp, #0
 800353a:	60f8      	str	r0, [r7, #12]
 800353c:	60b9      	str	r1, [r7, #8]
 800353e:	4613      	mov	r3, r2
 8003540:	71fb      	strb	r3, [r7, #7]
	LCD_Send_Command(hlcd, _ROW_16[line]);
 8003542:	79fb      	ldrb	r3, [r7, #7]
 8003544:	4a0f      	ldr	r2, [pc, #60]	; (8003584 <LCD_Print+0x50>)
 8003546:	5cd3      	ldrb	r3, [r2, r3]
 8003548:	4619      	mov	r1, r3
 800354a:	68f8      	ldr	r0, [r7, #12]
 800354c:	f7ff ff2e 	bl	80033ac <LCD_Send_Command>
	uint8_t i = 0;
 8003550:	2300      	movs	r3, #0
 8003552:	75fb      	strb	r3, [r7, #23]
	while (message[i] != '\0') {
 8003554:	e00a      	b.n	800356c <LCD_Print+0x38>
		LCD_Send_Data(hlcd, message[i]);
 8003556:	7dfb      	ldrb	r3, [r7, #23]
 8003558:	68ba      	ldr	r2, [r7, #8]
 800355a:	4413      	add	r3, r2
 800355c:	781b      	ldrb	r3, [r3, #0]
 800355e:	4619      	mov	r1, r3
 8003560:	68f8      	ldr	r0, [r7, #12]
 8003562:	f7ff ff57 	bl	8003414 <LCD_Send_Data>
		i++;
 8003566:	7dfb      	ldrb	r3, [r7, #23]
 8003568:	3301      	adds	r3, #1
 800356a:	75fb      	strb	r3, [r7, #23]
	while (message[i] != '\0') {
 800356c:	7dfb      	ldrb	r3, [r7, #23]
 800356e:	68ba      	ldr	r2, [r7, #8]
 8003570:	4413      	add	r3, r2
 8003572:	781b      	ldrb	r3, [r3, #0]
 8003574:	2b00      	cmp	r3, #0
 8003576:	d1ee      	bne.n	8003556 <LCD_Print+0x22>
	}
}
 8003578:	bf00      	nop
 800357a:	bf00      	nop
 800357c:	3718      	adds	r7, #24
 800357e:	46bd      	mov	sp, r7
 8003580:	bd80      	pop	{r7, pc}
 8003582:	bf00      	nop
 8003584:	08015970 	.word	0x08015970

08003588 <LCD_Background_Init>:

void LCD_Background_Init(LCD_HandleTypeDef *hlcd){
 8003588:	b580      	push	{r7, lr}
 800358a:	b086      	sub	sp, #24
 800358c:	af02      	add	r7, sp, #8
 800358e:	6078      	str	r0, [r7, #4]
	uint8_t data[2];
	if(xSemaphoreTake(xI2CMutex, portMAX_DELAY)==pdTRUE){
 8003590:	4b2b      	ldr	r3, [pc, #172]	; (8003640 <LCD_Background_Init+0xb8>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003598:	4618      	mov	r0, r3
 800359a:	f00c fd19 	bl	800ffd0 <xQueueSemaphoreTake>
 800359e:	4603      	mov	r3, r0
 80035a0:	2b01      	cmp	r3, #1
 80035a2:	d133      	bne.n	800360c <LCD_Background_Init+0x84>
		data[0] = _REG_MODE1;
 80035a4:	2300      	movs	r3, #0
 80035a6:	723b      	strb	r3, [r7, #8]
		data[1] = 0x00;
 80035a8:	2300      	movs	r3, #0
 80035aa:	727b      	strb	r3, [r7, #9]
		HAL_I2C_Master_Transmit(hlcd->LCD_hi2c, _LCD_I2C_RGB_ADDR<<1, data, 2, HAL_MAX_DELAY);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6818      	ldr	r0, [r3, #0]
 80035b0:	f107 0208 	add.w	r2, r7, #8
 80035b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80035b8:	9300      	str	r3, [sp, #0]
 80035ba:	2302      	movs	r3, #2
 80035bc:	21c4      	movs	r1, #196	; 0xc4
 80035be:	f001 ff3d 	bl	800543c <HAL_I2C_Master_Transmit>
		data[0] = _REG_OUTPUT;
 80035c2:	2308      	movs	r3, #8
 80035c4:	723b      	strb	r3, [r7, #8]
		data[1] = 0xFF;
 80035c6:	23ff      	movs	r3, #255	; 0xff
 80035c8:	727b      	strb	r3, [r7, #9]
		HAL_I2C_Master_Transmit(hlcd->LCD_hi2c, _LCD_I2C_RGB_ADDR<<1, data, 2, HAL_MAX_DELAY);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6818      	ldr	r0, [r3, #0]
 80035ce:	f107 0208 	add.w	r2, r7, #8
 80035d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80035d6:	9300      	str	r3, [sp, #0]
 80035d8:	2302      	movs	r3, #2
 80035da:	21c4      	movs	r1, #196	; 0xc4
 80035dc:	f001 ff2e 	bl	800543c <HAL_I2C_Master_Transmit>
		data[0] = _REG_MODE2;
 80035e0:	2301      	movs	r3, #1
 80035e2:	723b      	strb	r3, [r7, #8]
		data[1] = 0x20;
 80035e4:	2320      	movs	r3, #32
 80035e6:	727b      	strb	r3, [r7, #9]
		HAL_I2C_Master_Transmit(hlcd->LCD_hi2c, _LCD_I2C_RGB_ADDR<<1, data, 2, HAL_MAX_DELAY);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6818      	ldr	r0, [r3, #0]
 80035ec:	f107 0208 	add.w	r2, r7, #8
 80035f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80035f4:	9300      	str	r3, [sp, #0]
 80035f6:	2302      	movs	r3, #2
 80035f8:	21c4      	movs	r1, #196	; 0xc4
 80035fa:	f001 ff1f 	bl	800543c <HAL_I2C_Master_Transmit>
		xSemaphoreGive(xI2CMutex);
 80035fe:	4b10      	ldr	r3, [pc, #64]	; (8003640 <LCD_Background_Init+0xb8>)
 8003600:	6818      	ldr	r0, [r3, #0]
 8003602:	2300      	movs	r3, #0
 8003604:	2200      	movs	r2, #0
 8003606:	2100      	movs	r1, #0
 8003608:	f00c fa68 	bl	800fadc <xQueueGenericSend>
	}
	for(int blink_idx = 0; blink_idx<10; blink_idx++){
 800360c:	2300      	movs	r3, #0
 800360e:	60fb      	str	r3, [r7, #12]
 8003610:	e00e      	b.n	8003630 <LCD_Background_Init+0xa8>
		LCD_Set_Background_Color_White(hlcd);
 8003612:	6878      	ldr	r0, [r7, #4]
 8003614:	f000 f876 	bl	8003704 <LCD_Set_Background_Color_White>
		HAL_Delay(50);
 8003618:	2032      	movs	r0, #50	; 0x32
 800361a:	f000 f9c9 	bl	80039b0 <HAL_Delay>
		LCD_Set_Background_Color_Red(hlcd);
 800361e:	6878      	ldr	r0, [r7, #4]
 8003620:	f000 f88a 	bl	8003738 <LCD_Set_Background_Color_Red>
		HAL_Delay(50);
 8003624:	2032      	movs	r0, #50	; 0x32
 8003626:	f000 f9c3 	bl	80039b0 <HAL_Delay>
	for(int blink_idx = 0; blink_idx<10; blink_idx++){
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	3301      	adds	r3, #1
 800362e:	60fb      	str	r3, [r7, #12]
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	2b09      	cmp	r3, #9
 8003634:	dded      	ble.n	8003612 <LCD_Background_Init+0x8a>
	}
}
 8003636:	bf00      	nop
 8003638:	bf00      	nop
 800363a:	3710      	adds	r7, #16
 800363c:	46bd      	mov	sp, r7
 800363e:	bd80      	pop	{r7, pc}
 8003640:	200005d8 	.word	0x200005d8

08003644 <LCD_Set_Background_Color>:

void LCD_Set_Background_Color(LCD_HandleTypeDef *hlcd, uint8_t rgb[3], uint8_t dimming){
 8003644:	b580      	push	{r7, lr}
 8003646:	b088      	sub	sp, #32
 8003648:	af02      	add	r7, sp, #8
 800364a:	60f8      	str	r0, [r7, #12]
 800364c:	60b9      	str	r1, [r7, #8]
 800364e:	4613      	mov	r3, r2
 8003650:	71fb      	strb	r3, [r7, #7]
	uint8_t data[2];
	if(xSemaphoreTake(xI2CMutex, portMAX_DELAY)==pdTRUE){
 8003652:	4b2b      	ldr	r3, [pc, #172]	; (8003700 <LCD_Set_Background_Color+0xbc>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800365a:	4618      	mov	r0, r3
 800365c:	f00c fcb8 	bl	800ffd0 <xQueueSemaphoreTake>
 8003660:	4603      	mov	r3, r0
 8003662:	2b01      	cmp	r3, #1
 8003664:	d147      	bne.n	80036f6 <LCD_Set_Background_Color+0xb2>
		data[0] = 0x04;
 8003666:	2304      	movs	r3, #4
 8003668:	753b      	strb	r3, [r7, #20]
		data[1] = rgb[0]>>dimming;
 800366a:	68bb      	ldr	r3, [r7, #8]
 800366c:	781b      	ldrb	r3, [r3, #0]
 800366e:	461a      	mov	r2, r3
 8003670:	79fb      	ldrb	r3, [r7, #7]
 8003672:	fa42 f303 	asr.w	r3, r2, r3
 8003676:	b2db      	uxtb	r3, r3
 8003678:	757b      	strb	r3, [r7, #21]
		HAL_I2C_Master_Transmit(hlcd->LCD_hi2c, _LCD_I2C_RGB_ADDR<<1, data, 2, HAL_MAX_DELAY);
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	6818      	ldr	r0, [r3, #0]
 800367e:	f107 0214 	add.w	r2, r7, #20
 8003682:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003686:	9300      	str	r3, [sp, #0]
 8003688:	2302      	movs	r3, #2
 800368a:	21c4      	movs	r1, #196	; 0xc4
 800368c:	f001 fed6 	bl	800543c <HAL_I2C_Master_Transmit>

		data[0] = 0x03;
 8003690:	2303      	movs	r3, #3
 8003692:	753b      	strb	r3, [r7, #20]
		data[1] = rgb[1]>>dimming;
 8003694:	68bb      	ldr	r3, [r7, #8]
 8003696:	3301      	adds	r3, #1
 8003698:	781b      	ldrb	r3, [r3, #0]
 800369a:	461a      	mov	r2, r3
 800369c:	79fb      	ldrb	r3, [r7, #7]
 800369e:	fa42 f303 	asr.w	r3, r2, r3
 80036a2:	b2db      	uxtb	r3, r3
 80036a4:	757b      	strb	r3, [r7, #21]
		HAL_I2C_Master_Transmit(hlcd->LCD_hi2c, _LCD_I2C_RGB_ADDR<<1, data, 2, HAL_MAX_DELAY);
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	6818      	ldr	r0, [r3, #0]
 80036aa:	f107 0214 	add.w	r2, r7, #20
 80036ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80036b2:	9300      	str	r3, [sp, #0]
 80036b4:	2302      	movs	r3, #2
 80036b6:	21c4      	movs	r1, #196	; 0xc4
 80036b8:	f001 fec0 	bl	800543c <HAL_I2C_Master_Transmit>

		data[0] = 0x02;
 80036bc:	2302      	movs	r3, #2
 80036be:	753b      	strb	r3, [r7, #20]
		data[1] = rgb[2]>>dimming;
 80036c0:	68bb      	ldr	r3, [r7, #8]
 80036c2:	3302      	adds	r3, #2
 80036c4:	781b      	ldrb	r3, [r3, #0]
 80036c6:	461a      	mov	r2, r3
 80036c8:	79fb      	ldrb	r3, [r7, #7]
 80036ca:	fa42 f303 	asr.w	r3, r2, r3
 80036ce:	b2db      	uxtb	r3, r3
 80036d0:	757b      	strb	r3, [r7, #21]
		HAL_I2C_Master_Transmit(hlcd->LCD_hi2c, _LCD_I2C_RGB_ADDR<<1, data, 2, HAL_MAX_DELAY);
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	6818      	ldr	r0, [r3, #0]
 80036d6:	f107 0214 	add.w	r2, r7, #20
 80036da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80036de:	9300      	str	r3, [sp, #0]
 80036e0:	2302      	movs	r3, #2
 80036e2:	21c4      	movs	r1, #196	; 0xc4
 80036e4:	f001 feaa 	bl	800543c <HAL_I2C_Master_Transmit>
		xSemaphoreGive(xI2CMutex);
 80036e8:	4b05      	ldr	r3, [pc, #20]	; (8003700 <LCD_Set_Background_Color+0xbc>)
 80036ea:	6818      	ldr	r0, [r3, #0]
 80036ec:	2300      	movs	r3, #0
 80036ee:	2200      	movs	r2, #0
 80036f0:	2100      	movs	r1, #0
 80036f2:	f00c f9f3 	bl	800fadc <xQueueGenericSend>
	}
}
 80036f6:	bf00      	nop
 80036f8:	3718      	adds	r7, #24
 80036fa:	46bd      	mov	sp, r7
 80036fc:	bd80      	pop	{r7, pc}
 80036fe:	bf00      	nop
 8003700:	200005d8 	.word	0x200005d8

08003704 <LCD_Set_Background_Color_White>:

void LCD_Set_Background_Color_White(LCD_HandleTypeDef *hlcd){
 8003704:	b580      	push	{r7, lr}
 8003706:	b084      	sub	sp, #16
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
	uint8_t rgb[3] = _COLOR_WHITE;
 800370c:	4a09      	ldr	r2, [pc, #36]	; (8003734 <LCD_Set_Background_Color_White+0x30>)
 800370e:	f107 030c 	add.w	r3, r7, #12
 8003712:	6812      	ldr	r2, [r2, #0]
 8003714:	4611      	mov	r1, r2
 8003716:	8019      	strh	r1, [r3, #0]
 8003718:	3302      	adds	r3, #2
 800371a:	0c12      	lsrs	r2, r2, #16
 800371c:	701a      	strb	r2, [r3, #0]
	LCD_Set_Background_Color(hlcd, rgb, _DIMMING_NO);
 800371e:	f107 030c 	add.w	r3, r7, #12
 8003722:	2200      	movs	r2, #0
 8003724:	4619      	mov	r1, r3
 8003726:	6878      	ldr	r0, [r7, #4]
 8003728:	f7ff ff8c 	bl	8003644 <LCD_Set_Background_Color>
}
 800372c:	bf00      	nop
 800372e:	3710      	adds	r7, #16
 8003730:	46bd      	mov	sp, r7
 8003732:	bd80      	pop	{r7, pc}
 8003734:	080158b4 	.word	0x080158b4

08003738 <LCD_Set_Background_Color_Red>:

void LCD_Set_Background_Color_Red(LCD_HandleTypeDef *hlcd){
 8003738:	b580      	push	{r7, lr}
 800373a:	b084      	sub	sp, #16
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
	uint8_t rgb[3] = _COLOR_RED;
 8003740:	4a09      	ldr	r2, [pc, #36]	; (8003768 <LCD_Set_Background_Color_Red+0x30>)
 8003742:	f107 030c 	add.w	r3, r7, #12
 8003746:	6812      	ldr	r2, [r2, #0]
 8003748:	4611      	mov	r1, r2
 800374a:	8019      	strh	r1, [r3, #0]
 800374c:	3302      	adds	r3, #2
 800374e:	0c12      	lsrs	r2, r2, #16
 8003750:	701a      	strb	r2, [r3, #0]
	LCD_Set_Background_Color(hlcd, rgb, _DIMMING_NO);
 8003752:	f107 030c 	add.w	r3, r7, #12
 8003756:	2200      	movs	r2, #0
 8003758:	4619      	mov	r1, r3
 800375a:	6878      	ldr	r0, [r7, #4]
 800375c:	f7ff ff72 	bl	8003644 <LCD_Set_Background_Color>
}
 8003760:	bf00      	nop
 8003762:	3710      	adds	r7, #16
 8003764:	46bd      	mov	sp, r7
 8003766:	bd80      	pop	{r7, pc}
 8003768:	080158b8 	.word	0x080158b8

0800376c <vTask_LED>:
 *  Created on: Aug 1, 2023
 *      Author: nicolas
 */
#include "mylibs/led.h"

void vTask_LED(void *pvParameters){
 800376c:	b580      	push	{r7, lr}
 800376e:	b084      	sub	sp, #16
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
	uint8_t led = 0;
 8003774:	2300      	movs	r3, #0
 8003776:	73fb      	strb	r3, [r7, #15]
	uint8_t dir = 1;
 8003778:	2301      	movs	r3, #1
 800377a:	73bb      	strb	r3, [r7, #14]
	printf("Init LED...           ");
 800377c:	4814      	ldr	r0, [pc, #80]	; (80037d0 <vTask_LED+0x64>)
 800377e:	f00f fc09 	bl	8012f94 <iprintf>
	LED_Init();
 8003782:	f000 f829 	bl	80037d8 <LED_Init>
	printf(" Done\r\n");
 8003786:	4813      	ldr	r0, [pc, #76]	; (80037d4 <vTask_LED+0x68>)
 8003788:	f00f fc6a 	bl	8013060 <puts>
	for(;;){
		LED_Write(led);
 800378c:	7bfb      	ldrb	r3, [r7, #15]
 800378e:	4618      	mov	r0, r3
 8003790:	f000 f82a 	bl	80037e8 <LED_Write>
		if(dir){
 8003794:	7bbb      	ldrb	r3, [r7, #14]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d00a      	beq.n	80037b0 <vTask_LED+0x44>
			led = 2*led+1;
 800379a:	7bfb      	ldrb	r3, [r7, #15]
 800379c:	005b      	lsls	r3, r3, #1
 800379e:	b2db      	uxtb	r3, r3
 80037a0:	3301      	adds	r3, #1
 80037a2:	73fb      	strb	r3, [r7, #15]
			if(led==0x0F) dir = 0;
 80037a4:	7bfb      	ldrb	r3, [r7, #15]
 80037a6:	2b0f      	cmp	r3, #15
 80037a8:	d10d      	bne.n	80037c6 <vTask_LED+0x5a>
 80037aa:	2300      	movs	r3, #0
 80037ac:	73bb      	strb	r3, [r7, #14]
 80037ae:	e00a      	b.n	80037c6 <vTask_LED+0x5a>
		}
		else{
			led = (led-1)/2;
 80037b0:	7bfb      	ldrb	r3, [r7, #15]
 80037b2:	3b01      	subs	r3, #1
 80037b4:	0fda      	lsrs	r2, r3, #31
 80037b6:	4413      	add	r3, r2
 80037b8:	105b      	asrs	r3, r3, #1
 80037ba:	73fb      	strb	r3, [r7, #15]
			if(led==0x00) dir = 1;
 80037bc:	7bfb      	ldrb	r3, [r7, #15]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d101      	bne.n	80037c6 <vTask_LED+0x5a>
 80037c2:	2301      	movs	r3, #1
 80037c4:	73bb      	strb	r3, [r7, #14]
		}
		vTaskDelay(1000);
 80037c6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80037ca:	f00c ff7f 	bl	80106cc <vTaskDelay>
	for(;;){
 80037ce:	e7dd      	b.n	800378c <vTask_LED+0x20>
 80037d0:	080158c4 	.word	0x080158c4
 80037d4:	080158dc 	.word	0x080158dc

080037d8 <LED_Init>:
	}
}

void LED_Init(){
 80037d8:	b480      	push	{r7}
 80037da:	af00      	add	r7, sp, #0

}
 80037dc:	bf00      	nop
 80037de:	46bd      	mov	sp, r7
 80037e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e4:	4770      	bx	lr
	...

080037e8 <LED_Write>:

void LED_Write(uint8_t leds){
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b082      	sub	sp, #8
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	4603      	mov	r3, r0
 80037f0:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(USR_LED_1_GPIO_Port, USR_LED_1_Pin, (leds>>0)&1);
 80037f2:	79fb      	ldrb	r3, [r7, #7]
 80037f4:	f003 0301 	and.w	r3, r3, #1
 80037f8:	b2db      	uxtb	r3, r3
 80037fa:	461a      	mov	r2, r3
 80037fc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003800:	4815      	ldr	r0, [pc, #84]	; (8003858 <LED_Write+0x70>)
 8003802:	f001 fd41 	bl	8005288 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(USR_LED_2_GPIO_Port, USR_LED_2_Pin, (leds>>1)&1);
 8003806:	79fb      	ldrb	r3, [r7, #7]
 8003808:	085b      	lsrs	r3, r3, #1
 800380a:	b2db      	uxtb	r3, r3
 800380c:	f003 0301 	and.w	r3, r3, #1
 8003810:	b2db      	uxtb	r3, r3
 8003812:	461a      	mov	r2, r3
 8003814:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003818:	480f      	ldr	r0, [pc, #60]	; (8003858 <LED_Write+0x70>)
 800381a:	f001 fd35 	bl	8005288 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(USR_LED_3_GPIO_Port, USR_LED_3_Pin, (leds>>2)&1);
 800381e:	79fb      	ldrb	r3, [r7, #7]
 8003820:	089b      	lsrs	r3, r3, #2
 8003822:	b2db      	uxtb	r3, r3
 8003824:	f003 0301 	and.w	r3, r3, #1
 8003828:	b2db      	uxtb	r3, r3
 800382a:	461a      	mov	r2, r3
 800382c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003830:	4809      	ldr	r0, [pc, #36]	; (8003858 <LED_Write+0x70>)
 8003832:	f001 fd29 	bl	8005288 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(USR_LED_4_GPIO_Port, USR_LED_4_Pin, (leds>>3)&1);
 8003836:	79fb      	ldrb	r3, [r7, #7]
 8003838:	08db      	lsrs	r3, r3, #3
 800383a:	b2db      	uxtb	r3, r3
 800383c:	f003 0301 	and.w	r3, r3, #1
 8003840:	b2db      	uxtb	r3, r3
 8003842:	461a      	mov	r2, r3
 8003844:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003848:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800384c:	f001 fd1c 	bl	8005288 <HAL_GPIO_WritePin>
}
 8003850:	bf00      	nop
 8003852:	3708      	adds	r7, #8
 8003854:	46bd      	mov	sp, r7
 8003856:	bd80      	pop	{r7, pc}
 8003858:	48000800 	.word	0x48000800

0800385c <vTask_RotaryEnc>:
extern SemaphoreHandle_t xUartMutex;

uint8_t value;
uint32_t last_Tick = 0;

void vTask_RotaryEnc(void *pvParameters){
 800385c:	b580      	push	{r7, lr}
 800385e:	b086      	sub	sp, #24
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
	TIM_HandleTypeDef* htim = (TIM_HandleTypeDef*) pvParameters;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	613b      	str	r3, [r7, #16]
	uint32_t RotaryEnc_Previous_Value = 0;
 8003868:	2300      	movs	r3, #0
 800386a:	617b      	str	r3, [r7, #20]
	uint32_t RotaryEnc_Value = 0;
 800386c:	2300      	movs	r3, #0
 800386e:	60fb      	str	r3, [r7, #12]
	printf("Init Rotary Encoder...");
 8003870:	4815      	ldr	r0, [pc, #84]	; (80038c8 <vTask_RotaryEnc+0x6c>)
 8003872:	f00f fb8f 	bl	8012f94 <iprintf>
	RotaryEnc_Init(htim);
 8003876:	6938      	ldr	r0, [r7, #16]
 8003878:	f000 f82e 	bl	80038d8 <RotaryEnc_Init>
	printf(" Done\r\n");
 800387c:	4813      	ldr	r0, [pc, #76]	; (80038cc <vTask_RotaryEnc+0x70>)
 800387e:	f00f fbef 	bl	8013060 <puts>
	for(;;){
		RotaryEnc_Value = __HAL_TIM_GET_COUNTER(htim);
 8003882:	693b      	ldr	r3, [r7, #16]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003888:	60fb      	str	r3, [r7, #12]

		if(RotaryEnc_Previous_Value != RotaryEnc_Value){
 800388a:	697a      	ldr	r2, [r7, #20]
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	429a      	cmp	r2, r3
 8003890:	d015      	beq.n	80038be <vTask_RotaryEnc+0x62>
			if(xSemaphoreTake(xUartMutex, portMAX_DELAY) == pdTRUE){
 8003892:	4b0f      	ldr	r3, [pc, #60]	; (80038d0 <vTask_RotaryEnc+0x74>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800389a:	4618      	mov	r0, r3
 800389c:	f00c fb98 	bl	800ffd0 <xQueueSemaphoreTake>
 80038a0:	4603      	mov	r3, r0
 80038a2:	2b01      	cmp	r3, #1
 80038a4:	d109      	bne.n	80038ba <vTask_RotaryEnc+0x5e>
				printf("!\r\n");
 80038a6:	480b      	ldr	r0, [pc, #44]	; (80038d4 <vTask_RotaryEnc+0x78>)
 80038a8:	f00f fbda 	bl	8013060 <puts>
				xSemaphoreGive(xUartMutex);
 80038ac:	4b08      	ldr	r3, [pc, #32]	; (80038d0 <vTask_RotaryEnc+0x74>)
 80038ae:	6818      	ldr	r0, [r3, #0]
 80038b0:	2300      	movs	r3, #0
 80038b2:	2200      	movs	r2, #0
 80038b4:	2100      	movs	r1, #0
 80038b6:	f00c f911 	bl	800fadc <xQueueGenericSend>
			}
			RotaryEnc_Previous_Value = RotaryEnc_Value;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	617b      	str	r3, [r7, #20]
		}
		vTaskDelay(1000);
 80038be:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80038c2:	f00c ff03 	bl	80106cc <vTaskDelay>
		RotaryEnc_Value = __HAL_TIM_GET_COUNTER(htim);
 80038c6:	e7dc      	b.n	8003882 <vTask_RotaryEnc+0x26>
 80038c8:	080158e4 	.word	0x080158e4
 80038cc:	080158fc 	.word	0x080158fc
 80038d0:	200005d4 	.word	0x200005d4
 80038d4:	08015904 	.word	0x08015904

080038d8 <RotaryEnc_Init>:
	}
}

void RotaryEnc_Init(TIM_HandleTypeDef* htim){
 80038d8:	b580      	push	{r7, lr}
 80038da:	b082      	sub	sp, #8
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
	HAL_TIM_Encoder_Start(htim, TIM_CHANNEL_1);
 80038e0:	2100      	movs	r1, #0
 80038e2:	6878      	ldr	r0, [r7, #4]
 80038e4:	f005 fc7b 	bl	80091de <HAL_TIM_Encoder_Start>
}
 80038e8:	bf00      	nop
 80038ea:	3708      	adds	r7, #8
 80038ec:	46bd      	mov	sp, r7
 80038ee:	bd80      	pop	{r7, pc}

080038f0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80038f0:	480d      	ldr	r0, [pc, #52]	; (8003928 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80038f2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80038f4:	480d      	ldr	r0, [pc, #52]	; (800392c <LoopForever+0x6>)
  ldr r1, =_edata
 80038f6:	490e      	ldr	r1, [pc, #56]	; (8003930 <LoopForever+0xa>)
  ldr r2, =_sidata
 80038f8:	4a0e      	ldr	r2, [pc, #56]	; (8003934 <LoopForever+0xe>)
  movs r3, #0
 80038fa:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80038fc:	e002      	b.n	8003904 <LoopCopyDataInit>

080038fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80038fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003900:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003902:	3304      	adds	r3, #4

08003904 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003904:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003906:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003908:	d3f9      	bcc.n	80038fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800390a:	4a0b      	ldr	r2, [pc, #44]	; (8003938 <LoopForever+0x12>)
  ldr r4, =_ebss
 800390c:	4c0b      	ldr	r4, [pc, #44]	; (800393c <LoopForever+0x16>)
  movs r3, #0
 800390e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003910:	e001      	b.n	8003916 <LoopFillZerobss>

08003912 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003912:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003914:	3204      	adds	r2, #4

08003916 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003916:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003918:	d3fb      	bcc.n	8003912 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800391a:	f7fe fc2b 	bl	8002174 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800391e:	f00f fd81 	bl	8013424 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003922:	f7fe f8cf 	bl	8001ac4 <main>

08003926 <LoopForever>:

LoopForever:
    b LoopForever
 8003926:	e7fe      	b.n	8003926 <LoopForever>
  ldr   r0, =_estack
 8003928:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800392c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003930:	20000350 	.word	0x20000350
  ldr r2, =_sidata
 8003934:	08015d1c 	.word	0x08015d1c
  ldr r2, =_sbss
 8003938:	20000350 	.word	0x20000350
  ldr r4, =_ebss
 800393c:	200067f8 	.word	0x200067f8

08003940 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003940:	e7fe      	b.n	8003940 <ADC1_2_IRQHandler>

08003942 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003942:	b580      	push	{r7, lr}
 8003944:	b082      	sub	sp, #8
 8003946:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003948:	2300      	movs	r3, #0
 800394a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800394c:	2003      	movs	r0, #3
 800394e:	f001 fa3a 	bl	8004dc6 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003952:	200f      	movs	r0, #15
 8003954:	f7fe fa96 	bl	8001e84 <HAL_InitTick>
 8003958:	4603      	mov	r3, r0
 800395a:	2b00      	cmp	r3, #0
 800395c:	d002      	beq.n	8003964 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800395e:	2301      	movs	r3, #1
 8003960:	71fb      	strb	r3, [r7, #7]
 8003962:	e001      	b.n	8003968 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003964:	f7fe fa66 	bl	8001e34 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003968:	79fb      	ldrb	r3, [r7, #7]

}
 800396a:	4618      	mov	r0, r3
 800396c:	3708      	adds	r7, #8
 800396e:	46bd      	mov	sp, r7
 8003970:	bd80      	pop	{r7, pc}
	...

08003974 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003974:	b480      	push	{r7}
 8003976:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003978:	4b05      	ldr	r3, [pc, #20]	; (8003990 <HAL_IncTick+0x1c>)
 800397a:	681a      	ldr	r2, [r3, #0]
 800397c:	4b05      	ldr	r3, [pc, #20]	; (8003994 <HAL_IncTick+0x20>)
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4413      	add	r3, r2
 8003982:	4a03      	ldr	r2, [pc, #12]	; (8003990 <HAL_IncTick+0x1c>)
 8003984:	6013      	str	r3, [r2, #0]
}
 8003986:	bf00      	nop
 8003988:	46bd      	mov	sp, r7
 800398a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398e:	4770      	bx	lr
 8003990:	20000978 	.word	0x20000978
 8003994:	20000008 	.word	0x20000008

08003998 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003998:	b480      	push	{r7}
 800399a:	af00      	add	r7, sp, #0
  return uwTick;
 800399c:	4b03      	ldr	r3, [pc, #12]	; (80039ac <HAL_GetTick+0x14>)
 800399e:	681b      	ldr	r3, [r3, #0]
}
 80039a0:	4618      	mov	r0, r3
 80039a2:	46bd      	mov	sp, r7
 80039a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a8:	4770      	bx	lr
 80039aa:	bf00      	nop
 80039ac:	20000978 	.word	0x20000978

080039b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b084      	sub	sp, #16
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80039b8:	f7ff ffee 	bl	8003998 <HAL_GetTick>
 80039bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80039c8:	d004      	beq.n	80039d4 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80039ca:	4b09      	ldr	r3, [pc, #36]	; (80039f0 <HAL_Delay+0x40>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	68fa      	ldr	r2, [r7, #12]
 80039d0:	4413      	add	r3, r2
 80039d2:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80039d4:	bf00      	nop
 80039d6:	f7ff ffdf 	bl	8003998 <HAL_GetTick>
 80039da:	4602      	mov	r2, r0
 80039dc:	68bb      	ldr	r3, [r7, #8]
 80039de:	1ad3      	subs	r3, r2, r3
 80039e0:	68fa      	ldr	r2, [r7, #12]
 80039e2:	429a      	cmp	r2, r3
 80039e4:	d8f7      	bhi.n	80039d6 <HAL_Delay+0x26>
  {
  }
}
 80039e6:	bf00      	nop
 80039e8:	bf00      	nop
 80039ea:	3710      	adds	r7, #16
 80039ec:	46bd      	mov	sp, r7
 80039ee:	bd80      	pop	{r7, pc}
 80039f0:	20000008 	.word	0x20000008

080039f4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80039f4:	b480      	push	{r7}
 80039f6:	b083      	sub	sp, #12
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
 80039fc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	689b      	ldr	r3, [r3, #8]
 8003a02:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	431a      	orrs	r2, r3
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	609a      	str	r2, [r3, #8]
}
 8003a0e:	bf00      	nop
 8003a10:	370c      	adds	r7, #12
 8003a12:	46bd      	mov	sp, r7
 8003a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a18:	4770      	bx	lr

08003a1a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003a1a:	b480      	push	{r7}
 8003a1c:	b083      	sub	sp, #12
 8003a1e:	af00      	add	r7, sp, #0
 8003a20:	6078      	str	r0, [r7, #4]
 8003a22:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	689b      	ldr	r3, [r3, #8]
 8003a28:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	431a      	orrs	r2, r3
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	609a      	str	r2, [r3, #8]
}
 8003a34:	bf00      	nop
 8003a36:	370c      	adds	r7, #12
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3e:	4770      	bx	lr

08003a40 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003a40:	b480      	push	{r7}
 8003a42:	b083      	sub	sp, #12
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	689b      	ldr	r3, [r3, #8]
 8003a4c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8003a50:	4618      	mov	r0, r3
 8003a52:	370c      	adds	r7, #12
 8003a54:	46bd      	mov	sp, r7
 8003a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5a:	4770      	bx	lr

08003a5c <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003a5c:	b480      	push	{r7}
 8003a5e:	b087      	sub	sp, #28
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	60f8      	str	r0, [r7, #12]
 8003a64:	60b9      	str	r1, [r7, #8]
 8003a66:	607a      	str	r2, [r7, #4]
 8003a68:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	3360      	adds	r3, #96	; 0x60
 8003a6e:	461a      	mov	r2, r3
 8003a70:	68bb      	ldr	r3, [r7, #8]
 8003a72:	009b      	lsls	r3, r3, #2
 8003a74:	4413      	add	r3, r2
 8003a76:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003a78:	697b      	ldr	r3, [r7, #20]
 8003a7a:	681a      	ldr	r2, [r3, #0]
 8003a7c:	4b08      	ldr	r3, [pc, #32]	; (8003aa0 <LL_ADC_SetOffset+0x44>)
 8003a7e:	4013      	ands	r3, r2
 8003a80:	687a      	ldr	r2, [r7, #4]
 8003a82:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8003a86:	683a      	ldr	r2, [r7, #0]
 8003a88:	430a      	orrs	r2, r1
 8003a8a:	4313      	orrs	r3, r2
 8003a8c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003a90:	697b      	ldr	r3, [r7, #20]
 8003a92:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8003a94:	bf00      	nop
 8003a96:	371c      	adds	r7, #28
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9e:	4770      	bx	lr
 8003aa0:	03fff000 	.word	0x03fff000

08003aa4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8003aa4:	b480      	push	{r7}
 8003aa6:	b085      	sub	sp, #20
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
 8003aac:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	3360      	adds	r3, #96	; 0x60
 8003ab2:	461a      	mov	r2, r3
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	009b      	lsls	r3, r3, #2
 8003ab8:	4413      	add	r3, r2
 8003aba:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	3714      	adds	r7, #20
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ace:	4770      	bx	lr

08003ad0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003ad0:	b480      	push	{r7}
 8003ad2:	b087      	sub	sp, #28
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	60f8      	str	r0, [r7, #12]
 8003ad8:	60b9      	str	r1, [r7, #8]
 8003ada:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	3360      	adds	r3, #96	; 0x60
 8003ae0:	461a      	mov	r2, r3
 8003ae2:	68bb      	ldr	r3, [r7, #8]
 8003ae4:	009b      	lsls	r3, r3, #2
 8003ae6:	4413      	add	r3, r2
 8003ae8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003aea:	697b      	ldr	r3, [r7, #20]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	431a      	orrs	r2, r3
 8003af6:	697b      	ldr	r3, [r7, #20]
 8003af8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8003afa:	bf00      	nop
 8003afc:	371c      	adds	r7, #28
 8003afe:	46bd      	mov	sp, r7
 8003b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b04:	4770      	bx	lr

08003b06 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8003b06:	b480      	push	{r7}
 8003b08:	b087      	sub	sp, #28
 8003b0a:	af00      	add	r7, sp, #0
 8003b0c:	60f8      	str	r0, [r7, #12]
 8003b0e:	60b9      	str	r1, [r7, #8]
 8003b10:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	3360      	adds	r3, #96	; 0x60
 8003b16:	461a      	mov	r2, r3
 8003b18:	68bb      	ldr	r3, [r7, #8]
 8003b1a:	009b      	lsls	r3, r3, #2
 8003b1c:	4413      	add	r3, r2
 8003b1e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003b20:	697b      	ldr	r3, [r7, #20]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	431a      	orrs	r2, r3
 8003b2c:	697b      	ldr	r3, [r7, #20]
 8003b2e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8003b30:	bf00      	nop
 8003b32:	371c      	adds	r7, #28
 8003b34:	46bd      	mov	sp, r7
 8003b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3a:	4770      	bx	lr

08003b3c <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8003b3c:	b480      	push	{r7}
 8003b3e:	b087      	sub	sp, #28
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	60f8      	str	r0, [r7, #12]
 8003b44:	60b9      	str	r1, [r7, #8]
 8003b46:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	3360      	adds	r3, #96	; 0x60
 8003b4c:	461a      	mov	r2, r3
 8003b4e:	68bb      	ldr	r3, [r7, #8]
 8003b50:	009b      	lsls	r3, r3, #2
 8003b52:	4413      	add	r3, r2
 8003b54:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003b56:	697b      	ldr	r3, [r7, #20]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	431a      	orrs	r2, r3
 8003b62:	697b      	ldr	r3, [r7, #20]
 8003b64:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8003b66:	bf00      	nop
 8003b68:	371c      	adds	r7, #28
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b70:	4770      	bx	lr

08003b72 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8003b72:	b480      	push	{r7}
 8003b74:	b083      	sub	sp, #12
 8003b76:	af00      	add	r7, sp, #0
 8003b78:	6078      	str	r0, [r7, #4]
 8003b7a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	695b      	ldr	r3, [r3, #20]
 8003b80:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	431a      	orrs	r2, r3
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	615a      	str	r2, [r3, #20]
}
 8003b8c:	bf00      	nop
 8003b8e:	370c      	adds	r7, #12
 8003b90:	46bd      	mov	sp, r7
 8003b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b96:	4770      	bx	lr

08003b98 <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003b98:	b480      	push	{r7}
 8003b9a:	b087      	sub	sp, #28
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	60f8      	str	r0, [r7, #12]
 8003ba0:	60b9      	str	r1, [r7, #8]
 8003ba2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	3330      	adds	r3, #48	; 0x30
 8003ba8:	461a      	mov	r2, r3
 8003baa:	68bb      	ldr	r3, [r7, #8]
 8003bac:	0a1b      	lsrs	r3, r3, #8
 8003bae:	009b      	lsls	r3, r3, #2
 8003bb0:	f003 030c 	and.w	r3, r3, #12
 8003bb4:	4413      	add	r3, r2
 8003bb6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003bb8:	697b      	ldr	r3, [r7, #20]
 8003bba:	681a      	ldr	r2, [r3, #0]
 8003bbc:	68bb      	ldr	r3, [r7, #8]
 8003bbe:	f003 031f 	and.w	r3, r3, #31
 8003bc2:	211f      	movs	r1, #31
 8003bc4:	fa01 f303 	lsl.w	r3, r1, r3
 8003bc8:	43db      	mvns	r3, r3
 8003bca:	401a      	ands	r2, r3
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	0e9b      	lsrs	r3, r3, #26
 8003bd0:	f003 011f 	and.w	r1, r3, #31
 8003bd4:	68bb      	ldr	r3, [r7, #8]
 8003bd6:	f003 031f 	and.w	r3, r3, #31
 8003bda:	fa01 f303 	lsl.w	r3, r1, r3
 8003bde:	431a      	orrs	r2, r3
 8003be0:	697b      	ldr	r3, [r7, #20]
 8003be2:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003be4:	bf00      	nop
 8003be6:	371c      	adds	r7, #28
 8003be8:	46bd      	mov	sp, r7
 8003bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bee:	4770      	bx	lr

08003bf0 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003bf0:	b480      	push	{r7}
 8003bf2:	b087      	sub	sp, #28
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	60f8      	str	r0, [r7, #12]
 8003bf8:	60b9      	str	r1, [r7, #8]
 8003bfa:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	3314      	adds	r3, #20
 8003c00:	461a      	mov	r2, r3
 8003c02:	68bb      	ldr	r3, [r7, #8]
 8003c04:	0e5b      	lsrs	r3, r3, #25
 8003c06:	009b      	lsls	r3, r3, #2
 8003c08:	f003 0304 	and.w	r3, r3, #4
 8003c0c:	4413      	add	r3, r2
 8003c0e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003c10:	697b      	ldr	r3, [r7, #20]
 8003c12:	681a      	ldr	r2, [r3, #0]
 8003c14:	68bb      	ldr	r3, [r7, #8]
 8003c16:	0d1b      	lsrs	r3, r3, #20
 8003c18:	f003 031f 	and.w	r3, r3, #31
 8003c1c:	2107      	movs	r1, #7
 8003c1e:	fa01 f303 	lsl.w	r3, r1, r3
 8003c22:	43db      	mvns	r3, r3
 8003c24:	401a      	ands	r2, r3
 8003c26:	68bb      	ldr	r3, [r7, #8]
 8003c28:	0d1b      	lsrs	r3, r3, #20
 8003c2a:	f003 031f 	and.w	r3, r3, #31
 8003c2e:	6879      	ldr	r1, [r7, #4]
 8003c30:	fa01 f303 	lsl.w	r3, r1, r3
 8003c34:	431a      	orrs	r2, r3
 8003c36:	697b      	ldr	r3, [r7, #20]
 8003c38:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003c3a:	bf00      	nop
 8003c3c:	371c      	adds	r7, #28
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c44:	4770      	bx	lr
	...

08003c48 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003c48:	b480      	push	{r7}
 8003c4a:	b085      	sub	sp, #20
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	60f8      	str	r0, [r7, #12]
 8003c50:	60b9      	str	r1, [r7, #8]
 8003c52:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	4a0f      	ldr	r2, [pc, #60]	; (8003c94 <LL_ADC_SetChannelSingleDiff+0x4c>)
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	d10a      	bne.n	8003c72 <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8003c62:	68bb      	ldr	r3, [r7, #8]
 8003c64:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c68:	431a      	orrs	r2, r3
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 8003c70:	e00a      	b.n	8003c88 <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8003c78:	68bb      	ldr	r3, [r7, #8]
 8003c7a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c7e:	43db      	mvns	r3, r3
 8003c80:	401a      	ands	r2, r3
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8003c88:	bf00      	nop
 8003c8a:	3714      	adds	r7, #20
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c92:	4770      	bx	lr
 8003c94:	407f0000 	.word	0x407f0000

08003c98 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003c98:	b480      	push	{r7}
 8003c9a:	b083      	sub	sp, #12
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	689b      	ldr	r3, [r3, #8]
 8003ca4:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8003ca8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003cac:	687a      	ldr	r2, [r7, #4]
 8003cae:	6093      	str	r3, [r2, #8]
}
 8003cb0:	bf00      	nop
 8003cb2:	370c      	adds	r7, #12
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cba:	4770      	bx	lr

08003cbc <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8003cbc:	b480      	push	{r7}
 8003cbe:	b083      	sub	sp, #12
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	689b      	ldr	r3, [r3, #8]
 8003cc8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003ccc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003cd0:	d101      	bne.n	8003cd6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	e000      	b.n	8003cd8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003cd6:	2300      	movs	r3, #0
}
 8003cd8:	4618      	mov	r0, r3
 8003cda:	370c      	adds	r7, #12
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce2:	4770      	bx	lr

08003ce4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003ce4:	b480      	push	{r7}
 8003ce6:	b083      	sub	sp, #12
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	689b      	ldr	r3, [r3, #8]
 8003cf0:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8003cf4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003cf8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003d00:	bf00      	nop
 8003d02:	370c      	adds	r7, #12
 8003d04:	46bd      	mov	sp, r7
 8003d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0a:	4770      	bx	lr

08003d0c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003d0c:	b480      	push	{r7}
 8003d0e:	b083      	sub	sp, #12
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	689b      	ldr	r3, [r3, #8]
 8003d18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d1c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003d20:	d101      	bne.n	8003d26 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003d22:	2301      	movs	r3, #1
 8003d24:	e000      	b.n	8003d28 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003d26:	2300      	movs	r3, #0
}
 8003d28:	4618      	mov	r0, r3
 8003d2a:	370c      	adds	r7, #12
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d32:	4770      	bx	lr

08003d34 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003d34:	b480      	push	{r7}
 8003d36:	b083      	sub	sp, #12
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	689b      	ldr	r3, [r3, #8]
 8003d40:	f003 0301 	and.w	r3, r3, #1
 8003d44:	2b01      	cmp	r3, #1
 8003d46:	d101      	bne.n	8003d4c <LL_ADC_IsEnabled+0x18>
 8003d48:	2301      	movs	r3, #1
 8003d4a:	e000      	b.n	8003d4e <LL_ADC_IsEnabled+0x1a>
 8003d4c:	2300      	movs	r3, #0
}
 8003d4e:	4618      	mov	r0, r3
 8003d50:	370c      	adds	r7, #12
 8003d52:	46bd      	mov	sp, r7
 8003d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d58:	4770      	bx	lr

08003d5a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003d5a:	b480      	push	{r7}
 8003d5c:	b083      	sub	sp, #12
 8003d5e:	af00      	add	r7, sp, #0
 8003d60:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	689b      	ldr	r3, [r3, #8]
 8003d66:	f003 0304 	and.w	r3, r3, #4
 8003d6a:	2b04      	cmp	r3, #4
 8003d6c:	d101      	bne.n	8003d72 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003d6e:	2301      	movs	r3, #1
 8003d70:	e000      	b.n	8003d74 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003d72:	2300      	movs	r3, #0
}
 8003d74:	4618      	mov	r0, r3
 8003d76:	370c      	adds	r7, #12
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7e:	4770      	bx	lr

08003d80 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003d80:	b480      	push	{r7}
 8003d82:	b083      	sub	sp, #12
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	689b      	ldr	r3, [r3, #8]
 8003d8c:	f003 0308 	and.w	r3, r3, #8
 8003d90:	2b08      	cmp	r3, #8
 8003d92:	d101      	bne.n	8003d98 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003d94:	2301      	movs	r3, #1
 8003d96:	e000      	b.n	8003d9a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003d98:	2300      	movs	r3, #0
}
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	370c      	adds	r7, #12
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da4:	4770      	bx	lr
	...

08003da8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003da8:	b590      	push	{r4, r7, lr}
 8003daa:	b089      	sub	sp, #36	; 0x24
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003db0:	2300      	movs	r3, #0
 8003db2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003db4:	2300      	movs	r3, #0
 8003db6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d101      	bne.n	8003dc2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003dbe:	2301      	movs	r3, #1
 8003dc0:	e1af      	b.n	8004122 <HAL_ADC_Init+0x37a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	695b      	ldr	r3, [r3, #20]
 8003dc6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d109      	bne.n	8003de4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003dd0:	6878      	ldr	r0, [r7, #4]
 8003dd2:	f7fd fa4b 	bl	800126c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	2200      	movs	r2, #0
 8003dda:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2200      	movs	r2, #0
 8003de0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	4618      	mov	r0, r3
 8003dea:	f7ff ff67 	bl	8003cbc <LL_ADC_IsDeepPowerDownEnabled>
 8003dee:	4603      	mov	r3, r0
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d004      	beq.n	8003dfe <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	4618      	mov	r0, r3
 8003dfa:	f7ff ff4d 	bl	8003c98 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	4618      	mov	r0, r3
 8003e04:	f7ff ff82 	bl	8003d0c <LL_ADC_IsInternalRegulatorEnabled>
 8003e08:	4603      	mov	r3, r0
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d115      	bne.n	8003e3a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	4618      	mov	r0, r3
 8003e14:	f7ff ff66 	bl	8003ce4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003e18:	4b9f      	ldr	r3, [pc, #636]	; (8004098 <HAL_ADC_Init+0x2f0>)
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	099b      	lsrs	r3, r3, #6
 8003e1e:	4a9f      	ldr	r2, [pc, #636]	; (800409c <HAL_ADC_Init+0x2f4>)
 8003e20:	fba2 2303 	umull	r2, r3, r2, r3
 8003e24:	099b      	lsrs	r3, r3, #6
 8003e26:	3301      	adds	r3, #1
 8003e28:	005b      	lsls	r3, r3, #1
 8003e2a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003e2c:	e002      	b.n	8003e34 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8003e2e:	68bb      	ldr	r3, [r7, #8]
 8003e30:	3b01      	subs	r3, #1
 8003e32:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003e34:	68bb      	ldr	r3, [r7, #8]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d1f9      	bne.n	8003e2e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4618      	mov	r0, r3
 8003e40:	f7ff ff64 	bl	8003d0c <LL_ADC_IsInternalRegulatorEnabled>
 8003e44:	4603      	mov	r3, r0
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d10d      	bne.n	8003e66 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e4e:	f043 0210 	orr.w	r2, r3, #16
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e5a:	f043 0201 	orr.w	r2, r3, #1
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8003e62:	2301      	movs	r3, #1
 8003e64:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	f7ff ff75 	bl	8003d5a <LL_ADC_REG_IsConversionOngoing>
 8003e70:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e76:	f003 0310 	and.w	r3, r3, #16
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	f040 8148 	bne.w	8004110 <HAL_ADC_Init+0x368>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003e80:	697b      	ldr	r3, [r7, #20]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	f040 8144 	bne.w	8004110 <HAL_ADC_Init+0x368>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e8c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003e90:	f043 0202 	orr.w	r2, r3, #2
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	f7ff ff49 	bl	8003d34 <LL_ADC_IsEnabled>
 8003ea2:	4603      	mov	r3, r0
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d141      	bne.n	8003f2c <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003eb0:	d004      	beq.n	8003ebc <HAL_ADC_Init+0x114>
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	4a7a      	ldr	r2, [pc, #488]	; (80040a0 <HAL_ADC_Init+0x2f8>)
 8003eb8:	4293      	cmp	r3, r2
 8003eba:	d10f      	bne.n	8003edc <HAL_ADC_Init+0x134>
 8003ebc:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003ec0:	f7ff ff38 	bl	8003d34 <LL_ADC_IsEnabled>
 8003ec4:	4604      	mov	r4, r0
 8003ec6:	4876      	ldr	r0, [pc, #472]	; (80040a0 <HAL_ADC_Init+0x2f8>)
 8003ec8:	f7ff ff34 	bl	8003d34 <LL_ADC_IsEnabled>
 8003ecc:	4603      	mov	r3, r0
 8003ece:	4323      	orrs	r3, r4
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	bf0c      	ite	eq
 8003ed4:	2301      	moveq	r3, #1
 8003ed6:	2300      	movne	r3, #0
 8003ed8:	b2db      	uxtb	r3, r3
 8003eda:	e012      	b.n	8003f02 <HAL_ADC_Init+0x15a>
 8003edc:	4871      	ldr	r0, [pc, #452]	; (80040a4 <HAL_ADC_Init+0x2fc>)
 8003ede:	f7ff ff29 	bl	8003d34 <LL_ADC_IsEnabled>
 8003ee2:	4604      	mov	r4, r0
 8003ee4:	4870      	ldr	r0, [pc, #448]	; (80040a8 <HAL_ADC_Init+0x300>)
 8003ee6:	f7ff ff25 	bl	8003d34 <LL_ADC_IsEnabled>
 8003eea:	4603      	mov	r3, r0
 8003eec:	431c      	orrs	r4, r3
 8003eee:	486f      	ldr	r0, [pc, #444]	; (80040ac <HAL_ADC_Init+0x304>)
 8003ef0:	f7ff ff20 	bl	8003d34 <LL_ADC_IsEnabled>
 8003ef4:	4603      	mov	r3, r0
 8003ef6:	4323      	orrs	r3, r4
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	bf0c      	ite	eq
 8003efc:	2301      	moveq	r3, #1
 8003efe:	2300      	movne	r3, #0
 8003f00:	b2db      	uxtb	r3, r3
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d012      	beq.n	8003f2c <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003f0e:	d004      	beq.n	8003f1a <HAL_ADC_Init+0x172>
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	4a62      	ldr	r2, [pc, #392]	; (80040a0 <HAL_ADC_Init+0x2f8>)
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d101      	bne.n	8003f1e <HAL_ADC_Init+0x176>
 8003f1a:	4a65      	ldr	r2, [pc, #404]	; (80040b0 <HAL_ADC_Init+0x308>)
 8003f1c:	e000      	b.n	8003f20 <HAL_ADC_Init+0x178>
 8003f1e:	4a65      	ldr	r2, [pc, #404]	; (80040b4 <HAL_ADC_Init+0x30c>)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	685b      	ldr	r3, [r3, #4]
 8003f24:	4619      	mov	r1, r3
 8003f26:	4610      	mov	r0, r2
 8003f28:	f7ff fd64 	bl	80039f4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	7f5b      	ldrb	r3, [r3, #29]
 8003f30:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003f36:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8003f3c:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8003f42:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003f4a:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003f4c:	4313      	orrs	r3, r2
 8003f4e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003f56:	2b01      	cmp	r3, #1
 8003f58:	d106      	bne.n	8003f68 <HAL_ADC_Init+0x1c0>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f5e:	3b01      	subs	r3, #1
 8003f60:	045b      	lsls	r3, r3, #17
 8003f62:	69ba      	ldr	r2, [r7, #24]
 8003f64:	4313      	orrs	r3, r2
 8003f66:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d009      	beq.n	8003f84 <HAL_ADC_Init+0x1dc>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f74:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f7c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003f7e:	69ba      	ldr	r2, [r7, #24]
 8003f80:	4313      	orrs	r3, r2
 8003f82:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	68da      	ldr	r2, [r3, #12]
 8003f8a:	4b4b      	ldr	r3, [pc, #300]	; (80040b8 <HAL_ADC_Init+0x310>)
 8003f8c:	4013      	ands	r3, r2
 8003f8e:	687a      	ldr	r2, [r7, #4]
 8003f90:	6812      	ldr	r2, [r2, #0]
 8003f92:	69b9      	ldr	r1, [r7, #24]
 8003f94:	430b      	orrs	r3, r1
 8003f96:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	691b      	ldr	r3, [r3, #16]
 8003f9e:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	430a      	orrs	r2, r1
 8003fac:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	f7ff fed1 	bl	8003d5a <LL_ADC_REG_IsConversionOngoing>
 8003fb8:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	f7ff fede 	bl	8003d80 <LL_ADC_INJ_IsConversionOngoing>
 8003fc4:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003fc6:	693b      	ldr	r3, [r7, #16]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d17f      	bne.n	80040cc <HAL_ADC_Init+0x324>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d17c      	bne.n	80040cc <HAL_ADC_Init+0x324>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8003fd6:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003fde:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8003fe0:	4313      	orrs	r3, r2
 8003fe2:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	68db      	ldr	r3, [r3, #12]
 8003fea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003fee:	f023 0302 	bic.w	r3, r3, #2
 8003ff2:	687a      	ldr	r2, [r7, #4]
 8003ff4:	6812      	ldr	r2, [r2, #0]
 8003ff6:	69b9      	ldr	r1, [r7, #24]
 8003ff8:	430b      	orrs	r3, r1
 8003ffa:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	691b      	ldr	r3, [r3, #16]
 8004000:	2b00      	cmp	r3, #0
 8004002:	d017      	beq.n	8004034 <HAL_ADC_Init+0x28c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	691a      	ldr	r2, [r3, #16]
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004012:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800401c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8004020:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004024:	687a      	ldr	r2, [r7, #4]
 8004026:	6911      	ldr	r1, [r2, #16]
 8004028:	687a      	ldr	r2, [r7, #4]
 800402a:	6812      	ldr	r2, [r2, #0]
 800402c:	430b      	orrs	r3, r1
 800402e:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8004032:	e013      	b.n	800405c <HAL_ADC_Init+0x2b4>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	691a      	ldr	r2, [r3, #16]
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004042:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800404c:	687a      	ldr	r2, [r7, #4]
 800404e:	6812      	ldr	r2, [r2, #0]
 8004050:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8004054:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004058:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004062:	2b01      	cmp	r3, #1
 8004064:	d12a      	bne.n	80040bc <HAL_ADC_Init+0x314>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	691b      	ldr	r3, [r3, #16]
 800406c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004070:	f023 0304 	bic.w	r3, r3, #4
 8004074:	687a      	ldr	r2, [r7, #4]
 8004076:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8004078:	687a      	ldr	r2, [r7, #4]
 800407a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800407c:	4311      	orrs	r1, r2
 800407e:	687a      	ldr	r2, [r7, #4]
 8004080:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8004082:	4311      	orrs	r1, r2
 8004084:	687a      	ldr	r2, [r7, #4]
 8004086:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004088:	430a      	orrs	r2, r1
 800408a:	431a      	orrs	r2, r3
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f042 0201 	orr.w	r2, r2, #1
 8004094:	611a      	str	r2, [r3, #16]
 8004096:	e019      	b.n	80040cc <HAL_ADC_Init+0x324>
 8004098:	20000000 	.word	0x20000000
 800409c:	053e2d63 	.word	0x053e2d63
 80040a0:	50000100 	.word	0x50000100
 80040a4:	50000400 	.word	0x50000400
 80040a8:	50000500 	.word	0x50000500
 80040ac:	50000600 	.word	0x50000600
 80040b0:	50000300 	.word	0x50000300
 80040b4:	50000700 	.word	0x50000700
 80040b8:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	691a      	ldr	r2, [r3, #16]
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f022 0201 	bic.w	r2, r2, #1
 80040ca:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	695b      	ldr	r3, [r3, #20]
 80040d0:	2b01      	cmp	r3, #1
 80040d2:	d10c      	bne.n	80040ee <HAL_ADC_Init+0x346>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040da:	f023 010f 	bic.w	r1, r3, #15
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6a1b      	ldr	r3, [r3, #32]
 80040e2:	1e5a      	subs	r2, r3, #1
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	430a      	orrs	r2, r1
 80040ea:	631a      	str	r2, [r3, #48]	; 0x30
 80040ec:	e007      	b.n	80040fe <HAL_ADC_Init+0x356>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f022 020f 	bic.w	r2, r2, #15
 80040fc:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004102:	f023 0303 	bic.w	r3, r3, #3
 8004106:	f043 0201 	orr.w	r2, r3, #1
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	65da      	str	r2, [r3, #92]	; 0x5c
 800410e:	e007      	b.n	8004120 <HAL_ADC_Init+0x378>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004114:	f043 0210 	orr.w	r2, r3, #16
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800411c:	2301      	movs	r3, #1
 800411e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8004120:	7ffb      	ldrb	r3, [r7, #31]
}
 8004122:	4618      	mov	r0, r3
 8004124:	3724      	adds	r7, #36	; 0x24
 8004126:	46bd      	mov	sp, r7
 8004128:	bd90      	pop	{r4, r7, pc}
 800412a:	bf00      	nop

0800412c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800412c:	b580      	push	{r7, lr}
 800412e:	b0b6      	sub	sp, #216	; 0xd8
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
 8004134:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004136:	2300      	movs	r3, #0
 8004138:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800413c:	2300      	movs	r3, #0
 800413e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8004146:	2b01      	cmp	r3, #1
 8004148:	d102      	bne.n	8004150 <HAL_ADC_ConfigChannel+0x24>
 800414a:	2302      	movs	r3, #2
 800414c:	f000 bc13 	b.w	8004976 <HAL_ADC_ConfigChannel+0x84a>
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2201      	movs	r2, #1
 8004154:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	4618      	mov	r0, r3
 800415e:	f7ff fdfc 	bl	8003d5a <LL_ADC_REG_IsConversionOngoing>
 8004162:	4603      	mov	r3, r0
 8004164:	2b00      	cmp	r3, #0
 8004166:	f040 83f3 	bne.w	8004950 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6818      	ldr	r0, [r3, #0]
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	6859      	ldr	r1, [r3, #4]
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	461a      	mov	r2, r3
 8004178:	f7ff fd0e 	bl	8003b98 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	4618      	mov	r0, r3
 8004182:	f7ff fdea 	bl	8003d5a <LL_ADC_REG_IsConversionOngoing>
 8004186:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	4618      	mov	r0, r3
 8004190:	f7ff fdf6 	bl	8003d80 <LL_ADC_INJ_IsConversionOngoing>
 8004194:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004198:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800419c:	2b00      	cmp	r3, #0
 800419e:	f040 81d9 	bne.w	8004554 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80041a2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	f040 81d4 	bne.w	8004554 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	689b      	ldr	r3, [r3, #8]
 80041b0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80041b4:	d10f      	bne.n	80041d6 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6818      	ldr	r0, [r3, #0]
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	2200      	movs	r2, #0
 80041c0:	4619      	mov	r1, r3
 80041c2:	f7ff fd15 	bl	8003bf0 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80041ce:	4618      	mov	r0, r3
 80041d0:	f7ff fccf 	bl	8003b72 <LL_ADC_SetSamplingTimeCommonConfig>
 80041d4:	e00e      	b.n	80041f4 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6818      	ldr	r0, [r3, #0]
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	6819      	ldr	r1, [r3, #0]
 80041de:	683b      	ldr	r3, [r7, #0]
 80041e0:	689b      	ldr	r3, [r3, #8]
 80041e2:	461a      	mov	r2, r3
 80041e4:	f7ff fd04 	bl	8003bf0 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	2100      	movs	r1, #0
 80041ee:	4618      	mov	r0, r3
 80041f0:	f7ff fcbf 	bl	8003b72 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	695a      	ldr	r2, [r3, #20]
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	68db      	ldr	r3, [r3, #12]
 80041fe:	08db      	lsrs	r3, r3, #3
 8004200:	f003 0303 	and.w	r3, r3, #3
 8004204:	005b      	lsls	r3, r3, #1
 8004206:	fa02 f303 	lsl.w	r3, r2, r3
 800420a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	691b      	ldr	r3, [r3, #16]
 8004212:	2b04      	cmp	r3, #4
 8004214:	d022      	beq.n	800425c <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6818      	ldr	r0, [r3, #0]
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	6919      	ldr	r1, [r3, #16]
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	681a      	ldr	r2, [r3, #0]
 8004222:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004226:	f7ff fc19 	bl	8003a5c <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6818      	ldr	r0, [r3, #0]
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	6919      	ldr	r1, [r3, #16]
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	699b      	ldr	r3, [r3, #24]
 8004236:	461a      	mov	r2, r3
 8004238:	f7ff fc65 	bl	8003b06 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6818      	ldr	r0, [r3, #0]
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	6919      	ldr	r1, [r3, #16]
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	7f1b      	ldrb	r3, [r3, #28]
 8004248:	2b01      	cmp	r3, #1
 800424a:	d102      	bne.n	8004252 <HAL_ADC_ConfigChannel+0x126>
 800424c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004250:	e000      	b.n	8004254 <HAL_ADC_ConfigChannel+0x128>
 8004252:	2300      	movs	r3, #0
 8004254:	461a      	mov	r2, r3
 8004256:	f7ff fc71 	bl	8003b3c <LL_ADC_SetOffsetSaturation>
 800425a:	e17b      	b.n	8004554 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	2100      	movs	r1, #0
 8004262:	4618      	mov	r0, r3
 8004264:	f7ff fc1e 	bl	8003aa4 <LL_ADC_GetOffsetChannel>
 8004268:	4603      	mov	r3, r0
 800426a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800426e:	2b00      	cmp	r3, #0
 8004270:	d10a      	bne.n	8004288 <HAL_ADC_ConfigChannel+0x15c>
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	2100      	movs	r1, #0
 8004278:	4618      	mov	r0, r3
 800427a:	f7ff fc13 	bl	8003aa4 <LL_ADC_GetOffsetChannel>
 800427e:	4603      	mov	r3, r0
 8004280:	0e9b      	lsrs	r3, r3, #26
 8004282:	f003 021f 	and.w	r2, r3, #31
 8004286:	e01e      	b.n	80042c6 <HAL_ADC_ConfigChannel+0x19a>
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	2100      	movs	r1, #0
 800428e:	4618      	mov	r0, r3
 8004290:	f7ff fc08 	bl	8003aa4 <LL_ADC_GetOffsetChannel>
 8004294:	4603      	mov	r3, r0
 8004296:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800429a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800429e:	fa93 f3a3 	rbit	r3, r3
 80042a2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80042a6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80042aa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80042ae:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d101      	bne.n	80042ba <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 80042b6:	2320      	movs	r3, #32
 80042b8:	e004      	b.n	80042c4 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 80042ba:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80042be:	fab3 f383 	clz	r3, r3
 80042c2:	b2db      	uxtb	r3, r3
 80042c4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d105      	bne.n	80042de <HAL_ADC_ConfigChannel+0x1b2>
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	0e9b      	lsrs	r3, r3, #26
 80042d8:	f003 031f 	and.w	r3, r3, #31
 80042dc:	e018      	b.n	8004310 <HAL_ADC_ConfigChannel+0x1e4>
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042e6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80042ea:	fa93 f3a3 	rbit	r3, r3
 80042ee:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80042f2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80042f6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80042fa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d101      	bne.n	8004306 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8004302:	2320      	movs	r3, #32
 8004304:	e004      	b.n	8004310 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8004306:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800430a:	fab3 f383 	clz	r3, r3
 800430e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004310:	429a      	cmp	r2, r3
 8004312:	d106      	bne.n	8004322 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	2200      	movs	r2, #0
 800431a:	2100      	movs	r1, #0
 800431c:	4618      	mov	r0, r3
 800431e:	f7ff fbd7 	bl	8003ad0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	2101      	movs	r1, #1
 8004328:	4618      	mov	r0, r3
 800432a:	f7ff fbbb 	bl	8003aa4 <LL_ADC_GetOffsetChannel>
 800432e:	4603      	mov	r3, r0
 8004330:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004334:	2b00      	cmp	r3, #0
 8004336:	d10a      	bne.n	800434e <HAL_ADC_ConfigChannel+0x222>
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	2101      	movs	r1, #1
 800433e:	4618      	mov	r0, r3
 8004340:	f7ff fbb0 	bl	8003aa4 <LL_ADC_GetOffsetChannel>
 8004344:	4603      	mov	r3, r0
 8004346:	0e9b      	lsrs	r3, r3, #26
 8004348:	f003 021f 	and.w	r2, r3, #31
 800434c:	e01e      	b.n	800438c <HAL_ADC_ConfigChannel+0x260>
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	2101      	movs	r1, #1
 8004354:	4618      	mov	r0, r3
 8004356:	f7ff fba5 	bl	8003aa4 <LL_ADC_GetOffsetChannel>
 800435a:	4603      	mov	r3, r0
 800435c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004360:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004364:	fa93 f3a3 	rbit	r3, r3
 8004368:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 800436c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004370:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8004374:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004378:	2b00      	cmp	r3, #0
 800437a:	d101      	bne.n	8004380 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 800437c:	2320      	movs	r3, #32
 800437e:	e004      	b.n	800438a <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8004380:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004384:	fab3 f383 	clz	r3, r3
 8004388:	b2db      	uxtb	r3, r3
 800438a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004394:	2b00      	cmp	r3, #0
 8004396:	d105      	bne.n	80043a4 <HAL_ADC_ConfigChannel+0x278>
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	0e9b      	lsrs	r3, r3, #26
 800439e:	f003 031f 	and.w	r3, r3, #31
 80043a2:	e018      	b.n	80043d6 <HAL_ADC_ConfigChannel+0x2aa>
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043ac:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80043b0:	fa93 f3a3 	rbit	r3, r3
 80043b4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80043b8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80043bc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80043c0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d101      	bne.n	80043cc <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 80043c8:	2320      	movs	r3, #32
 80043ca:	e004      	b.n	80043d6 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 80043cc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80043d0:	fab3 f383 	clz	r3, r3
 80043d4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80043d6:	429a      	cmp	r2, r3
 80043d8:	d106      	bne.n	80043e8 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	2200      	movs	r2, #0
 80043e0:	2101      	movs	r1, #1
 80043e2:	4618      	mov	r0, r3
 80043e4:	f7ff fb74 	bl	8003ad0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	2102      	movs	r1, #2
 80043ee:	4618      	mov	r0, r3
 80043f0:	f7ff fb58 	bl	8003aa4 <LL_ADC_GetOffsetChannel>
 80043f4:	4603      	mov	r3, r0
 80043f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d10a      	bne.n	8004414 <HAL_ADC_ConfigChannel+0x2e8>
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	2102      	movs	r1, #2
 8004404:	4618      	mov	r0, r3
 8004406:	f7ff fb4d 	bl	8003aa4 <LL_ADC_GetOffsetChannel>
 800440a:	4603      	mov	r3, r0
 800440c:	0e9b      	lsrs	r3, r3, #26
 800440e:	f003 021f 	and.w	r2, r3, #31
 8004412:	e01e      	b.n	8004452 <HAL_ADC_ConfigChannel+0x326>
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	2102      	movs	r1, #2
 800441a:	4618      	mov	r0, r3
 800441c:	f7ff fb42 	bl	8003aa4 <LL_ADC_GetOffsetChannel>
 8004420:	4603      	mov	r3, r0
 8004422:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004426:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800442a:	fa93 f3a3 	rbit	r3, r3
 800442e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8004432:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004436:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 800443a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800443e:	2b00      	cmp	r3, #0
 8004440:	d101      	bne.n	8004446 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8004442:	2320      	movs	r3, #32
 8004444:	e004      	b.n	8004450 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8004446:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800444a:	fab3 f383 	clz	r3, r3
 800444e:	b2db      	uxtb	r3, r3
 8004450:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800445a:	2b00      	cmp	r3, #0
 800445c:	d105      	bne.n	800446a <HAL_ADC_ConfigChannel+0x33e>
 800445e:	683b      	ldr	r3, [r7, #0]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	0e9b      	lsrs	r3, r3, #26
 8004464:	f003 031f 	and.w	r3, r3, #31
 8004468:	e016      	b.n	8004498 <HAL_ADC_ConfigChannel+0x36c>
 800446a:	683b      	ldr	r3, [r7, #0]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004472:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004476:	fa93 f3a3 	rbit	r3, r3
 800447a:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 800447c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800447e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8004482:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004486:	2b00      	cmp	r3, #0
 8004488:	d101      	bne.n	800448e <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 800448a:	2320      	movs	r3, #32
 800448c:	e004      	b.n	8004498 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 800448e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004492:	fab3 f383 	clz	r3, r3
 8004496:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004498:	429a      	cmp	r2, r3
 800449a:	d106      	bne.n	80044aa <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	2200      	movs	r2, #0
 80044a2:	2102      	movs	r1, #2
 80044a4:	4618      	mov	r0, r3
 80044a6:	f7ff fb13 	bl	8003ad0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	2103      	movs	r1, #3
 80044b0:	4618      	mov	r0, r3
 80044b2:	f7ff faf7 	bl	8003aa4 <LL_ADC_GetOffsetChannel>
 80044b6:	4603      	mov	r3, r0
 80044b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d10a      	bne.n	80044d6 <HAL_ADC_ConfigChannel+0x3aa>
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	2103      	movs	r1, #3
 80044c6:	4618      	mov	r0, r3
 80044c8:	f7ff faec 	bl	8003aa4 <LL_ADC_GetOffsetChannel>
 80044cc:	4603      	mov	r3, r0
 80044ce:	0e9b      	lsrs	r3, r3, #26
 80044d0:	f003 021f 	and.w	r2, r3, #31
 80044d4:	e017      	b.n	8004506 <HAL_ADC_ConfigChannel+0x3da>
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	2103      	movs	r1, #3
 80044dc:	4618      	mov	r0, r3
 80044de:	f7ff fae1 	bl	8003aa4 <LL_ADC_GetOffsetChannel>
 80044e2:	4603      	mov	r3, r0
 80044e4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80044e8:	fa93 f3a3 	rbit	r3, r3
 80044ec:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80044ee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80044f0:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80044f2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d101      	bne.n	80044fc <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 80044f8:	2320      	movs	r3, #32
 80044fa:	e003      	b.n	8004504 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 80044fc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80044fe:	fab3 f383 	clz	r3, r3
 8004502:	b2db      	uxtb	r3, r3
 8004504:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800450e:	2b00      	cmp	r3, #0
 8004510:	d105      	bne.n	800451e <HAL_ADC_ConfigChannel+0x3f2>
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	0e9b      	lsrs	r3, r3, #26
 8004518:	f003 031f 	and.w	r3, r3, #31
 800451c:	e011      	b.n	8004542 <HAL_ADC_ConfigChannel+0x416>
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004524:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004526:	fa93 f3a3 	rbit	r3, r3
 800452a:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 800452c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800452e:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8004530:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004532:	2b00      	cmp	r3, #0
 8004534:	d101      	bne.n	800453a <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8004536:	2320      	movs	r3, #32
 8004538:	e003      	b.n	8004542 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 800453a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800453c:	fab3 f383 	clz	r3, r3
 8004540:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004542:	429a      	cmp	r2, r3
 8004544:	d106      	bne.n	8004554 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	2200      	movs	r2, #0
 800454c:	2103      	movs	r1, #3
 800454e:	4618      	mov	r0, r3
 8004550:	f7ff fabe 	bl	8003ad0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	4618      	mov	r0, r3
 800455a:	f7ff fbeb 	bl	8003d34 <LL_ADC_IsEnabled>
 800455e:	4603      	mov	r3, r0
 8004560:	2b00      	cmp	r3, #0
 8004562:	f040 813d 	bne.w	80047e0 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6818      	ldr	r0, [r3, #0]
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	6819      	ldr	r1, [r3, #0]
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	68db      	ldr	r3, [r3, #12]
 8004572:	461a      	mov	r2, r3
 8004574:	f7ff fb68 	bl	8003c48 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	68db      	ldr	r3, [r3, #12]
 800457c:	4aa2      	ldr	r2, [pc, #648]	; (8004808 <HAL_ADC_ConfigChannel+0x6dc>)
 800457e:	4293      	cmp	r3, r2
 8004580:	f040 812e 	bne.w	80047e0 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004590:	2b00      	cmp	r3, #0
 8004592:	d10b      	bne.n	80045ac <HAL_ADC_ConfigChannel+0x480>
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	0e9b      	lsrs	r3, r3, #26
 800459a:	3301      	adds	r3, #1
 800459c:	f003 031f 	and.w	r3, r3, #31
 80045a0:	2b09      	cmp	r3, #9
 80045a2:	bf94      	ite	ls
 80045a4:	2301      	movls	r3, #1
 80045a6:	2300      	movhi	r3, #0
 80045a8:	b2db      	uxtb	r3, r3
 80045aa:	e019      	b.n	80045e0 <HAL_ADC_ConfigChannel+0x4b4>
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80045b4:	fa93 f3a3 	rbit	r3, r3
 80045b8:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80045ba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80045bc:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80045be:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d101      	bne.n	80045c8 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 80045c4:	2320      	movs	r3, #32
 80045c6:	e003      	b.n	80045d0 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 80045c8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80045ca:	fab3 f383 	clz	r3, r3
 80045ce:	b2db      	uxtb	r3, r3
 80045d0:	3301      	adds	r3, #1
 80045d2:	f003 031f 	and.w	r3, r3, #31
 80045d6:	2b09      	cmp	r3, #9
 80045d8:	bf94      	ite	ls
 80045da:	2301      	movls	r3, #1
 80045dc:	2300      	movhi	r3, #0
 80045de:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d079      	beq.n	80046d8 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d107      	bne.n	8004600 <HAL_ADC_ConfigChannel+0x4d4>
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	0e9b      	lsrs	r3, r3, #26
 80045f6:	3301      	adds	r3, #1
 80045f8:	069b      	lsls	r3, r3, #26
 80045fa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80045fe:	e015      	b.n	800462c <HAL_ADC_ConfigChannel+0x500>
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004606:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004608:	fa93 f3a3 	rbit	r3, r3
 800460c:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800460e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004610:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8004612:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004614:	2b00      	cmp	r3, #0
 8004616:	d101      	bne.n	800461c <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8004618:	2320      	movs	r3, #32
 800461a:	e003      	b.n	8004624 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 800461c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800461e:	fab3 f383 	clz	r3, r3
 8004622:	b2db      	uxtb	r3, r3
 8004624:	3301      	adds	r3, #1
 8004626:	069b      	lsls	r3, r3, #26
 8004628:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800462c:	683b      	ldr	r3, [r7, #0]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004634:	2b00      	cmp	r3, #0
 8004636:	d109      	bne.n	800464c <HAL_ADC_ConfigChannel+0x520>
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	0e9b      	lsrs	r3, r3, #26
 800463e:	3301      	adds	r3, #1
 8004640:	f003 031f 	and.w	r3, r3, #31
 8004644:	2101      	movs	r1, #1
 8004646:	fa01 f303 	lsl.w	r3, r1, r3
 800464a:	e017      	b.n	800467c <HAL_ADC_ConfigChannel+0x550>
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004652:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004654:	fa93 f3a3 	rbit	r3, r3
 8004658:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 800465a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800465c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 800465e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004660:	2b00      	cmp	r3, #0
 8004662:	d101      	bne.n	8004668 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8004664:	2320      	movs	r3, #32
 8004666:	e003      	b.n	8004670 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8004668:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800466a:	fab3 f383 	clz	r3, r3
 800466e:	b2db      	uxtb	r3, r3
 8004670:	3301      	adds	r3, #1
 8004672:	f003 031f 	and.w	r3, r3, #31
 8004676:	2101      	movs	r1, #1
 8004678:	fa01 f303 	lsl.w	r3, r1, r3
 800467c:	ea42 0103 	orr.w	r1, r2, r3
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004688:	2b00      	cmp	r3, #0
 800468a:	d10a      	bne.n	80046a2 <HAL_ADC_ConfigChannel+0x576>
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	0e9b      	lsrs	r3, r3, #26
 8004692:	3301      	adds	r3, #1
 8004694:	f003 021f 	and.w	r2, r3, #31
 8004698:	4613      	mov	r3, r2
 800469a:	005b      	lsls	r3, r3, #1
 800469c:	4413      	add	r3, r2
 800469e:	051b      	lsls	r3, r3, #20
 80046a0:	e018      	b.n	80046d4 <HAL_ADC_ConfigChannel+0x5a8>
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046aa:	fa93 f3a3 	rbit	r3, r3
 80046ae:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80046b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80046b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d101      	bne.n	80046be <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 80046ba:	2320      	movs	r3, #32
 80046bc:	e003      	b.n	80046c6 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 80046be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046c0:	fab3 f383 	clz	r3, r3
 80046c4:	b2db      	uxtb	r3, r3
 80046c6:	3301      	adds	r3, #1
 80046c8:	f003 021f 	and.w	r2, r3, #31
 80046cc:	4613      	mov	r3, r2
 80046ce:	005b      	lsls	r3, r3, #1
 80046d0:	4413      	add	r3, r2
 80046d2:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80046d4:	430b      	orrs	r3, r1
 80046d6:	e07e      	b.n	80047d6 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d107      	bne.n	80046f4 <HAL_ADC_ConfigChannel+0x5c8>
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	0e9b      	lsrs	r3, r3, #26
 80046ea:	3301      	adds	r3, #1
 80046ec:	069b      	lsls	r3, r3, #26
 80046ee:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80046f2:	e015      	b.n	8004720 <HAL_ADC_ConfigChannel+0x5f4>
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046fc:	fa93 f3a3 	rbit	r3, r3
 8004700:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8004702:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004704:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8004706:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004708:	2b00      	cmp	r3, #0
 800470a:	d101      	bne.n	8004710 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 800470c:	2320      	movs	r3, #32
 800470e:	e003      	b.n	8004718 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8004710:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004712:	fab3 f383 	clz	r3, r3
 8004716:	b2db      	uxtb	r3, r3
 8004718:	3301      	adds	r3, #1
 800471a:	069b      	lsls	r3, r3, #26
 800471c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004728:	2b00      	cmp	r3, #0
 800472a:	d109      	bne.n	8004740 <HAL_ADC_ConfigChannel+0x614>
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	0e9b      	lsrs	r3, r3, #26
 8004732:	3301      	adds	r3, #1
 8004734:	f003 031f 	and.w	r3, r3, #31
 8004738:	2101      	movs	r1, #1
 800473a:	fa01 f303 	lsl.w	r3, r1, r3
 800473e:	e017      	b.n	8004770 <HAL_ADC_ConfigChannel+0x644>
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004746:	6a3b      	ldr	r3, [r7, #32]
 8004748:	fa93 f3a3 	rbit	r3, r3
 800474c:	61fb      	str	r3, [r7, #28]
  return result;
 800474e:	69fb      	ldr	r3, [r7, #28]
 8004750:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8004752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004754:	2b00      	cmp	r3, #0
 8004756:	d101      	bne.n	800475c <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8004758:	2320      	movs	r3, #32
 800475a:	e003      	b.n	8004764 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 800475c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800475e:	fab3 f383 	clz	r3, r3
 8004762:	b2db      	uxtb	r3, r3
 8004764:	3301      	adds	r3, #1
 8004766:	f003 031f 	and.w	r3, r3, #31
 800476a:	2101      	movs	r1, #1
 800476c:	fa01 f303 	lsl.w	r3, r1, r3
 8004770:	ea42 0103 	orr.w	r1, r2, r3
 8004774:	683b      	ldr	r3, [r7, #0]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800477c:	2b00      	cmp	r3, #0
 800477e:	d10d      	bne.n	800479c <HAL_ADC_ConfigChannel+0x670>
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	0e9b      	lsrs	r3, r3, #26
 8004786:	3301      	adds	r3, #1
 8004788:	f003 021f 	and.w	r2, r3, #31
 800478c:	4613      	mov	r3, r2
 800478e:	005b      	lsls	r3, r3, #1
 8004790:	4413      	add	r3, r2
 8004792:	3b1e      	subs	r3, #30
 8004794:	051b      	lsls	r3, r3, #20
 8004796:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800479a:	e01b      	b.n	80047d4 <HAL_ADC_ConfigChannel+0x6a8>
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047a2:	697b      	ldr	r3, [r7, #20]
 80047a4:	fa93 f3a3 	rbit	r3, r3
 80047a8:	613b      	str	r3, [r7, #16]
  return result;
 80047aa:	693b      	ldr	r3, [r7, #16]
 80047ac:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80047ae:	69bb      	ldr	r3, [r7, #24]
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d101      	bne.n	80047b8 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 80047b4:	2320      	movs	r3, #32
 80047b6:	e003      	b.n	80047c0 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 80047b8:	69bb      	ldr	r3, [r7, #24]
 80047ba:	fab3 f383 	clz	r3, r3
 80047be:	b2db      	uxtb	r3, r3
 80047c0:	3301      	adds	r3, #1
 80047c2:	f003 021f 	and.w	r2, r3, #31
 80047c6:	4613      	mov	r3, r2
 80047c8:	005b      	lsls	r3, r3, #1
 80047ca:	4413      	add	r3, r2
 80047cc:	3b1e      	subs	r3, #30
 80047ce:	051b      	lsls	r3, r3, #20
 80047d0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80047d4:	430b      	orrs	r3, r1
 80047d6:	683a      	ldr	r2, [r7, #0]
 80047d8:	6892      	ldr	r2, [r2, #8]
 80047da:	4619      	mov	r1, r3
 80047dc:	f7ff fa08 	bl	8003bf0 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	681a      	ldr	r2, [r3, #0]
 80047e4:	4b09      	ldr	r3, [pc, #36]	; (800480c <HAL_ADC_ConfigChannel+0x6e0>)
 80047e6:	4013      	ands	r3, r2
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	f000 80be 	beq.w	800496a <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80047f6:	d004      	beq.n	8004802 <HAL_ADC_ConfigChannel+0x6d6>
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	4a04      	ldr	r2, [pc, #16]	; (8004810 <HAL_ADC_ConfigChannel+0x6e4>)
 80047fe:	4293      	cmp	r3, r2
 8004800:	d10a      	bne.n	8004818 <HAL_ADC_ConfigChannel+0x6ec>
 8004802:	4b04      	ldr	r3, [pc, #16]	; (8004814 <HAL_ADC_ConfigChannel+0x6e8>)
 8004804:	e009      	b.n	800481a <HAL_ADC_ConfigChannel+0x6ee>
 8004806:	bf00      	nop
 8004808:	407f0000 	.word	0x407f0000
 800480c:	80080000 	.word	0x80080000
 8004810:	50000100 	.word	0x50000100
 8004814:	50000300 	.word	0x50000300
 8004818:	4b59      	ldr	r3, [pc, #356]	; (8004980 <HAL_ADC_ConfigChannel+0x854>)
 800481a:	4618      	mov	r0, r3
 800481c:	f7ff f910 	bl	8003a40 <LL_ADC_GetCommonPathInternalCh>
 8004820:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	4a56      	ldr	r2, [pc, #344]	; (8004984 <HAL_ADC_ConfigChannel+0x858>)
 800482a:	4293      	cmp	r3, r2
 800482c:	d004      	beq.n	8004838 <HAL_ADC_ConfigChannel+0x70c>
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	4a55      	ldr	r2, [pc, #340]	; (8004988 <HAL_ADC_ConfigChannel+0x85c>)
 8004834:	4293      	cmp	r3, r2
 8004836:	d13a      	bne.n	80048ae <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004838:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800483c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004840:	2b00      	cmp	r3, #0
 8004842:	d134      	bne.n	80048ae <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800484c:	d005      	beq.n	800485a <HAL_ADC_ConfigChannel+0x72e>
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	4a4e      	ldr	r2, [pc, #312]	; (800498c <HAL_ADC_ConfigChannel+0x860>)
 8004854:	4293      	cmp	r3, r2
 8004856:	f040 8085 	bne.w	8004964 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004862:	d004      	beq.n	800486e <HAL_ADC_ConfigChannel+0x742>
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	4a49      	ldr	r2, [pc, #292]	; (8004990 <HAL_ADC_ConfigChannel+0x864>)
 800486a:	4293      	cmp	r3, r2
 800486c:	d101      	bne.n	8004872 <HAL_ADC_ConfigChannel+0x746>
 800486e:	4a49      	ldr	r2, [pc, #292]	; (8004994 <HAL_ADC_ConfigChannel+0x868>)
 8004870:	e000      	b.n	8004874 <HAL_ADC_ConfigChannel+0x748>
 8004872:	4a43      	ldr	r2, [pc, #268]	; (8004980 <HAL_ADC_ConfigChannel+0x854>)
 8004874:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004878:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800487c:	4619      	mov	r1, r3
 800487e:	4610      	mov	r0, r2
 8004880:	f7ff f8cb 	bl	8003a1a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004884:	4b44      	ldr	r3, [pc, #272]	; (8004998 <HAL_ADC_ConfigChannel+0x86c>)
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	099b      	lsrs	r3, r3, #6
 800488a:	4a44      	ldr	r2, [pc, #272]	; (800499c <HAL_ADC_ConfigChannel+0x870>)
 800488c:	fba2 2303 	umull	r2, r3, r2, r3
 8004890:	099b      	lsrs	r3, r3, #6
 8004892:	1c5a      	adds	r2, r3, #1
 8004894:	4613      	mov	r3, r2
 8004896:	005b      	lsls	r3, r3, #1
 8004898:	4413      	add	r3, r2
 800489a:	009b      	lsls	r3, r3, #2
 800489c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800489e:	e002      	b.n	80048a6 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	3b01      	subs	r3, #1
 80048a4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d1f9      	bne.n	80048a0 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80048ac:	e05a      	b.n	8004964 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80048ae:	683b      	ldr	r3, [r7, #0]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	4a3b      	ldr	r2, [pc, #236]	; (80049a0 <HAL_ADC_ConfigChannel+0x874>)
 80048b4:	4293      	cmp	r3, r2
 80048b6:	d125      	bne.n	8004904 <HAL_ADC_ConfigChannel+0x7d8>
 80048b8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80048bc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d11f      	bne.n	8004904 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	4a31      	ldr	r2, [pc, #196]	; (8004990 <HAL_ADC_ConfigChannel+0x864>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d104      	bne.n	80048d8 <HAL_ADC_ConfigChannel+0x7ac>
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	4a34      	ldr	r2, [pc, #208]	; (80049a4 <HAL_ADC_ConfigChannel+0x878>)
 80048d4:	4293      	cmp	r3, r2
 80048d6:	d047      	beq.n	8004968 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80048e0:	d004      	beq.n	80048ec <HAL_ADC_ConfigChannel+0x7c0>
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	4a2a      	ldr	r2, [pc, #168]	; (8004990 <HAL_ADC_ConfigChannel+0x864>)
 80048e8:	4293      	cmp	r3, r2
 80048ea:	d101      	bne.n	80048f0 <HAL_ADC_ConfigChannel+0x7c4>
 80048ec:	4a29      	ldr	r2, [pc, #164]	; (8004994 <HAL_ADC_ConfigChannel+0x868>)
 80048ee:	e000      	b.n	80048f2 <HAL_ADC_ConfigChannel+0x7c6>
 80048f0:	4a23      	ldr	r2, [pc, #140]	; (8004980 <HAL_ADC_ConfigChannel+0x854>)
 80048f2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80048f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80048fa:	4619      	mov	r1, r3
 80048fc:	4610      	mov	r0, r2
 80048fe:	f7ff f88c 	bl	8003a1a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004902:	e031      	b.n	8004968 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	4a27      	ldr	r2, [pc, #156]	; (80049a8 <HAL_ADC_ConfigChannel+0x87c>)
 800490a:	4293      	cmp	r3, r2
 800490c:	d12d      	bne.n	800496a <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800490e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004912:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004916:	2b00      	cmp	r3, #0
 8004918:	d127      	bne.n	800496a <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	4a1c      	ldr	r2, [pc, #112]	; (8004990 <HAL_ADC_ConfigChannel+0x864>)
 8004920:	4293      	cmp	r3, r2
 8004922:	d022      	beq.n	800496a <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800492c:	d004      	beq.n	8004938 <HAL_ADC_ConfigChannel+0x80c>
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	4a17      	ldr	r2, [pc, #92]	; (8004990 <HAL_ADC_ConfigChannel+0x864>)
 8004934:	4293      	cmp	r3, r2
 8004936:	d101      	bne.n	800493c <HAL_ADC_ConfigChannel+0x810>
 8004938:	4a16      	ldr	r2, [pc, #88]	; (8004994 <HAL_ADC_ConfigChannel+0x868>)
 800493a:	e000      	b.n	800493e <HAL_ADC_ConfigChannel+0x812>
 800493c:	4a10      	ldr	r2, [pc, #64]	; (8004980 <HAL_ADC_ConfigChannel+0x854>)
 800493e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004942:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004946:	4619      	mov	r1, r3
 8004948:	4610      	mov	r0, r2
 800494a:	f7ff f866 	bl	8003a1a <LL_ADC_SetCommonPathInternalCh>
 800494e:	e00c      	b.n	800496a <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004954:	f043 0220 	orr.w	r2, r3, #32
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800495c:	2301      	movs	r3, #1
 800495e:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8004962:	e002      	b.n	800496a <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004964:	bf00      	nop
 8004966:	e000      	b.n	800496a <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004968:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	2200      	movs	r2, #0
 800496e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8004972:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8004976:	4618      	mov	r0, r3
 8004978:	37d8      	adds	r7, #216	; 0xd8
 800497a:	46bd      	mov	sp, r7
 800497c:	bd80      	pop	{r7, pc}
 800497e:	bf00      	nop
 8004980:	50000700 	.word	0x50000700
 8004984:	c3210000 	.word	0xc3210000
 8004988:	90c00010 	.word	0x90c00010
 800498c:	50000600 	.word	0x50000600
 8004990:	50000100 	.word	0x50000100
 8004994:	50000300 	.word	0x50000300
 8004998:	20000000 	.word	0x20000000
 800499c:	053e2d63 	.word	0x053e2d63
 80049a0:	c7520000 	.word	0xc7520000
 80049a4:	50000500 	.word	0x50000500
 80049a8:	cb840000 	.word	0xcb840000

080049ac <LL_ADC_IsEnabled>:
{
 80049ac:	b480      	push	{r7}
 80049ae:	b083      	sub	sp, #12
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	689b      	ldr	r3, [r3, #8]
 80049b8:	f003 0301 	and.w	r3, r3, #1
 80049bc:	2b01      	cmp	r3, #1
 80049be:	d101      	bne.n	80049c4 <LL_ADC_IsEnabled+0x18>
 80049c0:	2301      	movs	r3, #1
 80049c2:	e000      	b.n	80049c6 <LL_ADC_IsEnabled+0x1a>
 80049c4:	2300      	movs	r3, #0
}
 80049c6:	4618      	mov	r0, r3
 80049c8:	370c      	adds	r7, #12
 80049ca:	46bd      	mov	sp, r7
 80049cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d0:	4770      	bx	lr

080049d2 <LL_ADC_REG_IsConversionOngoing>:
{
 80049d2:	b480      	push	{r7}
 80049d4:	b083      	sub	sp, #12
 80049d6:	af00      	add	r7, sp, #0
 80049d8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	689b      	ldr	r3, [r3, #8]
 80049de:	f003 0304 	and.w	r3, r3, #4
 80049e2:	2b04      	cmp	r3, #4
 80049e4:	d101      	bne.n	80049ea <LL_ADC_REG_IsConversionOngoing+0x18>
 80049e6:	2301      	movs	r3, #1
 80049e8:	e000      	b.n	80049ec <LL_ADC_REG_IsConversionOngoing+0x1a>
 80049ea:	2300      	movs	r3, #0
}
 80049ec:	4618      	mov	r0, r3
 80049ee:	370c      	adds	r7, #12
 80049f0:	46bd      	mov	sp, r7
 80049f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f6:	4770      	bx	lr

080049f8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80049f8:	b590      	push	{r4, r7, lr}
 80049fa:	b0a1      	sub	sp, #132	; 0x84
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
 8004a00:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004a02:	2300      	movs	r3, #0
 8004a04:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8004a0e:	2b01      	cmp	r3, #1
 8004a10:	d101      	bne.n	8004a16 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004a12:	2302      	movs	r3, #2
 8004a14:	e0e7      	b.n	8004be6 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	2201      	movs	r2, #1
 8004a1a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8004a1e:	2300      	movs	r3, #0
 8004a20:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8004a22:	2300      	movs	r3, #0
 8004a24:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004a2e:	d102      	bne.n	8004a36 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004a30:	4b6f      	ldr	r3, [pc, #444]	; (8004bf0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004a32:	60bb      	str	r3, [r7, #8]
 8004a34:	e009      	b.n	8004a4a <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	4a6e      	ldr	r2, [pc, #440]	; (8004bf4 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8004a3c:	4293      	cmp	r3, r2
 8004a3e:	d102      	bne.n	8004a46 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8004a40:	4b6d      	ldr	r3, [pc, #436]	; (8004bf8 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8004a42:	60bb      	str	r3, [r7, #8]
 8004a44:	e001      	b.n	8004a4a <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8004a46:	2300      	movs	r3, #0
 8004a48:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8004a4a:	68bb      	ldr	r3, [r7, #8]
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d10b      	bne.n	8004a68 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a54:	f043 0220 	orr.w	r2, r3, #32
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2200      	movs	r2, #0
 8004a60:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8004a64:	2301      	movs	r3, #1
 8004a66:	e0be      	b.n	8004be6 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8004a68:	68bb      	ldr	r3, [r7, #8]
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	f7ff ffb1 	bl	80049d2 <LL_ADC_REG_IsConversionOngoing>
 8004a70:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	4618      	mov	r0, r3
 8004a78:	f7ff ffab 	bl	80049d2 <LL_ADC_REG_IsConversionOngoing>
 8004a7c:	4603      	mov	r3, r0
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	f040 80a0 	bne.w	8004bc4 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8004a84:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	f040 809c 	bne.w	8004bc4 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004a94:	d004      	beq.n	8004aa0 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	4a55      	ldr	r2, [pc, #340]	; (8004bf0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004a9c:	4293      	cmp	r3, r2
 8004a9e:	d101      	bne.n	8004aa4 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8004aa0:	4b56      	ldr	r3, [pc, #344]	; (8004bfc <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8004aa2:	e000      	b.n	8004aa6 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8004aa4:	4b56      	ldr	r3, [pc, #344]	; (8004c00 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8004aa6:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d04b      	beq.n	8004b48 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8004ab0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004ab2:	689b      	ldr	r3, [r3, #8]
 8004ab4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	6859      	ldr	r1, [r3, #4]
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004ac2:	035b      	lsls	r3, r3, #13
 8004ac4:	430b      	orrs	r3, r1
 8004ac6:	431a      	orrs	r2, r3
 8004ac8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004aca:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004ad4:	d004      	beq.n	8004ae0 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	4a45      	ldr	r2, [pc, #276]	; (8004bf0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004adc:	4293      	cmp	r3, r2
 8004ade:	d10f      	bne.n	8004b00 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8004ae0:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8004ae4:	f7ff ff62 	bl	80049ac <LL_ADC_IsEnabled>
 8004ae8:	4604      	mov	r4, r0
 8004aea:	4841      	ldr	r0, [pc, #260]	; (8004bf0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004aec:	f7ff ff5e 	bl	80049ac <LL_ADC_IsEnabled>
 8004af0:	4603      	mov	r3, r0
 8004af2:	4323      	orrs	r3, r4
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	bf0c      	ite	eq
 8004af8:	2301      	moveq	r3, #1
 8004afa:	2300      	movne	r3, #0
 8004afc:	b2db      	uxtb	r3, r3
 8004afe:	e012      	b.n	8004b26 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8004b00:	483c      	ldr	r0, [pc, #240]	; (8004bf4 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8004b02:	f7ff ff53 	bl	80049ac <LL_ADC_IsEnabled>
 8004b06:	4604      	mov	r4, r0
 8004b08:	483b      	ldr	r0, [pc, #236]	; (8004bf8 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8004b0a:	f7ff ff4f 	bl	80049ac <LL_ADC_IsEnabled>
 8004b0e:	4603      	mov	r3, r0
 8004b10:	431c      	orrs	r4, r3
 8004b12:	483c      	ldr	r0, [pc, #240]	; (8004c04 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8004b14:	f7ff ff4a 	bl	80049ac <LL_ADC_IsEnabled>
 8004b18:	4603      	mov	r3, r0
 8004b1a:	4323      	orrs	r3, r4
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	bf0c      	ite	eq
 8004b20:	2301      	moveq	r3, #1
 8004b22:	2300      	movne	r3, #0
 8004b24:	b2db      	uxtb	r3, r3
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d056      	beq.n	8004bd8 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004b2a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004b2c:	689b      	ldr	r3, [r3, #8]
 8004b2e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8004b32:	f023 030f 	bic.w	r3, r3, #15
 8004b36:	683a      	ldr	r2, [r7, #0]
 8004b38:	6811      	ldr	r1, [r2, #0]
 8004b3a:	683a      	ldr	r2, [r7, #0]
 8004b3c:	6892      	ldr	r2, [r2, #8]
 8004b3e:	430a      	orrs	r2, r1
 8004b40:	431a      	orrs	r2, r3
 8004b42:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004b44:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004b46:	e047      	b.n	8004bd8 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8004b48:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004b4a:	689b      	ldr	r3, [r3, #8]
 8004b4c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004b50:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004b52:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004b5c:	d004      	beq.n	8004b68 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	4a23      	ldr	r2, [pc, #140]	; (8004bf0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004b64:	4293      	cmp	r3, r2
 8004b66:	d10f      	bne.n	8004b88 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8004b68:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8004b6c:	f7ff ff1e 	bl	80049ac <LL_ADC_IsEnabled>
 8004b70:	4604      	mov	r4, r0
 8004b72:	481f      	ldr	r0, [pc, #124]	; (8004bf0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004b74:	f7ff ff1a 	bl	80049ac <LL_ADC_IsEnabled>
 8004b78:	4603      	mov	r3, r0
 8004b7a:	4323      	orrs	r3, r4
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	bf0c      	ite	eq
 8004b80:	2301      	moveq	r3, #1
 8004b82:	2300      	movne	r3, #0
 8004b84:	b2db      	uxtb	r3, r3
 8004b86:	e012      	b.n	8004bae <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8004b88:	481a      	ldr	r0, [pc, #104]	; (8004bf4 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8004b8a:	f7ff ff0f 	bl	80049ac <LL_ADC_IsEnabled>
 8004b8e:	4604      	mov	r4, r0
 8004b90:	4819      	ldr	r0, [pc, #100]	; (8004bf8 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8004b92:	f7ff ff0b 	bl	80049ac <LL_ADC_IsEnabled>
 8004b96:	4603      	mov	r3, r0
 8004b98:	431c      	orrs	r4, r3
 8004b9a:	481a      	ldr	r0, [pc, #104]	; (8004c04 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8004b9c:	f7ff ff06 	bl	80049ac <LL_ADC_IsEnabled>
 8004ba0:	4603      	mov	r3, r0
 8004ba2:	4323      	orrs	r3, r4
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	bf0c      	ite	eq
 8004ba8:	2301      	moveq	r3, #1
 8004baa:	2300      	movne	r3, #0
 8004bac:	b2db      	uxtb	r3, r3
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d012      	beq.n	8004bd8 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004bb2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004bb4:	689b      	ldr	r3, [r3, #8]
 8004bb6:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8004bba:	f023 030f 	bic.w	r3, r3, #15
 8004bbe:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8004bc0:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004bc2:	e009      	b.n	8004bd8 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bc8:	f043 0220 	orr.w	r2, r3, #32
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8004bd0:	2301      	movs	r3, #1
 8004bd2:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8004bd6:	e000      	b.n	8004bda <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004bd8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	2200      	movs	r2, #0
 8004bde:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8004be2:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8004be6:	4618      	mov	r0, r3
 8004be8:	3784      	adds	r7, #132	; 0x84
 8004bea:	46bd      	mov	sp, r7
 8004bec:	bd90      	pop	{r4, r7, pc}
 8004bee:	bf00      	nop
 8004bf0:	50000100 	.word	0x50000100
 8004bf4:	50000400 	.word	0x50000400
 8004bf8:	50000500 	.word	0x50000500
 8004bfc:	50000300 	.word	0x50000300
 8004c00:	50000700 	.word	0x50000700
 8004c04:	50000600 	.word	0x50000600

08004c08 <HAL_CORDIC_Init>:
  * @brief  Initialize the CORDIC peripheral and the associated handle.
  * @param  hcordic pointer to a CORDIC_HandleTypeDef structure.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CORDIC_Init(CORDIC_HandleTypeDef *hcordic)
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b082      	sub	sp, #8
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
  /* Check the CORDIC handle allocation */
  if (hcordic == NULL)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d101      	bne.n	8004c1a <HAL_CORDIC_Init+0x12>
  {
    /* Return error status */
    return HAL_ERROR;
 8004c16:	2301      	movs	r3, #1
 8004c18:	e023      	b.n	8004c62 <HAL_CORDIC_Init+0x5a>

    /* Initialize the low level hardware */
    hcordic->MspInitCallback(hcordic);
  }
#else
  if (hcordic->State == HAL_CORDIC_STATE_RESET)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004c20:	b2db      	uxtb	r3, r3
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d106      	bne.n	8004c34 <HAL_CORDIC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hcordic->Lock = HAL_UNLOCKED;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	2200      	movs	r2, #0
 8004c2a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize the low level hardware */
    HAL_CORDIC_MspInit(hcordic);
 8004c2e:	6878      	ldr	r0, [r7, #4]
 8004c30:	f7fc fcae 	bl	8001590 <HAL_CORDIC_MspInit>
  }
#endif /* (USE_HAL_CORDIC_REGISTER_CALLBACKS) */

  /* Set CORDIC error code to none */
  hcordic->ErrorCode = HAL_CORDIC_ERROR_NONE;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2200      	movs	r2, #0
 8004c38:	625a      	str	r2, [r3, #36]	; 0x24

  /* Reset pInBuff and pOutBuff */
  hcordic->pInBuff = NULL;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	605a      	str	r2, [r3, #4]
  hcordic->pOutBuff = NULL;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2200      	movs	r2, #0
 8004c44:	609a      	str	r2, [r3, #8]

  /* Reset NbCalcToOrder and NbCalcToGet */
  hcordic->NbCalcToOrder = 0U;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	2200      	movs	r2, #0
 8004c4a:	60da      	str	r2, [r3, #12]
  hcordic->NbCalcToGet = 0U;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2200      	movs	r2, #0
 8004c50:	611a      	str	r2, [r3, #16]

  /* Reset DMADirection */
  hcordic->DMADirection = CORDIC_DMA_DIR_NONE;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	2200      	movs	r2, #0
 8004c56:	615a      	str	r2, [r3, #20]

  /* Change CORDIC peripheral state */
  hcordic->State = HAL_CORDIC_STATE_READY;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2201      	movs	r2, #1
 8004c5c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Return function status */
  return HAL_OK;
 8004c60:	2300      	movs	r3, #0
}
 8004c62:	4618      	mov	r0, r3
 8004c64:	3708      	adds	r7, #8
 8004c66:	46bd      	mov	sp, r7
 8004c68:	bd80      	pop	{r7, pc}
	...

08004c6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004c6c:	b480      	push	{r7}
 8004c6e:	b085      	sub	sp, #20
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	f003 0307 	and.w	r3, r3, #7
 8004c7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004c7c:	4b0c      	ldr	r3, [pc, #48]	; (8004cb0 <__NVIC_SetPriorityGrouping+0x44>)
 8004c7e:	68db      	ldr	r3, [r3, #12]
 8004c80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004c82:	68ba      	ldr	r2, [r7, #8]
 8004c84:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004c88:	4013      	ands	r3, r2
 8004c8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004c90:	68bb      	ldr	r3, [r7, #8]
 8004c92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004c94:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004c98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004c9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004c9e:	4a04      	ldr	r2, [pc, #16]	; (8004cb0 <__NVIC_SetPriorityGrouping+0x44>)
 8004ca0:	68bb      	ldr	r3, [r7, #8]
 8004ca2:	60d3      	str	r3, [r2, #12]
}
 8004ca4:	bf00      	nop
 8004ca6:	3714      	adds	r7, #20
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cae:	4770      	bx	lr
 8004cb0:	e000ed00 	.word	0xe000ed00

08004cb4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004cb4:	b480      	push	{r7}
 8004cb6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004cb8:	4b04      	ldr	r3, [pc, #16]	; (8004ccc <__NVIC_GetPriorityGrouping+0x18>)
 8004cba:	68db      	ldr	r3, [r3, #12]
 8004cbc:	0a1b      	lsrs	r3, r3, #8
 8004cbe:	f003 0307 	and.w	r3, r3, #7
}
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cca:	4770      	bx	lr
 8004ccc:	e000ed00 	.word	0xe000ed00

08004cd0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004cd0:	b480      	push	{r7}
 8004cd2:	b083      	sub	sp, #12
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	4603      	mov	r3, r0
 8004cd8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004cda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	db0b      	blt.n	8004cfa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004ce2:	79fb      	ldrb	r3, [r7, #7]
 8004ce4:	f003 021f 	and.w	r2, r3, #31
 8004ce8:	4907      	ldr	r1, [pc, #28]	; (8004d08 <__NVIC_EnableIRQ+0x38>)
 8004cea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004cee:	095b      	lsrs	r3, r3, #5
 8004cf0:	2001      	movs	r0, #1
 8004cf2:	fa00 f202 	lsl.w	r2, r0, r2
 8004cf6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004cfa:	bf00      	nop
 8004cfc:	370c      	adds	r7, #12
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d04:	4770      	bx	lr
 8004d06:	bf00      	nop
 8004d08:	e000e100 	.word	0xe000e100

08004d0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004d0c:	b480      	push	{r7}
 8004d0e:	b083      	sub	sp, #12
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	4603      	mov	r3, r0
 8004d14:	6039      	str	r1, [r7, #0]
 8004d16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004d18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	db0a      	blt.n	8004d36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	b2da      	uxtb	r2, r3
 8004d24:	490c      	ldr	r1, [pc, #48]	; (8004d58 <__NVIC_SetPriority+0x4c>)
 8004d26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d2a:	0112      	lsls	r2, r2, #4
 8004d2c:	b2d2      	uxtb	r2, r2
 8004d2e:	440b      	add	r3, r1
 8004d30:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004d34:	e00a      	b.n	8004d4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	b2da      	uxtb	r2, r3
 8004d3a:	4908      	ldr	r1, [pc, #32]	; (8004d5c <__NVIC_SetPriority+0x50>)
 8004d3c:	79fb      	ldrb	r3, [r7, #7]
 8004d3e:	f003 030f 	and.w	r3, r3, #15
 8004d42:	3b04      	subs	r3, #4
 8004d44:	0112      	lsls	r2, r2, #4
 8004d46:	b2d2      	uxtb	r2, r2
 8004d48:	440b      	add	r3, r1
 8004d4a:	761a      	strb	r2, [r3, #24]
}
 8004d4c:	bf00      	nop
 8004d4e:	370c      	adds	r7, #12
 8004d50:	46bd      	mov	sp, r7
 8004d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d56:	4770      	bx	lr
 8004d58:	e000e100 	.word	0xe000e100
 8004d5c:	e000ed00 	.word	0xe000ed00

08004d60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004d60:	b480      	push	{r7}
 8004d62:	b089      	sub	sp, #36	; 0x24
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	60f8      	str	r0, [r7, #12]
 8004d68:	60b9      	str	r1, [r7, #8]
 8004d6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	f003 0307 	and.w	r3, r3, #7
 8004d72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004d74:	69fb      	ldr	r3, [r7, #28]
 8004d76:	f1c3 0307 	rsb	r3, r3, #7
 8004d7a:	2b04      	cmp	r3, #4
 8004d7c:	bf28      	it	cs
 8004d7e:	2304      	movcs	r3, #4
 8004d80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004d82:	69fb      	ldr	r3, [r7, #28]
 8004d84:	3304      	adds	r3, #4
 8004d86:	2b06      	cmp	r3, #6
 8004d88:	d902      	bls.n	8004d90 <NVIC_EncodePriority+0x30>
 8004d8a:	69fb      	ldr	r3, [r7, #28]
 8004d8c:	3b03      	subs	r3, #3
 8004d8e:	e000      	b.n	8004d92 <NVIC_EncodePriority+0x32>
 8004d90:	2300      	movs	r3, #0
 8004d92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004d94:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004d98:	69bb      	ldr	r3, [r7, #24]
 8004d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8004d9e:	43da      	mvns	r2, r3
 8004da0:	68bb      	ldr	r3, [r7, #8]
 8004da2:	401a      	ands	r2, r3
 8004da4:	697b      	ldr	r3, [r7, #20]
 8004da6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004da8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004dac:	697b      	ldr	r3, [r7, #20]
 8004dae:	fa01 f303 	lsl.w	r3, r1, r3
 8004db2:	43d9      	mvns	r1, r3
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004db8:	4313      	orrs	r3, r2
         );
}
 8004dba:	4618      	mov	r0, r3
 8004dbc:	3724      	adds	r7, #36	; 0x24
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc4:	4770      	bx	lr

08004dc6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004dc6:	b580      	push	{r7, lr}
 8004dc8:	b082      	sub	sp, #8
 8004dca:	af00      	add	r7, sp, #0
 8004dcc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004dce:	6878      	ldr	r0, [r7, #4]
 8004dd0:	f7ff ff4c 	bl	8004c6c <__NVIC_SetPriorityGrouping>
}
 8004dd4:	bf00      	nop
 8004dd6:	3708      	adds	r7, #8
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	bd80      	pop	{r7, pc}

08004ddc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b086      	sub	sp, #24
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	4603      	mov	r3, r0
 8004de4:	60b9      	str	r1, [r7, #8]
 8004de6:	607a      	str	r2, [r7, #4]
 8004de8:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004dea:	f7ff ff63 	bl	8004cb4 <__NVIC_GetPriorityGrouping>
 8004dee:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004df0:	687a      	ldr	r2, [r7, #4]
 8004df2:	68b9      	ldr	r1, [r7, #8]
 8004df4:	6978      	ldr	r0, [r7, #20]
 8004df6:	f7ff ffb3 	bl	8004d60 <NVIC_EncodePriority>
 8004dfa:	4602      	mov	r2, r0
 8004dfc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004e00:	4611      	mov	r1, r2
 8004e02:	4618      	mov	r0, r3
 8004e04:	f7ff ff82 	bl	8004d0c <__NVIC_SetPriority>
}
 8004e08:	bf00      	nop
 8004e0a:	3718      	adds	r7, #24
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	bd80      	pop	{r7, pc}

08004e10 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004e10:	b580      	push	{r7, lr}
 8004e12:	b082      	sub	sp, #8
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	4603      	mov	r3, r0
 8004e18:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004e1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e1e:	4618      	mov	r0, r3
 8004e20:	f7ff ff56 	bl	8004cd0 <__NVIC_EnableIRQ>
}
 8004e24:	bf00      	nop
 8004e26:	3708      	adds	r7, #8
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	bd80      	pop	{r7, pc}

08004e2c <HAL_FMAC_Init>:
  * @brief  Initialize the FMAC peripheral and the associated handle.
  * @param  hfmac pointer to a FMAC_HandleTypeDef structure.
  * @retval HAL_StatusTypeDef HAL status
  */
HAL_StatusTypeDef HAL_FMAC_Init(FMAC_HandleTypeDef *hfmac)
{
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	b084      	sub	sp, #16
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the FMAC handle allocation */
  if (hfmac == NULL)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d101      	bne.n	8004e3e <HAL_FMAC_Init+0x12>
  {
    return HAL_ERROR;
 8004e3a:	2301      	movs	r3, #1
 8004e3c:	e033      	b.n	8004ea6 <HAL_FMAC_Init+0x7a>
  }

  /* Check the instance */
  assert_param(IS_FMAC_ALL_INSTANCE(hfmac->Instance));

  if (hfmac->State == HAL_FMAC_STATE_RESET)
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004e44:	b2db      	uxtb	r3, r3
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d106      	bne.n	8004e58 <HAL_FMAC_Init+0x2c>
  {
    /* Initialize lock resource */
    hfmac->Lock = HAL_UNLOCKED;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Init the low level hardware */
    hfmac->MspInitCallback(hfmac);
#else
    /* Init the low level hardware */
    HAL_FMAC_MspInit(hfmac);
 8004e52:	6878      	ldr	r0, [r7, #4]
 8004e54:	f7fc fbd0 	bl	80015f8 <HAL_FMAC_MspInit>
#endif /* USE_HAL_FMAC_REGISTER_CALLBACKS */
  }

  /* Reset pInput and pOutput */
  hfmac->FilterParam = 0U;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	605a      	str	r2, [r3, #4]
  FMAC_ResetDataPointers(hfmac);
 8004e5e:	6878      	ldr	r0, [r7, #4]
 8004e60:	f000 f854 	bl	8004f0c <FMAC_ResetDataPointers>

  /* Reset FMAC unit (internal pointers) */
  if (FMAC_Reset(hfmac) == HAL_ERROR)
 8004e64:	6878      	ldr	r0, [r7, #4]
 8004e66:	f000 f822 	bl	8004eae <FMAC_Reset>
 8004e6a:	4603      	mov	r3, r0
 8004e6c:	2b01      	cmp	r3, #1
 8004e6e:	d10c      	bne.n	8004e8a <HAL_FMAC_Init+0x5e>
  {
    /* Update FMAC error code and FMAC peripheral state */
    hfmac->ErrorCode |= HAL_FMAC_ERROR_RESET;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e74:	f043 0210 	orr.w	r2, r3, #16
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	635a      	str	r2, [r3, #52]	; 0x34
    hfmac->State = HAL_FMAC_STATE_TIMEOUT;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	22a0      	movs	r2, #160	; 0xa0
 8004e80:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

    status = HAL_ERROR;
 8004e84:	2301      	movs	r3, #1
 8004e86:	73fb      	strb	r3, [r7, #15]
 8004e88:	e008      	b.n	8004e9c <HAL_FMAC_Init+0x70>
  }
  else
  {
    /* Update FMAC error code and FMAC peripheral state */
    hfmac->ErrorCode = HAL_FMAC_ERROR_NONE;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	635a      	str	r2, [r3, #52]	; 0x34
    hfmac->State = HAL_FMAC_STATE_READY;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2220      	movs	r2, #32
 8004e94:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

    status = HAL_OK;
 8004e98:	2300      	movs	r3, #0
 8004e9a:	73fb      	strb	r3, [r7, #15]
  }

  __HAL_UNLOCK(hfmac);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 8004ea4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	3710      	adds	r7, #16
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	bd80      	pop	{r7, pc}

08004eae <FMAC_Reset>:
  * @brief  Perform a reset of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval HAL_StatusTypeDef HAL status
  */
static HAL_StatusTypeDef FMAC_Reset(FMAC_HandleTypeDef *hfmac)
{
 8004eae:	b580      	push	{r7, lr}
 8004eb0:	b084      	sub	sp, #16
 8004eb2:	af00      	add	r7, sp, #0
 8004eb4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004eb6:	f7fe fd6f 	bl	8003998 <HAL_GetTick>
 8004eba:	60f8      	str	r0, [r7, #12]

  /* Perform the reset */
  SET_BIT(hfmac->Instance->CR, FMAC_CR_RESET);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	691a      	ldr	r2, [r3, #16]
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004eca:	611a      	str	r2, [r3, #16]

  /* Wait until flag is reset */
  while (READ_BIT(hfmac->Instance->CR, FMAC_CR_RESET) != 0U)
 8004ecc:	e00f      	b.n	8004eee <FMAC_Reset+0x40>
  {
    if ((HAL_GetTick() - tickstart) > HAL_FMAC_RESET_TIMEOUT_VALUE)
 8004ece:	f7fe fd63 	bl	8003998 <HAL_GetTick>
 8004ed2:	4602      	mov	r2, r0
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	1ad3      	subs	r3, r2, r3
 8004ed8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004edc:	d907      	bls.n	8004eee <FMAC_Reset+0x40>
    {
      hfmac->ErrorCode |= HAL_FMAC_ERROR_TIMEOUT;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ee2:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8004eea:	2301      	movs	r3, #1
 8004eec:	e00a      	b.n	8004f04 <FMAC_Reset+0x56>
  while (READ_BIT(hfmac->Instance->CR, FMAC_CR_RESET) != 0U)
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	691b      	ldr	r3, [r3, #16]
 8004ef4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d1e8      	bne.n	8004ece <FMAC_Reset+0x20>
    }
  }

  hfmac->ErrorCode = HAL_FMAC_ERROR_NONE;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2200      	movs	r2, #0
 8004f00:	635a      	str	r2, [r3, #52]	; 0x34
  return HAL_OK;
 8004f02:	2300      	movs	r3, #0
}
 8004f04:	4618      	mov	r0, r3
 8004f06:	3710      	adds	r7, #16
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	bd80      	pop	{r7, pc}

08004f0c <FMAC_ResetDataPointers>:
  * @brief  Reset the data pointers of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval None
  */
static void FMAC_ResetDataPointers(FMAC_HandleTypeDef *hfmac)
{
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	b082      	sub	sp, #8
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
  FMAC_ResetInputStateAndDataPointers(hfmac);
 8004f14:	6878      	ldr	r0, [r7, #4]
 8004f16:	f000 f807 	bl	8004f28 <FMAC_ResetInputStateAndDataPointers>
  FMAC_ResetOutputStateAndDataPointers(hfmac);
 8004f1a:	6878      	ldr	r0, [r7, #4]
 8004f1c:	f000 f81b 	bl	8004f56 <FMAC_ResetOutputStateAndDataPointers>
}
 8004f20:	bf00      	nop
 8004f22:	3708      	adds	r7, #8
 8004f24:	46bd      	mov	sp, r7
 8004f26:	bd80      	pop	{r7, pc}

08004f28 <FMAC_ResetInputStateAndDataPointers>:
  * @brief  Reset the input data pointers of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval None
  */
static void FMAC_ResetInputStateAndDataPointers(FMAC_HandleTypeDef *hfmac)
{
 8004f28:	b480      	push	{r7}
 8004f2a:	b083      	sub	sp, #12
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
  hfmac->pInput = NULL;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2200      	movs	r2, #0
 8004f34:	60da      	str	r2, [r3, #12]
  hfmac->pInputSize = NULL;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	2200      	movs	r2, #0
 8004f3a:	615a      	str	r2, [r3, #20]
  hfmac->InputCurrentSize = 0U;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2200      	movs	r2, #0
 8004f40:	821a      	strh	r2, [r3, #16]
  hfmac->WrState = HAL_FMAC_STATE_READY;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	2220      	movs	r2, #32
 8004f46:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
}
 8004f4a:	bf00      	nop
 8004f4c:	370c      	adds	r7, #12
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f54:	4770      	bx	lr

08004f56 <FMAC_ResetOutputStateAndDataPointers>:
  * @brief  Reset the output data pointers of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval None
  */
static void FMAC_ResetOutputStateAndDataPointers(FMAC_HandleTypeDef *hfmac)
{
 8004f56:	b480      	push	{r7}
 8004f58:	b083      	sub	sp, #12
 8004f5a:	af00      	add	r7, sp, #0
 8004f5c:	6078      	str	r0, [r7, #4]
  hfmac->pOutput = NULL;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	2200      	movs	r2, #0
 8004f62:	619a      	str	r2, [r3, #24]
  hfmac->pOutputSize = NULL;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2200      	movs	r2, #0
 8004f68:	621a      	str	r2, [r3, #32]
  hfmac->OutputCurrentSize = 0U;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	839a      	strh	r2, [r3, #28]
  hfmac->RdState = HAL_FMAC_STATE_READY;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2220      	movs	r2, #32
 8004f74:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
}
 8004f78:	bf00      	nop
 8004f7a:	370c      	adds	r7, #12
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f82:	4770      	bx	lr

08004f84 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004f84:	b480      	push	{r7}
 8004f86:	b087      	sub	sp, #28
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
 8004f8c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004f8e:	2300      	movs	r3, #0
 8004f90:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004f92:	e15a      	b.n	800524a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	681a      	ldr	r2, [r3, #0]
 8004f98:	2101      	movs	r1, #1
 8004f9a:	697b      	ldr	r3, [r7, #20]
 8004f9c:	fa01 f303 	lsl.w	r3, r1, r3
 8004fa0:	4013      	ands	r3, r2
 8004fa2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	f000 814c 	beq.w	8005244 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	685b      	ldr	r3, [r3, #4]
 8004fb0:	f003 0303 	and.w	r3, r3, #3
 8004fb4:	2b01      	cmp	r3, #1
 8004fb6:	d005      	beq.n	8004fc4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004fb8:	683b      	ldr	r3, [r7, #0]
 8004fba:	685b      	ldr	r3, [r3, #4]
 8004fbc:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004fc0:	2b02      	cmp	r3, #2
 8004fc2:	d130      	bne.n	8005026 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	689b      	ldr	r3, [r3, #8]
 8004fc8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004fca:	697b      	ldr	r3, [r7, #20]
 8004fcc:	005b      	lsls	r3, r3, #1
 8004fce:	2203      	movs	r2, #3
 8004fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8004fd4:	43db      	mvns	r3, r3
 8004fd6:	693a      	ldr	r2, [r7, #16]
 8004fd8:	4013      	ands	r3, r2
 8004fda:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	68da      	ldr	r2, [r3, #12]
 8004fe0:	697b      	ldr	r3, [r7, #20]
 8004fe2:	005b      	lsls	r3, r3, #1
 8004fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8004fe8:	693a      	ldr	r2, [r7, #16]
 8004fea:	4313      	orrs	r3, r2
 8004fec:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	693a      	ldr	r2, [r7, #16]
 8004ff2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	685b      	ldr	r3, [r3, #4]
 8004ff8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004ffa:	2201      	movs	r2, #1
 8004ffc:	697b      	ldr	r3, [r7, #20]
 8004ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8005002:	43db      	mvns	r3, r3
 8005004:	693a      	ldr	r2, [r7, #16]
 8005006:	4013      	ands	r3, r2
 8005008:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800500a:	683b      	ldr	r3, [r7, #0]
 800500c:	685b      	ldr	r3, [r3, #4]
 800500e:	091b      	lsrs	r3, r3, #4
 8005010:	f003 0201 	and.w	r2, r3, #1
 8005014:	697b      	ldr	r3, [r7, #20]
 8005016:	fa02 f303 	lsl.w	r3, r2, r3
 800501a:	693a      	ldr	r2, [r7, #16]
 800501c:	4313      	orrs	r3, r2
 800501e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	693a      	ldr	r2, [r7, #16]
 8005024:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005026:	683b      	ldr	r3, [r7, #0]
 8005028:	685b      	ldr	r3, [r3, #4]
 800502a:	f003 0303 	and.w	r3, r3, #3
 800502e:	2b03      	cmp	r3, #3
 8005030:	d017      	beq.n	8005062 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	68db      	ldr	r3, [r3, #12]
 8005036:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005038:	697b      	ldr	r3, [r7, #20]
 800503a:	005b      	lsls	r3, r3, #1
 800503c:	2203      	movs	r2, #3
 800503e:	fa02 f303 	lsl.w	r3, r2, r3
 8005042:	43db      	mvns	r3, r3
 8005044:	693a      	ldr	r2, [r7, #16]
 8005046:	4013      	ands	r3, r2
 8005048:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	689a      	ldr	r2, [r3, #8]
 800504e:	697b      	ldr	r3, [r7, #20]
 8005050:	005b      	lsls	r3, r3, #1
 8005052:	fa02 f303 	lsl.w	r3, r2, r3
 8005056:	693a      	ldr	r2, [r7, #16]
 8005058:	4313      	orrs	r3, r2
 800505a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	693a      	ldr	r2, [r7, #16]
 8005060:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005062:	683b      	ldr	r3, [r7, #0]
 8005064:	685b      	ldr	r3, [r3, #4]
 8005066:	f003 0303 	and.w	r3, r3, #3
 800506a:	2b02      	cmp	r3, #2
 800506c:	d123      	bne.n	80050b6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800506e:	697b      	ldr	r3, [r7, #20]
 8005070:	08da      	lsrs	r2, r3, #3
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	3208      	adds	r2, #8
 8005076:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800507a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800507c:	697b      	ldr	r3, [r7, #20]
 800507e:	f003 0307 	and.w	r3, r3, #7
 8005082:	009b      	lsls	r3, r3, #2
 8005084:	220f      	movs	r2, #15
 8005086:	fa02 f303 	lsl.w	r3, r2, r3
 800508a:	43db      	mvns	r3, r3
 800508c:	693a      	ldr	r2, [r7, #16]
 800508e:	4013      	ands	r3, r2
 8005090:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005092:	683b      	ldr	r3, [r7, #0]
 8005094:	691a      	ldr	r2, [r3, #16]
 8005096:	697b      	ldr	r3, [r7, #20]
 8005098:	f003 0307 	and.w	r3, r3, #7
 800509c:	009b      	lsls	r3, r3, #2
 800509e:	fa02 f303 	lsl.w	r3, r2, r3
 80050a2:	693a      	ldr	r2, [r7, #16]
 80050a4:	4313      	orrs	r3, r2
 80050a6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80050a8:	697b      	ldr	r3, [r7, #20]
 80050aa:	08da      	lsrs	r2, r3, #3
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	3208      	adds	r2, #8
 80050b0:	6939      	ldr	r1, [r7, #16]
 80050b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80050bc:	697b      	ldr	r3, [r7, #20]
 80050be:	005b      	lsls	r3, r3, #1
 80050c0:	2203      	movs	r2, #3
 80050c2:	fa02 f303 	lsl.w	r3, r2, r3
 80050c6:	43db      	mvns	r3, r3
 80050c8:	693a      	ldr	r2, [r7, #16]
 80050ca:	4013      	ands	r3, r2
 80050cc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80050ce:	683b      	ldr	r3, [r7, #0]
 80050d0:	685b      	ldr	r3, [r3, #4]
 80050d2:	f003 0203 	and.w	r2, r3, #3
 80050d6:	697b      	ldr	r3, [r7, #20]
 80050d8:	005b      	lsls	r3, r3, #1
 80050da:	fa02 f303 	lsl.w	r3, r2, r3
 80050de:	693a      	ldr	r2, [r7, #16]
 80050e0:	4313      	orrs	r3, r2
 80050e2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	693a      	ldr	r2, [r7, #16]
 80050e8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	685b      	ldr	r3, [r3, #4]
 80050ee:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	f000 80a6 	beq.w	8005244 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80050f8:	4b5b      	ldr	r3, [pc, #364]	; (8005268 <HAL_GPIO_Init+0x2e4>)
 80050fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050fc:	4a5a      	ldr	r2, [pc, #360]	; (8005268 <HAL_GPIO_Init+0x2e4>)
 80050fe:	f043 0301 	orr.w	r3, r3, #1
 8005102:	6613      	str	r3, [r2, #96]	; 0x60
 8005104:	4b58      	ldr	r3, [pc, #352]	; (8005268 <HAL_GPIO_Init+0x2e4>)
 8005106:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005108:	f003 0301 	and.w	r3, r3, #1
 800510c:	60bb      	str	r3, [r7, #8]
 800510e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005110:	4a56      	ldr	r2, [pc, #344]	; (800526c <HAL_GPIO_Init+0x2e8>)
 8005112:	697b      	ldr	r3, [r7, #20]
 8005114:	089b      	lsrs	r3, r3, #2
 8005116:	3302      	adds	r3, #2
 8005118:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800511c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800511e:	697b      	ldr	r3, [r7, #20]
 8005120:	f003 0303 	and.w	r3, r3, #3
 8005124:	009b      	lsls	r3, r3, #2
 8005126:	220f      	movs	r2, #15
 8005128:	fa02 f303 	lsl.w	r3, r2, r3
 800512c:	43db      	mvns	r3, r3
 800512e:	693a      	ldr	r2, [r7, #16]
 8005130:	4013      	ands	r3, r2
 8005132:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800513a:	d01f      	beq.n	800517c <HAL_GPIO_Init+0x1f8>
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	4a4c      	ldr	r2, [pc, #304]	; (8005270 <HAL_GPIO_Init+0x2ec>)
 8005140:	4293      	cmp	r3, r2
 8005142:	d019      	beq.n	8005178 <HAL_GPIO_Init+0x1f4>
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	4a4b      	ldr	r2, [pc, #300]	; (8005274 <HAL_GPIO_Init+0x2f0>)
 8005148:	4293      	cmp	r3, r2
 800514a:	d013      	beq.n	8005174 <HAL_GPIO_Init+0x1f0>
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	4a4a      	ldr	r2, [pc, #296]	; (8005278 <HAL_GPIO_Init+0x2f4>)
 8005150:	4293      	cmp	r3, r2
 8005152:	d00d      	beq.n	8005170 <HAL_GPIO_Init+0x1ec>
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	4a49      	ldr	r2, [pc, #292]	; (800527c <HAL_GPIO_Init+0x2f8>)
 8005158:	4293      	cmp	r3, r2
 800515a:	d007      	beq.n	800516c <HAL_GPIO_Init+0x1e8>
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	4a48      	ldr	r2, [pc, #288]	; (8005280 <HAL_GPIO_Init+0x2fc>)
 8005160:	4293      	cmp	r3, r2
 8005162:	d101      	bne.n	8005168 <HAL_GPIO_Init+0x1e4>
 8005164:	2305      	movs	r3, #5
 8005166:	e00a      	b.n	800517e <HAL_GPIO_Init+0x1fa>
 8005168:	2306      	movs	r3, #6
 800516a:	e008      	b.n	800517e <HAL_GPIO_Init+0x1fa>
 800516c:	2304      	movs	r3, #4
 800516e:	e006      	b.n	800517e <HAL_GPIO_Init+0x1fa>
 8005170:	2303      	movs	r3, #3
 8005172:	e004      	b.n	800517e <HAL_GPIO_Init+0x1fa>
 8005174:	2302      	movs	r3, #2
 8005176:	e002      	b.n	800517e <HAL_GPIO_Init+0x1fa>
 8005178:	2301      	movs	r3, #1
 800517a:	e000      	b.n	800517e <HAL_GPIO_Init+0x1fa>
 800517c:	2300      	movs	r3, #0
 800517e:	697a      	ldr	r2, [r7, #20]
 8005180:	f002 0203 	and.w	r2, r2, #3
 8005184:	0092      	lsls	r2, r2, #2
 8005186:	4093      	lsls	r3, r2
 8005188:	693a      	ldr	r2, [r7, #16]
 800518a:	4313      	orrs	r3, r2
 800518c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800518e:	4937      	ldr	r1, [pc, #220]	; (800526c <HAL_GPIO_Init+0x2e8>)
 8005190:	697b      	ldr	r3, [r7, #20]
 8005192:	089b      	lsrs	r3, r3, #2
 8005194:	3302      	adds	r3, #2
 8005196:	693a      	ldr	r2, [r7, #16]
 8005198:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800519c:	4b39      	ldr	r3, [pc, #228]	; (8005284 <HAL_GPIO_Init+0x300>)
 800519e:	689b      	ldr	r3, [r3, #8]
 80051a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	43db      	mvns	r3, r3
 80051a6:	693a      	ldr	r2, [r7, #16]
 80051a8:	4013      	ands	r3, r2
 80051aa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80051ac:	683b      	ldr	r3, [r7, #0]
 80051ae:	685b      	ldr	r3, [r3, #4]
 80051b0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d003      	beq.n	80051c0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80051b8:	693a      	ldr	r2, [r7, #16]
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	4313      	orrs	r3, r2
 80051be:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80051c0:	4a30      	ldr	r2, [pc, #192]	; (8005284 <HAL_GPIO_Init+0x300>)
 80051c2:	693b      	ldr	r3, [r7, #16]
 80051c4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80051c6:	4b2f      	ldr	r3, [pc, #188]	; (8005284 <HAL_GPIO_Init+0x300>)
 80051c8:	68db      	ldr	r3, [r3, #12]
 80051ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	43db      	mvns	r3, r3
 80051d0:	693a      	ldr	r2, [r7, #16]
 80051d2:	4013      	ands	r3, r2
 80051d4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80051d6:	683b      	ldr	r3, [r7, #0]
 80051d8:	685b      	ldr	r3, [r3, #4]
 80051da:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d003      	beq.n	80051ea <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80051e2:	693a      	ldr	r2, [r7, #16]
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	4313      	orrs	r3, r2
 80051e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80051ea:	4a26      	ldr	r2, [pc, #152]	; (8005284 <HAL_GPIO_Init+0x300>)
 80051ec:	693b      	ldr	r3, [r7, #16]
 80051ee:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80051f0:	4b24      	ldr	r3, [pc, #144]	; (8005284 <HAL_GPIO_Init+0x300>)
 80051f2:	685b      	ldr	r3, [r3, #4]
 80051f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	43db      	mvns	r3, r3
 80051fa:	693a      	ldr	r2, [r7, #16]
 80051fc:	4013      	ands	r3, r2
 80051fe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005200:	683b      	ldr	r3, [r7, #0]
 8005202:	685b      	ldr	r3, [r3, #4]
 8005204:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005208:	2b00      	cmp	r3, #0
 800520a:	d003      	beq.n	8005214 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800520c:	693a      	ldr	r2, [r7, #16]
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	4313      	orrs	r3, r2
 8005212:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005214:	4a1b      	ldr	r2, [pc, #108]	; (8005284 <HAL_GPIO_Init+0x300>)
 8005216:	693b      	ldr	r3, [r7, #16]
 8005218:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800521a:	4b1a      	ldr	r3, [pc, #104]	; (8005284 <HAL_GPIO_Init+0x300>)
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	43db      	mvns	r3, r3
 8005224:	693a      	ldr	r2, [r7, #16]
 8005226:	4013      	ands	r3, r2
 8005228:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800522a:	683b      	ldr	r3, [r7, #0]
 800522c:	685b      	ldr	r3, [r3, #4]
 800522e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005232:	2b00      	cmp	r3, #0
 8005234:	d003      	beq.n	800523e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8005236:	693a      	ldr	r2, [r7, #16]
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	4313      	orrs	r3, r2
 800523c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800523e:	4a11      	ldr	r2, [pc, #68]	; (8005284 <HAL_GPIO_Init+0x300>)
 8005240:	693b      	ldr	r3, [r7, #16]
 8005242:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8005244:	697b      	ldr	r3, [r7, #20]
 8005246:	3301      	adds	r3, #1
 8005248:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800524a:	683b      	ldr	r3, [r7, #0]
 800524c:	681a      	ldr	r2, [r3, #0]
 800524e:	697b      	ldr	r3, [r7, #20]
 8005250:	fa22 f303 	lsr.w	r3, r2, r3
 8005254:	2b00      	cmp	r3, #0
 8005256:	f47f ae9d 	bne.w	8004f94 <HAL_GPIO_Init+0x10>
  }
}
 800525a:	bf00      	nop
 800525c:	bf00      	nop
 800525e:	371c      	adds	r7, #28
 8005260:	46bd      	mov	sp, r7
 8005262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005266:	4770      	bx	lr
 8005268:	40021000 	.word	0x40021000
 800526c:	40010000 	.word	0x40010000
 8005270:	48000400 	.word	0x48000400
 8005274:	48000800 	.word	0x48000800
 8005278:	48000c00 	.word	0x48000c00
 800527c:	48001000 	.word	0x48001000
 8005280:	48001400 	.word	0x48001400
 8005284:	40010400 	.word	0x40010400

08005288 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005288:	b480      	push	{r7}
 800528a:	b083      	sub	sp, #12
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
 8005290:	460b      	mov	r3, r1
 8005292:	807b      	strh	r3, [r7, #2]
 8005294:	4613      	mov	r3, r2
 8005296:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005298:	787b      	ldrb	r3, [r7, #1]
 800529a:	2b00      	cmp	r3, #0
 800529c:	d003      	beq.n	80052a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800529e:	887a      	ldrh	r2, [r7, #2]
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80052a4:	e002      	b.n	80052ac <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80052a6:	887a      	ldrh	r2, [r7, #2]
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	629a      	str	r2, [r3, #40]	; 0x28
}
 80052ac:	bf00      	nop
 80052ae:	370c      	adds	r7, #12
 80052b0:	46bd      	mov	sp, r7
 80052b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b6:	4770      	bx	lr

080052b8 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80052b8:	b480      	push	{r7}
 80052ba:	b085      	sub	sp, #20
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]
 80052c0:	460b      	mov	r3, r1
 80052c2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	695b      	ldr	r3, [r3, #20]
 80052c8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80052ca:	887a      	ldrh	r2, [r7, #2]
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	4013      	ands	r3, r2
 80052d0:	041a      	lsls	r2, r3, #16
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	43d9      	mvns	r1, r3
 80052d6:	887b      	ldrh	r3, [r7, #2]
 80052d8:	400b      	ands	r3, r1
 80052da:	431a      	orrs	r2, r3
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	619a      	str	r2, [r3, #24]
}
 80052e0:	bf00      	nop
 80052e2:	3714      	adds	r7, #20
 80052e4:	46bd      	mov	sp, r7
 80052e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ea:	4770      	bx	lr

080052ec <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80052ec:	b580      	push	{r7, lr}
 80052ee:	b082      	sub	sp, #8
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	4603      	mov	r3, r0
 80052f4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80052f6:	4b08      	ldr	r3, [pc, #32]	; (8005318 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80052f8:	695a      	ldr	r2, [r3, #20]
 80052fa:	88fb      	ldrh	r3, [r7, #6]
 80052fc:	4013      	ands	r3, r2
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d006      	beq.n	8005310 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005302:	4a05      	ldr	r2, [pc, #20]	; (8005318 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005304:	88fb      	ldrh	r3, [r7, #6]
 8005306:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005308:	88fb      	ldrh	r3, [r7, #6]
 800530a:	4618      	mov	r0, r3
 800530c:	f7fc f994 	bl	8001638 <HAL_GPIO_EXTI_Callback>
  }
}
 8005310:	bf00      	nop
 8005312:	3708      	adds	r7, #8
 8005314:	46bd      	mov	sp, r7
 8005316:	bd80      	pop	{r7, pc}
 8005318:	40010400 	.word	0x40010400

0800531c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800531c:	b580      	push	{r7, lr}
 800531e:	b082      	sub	sp, #8
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2b00      	cmp	r3, #0
 8005328:	d101      	bne.n	800532e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800532a:	2301      	movs	r3, #1
 800532c:	e081      	b.n	8005432 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005334:	b2db      	uxtb	r3, r3
 8005336:	2b00      	cmp	r3, #0
 8005338:	d106      	bne.n	8005348 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	2200      	movs	r2, #0
 800533e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005342:	6878      	ldr	r0, [r7, #4]
 8005344:	f7fc fb08 	bl	8001958 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2224      	movs	r2, #36	; 0x24
 800534c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	681a      	ldr	r2, [r3, #0]
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f022 0201 	bic.w	r2, r2, #1
 800535e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	685a      	ldr	r2, [r3, #4]
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800536c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	689a      	ldr	r2, [r3, #8]
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800537c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	68db      	ldr	r3, [r3, #12]
 8005382:	2b01      	cmp	r3, #1
 8005384:	d107      	bne.n	8005396 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	689a      	ldr	r2, [r3, #8]
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005392:	609a      	str	r2, [r3, #8]
 8005394:	e006      	b.n	80053a4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	689a      	ldr	r2, [r3, #8]
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80053a2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	68db      	ldr	r3, [r3, #12]
 80053a8:	2b02      	cmp	r3, #2
 80053aa:	d104      	bne.n	80053b6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80053b4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	685b      	ldr	r3, [r3, #4]
 80053bc:	687a      	ldr	r2, [r7, #4]
 80053be:	6812      	ldr	r2, [r2, #0]
 80053c0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80053c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80053c8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	68da      	ldr	r2, [r3, #12]
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80053d8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	691a      	ldr	r2, [r3, #16]
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	695b      	ldr	r3, [r3, #20]
 80053e2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	699b      	ldr	r3, [r3, #24]
 80053ea:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	430a      	orrs	r2, r1
 80053f2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	69d9      	ldr	r1, [r3, #28]
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	6a1a      	ldr	r2, [r3, #32]
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	430a      	orrs	r2, r1
 8005402:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	681a      	ldr	r2, [r3, #0]
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f042 0201 	orr.w	r2, r2, #1
 8005412:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2200      	movs	r2, #0
 8005418:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	2220      	movs	r2, #32
 800541e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	2200      	movs	r2, #0
 8005426:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2200      	movs	r2, #0
 800542c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8005430:	2300      	movs	r3, #0
}
 8005432:	4618      	mov	r0, r3
 8005434:	3708      	adds	r7, #8
 8005436:	46bd      	mov	sp, r7
 8005438:	bd80      	pop	{r7, pc}
	...

0800543c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800543c:	b580      	push	{r7, lr}
 800543e:	b088      	sub	sp, #32
 8005440:	af02      	add	r7, sp, #8
 8005442:	60f8      	str	r0, [r7, #12]
 8005444:	607a      	str	r2, [r7, #4]
 8005446:	461a      	mov	r2, r3
 8005448:	460b      	mov	r3, r1
 800544a:	817b      	strh	r3, [r7, #10]
 800544c:	4613      	mov	r3, r2
 800544e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005456:	b2db      	uxtb	r3, r3
 8005458:	2b20      	cmp	r3, #32
 800545a:	f040 80da 	bne.w	8005612 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005464:	2b01      	cmp	r3, #1
 8005466:	d101      	bne.n	800546c <HAL_I2C_Master_Transmit+0x30>
 8005468:	2302      	movs	r3, #2
 800546a:	e0d3      	b.n	8005614 <HAL_I2C_Master_Transmit+0x1d8>
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	2201      	movs	r2, #1
 8005470:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005474:	f7fe fa90 	bl	8003998 <HAL_GetTick>
 8005478:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800547a:	697b      	ldr	r3, [r7, #20]
 800547c:	9300      	str	r3, [sp, #0]
 800547e:	2319      	movs	r3, #25
 8005480:	2201      	movs	r2, #1
 8005482:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005486:	68f8      	ldr	r0, [r7, #12]
 8005488:	f000 fb66 	bl	8005b58 <I2C_WaitOnFlagUntilTimeout>
 800548c:	4603      	mov	r3, r0
 800548e:	2b00      	cmp	r3, #0
 8005490:	d001      	beq.n	8005496 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8005492:	2301      	movs	r3, #1
 8005494:	e0be      	b.n	8005614 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	2221      	movs	r2, #33	; 0x21
 800549a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	2210      	movs	r2, #16
 80054a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	2200      	movs	r2, #0
 80054aa:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	687a      	ldr	r2, [r7, #4]
 80054b0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	893a      	ldrh	r2, [r7, #8]
 80054b6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	2200      	movs	r2, #0
 80054bc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054c2:	b29b      	uxth	r3, r3
 80054c4:	2bff      	cmp	r3, #255	; 0xff
 80054c6:	d90e      	bls.n	80054e6 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	22ff      	movs	r2, #255	; 0xff
 80054cc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054d2:	b2da      	uxtb	r2, r3
 80054d4:	8979      	ldrh	r1, [r7, #10]
 80054d6:	4b51      	ldr	r3, [pc, #324]	; (800561c <HAL_I2C_Master_Transmit+0x1e0>)
 80054d8:	9300      	str	r3, [sp, #0]
 80054da:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80054de:	68f8      	ldr	r0, [r7, #12]
 80054e0:	f000 fce2 	bl	8005ea8 <I2C_TransferConfig>
 80054e4:	e06c      	b.n	80055c0 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054ea:	b29a      	uxth	r2, r3
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054f4:	b2da      	uxtb	r2, r3
 80054f6:	8979      	ldrh	r1, [r7, #10]
 80054f8:	4b48      	ldr	r3, [pc, #288]	; (800561c <HAL_I2C_Master_Transmit+0x1e0>)
 80054fa:	9300      	str	r3, [sp, #0]
 80054fc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005500:	68f8      	ldr	r0, [r7, #12]
 8005502:	f000 fcd1 	bl	8005ea8 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8005506:	e05b      	b.n	80055c0 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005508:	697a      	ldr	r2, [r7, #20]
 800550a:	6a39      	ldr	r1, [r7, #32]
 800550c:	68f8      	ldr	r0, [r7, #12]
 800550e:	f000 fb63 	bl	8005bd8 <I2C_WaitOnTXISFlagUntilTimeout>
 8005512:	4603      	mov	r3, r0
 8005514:	2b00      	cmp	r3, #0
 8005516:	d001      	beq.n	800551c <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8005518:	2301      	movs	r3, #1
 800551a:	e07b      	b.n	8005614 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005520:	781a      	ldrb	r2, [r3, #0]
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800552c:	1c5a      	adds	r2, r3, #1
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005536:	b29b      	uxth	r3, r3
 8005538:	3b01      	subs	r3, #1
 800553a:	b29a      	uxth	r2, r3
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005544:	3b01      	subs	r3, #1
 8005546:	b29a      	uxth	r2, r3
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005550:	b29b      	uxth	r3, r3
 8005552:	2b00      	cmp	r3, #0
 8005554:	d034      	beq.n	80055c0 <HAL_I2C_Master_Transmit+0x184>
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800555a:	2b00      	cmp	r3, #0
 800555c:	d130      	bne.n	80055c0 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800555e:	697b      	ldr	r3, [r7, #20]
 8005560:	9300      	str	r3, [sp, #0]
 8005562:	6a3b      	ldr	r3, [r7, #32]
 8005564:	2200      	movs	r2, #0
 8005566:	2180      	movs	r1, #128	; 0x80
 8005568:	68f8      	ldr	r0, [r7, #12]
 800556a:	f000 faf5 	bl	8005b58 <I2C_WaitOnFlagUntilTimeout>
 800556e:	4603      	mov	r3, r0
 8005570:	2b00      	cmp	r3, #0
 8005572:	d001      	beq.n	8005578 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8005574:	2301      	movs	r3, #1
 8005576:	e04d      	b.n	8005614 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800557c:	b29b      	uxth	r3, r3
 800557e:	2bff      	cmp	r3, #255	; 0xff
 8005580:	d90e      	bls.n	80055a0 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	22ff      	movs	r2, #255	; 0xff
 8005586:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800558c:	b2da      	uxtb	r2, r3
 800558e:	8979      	ldrh	r1, [r7, #10]
 8005590:	2300      	movs	r3, #0
 8005592:	9300      	str	r3, [sp, #0]
 8005594:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005598:	68f8      	ldr	r0, [r7, #12]
 800559a:	f000 fc85 	bl	8005ea8 <I2C_TransferConfig>
 800559e:	e00f      	b.n	80055c0 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055a4:	b29a      	uxth	r2, r3
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055ae:	b2da      	uxtb	r2, r3
 80055b0:	8979      	ldrh	r1, [r7, #10]
 80055b2:	2300      	movs	r3, #0
 80055b4:	9300      	str	r3, [sp, #0]
 80055b6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80055ba:	68f8      	ldr	r0, [r7, #12]
 80055bc:	f000 fc74 	bl	8005ea8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055c4:	b29b      	uxth	r3, r3
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d19e      	bne.n	8005508 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80055ca:	697a      	ldr	r2, [r7, #20]
 80055cc:	6a39      	ldr	r1, [r7, #32]
 80055ce:	68f8      	ldr	r0, [r7, #12]
 80055d0:	f000 fb42 	bl	8005c58 <I2C_WaitOnSTOPFlagUntilTimeout>
 80055d4:	4603      	mov	r3, r0
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d001      	beq.n	80055de <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80055da:	2301      	movs	r3, #1
 80055dc:	e01a      	b.n	8005614 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	2220      	movs	r2, #32
 80055e4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	6859      	ldr	r1, [r3, #4]
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	681a      	ldr	r2, [r3, #0]
 80055f0:	4b0b      	ldr	r3, [pc, #44]	; (8005620 <HAL_I2C_Master_Transmit+0x1e4>)
 80055f2:	400b      	ands	r3, r1
 80055f4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	2220      	movs	r2, #32
 80055fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	2200      	movs	r2, #0
 8005602:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	2200      	movs	r2, #0
 800560a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800560e:	2300      	movs	r3, #0
 8005610:	e000      	b.n	8005614 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8005612:	2302      	movs	r3, #2
  }
}
 8005614:	4618      	mov	r0, r3
 8005616:	3718      	adds	r7, #24
 8005618:	46bd      	mov	sp, r7
 800561a:	bd80      	pop	{r7, pc}
 800561c:	80002000 	.word	0x80002000
 8005620:	fe00e800 	.word	0xfe00e800

08005624 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005624:	b580      	push	{r7, lr}
 8005626:	b088      	sub	sp, #32
 8005628:	af02      	add	r7, sp, #8
 800562a:	60f8      	str	r0, [r7, #12]
 800562c:	4608      	mov	r0, r1
 800562e:	4611      	mov	r1, r2
 8005630:	461a      	mov	r2, r3
 8005632:	4603      	mov	r3, r0
 8005634:	817b      	strh	r3, [r7, #10]
 8005636:	460b      	mov	r3, r1
 8005638:	813b      	strh	r3, [r7, #8]
 800563a:	4613      	mov	r3, r2
 800563c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005644:	b2db      	uxtb	r3, r3
 8005646:	2b20      	cmp	r3, #32
 8005648:	f040 80fd 	bne.w	8005846 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800564c:	6a3b      	ldr	r3, [r7, #32]
 800564e:	2b00      	cmp	r3, #0
 8005650:	d002      	beq.n	8005658 <HAL_I2C_Mem_Read+0x34>
 8005652:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005654:	2b00      	cmp	r3, #0
 8005656:	d105      	bne.n	8005664 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800565e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8005660:	2301      	movs	r3, #1
 8005662:	e0f1      	b.n	8005848 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800566a:	2b01      	cmp	r3, #1
 800566c:	d101      	bne.n	8005672 <HAL_I2C_Mem_Read+0x4e>
 800566e:	2302      	movs	r3, #2
 8005670:	e0ea      	b.n	8005848 <HAL_I2C_Mem_Read+0x224>
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	2201      	movs	r2, #1
 8005676:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800567a:	f7fe f98d 	bl	8003998 <HAL_GetTick>
 800567e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005680:	697b      	ldr	r3, [r7, #20]
 8005682:	9300      	str	r3, [sp, #0]
 8005684:	2319      	movs	r3, #25
 8005686:	2201      	movs	r2, #1
 8005688:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800568c:	68f8      	ldr	r0, [r7, #12]
 800568e:	f000 fa63 	bl	8005b58 <I2C_WaitOnFlagUntilTimeout>
 8005692:	4603      	mov	r3, r0
 8005694:	2b00      	cmp	r3, #0
 8005696:	d001      	beq.n	800569c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8005698:	2301      	movs	r3, #1
 800569a:	e0d5      	b.n	8005848 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	2222      	movs	r2, #34	; 0x22
 80056a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	2240      	movs	r2, #64	; 0x40
 80056a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	2200      	movs	r2, #0
 80056b0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	6a3a      	ldr	r2, [r7, #32]
 80056b6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80056bc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	2200      	movs	r2, #0
 80056c2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80056c4:	88f8      	ldrh	r0, [r7, #6]
 80056c6:	893a      	ldrh	r2, [r7, #8]
 80056c8:	8979      	ldrh	r1, [r7, #10]
 80056ca:	697b      	ldr	r3, [r7, #20]
 80056cc:	9301      	str	r3, [sp, #4]
 80056ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056d0:	9300      	str	r3, [sp, #0]
 80056d2:	4603      	mov	r3, r0
 80056d4:	68f8      	ldr	r0, [r7, #12]
 80056d6:	f000 f9c7 	bl	8005a68 <I2C_RequestMemoryRead>
 80056da:	4603      	mov	r3, r0
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d005      	beq.n	80056ec <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	2200      	movs	r2, #0
 80056e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80056e8:	2301      	movs	r3, #1
 80056ea:	e0ad      	b.n	8005848 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056f0:	b29b      	uxth	r3, r3
 80056f2:	2bff      	cmp	r3, #255	; 0xff
 80056f4:	d90e      	bls.n	8005714 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	22ff      	movs	r2, #255	; 0xff
 80056fa:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005700:	b2da      	uxtb	r2, r3
 8005702:	8979      	ldrh	r1, [r7, #10]
 8005704:	4b52      	ldr	r3, [pc, #328]	; (8005850 <HAL_I2C_Mem_Read+0x22c>)
 8005706:	9300      	str	r3, [sp, #0]
 8005708:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800570c:	68f8      	ldr	r0, [r7, #12]
 800570e:	f000 fbcb 	bl	8005ea8 <I2C_TransferConfig>
 8005712:	e00f      	b.n	8005734 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005718:	b29a      	uxth	r2, r3
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005722:	b2da      	uxtb	r2, r3
 8005724:	8979      	ldrh	r1, [r7, #10]
 8005726:	4b4a      	ldr	r3, [pc, #296]	; (8005850 <HAL_I2C_Mem_Read+0x22c>)
 8005728:	9300      	str	r3, [sp, #0]
 800572a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800572e:	68f8      	ldr	r0, [r7, #12]
 8005730:	f000 fbba 	bl	8005ea8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8005734:	697b      	ldr	r3, [r7, #20]
 8005736:	9300      	str	r3, [sp, #0]
 8005738:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800573a:	2200      	movs	r2, #0
 800573c:	2104      	movs	r1, #4
 800573e:	68f8      	ldr	r0, [r7, #12]
 8005740:	f000 fa0a 	bl	8005b58 <I2C_WaitOnFlagUntilTimeout>
 8005744:	4603      	mov	r3, r0
 8005746:	2b00      	cmp	r3, #0
 8005748:	d001      	beq.n	800574e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800574a:	2301      	movs	r3, #1
 800574c:	e07c      	b.n	8005848 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005758:	b2d2      	uxtb	r2, r2
 800575a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005760:	1c5a      	adds	r2, r3, #1
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800576a:	3b01      	subs	r3, #1
 800576c:	b29a      	uxth	r2, r3
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005776:	b29b      	uxth	r3, r3
 8005778:	3b01      	subs	r3, #1
 800577a:	b29a      	uxth	r2, r3
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005784:	b29b      	uxth	r3, r3
 8005786:	2b00      	cmp	r3, #0
 8005788:	d034      	beq.n	80057f4 <HAL_I2C_Mem_Read+0x1d0>
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800578e:	2b00      	cmp	r3, #0
 8005790:	d130      	bne.n	80057f4 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005792:	697b      	ldr	r3, [r7, #20]
 8005794:	9300      	str	r3, [sp, #0]
 8005796:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005798:	2200      	movs	r2, #0
 800579a:	2180      	movs	r1, #128	; 0x80
 800579c:	68f8      	ldr	r0, [r7, #12]
 800579e:	f000 f9db 	bl	8005b58 <I2C_WaitOnFlagUntilTimeout>
 80057a2:	4603      	mov	r3, r0
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d001      	beq.n	80057ac <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80057a8:	2301      	movs	r3, #1
 80057aa:	e04d      	b.n	8005848 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057b0:	b29b      	uxth	r3, r3
 80057b2:	2bff      	cmp	r3, #255	; 0xff
 80057b4:	d90e      	bls.n	80057d4 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	22ff      	movs	r2, #255	; 0xff
 80057ba:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057c0:	b2da      	uxtb	r2, r3
 80057c2:	8979      	ldrh	r1, [r7, #10]
 80057c4:	2300      	movs	r3, #0
 80057c6:	9300      	str	r3, [sp, #0]
 80057c8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80057cc:	68f8      	ldr	r0, [r7, #12]
 80057ce:	f000 fb6b 	bl	8005ea8 <I2C_TransferConfig>
 80057d2:	e00f      	b.n	80057f4 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057d8:	b29a      	uxth	r2, r3
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057e2:	b2da      	uxtb	r2, r3
 80057e4:	8979      	ldrh	r1, [r7, #10]
 80057e6:	2300      	movs	r3, #0
 80057e8:	9300      	str	r3, [sp, #0]
 80057ea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80057ee:	68f8      	ldr	r0, [r7, #12]
 80057f0:	f000 fb5a 	bl	8005ea8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057f8:	b29b      	uxth	r3, r3
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d19a      	bne.n	8005734 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80057fe:	697a      	ldr	r2, [r7, #20]
 8005800:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005802:	68f8      	ldr	r0, [r7, #12]
 8005804:	f000 fa28 	bl	8005c58 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005808:	4603      	mov	r3, r0
 800580a:	2b00      	cmp	r3, #0
 800580c:	d001      	beq.n	8005812 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800580e:	2301      	movs	r3, #1
 8005810:	e01a      	b.n	8005848 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	2220      	movs	r2, #32
 8005818:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	6859      	ldr	r1, [r3, #4]
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	681a      	ldr	r2, [r3, #0]
 8005824:	4b0b      	ldr	r3, [pc, #44]	; (8005854 <HAL_I2C_Mem_Read+0x230>)
 8005826:	400b      	ands	r3, r1
 8005828:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	2220      	movs	r2, #32
 800582e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	2200      	movs	r2, #0
 8005836:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	2200      	movs	r2, #0
 800583e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005842:	2300      	movs	r3, #0
 8005844:	e000      	b.n	8005848 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8005846:	2302      	movs	r3, #2
  }
}
 8005848:	4618      	mov	r0, r3
 800584a:	3718      	adds	r7, #24
 800584c:	46bd      	mov	sp, r7
 800584e:	bd80      	pop	{r7, pc}
 8005850:	80002400 	.word	0x80002400
 8005854:	fe00e800 	.word	0xfe00e800

08005858 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8005858:	b580      	push	{r7, lr}
 800585a:	b08a      	sub	sp, #40	; 0x28
 800585c:	af02      	add	r7, sp, #8
 800585e:	60f8      	str	r0, [r7, #12]
 8005860:	607a      	str	r2, [r7, #4]
 8005862:	603b      	str	r3, [r7, #0]
 8005864:	460b      	mov	r3, r1
 8005866:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8005868:	2300      	movs	r3, #0
 800586a:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005872:	b2db      	uxtb	r3, r3
 8005874:	2b20      	cmp	r3, #32
 8005876:	f040 80f1 	bne.w	8005a5c <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	699b      	ldr	r3, [r3, #24]
 8005880:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005884:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005888:	d101      	bne.n	800588e <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 800588a:	2302      	movs	r3, #2
 800588c:	e0e7      	b.n	8005a5e <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005894:	2b01      	cmp	r3, #1
 8005896:	d101      	bne.n	800589c <HAL_I2C_IsDeviceReady+0x44>
 8005898:	2302      	movs	r3, #2
 800589a:	e0e0      	b.n	8005a5e <HAL_I2C_IsDeviceReady+0x206>
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	2201      	movs	r2, #1
 80058a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	2224      	movs	r2, #36	; 0x24
 80058a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	2200      	movs	r2, #0
 80058b0:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	68db      	ldr	r3, [r3, #12]
 80058b6:	2b01      	cmp	r3, #1
 80058b8:	d107      	bne.n	80058ca <HAL_I2C_IsDeviceReady+0x72>
 80058ba:	897b      	ldrh	r3, [r7, #10]
 80058bc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80058c0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80058c4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80058c8:	e004      	b.n	80058d4 <HAL_I2C_IsDeviceReady+0x7c>
 80058ca:	897b      	ldrh	r3, [r7, #10]
 80058cc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80058d0:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 80058d4:	68fa      	ldr	r2, [r7, #12]
 80058d6:	6812      	ldr	r2, [r2, #0]
 80058d8:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 80058da:	f7fe f85d 	bl	8003998 <HAL_GetTick>
 80058de:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	699b      	ldr	r3, [r3, #24]
 80058e6:	f003 0320 	and.w	r3, r3, #32
 80058ea:	2b20      	cmp	r3, #32
 80058ec:	bf0c      	ite	eq
 80058ee:	2301      	moveq	r3, #1
 80058f0:	2300      	movne	r3, #0
 80058f2:	b2db      	uxtb	r3, r3
 80058f4:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	699b      	ldr	r3, [r3, #24]
 80058fc:	f003 0310 	and.w	r3, r3, #16
 8005900:	2b10      	cmp	r3, #16
 8005902:	bf0c      	ite	eq
 8005904:	2301      	moveq	r3, #1
 8005906:	2300      	movne	r3, #0
 8005908:	b2db      	uxtb	r3, r3
 800590a:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 800590c:	e034      	b.n	8005978 <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 800590e:	683b      	ldr	r3, [r7, #0]
 8005910:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005914:	d01a      	beq.n	800594c <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005916:	f7fe f83f 	bl	8003998 <HAL_GetTick>
 800591a:	4602      	mov	r2, r0
 800591c:	69bb      	ldr	r3, [r7, #24]
 800591e:	1ad3      	subs	r3, r2, r3
 8005920:	683a      	ldr	r2, [r7, #0]
 8005922:	429a      	cmp	r2, r3
 8005924:	d302      	bcc.n	800592c <HAL_I2C_IsDeviceReady+0xd4>
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	2b00      	cmp	r3, #0
 800592a:	d10f      	bne.n	800594c <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	2220      	movs	r2, #32
 8005930:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005938:	f043 0220 	orr.w	r2, r3, #32
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	2200      	movs	r2, #0
 8005944:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8005948:	2301      	movs	r3, #1
 800594a:	e088      	b.n	8005a5e <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	699b      	ldr	r3, [r3, #24]
 8005952:	f003 0320 	and.w	r3, r3, #32
 8005956:	2b20      	cmp	r3, #32
 8005958:	bf0c      	ite	eq
 800595a:	2301      	moveq	r3, #1
 800595c:	2300      	movne	r3, #0
 800595e:	b2db      	uxtb	r3, r3
 8005960:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	699b      	ldr	r3, [r3, #24]
 8005968:	f003 0310 	and.w	r3, r3, #16
 800596c:	2b10      	cmp	r3, #16
 800596e:	bf0c      	ite	eq
 8005970:	2301      	moveq	r3, #1
 8005972:	2300      	movne	r3, #0
 8005974:	b2db      	uxtb	r3, r3
 8005976:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8005978:	7ffb      	ldrb	r3, [r7, #31]
 800597a:	2b00      	cmp	r3, #0
 800597c:	d102      	bne.n	8005984 <HAL_I2C_IsDeviceReady+0x12c>
 800597e:	7fbb      	ldrb	r3, [r7, #30]
 8005980:	2b00      	cmp	r3, #0
 8005982:	d0c4      	beq.n	800590e <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	699b      	ldr	r3, [r3, #24]
 800598a:	f003 0310 	and.w	r3, r3, #16
 800598e:	2b10      	cmp	r3, #16
 8005990:	d01a      	beq.n	80059c8 <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8005992:	69bb      	ldr	r3, [r7, #24]
 8005994:	9300      	str	r3, [sp, #0]
 8005996:	683b      	ldr	r3, [r7, #0]
 8005998:	2200      	movs	r2, #0
 800599a:	2120      	movs	r1, #32
 800599c:	68f8      	ldr	r0, [r7, #12]
 800599e:	f000 f8db 	bl	8005b58 <I2C_WaitOnFlagUntilTimeout>
 80059a2:	4603      	mov	r3, r0
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d001      	beq.n	80059ac <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 80059a8:	2301      	movs	r3, #1
 80059aa:	e058      	b.n	8005a5e <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	2220      	movs	r2, #32
 80059b2:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	2220      	movs	r2, #32
 80059b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	2200      	movs	r2, #0
 80059c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 80059c4:	2300      	movs	r3, #0
 80059c6:	e04a      	b.n	8005a5e <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80059c8:	69bb      	ldr	r3, [r7, #24]
 80059ca:	9300      	str	r3, [sp, #0]
 80059cc:	683b      	ldr	r3, [r7, #0]
 80059ce:	2200      	movs	r2, #0
 80059d0:	2120      	movs	r1, #32
 80059d2:	68f8      	ldr	r0, [r7, #12]
 80059d4:	f000 f8c0 	bl	8005b58 <I2C_WaitOnFlagUntilTimeout>
 80059d8:	4603      	mov	r3, r0
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d001      	beq.n	80059e2 <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 80059de:	2301      	movs	r3, #1
 80059e0:	e03d      	b.n	8005a5e <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	2210      	movs	r2, #16
 80059e8:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	2220      	movs	r2, #32
 80059f0:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 80059f2:	697b      	ldr	r3, [r7, #20]
 80059f4:	687a      	ldr	r2, [r7, #4]
 80059f6:	429a      	cmp	r2, r3
 80059f8:	d118      	bne.n	8005a2c <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	685a      	ldr	r2, [r3, #4]
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005a08:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8005a0a:	69bb      	ldr	r3, [r7, #24]
 8005a0c:	9300      	str	r3, [sp, #0]
 8005a0e:	683b      	ldr	r3, [r7, #0]
 8005a10:	2200      	movs	r2, #0
 8005a12:	2120      	movs	r1, #32
 8005a14:	68f8      	ldr	r0, [r7, #12]
 8005a16:	f000 f89f 	bl	8005b58 <I2C_WaitOnFlagUntilTimeout>
 8005a1a:	4603      	mov	r3, r0
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d001      	beq.n	8005a24 <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 8005a20:	2301      	movs	r3, #1
 8005a22:	e01c      	b.n	8005a5e <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	2220      	movs	r2, #32
 8005a2a:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8005a2c:	697b      	ldr	r3, [r7, #20]
 8005a2e:	3301      	adds	r3, #1
 8005a30:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8005a32:	697b      	ldr	r3, [r7, #20]
 8005a34:	687a      	ldr	r2, [r7, #4]
 8005a36:	429a      	cmp	r2, r3
 8005a38:	f63f af3b 	bhi.w	80058b2 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	2220      	movs	r2, #32
 8005a40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a48:	f043 0220 	orr.w	r2, r3, #32
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	2200      	movs	r2, #0
 8005a54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8005a58:	2301      	movs	r3, #1
 8005a5a:	e000      	b.n	8005a5e <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 8005a5c:	2302      	movs	r3, #2
  }
}
 8005a5e:	4618      	mov	r0, r3
 8005a60:	3720      	adds	r7, #32
 8005a62:	46bd      	mov	sp, r7
 8005a64:	bd80      	pop	{r7, pc}
	...

08005a68 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	b086      	sub	sp, #24
 8005a6c:	af02      	add	r7, sp, #8
 8005a6e:	60f8      	str	r0, [r7, #12]
 8005a70:	4608      	mov	r0, r1
 8005a72:	4611      	mov	r1, r2
 8005a74:	461a      	mov	r2, r3
 8005a76:	4603      	mov	r3, r0
 8005a78:	817b      	strh	r3, [r7, #10]
 8005a7a:	460b      	mov	r3, r1
 8005a7c:	813b      	strh	r3, [r7, #8]
 8005a7e:	4613      	mov	r3, r2
 8005a80:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8005a82:	88fb      	ldrh	r3, [r7, #6]
 8005a84:	b2da      	uxtb	r2, r3
 8005a86:	8979      	ldrh	r1, [r7, #10]
 8005a88:	4b20      	ldr	r3, [pc, #128]	; (8005b0c <I2C_RequestMemoryRead+0xa4>)
 8005a8a:	9300      	str	r3, [sp, #0]
 8005a8c:	2300      	movs	r3, #0
 8005a8e:	68f8      	ldr	r0, [r7, #12]
 8005a90:	f000 fa0a 	bl	8005ea8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005a94:	69fa      	ldr	r2, [r7, #28]
 8005a96:	69b9      	ldr	r1, [r7, #24]
 8005a98:	68f8      	ldr	r0, [r7, #12]
 8005a9a:	f000 f89d 	bl	8005bd8 <I2C_WaitOnTXISFlagUntilTimeout>
 8005a9e:	4603      	mov	r3, r0
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d001      	beq.n	8005aa8 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8005aa4:	2301      	movs	r3, #1
 8005aa6:	e02c      	b.n	8005b02 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005aa8:	88fb      	ldrh	r3, [r7, #6]
 8005aaa:	2b01      	cmp	r3, #1
 8005aac:	d105      	bne.n	8005aba <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005aae:	893b      	ldrh	r3, [r7, #8]
 8005ab0:	b2da      	uxtb	r2, r3
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	629a      	str	r2, [r3, #40]	; 0x28
 8005ab8:	e015      	b.n	8005ae6 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005aba:	893b      	ldrh	r3, [r7, #8]
 8005abc:	0a1b      	lsrs	r3, r3, #8
 8005abe:	b29b      	uxth	r3, r3
 8005ac0:	b2da      	uxtb	r2, r3
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005ac8:	69fa      	ldr	r2, [r7, #28]
 8005aca:	69b9      	ldr	r1, [r7, #24]
 8005acc:	68f8      	ldr	r0, [r7, #12]
 8005ace:	f000 f883 	bl	8005bd8 <I2C_WaitOnTXISFlagUntilTimeout>
 8005ad2:	4603      	mov	r3, r0
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d001      	beq.n	8005adc <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8005ad8:	2301      	movs	r3, #1
 8005ada:	e012      	b.n	8005b02 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005adc:	893b      	ldrh	r3, [r7, #8]
 8005ade:	b2da      	uxtb	r2, r3
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8005ae6:	69fb      	ldr	r3, [r7, #28]
 8005ae8:	9300      	str	r3, [sp, #0]
 8005aea:	69bb      	ldr	r3, [r7, #24]
 8005aec:	2200      	movs	r2, #0
 8005aee:	2140      	movs	r1, #64	; 0x40
 8005af0:	68f8      	ldr	r0, [r7, #12]
 8005af2:	f000 f831 	bl	8005b58 <I2C_WaitOnFlagUntilTimeout>
 8005af6:	4603      	mov	r3, r0
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d001      	beq.n	8005b00 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8005afc:	2301      	movs	r3, #1
 8005afe:	e000      	b.n	8005b02 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8005b00:	2300      	movs	r3, #0
}
 8005b02:	4618      	mov	r0, r3
 8005b04:	3710      	adds	r7, #16
 8005b06:	46bd      	mov	sp, r7
 8005b08:	bd80      	pop	{r7, pc}
 8005b0a:	bf00      	nop
 8005b0c:	80002000 	.word	0x80002000

08005b10 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005b10:	b480      	push	{r7}
 8005b12:	b083      	sub	sp, #12
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	699b      	ldr	r3, [r3, #24]
 8005b1e:	f003 0302 	and.w	r3, r3, #2
 8005b22:	2b02      	cmp	r3, #2
 8005b24:	d103      	bne.n	8005b2e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	699b      	ldr	r3, [r3, #24]
 8005b34:	f003 0301 	and.w	r3, r3, #1
 8005b38:	2b01      	cmp	r3, #1
 8005b3a:	d007      	beq.n	8005b4c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	699a      	ldr	r2, [r3, #24]
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	f042 0201 	orr.w	r2, r2, #1
 8005b4a:	619a      	str	r2, [r3, #24]
  }
}
 8005b4c:	bf00      	nop
 8005b4e:	370c      	adds	r7, #12
 8005b50:	46bd      	mov	sp, r7
 8005b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b56:	4770      	bx	lr

08005b58 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005b58:	b580      	push	{r7, lr}
 8005b5a:	b084      	sub	sp, #16
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	60f8      	str	r0, [r7, #12]
 8005b60:	60b9      	str	r1, [r7, #8]
 8005b62:	603b      	str	r3, [r7, #0]
 8005b64:	4613      	mov	r3, r2
 8005b66:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005b68:	e022      	b.n	8005bb0 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b6a:	683b      	ldr	r3, [r7, #0]
 8005b6c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005b70:	d01e      	beq.n	8005bb0 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b72:	f7fd ff11 	bl	8003998 <HAL_GetTick>
 8005b76:	4602      	mov	r2, r0
 8005b78:	69bb      	ldr	r3, [r7, #24]
 8005b7a:	1ad3      	subs	r3, r2, r3
 8005b7c:	683a      	ldr	r2, [r7, #0]
 8005b7e:	429a      	cmp	r2, r3
 8005b80:	d302      	bcc.n	8005b88 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005b82:	683b      	ldr	r3, [r7, #0]
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d113      	bne.n	8005bb0 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b8c:	f043 0220 	orr.w	r2, r3, #32
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	2220      	movs	r2, #32
 8005b98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8005bac:	2301      	movs	r3, #1
 8005bae:	e00f      	b.n	8005bd0 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	699a      	ldr	r2, [r3, #24]
 8005bb6:	68bb      	ldr	r3, [r7, #8]
 8005bb8:	4013      	ands	r3, r2
 8005bba:	68ba      	ldr	r2, [r7, #8]
 8005bbc:	429a      	cmp	r2, r3
 8005bbe:	bf0c      	ite	eq
 8005bc0:	2301      	moveq	r3, #1
 8005bc2:	2300      	movne	r3, #0
 8005bc4:	b2db      	uxtb	r3, r3
 8005bc6:	461a      	mov	r2, r3
 8005bc8:	79fb      	ldrb	r3, [r7, #7]
 8005bca:	429a      	cmp	r2, r3
 8005bcc:	d0cd      	beq.n	8005b6a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005bce:	2300      	movs	r3, #0
}
 8005bd0:	4618      	mov	r0, r3
 8005bd2:	3710      	adds	r7, #16
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	bd80      	pop	{r7, pc}

08005bd8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005bd8:	b580      	push	{r7, lr}
 8005bda:	b084      	sub	sp, #16
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	60f8      	str	r0, [r7, #12]
 8005be0:	60b9      	str	r1, [r7, #8]
 8005be2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005be4:	e02c      	b.n	8005c40 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005be6:	687a      	ldr	r2, [r7, #4]
 8005be8:	68b9      	ldr	r1, [r7, #8]
 8005bea:	68f8      	ldr	r0, [r7, #12]
 8005bec:	f000 f870 	bl	8005cd0 <I2C_IsErrorOccurred>
 8005bf0:	4603      	mov	r3, r0
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d001      	beq.n	8005bfa <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005bf6:	2301      	movs	r3, #1
 8005bf8:	e02a      	b.n	8005c50 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005bfa:	68bb      	ldr	r3, [r7, #8]
 8005bfc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005c00:	d01e      	beq.n	8005c40 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c02:	f7fd fec9 	bl	8003998 <HAL_GetTick>
 8005c06:	4602      	mov	r2, r0
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	1ad3      	subs	r3, r2, r3
 8005c0c:	68ba      	ldr	r2, [r7, #8]
 8005c0e:	429a      	cmp	r2, r3
 8005c10:	d302      	bcc.n	8005c18 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005c12:	68bb      	ldr	r3, [r7, #8]
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d113      	bne.n	8005c40 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c1c:	f043 0220 	orr.w	r2, r3, #32
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	2220      	movs	r2, #32
 8005c28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	2200      	movs	r2, #0
 8005c30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	2200      	movs	r2, #0
 8005c38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8005c3c:	2301      	movs	r3, #1
 8005c3e:	e007      	b.n	8005c50 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	699b      	ldr	r3, [r3, #24]
 8005c46:	f003 0302 	and.w	r3, r3, #2
 8005c4a:	2b02      	cmp	r3, #2
 8005c4c:	d1cb      	bne.n	8005be6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005c4e:	2300      	movs	r3, #0
}
 8005c50:	4618      	mov	r0, r3
 8005c52:	3710      	adds	r7, #16
 8005c54:	46bd      	mov	sp, r7
 8005c56:	bd80      	pop	{r7, pc}

08005c58 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005c58:	b580      	push	{r7, lr}
 8005c5a:	b084      	sub	sp, #16
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	60f8      	str	r0, [r7, #12]
 8005c60:	60b9      	str	r1, [r7, #8]
 8005c62:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005c64:	e028      	b.n	8005cb8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005c66:	687a      	ldr	r2, [r7, #4]
 8005c68:	68b9      	ldr	r1, [r7, #8]
 8005c6a:	68f8      	ldr	r0, [r7, #12]
 8005c6c:	f000 f830 	bl	8005cd0 <I2C_IsErrorOccurred>
 8005c70:	4603      	mov	r3, r0
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d001      	beq.n	8005c7a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005c76:	2301      	movs	r3, #1
 8005c78:	e026      	b.n	8005cc8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c7a:	f7fd fe8d 	bl	8003998 <HAL_GetTick>
 8005c7e:	4602      	mov	r2, r0
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	1ad3      	subs	r3, r2, r3
 8005c84:	68ba      	ldr	r2, [r7, #8]
 8005c86:	429a      	cmp	r2, r3
 8005c88:	d302      	bcc.n	8005c90 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005c8a:	68bb      	ldr	r3, [r7, #8]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d113      	bne.n	8005cb8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c94:	f043 0220 	orr.w	r2, r3, #32
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	2220      	movs	r2, #32
 8005ca0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	2200      	movs	r2, #0
 8005ca8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	2200      	movs	r2, #0
 8005cb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8005cb4:	2301      	movs	r3, #1
 8005cb6:	e007      	b.n	8005cc8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	699b      	ldr	r3, [r3, #24]
 8005cbe:	f003 0320 	and.w	r3, r3, #32
 8005cc2:	2b20      	cmp	r3, #32
 8005cc4:	d1cf      	bne.n	8005c66 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005cc6:	2300      	movs	r3, #0
}
 8005cc8:	4618      	mov	r0, r3
 8005cca:	3710      	adds	r7, #16
 8005ccc:	46bd      	mov	sp, r7
 8005cce:	bd80      	pop	{r7, pc}

08005cd0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005cd0:	b580      	push	{r7, lr}
 8005cd2:	b08a      	sub	sp, #40	; 0x28
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	60f8      	str	r0, [r7, #12]
 8005cd8:	60b9      	str	r1, [r7, #8]
 8005cda:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005cdc:	2300      	movs	r3, #0
 8005cde:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	699b      	ldr	r3, [r3, #24]
 8005ce8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8005cea:	2300      	movs	r3, #0
 8005cec:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8005cf2:	69bb      	ldr	r3, [r7, #24]
 8005cf4:	f003 0310 	and.w	r3, r3, #16
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d075      	beq.n	8005de8 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	2210      	movs	r2, #16
 8005d02:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005d04:	e056      	b.n	8005db4 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005d06:	68bb      	ldr	r3, [r7, #8]
 8005d08:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005d0c:	d052      	beq.n	8005db4 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005d0e:	f7fd fe43 	bl	8003998 <HAL_GetTick>
 8005d12:	4602      	mov	r2, r0
 8005d14:	69fb      	ldr	r3, [r7, #28]
 8005d16:	1ad3      	subs	r3, r2, r3
 8005d18:	68ba      	ldr	r2, [r7, #8]
 8005d1a:	429a      	cmp	r2, r3
 8005d1c:	d302      	bcc.n	8005d24 <I2C_IsErrorOccurred+0x54>
 8005d1e:	68bb      	ldr	r3, [r7, #8]
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d147      	bne.n	8005db4 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	685b      	ldr	r3, [r3, #4]
 8005d2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005d2e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005d36:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	699b      	ldr	r3, [r3, #24]
 8005d3e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005d42:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005d46:	d12e      	bne.n	8005da6 <I2C_IsErrorOccurred+0xd6>
 8005d48:	697b      	ldr	r3, [r7, #20]
 8005d4a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005d4e:	d02a      	beq.n	8005da6 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8005d50:	7cfb      	ldrb	r3, [r7, #19]
 8005d52:	2b20      	cmp	r3, #32
 8005d54:	d027      	beq.n	8005da6 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	685a      	ldr	r2, [r3, #4]
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005d64:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8005d66:	f7fd fe17 	bl	8003998 <HAL_GetTick>
 8005d6a:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005d6c:	e01b      	b.n	8005da6 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8005d6e:	f7fd fe13 	bl	8003998 <HAL_GetTick>
 8005d72:	4602      	mov	r2, r0
 8005d74:	69fb      	ldr	r3, [r7, #28]
 8005d76:	1ad3      	subs	r3, r2, r3
 8005d78:	2b19      	cmp	r3, #25
 8005d7a:	d914      	bls.n	8005da6 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d80:	f043 0220 	orr.w	r2, r3, #32
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	2220      	movs	r2, #32
 8005d8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	2200      	movs	r2, #0
 8005d94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	2200      	movs	r2, #0
 8005d9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8005da0:	2301      	movs	r3, #1
 8005da2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	699b      	ldr	r3, [r3, #24]
 8005dac:	f003 0320 	and.w	r3, r3, #32
 8005db0:	2b20      	cmp	r3, #32
 8005db2:	d1dc      	bne.n	8005d6e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	699b      	ldr	r3, [r3, #24]
 8005dba:	f003 0320 	and.w	r3, r3, #32
 8005dbe:	2b20      	cmp	r3, #32
 8005dc0:	d003      	beq.n	8005dca <I2C_IsErrorOccurred+0xfa>
 8005dc2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d09d      	beq.n	8005d06 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8005dca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d103      	bne.n	8005dda <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	2220      	movs	r2, #32
 8005dd8:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8005dda:	6a3b      	ldr	r3, [r7, #32]
 8005ddc:	f043 0304 	orr.w	r3, r3, #4
 8005de0:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8005de2:	2301      	movs	r3, #1
 8005de4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	699b      	ldr	r3, [r3, #24]
 8005dee:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8005df0:	69bb      	ldr	r3, [r7, #24]
 8005df2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d00b      	beq.n	8005e12 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8005dfa:	6a3b      	ldr	r3, [r7, #32]
 8005dfc:	f043 0301 	orr.w	r3, r3, #1
 8005e00:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005e0a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005e0c:	2301      	movs	r3, #1
 8005e0e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8005e12:	69bb      	ldr	r3, [r7, #24]
 8005e14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d00b      	beq.n	8005e34 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8005e1c:	6a3b      	ldr	r3, [r7, #32]
 8005e1e:	f043 0308 	orr.w	r3, r3, #8
 8005e22:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005e2c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005e2e:	2301      	movs	r3, #1
 8005e30:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8005e34:	69bb      	ldr	r3, [r7, #24]
 8005e36:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d00b      	beq.n	8005e56 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8005e3e:	6a3b      	ldr	r3, [r7, #32]
 8005e40:	f043 0302 	orr.w	r3, r3, #2
 8005e44:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005e4e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005e50:	2301      	movs	r3, #1
 8005e52:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8005e56:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d01c      	beq.n	8005e98 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005e5e:	68f8      	ldr	r0, [r7, #12]
 8005e60:	f7ff fe56 	bl	8005b10 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	6859      	ldr	r1, [r3, #4]
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	681a      	ldr	r2, [r3, #0]
 8005e6e:	4b0d      	ldr	r3, [pc, #52]	; (8005ea4 <I2C_IsErrorOccurred+0x1d4>)
 8005e70:	400b      	ands	r3, r1
 8005e72:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005e78:	6a3b      	ldr	r3, [r7, #32]
 8005e7a:	431a      	orrs	r2, r3
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	2220      	movs	r2, #32
 8005e84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	2200      	movs	r2, #0
 8005e8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	2200      	movs	r2, #0
 8005e94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8005e98:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8005e9c:	4618      	mov	r0, r3
 8005e9e:	3728      	adds	r7, #40	; 0x28
 8005ea0:	46bd      	mov	sp, r7
 8005ea2:	bd80      	pop	{r7, pc}
 8005ea4:	fe00e800 	.word	0xfe00e800

08005ea8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005ea8:	b480      	push	{r7}
 8005eaa:	b087      	sub	sp, #28
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	60f8      	str	r0, [r7, #12]
 8005eb0:	607b      	str	r3, [r7, #4]
 8005eb2:	460b      	mov	r3, r1
 8005eb4:	817b      	strh	r3, [r7, #10]
 8005eb6:	4613      	mov	r3, r2
 8005eb8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005eba:	897b      	ldrh	r3, [r7, #10]
 8005ebc:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005ec0:	7a7b      	ldrb	r3, [r7, #9]
 8005ec2:	041b      	lsls	r3, r3, #16
 8005ec4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005ec8:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005ece:	6a3b      	ldr	r3, [r7, #32]
 8005ed0:	4313      	orrs	r3, r2
 8005ed2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005ed6:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	685a      	ldr	r2, [r3, #4]
 8005ede:	6a3b      	ldr	r3, [r7, #32]
 8005ee0:	0d5b      	lsrs	r3, r3, #21
 8005ee2:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8005ee6:	4b08      	ldr	r3, [pc, #32]	; (8005f08 <I2C_TransferConfig+0x60>)
 8005ee8:	430b      	orrs	r3, r1
 8005eea:	43db      	mvns	r3, r3
 8005eec:	ea02 0103 	and.w	r1, r2, r3
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	697a      	ldr	r2, [r7, #20]
 8005ef6:	430a      	orrs	r2, r1
 8005ef8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8005efa:	bf00      	nop
 8005efc:	371c      	adds	r7, #28
 8005efe:	46bd      	mov	sp, r7
 8005f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f04:	4770      	bx	lr
 8005f06:	bf00      	nop
 8005f08:	03ff63ff 	.word	0x03ff63ff

08005f0c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005f0c:	b480      	push	{r7}
 8005f0e:	b083      	sub	sp, #12
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	6078      	str	r0, [r7, #4]
 8005f14:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005f1c:	b2db      	uxtb	r3, r3
 8005f1e:	2b20      	cmp	r3, #32
 8005f20:	d138      	bne.n	8005f94 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005f28:	2b01      	cmp	r3, #1
 8005f2a:	d101      	bne.n	8005f30 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005f2c:	2302      	movs	r3, #2
 8005f2e:	e032      	b.n	8005f96 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	2201      	movs	r2, #1
 8005f34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	2224      	movs	r2, #36	; 0x24
 8005f3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	681a      	ldr	r2, [r3, #0]
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	f022 0201 	bic.w	r2, r2, #1
 8005f4e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	681a      	ldr	r2, [r3, #0]
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005f5e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	6819      	ldr	r1, [r3, #0]
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	683a      	ldr	r2, [r7, #0]
 8005f6c:	430a      	orrs	r2, r1
 8005f6e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	681a      	ldr	r2, [r3, #0]
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	f042 0201 	orr.w	r2, r2, #1
 8005f7e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	2220      	movs	r2, #32
 8005f84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	2200      	movs	r2, #0
 8005f8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005f90:	2300      	movs	r3, #0
 8005f92:	e000      	b.n	8005f96 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005f94:	2302      	movs	r3, #2
  }
}
 8005f96:	4618      	mov	r0, r3
 8005f98:	370c      	adds	r7, #12
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa0:	4770      	bx	lr

08005fa2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005fa2:	b480      	push	{r7}
 8005fa4:	b085      	sub	sp, #20
 8005fa6:	af00      	add	r7, sp, #0
 8005fa8:	6078      	str	r0, [r7, #4]
 8005faa:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005fb2:	b2db      	uxtb	r3, r3
 8005fb4:	2b20      	cmp	r3, #32
 8005fb6:	d139      	bne.n	800602c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005fbe:	2b01      	cmp	r3, #1
 8005fc0:	d101      	bne.n	8005fc6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005fc2:	2302      	movs	r3, #2
 8005fc4:	e033      	b.n	800602e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	2201      	movs	r2, #1
 8005fca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	2224      	movs	r2, #36	; 0x24
 8005fd2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	681a      	ldr	r2, [r3, #0]
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	f022 0201 	bic.w	r2, r2, #1
 8005fe4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005ff4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005ff6:	683b      	ldr	r3, [r7, #0]
 8005ff8:	021b      	lsls	r3, r3, #8
 8005ffa:	68fa      	ldr	r2, [r7, #12]
 8005ffc:	4313      	orrs	r3, r2
 8005ffe:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	68fa      	ldr	r2, [r7, #12]
 8006006:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	681a      	ldr	r2, [r3, #0]
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	f042 0201 	orr.w	r2, r2, #1
 8006016:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2220      	movs	r2, #32
 800601c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	2200      	movs	r2, #0
 8006024:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006028:	2300      	movs	r3, #0
 800602a:	e000      	b.n	800602e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800602c:	2302      	movs	r3, #2
  }
}
 800602e:	4618      	mov	r0, r3
 8006030:	3714      	adds	r7, #20
 8006032:	46bd      	mov	sp, r7
 8006034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006038:	4770      	bx	lr

0800603a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800603a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800603c:	b08b      	sub	sp, #44	; 0x2c
 800603e:	af06      	add	r7, sp, #24
 8006040:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	2b00      	cmp	r3, #0
 8006046:	d101      	bne.n	800604c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8006048:	2301      	movs	r3, #1
 800604a:	e0d7      	b.n	80061fc <HAL_PCD_Init+0x1c2>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8006052:	b2db      	uxtb	r3, r3
 8006054:	2b00      	cmp	r3, #0
 8006056:	d106      	bne.n	8006066 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	2200      	movs	r2, #0
 800605c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8006060:	6878      	ldr	r0, [r7, #4]
 8006062:	f00b ff7b 	bl	8011f5c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	2203      	movs	r2, #3
 800606a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	4618      	mov	r0, r3
 8006074:	f005 fc63 	bl	800b93e <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006078:	2300      	movs	r3, #0
 800607a:	73fb      	strb	r3, [r7, #15]
 800607c:	e04c      	b.n	8006118 <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800607e:	7bfb      	ldrb	r3, [r7, #15]
 8006080:	6879      	ldr	r1, [r7, #4]
 8006082:	1c5a      	adds	r2, r3, #1
 8006084:	4613      	mov	r3, r2
 8006086:	009b      	lsls	r3, r3, #2
 8006088:	4413      	add	r3, r2
 800608a:	00db      	lsls	r3, r3, #3
 800608c:	440b      	add	r3, r1
 800608e:	3301      	adds	r3, #1
 8006090:	2201      	movs	r2, #1
 8006092:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8006094:	7bfb      	ldrb	r3, [r7, #15]
 8006096:	6879      	ldr	r1, [r7, #4]
 8006098:	1c5a      	adds	r2, r3, #1
 800609a:	4613      	mov	r3, r2
 800609c:	009b      	lsls	r3, r3, #2
 800609e:	4413      	add	r3, r2
 80060a0:	00db      	lsls	r3, r3, #3
 80060a2:	440b      	add	r3, r1
 80060a4:	7bfa      	ldrb	r2, [r7, #15]
 80060a6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80060a8:	7bfa      	ldrb	r2, [r7, #15]
 80060aa:	7bfb      	ldrb	r3, [r7, #15]
 80060ac:	b298      	uxth	r0, r3
 80060ae:	6879      	ldr	r1, [r7, #4]
 80060b0:	4613      	mov	r3, r2
 80060b2:	009b      	lsls	r3, r3, #2
 80060b4:	4413      	add	r3, r2
 80060b6:	00db      	lsls	r3, r3, #3
 80060b8:	440b      	add	r3, r1
 80060ba:	3336      	adds	r3, #54	; 0x36
 80060bc:	4602      	mov	r2, r0
 80060be:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80060c0:	7bfb      	ldrb	r3, [r7, #15]
 80060c2:	6879      	ldr	r1, [r7, #4]
 80060c4:	1c5a      	adds	r2, r3, #1
 80060c6:	4613      	mov	r3, r2
 80060c8:	009b      	lsls	r3, r3, #2
 80060ca:	4413      	add	r3, r2
 80060cc:	00db      	lsls	r3, r3, #3
 80060ce:	440b      	add	r3, r1
 80060d0:	3303      	adds	r3, #3
 80060d2:	2200      	movs	r2, #0
 80060d4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80060d6:	7bfa      	ldrb	r2, [r7, #15]
 80060d8:	6879      	ldr	r1, [r7, #4]
 80060da:	4613      	mov	r3, r2
 80060dc:	009b      	lsls	r3, r3, #2
 80060de:	4413      	add	r3, r2
 80060e0:	00db      	lsls	r3, r3, #3
 80060e2:	440b      	add	r3, r1
 80060e4:	3338      	adds	r3, #56	; 0x38
 80060e6:	2200      	movs	r2, #0
 80060e8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80060ea:	7bfa      	ldrb	r2, [r7, #15]
 80060ec:	6879      	ldr	r1, [r7, #4]
 80060ee:	4613      	mov	r3, r2
 80060f0:	009b      	lsls	r3, r3, #2
 80060f2:	4413      	add	r3, r2
 80060f4:	00db      	lsls	r3, r3, #3
 80060f6:	440b      	add	r3, r1
 80060f8:	333c      	adds	r3, #60	; 0x3c
 80060fa:	2200      	movs	r2, #0
 80060fc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80060fe:	7bfa      	ldrb	r2, [r7, #15]
 8006100:	6879      	ldr	r1, [r7, #4]
 8006102:	4613      	mov	r3, r2
 8006104:	009b      	lsls	r3, r3, #2
 8006106:	4413      	add	r3, r2
 8006108:	00db      	lsls	r3, r3, #3
 800610a:	440b      	add	r3, r1
 800610c:	3340      	adds	r3, #64	; 0x40
 800610e:	2200      	movs	r2, #0
 8006110:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006112:	7bfb      	ldrb	r3, [r7, #15]
 8006114:	3301      	adds	r3, #1
 8006116:	73fb      	strb	r3, [r7, #15]
 8006118:	7bfa      	ldrb	r2, [r7, #15]
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	685b      	ldr	r3, [r3, #4]
 800611e:	429a      	cmp	r2, r3
 8006120:	d3ad      	bcc.n	800607e <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006122:	2300      	movs	r3, #0
 8006124:	73fb      	strb	r3, [r7, #15]
 8006126:	e044      	b.n	80061b2 <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8006128:	7bfa      	ldrb	r2, [r7, #15]
 800612a:	6879      	ldr	r1, [r7, #4]
 800612c:	4613      	mov	r3, r2
 800612e:	009b      	lsls	r3, r3, #2
 8006130:	4413      	add	r3, r2
 8006132:	00db      	lsls	r3, r3, #3
 8006134:	440b      	add	r3, r1
 8006136:	f203 1369 	addw	r3, r3, #361	; 0x169
 800613a:	2200      	movs	r2, #0
 800613c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800613e:	7bfa      	ldrb	r2, [r7, #15]
 8006140:	6879      	ldr	r1, [r7, #4]
 8006142:	4613      	mov	r3, r2
 8006144:	009b      	lsls	r3, r3, #2
 8006146:	4413      	add	r3, r2
 8006148:	00db      	lsls	r3, r3, #3
 800614a:	440b      	add	r3, r1
 800614c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8006150:	7bfa      	ldrb	r2, [r7, #15]
 8006152:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8006154:	7bfa      	ldrb	r2, [r7, #15]
 8006156:	6879      	ldr	r1, [r7, #4]
 8006158:	4613      	mov	r3, r2
 800615a:	009b      	lsls	r3, r3, #2
 800615c:	4413      	add	r3, r2
 800615e:	00db      	lsls	r3, r3, #3
 8006160:	440b      	add	r3, r1
 8006162:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8006166:	2200      	movs	r2, #0
 8006168:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800616a:	7bfa      	ldrb	r2, [r7, #15]
 800616c:	6879      	ldr	r1, [r7, #4]
 800616e:	4613      	mov	r3, r2
 8006170:	009b      	lsls	r3, r3, #2
 8006172:	4413      	add	r3, r2
 8006174:	00db      	lsls	r3, r3, #3
 8006176:	440b      	add	r3, r1
 8006178:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800617c:	2200      	movs	r2, #0
 800617e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8006180:	7bfa      	ldrb	r2, [r7, #15]
 8006182:	6879      	ldr	r1, [r7, #4]
 8006184:	4613      	mov	r3, r2
 8006186:	009b      	lsls	r3, r3, #2
 8006188:	4413      	add	r3, r2
 800618a:	00db      	lsls	r3, r3, #3
 800618c:	440b      	add	r3, r1
 800618e:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8006192:	2200      	movs	r2, #0
 8006194:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8006196:	7bfa      	ldrb	r2, [r7, #15]
 8006198:	6879      	ldr	r1, [r7, #4]
 800619a:	4613      	mov	r3, r2
 800619c:	009b      	lsls	r3, r3, #2
 800619e:	4413      	add	r3, r2
 80061a0:	00db      	lsls	r3, r3, #3
 80061a2:	440b      	add	r3, r1
 80061a4:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80061a8:	2200      	movs	r2, #0
 80061aa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80061ac:	7bfb      	ldrb	r3, [r7, #15]
 80061ae:	3301      	adds	r3, #1
 80061b0:	73fb      	strb	r3, [r7, #15]
 80061b2:	7bfa      	ldrb	r2, [r7, #15]
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	685b      	ldr	r3, [r3, #4]
 80061b8:	429a      	cmp	r2, r3
 80061ba:	d3b5      	bcc.n	8006128 <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	603b      	str	r3, [r7, #0]
 80061c2:	687e      	ldr	r6, [r7, #4]
 80061c4:	466d      	mov	r5, sp
 80061c6:	f106 0410 	add.w	r4, r6, #16
 80061ca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80061cc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80061ce:	6823      	ldr	r3, [r4, #0]
 80061d0:	602b      	str	r3, [r5, #0]
 80061d2:	1d33      	adds	r3, r6, #4
 80061d4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80061d6:	6838      	ldr	r0, [r7, #0]
 80061d8:	f005 fbcc 	bl	800b974 <USB_DevInit>

  hpcd->USB_Address = 0U;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	2200      	movs	r2, #0
 80061e0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2201      	movs	r2, #1
 80061e8:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	69db      	ldr	r3, [r3, #28]
 80061f0:	2b01      	cmp	r3, #1
 80061f2:	d102      	bne.n	80061fa <HAL_PCD_Init+0x1c0>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80061f4:	6878      	ldr	r0, [r7, #4]
 80061f6:	f001 fc29 	bl	8007a4c <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 80061fa:	2300      	movs	r3, #0
}
 80061fc:	4618      	mov	r0, r3
 80061fe:	3714      	adds	r7, #20
 8006200:	46bd      	mov	sp, r7
 8006202:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006204 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8006204:	b580      	push	{r7, lr}
 8006206:	b082      	sub	sp, #8
 8006208:	af00      	add	r7, sp, #0
 800620a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006212:	2b01      	cmp	r3, #1
 8006214:	d101      	bne.n	800621a <HAL_PCD_Start+0x16>
 8006216:	2302      	movs	r3, #2
 8006218:	e012      	b.n	8006240 <HAL_PCD_Start+0x3c>
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	2201      	movs	r2, #1
 800621e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	4618      	mov	r0, r3
 8006228:	f005 fb72 	bl	800b910 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	4618      	mov	r0, r3
 8006232:	f007 fd8b 	bl	800dd4c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	2200      	movs	r2, #0
 800623a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800623e:	2300      	movs	r3, #0
}
 8006240:	4618      	mov	r0, r3
 8006242:	3708      	adds	r7, #8
 8006244:	46bd      	mov	sp, r7
 8006246:	bd80      	pop	{r7, pc}

08006248 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8006248:	b580      	push	{r7, lr}
 800624a:	b084      	sub	sp, #16
 800624c:	af00      	add	r7, sp, #0
 800624e:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	4618      	mov	r0, r3
 8006256:	f007 fd90 	bl	800dd7a <USB_ReadInterrupts>
 800625a:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006262:	2b00      	cmp	r3, #0
 8006264:	d003      	beq.n	800626e <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8006266:	6878      	ldr	r0, [r7, #4]
 8006268:	f000 fb26 	bl	80068b8 <PCD_EP_ISR_Handler>

    return;
 800626c:	e110      	b.n	8006490 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006274:	2b00      	cmp	r3, #0
 8006276:	d013      	beq.n	80062a0 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006280:	b29a      	uxth	r2, r3
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800628a:	b292      	uxth	r2, r2
 800628c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8006290:	6878      	ldr	r0, [r7, #4]
 8006292:	f00b fef4 	bl	801207e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8006296:	2100      	movs	r1, #0
 8006298:	6878      	ldr	r0, [r7, #4]
 800629a:	f000 f8fc 	bl	8006496 <HAL_PCD_SetAddress>

    return;
 800629e:	e0f7      	b.n	8006490 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d00c      	beq.n	80062c4 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80062b2:	b29a      	uxth	r2, r3
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80062bc:	b292      	uxth	r2, r2
 80062be:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80062c2:	e0e5      	b.n	8006490 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d00c      	beq.n	80062e8 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80062d6:	b29a      	uxth	r2, r3
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80062e0:	b292      	uxth	r2, r2
 80062e2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80062e6:	e0d3      	b.n	8006490 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d034      	beq.n	800635c <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80062fa:	b29a      	uxth	r2, r3
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	f022 0204 	bic.w	r2, r2, #4
 8006304:	b292      	uxth	r2, r2
 8006306:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006312:	b29a      	uxth	r2, r3
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	f022 0208 	bic.w	r2, r2, #8
 800631c:	b292      	uxth	r2, r2
 800631e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8006328:	2b01      	cmp	r3, #1
 800632a:	d107      	bne.n	800633c <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	2200      	movs	r2, #0
 8006330:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8006334:	2100      	movs	r1, #0
 8006336:	6878      	ldr	r0, [r7, #4]
 8006338:	f00c f896 	bl	8012468 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800633c:	6878      	ldr	r0, [r7, #4]
 800633e:	f00b fed7 	bl	80120f0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800634a:	b29a      	uxth	r2, r3
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006354:	b292      	uxth	r2, r2
 8006356:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800635a:	e099      	b.n	8006490 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006362:	2b00      	cmp	r3, #0
 8006364:	d027      	beq.n	80063b6 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800636e:	b29a      	uxth	r2, r3
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	f042 0208 	orr.w	r2, r2, #8
 8006378:	b292      	uxth	r2, r2
 800637a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006386:	b29a      	uxth	r2, r3
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006390:	b292      	uxth	r2, r2
 8006392:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800639e:	b29a      	uxth	r2, r3
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	f042 0204 	orr.w	r2, r2, #4
 80063a8:	b292      	uxth	r2, r2
 80063aa:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80063ae:	6878      	ldr	r0, [r7, #4]
 80063b0:	f00b fe84 	bl	80120bc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80063b4:	e06c      	b.n	8006490 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d040      	beq.n	8006442 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80063c8:	b29a      	uxth	r2, r3
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80063d2:	b292      	uxth	r2, r2
 80063d4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d12b      	bne.n	800643a <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80063ea:	b29a      	uxth	r2, r3
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	f042 0204 	orr.w	r2, r2, #4
 80063f4:	b292      	uxth	r2, r2
 80063f6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006402:	b29a      	uxth	r2, r3
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	f042 0208 	orr.w	r2, r2, #8
 800640c:	b292      	uxth	r2, r2
 800640e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	2201      	movs	r2, #1
 8006416:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8006422:	b29b      	uxth	r3, r3
 8006424:	089b      	lsrs	r3, r3, #2
 8006426:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8006430:	2101      	movs	r1, #1
 8006432:	6878      	ldr	r0, [r7, #4]
 8006434:	f00c f818 	bl	8012468 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8006438:	e02a      	b.n	8006490 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 800643a:	6878      	ldr	r0, [r7, #4]
 800643c:	f00b fe3e 	bl	80120bc <HAL_PCD_SuspendCallback>
    return;
 8006440:	e026      	b.n	8006490 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006448:	2b00      	cmp	r3, #0
 800644a:	d00f      	beq.n	800646c <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006454:	b29a      	uxth	r2, r3
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800645e:	b292      	uxth	r2, r2
 8006460:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8006464:	6878      	ldr	r0, [r7, #4]
 8006466:	f00b fdfc 	bl	8012062 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800646a:	e011      	b.n	8006490 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006472:	2b00      	cmp	r3, #0
 8006474:	d00c      	beq.n	8006490 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800647e:	b29a      	uxth	r2, r3
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006488:	b292      	uxth	r2, r2
 800648a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800648e:	bf00      	nop
  }
}
 8006490:	3710      	adds	r7, #16
 8006492:	46bd      	mov	sp, r7
 8006494:	bd80      	pop	{r7, pc}

08006496 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8006496:	b580      	push	{r7, lr}
 8006498:	b082      	sub	sp, #8
 800649a:	af00      	add	r7, sp, #0
 800649c:	6078      	str	r0, [r7, #4]
 800649e:	460b      	mov	r3, r1
 80064a0:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80064a8:	2b01      	cmp	r3, #1
 80064aa:	d101      	bne.n	80064b0 <HAL_PCD_SetAddress+0x1a>
 80064ac:	2302      	movs	r3, #2
 80064ae:	e013      	b.n	80064d8 <HAL_PCD_SetAddress+0x42>
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	2201      	movs	r2, #1
 80064b4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	78fa      	ldrb	r2, [r7, #3]
 80064bc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	78fa      	ldrb	r2, [r7, #3]
 80064c6:	4611      	mov	r1, r2
 80064c8:	4618      	mov	r0, r3
 80064ca:	f007 fc2b 	bl	800dd24 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	2200      	movs	r2, #0
 80064d2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80064d6:	2300      	movs	r3, #0
}
 80064d8:	4618      	mov	r0, r3
 80064da:	3708      	adds	r7, #8
 80064dc:	46bd      	mov	sp, r7
 80064de:	bd80      	pop	{r7, pc}

080064e0 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80064e0:	b580      	push	{r7, lr}
 80064e2:	b084      	sub	sp, #16
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	6078      	str	r0, [r7, #4]
 80064e8:	4608      	mov	r0, r1
 80064ea:	4611      	mov	r1, r2
 80064ec:	461a      	mov	r2, r3
 80064ee:	4603      	mov	r3, r0
 80064f0:	70fb      	strb	r3, [r7, #3]
 80064f2:	460b      	mov	r3, r1
 80064f4:	803b      	strh	r3, [r7, #0]
 80064f6:	4613      	mov	r3, r2
 80064f8:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80064fa:	2300      	movs	r3, #0
 80064fc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80064fe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006502:	2b00      	cmp	r3, #0
 8006504:	da0e      	bge.n	8006524 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006506:	78fb      	ldrb	r3, [r7, #3]
 8006508:	f003 0307 	and.w	r3, r3, #7
 800650c:	1c5a      	adds	r2, r3, #1
 800650e:	4613      	mov	r3, r2
 8006510:	009b      	lsls	r3, r3, #2
 8006512:	4413      	add	r3, r2
 8006514:	00db      	lsls	r3, r3, #3
 8006516:	687a      	ldr	r2, [r7, #4]
 8006518:	4413      	add	r3, r2
 800651a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	2201      	movs	r2, #1
 8006520:	705a      	strb	r2, [r3, #1]
 8006522:	e00e      	b.n	8006542 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006524:	78fb      	ldrb	r3, [r7, #3]
 8006526:	f003 0207 	and.w	r2, r3, #7
 800652a:	4613      	mov	r3, r2
 800652c:	009b      	lsls	r3, r3, #2
 800652e:	4413      	add	r3, r2
 8006530:	00db      	lsls	r3, r3, #3
 8006532:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8006536:	687a      	ldr	r2, [r7, #4]
 8006538:	4413      	add	r3, r2
 800653a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	2200      	movs	r2, #0
 8006540:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8006542:	78fb      	ldrb	r3, [r7, #3]
 8006544:	f003 0307 	and.w	r3, r3, #7
 8006548:	b2da      	uxtb	r2, r3
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800654e:	883a      	ldrh	r2, [r7, #0]
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	78ba      	ldrb	r2, [r7, #2]
 8006558:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	785b      	ldrb	r3, [r3, #1]
 800655e:	2b00      	cmp	r3, #0
 8006560:	d004      	beq.n	800656c <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	781b      	ldrb	r3, [r3, #0]
 8006566:	b29a      	uxth	r2, r3
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800656c:	78bb      	ldrb	r3, [r7, #2]
 800656e:	2b02      	cmp	r3, #2
 8006570:	d102      	bne.n	8006578 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	2200      	movs	r2, #0
 8006576:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800657e:	2b01      	cmp	r3, #1
 8006580:	d101      	bne.n	8006586 <HAL_PCD_EP_Open+0xa6>
 8006582:	2302      	movs	r3, #2
 8006584:	e00e      	b.n	80065a4 <HAL_PCD_EP_Open+0xc4>
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	2201      	movs	r2, #1
 800658a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	68f9      	ldr	r1, [r7, #12]
 8006594:	4618      	mov	r0, r3
 8006596:	f005 fa0f 	bl	800b9b8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	2200      	movs	r2, #0
 800659e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 80065a2:	7afb      	ldrb	r3, [r7, #11]
}
 80065a4:	4618      	mov	r0, r3
 80065a6:	3710      	adds	r7, #16
 80065a8:	46bd      	mov	sp, r7
 80065aa:	bd80      	pop	{r7, pc}

080065ac <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80065ac:	b580      	push	{r7, lr}
 80065ae:	b084      	sub	sp, #16
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	6078      	str	r0, [r7, #4]
 80065b4:	460b      	mov	r3, r1
 80065b6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80065b8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80065bc:	2b00      	cmp	r3, #0
 80065be:	da0e      	bge.n	80065de <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80065c0:	78fb      	ldrb	r3, [r7, #3]
 80065c2:	f003 0307 	and.w	r3, r3, #7
 80065c6:	1c5a      	adds	r2, r3, #1
 80065c8:	4613      	mov	r3, r2
 80065ca:	009b      	lsls	r3, r3, #2
 80065cc:	4413      	add	r3, r2
 80065ce:	00db      	lsls	r3, r3, #3
 80065d0:	687a      	ldr	r2, [r7, #4]
 80065d2:	4413      	add	r3, r2
 80065d4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	2201      	movs	r2, #1
 80065da:	705a      	strb	r2, [r3, #1]
 80065dc:	e00e      	b.n	80065fc <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80065de:	78fb      	ldrb	r3, [r7, #3]
 80065e0:	f003 0207 	and.w	r2, r3, #7
 80065e4:	4613      	mov	r3, r2
 80065e6:	009b      	lsls	r3, r3, #2
 80065e8:	4413      	add	r3, r2
 80065ea:	00db      	lsls	r3, r3, #3
 80065ec:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80065f0:	687a      	ldr	r2, [r7, #4]
 80065f2:	4413      	add	r3, r2
 80065f4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	2200      	movs	r2, #0
 80065fa:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80065fc:	78fb      	ldrb	r3, [r7, #3]
 80065fe:	f003 0307 	and.w	r3, r3, #7
 8006602:	b2da      	uxtb	r2, r3
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800660e:	2b01      	cmp	r3, #1
 8006610:	d101      	bne.n	8006616 <HAL_PCD_EP_Close+0x6a>
 8006612:	2302      	movs	r3, #2
 8006614:	e00e      	b.n	8006634 <HAL_PCD_EP_Close+0x88>
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	2201      	movs	r2, #1
 800661a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	68f9      	ldr	r1, [r7, #12]
 8006624:	4618      	mov	r0, r3
 8006626:	f005 fd5b 	bl	800c0e0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	2200      	movs	r2, #0
 800662e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8006632:	2300      	movs	r3, #0
}
 8006634:	4618      	mov	r0, r3
 8006636:	3710      	adds	r7, #16
 8006638:	46bd      	mov	sp, r7
 800663a:	bd80      	pop	{r7, pc}

0800663c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800663c:	b580      	push	{r7, lr}
 800663e:	b086      	sub	sp, #24
 8006640:	af00      	add	r7, sp, #0
 8006642:	60f8      	str	r0, [r7, #12]
 8006644:	607a      	str	r2, [r7, #4]
 8006646:	603b      	str	r3, [r7, #0]
 8006648:	460b      	mov	r3, r1
 800664a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800664c:	7afb      	ldrb	r3, [r7, #11]
 800664e:	f003 0207 	and.w	r2, r3, #7
 8006652:	4613      	mov	r3, r2
 8006654:	009b      	lsls	r3, r3, #2
 8006656:	4413      	add	r3, r2
 8006658:	00db      	lsls	r3, r3, #3
 800665a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800665e:	68fa      	ldr	r2, [r7, #12]
 8006660:	4413      	add	r3, r2
 8006662:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006664:	697b      	ldr	r3, [r7, #20]
 8006666:	687a      	ldr	r2, [r7, #4]
 8006668:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800666a:	697b      	ldr	r3, [r7, #20]
 800666c:	683a      	ldr	r2, [r7, #0]
 800666e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8006670:	697b      	ldr	r3, [r7, #20]
 8006672:	2200      	movs	r2, #0
 8006674:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8006676:	697b      	ldr	r3, [r7, #20]
 8006678:	2200      	movs	r2, #0
 800667a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800667c:	7afb      	ldrb	r3, [r7, #11]
 800667e:	f003 0307 	and.w	r3, r3, #7
 8006682:	b2da      	uxtb	r2, r3
 8006684:	697b      	ldr	r3, [r7, #20]
 8006686:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006688:	7afb      	ldrb	r3, [r7, #11]
 800668a:	f003 0307 	and.w	r3, r3, #7
 800668e:	2b00      	cmp	r3, #0
 8006690:	d106      	bne.n	80066a0 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	6979      	ldr	r1, [r7, #20]
 8006698:	4618      	mov	r0, r3
 800669a:	f005 ff0e 	bl	800c4ba <USB_EPStartXfer>
 800669e:	e005      	b.n	80066ac <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	6979      	ldr	r1, [r7, #20]
 80066a6:	4618      	mov	r0, r3
 80066a8:	f005 ff07 	bl	800c4ba <USB_EPStartXfer>
  }

  return HAL_OK;
 80066ac:	2300      	movs	r3, #0
}
 80066ae:	4618      	mov	r0, r3
 80066b0:	3718      	adds	r7, #24
 80066b2:	46bd      	mov	sp, r7
 80066b4:	bd80      	pop	{r7, pc}

080066b6 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80066b6:	b480      	push	{r7}
 80066b8:	b083      	sub	sp, #12
 80066ba:	af00      	add	r7, sp, #0
 80066bc:	6078      	str	r0, [r7, #4]
 80066be:	460b      	mov	r3, r1
 80066c0:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80066c2:	78fb      	ldrb	r3, [r7, #3]
 80066c4:	f003 0207 	and.w	r2, r3, #7
 80066c8:	6879      	ldr	r1, [r7, #4]
 80066ca:	4613      	mov	r3, r2
 80066cc:	009b      	lsls	r3, r3, #2
 80066ce:	4413      	add	r3, r2
 80066d0:	00db      	lsls	r3, r3, #3
 80066d2:	440b      	add	r3, r1
 80066d4:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80066d8:	681b      	ldr	r3, [r3, #0]
}
 80066da:	4618      	mov	r0, r3
 80066dc:	370c      	adds	r7, #12
 80066de:	46bd      	mov	sp, r7
 80066e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e4:	4770      	bx	lr

080066e6 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80066e6:	b580      	push	{r7, lr}
 80066e8:	b086      	sub	sp, #24
 80066ea:	af00      	add	r7, sp, #0
 80066ec:	60f8      	str	r0, [r7, #12]
 80066ee:	607a      	str	r2, [r7, #4]
 80066f0:	603b      	str	r3, [r7, #0]
 80066f2:	460b      	mov	r3, r1
 80066f4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80066f6:	7afb      	ldrb	r3, [r7, #11]
 80066f8:	f003 0307 	and.w	r3, r3, #7
 80066fc:	1c5a      	adds	r2, r3, #1
 80066fe:	4613      	mov	r3, r2
 8006700:	009b      	lsls	r3, r3, #2
 8006702:	4413      	add	r3, r2
 8006704:	00db      	lsls	r3, r3, #3
 8006706:	68fa      	ldr	r2, [r7, #12]
 8006708:	4413      	add	r3, r2
 800670a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800670c:	697b      	ldr	r3, [r7, #20]
 800670e:	687a      	ldr	r2, [r7, #4]
 8006710:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8006712:	697b      	ldr	r3, [r7, #20]
 8006714:	683a      	ldr	r2, [r7, #0]
 8006716:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8006718:	697b      	ldr	r3, [r7, #20]
 800671a:	2201      	movs	r2, #1
 800671c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8006720:	697b      	ldr	r3, [r7, #20]
 8006722:	683a      	ldr	r2, [r7, #0]
 8006724:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8006726:	697b      	ldr	r3, [r7, #20]
 8006728:	2200      	movs	r2, #0
 800672a:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800672c:	697b      	ldr	r3, [r7, #20]
 800672e:	2201      	movs	r2, #1
 8006730:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006732:	7afb      	ldrb	r3, [r7, #11]
 8006734:	f003 0307 	and.w	r3, r3, #7
 8006738:	b2da      	uxtb	r2, r3
 800673a:	697b      	ldr	r3, [r7, #20]
 800673c:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800673e:	7afb      	ldrb	r3, [r7, #11]
 8006740:	f003 0307 	and.w	r3, r3, #7
 8006744:	2b00      	cmp	r3, #0
 8006746:	d106      	bne.n	8006756 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	6979      	ldr	r1, [r7, #20]
 800674e:	4618      	mov	r0, r3
 8006750:	f005 feb3 	bl	800c4ba <USB_EPStartXfer>
 8006754:	e005      	b.n	8006762 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	6979      	ldr	r1, [r7, #20]
 800675c:	4618      	mov	r0, r3
 800675e:	f005 feac 	bl	800c4ba <USB_EPStartXfer>
  }

  return HAL_OK;
 8006762:	2300      	movs	r3, #0
}
 8006764:	4618      	mov	r0, r3
 8006766:	3718      	adds	r7, #24
 8006768:	46bd      	mov	sp, r7
 800676a:	bd80      	pop	{r7, pc}

0800676c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800676c:	b580      	push	{r7, lr}
 800676e:	b084      	sub	sp, #16
 8006770:	af00      	add	r7, sp, #0
 8006772:	6078      	str	r0, [r7, #4]
 8006774:	460b      	mov	r3, r1
 8006776:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8006778:	78fb      	ldrb	r3, [r7, #3]
 800677a:	f003 0207 	and.w	r2, r3, #7
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	685b      	ldr	r3, [r3, #4]
 8006782:	429a      	cmp	r2, r3
 8006784:	d901      	bls.n	800678a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8006786:	2301      	movs	r3, #1
 8006788:	e03e      	b.n	8006808 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800678a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800678e:	2b00      	cmp	r3, #0
 8006790:	da0e      	bge.n	80067b0 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006792:	78fb      	ldrb	r3, [r7, #3]
 8006794:	f003 0307 	and.w	r3, r3, #7
 8006798:	1c5a      	adds	r2, r3, #1
 800679a:	4613      	mov	r3, r2
 800679c:	009b      	lsls	r3, r3, #2
 800679e:	4413      	add	r3, r2
 80067a0:	00db      	lsls	r3, r3, #3
 80067a2:	687a      	ldr	r2, [r7, #4]
 80067a4:	4413      	add	r3, r2
 80067a6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	2201      	movs	r2, #1
 80067ac:	705a      	strb	r2, [r3, #1]
 80067ae:	e00c      	b.n	80067ca <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80067b0:	78fa      	ldrb	r2, [r7, #3]
 80067b2:	4613      	mov	r3, r2
 80067b4:	009b      	lsls	r3, r3, #2
 80067b6:	4413      	add	r3, r2
 80067b8:	00db      	lsls	r3, r3, #3
 80067ba:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80067be:	687a      	ldr	r2, [r7, #4]
 80067c0:	4413      	add	r3, r2
 80067c2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	2200      	movs	r2, #0
 80067c8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	2201      	movs	r2, #1
 80067ce:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80067d0:	78fb      	ldrb	r3, [r7, #3]
 80067d2:	f003 0307 	and.w	r3, r3, #7
 80067d6:	b2da      	uxtb	r2, r3
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80067e2:	2b01      	cmp	r3, #1
 80067e4:	d101      	bne.n	80067ea <HAL_PCD_EP_SetStall+0x7e>
 80067e6:	2302      	movs	r3, #2
 80067e8:	e00e      	b.n	8006808 <HAL_PCD_EP_SetStall+0x9c>
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	2201      	movs	r2, #1
 80067ee:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	68f9      	ldr	r1, [r7, #12]
 80067f8:	4618      	mov	r0, r3
 80067fa:	f007 f994 	bl	800db26 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	2200      	movs	r2, #0
 8006802:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8006806:	2300      	movs	r3, #0
}
 8006808:	4618      	mov	r0, r3
 800680a:	3710      	adds	r7, #16
 800680c:	46bd      	mov	sp, r7
 800680e:	bd80      	pop	{r7, pc}

08006810 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006810:	b580      	push	{r7, lr}
 8006812:	b084      	sub	sp, #16
 8006814:	af00      	add	r7, sp, #0
 8006816:	6078      	str	r0, [r7, #4]
 8006818:	460b      	mov	r3, r1
 800681a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800681c:	78fb      	ldrb	r3, [r7, #3]
 800681e:	f003 020f 	and.w	r2, r3, #15
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	685b      	ldr	r3, [r3, #4]
 8006826:	429a      	cmp	r2, r3
 8006828:	d901      	bls.n	800682e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800682a:	2301      	movs	r3, #1
 800682c:	e040      	b.n	80068b0 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800682e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006832:	2b00      	cmp	r3, #0
 8006834:	da0e      	bge.n	8006854 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006836:	78fb      	ldrb	r3, [r7, #3]
 8006838:	f003 0307 	and.w	r3, r3, #7
 800683c:	1c5a      	adds	r2, r3, #1
 800683e:	4613      	mov	r3, r2
 8006840:	009b      	lsls	r3, r3, #2
 8006842:	4413      	add	r3, r2
 8006844:	00db      	lsls	r3, r3, #3
 8006846:	687a      	ldr	r2, [r7, #4]
 8006848:	4413      	add	r3, r2
 800684a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	2201      	movs	r2, #1
 8006850:	705a      	strb	r2, [r3, #1]
 8006852:	e00e      	b.n	8006872 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006854:	78fb      	ldrb	r3, [r7, #3]
 8006856:	f003 0207 	and.w	r2, r3, #7
 800685a:	4613      	mov	r3, r2
 800685c:	009b      	lsls	r3, r3, #2
 800685e:	4413      	add	r3, r2
 8006860:	00db      	lsls	r3, r3, #3
 8006862:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8006866:	687a      	ldr	r2, [r7, #4]
 8006868:	4413      	add	r3, r2
 800686a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	2200      	movs	r2, #0
 8006870:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	2200      	movs	r2, #0
 8006876:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006878:	78fb      	ldrb	r3, [r7, #3]
 800687a:	f003 0307 	and.w	r3, r3, #7
 800687e:	b2da      	uxtb	r2, r3
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800688a:	2b01      	cmp	r3, #1
 800688c:	d101      	bne.n	8006892 <HAL_PCD_EP_ClrStall+0x82>
 800688e:	2302      	movs	r3, #2
 8006890:	e00e      	b.n	80068b0 <HAL_PCD_EP_ClrStall+0xa0>
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	2201      	movs	r2, #1
 8006896:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	68f9      	ldr	r1, [r7, #12]
 80068a0:	4618      	mov	r0, r3
 80068a2:	f007 f991 	bl	800dbc8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	2200      	movs	r2, #0
 80068aa:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80068ae:	2300      	movs	r3, #0
}
 80068b0:	4618      	mov	r0, r3
 80068b2:	3710      	adds	r7, #16
 80068b4:	46bd      	mov	sp, r7
 80068b6:	bd80      	pop	{r7, pc}

080068b8 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80068b8:	b580      	push	{r7, lr}
 80068ba:	b096      	sub	sp, #88	; 0x58
 80068bc:	af00      	add	r7, sp, #0
 80068be:	6078      	str	r0, [r7, #4]
  uint16_t wEPVal;
  uint16_t TxPctSize;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80068c0:	e39c      	b.n	8006ffc <PCD_EP_ISR_Handler+0x744>
  {
    wIstr = hpcd->Instance->ISTR;
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80068ca:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80068ce:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80068d2:	b2db      	uxtb	r3, r3
 80068d4:	f003 030f 	and.w	r3, r3, #15
 80068d8:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55

    if (epindex == 0U)
 80068dc:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	f040 815e 	bne.w	8006ba2 <PCD_EP_ISR_Handler+0x2ea>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80068e6:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80068ea:	f003 0310 	and.w	r3, r3, #16
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d150      	bne.n	8006994 <PCD_EP_ISR_Handler+0xdc>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	881b      	ldrh	r3, [r3, #0]
 80068f8:	b29b      	uxth	r3, r3
 80068fa:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80068fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006902:	81fb      	strh	r3, [r7, #14]
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681a      	ldr	r2, [r3, #0]
 8006908:	89fb      	ldrh	r3, [r7, #14]
 800690a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800690e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006912:	b29b      	uxth	r3, r3
 8006914:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	3328      	adds	r3, #40	; 0x28
 800691a:	64fb      	str	r3, [r7, #76]	; 0x4c

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006924:	b29b      	uxth	r3, r3
 8006926:	461a      	mov	r2, r3
 8006928:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800692a:	781b      	ldrb	r3, [r3, #0]
 800692c:	00db      	lsls	r3, r3, #3
 800692e:	4413      	add	r3, r2
 8006930:	687a      	ldr	r2, [r7, #4]
 8006932:	6812      	ldr	r2, [r2, #0]
 8006934:	4413      	add	r3, r2
 8006936:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800693a:	881b      	ldrh	r3, [r3, #0]
 800693c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8006940:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006942:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8006944:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006946:	695a      	ldr	r2, [r3, #20]
 8006948:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800694a:	69db      	ldr	r3, [r3, #28]
 800694c:	441a      	add	r2, r3
 800694e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006950:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8006952:	2100      	movs	r1, #0
 8006954:	6878      	ldr	r0, [r7, #4]
 8006956:	f00b fb6a 	bl	801202e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006960:	b2db      	uxtb	r3, r3
 8006962:	2b00      	cmp	r3, #0
 8006964:	f000 834a 	beq.w	8006ffc <PCD_EP_ISR_Handler+0x744>
 8006968:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800696a:	699b      	ldr	r3, [r3, #24]
 800696c:	2b00      	cmp	r3, #0
 800696e:	f040 8345 	bne.w	8006ffc <PCD_EP_ISR_Handler+0x744>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006978:	b2db      	uxtb	r3, r3
 800697a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800697e:	b2da      	uxtb	r2, r3
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	b292      	uxth	r2, r2
 8006986:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	2200      	movs	r2, #0
 800698e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8006992:	e333      	b.n	8006ffc <PCD_EP_ISR_Handler+0x744>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800699a:	64fb      	str	r3, [r7, #76]	; 0x4c
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	881b      	ldrh	r3, [r3, #0]
 80069a2:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80069a6:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80069aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d032      	beq.n	8006a18 <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80069ba:	b29b      	uxth	r3, r3
 80069bc:	461a      	mov	r2, r3
 80069be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80069c0:	781b      	ldrb	r3, [r3, #0]
 80069c2:	00db      	lsls	r3, r3, #3
 80069c4:	4413      	add	r3, r2
 80069c6:	687a      	ldr	r2, [r7, #4]
 80069c8:	6812      	ldr	r2, [r2, #0]
 80069ca:	4413      	add	r3, r2
 80069cc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80069d0:	881b      	ldrh	r3, [r3, #0]
 80069d2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80069d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80069d8:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	6818      	ldr	r0, [r3, #0]
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 80069e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80069e6:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80069e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80069ea:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80069ec:	b29b      	uxth	r3, r3
 80069ee:	f007 fa16 	bl	800de1e <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	881b      	ldrh	r3, [r3, #0]
 80069f8:	b29a      	uxth	r2, r3
 80069fa:	f640 738f 	movw	r3, #3983	; 0xf8f
 80069fe:	4013      	ands	r3, r2
 8006a00:	823b      	strh	r3, [r7, #16]
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	8a3a      	ldrh	r2, [r7, #16]
 8006a08:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006a0c:	b292      	uxth	r2, r2
 8006a0e:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8006a10:	6878      	ldr	r0, [r7, #4]
 8006a12:	f00b fadf 	bl	8011fd4 <HAL_PCD_SetupStageCallback>
 8006a16:	e2f1      	b.n	8006ffc <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8006a18:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	f280 82ed 	bge.w	8006ffc <PCD_EP_ISR_Handler+0x744>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	881b      	ldrh	r3, [r3, #0]
 8006a28:	b29a      	uxth	r2, r3
 8006a2a:	f640 738f 	movw	r3, #3983	; 0xf8f
 8006a2e:	4013      	ands	r3, r2
 8006a30:	83fb      	strh	r3, [r7, #30]
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	8bfa      	ldrh	r2, [r7, #30]
 8006a38:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006a3c:	b292      	uxth	r2, r2
 8006a3e:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006a48:	b29b      	uxth	r3, r3
 8006a4a:	461a      	mov	r2, r3
 8006a4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a4e:	781b      	ldrb	r3, [r3, #0]
 8006a50:	00db      	lsls	r3, r3, #3
 8006a52:	4413      	add	r3, r2
 8006a54:	687a      	ldr	r2, [r7, #4]
 8006a56:	6812      	ldr	r2, [r2, #0]
 8006a58:	4413      	add	r3, r2
 8006a5a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006a5e:	881b      	ldrh	r3, [r3, #0]
 8006a60:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8006a64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a66:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8006a68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a6a:	69db      	ldr	r3, [r3, #28]
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d019      	beq.n	8006aa4 <PCD_EP_ISR_Handler+0x1ec>
 8006a70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a72:	695b      	ldr	r3, [r3, #20]
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d015      	beq.n	8006aa4 <PCD_EP_ISR_Handler+0x1ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	6818      	ldr	r0, [r3, #0]
 8006a7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a7e:	6959      	ldr	r1, [r3, #20]
 8006a80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a82:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8006a84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a86:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8006a88:	b29b      	uxth	r3, r3
 8006a8a:	f007 f9c8 	bl	800de1e <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8006a8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a90:	695a      	ldr	r2, [r3, #20]
 8006a92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a94:	69db      	ldr	r3, [r3, #28]
 8006a96:	441a      	add	r2, r3
 8006a98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a9a:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8006a9c:	2100      	movs	r1, #0
 8006a9e:	6878      	ldr	r0, [r7, #4]
 8006aa0:	f00b faaa 	bl	8011ff8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	881b      	ldrh	r3, [r3, #0]
 8006aaa:	b29b      	uxth	r3, r3
 8006aac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	f040 82a3 	bne.w	8006ffc <PCD_EP_ISR_Handler+0x744>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	61bb      	str	r3, [r7, #24]
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ac4:	b29b      	uxth	r3, r3
 8006ac6:	461a      	mov	r2, r3
 8006ac8:	69bb      	ldr	r3, [r7, #24]
 8006aca:	4413      	add	r3, r2
 8006acc:	61bb      	str	r3, [r7, #24]
 8006ace:	69bb      	ldr	r3, [r7, #24]
 8006ad0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006ad4:	617b      	str	r3, [r7, #20]
 8006ad6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ad8:	691b      	ldr	r3, [r3, #16]
 8006ada:	2b3e      	cmp	r3, #62	; 0x3e
 8006adc:	d918      	bls.n	8006b10 <PCD_EP_ISR_Handler+0x258>
 8006ade:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ae0:	691b      	ldr	r3, [r3, #16]
 8006ae2:	095b      	lsrs	r3, r3, #5
 8006ae4:	647b      	str	r3, [r7, #68]	; 0x44
 8006ae6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ae8:	691b      	ldr	r3, [r3, #16]
 8006aea:	f003 031f 	and.w	r3, r3, #31
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d102      	bne.n	8006af8 <PCD_EP_ISR_Handler+0x240>
 8006af2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006af4:	3b01      	subs	r3, #1
 8006af6:	647b      	str	r3, [r7, #68]	; 0x44
 8006af8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006afa:	b29b      	uxth	r3, r3
 8006afc:	029b      	lsls	r3, r3, #10
 8006afe:	b29b      	uxth	r3, r3
 8006b00:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b04:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b08:	b29a      	uxth	r2, r3
 8006b0a:	697b      	ldr	r3, [r7, #20]
 8006b0c:	801a      	strh	r2, [r3, #0]
 8006b0e:	e029      	b.n	8006b64 <PCD_EP_ISR_Handler+0x2ac>
 8006b10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b12:	691b      	ldr	r3, [r3, #16]
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d112      	bne.n	8006b3e <PCD_EP_ISR_Handler+0x286>
 8006b18:	697b      	ldr	r3, [r7, #20]
 8006b1a:	881b      	ldrh	r3, [r3, #0]
 8006b1c:	b29b      	uxth	r3, r3
 8006b1e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006b22:	b29a      	uxth	r2, r3
 8006b24:	697b      	ldr	r3, [r7, #20]
 8006b26:	801a      	strh	r2, [r3, #0]
 8006b28:	697b      	ldr	r3, [r7, #20]
 8006b2a:	881b      	ldrh	r3, [r3, #0]
 8006b2c:	b29b      	uxth	r3, r3
 8006b2e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b32:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b36:	b29a      	uxth	r2, r3
 8006b38:	697b      	ldr	r3, [r7, #20]
 8006b3a:	801a      	strh	r2, [r3, #0]
 8006b3c:	e012      	b.n	8006b64 <PCD_EP_ISR_Handler+0x2ac>
 8006b3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b40:	691b      	ldr	r3, [r3, #16]
 8006b42:	085b      	lsrs	r3, r3, #1
 8006b44:	647b      	str	r3, [r7, #68]	; 0x44
 8006b46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b48:	691b      	ldr	r3, [r3, #16]
 8006b4a:	f003 0301 	and.w	r3, r3, #1
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d002      	beq.n	8006b58 <PCD_EP_ISR_Handler+0x2a0>
 8006b52:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006b54:	3301      	adds	r3, #1
 8006b56:	647b      	str	r3, [r7, #68]	; 0x44
 8006b58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006b5a:	b29b      	uxth	r3, r3
 8006b5c:	029b      	lsls	r3, r3, #10
 8006b5e:	b29a      	uxth	r2, r3
 8006b60:	697b      	ldr	r3, [r7, #20]
 8006b62:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	881b      	ldrh	r3, [r3, #0]
 8006b6a:	b29b      	uxth	r3, r3
 8006b6c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006b70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b74:	827b      	strh	r3, [r7, #18]
 8006b76:	8a7b      	ldrh	r3, [r7, #18]
 8006b78:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006b7c:	827b      	strh	r3, [r7, #18]
 8006b7e:	8a7b      	ldrh	r3, [r7, #18]
 8006b80:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006b84:	827b      	strh	r3, [r7, #18]
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681a      	ldr	r2, [r3, #0]
 8006b8a:	8a7b      	ldrh	r3, [r7, #18]
 8006b8c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b90:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b94:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b9c:	b29b      	uxth	r3, r3
 8006b9e:	8013      	strh	r3, [r2, #0]
 8006ba0:	e22c      	b.n	8006ffc <PCD_EP_ISR_Handler+0x744>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	461a      	mov	r2, r3
 8006ba8:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8006bac:	009b      	lsls	r3, r3, #2
 8006bae:	4413      	add	r3, r2
 8006bb0:	881b      	ldrh	r3, [r3, #0]
 8006bb2:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8006bb6:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	f280 80f6 	bge.w	8006dac <PCD_EP_ISR_Handler+0x4f4>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	461a      	mov	r2, r3
 8006bc6:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8006bca:	009b      	lsls	r3, r3, #2
 8006bcc:	4413      	add	r3, r2
 8006bce:	881b      	ldrh	r3, [r3, #0]
 8006bd0:	b29a      	uxth	r2, r3
 8006bd2:	f640 738f 	movw	r3, #3983	; 0xf8f
 8006bd6:	4013      	ands	r3, r2
 8006bd8:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	461a      	mov	r2, r3
 8006be2:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8006be6:	009b      	lsls	r3, r3, #2
 8006be8:	4413      	add	r3, r2
 8006bea:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8006bee:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006bf2:	b292      	uxth	r2, r2
 8006bf4:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8006bf6:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 8006bfa:	4613      	mov	r3, r2
 8006bfc:	009b      	lsls	r3, r3, #2
 8006bfe:	4413      	add	r3, r2
 8006c00:	00db      	lsls	r3, r3, #3
 8006c02:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8006c06:	687a      	ldr	r2, [r7, #4]
 8006c08:	4413      	add	r3, r2
 8006c0a:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8006c0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c0e:	7b1b      	ldrb	r3, [r3, #12]
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d123      	bne.n	8006c5c <PCD_EP_ISR_Handler+0x3a4>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c1c:	b29b      	uxth	r3, r3
 8006c1e:	461a      	mov	r2, r3
 8006c20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c22:	781b      	ldrb	r3, [r3, #0]
 8006c24:	00db      	lsls	r3, r3, #3
 8006c26:	4413      	add	r3, r2
 8006c28:	687a      	ldr	r2, [r7, #4]
 8006c2a:	6812      	ldr	r2, [r2, #0]
 8006c2c:	4413      	add	r3, r2
 8006c2e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006c32:	881b      	ldrh	r3, [r3, #0]
 8006c34:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006c38:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

          if (count != 0U)
 8006c3c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	f000 808e 	beq.w	8006d62 <PCD_EP_ISR_Handler+0x4aa>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	6818      	ldr	r0, [r3, #0]
 8006c4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c4c:	6959      	ldr	r1, [r3, #20]
 8006c4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c50:	88da      	ldrh	r2, [r3, #6]
 8006c52:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8006c56:	f007 f8e2 	bl	800de1e <USB_ReadPMA>
 8006c5a:	e082      	b.n	8006d62 <PCD_EP_ISR_Handler+0x4aa>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8006c5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c5e:	78db      	ldrb	r3, [r3, #3]
 8006c60:	2b02      	cmp	r3, #2
 8006c62:	d10a      	bne.n	8006c7a <PCD_EP_ISR_Handler+0x3c2>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8006c64:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8006c68:	461a      	mov	r2, r3
 8006c6a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8006c6c:	6878      	ldr	r0, [r7, #4]
 8006c6e:	f000 f9d3 	bl	8007018 <HAL_PCD_EP_DB_Receive>
 8006c72:	4603      	mov	r3, r0
 8006c74:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8006c78:	e073      	b.n	8006d62 <PCD_EP_ISR_Handler+0x4aa>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	461a      	mov	r2, r3
 8006c80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c82:	781b      	ldrb	r3, [r3, #0]
 8006c84:	009b      	lsls	r3, r3, #2
 8006c86:	4413      	add	r3, r2
 8006c88:	881b      	ldrh	r3, [r3, #0]
 8006c8a:	b29b      	uxth	r3, r3
 8006c8c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c94:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	461a      	mov	r2, r3
 8006c9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ca0:	781b      	ldrb	r3, [r3, #0]
 8006ca2:	009b      	lsls	r3, r3, #2
 8006ca4:	441a      	add	r2, r3
 8006ca6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8006caa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006cae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006cb2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006cb6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006cba:	b29b      	uxth	r3, r3
 8006cbc:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	461a      	mov	r2, r3
 8006cc4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006cc6:	781b      	ldrb	r3, [r3, #0]
 8006cc8:	009b      	lsls	r3, r3, #2
 8006cca:	4413      	add	r3, r2
 8006ccc:	881b      	ldrh	r3, [r3, #0]
 8006cce:	b29b      	uxth	r3, r3
 8006cd0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d022      	beq.n	8006d1e <PCD_EP_ISR_Handler+0x466>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ce0:	b29b      	uxth	r3, r3
 8006ce2:	461a      	mov	r2, r3
 8006ce4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ce6:	781b      	ldrb	r3, [r3, #0]
 8006ce8:	00db      	lsls	r3, r3, #3
 8006cea:	4413      	add	r3, r2
 8006cec:	687a      	ldr	r2, [r7, #4]
 8006cee:	6812      	ldr	r2, [r2, #0]
 8006cf0:	4413      	add	r3, r2
 8006cf2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006cf6:	881b      	ldrh	r3, [r3, #0]
 8006cf8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006cfc:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 8006d00:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d02c      	beq.n	8006d62 <PCD_EP_ISR_Handler+0x4aa>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	6818      	ldr	r0, [r3, #0]
 8006d0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d0e:	6959      	ldr	r1, [r3, #20]
 8006d10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d12:	891a      	ldrh	r2, [r3, #8]
 8006d14:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8006d18:	f007 f881 	bl	800de1e <USB_ReadPMA>
 8006d1c:	e021      	b.n	8006d62 <PCD_EP_ISR_Handler+0x4aa>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006d26:	b29b      	uxth	r3, r3
 8006d28:	461a      	mov	r2, r3
 8006d2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d2c:	781b      	ldrb	r3, [r3, #0]
 8006d2e:	00db      	lsls	r3, r3, #3
 8006d30:	4413      	add	r3, r2
 8006d32:	687a      	ldr	r2, [r7, #4]
 8006d34:	6812      	ldr	r2, [r2, #0]
 8006d36:	4413      	add	r3, r2
 8006d38:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006d3c:	881b      	ldrh	r3, [r3, #0]
 8006d3e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006d42:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 8006d46:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d009      	beq.n	8006d62 <PCD_EP_ISR_Handler+0x4aa>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	6818      	ldr	r0, [r3, #0]
 8006d52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d54:	6959      	ldr	r1, [r3, #20]
 8006d56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d58:	895a      	ldrh	r2, [r3, #10]
 8006d5a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8006d5e:	f007 f85e 	bl	800de1e <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8006d62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d64:	69da      	ldr	r2, [r3, #28]
 8006d66:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8006d6a:	441a      	add	r2, r3
 8006d6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d6e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8006d70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d72:	695a      	ldr	r2, [r3, #20]
 8006d74:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8006d78:	441a      	add	r2, r3
 8006d7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d7c:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8006d7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d80:	699b      	ldr	r3, [r3, #24]
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d005      	beq.n	8006d92 <PCD_EP_ISR_Handler+0x4da>
 8006d86:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8006d8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d8c:	691b      	ldr	r3, [r3, #16]
 8006d8e:	429a      	cmp	r2, r3
 8006d90:	d206      	bcs.n	8006da0 <PCD_EP_ISR_Handler+0x4e8>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8006d92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d94:	781b      	ldrb	r3, [r3, #0]
 8006d96:	4619      	mov	r1, r3
 8006d98:	6878      	ldr	r0, [r7, #4]
 8006d9a:	f00b f92d 	bl	8011ff8 <HAL_PCD_DataOutStageCallback>
 8006d9e:	e005      	b.n	8006dac <PCD_EP_ISR_Handler+0x4f4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8006da6:	4618      	mov	r0, r3
 8006da8:	f005 fb87 	bl	800c4ba <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8006dac:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8006db0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	f000 8121 	beq.w	8006ffc <PCD_EP_ISR_Handler+0x744>
      {
        ep = &hpcd->IN_ep[epindex];
 8006dba:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8006dbe:	1c5a      	adds	r2, r3, #1
 8006dc0:	4613      	mov	r3, r2
 8006dc2:	009b      	lsls	r3, r3, #2
 8006dc4:	4413      	add	r3, r2
 8006dc6:	00db      	lsls	r3, r3, #3
 8006dc8:	687a      	ldr	r2, [r7, #4]
 8006dca:	4413      	add	r3, r2
 8006dcc:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	461a      	mov	r2, r3
 8006dd4:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8006dd8:	009b      	lsls	r3, r3, #2
 8006dda:	4413      	add	r3, r2
 8006ddc:	881b      	ldrh	r3, [r3, #0]
 8006dde:	b29b      	uxth	r3, r3
 8006de0:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8006de4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006de8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	461a      	mov	r2, r3
 8006df2:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8006df6:	009b      	lsls	r3, r3, #2
 8006df8:	441a      	add	r2, r3
 8006dfa:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8006dfe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e02:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e06:	b29b      	uxth	r3, r3
 8006e08:	8013      	strh	r3, [r2, #0]

        if (ep->type != EP_TYPE_BULK)
 8006e0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e0c:	78db      	ldrb	r3, [r3, #3]
 8006e0e:	2b02      	cmp	r3, #2
 8006e10:	f000 80a2 	beq.w	8006f58 <PCD_EP_ISR_Handler+0x6a0>
        {
          ep->xfer_len = 0U;
 8006e14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e16:	2200      	movs	r2, #0
 8006e18:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8006e1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e1c:	7b1b      	ldrb	r3, [r3, #12]
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	f000 8093 	beq.w	8006f4a <PCD_EP_ISR_Handler+0x692>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8006e24:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8006e28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d046      	beq.n	8006ebe <PCD_EP_ISR_Handler+0x606>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006e30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e32:	785b      	ldrb	r3, [r3, #1]
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d126      	bne.n	8006e86 <PCD_EP_ISR_Handler+0x5ce>
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	627b      	str	r3, [r7, #36]	; 0x24
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006e46:	b29b      	uxth	r3, r3
 8006e48:	461a      	mov	r2, r3
 8006e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e4c:	4413      	add	r3, r2
 8006e4e:	627b      	str	r3, [r7, #36]	; 0x24
 8006e50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e52:	781b      	ldrb	r3, [r3, #0]
 8006e54:	00da      	lsls	r2, r3, #3
 8006e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e58:	4413      	add	r3, r2
 8006e5a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006e5e:	623b      	str	r3, [r7, #32]
 8006e60:	6a3b      	ldr	r3, [r7, #32]
 8006e62:	881b      	ldrh	r3, [r3, #0]
 8006e64:	b29b      	uxth	r3, r3
 8006e66:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006e6a:	b29a      	uxth	r2, r3
 8006e6c:	6a3b      	ldr	r3, [r7, #32]
 8006e6e:	801a      	strh	r2, [r3, #0]
 8006e70:	6a3b      	ldr	r3, [r7, #32]
 8006e72:	881b      	ldrh	r3, [r3, #0]
 8006e74:	b29b      	uxth	r3, r3
 8006e76:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e7a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e7e:	b29a      	uxth	r2, r3
 8006e80:	6a3b      	ldr	r3, [r7, #32]
 8006e82:	801a      	strh	r2, [r3, #0]
 8006e84:	e061      	b.n	8006f4a <PCD_EP_ISR_Handler+0x692>
 8006e86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e88:	785b      	ldrb	r3, [r3, #1]
 8006e8a:	2b01      	cmp	r3, #1
 8006e8c:	d15d      	bne.n	8006f4a <PCD_EP_ISR_Handler+0x692>
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006e9c:	b29b      	uxth	r3, r3
 8006e9e:	461a      	mov	r2, r3
 8006ea0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ea2:	4413      	add	r3, r2
 8006ea4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006ea6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ea8:	781b      	ldrb	r3, [r3, #0]
 8006eaa:	00da      	lsls	r2, r3, #3
 8006eac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006eae:	4413      	add	r3, r2
 8006eb0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006eb4:	62bb      	str	r3, [r7, #40]	; 0x28
 8006eb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006eb8:	2200      	movs	r2, #0
 8006eba:	801a      	strh	r2, [r3, #0]
 8006ebc:	e045      	b.n	8006f4a <PCD_EP_ISR_Handler+0x692>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006ec4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ec6:	785b      	ldrb	r3, [r3, #1]
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d126      	bne.n	8006f1a <PCD_EP_ISR_Handler+0x662>
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	637b      	str	r3, [r7, #52]	; 0x34
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006eda:	b29b      	uxth	r3, r3
 8006edc:	461a      	mov	r2, r3
 8006ede:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ee0:	4413      	add	r3, r2
 8006ee2:	637b      	str	r3, [r7, #52]	; 0x34
 8006ee4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ee6:	781b      	ldrb	r3, [r3, #0]
 8006ee8:	00da      	lsls	r2, r3, #3
 8006eea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006eec:	4413      	add	r3, r2
 8006eee:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006ef2:	633b      	str	r3, [r7, #48]	; 0x30
 8006ef4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ef6:	881b      	ldrh	r3, [r3, #0]
 8006ef8:	b29b      	uxth	r3, r3
 8006efa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006efe:	b29a      	uxth	r2, r3
 8006f00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f02:	801a      	strh	r2, [r3, #0]
 8006f04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f06:	881b      	ldrh	r3, [r3, #0]
 8006f08:	b29b      	uxth	r3, r3
 8006f0a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f0e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f12:	b29a      	uxth	r2, r3
 8006f14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f16:	801a      	strh	r2, [r3, #0]
 8006f18:	e017      	b.n	8006f4a <PCD_EP_ISR_Handler+0x692>
 8006f1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f1c:	785b      	ldrb	r3, [r3, #1]
 8006f1e:	2b01      	cmp	r3, #1
 8006f20:	d113      	bne.n	8006f4a <PCD_EP_ISR_Handler+0x692>
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006f2a:	b29b      	uxth	r3, r3
 8006f2c:	461a      	mov	r2, r3
 8006f2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f30:	4413      	add	r3, r2
 8006f32:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006f34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f36:	781b      	ldrb	r3, [r3, #0]
 8006f38:	00da      	lsls	r2, r3, #3
 8006f3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f3c:	4413      	add	r3, r2
 8006f3e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006f42:	63bb      	str	r3, [r7, #56]	; 0x38
 8006f44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f46:	2200      	movs	r2, #0
 8006f48:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8006f4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f4c:	781b      	ldrb	r3, [r3, #0]
 8006f4e:	4619      	mov	r1, r3
 8006f50:	6878      	ldr	r0, [r7, #4]
 8006f52:	f00b f86c 	bl	801202e <HAL_PCD_DataInStageCallback>
 8006f56:	e051      	b.n	8006ffc <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Bulk Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8006f58:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8006f5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d144      	bne.n	8006fee <PCD_EP_ISR_Handler+0x736>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006f6c:	b29b      	uxth	r3, r3
 8006f6e:	461a      	mov	r2, r3
 8006f70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f72:	781b      	ldrb	r3, [r3, #0]
 8006f74:	00db      	lsls	r3, r3, #3
 8006f76:	4413      	add	r3, r2
 8006f78:	687a      	ldr	r2, [r7, #4]
 8006f7a:	6812      	ldr	r2, [r2, #0]
 8006f7c:	4413      	add	r3, r2
 8006f7e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006f82:	881b      	ldrh	r3, [r3, #0]
 8006f84:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006f88:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8006f8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f8e:	699a      	ldr	r2, [r3, #24]
 8006f90:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006f94:	429a      	cmp	r2, r3
 8006f96:	d907      	bls.n	8006fa8 <PCD_EP_ISR_Handler+0x6f0>
            {
              ep->xfer_len -= TxPctSize;
 8006f98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f9a:	699a      	ldr	r2, [r3, #24]
 8006f9c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006fa0:	1ad2      	subs	r2, r2, r3
 8006fa2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006fa4:	619a      	str	r2, [r3, #24]
 8006fa6:	e002      	b.n	8006fae <PCD_EP_ISR_Handler+0x6f6>
            }
            else
            {
              ep->xfer_len = 0U;
 8006fa8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006faa:	2200      	movs	r2, #0
 8006fac:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8006fae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006fb0:	699b      	ldr	r3, [r3, #24]
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d106      	bne.n	8006fc4 <PCD_EP_ISR_Handler+0x70c>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8006fb6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006fb8:	781b      	ldrb	r3, [r3, #0]
 8006fba:	4619      	mov	r1, r3
 8006fbc:	6878      	ldr	r0, [r7, #4]
 8006fbe:	f00b f836 	bl	801202e <HAL_PCD_DataInStageCallback>
 8006fc2:	e01b      	b.n	8006ffc <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8006fc4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006fc6:	695a      	ldr	r2, [r3, #20]
 8006fc8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006fcc:	441a      	add	r2, r3
 8006fce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006fd0:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8006fd2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006fd4:	69da      	ldr	r2, [r3, #28]
 8006fd6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006fda:	441a      	add	r2, r3
 8006fdc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006fde:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8006fe6:	4618      	mov	r0, r3
 8006fe8:	f005 fa67 	bl	800c4ba <USB_EPStartXfer>
 8006fec:	e006      	b.n	8006ffc <PCD_EP_ISR_Handler+0x744>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8006fee:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8006ff2:	461a      	mov	r2, r3
 8006ff4:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8006ff6:	6878      	ldr	r0, [r7, #4]
 8006ff8:	f000 f917 	bl	800722a <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8007004:	b29b      	uxth	r3, r3
 8007006:	b21b      	sxth	r3, r3
 8007008:	2b00      	cmp	r3, #0
 800700a:	f6ff ac5a 	blt.w	80068c2 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800700e:	2300      	movs	r3, #0
}
 8007010:	4618      	mov	r0, r3
 8007012:	3758      	adds	r7, #88	; 0x58
 8007014:	46bd      	mov	sp, r7
 8007016:	bd80      	pop	{r7, pc}

08007018 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8007018:	b580      	push	{r7, lr}
 800701a:	b088      	sub	sp, #32
 800701c:	af00      	add	r7, sp, #0
 800701e:	60f8      	str	r0, [r7, #12]
 8007020:	60b9      	str	r1, [r7, #8]
 8007022:	4613      	mov	r3, r2
 8007024:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8007026:	88fb      	ldrh	r3, [r7, #6]
 8007028:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800702c:	2b00      	cmp	r3, #0
 800702e:	d07c      	beq.n	800712a <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007038:	b29b      	uxth	r3, r3
 800703a:	461a      	mov	r2, r3
 800703c:	68bb      	ldr	r3, [r7, #8]
 800703e:	781b      	ldrb	r3, [r3, #0]
 8007040:	00db      	lsls	r3, r3, #3
 8007042:	4413      	add	r3, r2
 8007044:	68fa      	ldr	r2, [r7, #12]
 8007046:	6812      	ldr	r2, [r2, #0]
 8007048:	4413      	add	r3, r2
 800704a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800704e:	881b      	ldrh	r3, [r3, #0]
 8007050:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007054:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8007056:	68bb      	ldr	r3, [r7, #8]
 8007058:	699a      	ldr	r2, [r3, #24]
 800705a:	8b7b      	ldrh	r3, [r7, #26]
 800705c:	429a      	cmp	r2, r3
 800705e:	d306      	bcc.n	800706e <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8007060:	68bb      	ldr	r3, [r7, #8]
 8007062:	699a      	ldr	r2, [r3, #24]
 8007064:	8b7b      	ldrh	r3, [r7, #26]
 8007066:	1ad2      	subs	r2, r2, r3
 8007068:	68bb      	ldr	r3, [r7, #8]
 800706a:	619a      	str	r2, [r3, #24]
 800706c:	e002      	b.n	8007074 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 800706e:	68bb      	ldr	r3, [r7, #8]
 8007070:	2200      	movs	r2, #0
 8007072:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8007074:	68bb      	ldr	r3, [r7, #8]
 8007076:	699b      	ldr	r3, [r3, #24]
 8007078:	2b00      	cmp	r3, #0
 800707a:	d123      	bne.n	80070c4 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	461a      	mov	r2, r3
 8007082:	68bb      	ldr	r3, [r7, #8]
 8007084:	781b      	ldrb	r3, [r3, #0]
 8007086:	009b      	lsls	r3, r3, #2
 8007088:	4413      	add	r3, r2
 800708a:	881b      	ldrh	r3, [r3, #0]
 800708c:	b29b      	uxth	r3, r3
 800708e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007092:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007096:	833b      	strh	r3, [r7, #24]
 8007098:	8b3b      	ldrh	r3, [r7, #24]
 800709a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800709e:	833b      	strh	r3, [r7, #24]
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	461a      	mov	r2, r3
 80070a6:	68bb      	ldr	r3, [r7, #8]
 80070a8:	781b      	ldrb	r3, [r3, #0]
 80070aa:	009b      	lsls	r3, r3, #2
 80070ac:	441a      	add	r2, r3
 80070ae:	8b3b      	ldrh	r3, [r7, #24]
 80070b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80070b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80070b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80070bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80070c0:	b29b      	uxth	r3, r3
 80070c2:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80070c4:	88fb      	ldrh	r3, [r7, #6]
 80070c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d01f      	beq.n	800710e <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	461a      	mov	r2, r3
 80070d4:	68bb      	ldr	r3, [r7, #8]
 80070d6:	781b      	ldrb	r3, [r3, #0]
 80070d8:	009b      	lsls	r3, r3, #2
 80070da:	4413      	add	r3, r2
 80070dc:	881b      	ldrh	r3, [r3, #0]
 80070de:	b29b      	uxth	r3, r3
 80070e0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80070e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070e8:	82fb      	strh	r3, [r7, #22]
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	461a      	mov	r2, r3
 80070f0:	68bb      	ldr	r3, [r7, #8]
 80070f2:	781b      	ldrb	r3, [r3, #0]
 80070f4:	009b      	lsls	r3, r3, #2
 80070f6:	441a      	add	r2, r3
 80070f8:	8afb      	ldrh	r3, [r7, #22]
 80070fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80070fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007102:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007106:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800710a:	b29b      	uxth	r3, r3
 800710c:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800710e:	8b7b      	ldrh	r3, [r7, #26]
 8007110:	2b00      	cmp	r3, #0
 8007112:	f000 8085 	beq.w	8007220 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	6818      	ldr	r0, [r3, #0]
 800711a:	68bb      	ldr	r3, [r7, #8]
 800711c:	6959      	ldr	r1, [r3, #20]
 800711e:	68bb      	ldr	r3, [r7, #8]
 8007120:	891a      	ldrh	r2, [r3, #8]
 8007122:	8b7b      	ldrh	r3, [r7, #26]
 8007124:	f006 fe7b 	bl	800de1e <USB_ReadPMA>
 8007128:	e07a      	b.n	8007220 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007132:	b29b      	uxth	r3, r3
 8007134:	461a      	mov	r2, r3
 8007136:	68bb      	ldr	r3, [r7, #8]
 8007138:	781b      	ldrb	r3, [r3, #0]
 800713a:	00db      	lsls	r3, r3, #3
 800713c:	4413      	add	r3, r2
 800713e:	68fa      	ldr	r2, [r7, #12]
 8007140:	6812      	ldr	r2, [r2, #0]
 8007142:	4413      	add	r3, r2
 8007144:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007148:	881b      	ldrh	r3, [r3, #0]
 800714a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800714e:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8007150:	68bb      	ldr	r3, [r7, #8]
 8007152:	699a      	ldr	r2, [r3, #24]
 8007154:	8b7b      	ldrh	r3, [r7, #26]
 8007156:	429a      	cmp	r2, r3
 8007158:	d306      	bcc.n	8007168 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 800715a:	68bb      	ldr	r3, [r7, #8]
 800715c:	699a      	ldr	r2, [r3, #24]
 800715e:	8b7b      	ldrh	r3, [r7, #26]
 8007160:	1ad2      	subs	r2, r2, r3
 8007162:	68bb      	ldr	r3, [r7, #8]
 8007164:	619a      	str	r2, [r3, #24]
 8007166:	e002      	b.n	800716e <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8007168:	68bb      	ldr	r3, [r7, #8]
 800716a:	2200      	movs	r2, #0
 800716c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800716e:	68bb      	ldr	r3, [r7, #8]
 8007170:	699b      	ldr	r3, [r3, #24]
 8007172:	2b00      	cmp	r3, #0
 8007174:	d123      	bne.n	80071be <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	461a      	mov	r2, r3
 800717c:	68bb      	ldr	r3, [r7, #8]
 800717e:	781b      	ldrb	r3, [r3, #0]
 8007180:	009b      	lsls	r3, r3, #2
 8007182:	4413      	add	r3, r2
 8007184:	881b      	ldrh	r3, [r3, #0]
 8007186:	b29b      	uxth	r3, r3
 8007188:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800718c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007190:	83fb      	strh	r3, [r7, #30]
 8007192:	8bfb      	ldrh	r3, [r7, #30]
 8007194:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007198:	83fb      	strh	r3, [r7, #30]
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	461a      	mov	r2, r3
 80071a0:	68bb      	ldr	r3, [r7, #8]
 80071a2:	781b      	ldrb	r3, [r3, #0]
 80071a4:	009b      	lsls	r3, r3, #2
 80071a6:	441a      	add	r2, r3
 80071a8:	8bfb      	ldrh	r3, [r7, #30]
 80071aa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80071ae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80071b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80071b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80071ba:	b29b      	uxth	r3, r3
 80071bc:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80071be:	88fb      	ldrh	r3, [r7, #6]
 80071c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d11f      	bne.n	8007208 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	461a      	mov	r2, r3
 80071ce:	68bb      	ldr	r3, [r7, #8]
 80071d0:	781b      	ldrb	r3, [r3, #0]
 80071d2:	009b      	lsls	r3, r3, #2
 80071d4:	4413      	add	r3, r2
 80071d6:	881b      	ldrh	r3, [r3, #0]
 80071d8:	b29b      	uxth	r3, r3
 80071da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80071de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071e2:	83bb      	strh	r3, [r7, #28]
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	461a      	mov	r2, r3
 80071ea:	68bb      	ldr	r3, [r7, #8]
 80071ec:	781b      	ldrb	r3, [r3, #0]
 80071ee:	009b      	lsls	r3, r3, #2
 80071f0:	441a      	add	r2, r3
 80071f2:	8bbb      	ldrh	r3, [r7, #28]
 80071f4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80071f8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80071fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007200:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007204:	b29b      	uxth	r3, r3
 8007206:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8007208:	8b7b      	ldrh	r3, [r7, #26]
 800720a:	2b00      	cmp	r3, #0
 800720c:	d008      	beq.n	8007220 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	6818      	ldr	r0, [r3, #0]
 8007212:	68bb      	ldr	r3, [r7, #8]
 8007214:	6959      	ldr	r1, [r3, #20]
 8007216:	68bb      	ldr	r3, [r7, #8]
 8007218:	895a      	ldrh	r2, [r3, #10]
 800721a:	8b7b      	ldrh	r3, [r7, #26]
 800721c:	f006 fdff 	bl	800de1e <USB_ReadPMA>
    }
  }

  return count;
 8007220:	8b7b      	ldrh	r3, [r7, #26]
}
 8007222:	4618      	mov	r0, r3
 8007224:	3720      	adds	r7, #32
 8007226:	46bd      	mov	sp, r7
 8007228:	bd80      	pop	{r7, pc}

0800722a <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800722a:	b580      	push	{r7, lr}
 800722c:	b0a2      	sub	sp, #136	; 0x88
 800722e:	af00      	add	r7, sp, #0
 8007230:	60f8      	str	r0, [r7, #12]
 8007232:	60b9      	str	r1, [r7, #8]
 8007234:	4613      	mov	r3, r2
 8007236:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8007238:	88fb      	ldrh	r3, [r7, #6]
 800723a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800723e:	2b00      	cmp	r3, #0
 8007240:	f000 81c5 	beq.w	80075ce <HAL_PCD_EP_DB_Transmit+0x3a4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800724c:	b29b      	uxth	r3, r3
 800724e:	461a      	mov	r2, r3
 8007250:	68bb      	ldr	r3, [r7, #8]
 8007252:	781b      	ldrb	r3, [r3, #0]
 8007254:	00db      	lsls	r3, r3, #3
 8007256:	4413      	add	r3, r2
 8007258:	68fa      	ldr	r2, [r7, #12]
 800725a:	6812      	ldr	r2, [r2, #0]
 800725c:	4413      	add	r3, r2
 800725e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007262:	881b      	ldrh	r3, [r3, #0]
 8007264:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007268:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxPctSize)
 800726c:	68bb      	ldr	r3, [r7, #8]
 800726e:	699a      	ldr	r2, [r3, #24]
 8007270:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007274:	429a      	cmp	r2, r3
 8007276:	d907      	bls.n	8007288 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8007278:	68bb      	ldr	r3, [r7, #8]
 800727a:	699a      	ldr	r2, [r3, #24]
 800727c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007280:	1ad2      	subs	r2, r2, r3
 8007282:	68bb      	ldr	r3, [r7, #8]
 8007284:	619a      	str	r2, [r3, #24]
 8007286:	e002      	b.n	800728e <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8007288:	68bb      	ldr	r3, [r7, #8]
 800728a:	2200      	movs	r2, #0
 800728c:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800728e:	68bb      	ldr	r3, [r7, #8]
 8007290:	699b      	ldr	r3, [r3, #24]
 8007292:	2b00      	cmp	r3, #0
 8007294:	f040 80b9 	bne.w	800740a <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007298:	68bb      	ldr	r3, [r7, #8]
 800729a:	785b      	ldrb	r3, [r3, #1]
 800729c:	2b00      	cmp	r3, #0
 800729e:	d126      	bne.n	80072ee <HAL_PCD_EP_DB_Transmit+0xc4>
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	62bb      	str	r3, [r7, #40]	; 0x28
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80072ae:	b29b      	uxth	r3, r3
 80072b0:	461a      	mov	r2, r3
 80072b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072b4:	4413      	add	r3, r2
 80072b6:	62bb      	str	r3, [r7, #40]	; 0x28
 80072b8:	68bb      	ldr	r3, [r7, #8]
 80072ba:	781b      	ldrb	r3, [r3, #0]
 80072bc:	00da      	lsls	r2, r3, #3
 80072be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072c0:	4413      	add	r3, r2
 80072c2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80072c6:	627b      	str	r3, [r7, #36]	; 0x24
 80072c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072ca:	881b      	ldrh	r3, [r3, #0]
 80072cc:	b29b      	uxth	r3, r3
 80072ce:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80072d2:	b29a      	uxth	r2, r3
 80072d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072d6:	801a      	strh	r2, [r3, #0]
 80072d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072da:	881b      	ldrh	r3, [r3, #0]
 80072dc:	b29b      	uxth	r3, r3
 80072de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80072e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80072e6:	b29a      	uxth	r2, r3
 80072e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072ea:	801a      	strh	r2, [r3, #0]
 80072ec:	e01a      	b.n	8007324 <HAL_PCD_EP_DB_Transmit+0xfa>
 80072ee:	68bb      	ldr	r3, [r7, #8]
 80072f0:	785b      	ldrb	r3, [r3, #1]
 80072f2:	2b01      	cmp	r3, #1
 80072f4:	d116      	bne.n	8007324 <HAL_PCD_EP_DB_Transmit+0xfa>
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	633b      	str	r3, [r7, #48]	; 0x30
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007304:	b29b      	uxth	r3, r3
 8007306:	461a      	mov	r2, r3
 8007308:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800730a:	4413      	add	r3, r2
 800730c:	633b      	str	r3, [r7, #48]	; 0x30
 800730e:	68bb      	ldr	r3, [r7, #8]
 8007310:	781b      	ldrb	r3, [r3, #0]
 8007312:	00da      	lsls	r2, r3, #3
 8007314:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007316:	4413      	add	r3, r2
 8007318:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800731c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800731e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007320:	2200      	movs	r2, #0
 8007322:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	623b      	str	r3, [r7, #32]
 800732a:	68bb      	ldr	r3, [r7, #8]
 800732c:	785b      	ldrb	r3, [r3, #1]
 800732e:	2b00      	cmp	r3, #0
 8007330:	d126      	bne.n	8007380 <HAL_PCD_EP_DB_Transmit+0x156>
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	61bb      	str	r3, [r7, #24]
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007340:	b29b      	uxth	r3, r3
 8007342:	461a      	mov	r2, r3
 8007344:	69bb      	ldr	r3, [r7, #24]
 8007346:	4413      	add	r3, r2
 8007348:	61bb      	str	r3, [r7, #24]
 800734a:	68bb      	ldr	r3, [r7, #8]
 800734c:	781b      	ldrb	r3, [r3, #0]
 800734e:	00da      	lsls	r2, r3, #3
 8007350:	69bb      	ldr	r3, [r7, #24]
 8007352:	4413      	add	r3, r2
 8007354:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007358:	617b      	str	r3, [r7, #20]
 800735a:	697b      	ldr	r3, [r7, #20]
 800735c:	881b      	ldrh	r3, [r3, #0]
 800735e:	b29b      	uxth	r3, r3
 8007360:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007364:	b29a      	uxth	r2, r3
 8007366:	697b      	ldr	r3, [r7, #20]
 8007368:	801a      	strh	r2, [r3, #0]
 800736a:	697b      	ldr	r3, [r7, #20]
 800736c:	881b      	ldrh	r3, [r3, #0]
 800736e:	b29b      	uxth	r3, r3
 8007370:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007374:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007378:	b29a      	uxth	r2, r3
 800737a:	697b      	ldr	r3, [r7, #20]
 800737c:	801a      	strh	r2, [r3, #0]
 800737e:	e017      	b.n	80073b0 <HAL_PCD_EP_DB_Transmit+0x186>
 8007380:	68bb      	ldr	r3, [r7, #8]
 8007382:	785b      	ldrb	r3, [r3, #1]
 8007384:	2b01      	cmp	r3, #1
 8007386:	d113      	bne.n	80073b0 <HAL_PCD_EP_DB_Transmit+0x186>
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007390:	b29b      	uxth	r3, r3
 8007392:	461a      	mov	r2, r3
 8007394:	6a3b      	ldr	r3, [r7, #32]
 8007396:	4413      	add	r3, r2
 8007398:	623b      	str	r3, [r7, #32]
 800739a:	68bb      	ldr	r3, [r7, #8]
 800739c:	781b      	ldrb	r3, [r3, #0]
 800739e:	00da      	lsls	r2, r3, #3
 80073a0:	6a3b      	ldr	r3, [r7, #32]
 80073a2:	4413      	add	r3, r2
 80073a4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80073a8:	61fb      	str	r3, [r7, #28]
 80073aa:	69fb      	ldr	r3, [r7, #28]
 80073ac:	2200      	movs	r2, #0
 80073ae:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80073b0:	68bb      	ldr	r3, [r7, #8]
 80073b2:	781b      	ldrb	r3, [r3, #0]
 80073b4:	4619      	mov	r1, r3
 80073b6:	68f8      	ldr	r0, [r7, #12]
 80073b8:	f00a fe39 	bl	801202e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80073bc:	88fb      	ldrh	r3, [r7, #6]
 80073be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	f000 82d2 	beq.w	800796c <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	461a      	mov	r2, r3
 80073ce:	68bb      	ldr	r3, [r7, #8]
 80073d0:	781b      	ldrb	r3, [r3, #0]
 80073d2:	009b      	lsls	r3, r3, #2
 80073d4:	4413      	add	r3, r2
 80073d6:	881b      	ldrh	r3, [r3, #0]
 80073d8:	b29b      	uxth	r3, r3
 80073da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80073de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073e2:	827b      	strh	r3, [r7, #18]
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	461a      	mov	r2, r3
 80073ea:	68bb      	ldr	r3, [r7, #8]
 80073ec:	781b      	ldrb	r3, [r3, #0]
 80073ee:	009b      	lsls	r3, r3, #2
 80073f0:	441a      	add	r2, r3
 80073f2:	8a7b      	ldrh	r3, [r7, #18]
 80073f4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80073f8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80073fc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007400:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007404:	b29b      	uxth	r3, r3
 8007406:	8013      	strh	r3, [r2, #0]
 8007408:	e2b0      	b.n	800796c <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800740a:	88fb      	ldrh	r3, [r7, #6]
 800740c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007410:	2b00      	cmp	r3, #0
 8007412:	d021      	beq.n	8007458 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	461a      	mov	r2, r3
 800741a:	68bb      	ldr	r3, [r7, #8]
 800741c:	781b      	ldrb	r3, [r3, #0]
 800741e:	009b      	lsls	r3, r3, #2
 8007420:	4413      	add	r3, r2
 8007422:	881b      	ldrh	r3, [r3, #0]
 8007424:	b29b      	uxth	r3, r3
 8007426:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800742a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800742e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	461a      	mov	r2, r3
 8007438:	68bb      	ldr	r3, [r7, #8]
 800743a:	781b      	ldrb	r3, [r3, #0]
 800743c:	009b      	lsls	r3, r3, #2
 800743e:	441a      	add	r2, r3
 8007440:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8007444:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007448:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800744c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007450:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007454:	b29b      	uxth	r3, r3
 8007456:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8007458:	68bb      	ldr	r3, [r7, #8]
 800745a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800745e:	2b01      	cmp	r3, #1
 8007460:	f040 8284 	bne.w	800796c <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 8007464:	68bb      	ldr	r3, [r7, #8]
 8007466:	695a      	ldr	r2, [r3, #20]
 8007468:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800746c:	441a      	add	r2, r3
 800746e:	68bb      	ldr	r3, [r7, #8]
 8007470:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8007472:	68bb      	ldr	r3, [r7, #8]
 8007474:	69da      	ldr	r2, [r3, #28]
 8007476:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800747a:	441a      	add	r2, r3
 800747c:	68bb      	ldr	r3, [r7, #8]
 800747e:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8007480:	68bb      	ldr	r3, [r7, #8]
 8007482:	6a1a      	ldr	r2, [r3, #32]
 8007484:	68bb      	ldr	r3, [r7, #8]
 8007486:	691b      	ldr	r3, [r3, #16]
 8007488:	429a      	cmp	r2, r3
 800748a:	d309      	bcc.n	80074a0 <HAL_PCD_EP_DB_Transmit+0x276>
        {
          len = ep->maxpacket;
 800748c:	68bb      	ldr	r3, [r7, #8]
 800748e:	691b      	ldr	r3, [r3, #16]
 8007490:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8007492:	68bb      	ldr	r3, [r7, #8]
 8007494:	6a1a      	ldr	r2, [r3, #32]
 8007496:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007498:	1ad2      	subs	r2, r2, r3
 800749a:	68bb      	ldr	r3, [r7, #8]
 800749c:	621a      	str	r2, [r3, #32]
 800749e:	e015      	b.n	80074cc <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else if (ep->xfer_len_db == 0U)
 80074a0:	68bb      	ldr	r3, [r7, #8]
 80074a2:	6a1b      	ldr	r3, [r3, #32]
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d107      	bne.n	80074b8 <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxPctSize;
 80074a8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80074ac:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 80074ae:	68bb      	ldr	r3, [r7, #8]
 80074b0:	2200      	movs	r2, #0
 80074b2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80074b6:	e009      	b.n	80074cc <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80074b8:	68bb      	ldr	r3, [r7, #8]
 80074ba:	2200      	movs	r2, #0
 80074bc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 80074c0:	68bb      	ldr	r3, [r7, #8]
 80074c2:	6a1b      	ldr	r3, [r3, #32]
 80074c4:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 80074c6:	68bb      	ldr	r3, [r7, #8]
 80074c8:	2200      	movs	r2, #0
 80074ca:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80074cc:	68bb      	ldr	r3, [r7, #8]
 80074ce:	785b      	ldrb	r3, [r3, #1]
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d155      	bne.n	8007580 <HAL_PCD_EP_DB_Transmit+0x356>
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	63bb      	str	r3, [r7, #56]	; 0x38
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80074e2:	b29b      	uxth	r3, r3
 80074e4:	461a      	mov	r2, r3
 80074e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074e8:	4413      	add	r3, r2
 80074ea:	63bb      	str	r3, [r7, #56]	; 0x38
 80074ec:	68bb      	ldr	r3, [r7, #8]
 80074ee:	781b      	ldrb	r3, [r3, #0]
 80074f0:	00da      	lsls	r2, r3, #3
 80074f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074f4:	4413      	add	r3, r2
 80074f6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80074fa:	637b      	str	r3, [r7, #52]	; 0x34
 80074fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80074fe:	2b3e      	cmp	r3, #62	; 0x3e
 8007500:	d916      	bls.n	8007530 <HAL_PCD_EP_DB_Transmit+0x306>
 8007502:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007504:	095b      	lsrs	r3, r3, #5
 8007506:	64bb      	str	r3, [r7, #72]	; 0x48
 8007508:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800750a:	f003 031f 	and.w	r3, r3, #31
 800750e:	2b00      	cmp	r3, #0
 8007510:	d102      	bne.n	8007518 <HAL_PCD_EP_DB_Transmit+0x2ee>
 8007512:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007514:	3b01      	subs	r3, #1
 8007516:	64bb      	str	r3, [r7, #72]	; 0x48
 8007518:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800751a:	b29b      	uxth	r3, r3
 800751c:	029b      	lsls	r3, r3, #10
 800751e:	b29b      	uxth	r3, r3
 8007520:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007524:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007528:	b29a      	uxth	r2, r3
 800752a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800752c:	801a      	strh	r2, [r3, #0]
 800752e:	e043      	b.n	80075b8 <HAL_PCD_EP_DB_Transmit+0x38e>
 8007530:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007532:	2b00      	cmp	r3, #0
 8007534:	d112      	bne.n	800755c <HAL_PCD_EP_DB_Transmit+0x332>
 8007536:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007538:	881b      	ldrh	r3, [r3, #0]
 800753a:	b29b      	uxth	r3, r3
 800753c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007540:	b29a      	uxth	r2, r3
 8007542:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007544:	801a      	strh	r2, [r3, #0]
 8007546:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007548:	881b      	ldrh	r3, [r3, #0]
 800754a:	b29b      	uxth	r3, r3
 800754c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007550:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007554:	b29a      	uxth	r2, r3
 8007556:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007558:	801a      	strh	r2, [r3, #0]
 800755a:	e02d      	b.n	80075b8 <HAL_PCD_EP_DB_Transmit+0x38e>
 800755c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800755e:	085b      	lsrs	r3, r3, #1
 8007560:	64bb      	str	r3, [r7, #72]	; 0x48
 8007562:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007564:	f003 0301 	and.w	r3, r3, #1
 8007568:	2b00      	cmp	r3, #0
 800756a:	d002      	beq.n	8007572 <HAL_PCD_EP_DB_Transmit+0x348>
 800756c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800756e:	3301      	adds	r3, #1
 8007570:	64bb      	str	r3, [r7, #72]	; 0x48
 8007572:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007574:	b29b      	uxth	r3, r3
 8007576:	029b      	lsls	r3, r3, #10
 8007578:	b29a      	uxth	r2, r3
 800757a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800757c:	801a      	strh	r2, [r3, #0]
 800757e:	e01b      	b.n	80075b8 <HAL_PCD_EP_DB_Transmit+0x38e>
 8007580:	68bb      	ldr	r3, [r7, #8]
 8007582:	785b      	ldrb	r3, [r3, #1]
 8007584:	2b01      	cmp	r3, #1
 8007586:	d117      	bne.n	80075b8 <HAL_PCD_EP_DB_Transmit+0x38e>
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	643b      	str	r3, [r7, #64]	; 0x40
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007596:	b29b      	uxth	r3, r3
 8007598:	461a      	mov	r2, r3
 800759a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800759c:	4413      	add	r3, r2
 800759e:	643b      	str	r3, [r7, #64]	; 0x40
 80075a0:	68bb      	ldr	r3, [r7, #8]
 80075a2:	781b      	ldrb	r3, [r3, #0]
 80075a4:	00da      	lsls	r2, r3, #3
 80075a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80075a8:	4413      	add	r3, r2
 80075aa:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80075ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 80075b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80075b2:	b29a      	uxth	r2, r3
 80075b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80075b6:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	6818      	ldr	r0, [r3, #0]
 80075bc:	68bb      	ldr	r3, [r7, #8]
 80075be:	6959      	ldr	r1, [r3, #20]
 80075c0:	68bb      	ldr	r3, [r7, #8]
 80075c2:	891a      	ldrh	r2, [r3, #8]
 80075c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80075c6:	b29b      	uxth	r3, r3
 80075c8:	f006 fbe7 	bl	800dd9a <USB_WritePMA>
 80075cc:	e1ce      	b.n	800796c <HAL_PCD_EP_DB_Transmit+0x742>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80075d6:	b29b      	uxth	r3, r3
 80075d8:	461a      	mov	r2, r3
 80075da:	68bb      	ldr	r3, [r7, #8]
 80075dc:	781b      	ldrb	r3, [r3, #0]
 80075de:	00db      	lsls	r3, r3, #3
 80075e0:	4413      	add	r3, r2
 80075e2:	68fa      	ldr	r2, [r7, #12]
 80075e4:	6812      	ldr	r2, [r2, #0]
 80075e6:	4413      	add	r3, r2
 80075e8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80075ec:	881b      	ldrh	r3, [r3, #0]
 80075ee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80075f2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxPctSize)
 80075f6:	68bb      	ldr	r3, [r7, #8]
 80075f8:	699a      	ldr	r2, [r3, #24]
 80075fa:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80075fe:	429a      	cmp	r2, r3
 8007600:	d307      	bcc.n	8007612 <HAL_PCD_EP_DB_Transmit+0x3e8>
    {
      ep->xfer_len -= TxPctSize;
 8007602:	68bb      	ldr	r3, [r7, #8]
 8007604:	699a      	ldr	r2, [r3, #24]
 8007606:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800760a:	1ad2      	subs	r2, r2, r3
 800760c:	68bb      	ldr	r3, [r7, #8]
 800760e:	619a      	str	r2, [r3, #24]
 8007610:	e002      	b.n	8007618 <HAL_PCD_EP_DB_Transmit+0x3ee>
    }
    else
    {
      ep->xfer_len = 0U;
 8007612:	68bb      	ldr	r3, [r7, #8]
 8007614:	2200      	movs	r2, #0
 8007616:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8007618:	68bb      	ldr	r3, [r7, #8]
 800761a:	699b      	ldr	r3, [r3, #24]
 800761c:	2b00      	cmp	r3, #0
 800761e:	f040 80c4 	bne.w	80077aa <HAL_PCD_EP_DB_Transmit+0x580>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007622:	68bb      	ldr	r3, [r7, #8]
 8007624:	785b      	ldrb	r3, [r3, #1]
 8007626:	2b00      	cmp	r3, #0
 8007628:	d126      	bne.n	8007678 <HAL_PCD_EP_DB_Transmit+0x44e>
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	66bb      	str	r3, [r7, #104]	; 0x68
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007638:	b29b      	uxth	r3, r3
 800763a:	461a      	mov	r2, r3
 800763c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800763e:	4413      	add	r3, r2
 8007640:	66bb      	str	r3, [r7, #104]	; 0x68
 8007642:	68bb      	ldr	r3, [r7, #8]
 8007644:	781b      	ldrb	r3, [r3, #0]
 8007646:	00da      	lsls	r2, r3, #3
 8007648:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800764a:	4413      	add	r3, r2
 800764c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007650:	667b      	str	r3, [r7, #100]	; 0x64
 8007652:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007654:	881b      	ldrh	r3, [r3, #0]
 8007656:	b29b      	uxth	r3, r3
 8007658:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800765c:	b29a      	uxth	r2, r3
 800765e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007660:	801a      	strh	r2, [r3, #0]
 8007662:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007664:	881b      	ldrh	r3, [r3, #0]
 8007666:	b29b      	uxth	r3, r3
 8007668:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800766c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007670:	b29a      	uxth	r2, r3
 8007672:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007674:	801a      	strh	r2, [r3, #0]
 8007676:	e01a      	b.n	80076ae <HAL_PCD_EP_DB_Transmit+0x484>
 8007678:	68bb      	ldr	r3, [r7, #8]
 800767a:	785b      	ldrb	r3, [r3, #1]
 800767c:	2b01      	cmp	r3, #1
 800767e:	d116      	bne.n	80076ae <HAL_PCD_EP_DB_Transmit+0x484>
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	673b      	str	r3, [r7, #112]	; 0x70
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800768e:	b29b      	uxth	r3, r3
 8007690:	461a      	mov	r2, r3
 8007692:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007694:	4413      	add	r3, r2
 8007696:	673b      	str	r3, [r7, #112]	; 0x70
 8007698:	68bb      	ldr	r3, [r7, #8]
 800769a:	781b      	ldrb	r3, [r3, #0]
 800769c:	00da      	lsls	r2, r3, #3
 800769e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80076a0:	4413      	add	r3, r2
 80076a2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80076a6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80076a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80076aa:	2200      	movs	r2, #0
 80076ac:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80076b4:	68bb      	ldr	r3, [r7, #8]
 80076b6:	785b      	ldrb	r3, [r3, #1]
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d12f      	bne.n	800771c <HAL_PCD_EP_DB_Transmit+0x4f2>
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80076cc:	b29b      	uxth	r3, r3
 80076ce:	461a      	mov	r2, r3
 80076d0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80076d4:	4413      	add	r3, r2
 80076d6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80076da:	68bb      	ldr	r3, [r7, #8]
 80076dc:	781b      	ldrb	r3, [r3, #0]
 80076de:	00da      	lsls	r2, r3, #3
 80076e0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80076e4:	4413      	add	r3, r2
 80076e6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80076ea:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80076ee:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80076f2:	881b      	ldrh	r3, [r3, #0]
 80076f4:	b29b      	uxth	r3, r3
 80076f6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80076fa:	b29a      	uxth	r2, r3
 80076fc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007700:	801a      	strh	r2, [r3, #0]
 8007702:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007706:	881b      	ldrh	r3, [r3, #0]
 8007708:	b29b      	uxth	r3, r3
 800770a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800770e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007712:	b29a      	uxth	r2, r3
 8007714:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007718:	801a      	strh	r2, [r3, #0]
 800771a:	e017      	b.n	800774c <HAL_PCD_EP_DB_Transmit+0x522>
 800771c:	68bb      	ldr	r3, [r7, #8]
 800771e:	785b      	ldrb	r3, [r3, #1]
 8007720:	2b01      	cmp	r3, #1
 8007722:	d113      	bne.n	800774c <HAL_PCD_EP_DB_Transmit+0x522>
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800772c:	b29b      	uxth	r3, r3
 800772e:	461a      	mov	r2, r3
 8007730:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007732:	4413      	add	r3, r2
 8007734:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007736:	68bb      	ldr	r3, [r7, #8]
 8007738:	781b      	ldrb	r3, [r3, #0]
 800773a:	00da      	lsls	r2, r3, #3
 800773c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800773e:	4413      	add	r3, r2
 8007740:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007744:	67bb      	str	r3, [r7, #120]	; 0x78
 8007746:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007748:	2200      	movs	r2, #0
 800774a:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800774c:	68bb      	ldr	r3, [r7, #8]
 800774e:	781b      	ldrb	r3, [r3, #0]
 8007750:	4619      	mov	r1, r3
 8007752:	68f8      	ldr	r0, [r7, #12]
 8007754:	f00a fc6b 	bl	801202e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8007758:	88fb      	ldrh	r3, [r7, #6]
 800775a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800775e:	2b00      	cmp	r3, #0
 8007760:	f040 8104 	bne.w	800796c <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	461a      	mov	r2, r3
 800776a:	68bb      	ldr	r3, [r7, #8]
 800776c:	781b      	ldrb	r3, [r3, #0]
 800776e:	009b      	lsls	r3, r3, #2
 8007770:	4413      	add	r3, r2
 8007772:	881b      	ldrh	r3, [r3, #0]
 8007774:	b29b      	uxth	r3, r3
 8007776:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800777a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800777e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	461a      	mov	r2, r3
 8007788:	68bb      	ldr	r3, [r7, #8]
 800778a:	781b      	ldrb	r3, [r3, #0]
 800778c:	009b      	lsls	r3, r3, #2
 800778e:	441a      	add	r2, r3
 8007790:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8007794:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007798:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800779c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80077a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80077a4:	b29b      	uxth	r3, r3
 80077a6:	8013      	strh	r3, [r2, #0]
 80077a8:	e0e0      	b.n	800796c <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80077aa:	88fb      	ldrh	r3, [r7, #6]
 80077ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d121      	bne.n	80077f8 <HAL_PCD_EP_DB_Transmit+0x5ce>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	461a      	mov	r2, r3
 80077ba:	68bb      	ldr	r3, [r7, #8]
 80077bc:	781b      	ldrb	r3, [r3, #0]
 80077be:	009b      	lsls	r3, r3, #2
 80077c0:	4413      	add	r3, r2
 80077c2:	881b      	ldrh	r3, [r3, #0]
 80077c4:	b29b      	uxth	r3, r3
 80077c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80077ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80077ce:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	461a      	mov	r2, r3
 80077d8:	68bb      	ldr	r3, [r7, #8]
 80077da:	781b      	ldrb	r3, [r3, #0]
 80077dc:	009b      	lsls	r3, r3, #2
 80077de:	441a      	add	r2, r3
 80077e0:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80077e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80077e8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80077ec:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80077f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80077f4:	b29b      	uxth	r3, r3
 80077f6:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80077f8:	68bb      	ldr	r3, [r7, #8]
 80077fa:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80077fe:	2b01      	cmp	r3, #1
 8007800:	f040 80b4 	bne.w	800796c <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 8007804:	68bb      	ldr	r3, [r7, #8]
 8007806:	695a      	ldr	r2, [r3, #20]
 8007808:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800780c:	441a      	add	r2, r3
 800780e:	68bb      	ldr	r3, [r7, #8]
 8007810:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8007812:	68bb      	ldr	r3, [r7, #8]
 8007814:	69da      	ldr	r2, [r3, #28]
 8007816:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800781a:	441a      	add	r2, r3
 800781c:	68bb      	ldr	r3, [r7, #8]
 800781e:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8007820:	68bb      	ldr	r3, [r7, #8]
 8007822:	6a1a      	ldr	r2, [r3, #32]
 8007824:	68bb      	ldr	r3, [r7, #8]
 8007826:	691b      	ldr	r3, [r3, #16]
 8007828:	429a      	cmp	r2, r3
 800782a:	d309      	bcc.n	8007840 <HAL_PCD_EP_DB_Transmit+0x616>
        {
          len = ep->maxpacket;
 800782c:	68bb      	ldr	r3, [r7, #8]
 800782e:	691b      	ldr	r3, [r3, #16]
 8007830:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8007832:	68bb      	ldr	r3, [r7, #8]
 8007834:	6a1a      	ldr	r2, [r3, #32]
 8007836:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007838:	1ad2      	subs	r2, r2, r3
 800783a:	68bb      	ldr	r3, [r7, #8]
 800783c:	621a      	str	r2, [r3, #32]
 800783e:	e015      	b.n	800786c <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else if (ep->xfer_len_db == 0U)
 8007840:	68bb      	ldr	r3, [r7, #8]
 8007842:	6a1b      	ldr	r3, [r3, #32]
 8007844:	2b00      	cmp	r3, #0
 8007846:	d107      	bne.n	8007858 <HAL_PCD_EP_DB_Transmit+0x62e>
        {
          len = TxPctSize;
 8007848:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800784c:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 800784e:	68bb      	ldr	r3, [r7, #8]
 8007850:	2200      	movs	r2, #0
 8007852:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8007856:	e009      	b.n	800786c <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else
        {
          len = ep->xfer_len_db;
 8007858:	68bb      	ldr	r3, [r7, #8]
 800785a:	6a1b      	ldr	r3, [r3, #32]
 800785c:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 800785e:	68bb      	ldr	r3, [r7, #8]
 8007860:	2200      	movs	r2, #0
 8007862:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8007864:	68bb      	ldr	r3, [r7, #8]
 8007866:	2200      	movs	r2, #0
 8007868:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	663b      	str	r3, [r7, #96]	; 0x60
 8007872:	68bb      	ldr	r3, [r7, #8]
 8007874:	785b      	ldrb	r3, [r3, #1]
 8007876:	2b00      	cmp	r3, #0
 8007878:	d155      	bne.n	8007926 <HAL_PCD_EP_DB_Transmit+0x6fc>
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	65bb      	str	r3, [r7, #88]	; 0x58
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007888:	b29b      	uxth	r3, r3
 800788a:	461a      	mov	r2, r3
 800788c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800788e:	4413      	add	r3, r2
 8007890:	65bb      	str	r3, [r7, #88]	; 0x58
 8007892:	68bb      	ldr	r3, [r7, #8]
 8007894:	781b      	ldrb	r3, [r3, #0]
 8007896:	00da      	lsls	r2, r3, #3
 8007898:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800789a:	4413      	add	r3, r2
 800789c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80078a0:	657b      	str	r3, [r7, #84]	; 0x54
 80078a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80078a4:	2b3e      	cmp	r3, #62	; 0x3e
 80078a6:	d916      	bls.n	80078d6 <HAL_PCD_EP_DB_Transmit+0x6ac>
 80078a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80078aa:	095b      	lsrs	r3, r3, #5
 80078ac:	677b      	str	r3, [r7, #116]	; 0x74
 80078ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80078b0:	f003 031f 	and.w	r3, r3, #31
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d102      	bne.n	80078be <HAL_PCD_EP_DB_Transmit+0x694>
 80078b8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80078ba:	3b01      	subs	r3, #1
 80078bc:	677b      	str	r3, [r7, #116]	; 0x74
 80078be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80078c0:	b29b      	uxth	r3, r3
 80078c2:	029b      	lsls	r3, r3, #10
 80078c4:	b29b      	uxth	r3, r3
 80078c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80078ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80078ce:	b29a      	uxth	r2, r3
 80078d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80078d2:	801a      	strh	r2, [r3, #0]
 80078d4:	e040      	b.n	8007958 <HAL_PCD_EP_DB_Transmit+0x72e>
 80078d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d112      	bne.n	8007902 <HAL_PCD_EP_DB_Transmit+0x6d8>
 80078dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80078de:	881b      	ldrh	r3, [r3, #0]
 80078e0:	b29b      	uxth	r3, r3
 80078e2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80078e6:	b29a      	uxth	r2, r3
 80078e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80078ea:	801a      	strh	r2, [r3, #0]
 80078ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80078ee:	881b      	ldrh	r3, [r3, #0]
 80078f0:	b29b      	uxth	r3, r3
 80078f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80078f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80078fa:	b29a      	uxth	r2, r3
 80078fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80078fe:	801a      	strh	r2, [r3, #0]
 8007900:	e02a      	b.n	8007958 <HAL_PCD_EP_DB_Transmit+0x72e>
 8007902:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007904:	085b      	lsrs	r3, r3, #1
 8007906:	677b      	str	r3, [r7, #116]	; 0x74
 8007908:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800790a:	f003 0301 	and.w	r3, r3, #1
 800790e:	2b00      	cmp	r3, #0
 8007910:	d002      	beq.n	8007918 <HAL_PCD_EP_DB_Transmit+0x6ee>
 8007912:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007914:	3301      	adds	r3, #1
 8007916:	677b      	str	r3, [r7, #116]	; 0x74
 8007918:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800791a:	b29b      	uxth	r3, r3
 800791c:	029b      	lsls	r3, r3, #10
 800791e:	b29a      	uxth	r2, r3
 8007920:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007922:	801a      	strh	r2, [r3, #0]
 8007924:	e018      	b.n	8007958 <HAL_PCD_EP_DB_Transmit+0x72e>
 8007926:	68bb      	ldr	r3, [r7, #8]
 8007928:	785b      	ldrb	r3, [r3, #1]
 800792a:	2b01      	cmp	r3, #1
 800792c:	d114      	bne.n	8007958 <HAL_PCD_EP_DB_Transmit+0x72e>
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007936:	b29b      	uxth	r3, r3
 8007938:	461a      	mov	r2, r3
 800793a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800793c:	4413      	add	r3, r2
 800793e:	663b      	str	r3, [r7, #96]	; 0x60
 8007940:	68bb      	ldr	r3, [r7, #8]
 8007942:	781b      	ldrb	r3, [r3, #0]
 8007944:	00da      	lsls	r2, r3, #3
 8007946:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007948:	4413      	add	r3, r2
 800794a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800794e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007950:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007952:	b29a      	uxth	r2, r3
 8007954:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007956:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	6818      	ldr	r0, [r3, #0]
 800795c:	68bb      	ldr	r3, [r7, #8]
 800795e:	6959      	ldr	r1, [r3, #20]
 8007960:	68bb      	ldr	r3, [r7, #8]
 8007962:	895a      	ldrh	r2, [r3, #10]
 8007964:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007966:	b29b      	uxth	r3, r3
 8007968:	f006 fa17 	bl	800dd9a <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	461a      	mov	r2, r3
 8007972:	68bb      	ldr	r3, [r7, #8]
 8007974:	781b      	ldrb	r3, [r3, #0]
 8007976:	009b      	lsls	r3, r3, #2
 8007978:	4413      	add	r3, r2
 800797a:	881b      	ldrh	r3, [r3, #0]
 800797c:	b29b      	uxth	r3, r3
 800797e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007982:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007986:	823b      	strh	r3, [r7, #16]
 8007988:	8a3b      	ldrh	r3, [r7, #16]
 800798a:	f083 0310 	eor.w	r3, r3, #16
 800798e:	823b      	strh	r3, [r7, #16]
 8007990:	8a3b      	ldrh	r3, [r7, #16]
 8007992:	f083 0320 	eor.w	r3, r3, #32
 8007996:	823b      	strh	r3, [r7, #16]
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	461a      	mov	r2, r3
 800799e:	68bb      	ldr	r3, [r7, #8]
 80079a0:	781b      	ldrb	r3, [r3, #0]
 80079a2:	009b      	lsls	r3, r3, #2
 80079a4:	441a      	add	r2, r3
 80079a6:	8a3b      	ldrh	r3, [r7, #16]
 80079a8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80079ac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80079b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80079b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80079b8:	b29b      	uxth	r3, r3
 80079ba:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80079bc:	2300      	movs	r3, #0
}
 80079be:	4618      	mov	r0, r3
 80079c0:	3788      	adds	r7, #136	; 0x88
 80079c2:	46bd      	mov	sp, r7
 80079c4:	bd80      	pop	{r7, pc}

080079c6 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80079c6:	b480      	push	{r7}
 80079c8:	b087      	sub	sp, #28
 80079ca:	af00      	add	r7, sp, #0
 80079cc:	60f8      	str	r0, [r7, #12]
 80079ce:	607b      	str	r3, [r7, #4]
 80079d0:	460b      	mov	r3, r1
 80079d2:	817b      	strh	r3, [r7, #10]
 80079d4:	4613      	mov	r3, r2
 80079d6:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80079d8:	897b      	ldrh	r3, [r7, #10]
 80079da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079de:	b29b      	uxth	r3, r3
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d00b      	beq.n	80079fc <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80079e4:	897b      	ldrh	r3, [r7, #10]
 80079e6:	f003 0307 	and.w	r3, r3, #7
 80079ea:	1c5a      	adds	r2, r3, #1
 80079ec:	4613      	mov	r3, r2
 80079ee:	009b      	lsls	r3, r3, #2
 80079f0:	4413      	add	r3, r2
 80079f2:	00db      	lsls	r3, r3, #3
 80079f4:	68fa      	ldr	r2, [r7, #12]
 80079f6:	4413      	add	r3, r2
 80079f8:	617b      	str	r3, [r7, #20]
 80079fa:	e009      	b.n	8007a10 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80079fc:	897a      	ldrh	r2, [r7, #10]
 80079fe:	4613      	mov	r3, r2
 8007a00:	009b      	lsls	r3, r3, #2
 8007a02:	4413      	add	r3, r2
 8007a04:	00db      	lsls	r3, r3, #3
 8007a06:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8007a0a:	68fa      	ldr	r2, [r7, #12]
 8007a0c:	4413      	add	r3, r2
 8007a0e:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8007a10:	893b      	ldrh	r3, [r7, #8]
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d107      	bne.n	8007a26 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8007a16:	697b      	ldr	r3, [r7, #20]
 8007a18:	2200      	movs	r2, #0
 8007a1a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	b29a      	uxth	r2, r3
 8007a20:	697b      	ldr	r3, [r7, #20]
 8007a22:	80da      	strh	r2, [r3, #6]
 8007a24:	e00b      	b.n	8007a3e <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8007a26:	697b      	ldr	r3, [r7, #20]
 8007a28:	2201      	movs	r2, #1
 8007a2a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	b29a      	uxth	r2, r3
 8007a30:	697b      	ldr	r3, [r7, #20]
 8007a32:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	0c1b      	lsrs	r3, r3, #16
 8007a38:	b29a      	uxth	r2, r3
 8007a3a:	697b      	ldr	r3, [r7, #20]
 8007a3c:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8007a3e:	2300      	movs	r3, #0
}
 8007a40:	4618      	mov	r0, r3
 8007a42:	371c      	adds	r7, #28
 8007a44:	46bd      	mov	sp, r7
 8007a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a4a:	4770      	bx	lr

08007a4c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8007a4c:	b480      	push	{r7}
 8007a4e:	b085      	sub	sp, #20
 8007a50:	af00      	add	r7, sp, #0
 8007a52:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	2201      	movs	r2, #1
 8007a5e:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	2200      	movs	r2, #0
 8007a66:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8007a70:	b29b      	uxth	r3, r3
 8007a72:	f043 0301 	orr.w	r3, r3, #1
 8007a76:	b29a      	uxth	r2, r3
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8007a84:	b29b      	uxth	r3, r3
 8007a86:	f043 0302 	orr.w	r3, r3, #2
 8007a8a:	b29a      	uxth	r2, r3
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8007a92:	2300      	movs	r3, #0
}
 8007a94:	4618      	mov	r0, r3
 8007a96:	3714      	adds	r7, #20
 8007a98:	46bd      	mov	sp, r7
 8007a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a9e:	4770      	bx	lr

08007aa0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8007aa0:	b480      	push	{r7}
 8007aa2:	b085      	sub	sp, #20
 8007aa4:	af00      	add	r7, sp, #0
 8007aa6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d141      	bne.n	8007b32 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8007aae:	4b4b      	ldr	r3, [pc, #300]	; (8007bdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007ab6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007aba:	d131      	bne.n	8007b20 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007abc:	4b47      	ldr	r3, [pc, #284]	; (8007bdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007abe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007ac2:	4a46      	ldr	r2, [pc, #280]	; (8007bdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007ac4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007ac8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8007acc:	4b43      	ldr	r3, [pc, #268]	; (8007bdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8007ad4:	4a41      	ldr	r2, [pc, #260]	; (8007bdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007ad6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007ada:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8007adc:	4b40      	ldr	r3, [pc, #256]	; (8007be0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	2232      	movs	r2, #50	; 0x32
 8007ae2:	fb02 f303 	mul.w	r3, r2, r3
 8007ae6:	4a3f      	ldr	r2, [pc, #252]	; (8007be4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8007ae8:	fba2 2303 	umull	r2, r3, r2, r3
 8007aec:	0c9b      	lsrs	r3, r3, #18
 8007aee:	3301      	adds	r3, #1
 8007af0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007af2:	e002      	b.n	8007afa <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	3b01      	subs	r3, #1
 8007af8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007afa:	4b38      	ldr	r3, [pc, #224]	; (8007bdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007afc:	695b      	ldr	r3, [r3, #20]
 8007afe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007b02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007b06:	d102      	bne.n	8007b0e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d1f2      	bne.n	8007af4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8007b0e:	4b33      	ldr	r3, [pc, #204]	; (8007bdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007b10:	695b      	ldr	r3, [r3, #20]
 8007b12:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007b16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007b1a:	d158      	bne.n	8007bce <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8007b1c:	2303      	movs	r3, #3
 8007b1e:	e057      	b.n	8007bd0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007b20:	4b2e      	ldr	r3, [pc, #184]	; (8007bdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007b22:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007b26:	4a2d      	ldr	r2, [pc, #180]	; (8007bdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007b28:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007b2c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8007b30:	e04d      	b.n	8007bce <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007b38:	d141      	bne.n	8007bbe <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8007b3a:	4b28      	ldr	r3, [pc, #160]	; (8007bdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007b42:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007b46:	d131      	bne.n	8007bac <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007b48:	4b24      	ldr	r3, [pc, #144]	; (8007bdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007b4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007b4e:	4a23      	ldr	r2, [pc, #140]	; (8007bdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007b50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007b54:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8007b58:	4b20      	ldr	r3, [pc, #128]	; (8007bdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8007b60:	4a1e      	ldr	r2, [pc, #120]	; (8007bdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007b62:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007b66:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8007b68:	4b1d      	ldr	r3, [pc, #116]	; (8007be0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	2232      	movs	r2, #50	; 0x32
 8007b6e:	fb02 f303 	mul.w	r3, r2, r3
 8007b72:	4a1c      	ldr	r2, [pc, #112]	; (8007be4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8007b74:	fba2 2303 	umull	r2, r3, r2, r3
 8007b78:	0c9b      	lsrs	r3, r3, #18
 8007b7a:	3301      	adds	r3, #1
 8007b7c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007b7e:	e002      	b.n	8007b86 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	3b01      	subs	r3, #1
 8007b84:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007b86:	4b15      	ldr	r3, [pc, #84]	; (8007bdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007b88:	695b      	ldr	r3, [r3, #20]
 8007b8a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007b8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007b92:	d102      	bne.n	8007b9a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d1f2      	bne.n	8007b80 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8007b9a:	4b10      	ldr	r3, [pc, #64]	; (8007bdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007b9c:	695b      	ldr	r3, [r3, #20]
 8007b9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007ba2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007ba6:	d112      	bne.n	8007bce <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8007ba8:	2303      	movs	r3, #3
 8007baa:	e011      	b.n	8007bd0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007bac:	4b0b      	ldr	r3, [pc, #44]	; (8007bdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007bae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007bb2:	4a0a      	ldr	r2, [pc, #40]	; (8007bdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007bb4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007bb8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8007bbc:	e007      	b.n	8007bce <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8007bbe:	4b07      	ldr	r3, [pc, #28]	; (8007bdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8007bc6:	4a05      	ldr	r2, [pc, #20]	; (8007bdc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007bc8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007bcc:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8007bce:	2300      	movs	r3, #0
}
 8007bd0:	4618      	mov	r0, r3
 8007bd2:	3714      	adds	r7, #20
 8007bd4:	46bd      	mov	sp, r7
 8007bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bda:	4770      	bx	lr
 8007bdc:	40007000 	.word	0x40007000
 8007be0:	20000000 	.word	0x20000000
 8007be4:	431bde83 	.word	0x431bde83

08007be8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007be8:	b580      	push	{r7, lr}
 8007bea:	b088      	sub	sp, #32
 8007bec:	af00      	add	r7, sp, #0
 8007bee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d101      	bne.n	8007bfa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007bf6:	2301      	movs	r3, #1
 8007bf8:	e306      	b.n	8008208 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	f003 0301 	and.w	r3, r3, #1
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d075      	beq.n	8007cf2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007c06:	4b97      	ldr	r3, [pc, #604]	; (8007e64 <HAL_RCC_OscConfig+0x27c>)
 8007c08:	689b      	ldr	r3, [r3, #8]
 8007c0a:	f003 030c 	and.w	r3, r3, #12
 8007c0e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007c10:	4b94      	ldr	r3, [pc, #592]	; (8007e64 <HAL_RCC_OscConfig+0x27c>)
 8007c12:	68db      	ldr	r3, [r3, #12]
 8007c14:	f003 0303 	and.w	r3, r3, #3
 8007c18:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8007c1a:	69bb      	ldr	r3, [r7, #24]
 8007c1c:	2b0c      	cmp	r3, #12
 8007c1e:	d102      	bne.n	8007c26 <HAL_RCC_OscConfig+0x3e>
 8007c20:	697b      	ldr	r3, [r7, #20]
 8007c22:	2b03      	cmp	r3, #3
 8007c24:	d002      	beq.n	8007c2c <HAL_RCC_OscConfig+0x44>
 8007c26:	69bb      	ldr	r3, [r7, #24]
 8007c28:	2b08      	cmp	r3, #8
 8007c2a:	d10b      	bne.n	8007c44 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007c2c:	4b8d      	ldr	r3, [pc, #564]	; (8007e64 <HAL_RCC_OscConfig+0x27c>)
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d05b      	beq.n	8007cf0 <HAL_RCC_OscConfig+0x108>
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	685b      	ldr	r3, [r3, #4]
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d157      	bne.n	8007cf0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007c40:	2301      	movs	r3, #1
 8007c42:	e2e1      	b.n	8008208 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	685b      	ldr	r3, [r3, #4]
 8007c48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007c4c:	d106      	bne.n	8007c5c <HAL_RCC_OscConfig+0x74>
 8007c4e:	4b85      	ldr	r3, [pc, #532]	; (8007e64 <HAL_RCC_OscConfig+0x27c>)
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	4a84      	ldr	r2, [pc, #528]	; (8007e64 <HAL_RCC_OscConfig+0x27c>)
 8007c54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007c58:	6013      	str	r3, [r2, #0]
 8007c5a:	e01d      	b.n	8007c98 <HAL_RCC_OscConfig+0xb0>
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	685b      	ldr	r3, [r3, #4]
 8007c60:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007c64:	d10c      	bne.n	8007c80 <HAL_RCC_OscConfig+0x98>
 8007c66:	4b7f      	ldr	r3, [pc, #508]	; (8007e64 <HAL_RCC_OscConfig+0x27c>)
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	4a7e      	ldr	r2, [pc, #504]	; (8007e64 <HAL_RCC_OscConfig+0x27c>)
 8007c6c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007c70:	6013      	str	r3, [r2, #0]
 8007c72:	4b7c      	ldr	r3, [pc, #496]	; (8007e64 <HAL_RCC_OscConfig+0x27c>)
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	4a7b      	ldr	r2, [pc, #492]	; (8007e64 <HAL_RCC_OscConfig+0x27c>)
 8007c78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007c7c:	6013      	str	r3, [r2, #0]
 8007c7e:	e00b      	b.n	8007c98 <HAL_RCC_OscConfig+0xb0>
 8007c80:	4b78      	ldr	r3, [pc, #480]	; (8007e64 <HAL_RCC_OscConfig+0x27c>)
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	4a77      	ldr	r2, [pc, #476]	; (8007e64 <HAL_RCC_OscConfig+0x27c>)
 8007c86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007c8a:	6013      	str	r3, [r2, #0]
 8007c8c:	4b75      	ldr	r3, [pc, #468]	; (8007e64 <HAL_RCC_OscConfig+0x27c>)
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	4a74      	ldr	r2, [pc, #464]	; (8007e64 <HAL_RCC_OscConfig+0x27c>)
 8007c92:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007c96:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	685b      	ldr	r3, [r3, #4]
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d013      	beq.n	8007cc8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ca0:	f7fb fe7a 	bl	8003998 <HAL_GetTick>
 8007ca4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007ca6:	e008      	b.n	8007cba <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007ca8:	f7fb fe76 	bl	8003998 <HAL_GetTick>
 8007cac:	4602      	mov	r2, r0
 8007cae:	693b      	ldr	r3, [r7, #16]
 8007cb0:	1ad3      	subs	r3, r2, r3
 8007cb2:	2b64      	cmp	r3, #100	; 0x64
 8007cb4:	d901      	bls.n	8007cba <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007cb6:	2303      	movs	r3, #3
 8007cb8:	e2a6      	b.n	8008208 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007cba:	4b6a      	ldr	r3, [pc, #424]	; (8007e64 <HAL_RCC_OscConfig+0x27c>)
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d0f0      	beq.n	8007ca8 <HAL_RCC_OscConfig+0xc0>
 8007cc6:	e014      	b.n	8007cf2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007cc8:	f7fb fe66 	bl	8003998 <HAL_GetTick>
 8007ccc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007cce:	e008      	b.n	8007ce2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007cd0:	f7fb fe62 	bl	8003998 <HAL_GetTick>
 8007cd4:	4602      	mov	r2, r0
 8007cd6:	693b      	ldr	r3, [r7, #16]
 8007cd8:	1ad3      	subs	r3, r2, r3
 8007cda:	2b64      	cmp	r3, #100	; 0x64
 8007cdc:	d901      	bls.n	8007ce2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007cde:	2303      	movs	r3, #3
 8007ce0:	e292      	b.n	8008208 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007ce2:	4b60      	ldr	r3, [pc, #384]	; (8007e64 <HAL_RCC_OscConfig+0x27c>)
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d1f0      	bne.n	8007cd0 <HAL_RCC_OscConfig+0xe8>
 8007cee:	e000      	b.n	8007cf2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007cf0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	f003 0302 	and.w	r3, r3, #2
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d075      	beq.n	8007dea <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007cfe:	4b59      	ldr	r3, [pc, #356]	; (8007e64 <HAL_RCC_OscConfig+0x27c>)
 8007d00:	689b      	ldr	r3, [r3, #8]
 8007d02:	f003 030c 	and.w	r3, r3, #12
 8007d06:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007d08:	4b56      	ldr	r3, [pc, #344]	; (8007e64 <HAL_RCC_OscConfig+0x27c>)
 8007d0a:	68db      	ldr	r3, [r3, #12]
 8007d0c:	f003 0303 	and.w	r3, r3, #3
 8007d10:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8007d12:	69bb      	ldr	r3, [r7, #24]
 8007d14:	2b0c      	cmp	r3, #12
 8007d16:	d102      	bne.n	8007d1e <HAL_RCC_OscConfig+0x136>
 8007d18:	697b      	ldr	r3, [r7, #20]
 8007d1a:	2b02      	cmp	r3, #2
 8007d1c:	d002      	beq.n	8007d24 <HAL_RCC_OscConfig+0x13c>
 8007d1e:	69bb      	ldr	r3, [r7, #24]
 8007d20:	2b04      	cmp	r3, #4
 8007d22:	d11f      	bne.n	8007d64 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007d24:	4b4f      	ldr	r3, [pc, #316]	; (8007e64 <HAL_RCC_OscConfig+0x27c>)
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d005      	beq.n	8007d3c <HAL_RCC_OscConfig+0x154>
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	68db      	ldr	r3, [r3, #12]
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d101      	bne.n	8007d3c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8007d38:	2301      	movs	r3, #1
 8007d3a:	e265      	b.n	8008208 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007d3c:	4b49      	ldr	r3, [pc, #292]	; (8007e64 <HAL_RCC_OscConfig+0x27c>)
 8007d3e:	685b      	ldr	r3, [r3, #4]
 8007d40:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	691b      	ldr	r3, [r3, #16]
 8007d48:	061b      	lsls	r3, r3, #24
 8007d4a:	4946      	ldr	r1, [pc, #280]	; (8007e64 <HAL_RCC_OscConfig+0x27c>)
 8007d4c:	4313      	orrs	r3, r2
 8007d4e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8007d50:	4b45      	ldr	r3, [pc, #276]	; (8007e68 <HAL_RCC_OscConfig+0x280>)
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	4618      	mov	r0, r3
 8007d56:	f7fa f895 	bl	8001e84 <HAL_InitTick>
 8007d5a:	4603      	mov	r3, r0
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d043      	beq.n	8007de8 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8007d60:	2301      	movs	r3, #1
 8007d62:	e251      	b.n	8008208 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	68db      	ldr	r3, [r3, #12]
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d023      	beq.n	8007db4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007d6c:	4b3d      	ldr	r3, [pc, #244]	; (8007e64 <HAL_RCC_OscConfig+0x27c>)
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	4a3c      	ldr	r2, [pc, #240]	; (8007e64 <HAL_RCC_OscConfig+0x27c>)
 8007d72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007d76:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d78:	f7fb fe0e 	bl	8003998 <HAL_GetTick>
 8007d7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007d7e:	e008      	b.n	8007d92 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007d80:	f7fb fe0a 	bl	8003998 <HAL_GetTick>
 8007d84:	4602      	mov	r2, r0
 8007d86:	693b      	ldr	r3, [r7, #16]
 8007d88:	1ad3      	subs	r3, r2, r3
 8007d8a:	2b02      	cmp	r3, #2
 8007d8c:	d901      	bls.n	8007d92 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8007d8e:	2303      	movs	r3, #3
 8007d90:	e23a      	b.n	8008208 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007d92:	4b34      	ldr	r3, [pc, #208]	; (8007e64 <HAL_RCC_OscConfig+0x27c>)
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d0f0      	beq.n	8007d80 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007d9e:	4b31      	ldr	r3, [pc, #196]	; (8007e64 <HAL_RCC_OscConfig+0x27c>)
 8007da0:	685b      	ldr	r3, [r3, #4]
 8007da2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	691b      	ldr	r3, [r3, #16]
 8007daa:	061b      	lsls	r3, r3, #24
 8007dac:	492d      	ldr	r1, [pc, #180]	; (8007e64 <HAL_RCC_OscConfig+0x27c>)
 8007dae:	4313      	orrs	r3, r2
 8007db0:	604b      	str	r3, [r1, #4]
 8007db2:	e01a      	b.n	8007dea <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007db4:	4b2b      	ldr	r3, [pc, #172]	; (8007e64 <HAL_RCC_OscConfig+0x27c>)
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	4a2a      	ldr	r2, [pc, #168]	; (8007e64 <HAL_RCC_OscConfig+0x27c>)
 8007dba:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007dbe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007dc0:	f7fb fdea 	bl	8003998 <HAL_GetTick>
 8007dc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007dc6:	e008      	b.n	8007dda <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007dc8:	f7fb fde6 	bl	8003998 <HAL_GetTick>
 8007dcc:	4602      	mov	r2, r0
 8007dce:	693b      	ldr	r3, [r7, #16]
 8007dd0:	1ad3      	subs	r3, r2, r3
 8007dd2:	2b02      	cmp	r3, #2
 8007dd4:	d901      	bls.n	8007dda <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8007dd6:	2303      	movs	r3, #3
 8007dd8:	e216      	b.n	8008208 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007dda:	4b22      	ldr	r3, [pc, #136]	; (8007e64 <HAL_RCC_OscConfig+0x27c>)
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d1f0      	bne.n	8007dc8 <HAL_RCC_OscConfig+0x1e0>
 8007de6:	e000      	b.n	8007dea <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007de8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	f003 0308 	and.w	r3, r3, #8
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d041      	beq.n	8007e7a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	695b      	ldr	r3, [r3, #20]
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d01c      	beq.n	8007e38 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007dfe:	4b19      	ldr	r3, [pc, #100]	; (8007e64 <HAL_RCC_OscConfig+0x27c>)
 8007e00:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007e04:	4a17      	ldr	r2, [pc, #92]	; (8007e64 <HAL_RCC_OscConfig+0x27c>)
 8007e06:	f043 0301 	orr.w	r3, r3, #1
 8007e0a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007e0e:	f7fb fdc3 	bl	8003998 <HAL_GetTick>
 8007e12:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007e14:	e008      	b.n	8007e28 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007e16:	f7fb fdbf 	bl	8003998 <HAL_GetTick>
 8007e1a:	4602      	mov	r2, r0
 8007e1c:	693b      	ldr	r3, [r7, #16]
 8007e1e:	1ad3      	subs	r3, r2, r3
 8007e20:	2b02      	cmp	r3, #2
 8007e22:	d901      	bls.n	8007e28 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8007e24:	2303      	movs	r3, #3
 8007e26:	e1ef      	b.n	8008208 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007e28:	4b0e      	ldr	r3, [pc, #56]	; (8007e64 <HAL_RCC_OscConfig+0x27c>)
 8007e2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007e2e:	f003 0302 	and.w	r3, r3, #2
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d0ef      	beq.n	8007e16 <HAL_RCC_OscConfig+0x22e>
 8007e36:	e020      	b.n	8007e7a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007e38:	4b0a      	ldr	r3, [pc, #40]	; (8007e64 <HAL_RCC_OscConfig+0x27c>)
 8007e3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007e3e:	4a09      	ldr	r2, [pc, #36]	; (8007e64 <HAL_RCC_OscConfig+0x27c>)
 8007e40:	f023 0301 	bic.w	r3, r3, #1
 8007e44:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007e48:	f7fb fda6 	bl	8003998 <HAL_GetTick>
 8007e4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007e4e:	e00d      	b.n	8007e6c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007e50:	f7fb fda2 	bl	8003998 <HAL_GetTick>
 8007e54:	4602      	mov	r2, r0
 8007e56:	693b      	ldr	r3, [r7, #16]
 8007e58:	1ad3      	subs	r3, r2, r3
 8007e5a:	2b02      	cmp	r3, #2
 8007e5c:	d906      	bls.n	8007e6c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8007e5e:	2303      	movs	r3, #3
 8007e60:	e1d2      	b.n	8008208 <HAL_RCC_OscConfig+0x620>
 8007e62:	bf00      	nop
 8007e64:	40021000 	.word	0x40021000
 8007e68:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007e6c:	4b8c      	ldr	r3, [pc, #560]	; (80080a0 <HAL_RCC_OscConfig+0x4b8>)
 8007e6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007e72:	f003 0302 	and.w	r3, r3, #2
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d1ea      	bne.n	8007e50 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	f003 0304 	and.w	r3, r3, #4
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	f000 80a6 	beq.w	8007fd4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007e88:	2300      	movs	r3, #0
 8007e8a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8007e8c:	4b84      	ldr	r3, [pc, #528]	; (80080a0 <HAL_RCC_OscConfig+0x4b8>)
 8007e8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d101      	bne.n	8007e9c <HAL_RCC_OscConfig+0x2b4>
 8007e98:	2301      	movs	r3, #1
 8007e9a:	e000      	b.n	8007e9e <HAL_RCC_OscConfig+0x2b6>
 8007e9c:	2300      	movs	r3, #0
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d00d      	beq.n	8007ebe <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007ea2:	4b7f      	ldr	r3, [pc, #508]	; (80080a0 <HAL_RCC_OscConfig+0x4b8>)
 8007ea4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ea6:	4a7e      	ldr	r2, [pc, #504]	; (80080a0 <HAL_RCC_OscConfig+0x4b8>)
 8007ea8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007eac:	6593      	str	r3, [r2, #88]	; 0x58
 8007eae:	4b7c      	ldr	r3, [pc, #496]	; (80080a0 <HAL_RCC_OscConfig+0x4b8>)
 8007eb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007eb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007eb6:	60fb      	str	r3, [r7, #12]
 8007eb8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8007eba:	2301      	movs	r3, #1
 8007ebc:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007ebe:	4b79      	ldr	r3, [pc, #484]	; (80080a4 <HAL_RCC_OscConfig+0x4bc>)
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d118      	bne.n	8007efc <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007eca:	4b76      	ldr	r3, [pc, #472]	; (80080a4 <HAL_RCC_OscConfig+0x4bc>)
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	4a75      	ldr	r2, [pc, #468]	; (80080a4 <HAL_RCC_OscConfig+0x4bc>)
 8007ed0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007ed4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007ed6:	f7fb fd5f 	bl	8003998 <HAL_GetTick>
 8007eda:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007edc:	e008      	b.n	8007ef0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007ede:	f7fb fd5b 	bl	8003998 <HAL_GetTick>
 8007ee2:	4602      	mov	r2, r0
 8007ee4:	693b      	ldr	r3, [r7, #16]
 8007ee6:	1ad3      	subs	r3, r2, r3
 8007ee8:	2b02      	cmp	r3, #2
 8007eea:	d901      	bls.n	8007ef0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8007eec:	2303      	movs	r3, #3
 8007eee:	e18b      	b.n	8008208 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007ef0:	4b6c      	ldr	r3, [pc, #432]	; (80080a4 <HAL_RCC_OscConfig+0x4bc>)
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d0f0      	beq.n	8007ede <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	689b      	ldr	r3, [r3, #8]
 8007f00:	2b01      	cmp	r3, #1
 8007f02:	d108      	bne.n	8007f16 <HAL_RCC_OscConfig+0x32e>
 8007f04:	4b66      	ldr	r3, [pc, #408]	; (80080a0 <HAL_RCC_OscConfig+0x4b8>)
 8007f06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f0a:	4a65      	ldr	r2, [pc, #404]	; (80080a0 <HAL_RCC_OscConfig+0x4b8>)
 8007f0c:	f043 0301 	orr.w	r3, r3, #1
 8007f10:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007f14:	e024      	b.n	8007f60 <HAL_RCC_OscConfig+0x378>
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	689b      	ldr	r3, [r3, #8]
 8007f1a:	2b05      	cmp	r3, #5
 8007f1c:	d110      	bne.n	8007f40 <HAL_RCC_OscConfig+0x358>
 8007f1e:	4b60      	ldr	r3, [pc, #384]	; (80080a0 <HAL_RCC_OscConfig+0x4b8>)
 8007f20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f24:	4a5e      	ldr	r2, [pc, #376]	; (80080a0 <HAL_RCC_OscConfig+0x4b8>)
 8007f26:	f043 0304 	orr.w	r3, r3, #4
 8007f2a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007f2e:	4b5c      	ldr	r3, [pc, #368]	; (80080a0 <HAL_RCC_OscConfig+0x4b8>)
 8007f30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f34:	4a5a      	ldr	r2, [pc, #360]	; (80080a0 <HAL_RCC_OscConfig+0x4b8>)
 8007f36:	f043 0301 	orr.w	r3, r3, #1
 8007f3a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007f3e:	e00f      	b.n	8007f60 <HAL_RCC_OscConfig+0x378>
 8007f40:	4b57      	ldr	r3, [pc, #348]	; (80080a0 <HAL_RCC_OscConfig+0x4b8>)
 8007f42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f46:	4a56      	ldr	r2, [pc, #344]	; (80080a0 <HAL_RCC_OscConfig+0x4b8>)
 8007f48:	f023 0301 	bic.w	r3, r3, #1
 8007f4c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007f50:	4b53      	ldr	r3, [pc, #332]	; (80080a0 <HAL_RCC_OscConfig+0x4b8>)
 8007f52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f56:	4a52      	ldr	r2, [pc, #328]	; (80080a0 <HAL_RCC_OscConfig+0x4b8>)
 8007f58:	f023 0304 	bic.w	r3, r3, #4
 8007f5c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	689b      	ldr	r3, [r3, #8]
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d016      	beq.n	8007f96 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007f68:	f7fb fd16 	bl	8003998 <HAL_GetTick>
 8007f6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007f6e:	e00a      	b.n	8007f86 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007f70:	f7fb fd12 	bl	8003998 <HAL_GetTick>
 8007f74:	4602      	mov	r2, r0
 8007f76:	693b      	ldr	r3, [r7, #16]
 8007f78:	1ad3      	subs	r3, r2, r3
 8007f7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8007f7e:	4293      	cmp	r3, r2
 8007f80:	d901      	bls.n	8007f86 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8007f82:	2303      	movs	r3, #3
 8007f84:	e140      	b.n	8008208 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007f86:	4b46      	ldr	r3, [pc, #280]	; (80080a0 <HAL_RCC_OscConfig+0x4b8>)
 8007f88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f8c:	f003 0302 	and.w	r3, r3, #2
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d0ed      	beq.n	8007f70 <HAL_RCC_OscConfig+0x388>
 8007f94:	e015      	b.n	8007fc2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007f96:	f7fb fcff 	bl	8003998 <HAL_GetTick>
 8007f9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007f9c:	e00a      	b.n	8007fb4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007f9e:	f7fb fcfb 	bl	8003998 <HAL_GetTick>
 8007fa2:	4602      	mov	r2, r0
 8007fa4:	693b      	ldr	r3, [r7, #16]
 8007fa6:	1ad3      	subs	r3, r2, r3
 8007fa8:	f241 3288 	movw	r2, #5000	; 0x1388
 8007fac:	4293      	cmp	r3, r2
 8007fae:	d901      	bls.n	8007fb4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8007fb0:	2303      	movs	r3, #3
 8007fb2:	e129      	b.n	8008208 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007fb4:	4b3a      	ldr	r3, [pc, #232]	; (80080a0 <HAL_RCC_OscConfig+0x4b8>)
 8007fb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007fba:	f003 0302 	and.w	r3, r3, #2
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d1ed      	bne.n	8007f9e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007fc2:	7ffb      	ldrb	r3, [r7, #31]
 8007fc4:	2b01      	cmp	r3, #1
 8007fc6:	d105      	bne.n	8007fd4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007fc8:	4b35      	ldr	r3, [pc, #212]	; (80080a0 <HAL_RCC_OscConfig+0x4b8>)
 8007fca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007fcc:	4a34      	ldr	r2, [pc, #208]	; (80080a0 <HAL_RCC_OscConfig+0x4b8>)
 8007fce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007fd2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	f003 0320 	and.w	r3, r3, #32
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d03c      	beq.n	800805a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	699b      	ldr	r3, [r3, #24]
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d01c      	beq.n	8008022 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007fe8:	4b2d      	ldr	r3, [pc, #180]	; (80080a0 <HAL_RCC_OscConfig+0x4b8>)
 8007fea:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007fee:	4a2c      	ldr	r2, [pc, #176]	; (80080a0 <HAL_RCC_OscConfig+0x4b8>)
 8007ff0:	f043 0301 	orr.w	r3, r3, #1
 8007ff4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007ff8:	f7fb fcce 	bl	8003998 <HAL_GetTick>
 8007ffc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8007ffe:	e008      	b.n	8008012 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008000:	f7fb fcca 	bl	8003998 <HAL_GetTick>
 8008004:	4602      	mov	r2, r0
 8008006:	693b      	ldr	r3, [r7, #16]
 8008008:	1ad3      	subs	r3, r2, r3
 800800a:	2b02      	cmp	r3, #2
 800800c:	d901      	bls.n	8008012 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800800e:	2303      	movs	r3, #3
 8008010:	e0fa      	b.n	8008208 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8008012:	4b23      	ldr	r3, [pc, #140]	; (80080a0 <HAL_RCC_OscConfig+0x4b8>)
 8008014:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008018:	f003 0302 	and.w	r3, r3, #2
 800801c:	2b00      	cmp	r3, #0
 800801e:	d0ef      	beq.n	8008000 <HAL_RCC_OscConfig+0x418>
 8008020:	e01b      	b.n	800805a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8008022:	4b1f      	ldr	r3, [pc, #124]	; (80080a0 <HAL_RCC_OscConfig+0x4b8>)
 8008024:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008028:	4a1d      	ldr	r2, [pc, #116]	; (80080a0 <HAL_RCC_OscConfig+0x4b8>)
 800802a:	f023 0301 	bic.w	r3, r3, #1
 800802e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008032:	f7fb fcb1 	bl	8003998 <HAL_GetTick>
 8008036:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8008038:	e008      	b.n	800804c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800803a:	f7fb fcad 	bl	8003998 <HAL_GetTick>
 800803e:	4602      	mov	r2, r0
 8008040:	693b      	ldr	r3, [r7, #16]
 8008042:	1ad3      	subs	r3, r2, r3
 8008044:	2b02      	cmp	r3, #2
 8008046:	d901      	bls.n	800804c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8008048:	2303      	movs	r3, #3
 800804a:	e0dd      	b.n	8008208 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800804c:	4b14      	ldr	r3, [pc, #80]	; (80080a0 <HAL_RCC_OscConfig+0x4b8>)
 800804e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008052:	f003 0302 	and.w	r3, r3, #2
 8008056:	2b00      	cmp	r3, #0
 8008058:	d1ef      	bne.n	800803a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	69db      	ldr	r3, [r3, #28]
 800805e:	2b00      	cmp	r3, #0
 8008060:	f000 80d1 	beq.w	8008206 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008064:	4b0e      	ldr	r3, [pc, #56]	; (80080a0 <HAL_RCC_OscConfig+0x4b8>)
 8008066:	689b      	ldr	r3, [r3, #8]
 8008068:	f003 030c 	and.w	r3, r3, #12
 800806c:	2b0c      	cmp	r3, #12
 800806e:	f000 808b 	beq.w	8008188 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	69db      	ldr	r3, [r3, #28]
 8008076:	2b02      	cmp	r3, #2
 8008078:	d15e      	bne.n	8008138 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800807a:	4b09      	ldr	r3, [pc, #36]	; (80080a0 <HAL_RCC_OscConfig+0x4b8>)
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	4a08      	ldr	r2, [pc, #32]	; (80080a0 <HAL_RCC_OscConfig+0x4b8>)
 8008080:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008084:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008086:	f7fb fc87 	bl	8003998 <HAL_GetTick>
 800808a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800808c:	e00c      	b.n	80080a8 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800808e:	f7fb fc83 	bl	8003998 <HAL_GetTick>
 8008092:	4602      	mov	r2, r0
 8008094:	693b      	ldr	r3, [r7, #16]
 8008096:	1ad3      	subs	r3, r2, r3
 8008098:	2b02      	cmp	r3, #2
 800809a:	d905      	bls.n	80080a8 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800809c:	2303      	movs	r3, #3
 800809e:	e0b3      	b.n	8008208 <HAL_RCC_OscConfig+0x620>
 80080a0:	40021000 	.word	0x40021000
 80080a4:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80080a8:	4b59      	ldr	r3, [pc, #356]	; (8008210 <HAL_RCC_OscConfig+0x628>)
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d1ec      	bne.n	800808e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80080b4:	4b56      	ldr	r3, [pc, #344]	; (8008210 <HAL_RCC_OscConfig+0x628>)
 80080b6:	68da      	ldr	r2, [r3, #12]
 80080b8:	4b56      	ldr	r3, [pc, #344]	; (8008214 <HAL_RCC_OscConfig+0x62c>)
 80080ba:	4013      	ands	r3, r2
 80080bc:	687a      	ldr	r2, [r7, #4]
 80080be:	6a11      	ldr	r1, [r2, #32]
 80080c0:	687a      	ldr	r2, [r7, #4]
 80080c2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80080c4:	3a01      	subs	r2, #1
 80080c6:	0112      	lsls	r2, r2, #4
 80080c8:	4311      	orrs	r1, r2
 80080ca:	687a      	ldr	r2, [r7, #4]
 80080cc:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80080ce:	0212      	lsls	r2, r2, #8
 80080d0:	4311      	orrs	r1, r2
 80080d2:	687a      	ldr	r2, [r7, #4]
 80080d4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80080d6:	0852      	lsrs	r2, r2, #1
 80080d8:	3a01      	subs	r2, #1
 80080da:	0552      	lsls	r2, r2, #21
 80080dc:	4311      	orrs	r1, r2
 80080de:	687a      	ldr	r2, [r7, #4]
 80080e0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80080e2:	0852      	lsrs	r2, r2, #1
 80080e4:	3a01      	subs	r2, #1
 80080e6:	0652      	lsls	r2, r2, #25
 80080e8:	4311      	orrs	r1, r2
 80080ea:	687a      	ldr	r2, [r7, #4]
 80080ec:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80080ee:	06d2      	lsls	r2, r2, #27
 80080f0:	430a      	orrs	r2, r1
 80080f2:	4947      	ldr	r1, [pc, #284]	; (8008210 <HAL_RCC_OscConfig+0x628>)
 80080f4:	4313      	orrs	r3, r2
 80080f6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80080f8:	4b45      	ldr	r3, [pc, #276]	; (8008210 <HAL_RCC_OscConfig+0x628>)
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	4a44      	ldr	r2, [pc, #272]	; (8008210 <HAL_RCC_OscConfig+0x628>)
 80080fe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008102:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8008104:	4b42      	ldr	r3, [pc, #264]	; (8008210 <HAL_RCC_OscConfig+0x628>)
 8008106:	68db      	ldr	r3, [r3, #12]
 8008108:	4a41      	ldr	r2, [pc, #260]	; (8008210 <HAL_RCC_OscConfig+0x628>)
 800810a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800810e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008110:	f7fb fc42 	bl	8003998 <HAL_GetTick>
 8008114:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008116:	e008      	b.n	800812a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008118:	f7fb fc3e 	bl	8003998 <HAL_GetTick>
 800811c:	4602      	mov	r2, r0
 800811e:	693b      	ldr	r3, [r7, #16]
 8008120:	1ad3      	subs	r3, r2, r3
 8008122:	2b02      	cmp	r3, #2
 8008124:	d901      	bls.n	800812a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8008126:	2303      	movs	r3, #3
 8008128:	e06e      	b.n	8008208 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800812a:	4b39      	ldr	r3, [pc, #228]	; (8008210 <HAL_RCC_OscConfig+0x628>)
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008132:	2b00      	cmp	r3, #0
 8008134:	d0f0      	beq.n	8008118 <HAL_RCC_OscConfig+0x530>
 8008136:	e066      	b.n	8008206 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008138:	4b35      	ldr	r3, [pc, #212]	; (8008210 <HAL_RCC_OscConfig+0x628>)
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	4a34      	ldr	r2, [pc, #208]	; (8008210 <HAL_RCC_OscConfig+0x628>)
 800813e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008142:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8008144:	4b32      	ldr	r3, [pc, #200]	; (8008210 <HAL_RCC_OscConfig+0x628>)
 8008146:	68db      	ldr	r3, [r3, #12]
 8008148:	4a31      	ldr	r2, [pc, #196]	; (8008210 <HAL_RCC_OscConfig+0x628>)
 800814a:	f023 0303 	bic.w	r3, r3, #3
 800814e:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8008150:	4b2f      	ldr	r3, [pc, #188]	; (8008210 <HAL_RCC_OscConfig+0x628>)
 8008152:	68db      	ldr	r3, [r3, #12]
 8008154:	4a2e      	ldr	r2, [pc, #184]	; (8008210 <HAL_RCC_OscConfig+0x628>)
 8008156:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800815a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800815e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008160:	f7fb fc1a 	bl	8003998 <HAL_GetTick>
 8008164:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008166:	e008      	b.n	800817a <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008168:	f7fb fc16 	bl	8003998 <HAL_GetTick>
 800816c:	4602      	mov	r2, r0
 800816e:	693b      	ldr	r3, [r7, #16]
 8008170:	1ad3      	subs	r3, r2, r3
 8008172:	2b02      	cmp	r3, #2
 8008174:	d901      	bls.n	800817a <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8008176:	2303      	movs	r3, #3
 8008178:	e046      	b.n	8008208 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800817a:	4b25      	ldr	r3, [pc, #148]	; (8008210 <HAL_RCC_OscConfig+0x628>)
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008182:	2b00      	cmp	r3, #0
 8008184:	d1f0      	bne.n	8008168 <HAL_RCC_OscConfig+0x580>
 8008186:	e03e      	b.n	8008206 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	69db      	ldr	r3, [r3, #28]
 800818c:	2b01      	cmp	r3, #1
 800818e:	d101      	bne.n	8008194 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8008190:	2301      	movs	r3, #1
 8008192:	e039      	b.n	8008208 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8008194:	4b1e      	ldr	r3, [pc, #120]	; (8008210 <HAL_RCC_OscConfig+0x628>)
 8008196:	68db      	ldr	r3, [r3, #12]
 8008198:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800819a:	697b      	ldr	r3, [r7, #20]
 800819c:	f003 0203 	and.w	r2, r3, #3
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	6a1b      	ldr	r3, [r3, #32]
 80081a4:	429a      	cmp	r2, r3
 80081a6:	d12c      	bne.n	8008202 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80081a8:	697b      	ldr	r3, [r7, #20]
 80081aa:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081b2:	3b01      	subs	r3, #1
 80081b4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80081b6:	429a      	cmp	r2, r3
 80081b8:	d123      	bne.n	8008202 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80081ba:	697b      	ldr	r3, [r7, #20]
 80081bc:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081c4:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80081c6:	429a      	cmp	r2, r3
 80081c8:	d11b      	bne.n	8008202 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80081ca:	697b      	ldr	r3, [r7, #20]
 80081cc:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081d4:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80081d6:	429a      	cmp	r2, r3
 80081d8:	d113      	bne.n	8008202 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80081da:	697b      	ldr	r3, [r7, #20]
 80081dc:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081e4:	085b      	lsrs	r3, r3, #1
 80081e6:	3b01      	subs	r3, #1
 80081e8:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80081ea:	429a      	cmp	r2, r3
 80081ec:	d109      	bne.n	8008202 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80081ee:	697b      	ldr	r3, [r7, #20]
 80081f0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80081f8:	085b      	lsrs	r3, r3, #1
 80081fa:	3b01      	subs	r3, #1
 80081fc:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80081fe:	429a      	cmp	r2, r3
 8008200:	d001      	beq.n	8008206 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8008202:	2301      	movs	r3, #1
 8008204:	e000      	b.n	8008208 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8008206:	2300      	movs	r3, #0
}
 8008208:	4618      	mov	r0, r3
 800820a:	3720      	adds	r7, #32
 800820c:	46bd      	mov	sp, r7
 800820e:	bd80      	pop	{r7, pc}
 8008210:	40021000 	.word	0x40021000
 8008214:	019f800c 	.word	0x019f800c

08008218 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008218:	b580      	push	{r7, lr}
 800821a:	b086      	sub	sp, #24
 800821c:	af00      	add	r7, sp, #0
 800821e:	6078      	str	r0, [r7, #4]
 8008220:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8008222:	2300      	movs	r3, #0
 8008224:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	2b00      	cmp	r3, #0
 800822a:	d101      	bne.n	8008230 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800822c:	2301      	movs	r3, #1
 800822e:	e11e      	b.n	800846e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008230:	4b91      	ldr	r3, [pc, #580]	; (8008478 <HAL_RCC_ClockConfig+0x260>)
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	f003 030f 	and.w	r3, r3, #15
 8008238:	683a      	ldr	r2, [r7, #0]
 800823a:	429a      	cmp	r2, r3
 800823c:	d910      	bls.n	8008260 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800823e:	4b8e      	ldr	r3, [pc, #568]	; (8008478 <HAL_RCC_ClockConfig+0x260>)
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	f023 020f 	bic.w	r2, r3, #15
 8008246:	498c      	ldr	r1, [pc, #560]	; (8008478 <HAL_RCC_ClockConfig+0x260>)
 8008248:	683b      	ldr	r3, [r7, #0]
 800824a:	4313      	orrs	r3, r2
 800824c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800824e:	4b8a      	ldr	r3, [pc, #552]	; (8008478 <HAL_RCC_ClockConfig+0x260>)
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	f003 030f 	and.w	r3, r3, #15
 8008256:	683a      	ldr	r2, [r7, #0]
 8008258:	429a      	cmp	r2, r3
 800825a:	d001      	beq.n	8008260 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800825c:	2301      	movs	r3, #1
 800825e:	e106      	b.n	800846e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	f003 0301 	and.w	r3, r3, #1
 8008268:	2b00      	cmp	r3, #0
 800826a:	d073      	beq.n	8008354 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	685b      	ldr	r3, [r3, #4]
 8008270:	2b03      	cmp	r3, #3
 8008272:	d129      	bne.n	80082c8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008274:	4b81      	ldr	r3, [pc, #516]	; (800847c <HAL_RCC_ClockConfig+0x264>)
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800827c:	2b00      	cmp	r3, #0
 800827e:	d101      	bne.n	8008284 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8008280:	2301      	movs	r3, #1
 8008282:	e0f4      	b.n	800846e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8008284:	f000 f9ce 	bl	8008624 <RCC_GetSysClockFreqFromPLLSource>
 8008288:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800828a:	693b      	ldr	r3, [r7, #16]
 800828c:	4a7c      	ldr	r2, [pc, #496]	; (8008480 <HAL_RCC_ClockConfig+0x268>)
 800828e:	4293      	cmp	r3, r2
 8008290:	d93f      	bls.n	8008312 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8008292:	4b7a      	ldr	r3, [pc, #488]	; (800847c <HAL_RCC_ClockConfig+0x264>)
 8008294:	689b      	ldr	r3, [r3, #8]
 8008296:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800829a:	2b00      	cmp	r3, #0
 800829c:	d009      	beq.n	80082b2 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d033      	beq.n	8008312 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d12f      	bne.n	8008312 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80082b2:	4b72      	ldr	r3, [pc, #456]	; (800847c <HAL_RCC_ClockConfig+0x264>)
 80082b4:	689b      	ldr	r3, [r3, #8]
 80082b6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80082ba:	4a70      	ldr	r2, [pc, #448]	; (800847c <HAL_RCC_ClockConfig+0x264>)
 80082bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80082c0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80082c2:	2380      	movs	r3, #128	; 0x80
 80082c4:	617b      	str	r3, [r7, #20]
 80082c6:	e024      	b.n	8008312 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	685b      	ldr	r3, [r3, #4]
 80082cc:	2b02      	cmp	r3, #2
 80082ce:	d107      	bne.n	80082e0 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80082d0:	4b6a      	ldr	r3, [pc, #424]	; (800847c <HAL_RCC_ClockConfig+0x264>)
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d109      	bne.n	80082f0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80082dc:	2301      	movs	r3, #1
 80082de:	e0c6      	b.n	800846e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80082e0:	4b66      	ldr	r3, [pc, #408]	; (800847c <HAL_RCC_ClockConfig+0x264>)
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d101      	bne.n	80082f0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80082ec:	2301      	movs	r3, #1
 80082ee:	e0be      	b.n	800846e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80082f0:	f000 f8ce 	bl	8008490 <HAL_RCC_GetSysClockFreq>
 80082f4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80082f6:	693b      	ldr	r3, [r7, #16]
 80082f8:	4a61      	ldr	r2, [pc, #388]	; (8008480 <HAL_RCC_ClockConfig+0x268>)
 80082fa:	4293      	cmp	r3, r2
 80082fc:	d909      	bls.n	8008312 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80082fe:	4b5f      	ldr	r3, [pc, #380]	; (800847c <HAL_RCC_ClockConfig+0x264>)
 8008300:	689b      	ldr	r3, [r3, #8]
 8008302:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008306:	4a5d      	ldr	r2, [pc, #372]	; (800847c <HAL_RCC_ClockConfig+0x264>)
 8008308:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800830c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800830e:	2380      	movs	r3, #128	; 0x80
 8008310:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008312:	4b5a      	ldr	r3, [pc, #360]	; (800847c <HAL_RCC_ClockConfig+0x264>)
 8008314:	689b      	ldr	r3, [r3, #8]
 8008316:	f023 0203 	bic.w	r2, r3, #3
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	685b      	ldr	r3, [r3, #4]
 800831e:	4957      	ldr	r1, [pc, #348]	; (800847c <HAL_RCC_ClockConfig+0x264>)
 8008320:	4313      	orrs	r3, r2
 8008322:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008324:	f7fb fb38 	bl	8003998 <HAL_GetTick>
 8008328:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800832a:	e00a      	b.n	8008342 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800832c:	f7fb fb34 	bl	8003998 <HAL_GetTick>
 8008330:	4602      	mov	r2, r0
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	1ad3      	subs	r3, r2, r3
 8008336:	f241 3288 	movw	r2, #5000	; 0x1388
 800833a:	4293      	cmp	r3, r2
 800833c:	d901      	bls.n	8008342 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800833e:	2303      	movs	r3, #3
 8008340:	e095      	b.n	800846e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008342:	4b4e      	ldr	r3, [pc, #312]	; (800847c <HAL_RCC_ClockConfig+0x264>)
 8008344:	689b      	ldr	r3, [r3, #8]
 8008346:	f003 020c 	and.w	r2, r3, #12
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	685b      	ldr	r3, [r3, #4]
 800834e:	009b      	lsls	r3, r3, #2
 8008350:	429a      	cmp	r2, r3
 8008352:	d1eb      	bne.n	800832c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	f003 0302 	and.w	r3, r3, #2
 800835c:	2b00      	cmp	r3, #0
 800835e:	d023      	beq.n	80083a8 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	f003 0304 	and.w	r3, r3, #4
 8008368:	2b00      	cmp	r3, #0
 800836a:	d005      	beq.n	8008378 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800836c:	4b43      	ldr	r3, [pc, #268]	; (800847c <HAL_RCC_ClockConfig+0x264>)
 800836e:	689b      	ldr	r3, [r3, #8]
 8008370:	4a42      	ldr	r2, [pc, #264]	; (800847c <HAL_RCC_ClockConfig+0x264>)
 8008372:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8008376:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	f003 0308 	and.w	r3, r3, #8
 8008380:	2b00      	cmp	r3, #0
 8008382:	d007      	beq.n	8008394 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8008384:	4b3d      	ldr	r3, [pc, #244]	; (800847c <HAL_RCC_ClockConfig+0x264>)
 8008386:	689b      	ldr	r3, [r3, #8]
 8008388:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800838c:	4a3b      	ldr	r2, [pc, #236]	; (800847c <HAL_RCC_ClockConfig+0x264>)
 800838e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8008392:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008394:	4b39      	ldr	r3, [pc, #228]	; (800847c <HAL_RCC_ClockConfig+0x264>)
 8008396:	689b      	ldr	r3, [r3, #8]
 8008398:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	689b      	ldr	r3, [r3, #8]
 80083a0:	4936      	ldr	r1, [pc, #216]	; (800847c <HAL_RCC_ClockConfig+0x264>)
 80083a2:	4313      	orrs	r3, r2
 80083a4:	608b      	str	r3, [r1, #8]
 80083a6:	e008      	b.n	80083ba <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80083a8:	697b      	ldr	r3, [r7, #20]
 80083aa:	2b80      	cmp	r3, #128	; 0x80
 80083ac:	d105      	bne.n	80083ba <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80083ae:	4b33      	ldr	r3, [pc, #204]	; (800847c <HAL_RCC_ClockConfig+0x264>)
 80083b0:	689b      	ldr	r3, [r3, #8]
 80083b2:	4a32      	ldr	r2, [pc, #200]	; (800847c <HAL_RCC_ClockConfig+0x264>)
 80083b4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80083b8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80083ba:	4b2f      	ldr	r3, [pc, #188]	; (8008478 <HAL_RCC_ClockConfig+0x260>)
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	f003 030f 	and.w	r3, r3, #15
 80083c2:	683a      	ldr	r2, [r7, #0]
 80083c4:	429a      	cmp	r2, r3
 80083c6:	d21d      	bcs.n	8008404 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80083c8:	4b2b      	ldr	r3, [pc, #172]	; (8008478 <HAL_RCC_ClockConfig+0x260>)
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	f023 020f 	bic.w	r2, r3, #15
 80083d0:	4929      	ldr	r1, [pc, #164]	; (8008478 <HAL_RCC_ClockConfig+0x260>)
 80083d2:	683b      	ldr	r3, [r7, #0]
 80083d4:	4313      	orrs	r3, r2
 80083d6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80083d8:	f7fb fade 	bl	8003998 <HAL_GetTick>
 80083dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80083de:	e00a      	b.n	80083f6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80083e0:	f7fb fada 	bl	8003998 <HAL_GetTick>
 80083e4:	4602      	mov	r2, r0
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	1ad3      	subs	r3, r2, r3
 80083ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80083ee:	4293      	cmp	r3, r2
 80083f0:	d901      	bls.n	80083f6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80083f2:	2303      	movs	r3, #3
 80083f4:	e03b      	b.n	800846e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80083f6:	4b20      	ldr	r3, [pc, #128]	; (8008478 <HAL_RCC_ClockConfig+0x260>)
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	f003 030f 	and.w	r3, r3, #15
 80083fe:	683a      	ldr	r2, [r7, #0]
 8008400:	429a      	cmp	r2, r3
 8008402:	d1ed      	bne.n	80083e0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	f003 0304 	and.w	r3, r3, #4
 800840c:	2b00      	cmp	r3, #0
 800840e:	d008      	beq.n	8008422 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008410:	4b1a      	ldr	r3, [pc, #104]	; (800847c <HAL_RCC_ClockConfig+0x264>)
 8008412:	689b      	ldr	r3, [r3, #8]
 8008414:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	68db      	ldr	r3, [r3, #12]
 800841c:	4917      	ldr	r1, [pc, #92]	; (800847c <HAL_RCC_ClockConfig+0x264>)
 800841e:	4313      	orrs	r3, r2
 8008420:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	f003 0308 	and.w	r3, r3, #8
 800842a:	2b00      	cmp	r3, #0
 800842c:	d009      	beq.n	8008442 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800842e:	4b13      	ldr	r3, [pc, #76]	; (800847c <HAL_RCC_ClockConfig+0x264>)
 8008430:	689b      	ldr	r3, [r3, #8]
 8008432:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	691b      	ldr	r3, [r3, #16]
 800843a:	00db      	lsls	r3, r3, #3
 800843c:	490f      	ldr	r1, [pc, #60]	; (800847c <HAL_RCC_ClockConfig+0x264>)
 800843e:	4313      	orrs	r3, r2
 8008440:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8008442:	f000 f825 	bl	8008490 <HAL_RCC_GetSysClockFreq>
 8008446:	4602      	mov	r2, r0
 8008448:	4b0c      	ldr	r3, [pc, #48]	; (800847c <HAL_RCC_ClockConfig+0x264>)
 800844a:	689b      	ldr	r3, [r3, #8]
 800844c:	091b      	lsrs	r3, r3, #4
 800844e:	f003 030f 	and.w	r3, r3, #15
 8008452:	490c      	ldr	r1, [pc, #48]	; (8008484 <HAL_RCC_ClockConfig+0x26c>)
 8008454:	5ccb      	ldrb	r3, [r1, r3]
 8008456:	f003 031f 	and.w	r3, r3, #31
 800845a:	fa22 f303 	lsr.w	r3, r2, r3
 800845e:	4a0a      	ldr	r2, [pc, #40]	; (8008488 <HAL_RCC_ClockConfig+0x270>)
 8008460:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8008462:	4b0a      	ldr	r3, [pc, #40]	; (800848c <HAL_RCC_ClockConfig+0x274>)
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	4618      	mov	r0, r3
 8008468:	f7f9 fd0c 	bl	8001e84 <HAL_InitTick>
 800846c:	4603      	mov	r3, r0
}
 800846e:	4618      	mov	r0, r3
 8008470:	3718      	adds	r7, #24
 8008472:	46bd      	mov	sp, r7
 8008474:	bd80      	pop	{r7, pc}
 8008476:	bf00      	nop
 8008478:	40022000 	.word	0x40022000
 800847c:	40021000 	.word	0x40021000
 8008480:	04c4b400 	.word	0x04c4b400
 8008484:	08015958 	.word	0x08015958
 8008488:	20000000 	.word	0x20000000
 800848c:	20000004 	.word	0x20000004

08008490 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008490:	b480      	push	{r7}
 8008492:	b087      	sub	sp, #28
 8008494:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8008496:	4b2c      	ldr	r3, [pc, #176]	; (8008548 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008498:	689b      	ldr	r3, [r3, #8]
 800849a:	f003 030c 	and.w	r3, r3, #12
 800849e:	2b04      	cmp	r3, #4
 80084a0:	d102      	bne.n	80084a8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80084a2:	4b2a      	ldr	r3, [pc, #168]	; (800854c <HAL_RCC_GetSysClockFreq+0xbc>)
 80084a4:	613b      	str	r3, [r7, #16]
 80084a6:	e047      	b.n	8008538 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80084a8:	4b27      	ldr	r3, [pc, #156]	; (8008548 <HAL_RCC_GetSysClockFreq+0xb8>)
 80084aa:	689b      	ldr	r3, [r3, #8]
 80084ac:	f003 030c 	and.w	r3, r3, #12
 80084b0:	2b08      	cmp	r3, #8
 80084b2:	d102      	bne.n	80084ba <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80084b4:	4b25      	ldr	r3, [pc, #148]	; (800854c <HAL_RCC_GetSysClockFreq+0xbc>)
 80084b6:	613b      	str	r3, [r7, #16]
 80084b8:	e03e      	b.n	8008538 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80084ba:	4b23      	ldr	r3, [pc, #140]	; (8008548 <HAL_RCC_GetSysClockFreq+0xb8>)
 80084bc:	689b      	ldr	r3, [r3, #8]
 80084be:	f003 030c 	and.w	r3, r3, #12
 80084c2:	2b0c      	cmp	r3, #12
 80084c4:	d136      	bne.n	8008534 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80084c6:	4b20      	ldr	r3, [pc, #128]	; (8008548 <HAL_RCC_GetSysClockFreq+0xb8>)
 80084c8:	68db      	ldr	r3, [r3, #12]
 80084ca:	f003 0303 	and.w	r3, r3, #3
 80084ce:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80084d0:	4b1d      	ldr	r3, [pc, #116]	; (8008548 <HAL_RCC_GetSysClockFreq+0xb8>)
 80084d2:	68db      	ldr	r3, [r3, #12]
 80084d4:	091b      	lsrs	r3, r3, #4
 80084d6:	f003 030f 	and.w	r3, r3, #15
 80084da:	3301      	adds	r3, #1
 80084dc:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	2b03      	cmp	r3, #3
 80084e2:	d10c      	bne.n	80084fe <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80084e4:	4a19      	ldr	r2, [pc, #100]	; (800854c <HAL_RCC_GetSysClockFreq+0xbc>)
 80084e6:	68bb      	ldr	r3, [r7, #8]
 80084e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80084ec:	4a16      	ldr	r2, [pc, #88]	; (8008548 <HAL_RCC_GetSysClockFreq+0xb8>)
 80084ee:	68d2      	ldr	r2, [r2, #12]
 80084f0:	0a12      	lsrs	r2, r2, #8
 80084f2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80084f6:	fb02 f303 	mul.w	r3, r2, r3
 80084fa:	617b      	str	r3, [r7, #20]
      break;
 80084fc:	e00c      	b.n	8008518 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80084fe:	4a13      	ldr	r2, [pc, #76]	; (800854c <HAL_RCC_GetSysClockFreq+0xbc>)
 8008500:	68bb      	ldr	r3, [r7, #8]
 8008502:	fbb2 f3f3 	udiv	r3, r2, r3
 8008506:	4a10      	ldr	r2, [pc, #64]	; (8008548 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008508:	68d2      	ldr	r2, [r2, #12]
 800850a:	0a12      	lsrs	r2, r2, #8
 800850c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8008510:	fb02 f303 	mul.w	r3, r2, r3
 8008514:	617b      	str	r3, [r7, #20]
      break;
 8008516:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8008518:	4b0b      	ldr	r3, [pc, #44]	; (8008548 <HAL_RCC_GetSysClockFreq+0xb8>)
 800851a:	68db      	ldr	r3, [r3, #12]
 800851c:	0e5b      	lsrs	r3, r3, #25
 800851e:	f003 0303 	and.w	r3, r3, #3
 8008522:	3301      	adds	r3, #1
 8008524:	005b      	lsls	r3, r3, #1
 8008526:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8008528:	697a      	ldr	r2, [r7, #20]
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008530:	613b      	str	r3, [r7, #16]
 8008532:	e001      	b.n	8008538 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8008534:	2300      	movs	r3, #0
 8008536:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8008538:	693b      	ldr	r3, [r7, #16]
}
 800853a:	4618      	mov	r0, r3
 800853c:	371c      	adds	r7, #28
 800853e:	46bd      	mov	sp, r7
 8008540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008544:	4770      	bx	lr
 8008546:	bf00      	nop
 8008548:	40021000 	.word	0x40021000
 800854c:	00f42400 	.word	0x00f42400

08008550 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008550:	b480      	push	{r7}
 8008552:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008554:	4b03      	ldr	r3, [pc, #12]	; (8008564 <HAL_RCC_GetHCLKFreq+0x14>)
 8008556:	681b      	ldr	r3, [r3, #0]
}
 8008558:	4618      	mov	r0, r3
 800855a:	46bd      	mov	sp, r7
 800855c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008560:	4770      	bx	lr
 8008562:	bf00      	nop
 8008564:	20000000 	.word	0x20000000

08008568 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008568:	b580      	push	{r7, lr}
 800856a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800856c:	f7ff fff0 	bl	8008550 <HAL_RCC_GetHCLKFreq>
 8008570:	4602      	mov	r2, r0
 8008572:	4b06      	ldr	r3, [pc, #24]	; (800858c <HAL_RCC_GetPCLK1Freq+0x24>)
 8008574:	689b      	ldr	r3, [r3, #8]
 8008576:	0a1b      	lsrs	r3, r3, #8
 8008578:	f003 0307 	and.w	r3, r3, #7
 800857c:	4904      	ldr	r1, [pc, #16]	; (8008590 <HAL_RCC_GetPCLK1Freq+0x28>)
 800857e:	5ccb      	ldrb	r3, [r1, r3]
 8008580:	f003 031f 	and.w	r3, r3, #31
 8008584:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008588:	4618      	mov	r0, r3
 800858a:	bd80      	pop	{r7, pc}
 800858c:	40021000 	.word	0x40021000
 8008590:	08015968 	.word	0x08015968

08008594 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008594:	b580      	push	{r7, lr}
 8008596:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8008598:	f7ff ffda 	bl	8008550 <HAL_RCC_GetHCLKFreq>
 800859c:	4602      	mov	r2, r0
 800859e:	4b06      	ldr	r3, [pc, #24]	; (80085b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80085a0:	689b      	ldr	r3, [r3, #8]
 80085a2:	0adb      	lsrs	r3, r3, #11
 80085a4:	f003 0307 	and.w	r3, r3, #7
 80085a8:	4904      	ldr	r1, [pc, #16]	; (80085bc <HAL_RCC_GetPCLK2Freq+0x28>)
 80085aa:	5ccb      	ldrb	r3, [r1, r3]
 80085ac:	f003 031f 	and.w	r3, r3, #31
 80085b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80085b4:	4618      	mov	r0, r3
 80085b6:	bd80      	pop	{r7, pc}
 80085b8:	40021000 	.word	0x40021000
 80085bc:	08015968 	.word	0x08015968

080085c0 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80085c0:	b480      	push	{r7}
 80085c2:	b083      	sub	sp, #12
 80085c4:	af00      	add	r7, sp, #0
 80085c6:	6078      	str	r0, [r7, #4]
 80085c8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	220f      	movs	r2, #15
 80085ce:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80085d0:	4b12      	ldr	r3, [pc, #72]	; (800861c <HAL_RCC_GetClockConfig+0x5c>)
 80085d2:	689b      	ldr	r3, [r3, #8]
 80085d4:	f003 0203 	and.w	r2, r3, #3
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80085dc:	4b0f      	ldr	r3, [pc, #60]	; (800861c <HAL_RCC_GetClockConfig+0x5c>)
 80085de:	689b      	ldr	r3, [r3, #8]
 80085e0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80085e8:	4b0c      	ldr	r3, [pc, #48]	; (800861c <HAL_RCC_GetClockConfig+0x5c>)
 80085ea:	689b      	ldr	r3, [r3, #8]
 80085ec:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80085f4:	4b09      	ldr	r3, [pc, #36]	; (800861c <HAL_RCC_GetClockConfig+0x5c>)
 80085f6:	689b      	ldr	r3, [r3, #8]
 80085f8:	08db      	lsrs	r3, r3, #3
 80085fa:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8008602:	4b07      	ldr	r3, [pc, #28]	; (8008620 <HAL_RCC_GetClockConfig+0x60>)
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	f003 020f 	and.w	r2, r3, #15
 800860a:	683b      	ldr	r3, [r7, #0]
 800860c:	601a      	str	r2, [r3, #0]
}
 800860e:	bf00      	nop
 8008610:	370c      	adds	r7, #12
 8008612:	46bd      	mov	sp, r7
 8008614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008618:	4770      	bx	lr
 800861a:	bf00      	nop
 800861c:	40021000 	.word	0x40021000
 8008620:	40022000 	.word	0x40022000

08008624 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8008624:	b480      	push	{r7}
 8008626:	b087      	sub	sp, #28
 8008628:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800862a:	4b1e      	ldr	r3, [pc, #120]	; (80086a4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800862c:	68db      	ldr	r3, [r3, #12]
 800862e:	f003 0303 	and.w	r3, r3, #3
 8008632:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8008634:	4b1b      	ldr	r3, [pc, #108]	; (80086a4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008636:	68db      	ldr	r3, [r3, #12]
 8008638:	091b      	lsrs	r3, r3, #4
 800863a:	f003 030f 	and.w	r3, r3, #15
 800863e:	3301      	adds	r3, #1
 8008640:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8008642:	693b      	ldr	r3, [r7, #16]
 8008644:	2b03      	cmp	r3, #3
 8008646:	d10c      	bne.n	8008662 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008648:	4a17      	ldr	r2, [pc, #92]	; (80086a8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008650:	4a14      	ldr	r2, [pc, #80]	; (80086a4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008652:	68d2      	ldr	r2, [r2, #12]
 8008654:	0a12      	lsrs	r2, r2, #8
 8008656:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800865a:	fb02 f303 	mul.w	r3, r2, r3
 800865e:	617b      	str	r3, [r7, #20]
    break;
 8008660:	e00c      	b.n	800867c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008662:	4a11      	ldr	r2, [pc, #68]	; (80086a8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	fbb2 f3f3 	udiv	r3, r2, r3
 800866a:	4a0e      	ldr	r2, [pc, #56]	; (80086a4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800866c:	68d2      	ldr	r2, [r2, #12]
 800866e:	0a12      	lsrs	r2, r2, #8
 8008670:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8008674:	fb02 f303 	mul.w	r3, r2, r3
 8008678:	617b      	str	r3, [r7, #20]
    break;
 800867a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800867c:	4b09      	ldr	r3, [pc, #36]	; (80086a4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800867e:	68db      	ldr	r3, [r3, #12]
 8008680:	0e5b      	lsrs	r3, r3, #25
 8008682:	f003 0303 	and.w	r3, r3, #3
 8008686:	3301      	adds	r3, #1
 8008688:	005b      	lsls	r3, r3, #1
 800868a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800868c:	697a      	ldr	r2, [r7, #20]
 800868e:	68bb      	ldr	r3, [r7, #8]
 8008690:	fbb2 f3f3 	udiv	r3, r2, r3
 8008694:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8008696:	687b      	ldr	r3, [r7, #4]
}
 8008698:	4618      	mov	r0, r3
 800869a:	371c      	adds	r7, #28
 800869c:	46bd      	mov	sp, r7
 800869e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a2:	4770      	bx	lr
 80086a4:	40021000 	.word	0x40021000
 80086a8:	00f42400 	.word	0x00f42400

080086ac <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80086ac:	b580      	push	{r7, lr}
 80086ae:	b086      	sub	sp, #24
 80086b0:	af00      	add	r7, sp, #0
 80086b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80086b4:	2300      	movs	r3, #0
 80086b6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80086b8:	2300      	movs	r3, #0
 80086ba:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	f000 8098 	beq.w	80087fa <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80086ca:	2300      	movs	r3, #0
 80086cc:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80086ce:	4b43      	ldr	r3, [pc, #268]	; (80087dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80086d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80086d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d10d      	bne.n	80086f6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80086da:	4b40      	ldr	r3, [pc, #256]	; (80087dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80086dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80086de:	4a3f      	ldr	r2, [pc, #252]	; (80087dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80086e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80086e4:	6593      	str	r3, [r2, #88]	; 0x58
 80086e6:	4b3d      	ldr	r3, [pc, #244]	; (80087dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80086e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80086ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80086ee:	60bb      	str	r3, [r7, #8]
 80086f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80086f2:	2301      	movs	r3, #1
 80086f4:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80086f6:	4b3a      	ldr	r3, [pc, #232]	; (80087e0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	4a39      	ldr	r2, [pc, #228]	; (80087e0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80086fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008700:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008702:	f7fb f949 	bl	8003998 <HAL_GetTick>
 8008706:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008708:	e009      	b.n	800871e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800870a:	f7fb f945 	bl	8003998 <HAL_GetTick>
 800870e:	4602      	mov	r2, r0
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	1ad3      	subs	r3, r2, r3
 8008714:	2b02      	cmp	r3, #2
 8008716:	d902      	bls.n	800871e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8008718:	2303      	movs	r3, #3
 800871a:	74fb      	strb	r3, [r7, #19]
        break;
 800871c:	e005      	b.n	800872a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800871e:	4b30      	ldr	r3, [pc, #192]	; (80087e0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008726:	2b00      	cmp	r3, #0
 8008728:	d0ef      	beq.n	800870a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800872a:	7cfb      	ldrb	r3, [r7, #19]
 800872c:	2b00      	cmp	r3, #0
 800872e:	d159      	bne.n	80087e4 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8008730:	4b2a      	ldr	r3, [pc, #168]	; (80087dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008732:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008736:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800873a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800873c:	697b      	ldr	r3, [r7, #20]
 800873e:	2b00      	cmp	r3, #0
 8008740:	d01e      	beq.n	8008780 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008746:	697a      	ldr	r2, [r7, #20]
 8008748:	429a      	cmp	r2, r3
 800874a:	d019      	beq.n	8008780 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800874c:	4b23      	ldr	r3, [pc, #140]	; (80087dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800874e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008752:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008756:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008758:	4b20      	ldr	r3, [pc, #128]	; (80087dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800875a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800875e:	4a1f      	ldr	r2, [pc, #124]	; (80087dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008760:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008764:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008768:	4b1c      	ldr	r3, [pc, #112]	; (80087dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800876a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800876e:	4a1b      	ldr	r2, [pc, #108]	; (80087dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008770:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008774:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8008778:	4a18      	ldr	r2, [pc, #96]	; (80087dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800877a:	697b      	ldr	r3, [r7, #20]
 800877c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8008780:	697b      	ldr	r3, [r7, #20]
 8008782:	f003 0301 	and.w	r3, r3, #1
 8008786:	2b00      	cmp	r3, #0
 8008788:	d016      	beq.n	80087b8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800878a:	f7fb f905 	bl	8003998 <HAL_GetTick>
 800878e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008790:	e00b      	b.n	80087aa <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008792:	f7fb f901 	bl	8003998 <HAL_GetTick>
 8008796:	4602      	mov	r2, r0
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	1ad3      	subs	r3, r2, r3
 800879c:	f241 3288 	movw	r2, #5000	; 0x1388
 80087a0:	4293      	cmp	r3, r2
 80087a2:	d902      	bls.n	80087aa <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80087a4:	2303      	movs	r3, #3
 80087a6:	74fb      	strb	r3, [r7, #19]
            break;
 80087a8:	e006      	b.n	80087b8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80087aa:	4b0c      	ldr	r3, [pc, #48]	; (80087dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80087ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80087b0:	f003 0302 	and.w	r3, r3, #2
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d0ec      	beq.n	8008792 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80087b8:	7cfb      	ldrb	r3, [r7, #19]
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d10b      	bne.n	80087d6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80087be:	4b07      	ldr	r3, [pc, #28]	; (80087dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80087c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80087c4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80087cc:	4903      	ldr	r1, [pc, #12]	; (80087dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80087ce:	4313      	orrs	r3, r2
 80087d0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80087d4:	e008      	b.n	80087e8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80087d6:	7cfb      	ldrb	r3, [r7, #19]
 80087d8:	74bb      	strb	r3, [r7, #18]
 80087da:	e005      	b.n	80087e8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80087dc:	40021000 	.word	0x40021000
 80087e0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80087e4:	7cfb      	ldrb	r3, [r7, #19]
 80087e6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80087e8:	7c7b      	ldrb	r3, [r7, #17]
 80087ea:	2b01      	cmp	r3, #1
 80087ec:	d105      	bne.n	80087fa <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80087ee:	4ba7      	ldr	r3, [pc, #668]	; (8008a8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80087f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80087f2:	4aa6      	ldr	r2, [pc, #664]	; (8008a8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80087f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80087f8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	f003 0301 	and.w	r3, r3, #1
 8008802:	2b00      	cmp	r3, #0
 8008804:	d00a      	beq.n	800881c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008806:	4ba1      	ldr	r3, [pc, #644]	; (8008a8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008808:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800880c:	f023 0203 	bic.w	r2, r3, #3
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	685b      	ldr	r3, [r3, #4]
 8008814:	499d      	ldr	r1, [pc, #628]	; (8008a8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008816:	4313      	orrs	r3, r2
 8008818:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	f003 0302 	and.w	r3, r3, #2
 8008824:	2b00      	cmp	r3, #0
 8008826:	d00a      	beq.n	800883e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8008828:	4b98      	ldr	r3, [pc, #608]	; (8008a8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800882a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800882e:	f023 020c 	bic.w	r2, r3, #12
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	689b      	ldr	r3, [r3, #8]
 8008836:	4995      	ldr	r1, [pc, #596]	; (8008a8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008838:	4313      	orrs	r3, r2
 800883a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	f003 0304 	and.w	r3, r3, #4
 8008846:	2b00      	cmp	r3, #0
 8008848:	d00a      	beq.n	8008860 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800884a:	4b90      	ldr	r3, [pc, #576]	; (8008a8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800884c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008850:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	68db      	ldr	r3, [r3, #12]
 8008858:	498c      	ldr	r1, [pc, #560]	; (8008a8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800885a:	4313      	orrs	r3, r2
 800885c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	f003 0308 	and.w	r3, r3, #8
 8008868:	2b00      	cmp	r3, #0
 800886a:	d00a      	beq.n	8008882 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800886c:	4b87      	ldr	r3, [pc, #540]	; (8008a8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800886e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008872:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	691b      	ldr	r3, [r3, #16]
 800887a:	4984      	ldr	r1, [pc, #528]	; (8008a8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800887c:	4313      	orrs	r3, r2
 800887e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	f003 0310 	and.w	r3, r3, #16
 800888a:	2b00      	cmp	r3, #0
 800888c:	d00a      	beq.n	80088a4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800888e:	4b7f      	ldr	r3, [pc, #508]	; (8008a8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008890:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008894:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	695b      	ldr	r3, [r3, #20]
 800889c:	497b      	ldr	r1, [pc, #492]	; (8008a8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800889e:	4313      	orrs	r3, r2
 80088a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	f003 0320 	and.w	r3, r3, #32
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d00a      	beq.n	80088c6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80088b0:	4b76      	ldr	r3, [pc, #472]	; (8008a8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80088b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80088b6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	699b      	ldr	r3, [r3, #24]
 80088be:	4973      	ldr	r1, [pc, #460]	; (8008a8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80088c0:	4313      	orrs	r3, r2
 80088c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d00a      	beq.n	80088e8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80088d2:	4b6e      	ldr	r3, [pc, #440]	; (8008a8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80088d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80088d8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	69db      	ldr	r3, [r3, #28]
 80088e0:	496a      	ldr	r1, [pc, #424]	; (8008a8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80088e2:	4313      	orrs	r3, r2
 80088e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d00a      	beq.n	800890a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80088f4:	4b65      	ldr	r3, [pc, #404]	; (8008a8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80088f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80088fa:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	6a1b      	ldr	r3, [r3, #32]
 8008902:	4962      	ldr	r1, [pc, #392]	; (8008a8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008904:	4313      	orrs	r3, r2
 8008906:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008912:	2b00      	cmp	r3, #0
 8008914:	d00a      	beq.n	800892c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8008916:	4b5d      	ldr	r3, [pc, #372]	; (8008a8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008918:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800891c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008924:	4959      	ldr	r1, [pc, #356]	; (8008a8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008926:	4313      	orrs	r3, r2
 8008928:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008934:	2b00      	cmp	r3, #0
 8008936:	d00a      	beq.n	800894e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008938:	4b54      	ldr	r3, [pc, #336]	; (8008a8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800893a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800893e:	f023 0203 	bic.w	r2, r3, #3
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008946:	4951      	ldr	r1, [pc, #324]	; (8008a8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008948:	4313      	orrs	r3, r2
 800894a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008956:	2b00      	cmp	r3, #0
 8008958:	d00a      	beq.n	8008970 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800895a:	4b4c      	ldr	r3, [pc, #304]	; (8008a8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800895c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008960:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008968:	4948      	ldr	r1, [pc, #288]	; (8008a8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800896a:	4313      	orrs	r3, r2
 800896c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008978:	2b00      	cmp	r3, #0
 800897a:	d015      	beq.n	80089a8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800897c:	4b43      	ldr	r3, [pc, #268]	; (8008a8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800897e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008982:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800898a:	4940      	ldr	r1, [pc, #256]	; (8008a8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800898c:	4313      	orrs	r3, r2
 800898e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008996:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800899a:	d105      	bne.n	80089a8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800899c:	4b3b      	ldr	r3, [pc, #236]	; (8008a8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800899e:	68db      	ldr	r3, [r3, #12]
 80089a0:	4a3a      	ldr	r2, [pc, #232]	; (8008a8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80089a2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80089a6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d015      	beq.n	80089e0 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80089b4:	4b35      	ldr	r3, [pc, #212]	; (8008a8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80089b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80089ba:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089c2:	4932      	ldr	r1, [pc, #200]	; (8008a8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80089c4:	4313      	orrs	r3, r2
 80089c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089ce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80089d2:	d105      	bne.n	80089e0 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80089d4:	4b2d      	ldr	r3, [pc, #180]	; (8008a8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80089d6:	68db      	ldr	r3, [r3, #12]
 80089d8:	4a2c      	ldr	r2, [pc, #176]	; (8008a8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80089da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80089de:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d015      	beq.n	8008a18 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80089ec:	4b27      	ldr	r3, [pc, #156]	; (8008a8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80089ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80089f2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089fa:	4924      	ldr	r1, [pc, #144]	; (8008a8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80089fc:	4313      	orrs	r3, r2
 80089fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a06:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008a0a:	d105      	bne.n	8008a18 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008a0c:	4b1f      	ldr	r3, [pc, #124]	; (8008a8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008a0e:	68db      	ldr	r3, [r3, #12]
 8008a10:	4a1e      	ldr	r2, [pc, #120]	; (8008a8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008a12:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008a16:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d015      	beq.n	8008a50 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008a24:	4b19      	ldr	r3, [pc, #100]	; (8008a8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008a26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008a2a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a32:	4916      	ldr	r1, [pc, #88]	; (8008a8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008a34:	4313      	orrs	r3, r2
 8008a36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a3e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008a42:	d105      	bne.n	8008a50 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008a44:	4b11      	ldr	r3, [pc, #68]	; (8008a8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008a46:	68db      	ldr	r3, [r3, #12]
 8008a48:	4a10      	ldr	r2, [pc, #64]	; (8008a8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008a4a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008a4e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d019      	beq.n	8008a90 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008a5c:	4b0b      	ldr	r3, [pc, #44]	; (8008a8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008a5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008a62:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a6a:	4908      	ldr	r1, [pc, #32]	; (8008a8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008a6c:	4313      	orrs	r3, r2
 8008a6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a76:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008a7a:	d109      	bne.n	8008a90 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008a7c:	4b03      	ldr	r3, [pc, #12]	; (8008a8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008a7e:	68db      	ldr	r3, [r3, #12]
 8008a80:	4a02      	ldr	r2, [pc, #8]	; (8008a8c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008a82:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008a86:	60d3      	str	r3, [r2, #12]
 8008a88:	e002      	b.n	8008a90 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8008a8a:	bf00      	nop
 8008a8c:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d015      	beq.n	8008ac8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8008a9c:	4b29      	ldr	r3, [pc, #164]	; (8008b44 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008a9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008aa2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008aaa:	4926      	ldr	r1, [pc, #152]	; (8008b44 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008aac:	4313      	orrs	r3, r2
 8008aae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ab6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008aba:	d105      	bne.n	8008ac8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8008abc:	4b21      	ldr	r3, [pc, #132]	; (8008b44 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008abe:	68db      	ldr	r3, [r3, #12]
 8008ac0:	4a20      	ldr	r2, [pc, #128]	; (8008b44 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008ac2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008ac6:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d015      	beq.n	8008b00 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8008ad4:	4b1b      	ldr	r3, [pc, #108]	; (8008b44 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008ad6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008ada:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008ae2:	4918      	ldr	r1, [pc, #96]	; (8008b44 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008ae4:	4313      	orrs	r3, r2
 8008ae6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008aee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008af2:	d105      	bne.n	8008b00 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8008af4:	4b13      	ldr	r3, [pc, #76]	; (8008b44 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008af6:	68db      	ldr	r3, [r3, #12]
 8008af8:	4a12      	ldr	r2, [pc, #72]	; (8008b44 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008afa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008afe:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d015      	beq.n	8008b38 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8008b0c:	4b0d      	ldr	r3, [pc, #52]	; (8008b44 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008b0e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008b12:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008b1a:	490a      	ldr	r1, [pc, #40]	; (8008b44 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008b1c:	4313      	orrs	r3, r2
 8008b1e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008b26:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008b2a:	d105      	bne.n	8008b38 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008b2c:	4b05      	ldr	r3, [pc, #20]	; (8008b44 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008b2e:	68db      	ldr	r3, [r3, #12]
 8008b30:	4a04      	ldr	r2, [pc, #16]	; (8008b44 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008b32:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008b36:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8008b38:	7cbb      	ldrb	r3, [r7, #18]
}
 8008b3a:	4618      	mov	r0, r3
 8008b3c:	3718      	adds	r7, #24
 8008b3e:	46bd      	mov	sp, r7
 8008b40:	bd80      	pop	{r7, pc}
 8008b42:	bf00      	nop
 8008b44:	40021000 	.word	0x40021000

08008b48 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008b48:	b580      	push	{r7, lr}
 8008b4a:	b082      	sub	sp, #8
 8008b4c:	af00      	add	r7, sp, #0
 8008b4e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d101      	bne.n	8008b5a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008b56:	2301      	movs	r3, #1
 8008b58:	e049      	b.n	8008bee <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008b60:	b2db      	uxtb	r3, r3
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d106      	bne.n	8008b74 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	2200      	movs	r2, #0
 8008b6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008b6e:	6878      	ldr	r0, [r7, #4]
 8008b70:	f7f9 fde2 	bl	8002738 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	2202      	movs	r2, #2
 8008b78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	681a      	ldr	r2, [r3, #0]
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	3304      	adds	r3, #4
 8008b84:	4619      	mov	r1, r3
 8008b86:	4610      	mov	r0, r2
 8008b88:	f001 f824 	bl	8009bd4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	2201      	movs	r2, #1
 8008b90:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	2201      	movs	r2, #1
 8008b98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	2201      	movs	r2, #1
 8008ba0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	2201      	movs	r2, #1
 8008ba8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	2201      	movs	r2, #1
 8008bb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	2201      	movs	r2, #1
 8008bb8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	2201      	movs	r2, #1
 8008bc0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	2201      	movs	r2, #1
 8008bc8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	2201      	movs	r2, #1
 8008bd0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	2201      	movs	r2, #1
 8008bd8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	2201      	movs	r2, #1
 8008be0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	2201      	movs	r2, #1
 8008be8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008bec:	2300      	movs	r3, #0
}
 8008bee:	4618      	mov	r0, r3
 8008bf0:	3708      	adds	r7, #8
 8008bf2:	46bd      	mov	sp, r7
 8008bf4:	bd80      	pop	{r7, pc}
	...

08008bf8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008bf8:	b480      	push	{r7}
 8008bfa:	b085      	sub	sp, #20
 8008bfc:	af00      	add	r7, sp, #0
 8008bfe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008c06:	b2db      	uxtb	r3, r3
 8008c08:	2b01      	cmp	r3, #1
 8008c0a:	d001      	beq.n	8008c10 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008c0c:	2301      	movs	r3, #1
 8008c0e:	e054      	b.n	8008cba <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	2202      	movs	r2, #2
 8008c14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	68da      	ldr	r2, [r3, #12]
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	f042 0201 	orr.w	r2, r2, #1
 8008c26:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	4a26      	ldr	r2, [pc, #152]	; (8008cc8 <HAL_TIM_Base_Start_IT+0xd0>)
 8008c2e:	4293      	cmp	r3, r2
 8008c30:	d022      	beq.n	8008c78 <HAL_TIM_Base_Start_IT+0x80>
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008c3a:	d01d      	beq.n	8008c78 <HAL_TIM_Base_Start_IT+0x80>
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	4a22      	ldr	r2, [pc, #136]	; (8008ccc <HAL_TIM_Base_Start_IT+0xd4>)
 8008c42:	4293      	cmp	r3, r2
 8008c44:	d018      	beq.n	8008c78 <HAL_TIM_Base_Start_IT+0x80>
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	4a21      	ldr	r2, [pc, #132]	; (8008cd0 <HAL_TIM_Base_Start_IT+0xd8>)
 8008c4c:	4293      	cmp	r3, r2
 8008c4e:	d013      	beq.n	8008c78 <HAL_TIM_Base_Start_IT+0x80>
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	4a1f      	ldr	r2, [pc, #124]	; (8008cd4 <HAL_TIM_Base_Start_IT+0xdc>)
 8008c56:	4293      	cmp	r3, r2
 8008c58:	d00e      	beq.n	8008c78 <HAL_TIM_Base_Start_IT+0x80>
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	4a1e      	ldr	r2, [pc, #120]	; (8008cd8 <HAL_TIM_Base_Start_IT+0xe0>)
 8008c60:	4293      	cmp	r3, r2
 8008c62:	d009      	beq.n	8008c78 <HAL_TIM_Base_Start_IT+0x80>
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	4a1c      	ldr	r2, [pc, #112]	; (8008cdc <HAL_TIM_Base_Start_IT+0xe4>)
 8008c6a:	4293      	cmp	r3, r2
 8008c6c:	d004      	beq.n	8008c78 <HAL_TIM_Base_Start_IT+0x80>
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	4a1b      	ldr	r2, [pc, #108]	; (8008ce0 <HAL_TIM_Base_Start_IT+0xe8>)
 8008c74:	4293      	cmp	r3, r2
 8008c76:	d115      	bne.n	8008ca4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	689a      	ldr	r2, [r3, #8]
 8008c7e:	4b19      	ldr	r3, [pc, #100]	; (8008ce4 <HAL_TIM_Base_Start_IT+0xec>)
 8008c80:	4013      	ands	r3, r2
 8008c82:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	2b06      	cmp	r3, #6
 8008c88:	d015      	beq.n	8008cb6 <HAL_TIM_Base_Start_IT+0xbe>
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008c90:	d011      	beq.n	8008cb6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	681a      	ldr	r2, [r3, #0]
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	f042 0201 	orr.w	r2, r2, #1
 8008ca0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008ca2:	e008      	b.n	8008cb6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	681a      	ldr	r2, [r3, #0]
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	f042 0201 	orr.w	r2, r2, #1
 8008cb2:	601a      	str	r2, [r3, #0]
 8008cb4:	e000      	b.n	8008cb8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008cb6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008cb8:	2300      	movs	r3, #0
}
 8008cba:	4618      	mov	r0, r3
 8008cbc:	3714      	adds	r7, #20
 8008cbe:	46bd      	mov	sp, r7
 8008cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc4:	4770      	bx	lr
 8008cc6:	bf00      	nop
 8008cc8:	40012c00 	.word	0x40012c00
 8008ccc:	40000400 	.word	0x40000400
 8008cd0:	40000800 	.word	0x40000800
 8008cd4:	40000c00 	.word	0x40000c00
 8008cd8:	40013400 	.word	0x40013400
 8008cdc:	40014000 	.word	0x40014000
 8008ce0:	40015000 	.word	0x40015000
 8008ce4:	00010007 	.word	0x00010007

08008ce8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008ce8:	b580      	push	{r7, lr}
 8008cea:	b082      	sub	sp, #8
 8008cec:	af00      	add	r7, sp, #0
 8008cee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d101      	bne.n	8008cfa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008cf6:	2301      	movs	r3, #1
 8008cf8:	e049      	b.n	8008d8e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008d00:	b2db      	uxtb	r3, r3
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d106      	bne.n	8008d14 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	2200      	movs	r2, #0
 8008d0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008d0e:	6878      	ldr	r0, [r7, #4]
 8008d10:	f000 f841 	bl	8008d96 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	2202      	movs	r2, #2
 8008d18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	681a      	ldr	r2, [r3, #0]
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	3304      	adds	r3, #4
 8008d24:	4619      	mov	r1, r3
 8008d26:	4610      	mov	r0, r2
 8008d28:	f000 ff54 	bl	8009bd4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	2201      	movs	r2, #1
 8008d30:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	2201      	movs	r2, #1
 8008d38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	2201      	movs	r2, #1
 8008d40:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	2201      	movs	r2, #1
 8008d48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	2201      	movs	r2, #1
 8008d50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	2201      	movs	r2, #1
 8008d58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	2201      	movs	r2, #1
 8008d60:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	2201      	movs	r2, #1
 8008d68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	2201      	movs	r2, #1
 8008d70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	2201      	movs	r2, #1
 8008d78:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	2201      	movs	r2, #1
 8008d80:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	2201      	movs	r2, #1
 8008d88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008d8c:	2300      	movs	r3, #0
}
 8008d8e:	4618      	mov	r0, r3
 8008d90:	3708      	adds	r7, #8
 8008d92:	46bd      	mov	sp, r7
 8008d94:	bd80      	pop	{r7, pc}

08008d96 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008d96:	b480      	push	{r7}
 8008d98:	b083      	sub	sp, #12
 8008d9a:	af00      	add	r7, sp, #0
 8008d9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008d9e:	bf00      	nop
 8008da0:	370c      	adds	r7, #12
 8008da2:	46bd      	mov	sp, r7
 8008da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da8:	4770      	bx	lr
	...

08008dac <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008dac:	b580      	push	{r7, lr}
 8008dae:	b084      	sub	sp, #16
 8008db0:	af00      	add	r7, sp, #0
 8008db2:	6078      	str	r0, [r7, #4]
 8008db4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008db6:	683b      	ldr	r3, [r7, #0]
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d109      	bne.n	8008dd0 <HAL_TIM_PWM_Start+0x24>
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008dc2:	b2db      	uxtb	r3, r3
 8008dc4:	2b01      	cmp	r3, #1
 8008dc6:	bf14      	ite	ne
 8008dc8:	2301      	movne	r3, #1
 8008dca:	2300      	moveq	r3, #0
 8008dcc:	b2db      	uxtb	r3, r3
 8008dce:	e03c      	b.n	8008e4a <HAL_TIM_PWM_Start+0x9e>
 8008dd0:	683b      	ldr	r3, [r7, #0]
 8008dd2:	2b04      	cmp	r3, #4
 8008dd4:	d109      	bne.n	8008dea <HAL_TIM_PWM_Start+0x3e>
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008ddc:	b2db      	uxtb	r3, r3
 8008dde:	2b01      	cmp	r3, #1
 8008de0:	bf14      	ite	ne
 8008de2:	2301      	movne	r3, #1
 8008de4:	2300      	moveq	r3, #0
 8008de6:	b2db      	uxtb	r3, r3
 8008de8:	e02f      	b.n	8008e4a <HAL_TIM_PWM_Start+0x9e>
 8008dea:	683b      	ldr	r3, [r7, #0]
 8008dec:	2b08      	cmp	r3, #8
 8008dee:	d109      	bne.n	8008e04 <HAL_TIM_PWM_Start+0x58>
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008df6:	b2db      	uxtb	r3, r3
 8008df8:	2b01      	cmp	r3, #1
 8008dfa:	bf14      	ite	ne
 8008dfc:	2301      	movne	r3, #1
 8008dfe:	2300      	moveq	r3, #0
 8008e00:	b2db      	uxtb	r3, r3
 8008e02:	e022      	b.n	8008e4a <HAL_TIM_PWM_Start+0x9e>
 8008e04:	683b      	ldr	r3, [r7, #0]
 8008e06:	2b0c      	cmp	r3, #12
 8008e08:	d109      	bne.n	8008e1e <HAL_TIM_PWM_Start+0x72>
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008e10:	b2db      	uxtb	r3, r3
 8008e12:	2b01      	cmp	r3, #1
 8008e14:	bf14      	ite	ne
 8008e16:	2301      	movne	r3, #1
 8008e18:	2300      	moveq	r3, #0
 8008e1a:	b2db      	uxtb	r3, r3
 8008e1c:	e015      	b.n	8008e4a <HAL_TIM_PWM_Start+0x9e>
 8008e1e:	683b      	ldr	r3, [r7, #0]
 8008e20:	2b10      	cmp	r3, #16
 8008e22:	d109      	bne.n	8008e38 <HAL_TIM_PWM_Start+0x8c>
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008e2a:	b2db      	uxtb	r3, r3
 8008e2c:	2b01      	cmp	r3, #1
 8008e2e:	bf14      	ite	ne
 8008e30:	2301      	movne	r3, #1
 8008e32:	2300      	moveq	r3, #0
 8008e34:	b2db      	uxtb	r3, r3
 8008e36:	e008      	b.n	8008e4a <HAL_TIM_PWM_Start+0x9e>
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008e3e:	b2db      	uxtb	r3, r3
 8008e40:	2b01      	cmp	r3, #1
 8008e42:	bf14      	ite	ne
 8008e44:	2301      	movne	r3, #1
 8008e46:	2300      	moveq	r3, #0
 8008e48:	b2db      	uxtb	r3, r3
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d001      	beq.n	8008e52 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8008e4e:	2301      	movs	r3, #1
 8008e50:	e0a6      	b.n	8008fa0 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008e52:	683b      	ldr	r3, [r7, #0]
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d104      	bne.n	8008e62 <HAL_TIM_PWM_Start+0xb6>
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	2202      	movs	r2, #2
 8008e5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008e60:	e023      	b.n	8008eaa <HAL_TIM_PWM_Start+0xfe>
 8008e62:	683b      	ldr	r3, [r7, #0]
 8008e64:	2b04      	cmp	r3, #4
 8008e66:	d104      	bne.n	8008e72 <HAL_TIM_PWM_Start+0xc6>
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	2202      	movs	r2, #2
 8008e6c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008e70:	e01b      	b.n	8008eaa <HAL_TIM_PWM_Start+0xfe>
 8008e72:	683b      	ldr	r3, [r7, #0]
 8008e74:	2b08      	cmp	r3, #8
 8008e76:	d104      	bne.n	8008e82 <HAL_TIM_PWM_Start+0xd6>
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	2202      	movs	r2, #2
 8008e7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008e80:	e013      	b.n	8008eaa <HAL_TIM_PWM_Start+0xfe>
 8008e82:	683b      	ldr	r3, [r7, #0]
 8008e84:	2b0c      	cmp	r3, #12
 8008e86:	d104      	bne.n	8008e92 <HAL_TIM_PWM_Start+0xe6>
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	2202      	movs	r2, #2
 8008e8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008e90:	e00b      	b.n	8008eaa <HAL_TIM_PWM_Start+0xfe>
 8008e92:	683b      	ldr	r3, [r7, #0]
 8008e94:	2b10      	cmp	r3, #16
 8008e96:	d104      	bne.n	8008ea2 <HAL_TIM_PWM_Start+0xf6>
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	2202      	movs	r2, #2
 8008e9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008ea0:	e003      	b.n	8008eaa <HAL_TIM_PWM_Start+0xfe>
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	2202      	movs	r2, #2
 8008ea6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	2201      	movs	r2, #1
 8008eb0:	6839      	ldr	r1, [r7, #0]
 8008eb2:	4618      	mov	r0, r3
 8008eb4:	f001 fc26 	bl	800a704 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	4a3a      	ldr	r2, [pc, #232]	; (8008fa8 <HAL_TIM_PWM_Start+0x1fc>)
 8008ebe:	4293      	cmp	r3, r2
 8008ec0:	d018      	beq.n	8008ef4 <HAL_TIM_PWM_Start+0x148>
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	4a39      	ldr	r2, [pc, #228]	; (8008fac <HAL_TIM_PWM_Start+0x200>)
 8008ec8:	4293      	cmp	r3, r2
 8008eca:	d013      	beq.n	8008ef4 <HAL_TIM_PWM_Start+0x148>
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	4a37      	ldr	r2, [pc, #220]	; (8008fb0 <HAL_TIM_PWM_Start+0x204>)
 8008ed2:	4293      	cmp	r3, r2
 8008ed4:	d00e      	beq.n	8008ef4 <HAL_TIM_PWM_Start+0x148>
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	4a36      	ldr	r2, [pc, #216]	; (8008fb4 <HAL_TIM_PWM_Start+0x208>)
 8008edc:	4293      	cmp	r3, r2
 8008ede:	d009      	beq.n	8008ef4 <HAL_TIM_PWM_Start+0x148>
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	4a34      	ldr	r2, [pc, #208]	; (8008fb8 <HAL_TIM_PWM_Start+0x20c>)
 8008ee6:	4293      	cmp	r3, r2
 8008ee8:	d004      	beq.n	8008ef4 <HAL_TIM_PWM_Start+0x148>
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	4a33      	ldr	r2, [pc, #204]	; (8008fbc <HAL_TIM_PWM_Start+0x210>)
 8008ef0:	4293      	cmp	r3, r2
 8008ef2:	d101      	bne.n	8008ef8 <HAL_TIM_PWM_Start+0x14c>
 8008ef4:	2301      	movs	r3, #1
 8008ef6:	e000      	b.n	8008efa <HAL_TIM_PWM_Start+0x14e>
 8008ef8:	2300      	movs	r3, #0
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d007      	beq.n	8008f0e <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008f0c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	4a25      	ldr	r2, [pc, #148]	; (8008fa8 <HAL_TIM_PWM_Start+0x1fc>)
 8008f14:	4293      	cmp	r3, r2
 8008f16:	d022      	beq.n	8008f5e <HAL_TIM_PWM_Start+0x1b2>
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008f20:	d01d      	beq.n	8008f5e <HAL_TIM_PWM_Start+0x1b2>
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	4a26      	ldr	r2, [pc, #152]	; (8008fc0 <HAL_TIM_PWM_Start+0x214>)
 8008f28:	4293      	cmp	r3, r2
 8008f2a:	d018      	beq.n	8008f5e <HAL_TIM_PWM_Start+0x1b2>
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	4a24      	ldr	r2, [pc, #144]	; (8008fc4 <HAL_TIM_PWM_Start+0x218>)
 8008f32:	4293      	cmp	r3, r2
 8008f34:	d013      	beq.n	8008f5e <HAL_TIM_PWM_Start+0x1b2>
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	4a23      	ldr	r2, [pc, #140]	; (8008fc8 <HAL_TIM_PWM_Start+0x21c>)
 8008f3c:	4293      	cmp	r3, r2
 8008f3e:	d00e      	beq.n	8008f5e <HAL_TIM_PWM_Start+0x1b2>
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	4a19      	ldr	r2, [pc, #100]	; (8008fac <HAL_TIM_PWM_Start+0x200>)
 8008f46:	4293      	cmp	r3, r2
 8008f48:	d009      	beq.n	8008f5e <HAL_TIM_PWM_Start+0x1b2>
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	4a18      	ldr	r2, [pc, #96]	; (8008fb0 <HAL_TIM_PWM_Start+0x204>)
 8008f50:	4293      	cmp	r3, r2
 8008f52:	d004      	beq.n	8008f5e <HAL_TIM_PWM_Start+0x1b2>
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	4a18      	ldr	r2, [pc, #96]	; (8008fbc <HAL_TIM_PWM_Start+0x210>)
 8008f5a:	4293      	cmp	r3, r2
 8008f5c:	d115      	bne.n	8008f8a <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	689a      	ldr	r2, [r3, #8]
 8008f64:	4b19      	ldr	r3, [pc, #100]	; (8008fcc <HAL_TIM_PWM_Start+0x220>)
 8008f66:	4013      	ands	r3, r2
 8008f68:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	2b06      	cmp	r3, #6
 8008f6e:	d015      	beq.n	8008f9c <HAL_TIM_PWM_Start+0x1f0>
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008f76:	d011      	beq.n	8008f9c <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	681a      	ldr	r2, [r3, #0]
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	f042 0201 	orr.w	r2, r2, #1
 8008f86:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008f88:	e008      	b.n	8008f9c <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	681a      	ldr	r2, [r3, #0]
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	f042 0201 	orr.w	r2, r2, #1
 8008f98:	601a      	str	r2, [r3, #0]
 8008f9a:	e000      	b.n	8008f9e <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008f9c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008f9e:	2300      	movs	r3, #0
}
 8008fa0:	4618      	mov	r0, r3
 8008fa2:	3710      	adds	r7, #16
 8008fa4:	46bd      	mov	sp, r7
 8008fa6:	bd80      	pop	{r7, pc}
 8008fa8:	40012c00 	.word	0x40012c00
 8008fac:	40013400 	.word	0x40013400
 8008fb0:	40014000 	.word	0x40014000
 8008fb4:	40014400 	.word	0x40014400
 8008fb8:	40014800 	.word	0x40014800
 8008fbc:	40015000 	.word	0x40015000
 8008fc0:	40000400 	.word	0x40000400
 8008fc4:	40000800 	.word	0x40000800
 8008fc8:	40000c00 	.word	0x40000c00
 8008fcc:	00010007 	.word	0x00010007

08008fd0 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8008fd0:	b580      	push	{r7, lr}
 8008fd2:	b082      	sub	sp, #8
 8008fd4:	af00      	add	r7, sp, #0
 8008fd6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d101      	bne.n	8008fe2 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8008fde:	2301      	movs	r3, #1
 8008fe0:	e049      	b.n	8009076 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008fe8:	b2db      	uxtb	r3, r3
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d106      	bne.n	8008ffc <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	2200      	movs	r2, #0
 8008ff2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8008ff6:	6878      	ldr	r0, [r7, #4]
 8008ff8:	f000 f841 	bl	800907e <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	2202      	movs	r2, #2
 8009000:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	681a      	ldr	r2, [r3, #0]
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	3304      	adds	r3, #4
 800900c:	4619      	mov	r1, r3
 800900e:	4610      	mov	r0, r2
 8009010:	f000 fde0 	bl	8009bd4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	2201      	movs	r2, #1
 8009018:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	2201      	movs	r2, #1
 8009020:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	2201      	movs	r2, #1
 8009028:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	2201      	movs	r2, #1
 8009030:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	2201      	movs	r2, #1
 8009038:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	2201      	movs	r2, #1
 8009040:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	2201      	movs	r2, #1
 8009048:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	2201      	movs	r2, #1
 8009050:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	2201      	movs	r2, #1
 8009058:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	2201      	movs	r2, #1
 8009060:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	2201      	movs	r2, #1
 8009068:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	2201      	movs	r2, #1
 8009070:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009074:	2300      	movs	r3, #0
}
 8009076:	4618      	mov	r0, r3
 8009078:	3708      	adds	r7, #8
 800907a:	46bd      	mov	sp, r7
 800907c:	bd80      	pop	{r7, pc}

0800907e <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800907e:	b480      	push	{r7}
 8009080:	b083      	sub	sp, #12
 8009082:	af00      	add	r7, sp, #0
 8009084:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8009086:	bf00      	nop
 8009088:	370c      	adds	r7, #12
 800908a:	46bd      	mov	sp, r7
 800908c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009090:	4770      	bx	lr

08009092 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8009092:	b580      	push	{r7, lr}
 8009094:	b086      	sub	sp, #24
 8009096:	af00      	add	r7, sp, #0
 8009098:	6078      	str	r0, [r7, #4]
 800909a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d101      	bne.n	80090a6 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80090a2:	2301      	movs	r3, #1
 80090a4:	e097      	b.n	80091d6 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80090ac:	b2db      	uxtb	r3, r3
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d106      	bne.n	80090c0 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	2200      	movs	r2, #0
 80090b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80090ba:	6878      	ldr	r0, [r7, #4]
 80090bc:	f7f9 fc0a 	bl	80028d4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	2202      	movs	r2, #2
 80090c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	689b      	ldr	r3, [r3, #8]
 80090ce:	687a      	ldr	r2, [r7, #4]
 80090d0:	6812      	ldr	r2, [r2, #0]
 80090d2:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 80090d6:	f023 0307 	bic.w	r3, r3, #7
 80090da:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	681a      	ldr	r2, [r3, #0]
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	3304      	adds	r3, #4
 80090e4:	4619      	mov	r1, r3
 80090e6:	4610      	mov	r0, r2
 80090e8:	f000 fd74 	bl	8009bd4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	689b      	ldr	r3, [r3, #8]
 80090f2:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	699b      	ldr	r3, [r3, #24]
 80090fa:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	6a1b      	ldr	r3, [r3, #32]
 8009102:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8009104:	683b      	ldr	r3, [r7, #0]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	697a      	ldr	r2, [r7, #20]
 800910a:	4313      	orrs	r3, r2
 800910c:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800910e:	693b      	ldr	r3, [r7, #16]
 8009110:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009114:	f023 0303 	bic.w	r3, r3, #3
 8009118:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800911a:	683b      	ldr	r3, [r7, #0]
 800911c:	689a      	ldr	r2, [r3, #8]
 800911e:	683b      	ldr	r3, [r7, #0]
 8009120:	699b      	ldr	r3, [r3, #24]
 8009122:	021b      	lsls	r3, r3, #8
 8009124:	4313      	orrs	r3, r2
 8009126:	693a      	ldr	r2, [r7, #16]
 8009128:	4313      	orrs	r3, r2
 800912a:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800912c:	693b      	ldr	r3, [r7, #16]
 800912e:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8009132:	f023 030c 	bic.w	r3, r3, #12
 8009136:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8009138:	693b      	ldr	r3, [r7, #16]
 800913a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800913e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009142:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8009144:	683b      	ldr	r3, [r7, #0]
 8009146:	68da      	ldr	r2, [r3, #12]
 8009148:	683b      	ldr	r3, [r7, #0]
 800914a:	69db      	ldr	r3, [r3, #28]
 800914c:	021b      	lsls	r3, r3, #8
 800914e:	4313      	orrs	r3, r2
 8009150:	693a      	ldr	r2, [r7, #16]
 8009152:	4313      	orrs	r3, r2
 8009154:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8009156:	683b      	ldr	r3, [r7, #0]
 8009158:	691b      	ldr	r3, [r3, #16]
 800915a:	011a      	lsls	r2, r3, #4
 800915c:	683b      	ldr	r3, [r7, #0]
 800915e:	6a1b      	ldr	r3, [r3, #32]
 8009160:	031b      	lsls	r3, r3, #12
 8009162:	4313      	orrs	r3, r2
 8009164:	693a      	ldr	r2, [r7, #16]
 8009166:	4313      	orrs	r3, r2
 8009168:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8009170:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8009178:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800917a:	683b      	ldr	r3, [r7, #0]
 800917c:	685a      	ldr	r2, [r3, #4]
 800917e:	683b      	ldr	r3, [r7, #0]
 8009180:	695b      	ldr	r3, [r3, #20]
 8009182:	011b      	lsls	r3, r3, #4
 8009184:	4313      	orrs	r3, r2
 8009186:	68fa      	ldr	r2, [r7, #12]
 8009188:	4313      	orrs	r3, r2
 800918a:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	697a      	ldr	r2, [r7, #20]
 8009192:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	693a      	ldr	r2, [r7, #16]
 800919a:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	68fa      	ldr	r2, [r7, #12]
 80091a2:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	2201      	movs	r2, #1
 80091a8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	2201      	movs	r2, #1
 80091b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	2201      	movs	r2, #1
 80091b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	2201      	movs	r2, #1
 80091c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	2201      	movs	r2, #1
 80091c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	2201      	movs	r2, #1
 80091d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80091d4:	2300      	movs	r3, #0
}
 80091d6:	4618      	mov	r0, r3
 80091d8:	3718      	adds	r7, #24
 80091da:	46bd      	mov	sp, r7
 80091dc:	bd80      	pop	{r7, pc}

080091de <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80091de:	b580      	push	{r7, lr}
 80091e0:	b084      	sub	sp, #16
 80091e2:	af00      	add	r7, sp, #0
 80091e4:	6078      	str	r0, [r7, #4]
 80091e6:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80091ee:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80091f6:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80091fe:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009206:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8009208:	683b      	ldr	r3, [r7, #0]
 800920a:	2b00      	cmp	r3, #0
 800920c:	d110      	bne.n	8009230 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800920e:	7bfb      	ldrb	r3, [r7, #15]
 8009210:	2b01      	cmp	r3, #1
 8009212:	d102      	bne.n	800921a <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8009214:	7b7b      	ldrb	r3, [r7, #13]
 8009216:	2b01      	cmp	r3, #1
 8009218:	d001      	beq.n	800921e <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800921a:	2301      	movs	r3, #1
 800921c:	e069      	b.n	80092f2 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	2202      	movs	r2, #2
 8009222:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	2202      	movs	r2, #2
 800922a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800922e:	e031      	b.n	8009294 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8009230:	683b      	ldr	r3, [r7, #0]
 8009232:	2b04      	cmp	r3, #4
 8009234:	d110      	bne.n	8009258 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8009236:	7bbb      	ldrb	r3, [r7, #14]
 8009238:	2b01      	cmp	r3, #1
 800923a:	d102      	bne.n	8009242 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800923c:	7b3b      	ldrb	r3, [r7, #12]
 800923e:	2b01      	cmp	r3, #1
 8009240:	d001      	beq.n	8009246 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8009242:	2301      	movs	r3, #1
 8009244:	e055      	b.n	80092f2 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	2202      	movs	r2, #2
 800924a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	2202      	movs	r2, #2
 8009252:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009256:	e01d      	b.n	8009294 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009258:	7bfb      	ldrb	r3, [r7, #15]
 800925a:	2b01      	cmp	r3, #1
 800925c:	d108      	bne.n	8009270 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800925e:	7bbb      	ldrb	r3, [r7, #14]
 8009260:	2b01      	cmp	r3, #1
 8009262:	d105      	bne.n	8009270 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009264:	7b7b      	ldrb	r3, [r7, #13]
 8009266:	2b01      	cmp	r3, #1
 8009268:	d102      	bne.n	8009270 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800926a:	7b3b      	ldrb	r3, [r7, #12]
 800926c:	2b01      	cmp	r3, #1
 800926e:	d001      	beq.n	8009274 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8009270:	2301      	movs	r3, #1
 8009272:	e03e      	b.n	80092f2 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	2202      	movs	r2, #2
 8009278:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	2202      	movs	r2, #2
 8009280:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	2202      	movs	r2, #2
 8009288:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	2202      	movs	r2, #2
 8009290:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8009294:	683b      	ldr	r3, [r7, #0]
 8009296:	2b00      	cmp	r3, #0
 8009298:	d003      	beq.n	80092a2 <HAL_TIM_Encoder_Start+0xc4>
 800929a:	683b      	ldr	r3, [r7, #0]
 800929c:	2b04      	cmp	r3, #4
 800929e:	d008      	beq.n	80092b2 <HAL_TIM_Encoder_Start+0xd4>
 80092a0:	e00f      	b.n	80092c2 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	2201      	movs	r2, #1
 80092a8:	2100      	movs	r1, #0
 80092aa:	4618      	mov	r0, r3
 80092ac:	f001 fa2a 	bl	800a704 <TIM_CCxChannelCmd>
      break;
 80092b0:	e016      	b.n	80092e0 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	2201      	movs	r2, #1
 80092b8:	2104      	movs	r1, #4
 80092ba:	4618      	mov	r0, r3
 80092bc:	f001 fa22 	bl	800a704 <TIM_CCxChannelCmd>
      break;
 80092c0:	e00e      	b.n	80092e0 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	2201      	movs	r2, #1
 80092c8:	2100      	movs	r1, #0
 80092ca:	4618      	mov	r0, r3
 80092cc:	f001 fa1a 	bl	800a704 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	2201      	movs	r2, #1
 80092d6:	2104      	movs	r1, #4
 80092d8:	4618      	mov	r0, r3
 80092da:	f001 fa13 	bl	800a704 <TIM_CCxChannelCmd>
      break;
 80092de:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	681a      	ldr	r2, [r3, #0]
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	f042 0201 	orr.w	r2, r2, #1
 80092ee:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80092f0:	2300      	movs	r3, #0
}
 80092f2:	4618      	mov	r0, r3
 80092f4:	3710      	adds	r7, #16
 80092f6:	46bd      	mov	sp, r7
 80092f8:	bd80      	pop	{r7, pc}

080092fa <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80092fa:	b580      	push	{r7, lr}
 80092fc:	b082      	sub	sp, #8
 80092fe:	af00      	add	r7, sp, #0
 8009300:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	691b      	ldr	r3, [r3, #16]
 8009308:	f003 0302 	and.w	r3, r3, #2
 800930c:	2b02      	cmp	r3, #2
 800930e:	d122      	bne.n	8009356 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	68db      	ldr	r3, [r3, #12]
 8009316:	f003 0302 	and.w	r3, r3, #2
 800931a:	2b02      	cmp	r3, #2
 800931c:	d11b      	bne.n	8009356 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	f06f 0202 	mvn.w	r2, #2
 8009326:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	2201      	movs	r2, #1
 800932c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	699b      	ldr	r3, [r3, #24]
 8009334:	f003 0303 	and.w	r3, r3, #3
 8009338:	2b00      	cmp	r3, #0
 800933a:	d003      	beq.n	8009344 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800933c:	6878      	ldr	r0, [r7, #4]
 800933e:	f000 fc2b 	bl	8009b98 <HAL_TIM_IC_CaptureCallback>
 8009342:	e005      	b.n	8009350 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009344:	6878      	ldr	r0, [r7, #4]
 8009346:	f000 fc1d 	bl	8009b84 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800934a:	6878      	ldr	r0, [r7, #4]
 800934c:	f000 fc2e 	bl	8009bac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	2200      	movs	r2, #0
 8009354:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	691b      	ldr	r3, [r3, #16]
 800935c:	f003 0304 	and.w	r3, r3, #4
 8009360:	2b04      	cmp	r3, #4
 8009362:	d122      	bne.n	80093aa <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	68db      	ldr	r3, [r3, #12]
 800936a:	f003 0304 	and.w	r3, r3, #4
 800936e:	2b04      	cmp	r3, #4
 8009370:	d11b      	bne.n	80093aa <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	f06f 0204 	mvn.w	r2, #4
 800937a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	2202      	movs	r2, #2
 8009380:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	699b      	ldr	r3, [r3, #24]
 8009388:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800938c:	2b00      	cmp	r3, #0
 800938e:	d003      	beq.n	8009398 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009390:	6878      	ldr	r0, [r7, #4]
 8009392:	f000 fc01 	bl	8009b98 <HAL_TIM_IC_CaptureCallback>
 8009396:	e005      	b.n	80093a4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009398:	6878      	ldr	r0, [r7, #4]
 800939a:	f000 fbf3 	bl	8009b84 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800939e:	6878      	ldr	r0, [r7, #4]
 80093a0:	f000 fc04 	bl	8009bac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	2200      	movs	r2, #0
 80093a8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	691b      	ldr	r3, [r3, #16]
 80093b0:	f003 0308 	and.w	r3, r3, #8
 80093b4:	2b08      	cmp	r3, #8
 80093b6:	d122      	bne.n	80093fe <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	68db      	ldr	r3, [r3, #12]
 80093be:	f003 0308 	and.w	r3, r3, #8
 80093c2:	2b08      	cmp	r3, #8
 80093c4:	d11b      	bne.n	80093fe <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	f06f 0208 	mvn.w	r2, #8
 80093ce:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	2204      	movs	r2, #4
 80093d4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	69db      	ldr	r3, [r3, #28]
 80093dc:	f003 0303 	and.w	r3, r3, #3
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d003      	beq.n	80093ec <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80093e4:	6878      	ldr	r0, [r7, #4]
 80093e6:	f000 fbd7 	bl	8009b98 <HAL_TIM_IC_CaptureCallback>
 80093ea:	e005      	b.n	80093f8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80093ec:	6878      	ldr	r0, [r7, #4]
 80093ee:	f000 fbc9 	bl	8009b84 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80093f2:	6878      	ldr	r0, [r7, #4]
 80093f4:	f000 fbda 	bl	8009bac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	2200      	movs	r2, #0
 80093fc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	691b      	ldr	r3, [r3, #16]
 8009404:	f003 0310 	and.w	r3, r3, #16
 8009408:	2b10      	cmp	r3, #16
 800940a:	d122      	bne.n	8009452 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	68db      	ldr	r3, [r3, #12]
 8009412:	f003 0310 	and.w	r3, r3, #16
 8009416:	2b10      	cmp	r3, #16
 8009418:	d11b      	bne.n	8009452 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	f06f 0210 	mvn.w	r2, #16
 8009422:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	2208      	movs	r2, #8
 8009428:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	69db      	ldr	r3, [r3, #28]
 8009430:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009434:	2b00      	cmp	r3, #0
 8009436:	d003      	beq.n	8009440 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009438:	6878      	ldr	r0, [r7, #4]
 800943a:	f000 fbad 	bl	8009b98 <HAL_TIM_IC_CaptureCallback>
 800943e:	e005      	b.n	800944c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009440:	6878      	ldr	r0, [r7, #4]
 8009442:	f000 fb9f 	bl	8009b84 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009446:	6878      	ldr	r0, [r7, #4]
 8009448:	f000 fbb0 	bl	8009bac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	2200      	movs	r2, #0
 8009450:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	691b      	ldr	r3, [r3, #16]
 8009458:	f003 0301 	and.w	r3, r3, #1
 800945c:	2b01      	cmp	r3, #1
 800945e:	d10e      	bne.n	800947e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	68db      	ldr	r3, [r3, #12]
 8009466:	f003 0301 	and.w	r3, r3, #1
 800946a:	2b01      	cmp	r3, #1
 800946c:	d107      	bne.n	800947e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	f06f 0201 	mvn.w	r2, #1
 8009476:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009478:	6878      	ldr	r0, [r7, #4]
 800947a:	f7f8 fcc3 	bl	8001e04 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	691b      	ldr	r3, [r3, #16]
 8009484:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009488:	2b80      	cmp	r3, #128	; 0x80
 800948a:	d10e      	bne.n	80094aa <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	68db      	ldr	r3, [r3, #12]
 8009492:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009496:	2b80      	cmp	r3, #128	; 0x80
 8009498:	d107      	bne.n	80094aa <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80094a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80094a4:	6878      	ldr	r0, [r7, #4]
 80094a6:	f001 fb5d 	bl	800ab64 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	691b      	ldr	r3, [r3, #16]
 80094b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80094b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80094b8:	d10e      	bne.n	80094d8 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	68db      	ldr	r3, [r3, #12]
 80094c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80094c4:	2b80      	cmp	r3, #128	; 0x80
 80094c6:	d107      	bne.n	80094d8 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80094d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80094d2:	6878      	ldr	r0, [r7, #4]
 80094d4:	f001 fb50 	bl	800ab78 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	691b      	ldr	r3, [r3, #16]
 80094de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80094e2:	2b40      	cmp	r3, #64	; 0x40
 80094e4:	d10e      	bne.n	8009504 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	68db      	ldr	r3, [r3, #12]
 80094ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80094f0:	2b40      	cmp	r3, #64	; 0x40
 80094f2:	d107      	bne.n	8009504 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80094fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80094fe:	6878      	ldr	r0, [r7, #4]
 8009500:	f000 fb5e 	bl	8009bc0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	691b      	ldr	r3, [r3, #16]
 800950a:	f003 0320 	and.w	r3, r3, #32
 800950e:	2b20      	cmp	r3, #32
 8009510:	d10e      	bne.n	8009530 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	68db      	ldr	r3, [r3, #12]
 8009518:	f003 0320 	and.w	r3, r3, #32
 800951c:	2b20      	cmp	r3, #32
 800951e:	d107      	bne.n	8009530 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	f06f 0220 	mvn.w	r2, #32
 8009528:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800952a:	6878      	ldr	r0, [r7, #4]
 800952c:	f001 fb10 	bl	800ab50 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	691b      	ldr	r3, [r3, #16]
 8009536:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800953a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800953e:	d10f      	bne.n	8009560 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	68db      	ldr	r3, [r3, #12]
 8009546:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800954a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800954e:	d107      	bne.n	8009560 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8009558:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800955a:	6878      	ldr	r0, [r7, #4]
 800955c:	f001 fb16 	bl	800ab8c <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	691b      	ldr	r3, [r3, #16]
 8009566:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800956a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800956e:	d10f      	bne.n	8009590 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	68db      	ldr	r3, [r3, #12]
 8009576:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800957a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800957e:	d107      	bne.n	8009590 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8009588:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800958a:	6878      	ldr	r0, [r7, #4]
 800958c:	f001 fb08 	bl	800aba0 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	691b      	ldr	r3, [r3, #16]
 8009596:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800959a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800959e:	d10f      	bne.n	80095c0 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	68db      	ldr	r3, [r3, #12]
 80095a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80095aa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80095ae:	d107      	bne.n	80095c0 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 80095b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80095ba:	6878      	ldr	r0, [r7, #4]
 80095bc:	f001 fafa 	bl	800abb4 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	691b      	ldr	r3, [r3, #16]
 80095c6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80095ca:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80095ce:	d10f      	bne.n	80095f0 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	68db      	ldr	r3, [r3, #12]
 80095d6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80095da:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80095de:	d107      	bne.n	80095f0 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 80095e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80095ea:	6878      	ldr	r0, [r7, #4]
 80095ec:	f001 faec 	bl	800abc8 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80095f0:	bf00      	nop
 80095f2:	3708      	adds	r7, #8
 80095f4:	46bd      	mov	sp, r7
 80095f6:	bd80      	pop	{r7, pc}

080095f8 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80095f8:	b580      	push	{r7, lr}
 80095fa:	b086      	sub	sp, #24
 80095fc:	af00      	add	r7, sp, #0
 80095fe:	60f8      	str	r0, [r7, #12]
 8009600:	60b9      	str	r1, [r7, #8]
 8009602:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009604:	2300      	movs	r3, #0
 8009606:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800960e:	2b01      	cmp	r3, #1
 8009610:	d101      	bne.n	8009616 <HAL_TIM_IC_ConfigChannel+0x1e>
 8009612:	2302      	movs	r3, #2
 8009614:	e088      	b.n	8009728 <HAL_TIM_IC_ConfigChannel+0x130>
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	2201      	movs	r2, #1
 800961a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	2b00      	cmp	r3, #0
 8009622:	d11b      	bne.n	800965c <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	6818      	ldr	r0, [r3, #0]
 8009628:	68bb      	ldr	r3, [r7, #8]
 800962a:	6819      	ldr	r1, [r3, #0]
 800962c:	68bb      	ldr	r3, [r7, #8]
 800962e:	685a      	ldr	r2, [r3, #4]
 8009630:	68bb      	ldr	r3, [r7, #8]
 8009632:	68db      	ldr	r3, [r3, #12]
 8009634:	f000 fea0 	bl	800a378 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	699a      	ldr	r2, [r3, #24]
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	f022 020c 	bic.w	r2, r2, #12
 8009646:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	6999      	ldr	r1, [r3, #24]
 800964e:	68bb      	ldr	r3, [r7, #8]
 8009650:	689a      	ldr	r2, [r3, #8]
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	430a      	orrs	r2, r1
 8009658:	619a      	str	r2, [r3, #24]
 800965a:	e060      	b.n	800971e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	2b04      	cmp	r3, #4
 8009660:	d11c      	bne.n	800969c <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	6818      	ldr	r0, [r3, #0]
 8009666:	68bb      	ldr	r3, [r7, #8]
 8009668:	6819      	ldr	r1, [r3, #0]
 800966a:	68bb      	ldr	r3, [r7, #8]
 800966c:	685a      	ldr	r2, [r3, #4]
 800966e:	68bb      	ldr	r3, [r7, #8]
 8009670:	68db      	ldr	r3, [r3, #12]
 8009672:	f000 ff24 	bl	800a4be <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	699a      	ldr	r2, [r3, #24]
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8009684:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	6999      	ldr	r1, [r3, #24]
 800968c:	68bb      	ldr	r3, [r7, #8]
 800968e:	689b      	ldr	r3, [r3, #8]
 8009690:	021a      	lsls	r2, r3, #8
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	430a      	orrs	r2, r1
 8009698:	619a      	str	r2, [r3, #24]
 800969a:	e040      	b.n	800971e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	2b08      	cmp	r3, #8
 80096a0:	d11b      	bne.n	80096da <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	6818      	ldr	r0, [r3, #0]
 80096a6:	68bb      	ldr	r3, [r7, #8]
 80096a8:	6819      	ldr	r1, [r3, #0]
 80096aa:	68bb      	ldr	r3, [r7, #8]
 80096ac:	685a      	ldr	r2, [r3, #4]
 80096ae:	68bb      	ldr	r3, [r7, #8]
 80096b0:	68db      	ldr	r3, [r3, #12]
 80096b2:	f000 ff71 	bl	800a598 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	69da      	ldr	r2, [r3, #28]
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	f022 020c 	bic.w	r2, r2, #12
 80096c4:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	69d9      	ldr	r1, [r3, #28]
 80096cc:	68bb      	ldr	r3, [r7, #8]
 80096ce:	689a      	ldr	r2, [r3, #8]
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	430a      	orrs	r2, r1
 80096d6:	61da      	str	r2, [r3, #28]
 80096d8:	e021      	b.n	800971e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	2b0c      	cmp	r3, #12
 80096de:	d11c      	bne.n	800971a <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	6818      	ldr	r0, [r3, #0]
 80096e4:	68bb      	ldr	r3, [r7, #8]
 80096e6:	6819      	ldr	r1, [r3, #0]
 80096e8:	68bb      	ldr	r3, [r7, #8]
 80096ea:	685a      	ldr	r2, [r3, #4]
 80096ec:	68bb      	ldr	r3, [r7, #8]
 80096ee:	68db      	ldr	r3, [r3, #12]
 80096f0:	f000 ff8e 	bl	800a610 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	69da      	ldr	r2, [r3, #28]
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8009702:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	69d9      	ldr	r1, [r3, #28]
 800970a:	68bb      	ldr	r3, [r7, #8]
 800970c:	689b      	ldr	r3, [r3, #8]
 800970e:	021a      	lsls	r2, r3, #8
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	430a      	orrs	r2, r1
 8009716:	61da      	str	r2, [r3, #28]
 8009718:	e001      	b.n	800971e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800971a:	2301      	movs	r3, #1
 800971c:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	2200      	movs	r2, #0
 8009722:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009726:	7dfb      	ldrb	r3, [r7, #23]
}
 8009728:	4618      	mov	r0, r3
 800972a:	3718      	adds	r7, #24
 800972c:	46bd      	mov	sp, r7
 800972e:	bd80      	pop	{r7, pc}

08009730 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009730:	b580      	push	{r7, lr}
 8009732:	b086      	sub	sp, #24
 8009734:	af00      	add	r7, sp, #0
 8009736:	60f8      	str	r0, [r7, #12]
 8009738:	60b9      	str	r1, [r7, #8]
 800973a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800973c:	2300      	movs	r3, #0
 800973e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009746:	2b01      	cmp	r3, #1
 8009748:	d101      	bne.n	800974e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800974a:	2302      	movs	r3, #2
 800974c:	e0ff      	b.n	800994e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	2201      	movs	r2, #1
 8009752:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	2b14      	cmp	r3, #20
 800975a:	f200 80f0 	bhi.w	800993e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800975e:	a201      	add	r2, pc, #4	; (adr r2, 8009764 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009760:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009764:	080097b9 	.word	0x080097b9
 8009768:	0800993f 	.word	0x0800993f
 800976c:	0800993f 	.word	0x0800993f
 8009770:	0800993f 	.word	0x0800993f
 8009774:	080097f9 	.word	0x080097f9
 8009778:	0800993f 	.word	0x0800993f
 800977c:	0800993f 	.word	0x0800993f
 8009780:	0800993f 	.word	0x0800993f
 8009784:	0800983b 	.word	0x0800983b
 8009788:	0800993f 	.word	0x0800993f
 800978c:	0800993f 	.word	0x0800993f
 8009790:	0800993f 	.word	0x0800993f
 8009794:	0800987b 	.word	0x0800987b
 8009798:	0800993f 	.word	0x0800993f
 800979c:	0800993f 	.word	0x0800993f
 80097a0:	0800993f 	.word	0x0800993f
 80097a4:	080098bd 	.word	0x080098bd
 80097a8:	0800993f 	.word	0x0800993f
 80097ac:	0800993f 	.word	0x0800993f
 80097b0:	0800993f 	.word	0x0800993f
 80097b4:	080098fd 	.word	0x080098fd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	68b9      	ldr	r1, [r7, #8]
 80097be:	4618      	mov	r0, r3
 80097c0:	f000 fab0 	bl	8009d24 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	699a      	ldr	r2, [r3, #24]
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	f042 0208 	orr.w	r2, r2, #8
 80097d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	699a      	ldr	r2, [r3, #24]
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	f022 0204 	bic.w	r2, r2, #4
 80097e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	6999      	ldr	r1, [r3, #24]
 80097ea:	68bb      	ldr	r3, [r7, #8]
 80097ec:	691a      	ldr	r2, [r3, #16]
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	430a      	orrs	r2, r1
 80097f4:	619a      	str	r2, [r3, #24]
      break;
 80097f6:	e0a5      	b.n	8009944 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	68b9      	ldr	r1, [r7, #8]
 80097fe:	4618      	mov	r0, r3
 8009800:	f000 fb2a 	bl	8009e58 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	699a      	ldr	r2, [r3, #24]
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009812:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	699a      	ldr	r2, [r3, #24]
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009822:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	6999      	ldr	r1, [r3, #24]
 800982a:	68bb      	ldr	r3, [r7, #8]
 800982c:	691b      	ldr	r3, [r3, #16]
 800982e:	021a      	lsls	r2, r3, #8
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	430a      	orrs	r2, r1
 8009836:	619a      	str	r2, [r3, #24]
      break;
 8009838:	e084      	b.n	8009944 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	68b9      	ldr	r1, [r7, #8]
 8009840:	4618      	mov	r0, r3
 8009842:	f000 fb9d 	bl	8009f80 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	69da      	ldr	r2, [r3, #28]
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	f042 0208 	orr.w	r2, r2, #8
 8009854:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	69da      	ldr	r2, [r3, #28]
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	f022 0204 	bic.w	r2, r2, #4
 8009864:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	69d9      	ldr	r1, [r3, #28]
 800986c:	68bb      	ldr	r3, [r7, #8]
 800986e:	691a      	ldr	r2, [r3, #16]
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	430a      	orrs	r2, r1
 8009876:	61da      	str	r2, [r3, #28]
      break;
 8009878:	e064      	b.n	8009944 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	68b9      	ldr	r1, [r7, #8]
 8009880:	4618      	mov	r0, r3
 8009882:	f000 fc0f 	bl	800a0a4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	69da      	ldr	r2, [r3, #28]
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009894:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	69da      	ldr	r2, [r3, #28]
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80098a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	69d9      	ldr	r1, [r3, #28]
 80098ac:	68bb      	ldr	r3, [r7, #8]
 80098ae:	691b      	ldr	r3, [r3, #16]
 80098b0:	021a      	lsls	r2, r3, #8
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	430a      	orrs	r2, r1
 80098b8:	61da      	str	r2, [r3, #28]
      break;
 80098ba:	e043      	b.n	8009944 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	68b9      	ldr	r1, [r7, #8]
 80098c2:	4618      	mov	r0, r3
 80098c4:	f000 fc82 	bl	800a1cc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	f042 0208 	orr.w	r2, r2, #8
 80098d6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	f022 0204 	bic.w	r2, r2, #4
 80098e6:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80098ee:	68bb      	ldr	r3, [r7, #8]
 80098f0:	691a      	ldr	r2, [r3, #16]
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	430a      	orrs	r2, r1
 80098f8:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80098fa:	e023      	b.n	8009944 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	68b9      	ldr	r1, [r7, #8]
 8009902:	4618      	mov	r0, r3
 8009904:	f000 fccc 	bl	800a2a0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009916:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009926:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800992e:	68bb      	ldr	r3, [r7, #8]
 8009930:	691b      	ldr	r3, [r3, #16]
 8009932:	021a      	lsls	r2, r3, #8
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	430a      	orrs	r2, r1
 800993a:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800993c:	e002      	b.n	8009944 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800993e:	2301      	movs	r3, #1
 8009940:	75fb      	strb	r3, [r7, #23]
      break;
 8009942:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	2200      	movs	r2, #0
 8009948:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800994c:	7dfb      	ldrb	r3, [r7, #23]
}
 800994e:	4618      	mov	r0, r3
 8009950:	3718      	adds	r7, #24
 8009952:	46bd      	mov	sp, r7
 8009954:	bd80      	pop	{r7, pc}
 8009956:	bf00      	nop

08009958 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009958:	b580      	push	{r7, lr}
 800995a:	b084      	sub	sp, #16
 800995c:	af00      	add	r7, sp, #0
 800995e:	6078      	str	r0, [r7, #4]
 8009960:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009962:	2300      	movs	r3, #0
 8009964:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800996c:	2b01      	cmp	r3, #1
 800996e:	d101      	bne.n	8009974 <HAL_TIM_ConfigClockSource+0x1c>
 8009970:	2302      	movs	r3, #2
 8009972:	e0f6      	b.n	8009b62 <HAL_TIM_ConfigClockSource+0x20a>
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	2201      	movs	r2, #1
 8009978:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	2202      	movs	r2, #2
 8009980:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	689b      	ldr	r3, [r3, #8]
 800998a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800998c:	68bb      	ldr	r3, [r7, #8]
 800998e:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8009992:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8009996:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009998:	68bb      	ldr	r3, [r7, #8]
 800999a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800999e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	68ba      	ldr	r2, [r7, #8]
 80099a6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80099a8:	683b      	ldr	r3, [r7, #0]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	4a6f      	ldr	r2, [pc, #444]	; (8009b6c <HAL_TIM_ConfigClockSource+0x214>)
 80099ae:	4293      	cmp	r3, r2
 80099b0:	f000 80c1 	beq.w	8009b36 <HAL_TIM_ConfigClockSource+0x1de>
 80099b4:	4a6d      	ldr	r2, [pc, #436]	; (8009b6c <HAL_TIM_ConfigClockSource+0x214>)
 80099b6:	4293      	cmp	r3, r2
 80099b8:	f200 80c6 	bhi.w	8009b48 <HAL_TIM_ConfigClockSource+0x1f0>
 80099bc:	4a6c      	ldr	r2, [pc, #432]	; (8009b70 <HAL_TIM_ConfigClockSource+0x218>)
 80099be:	4293      	cmp	r3, r2
 80099c0:	f000 80b9 	beq.w	8009b36 <HAL_TIM_ConfigClockSource+0x1de>
 80099c4:	4a6a      	ldr	r2, [pc, #424]	; (8009b70 <HAL_TIM_ConfigClockSource+0x218>)
 80099c6:	4293      	cmp	r3, r2
 80099c8:	f200 80be 	bhi.w	8009b48 <HAL_TIM_ConfigClockSource+0x1f0>
 80099cc:	4a69      	ldr	r2, [pc, #420]	; (8009b74 <HAL_TIM_ConfigClockSource+0x21c>)
 80099ce:	4293      	cmp	r3, r2
 80099d0:	f000 80b1 	beq.w	8009b36 <HAL_TIM_ConfigClockSource+0x1de>
 80099d4:	4a67      	ldr	r2, [pc, #412]	; (8009b74 <HAL_TIM_ConfigClockSource+0x21c>)
 80099d6:	4293      	cmp	r3, r2
 80099d8:	f200 80b6 	bhi.w	8009b48 <HAL_TIM_ConfigClockSource+0x1f0>
 80099dc:	4a66      	ldr	r2, [pc, #408]	; (8009b78 <HAL_TIM_ConfigClockSource+0x220>)
 80099de:	4293      	cmp	r3, r2
 80099e0:	f000 80a9 	beq.w	8009b36 <HAL_TIM_ConfigClockSource+0x1de>
 80099e4:	4a64      	ldr	r2, [pc, #400]	; (8009b78 <HAL_TIM_ConfigClockSource+0x220>)
 80099e6:	4293      	cmp	r3, r2
 80099e8:	f200 80ae 	bhi.w	8009b48 <HAL_TIM_ConfigClockSource+0x1f0>
 80099ec:	4a63      	ldr	r2, [pc, #396]	; (8009b7c <HAL_TIM_ConfigClockSource+0x224>)
 80099ee:	4293      	cmp	r3, r2
 80099f0:	f000 80a1 	beq.w	8009b36 <HAL_TIM_ConfigClockSource+0x1de>
 80099f4:	4a61      	ldr	r2, [pc, #388]	; (8009b7c <HAL_TIM_ConfigClockSource+0x224>)
 80099f6:	4293      	cmp	r3, r2
 80099f8:	f200 80a6 	bhi.w	8009b48 <HAL_TIM_ConfigClockSource+0x1f0>
 80099fc:	4a60      	ldr	r2, [pc, #384]	; (8009b80 <HAL_TIM_ConfigClockSource+0x228>)
 80099fe:	4293      	cmp	r3, r2
 8009a00:	f000 8099 	beq.w	8009b36 <HAL_TIM_ConfigClockSource+0x1de>
 8009a04:	4a5e      	ldr	r2, [pc, #376]	; (8009b80 <HAL_TIM_ConfigClockSource+0x228>)
 8009a06:	4293      	cmp	r3, r2
 8009a08:	f200 809e 	bhi.w	8009b48 <HAL_TIM_ConfigClockSource+0x1f0>
 8009a0c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8009a10:	f000 8091 	beq.w	8009b36 <HAL_TIM_ConfigClockSource+0x1de>
 8009a14:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8009a18:	f200 8096 	bhi.w	8009b48 <HAL_TIM_ConfigClockSource+0x1f0>
 8009a1c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009a20:	f000 8089 	beq.w	8009b36 <HAL_TIM_ConfigClockSource+0x1de>
 8009a24:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009a28:	f200 808e 	bhi.w	8009b48 <HAL_TIM_ConfigClockSource+0x1f0>
 8009a2c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009a30:	d03e      	beq.n	8009ab0 <HAL_TIM_ConfigClockSource+0x158>
 8009a32:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009a36:	f200 8087 	bhi.w	8009b48 <HAL_TIM_ConfigClockSource+0x1f0>
 8009a3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009a3e:	f000 8086 	beq.w	8009b4e <HAL_TIM_ConfigClockSource+0x1f6>
 8009a42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009a46:	d87f      	bhi.n	8009b48 <HAL_TIM_ConfigClockSource+0x1f0>
 8009a48:	2b70      	cmp	r3, #112	; 0x70
 8009a4a:	d01a      	beq.n	8009a82 <HAL_TIM_ConfigClockSource+0x12a>
 8009a4c:	2b70      	cmp	r3, #112	; 0x70
 8009a4e:	d87b      	bhi.n	8009b48 <HAL_TIM_ConfigClockSource+0x1f0>
 8009a50:	2b60      	cmp	r3, #96	; 0x60
 8009a52:	d050      	beq.n	8009af6 <HAL_TIM_ConfigClockSource+0x19e>
 8009a54:	2b60      	cmp	r3, #96	; 0x60
 8009a56:	d877      	bhi.n	8009b48 <HAL_TIM_ConfigClockSource+0x1f0>
 8009a58:	2b50      	cmp	r3, #80	; 0x50
 8009a5a:	d03c      	beq.n	8009ad6 <HAL_TIM_ConfigClockSource+0x17e>
 8009a5c:	2b50      	cmp	r3, #80	; 0x50
 8009a5e:	d873      	bhi.n	8009b48 <HAL_TIM_ConfigClockSource+0x1f0>
 8009a60:	2b40      	cmp	r3, #64	; 0x40
 8009a62:	d058      	beq.n	8009b16 <HAL_TIM_ConfigClockSource+0x1be>
 8009a64:	2b40      	cmp	r3, #64	; 0x40
 8009a66:	d86f      	bhi.n	8009b48 <HAL_TIM_ConfigClockSource+0x1f0>
 8009a68:	2b30      	cmp	r3, #48	; 0x30
 8009a6a:	d064      	beq.n	8009b36 <HAL_TIM_ConfigClockSource+0x1de>
 8009a6c:	2b30      	cmp	r3, #48	; 0x30
 8009a6e:	d86b      	bhi.n	8009b48 <HAL_TIM_ConfigClockSource+0x1f0>
 8009a70:	2b20      	cmp	r3, #32
 8009a72:	d060      	beq.n	8009b36 <HAL_TIM_ConfigClockSource+0x1de>
 8009a74:	2b20      	cmp	r3, #32
 8009a76:	d867      	bhi.n	8009b48 <HAL_TIM_ConfigClockSource+0x1f0>
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d05c      	beq.n	8009b36 <HAL_TIM_ConfigClockSource+0x1de>
 8009a7c:	2b10      	cmp	r3, #16
 8009a7e:	d05a      	beq.n	8009b36 <HAL_TIM_ConfigClockSource+0x1de>
 8009a80:	e062      	b.n	8009b48 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	6818      	ldr	r0, [r3, #0]
 8009a86:	683b      	ldr	r3, [r7, #0]
 8009a88:	6899      	ldr	r1, [r3, #8]
 8009a8a:	683b      	ldr	r3, [r7, #0]
 8009a8c:	685a      	ldr	r2, [r3, #4]
 8009a8e:	683b      	ldr	r3, [r7, #0]
 8009a90:	68db      	ldr	r3, [r3, #12]
 8009a92:	f000 fe17 	bl	800a6c4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	689b      	ldr	r3, [r3, #8]
 8009a9c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009a9e:	68bb      	ldr	r3, [r7, #8]
 8009aa0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009aa4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	68ba      	ldr	r2, [r7, #8]
 8009aac:	609a      	str	r2, [r3, #8]
      break;
 8009aae:	e04f      	b.n	8009b50 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	6818      	ldr	r0, [r3, #0]
 8009ab4:	683b      	ldr	r3, [r7, #0]
 8009ab6:	6899      	ldr	r1, [r3, #8]
 8009ab8:	683b      	ldr	r3, [r7, #0]
 8009aba:	685a      	ldr	r2, [r3, #4]
 8009abc:	683b      	ldr	r3, [r7, #0]
 8009abe:	68db      	ldr	r3, [r3, #12]
 8009ac0:	f000 fe00 	bl	800a6c4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	689a      	ldr	r2, [r3, #8]
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009ad2:	609a      	str	r2, [r3, #8]
      break;
 8009ad4:	e03c      	b.n	8009b50 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	6818      	ldr	r0, [r3, #0]
 8009ada:	683b      	ldr	r3, [r7, #0]
 8009adc:	6859      	ldr	r1, [r3, #4]
 8009ade:	683b      	ldr	r3, [r7, #0]
 8009ae0:	68db      	ldr	r3, [r3, #12]
 8009ae2:	461a      	mov	r2, r3
 8009ae4:	f000 fcbc 	bl	800a460 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	2150      	movs	r1, #80	; 0x50
 8009aee:	4618      	mov	r0, r3
 8009af0:	f000 fdcb 	bl	800a68a <TIM_ITRx_SetConfig>
      break;
 8009af4:	e02c      	b.n	8009b50 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	6818      	ldr	r0, [r3, #0]
 8009afa:	683b      	ldr	r3, [r7, #0]
 8009afc:	6859      	ldr	r1, [r3, #4]
 8009afe:	683b      	ldr	r3, [r7, #0]
 8009b00:	68db      	ldr	r3, [r3, #12]
 8009b02:	461a      	mov	r2, r3
 8009b04:	f000 fd18 	bl	800a538 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	2160      	movs	r1, #96	; 0x60
 8009b0e:	4618      	mov	r0, r3
 8009b10:	f000 fdbb 	bl	800a68a <TIM_ITRx_SetConfig>
      break;
 8009b14:	e01c      	b.n	8009b50 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	6818      	ldr	r0, [r3, #0]
 8009b1a:	683b      	ldr	r3, [r7, #0]
 8009b1c:	6859      	ldr	r1, [r3, #4]
 8009b1e:	683b      	ldr	r3, [r7, #0]
 8009b20:	68db      	ldr	r3, [r3, #12]
 8009b22:	461a      	mov	r2, r3
 8009b24:	f000 fc9c 	bl	800a460 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	2140      	movs	r1, #64	; 0x40
 8009b2e:	4618      	mov	r0, r3
 8009b30:	f000 fdab 	bl	800a68a <TIM_ITRx_SetConfig>
      break;
 8009b34:	e00c      	b.n	8009b50 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	681a      	ldr	r2, [r3, #0]
 8009b3a:	683b      	ldr	r3, [r7, #0]
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	4619      	mov	r1, r3
 8009b40:	4610      	mov	r0, r2
 8009b42:	f000 fda2 	bl	800a68a <TIM_ITRx_SetConfig>
      break;
 8009b46:	e003      	b.n	8009b50 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8009b48:	2301      	movs	r3, #1
 8009b4a:	73fb      	strb	r3, [r7, #15]
      break;
 8009b4c:	e000      	b.n	8009b50 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8009b4e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	2201      	movs	r2, #1
 8009b54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	2200      	movs	r2, #0
 8009b5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009b60:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b62:	4618      	mov	r0, r3
 8009b64:	3710      	adds	r7, #16
 8009b66:	46bd      	mov	sp, r7
 8009b68:	bd80      	pop	{r7, pc}
 8009b6a:	bf00      	nop
 8009b6c:	00100070 	.word	0x00100070
 8009b70:	00100060 	.word	0x00100060
 8009b74:	00100050 	.word	0x00100050
 8009b78:	00100040 	.word	0x00100040
 8009b7c:	00100030 	.word	0x00100030
 8009b80:	00100020 	.word	0x00100020

08009b84 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009b84:	b480      	push	{r7}
 8009b86:	b083      	sub	sp, #12
 8009b88:	af00      	add	r7, sp, #0
 8009b8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009b8c:	bf00      	nop
 8009b8e:	370c      	adds	r7, #12
 8009b90:	46bd      	mov	sp, r7
 8009b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b96:	4770      	bx	lr

08009b98 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009b98:	b480      	push	{r7}
 8009b9a:	b083      	sub	sp, #12
 8009b9c:	af00      	add	r7, sp, #0
 8009b9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009ba0:	bf00      	nop
 8009ba2:	370c      	adds	r7, #12
 8009ba4:	46bd      	mov	sp, r7
 8009ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009baa:	4770      	bx	lr

08009bac <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009bac:	b480      	push	{r7}
 8009bae:	b083      	sub	sp, #12
 8009bb0:	af00      	add	r7, sp, #0
 8009bb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009bb4:	bf00      	nop
 8009bb6:	370c      	adds	r7, #12
 8009bb8:	46bd      	mov	sp, r7
 8009bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bbe:	4770      	bx	lr

08009bc0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009bc0:	b480      	push	{r7}
 8009bc2:	b083      	sub	sp, #12
 8009bc4:	af00      	add	r7, sp, #0
 8009bc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009bc8:	bf00      	nop
 8009bca:	370c      	adds	r7, #12
 8009bcc:	46bd      	mov	sp, r7
 8009bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bd2:	4770      	bx	lr

08009bd4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009bd4:	b480      	push	{r7}
 8009bd6:	b085      	sub	sp, #20
 8009bd8:	af00      	add	r7, sp, #0
 8009bda:	6078      	str	r0, [r7, #4]
 8009bdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	4a46      	ldr	r2, [pc, #280]	; (8009d00 <TIM_Base_SetConfig+0x12c>)
 8009be8:	4293      	cmp	r3, r2
 8009bea:	d017      	beq.n	8009c1c <TIM_Base_SetConfig+0x48>
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009bf2:	d013      	beq.n	8009c1c <TIM_Base_SetConfig+0x48>
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	4a43      	ldr	r2, [pc, #268]	; (8009d04 <TIM_Base_SetConfig+0x130>)
 8009bf8:	4293      	cmp	r3, r2
 8009bfa:	d00f      	beq.n	8009c1c <TIM_Base_SetConfig+0x48>
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	4a42      	ldr	r2, [pc, #264]	; (8009d08 <TIM_Base_SetConfig+0x134>)
 8009c00:	4293      	cmp	r3, r2
 8009c02:	d00b      	beq.n	8009c1c <TIM_Base_SetConfig+0x48>
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	4a41      	ldr	r2, [pc, #260]	; (8009d0c <TIM_Base_SetConfig+0x138>)
 8009c08:	4293      	cmp	r3, r2
 8009c0a:	d007      	beq.n	8009c1c <TIM_Base_SetConfig+0x48>
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	4a40      	ldr	r2, [pc, #256]	; (8009d10 <TIM_Base_SetConfig+0x13c>)
 8009c10:	4293      	cmp	r3, r2
 8009c12:	d003      	beq.n	8009c1c <TIM_Base_SetConfig+0x48>
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	4a3f      	ldr	r2, [pc, #252]	; (8009d14 <TIM_Base_SetConfig+0x140>)
 8009c18:	4293      	cmp	r3, r2
 8009c1a:	d108      	bne.n	8009c2e <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009c22:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009c24:	683b      	ldr	r3, [r7, #0]
 8009c26:	685b      	ldr	r3, [r3, #4]
 8009c28:	68fa      	ldr	r2, [r7, #12]
 8009c2a:	4313      	orrs	r3, r2
 8009c2c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	4a33      	ldr	r2, [pc, #204]	; (8009d00 <TIM_Base_SetConfig+0x12c>)
 8009c32:	4293      	cmp	r3, r2
 8009c34:	d023      	beq.n	8009c7e <TIM_Base_SetConfig+0xaa>
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009c3c:	d01f      	beq.n	8009c7e <TIM_Base_SetConfig+0xaa>
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	4a30      	ldr	r2, [pc, #192]	; (8009d04 <TIM_Base_SetConfig+0x130>)
 8009c42:	4293      	cmp	r3, r2
 8009c44:	d01b      	beq.n	8009c7e <TIM_Base_SetConfig+0xaa>
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	4a2f      	ldr	r2, [pc, #188]	; (8009d08 <TIM_Base_SetConfig+0x134>)
 8009c4a:	4293      	cmp	r3, r2
 8009c4c:	d017      	beq.n	8009c7e <TIM_Base_SetConfig+0xaa>
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	4a2e      	ldr	r2, [pc, #184]	; (8009d0c <TIM_Base_SetConfig+0x138>)
 8009c52:	4293      	cmp	r3, r2
 8009c54:	d013      	beq.n	8009c7e <TIM_Base_SetConfig+0xaa>
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	4a2d      	ldr	r2, [pc, #180]	; (8009d10 <TIM_Base_SetConfig+0x13c>)
 8009c5a:	4293      	cmp	r3, r2
 8009c5c:	d00f      	beq.n	8009c7e <TIM_Base_SetConfig+0xaa>
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	4a2d      	ldr	r2, [pc, #180]	; (8009d18 <TIM_Base_SetConfig+0x144>)
 8009c62:	4293      	cmp	r3, r2
 8009c64:	d00b      	beq.n	8009c7e <TIM_Base_SetConfig+0xaa>
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	4a2c      	ldr	r2, [pc, #176]	; (8009d1c <TIM_Base_SetConfig+0x148>)
 8009c6a:	4293      	cmp	r3, r2
 8009c6c:	d007      	beq.n	8009c7e <TIM_Base_SetConfig+0xaa>
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	4a2b      	ldr	r2, [pc, #172]	; (8009d20 <TIM_Base_SetConfig+0x14c>)
 8009c72:	4293      	cmp	r3, r2
 8009c74:	d003      	beq.n	8009c7e <TIM_Base_SetConfig+0xaa>
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	4a26      	ldr	r2, [pc, #152]	; (8009d14 <TIM_Base_SetConfig+0x140>)
 8009c7a:	4293      	cmp	r3, r2
 8009c7c:	d108      	bne.n	8009c90 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009c84:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009c86:	683b      	ldr	r3, [r7, #0]
 8009c88:	68db      	ldr	r3, [r3, #12]
 8009c8a:	68fa      	ldr	r2, [r7, #12]
 8009c8c:	4313      	orrs	r3, r2
 8009c8e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009c96:	683b      	ldr	r3, [r7, #0]
 8009c98:	695b      	ldr	r3, [r3, #20]
 8009c9a:	4313      	orrs	r3, r2
 8009c9c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	68fa      	ldr	r2, [r7, #12]
 8009ca2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009ca4:	683b      	ldr	r3, [r7, #0]
 8009ca6:	689a      	ldr	r2, [r3, #8]
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009cac:	683b      	ldr	r3, [r7, #0]
 8009cae:	681a      	ldr	r2, [r3, #0]
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	4a12      	ldr	r2, [pc, #72]	; (8009d00 <TIM_Base_SetConfig+0x12c>)
 8009cb8:	4293      	cmp	r3, r2
 8009cba:	d013      	beq.n	8009ce4 <TIM_Base_SetConfig+0x110>
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	4a14      	ldr	r2, [pc, #80]	; (8009d10 <TIM_Base_SetConfig+0x13c>)
 8009cc0:	4293      	cmp	r3, r2
 8009cc2:	d00f      	beq.n	8009ce4 <TIM_Base_SetConfig+0x110>
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	4a14      	ldr	r2, [pc, #80]	; (8009d18 <TIM_Base_SetConfig+0x144>)
 8009cc8:	4293      	cmp	r3, r2
 8009cca:	d00b      	beq.n	8009ce4 <TIM_Base_SetConfig+0x110>
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	4a13      	ldr	r2, [pc, #76]	; (8009d1c <TIM_Base_SetConfig+0x148>)
 8009cd0:	4293      	cmp	r3, r2
 8009cd2:	d007      	beq.n	8009ce4 <TIM_Base_SetConfig+0x110>
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	4a12      	ldr	r2, [pc, #72]	; (8009d20 <TIM_Base_SetConfig+0x14c>)
 8009cd8:	4293      	cmp	r3, r2
 8009cda:	d003      	beq.n	8009ce4 <TIM_Base_SetConfig+0x110>
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	4a0d      	ldr	r2, [pc, #52]	; (8009d14 <TIM_Base_SetConfig+0x140>)
 8009ce0:	4293      	cmp	r3, r2
 8009ce2:	d103      	bne.n	8009cec <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009ce4:	683b      	ldr	r3, [r7, #0]
 8009ce6:	691a      	ldr	r2, [r3, #16]
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	2201      	movs	r2, #1
 8009cf0:	615a      	str	r2, [r3, #20]
}
 8009cf2:	bf00      	nop
 8009cf4:	3714      	adds	r7, #20
 8009cf6:	46bd      	mov	sp, r7
 8009cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cfc:	4770      	bx	lr
 8009cfe:	bf00      	nop
 8009d00:	40012c00 	.word	0x40012c00
 8009d04:	40000400 	.word	0x40000400
 8009d08:	40000800 	.word	0x40000800
 8009d0c:	40000c00 	.word	0x40000c00
 8009d10:	40013400 	.word	0x40013400
 8009d14:	40015000 	.word	0x40015000
 8009d18:	40014000 	.word	0x40014000
 8009d1c:	40014400 	.word	0x40014400
 8009d20:	40014800 	.word	0x40014800

08009d24 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009d24:	b480      	push	{r7}
 8009d26:	b087      	sub	sp, #28
 8009d28:	af00      	add	r7, sp, #0
 8009d2a:	6078      	str	r0, [r7, #4]
 8009d2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	6a1b      	ldr	r3, [r3, #32]
 8009d32:	f023 0201 	bic.w	r2, r3, #1
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	6a1b      	ldr	r3, [r3, #32]
 8009d3e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	685b      	ldr	r3, [r3, #4]
 8009d44:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	699b      	ldr	r3, [r3, #24]
 8009d4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009d4c:	68fb      	ldr	r3, [r7, #12]
 8009d4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009d52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009d56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	f023 0303 	bic.w	r3, r3, #3
 8009d5e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009d60:	683b      	ldr	r3, [r7, #0]
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	68fa      	ldr	r2, [r7, #12]
 8009d66:	4313      	orrs	r3, r2
 8009d68:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009d6a:	697b      	ldr	r3, [r7, #20]
 8009d6c:	f023 0302 	bic.w	r3, r3, #2
 8009d70:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009d72:	683b      	ldr	r3, [r7, #0]
 8009d74:	689b      	ldr	r3, [r3, #8]
 8009d76:	697a      	ldr	r2, [r7, #20]
 8009d78:	4313      	orrs	r3, r2
 8009d7a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	4a30      	ldr	r2, [pc, #192]	; (8009e40 <TIM_OC1_SetConfig+0x11c>)
 8009d80:	4293      	cmp	r3, r2
 8009d82:	d013      	beq.n	8009dac <TIM_OC1_SetConfig+0x88>
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	4a2f      	ldr	r2, [pc, #188]	; (8009e44 <TIM_OC1_SetConfig+0x120>)
 8009d88:	4293      	cmp	r3, r2
 8009d8a:	d00f      	beq.n	8009dac <TIM_OC1_SetConfig+0x88>
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	4a2e      	ldr	r2, [pc, #184]	; (8009e48 <TIM_OC1_SetConfig+0x124>)
 8009d90:	4293      	cmp	r3, r2
 8009d92:	d00b      	beq.n	8009dac <TIM_OC1_SetConfig+0x88>
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	4a2d      	ldr	r2, [pc, #180]	; (8009e4c <TIM_OC1_SetConfig+0x128>)
 8009d98:	4293      	cmp	r3, r2
 8009d9a:	d007      	beq.n	8009dac <TIM_OC1_SetConfig+0x88>
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	4a2c      	ldr	r2, [pc, #176]	; (8009e50 <TIM_OC1_SetConfig+0x12c>)
 8009da0:	4293      	cmp	r3, r2
 8009da2:	d003      	beq.n	8009dac <TIM_OC1_SetConfig+0x88>
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	4a2b      	ldr	r2, [pc, #172]	; (8009e54 <TIM_OC1_SetConfig+0x130>)
 8009da8:	4293      	cmp	r3, r2
 8009daa:	d10c      	bne.n	8009dc6 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009dac:	697b      	ldr	r3, [r7, #20]
 8009dae:	f023 0308 	bic.w	r3, r3, #8
 8009db2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009db4:	683b      	ldr	r3, [r7, #0]
 8009db6:	68db      	ldr	r3, [r3, #12]
 8009db8:	697a      	ldr	r2, [r7, #20]
 8009dba:	4313      	orrs	r3, r2
 8009dbc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009dbe:	697b      	ldr	r3, [r7, #20]
 8009dc0:	f023 0304 	bic.w	r3, r3, #4
 8009dc4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	4a1d      	ldr	r2, [pc, #116]	; (8009e40 <TIM_OC1_SetConfig+0x11c>)
 8009dca:	4293      	cmp	r3, r2
 8009dcc:	d013      	beq.n	8009df6 <TIM_OC1_SetConfig+0xd2>
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	4a1c      	ldr	r2, [pc, #112]	; (8009e44 <TIM_OC1_SetConfig+0x120>)
 8009dd2:	4293      	cmp	r3, r2
 8009dd4:	d00f      	beq.n	8009df6 <TIM_OC1_SetConfig+0xd2>
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	4a1b      	ldr	r2, [pc, #108]	; (8009e48 <TIM_OC1_SetConfig+0x124>)
 8009dda:	4293      	cmp	r3, r2
 8009ddc:	d00b      	beq.n	8009df6 <TIM_OC1_SetConfig+0xd2>
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	4a1a      	ldr	r2, [pc, #104]	; (8009e4c <TIM_OC1_SetConfig+0x128>)
 8009de2:	4293      	cmp	r3, r2
 8009de4:	d007      	beq.n	8009df6 <TIM_OC1_SetConfig+0xd2>
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	4a19      	ldr	r2, [pc, #100]	; (8009e50 <TIM_OC1_SetConfig+0x12c>)
 8009dea:	4293      	cmp	r3, r2
 8009dec:	d003      	beq.n	8009df6 <TIM_OC1_SetConfig+0xd2>
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	4a18      	ldr	r2, [pc, #96]	; (8009e54 <TIM_OC1_SetConfig+0x130>)
 8009df2:	4293      	cmp	r3, r2
 8009df4:	d111      	bne.n	8009e1a <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009df6:	693b      	ldr	r3, [r7, #16]
 8009df8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009dfc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009dfe:	693b      	ldr	r3, [r7, #16]
 8009e00:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009e04:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009e06:	683b      	ldr	r3, [r7, #0]
 8009e08:	695b      	ldr	r3, [r3, #20]
 8009e0a:	693a      	ldr	r2, [r7, #16]
 8009e0c:	4313      	orrs	r3, r2
 8009e0e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009e10:	683b      	ldr	r3, [r7, #0]
 8009e12:	699b      	ldr	r3, [r3, #24]
 8009e14:	693a      	ldr	r2, [r7, #16]
 8009e16:	4313      	orrs	r3, r2
 8009e18:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	693a      	ldr	r2, [r7, #16]
 8009e1e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	68fa      	ldr	r2, [r7, #12]
 8009e24:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009e26:	683b      	ldr	r3, [r7, #0]
 8009e28:	685a      	ldr	r2, [r3, #4]
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	697a      	ldr	r2, [r7, #20]
 8009e32:	621a      	str	r2, [r3, #32]
}
 8009e34:	bf00      	nop
 8009e36:	371c      	adds	r7, #28
 8009e38:	46bd      	mov	sp, r7
 8009e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e3e:	4770      	bx	lr
 8009e40:	40012c00 	.word	0x40012c00
 8009e44:	40013400 	.word	0x40013400
 8009e48:	40014000 	.word	0x40014000
 8009e4c:	40014400 	.word	0x40014400
 8009e50:	40014800 	.word	0x40014800
 8009e54:	40015000 	.word	0x40015000

08009e58 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009e58:	b480      	push	{r7}
 8009e5a:	b087      	sub	sp, #28
 8009e5c:	af00      	add	r7, sp, #0
 8009e5e:	6078      	str	r0, [r7, #4]
 8009e60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	6a1b      	ldr	r3, [r3, #32]
 8009e66:	f023 0210 	bic.w	r2, r3, #16
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	6a1b      	ldr	r3, [r3, #32]
 8009e72:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	685b      	ldr	r3, [r3, #4]
 8009e78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	699b      	ldr	r3, [r3, #24]
 8009e7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009e86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009e8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009e92:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009e94:	683b      	ldr	r3, [r7, #0]
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	021b      	lsls	r3, r3, #8
 8009e9a:	68fa      	ldr	r2, [r7, #12]
 8009e9c:	4313      	orrs	r3, r2
 8009e9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009ea0:	697b      	ldr	r3, [r7, #20]
 8009ea2:	f023 0320 	bic.w	r3, r3, #32
 8009ea6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009ea8:	683b      	ldr	r3, [r7, #0]
 8009eaa:	689b      	ldr	r3, [r3, #8]
 8009eac:	011b      	lsls	r3, r3, #4
 8009eae:	697a      	ldr	r2, [r7, #20]
 8009eb0:	4313      	orrs	r3, r2
 8009eb2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	4a2c      	ldr	r2, [pc, #176]	; (8009f68 <TIM_OC2_SetConfig+0x110>)
 8009eb8:	4293      	cmp	r3, r2
 8009eba:	d007      	beq.n	8009ecc <TIM_OC2_SetConfig+0x74>
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	4a2b      	ldr	r2, [pc, #172]	; (8009f6c <TIM_OC2_SetConfig+0x114>)
 8009ec0:	4293      	cmp	r3, r2
 8009ec2:	d003      	beq.n	8009ecc <TIM_OC2_SetConfig+0x74>
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	4a2a      	ldr	r2, [pc, #168]	; (8009f70 <TIM_OC2_SetConfig+0x118>)
 8009ec8:	4293      	cmp	r3, r2
 8009eca:	d10d      	bne.n	8009ee8 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009ecc:	697b      	ldr	r3, [r7, #20]
 8009ece:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009ed2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009ed4:	683b      	ldr	r3, [r7, #0]
 8009ed6:	68db      	ldr	r3, [r3, #12]
 8009ed8:	011b      	lsls	r3, r3, #4
 8009eda:	697a      	ldr	r2, [r7, #20]
 8009edc:	4313      	orrs	r3, r2
 8009ede:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009ee0:	697b      	ldr	r3, [r7, #20]
 8009ee2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009ee6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	4a1f      	ldr	r2, [pc, #124]	; (8009f68 <TIM_OC2_SetConfig+0x110>)
 8009eec:	4293      	cmp	r3, r2
 8009eee:	d013      	beq.n	8009f18 <TIM_OC2_SetConfig+0xc0>
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	4a1e      	ldr	r2, [pc, #120]	; (8009f6c <TIM_OC2_SetConfig+0x114>)
 8009ef4:	4293      	cmp	r3, r2
 8009ef6:	d00f      	beq.n	8009f18 <TIM_OC2_SetConfig+0xc0>
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	4a1e      	ldr	r2, [pc, #120]	; (8009f74 <TIM_OC2_SetConfig+0x11c>)
 8009efc:	4293      	cmp	r3, r2
 8009efe:	d00b      	beq.n	8009f18 <TIM_OC2_SetConfig+0xc0>
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	4a1d      	ldr	r2, [pc, #116]	; (8009f78 <TIM_OC2_SetConfig+0x120>)
 8009f04:	4293      	cmp	r3, r2
 8009f06:	d007      	beq.n	8009f18 <TIM_OC2_SetConfig+0xc0>
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	4a1c      	ldr	r2, [pc, #112]	; (8009f7c <TIM_OC2_SetConfig+0x124>)
 8009f0c:	4293      	cmp	r3, r2
 8009f0e:	d003      	beq.n	8009f18 <TIM_OC2_SetConfig+0xc0>
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	4a17      	ldr	r2, [pc, #92]	; (8009f70 <TIM_OC2_SetConfig+0x118>)
 8009f14:	4293      	cmp	r3, r2
 8009f16:	d113      	bne.n	8009f40 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009f18:	693b      	ldr	r3, [r7, #16]
 8009f1a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009f1e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009f20:	693b      	ldr	r3, [r7, #16]
 8009f22:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009f26:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009f28:	683b      	ldr	r3, [r7, #0]
 8009f2a:	695b      	ldr	r3, [r3, #20]
 8009f2c:	009b      	lsls	r3, r3, #2
 8009f2e:	693a      	ldr	r2, [r7, #16]
 8009f30:	4313      	orrs	r3, r2
 8009f32:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009f34:	683b      	ldr	r3, [r7, #0]
 8009f36:	699b      	ldr	r3, [r3, #24]
 8009f38:	009b      	lsls	r3, r3, #2
 8009f3a:	693a      	ldr	r2, [r7, #16]
 8009f3c:	4313      	orrs	r3, r2
 8009f3e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	693a      	ldr	r2, [r7, #16]
 8009f44:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	68fa      	ldr	r2, [r7, #12]
 8009f4a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009f4c:	683b      	ldr	r3, [r7, #0]
 8009f4e:	685a      	ldr	r2, [r3, #4]
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	697a      	ldr	r2, [r7, #20]
 8009f58:	621a      	str	r2, [r3, #32]
}
 8009f5a:	bf00      	nop
 8009f5c:	371c      	adds	r7, #28
 8009f5e:	46bd      	mov	sp, r7
 8009f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f64:	4770      	bx	lr
 8009f66:	bf00      	nop
 8009f68:	40012c00 	.word	0x40012c00
 8009f6c:	40013400 	.word	0x40013400
 8009f70:	40015000 	.word	0x40015000
 8009f74:	40014000 	.word	0x40014000
 8009f78:	40014400 	.word	0x40014400
 8009f7c:	40014800 	.word	0x40014800

08009f80 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009f80:	b480      	push	{r7}
 8009f82:	b087      	sub	sp, #28
 8009f84:	af00      	add	r7, sp, #0
 8009f86:	6078      	str	r0, [r7, #4]
 8009f88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	6a1b      	ldr	r3, [r3, #32]
 8009f8e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	6a1b      	ldr	r3, [r3, #32]
 8009f9a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	685b      	ldr	r3, [r3, #4]
 8009fa0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	69db      	ldr	r3, [r3, #28]
 8009fa6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009fae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009fb2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	f023 0303 	bic.w	r3, r3, #3
 8009fba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009fbc:	683b      	ldr	r3, [r7, #0]
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	68fa      	ldr	r2, [r7, #12]
 8009fc2:	4313      	orrs	r3, r2
 8009fc4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009fc6:	697b      	ldr	r3, [r7, #20]
 8009fc8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009fcc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009fce:	683b      	ldr	r3, [r7, #0]
 8009fd0:	689b      	ldr	r3, [r3, #8]
 8009fd2:	021b      	lsls	r3, r3, #8
 8009fd4:	697a      	ldr	r2, [r7, #20]
 8009fd6:	4313      	orrs	r3, r2
 8009fd8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	4a2b      	ldr	r2, [pc, #172]	; (800a08c <TIM_OC3_SetConfig+0x10c>)
 8009fde:	4293      	cmp	r3, r2
 8009fe0:	d007      	beq.n	8009ff2 <TIM_OC3_SetConfig+0x72>
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	4a2a      	ldr	r2, [pc, #168]	; (800a090 <TIM_OC3_SetConfig+0x110>)
 8009fe6:	4293      	cmp	r3, r2
 8009fe8:	d003      	beq.n	8009ff2 <TIM_OC3_SetConfig+0x72>
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	4a29      	ldr	r2, [pc, #164]	; (800a094 <TIM_OC3_SetConfig+0x114>)
 8009fee:	4293      	cmp	r3, r2
 8009ff0:	d10d      	bne.n	800a00e <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009ff2:	697b      	ldr	r3, [r7, #20]
 8009ff4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009ff8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009ffa:	683b      	ldr	r3, [r7, #0]
 8009ffc:	68db      	ldr	r3, [r3, #12]
 8009ffe:	021b      	lsls	r3, r3, #8
 800a000:	697a      	ldr	r2, [r7, #20]
 800a002:	4313      	orrs	r3, r2
 800a004:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a006:	697b      	ldr	r3, [r7, #20]
 800a008:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a00c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	4a1e      	ldr	r2, [pc, #120]	; (800a08c <TIM_OC3_SetConfig+0x10c>)
 800a012:	4293      	cmp	r3, r2
 800a014:	d013      	beq.n	800a03e <TIM_OC3_SetConfig+0xbe>
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	4a1d      	ldr	r2, [pc, #116]	; (800a090 <TIM_OC3_SetConfig+0x110>)
 800a01a:	4293      	cmp	r3, r2
 800a01c:	d00f      	beq.n	800a03e <TIM_OC3_SetConfig+0xbe>
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	4a1d      	ldr	r2, [pc, #116]	; (800a098 <TIM_OC3_SetConfig+0x118>)
 800a022:	4293      	cmp	r3, r2
 800a024:	d00b      	beq.n	800a03e <TIM_OC3_SetConfig+0xbe>
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	4a1c      	ldr	r2, [pc, #112]	; (800a09c <TIM_OC3_SetConfig+0x11c>)
 800a02a:	4293      	cmp	r3, r2
 800a02c:	d007      	beq.n	800a03e <TIM_OC3_SetConfig+0xbe>
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	4a1b      	ldr	r2, [pc, #108]	; (800a0a0 <TIM_OC3_SetConfig+0x120>)
 800a032:	4293      	cmp	r3, r2
 800a034:	d003      	beq.n	800a03e <TIM_OC3_SetConfig+0xbe>
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	4a16      	ldr	r2, [pc, #88]	; (800a094 <TIM_OC3_SetConfig+0x114>)
 800a03a:	4293      	cmp	r3, r2
 800a03c:	d113      	bne.n	800a066 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a03e:	693b      	ldr	r3, [r7, #16]
 800a040:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a044:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a046:	693b      	ldr	r3, [r7, #16]
 800a048:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a04c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a04e:	683b      	ldr	r3, [r7, #0]
 800a050:	695b      	ldr	r3, [r3, #20]
 800a052:	011b      	lsls	r3, r3, #4
 800a054:	693a      	ldr	r2, [r7, #16]
 800a056:	4313      	orrs	r3, r2
 800a058:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a05a:	683b      	ldr	r3, [r7, #0]
 800a05c:	699b      	ldr	r3, [r3, #24]
 800a05e:	011b      	lsls	r3, r3, #4
 800a060:	693a      	ldr	r2, [r7, #16]
 800a062:	4313      	orrs	r3, r2
 800a064:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	693a      	ldr	r2, [r7, #16]
 800a06a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	68fa      	ldr	r2, [r7, #12]
 800a070:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a072:	683b      	ldr	r3, [r7, #0]
 800a074:	685a      	ldr	r2, [r3, #4]
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	697a      	ldr	r2, [r7, #20]
 800a07e:	621a      	str	r2, [r3, #32]
}
 800a080:	bf00      	nop
 800a082:	371c      	adds	r7, #28
 800a084:	46bd      	mov	sp, r7
 800a086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a08a:	4770      	bx	lr
 800a08c:	40012c00 	.word	0x40012c00
 800a090:	40013400 	.word	0x40013400
 800a094:	40015000 	.word	0x40015000
 800a098:	40014000 	.word	0x40014000
 800a09c:	40014400 	.word	0x40014400
 800a0a0:	40014800 	.word	0x40014800

0800a0a4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a0a4:	b480      	push	{r7}
 800a0a6:	b087      	sub	sp, #28
 800a0a8:	af00      	add	r7, sp, #0
 800a0aa:	6078      	str	r0, [r7, #4]
 800a0ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	6a1b      	ldr	r3, [r3, #32]
 800a0b2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	6a1b      	ldr	r3, [r3, #32]
 800a0be:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	685b      	ldr	r3, [r3, #4]
 800a0c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	69db      	ldr	r3, [r3, #28]
 800a0ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a0d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a0d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a0de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a0e0:	683b      	ldr	r3, [r7, #0]
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	021b      	lsls	r3, r3, #8
 800a0e6:	68fa      	ldr	r2, [r7, #12]
 800a0e8:	4313      	orrs	r3, r2
 800a0ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a0ec:	697b      	ldr	r3, [r7, #20]
 800a0ee:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a0f2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a0f4:	683b      	ldr	r3, [r7, #0]
 800a0f6:	689b      	ldr	r3, [r3, #8]
 800a0f8:	031b      	lsls	r3, r3, #12
 800a0fa:	697a      	ldr	r2, [r7, #20]
 800a0fc:	4313      	orrs	r3, r2
 800a0fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	4a2c      	ldr	r2, [pc, #176]	; (800a1b4 <TIM_OC4_SetConfig+0x110>)
 800a104:	4293      	cmp	r3, r2
 800a106:	d007      	beq.n	800a118 <TIM_OC4_SetConfig+0x74>
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	4a2b      	ldr	r2, [pc, #172]	; (800a1b8 <TIM_OC4_SetConfig+0x114>)
 800a10c:	4293      	cmp	r3, r2
 800a10e:	d003      	beq.n	800a118 <TIM_OC4_SetConfig+0x74>
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	4a2a      	ldr	r2, [pc, #168]	; (800a1bc <TIM_OC4_SetConfig+0x118>)
 800a114:	4293      	cmp	r3, r2
 800a116:	d10d      	bne.n	800a134 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800a118:	697b      	ldr	r3, [r7, #20]
 800a11a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a11e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800a120:	683b      	ldr	r3, [r7, #0]
 800a122:	68db      	ldr	r3, [r3, #12]
 800a124:	031b      	lsls	r3, r3, #12
 800a126:	697a      	ldr	r2, [r7, #20]
 800a128:	4313      	orrs	r3, r2
 800a12a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800a12c:	697b      	ldr	r3, [r7, #20]
 800a12e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a132:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	4a1f      	ldr	r2, [pc, #124]	; (800a1b4 <TIM_OC4_SetConfig+0x110>)
 800a138:	4293      	cmp	r3, r2
 800a13a:	d013      	beq.n	800a164 <TIM_OC4_SetConfig+0xc0>
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	4a1e      	ldr	r2, [pc, #120]	; (800a1b8 <TIM_OC4_SetConfig+0x114>)
 800a140:	4293      	cmp	r3, r2
 800a142:	d00f      	beq.n	800a164 <TIM_OC4_SetConfig+0xc0>
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	4a1e      	ldr	r2, [pc, #120]	; (800a1c0 <TIM_OC4_SetConfig+0x11c>)
 800a148:	4293      	cmp	r3, r2
 800a14a:	d00b      	beq.n	800a164 <TIM_OC4_SetConfig+0xc0>
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	4a1d      	ldr	r2, [pc, #116]	; (800a1c4 <TIM_OC4_SetConfig+0x120>)
 800a150:	4293      	cmp	r3, r2
 800a152:	d007      	beq.n	800a164 <TIM_OC4_SetConfig+0xc0>
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	4a1c      	ldr	r2, [pc, #112]	; (800a1c8 <TIM_OC4_SetConfig+0x124>)
 800a158:	4293      	cmp	r3, r2
 800a15a:	d003      	beq.n	800a164 <TIM_OC4_SetConfig+0xc0>
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	4a17      	ldr	r2, [pc, #92]	; (800a1bc <TIM_OC4_SetConfig+0x118>)
 800a160:	4293      	cmp	r3, r2
 800a162:	d113      	bne.n	800a18c <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a164:	693b      	ldr	r3, [r7, #16]
 800a166:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a16a:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800a16c:	693b      	ldr	r3, [r7, #16]
 800a16e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a172:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a174:	683b      	ldr	r3, [r7, #0]
 800a176:	695b      	ldr	r3, [r3, #20]
 800a178:	019b      	lsls	r3, r3, #6
 800a17a:	693a      	ldr	r2, [r7, #16]
 800a17c:	4313      	orrs	r3, r2
 800a17e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800a180:	683b      	ldr	r3, [r7, #0]
 800a182:	699b      	ldr	r3, [r3, #24]
 800a184:	019b      	lsls	r3, r3, #6
 800a186:	693a      	ldr	r2, [r7, #16]
 800a188:	4313      	orrs	r3, r2
 800a18a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	693a      	ldr	r2, [r7, #16]
 800a190:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	68fa      	ldr	r2, [r7, #12]
 800a196:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a198:	683b      	ldr	r3, [r7, #0]
 800a19a:	685a      	ldr	r2, [r3, #4]
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	697a      	ldr	r2, [r7, #20]
 800a1a4:	621a      	str	r2, [r3, #32]
}
 800a1a6:	bf00      	nop
 800a1a8:	371c      	adds	r7, #28
 800a1aa:	46bd      	mov	sp, r7
 800a1ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1b0:	4770      	bx	lr
 800a1b2:	bf00      	nop
 800a1b4:	40012c00 	.word	0x40012c00
 800a1b8:	40013400 	.word	0x40013400
 800a1bc:	40015000 	.word	0x40015000
 800a1c0:	40014000 	.word	0x40014000
 800a1c4:	40014400 	.word	0x40014400
 800a1c8:	40014800 	.word	0x40014800

0800a1cc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800a1cc:	b480      	push	{r7}
 800a1ce:	b087      	sub	sp, #28
 800a1d0:	af00      	add	r7, sp, #0
 800a1d2:	6078      	str	r0, [r7, #4]
 800a1d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	6a1b      	ldr	r3, [r3, #32]
 800a1da:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	6a1b      	ldr	r3, [r3, #32]
 800a1e6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	685b      	ldr	r3, [r3, #4]
 800a1ec:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a1f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a1fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a1fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a200:	683b      	ldr	r3, [r7, #0]
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	68fa      	ldr	r2, [r7, #12]
 800a206:	4313      	orrs	r3, r2
 800a208:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800a20a:	693b      	ldr	r3, [r7, #16]
 800a20c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800a210:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800a212:	683b      	ldr	r3, [r7, #0]
 800a214:	689b      	ldr	r3, [r3, #8]
 800a216:	041b      	lsls	r3, r3, #16
 800a218:	693a      	ldr	r2, [r7, #16]
 800a21a:	4313      	orrs	r3, r2
 800a21c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	4a19      	ldr	r2, [pc, #100]	; (800a288 <TIM_OC5_SetConfig+0xbc>)
 800a222:	4293      	cmp	r3, r2
 800a224:	d013      	beq.n	800a24e <TIM_OC5_SetConfig+0x82>
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	4a18      	ldr	r2, [pc, #96]	; (800a28c <TIM_OC5_SetConfig+0xc0>)
 800a22a:	4293      	cmp	r3, r2
 800a22c:	d00f      	beq.n	800a24e <TIM_OC5_SetConfig+0x82>
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	4a17      	ldr	r2, [pc, #92]	; (800a290 <TIM_OC5_SetConfig+0xc4>)
 800a232:	4293      	cmp	r3, r2
 800a234:	d00b      	beq.n	800a24e <TIM_OC5_SetConfig+0x82>
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	4a16      	ldr	r2, [pc, #88]	; (800a294 <TIM_OC5_SetConfig+0xc8>)
 800a23a:	4293      	cmp	r3, r2
 800a23c:	d007      	beq.n	800a24e <TIM_OC5_SetConfig+0x82>
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	4a15      	ldr	r2, [pc, #84]	; (800a298 <TIM_OC5_SetConfig+0xcc>)
 800a242:	4293      	cmp	r3, r2
 800a244:	d003      	beq.n	800a24e <TIM_OC5_SetConfig+0x82>
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	4a14      	ldr	r2, [pc, #80]	; (800a29c <TIM_OC5_SetConfig+0xd0>)
 800a24a:	4293      	cmp	r3, r2
 800a24c:	d109      	bne.n	800a262 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800a24e:	697b      	ldr	r3, [r7, #20]
 800a250:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a254:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800a256:	683b      	ldr	r3, [r7, #0]
 800a258:	695b      	ldr	r3, [r3, #20]
 800a25a:	021b      	lsls	r3, r3, #8
 800a25c:	697a      	ldr	r2, [r7, #20]
 800a25e:	4313      	orrs	r3, r2
 800a260:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	697a      	ldr	r2, [r7, #20]
 800a266:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	68fa      	ldr	r2, [r7, #12]
 800a26c:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800a26e:	683b      	ldr	r3, [r7, #0]
 800a270:	685a      	ldr	r2, [r3, #4]
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	693a      	ldr	r2, [r7, #16]
 800a27a:	621a      	str	r2, [r3, #32]
}
 800a27c:	bf00      	nop
 800a27e:	371c      	adds	r7, #28
 800a280:	46bd      	mov	sp, r7
 800a282:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a286:	4770      	bx	lr
 800a288:	40012c00 	.word	0x40012c00
 800a28c:	40013400 	.word	0x40013400
 800a290:	40014000 	.word	0x40014000
 800a294:	40014400 	.word	0x40014400
 800a298:	40014800 	.word	0x40014800
 800a29c:	40015000 	.word	0x40015000

0800a2a0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800a2a0:	b480      	push	{r7}
 800a2a2:	b087      	sub	sp, #28
 800a2a4:	af00      	add	r7, sp, #0
 800a2a6:	6078      	str	r0, [r7, #4]
 800a2a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	6a1b      	ldr	r3, [r3, #32]
 800a2ae:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	6a1b      	ldr	r3, [r3, #32]
 800a2ba:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	685b      	ldr	r3, [r3, #4]
 800a2c0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a2c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a2ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a2d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a2d4:	683b      	ldr	r3, [r7, #0]
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	021b      	lsls	r3, r3, #8
 800a2da:	68fa      	ldr	r2, [r7, #12]
 800a2dc:	4313      	orrs	r3, r2
 800a2de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800a2e0:	693b      	ldr	r3, [r7, #16]
 800a2e2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a2e6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800a2e8:	683b      	ldr	r3, [r7, #0]
 800a2ea:	689b      	ldr	r3, [r3, #8]
 800a2ec:	051b      	lsls	r3, r3, #20
 800a2ee:	693a      	ldr	r2, [r7, #16]
 800a2f0:	4313      	orrs	r3, r2
 800a2f2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	4a1a      	ldr	r2, [pc, #104]	; (800a360 <TIM_OC6_SetConfig+0xc0>)
 800a2f8:	4293      	cmp	r3, r2
 800a2fa:	d013      	beq.n	800a324 <TIM_OC6_SetConfig+0x84>
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	4a19      	ldr	r2, [pc, #100]	; (800a364 <TIM_OC6_SetConfig+0xc4>)
 800a300:	4293      	cmp	r3, r2
 800a302:	d00f      	beq.n	800a324 <TIM_OC6_SetConfig+0x84>
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	4a18      	ldr	r2, [pc, #96]	; (800a368 <TIM_OC6_SetConfig+0xc8>)
 800a308:	4293      	cmp	r3, r2
 800a30a:	d00b      	beq.n	800a324 <TIM_OC6_SetConfig+0x84>
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	4a17      	ldr	r2, [pc, #92]	; (800a36c <TIM_OC6_SetConfig+0xcc>)
 800a310:	4293      	cmp	r3, r2
 800a312:	d007      	beq.n	800a324 <TIM_OC6_SetConfig+0x84>
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	4a16      	ldr	r2, [pc, #88]	; (800a370 <TIM_OC6_SetConfig+0xd0>)
 800a318:	4293      	cmp	r3, r2
 800a31a:	d003      	beq.n	800a324 <TIM_OC6_SetConfig+0x84>
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	4a15      	ldr	r2, [pc, #84]	; (800a374 <TIM_OC6_SetConfig+0xd4>)
 800a320:	4293      	cmp	r3, r2
 800a322:	d109      	bne.n	800a338 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800a324:	697b      	ldr	r3, [r7, #20]
 800a326:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a32a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800a32c:	683b      	ldr	r3, [r7, #0]
 800a32e:	695b      	ldr	r3, [r3, #20]
 800a330:	029b      	lsls	r3, r3, #10
 800a332:	697a      	ldr	r2, [r7, #20]
 800a334:	4313      	orrs	r3, r2
 800a336:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	697a      	ldr	r2, [r7, #20]
 800a33c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	68fa      	ldr	r2, [r7, #12]
 800a342:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800a344:	683b      	ldr	r3, [r7, #0]
 800a346:	685a      	ldr	r2, [r3, #4]
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	693a      	ldr	r2, [r7, #16]
 800a350:	621a      	str	r2, [r3, #32]
}
 800a352:	bf00      	nop
 800a354:	371c      	adds	r7, #28
 800a356:	46bd      	mov	sp, r7
 800a358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a35c:	4770      	bx	lr
 800a35e:	bf00      	nop
 800a360:	40012c00 	.word	0x40012c00
 800a364:	40013400 	.word	0x40013400
 800a368:	40014000 	.word	0x40014000
 800a36c:	40014400 	.word	0x40014400
 800a370:	40014800 	.word	0x40014800
 800a374:	40015000 	.word	0x40015000

0800a378 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800a378:	b480      	push	{r7}
 800a37a:	b087      	sub	sp, #28
 800a37c:	af00      	add	r7, sp, #0
 800a37e:	60f8      	str	r0, [r7, #12]
 800a380:	60b9      	str	r1, [r7, #8]
 800a382:	607a      	str	r2, [r7, #4]
 800a384:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	6a1b      	ldr	r3, [r3, #32]
 800a38a:	f023 0201 	bic.w	r2, r3, #1
 800a38e:	68fb      	ldr	r3, [r7, #12]
 800a390:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	699b      	ldr	r3, [r3, #24]
 800a396:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a398:	68fb      	ldr	r3, [r7, #12]
 800a39a:	6a1b      	ldr	r3, [r3, #32]
 800a39c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	4a28      	ldr	r2, [pc, #160]	; (800a444 <TIM_TI1_SetConfig+0xcc>)
 800a3a2:	4293      	cmp	r3, r2
 800a3a4:	d01b      	beq.n	800a3de <TIM_TI1_SetConfig+0x66>
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a3ac:	d017      	beq.n	800a3de <TIM_TI1_SetConfig+0x66>
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	4a25      	ldr	r2, [pc, #148]	; (800a448 <TIM_TI1_SetConfig+0xd0>)
 800a3b2:	4293      	cmp	r3, r2
 800a3b4:	d013      	beq.n	800a3de <TIM_TI1_SetConfig+0x66>
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	4a24      	ldr	r2, [pc, #144]	; (800a44c <TIM_TI1_SetConfig+0xd4>)
 800a3ba:	4293      	cmp	r3, r2
 800a3bc:	d00f      	beq.n	800a3de <TIM_TI1_SetConfig+0x66>
 800a3be:	68fb      	ldr	r3, [r7, #12]
 800a3c0:	4a23      	ldr	r2, [pc, #140]	; (800a450 <TIM_TI1_SetConfig+0xd8>)
 800a3c2:	4293      	cmp	r3, r2
 800a3c4:	d00b      	beq.n	800a3de <TIM_TI1_SetConfig+0x66>
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	4a22      	ldr	r2, [pc, #136]	; (800a454 <TIM_TI1_SetConfig+0xdc>)
 800a3ca:	4293      	cmp	r3, r2
 800a3cc:	d007      	beq.n	800a3de <TIM_TI1_SetConfig+0x66>
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	4a21      	ldr	r2, [pc, #132]	; (800a458 <TIM_TI1_SetConfig+0xe0>)
 800a3d2:	4293      	cmp	r3, r2
 800a3d4:	d003      	beq.n	800a3de <TIM_TI1_SetConfig+0x66>
 800a3d6:	68fb      	ldr	r3, [r7, #12]
 800a3d8:	4a20      	ldr	r2, [pc, #128]	; (800a45c <TIM_TI1_SetConfig+0xe4>)
 800a3da:	4293      	cmp	r3, r2
 800a3dc:	d101      	bne.n	800a3e2 <TIM_TI1_SetConfig+0x6a>
 800a3de:	2301      	movs	r3, #1
 800a3e0:	e000      	b.n	800a3e4 <TIM_TI1_SetConfig+0x6c>
 800a3e2:	2300      	movs	r3, #0
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d008      	beq.n	800a3fa <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800a3e8:	697b      	ldr	r3, [r7, #20]
 800a3ea:	f023 0303 	bic.w	r3, r3, #3
 800a3ee:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800a3f0:	697a      	ldr	r2, [r7, #20]
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	4313      	orrs	r3, r2
 800a3f6:	617b      	str	r3, [r7, #20]
 800a3f8:	e003      	b.n	800a402 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800a3fa:	697b      	ldr	r3, [r7, #20]
 800a3fc:	f043 0301 	orr.w	r3, r3, #1
 800a400:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a402:	697b      	ldr	r3, [r7, #20]
 800a404:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a408:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800a40a:	683b      	ldr	r3, [r7, #0]
 800a40c:	011b      	lsls	r3, r3, #4
 800a40e:	b2db      	uxtb	r3, r3
 800a410:	697a      	ldr	r2, [r7, #20]
 800a412:	4313      	orrs	r3, r2
 800a414:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a416:	693b      	ldr	r3, [r7, #16]
 800a418:	f023 030a 	bic.w	r3, r3, #10
 800a41c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800a41e:	68bb      	ldr	r3, [r7, #8]
 800a420:	f003 030a 	and.w	r3, r3, #10
 800a424:	693a      	ldr	r2, [r7, #16]
 800a426:	4313      	orrs	r3, r2
 800a428:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	697a      	ldr	r2, [r7, #20]
 800a42e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	693a      	ldr	r2, [r7, #16]
 800a434:	621a      	str	r2, [r3, #32]
}
 800a436:	bf00      	nop
 800a438:	371c      	adds	r7, #28
 800a43a:	46bd      	mov	sp, r7
 800a43c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a440:	4770      	bx	lr
 800a442:	bf00      	nop
 800a444:	40012c00 	.word	0x40012c00
 800a448:	40000400 	.word	0x40000400
 800a44c:	40000800 	.word	0x40000800
 800a450:	40000c00 	.word	0x40000c00
 800a454:	40013400 	.word	0x40013400
 800a458:	40014000 	.word	0x40014000
 800a45c:	40015000 	.word	0x40015000

0800a460 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a460:	b480      	push	{r7}
 800a462:	b087      	sub	sp, #28
 800a464:	af00      	add	r7, sp, #0
 800a466:	60f8      	str	r0, [r7, #12]
 800a468:	60b9      	str	r1, [r7, #8]
 800a46a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	6a1b      	ldr	r3, [r3, #32]
 800a470:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	6a1b      	ldr	r3, [r3, #32]
 800a476:	f023 0201 	bic.w	r2, r3, #1
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	699b      	ldr	r3, [r3, #24]
 800a482:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a484:	693b      	ldr	r3, [r7, #16]
 800a486:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a48a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	011b      	lsls	r3, r3, #4
 800a490:	693a      	ldr	r2, [r7, #16]
 800a492:	4313      	orrs	r3, r2
 800a494:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a496:	697b      	ldr	r3, [r7, #20]
 800a498:	f023 030a 	bic.w	r3, r3, #10
 800a49c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a49e:	697a      	ldr	r2, [r7, #20]
 800a4a0:	68bb      	ldr	r3, [r7, #8]
 800a4a2:	4313      	orrs	r3, r2
 800a4a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a4a6:	68fb      	ldr	r3, [r7, #12]
 800a4a8:	693a      	ldr	r2, [r7, #16]
 800a4aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a4ac:	68fb      	ldr	r3, [r7, #12]
 800a4ae:	697a      	ldr	r2, [r7, #20]
 800a4b0:	621a      	str	r2, [r3, #32]
}
 800a4b2:	bf00      	nop
 800a4b4:	371c      	adds	r7, #28
 800a4b6:	46bd      	mov	sp, r7
 800a4b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4bc:	4770      	bx	lr

0800a4be <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800a4be:	b480      	push	{r7}
 800a4c0:	b087      	sub	sp, #28
 800a4c2:	af00      	add	r7, sp, #0
 800a4c4:	60f8      	str	r0, [r7, #12]
 800a4c6:	60b9      	str	r1, [r7, #8]
 800a4c8:	607a      	str	r2, [r7, #4]
 800a4ca:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	6a1b      	ldr	r3, [r3, #32]
 800a4d0:	f023 0210 	bic.w	r2, r3, #16
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a4d8:	68fb      	ldr	r3, [r7, #12]
 800a4da:	699b      	ldr	r3, [r3, #24]
 800a4dc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	6a1b      	ldr	r3, [r3, #32]
 800a4e2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800a4e4:	697b      	ldr	r3, [r7, #20]
 800a4e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a4ea:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	021b      	lsls	r3, r3, #8
 800a4f0:	697a      	ldr	r2, [r7, #20]
 800a4f2:	4313      	orrs	r3, r2
 800a4f4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a4f6:	697b      	ldr	r3, [r7, #20]
 800a4f8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a4fc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800a4fe:	683b      	ldr	r3, [r7, #0]
 800a500:	031b      	lsls	r3, r3, #12
 800a502:	b29b      	uxth	r3, r3
 800a504:	697a      	ldr	r2, [r7, #20]
 800a506:	4313      	orrs	r3, r2
 800a508:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a50a:	693b      	ldr	r3, [r7, #16]
 800a50c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a510:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800a512:	68bb      	ldr	r3, [r7, #8]
 800a514:	011b      	lsls	r3, r3, #4
 800a516:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800a51a:	693a      	ldr	r2, [r7, #16]
 800a51c:	4313      	orrs	r3, r2
 800a51e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	697a      	ldr	r2, [r7, #20]
 800a524:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	693a      	ldr	r2, [r7, #16]
 800a52a:	621a      	str	r2, [r3, #32]
}
 800a52c:	bf00      	nop
 800a52e:	371c      	adds	r7, #28
 800a530:	46bd      	mov	sp, r7
 800a532:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a536:	4770      	bx	lr

0800a538 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a538:	b480      	push	{r7}
 800a53a:	b087      	sub	sp, #28
 800a53c:	af00      	add	r7, sp, #0
 800a53e:	60f8      	str	r0, [r7, #12]
 800a540:	60b9      	str	r1, [r7, #8]
 800a542:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	6a1b      	ldr	r3, [r3, #32]
 800a548:	f023 0210 	bic.w	r2, r3, #16
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a550:	68fb      	ldr	r3, [r7, #12]
 800a552:	699b      	ldr	r3, [r3, #24]
 800a554:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a556:	68fb      	ldr	r3, [r7, #12]
 800a558:	6a1b      	ldr	r3, [r3, #32]
 800a55a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a55c:	697b      	ldr	r3, [r7, #20]
 800a55e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a562:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	031b      	lsls	r3, r3, #12
 800a568:	697a      	ldr	r2, [r7, #20]
 800a56a:	4313      	orrs	r3, r2
 800a56c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a56e:	693b      	ldr	r3, [r7, #16]
 800a570:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a574:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a576:	68bb      	ldr	r3, [r7, #8]
 800a578:	011b      	lsls	r3, r3, #4
 800a57a:	693a      	ldr	r2, [r7, #16]
 800a57c:	4313      	orrs	r3, r2
 800a57e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a580:	68fb      	ldr	r3, [r7, #12]
 800a582:	697a      	ldr	r2, [r7, #20]
 800a584:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a586:	68fb      	ldr	r3, [r7, #12]
 800a588:	693a      	ldr	r2, [r7, #16]
 800a58a:	621a      	str	r2, [r3, #32]
}
 800a58c:	bf00      	nop
 800a58e:	371c      	adds	r7, #28
 800a590:	46bd      	mov	sp, r7
 800a592:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a596:	4770      	bx	lr

0800a598 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800a598:	b480      	push	{r7}
 800a59a:	b087      	sub	sp, #28
 800a59c:	af00      	add	r7, sp, #0
 800a59e:	60f8      	str	r0, [r7, #12]
 800a5a0:	60b9      	str	r1, [r7, #8]
 800a5a2:	607a      	str	r2, [r7, #4]
 800a5a4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	6a1b      	ldr	r3, [r3, #32]
 800a5aa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	69db      	ldr	r3, [r3, #28]
 800a5b6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a5b8:	68fb      	ldr	r3, [r7, #12]
 800a5ba:	6a1b      	ldr	r3, [r3, #32]
 800a5bc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800a5be:	697b      	ldr	r3, [r7, #20]
 800a5c0:	f023 0303 	bic.w	r3, r3, #3
 800a5c4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800a5c6:	697a      	ldr	r2, [r7, #20]
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	4313      	orrs	r3, r2
 800a5cc:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800a5ce:	697b      	ldr	r3, [r7, #20]
 800a5d0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a5d4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800a5d6:	683b      	ldr	r3, [r7, #0]
 800a5d8:	011b      	lsls	r3, r3, #4
 800a5da:	b2db      	uxtb	r3, r3
 800a5dc:	697a      	ldr	r2, [r7, #20]
 800a5de:	4313      	orrs	r3, r2
 800a5e0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800a5e2:	693b      	ldr	r3, [r7, #16]
 800a5e4:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800a5e8:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800a5ea:	68bb      	ldr	r3, [r7, #8]
 800a5ec:	021b      	lsls	r3, r3, #8
 800a5ee:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800a5f2:	693a      	ldr	r2, [r7, #16]
 800a5f4:	4313      	orrs	r3, r2
 800a5f6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800a5f8:	68fb      	ldr	r3, [r7, #12]
 800a5fa:	697a      	ldr	r2, [r7, #20]
 800a5fc:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800a5fe:	68fb      	ldr	r3, [r7, #12]
 800a600:	693a      	ldr	r2, [r7, #16]
 800a602:	621a      	str	r2, [r3, #32]
}
 800a604:	bf00      	nop
 800a606:	371c      	adds	r7, #28
 800a608:	46bd      	mov	sp, r7
 800a60a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a60e:	4770      	bx	lr

0800a610 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800a610:	b480      	push	{r7}
 800a612:	b087      	sub	sp, #28
 800a614:	af00      	add	r7, sp, #0
 800a616:	60f8      	str	r0, [r7, #12]
 800a618:	60b9      	str	r1, [r7, #8]
 800a61a:	607a      	str	r2, [r7, #4]
 800a61c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a61e:	68fb      	ldr	r3, [r7, #12]
 800a620:	6a1b      	ldr	r3, [r3, #32]
 800a622:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	69db      	ldr	r3, [r3, #28]
 800a62e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a630:	68fb      	ldr	r3, [r7, #12]
 800a632:	6a1b      	ldr	r3, [r3, #32]
 800a634:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800a636:	697b      	ldr	r3, [r7, #20]
 800a638:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a63c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	021b      	lsls	r3, r3, #8
 800a642:	697a      	ldr	r2, [r7, #20]
 800a644:	4313      	orrs	r3, r2
 800a646:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800a648:	697b      	ldr	r3, [r7, #20]
 800a64a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a64e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800a650:	683b      	ldr	r3, [r7, #0]
 800a652:	031b      	lsls	r3, r3, #12
 800a654:	b29b      	uxth	r3, r3
 800a656:	697a      	ldr	r2, [r7, #20]
 800a658:	4313      	orrs	r3, r2
 800a65a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800a65c:	693b      	ldr	r3, [r7, #16]
 800a65e:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800a662:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800a664:	68bb      	ldr	r3, [r7, #8]
 800a666:	031b      	lsls	r3, r3, #12
 800a668:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800a66c:	693a      	ldr	r2, [r7, #16]
 800a66e:	4313      	orrs	r3, r2
 800a670:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800a672:	68fb      	ldr	r3, [r7, #12]
 800a674:	697a      	ldr	r2, [r7, #20]
 800a676:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	693a      	ldr	r2, [r7, #16]
 800a67c:	621a      	str	r2, [r3, #32]
}
 800a67e:	bf00      	nop
 800a680:	371c      	adds	r7, #28
 800a682:	46bd      	mov	sp, r7
 800a684:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a688:	4770      	bx	lr

0800a68a <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a68a:	b480      	push	{r7}
 800a68c:	b085      	sub	sp, #20
 800a68e:	af00      	add	r7, sp, #0
 800a690:	6078      	str	r0, [r7, #4]
 800a692:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	689b      	ldr	r3, [r3, #8]
 800a698:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a69a:	68fb      	ldr	r3, [r7, #12]
 800a69c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800a6a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a6a4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a6a6:	683a      	ldr	r2, [r7, #0]
 800a6a8:	68fb      	ldr	r3, [r7, #12]
 800a6aa:	4313      	orrs	r3, r2
 800a6ac:	f043 0307 	orr.w	r3, r3, #7
 800a6b0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	68fa      	ldr	r2, [r7, #12]
 800a6b6:	609a      	str	r2, [r3, #8]
}
 800a6b8:	bf00      	nop
 800a6ba:	3714      	adds	r7, #20
 800a6bc:	46bd      	mov	sp, r7
 800a6be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6c2:	4770      	bx	lr

0800a6c4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a6c4:	b480      	push	{r7}
 800a6c6:	b087      	sub	sp, #28
 800a6c8:	af00      	add	r7, sp, #0
 800a6ca:	60f8      	str	r0, [r7, #12]
 800a6cc:	60b9      	str	r1, [r7, #8]
 800a6ce:	607a      	str	r2, [r7, #4]
 800a6d0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a6d2:	68fb      	ldr	r3, [r7, #12]
 800a6d4:	689b      	ldr	r3, [r3, #8]
 800a6d6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a6d8:	697b      	ldr	r3, [r7, #20]
 800a6da:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a6de:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a6e0:	683b      	ldr	r3, [r7, #0]
 800a6e2:	021a      	lsls	r2, r3, #8
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	431a      	orrs	r2, r3
 800a6e8:	68bb      	ldr	r3, [r7, #8]
 800a6ea:	4313      	orrs	r3, r2
 800a6ec:	697a      	ldr	r2, [r7, #20]
 800a6ee:	4313      	orrs	r3, r2
 800a6f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	697a      	ldr	r2, [r7, #20]
 800a6f6:	609a      	str	r2, [r3, #8]
}
 800a6f8:	bf00      	nop
 800a6fa:	371c      	adds	r7, #28
 800a6fc:	46bd      	mov	sp, r7
 800a6fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a702:	4770      	bx	lr

0800a704 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a704:	b480      	push	{r7}
 800a706:	b087      	sub	sp, #28
 800a708:	af00      	add	r7, sp, #0
 800a70a:	60f8      	str	r0, [r7, #12]
 800a70c:	60b9      	str	r1, [r7, #8]
 800a70e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a710:	68bb      	ldr	r3, [r7, #8]
 800a712:	f003 031f 	and.w	r3, r3, #31
 800a716:	2201      	movs	r2, #1
 800a718:	fa02 f303 	lsl.w	r3, r2, r3
 800a71c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a71e:	68fb      	ldr	r3, [r7, #12]
 800a720:	6a1a      	ldr	r2, [r3, #32]
 800a722:	697b      	ldr	r3, [r7, #20]
 800a724:	43db      	mvns	r3, r3
 800a726:	401a      	ands	r2, r3
 800a728:	68fb      	ldr	r3, [r7, #12]
 800a72a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	6a1a      	ldr	r2, [r3, #32]
 800a730:	68bb      	ldr	r3, [r7, #8]
 800a732:	f003 031f 	and.w	r3, r3, #31
 800a736:	6879      	ldr	r1, [r7, #4]
 800a738:	fa01 f303 	lsl.w	r3, r1, r3
 800a73c:	431a      	orrs	r2, r3
 800a73e:	68fb      	ldr	r3, [r7, #12]
 800a740:	621a      	str	r2, [r3, #32]
}
 800a742:	bf00      	nop
 800a744:	371c      	adds	r7, #28
 800a746:	46bd      	mov	sp, r7
 800a748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a74c:	4770      	bx	lr

0800a74e <HAL_TIMEx_HallSensor_Init>:
  * @param  htim TIM Hall Sensor Interface handle
  * @param  sConfig TIM Hall Sensor configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Init(TIM_HandleTypeDef *htim, TIM_HallSensor_InitTypeDef *sConfig)
{
 800a74e:	b580      	push	{r7, lr}
 800a750:	b08a      	sub	sp, #40	; 0x28
 800a752:	af00      	add	r7, sp, #0
 800a754:	6078      	str	r0, [r7, #4]
 800a756:	6039      	str	r1, [r7, #0]
  TIM_OC_InitTypeDef OC_Config;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	d101      	bne.n	800a762 <HAL_TIMEx_HallSensor_Init+0x14>
  {
    return HAL_ERROR;
 800a75e:	2301      	movs	r3, #1
 800a760:	e0a0      	b.n	800a8a4 <HAL_TIMEx_HallSensor_Init+0x156>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
  assert_param(IS_TIM_IC_POLARITY(sConfig->IC1Polarity));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a768:	b2db      	uxtb	r3, r3
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	d106      	bne.n	800a77c <HAL_TIMEx_HallSensor_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	2200      	movs	r2, #0
 800a772:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->HallSensor_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIMEx_HallSensor_MspInit(htim);
 800a776:	6878      	ldr	r0, [r7, #4]
 800a778:	f000 f898 	bl	800a8ac <HAL_TIMEx_HallSensor_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	2202      	movs	r2, #2
 800a780:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	681a      	ldr	r2, [r3, #0]
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	3304      	adds	r3, #4
 800a78c:	4619      	mov	r1, r3
 800a78e:	4610      	mov	r0, r2
 800a790:	f7ff fa20 	bl	8009bd4 <TIM_Base_SetConfig>

  /* Configure the Channel 1 as Input Channel to interface with the three Outputs of the  Hall sensor */
  TIM_TI1_SetConfig(htim->Instance, sConfig->IC1Polarity, TIM_ICSELECTION_TRC, sConfig->IC1Filter);
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	6818      	ldr	r0, [r3, #0]
 800a798:	683b      	ldr	r3, [r7, #0]
 800a79a:	6819      	ldr	r1, [r3, #0]
 800a79c:	683b      	ldr	r3, [r7, #0]
 800a79e:	689b      	ldr	r3, [r3, #8]
 800a7a0:	2203      	movs	r2, #3
 800a7a2:	f7ff fde9 	bl	800a378 <TIM_TI1_SetConfig>

  /* Reset the IC1PSC Bits */
  htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	699a      	ldr	r2, [r3, #24]
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	f022 020c 	bic.w	r2, r2, #12
 800a7b4:	619a      	str	r2, [r3, #24]
  /* Set the IC1PSC value */
  htim->Instance->CCMR1 |= sConfig->IC1Prescaler;
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	6999      	ldr	r1, [r3, #24]
 800a7bc:	683b      	ldr	r3, [r7, #0]
 800a7be:	685a      	ldr	r2, [r3, #4]
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	430a      	orrs	r2, r1
 800a7c6:	619a      	str	r2, [r3, #24]

  /* Enable the Hall sensor interface (XOR function of the three inputs) */
  htim->Instance->CR2 |= TIM_CR2_TI1S;
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	685a      	ldr	r2, [r3, #4]
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800a7d6:	605a      	str	r2, [r3, #4]

  /* Select the TIM_TS_TI1F_ED signal as Input trigger for the TIM */
  htim->Instance->SMCR &= ~TIM_SMCR_TS;
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	689b      	ldr	r3, [r3, #8]
 800a7de:	687a      	ldr	r2, [r7, #4]
 800a7e0:	6812      	ldr	r2, [r2, #0]
 800a7e2:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800a7e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a7ea:	6093      	str	r3, [r2, #8]
  htim->Instance->SMCR |= TIM_TS_TI1F_ED;
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	689a      	ldr	r2, [r3, #8]
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a7fa:	609a      	str	r2, [r3, #8]

  /* Use the TIM_TS_TI1F_ED signal to reset the TIM counter each edge detection */
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	689b      	ldr	r3, [r3, #8]
 800a802:	687a      	ldr	r2, [r7, #4]
 800a804:	6812      	ldr	r2, [r2, #0]
 800a806:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a80a:	f023 0307 	bic.w	r3, r3, #7
 800a80e:	6093      	str	r3, [r2, #8]
  htim->Instance->SMCR |= TIM_SLAVEMODE_RESET;
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	689a      	ldr	r2, [r3, #8]
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	f042 0204 	orr.w	r2, r2, #4
 800a81e:	609a      	str	r2, [r3, #8]

  /* Program channel 2 in PWM 2 mode with the desired Commutation_Delay*/
  OC_Config.OCFastMode = TIM_OCFAST_DISABLE;
 800a820:	2300      	movs	r3, #0
 800a822:	61fb      	str	r3, [r7, #28]
  OC_Config.OCIdleState = TIM_OCIDLESTATE_RESET;
 800a824:	2300      	movs	r3, #0
 800a826:	623b      	str	r3, [r7, #32]
  OC_Config.OCMode = TIM_OCMODE_PWM2;
 800a828:	2370      	movs	r3, #112	; 0x70
 800a82a:	60fb      	str	r3, [r7, #12]
  OC_Config.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800a82c:	2300      	movs	r3, #0
 800a82e:	627b      	str	r3, [r7, #36]	; 0x24
  OC_Config.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800a830:	2300      	movs	r3, #0
 800a832:	61bb      	str	r3, [r7, #24]
  OC_Config.OCPolarity = TIM_OCPOLARITY_HIGH;
 800a834:	2300      	movs	r3, #0
 800a836:	617b      	str	r3, [r7, #20]
  OC_Config.Pulse = sConfig->Commutation_Delay;
 800a838:	683b      	ldr	r3, [r7, #0]
 800a83a:	68db      	ldr	r3, [r3, #12]
 800a83c:	613b      	str	r3, [r7, #16]

  TIM_OC2_SetConfig(htim->Instance, &OC_Config);
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	f107 020c 	add.w	r2, r7, #12
 800a846:	4611      	mov	r1, r2
 800a848:	4618      	mov	r0, r3
 800a84a:	f7ff fb05 	bl	8009e58 <TIM_OC2_SetConfig>

  /* Select OC2REF as trigger output on TRGO: write the MMS bits in the TIMx_CR2
    register to 101 */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	685b      	ldr	r3, [r3, #4]
 800a854:	687a      	ldr	r2, [r7, #4]
 800a856:	6812      	ldr	r2, [r2, #0]
 800a858:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800a85c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a860:	6053      	str	r3, [r2, #4]
  htim->Instance->CR2 |= TIM_TRGO_OC2REF;
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	685a      	ldr	r2, [r3, #4]
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	f042 0250 	orr.w	r2, r2, #80	; 0x50
 800a870:	605a      	str	r2, [r3, #4]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	2201      	movs	r2, #1
 800a876:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	2201      	movs	r2, #1
 800a87e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	2201      	movs	r2, #1
 800a886:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	2201      	movs	r2, #1
 800a88e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	2201      	movs	r2, #1
 800a896:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	2201      	movs	r2, #1
 800a89e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a8a2:	2300      	movs	r3, #0
}
 800a8a4:	4618      	mov	r0, r3
 800a8a6:	3728      	adds	r7, #40	; 0x28
 800a8a8:	46bd      	mov	sp, r7
 800a8aa:	bd80      	pop	{r7, pc}

0800a8ac <HAL_TIMEx_HallSensor_MspInit>:
  * @brief  Initializes the TIM Hall Sensor MSP.
  * @param  htim TIM Hall Sensor Interface handle
  * @retval None
  */
__weak void HAL_TIMEx_HallSensor_MspInit(TIM_HandleTypeDef *htim)
{
 800a8ac:	b480      	push	{r7}
 800a8ae:	b083      	sub	sp, #12
 800a8b0:	af00      	add	r7, sp, #0
 800a8b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_HallSensor_MspInit could be implemented in the user file
   */
}
 800a8b4:	bf00      	nop
 800a8b6:	370c      	adds	r7, #12
 800a8b8:	46bd      	mov	sp, r7
 800a8ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8be:	4770      	bx	lr

0800a8c0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a8c0:	b480      	push	{r7}
 800a8c2:	b085      	sub	sp, #20
 800a8c4:	af00      	add	r7, sp, #0
 800a8c6:	6078      	str	r0, [r7, #4]
 800a8c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a8d0:	2b01      	cmp	r3, #1
 800a8d2:	d101      	bne.n	800a8d8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a8d4:	2302      	movs	r3, #2
 800a8d6:	e074      	b.n	800a9c2 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	2201      	movs	r2, #1
 800a8dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	2202      	movs	r2, #2
 800a8e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	685b      	ldr	r3, [r3, #4]
 800a8ee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	689b      	ldr	r3, [r3, #8]
 800a8f6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	4a34      	ldr	r2, [pc, #208]	; (800a9d0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800a8fe:	4293      	cmp	r3, r2
 800a900:	d009      	beq.n	800a916 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	4a33      	ldr	r2, [pc, #204]	; (800a9d4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800a908:	4293      	cmp	r3, r2
 800a90a:	d004      	beq.n	800a916 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	4a31      	ldr	r2, [pc, #196]	; (800a9d8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800a912:	4293      	cmp	r3, r2
 800a914:	d108      	bne.n	800a928 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a916:	68fb      	ldr	r3, [r7, #12]
 800a918:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800a91c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a91e:	683b      	ldr	r3, [r7, #0]
 800a920:	685b      	ldr	r3, [r3, #4]
 800a922:	68fa      	ldr	r2, [r7, #12]
 800a924:	4313      	orrs	r3, r2
 800a926:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a928:	68fb      	ldr	r3, [r7, #12]
 800a92a:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800a92e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a932:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a934:	683b      	ldr	r3, [r7, #0]
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	68fa      	ldr	r2, [r7, #12]
 800a93a:	4313      	orrs	r3, r2
 800a93c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	68fa      	ldr	r2, [r7, #12]
 800a944:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	4a21      	ldr	r2, [pc, #132]	; (800a9d0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800a94c:	4293      	cmp	r3, r2
 800a94e:	d022      	beq.n	800a996 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a958:	d01d      	beq.n	800a996 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	4a1f      	ldr	r2, [pc, #124]	; (800a9dc <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800a960:	4293      	cmp	r3, r2
 800a962:	d018      	beq.n	800a996 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	4a1d      	ldr	r2, [pc, #116]	; (800a9e0 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800a96a:	4293      	cmp	r3, r2
 800a96c:	d013      	beq.n	800a996 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	4a1c      	ldr	r2, [pc, #112]	; (800a9e4 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800a974:	4293      	cmp	r3, r2
 800a976:	d00e      	beq.n	800a996 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	4a15      	ldr	r2, [pc, #84]	; (800a9d4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800a97e:	4293      	cmp	r3, r2
 800a980:	d009      	beq.n	800a996 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	681b      	ldr	r3, [r3, #0]
 800a986:	4a18      	ldr	r2, [pc, #96]	; (800a9e8 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800a988:	4293      	cmp	r3, r2
 800a98a:	d004      	beq.n	800a996 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	4a11      	ldr	r2, [pc, #68]	; (800a9d8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800a992:	4293      	cmp	r3, r2
 800a994:	d10c      	bne.n	800a9b0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a996:	68bb      	ldr	r3, [r7, #8]
 800a998:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a99c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a99e:	683b      	ldr	r3, [r7, #0]
 800a9a0:	689b      	ldr	r3, [r3, #8]
 800a9a2:	68ba      	ldr	r2, [r7, #8]
 800a9a4:	4313      	orrs	r3, r2
 800a9a6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	68ba      	ldr	r2, [r7, #8]
 800a9ae:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	2201      	movs	r2, #1
 800a9b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	2200      	movs	r2, #0
 800a9bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a9c0:	2300      	movs	r3, #0
}
 800a9c2:	4618      	mov	r0, r3
 800a9c4:	3714      	adds	r7, #20
 800a9c6:	46bd      	mov	sp, r7
 800a9c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9cc:	4770      	bx	lr
 800a9ce:	bf00      	nop
 800a9d0:	40012c00 	.word	0x40012c00
 800a9d4:	40013400 	.word	0x40013400
 800a9d8:	40015000 	.word	0x40015000
 800a9dc:	40000400 	.word	0x40000400
 800a9e0:	40000800 	.word	0x40000800
 800a9e4:	40000c00 	.word	0x40000c00
 800a9e8:	40014000 	.word	0x40014000

0800a9ec <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800a9ec:	b480      	push	{r7}
 800a9ee:	b085      	sub	sp, #20
 800a9f0:	af00      	add	r7, sp, #0
 800a9f2:	6078      	str	r0, [r7, #4]
 800a9f4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800a9f6:	2300      	movs	r3, #0
 800a9f8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800aa00:	2b01      	cmp	r3, #1
 800aa02:	d101      	bne.n	800aa08 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800aa04:	2302      	movs	r3, #2
 800aa06:	e096      	b.n	800ab36 <HAL_TIMEx_ConfigBreakDeadTime+0x14a>
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	2201      	movs	r2, #1
 800aa0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800aa10:	68fb      	ldr	r3, [r7, #12]
 800aa12:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800aa16:	683b      	ldr	r3, [r7, #0]
 800aa18:	68db      	ldr	r3, [r3, #12]
 800aa1a:	4313      	orrs	r3, r2
 800aa1c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800aa24:	683b      	ldr	r3, [r7, #0]
 800aa26:	689b      	ldr	r3, [r3, #8]
 800aa28:	4313      	orrs	r3, r2
 800aa2a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800aa2c:	68fb      	ldr	r3, [r7, #12]
 800aa2e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800aa32:	683b      	ldr	r3, [r7, #0]
 800aa34:	685b      	ldr	r3, [r3, #4]
 800aa36:	4313      	orrs	r3, r2
 800aa38:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800aa3a:	68fb      	ldr	r3, [r7, #12]
 800aa3c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800aa40:	683b      	ldr	r3, [r7, #0]
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	4313      	orrs	r3, r2
 800aa46:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800aa48:	68fb      	ldr	r3, [r7, #12]
 800aa4a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800aa4e:	683b      	ldr	r3, [r7, #0]
 800aa50:	691b      	ldr	r3, [r3, #16]
 800aa52:	4313      	orrs	r3, r2
 800aa54:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800aa56:	68fb      	ldr	r3, [r7, #12]
 800aa58:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800aa5c:	683b      	ldr	r3, [r7, #0]
 800aa5e:	695b      	ldr	r3, [r3, #20]
 800aa60:	4313      	orrs	r3, r2
 800aa62:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800aa64:	68fb      	ldr	r3, [r7, #12]
 800aa66:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800aa6a:	683b      	ldr	r3, [r7, #0]
 800aa6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa6e:	4313      	orrs	r3, r2
 800aa70:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800aa72:	68fb      	ldr	r3, [r7, #12]
 800aa74:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800aa78:	683b      	ldr	r3, [r7, #0]
 800aa7a:	699b      	ldr	r3, [r3, #24]
 800aa7c:	041b      	lsls	r3, r3, #16
 800aa7e:	4313      	orrs	r3, r2
 800aa80:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	4a2f      	ldr	r2, [pc, #188]	; (800ab44 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 800aa88:	4293      	cmp	r3, r2
 800aa8a:	d009      	beq.n	800aaa0 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	4a2d      	ldr	r2, [pc, #180]	; (800ab48 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800aa92:	4293      	cmp	r3, r2
 800aa94:	d004      	beq.n	800aaa0 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	4a2c      	ldr	r2, [pc, #176]	; (800ab4c <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 800aa9c:	4293      	cmp	r3, r2
 800aa9e:	d106      	bne.n	800aaae <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800aaa0:	68fb      	ldr	r3, [r7, #12]
 800aaa2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800aaa6:	683b      	ldr	r3, [r7, #0]
 800aaa8:	69db      	ldr	r3, [r3, #28]
 800aaaa:	4313      	orrs	r3, r2
 800aaac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	4a24      	ldr	r2, [pc, #144]	; (800ab44 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 800aab4:	4293      	cmp	r3, r2
 800aab6:	d009      	beq.n	800aacc <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	4a22      	ldr	r2, [pc, #136]	; (800ab48 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800aabe:	4293      	cmp	r3, r2
 800aac0:	d004      	beq.n	800aacc <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	4a21      	ldr	r2, [pc, #132]	; (800ab4c <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 800aac8:	4293      	cmp	r3, r2
 800aaca:	d12b      	bne.n	800ab24 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800aacc:	68fb      	ldr	r3, [r7, #12]
 800aace:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800aad2:	683b      	ldr	r3, [r7, #0]
 800aad4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aad6:	051b      	lsls	r3, r3, #20
 800aad8:	4313      	orrs	r3, r2
 800aada:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800aae2:	683b      	ldr	r3, [r7, #0]
 800aae4:	6a1b      	ldr	r3, [r3, #32]
 800aae6:	4313      	orrs	r3, r2
 800aae8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800aaea:	68fb      	ldr	r3, [r7, #12]
 800aaec:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800aaf0:	683b      	ldr	r3, [r7, #0]
 800aaf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aaf4:	4313      	orrs	r3, r2
 800aaf6:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	681b      	ldr	r3, [r3, #0]
 800aafc:	4a11      	ldr	r2, [pc, #68]	; (800ab44 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 800aafe:	4293      	cmp	r3, r2
 800ab00:	d009      	beq.n	800ab16 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	681b      	ldr	r3, [r3, #0]
 800ab06:	4a10      	ldr	r2, [pc, #64]	; (800ab48 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800ab08:	4293      	cmp	r3, r2
 800ab0a:	d004      	beq.n	800ab16 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	4a0e      	ldr	r2, [pc, #56]	; (800ab4c <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 800ab12:	4293      	cmp	r3, r2
 800ab14:	d106      	bne.n	800ab24 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800ab16:	68fb      	ldr	r3, [r7, #12]
 800ab18:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800ab1c:	683b      	ldr	r3, [r7, #0]
 800ab1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab20:	4313      	orrs	r3, r2
 800ab22:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	68fa      	ldr	r2, [r7, #12]
 800ab2a:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	2200      	movs	r2, #0
 800ab30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ab34:	2300      	movs	r3, #0
}
 800ab36:	4618      	mov	r0, r3
 800ab38:	3714      	adds	r7, #20
 800ab3a:	46bd      	mov	sp, r7
 800ab3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab40:	4770      	bx	lr
 800ab42:	bf00      	nop
 800ab44:	40012c00 	.word	0x40012c00
 800ab48:	40013400 	.word	0x40013400
 800ab4c:	40015000 	.word	0x40015000

0800ab50 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ab50:	b480      	push	{r7}
 800ab52:	b083      	sub	sp, #12
 800ab54:	af00      	add	r7, sp, #0
 800ab56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ab58:	bf00      	nop
 800ab5a:	370c      	adds	r7, #12
 800ab5c:	46bd      	mov	sp, r7
 800ab5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab62:	4770      	bx	lr

0800ab64 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ab64:	b480      	push	{r7}
 800ab66:	b083      	sub	sp, #12
 800ab68:	af00      	add	r7, sp, #0
 800ab6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ab6c:	bf00      	nop
 800ab6e:	370c      	adds	r7, #12
 800ab70:	46bd      	mov	sp, r7
 800ab72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab76:	4770      	bx	lr

0800ab78 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800ab78:	b480      	push	{r7}
 800ab7a:	b083      	sub	sp, #12
 800ab7c:	af00      	add	r7, sp, #0
 800ab7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800ab80:	bf00      	nop
 800ab82:	370c      	adds	r7, #12
 800ab84:	46bd      	mov	sp, r7
 800ab86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab8a:	4770      	bx	lr

0800ab8c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800ab8c:	b480      	push	{r7}
 800ab8e:	b083      	sub	sp, #12
 800ab90:	af00      	add	r7, sp, #0
 800ab92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800ab94:	bf00      	nop
 800ab96:	370c      	adds	r7, #12
 800ab98:	46bd      	mov	sp, r7
 800ab9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab9e:	4770      	bx	lr

0800aba0 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800aba0:	b480      	push	{r7}
 800aba2:	b083      	sub	sp, #12
 800aba4:	af00      	add	r7, sp, #0
 800aba6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800aba8:	bf00      	nop
 800abaa:	370c      	adds	r7, #12
 800abac:	46bd      	mov	sp, r7
 800abae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abb2:	4770      	bx	lr

0800abb4 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800abb4:	b480      	push	{r7}
 800abb6:	b083      	sub	sp, #12
 800abb8:	af00      	add	r7, sp, #0
 800abba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800abbc:	bf00      	nop
 800abbe:	370c      	adds	r7, #12
 800abc0:	46bd      	mov	sp, r7
 800abc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abc6:	4770      	bx	lr

0800abc8 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800abc8:	b480      	push	{r7}
 800abca:	b083      	sub	sp, #12
 800abcc:	af00      	add	r7, sp, #0
 800abce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800abd0:	bf00      	nop
 800abd2:	370c      	adds	r7, #12
 800abd4:	46bd      	mov	sp, r7
 800abd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abda:	4770      	bx	lr

0800abdc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800abdc:	b580      	push	{r7, lr}
 800abde:	b082      	sub	sp, #8
 800abe0:	af00      	add	r7, sp, #0
 800abe2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	d101      	bne.n	800abee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800abea:	2301      	movs	r3, #1
 800abec:	e042      	b.n	800ac74 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	d106      	bne.n	800ac06 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	2200      	movs	r2, #0
 800abfc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ac00:	6878      	ldr	r0, [r7, #4]
 800ac02:	f7f7 ff9d 	bl	8002b40 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	2224      	movs	r2, #36	; 0x24
 800ac0a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	681a      	ldr	r2, [r3, #0]
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	f022 0201 	bic.w	r2, r2, #1
 800ac1c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800ac1e:	6878      	ldr	r0, [r7, #4]
 800ac20:	f000 f8c2 	bl	800ada8 <UART_SetConfig>
 800ac24:	4603      	mov	r3, r0
 800ac26:	2b01      	cmp	r3, #1
 800ac28:	d101      	bne.n	800ac2e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800ac2a:	2301      	movs	r3, #1
 800ac2c:	e022      	b.n	800ac74 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	d002      	beq.n	800ac3c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800ac36:	6878      	ldr	r0, [r7, #4]
 800ac38:	f000 fbb2 	bl	800b3a0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	685a      	ldr	r2, [r3, #4]
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800ac4a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	681b      	ldr	r3, [r3, #0]
 800ac50:	689a      	ldr	r2, [r3, #8]
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800ac5a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	681a      	ldr	r2, [r3, #0]
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	681b      	ldr	r3, [r3, #0]
 800ac66:	f042 0201 	orr.w	r2, r2, #1
 800ac6a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800ac6c:	6878      	ldr	r0, [r7, #4]
 800ac6e:	f000 fc39 	bl	800b4e4 <UART_CheckIdleState>
 800ac72:	4603      	mov	r3, r0
}
 800ac74:	4618      	mov	r0, r3
 800ac76:	3708      	adds	r7, #8
 800ac78:	46bd      	mov	sp, r7
 800ac7a:	bd80      	pop	{r7, pc}

0800ac7c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ac7c:	b580      	push	{r7, lr}
 800ac7e:	b08a      	sub	sp, #40	; 0x28
 800ac80:	af02      	add	r7, sp, #8
 800ac82:	60f8      	str	r0, [r7, #12]
 800ac84:	60b9      	str	r1, [r7, #8]
 800ac86:	603b      	str	r3, [r7, #0]
 800ac88:	4613      	mov	r3, r2
 800ac8a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800ac8c:	68fb      	ldr	r3, [r7, #12]
 800ac8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ac92:	2b20      	cmp	r3, #32
 800ac94:	f040 8083 	bne.w	800ad9e <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800ac98:	68bb      	ldr	r3, [r7, #8]
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	d002      	beq.n	800aca4 <HAL_UART_Transmit+0x28>
 800ac9e:	88fb      	ldrh	r3, [r7, #6]
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	d101      	bne.n	800aca8 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800aca4:	2301      	movs	r3, #1
 800aca6:	e07b      	b.n	800ada0 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800aca8:	68fb      	ldr	r3, [r7, #12]
 800acaa:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800acae:	2b01      	cmp	r3, #1
 800acb0:	d101      	bne.n	800acb6 <HAL_UART_Transmit+0x3a>
 800acb2:	2302      	movs	r3, #2
 800acb4:	e074      	b.n	800ada0 <HAL_UART_Transmit+0x124>
 800acb6:	68fb      	ldr	r3, [r7, #12]
 800acb8:	2201      	movs	r2, #1
 800acba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800acbe:	68fb      	ldr	r3, [r7, #12]
 800acc0:	2200      	movs	r2, #0
 800acc2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800acc6:	68fb      	ldr	r3, [r7, #12]
 800acc8:	2221      	movs	r2, #33	; 0x21
 800acca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800acce:	f7f8 fe63 	bl	8003998 <HAL_GetTick>
 800acd2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800acd4:	68fb      	ldr	r3, [r7, #12]
 800acd6:	88fa      	ldrh	r2, [r7, #6]
 800acd8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800acdc:	68fb      	ldr	r3, [r7, #12]
 800acde:	88fa      	ldrh	r2, [r7, #6]
 800ace0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ace4:	68fb      	ldr	r3, [r7, #12]
 800ace6:	689b      	ldr	r3, [r3, #8]
 800ace8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800acec:	d108      	bne.n	800ad00 <HAL_UART_Transmit+0x84>
 800acee:	68fb      	ldr	r3, [r7, #12]
 800acf0:	691b      	ldr	r3, [r3, #16]
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	d104      	bne.n	800ad00 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800acf6:	2300      	movs	r3, #0
 800acf8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800acfa:	68bb      	ldr	r3, [r7, #8]
 800acfc:	61bb      	str	r3, [r7, #24]
 800acfe:	e003      	b.n	800ad08 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800ad00:	68bb      	ldr	r3, [r7, #8]
 800ad02:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800ad04:	2300      	movs	r3, #0
 800ad06:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800ad08:	68fb      	ldr	r3, [r7, #12]
 800ad0a:	2200      	movs	r2, #0
 800ad0c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800ad10:	e02c      	b.n	800ad6c <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800ad12:	683b      	ldr	r3, [r7, #0]
 800ad14:	9300      	str	r3, [sp, #0]
 800ad16:	697b      	ldr	r3, [r7, #20]
 800ad18:	2200      	movs	r2, #0
 800ad1a:	2180      	movs	r1, #128	; 0x80
 800ad1c:	68f8      	ldr	r0, [r7, #12]
 800ad1e:	f000 fc2c 	bl	800b57a <UART_WaitOnFlagUntilTimeout>
 800ad22:	4603      	mov	r3, r0
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	d001      	beq.n	800ad2c <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800ad28:	2303      	movs	r3, #3
 800ad2a:	e039      	b.n	800ada0 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800ad2c:	69fb      	ldr	r3, [r7, #28]
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	d10b      	bne.n	800ad4a <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800ad32:	69bb      	ldr	r3, [r7, #24]
 800ad34:	881b      	ldrh	r3, [r3, #0]
 800ad36:	461a      	mov	r2, r3
 800ad38:	68fb      	ldr	r3, [r7, #12]
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ad40:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800ad42:	69bb      	ldr	r3, [r7, #24]
 800ad44:	3302      	adds	r3, #2
 800ad46:	61bb      	str	r3, [r7, #24]
 800ad48:	e007      	b.n	800ad5a <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800ad4a:	69fb      	ldr	r3, [r7, #28]
 800ad4c:	781a      	ldrb	r2, [r3, #0]
 800ad4e:	68fb      	ldr	r3, [r7, #12]
 800ad50:	681b      	ldr	r3, [r3, #0]
 800ad52:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800ad54:	69fb      	ldr	r3, [r7, #28]
 800ad56:	3301      	adds	r3, #1
 800ad58:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800ad5a:	68fb      	ldr	r3, [r7, #12]
 800ad5c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800ad60:	b29b      	uxth	r3, r3
 800ad62:	3b01      	subs	r3, #1
 800ad64:	b29a      	uxth	r2, r3
 800ad66:	68fb      	ldr	r3, [r7, #12]
 800ad68:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800ad6c:	68fb      	ldr	r3, [r7, #12]
 800ad6e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800ad72:	b29b      	uxth	r3, r3
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	d1cc      	bne.n	800ad12 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800ad78:	683b      	ldr	r3, [r7, #0]
 800ad7a:	9300      	str	r3, [sp, #0]
 800ad7c:	697b      	ldr	r3, [r7, #20]
 800ad7e:	2200      	movs	r2, #0
 800ad80:	2140      	movs	r1, #64	; 0x40
 800ad82:	68f8      	ldr	r0, [r7, #12]
 800ad84:	f000 fbf9 	bl	800b57a <UART_WaitOnFlagUntilTimeout>
 800ad88:	4603      	mov	r3, r0
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d001      	beq.n	800ad92 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800ad8e:	2303      	movs	r3, #3
 800ad90:	e006      	b.n	800ada0 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800ad92:	68fb      	ldr	r3, [r7, #12]
 800ad94:	2220      	movs	r2, #32
 800ad96:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800ad9a:	2300      	movs	r3, #0
 800ad9c:	e000      	b.n	800ada0 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800ad9e:	2302      	movs	r3, #2
  }
}
 800ada0:	4618      	mov	r0, r3
 800ada2:	3720      	adds	r7, #32
 800ada4:	46bd      	mov	sp, r7
 800ada6:	bd80      	pop	{r7, pc}

0800ada8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ada8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800adac:	b08c      	sub	sp, #48	; 0x30
 800adae:	af00      	add	r7, sp, #0
 800adb0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800adb2:	2300      	movs	r3, #0
 800adb4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800adb8:	697b      	ldr	r3, [r7, #20]
 800adba:	689a      	ldr	r2, [r3, #8]
 800adbc:	697b      	ldr	r3, [r7, #20]
 800adbe:	691b      	ldr	r3, [r3, #16]
 800adc0:	431a      	orrs	r2, r3
 800adc2:	697b      	ldr	r3, [r7, #20]
 800adc4:	695b      	ldr	r3, [r3, #20]
 800adc6:	431a      	orrs	r2, r3
 800adc8:	697b      	ldr	r3, [r7, #20]
 800adca:	69db      	ldr	r3, [r3, #28]
 800adcc:	4313      	orrs	r3, r2
 800adce:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800add0:	697b      	ldr	r3, [r7, #20]
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	681a      	ldr	r2, [r3, #0]
 800add6:	4baa      	ldr	r3, [pc, #680]	; (800b080 <UART_SetConfig+0x2d8>)
 800add8:	4013      	ands	r3, r2
 800adda:	697a      	ldr	r2, [r7, #20]
 800addc:	6812      	ldr	r2, [r2, #0]
 800adde:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ade0:	430b      	orrs	r3, r1
 800ade2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ade4:	697b      	ldr	r3, [r7, #20]
 800ade6:	681b      	ldr	r3, [r3, #0]
 800ade8:	685b      	ldr	r3, [r3, #4]
 800adea:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800adee:	697b      	ldr	r3, [r7, #20]
 800adf0:	68da      	ldr	r2, [r3, #12]
 800adf2:	697b      	ldr	r3, [r7, #20]
 800adf4:	681b      	ldr	r3, [r3, #0]
 800adf6:	430a      	orrs	r2, r1
 800adf8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800adfa:	697b      	ldr	r3, [r7, #20]
 800adfc:	699b      	ldr	r3, [r3, #24]
 800adfe:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800ae00:	697b      	ldr	r3, [r7, #20]
 800ae02:	681b      	ldr	r3, [r3, #0]
 800ae04:	4a9f      	ldr	r2, [pc, #636]	; (800b084 <UART_SetConfig+0x2dc>)
 800ae06:	4293      	cmp	r3, r2
 800ae08:	d004      	beq.n	800ae14 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800ae0a:	697b      	ldr	r3, [r7, #20]
 800ae0c:	6a1b      	ldr	r3, [r3, #32]
 800ae0e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ae10:	4313      	orrs	r3, r2
 800ae12:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800ae14:	697b      	ldr	r3, [r7, #20]
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	689b      	ldr	r3, [r3, #8]
 800ae1a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800ae1e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800ae22:	697a      	ldr	r2, [r7, #20]
 800ae24:	6812      	ldr	r2, [r2, #0]
 800ae26:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ae28:	430b      	orrs	r3, r1
 800ae2a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800ae2c:	697b      	ldr	r3, [r7, #20]
 800ae2e:	681b      	ldr	r3, [r3, #0]
 800ae30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae32:	f023 010f 	bic.w	r1, r3, #15
 800ae36:	697b      	ldr	r3, [r7, #20]
 800ae38:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ae3a:	697b      	ldr	r3, [r7, #20]
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	430a      	orrs	r2, r1
 800ae40:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ae42:	697b      	ldr	r3, [r7, #20]
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	4a90      	ldr	r2, [pc, #576]	; (800b088 <UART_SetConfig+0x2e0>)
 800ae48:	4293      	cmp	r3, r2
 800ae4a:	d125      	bne.n	800ae98 <UART_SetConfig+0xf0>
 800ae4c:	4b8f      	ldr	r3, [pc, #572]	; (800b08c <UART_SetConfig+0x2e4>)
 800ae4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ae52:	f003 0303 	and.w	r3, r3, #3
 800ae56:	2b03      	cmp	r3, #3
 800ae58:	d81a      	bhi.n	800ae90 <UART_SetConfig+0xe8>
 800ae5a:	a201      	add	r2, pc, #4	; (adr r2, 800ae60 <UART_SetConfig+0xb8>)
 800ae5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae60:	0800ae71 	.word	0x0800ae71
 800ae64:	0800ae81 	.word	0x0800ae81
 800ae68:	0800ae79 	.word	0x0800ae79
 800ae6c:	0800ae89 	.word	0x0800ae89
 800ae70:	2301      	movs	r3, #1
 800ae72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ae76:	e116      	b.n	800b0a6 <UART_SetConfig+0x2fe>
 800ae78:	2302      	movs	r3, #2
 800ae7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ae7e:	e112      	b.n	800b0a6 <UART_SetConfig+0x2fe>
 800ae80:	2304      	movs	r3, #4
 800ae82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ae86:	e10e      	b.n	800b0a6 <UART_SetConfig+0x2fe>
 800ae88:	2308      	movs	r3, #8
 800ae8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ae8e:	e10a      	b.n	800b0a6 <UART_SetConfig+0x2fe>
 800ae90:	2310      	movs	r3, #16
 800ae92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ae96:	e106      	b.n	800b0a6 <UART_SetConfig+0x2fe>
 800ae98:	697b      	ldr	r3, [r7, #20]
 800ae9a:	681b      	ldr	r3, [r3, #0]
 800ae9c:	4a7c      	ldr	r2, [pc, #496]	; (800b090 <UART_SetConfig+0x2e8>)
 800ae9e:	4293      	cmp	r3, r2
 800aea0:	d138      	bne.n	800af14 <UART_SetConfig+0x16c>
 800aea2:	4b7a      	ldr	r3, [pc, #488]	; (800b08c <UART_SetConfig+0x2e4>)
 800aea4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aea8:	f003 030c 	and.w	r3, r3, #12
 800aeac:	2b0c      	cmp	r3, #12
 800aeae:	d82d      	bhi.n	800af0c <UART_SetConfig+0x164>
 800aeb0:	a201      	add	r2, pc, #4	; (adr r2, 800aeb8 <UART_SetConfig+0x110>)
 800aeb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aeb6:	bf00      	nop
 800aeb8:	0800aeed 	.word	0x0800aeed
 800aebc:	0800af0d 	.word	0x0800af0d
 800aec0:	0800af0d 	.word	0x0800af0d
 800aec4:	0800af0d 	.word	0x0800af0d
 800aec8:	0800aefd 	.word	0x0800aefd
 800aecc:	0800af0d 	.word	0x0800af0d
 800aed0:	0800af0d 	.word	0x0800af0d
 800aed4:	0800af0d 	.word	0x0800af0d
 800aed8:	0800aef5 	.word	0x0800aef5
 800aedc:	0800af0d 	.word	0x0800af0d
 800aee0:	0800af0d 	.word	0x0800af0d
 800aee4:	0800af0d 	.word	0x0800af0d
 800aee8:	0800af05 	.word	0x0800af05
 800aeec:	2300      	movs	r3, #0
 800aeee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800aef2:	e0d8      	b.n	800b0a6 <UART_SetConfig+0x2fe>
 800aef4:	2302      	movs	r3, #2
 800aef6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800aefa:	e0d4      	b.n	800b0a6 <UART_SetConfig+0x2fe>
 800aefc:	2304      	movs	r3, #4
 800aefe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800af02:	e0d0      	b.n	800b0a6 <UART_SetConfig+0x2fe>
 800af04:	2308      	movs	r3, #8
 800af06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800af0a:	e0cc      	b.n	800b0a6 <UART_SetConfig+0x2fe>
 800af0c:	2310      	movs	r3, #16
 800af0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800af12:	e0c8      	b.n	800b0a6 <UART_SetConfig+0x2fe>
 800af14:	697b      	ldr	r3, [r7, #20]
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	4a5e      	ldr	r2, [pc, #376]	; (800b094 <UART_SetConfig+0x2ec>)
 800af1a:	4293      	cmp	r3, r2
 800af1c:	d125      	bne.n	800af6a <UART_SetConfig+0x1c2>
 800af1e:	4b5b      	ldr	r3, [pc, #364]	; (800b08c <UART_SetConfig+0x2e4>)
 800af20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800af24:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800af28:	2b30      	cmp	r3, #48	; 0x30
 800af2a:	d016      	beq.n	800af5a <UART_SetConfig+0x1b2>
 800af2c:	2b30      	cmp	r3, #48	; 0x30
 800af2e:	d818      	bhi.n	800af62 <UART_SetConfig+0x1ba>
 800af30:	2b20      	cmp	r3, #32
 800af32:	d00a      	beq.n	800af4a <UART_SetConfig+0x1a2>
 800af34:	2b20      	cmp	r3, #32
 800af36:	d814      	bhi.n	800af62 <UART_SetConfig+0x1ba>
 800af38:	2b00      	cmp	r3, #0
 800af3a:	d002      	beq.n	800af42 <UART_SetConfig+0x19a>
 800af3c:	2b10      	cmp	r3, #16
 800af3e:	d008      	beq.n	800af52 <UART_SetConfig+0x1aa>
 800af40:	e00f      	b.n	800af62 <UART_SetConfig+0x1ba>
 800af42:	2300      	movs	r3, #0
 800af44:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800af48:	e0ad      	b.n	800b0a6 <UART_SetConfig+0x2fe>
 800af4a:	2302      	movs	r3, #2
 800af4c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800af50:	e0a9      	b.n	800b0a6 <UART_SetConfig+0x2fe>
 800af52:	2304      	movs	r3, #4
 800af54:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800af58:	e0a5      	b.n	800b0a6 <UART_SetConfig+0x2fe>
 800af5a:	2308      	movs	r3, #8
 800af5c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800af60:	e0a1      	b.n	800b0a6 <UART_SetConfig+0x2fe>
 800af62:	2310      	movs	r3, #16
 800af64:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800af68:	e09d      	b.n	800b0a6 <UART_SetConfig+0x2fe>
 800af6a:	697b      	ldr	r3, [r7, #20]
 800af6c:	681b      	ldr	r3, [r3, #0]
 800af6e:	4a4a      	ldr	r2, [pc, #296]	; (800b098 <UART_SetConfig+0x2f0>)
 800af70:	4293      	cmp	r3, r2
 800af72:	d125      	bne.n	800afc0 <UART_SetConfig+0x218>
 800af74:	4b45      	ldr	r3, [pc, #276]	; (800b08c <UART_SetConfig+0x2e4>)
 800af76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800af7a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800af7e:	2bc0      	cmp	r3, #192	; 0xc0
 800af80:	d016      	beq.n	800afb0 <UART_SetConfig+0x208>
 800af82:	2bc0      	cmp	r3, #192	; 0xc0
 800af84:	d818      	bhi.n	800afb8 <UART_SetConfig+0x210>
 800af86:	2b80      	cmp	r3, #128	; 0x80
 800af88:	d00a      	beq.n	800afa0 <UART_SetConfig+0x1f8>
 800af8a:	2b80      	cmp	r3, #128	; 0x80
 800af8c:	d814      	bhi.n	800afb8 <UART_SetConfig+0x210>
 800af8e:	2b00      	cmp	r3, #0
 800af90:	d002      	beq.n	800af98 <UART_SetConfig+0x1f0>
 800af92:	2b40      	cmp	r3, #64	; 0x40
 800af94:	d008      	beq.n	800afa8 <UART_SetConfig+0x200>
 800af96:	e00f      	b.n	800afb8 <UART_SetConfig+0x210>
 800af98:	2300      	movs	r3, #0
 800af9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800af9e:	e082      	b.n	800b0a6 <UART_SetConfig+0x2fe>
 800afa0:	2302      	movs	r3, #2
 800afa2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800afa6:	e07e      	b.n	800b0a6 <UART_SetConfig+0x2fe>
 800afa8:	2304      	movs	r3, #4
 800afaa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800afae:	e07a      	b.n	800b0a6 <UART_SetConfig+0x2fe>
 800afb0:	2308      	movs	r3, #8
 800afb2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800afb6:	e076      	b.n	800b0a6 <UART_SetConfig+0x2fe>
 800afb8:	2310      	movs	r3, #16
 800afba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800afbe:	e072      	b.n	800b0a6 <UART_SetConfig+0x2fe>
 800afc0:	697b      	ldr	r3, [r7, #20]
 800afc2:	681b      	ldr	r3, [r3, #0]
 800afc4:	4a35      	ldr	r2, [pc, #212]	; (800b09c <UART_SetConfig+0x2f4>)
 800afc6:	4293      	cmp	r3, r2
 800afc8:	d12a      	bne.n	800b020 <UART_SetConfig+0x278>
 800afca:	4b30      	ldr	r3, [pc, #192]	; (800b08c <UART_SetConfig+0x2e4>)
 800afcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800afd0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800afd4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800afd8:	d01a      	beq.n	800b010 <UART_SetConfig+0x268>
 800afda:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800afde:	d81b      	bhi.n	800b018 <UART_SetConfig+0x270>
 800afe0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800afe4:	d00c      	beq.n	800b000 <UART_SetConfig+0x258>
 800afe6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800afea:	d815      	bhi.n	800b018 <UART_SetConfig+0x270>
 800afec:	2b00      	cmp	r3, #0
 800afee:	d003      	beq.n	800aff8 <UART_SetConfig+0x250>
 800aff0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aff4:	d008      	beq.n	800b008 <UART_SetConfig+0x260>
 800aff6:	e00f      	b.n	800b018 <UART_SetConfig+0x270>
 800aff8:	2300      	movs	r3, #0
 800affa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800affe:	e052      	b.n	800b0a6 <UART_SetConfig+0x2fe>
 800b000:	2302      	movs	r3, #2
 800b002:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b006:	e04e      	b.n	800b0a6 <UART_SetConfig+0x2fe>
 800b008:	2304      	movs	r3, #4
 800b00a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b00e:	e04a      	b.n	800b0a6 <UART_SetConfig+0x2fe>
 800b010:	2308      	movs	r3, #8
 800b012:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b016:	e046      	b.n	800b0a6 <UART_SetConfig+0x2fe>
 800b018:	2310      	movs	r3, #16
 800b01a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b01e:	e042      	b.n	800b0a6 <UART_SetConfig+0x2fe>
 800b020:	697b      	ldr	r3, [r7, #20]
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	4a17      	ldr	r2, [pc, #92]	; (800b084 <UART_SetConfig+0x2dc>)
 800b026:	4293      	cmp	r3, r2
 800b028:	d13a      	bne.n	800b0a0 <UART_SetConfig+0x2f8>
 800b02a:	4b18      	ldr	r3, [pc, #96]	; (800b08c <UART_SetConfig+0x2e4>)
 800b02c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b030:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800b034:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b038:	d01a      	beq.n	800b070 <UART_SetConfig+0x2c8>
 800b03a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b03e:	d81b      	bhi.n	800b078 <UART_SetConfig+0x2d0>
 800b040:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b044:	d00c      	beq.n	800b060 <UART_SetConfig+0x2b8>
 800b046:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b04a:	d815      	bhi.n	800b078 <UART_SetConfig+0x2d0>
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	d003      	beq.n	800b058 <UART_SetConfig+0x2b0>
 800b050:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b054:	d008      	beq.n	800b068 <UART_SetConfig+0x2c0>
 800b056:	e00f      	b.n	800b078 <UART_SetConfig+0x2d0>
 800b058:	2300      	movs	r3, #0
 800b05a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b05e:	e022      	b.n	800b0a6 <UART_SetConfig+0x2fe>
 800b060:	2302      	movs	r3, #2
 800b062:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b066:	e01e      	b.n	800b0a6 <UART_SetConfig+0x2fe>
 800b068:	2304      	movs	r3, #4
 800b06a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b06e:	e01a      	b.n	800b0a6 <UART_SetConfig+0x2fe>
 800b070:	2308      	movs	r3, #8
 800b072:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b076:	e016      	b.n	800b0a6 <UART_SetConfig+0x2fe>
 800b078:	2310      	movs	r3, #16
 800b07a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b07e:	e012      	b.n	800b0a6 <UART_SetConfig+0x2fe>
 800b080:	cfff69f3 	.word	0xcfff69f3
 800b084:	40008000 	.word	0x40008000
 800b088:	40013800 	.word	0x40013800
 800b08c:	40021000 	.word	0x40021000
 800b090:	40004400 	.word	0x40004400
 800b094:	40004800 	.word	0x40004800
 800b098:	40004c00 	.word	0x40004c00
 800b09c:	40005000 	.word	0x40005000
 800b0a0:	2310      	movs	r3, #16
 800b0a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800b0a6:	697b      	ldr	r3, [r7, #20]
 800b0a8:	681b      	ldr	r3, [r3, #0]
 800b0aa:	4aae      	ldr	r2, [pc, #696]	; (800b364 <UART_SetConfig+0x5bc>)
 800b0ac:	4293      	cmp	r3, r2
 800b0ae:	f040 8097 	bne.w	800b1e0 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800b0b2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b0b6:	2b08      	cmp	r3, #8
 800b0b8:	d823      	bhi.n	800b102 <UART_SetConfig+0x35a>
 800b0ba:	a201      	add	r2, pc, #4	; (adr r2, 800b0c0 <UART_SetConfig+0x318>)
 800b0bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0c0:	0800b0e5 	.word	0x0800b0e5
 800b0c4:	0800b103 	.word	0x0800b103
 800b0c8:	0800b0ed 	.word	0x0800b0ed
 800b0cc:	0800b103 	.word	0x0800b103
 800b0d0:	0800b0f3 	.word	0x0800b0f3
 800b0d4:	0800b103 	.word	0x0800b103
 800b0d8:	0800b103 	.word	0x0800b103
 800b0dc:	0800b103 	.word	0x0800b103
 800b0e0:	0800b0fb 	.word	0x0800b0fb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b0e4:	f7fd fa40 	bl	8008568 <HAL_RCC_GetPCLK1Freq>
 800b0e8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b0ea:	e010      	b.n	800b10e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b0ec:	4b9e      	ldr	r3, [pc, #632]	; (800b368 <UART_SetConfig+0x5c0>)
 800b0ee:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800b0f0:	e00d      	b.n	800b10e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b0f2:	f7fd f9cd 	bl	8008490 <HAL_RCC_GetSysClockFreq>
 800b0f6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b0f8:	e009      	b.n	800b10e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b0fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b0fe:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800b100:	e005      	b.n	800b10e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800b102:	2300      	movs	r3, #0
 800b104:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800b106:	2301      	movs	r3, #1
 800b108:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800b10c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800b10e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b110:	2b00      	cmp	r3, #0
 800b112:	f000 8130 	beq.w	800b376 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800b116:	697b      	ldr	r3, [r7, #20]
 800b118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b11a:	4a94      	ldr	r2, [pc, #592]	; (800b36c <UART_SetConfig+0x5c4>)
 800b11c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b120:	461a      	mov	r2, r3
 800b122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b124:	fbb3 f3f2 	udiv	r3, r3, r2
 800b128:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b12a:	697b      	ldr	r3, [r7, #20]
 800b12c:	685a      	ldr	r2, [r3, #4]
 800b12e:	4613      	mov	r3, r2
 800b130:	005b      	lsls	r3, r3, #1
 800b132:	4413      	add	r3, r2
 800b134:	69ba      	ldr	r2, [r7, #24]
 800b136:	429a      	cmp	r2, r3
 800b138:	d305      	bcc.n	800b146 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800b13a:	697b      	ldr	r3, [r7, #20]
 800b13c:	685b      	ldr	r3, [r3, #4]
 800b13e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b140:	69ba      	ldr	r2, [r7, #24]
 800b142:	429a      	cmp	r2, r3
 800b144:	d903      	bls.n	800b14e <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800b146:	2301      	movs	r3, #1
 800b148:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800b14c:	e113      	b.n	800b376 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b14e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b150:	2200      	movs	r2, #0
 800b152:	60bb      	str	r3, [r7, #8]
 800b154:	60fa      	str	r2, [r7, #12]
 800b156:	697b      	ldr	r3, [r7, #20]
 800b158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b15a:	4a84      	ldr	r2, [pc, #528]	; (800b36c <UART_SetConfig+0x5c4>)
 800b15c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b160:	b29b      	uxth	r3, r3
 800b162:	2200      	movs	r2, #0
 800b164:	603b      	str	r3, [r7, #0]
 800b166:	607a      	str	r2, [r7, #4]
 800b168:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b16c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800b170:	f7f5 fd42 	bl	8000bf8 <__aeabi_uldivmod>
 800b174:	4602      	mov	r2, r0
 800b176:	460b      	mov	r3, r1
 800b178:	4610      	mov	r0, r2
 800b17a:	4619      	mov	r1, r3
 800b17c:	f04f 0200 	mov.w	r2, #0
 800b180:	f04f 0300 	mov.w	r3, #0
 800b184:	020b      	lsls	r3, r1, #8
 800b186:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800b18a:	0202      	lsls	r2, r0, #8
 800b18c:	6979      	ldr	r1, [r7, #20]
 800b18e:	6849      	ldr	r1, [r1, #4]
 800b190:	0849      	lsrs	r1, r1, #1
 800b192:	2000      	movs	r0, #0
 800b194:	460c      	mov	r4, r1
 800b196:	4605      	mov	r5, r0
 800b198:	eb12 0804 	adds.w	r8, r2, r4
 800b19c:	eb43 0905 	adc.w	r9, r3, r5
 800b1a0:	697b      	ldr	r3, [r7, #20]
 800b1a2:	685b      	ldr	r3, [r3, #4]
 800b1a4:	2200      	movs	r2, #0
 800b1a6:	469a      	mov	sl, r3
 800b1a8:	4693      	mov	fp, r2
 800b1aa:	4652      	mov	r2, sl
 800b1ac:	465b      	mov	r3, fp
 800b1ae:	4640      	mov	r0, r8
 800b1b0:	4649      	mov	r1, r9
 800b1b2:	f7f5 fd21 	bl	8000bf8 <__aeabi_uldivmod>
 800b1b6:	4602      	mov	r2, r0
 800b1b8:	460b      	mov	r3, r1
 800b1ba:	4613      	mov	r3, r2
 800b1bc:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b1be:	6a3b      	ldr	r3, [r7, #32]
 800b1c0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b1c4:	d308      	bcc.n	800b1d8 <UART_SetConfig+0x430>
 800b1c6:	6a3b      	ldr	r3, [r7, #32]
 800b1c8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b1cc:	d204      	bcs.n	800b1d8 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800b1ce:	697b      	ldr	r3, [r7, #20]
 800b1d0:	681b      	ldr	r3, [r3, #0]
 800b1d2:	6a3a      	ldr	r2, [r7, #32]
 800b1d4:	60da      	str	r2, [r3, #12]
 800b1d6:	e0ce      	b.n	800b376 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800b1d8:	2301      	movs	r3, #1
 800b1da:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800b1de:	e0ca      	b.n	800b376 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b1e0:	697b      	ldr	r3, [r7, #20]
 800b1e2:	69db      	ldr	r3, [r3, #28]
 800b1e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b1e8:	d166      	bne.n	800b2b8 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800b1ea:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b1ee:	2b08      	cmp	r3, #8
 800b1f0:	d827      	bhi.n	800b242 <UART_SetConfig+0x49a>
 800b1f2:	a201      	add	r2, pc, #4	; (adr r2, 800b1f8 <UART_SetConfig+0x450>)
 800b1f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1f8:	0800b21d 	.word	0x0800b21d
 800b1fc:	0800b225 	.word	0x0800b225
 800b200:	0800b22d 	.word	0x0800b22d
 800b204:	0800b243 	.word	0x0800b243
 800b208:	0800b233 	.word	0x0800b233
 800b20c:	0800b243 	.word	0x0800b243
 800b210:	0800b243 	.word	0x0800b243
 800b214:	0800b243 	.word	0x0800b243
 800b218:	0800b23b 	.word	0x0800b23b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b21c:	f7fd f9a4 	bl	8008568 <HAL_RCC_GetPCLK1Freq>
 800b220:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b222:	e014      	b.n	800b24e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b224:	f7fd f9b6 	bl	8008594 <HAL_RCC_GetPCLK2Freq>
 800b228:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b22a:	e010      	b.n	800b24e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b22c:	4b4e      	ldr	r3, [pc, #312]	; (800b368 <UART_SetConfig+0x5c0>)
 800b22e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800b230:	e00d      	b.n	800b24e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b232:	f7fd f92d 	bl	8008490 <HAL_RCC_GetSysClockFreq>
 800b236:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b238:	e009      	b.n	800b24e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b23a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b23e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800b240:	e005      	b.n	800b24e <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800b242:	2300      	movs	r3, #0
 800b244:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800b246:	2301      	movs	r3, #1
 800b248:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800b24c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b24e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b250:	2b00      	cmp	r3, #0
 800b252:	f000 8090 	beq.w	800b376 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b256:	697b      	ldr	r3, [r7, #20]
 800b258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b25a:	4a44      	ldr	r2, [pc, #272]	; (800b36c <UART_SetConfig+0x5c4>)
 800b25c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b260:	461a      	mov	r2, r3
 800b262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b264:	fbb3 f3f2 	udiv	r3, r3, r2
 800b268:	005a      	lsls	r2, r3, #1
 800b26a:	697b      	ldr	r3, [r7, #20]
 800b26c:	685b      	ldr	r3, [r3, #4]
 800b26e:	085b      	lsrs	r3, r3, #1
 800b270:	441a      	add	r2, r3
 800b272:	697b      	ldr	r3, [r7, #20]
 800b274:	685b      	ldr	r3, [r3, #4]
 800b276:	fbb2 f3f3 	udiv	r3, r2, r3
 800b27a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b27c:	6a3b      	ldr	r3, [r7, #32]
 800b27e:	2b0f      	cmp	r3, #15
 800b280:	d916      	bls.n	800b2b0 <UART_SetConfig+0x508>
 800b282:	6a3b      	ldr	r3, [r7, #32]
 800b284:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b288:	d212      	bcs.n	800b2b0 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b28a:	6a3b      	ldr	r3, [r7, #32]
 800b28c:	b29b      	uxth	r3, r3
 800b28e:	f023 030f 	bic.w	r3, r3, #15
 800b292:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b294:	6a3b      	ldr	r3, [r7, #32]
 800b296:	085b      	lsrs	r3, r3, #1
 800b298:	b29b      	uxth	r3, r3
 800b29a:	f003 0307 	and.w	r3, r3, #7
 800b29e:	b29a      	uxth	r2, r3
 800b2a0:	8bfb      	ldrh	r3, [r7, #30]
 800b2a2:	4313      	orrs	r3, r2
 800b2a4:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800b2a6:	697b      	ldr	r3, [r7, #20]
 800b2a8:	681b      	ldr	r3, [r3, #0]
 800b2aa:	8bfa      	ldrh	r2, [r7, #30]
 800b2ac:	60da      	str	r2, [r3, #12]
 800b2ae:	e062      	b.n	800b376 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800b2b0:	2301      	movs	r3, #1
 800b2b2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800b2b6:	e05e      	b.n	800b376 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800b2b8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b2bc:	2b08      	cmp	r3, #8
 800b2be:	d828      	bhi.n	800b312 <UART_SetConfig+0x56a>
 800b2c0:	a201      	add	r2, pc, #4	; (adr r2, 800b2c8 <UART_SetConfig+0x520>)
 800b2c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b2c6:	bf00      	nop
 800b2c8:	0800b2ed 	.word	0x0800b2ed
 800b2cc:	0800b2f5 	.word	0x0800b2f5
 800b2d0:	0800b2fd 	.word	0x0800b2fd
 800b2d4:	0800b313 	.word	0x0800b313
 800b2d8:	0800b303 	.word	0x0800b303
 800b2dc:	0800b313 	.word	0x0800b313
 800b2e0:	0800b313 	.word	0x0800b313
 800b2e4:	0800b313 	.word	0x0800b313
 800b2e8:	0800b30b 	.word	0x0800b30b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b2ec:	f7fd f93c 	bl	8008568 <HAL_RCC_GetPCLK1Freq>
 800b2f0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b2f2:	e014      	b.n	800b31e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b2f4:	f7fd f94e 	bl	8008594 <HAL_RCC_GetPCLK2Freq>
 800b2f8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b2fa:	e010      	b.n	800b31e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b2fc:	4b1a      	ldr	r3, [pc, #104]	; (800b368 <UART_SetConfig+0x5c0>)
 800b2fe:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800b300:	e00d      	b.n	800b31e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b302:	f7fd f8c5 	bl	8008490 <HAL_RCC_GetSysClockFreq>
 800b306:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b308:	e009      	b.n	800b31e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b30a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b30e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800b310:	e005      	b.n	800b31e <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800b312:	2300      	movs	r3, #0
 800b314:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800b316:	2301      	movs	r3, #1
 800b318:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800b31c:	bf00      	nop
    }

    if (pclk != 0U)
 800b31e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b320:	2b00      	cmp	r3, #0
 800b322:	d028      	beq.n	800b376 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b324:	697b      	ldr	r3, [r7, #20]
 800b326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b328:	4a10      	ldr	r2, [pc, #64]	; (800b36c <UART_SetConfig+0x5c4>)
 800b32a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b32e:	461a      	mov	r2, r3
 800b330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b332:	fbb3 f2f2 	udiv	r2, r3, r2
 800b336:	697b      	ldr	r3, [r7, #20]
 800b338:	685b      	ldr	r3, [r3, #4]
 800b33a:	085b      	lsrs	r3, r3, #1
 800b33c:	441a      	add	r2, r3
 800b33e:	697b      	ldr	r3, [r7, #20]
 800b340:	685b      	ldr	r3, [r3, #4]
 800b342:	fbb2 f3f3 	udiv	r3, r2, r3
 800b346:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b348:	6a3b      	ldr	r3, [r7, #32]
 800b34a:	2b0f      	cmp	r3, #15
 800b34c:	d910      	bls.n	800b370 <UART_SetConfig+0x5c8>
 800b34e:	6a3b      	ldr	r3, [r7, #32]
 800b350:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b354:	d20c      	bcs.n	800b370 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b356:	6a3b      	ldr	r3, [r7, #32]
 800b358:	b29a      	uxth	r2, r3
 800b35a:	697b      	ldr	r3, [r7, #20]
 800b35c:	681b      	ldr	r3, [r3, #0]
 800b35e:	60da      	str	r2, [r3, #12]
 800b360:	e009      	b.n	800b376 <UART_SetConfig+0x5ce>
 800b362:	bf00      	nop
 800b364:	40008000 	.word	0x40008000
 800b368:	00f42400 	.word	0x00f42400
 800b36c:	08015974 	.word	0x08015974
      }
      else
      {
        ret = HAL_ERROR;
 800b370:	2301      	movs	r3, #1
 800b372:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800b376:	697b      	ldr	r3, [r7, #20]
 800b378:	2201      	movs	r2, #1
 800b37a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800b37e:	697b      	ldr	r3, [r7, #20]
 800b380:	2201      	movs	r2, #1
 800b382:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b386:	697b      	ldr	r3, [r7, #20]
 800b388:	2200      	movs	r2, #0
 800b38a:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800b38c:	697b      	ldr	r3, [r7, #20]
 800b38e:	2200      	movs	r2, #0
 800b390:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800b392:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800b396:	4618      	mov	r0, r3
 800b398:	3730      	adds	r7, #48	; 0x30
 800b39a:	46bd      	mov	sp, r7
 800b39c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800b3a0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b3a0:	b480      	push	{r7}
 800b3a2:	b083      	sub	sp, #12
 800b3a4:	af00      	add	r7, sp, #0
 800b3a6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b3ac:	f003 0301 	and.w	r3, r3, #1
 800b3b0:	2b00      	cmp	r3, #0
 800b3b2:	d00a      	beq.n	800b3ca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	681b      	ldr	r3, [r3, #0]
 800b3b8:	685b      	ldr	r3, [r3, #4]
 800b3ba:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	430a      	orrs	r2, r1
 800b3c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b3ce:	f003 0302 	and.w	r3, r3, #2
 800b3d2:	2b00      	cmp	r3, #0
 800b3d4:	d00a      	beq.n	800b3ec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	681b      	ldr	r3, [r3, #0]
 800b3da:	685b      	ldr	r3, [r3, #4]
 800b3dc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	681b      	ldr	r3, [r3, #0]
 800b3e8:	430a      	orrs	r2, r1
 800b3ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b3f0:	f003 0304 	and.w	r3, r3, #4
 800b3f4:	2b00      	cmp	r3, #0
 800b3f6:	d00a      	beq.n	800b40e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	681b      	ldr	r3, [r3, #0]
 800b3fc:	685b      	ldr	r3, [r3, #4]
 800b3fe:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	681b      	ldr	r3, [r3, #0]
 800b40a:	430a      	orrs	r2, r1
 800b40c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b412:	f003 0308 	and.w	r3, r3, #8
 800b416:	2b00      	cmp	r3, #0
 800b418:	d00a      	beq.n	800b430 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	681b      	ldr	r3, [r3, #0]
 800b41e:	685b      	ldr	r3, [r3, #4]
 800b420:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	681b      	ldr	r3, [r3, #0]
 800b42c:	430a      	orrs	r2, r1
 800b42e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b434:	f003 0310 	and.w	r3, r3, #16
 800b438:	2b00      	cmp	r3, #0
 800b43a:	d00a      	beq.n	800b452 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	681b      	ldr	r3, [r3, #0]
 800b440:	689b      	ldr	r3, [r3, #8]
 800b442:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	681b      	ldr	r3, [r3, #0]
 800b44e:	430a      	orrs	r2, r1
 800b450:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b456:	f003 0320 	and.w	r3, r3, #32
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	d00a      	beq.n	800b474 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	681b      	ldr	r3, [r3, #0]
 800b462:	689b      	ldr	r3, [r3, #8]
 800b464:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	681b      	ldr	r3, [r3, #0]
 800b470:	430a      	orrs	r2, r1
 800b472:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b478:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	d01a      	beq.n	800b4b6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	681b      	ldr	r3, [r3, #0]
 800b484:	685b      	ldr	r3, [r3, #4]
 800b486:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	681b      	ldr	r3, [r3, #0]
 800b492:	430a      	orrs	r2, r1
 800b494:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b49a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b49e:	d10a      	bne.n	800b4b6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	685b      	ldr	r3, [r3, #4]
 800b4a6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	681b      	ldr	r3, [r3, #0]
 800b4b2:	430a      	orrs	r2, r1
 800b4b4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b4ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b4be:	2b00      	cmp	r3, #0
 800b4c0:	d00a      	beq.n	800b4d8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	681b      	ldr	r3, [r3, #0]
 800b4c6:	685b      	ldr	r3, [r3, #4]
 800b4c8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	430a      	orrs	r2, r1
 800b4d6:	605a      	str	r2, [r3, #4]
  }
}
 800b4d8:	bf00      	nop
 800b4da:	370c      	adds	r7, #12
 800b4dc:	46bd      	mov	sp, r7
 800b4de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4e2:	4770      	bx	lr

0800b4e4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b4e4:	b580      	push	{r7, lr}
 800b4e6:	b086      	sub	sp, #24
 800b4e8:	af02      	add	r7, sp, #8
 800b4ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	2200      	movs	r2, #0
 800b4f0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b4f4:	f7f8 fa50 	bl	8003998 <HAL_GetTick>
 800b4f8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	681b      	ldr	r3, [r3, #0]
 800b4fe:	681b      	ldr	r3, [r3, #0]
 800b500:	f003 0308 	and.w	r3, r3, #8
 800b504:	2b08      	cmp	r3, #8
 800b506:	d10e      	bne.n	800b526 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b508:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b50c:	9300      	str	r3, [sp, #0]
 800b50e:	68fb      	ldr	r3, [r7, #12]
 800b510:	2200      	movs	r2, #0
 800b512:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b516:	6878      	ldr	r0, [r7, #4]
 800b518:	f000 f82f 	bl	800b57a <UART_WaitOnFlagUntilTimeout>
 800b51c:	4603      	mov	r3, r0
 800b51e:	2b00      	cmp	r3, #0
 800b520:	d001      	beq.n	800b526 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b522:	2303      	movs	r3, #3
 800b524:	e025      	b.n	800b572 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	681b      	ldr	r3, [r3, #0]
 800b52a:	681b      	ldr	r3, [r3, #0]
 800b52c:	f003 0304 	and.w	r3, r3, #4
 800b530:	2b04      	cmp	r3, #4
 800b532:	d10e      	bne.n	800b552 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b534:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b538:	9300      	str	r3, [sp, #0]
 800b53a:	68fb      	ldr	r3, [r7, #12]
 800b53c:	2200      	movs	r2, #0
 800b53e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800b542:	6878      	ldr	r0, [r7, #4]
 800b544:	f000 f819 	bl	800b57a <UART_WaitOnFlagUntilTimeout>
 800b548:	4603      	mov	r3, r0
 800b54a:	2b00      	cmp	r3, #0
 800b54c:	d001      	beq.n	800b552 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b54e:	2303      	movs	r3, #3
 800b550:	e00f      	b.n	800b572 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	2220      	movs	r2, #32
 800b556:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	2220      	movs	r2, #32
 800b55e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	2200      	movs	r2, #0
 800b566:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	2200      	movs	r2, #0
 800b56c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b570:	2300      	movs	r3, #0
}
 800b572:	4618      	mov	r0, r3
 800b574:	3710      	adds	r7, #16
 800b576:	46bd      	mov	sp, r7
 800b578:	bd80      	pop	{r7, pc}

0800b57a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b57a:	b580      	push	{r7, lr}
 800b57c:	b09c      	sub	sp, #112	; 0x70
 800b57e:	af00      	add	r7, sp, #0
 800b580:	60f8      	str	r0, [r7, #12]
 800b582:	60b9      	str	r1, [r7, #8]
 800b584:	603b      	str	r3, [r7, #0]
 800b586:	4613      	mov	r3, r2
 800b588:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b58a:	e0a9      	b.n	800b6e0 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b58c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b58e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b592:	f000 80a5 	beq.w	800b6e0 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b596:	f7f8 f9ff 	bl	8003998 <HAL_GetTick>
 800b59a:	4602      	mov	r2, r0
 800b59c:	683b      	ldr	r3, [r7, #0]
 800b59e:	1ad3      	subs	r3, r2, r3
 800b5a0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800b5a2:	429a      	cmp	r2, r3
 800b5a4:	d302      	bcc.n	800b5ac <UART_WaitOnFlagUntilTimeout+0x32>
 800b5a6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b5a8:	2b00      	cmp	r3, #0
 800b5aa:	d140      	bne.n	800b62e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800b5ac:	68fb      	ldr	r3, [r7, #12]
 800b5ae:	681b      	ldr	r3, [r3, #0]
 800b5b0:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b5b4:	e853 3f00 	ldrex	r3, [r3]
 800b5b8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800b5ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b5bc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800b5c0:	667b      	str	r3, [r7, #100]	; 0x64
 800b5c2:	68fb      	ldr	r3, [r7, #12]
 800b5c4:	681b      	ldr	r3, [r3, #0]
 800b5c6:	461a      	mov	r2, r3
 800b5c8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b5ca:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b5cc:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5ce:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800b5d0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b5d2:	e841 2300 	strex	r3, r2, [r1]
 800b5d6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800b5d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b5da:	2b00      	cmp	r3, #0
 800b5dc:	d1e6      	bne.n	800b5ac <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b5de:	68fb      	ldr	r3, [r7, #12]
 800b5e0:	681b      	ldr	r3, [r3, #0]
 800b5e2:	3308      	adds	r3, #8
 800b5e4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b5e8:	e853 3f00 	ldrex	r3, [r3]
 800b5ec:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b5ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5f0:	f023 0301 	bic.w	r3, r3, #1
 800b5f4:	663b      	str	r3, [r7, #96]	; 0x60
 800b5f6:	68fb      	ldr	r3, [r7, #12]
 800b5f8:	681b      	ldr	r3, [r3, #0]
 800b5fa:	3308      	adds	r3, #8
 800b5fc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b5fe:	64ba      	str	r2, [r7, #72]	; 0x48
 800b600:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b602:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b604:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b606:	e841 2300 	strex	r3, r2, [r1]
 800b60a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800b60c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b60e:	2b00      	cmp	r3, #0
 800b610:	d1e5      	bne.n	800b5de <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800b612:	68fb      	ldr	r3, [r7, #12]
 800b614:	2220      	movs	r2, #32
 800b616:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800b61a:	68fb      	ldr	r3, [r7, #12]
 800b61c:	2220      	movs	r2, #32
 800b61e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800b622:	68fb      	ldr	r3, [r7, #12]
 800b624:	2200      	movs	r2, #0
 800b626:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800b62a:	2303      	movs	r3, #3
 800b62c:	e069      	b.n	800b702 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800b62e:	68fb      	ldr	r3, [r7, #12]
 800b630:	681b      	ldr	r3, [r3, #0]
 800b632:	681b      	ldr	r3, [r3, #0]
 800b634:	f003 0304 	and.w	r3, r3, #4
 800b638:	2b00      	cmp	r3, #0
 800b63a:	d051      	beq.n	800b6e0 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b63c:	68fb      	ldr	r3, [r7, #12]
 800b63e:	681b      	ldr	r3, [r3, #0]
 800b640:	69db      	ldr	r3, [r3, #28]
 800b642:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b646:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b64a:	d149      	bne.n	800b6e0 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b64c:	68fb      	ldr	r3, [r7, #12]
 800b64e:	681b      	ldr	r3, [r3, #0]
 800b650:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b654:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800b656:	68fb      	ldr	r3, [r7, #12]
 800b658:	681b      	ldr	r3, [r3, #0]
 800b65a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b65c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b65e:	e853 3f00 	ldrex	r3, [r3]
 800b662:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b666:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800b66a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b66c:	68fb      	ldr	r3, [r7, #12]
 800b66e:	681b      	ldr	r3, [r3, #0]
 800b670:	461a      	mov	r2, r3
 800b672:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b674:	637b      	str	r3, [r7, #52]	; 0x34
 800b676:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b678:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b67a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b67c:	e841 2300 	strex	r3, r2, [r1]
 800b680:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800b682:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b684:	2b00      	cmp	r3, #0
 800b686:	d1e6      	bne.n	800b656 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b688:	68fb      	ldr	r3, [r7, #12]
 800b68a:	681b      	ldr	r3, [r3, #0]
 800b68c:	3308      	adds	r3, #8
 800b68e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b690:	697b      	ldr	r3, [r7, #20]
 800b692:	e853 3f00 	ldrex	r3, [r3]
 800b696:	613b      	str	r3, [r7, #16]
   return(result);
 800b698:	693b      	ldr	r3, [r7, #16]
 800b69a:	f023 0301 	bic.w	r3, r3, #1
 800b69e:	66bb      	str	r3, [r7, #104]	; 0x68
 800b6a0:	68fb      	ldr	r3, [r7, #12]
 800b6a2:	681b      	ldr	r3, [r3, #0]
 800b6a4:	3308      	adds	r3, #8
 800b6a6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800b6a8:	623a      	str	r2, [r7, #32]
 800b6aa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b6ac:	69f9      	ldr	r1, [r7, #28]
 800b6ae:	6a3a      	ldr	r2, [r7, #32]
 800b6b0:	e841 2300 	strex	r3, r2, [r1]
 800b6b4:	61bb      	str	r3, [r7, #24]
   return(result);
 800b6b6:	69bb      	ldr	r3, [r7, #24]
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	d1e5      	bne.n	800b688 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800b6bc:	68fb      	ldr	r3, [r7, #12]
 800b6be:	2220      	movs	r2, #32
 800b6c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800b6c4:	68fb      	ldr	r3, [r7, #12]
 800b6c6:	2220      	movs	r2, #32
 800b6c8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b6cc:	68fb      	ldr	r3, [r7, #12]
 800b6ce:	2220      	movs	r2, #32
 800b6d0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b6d4:	68fb      	ldr	r3, [r7, #12]
 800b6d6:	2200      	movs	r2, #0
 800b6d8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800b6dc:	2303      	movs	r3, #3
 800b6de:	e010      	b.n	800b702 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b6e0:	68fb      	ldr	r3, [r7, #12]
 800b6e2:	681b      	ldr	r3, [r3, #0]
 800b6e4:	69da      	ldr	r2, [r3, #28]
 800b6e6:	68bb      	ldr	r3, [r7, #8]
 800b6e8:	4013      	ands	r3, r2
 800b6ea:	68ba      	ldr	r2, [r7, #8]
 800b6ec:	429a      	cmp	r2, r3
 800b6ee:	bf0c      	ite	eq
 800b6f0:	2301      	moveq	r3, #1
 800b6f2:	2300      	movne	r3, #0
 800b6f4:	b2db      	uxtb	r3, r3
 800b6f6:	461a      	mov	r2, r3
 800b6f8:	79fb      	ldrb	r3, [r7, #7]
 800b6fa:	429a      	cmp	r2, r3
 800b6fc:	f43f af46 	beq.w	800b58c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b700:	2300      	movs	r3, #0
}
 800b702:	4618      	mov	r0, r3
 800b704:	3770      	adds	r7, #112	; 0x70
 800b706:	46bd      	mov	sp, r7
 800b708:	bd80      	pop	{r7, pc}

0800b70a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b70a:	b480      	push	{r7}
 800b70c:	b085      	sub	sp, #20
 800b70e:	af00      	add	r7, sp, #0
 800b710:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b718:	2b01      	cmp	r3, #1
 800b71a:	d101      	bne.n	800b720 <HAL_UARTEx_DisableFifoMode+0x16>
 800b71c:	2302      	movs	r3, #2
 800b71e:	e027      	b.n	800b770 <HAL_UARTEx_DisableFifoMode+0x66>
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	2201      	movs	r2, #1
 800b724:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	2224      	movs	r2, #36	; 0x24
 800b72c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	681b      	ldr	r3, [r3, #0]
 800b734:	681b      	ldr	r3, [r3, #0]
 800b736:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	681b      	ldr	r3, [r3, #0]
 800b73c:	681a      	ldr	r2, [r3, #0]
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	681b      	ldr	r3, [r3, #0]
 800b742:	f022 0201 	bic.w	r2, r2, #1
 800b746:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b748:	68fb      	ldr	r3, [r7, #12]
 800b74a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800b74e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	2200      	movs	r2, #0
 800b754:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	681b      	ldr	r3, [r3, #0]
 800b75a:	68fa      	ldr	r2, [r7, #12]
 800b75c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	2220      	movs	r2, #32
 800b762:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	2200      	movs	r2, #0
 800b76a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b76e:	2300      	movs	r3, #0
}
 800b770:	4618      	mov	r0, r3
 800b772:	3714      	adds	r7, #20
 800b774:	46bd      	mov	sp, r7
 800b776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b77a:	4770      	bx	lr

0800b77c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b77c:	b580      	push	{r7, lr}
 800b77e:	b084      	sub	sp, #16
 800b780:	af00      	add	r7, sp, #0
 800b782:	6078      	str	r0, [r7, #4]
 800b784:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b78c:	2b01      	cmp	r3, #1
 800b78e:	d101      	bne.n	800b794 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b790:	2302      	movs	r3, #2
 800b792:	e02d      	b.n	800b7f0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	2201      	movs	r2, #1
 800b798:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	2224      	movs	r2, #36	; 0x24
 800b7a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	681b      	ldr	r3, [r3, #0]
 800b7a8:	681b      	ldr	r3, [r3, #0]
 800b7aa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	681b      	ldr	r3, [r3, #0]
 800b7b0:	681a      	ldr	r2, [r3, #0]
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	681b      	ldr	r3, [r3, #0]
 800b7b6:	f022 0201 	bic.w	r2, r2, #1
 800b7ba:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	681b      	ldr	r3, [r3, #0]
 800b7c0:	689b      	ldr	r3, [r3, #8]
 800b7c2:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	681b      	ldr	r3, [r3, #0]
 800b7ca:	683a      	ldr	r2, [r7, #0]
 800b7cc:	430a      	orrs	r2, r1
 800b7ce:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b7d0:	6878      	ldr	r0, [r7, #4]
 800b7d2:	f000 f84f 	bl	800b874 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	681b      	ldr	r3, [r3, #0]
 800b7da:	68fa      	ldr	r2, [r7, #12]
 800b7dc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	2220      	movs	r2, #32
 800b7e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	2200      	movs	r2, #0
 800b7ea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b7ee:	2300      	movs	r3, #0
}
 800b7f0:	4618      	mov	r0, r3
 800b7f2:	3710      	adds	r7, #16
 800b7f4:	46bd      	mov	sp, r7
 800b7f6:	bd80      	pop	{r7, pc}

0800b7f8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b7f8:	b580      	push	{r7, lr}
 800b7fa:	b084      	sub	sp, #16
 800b7fc:	af00      	add	r7, sp, #0
 800b7fe:	6078      	str	r0, [r7, #4]
 800b800:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b808:	2b01      	cmp	r3, #1
 800b80a:	d101      	bne.n	800b810 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b80c:	2302      	movs	r3, #2
 800b80e:	e02d      	b.n	800b86c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	2201      	movs	r2, #1
 800b814:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	2224      	movs	r2, #36	; 0x24
 800b81c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	681b      	ldr	r3, [r3, #0]
 800b824:	681b      	ldr	r3, [r3, #0]
 800b826:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	681b      	ldr	r3, [r3, #0]
 800b82c:	681a      	ldr	r2, [r3, #0]
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	681b      	ldr	r3, [r3, #0]
 800b832:	f022 0201 	bic.w	r2, r2, #1
 800b836:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	681b      	ldr	r3, [r3, #0]
 800b83c:	689b      	ldr	r3, [r3, #8]
 800b83e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	681b      	ldr	r3, [r3, #0]
 800b846:	683a      	ldr	r2, [r7, #0]
 800b848:	430a      	orrs	r2, r1
 800b84a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b84c:	6878      	ldr	r0, [r7, #4]
 800b84e:	f000 f811 	bl	800b874 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	681b      	ldr	r3, [r3, #0]
 800b856:	68fa      	ldr	r2, [r7, #12]
 800b858:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	2220      	movs	r2, #32
 800b85e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	2200      	movs	r2, #0
 800b866:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b86a:	2300      	movs	r3, #0
}
 800b86c:	4618      	mov	r0, r3
 800b86e:	3710      	adds	r7, #16
 800b870:	46bd      	mov	sp, r7
 800b872:	bd80      	pop	{r7, pc}

0800b874 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b874:	b480      	push	{r7}
 800b876:	b085      	sub	sp, #20
 800b878:	af00      	add	r7, sp, #0
 800b87a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b880:	2b00      	cmp	r3, #0
 800b882:	d108      	bne.n	800b896 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	2201      	movs	r2, #1
 800b888:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	2201      	movs	r2, #1
 800b890:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b894:	e031      	b.n	800b8fa <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b896:	2308      	movs	r3, #8
 800b898:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b89a:	2308      	movs	r3, #8
 800b89c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	681b      	ldr	r3, [r3, #0]
 800b8a2:	689b      	ldr	r3, [r3, #8]
 800b8a4:	0e5b      	lsrs	r3, r3, #25
 800b8a6:	b2db      	uxtb	r3, r3
 800b8a8:	f003 0307 	and.w	r3, r3, #7
 800b8ac:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	681b      	ldr	r3, [r3, #0]
 800b8b2:	689b      	ldr	r3, [r3, #8]
 800b8b4:	0f5b      	lsrs	r3, r3, #29
 800b8b6:	b2db      	uxtb	r3, r3
 800b8b8:	f003 0307 	and.w	r3, r3, #7
 800b8bc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b8be:	7bbb      	ldrb	r3, [r7, #14]
 800b8c0:	7b3a      	ldrb	r2, [r7, #12]
 800b8c2:	4911      	ldr	r1, [pc, #68]	; (800b908 <UARTEx_SetNbDataToProcess+0x94>)
 800b8c4:	5c8a      	ldrb	r2, [r1, r2]
 800b8c6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b8ca:	7b3a      	ldrb	r2, [r7, #12]
 800b8cc:	490f      	ldr	r1, [pc, #60]	; (800b90c <UARTEx_SetNbDataToProcess+0x98>)
 800b8ce:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b8d0:	fb93 f3f2 	sdiv	r3, r3, r2
 800b8d4:	b29a      	uxth	r2, r3
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b8dc:	7bfb      	ldrb	r3, [r7, #15]
 800b8de:	7b7a      	ldrb	r2, [r7, #13]
 800b8e0:	4909      	ldr	r1, [pc, #36]	; (800b908 <UARTEx_SetNbDataToProcess+0x94>)
 800b8e2:	5c8a      	ldrb	r2, [r1, r2]
 800b8e4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b8e8:	7b7a      	ldrb	r2, [r7, #13]
 800b8ea:	4908      	ldr	r1, [pc, #32]	; (800b90c <UARTEx_SetNbDataToProcess+0x98>)
 800b8ec:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b8ee:	fb93 f3f2 	sdiv	r3, r3, r2
 800b8f2:	b29a      	uxth	r2, r3
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800b8fa:	bf00      	nop
 800b8fc:	3714      	adds	r7, #20
 800b8fe:	46bd      	mov	sp, r7
 800b900:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b904:	4770      	bx	lr
 800b906:	bf00      	nop
 800b908:	0801598c 	.word	0x0801598c
 800b90c:	08015994 	.word	0x08015994

0800b910 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800b910:	b480      	push	{r7}
 800b912:	b085      	sub	sp, #20
 800b914:	af00      	add	r7, sp, #0
 800b916:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	2200      	movs	r2, #0
 800b91c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800b920:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800b924:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800b926:	68fb      	ldr	r3, [r7, #12]
 800b928:	b29a      	uxth	r2, r3
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800b930:	2300      	movs	r3, #0
}
 800b932:	4618      	mov	r0, r3
 800b934:	3714      	adds	r7, #20
 800b936:	46bd      	mov	sp, r7
 800b938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b93c:	4770      	bx	lr

0800b93e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800b93e:	b480      	push	{r7}
 800b940:	b085      	sub	sp, #20
 800b942:	af00      	add	r7, sp, #0
 800b944:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800b946:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800b94a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800b952:	b29a      	uxth	r2, r3
 800b954:	68fb      	ldr	r3, [r7, #12]
 800b956:	b29b      	uxth	r3, r3
 800b958:	43db      	mvns	r3, r3
 800b95a:	b29b      	uxth	r3, r3
 800b95c:	4013      	ands	r3, r2
 800b95e:	b29a      	uxth	r2, r3
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800b966:	2300      	movs	r3, #0
}
 800b968:	4618      	mov	r0, r3
 800b96a:	3714      	adds	r7, #20
 800b96c:	46bd      	mov	sp, r7
 800b96e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b972:	4770      	bx	lr

0800b974 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800b974:	b084      	sub	sp, #16
 800b976:	b480      	push	{r7}
 800b978:	b083      	sub	sp, #12
 800b97a:	af00      	add	r7, sp, #0
 800b97c:	6078      	str	r0, [r7, #4]
 800b97e:	f107 0014 	add.w	r0, r7, #20
 800b982:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	2201      	movs	r2, #1
 800b98a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	2200      	movs	r2, #0
 800b992:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	2200      	movs	r2, #0
 800b99a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	2200      	movs	r2, #0
 800b9a2:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800b9a6:	2300      	movs	r3, #0
}
 800b9a8:	4618      	mov	r0, r3
 800b9aa:	370c      	adds	r7, #12
 800b9ac:	46bd      	mov	sp, r7
 800b9ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9b2:	b004      	add	sp, #16
 800b9b4:	4770      	bx	lr
	...

0800b9b8 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800b9b8:	b480      	push	{r7}
 800b9ba:	b09d      	sub	sp, #116	; 0x74
 800b9bc:	af00      	add	r7, sp, #0
 800b9be:	6078      	str	r0, [r7, #4]
 800b9c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800b9c2:	2300      	movs	r3, #0
 800b9c4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800b9c8:	687a      	ldr	r2, [r7, #4]
 800b9ca:	683b      	ldr	r3, [r7, #0]
 800b9cc:	781b      	ldrb	r3, [r3, #0]
 800b9ce:	009b      	lsls	r3, r3, #2
 800b9d0:	4413      	add	r3, r2
 800b9d2:	881b      	ldrh	r3, [r3, #0]
 800b9d4:	b29b      	uxth	r3, r3
 800b9d6:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800b9da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b9de:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800b9e2:	683b      	ldr	r3, [r7, #0]
 800b9e4:	78db      	ldrb	r3, [r3, #3]
 800b9e6:	2b03      	cmp	r3, #3
 800b9e8:	d81f      	bhi.n	800ba2a <USB_ActivateEndpoint+0x72>
 800b9ea:	a201      	add	r2, pc, #4	; (adr r2, 800b9f0 <USB_ActivateEndpoint+0x38>)
 800b9ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b9f0:	0800ba01 	.word	0x0800ba01
 800b9f4:	0800ba1d 	.word	0x0800ba1d
 800b9f8:	0800ba33 	.word	0x0800ba33
 800b9fc:	0800ba0f 	.word	0x0800ba0f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800ba00:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800ba04:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800ba08:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800ba0c:	e012      	b.n	800ba34 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800ba0e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800ba12:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800ba16:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800ba1a:	e00b      	b.n	800ba34 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800ba1c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800ba20:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800ba24:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800ba28:	e004      	b.n	800ba34 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800ba2a:	2301      	movs	r3, #1
 800ba2c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 800ba30:	e000      	b.n	800ba34 <USB_ActivateEndpoint+0x7c>
      break;
 800ba32:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800ba34:	687a      	ldr	r2, [r7, #4]
 800ba36:	683b      	ldr	r3, [r7, #0]
 800ba38:	781b      	ldrb	r3, [r3, #0]
 800ba3a:	009b      	lsls	r3, r3, #2
 800ba3c:	441a      	add	r2, r3
 800ba3e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800ba42:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ba46:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ba4a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ba4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ba52:	b29b      	uxth	r3, r3
 800ba54:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800ba56:	687a      	ldr	r2, [r7, #4]
 800ba58:	683b      	ldr	r3, [r7, #0]
 800ba5a:	781b      	ldrb	r3, [r3, #0]
 800ba5c:	009b      	lsls	r3, r3, #2
 800ba5e:	4413      	add	r3, r2
 800ba60:	881b      	ldrh	r3, [r3, #0]
 800ba62:	b29b      	uxth	r3, r3
 800ba64:	b21b      	sxth	r3, r3
 800ba66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ba6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ba6e:	b21a      	sxth	r2, r3
 800ba70:	683b      	ldr	r3, [r7, #0]
 800ba72:	781b      	ldrb	r3, [r3, #0]
 800ba74:	b21b      	sxth	r3, r3
 800ba76:	4313      	orrs	r3, r2
 800ba78:	b21b      	sxth	r3, r3
 800ba7a:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 800ba7e:	687a      	ldr	r2, [r7, #4]
 800ba80:	683b      	ldr	r3, [r7, #0]
 800ba82:	781b      	ldrb	r3, [r3, #0]
 800ba84:	009b      	lsls	r3, r3, #2
 800ba86:	441a      	add	r2, r3
 800ba88:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800ba8c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ba90:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ba94:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ba98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ba9c:	b29b      	uxth	r3, r3
 800ba9e:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800baa0:	683b      	ldr	r3, [r7, #0]
 800baa2:	7b1b      	ldrb	r3, [r3, #12]
 800baa4:	2b00      	cmp	r3, #0
 800baa6:	f040 8149 	bne.w	800bd3c <USB_ActivateEndpoint+0x384>
  {
    if (ep->is_in != 0U)
 800baaa:	683b      	ldr	r3, [r7, #0]
 800baac:	785b      	ldrb	r3, [r3, #1]
 800baae:	2b00      	cmp	r3, #0
 800bab0:	f000 8084 	beq.w	800bbbc <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	61bb      	str	r3, [r7, #24]
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800babe:	b29b      	uxth	r3, r3
 800bac0:	461a      	mov	r2, r3
 800bac2:	69bb      	ldr	r3, [r7, #24]
 800bac4:	4413      	add	r3, r2
 800bac6:	61bb      	str	r3, [r7, #24]
 800bac8:	683b      	ldr	r3, [r7, #0]
 800baca:	781b      	ldrb	r3, [r3, #0]
 800bacc:	00da      	lsls	r2, r3, #3
 800bace:	69bb      	ldr	r3, [r7, #24]
 800bad0:	4413      	add	r3, r2
 800bad2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800bad6:	617b      	str	r3, [r7, #20]
 800bad8:	683b      	ldr	r3, [r7, #0]
 800bada:	88db      	ldrh	r3, [r3, #6]
 800badc:	085b      	lsrs	r3, r3, #1
 800bade:	b29b      	uxth	r3, r3
 800bae0:	005b      	lsls	r3, r3, #1
 800bae2:	b29a      	uxth	r2, r3
 800bae4:	697b      	ldr	r3, [r7, #20]
 800bae6:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800bae8:	687a      	ldr	r2, [r7, #4]
 800baea:	683b      	ldr	r3, [r7, #0]
 800baec:	781b      	ldrb	r3, [r3, #0]
 800baee:	009b      	lsls	r3, r3, #2
 800baf0:	4413      	add	r3, r2
 800baf2:	881b      	ldrh	r3, [r3, #0]
 800baf4:	827b      	strh	r3, [r7, #18]
 800baf6:	8a7b      	ldrh	r3, [r7, #18]
 800baf8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bafc:	2b00      	cmp	r3, #0
 800bafe:	d01b      	beq.n	800bb38 <USB_ActivateEndpoint+0x180>
 800bb00:	687a      	ldr	r2, [r7, #4]
 800bb02:	683b      	ldr	r3, [r7, #0]
 800bb04:	781b      	ldrb	r3, [r3, #0]
 800bb06:	009b      	lsls	r3, r3, #2
 800bb08:	4413      	add	r3, r2
 800bb0a:	881b      	ldrh	r3, [r3, #0]
 800bb0c:	b29b      	uxth	r3, r3
 800bb0e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bb12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bb16:	823b      	strh	r3, [r7, #16]
 800bb18:	687a      	ldr	r2, [r7, #4]
 800bb1a:	683b      	ldr	r3, [r7, #0]
 800bb1c:	781b      	ldrb	r3, [r3, #0]
 800bb1e:	009b      	lsls	r3, r3, #2
 800bb20:	441a      	add	r2, r3
 800bb22:	8a3b      	ldrh	r3, [r7, #16]
 800bb24:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bb28:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bb2c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bb30:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800bb34:	b29b      	uxth	r3, r3
 800bb36:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800bb38:	683b      	ldr	r3, [r7, #0]
 800bb3a:	78db      	ldrb	r3, [r3, #3]
 800bb3c:	2b01      	cmp	r3, #1
 800bb3e:	d020      	beq.n	800bb82 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800bb40:	687a      	ldr	r2, [r7, #4]
 800bb42:	683b      	ldr	r3, [r7, #0]
 800bb44:	781b      	ldrb	r3, [r3, #0]
 800bb46:	009b      	lsls	r3, r3, #2
 800bb48:	4413      	add	r3, r2
 800bb4a:	881b      	ldrh	r3, [r3, #0]
 800bb4c:	b29b      	uxth	r3, r3
 800bb4e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bb52:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bb56:	81bb      	strh	r3, [r7, #12]
 800bb58:	89bb      	ldrh	r3, [r7, #12]
 800bb5a:	f083 0320 	eor.w	r3, r3, #32
 800bb5e:	81bb      	strh	r3, [r7, #12]
 800bb60:	687a      	ldr	r2, [r7, #4]
 800bb62:	683b      	ldr	r3, [r7, #0]
 800bb64:	781b      	ldrb	r3, [r3, #0]
 800bb66:	009b      	lsls	r3, r3, #2
 800bb68:	441a      	add	r2, r3
 800bb6a:	89bb      	ldrh	r3, [r7, #12]
 800bb6c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bb70:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bb74:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bb78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bb7c:	b29b      	uxth	r3, r3
 800bb7e:	8013      	strh	r3, [r2, #0]
 800bb80:	e2a6      	b.n	800c0d0 <USB_ActivateEndpoint+0x718>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800bb82:	687a      	ldr	r2, [r7, #4]
 800bb84:	683b      	ldr	r3, [r7, #0]
 800bb86:	781b      	ldrb	r3, [r3, #0]
 800bb88:	009b      	lsls	r3, r3, #2
 800bb8a:	4413      	add	r3, r2
 800bb8c:	881b      	ldrh	r3, [r3, #0]
 800bb8e:	b29b      	uxth	r3, r3
 800bb90:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bb94:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bb98:	81fb      	strh	r3, [r7, #14]
 800bb9a:	687a      	ldr	r2, [r7, #4]
 800bb9c:	683b      	ldr	r3, [r7, #0]
 800bb9e:	781b      	ldrb	r3, [r3, #0]
 800bba0:	009b      	lsls	r3, r3, #2
 800bba2:	441a      	add	r2, r3
 800bba4:	89fb      	ldrh	r3, [r7, #14]
 800bba6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bbaa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bbae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bbb2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bbb6:	b29b      	uxth	r3, r3
 800bbb8:	8013      	strh	r3, [r2, #0]
 800bbba:	e289      	b.n	800c0d0 <USB_ActivateEndpoint+0x718>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	633b      	str	r3, [r7, #48]	; 0x30
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bbc6:	b29b      	uxth	r3, r3
 800bbc8:	461a      	mov	r2, r3
 800bbca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbcc:	4413      	add	r3, r2
 800bbce:	633b      	str	r3, [r7, #48]	; 0x30
 800bbd0:	683b      	ldr	r3, [r7, #0]
 800bbd2:	781b      	ldrb	r3, [r3, #0]
 800bbd4:	00da      	lsls	r2, r3, #3
 800bbd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbd8:	4413      	add	r3, r2
 800bbda:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800bbde:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bbe0:	683b      	ldr	r3, [r7, #0]
 800bbe2:	88db      	ldrh	r3, [r3, #6]
 800bbe4:	085b      	lsrs	r3, r3, #1
 800bbe6:	b29b      	uxth	r3, r3
 800bbe8:	005b      	lsls	r3, r3, #1
 800bbea:	b29a      	uxth	r2, r3
 800bbec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbee:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	62bb      	str	r3, [r7, #40]	; 0x28
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bbfa:	b29b      	uxth	r3, r3
 800bbfc:	461a      	mov	r2, r3
 800bbfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc00:	4413      	add	r3, r2
 800bc02:	62bb      	str	r3, [r7, #40]	; 0x28
 800bc04:	683b      	ldr	r3, [r7, #0]
 800bc06:	781b      	ldrb	r3, [r3, #0]
 800bc08:	00da      	lsls	r2, r3, #3
 800bc0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc0c:	4413      	add	r3, r2
 800bc0e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800bc12:	627b      	str	r3, [r7, #36]	; 0x24
 800bc14:	683b      	ldr	r3, [r7, #0]
 800bc16:	691b      	ldr	r3, [r3, #16]
 800bc18:	2b3e      	cmp	r3, #62	; 0x3e
 800bc1a:	d918      	bls.n	800bc4e <USB_ActivateEndpoint+0x296>
 800bc1c:	683b      	ldr	r3, [r7, #0]
 800bc1e:	691b      	ldr	r3, [r3, #16]
 800bc20:	095b      	lsrs	r3, r3, #5
 800bc22:	66bb      	str	r3, [r7, #104]	; 0x68
 800bc24:	683b      	ldr	r3, [r7, #0]
 800bc26:	691b      	ldr	r3, [r3, #16]
 800bc28:	f003 031f 	and.w	r3, r3, #31
 800bc2c:	2b00      	cmp	r3, #0
 800bc2e:	d102      	bne.n	800bc36 <USB_ActivateEndpoint+0x27e>
 800bc30:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800bc32:	3b01      	subs	r3, #1
 800bc34:	66bb      	str	r3, [r7, #104]	; 0x68
 800bc36:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800bc38:	b29b      	uxth	r3, r3
 800bc3a:	029b      	lsls	r3, r3, #10
 800bc3c:	b29b      	uxth	r3, r3
 800bc3e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bc42:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bc46:	b29a      	uxth	r2, r3
 800bc48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc4a:	801a      	strh	r2, [r3, #0]
 800bc4c:	e029      	b.n	800bca2 <USB_ActivateEndpoint+0x2ea>
 800bc4e:	683b      	ldr	r3, [r7, #0]
 800bc50:	691b      	ldr	r3, [r3, #16]
 800bc52:	2b00      	cmp	r3, #0
 800bc54:	d112      	bne.n	800bc7c <USB_ActivateEndpoint+0x2c4>
 800bc56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc58:	881b      	ldrh	r3, [r3, #0]
 800bc5a:	b29b      	uxth	r3, r3
 800bc5c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800bc60:	b29a      	uxth	r2, r3
 800bc62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc64:	801a      	strh	r2, [r3, #0]
 800bc66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc68:	881b      	ldrh	r3, [r3, #0]
 800bc6a:	b29b      	uxth	r3, r3
 800bc6c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bc70:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bc74:	b29a      	uxth	r2, r3
 800bc76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc78:	801a      	strh	r2, [r3, #0]
 800bc7a:	e012      	b.n	800bca2 <USB_ActivateEndpoint+0x2ea>
 800bc7c:	683b      	ldr	r3, [r7, #0]
 800bc7e:	691b      	ldr	r3, [r3, #16]
 800bc80:	085b      	lsrs	r3, r3, #1
 800bc82:	66bb      	str	r3, [r7, #104]	; 0x68
 800bc84:	683b      	ldr	r3, [r7, #0]
 800bc86:	691b      	ldr	r3, [r3, #16]
 800bc88:	f003 0301 	and.w	r3, r3, #1
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	d002      	beq.n	800bc96 <USB_ActivateEndpoint+0x2de>
 800bc90:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800bc92:	3301      	adds	r3, #1
 800bc94:	66bb      	str	r3, [r7, #104]	; 0x68
 800bc96:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800bc98:	b29b      	uxth	r3, r3
 800bc9a:	029b      	lsls	r3, r3, #10
 800bc9c:	b29a      	uxth	r2, r3
 800bc9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bca0:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800bca2:	687a      	ldr	r2, [r7, #4]
 800bca4:	683b      	ldr	r3, [r7, #0]
 800bca6:	781b      	ldrb	r3, [r3, #0]
 800bca8:	009b      	lsls	r3, r3, #2
 800bcaa:	4413      	add	r3, r2
 800bcac:	881b      	ldrh	r3, [r3, #0]
 800bcae:	847b      	strh	r3, [r7, #34]	; 0x22
 800bcb0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800bcb2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bcb6:	2b00      	cmp	r3, #0
 800bcb8:	d01b      	beq.n	800bcf2 <USB_ActivateEndpoint+0x33a>
 800bcba:	687a      	ldr	r2, [r7, #4]
 800bcbc:	683b      	ldr	r3, [r7, #0]
 800bcbe:	781b      	ldrb	r3, [r3, #0]
 800bcc0:	009b      	lsls	r3, r3, #2
 800bcc2:	4413      	add	r3, r2
 800bcc4:	881b      	ldrh	r3, [r3, #0]
 800bcc6:	b29b      	uxth	r3, r3
 800bcc8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bccc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bcd0:	843b      	strh	r3, [r7, #32]
 800bcd2:	687a      	ldr	r2, [r7, #4]
 800bcd4:	683b      	ldr	r3, [r7, #0]
 800bcd6:	781b      	ldrb	r3, [r3, #0]
 800bcd8:	009b      	lsls	r3, r3, #2
 800bcda:	441a      	add	r2, r3
 800bcdc:	8c3b      	ldrh	r3, [r7, #32]
 800bcde:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bce2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bce6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800bcea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bcee:	b29b      	uxth	r3, r3
 800bcf0:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800bcf2:	687a      	ldr	r2, [r7, #4]
 800bcf4:	683b      	ldr	r3, [r7, #0]
 800bcf6:	781b      	ldrb	r3, [r3, #0]
 800bcf8:	009b      	lsls	r3, r3, #2
 800bcfa:	4413      	add	r3, r2
 800bcfc:	881b      	ldrh	r3, [r3, #0]
 800bcfe:	b29b      	uxth	r3, r3
 800bd00:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800bd04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bd08:	83fb      	strh	r3, [r7, #30]
 800bd0a:	8bfb      	ldrh	r3, [r7, #30]
 800bd0c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800bd10:	83fb      	strh	r3, [r7, #30]
 800bd12:	8bfb      	ldrh	r3, [r7, #30]
 800bd14:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800bd18:	83fb      	strh	r3, [r7, #30]
 800bd1a:	687a      	ldr	r2, [r7, #4]
 800bd1c:	683b      	ldr	r3, [r7, #0]
 800bd1e:	781b      	ldrb	r3, [r3, #0]
 800bd20:	009b      	lsls	r3, r3, #2
 800bd22:	441a      	add	r2, r3
 800bd24:	8bfb      	ldrh	r3, [r7, #30]
 800bd26:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bd2a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bd2e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bd32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bd36:	b29b      	uxth	r3, r3
 800bd38:	8013      	strh	r3, [r2, #0]
 800bd3a:	e1c9      	b.n	800c0d0 <USB_ActivateEndpoint+0x718>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800bd3c:	683b      	ldr	r3, [r7, #0]
 800bd3e:	78db      	ldrb	r3, [r3, #3]
 800bd40:	2b02      	cmp	r3, #2
 800bd42:	d11e      	bne.n	800bd82 <USB_ActivateEndpoint+0x3ca>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800bd44:	687a      	ldr	r2, [r7, #4]
 800bd46:	683b      	ldr	r3, [r7, #0]
 800bd48:	781b      	ldrb	r3, [r3, #0]
 800bd4a:	009b      	lsls	r3, r3, #2
 800bd4c:	4413      	add	r3, r2
 800bd4e:	881b      	ldrh	r3, [r3, #0]
 800bd50:	b29b      	uxth	r3, r3
 800bd52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bd56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bd5a:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800bd5e:	687a      	ldr	r2, [r7, #4]
 800bd60:	683b      	ldr	r3, [r7, #0]
 800bd62:	781b      	ldrb	r3, [r3, #0]
 800bd64:	009b      	lsls	r3, r3, #2
 800bd66:	441a      	add	r2, r3
 800bd68:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800bd6c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bd70:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bd74:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800bd78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bd7c:	b29b      	uxth	r3, r3
 800bd7e:	8013      	strh	r3, [r2, #0]
 800bd80:	e01d      	b.n	800bdbe <USB_ActivateEndpoint+0x406>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800bd82:	687a      	ldr	r2, [r7, #4]
 800bd84:	683b      	ldr	r3, [r7, #0]
 800bd86:	781b      	ldrb	r3, [r3, #0]
 800bd88:	009b      	lsls	r3, r3, #2
 800bd8a:	4413      	add	r3, r2
 800bd8c:	881b      	ldrh	r3, [r3, #0]
 800bd8e:	b29b      	uxth	r3, r3
 800bd90:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800bd94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bd98:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 800bd9c:	687a      	ldr	r2, [r7, #4]
 800bd9e:	683b      	ldr	r3, [r7, #0]
 800bda0:	781b      	ldrb	r3, [r3, #0]
 800bda2:	009b      	lsls	r3, r3, #2
 800bda4:	441a      	add	r2, r3
 800bda6:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800bdaa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bdae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bdb2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bdb6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bdba:	b29b      	uxth	r3, r3
 800bdbc:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	65fb      	str	r3, [r7, #92]	; 0x5c
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bdc8:	b29b      	uxth	r3, r3
 800bdca:	461a      	mov	r2, r3
 800bdcc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bdce:	4413      	add	r3, r2
 800bdd0:	65fb      	str	r3, [r7, #92]	; 0x5c
 800bdd2:	683b      	ldr	r3, [r7, #0]
 800bdd4:	781b      	ldrb	r3, [r3, #0]
 800bdd6:	00da      	lsls	r2, r3, #3
 800bdd8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bdda:	4413      	add	r3, r2
 800bddc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800bde0:	65bb      	str	r3, [r7, #88]	; 0x58
 800bde2:	683b      	ldr	r3, [r7, #0]
 800bde4:	891b      	ldrh	r3, [r3, #8]
 800bde6:	085b      	lsrs	r3, r3, #1
 800bde8:	b29b      	uxth	r3, r3
 800bdea:	005b      	lsls	r3, r3, #1
 800bdec:	b29a      	uxth	r2, r3
 800bdee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bdf0:	801a      	strh	r2, [r3, #0]
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	657b      	str	r3, [r7, #84]	; 0x54
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bdfc:	b29b      	uxth	r3, r3
 800bdfe:	461a      	mov	r2, r3
 800be00:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800be02:	4413      	add	r3, r2
 800be04:	657b      	str	r3, [r7, #84]	; 0x54
 800be06:	683b      	ldr	r3, [r7, #0]
 800be08:	781b      	ldrb	r3, [r3, #0]
 800be0a:	00da      	lsls	r2, r3, #3
 800be0c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800be0e:	4413      	add	r3, r2
 800be10:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800be14:	653b      	str	r3, [r7, #80]	; 0x50
 800be16:	683b      	ldr	r3, [r7, #0]
 800be18:	895b      	ldrh	r3, [r3, #10]
 800be1a:	085b      	lsrs	r3, r3, #1
 800be1c:	b29b      	uxth	r3, r3
 800be1e:	005b      	lsls	r3, r3, #1
 800be20:	b29a      	uxth	r2, r3
 800be22:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800be24:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800be26:	683b      	ldr	r3, [r7, #0]
 800be28:	785b      	ldrb	r3, [r3, #1]
 800be2a:	2b00      	cmp	r3, #0
 800be2c:	f040 8093 	bne.w	800bf56 <USB_ActivateEndpoint+0x59e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800be30:	687a      	ldr	r2, [r7, #4]
 800be32:	683b      	ldr	r3, [r7, #0]
 800be34:	781b      	ldrb	r3, [r3, #0]
 800be36:	009b      	lsls	r3, r3, #2
 800be38:	4413      	add	r3, r2
 800be3a:	881b      	ldrh	r3, [r3, #0]
 800be3c:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800be40:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800be44:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800be48:	2b00      	cmp	r3, #0
 800be4a:	d01b      	beq.n	800be84 <USB_ActivateEndpoint+0x4cc>
 800be4c:	687a      	ldr	r2, [r7, #4]
 800be4e:	683b      	ldr	r3, [r7, #0]
 800be50:	781b      	ldrb	r3, [r3, #0]
 800be52:	009b      	lsls	r3, r3, #2
 800be54:	4413      	add	r3, r2
 800be56:	881b      	ldrh	r3, [r3, #0]
 800be58:	b29b      	uxth	r3, r3
 800be5a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800be5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800be62:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800be64:	687a      	ldr	r2, [r7, #4]
 800be66:	683b      	ldr	r3, [r7, #0]
 800be68:	781b      	ldrb	r3, [r3, #0]
 800be6a:	009b      	lsls	r3, r3, #2
 800be6c:	441a      	add	r2, r3
 800be6e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800be70:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800be74:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800be78:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800be7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800be80:	b29b      	uxth	r3, r3
 800be82:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800be84:	687a      	ldr	r2, [r7, #4]
 800be86:	683b      	ldr	r3, [r7, #0]
 800be88:	781b      	ldrb	r3, [r3, #0]
 800be8a:	009b      	lsls	r3, r3, #2
 800be8c:	4413      	add	r3, r2
 800be8e:	881b      	ldrh	r3, [r3, #0]
 800be90:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800be92:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800be94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800be98:	2b00      	cmp	r3, #0
 800be9a:	d01b      	beq.n	800bed4 <USB_ActivateEndpoint+0x51c>
 800be9c:	687a      	ldr	r2, [r7, #4]
 800be9e:	683b      	ldr	r3, [r7, #0]
 800bea0:	781b      	ldrb	r3, [r3, #0]
 800bea2:	009b      	lsls	r3, r3, #2
 800bea4:	4413      	add	r3, r2
 800bea6:	881b      	ldrh	r3, [r3, #0]
 800bea8:	b29b      	uxth	r3, r3
 800beaa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800beae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800beb2:	877b      	strh	r3, [r7, #58]	; 0x3a
 800beb4:	687a      	ldr	r2, [r7, #4]
 800beb6:	683b      	ldr	r3, [r7, #0]
 800beb8:	781b      	ldrb	r3, [r3, #0]
 800beba:	009b      	lsls	r3, r3, #2
 800bebc:	441a      	add	r2, r3
 800bebe:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800bec0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bec4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bec8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800becc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800bed0:	b29b      	uxth	r3, r3
 800bed2:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800bed4:	687a      	ldr	r2, [r7, #4]
 800bed6:	683b      	ldr	r3, [r7, #0]
 800bed8:	781b      	ldrb	r3, [r3, #0]
 800beda:	009b      	lsls	r3, r3, #2
 800bedc:	4413      	add	r3, r2
 800bede:	881b      	ldrh	r3, [r3, #0]
 800bee0:	b29b      	uxth	r3, r3
 800bee2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800bee6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800beea:	873b      	strh	r3, [r7, #56]	; 0x38
 800beec:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800beee:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800bef2:	873b      	strh	r3, [r7, #56]	; 0x38
 800bef4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800bef6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800befa:	873b      	strh	r3, [r7, #56]	; 0x38
 800befc:	687a      	ldr	r2, [r7, #4]
 800befe:	683b      	ldr	r3, [r7, #0]
 800bf00:	781b      	ldrb	r3, [r3, #0]
 800bf02:	009b      	lsls	r3, r3, #2
 800bf04:	441a      	add	r2, r3
 800bf06:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800bf08:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bf0c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bf10:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bf14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bf18:	b29b      	uxth	r3, r3
 800bf1a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800bf1c:	687a      	ldr	r2, [r7, #4]
 800bf1e:	683b      	ldr	r3, [r7, #0]
 800bf20:	781b      	ldrb	r3, [r3, #0]
 800bf22:	009b      	lsls	r3, r3, #2
 800bf24:	4413      	add	r3, r2
 800bf26:	881b      	ldrh	r3, [r3, #0]
 800bf28:	b29b      	uxth	r3, r3
 800bf2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bf2e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bf32:	86fb      	strh	r3, [r7, #54]	; 0x36
 800bf34:	687a      	ldr	r2, [r7, #4]
 800bf36:	683b      	ldr	r3, [r7, #0]
 800bf38:	781b      	ldrb	r3, [r3, #0]
 800bf3a:	009b      	lsls	r3, r3, #2
 800bf3c:	441a      	add	r2, r3
 800bf3e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800bf40:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bf44:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bf48:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bf4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bf50:	b29b      	uxth	r3, r3
 800bf52:	8013      	strh	r3, [r2, #0]
 800bf54:	e0bc      	b.n	800c0d0 <USB_ActivateEndpoint+0x718>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800bf56:	687a      	ldr	r2, [r7, #4]
 800bf58:	683b      	ldr	r3, [r7, #0]
 800bf5a:	781b      	ldrb	r3, [r3, #0]
 800bf5c:	009b      	lsls	r3, r3, #2
 800bf5e:	4413      	add	r3, r2
 800bf60:	881b      	ldrh	r3, [r3, #0]
 800bf62:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800bf66:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800bf6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bf6e:	2b00      	cmp	r3, #0
 800bf70:	d01d      	beq.n	800bfae <USB_ActivateEndpoint+0x5f6>
 800bf72:	687a      	ldr	r2, [r7, #4]
 800bf74:	683b      	ldr	r3, [r7, #0]
 800bf76:	781b      	ldrb	r3, [r3, #0]
 800bf78:	009b      	lsls	r3, r3, #2
 800bf7a:	4413      	add	r3, r2
 800bf7c:	881b      	ldrh	r3, [r3, #0]
 800bf7e:	b29b      	uxth	r3, r3
 800bf80:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bf84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bf88:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800bf8c:	687a      	ldr	r2, [r7, #4]
 800bf8e:	683b      	ldr	r3, [r7, #0]
 800bf90:	781b      	ldrb	r3, [r3, #0]
 800bf92:	009b      	lsls	r3, r3, #2
 800bf94:	441a      	add	r2, r3
 800bf96:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800bf9a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bf9e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bfa2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800bfa6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bfaa:	b29b      	uxth	r3, r3
 800bfac:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800bfae:	687a      	ldr	r2, [r7, #4]
 800bfb0:	683b      	ldr	r3, [r7, #0]
 800bfb2:	781b      	ldrb	r3, [r3, #0]
 800bfb4:	009b      	lsls	r3, r3, #2
 800bfb6:	4413      	add	r3, r2
 800bfb8:	881b      	ldrh	r3, [r3, #0]
 800bfba:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800bfbe:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800bfc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bfc6:	2b00      	cmp	r3, #0
 800bfc8:	d01d      	beq.n	800c006 <USB_ActivateEndpoint+0x64e>
 800bfca:	687a      	ldr	r2, [r7, #4]
 800bfcc:	683b      	ldr	r3, [r7, #0]
 800bfce:	781b      	ldrb	r3, [r3, #0]
 800bfd0:	009b      	lsls	r3, r3, #2
 800bfd2:	4413      	add	r3, r2
 800bfd4:	881b      	ldrh	r3, [r3, #0]
 800bfd6:	b29b      	uxth	r3, r3
 800bfd8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bfdc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bfe0:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800bfe4:	687a      	ldr	r2, [r7, #4]
 800bfe6:	683b      	ldr	r3, [r7, #0]
 800bfe8:	781b      	ldrb	r3, [r3, #0]
 800bfea:	009b      	lsls	r3, r3, #2
 800bfec:	441a      	add	r2, r3
 800bfee:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800bff2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bff6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bffa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bffe:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800c002:	b29b      	uxth	r3, r3
 800c004:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800c006:	683b      	ldr	r3, [r7, #0]
 800c008:	78db      	ldrb	r3, [r3, #3]
 800c00a:	2b01      	cmp	r3, #1
 800c00c:	d024      	beq.n	800c058 <USB_ActivateEndpoint+0x6a0>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800c00e:	687a      	ldr	r2, [r7, #4]
 800c010:	683b      	ldr	r3, [r7, #0]
 800c012:	781b      	ldrb	r3, [r3, #0]
 800c014:	009b      	lsls	r3, r3, #2
 800c016:	4413      	add	r3, r2
 800c018:	881b      	ldrh	r3, [r3, #0]
 800c01a:	b29b      	uxth	r3, r3
 800c01c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c020:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c024:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800c028:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800c02c:	f083 0320 	eor.w	r3, r3, #32
 800c030:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800c034:	687a      	ldr	r2, [r7, #4]
 800c036:	683b      	ldr	r3, [r7, #0]
 800c038:	781b      	ldrb	r3, [r3, #0]
 800c03a:	009b      	lsls	r3, r3, #2
 800c03c:	441a      	add	r2, r3
 800c03e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800c042:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c046:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c04a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c04e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c052:	b29b      	uxth	r3, r3
 800c054:	8013      	strh	r3, [r2, #0]
 800c056:	e01d      	b.n	800c094 <USB_ActivateEndpoint+0x6dc>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800c058:	687a      	ldr	r2, [r7, #4]
 800c05a:	683b      	ldr	r3, [r7, #0]
 800c05c:	781b      	ldrb	r3, [r3, #0]
 800c05e:	009b      	lsls	r3, r3, #2
 800c060:	4413      	add	r3, r2
 800c062:	881b      	ldrh	r3, [r3, #0]
 800c064:	b29b      	uxth	r3, r3
 800c066:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c06a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c06e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800c072:	687a      	ldr	r2, [r7, #4]
 800c074:	683b      	ldr	r3, [r7, #0]
 800c076:	781b      	ldrb	r3, [r3, #0]
 800c078:	009b      	lsls	r3, r3, #2
 800c07a:	441a      	add	r2, r3
 800c07c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800c080:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c084:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c088:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c08c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c090:	b29b      	uxth	r3, r3
 800c092:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800c094:	687a      	ldr	r2, [r7, #4]
 800c096:	683b      	ldr	r3, [r7, #0]
 800c098:	781b      	ldrb	r3, [r3, #0]
 800c09a:	009b      	lsls	r3, r3, #2
 800c09c:	4413      	add	r3, r2
 800c09e:	881b      	ldrh	r3, [r3, #0]
 800c0a0:	b29b      	uxth	r3, r3
 800c0a2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c0a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c0aa:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800c0ae:	687a      	ldr	r2, [r7, #4]
 800c0b0:	683b      	ldr	r3, [r7, #0]
 800c0b2:	781b      	ldrb	r3, [r3, #0]
 800c0b4:	009b      	lsls	r3, r3, #2
 800c0b6:	441a      	add	r2, r3
 800c0b8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800c0bc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c0c0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c0c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c0c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c0cc:	b29b      	uxth	r3, r3
 800c0ce:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800c0d0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 800c0d4:	4618      	mov	r0, r3
 800c0d6:	3774      	adds	r7, #116	; 0x74
 800c0d8:	46bd      	mov	sp, r7
 800c0da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0de:	4770      	bx	lr

0800c0e0 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800c0e0:	b480      	push	{r7}
 800c0e2:	b08d      	sub	sp, #52	; 0x34
 800c0e4:	af00      	add	r7, sp, #0
 800c0e6:	6078      	str	r0, [r7, #4]
 800c0e8:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800c0ea:	683b      	ldr	r3, [r7, #0]
 800c0ec:	7b1b      	ldrb	r3, [r3, #12]
 800c0ee:	2b00      	cmp	r3, #0
 800c0f0:	f040 808e 	bne.w	800c210 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800c0f4:	683b      	ldr	r3, [r7, #0]
 800c0f6:	785b      	ldrb	r3, [r3, #1]
 800c0f8:	2b00      	cmp	r3, #0
 800c0fa:	d044      	beq.n	800c186 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c0fc:	687a      	ldr	r2, [r7, #4]
 800c0fe:	683b      	ldr	r3, [r7, #0]
 800c100:	781b      	ldrb	r3, [r3, #0]
 800c102:	009b      	lsls	r3, r3, #2
 800c104:	4413      	add	r3, r2
 800c106:	881b      	ldrh	r3, [r3, #0]
 800c108:	81bb      	strh	r3, [r7, #12]
 800c10a:	89bb      	ldrh	r3, [r7, #12]
 800c10c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c110:	2b00      	cmp	r3, #0
 800c112:	d01b      	beq.n	800c14c <USB_DeactivateEndpoint+0x6c>
 800c114:	687a      	ldr	r2, [r7, #4]
 800c116:	683b      	ldr	r3, [r7, #0]
 800c118:	781b      	ldrb	r3, [r3, #0]
 800c11a:	009b      	lsls	r3, r3, #2
 800c11c:	4413      	add	r3, r2
 800c11e:	881b      	ldrh	r3, [r3, #0]
 800c120:	b29b      	uxth	r3, r3
 800c122:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c126:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c12a:	817b      	strh	r3, [r7, #10]
 800c12c:	687a      	ldr	r2, [r7, #4]
 800c12e:	683b      	ldr	r3, [r7, #0]
 800c130:	781b      	ldrb	r3, [r3, #0]
 800c132:	009b      	lsls	r3, r3, #2
 800c134:	441a      	add	r2, r3
 800c136:	897b      	ldrh	r3, [r7, #10]
 800c138:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c13c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c140:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c144:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800c148:	b29b      	uxth	r3, r3
 800c14a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800c14c:	687a      	ldr	r2, [r7, #4]
 800c14e:	683b      	ldr	r3, [r7, #0]
 800c150:	781b      	ldrb	r3, [r3, #0]
 800c152:	009b      	lsls	r3, r3, #2
 800c154:	4413      	add	r3, r2
 800c156:	881b      	ldrh	r3, [r3, #0]
 800c158:	b29b      	uxth	r3, r3
 800c15a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c15e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c162:	813b      	strh	r3, [r7, #8]
 800c164:	687a      	ldr	r2, [r7, #4]
 800c166:	683b      	ldr	r3, [r7, #0]
 800c168:	781b      	ldrb	r3, [r3, #0]
 800c16a:	009b      	lsls	r3, r3, #2
 800c16c:	441a      	add	r2, r3
 800c16e:	893b      	ldrh	r3, [r7, #8]
 800c170:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c174:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c178:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c17c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c180:	b29b      	uxth	r3, r3
 800c182:	8013      	strh	r3, [r2, #0]
 800c184:	e192      	b.n	800c4ac <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c186:	687a      	ldr	r2, [r7, #4]
 800c188:	683b      	ldr	r3, [r7, #0]
 800c18a:	781b      	ldrb	r3, [r3, #0]
 800c18c:	009b      	lsls	r3, r3, #2
 800c18e:	4413      	add	r3, r2
 800c190:	881b      	ldrh	r3, [r3, #0]
 800c192:	827b      	strh	r3, [r7, #18]
 800c194:	8a7b      	ldrh	r3, [r7, #18]
 800c196:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c19a:	2b00      	cmp	r3, #0
 800c19c:	d01b      	beq.n	800c1d6 <USB_DeactivateEndpoint+0xf6>
 800c19e:	687a      	ldr	r2, [r7, #4]
 800c1a0:	683b      	ldr	r3, [r7, #0]
 800c1a2:	781b      	ldrb	r3, [r3, #0]
 800c1a4:	009b      	lsls	r3, r3, #2
 800c1a6:	4413      	add	r3, r2
 800c1a8:	881b      	ldrh	r3, [r3, #0]
 800c1aa:	b29b      	uxth	r3, r3
 800c1ac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c1b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c1b4:	823b      	strh	r3, [r7, #16]
 800c1b6:	687a      	ldr	r2, [r7, #4]
 800c1b8:	683b      	ldr	r3, [r7, #0]
 800c1ba:	781b      	ldrb	r3, [r3, #0]
 800c1bc:	009b      	lsls	r3, r3, #2
 800c1be:	441a      	add	r2, r3
 800c1c0:	8a3b      	ldrh	r3, [r7, #16]
 800c1c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c1c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c1ca:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800c1ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c1d2:	b29b      	uxth	r3, r3
 800c1d4:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800c1d6:	687a      	ldr	r2, [r7, #4]
 800c1d8:	683b      	ldr	r3, [r7, #0]
 800c1da:	781b      	ldrb	r3, [r3, #0]
 800c1dc:	009b      	lsls	r3, r3, #2
 800c1de:	4413      	add	r3, r2
 800c1e0:	881b      	ldrh	r3, [r3, #0]
 800c1e2:	b29b      	uxth	r3, r3
 800c1e4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c1e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c1ec:	81fb      	strh	r3, [r7, #14]
 800c1ee:	687a      	ldr	r2, [r7, #4]
 800c1f0:	683b      	ldr	r3, [r7, #0]
 800c1f2:	781b      	ldrb	r3, [r3, #0]
 800c1f4:	009b      	lsls	r3, r3, #2
 800c1f6:	441a      	add	r2, r3
 800c1f8:	89fb      	ldrh	r3, [r7, #14]
 800c1fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c1fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c202:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c206:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c20a:	b29b      	uxth	r3, r3
 800c20c:	8013      	strh	r3, [r2, #0]
 800c20e:	e14d      	b.n	800c4ac <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800c210:	683b      	ldr	r3, [r7, #0]
 800c212:	785b      	ldrb	r3, [r3, #1]
 800c214:	2b00      	cmp	r3, #0
 800c216:	f040 80a5 	bne.w	800c364 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c21a:	687a      	ldr	r2, [r7, #4]
 800c21c:	683b      	ldr	r3, [r7, #0]
 800c21e:	781b      	ldrb	r3, [r3, #0]
 800c220:	009b      	lsls	r3, r3, #2
 800c222:	4413      	add	r3, r2
 800c224:	881b      	ldrh	r3, [r3, #0]
 800c226:	843b      	strh	r3, [r7, #32]
 800c228:	8c3b      	ldrh	r3, [r7, #32]
 800c22a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c22e:	2b00      	cmp	r3, #0
 800c230:	d01b      	beq.n	800c26a <USB_DeactivateEndpoint+0x18a>
 800c232:	687a      	ldr	r2, [r7, #4]
 800c234:	683b      	ldr	r3, [r7, #0]
 800c236:	781b      	ldrb	r3, [r3, #0]
 800c238:	009b      	lsls	r3, r3, #2
 800c23a:	4413      	add	r3, r2
 800c23c:	881b      	ldrh	r3, [r3, #0]
 800c23e:	b29b      	uxth	r3, r3
 800c240:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c244:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c248:	83fb      	strh	r3, [r7, #30]
 800c24a:	687a      	ldr	r2, [r7, #4]
 800c24c:	683b      	ldr	r3, [r7, #0]
 800c24e:	781b      	ldrb	r3, [r3, #0]
 800c250:	009b      	lsls	r3, r3, #2
 800c252:	441a      	add	r2, r3
 800c254:	8bfb      	ldrh	r3, [r7, #30]
 800c256:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c25a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c25e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800c262:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c266:	b29b      	uxth	r3, r3
 800c268:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c26a:	687a      	ldr	r2, [r7, #4]
 800c26c:	683b      	ldr	r3, [r7, #0]
 800c26e:	781b      	ldrb	r3, [r3, #0]
 800c270:	009b      	lsls	r3, r3, #2
 800c272:	4413      	add	r3, r2
 800c274:	881b      	ldrh	r3, [r3, #0]
 800c276:	83bb      	strh	r3, [r7, #28]
 800c278:	8bbb      	ldrh	r3, [r7, #28]
 800c27a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c27e:	2b00      	cmp	r3, #0
 800c280:	d01b      	beq.n	800c2ba <USB_DeactivateEndpoint+0x1da>
 800c282:	687a      	ldr	r2, [r7, #4]
 800c284:	683b      	ldr	r3, [r7, #0]
 800c286:	781b      	ldrb	r3, [r3, #0]
 800c288:	009b      	lsls	r3, r3, #2
 800c28a:	4413      	add	r3, r2
 800c28c:	881b      	ldrh	r3, [r3, #0]
 800c28e:	b29b      	uxth	r3, r3
 800c290:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c294:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c298:	837b      	strh	r3, [r7, #26]
 800c29a:	687a      	ldr	r2, [r7, #4]
 800c29c:	683b      	ldr	r3, [r7, #0]
 800c29e:	781b      	ldrb	r3, [r3, #0]
 800c2a0:	009b      	lsls	r3, r3, #2
 800c2a2:	441a      	add	r2, r3
 800c2a4:	8b7b      	ldrh	r3, [r7, #26]
 800c2a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c2aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c2ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c2b2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800c2b6:	b29b      	uxth	r3, r3
 800c2b8:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800c2ba:	687a      	ldr	r2, [r7, #4]
 800c2bc:	683b      	ldr	r3, [r7, #0]
 800c2be:	781b      	ldrb	r3, [r3, #0]
 800c2c0:	009b      	lsls	r3, r3, #2
 800c2c2:	4413      	add	r3, r2
 800c2c4:	881b      	ldrh	r3, [r3, #0]
 800c2c6:	b29b      	uxth	r3, r3
 800c2c8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c2cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c2d0:	833b      	strh	r3, [r7, #24]
 800c2d2:	687a      	ldr	r2, [r7, #4]
 800c2d4:	683b      	ldr	r3, [r7, #0]
 800c2d6:	781b      	ldrb	r3, [r3, #0]
 800c2d8:	009b      	lsls	r3, r3, #2
 800c2da:	441a      	add	r2, r3
 800c2dc:	8b3b      	ldrh	r3, [r7, #24]
 800c2de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c2e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c2e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c2ea:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800c2ee:	b29b      	uxth	r3, r3
 800c2f0:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800c2f2:	687a      	ldr	r2, [r7, #4]
 800c2f4:	683b      	ldr	r3, [r7, #0]
 800c2f6:	781b      	ldrb	r3, [r3, #0]
 800c2f8:	009b      	lsls	r3, r3, #2
 800c2fa:	4413      	add	r3, r2
 800c2fc:	881b      	ldrh	r3, [r3, #0]
 800c2fe:	b29b      	uxth	r3, r3
 800c300:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c304:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c308:	82fb      	strh	r3, [r7, #22]
 800c30a:	687a      	ldr	r2, [r7, #4]
 800c30c:	683b      	ldr	r3, [r7, #0]
 800c30e:	781b      	ldrb	r3, [r3, #0]
 800c310:	009b      	lsls	r3, r3, #2
 800c312:	441a      	add	r2, r3
 800c314:	8afb      	ldrh	r3, [r7, #22]
 800c316:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c31a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c31e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c322:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c326:	b29b      	uxth	r3, r3
 800c328:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800c32a:	687a      	ldr	r2, [r7, #4]
 800c32c:	683b      	ldr	r3, [r7, #0]
 800c32e:	781b      	ldrb	r3, [r3, #0]
 800c330:	009b      	lsls	r3, r3, #2
 800c332:	4413      	add	r3, r2
 800c334:	881b      	ldrh	r3, [r3, #0]
 800c336:	b29b      	uxth	r3, r3
 800c338:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c33c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c340:	82bb      	strh	r3, [r7, #20]
 800c342:	687a      	ldr	r2, [r7, #4]
 800c344:	683b      	ldr	r3, [r7, #0]
 800c346:	781b      	ldrb	r3, [r3, #0]
 800c348:	009b      	lsls	r3, r3, #2
 800c34a:	441a      	add	r2, r3
 800c34c:	8abb      	ldrh	r3, [r7, #20]
 800c34e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c352:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c356:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c35a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c35e:	b29b      	uxth	r3, r3
 800c360:	8013      	strh	r3, [r2, #0]
 800c362:	e0a3      	b.n	800c4ac <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c364:	687a      	ldr	r2, [r7, #4]
 800c366:	683b      	ldr	r3, [r7, #0]
 800c368:	781b      	ldrb	r3, [r3, #0]
 800c36a:	009b      	lsls	r3, r3, #2
 800c36c:	4413      	add	r3, r2
 800c36e:	881b      	ldrh	r3, [r3, #0]
 800c370:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800c372:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c374:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c378:	2b00      	cmp	r3, #0
 800c37a:	d01b      	beq.n	800c3b4 <USB_DeactivateEndpoint+0x2d4>
 800c37c:	687a      	ldr	r2, [r7, #4]
 800c37e:	683b      	ldr	r3, [r7, #0]
 800c380:	781b      	ldrb	r3, [r3, #0]
 800c382:	009b      	lsls	r3, r3, #2
 800c384:	4413      	add	r3, r2
 800c386:	881b      	ldrh	r3, [r3, #0]
 800c388:	b29b      	uxth	r3, r3
 800c38a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c38e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c392:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800c394:	687a      	ldr	r2, [r7, #4]
 800c396:	683b      	ldr	r3, [r7, #0]
 800c398:	781b      	ldrb	r3, [r3, #0]
 800c39a:	009b      	lsls	r3, r3, #2
 800c39c:	441a      	add	r2, r3
 800c39e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800c3a0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c3a4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c3a8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800c3ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c3b0:	b29b      	uxth	r3, r3
 800c3b2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c3b4:	687a      	ldr	r2, [r7, #4]
 800c3b6:	683b      	ldr	r3, [r7, #0]
 800c3b8:	781b      	ldrb	r3, [r3, #0]
 800c3ba:	009b      	lsls	r3, r3, #2
 800c3bc:	4413      	add	r3, r2
 800c3be:	881b      	ldrh	r3, [r3, #0]
 800c3c0:	857b      	strh	r3, [r7, #42]	; 0x2a
 800c3c2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800c3c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c3c8:	2b00      	cmp	r3, #0
 800c3ca:	d01b      	beq.n	800c404 <USB_DeactivateEndpoint+0x324>
 800c3cc:	687a      	ldr	r2, [r7, #4]
 800c3ce:	683b      	ldr	r3, [r7, #0]
 800c3d0:	781b      	ldrb	r3, [r3, #0]
 800c3d2:	009b      	lsls	r3, r3, #2
 800c3d4:	4413      	add	r3, r2
 800c3d6:	881b      	ldrh	r3, [r3, #0]
 800c3d8:	b29b      	uxth	r3, r3
 800c3da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c3de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c3e2:	853b      	strh	r3, [r7, #40]	; 0x28
 800c3e4:	687a      	ldr	r2, [r7, #4]
 800c3e6:	683b      	ldr	r3, [r7, #0]
 800c3e8:	781b      	ldrb	r3, [r3, #0]
 800c3ea:	009b      	lsls	r3, r3, #2
 800c3ec:	441a      	add	r2, r3
 800c3ee:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800c3f0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c3f4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c3f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c3fc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800c400:	b29b      	uxth	r3, r3
 800c402:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800c404:	687a      	ldr	r2, [r7, #4]
 800c406:	683b      	ldr	r3, [r7, #0]
 800c408:	781b      	ldrb	r3, [r3, #0]
 800c40a:	009b      	lsls	r3, r3, #2
 800c40c:	4413      	add	r3, r2
 800c40e:	881b      	ldrh	r3, [r3, #0]
 800c410:	b29b      	uxth	r3, r3
 800c412:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c416:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c41a:	84fb      	strh	r3, [r7, #38]	; 0x26
 800c41c:	687a      	ldr	r2, [r7, #4]
 800c41e:	683b      	ldr	r3, [r7, #0]
 800c420:	781b      	ldrb	r3, [r3, #0]
 800c422:	009b      	lsls	r3, r3, #2
 800c424:	441a      	add	r2, r3
 800c426:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c428:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c42c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c430:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800c434:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c438:	b29b      	uxth	r3, r3
 800c43a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800c43c:	687a      	ldr	r2, [r7, #4]
 800c43e:	683b      	ldr	r3, [r7, #0]
 800c440:	781b      	ldrb	r3, [r3, #0]
 800c442:	009b      	lsls	r3, r3, #2
 800c444:	4413      	add	r3, r2
 800c446:	881b      	ldrh	r3, [r3, #0]
 800c448:	b29b      	uxth	r3, r3
 800c44a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c44e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c452:	84bb      	strh	r3, [r7, #36]	; 0x24
 800c454:	687a      	ldr	r2, [r7, #4]
 800c456:	683b      	ldr	r3, [r7, #0]
 800c458:	781b      	ldrb	r3, [r3, #0]
 800c45a:	009b      	lsls	r3, r3, #2
 800c45c:	441a      	add	r2, r3
 800c45e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c460:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c464:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c468:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c46c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c470:	b29b      	uxth	r3, r3
 800c472:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800c474:	687a      	ldr	r2, [r7, #4]
 800c476:	683b      	ldr	r3, [r7, #0]
 800c478:	781b      	ldrb	r3, [r3, #0]
 800c47a:	009b      	lsls	r3, r3, #2
 800c47c:	4413      	add	r3, r2
 800c47e:	881b      	ldrh	r3, [r3, #0]
 800c480:	b29b      	uxth	r3, r3
 800c482:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c486:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c48a:	847b      	strh	r3, [r7, #34]	; 0x22
 800c48c:	687a      	ldr	r2, [r7, #4]
 800c48e:	683b      	ldr	r3, [r7, #0]
 800c490:	781b      	ldrb	r3, [r3, #0]
 800c492:	009b      	lsls	r3, r3, #2
 800c494:	441a      	add	r2, r3
 800c496:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c498:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c49c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c4a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c4a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c4a8:	b29b      	uxth	r3, r3
 800c4aa:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800c4ac:	2300      	movs	r3, #0
}
 800c4ae:	4618      	mov	r0, r3
 800c4b0:	3734      	adds	r7, #52	; 0x34
 800c4b2:	46bd      	mov	sp, r7
 800c4b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4b8:	4770      	bx	lr

0800c4ba <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800c4ba:	b580      	push	{r7, lr}
 800c4bc:	b0c2      	sub	sp, #264	; 0x108
 800c4be:	af00      	add	r7, sp, #0
 800c4c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c4c4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c4c8:	6018      	str	r0, [r3, #0]
 800c4ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c4ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c4d2:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800c4d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c4d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c4dc:	681b      	ldr	r3, [r3, #0]
 800c4de:	785b      	ldrb	r3, [r3, #1]
 800c4e0:	2b01      	cmp	r3, #1
 800c4e2:	f040 867b 	bne.w	800d1dc <USB_EPStartXfer+0xd22>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800c4e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c4ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c4ee:	681b      	ldr	r3, [r3, #0]
 800c4f0:	699a      	ldr	r2, [r3, #24]
 800c4f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c4f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c4fa:	681b      	ldr	r3, [r3, #0]
 800c4fc:	691b      	ldr	r3, [r3, #16]
 800c4fe:	429a      	cmp	r2, r3
 800c500:	d908      	bls.n	800c514 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 800c502:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c506:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c50a:	681b      	ldr	r3, [r3, #0]
 800c50c:	691b      	ldr	r3, [r3, #16]
 800c50e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800c512:	e007      	b.n	800c524 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800c514:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c518:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c51c:	681b      	ldr	r3, [r3, #0]
 800c51e:	699b      	ldr	r3, [r3, #24]
 800c520:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800c524:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c528:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c52c:	681b      	ldr	r3, [r3, #0]
 800c52e:	7b1b      	ldrb	r3, [r3, #12]
 800c530:	2b00      	cmp	r3, #0
 800c532:	d13a      	bne.n	800c5aa <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800c534:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c538:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c53c:	681b      	ldr	r3, [r3, #0]
 800c53e:	6959      	ldr	r1, [r3, #20]
 800c540:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c544:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c548:	681b      	ldr	r3, [r3, #0]
 800c54a:	88da      	ldrh	r2, [r3, #6]
 800c54c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c550:	b29b      	uxth	r3, r3
 800c552:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800c556:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800c55a:	6800      	ldr	r0, [r0, #0]
 800c55c:	f001 fc1d 	bl	800dd9a <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800c560:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c564:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c568:	681b      	ldr	r3, [r3, #0]
 800c56a:	613b      	str	r3, [r7, #16]
 800c56c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c570:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c574:	681b      	ldr	r3, [r3, #0]
 800c576:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c57a:	b29b      	uxth	r3, r3
 800c57c:	461a      	mov	r2, r3
 800c57e:	693b      	ldr	r3, [r7, #16]
 800c580:	4413      	add	r3, r2
 800c582:	613b      	str	r3, [r7, #16]
 800c584:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c588:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c58c:	681b      	ldr	r3, [r3, #0]
 800c58e:	781b      	ldrb	r3, [r3, #0]
 800c590:	00da      	lsls	r2, r3, #3
 800c592:	693b      	ldr	r3, [r7, #16]
 800c594:	4413      	add	r3, r2
 800c596:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800c59a:	60fb      	str	r3, [r7, #12]
 800c59c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c5a0:	b29a      	uxth	r2, r3
 800c5a2:	68fb      	ldr	r3, [r7, #12]
 800c5a4:	801a      	strh	r2, [r3, #0]
 800c5a6:	f000 bde3 	b.w	800d170 <USB_EPStartXfer+0xcb6>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800c5aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c5ae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c5b2:	681b      	ldr	r3, [r3, #0]
 800c5b4:	78db      	ldrb	r3, [r3, #3]
 800c5b6:	2b02      	cmp	r3, #2
 800c5b8:	f040 843a 	bne.w	800ce30 <USB_EPStartXfer+0x976>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800c5bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c5c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c5c4:	681b      	ldr	r3, [r3, #0]
 800c5c6:	6a1a      	ldr	r2, [r3, #32]
 800c5c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c5cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c5d0:	681b      	ldr	r3, [r3, #0]
 800c5d2:	691b      	ldr	r3, [r3, #16]
 800c5d4:	429a      	cmp	r2, r3
 800c5d6:	f240 83b7 	bls.w	800cd48 <USB_EPStartXfer+0x88e>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800c5da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c5de:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c5e2:	681a      	ldr	r2, [r3, #0]
 800c5e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c5e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c5ec:	681b      	ldr	r3, [r3, #0]
 800c5ee:	781b      	ldrb	r3, [r3, #0]
 800c5f0:	009b      	lsls	r3, r3, #2
 800c5f2:	4413      	add	r3, r2
 800c5f4:	881b      	ldrh	r3, [r3, #0]
 800c5f6:	b29b      	uxth	r3, r3
 800c5f8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c5fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c600:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800c604:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c608:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c60c:	681a      	ldr	r2, [r3, #0]
 800c60e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c612:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c616:	681b      	ldr	r3, [r3, #0]
 800c618:	781b      	ldrb	r3, [r3, #0]
 800c61a:	009b      	lsls	r3, r3, #2
 800c61c:	441a      	add	r2, r3
 800c61e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800c622:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c626:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c62a:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800c62e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c632:	b29b      	uxth	r3, r3
 800c634:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800c636:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c63a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c63e:	681b      	ldr	r3, [r3, #0]
 800c640:	6a1a      	ldr	r2, [r3, #32]
 800c642:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c646:	1ad2      	subs	r2, r2, r3
 800c648:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c64c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c650:	681b      	ldr	r3, [r3, #0]
 800c652:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800c654:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c658:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c65c:	681a      	ldr	r2, [r3, #0]
 800c65e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c662:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c666:	681b      	ldr	r3, [r3, #0]
 800c668:	781b      	ldrb	r3, [r3, #0]
 800c66a:	009b      	lsls	r3, r3, #2
 800c66c:	4413      	add	r3, r2
 800c66e:	881b      	ldrh	r3, [r3, #0]
 800c670:	b29b      	uxth	r3, r3
 800c672:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c676:	2b00      	cmp	r3, #0
 800c678:	f000 81b3 	beq.w	800c9e2 <USB_EPStartXfer+0x528>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800c67c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c680:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c684:	681b      	ldr	r3, [r3, #0]
 800c686:	633b      	str	r3, [r7, #48]	; 0x30
 800c688:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c68c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c690:	681b      	ldr	r3, [r3, #0]
 800c692:	785b      	ldrb	r3, [r3, #1]
 800c694:	2b00      	cmp	r3, #0
 800c696:	d16d      	bne.n	800c774 <USB_EPStartXfer+0x2ba>
 800c698:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c69c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c6a0:	681b      	ldr	r3, [r3, #0]
 800c6a2:	62bb      	str	r3, [r7, #40]	; 0x28
 800c6a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c6a8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c6ac:	681b      	ldr	r3, [r3, #0]
 800c6ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c6b2:	b29b      	uxth	r3, r3
 800c6b4:	461a      	mov	r2, r3
 800c6b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6b8:	4413      	add	r3, r2
 800c6ba:	62bb      	str	r3, [r7, #40]	; 0x28
 800c6bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c6c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c6c4:	681b      	ldr	r3, [r3, #0]
 800c6c6:	781b      	ldrb	r3, [r3, #0]
 800c6c8:	00da      	lsls	r2, r3, #3
 800c6ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6cc:	4413      	add	r3, r2
 800c6ce:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800c6d2:	627b      	str	r3, [r7, #36]	; 0x24
 800c6d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c6d8:	2b3e      	cmp	r3, #62	; 0x3e
 800c6da:	d91c      	bls.n	800c716 <USB_EPStartXfer+0x25c>
 800c6dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c6e0:	095b      	lsrs	r3, r3, #5
 800c6e2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800c6e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c6ea:	f003 031f 	and.w	r3, r3, #31
 800c6ee:	2b00      	cmp	r3, #0
 800c6f0:	d104      	bne.n	800c6fc <USB_EPStartXfer+0x242>
 800c6f2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800c6f6:	3b01      	subs	r3, #1
 800c6f8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800c6fc:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800c700:	b29b      	uxth	r3, r3
 800c702:	029b      	lsls	r3, r3, #10
 800c704:	b29b      	uxth	r3, r3
 800c706:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c70a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c70e:	b29a      	uxth	r2, r3
 800c710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c712:	801a      	strh	r2, [r3, #0]
 800c714:	e053      	b.n	800c7be <USB_EPStartXfer+0x304>
 800c716:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c71a:	2b00      	cmp	r3, #0
 800c71c:	d112      	bne.n	800c744 <USB_EPStartXfer+0x28a>
 800c71e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c720:	881b      	ldrh	r3, [r3, #0]
 800c722:	b29b      	uxth	r3, r3
 800c724:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800c728:	b29a      	uxth	r2, r3
 800c72a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c72c:	801a      	strh	r2, [r3, #0]
 800c72e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c730:	881b      	ldrh	r3, [r3, #0]
 800c732:	b29b      	uxth	r3, r3
 800c734:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c738:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c73c:	b29a      	uxth	r2, r3
 800c73e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c740:	801a      	strh	r2, [r3, #0]
 800c742:	e03c      	b.n	800c7be <USB_EPStartXfer+0x304>
 800c744:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c748:	085b      	lsrs	r3, r3, #1
 800c74a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800c74e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c752:	f003 0301 	and.w	r3, r3, #1
 800c756:	2b00      	cmp	r3, #0
 800c758:	d004      	beq.n	800c764 <USB_EPStartXfer+0x2aa>
 800c75a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800c75e:	3301      	adds	r3, #1
 800c760:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800c764:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800c768:	b29b      	uxth	r3, r3
 800c76a:	029b      	lsls	r3, r3, #10
 800c76c:	b29a      	uxth	r2, r3
 800c76e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c770:	801a      	strh	r2, [r3, #0]
 800c772:	e024      	b.n	800c7be <USB_EPStartXfer+0x304>
 800c774:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c778:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c77c:	681b      	ldr	r3, [r3, #0]
 800c77e:	785b      	ldrb	r3, [r3, #1]
 800c780:	2b01      	cmp	r3, #1
 800c782:	d11c      	bne.n	800c7be <USB_EPStartXfer+0x304>
 800c784:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c788:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c78c:	681b      	ldr	r3, [r3, #0]
 800c78e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c792:	b29b      	uxth	r3, r3
 800c794:	461a      	mov	r2, r3
 800c796:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c798:	4413      	add	r3, r2
 800c79a:	633b      	str	r3, [r7, #48]	; 0x30
 800c79c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c7a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c7a4:	681b      	ldr	r3, [r3, #0]
 800c7a6:	781b      	ldrb	r3, [r3, #0]
 800c7a8:	00da      	lsls	r2, r3, #3
 800c7aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7ac:	4413      	add	r3, r2
 800c7ae:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800c7b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c7b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c7b8:	b29a      	uxth	r2, r3
 800c7ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7bc:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800c7be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c7c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c7c6:	681b      	ldr	r3, [r3, #0]
 800c7c8:	895b      	ldrh	r3, [r3, #10]
 800c7ca:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800c7ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c7d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c7d6:	681b      	ldr	r3, [r3, #0]
 800c7d8:	6959      	ldr	r1, [r3, #20]
 800c7da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c7de:	b29b      	uxth	r3, r3
 800c7e0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800c7e4:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800c7e8:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800c7ec:	6800      	ldr	r0, [r0, #0]
 800c7ee:	f001 fad4 	bl	800dd9a <USB_WritePMA>
            ep->xfer_buff += len;
 800c7f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c7f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c7fa:	681b      	ldr	r3, [r3, #0]
 800c7fc:	695a      	ldr	r2, [r3, #20]
 800c7fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c802:	441a      	add	r2, r3
 800c804:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c808:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c80c:	681b      	ldr	r3, [r3, #0]
 800c80e:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800c810:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c814:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c818:	681b      	ldr	r3, [r3, #0]
 800c81a:	6a1a      	ldr	r2, [r3, #32]
 800c81c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c820:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c824:	681b      	ldr	r3, [r3, #0]
 800c826:	691b      	ldr	r3, [r3, #16]
 800c828:	429a      	cmp	r2, r3
 800c82a:	d90f      	bls.n	800c84c <USB_EPStartXfer+0x392>
            {
              ep->xfer_len_db -= len;
 800c82c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c830:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c834:	681b      	ldr	r3, [r3, #0]
 800c836:	6a1a      	ldr	r2, [r3, #32]
 800c838:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c83c:	1ad2      	subs	r2, r2, r3
 800c83e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c842:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c846:	681b      	ldr	r3, [r3, #0]
 800c848:	621a      	str	r2, [r3, #32]
 800c84a:	e00e      	b.n	800c86a <USB_EPStartXfer+0x3b0>
            }
            else
            {
              len = ep->xfer_len_db;
 800c84c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c850:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c854:	681b      	ldr	r3, [r3, #0]
 800c856:	6a1b      	ldr	r3, [r3, #32]
 800c858:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800c85c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c860:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c864:	681b      	ldr	r3, [r3, #0]
 800c866:	2200      	movs	r2, #0
 800c868:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800c86a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c86e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c872:	681b      	ldr	r3, [r3, #0]
 800c874:	785b      	ldrb	r3, [r3, #1]
 800c876:	2b00      	cmp	r3, #0
 800c878:	d16d      	bne.n	800c956 <USB_EPStartXfer+0x49c>
 800c87a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c87e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c882:	681b      	ldr	r3, [r3, #0]
 800c884:	61bb      	str	r3, [r7, #24]
 800c886:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c88a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c88e:	681b      	ldr	r3, [r3, #0]
 800c890:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c894:	b29b      	uxth	r3, r3
 800c896:	461a      	mov	r2, r3
 800c898:	69bb      	ldr	r3, [r7, #24]
 800c89a:	4413      	add	r3, r2
 800c89c:	61bb      	str	r3, [r7, #24]
 800c89e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c8a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c8a6:	681b      	ldr	r3, [r3, #0]
 800c8a8:	781b      	ldrb	r3, [r3, #0]
 800c8aa:	00da      	lsls	r2, r3, #3
 800c8ac:	69bb      	ldr	r3, [r7, #24]
 800c8ae:	4413      	add	r3, r2
 800c8b0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800c8b4:	617b      	str	r3, [r7, #20]
 800c8b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c8ba:	2b3e      	cmp	r3, #62	; 0x3e
 800c8bc:	d91c      	bls.n	800c8f8 <USB_EPStartXfer+0x43e>
 800c8be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c8c2:	095b      	lsrs	r3, r3, #5
 800c8c4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800c8c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c8cc:	f003 031f 	and.w	r3, r3, #31
 800c8d0:	2b00      	cmp	r3, #0
 800c8d2:	d104      	bne.n	800c8de <USB_EPStartXfer+0x424>
 800c8d4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c8d8:	3b01      	subs	r3, #1
 800c8da:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800c8de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c8e2:	b29b      	uxth	r3, r3
 800c8e4:	029b      	lsls	r3, r3, #10
 800c8e6:	b29b      	uxth	r3, r3
 800c8e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c8ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c8f0:	b29a      	uxth	r2, r3
 800c8f2:	697b      	ldr	r3, [r7, #20]
 800c8f4:	801a      	strh	r2, [r3, #0]
 800c8f6:	e059      	b.n	800c9ac <USB_EPStartXfer+0x4f2>
 800c8f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c8fc:	2b00      	cmp	r3, #0
 800c8fe:	d112      	bne.n	800c926 <USB_EPStartXfer+0x46c>
 800c900:	697b      	ldr	r3, [r7, #20]
 800c902:	881b      	ldrh	r3, [r3, #0]
 800c904:	b29b      	uxth	r3, r3
 800c906:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800c90a:	b29a      	uxth	r2, r3
 800c90c:	697b      	ldr	r3, [r7, #20]
 800c90e:	801a      	strh	r2, [r3, #0]
 800c910:	697b      	ldr	r3, [r7, #20]
 800c912:	881b      	ldrh	r3, [r3, #0]
 800c914:	b29b      	uxth	r3, r3
 800c916:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c91a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c91e:	b29a      	uxth	r2, r3
 800c920:	697b      	ldr	r3, [r7, #20]
 800c922:	801a      	strh	r2, [r3, #0]
 800c924:	e042      	b.n	800c9ac <USB_EPStartXfer+0x4f2>
 800c926:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c92a:	085b      	lsrs	r3, r3, #1
 800c92c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800c930:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c934:	f003 0301 	and.w	r3, r3, #1
 800c938:	2b00      	cmp	r3, #0
 800c93a:	d004      	beq.n	800c946 <USB_EPStartXfer+0x48c>
 800c93c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c940:	3301      	adds	r3, #1
 800c942:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800c946:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c94a:	b29b      	uxth	r3, r3
 800c94c:	029b      	lsls	r3, r3, #10
 800c94e:	b29a      	uxth	r2, r3
 800c950:	697b      	ldr	r3, [r7, #20]
 800c952:	801a      	strh	r2, [r3, #0]
 800c954:	e02a      	b.n	800c9ac <USB_EPStartXfer+0x4f2>
 800c956:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c95a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c95e:	681b      	ldr	r3, [r3, #0]
 800c960:	785b      	ldrb	r3, [r3, #1]
 800c962:	2b01      	cmp	r3, #1
 800c964:	d122      	bne.n	800c9ac <USB_EPStartXfer+0x4f2>
 800c966:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c96a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c96e:	681b      	ldr	r3, [r3, #0]
 800c970:	623b      	str	r3, [r7, #32]
 800c972:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c976:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c97a:	681b      	ldr	r3, [r3, #0]
 800c97c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c980:	b29b      	uxth	r3, r3
 800c982:	461a      	mov	r2, r3
 800c984:	6a3b      	ldr	r3, [r7, #32]
 800c986:	4413      	add	r3, r2
 800c988:	623b      	str	r3, [r7, #32]
 800c98a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c98e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c992:	681b      	ldr	r3, [r3, #0]
 800c994:	781b      	ldrb	r3, [r3, #0]
 800c996:	00da      	lsls	r2, r3, #3
 800c998:	6a3b      	ldr	r3, [r7, #32]
 800c99a:	4413      	add	r3, r2
 800c99c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800c9a0:	61fb      	str	r3, [r7, #28]
 800c9a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c9a6:	b29a      	uxth	r2, r3
 800c9a8:	69fb      	ldr	r3, [r7, #28]
 800c9aa:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800c9ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c9b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c9b4:	681b      	ldr	r3, [r3, #0]
 800c9b6:	891b      	ldrh	r3, [r3, #8]
 800c9b8:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800c9bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c9c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c9c4:	681b      	ldr	r3, [r3, #0]
 800c9c6:	6959      	ldr	r1, [r3, #20]
 800c9c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c9cc:	b29b      	uxth	r3, r3
 800c9ce:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800c9d2:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800c9d6:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800c9da:	6800      	ldr	r0, [r0, #0]
 800c9dc:	f001 f9dd 	bl	800dd9a <USB_WritePMA>
 800c9e0:	e3c6      	b.n	800d170 <USB_EPStartXfer+0xcb6>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800c9e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c9e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c9ea:	681b      	ldr	r3, [r3, #0]
 800c9ec:	785b      	ldrb	r3, [r3, #1]
 800c9ee:	2b00      	cmp	r3, #0
 800c9f0:	d16d      	bne.n	800cace <USB_EPStartXfer+0x614>
 800c9f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c9f6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c9fa:	681b      	ldr	r3, [r3, #0]
 800c9fc:	64bb      	str	r3, [r7, #72]	; 0x48
 800c9fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ca02:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ca06:	681b      	ldr	r3, [r3, #0]
 800ca08:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ca0c:	b29b      	uxth	r3, r3
 800ca0e:	461a      	mov	r2, r3
 800ca10:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ca12:	4413      	add	r3, r2
 800ca14:	64bb      	str	r3, [r7, #72]	; 0x48
 800ca16:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ca1a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ca1e:	681b      	ldr	r3, [r3, #0]
 800ca20:	781b      	ldrb	r3, [r3, #0]
 800ca22:	00da      	lsls	r2, r3, #3
 800ca24:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ca26:	4413      	add	r3, r2
 800ca28:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800ca2c:	647b      	str	r3, [r7, #68]	; 0x44
 800ca2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ca32:	2b3e      	cmp	r3, #62	; 0x3e
 800ca34:	d91c      	bls.n	800ca70 <USB_EPStartXfer+0x5b6>
 800ca36:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ca3a:	095b      	lsrs	r3, r3, #5
 800ca3c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800ca40:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ca44:	f003 031f 	and.w	r3, r3, #31
 800ca48:	2b00      	cmp	r3, #0
 800ca4a:	d104      	bne.n	800ca56 <USB_EPStartXfer+0x59c>
 800ca4c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800ca50:	3b01      	subs	r3, #1
 800ca52:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800ca56:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800ca5a:	b29b      	uxth	r3, r3
 800ca5c:	029b      	lsls	r3, r3, #10
 800ca5e:	b29b      	uxth	r3, r3
 800ca60:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ca64:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ca68:	b29a      	uxth	r2, r3
 800ca6a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ca6c:	801a      	strh	r2, [r3, #0]
 800ca6e:	e059      	b.n	800cb24 <USB_EPStartXfer+0x66a>
 800ca70:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ca74:	2b00      	cmp	r3, #0
 800ca76:	d112      	bne.n	800ca9e <USB_EPStartXfer+0x5e4>
 800ca78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ca7a:	881b      	ldrh	r3, [r3, #0]
 800ca7c:	b29b      	uxth	r3, r3
 800ca7e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800ca82:	b29a      	uxth	r2, r3
 800ca84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ca86:	801a      	strh	r2, [r3, #0]
 800ca88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ca8a:	881b      	ldrh	r3, [r3, #0]
 800ca8c:	b29b      	uxth	r3, r3
 800ca8e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ca92:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ca96:	b29a      	uxth	r2, r3
 800ca98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ca9a:	801a      	strh	r2, [r3, #0]
 800ca9c:	e042      	b.n	800cb24 <USB_EPStartXfer+0x66a>
 800ca9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800caa2:	085b      	lsrs	r3, r3, #1
 800caa4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800caa8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800caac:	f003 0301 	and.w	r3, r3, #1
 800cab0:	2b00      	cmp	r3, #0
 800cab2:	d004      	beq.n	800cabe <USB_EPStartXfer+0x604>
 800cab4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800cab8:	3301      	adds	r3, #1
 800caba:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800cabe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800cac2:	b29b      	uxth	r3, r3
 800cac4:	029b      	lsls	r3, r3, #10
 800cac6:	b29a      	uxth	r2, r3
 800cac8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800caca:	801a      	strh	r2, [r3, #0]
 800cacc:	e02a      	b.n	800cb24 <USB_EPStartXfer+0x66a>
 800cace:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cad2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cad6:	681b      	ldr	r3, [r3, #0]
 800cad8:	785b      	ldrb	r3, [r3, #1]
 800cada:	2b01      	cmp	r3, #1
 800cadc:	d122      	bne.n	800cb24 <USB_EPStartXfer+0x66a>
 800cade:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cae2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800cae6:	681b      	ldr	r3, [r3, #0]
 800cae8:	653b      	str	r3, [r7, #80]	; 0x50
 800caea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800caee:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800caf2:	681b      	ldr	r3, [r3, #0]
 800caf4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800caf8:	b29b      	uxth	r3, r3
 800cafa:	461a      	mov	r2, r3
 800cafc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cafe:	4413      	add	r3, r2
 800cb00:	653b      	str	r3, [r7, #80]	; 0x50
 800cb02:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cb06:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cb0a:	681b      	ldr	r3, [r3, #0]
 800cb0c:	781b      	ldrb	r3, [r3, #0]
 800cb0e:	00da      	lsls	r2, r3, #3
 800cb10:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cb12:	4413      	add	r3, r2
 800cb14:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800cb18:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cb1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cb1e:	b29a      	uxth	r2, r3
 800cb20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cb22:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800cb24:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cb28:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cb2c:	681b      	ldr	r3, [r3, #0]
 800cb2e:	891b      	ldrh	r3, [r3, #8]
 800cb30:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800cb34:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cb38:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cb3c:	681b      	ldr	r3, [r3, #0]
 800cb3e:	6959      	ldr	r1, [r3, #20]
 800cb40:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cb44:	b29b      	uxth	r3, r3
 800cb46:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800cb4a:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800cb4e:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800cb52:	6800      	ldr	r0, [r0, #0]
 800cb54:	f001 f921 	bl	800dd9a <USB_WritePMA>
            ep->xfer_buff += len;
 800cb58:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cb5c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cb60:	681b      	ldr	r3, [r3, #0]
 800cb62:	695a      	ldr	r2, [r3, #20]
 800cb64:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cb68:	441a      	add	r2, r3
 800cb6a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cb6e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cb72:	681b      	ldr	r3, [r3, #0]
 800cb74:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800cb76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cb7a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cb7e:	681b      	ldr	r3, [r3, #0]
 800cb80:	6a1a      	ldr	r2, [r3, #32]
 800cb82:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cb86:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cb8a:	681b      	ldr	r3, [r3, #0]
 800cb8c:	691b      	ldr	r3, [r3, #16]
 800cb8e:	429a      	cmp	r2, r3
 800cb90:	d90f      	bls.n	800cbb2 <USB_EPStartXfer+0x6f8>
            {
              ep->xfer_len_db -= len;
 800cb92:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cb96:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cb9a:	681b      	ldr	r3, [r3, #0]
 800cb9c:	6a1a      	ldr	r2, [r3, #32]
 800cb9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cba2:	1ad2      	subs	r2, r2, r3
 800cba4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cba8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cbac:	681b      	ldr	r3, [r3, #0]
 800cbae:	621a      	str	r2, [r3, #32]
 800cbb0:	e00e      	b.n	800cbd0 <USB_EPStartXfer+0x716>
            }
            else
            {
              len = ep->xfer_len_db;
 800cbb2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cbb6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cbba:	681b      	ldr	r3, [r3, #0]
 800cbbc:	6a1b      	ldr	r3, [r3, #32]
 800cbbe:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800cbc2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cbc6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cbca:	681b      	ldr	r3, [r3, #0]
 800cbcc:	2200      	movs	r2, #0
 800cbce:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800cbd0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cbd4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800cbd8:	681b      	ldr	r3, [r3, #0]
 800cbda:	643b      	str	r3, [r7, #64]	; 0x40
 800cbdc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cbe0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cbe4:	681b      	ldr	r3, [r3, #0]
 800cbe6:	785b      	ldrb	r3, [r3, #1]
 800cbe8:	2b00      	cmp	r3, #0
 800cbea:	d16d      	bne.n	800ccc8 <USB_EPStartXfer+0x80e>
 800cbec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cbf0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800cbf4:	681b      	ldr	r3, [r3, #0]
 800cbf6:	63bb      	str	r3, [r7, #56]	; 0x38
 800cbf8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cbfc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800cc00:	681b      	ldr	r3, [r3, #0]
 800cc02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800cc06:	b29b      	uxth	r3, r3
 800cc08:	461a      	mov	r2, r3
 800cc0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc0c:	4413      	add	r3, r2
 800cc0e:	63bb      	str	r3, [r7, #56]	; 0x38
 800cc10:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cc14:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cc18:	681b      	ldr	r3, [r3, #0]
 800cc1a:	781b      	ldrb	r3, [r3, #0]
 800cc1c:	00da      	lsls	r2, r3, #3
 800cc1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc20:	4413      	add	r3, r2
 800cc22:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800cc26:	637b      	str	r3, [r7, #52]	; 0x34
 800cc28:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cc2c:	2b3e      	cmp	r3, #62	; 0x3e
 800cc2e:	d91c      	bls.n	800cc6a <USB_EPStartXfer+0x7b0>
 800cc30:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cc34:	095b      	lsrs	r3, r3, #5
 800cc36:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800cc3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cc3e:	f003 031f 	and.w	r3, r3, #31
 800cc42:	2b00      	cmp	r3, #0
 800cc44:	d104      	bne.n	800cc50 <USB_EPStartXfer+0x796>
 800cc46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cc4a:	3b01      	subs	r3, #1
 800cc4c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800cc50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cc54:	b29b      	uxth	r3, r3
 800cc56:	029b      	lsls	r3, r3, #10
 800cc58:	b29b      	uxth	r3, r3
 800cc5a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cc5e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cc62:	b29a      	uxth	r2, r3
 800cc64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc66:	801a      	strh	r2, [r3, #0]
 800cc68:	e053      	b.n	800cd12 <USB_EPStartXfer+0x858>
 800cc6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cc6e:	2b00      	cmp	r3, #0
 800cc70:	d112      	bne.n	800cc98 <USB_EPStartXfer+0x7de>
 800cc72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc74:	881b      	ldrh	r3, [r3, #0]
 800cc76:	b29b      	uxth	r3, r3
 800cc78:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800cc7c:	b29a      	uxth	r2, r3
 800cc7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc80:	801a      	strh	r2, [r3, #0]
 800cc82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc84:	881b      	ldrh	r3, [r3, #0]
 800cc86:	b29b      	uxth	r3, r3
 800cc88:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cc8c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cc90:	b29a      	uxth	r2, r3
 800cc92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc94:	801a      	strh	r2, [r3, #0]
 800cc96:	e03c      	b.n	800cd12 <USB_EPStartXfer+0x858>
 800cc98:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cc9c:	085b      	lsrs	r3, r3, #1
 800cc9e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800cca2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cca6:	f003 0301 	and.w	r3, r3, #1
 800ccaa:	2b00      	cmp	r3, #0
 800ccac:	d004      	beq.n	800ccb8 <USB_EPStartXfer+0x7fe>
 800ccae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ccb2:	3301      	adds	r3, #1
 800ccb4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800ccb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ccbc:	b29b      	uxth	r3, r3
 800ccbe:	029b      	lsls	r3, r3, #10
 800ccc0:	b29a      	uxth	r2, r3
 800ccc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ccc4:	801a      	strh	r2, [r3, #0]
 800ccc6:	e024      	b.n	800cd12 <USB_EPStartXfer+0x858>
 800ccc8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cccc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ccd0:	681b      	ldr	r3, [r3, #0]
 800ccd2:	785b      	ldrb	r3, [r3, #1]
 800ccd4:	2b01      	cmp	r3, #1
 800ccd6:	d11c      	bne.n	800cd12 <USB_EPStartXfer+0x858>
 800ccd8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ccdc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800cce0:	681b      	ldr	r3, [r3, #0]
 800cce2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800cce6:	b29b      	uxth	r3, r3
 800cce8:	461a      	mov	r2, r3
 800ccea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ccec:	4413      	add	r3, r2
 800ccee:	643b      	str	r3, [r7, #64]	; 0x40
 800ccf0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ccf4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ccf8:	681b      	ldr	r3, [r3, #0]
 800ccfa:	781b      	ldrb	r3, [r3, #0]
 800ccfc:	00da      	lsls	r2, r3, #3
 800ccfe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cd00:	4413      	add	r3, r2
 800cd02:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800cd06:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cd08:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cd0c:	b29a      	uxth	r2, r3
 800cd0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cd10:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800cd12:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cd16:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cd1a:	681b      	ldr	r3, [r3, #0]
 800cd1c:	895b      	ldrh	r3, [r3, #10]
 800cd1e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800cd22:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cd26:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cd2a:	681b      	ldr	r3, [r3, #0]
 800cd2c:	6959      	ldr	r1, [r3, #20]
 800cd2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cd32:	b29b      	uxth	r3, r3
 800cd34:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800cd38:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800cd3c:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800cd40:	6800      	ldr	r0, [r0, #0]
 800cd42:	f001 f82a 	bl	800dd9a <USB_WritePMA>
 800cd46:	e213      	b.n	800d170 <USB_EPStartXfer+0xcb6>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800cd48:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cd4c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cd50:	681b      	ldr	r3, [r3, #0]
 800cd52:	6a1b      	ldr	r3, [r3, #32]
 800cd54:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800cd58:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cd5c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800cd60:	681a      	ldr	r2, [r3, #0]
 800cd62:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cd66:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cd6a:	681b      	ldr	r3, [r3, #0]
 800cd6c:	781b      	ldrb	r3, [r3, #0]
 800cd6e:	009b      	lsls	r3, r3, #2
 800cd70:	4413      	add	r3, r2
 800cd72:	881b      	ldrh	r3, [r3, #0]
 800cd74:	b29b      	uxth	r3, r3
 800cd76:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800cd7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cd7e:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800cd82:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cd86:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800cd8a:	681a      	ldr	r2, [r3, #0]
 800cd8c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cd90:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cd94:	681b      	ldr	r3, [r3, #0]
 800cd96:	781b      	ldrb	r3, [r3, #0]
 800cd98:	009b      	lsls	r3, r3, #2
 800cd9a:	441a      	add	r2, r3
 800cd9c:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800cda0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800cda4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800cda8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cdac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cdb0:	b29b      	uxth	r3, r3
 800cdb2:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800cdb4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cdb8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800cdbc:	681b      	ldr	r3, [r3, #0]
 800cdbe:	65fb      	str	r3, [r7, #92]	; 0x5c
 800cdc0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cdc4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800cdc8:	681b      	ldr	r3, [r3, #0]
 800cdca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800cdce:	b29b      	uxth	r3, r3
 800cdd0:	461a      	mov	r2, r3
 800cdd2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cdd4:	4413      	add	r3, r2
 800cdd6:	65fb      	str	r3, [r7, #92]	; 0x5c
 800cdd8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cddc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cde0:	681b      	ldr	r3, [r3, #0]
 800cde2:	781b      	ldrb	r3, [r3, #0]
 800cde4:	00da      	lsls	r2, r3, #3
 800cde6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cde8:	4413      	add	r3, r2
 800cdea:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800cdee:	65bb      	str	r3, [r7, #88]	; 0x58
 800cdf0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cdf4:	b29a      	uxth	r2, r3
 800cdf6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cdf8:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800cdfa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cdfe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ce02:	681b      	ldr	r3, [r3, #0]
 800ce04:	891b      	ldrh	r3, [r3, #8]
 800ce06:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800ce0a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ce0e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ce12:	681b      	ldr	r3, [r3, #0]
 800ce14:	6959      	ldr	r1, [r3, #20]
 800ce16:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ce1a:	b29b      	uxth	r3, r3
 800ce1c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800ce20:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800ce24:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800ce28:	6800      	ldr	r0, [r0, #0]
 800ce2a:	f000 ffb6 	bl	800dd9a <USB_WritePMA>
 800ce2e:	e19f      	b.n	800d170 <USB_EPStartXfer+0xcb6>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800ce30:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ce34:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ce38:	681b      	ldr	r3, [r3, #0]
 800ce3a:	6a1a      	ldr	r2, [r3, #32]
 800ce3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ce40:	1ad2      	subs	r2, r2, r3
 800ce42:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ce46:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ce4a:	681b      	ldr	r3, [r3, #0]
 800ce4c:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800ce4e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ce52:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ce56:	681a      	ldr	r2, [r3, #0]
 800ce58:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ce5c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ce60:	681b      	ldr	r3, [r3, #0]
 800ce62:	781b      	ldrb	r3, [r3, #0]
 800ce64:	009b      	lsls	r3, r3, #2
 800ce66:	4413      	add	r3, r2
 800ce68:	881b      	ldrh	r3, [r3, #0]
 800ce6a:	b29b      	uxth	r3, r3
 800ce6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ce70:	2b00      	cmp	r3, #0
 800ce72:	f000 80bc 	beq.w	800cfee <USB_EPStartXfer+0xb34>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800ce76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ce7a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ce7e:	681b      	ldr	r3, [r3, #0]
 800ce80:	673b      	str	r3, [r7, #112]	; 0x70
 800ce82:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ce86:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ce8a:	681b      	ldr	r3, [r3, #0]
 800ce8c:	785b      	ldrb	r3, [r3, #1]
 800ce8e:	2b00      	cmp	r3, #0
 800ce90:	d16d      	bne.n	800cf6e <USB_EPStartXfer+0xab4>
 800ce92:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ce96:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ce9a:	681b      	ldr	r3, [r3, #0]
 800ce9c:	66bb      	str	r3, [r7, #104]	; 0x68
 800ce9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cea2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800cea6:	681b      	ldr	r3, [r3, #0]
 800cea8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ceac:	b29b      	uxth	r3, r3
 800ceae:	461a      	mov	r2, r3
 800ceb0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ceb2:	4413      	add	r3, r2
 800ceb4:	66bb      	str	r3, [r7, #104]	; 0x68
 800ceb6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ceba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cebe:	681b      	ldr	r3, [r3, #0]
 800cec0:	781b      	ldrb	r3, [r3, #0]
 800cec2:	00da      	lsls	r2, r3, #3
 800cec4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800cec6:	4413      	add	r3, r2
 800cec8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800cecc:	667b      	str	r3, [r7, #100]	; 0x64
 800cece:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ced2:	2b3e      	cmp	r3, #62	; 0x3e
 800ced4:	d91c      	bls.n	800cf10 <USB_EPStartXfer+0xa56>
 800ced6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ceda:	095b      	lsrs	r3, r3, #5
 800cedc:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800cee0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cee4:	f003 031f 	and.w	r3, r3, #31
 800cee8:	2b00      	cmp	r3, #0
 800ceea:	d104      	bne.n	800cef6 <USB_EPStartXfer+0xa3c>
 800ceec:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800cef0:	3b01      	subs	r3, #1
 800cef2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800cef6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800cefa:	b29b      	uxth	r3, r3
 800cefc:	029b      	lsls	r3, r3, #10
 800cefe:	b29b      	uxth	r3, r3
 800cf00:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cf04:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cf08:	b29a      	uxth	r2, r3
 800cf0a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cf0c:	801a      	strh	r2, [r3, #0]
 800cf0e:	e053      	b.n	800cfb8 <USB_EPStartXfer+0xafe>
 800cf10:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cf14:	2b00      	cmp	r3, #0
 800cf16:	d112      	bne.n	800cf3e <USB_EPStartXfer+0xa84>
 800cf18:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cf1a:	881b      	ldrh	r3, [r3, #0]
 800cf1c:	b29b      	uxth	r3, r3
 800cf1e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800cf22:	b29a      	uxth	r2, r3
 800cf24:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cf26:	801a      	strh	r2, [r3, #0]
 800cf28:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cf2a:	881b      	ldrh	r3, [r3, #0]
 800cf2c:	b29b      	uxth	r3, r3
 800cf2e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cf32:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cf36:	b29a      	uxth	r2, r3
 800cf38:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cf3a:	801a      	strh	r2, [r3, #0]
 800cf3c:	e03c      	b.n	800cfb8 <USB_EPStartXfer+0xafe>
 800cf3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cf42:	085b      	lsrs	r3, r3, #1
 800cf44:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800cf48:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cf4c:	f003 0301 	and.w	r3, r3, #1
 800cf50:	2b00      	cmp	r3, #0
 800cf52:	d004      	beq.n	800cf5e <USB_EPStartXfer+0xaa4>
 800cf54:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800cf58:	3301      	adds	r3, #1
 800cf5a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800cf5e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800cf62:	b29b      	uxth	r3, r3
 800cf64:	029b      	lsls	r3, r3, #10
 800cf66:	b29a      	uxth	r2, r3
 800cf68:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cf6a:	801a      	strh	r2, [r3, #0]
 800cf6c:	e024      	b.n	800cfb8 <USB_EPStartXfer+0xafe>
 800cf6e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cf72:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cf76:	681b      	ldr	r3, [r3, #0]
 800cf78:	785b      	ldrb	r3, [r3, #1]
 800cf7a:	2b01      	cmp	r3, #1
 800cf7c:	d11c      	bne.n	800cfb8 <USB_EPStartXfer+0xafe>
 800cf7e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cf82:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800cf86:	681b      	ldr	r3, [r3, #0]
 800cf88:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800cf8c:	b29b      	uxth	r3, r3
 800cf8e:	461a      	mov	r2, r3
 800cf90:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800cf92:	4413      	add	r3, r2
 800cf94:	673b      	str	r3, [r7, #112]	; 0x70
 800cf96:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cf9a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cf9e:	681b      	ldr	r3, [r3, #0]
 800cfa0:	781b      	ldrb	r3, [r3, #0]
 800cfa2:	00da      	lsls	r2, r3, #3
 800cfa4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800cfa6:	4413      	add	r3, r2
 800cfa8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800cfac:	66fb      	str	r3, [r7, #108]	; 0x6c
 800cfae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cfb2:	b29a      	uxth	r2, r3
 800cfb4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cfb6:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800cfb8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cfbc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cfc0:	681b      	ldr	r3, [r3, #0]
 800cfc2:	895b      	ldrh	r3, [r3, #10]
 800cfc4:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800cfc8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cfcc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cfd0:	681b      	ldr	r3, [r3, #0]
 800cfd2:	6959      	ldr	r1, [r3, #20]
 800cfd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cfd8:	b29b      	uxth	r3, r3
 800cfda:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800cfde:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800cfe2:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800cfe6:	6800      	ldr	r0, [r0, #0]
 800cfe8:	f000 fed7 	bl	800dd9a <USB_WritePMA>
 800cfec:	e0c0      	b.n	800d170 <USB_EPStartXfer+0xcb6>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800cfee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cff2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cff6:	681b      	ldr	r3, [r3, #0]
 800cff8:	785b      	ldrb	r3, [r3, #1]
 800cffa:	2b00      	cmp	r3, #0
 800cffc:	d16d      	bne.n	800d0da <USB_EPStartXfer+0xc20>
 800cffe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d002:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d006:	681b      	ldr	r3, [r3, #0]
 800d008:	67fb      	str	r3, [r7, #124]	; 0x7c
 800d00a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d00e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d012:	681b      	ldr	r3, [r3, #0]
 800d014:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d018:	b29b      	uxth	r3, r3
 800d01a:	461a      	mov	r2, r3
 800d01c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d01e:	4413      	add	r3, r2
 800d020:	67fb      	str	r3, [r7, #124]	; 0x7c
 800d022:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d026:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d02a:	681b      	ldr	r3, [r3, #0]
 800d02c:	781b      	ldrb	r3, [r3, #0]
 800d02e:	00da      	lsls	r2, r3, #3
 800d030:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d032:	4413      	add	r3, r2
 800d034:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800d038:	67bb      	str	r3, [r7, #120]	; 0x78
 800d03a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d03e:	2b3e      	cmp	r3, #62	; 0x3e
 800d040:	d91c      	bls.n	800d07c <USB_EPStartXfer+0xbc2>
 800d042:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d046:	095b      	lsrs	r3, r3, #5
 800d048:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800d04c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d050:	f003 031f 	and.w	r3, r3, #31
 800d054:	2b00      	cmp	r3, #0
 800d056:	d104      	bne.n	800d062 <USB_EPStartXfer+0xba8>
 800d058:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800d05c:	3b01      	subs	r3, #1
 800d05e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800d062:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800d066:	b29b      	uxth	r3, r3
 800d068:	029b      	lsls	r3, r3, #10
 800d06a:	b29b      	uxth	r3, r3
 800d06c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d070:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d074:	b29a      	uxth	r2, r3
 800d076:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d078:	801a      	strh	r2, [r3, #0]
 800d07a:	e05f      	b.n	800d13c <USB_EPStartXfer+0xc82>
 800d07c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d080:	2b00      	cmp	r3, #0
 800d082:	d112      	bne.n	800d0aa <USB_EPStartXfer+0xbf0>
 800d084:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d086:	881b      	ldrh	r3, [r3, #0]
 800d088:	b29b      	uxth	r3, r3
 800d08a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800d08e:	b29a      	uxth	r2, r3
 800d090:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d092:	801a      	strh	r2, [r3, #0]
 800d094:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d096:	881b      	ldrh	r3, [r3, #0]
 800d098:	b29b      	uxth	r3, r3
 800d09a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d09e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d0a2:	b29a      	uxth	r2, r3
 800d0a4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d0a6:	801a      	strh	r2, [r3, #0]
 800d0a8:	e048      	b.n	800d13c <USB_EPStartXfer+0xc82>
 800d0aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d0ae:	085b      	lsrs	r3, r3, #1
 800d0b0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800d0b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d0b8:	f003 0301 	and.w	r3, r3, #1
 800d0bc:	2b00      	cmp	r3, #0
 800d0be:	d004      	beq.n	800d0ca <USB_EPStartXfer+0xc10>
 800d0c0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800d0c4:	3301      	adds	r3, #1
 800d0c6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800d0ca:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800d0ce:	b29b      	uxth	r3, r3
 800d0d0:	029b      	lsls	r3, r3, #10
 800d0d2:	b29a      	uxth	r2, r3
 800d0d4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d0d6:	801a      	strh	r2, [r3, #0]
 800d0d8:	e030      	b.n	800d13c <USB_EPStartXfer+0xc82>
 800d0da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d0de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d0e2:	681b      	ldr	r3, [r3, #0]
 800d0e4:	785b      	ldrb	r3, [r3, #1]
 800d0e6:	2b01      	cmp	r3, #1
 800d0e8:	d128      	bne.n	800d13c <USB_EPStartXfer+0xc82>
 800d0ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d0ee:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d0f2:	681b      	ldr	r3, [r3, #0]
 800d0f4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800d0f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d0fc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d100:	681b      	ldr	r3, [r3, #0]
 800d102:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d106:	b29b      	uxth	r3, r3
 800d108:	461a      	mov	r2, r3
 800d10a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800d10e:	4413      	add	r3, r2
 800d110:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800d114:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d118:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d11c:	681b      	ldr	r3, [r3, #0]
 800d11e:	781b      	ldrb	r3, [r3, #0]
 800d120:	00da      	lsls	r2, r3, #3
 800d122:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800d126:	4413      	add	r3, r2
 800d128:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800d12c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800d130:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d134:	b29a      	uxth	r2, r3
 800d136:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800d13a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800d13c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d140:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d144:	681b      	ldr	r3, [r3, #0]
 800d146:	891b      	ldrh	r3, [r3, #8]
 800d148:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800d14c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d150:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d154:	681b      	ldr	r3, [r3, #0]
 800d156:	6959      	ldr	r1, [r3, #20]
 800d158:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d15c:	b29b      	uxth	r3, r3
 800d15e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800d162:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800d166:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800d16a:	6800      	ldr	r0, [r0, #0]
 800d16c:	f000 fe15 	bl	800dd9a <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800d170:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d174:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d178:	681a      	ldr	r2, [r3, #0]
 800d17a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d17e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d182:	681b      	ldr	r3, [r3, #0]
 800d184:	781b      	ldrb	r3, [r3, #0]
 800d186:	009b      	lsls	r3, r3, #2
 800d188:	4413      	add	r3, r2
 800d18a:	881b      	ldrh	r3, [r3, #0]
 800d18c:	b29b      	uxth	r3, r3
 800d18e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d192:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d196:	817b      	strh	r3, [r7, #10]
 800d198:	897b      	ldrh	r3, [r7, #10]
 800d19a:	f083 0310 	eor.w	r3, r3, #16
 800d19e:	817b      	strh	r3, [r7, #10]
 800d1a0:	897b      	ldrh	r3, [r7, #10]
 800d1a2:	f083 0320 	eor.w	r3, r3, #32
 800d1a6:	817b      	strh	r3, [r7, #10]
 800d1a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d1ac:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d1b0:	681a      	ldr	r2, [r3, #0]
 800d1b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d1b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d1ba:	681b      	ldr	r3, [r3, #0]
 800d1bc:	781b      	ldrb	r3, [r3, #0]
 800d1be:	009b      	lsls	r3, r3, #2
 800d1c0:	441a      	add	r2, r3
 800d1c2:	897b      	ldrh	r3, [r7, #10]
 800d1c4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d1c8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d1cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d1d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d1d4:	b29b      	uxth	r3, r3
 800d1d6:	8013      	strh	r3, [r2, #0]
 800d1d8:	f000 bc9f 	b.w	800db1a <USB_EPStartXfer+0x1660>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800d1dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d1e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d1e4:	681b      	ldr	r3, [r3, #0]
 800d1e6:	7b1b      	ldrb	r3, [r3, #12]
 800d1e8:	2b00      	cmp	r3, #0
 800d1ea:	f040 80ae 	bne.w	800d34a <USB_EPStartXfer+0xe90>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800d1ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d1f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d1f6:	681b      	ldr	r3, [r3, #0]
 800d1f8:	699a      	ldr	r2, [r3, #24]
 800d1fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d1fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d202:	681b      	ldr	r3, [r3, #0]
 800d204:	691b      	ldr	r3, [r3, #16]
 800d206:	429a      	cmp	r2, r3
 800d208:	d917      	bls.n	800d23a <USB_EPStartXfer+0xd80>
      {
        len = ep->maxpacket;
 800d20a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d20e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d212:	681b      	ldr	r3, [r3, #0]
 800d214:	691b      	ldr	r3, [r3, #16]
 800d216:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 800d21a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d21e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d222:	681b      	ldr	r3, [r3, #0]
 800d224:	699a      	ldr	r2, [r3, #24]
 800d226:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d22a:	1ad2      	subs	r2, r2, r3
 800d22c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d230:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d234:	681b      	ldr	r3, [r3, #0]
 800d236:	619a      	str	r2, [r3, #24]
 800d238:	e00e      	b.n	800d258 <USB_EPStartXfer+0xd9e>
      }
      else
      {
        len = ep->xfer_len;
 800d23a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d23e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d242:	681b      	ldr	r3, [r3, #0]
 800d244:	699b      	ldr	r3, [r3, #24]
 800d246:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 800d24a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d24e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d252:	681b      	ldr	r3, [r3, #0]
 800d254:	2200      	movs	r2, #0
 800d256:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800d258:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d25c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d260:	681b      	ldr	r3, [r3, #0]
 800d262:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800d266:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d26a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d26e:	681b      	ldr	r3, [r3, #0]
 800d270:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d274:	b29b      	uxth	r3, r3
 800d276:	461a      	mov	r2, r3
 800d278:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d27c:	4413      	add	r3, r2
 800d27e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800d282:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d286:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d28a:	681b      	ldr	r3, [r3, #0]
 800d28c:	781b      	ldrb	r3, [r3, #0]
 800d28e:	00da      	lsls	r2, r3, #3
 800d290:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d294:	4413      	add	r3, r2
 800d296:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800d29a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800d29e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d2a2:	2b3e      	cmp	r3, #62	; 0x3e
 800d2a4:	d91d      	bls.n	800d2e2 <USB_EPStartXfer+0xe28>
 800d2a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d2aa:	095b      	lsrs	r3, r3, #5
 800d2ac:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800d2b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d2b4:	f003 031f 	and.w	r3, r3, #31
 800d2b8:	2b00      	cmp	r3, #0
 800d2ba:	d104      	bne.n	800d2c6 <USB_EPStartXfer+0xe0c>
 800d2bc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800d2c0:	3b01      	subs	r3, #1
 800d2c2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800d2c6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800d2ca:	b29b      	uxth	r3, r3
 800d2cc:	029b      	lsls	r3, r3, #10
 800d2ce:	b29b      	uxth	r3, r3
 800d2d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d2d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d2d8:	b29a      	uxth	r2, r3
 800d2da:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d2de:	801a      	strh	r2, [r3, #0]
 800d2e0:	e3e1      	b.n	800daa6 <USB_EPStartXfer+0x15ec>
 800d2e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d2e6:	2b00      	cmp	r3, #0
 800d2e8:	d116      	bne.n	800d318 <USB_EPStartXfer+0xe5e>
 800d2ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d2ee:	881b      	ldrh	r3, [r3, #0]
 800d2f0:	b29b      	uxth	r3, r3
 800d2f2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800d2f6:	b29a      	uxth	r2, r3
 800d2f8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d2fc:	801a      	strh	r2, [r3, #0]
 800d2fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d302:	881b      	ldrh	r3, [r3, #0]
 800d304:	b29b      	uxth	r3, r3
 800d306:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d30a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d30e:	b29a      	uxth	r2, r3
 800d310:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d314:	801a      	strh	r2, [r3, #0]
 800d316:	e3c6      	b.n	800daa6 <USB_EPStartXfer+0x15ec>
 800d318:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d31c:	085b      	lsrs	r3, r3, #1
 800d31e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800d322:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d326:	f003 0301 	and.w	r3, r3, #1
 800d32a:	2b00      	cmp	r3, #0
 800d32c:	d004      	beq.n	800d338 <USB_EPStartXfer+0xe7e>
 800d32e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800d332:	3301      	adds	r3, #1
 800d334:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800d338:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800d33c:	b29b      	uxth	r3, r3
 800d33e:	029b      	lsls	r3, r3, #10
 800d340:	b29a      	uxth	r2, r3
 800d342:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d346:	801a      	strh	r2, [r3, #0]
 800d348:	e3ad      	b.n	800daa6 <USB_EPStartXfer+0x15ec>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800d34a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d34e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d352:	681b      	ldr	r3, [r3, #0]
 800d354:	78db      	ldrb	r3, [r3, #3]
 800d356:	2b02      	cmp	r3, #2
 800d358:	f040 8200 	bne.w	800d75c <USB_EPStartXfer+0x12a2>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800d35c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d360:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d364:	681b      	ldr	r3, [r3, #0]
 800d366:	785b      	ldrb	r3, [r3, #1]
 800d368:	2b00      	cmp	r3, #0
 800d36a:	f040 8091 	bne.w	800d490 <USB_EPStartXfer+0xfd6>
 800d36e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d372:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d376:	681b      	ldr	r3, [r3, #0]
 800d378:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800d37c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d380:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d384:	681b      	ldr	r3, [r3, #0]
 800d386:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d38a:	b29b      	uxth	r3, r3
 800d38c:	461a      	mov	r2, r3
 800d38e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800d392:	4413      	add	r3, r2
 800d394:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800d398:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d39c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d3a0:	681b      	ldr	r3, [r3, #0]
 800d3a2:	781b      	ldrb	r3, [r3, #0]
 800d3a4:	00da      	lsls	r2, r3, #3
 800d3a6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800d3aa:	4413      	add	r3, r2
 800d3ac:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800d3b0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800d3b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d3b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d3bc:	681b      	ldr	r3, [r3, #0]
 800d3be:	691b      	ldr	r3, [r3, #16]
 800d3c0:	2b3e      	cmp	r3, #62	; 0x3e
 800d3c2:	d925      	bls.n	800d410 <USB_EPStartXfer+0xf56>
 800d3c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d3c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d3cc:	681b      	ldr	r3, [r3, #0]
 800d3ce:	691b      	ldr	r3, [r3, #16]
 800d3d0:	095b      	lsrs	r3, r3, #5
 800d3d2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800d3d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d3da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d3de:	681b      	ldr	r3, [r3, #0]
 800d3e0:	691b      	ldr	r3, [r3, #16]
 800d3e2:	f003 031f 	and.w	r3, r3, #31
 800d3e6:	2b00      	cmp	r3, #0
 800d3e8:	d104      	bne.n	800d3f4 <USB_EPStartXfer+0xf3a>
 800d3ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d3ee:	3b01      	subs	r3, #1
 800d3f0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800d3f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d3f8:	b29b      	uxth	r3, r3
 800d3fa:	029b      	lsls	r3, r3, #10
 800d3fc:	b29b      	uxth	r3, r3
 800d3fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d402:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d406:	b29a      	uxth	r2, r3
 800d408:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800d40c:	801a      	strh	r2, [r3, #0]
 800d40e:	e074      	b.n	800d4fa <USB_EPStartXfer+0x1040>
 800d410:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d414:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d418:	681b      	ldr	r3, [r3, #0]
 800d41a:	691b      	ldr	r3, [r3, #16]
 800d41c:	2b00      	cmp	r3, #0
 800d41e:	d116      	bne.n	800d44e <USB_EPStartXfer+0xf94>
 800d420:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800d424:	881b      	ldrh	r3, [r3, #0]
 800d426:	b29b      	uxth	r3, r3
 800d428:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800d42c:	b29a      	uxth	r2, r3
 800d42e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800d432:	801a      	strh	r2, [r3, #0]
 800d434:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800d438:	881b      	ldrh	r3, [r3, #0]
 800d43a:	b29b      	uxth	r3, r3
 800d43c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d440:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d444:	b29a      	uxth	r2, r3
 800d446:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800d44a:	801a      	strh	r2, [r3, #0]
 800d44c:	e055      	b.n	800d4fa <USB_EPStartXfer+0x1040>
 800d44e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d452:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d456:	681b      	ldr	r3, [r3, #0]
 800d458:	691b      	ldr	r3, [r3, #16]
 800d45a:	085b      	lsrs	r3, r3, #1
 800d45c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800d460:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d464:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d468:	681b      	ldr	r3, [r3, #0]
 800d46a:	691b      	ldr	r3, [r3, #16]
 800d46c:	f003 0301 	and.w	r3, r3, #1
 800d470:	2b00      	cmp	r3, #0
 800d472:	d004      	beq.n	800d47e <USB_EPStartXfer+0xfc4>
 800d474:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d478:	3301      	adds	r3, #1
 800d47a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800d47e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d482:	b29b      	uxth	r3, r3
 800d484:	029b      	lsls	r3, r3, #10
 800d486:	b29a      	uxth	r2, r3
 800d488:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800d48c:	801a      	strh	r2, [r3, #0]
 800d48e:	e034      	b.n	800d4fa <USB_EPStartXfer+0x1040>
 800d490:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d494:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d498:	681b      	ldr	r3, [r3, #0]
 800d49a:	785b      	ldrb	r3, [r3, #1]
 800d49c:	2b01      	cmp	r3, #1
 800d49e:	d12c      	bne.n	800d4fa <USB_EPStartXfer+0x1040>
 800d4a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d4a4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d4a8:	681b      	ldr	r3, [r3, #0]
 800d4aa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800d4ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d4b2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d4b6:	681b      	ldr	r3, [r3, #0]
 800d4b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d4bc:	b29b      	uxth	r3, r3
 800d4be:	461a      	mov	r2, r3
 800d4c0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800d4c4:	4413      	add	r3, r2
 800d4c6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800d4ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d4ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d4d2:	681b      	ldr	r3, [r3, #0]
 800d4d4:	781b      	ldrb	r3, [r3, #0]
 800d4d6:	00da      	lsls	r2, r3, #3
 800d4d8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800d4dc:	4413      	add	r3, r2
 800d4de:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800d4e2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800d4e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d4ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d4ee:	681b      	ldr	r3, [r3, #0]
 800d4f0:	691b      	ldr	r3, [r3, #16]
 800d4f2:	b29a      	uxth	r2, r3
 800d4f4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800d4f8:	801a      	strh	r2, [r3, #0]
 800d4fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d4fe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d502:	681b      	ldr	r3, [r3, #0]
 800d504:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800d508:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d50c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d510:	681b      	ldr	r3, [r3, #0]
 800d512:	785b      	ldrb	r3, [r3, #1]
 800d514:	2b00      	cmp	r3, #0
 800d516:	f040 8091 	bne.w	800d63c <USB_EPStartXfer+0x1182>
 800d51a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d51e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d522:	681b      	ldr	r3, [r3, #0]
 800d524:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800d528:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d52c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d530:	681b      	ldr	r3, [r3, #0]
 800d532:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d536:	b29b      	uxth	r3, r3
 800d538:	461a      	mov	r2, r3
 800d53a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800d53e:	4413      	add	r3, r2
 800d540:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800d544:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d548:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d54c:	681b      	ldr	r3, [r3, #0]
 800d54e:	781b      	ldrb	r3, [r3, #0]
 800d550:	00da      	lsls	r2, r3, #3
 800d552:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800d556:	4413      	add	r3, r2
 800d558:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800d55c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800d560:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d564:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d568:	681b      	ldr	r3, [r3, #0]
 800d56a:	691b      	ldr	r3, [r3, #16]
 800d56c:	2b3e      	cmp	r3, #62	; 0x3e
 800d56e:	d925      	bls.n	800d5bc <USB_EPStartXfer+0x1102>
 800d570:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d574:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d578:	681b      	ldr	r3, [r3, #0]
 800d57a:	691b      	ldr	r3, [r3, #16]
 800d57c:	095b      	lsrs	r3, r3, #5
 800d57e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800d582:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d586:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d58a:	681b      	ldr	r3, [r3, #0]
 800d58c:	691b      	ldr	r3, [r3, #16]
 800d58e:	f003 031f 	and.w	r3, r3, #31
 800d592:	2b00      	cmp	r3, #0
 800d594:	d104      	bne.n	800d5a0 <USB_EPStartXfer+0x10e6>
 800d596:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d59a:	3b01      	subs	r3, #1
 800d59c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800d5a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d5a4:	b29b      	uxth	r3, r3
 800d5a6:	029b      	lsls	r3, r3, #10
 800d5a8:	b29b      	uxth	r3, r3
 800d5aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d5ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d5b2:	b29a      	uxth	r2, r3
 800d5b4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800d5b8:	801a      	strh	r2, [r3, #0]
 800d5ba:	e06d      	b.n	800d698 <USB_EPStartXfer+0x11de>
 800d5bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d5c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d5c4:	681b      	ldr	r3, [r3, #0]
 800d5c6:	691b      	ldr	r3, [r3, #16]
 800d5c8:	2b00      	cmp	r3, #0
 800d5ca:	d116      	bne.n	800d5fa <USB_EPStartXfer+0x1140>
 800d5cc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800d5d0:	881b      	ldrh	r3, [r3, #0]
 800d5d2:	b29b      	uxth	r3, r3
 800d5d4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800d5d8:	b29a      	uxth	r2, r3
 800d5da:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800d5de:	801a      	strh	r2, [r3, #0]
 800d5e0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800d5e4:	881b      	ldrh	r3, [r3, #0]
 800d5e6:	b29b      	uxth	r3, r3
 800d5e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d5ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d5f0:	b29a      	uxth	r2, r3
 800d5f2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800d5f6:	801a      	strh	r2, [r3, #0]
 800d5f8:	e04e      	b.n	800d698 <USB_EPStartXfer+0x11de>
 800d5fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d5fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d602:	681b      	ldr	r3, [r3, #0]
 800d604:	691b      	ldr	r3, [r3, #16]
 800d606:	085b      	lsrs	r3, r3, #1
 800d608:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800d60c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d610:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d614:	681b      	ldr	r3, [r3, #0]
 800d616:	691b      	ldr	r3, [r3, #16]
 800d618:	f003 0301 	and.w	r3, r3, #1
 800d61c:	2b00      	cmp	r3, #0
 800d61e:	d004      	beq.n	800d62a <USB_EPStartXfer+0x1170>
 800d620:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d624:	3301      	adds	r3, #1
 800d626:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800d62a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d62e:	b29b      	uxth	r3, r3
 800d630:	029b      	lsls	r3, r3, #10
 800d632:	b29a      	uxth	r2, r3
 800d634:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800d638:	801a      	strh	r2, [r3, #0]
 800d63a:	e02d      	b.n	800d698 <USB_EPStartXfer+0x11de>
 800d63c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d640:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d644:	681b      	ldr	r3, [r3, #0]
 800d646:	785b      	ldrb	r3, [r3, #1]
 800d648:	2b01      	cmp	r3, #1
 800d64a:	d125      	bne.n	800d698 <USB_EPStartXfer+0x11de>
 800d64c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d650:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d654:	681b      	ldr	r3, [r3, #0]
 800d656:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d65a:	b29b      	uxth	r3, r3
 800d65c:	461a      	mov	r2, r3
 800d65e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800d662:	4413      	add	r3, r2
 800d664:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800d668:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d66c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d670:	681b      	ldr	r3, [r3, #0]
 800d672:	781b      	ldrb	r3, [r3, #0]
 800d674:	00da      	lsls	r2, r3, #3
 800d676:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800d67a:	4413      	add	r3, r2
 800d67c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800d680:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800d684:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d688:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d68c:	681b      	ldr	r3, [r3, #0]
 800d68e:	691b      	ldr	r3, [r3, #16]
 800d690:	b29a      	uxth	r2, r3
 800d692:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800d696:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800d698:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d69c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d6a0:	681b      	ldr	r3, [r3, #0]
 800d6a2:	69db      	ldr	r3, [r3, #28]
 800d6a4:	2b00      	cmp	r3, #0
 800d6a6:	f000 81fe 	beq.w	800daa6 <USB_EPStartXfer+0x15ec>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800d6aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d6ae:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d6b2:	681a      	ldr	r2, [r3, #0]
 800d6b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d6b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d6bc:	681b      	ldr	r3, [r3, #0]
 800d6be:	781b      	ldrb	r3, [r3, #0]
 800d6c0:	009b      	lsls	r3, r3, #2
 800d6c2:	4413      	add	r3, r2
 800d6c4:	881b      	ldrh	r3, [r3, #0]
 800d6c6:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800d6ca:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800d6ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d6d2:	2b00      	cmp	r3, #0
 800d6d4:	d005      	beq.n	800d6e2 <USB_EPStartXfer+0x1228>
 800d6d6:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800d6da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d6de:	2b00      	cmp	r3, #0
 800d6e0:	d10d      	bne.n	800d6fe <USB_EPStartXfer+0x1244>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800d6e2:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800d6e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800d6ea:	2b00      	cmp	r3, #0
 800d6ec:	f040 81db 	bne.w	800daa6 <USB_EPStartXfer+0x15ec>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800d6f0:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800d6f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d6f8:	2b00      	cmp	r3, #0
 800d6fa:	f040 81d4 	bne.w	800daa6 <USB_EPStartXfer+0x15ec>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800d6fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d702:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d706:	681a      	ldr	r2, [r3, #0]
 800d708:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d70c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d710:	681b      	ldr	r3, [r3, #0]
 800d712:	781b      	ldrb	r3, [r3, #0]
 800d714:	009b      	lsls	r3, r3, #2
 800d716:	4413      	add	r3, r2
 800d718:	881b      	ldrh	r3, [r3, #0]
 800d71a:	b29b      	uxth	r3, r3
 800d71c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d720:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d724:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 800d728:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d72c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d730:	681a      	ldr	r2, [r3, #0]
 800d732:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d736:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d73a:	681b      	ldr	r3, [r3, #0]
 800d73c:	781b      	ldrb	r3, [r3, #0]
 800d73e:	009b      	lsls	r3, r3, #2
 800d740:	441a      	add	r2, r3
 800d742:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 800d746:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d74a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d74e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d752:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800d756:	b29b      	uxth	r3, r3
 800d758:	8013      	strh	r3, [r2, #0]
 800d75a:	e1a4      	b.n	800daa6 <USB_EPStartXfer+0x15ec>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800d75c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d760:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d764:	681b      	ldr	r3, [r3, #0]
 800d766:	78db      	ldrb	r3, [r3, #3]
 800d768:	2b01      	cmp	r3, #1
 800d76a:	f040 819a 	bne.w	800daa2 <USB_EPStartXfer+0x15e8>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800d76e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d772:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d776:	681b      	ldr	r3, [r3, #0]
 800d778:	699a      	ldr	r2, [r3, #24]
 800d77a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d77e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d782:	681b      	ldr	r3, [r3, #0]
 800d784:	691b      	ldr	r3, [r3, #16]
 800d786:	429a      	cmp	r2, r3
 800d788:	d917      	bls.n	800d7ba <USB_EPStartXfer+0x1300>
        {
          len = ep->maxpacket;
 800d78a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d78e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d792:	681b      	ldr	r3, [r3, #0]
 800d794:	691b      	ldr	r3, [r3, #16]
 800d796:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 800d79a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d79e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d7a2:	681b      	ldr	r3, [r3, #0]
 800d7a4:	699a      	ldr	r2, [r3, #24]
 800d7a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d7aa:	1ad2      	subs	r2, r2, r3
 800d7ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d7b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d7b4:	681b      	ldr	r3, [r3, #0]
 800d7b6:	619a      	str	r2, [r3, #24]
 800d7b8:	e00e      	b.n	800d7d8 <USB_EPStartXfer+0x131e>
        }
        else
        {
          len = ep->xfer_len;
 800d7ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d7be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d7c2:	681b      	ldr	r3, [r3, #0]
 800d7c4:	699b      	ldr	r3, [r3, #24]
 800d7c6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 800d7ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d7ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d7d2:	681b      	ldr	r3, [r3, #0]
 800d7d4:	2200      	movs	r2, #0
 800d7d6:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800d7d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d7dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d7e0:	681b      	ldr	r3, [r3, #0]
 800d7e2:	785b      	ldrb	r3, [r3, #1]
 800d7e4:	2b00      	cmp	r3, #0
 800d7e6:	d178      	bne.n	800d8da <USB_EPStartXfer+0x1420>
 800d7e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d7ec:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d7f0:	681b      	ldr	r3, [r3, #0]
 800d7f2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800d7f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d7fa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d7fe:	681b      	ldr	r3, [r3, #0]
 800d800:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d804:	b29b      	uxth	r3, r3
 800d806:	461a      	mov	r2, r3
 800d808:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800d80c:	4413      	add	r3, r2
 800d80e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800d812:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d816:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d81a:	681b      	ldr	r3, [r3, #0]
 800d81c:	781b      	ldrb	r3, [r3, #0]
 800d81e:	00da      	lsls	r2, r3, #3
 800d820:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800d824:	4413      	add	r3, r2
 800d826:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800d82a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800d82e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d832:	2b3e      	cmp	r3, #62	; 0x3e
 800d834:	d91d      	bls.n	800d872 <USB_EPStartXfer+0x13b8>
 800d836:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d83a:	095b      	lsrs	r3, r3, #5
 800d83c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800d840:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d844:	f003 031f 	and.w	r3, r3, #31
 800d848:	2b00      	cmp	r3, #0
 800d84a:	d104      	bne.n	800d856 <USB_EPStartXfer+0x139c>
 800d84c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d850:	3b01      	subs	r3, #1
 800d852:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800d856:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d85a:	b29b      	uxth	r3, r3
 800d85c:	029b      	lsls	r3, r3, #10
 800d85e:	b29b      	uxth	r3, r3
 800d860:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d864:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d868:	b29a      	uxth	r2, r3
 800d86a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800d86e:	801a      	strh	r2, [r3, #0]
 800d870:	e064      	b.n	800d93c <USB_EPStartXfer+0x1482>
 800d872:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d876:	2b00      	cmp	r3, #0
 800d878:	d116      	bne.n	800d8a8 <USB_EPStartXfer+0x13ee>
 800d87a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800d87e:	881b      	ldrh	r3, [r3, #0]
 800d880:	b29b      	uxth	r3, r3
 800d882:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800d886:	b29a      	uxth	r2, r3
 800d888:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800d88c:	801a      	strh	r2, [r3, #0]
 800d88e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800d892:	881b      	ldrh	r3, [r3, #0]
 800d894:	b29b      	uxth	r3, r3
 800d896:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d89a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d89e:	b29a      	uxth	r2, r3
 800d8a0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800d8a4:	801a      	strh	r2, [r3, #0]
 800d8a6:	e049      	b.n	800d93c <USB_EPStartXfer+0x1482>
 800d8a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d8ac:	085b      	lsrs	r3, r3, #1
 800d8ae:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800d8b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d8b6:	f003 0301 	and.w	r3, r3, #1
 800d8ba:	2b00      	cmp	r3, #0
 800d8bc:	d004      	beq.n	800d8c8 <USB_EPStartXfer+0x140e>
 800d8be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d8c2:	3301      	adds	r3, #1
 800d8c4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800d8c8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d8cc:	b29b      	uxth	r3, r3
 800d8ce:	029b      	lsls	r3, r3, #10
 800d8d0:	b29a      	uxth	r2, r3
 800d8d2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800d8d6:	801a      	strh	r2, [r3, #0]
 800d8d8:	e030      	b.n	800d93c <USB_EPStartXfer+0x1482>
 800d8da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d8de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d8e2:	681b      	ldr	r3, [r3, #0]
 800d8e4:	785b      	ldrb	r3, [r3, #1]
 800d8e6:	2b01      	cmp	r3, #1
 800d8e8:	d128      	bne.n	800d93c <USB_EPStartXfer+0x1482>
 800d8ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d8ee:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d8f2:	681b      	ldr	r3, [r3, #0]
 800d8f4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800d8f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d8fc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d900:	681b      	ldr	r3, [r3, #0]
 800d902:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d906:	b29b      	uxth	r3, r3
 800d908:	461a      	mov	r2, r3
 800d90a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d90e:	4413      	add	r3, r2
 800d910:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800d914:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d918:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d91c:	681b      	ldr	r3, [r3, #0]
 800d91e:	781b      	ldrb	r3, [r3, #0]
 800d920:	00da      	lsls	r2, r3, #3
 800d922:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d926:	4413      	add	r3, r2
 800d928:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800d92c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800d930:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d934:	b29a      	uxth	r2, r3
 800d936:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800d93a:	801a      	strh	r2, [r3, #0]
 800d93c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d940:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d944:	681b      	ldr	r3, [r3, #0]
 800d946:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800d94a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d94e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d952:	681b      	ldr	r3, [r3, #0]
 800d954:	785b      	ldrb	r3, [r3, #1]
 800d956:	2b00      	cmp	r3, #0
 800d958:	d178      	bne.n	800da4c <USB_EPStartXfer+0x1592>
 800d95a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d95e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d962:	681b      	ldr	r3, [r3, #0]
 800d964:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800d968:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d96c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d970:	681b      	ldr	r3, [r3, #0]
 800d972:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d976:	b29b      	uxth	r3, r3
 800d978:	461a      	mov	r2, r3
 800d97a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800d97e:	4413      	add	r3, r2
 800d980:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800d984:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d988:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d98c:	681b      	ldr	r3, [r3, #0]
 800d98e:	781b      	ldrb	r3, [r3, #0]
 800d990:	00da      	lsls	r2, r3, #3
 800d992:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800d996:	4413      	add	r3, r2
 800d998:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800d99c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800d9a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d9a4:	2b3e      	cmp	r3, #62	; 0x3e
 800d9a6:	d91d      	bls.n	800d9e4 <USB_EPStartXfer+0x152a>
 800d9a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d9ac:	095b      	lsrs	r3, r3, #5
 800d9ae:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800d9b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d9b6:	f003 031f 	and.w	r3, r3, #31
 800d9ba:	2b00      	cmp	r3, #0
 800d9bc:	d104      	bne.n	800d9c8 <USB_EPStartXfer+0x150e>
 800d9be:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800d9c2:	3b01      	subs	r3, #1
 800d9c4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800d9c8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800d9cc:	b29b      	uxth	r3, r3
 800d9ce:	029b      	lsls	r3, r3, #10
 800d9d0:	b29b      	uxth	r3, r3
 800d9d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d9d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d9da:	b29a      	uxth	r2, r3
 800d9dc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800d9e0:	801a      	strh	r2, [r3, #0]
 800d9e2:	e060      	b.n	800daa6 <USB_EPStartXfer+0x15ec>
 800d9e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d9e8:	2b00      	cmp	r3, #0
 800d9ea:	d116      	bne.n	800da1a <USB_EPStartXfer+0x1560>
 800d9ec:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800d9f0:	881b      	ldrh	r3, [r3, #0]
 800d9f2:	b29b      	uxth	r3, r3
 800d9f4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800d9f8:	b29a      	uxth	r2, r3
 800d9fa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800d9fe:	801a      	strh	r2, [r3, #0]
 800da00:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800da04:	881b      	ldrh	r3, [r3, #0]
 800da06:	b29b      	uxth	r3, r3
 800da08:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800da0c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800da10:	b29a      	uxth	r2, r3
 800da12:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800da16:	801a      	strh	r2, [r3, #0]
 800da18:	e045      	b.n	800daa6 <USB_EPStartXfer+0x15ec>
 800da1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800da1e:	085b      	lsrs	r3, r3, #1
 800da20:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800da24:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800da28:	f003 0301 	and.w	r3, r3, #1
 800da2c:	2b00      	cmp	r3, #0
 800da2e:	d004      	beq.n	800da3a <USB_EPStartXfer+0x1580>
 800da30:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800da34:	3301      	adds	r3, #1
 800da36:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800da3a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800da3e:	b29b      	uxth	r3, r3
 800da40:	029b      	lsls	r3, r3, #10
 800da42:	b29a      	uxth	r2, r3
 800da44:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800da48:	801a      	strh	r2, [r3, #0]
 800da4a:	e02c      	b.n	800daa6 <USB_EPStartXfer+0x15ec>
 800da4c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800da50:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800da54:	681b      	ldr	r3, [r3, #0]
 800da56:	785b      	ldrb	r3, [r3, #1]
 800da58:	2b01      	cmp	r3, #1
 800da5a:	d124      	bne.n	800daa6 <USB_EPStartXfer+0x15ec>
 800da5c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800da60:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800da64:	681b      	ldr	r3, [r3, #0]
 800da66:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800da6a:	b29b      	uxth	r3, r3
 800da6c:	461a      	mov	r2, r3
 800da6e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800da72:	4413      	add	r3, r2
 800da74:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800da78:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800da7c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800da80:	681b      	ldr	r3, [r3, #0]
 800da82:	781b      	ldrb	r3, [r3, #0]
 800da84:	00da      	lsls	r2, r3, #3
 800da86:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800da8a:	4413      	add	r3, r2
 800da8c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800da90:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800da94:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800da98:	b29a      	uxth	r2, r3
 800da9a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800da9e:	801a      	strh	r2, [r3, #0]
 800daa0:	e001      	b.n	800daa6 <USB_EPStartXfer+0x15ec>
      }
      else
      {
        return HAL_ERROR;
 800daa2:	2301      	movs	r3, #1
 800daa4:	e03a      	b.n	800db1c <USB_EPStartXfer+0x1662>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800daa6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800daaa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800daae:	681a      	ldr	r2, [r3, #0]
 800dab0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dab4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800dab8:	681b      	ldr	r3, [r3, #0]
 800daba:	781b      	ldrb	r3, [r3, #0]
 800dabc:	009b      	lsls	r3, r3, #2
 800dabe:	4413      	add	r3, r2
 800dac0:	881b      	ldrh	r3, [r3, #0]
 800dac2:	b29b      	uxth	r3, r3
 800dac4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800dac8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800dacc:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800dad0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800dad4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800dad8:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800dadc:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800dae0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800dae4:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800dae8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800daec:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800daf0:	681a      	ldr	r2, [r3, #0]
 800daf2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800daf6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800dafa:	681b      	ldr	r3, [r3, #0]
 800dafc:	781b      	ldrb	r3, [r3, #0]
 800dafe:	009b      	lsls	r3, r3, #2
 800db00:	441a      	add	r2, r3
 800db02:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800db06:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800db0a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800db0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800db12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800db16:	b29b      	uxth	r3, r3
 800db18:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800db1a:	2300      	movs	r3, #0
}
 800db1c:	4618      	mov	r0, r3
 800db1e:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800db22:	46bd      	mov	sp, r7
 800db24:	bd80      	pop	{r7, pc}

0800db26 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800db26:	b480      	push	{r7}
 800db28:	b085      	sub	sp, #20
 800db2a:	af00      	add	r7, sp, #0
 800db2c:	6078      	str	r0, [r7, #4]
 800db2e:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800db30:	683b      	ldr	r3, [r7, #0]
 800db32:	785b      	ldrb	r3, [r3, #1]
 800db34:	2b00      	cmp	r3, #0
 800db36:	d020      	beq.n	800db7a <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800db38:	687a      	ldr	r2, [r7, #4]
 800db3a:	683b      	ldr	r3, [r7, #0]
 800db3c:	781b      	ldrb	r3, [r3, #0]
 800db3e:	009b      	lsls	r3, r3, #2
 800db40:	4413      	add	r3, r2
 800db42:	881b      	ldrh	r3, [r3, #0]
 800db44:	b29b      	uxth	r3, r3
 800db46:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800db4a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800db4e:	81bb      	strh	r3, [r7, #12]
 800db50:	89bb      	ldrh	r3, [r7, #12]
 800db52:	f083 0310 	eor.w	r3, r3, #16
 800db56:	81bb      	strh	r3, [r7, #12]
 800db58:	687a      	ldr	r2, [r7, #4]
 800db5a:	683b      	ldr	r3, [r7, #0]
 800db5c:	781b      	ldrb	r3, [r3, #0]
 800db5e:	009b      	lsls	r3, r3, #2
 800db60:	441a      	add	r2, r3
 800db62:	89bb      	ldrh	r3, [r7, #12]
 800db64:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800db68:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800db6c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800db70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800db74:	b29b      	uxth	r3, r3
 800db76:	8013      	strh	r3, [r2, #0]
 800db78:	e01f      	b.n	800dbba <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800db7a:	687a      	ldr	r2, [r7, #4]
 800db7c:	683b      	ldr	r3, [r7, #0]
 800db7e:	781b      	ldrb	r3, [r3, #0]
 800db80:	009b      	lsls	r3, r3, #2
 800db82:	4413      	add	r3, r2
 800db84:	881b      	ldrh	r3, [r3, #0]
 800db86:	b29b      	uxth	r3, r3
 800db88:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800db8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800db90:	81fb      	strh	r3, [r7, #14]
 800db92:	89fb      	ldrh	r3, [r7, #14]
 800db94:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800db98:	81fb      	strh	r3, [r7, #14]
 800db9a:	687a      	ldr	r2, [r7, #4]
 800db9c:	683b      	ldr	r3, [r7, #0]
 800db9e:	781b      	ldrb	r3, [r3, #0]
 800dba0:	009b      	lsls	r3, r3, #2
 800dba2:	441a      	add	r2, r3
 800dba4:	89fb      	ldrh	r3, [r7, #14]
 800dba6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800dbaa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800dbae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800dbb2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dbb6:	b29b      	uxth	r3, r3
 800dbb8:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800dbba:	2300      	movs	r3, #0
}
 800dbbc:	4618      	mov	r0, r3
 800dbbe:	3714      	adds	r7, #20
 800dbc0:	46bd      	mov	sp, r7
 800dbc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbc6:	4770      	bx	lr

0800dbc8 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800dbc8:	b480      	push	{r7}
 800dbca:	b087      	sub	sp, #28
 800dbcc:	af00      	add	r7, sp, #0
 800dbce:	6078      	str	r0, [r7, #4]
 800dbd0:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800dbd2:	683b      	ldr	r3, [r7, #0]
 800dbd4:	7b1b      	ldrb	r3, [r3, #12]
 800dbd6:	2b00      	cmp	r3, #0
 800dbd8:	f040 809d 	bne.w	800dd16 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800dbdc:	683b      	ldr	r3, [r7, #0]
 800dbde:	785b      	ldrb	r3, [r3, #1]
 800dbe0:	2b00      	cmp	r3, #0
 800dbe2:	d04c      	beq.n	800dc7e <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800dbe4:	687a      	ldr	r2, [r7, #4]
 800dbe6:	683b      	ldr	r3, [r7, #0]
 800dbe8:	781b      	ldrb	r3, [r3, #0]
 800dbea:	009b      	lsls	r3, r3, #2
 800dbec:	4413      	add	r3, r2
 800dbee:	881b      	ldrh	r3, [r3, #0]
 800dbf0:	823b      	strh	r3, [r7, #16]
 800dbf2:	8a3b      	ldrh	r3, [r7, #16]
 800dbf4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dbf8:	2b00      	cmp	r3, #0
 800dbfa:	d01b      	beq.n	800dc34 <USB_EPClearStall+0x6c>
 800dbfc:	687a      	ldr	r2, [r7, #4]
 800dbfe:	683b      	ldr	r3, [r7, #0]
 800dc00:	781b      	ldrb	r3, [r3, #0]
 800dc02:	009b      	lsls	r3, r3, #2
 800dc04:	4413      	add	r3, r2
 800dc06:	881b      	ldrh	r3, [r3, #0]
 800dc08:	b29b      	uxth	r3, r3
 800dc0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800dc0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800dc12:	81fb      	strh	r3, [r7, #14]
 800dc14:	687a      	ldr	r2, [r7, #4]
 800dc16:	683b      	ldr	r3, [r7, #0]
 800dc18:	781b      	ldrb	r3, [r3, #0]
 800dc1a:	009b      	lsls	r3, r3, #2
 800dc1c:	441a      	add	r2, r3
 800dc1e:	89fb      	ldrh	r3, [r7, #14]
 800dc20:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800dc24:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800dc28:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800dc2c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800dc30:	b29b      	uxth	r3, r3
 800dc32:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800dc34:	683b      	ldr	r3, [r7, #0]
 800dc36:	78db      	ldrb	r3, [r3, #3]
 800dc38:	2b01      	cmp	r3, #1
 800dc3a:	d06c      	beq.n	800dd16 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800dc3c:	687a      	ldr	r2, [r7, #4]
 800dc3e:	683b      	ldr	r3, [r7, #0]
 800dc40:	781b      	ldrb	r3, [r3, #0]
 800dc42:	009b      	lsls	r3, r3, #2
 800dc44:	4413      	add	r3, r2
 800dc46:	881b      	ldrh	r3, [r3, #0]
 800dc48:	b29b      	uxth	r3, r3
 800dc4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800dc4e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800dc52:	81bb      	strh	r3, [r7, #12]
 800dc54:	89bb      	ldrh	r3, [r7, #12]
 800dc56:	f083 0320 	eor.w	r3, r3, #32
 800dc5a:	81bb      	strh	r3, [r7, #12]
 800dc5c:	687a      	ldr	r2, [r7, #4]
 800dc5e:	683b      	ldr	r3, [r7, #0]
 800dc60:	781b      	ldrb	r3, [r3, #0]
 800dc62:	009b      	lsls	r3, r3, #2
 800dc64:	441a      	add	r2, r3
 800dc66:	89bb      	ldrh	r3, [r7, #12]
 800dc68:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800dc6c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800dc70:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800dc74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dc78:	b29b      	uxth	r3, r3
 800dc7a:	8013      	strh	r3, [r2, #0]
 800dc7c:	e04b      	b.n	800dd16 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800dc7e:	687a      	ldr	r2, [r7, #4]
 800dc80:	683b      	ldr	r3, [r7, #0]
 800dc82:	781b      	ldrb	r3, [r3, #0]
 800dc84:	009b      	lsls	r3, r3, #2
 800dc86:	4413      	add	r3, r2
 800dc88:	881b      	ldrh	r3, [r3, #0]
 800dc8a:	82fb      	strh	r3, [r7, #22]
 800dc8c:	8afb      	ldrh	r3, [r7, #22]
 800dc8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800dc92:	2b00      	cmp	r3, #0
 800dc94:	d01b      	beq.n	800dcce <USB_EPClearStall+0x106>
 800dc96:	687a      	ldr	r2, [r7, #4]
 800dc98:	683b      	ldr	r3, [r7, #0]
 800dc9a:	781b      	ldrb	r3, [r3, #0]
 800dc9c:	009b      	lsls	r3, r3, #2
 800dc9e:	4413      	add	r3, r2
 800dca0:	881b      	ldrh	r3, [r3, #0]
 800dca2:	b29b      	uxth	r3, r3
 800dca4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800dca8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800dcac:	82bb      	strh	r3, [r7, #20]
 800dcae:	687a      	ldr	r2, [r7, #4]
 800dcb0:	683b      	ldr	r3, [r7, #0]
 800dcb2:	781b      	ldrb	r3, [r3, #0]
 800dcb4:	009b      	lsls	r3, r3, #2
 800dcb6:	441a      	add	r2, r3
 800dcb8:	8abb      	ldrh	r3, [r7, #20]
 800dcba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800dcbe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800dcc2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800dcc6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dcca:	b29b      	uxth	r3, r3
 800dccc:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800dcce:	687a      	ldr	r2, [r7, #4]
 800dcd0:	683b      	ldr	r3, [r7, #0]
 800dcd2:	781b      	ldrb	r3, [r3, #0]
 800dcd4:	009b      	lsls	r3, r3, #2
 800dcd6:	4413      	add	r3, r2
 800dcd8:	881b      	ldrh	r3, [r3, #0]
 800dcda:	b29b      	uxth	r3, r3
 800dcdc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800dce0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800dce4:	827b      	strh	r3, [r7, #18]
 800dce6:	8a7b      	ldrh	r3, [r7, #18]
 800dce8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800dcec:	827b      	strh	r3, [r7, #18]
 800dcee:	8a7b      	ldrh	r3, [r7, #18]
 800dcf0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800dcf4:	827b      	strh	r3, [r7, #18]
 800dcf6:	687a      	ldr	r2, [r7, #4]
 800dcf8:	683b      	ldr	r3, [r7, #0]
 800dcfa:	781b      	ldrb	r3, [r3, #0]
 800dcfc:	009b      	lsls	r3, r3, #2
 800dcfe:	441a      	add	r2, r3
 800dd00:	8a7b      	ldrh	r3, [r7, #18]
 800dd02:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800dd06:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800dd0a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800dd0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dd12:	b29b      	uxth	r3, r3
 800dd14:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800dd16:	2300      	movs	r3, #0
}
 800dd18:	4618      	mov	r0, r3
 800dd1a:	371c      	adds	r7, #28
 800dd1c:	46bd      	mov	sp, r7
 800dd1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd22:	4770      	bx	lr

0800dd24 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800dd24:	b480      	push	{r7}
 800dd26:	b083      	sub	sp, #12
 800dd28:	af00      	add	r7, sp, #0
 800dd2a:	6078      	str	r0, [r7, #4]
 800dd2c:	460b      	mov	r3, r1
 800dd2e:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800dd30:	78fb      	ldrb	r3, [r7, #3]
 800dd32:	2b00      	cmp	r3, #0
 800dd34:	d103      	bne.n	800dd3e <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	2280      	movs	r2, #128	; 0x80
 800dd3a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800dd3e:	2300      	movs	r3, #0
}
 800dd40:	4618      	mov	r0, r3
 800dd42:	370c      	adds	r7, #12
 800dd44:	46bd      	mov	sp, r7
 800dd46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd4a:	4770      	bx	lr

0800dd4c <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800dd4c:	b480      	push	{r7}
 800dd4e:	b083      	sub	sp, #12
 800dd50:	af00      	add	r7, sp, #0
 800dd52:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800dd5a:	b29b      	uxth	r3, r3
 800dd5c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800dd60:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800dd64:	b29a      	uxth	r2, r3
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 800dd6c:	2300      	movs	r3, #0
}
 800dd6e:	4618      	mov	r0, r3
 800dd70:	370c      	adds	r7, #12
 800dd72:	46bd      	mov	sp, r7
 800dd74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd78:	4770      	bx	lr

0800dd7a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800dd7a:	b480      	push	{r7}
 800dd7c:	b085      	sub	sp, #20
 800dd7e:	af00      	add	r7, sp, #0
 800dd80:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800dd82:	687b      	ldr	r3, [r7, #4]
 800dd84:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800dd88:	b29b      	uxth	r3, r3
 800dd8a:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800dd8c:	68fb      	ldr	r3, [r7, #12]
}
 800dd8e:	4618      	mov	r0, r3
 800dd90:	3714      	adds	r7, #20
 800dd92:	46bd      	mov	sp, r7
 800dd94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd98:	4770      	bx	lr

0800dd9a <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800dd9a:	b480      	push	{r7}
 800dd9c:	b08d      	sub	sp, #52	; 0x34
 800dd9e:	af00      	add	r7, sp, #0
 800dda0:	60f8      	str	r0, [r7, #12]
 800dda2:	60b9      	str	r1, [r7, #8]
 800dda4:	4611      	mov	r1, r2
 800dda6:	461a      	mov	r2, r3
 800dda8:	460b      	mov	r3, r1
 800ddaa:	80fb      	strh	r3, [r7, #6]
 800ddac:	4613      	mov	r3, r2
 800ddae:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800ddb0:	88bb      	ldrh	r3, [r7, #4]
 800ddb2:	3301      	adds	r3, #1
 800ddb4:	085b      	lsrs	r3, r3, #1
 800ddb6:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 800ddb8:	68fb      	ldr	r3, [r7, #12]
 800ddba:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t temp1;
  uint32_t temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800ddbc:	68bb      	ldr	r3, [r7, #8]
 800ddbe:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800ddc0:	88fa      	ldrh	r2, [r7, #6]
 800ddc2:	69fb      	ldr	r3, [r7, #28]
 800ddc4:	4413      	add	r3, r2
 800ddc6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ddca:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 800ddcc:	6a3b      	ldr	r3, [r7, #32]
 800ddce:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ddd0:	e01b      	b.n	800de0a <USB_WritePMA+0x70>
  {
    temp1 = *pBuf;
 800ddd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddd4:	781b      	ldrb	r3, [r3, #0]
 800ddd6:	61bb      	str	r3, [r7, #24]
    pBuf++;
 800ddd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddda:	3301      	adds	r3, #1
 800dddc:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 800ddde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dde0:	781b      	ldrb	r3, [r3, #0]
 800dde2:	b29b      	uxth	r3, r3
 800dde4:	021b      	lsls	r3, r3, #8
 800dde6:	b29b      	uxth	r3, r3
 800dde8:	461a      	mov	r2, r3
 800ddea:	69bb      	ldr	r3, [r7, #24]
 800ddec:	4313      	orrs	r3, r2
 800ddee:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 800ddf0:	697b      	ldr	r3, [r7, #20]
 800ddf2:	b29a      	uxth	r2, r3
 800ddf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ddf6:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800ddf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ddfa:	3302      	adds	r3, #2
 800ddfc:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800ddfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de00:	3301      	adds	r3, #1
 800de02:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 800de04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de06:	3b01      	subs	r3, #1
 800de08:	62fb      	str	r3, [r7, #44]	; 0x2c
 800de0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de0c:	2b00      	cmp	r3, #0
 800de0e:	d1e0      	bne.n	800ddd2 <USB_WritePMA+0x38>
  }
}
 800de10:	bf00      	nop
 800de12:	bf00      	nop
 800de14:	3734      	adds	r7, #52	; 0x34
 800de16:	46bd      	mov	sp, r7
 800de18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de1c:	4770      	bx	lr

0800de1e <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800de1e:	b480      	push	{r7}
 800de20:	b08b      	sub	sp, #44	; 0x2c
 800de22:	af00      	add	r7, sp, #0
 800de24:	60f8      	str	r0, [r7, #12]
 800de26:	60b9      	str	r1, [r7, #8]
 800de28:	4611      	mov	r1, r2
 800de2a:	461a      	mov	r2, r3
 800de2c:	460b      	mov	r3, r1
 800de2e:	80fb      	strh	r3, [r7, #6]
 800de30:	4613      	mov	r3, r2
 800de32:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800de34:	88bb      	ldrh	r3, [r7, #4]
 800de36:	085b      	lsrs	r3, r3, #1
 800de38:	b29b      	uxth	r3, r3
 800de3a:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800de3c:	68fb      	ldr	r3, [r7, #12]
 800de3e:	617b      	str	r3, [r7, #20]
  uint32_t i;
  uint32_t temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800de40:	68bb      	ldr	r3, [r7, #8]
 800de42:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800de44:	88fa      	ldrh	r2, [r7, #6]
 800de46:	697b      	ldr	r3, [r7, #20]
 800de48:	4413      	add	r3, r2
 800de4a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800de4e:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800de50:	69bb      	ldr	r3, [r7, #24]
 800de52:	627b      	str	r3, [r7, #36]	; 0x24
 800de54:	e018      	b.n	800de88 <USB_ReadPMA+0x6a>
  {
    temp = *(__IO uint16_t *)pdwVal;
 800de56:	6a3b      	ldr	r3, [r7, #32]
 800de58:	881b      	ldrh	r3, [r3, #0]
 800de5a:	b29b      	uxth	r3, r3
 800de5c:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800de5e:	6a3b      	ldr	r3, [r7, #32]
 800de60:	3302      	adds	r3, #2
 800de62:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800de64:	693b      	ldr	r3, [r7, #16]
 800de66:	b2da      	uxtb	r2, r3
 800de68:	69fb      	ldr	r3, [r7, #28]
 800de6a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800de6c:	69fb      	ldr	r3, [r7, #28]
 800de6e:	3301      	adds	r3, #1
 800de70:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800de72:	693b      	ldr	r3, [r7, #16]
 800de74:	0a1b      	lsrs	r3, r3, #8
 800de76:	b2da      	uxtb	r2, r3
 800de78:	69fb      	ldr	r3, [r7, #28]
 800de7a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800de7c:	69fb      	ldr	r3, [r7, #28]
 800de7e:	3301      	adds	r3, #1
 800de80:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 800de82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de84:	3b01      	subs	r3, #1
 800de86:	627b      	str	r3, [r7, #36]	; 0x24
 800de88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de8a:	2b00      	cmp	r3, #0
 800de8c:	d1e3      	bne.n	800de56 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800de8e:	88bb      	ldrh	r3, [r7, #4]
 800de90:	f003 0301 	and.w	r3, r3, #1
 800de94:	b29b      	uxth	r3, r3
 800de96:	2b00      	cmp	r3, #0
 800de98:	d007      	beq.n	800deaa <USB_ReadPMA+0x8c>
  {
    temp = *pdwVal;
 800de9a:	6a3b      	ldr	r3, [r7, #32]
 800de9c:	881b      	ldrh	r3, [r3, #0]
 800de9e:	b29b      	uxth	r3, r3
 800dea0:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800dea2:	693b      	ldr	r3, [r7, #16]
 800dea4:	b2da      	uxtb	r2, r3
 800dea6:	69fb      	ldr	r3, [r7, #28]
 800dea8:	701a      	strb	r2, [r3, #0]
  }
}
 800deaa:	bf00      	nop
 800deac:	372c      	adds	r7, #44	; 0x2c
 800deae:	46bd      	mov	sp, r7
 800deb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deb4:	4770      	bx	lr

0800deb6 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800deb6:	b580      	push	{r7, lr}
 800deb8:	b084      	sub	sp, #16
 800deba:	af00      	add	r7, sp, #0
 800debc:	6078      	str	r0, [r7, #4]
 800debe:	460b      	mov	r3, r1
 800dec0:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800dec2:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800dec6:	f004 fb05 	bl	80124d4 <USBD_static_malloc>
 800deca:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800decc:	68fb      	ldr	r3, [r7, #12]
 800dece:	2b00      	cmp	r3, #0
 800ded0:	d105      	bne.n	800dede <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800ded2:	687b      	ldr	r3, [r7, #4]
 800ded4:	2200      	movs	r2, #0
 800ded6:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800deda:	2302      	movs	r3, #2
 800dedc:	e066      	b.n	800dfac <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800dede:	687b      	ldr	r3, [r7, #4]
 800dee0:	68fa      	ldr	r2, [r7, #12]
 800dee2:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800dee6:	687b      	ldr	r3, [r7, #4]
 800dee8:	7c1b      	ldrb	r3, [r3, #16]
 800deea:	2b00      	cmp	r3, #0
 800deec:	d119      	bne.n	800df22 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800deee:	f44f 7300 	mov.w	r3, #512	; 0x200
 800def2:	2202      	movs	r2, #2
 800def4:	2181      	movs	r1, #129	; 0x81
 800def6:	6878      	ldr	r0, [r7, #4]
 800def8:	f004 f991 	bl	801221e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800defc:	687b      	ldr	r3, [r7, #4]
 800defe:	2201      	movs	r2, #1
 800df00:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800df02:	f44f 7300 	mov.w	r3, #512	; 0x200
 800df06:	2202      	movs	r2, #2
 800df08:	2101      	movs	r1, #1
 800df0a:	6878      	ldr	r0, [r7, #4]
 800df0c:	f004 f987 	bl	801221e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800df10:	687b      	ldr	r3, [r7, #4]
 800df12:	2201      	movs	r2, #1
 800df14:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800df18:	687b      	ldr	r3, [r7, #4]
 800df1a:	2210      	movs	r2, #16
 800df1c:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800df20:	e016      	b.n	800df50 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800df22:	2340      	movs	r3, #64	; 0x40
 800df24:	2202      	movs	r2, #2
 800df26:	2181      	movs	r1, #129	; 0x81
 800df28:	6878      	ldr	r0, [r7, #4]
 800df2a:	f004 f978 	bl	801221e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800df2e:	687b      	ldr	r3, [r7, #4]
 800df30:	2201      	movs	r2, #1
 800df32:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800df34:	2340      	movs	r3, #64	; 0x40
 800df36:	2202      	movs	r2, #2
 800df38:	2101      	movs	r1, #1
 800df3a:	6878      	ldr	r0, [r7, #4]
 800df3c:	f004 f96f 	bl	801221e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	2201      	movs	r2, #1
 800df44:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800df48:	687b      	ldr	r3, [r7, #4]
 800df4a:	2210      	movs	r2, #16
 800df4c:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800df50:	2308      	movs	r3, #8
 800df52:	2203      	movs	r2, #3
 800df54:	2182      	movs	r1, #130	; 0x82
 800df56:	6878      	ldr	r0, [r7, #4]
 800df58:	f004 f961 	bl	801221e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800df5c:	687b      	ldr	r3, [r7, #4]
 800df5e:	2201      	movs	r2, #1
 800df60:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800df64:	687b      	ldr	r3, [r7, #4]
 800df66:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800df6a:	681b      	ldr	r3, [r3, #0]
 800df6c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800df6e:	68fb      	ldr	r3, [r7, #12]
 800df70:	2200      	movs	r2, #0
 800df72:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800df76:	68fb      	ldr	r3, [r7, #12]
 800df78:	2200      	movs	r2, #0
 800df7a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800df7e:	687b      	ldr	r3, [r7, #4]
 800df80:	7c1b      	ldrb	r3, [r3, #16]
 800df82:	2b00      	cmp	r3, #0
 800df84:	d109      	bne.n	800df9a <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800df86:	68fb      	ldr	r3, [r7, #12]
 800df88:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800df8c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800df90:	2101      	movs	r1, #1
 800df92:	6878      	ldr	r0, [r7, #4]
 800df94:	f004 fa33 	bl	80123fe <USBD_LL_PrepareReceive>
 800df98:	e007      	b.n	800dfaa <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800df9a:	68fb      	ldr	r3, [r7, #12]
 800df9c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800dfa0:	2340      	movs	r3, #64	; 0x40
 800dfa2:	2101      	movs	r1, #1
 800dfa4:	6878      	ldr	r0, [r7, #4]
 800dfa6:	f004 fa2a 	bl	80123fe <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800dfaa:	2300      	movs	r3, #0
}
 800dfac:	4618      	mov	r0, r3
 800dfae:	3710      	adds	r7, #16
 800dfb0:	46bd      	mov	sp, r7
 800dfb2:	bd80      	pop	{r7, pc}

0800dfb4 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800dfb4:	b580      	push	{r7, lr}
 800dfb6:	b082      	sub	sp, #8
 800dfb8:	af00      	add	r7, sp, #0
 800dfba:	6078      	str	r0, [r7, #4]
 800dfbc:	460b      	mov	r3, r1
 800dfbe:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800dfc0:	2181      	movs	r1, #129	; 0x81
 800dfc2:	6878      	ldr	r0, [r7, #4]
 800dfc4:	f004 f951 	bl	801226a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800dfc8:	687b      	ldr	r3, [r7, #4]
 800dfca:	2200      	movs	r2, #0
 800dfcc:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800dfce:	2101      	movs	r1, #1
 800dfd0:	6878      	ldr	r0, [r7, #4]
 800dfd2:	f004 f94a 	bl	801226a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800dfd6:	687b      	ldr	r3, [r7, #4]
 800dfd8:	2200      	movs	r2, #0
 800dfda:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800dfde:	2182      	movs	r1, #130	; 0x82
 800dfe0:	6878      	ldr	r0, [r7, #4]
 800dfe2:	f004 f942 	bl	801226a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800dfe6:	687b      	ldr	r3, [r7, #4]
 800dfe8:	2200      	movs	r2, #0
 800dfea:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800dfee:	687b      	ldr	r3, [r7, #4]
 800dff0:	2200      	movs	r2, #0
 800dff2:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800dff6:	687b      	ldr	r3, [r7, #4]
 800dff8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800dffc:	2b00      	cmp	r3, #0
 800dffe:	d00e      	beq.n	800e01e <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800e000:	687b      	ldr	r3, [r7, #4]
 800e002:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e006:	685b      	ldr	r3, [r3, #4]
 800e008:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800e00a:	687b      	ldr	r3, [r7, #4]
 800e00c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e010:	4618      	mov	r0, r3
 800e012:	f004 fa6d 	bl	80124f0 <USBD_static_free>
    pdev->pClassData = NULL;
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	2200      	movs	r2, #0
 800e01a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800e01e:	2300      	movs	r3, #0
}
 800e020:	4618      	mov	r0, r3
 800e022:	3708      	adds	r7, #8
 800e024:	46bd      	mov	sp, r7
 800e026:	bd80      	pop	{r7, pc}

0800e028 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800e028:	b580      	push	{r7, lr}
 800e02a:	b086      	sub	sp, #24
 800e02c:	af00      	add	r7, sp, #0
 800e02e:	6078      	str	r0, [r7, #4]
 800e030:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e032:	687b      	ldr	r3, [r7, #4]
 800e034:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e038:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800e03a:	2300      	movs	r3, #0
 800e03c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800e03e:	2300      	movs	r3, #0
 800e040:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800e042:	2300      	movs	r3, #0
 800e044:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800e046:	693b      	ldr	r3, [r7, #16]
 800e048:	2b00      	cmp	r3, #0
 800e04a:	d101      	bne.n	800e050 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800e04c:	2303      	movs	r3, #3
 800e04e:	e0af      	b.n	800e1b0 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e050:	683b      	ldr	r3, [r7, #0]
 800e052:	781b      	ldrb	r3, [r3, #0]
 800e054:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e058:	2b00      	cmp	r3, #0
 800e05a:	d03f      	beq.n	800e0dc <USBD_CDC_Setup+0xb4>
 800e05c:	2b20      	cmp	r3, #32
 800e05e:	f040 809f 	bne.w	800e1a0 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800e062:	683b      	ldr	r3, [r7, #0]
 800e064:	88db      	ldrh	r3, [r3, #6]
 800e066:	2b00      	cmp	r3, #0
 800e068:	d02e      	beq.n	800e0c8 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800e06a:	683b      	ldr	r3, [r7, #0]
 800e06c:	781b      	ldrb	r3, [r3, #0]
 800e06e:	b25b      	sxtb	r3, r3
 800e070:	2b00      	cmp	r3, #0
 800e072:	da16      	bge.n	800e0a2 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800e074:	687b      	ldr	r3, [r7, #4]
 800e076:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e07a:	689b      	ldr	r3, [r3, #8]
 800e07c:	683a      	ldr	r2, [r7, #0]
 800e07e:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800e080:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800e082:	683a      	ldr	r2, [r7, #0]
 800e084:	88d2      	ldrh	r2, [r2, #6]
 800e086:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800e088:	683b      	ldr	r3, [r7, #0]
 800e08a:	88db      	ldrh	r3, [r3, #6]
 800e08c:	2b07      	cmp	r3, #7
 800e08e:	bf28      	it	cs
 800e090:	2307      	movcs	r3, #7
 800e092:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800e094:	693b      	ldr	r3, [r7, #16]
 800e096:	89fa      	ldrh	r2, [r7, #14]
 800e098:	4619      	mov	r1, r3
 800e09a:	6878      	ldr	r0, [r7, #4]
 800e09c:	f001 fa9f 	bl	800f5de <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800e0a0:	e085      	b.n	800e1ae <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800e0a2:	683b      	ldr	r3, [r7, #0]
 800e0a4:	785a      	ldrb	r2, [r3, #1]
 800e0a6:	693b      	ldr	r3, [r7, #16]
 800e0a8:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800e0ac:	683b      	ldr	r3, [r7, #0]
 800e0ae:	88db      	ldrh	r3, [r3, #6]
 800e0b0:	b2da      	uxtb	r2, r3
 800e0b2:	693b      	ldr	r3, [r7, #16]
 800e0b4:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800e0b8:	6939      	ldr	r1, [r7, #16]
 800e0ba:	683b      	ldr	r3, [r7, #0]
 800e0bc:	88db      	ldrh	r3, [r3, #6]
 800e0be:	461a      	mov	r2, r3
 800e0c0:	6878      	ldr	r0, [r7, #4]
 800e0c2:	f001 fab8 	bl	800f636 <USBD_CtlPrepareRx>
      break;
 800e0c6:	e072      	b.n	800e1ae <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800e0c8:	687b      	ldr	r3, [r7, #4]
 800e0ca:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e0ce:	689b      	ldr	r3, [r3, #8]
 800e0d0:	683a      	ldr	r2, [r7, #0]
 800e0d2:	7850      	ldrb	r0, [r2, #1]
 800e0d4:	2200      	movs	r2, #0
 800e0d6:	6839      	ldr	r1, [r7, #0]
 800e0d8:	4798      	blx	r3
      break;
 800e0da:	e068      	b.n	800e1ae <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800e0dc:	683b      	ldr	r3, [r7, #0]
 800e0de:	785b      	ldrb	r3, [r3, #1]
 800e0e0:	2b0b      	cmp	r3, #11
 800e0e2:	d852      	bhi.n	800e18a <USBD_CDC_Setup+0x162>
 800e0e4:	a201      	add	r2, pc, #4	; (adr r2, 800e0ec <USBD_CDC_Setup+0xc4>)
 800e0e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e0ea:	bf00      	nop
 800e0ec:	0800e11d 	.word	0x0800e11d
 800e0f0:	0800e199 	.word	0x0800e199
 800e0f4:	0800e18b 	.word	0x0800e18b
 800e0f8:	0800e18b 	.word	0x0800e18b
 800e0fc:	0800e18b 	.word	0x0800e18b
 800e100:	0800e18b 	.word	0x0800e18b
 800e104:	0800e18b 	.word	0x0800e18b
 800e108:	0800e18b 	.word	0x0800e18b
 800e10c:	0800e18b 	.word	0x0800e18b
 800e110:	0800e18b 	.word	0x0800e18b
 800e114:	0800e147 	.word	0x0800e147
 800e118:	0800e171 	.word	0x0800e171
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e11c:	687b      	ldr	r3, [r7, #4]
 800e11e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e122:	b2db      	uxtb	r3, r3
 800e124:	2b03      	cmp	r3, #3
 800e126:	d107      	bne.n	800e138 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800e128:	f107 030a 	add.w	r3, r7, #10
 800e12c:	2202      	movs	r2, #2
 800e12e:	4619      	mov	r1, r3
 800e130:	6878      	ldr	r0, [r7, #4]
 800e132:	f001 fa54 	bl	800f5de <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800e136:	e032      	b.n	800e19e <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800e138:	6839      	ldr	r1, [r7, #0]
 800e13a:	6878      	ldr	r0, [r7, #4]
 800e13c:	f001 f9de 	bl	800f4fc <USBD_CtlError>
            ret = USBD_FAIL;
 800e140:	2303      	movs	r3, #3
 800e142:	75fb      	strb	r3, [r7, #23]
          break;
 800e144:	e02b      	b.n	800e19e <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e146:	687b      	ldr	r3, [r7, #4]
 800e148:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e14c:	b2db      	uxtb	r3, r3
 800e14e:	2b03      	cmp	r3, #3
 800e150:	d107      	bne.n	800e162 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800e152:	f107 030d 	add.w	r3, r7, #13
 800e156:	2201      	movs	r2, #1
 800e158:	4619      	mov	r1, r3
 800e15a:	6878      	ldr	r0, [r7, #4]
 800e15c:	f001 fa3f 	bl	800f5de <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800e160:	e01d      	b.n	800e19e <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800e162:	6839      	ldr	r1, [r7, #0]
 800e164:	6878      	ldr	r0, [r7, #4]
 800e166:	f001 f9c9 	bl	800f4fc <USBD_CtlError>
            ret = USBD_FAIL;
 800e16a:	2303      	movs	r3, #3
 800e16c:	75fb      	strb	r3, [r7, #23]
          break;
 800e16e:	e016      	b.n	800e19e <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800e170:	687b      	ldr	r3, [r7, #4]
 800e172:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e176:	b2db      	uxtb	r3, r3
 800e178:	2b03      	cmp	r3, #3
 800e17a:	d00f      	beq.n	800e19c <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800e17c:	6839      	ldr	r1, [r7, #0]
 800e17e:	6878      	ldr	r0, [r7, #4]
 800e180:	f001 f9bc 	bl	800f4fc <USBD_CtlError>
            ret = USBD_FAIL;
 800e184:	2303      	movs	r3, #3
 800e186:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800e188:	e008      	b.n	800e19c <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800e18a:	6839      	ldr	r1, [r7, #0]
 800e18c:	6878      	ldr	r0, [r7, #4]
 800e18e:	f001 f9b5 	bl	800f4fc <USBD_CtlError>
          ret = USBD_FAIL;
 800e192:	2303      	movs	r3, #3
 800e194:	75fb      	strb	r3, [r7, #23]
          break;
 800e196:	e002      	b.n	800e19e <USBD_CDC_Setup+0x176>
          break;
 800e198:	bf00      	nop
 800e19a:	e008      	b.n	800e1ae <USBD_CDC_Setup+0x186>
          break;
 800e19c:	bf00      	nop
      }
      break;
 800e19e:	e006      	b.n	800e1ae <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800e1a0:	6839      	ldr	r1, [r7, #0]
 800e1a2:	6878      	ldr	r0, [r7, #4]
 800e1a4:	f001 f9aa 	bl	800f4fc <USBD_CtlError>
      ret = USBD_FAIL;
 800e1a8:	2303      	movs	r3, #3
 800e1aa:	75fb      	strb	r3, [r7, #23]
      break;
 800e1ac:	bf00      	nop
  }

  return (uint8_t)ret;
 800e1ae:	7dfb      	ldrb	r3, [r7, #23]
}
 800e1b0:	4618      	mov	r0, r3
 800e1b2:	3718      	adds	r7, #24
 800e1b4:	46bd      	mov	sp, r7
 800e1b6:	bd80      	pop	{r7, pc}

0800e1b8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800e1b8:	b580      	push	{r7, lr}
 800e1ba:	b084      	sub	sp, #16
 800e1bc:	af00      	add	r7, sp, #0
 800e1be:	6078      	str	r0, [r7, #4]
 800e1c0:	460b      	mov	r3, r1
 800e1c2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800e1c4:	687b      	ldr	r3, [r7, #4]
 800e1c6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800e1ca:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800e1cc:	687b      	ldr	r3, [r7, #4]
 800e1ce:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e1d2:	2b00      	cmp	r3, #0
 800e1d4:	d101      	bne.n	800e1da <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800e1d6:	2303      	movs	r3, #3
 800e1d8:	e04f      	b.n	800e27a <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e1da:	687b      	ldr	r3, [r7, #4]
 800e1dc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e1e0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800e1e2:	78fa      	ldrb	r2, [r7, #3]
 800e1e4:	6879      	ldr	r1, [r7, #4]
 800e1e6:	4613      	mov	r3, r2
 800e1e8:	009b      	lsls	r3, r3, #2
 800e1ea:	4413      	add	r3, r2
 800e1ec:	009b      	lsls	r3, r3, #2
 800e1ee:	440b      	add	r3, r1
 800e1f0:	3318      	adds	r3, #24
 800e1f2:	681b      	ldr	r3, [r3, #0]
 800e1f4:	2b00      	cmp	r3, #0
 800e1f6:	d029      	beq.n	800e24c <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800e1f8:	78fa      	ldrb	r2, [r7, #3]
 800e1fa:	6879      	ldr	r1, [r7, #4]
 800e1fc:	4613      	mov	r3, r2
 800e1fe:	009b      	lsls	r3, r3, #2
 800e200:	4413      	add	r3, r2
 800e202:	009b      	lsls	r3, r3, #2
 800e204:	440b      	add	r3, r1
 800e206:	3318      	adds	r3, #24
 800e208:	681a      	ldr	r2, [r3, #0]
 800e20a:	78f9      	ldrb	r1, [r7, #3]
 800e20c:	68f8      	ldr	r0, [r7, #12]
 800e20e:	460b      	mov	r3, r1
 800e210:	009b      	lsls	r3, r3, #2
 800e212:	440b      	add	r3, r1
 800e214:	00db      	lsls	r3, r3, #3
 800e216:	4403      	add	r3, r0
 800e218:	3338      	adds	r3, #56	; 0x38
 800e21a:	681b      	ldr	r3, [r3, #0]
 800e21c:	fbb2 f1f3 	udiv	r1, r2, r3
 800e220:	fb01 f303 	mul.w	r3, r1, r3
 800e224:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800e226:	2b00      	cmp	r3, #0
 800e228:	d110      	bne.n	800e24c <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800e22a:	78fa      	ldrb	r2, [r7, #3]
 800e22c:	6879      	ldr	r1, [r7, #4]
 800e22e:	4613      	mov	r3, r2
 800e230:	009b      	lsls	r3, r3, #2
 800e232:	4413      	add	r3, r2
 800e234:	009b      	lsls	r3, r3, #2
 800e236:	440b      	add	r3, r1
 800e238:	3318      	adds	r3, #24
 800e23a:	2200      	movs	r2, #0
 800e23c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800e23e:	78f9      	ldrb	r1, [r7, #3]
 800e240:	2300      	movs	r3, #0
 800e242:	2200      	movs	r2, #0
 800e244:	6878      	ldr	r0, [r7, #4]
 800e246:	f004 f8b9 	bl	80123bc <USBD_LL_Transmit>
 800e24a:	e015      	b.n	800e278 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800e24c:	68bb      	ldr	r3, [r7, #8]
 800e24e:	2200      	movs	r2, #0
 800e250:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800e254:	687b      	ldr	r3, [r7, #4]
 800e256:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e25a:	691b      	ldr	r3, [r3, #16]
 800e25c:	2b00      	cmp	r3, #0
 800e25e:	d00b      	beq.n	800e278 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800e260:	687b      	ldr	r3, [r7, #4]
 800e262:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e266:	691b      	ldr	r3, [r3, #16]
 800e268:	68ba      	ldr	r2, [r7, #8]
 800e26a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800e26e:	68ba      	ldr	r2, [r7, #8]
 800e270:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800e274:	78fa      	ldrb	r2, [r7, #3]
 800e276:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800e278:	2300      	movs	r3, #0
}
 800e27a:	4618      	mov	r0, r3
 800e27c:	3710      	adds	r7, #16
 800e27e:	46bd      	mov	sp, r7
 800e280:	bd80      	pop	{r7, pc}

0800e282 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800e282:	b580      	push	{r7, lr}
 800e284:	b084      	sub	sp, #16
 800e286:	af00      	add	r7, sp, #0
 800e288:	6078      	str	r0, [r7, #4]
 800e28a:	460b      	mov	r3, r1
 800e28c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e28e:	687b      	ldr	r3, [r7, #4]
 800e290:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e294:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800e296:	687b      	ldr	r3, [r7, #4]
 800e298:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e29c:	2b00      	cmp	r3, #0
 800e29e:	d101      	bne.n	800e2a4 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800e2a0:	2303      	movs	r3, #3
 800e2a2:	e015      	b.n	800e2d0 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800e2a4:	78fb      	ldrb	r3, [r7, #3]
 800e2a6:	4619      	mov	r1, r3
 800e2a8:	6878      	ldr	r0, [r7, #4]
 800e2aa:	f004 f8c9 	bl	8012440 <USBD_LL_GetRxDataSize>
 800e2ae:	4602      	mov	r2, r0
 800e2b0:	68fb      	ldr	r3, [r7, #12]
 800e2b2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800e2b6:	687b      	ldr	r3, [r7, #4]
 800e2b8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e2bc:	68db      	ldr	r3, [r3, #12]
 800e2be:	68fa      	ldr	r2, [r7, #12]
 800e2c0:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800e2c4:	68fa      	ldr	r2, [r7, #12]
 800e2c6:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800e2ca:	4611      	mov	r1, r2
 800e2cc:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800e2ce:	2300      	movs	r3, #0
}
 800e2d0:	4618      	mov	r0, r3
 800e2d2:	3710      	adds	r7, #16
 800e2d4:	46bd      	mov	sp, r7
 800e2d6:	bd80      	pop	{r7, pc}

0800e2d8 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800e2d8:	b580      	push	{r7, lr}
 800e2da:	b084      	sub	sp, #16
 800e2dc:	af00      	add	r7, sp, #0
 800e2de:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e2e0:	687b      	ldr	r3, [r7, #4]
 800e2e2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e2e6:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800e2e8:	68fb      	ldr	r3, [r7, #12]
 800e2ea:	2b00      	cmp	r3, #0
 800e2ec:	d101      	bne.n	800e2f2 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800e2ee:	2303      	movs	r3, #3
 800e2f0:	e01b      	b.n	800e32a <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800e2f2:	687b      	ldr	r3, [r7, #4]
 800e2f4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e2f8:	2b00      	cmp	r3, #0
 800e2fa:	d015      	beq.n	800e328 <USBD_CDC_EP0_RxReady+0x50>
 800e2fc:	68fb      	ldr	r3, [r7, #12]
 800e2fe:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800e302:	2bff      	cmp	r3, #255	; 0xff
 800e304:	d010      	beq.n	800e328 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800e306:	687b      	ldr	r3, [r7, #4]
 800e308:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e30c:	689b      	ldr	r3, [r3, #8]
 800e30e:	68fa      	ldr	r2, [r7, #12]
 800e310:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800e314:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800e316:	68fa      	ldr	r2, [r7, #12]
 800e318:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800e31c:	b292      	uxth	r2, r2
 800e31e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800e320:	68fb      	ldr	r3, [r7, #12]
 800e322:	22ff      	movs	r2, #255	; 0xff
 800e324:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800e328:	2300      	movs	r3, #0
}
 800e32a:	4618      	mov	r0, r3
 800e32c:	3710      	adds	r7, #16
 800e32e:	46bd      	mov	sp, r7
 800e330:	bd80      	pop	{r7, pc}
	...

0800e334 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800e334:	b480      	push	{r7}
 800e336:	b083      	sub	sp, #12
 800e338:	af00      	add	r7, sp, #0
 800e33a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800e33c:	687b      	ldr	r3, [r7, #4]
 800e33e:	2243      	movs	r2, #67	; 0x43
 800e340:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800e342:	4b03      	ldr	r3, [pc, #12]	; (800e350 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800e344:	4618      	mov	r0, r3
 800e346:	370c      	adds	r7, #12
 800e348:	46bd      	mov	sp, r7
 800e34a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e34e:	4770      	bx	lr
 800e350:	20000094 	.word	0x20000094

0800e354 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800e354:	b480      	push	{r7}
 800e356:	b083      	sub	sp, #12
 800e358:	af00      	add	r7, sp, #0
 800e35a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800e35c:	687b      	ldr	r3, [r7, #4]
 800e35e:	2243      	movs	r2, #67	; 0x43
 800e360:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800e362:	4b03      	ldr	r3, [pc, #12]	; (800e370 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800e364:	4618      	mov	r0, r3
 800e366:	370c      	adds	r7, #12
 800e368:	46bd      	mov	sp, r7
 800e36a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e36e:	4770      	bx	lr
 800e370:	20000050 	.word	0x20000050

0800e374 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800e374:	b480      	push	{r7}
 800e376:	b083      	sub	sp, #12
 800e378:	af00      	add	r7, sp, #0
 800e37a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800e37c:	687b      	ldr	r3, [r7, #4]
 800e37e:	2243      	movs	r2, #67	; 0x43
 800e380:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800e382:	4b03      	ldr	r3, [pc, #12]	; (800e390 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800e384:	4618      	mov	r0, r3
 800e386:	370c      	adds	r7, #12
 800e388:	46bd      	mov	sp, r7
 800e38a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e38e:	4770      	bx	lr
 800e390:	200000d8 	.word	0x200000d8

0800e394 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800e394:	b480      	push	{r7}
 800e396:	b083      	sub	sp, #12
 800e398:	af00      	add	r7, sp, #0
 800e39a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	220a      	movs	r2, #10
 800e3a0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800e3a2:	4b03      	ldr	r3, [pc, #12]	; (800e3b0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800e3a4:	4618      	mov	r0, r3
 800e3a6:	370c      	adds	r7, #12
 800e3a8:	46bd      	mov	sp, r7
 800e3aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3ae:	4770      	bx	lr
 800e3b0:	2000000c 	.word	0x2000000c

0800e3b4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800e3b4:	b480      	push	{r7}
 800e3b6:	b083      	sub	sp, #12
 800e3b8:	af00      	add	r7, sp, #0
 800e3ba:	6078      	str	r0, [r7, #4]
 800e3bc:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800e3be:	683b      	ldr	r3, [r7, #0]
 800e3c0:	2b00      	cmp	r3, #0
 800e3c2:	d101      	bne.n	800e3c8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800e3c4:	2303      	movs	r3, #3
 800e3c6:	e004      	b.n	800e3d2 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800e3c8:	687b      	ldr	r3, [r7, #4]
 800e3ca:	683a      	ldr	r2, [r7, #0]
 800e3cc:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800e3d0:	2300      	movs	r3, #0
}
 800e3d2:	4618      	mov	r0, r3
 800e3d4:	370c      	adds	r7, #12
 800e3d6:	46bd      	mov	sp, r7
 800e3d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3dc:	4770      	bx	lr

0800e3de <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800e3de:	b480      	push	{r7}
 800e3e0:	b087      	sub	sp, #28
 800e3e2:	af00      	add	r7, sp, #0
 800e3e4:	60f8      	str	r0, [r7, #12]
 800e3e6:	60b9      	str	r1, [r7, #8]
 800e3e8:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e3ea:	68fb      	ldr	r3, [r7, #12]
 800e3ec:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e3f0:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800e3f2:	697b      	ldr	r3, [r7, #20]
 800e3f4:	2b00      	cmp	r3, #0
 800e3f6:	d101      	bne.n	800e3fc <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800e3f8:	2303      	movs	r3, #3
 800e3fa:	e008      	b.n	800e40e <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800e3fc:	697b      	ldr	r3, [r7, #20]
 800e3fe:	68ba      	ldr	r2, [r7, #8]
 800e400:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800e404:	697b      	ldr	r3, [r7, #20]
 800e406:	687a      	ldr	r2, [r7, #4]
 800e408:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800e40c:	2300      	movs	r3, #0
}
 800e40e:	4618      	mov	r0, r3
 800e410:	371c      	adds	r7, #28
 800e412:	46bd      	mov	sp, r7
 800e414:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e418:	4770      	bx	lr

0800e41a <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800e41a:	b480      	push	{r7}
 800e41c:	b085      	sub	sp, #20
 800e41e:	af00      	add	r7, sp, #0
 800e420:	6078      	str	r0, [r7, #4]
 800e422:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e424:	687b      	ldr	r3, [r7, #4]
 800e426:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e42a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800e42c:	68fb      	ldr	r3, [r7, #12]
 800e42e:	2b00      	cmp	r3, #0
 800e430:	d101      	bne.n	800e436 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800e432:	2303      	movs	r3, #3
 800e434:	e004      	b.n	800e440 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800e436:	68fb      	ldr	r3, [r7, #12]
 800e438:	683a      	ldr	r2, [r7, #0]
 800e43a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800e43e:	2300      	movs	r3, #0
}
 800e440:	4618      	mov	r0, r3
 800e442:	3714      	adds	r7, #20
 800e444:	46bd      	mov	sp, r7
 800e446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e44a:	4770      	bx	lr

0800e44c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800e44c:	b580      	push	{r7, lr}
 800e44e:	b084      	sub	sp, #16
 800e450:	af00      	add	r7, sp, #0
 800e452:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e454:	687b      	ldr	r3, [r7, #4]
 800e456:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e45a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800e45c:	687b      	ldr	r3, [r7, #4]
 800e45e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e462:	2b00      	cmp	r3, #0
 800e464:	d101      	bne.n	800e46a <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800e466:	2303      	movs	r3, #3
 800e468:	e016      	b.n	800e498 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e46a:	687b      	ldr	r3, [r7, #4]
 800e46c:	7c1b      	ldrb	r3, [r3, #16]
 800e46e:	2b00      	cmp	r3, #0
 800e470:	d109      	bne.n	800e486 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800e472:	68fb      	ldr	r3, [r7, #12]
 800e474:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800e478:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e47c:	2101      	movs	r1, #1
 800e47e:	6878      	ldr	r0, [r7, #4]
 800e480:	f003 ffbd 	bl	80123fe <USBD_LL_PrepareReceive>
 800e484:	e007      	b.n	800e496 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800e486:	68fb      	ldr	r3, [r7, #12]
 800e488:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800e48c:	2340      	movs	r3, #64	; 0x40
 800e48e:	2101      	movs	r1, #1
 800e490:	6878      	ldr	r0, [r7, #4]
 800e492:	f003 ffb4 	bl	80123fe <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800e496:	2300      	movs	r3, #0
}
 800e498:	4618      	mov	r0, r3
 800e49a:	3710      	adds	r7, #16
 800e49c:	46bd      	mov	sp, r7
 800e49e:	bd80      	pop	{r7, pc}

0800e4a0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800e4a0:	b580      	push	{r7, lr}
 800e4a2:	b086      	sub	sp, #24
 800e4a4:	af00      	add	r7, sp, #0
 800e4a6:	60f8      	str	r0, [r7, #12]
 800e4a8:	60b9      	str	r1, [r7, #8]
 800e4aa:	4613      	mov	r3, r2
 800e4ac:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800e4ae:	68fb      	ldr	r3, [r7, #12]
 800e4b0:	2b00      	cmp	r3, #0
 800e4b2:	d101      	bne.n	800e4b8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800e4b4:	2303      	movs	r3, #3
 800e4b6:	e01f      	b.n	800e4f8 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800e4b8:	68fb      	ldr	r3, [r7, #12]
 800e4ba:	2200      	movs	r2, #0
 800e4bc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800e4c0:	68fb      	ldr	r3, [r7, #12]
 800e4c2:	2200      	movs	r2, #0
 800e4c4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800e4c8:	68fb      	ldr	r3, [r7, #12]
 800e4ca:	2200      	movs	r2, #0
 800e4cc:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800e4d0:	68bb      	ldr	r3, [r7, #8]
 800e4d2:	2b00      	cmp	r3, #0
 800e4d4:	d003      	beq.n	800e4de <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800e4d6:	68fb      	ldr	r3, [r7, #12]
 800e4d8:	68ba      	ldr	r2, [r7, #8]
 800e4da:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800e4de:	68fb      	ldr	r3, [r7, #12]
 800e4e0:	2201      	movs	r2, #1
 800e4e2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800e4e6:	68fb      	ldr	r3, [r7, #12]
 800e4e8:	79fa      	ldrb	r2, [r7, #7]
 800e4ea:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800e4ec:	68f8      	ldr	r0, [r7, #12]
 800e4ee:	f003 fe1b 	bl	8012128 <USBD_LL_Init>
 800e4f2:	4603      	mov	r3, r0
 800e4f4:	75fb      	strb	r3, [r7, #23]

  return ret;
 800e4f6:	7dfb      	ldrb	r3, [r7, #23]
}
 800e4f8:	4618      	mov	r0, r3
 800e4fa:	3718      	adds	r7, #24
 800e4fc:	46bd      	mov	sp, r7
 800e4fe:	bd80      	pop	{r7, pc}

0800e500 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800e500:	b580      	push	{r7, lr}
 800e502:	b084      	sub	sp, #16
 800e504:	af00      	add	r7, sp, #0
 800e506:	6078      	str	r0, [r7, #4]
 800e508:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800e50a:	2300      	movs	r3, #0
 800e50c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800e50e:	683b      	ldr	r3, [r7, #0]
 800e510:	2b00      	cmp	r3, #0
 800e512:	d101      	bne.n	800e518 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800e514:	2303      	movs	r3, #3
 800e516:	e016      	b.n	800e546 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800e518:	687b      	ldr	r3, [r7, #4]
 800e51a:	683a      	ldr	r2, [r7, #0]
 800e51c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800e520:	687b      	ldr	r3, [r7, #4]
 800e522:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e528:	2b00      	cmp	r3, #0
 800e52a:	d00b      	beq.n	800e544 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800e52c:	687b      	ldr	r3, [r7, #4]
 800e52e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e532:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e534:	f107 020e 	add.w	r2, r7, #14
 800e538:	4610      	mov	r0, r2
 800e53a:	4798      	blx	r3
 800e53c:	4602      	mov	r2, r0
 800e53e:	687b      	ldr	r3, [r7, #4]
 800e540:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800e544:	2300      	movs	r3, #0
}
 800e546:	4618      	mov	r0, r3
 800e548:	3710      	adds	r7, #16
 800e54a:	46bd      	mov	sp, r7
 800e54c:	bd80      	pop	{r7, pc}

0800e54e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800e54e:	b580      	push	{r7, lr}
 800e550:	b082      	sub	sp, #8
 800e552:	af00      	add	r7, sp, #0
 800e554:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800e556:	6878      	ldr	r0, [r7, #4]
 800e558:	f003 fe46 	bl	80121e8 <USBD_LL_Start>
 800e55c:	4603      	mov	r3, r0
}
 800e55e:	4618      	mov	r0, r3
 800e560:	3708      	adds	r7, #8
 800e562:	46bd      	mov	sp, r7
 800e564:	bd80      	pop	{r7, pc}

0800e566 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800e566:	b480      	push	{r7}
 800e568:	b083      	sub	sp, #12
 800e56a:	af00      	add	r7, sp, #0
 800e56c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800e56e:	2300      	movs	r3, #0
}
 800e570:	4618      	mov	r0, r3
 800e572:	370c      	adds	r7, #12
 800e574:	46bd      	mov	sp, r7
 800e576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e57a:	4770      	bx	lr

0800e57c <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e57c:	b580      	push	{r7, lr}
 800e57e:	b084      	sub	sp, #16
 800e580:	af00      	add	r7, sp, #0
 800e582:	6078      	str	r0, [r7, #4]
 800e584:	460b      	mov	r3, r1
 800e586:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800e588:	2303      	movs	r3, #3
 800e58a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800e58c:	687b      	ldr	r3, [r7, #4]
 800e58e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e592:	2b00      	cmp	r3, #0
 800e594:	d009      	beq.n	800e5aa <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800e596:	687b      	ldr	r3, [r7, #4]
 800e598:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e59c:	681b      	ldr	r3, [r3, #0]
 800e59e:	78fa      	ldrb	r2, [r7, #3]
 800e5a0:	4611      	mov	r1, r2
 800e5a2:	6878      	ldr	r0, [r7, #4]
 800e5a4:	4798      	blx	r3
 800e5a6:	4603      	mov	r3, r0
 800e5a8:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800e5aa:	7bfb      	ldrb	r3, [r7, #15]
}
 800e5ac:	4618      	mov	r0, r3
 800e5ae:	3710      	adds	r7, #16
 800e5b0:	46bd      	mov	sp, r7
 800e5b2:	bd80      	pop	{r7, pc}

0800e5b4 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e5b4:	b580      	push	{r7, lr}
 800e5b6:	b082      	sub	sp, #8
 800e5b8:	af00      	add	r7, sp, #0
 800e5ba:	6078      	str	r0, [r7, #4]
 800e5bc:	460b      	mov	r3, r1
 800e5be:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800e5c0:	687b      	ldr	r3, [r7, #4]
 800e5c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e5c6:	2b00      	cmp	r3, #0
 800e5c8:	d007      	beq.n	800e5da <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800e5ca:	687b      	ldr	r3, [r7, #4]
 800e5cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e5d0:	685b      	ldr	r3, [r3, #4]
 800e5d2:	78fa      	ldrb	r2, [r7, #3]
 800e5d4:	4611      	mov	r1, r2
 800e5d6:	6878      	ldr	r0, [r7, #4]
 800e5d8:	4798      	blx	r3
  }

  return USBD_OK;
 800e5da:	2300      	movs	r3, #0
}
 800e5dc:	4618      	mov	r0, r3
 800e5de:	3708      	adds	r7, #8
 800e5e0:	46bd      	mov	sp, r7
 800e5e2:	bd80      	pop	{r7, pc}

0800e5e4 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800e5e4:	b580      	push	{r7, lr}
 800e5e6:	b084      	sub	sp, #16
 800e5e8:	af00      	add	r7, sp, #0
 800e5ea:	6078      	str	r0, [r7, #4]
 800e5ec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800e5ee:	687b      	ldr	r3, [r7, #4]
 800e5f0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800e5f4:	6839      	ldr	r1, [r7, #0]
 800e5f6:	4618      	mov	r0, r3
 800e5f8:	f000 ff46 	bl	800f488 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800e5fc:	687b      	ldr	r3, [r7, #4]
 800e5fe:	2201      	movs	r2, #1
 800e600:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800e604:	687b      	ldr	r3, [r7, #4]
 800e606:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800e60a:	461a      	mov	r2, r3
 800e60c:	687b      	ldr	r3, [r7, #4]
 800e60e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800e612:	687b      	ldr	r3, [r7, #4]
 800e614:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800e618:	f003 031f 	and.w	r3, r3, #31
 800e61c:	2b02      	cmp	r3, #2
 800e61e:	d01a      	beq.n	800e656 <USBD_LL_SetupStage+0x72>
 800e620:	2b02      	cmp	r3, #2
 800e622:	d822      	bhi.n	800e66a <USBD_LL_SetupStage+0x86>
 800e624:	2b00      	cmp	r3, #0
 800e626:	d002      	beq.n	800e62e <USBD_LL_SetupStage+0x4a>
 800e628:	2b01      	cmp	r3, #1
 800e62a:	d00a      	beq.n	800e642 <USBD_LL_SetupStage+0x5e>
 800e62c:	e01d      	b.n	800e66a <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800e62e:	687b      	ldr	r3, [r7, #4]
 800e630:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800e634:	4619      	mov	r1, r3
 800e636:	6878      	ldr	r0, [r7, #4]
 800e638:	f000 f9ee 	bl	800ea18 <USBD_StdDevReq>
 800e63c:	4603      	mov	r3, r0
 800e63e:	73fb      	strb	r3, [r7, #15]
      break;
 800e640:	e020      	b.n	800e684 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800e642:	687b      	ldr	r3, [r7, #4]
 800e644:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800e648:	4619      	mov	r1, r3
 800e64a:	6878      	ldr	r0, [r7, #4]
 800e64c:	f000 fa52 	bl	800eaf4 <USBD_StdItfReq>
 800e650:	4603      	mov	r3, r0
 800e652:	73fb      	strb	r3, [r7, #15]
      break;
 800e654:	e016      	b.n	800e684 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800e656:	687b      	ldr	r3, [r7, #4]
 800e658:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800e65c:	4619      	mov	r1, r3
 800e65e:	6878      	ldr	r0, [r7, #4]
 800e660:	f000 fa91 	bl	800eb86 <USBD_StdEPReq>
 800e664:	4603      	mov	r3, r0
 800e666:	73fb      	strb	r3, [r7, #15]
      break;
 800e668:	e00c      	b.n	800e684 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800e66a:	687b      	ldr	r3, [r7, #4]
 800e66c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800e670:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800e674:	b2db      	uxtb	r3, r3
 800e676:	4619      	mov	r1, r3
 800e678:	6878      	ldr	r0, [r7, #4]
 800e67a:	f003 fe15 	bl	80122a8 <USBD_LL_StallEP>
 800e67e:	4603      	mov	r3, r0
 800e680:	73fb      	strb	r3, [r7, #15]
      break;
 800e682:	bf00      	nop
  }

  return ret;
 800e684:	7bfb      	ldrb	r3, [r7, #15]
}
 800e686:	4618      	mov	r0, r3
 800e688:	3710      	adds	r7, #16
 800e68a:	46bd      	mov	sp, r7
 800e68c:	bd80      	pop	{r7, pc}

0800e68e <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800e68e:	b580      	push	{r7, lr}
 800e690:	b086      	sub	sp, #24
 800e692:	af00      	add	r7, sp, #0
 800e694:	60f8      	str	r0, [r7, #12]
 800e696:	460b      	mov	r3, r1
 800e698:	607a      	str	r2, [r7, #4]
 800e69a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800e69c:	7afb      	ldrb	r3, [r7, #11]
 800e69e:	2b00      	cmp	r3, #0
 800e6a0:	d138      	bne.n	800e714 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800e6a2:	68fb      	ldr	r3, [r7, #12]
 800e6a4:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800e6a8:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800e6aa:	68fb      	ldr	r3, [r7, #12]
 800e6ac:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800e6b0:	2b03      	cmp	r3, #3
 800e6b2:	d14a      	bne.n	800e74a <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800e6b4:	693b      	ldr	r3, [r7, #16]
 800e6b6:	689a      	ldr	r2, [r3, #8]
 800e6b8:	693b      	ldr	r3, [r7, #16]
 800e6ba:	68db      	ldr	r3, [r3, #12]
 800e6bc:	429a      	cmp	r2, r3
 800e6be:	d913      	bls.n	800e6e8 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800e6c0:	693b      	ldr	r3, [r7, #16]
 800e6c2:	689a      	ldr	r2, [r3, #8]
 800e6c4:	693b      	ldr	r3, [r7, #16]
 800e6c6:	68db      	ldr	r3, [r3, #12]
 800e6c8:	1ad2      	subs	r2, r2, r3
 800e6ca:	693b      	ldr	r3, [r7, #16]
 800e6cc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800e6ce:	693b      	ldr	r3, [r7, #16]
 800e6d0:	68da      	ldr	r2, [r3, #12]
 800e6d2:	693b      	ldr	r3, [r7, #16]
 800e6d4:	689b      	ldr	r3, [r3, #8]
 800e6d6:	4293      	cmp	r3, r2
 800e6d8:	bf28      	it	cs
 800e6da:	4613      	movcs	r3, r2
 800e6dc:	461a      	mov	r2, r3
 800e6de:	6879      	ldr	r1, [r7, #4]
 800e6e0:	68f8      	ldr	r0, [r7, #12]
 800e6e2:	f000 ffc5 	bl	800f670 <USBD_CtlContinueRx>
 800e6e6:	e030      	b.n	800e74a <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e6e8:	68fb      	ldr	r3, [r7, #12]
 800e6ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e6ee:	b2db      	uxtb	r3, r3
 800e6f0:	2b03      	cmp	r3, #3
 800e6f2:	d10b      	bne.n	800e70c <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800e6f4:	68fb      	ldr	r3, [r7, #12]
 800e6f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e6fa:	691b      	ldr	r3, [r3, #16]
 800e6fc:	2b00      	cmp	r3, #0
 800e6fe:	d005      	beq.n	800e70c <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800e700:	68fb      	ldr	r3, [r7, #12]
 800e702:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e706:	691b      	ldr	r3, [r3, #16]
 800e708:	68f8      	ldr	r0, [r7, #12]
 800e70a:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800e70c:	68f8      	ldr	r0, [r7, #12]
 800e70e:	f000 ffc0 	bl	800f692 <USBD_CtlSendStatus>
 800e712:	e01a      	b.n	800e74a <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e714:	68fb      	ldr	r3, [r7, #12]
 800e716:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e71a:	b2db      	uxtb	r3, r3
 800e71c:	2b03      	cmp	r3, #3
 800e71e:	d114      	bne.n	800e74a <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800e720:	68fb      	ldr	r3, [r7, #12]
 800e722:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e726:	699b      	ldr	r3, [r3, #24]
 800e728:	2b00      	cmp	r3, #0
 800e72a:	d00e      	beq.n	800e74a <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800e72c:	68fb      	ldr	r3, [r7, #12]
 800e72e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e732:	699b      	ldr	r3, [r3, #24]
 800e734:	7afa      	ldrb	r2, [r7, #11]
 800e736:	4611      	mov	r1, r2
 800e738:	68f8      	ldr	r0, [r7, #12]
 800e73a:	4798      	blx	r3
 800e73c:	4603      	mov	r3, r0
 800e73e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800e740:	7dfb      	ldrb	r3, [r7, #23]
 800e742:	2b00      	cmp	r3, #0
 800e744:	d001      	beq.n	800e74a <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800e746:	7dfb      	ldrb	r3, [r7, #23]
 800e748:	e000      	b.n	800e74c <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800e74a:	2300      	movs	r3, #0
}
 800e74c:	4618      	mov	r0, r3
 800e74e:	3718      	adds	r7, #24
 800e750:	46bd      	mov	sp, r7
 800e752:	bd80      	pop	{r7, pc}

0800e754 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800e754:	b580      	push	{r7, lr}
 800e756:	b086      	sub	sp, #24
 800e758:	af00      	add	r7, sp, #0
 800e75a:	60f8      	str	r0, [r7, #12]
 800e75c:	460b      	mov	r3, r1
 800e75e:	607a      	str	r2, [r7, #4]
 800e760:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800e762:	7afb      	ldrb	r3, [r7, #11]
 800e764:	2b00      	cmp	r3, #0
 800e766:	d16b      	bne.n	800e840 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800e768:	68fb      	ldr	r3, [r7, #12]
 800e76a:	3314      	adds	r3, #20
 800e76c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800e76e:	68fb      	ldr	r3, [r7, #12]
 800e770:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800e774:	2b02      	cmp	r3, #2
 800e776:	d156      	bne.n	800e826 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800e778:	693b      	ldr	r3, [r7, #16]
 800e77a:	689a      	ldr	r2, [r3, #8]
 800e77c:	693b      	ldr	r3, [r7, #16]
 800e77e:	68db      	ldr	r3, [r3, #12]
 800e780:	429a      	cmp	r2, r3
 800e782:	d914      	bls.n	800e7ae <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800e784:	693b      	ldr	r3, [r7, #16]
 800e786:	689a      	ldr	r2, [r3, #8]
 800e788:	693b      	ldr	r3, [r7, #16]
 800e78a:	68db      	ldr	r3, [r3, #12]
 800e78c:	1ad2      	subs	r2, r2, r3
 800e78e:	693b      	ldr	r3, [r7, #16]
 800e790:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800e792:	693b      	ldr	r3, [r7, #16]
 800e794:	689b      	ldr	r3, [r3, #8]
 800e796:	461a      	mov	r2, r3
 800e798:	6879      	ldr	r1, [r7, #4]
 800e79a:	68f8      	ldr	r0, [r7, #12]
 800e79c:	f000 ff3a 	bl	800f614 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e7a0:	2300      	movs	r3, #0
 800e7a2:	2200      	movs	r2, #0
 800e7a4:	2100      	movs	r1, #0
 800e7a6:	68f8      	ldr	r0, [r7, #12]
 800e7a8:	f003 fe29 	bl	80123fe <USBD_LL_PrepareReceive>
 800e7ac:	e03b      	b.n	800e826 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800e7ae:	693b      	ldr	r3, [r7, #16]
 800e7b0:	68da      	ldr	r2, [r3, #12]
 800e7b2:	693b      	ldr	r3, [r7, #16]
 800e7b4:	689b      	ldr	r3, [r3, #8]
 800e7b6:	429a      	cmp	r2, r3
 800e7b8:	d11c      	bne.n	800e7f4 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800e7ba:	693b      	ldr	r3, [r7, #16]
 800e7bc:	685a      	ldr	r2, [r3, #4]
 800e7be:	693b      	ldr	r3, [r7, #16]
 800e7c0:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800e7c2:	429a      	cmp	r2, r3
 800e7c4:	d316      	bcc.n	800e7f4 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800e7c6:	693b      	ldr	r3, [r7, #16]
 800e7c8:	685a      	ldr	r2, [r3, #4]
 800e7ca:	68fb      	ldr	r3, [r7, #12]
 800e7cc:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800e7d0:	429a      	cmp	r2, r3
 800e7d2:	d20f      	bcs.n	800e7f4 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800e7d4:	2200      	movs	r2, #0
 800e7d6:	2100      	movs	r1, #0
 800e7d8:	68f8      	ldr	r0, [r7, #12]
 800e7da:	f000 ff1b 	bl	800f614 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800e7de:	68fb      	ldr	r3, [r7, #12]
 800e7e0:	2200      	movs	r2, #0
 800e7e2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e7e6:	2300      	movs	r3, #0
 800e7e8:	2200      	movs	r2, #0
 800e7ea:	2100      	movs	r1, #0
 800e7ec:	68f8      	ldr	r0, [r7, #12]
 800e7ee:	f003 fe06 	bl	80123fe <USBD_LL_PrepareReceive>
 800e7f2:	e018      	b.n	800e826 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e7f4:	68fb      	ldr	r3, [r7, #12]
 800e7f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e7fa:	b2db      	uxtb	r3, r3
 800e7fc:	2b03      	cmp	r3, #3
 800e7fe:	d10b      	bne.n	800e818 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800e800:	68fb      	ldr	r3, [r7, #12]
 800e802:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e806:	68db      	ldr	r3, [r3, #12]
 800e808:	2b00      	cmp	r3, #0
 800e80a:	d005      	beq.n	800e818 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800e80c:	68fb      	ldr	r3, [r7, #12]
 800e80e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e812:	68db      	ldr	r3, [r3, #12]
 800e814:	68f8      	ldr	r0, [r7, #12]
 800e816:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800e818:	2180      	movs	r1, #128	; 0x80
 800e81a:	68f8      	ldr	r0, [r7, #12]
 800e81c:	f003 fd44 	bl	80122a8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800e820:	68f8      	ldr	r0, [r7, #12]
 800e822:	f000 ff49 	bl	800f6b8 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800e826:	68fb      	ldr	r3, [r7, #12]
 800e828:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800e82c:	2b01      	cmp	r3, #1
 800e82e:	d122      	bne.n	800e876 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800e830:	68f8      	ldr	r0, [r7, #12]
 800e832:	f7ff fe98 	bl	800e566 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800e836:	68fb      	ldr	r3, [r7, #12]
 800e838:	2200      	movs	r2, #0
 800e83a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800e83e:	e01a      	b.n	800e876 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e840:	68fb      	ldr	r3, [r7, #12]
 800e842:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e846:	b2db      	uxtb	r3, r3
 800e848:	2b03      	cmp	r3, #3
 800e84a:	d114      	bne.n	800e876 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800e84c:	68fb      	ldr	r3, [r7, #12]
 800e84e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e852:	695b      	ldr	r3, [r3, #20]
 800e854:	2b00      	cmp	r3, #0
 800e856:	d00e      	beq.n	800e876 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800e858:	68fb      	ldr	r3, [r7, #12]
 800e85a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e85e:	695b      	ldr	r3, [r3, #20]
 800e860:	7afa      	ldrb	r2, [r7, #11]
 800e862:	4611      	mov	r1, r2
 800e864:	68f8      	ldr	r0, [r7, #12]
 800e866:	4798      	blx	r3
 800e868:	4603      	mov	r3, r0
 800e86a:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800e86c:	7dfb      	ldrb	r3, [r7, #23]
 800e86e:	2b00      	cmp	r3, #0
 800e870:	d001      	beq.n	800e876 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800e872:	7dfb      	ldrb	r3, [r7, #23]
 800e874:	e000      	b.n	800e878 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800e876:	2300      	movs	r3, #0
}
 800e878:	4618      	mov	r0, r3
 800e87a:	3718      	adds	r7, #24
 800e87c:	46bd      	mov	sp, r7
 800e87e:	bd80      	pop	{r7, pc}

0800e880 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800e880:	b580      	push	{r7, lr}
 800e882:	b082      	sub	sp, #8
 800e884:	af00      	add	r7, sp, #0
 800e886:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800e888:	687b      	ldr	r3, [r7, #4]
 800e88a:	2201      	movs	r2, #1
 800e88c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800e890:	687b      	ldr	r3, [r7, #4]
 800e892:	2200      	movs	r2, #0
 800e894:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800e898:	687b      	ldr	r3, [r7, #4]
 800e89a:	2200      	movs	r2, #0
 800e89c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800e89e:	687b      	ldr	r3, [r7, #4]
 800e8a0:	2200      	movs	r2, #0
 800e8a2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800e8a6:	687b      	ldr	r3, [r7, #4]
 800e8a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e8ac:	2b00      	cmp	r3, #0
 800e8ae:	d101      	bne.n	800e8b4 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800e8b0:	2303      	movs	r3, #3
 800e8b2:	e02f      	b.n	800e914 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800e8b4:	687b      	ldr	r3, [r7, #4]
 800e8b6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e8ba:	2b00      	cmp	r3, #0
 800e8bc:	d00f      	beq.n	800e8de <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800e8be:	687b      	ldr	r3, [r7, #4]
 800e8c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e8c4:	685b      	ldr	r3, [r3, #4]
 800e8c6:	2b00      	cmp	r3, #0
 800e8c8:	d009      	beq.n	800e8de <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800e8ca:	687b      	ldr	r3, [r7, #4]
 800e8cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e8d0:	685b      	ldr	r3, [r3, #4]
 800e8d2:	687a      	ldr	r2, [r7, #4]
 800e8d4:	6852      	ldr	r2, [r2, #4]
 800e8d6:	b2d2      	uxtb	r2, r2
 800e8d8:	4611      	mov	r1, r2
 800e8da:	6878      	ldr	r0, [r7, #4]
 800e8dc:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800e8de:	2340      	movs	r3, #64	; 0x40
 800e8e0:	2200      	movs	r2, #0
 800e8e2:	2100      	movs	r1, #0
 800e8e4:	6878      	ldr	r0, [r7, #4]
 800e8e6:	f003 fc9a 	bl	801221e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800e8ea:	687b      	ldr	r3, [r7, #4]
 800e8ec:	2201      	movs	r2, #1
 800e8ee:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800e8f2:	687b      	ldr	r3, [r7, #4]
 800e8f4:	2240      	movs	r2, #64	; 0x40
 800e8f6:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800e8fa:	2340      	movs	r3, #64	; 0x40
 800e8fc:	2200      	movs	r2, #0
 800e8fe:	2180      	movs	r1, #128	; 0x80
 800e900:	6878      	ldr	r0, [r7, #4]
 800e902:	f003 fc8c 	bl	801221e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800e906:	687b      	ldr	r3, [r7, #4]
 800e908:	2201      	movs	r2, #1
 800e90a:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800e90c:	687b      	ldr	r3, [r7, #4]
 800e90e:	2240      	movs	r2, #64	; 0x40
 800e910:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800e912:	2300      	movs	r3, #0
}
 800e914:	4618      	mov	r0, r3
 800e916:	3708      	adds	r7, #8
 800e918:	46bd      	mov	sp, r7
 800e91a:	bd80      	pop	{r7, pc}

0800e91c <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800e91c:	b480      	push	{r7}
 800e91e:	b083      	sub	sp, #12
 800e920:	af00      	add	r7, sp, #0
 800e922:	6078      	str	r0, [r7, #4]
 800e924:	460b      	mov	r3, r1
 800e926:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800e928:	687b      	ldr	r3, [r7, #4]
 800e92a:	78fa      	ldrb	r2, [r7, #3]
 800e92c:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800e92e:	2300      	movs	r3, #0
}
 800e930:	4618      	mov	r0, r3
 800e932:	370c      	adds	r7, #12
 800e934:	46bd      	mov	sp, r7
 800e936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e93a:	4770      	bx	lr

0800e93c <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800e93c:	b480      	push	{r7}
 800e93e:	b083      	sub	sp, #12
 800e940:	af00      	add	r7, sp, #0
 800e942:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800e944:	687b      	ldr	r3, [r7, #4]
 800e946:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e94a:	b2da      	uxtb	r2, r3
 800e94c:	687b      	ldr	r3, [r7, #4]
 800e94e:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800e952:	687b      	ldr	r3, [r7, #4]
 800e954:	2204      	movs	r2, #4
 800e956:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800e95a:	2300      	movs	r3, #0
}
 800e95c:	4618      	mov	r0, r3
 800e95e:	370c      	adds	r7, #12
 800e960:	46bd      	mov	sp, r7
 800e962:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e966:	4770      	bx	lr

0800e968 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800e968:	b480      	push	{r7}
 800e96a:	b083      	sub	sp, #12
 800e96c:	af00      	add	r7, sp, #0
 800e96e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800e970:	687b      	ldr	r3, [r7, #4]
 800e972:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e976:	b2db      	uxtb	r3, r3
 800e978:	2b04      	cmp	r3, #4
 800e97a:	d106      	bne.n	800e98a <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800e97c:	687b      	ldr	r3, [r7, #4]
 800e97e:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800e982:	b2da      	uxtb	r2, r3
 800e984:	687b      	ldr	r3, [r7, #4]
 800e986:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800e98a:	2300      	movs	r3, #0
}
 800e98c:	4618      	mov	r0, r3
 800e98e:	370c      	adds	r7, #12
 800e990:	46bd      	mov	sp, r7
 800e992:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e996:	4770      	bx	lr

0800e998 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800e998:	b580      	push	{r7, lr}
 800e99a:	b082      	sub	sp, #8
 800e99c:	af00      	add	r7, sp, #0
 800e99e:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800e9a0:	687b      	ldr	r3, [r7, #4]
 800e9a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e9a6:	2b00      	cmp	r3, #0
 800e9a8:	d101      	bne.n	800e9ae <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800e9aa:	2303      	movs	r3, #3
 800e9ac:	e012      	b.n	800e9d4 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e9ae:	687b      	ldr	r3, [r7, #4]
 800e9b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e9b4:	b2db      	uxtb	r3, r3
 800e9b6:	2b03      	cmp	r3, #3
 800e9b8:	d10b      	bne.n	800e9d2 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800e9ba:	687b      	ldr	r3, [r7, #4]
 800e9bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e9c0:	69db      	ldr	r3, [r3, #28]
 800e9c2:	2b00      	cmp	r3, #0
 800e9c4:	d005      	beq.n	800e9d2 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800e9c6:	687b      	ldr	r3, [r7, #4]
 800e9c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e9cc:	69db      	ldr	r3, [r3, #28]
 800e9ce:	6878      	ldr	r0, [r7, #4]
 800e9d0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800e9d2:	2300      	movs	r3, #0
}
 800e9d4:	4618      	mov	r0, r3
 800e9d6:	3708      	adds	r7, #8
 800e9d8:	46bd      	mov	sp, r7
 800e9da:	bd80      	pop	{r7, pc}

0800e9dc <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800e9dc:	b480      	push	{r7}
 800e9de:	b087      	sub	sp, #28
 800e9e0:	af00      	add	r7, sp, #0
 800e9e2:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800e9e4:	687b      	ldr	r3, [r7, #4]
 800e9e6:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800e9e8:	697b      	ldr	r3, [r7, #20]
 800e9ea:	781b      	ldrb	r3, [r3, #0]
 800e9ec:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800e9ee:	697b      	ldr	r3, [r7, #20]
 800e9f0:	3301      	adds	r3, #1
 800e9f2:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800e9f4:	697b      	ldr	r3, [r7, #20]
 800e9f6:	781b      	ldrb	r3, [r3, #0]
 800e9f8:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800e9fa:	8a3b      	ldrh	r3, [r7, #16]
 800e9fc:	021b      	lsls	r3, r3, #8
 800e9fe:	b21a      	sxth	r2, r3
 800ea00:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800ea04:	4313      	orrs	r3, r2
 800ea06:	b21b      	sxth	r3, r3
 800ea08:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800ea0a:	89fb      	ldrh	r3, [r7, #14]
}
 800ea0c:	4618      	mov	r0, r3
 800ea0e:	371c      	adds	r7, #28
 800ea10:	46bd      	mov	sp, r7
 800ea12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea16:	4770      	bx	lr

0800ea18 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ea18:	b580      	push	{r7, lr}
 800ea1a:	b084      	sub	sp, #16
 800ea1c:	af00      	add	r7, sp, #0
 800ea1e:	6078      	str	r0, [r7, #4]
 800ea20:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ea22:	2300      	movs	r3, #0
 800ea24:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ea26:	683b      	ldr	r3, [r7, #0]
 800ea28:	781b      	ldrb	r3, [r3, #0]
 800ea2a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ea2e:	2b40      	cmp	r3, #64	; 0x40
 800ea30:	d005      	beq.n	800ea3e <USBD_StdDevReq+0x26>
 800ea32:	2b40      	cmp	r3, #64	; 0x40
 800ea34:	d853      	bhi.n	800eade <USBD_StdDevReq+0xc6>
 800ea36:	2b00      	cmp	r3, #0
 800ea38:	d00b      	beq.n	800ea52 <USBD_StdDevReq+0x3a>
 800ea3a:	2b20      	cmp	r3, #32
 800ea3c:	d14f      	bne.n	800eade <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ea3e:	687b      	ldr	r3, [r7, #4]
 800ea40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ea44:	689b      	ldr	r3, [r3, #8]
 800ea46:	6839      	ldr	r1, [r7, #0]
 800ea48:	6878      	ldr	r0, [r7, #4]
 800ea4a:	4798      	blx	r3
 800ea4c:	4603      	mov	r3, r0
 800ea4e:	73fb      	strb	r3, [r7, #15]
      break;
 800ea50:	e04a      	b.n	800eae8 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ea52:	683b      	ldr	r3, [r7, #0]
 800ea54:	785b      	ldrb	r3, [r3, #1]
 800ea56:	2b09      	cmp	r3, #9
 800ea58:	d83b      	bhi.n	800ead2 <USBD_StdDevReq+0xba>
 800ea5a:	a201      	add	r2, pc, #4	; (adr r2, 800ea60 <USBD_StdDevReq+0x48>)
 800ea5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ea60:	0800eab5 	.word	0x0800eab5
 800ea64:	0800eac9 	.word	0x0800eac9
 800ea68:	0800ead3 	.word	0x0800ead3
 800ea6c:	0800eabf 	.word	0x0800eabf
 800ea70:	0800ead3 	.word	0x0800ead3
 800ea74:	0800ea93 	.word	0x0800ea93
 800ea78:	0800ea89 	.word	0x0800ea89
 800ea7c:	0800ead3 	.word	0x0800ead3
 800ea80:	0800eaab 	.word	0x0800eaab
 800ea84:	0800ea9d 	.word	0x0800ea9d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800ea88:	6839      	ldr	r1, [r7, #0]
 800ea8a:	6878      	ldr	r0, [r7, #4]
 800ea8c:	f000 f9de 	bl	800ee4c <USBD_GetDescriptor>
          break;
 800ea90:	e024      	b.n	800eadc <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800ea92:	6839      	ldr	r1, [r7, #0]
 800ea94:	6878      	ldr	r0, [r7, #4]
 800ea96:	f000 fb6d 	bl	800f174 <USBD_SetAddress>
          break;
 800ea9a:	e01f      	b.n	800eadc <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800ea9c:	6839      	ldr	r1, [r7, #0]
 800ea9e:	6878      	ldr	r0, [r7, #4]
 800eaa0:	f000 fbac 	bl	800f1fc <USBD_SetConfig>
 800eaa4:	4603      	mov	r3, r0
 800eaa6:	73fb      	strb	r3, [r7, #15]
          break;
 800eaa8:	e018      	b.n	800eadc <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800eaaa:	6839      	ldr	r1, [r7, #0]
 800eaac:	6878      	ldr	r0, [r7, #4]
 800eaae:	f000 fc4b 	bl	800f348 <USBD_GetConfig>
          break;
 800eab2:	e013      	b.n	800eadc <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800eab4:	6839      	ldr	r1, [r7, #0]
 800eab6:	6878      	ldr	r0, [r7, #4]
 800eab8:	f000 fc7c 	bl	800f3b4 <USBD_GetStatus>
          break;
 800eabc:	e00e      	b.n	800eadc <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800eabe:	6839      	ldr	r1, [r7, #0]
 800eac0:	6878      	ldr	r0, [r7, #4]
 800eac2:	f000 fcab 	bl	800f41c <USBD_SetFeature>
          break;
 800eac6:	e009      	b.n	800eadc <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800eac8:	6839      	ldr	r1, [r7, #0]
 800eaca:	6878      	ldr	r0, [r7, #4]
 800eacc:	f000 fcba 	bl	800f444 <USBD_ClrFeature>
          break;
 800ead0:	e004      	b.n	800eadc <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800ead2:	6839      	ldr	r1, [r7, #0]
 800ead4:	6878      	ldr	r0, [r7, #4]
 800ead6:	f000 fd11 	bl	800f4fc <USBD_CtlError>
          break;
 800eada:	bf00      	nop
      }
      break;
 800eadc:	e004      	b.n	800eae8 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800eade:	6839      	ldr	r1, [r7, #0]
 800eae0:	6878      	ldr	r0, [r7, #4]
 800eae2:	f000 fd0b 	bl	800f4fc <USBD_CtlError>
      break;
 800eae6:	bf00      	nop
  }

  return ret;
 800eae8:	7bfb      	ldrb	r3, [r7, #15]
}
 800eaea:	4618      	mov	r0, r3
 800eaec:	3710      	adds	r7, #16
 800eaee:	46bd      	mov	sp, r7
 800eaf0:	bd80      	pop	{r7, pc}
 800eaf2:	bf00      	nop

0800eaf4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800eaf4:	b580      	push	{r7, lr}
 800eaf6:	b084      	sub	sp, #16
 800eaf8:	af00      	add	r7, sp, #0
 800eafa:	6078      	str	r0, [r7, #4]
 800eafc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800eafe:	2300      	movs	r3, #0
 800eb00:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800eb02:	683b      	ldr	r3, [r7, #0]
 800eb04:	781b      	ldrb	r3, [r3, #0]
 800eb06:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800eb0a:	2b40      	cmp	r3, #64	; 0x40
 800eb0c:	d005      	beq.n	800eb1a <USBD_StdItfReq+0x26>
 800eb0e:	2b40      	cmp	r3, #64	; 0x40
 800eb10:	d82f      	bhi.n	800eb72 <USBD_StdItfReq+0x7e>
 800eb12:	2b00      	cmp	r3, #0
 800eb14:	d001      	beq.n	800eb1a <USBD_StdItfReq+0x26>
 800eb16:	2b20      	cmp	r3, #32
 800eb18:	d12b      	bne.n	800eb72 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800eb1a:	687b      	ldr	r3, [r7, #4]
 800eb1c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800eb20:	b2db      	uxtb	r3, r3
 800eb22:	3b01      	subs	r3, #1
 800eb24:	2b02      	cmp	r3, #2
 800eb26:	d81d      	bhi.n	800eb64 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800eb28:	683b      	ldr	r3, [r7, #0]
 800eb2a:	889b      	ldrh	r3, [r3, #4]
 800eb2c:	b2db      	uxtb	r3, r3
 800eb2e:	2b01      	cmp	r3, #1
 800eb30:	d813      	bhi.n	800eb5a <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800eb32:	687b      	ldr	r3, [r7, #4]
 800eb34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800eb38:	689b      	ldr	r3, [r3, #8]
 800eb3a:	6839      	ldr	r1, [r7, #0]
 800eb3c:	6878      	ldr	r0, [r7, #4]
 800eb3e:	4798      	blx	r3
 800eb40:	4603      	mov	r3, r0
 800eb42:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800eb44:	683b      	ldr	r3, [r7, #0]
 800eb46:	88db      	ldrh	r3, [r3, #6]
 800eb48:	2b00      	cmp	r3, #0
 800eb4a:	d110      	bne.n	800eb6e <USBD_StdItfReq+0x7a>
 800eb4c:	7bfb      	ldrb	r3, [r7, #15]
 800eb4e:	2b00      	cmp	r3, #0
 800eb50:	d10d      	bne.n	800eb6e <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800eb52:	6878      	ldr	r0, [r7, #4]
 800eb54:	f000 fd9d 	bl	800f692 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800eb58:	e009      	b.n	800eb6e <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800eb5a:	6839      	ldr	r1, [r7, #0]
 800eb5c:	6878      	ldr	r0, [r7, #4]
 800eb5e:	f000 fccd 	bl	800f4fc <USBD_CtlError>
          break;
 800eb62:	e004      	b.n	800eb6e <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800eb64:	6839      	ldr	r1, [r7, #0]
 800eb66:	6878      	ldr	r0, [r7, #4]
 800eb68:	f000 fcc8 	bl	800f4fc <USBD_CtlError>
          break;
 800eb6c:	e000      	b.n	800eb70 <USBD_StdItfReq+0x7c>
          break;
 800eb6e:	bf00      	nop
      }
      break;
 800eb70:	e004      	b.n	800eb7c <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800eb72:	6839      	ldr	r1, [r7, #0]
 800eb74:	6878      	ldr	r0, [r7, #4]
 800eb76:	f000 fcc1 	bl	800f4fc <USBD_CtlError>
      break;
 800eb7a:	bf00      	nop
  }

  return ret;
 800eb7c:	7bfb      	ldrb	r3, [r7, #15]
}
 800eb7e:	4618      	mov	r0, r3
 800eb80:	3710      	adds	r7, #16
 800eb82:	46bd      	mov	sp, r7
 800eb84:	bd80      	pop	{r7, pc}

0800eb86 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800eb86:	b580      	push	{r7, lr}
 800eb88:	b084      	sub	sp, #16
 800eb8a:	af00      	add	r7, sp, #0
 800eb8c:	6078      	str	r0, [r7, #4]
 800eb8e:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800eb90:	2300      	movs	r3, #0
 800eb92:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800eb94:	683b      	ldr	r3, [r7, #0]
 800eb96:	889b      	ldrh	r3, [r3, #4]
 800eb98:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800eb9a:	683b      	ldr	r3, [r7, #0]
 800eb9c:	781b      	ldrb	r3, [r3, #0]
 800eb9e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800eba2:	2b40      	cmp	r3, #64	; 0x40
 800eba4:	d007      	beq.n	800ebb6 <USBD_StdEPReq+0x30>
 800eba6:	2b40      	cmp	r3, #64	; 0x40
 800eba8:	f200 8145 	bhi.w	800ee36 <USBD_StdEPReq+0x2b0>
 800ebac:	2b00      	cmp	r3, #0
 800ebae:	d00c      	beq.n	800ebca <USBD_StdEPReq+0x44>
 800ebb0:	2b20      	cmp	r3, #32
 800ebb2:	f040 8140 	bne.w	800ee36 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ebb6:	687b      	ldr	r3, [r7, #4]
 800ebb8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ebbc:	689b      	ldr	r3, [r3, #8]
 800ebbe:	6839      	ldr	r1, [r7, #0]
 800ebc0:	6878      	ldr	r0, [r7, #4]
 800ebc2:	4798      	blx	r3
 800ebc4:	4603      	mov	r3, r0
 800ebc6:	73fb      	strb	r3, [r7, #15]
      break;
 800ebc8:	e13a      	b.n	800ee40 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ebca:	683b      	ldr	r3, [r7, #0]
 800ebcc:	785b      	ldrb	r3, [r3, #1]
 800ebce:	2b03      	cmp	r3, #3
 800ebd0:	d007      	beq.n	800ebe2 <USBD_StdEPReq+0x5c>
 800ebd2:	2b03      	cmp	r3, #3
 800ebd4:	f300 8129 	bgt.w	800ee2a <USBD_StdEPReq+0x2a4>
 800ebd8:	2b00      	cmp	r3, #0
 800ebda:	d07f      	beq.n	800ecdc <USBD_StdEPReq+0x156>
 800ebdc:	2b01      	cmp	r3, #1
 800ebde:	d03c      	beq.n	800ec5a <USBD_StdEPReq+0xd4>
 800ebe0:	e123      	b.n	800ee2a <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800ebe2:	687b      	ldr	r3, [r7, #4]
 800ebe4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ebe8:	b2db      	uxtb	r3, r3
 800ebea:	2b02      	cmp	r3, #2
 800ebec:	d002      	beq.n	800ebf4 <USBD_StdEPReq+0x6e>
 800ebee:	2b03      	cmp	r3, #3
 800ebf0:	d016      	beq.n	800ec20 <USBD_StdEPReq+0x9a>
 800ebf2:	e02c      	b.n	800ec4e <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ebf4:	7bbb      	ldrb	r3, [r7, #14]
 800ebf6:	2b00      	cmp	r3, #0
 800ebf8:	d00d      	beq.n	800ec16 <USBD_StdEPReq+0x90>
 800ebfa:	7bbb      	ldrb	r3, [r7, #14]
 800ebfc:	2b80      	cmp	r3, #128	; 0x80
 800ebfe:	d00a      	beq.n	800ec16 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800ec00:	7bbb      	ldrb	r3, [r7, #14]
 800ec02:	4619      	mov	r1, r3
 800ec04:	6878      	ldr	r0, [r7, #4]
 800ec06:	f003 fb4f 	bl	80122a8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800ec0a:	2180      	movs	r1, #128	; 0x80
 800ec0c:	6878      	ldr	r0, [r7, #4]
 800ec0e:	f003 fb4b 	bl	80122a8 <USBD_LL_StallEP>
 800ec12:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800ec14:	e020      	b.n	800ec58 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800ec16:	6839      	ldr	r1, [r7, #0]
 800ec18:	6878      	ldr	r0, [r7, #4]
 800ec1a:	f000 fc6f 	bl	800f4fc <USBD_CtlError>
              break;
 800ec1e:	e01b      	b.n	800ec58 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800ec20:	683b      	ldr	r3, [r7, #0]
 800ec22:	885b      	ldrh	r3, [r3, #2]
 800ec24:	2b00      	cmp	r3, #0
 800ec26:	d10e      	bne.n	800ec46 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800ec28:	7bbb      	ldrb	r3, [r7, #14]
 800ec2a:	2b00      	cmp	r3, #0
 800ec2c:	d00b      	beq.n	800ec46 <USBD_StdEPReq+0xc0>
 800ec2e:	7bbb      	ldrb	r3, [r7, #14]
 800ec30:	2b80      	cmp	r3, #128	; 0x80
 800ec32:	d008      	beq.n	800ec46 <USBD_StdEPReq+0xc0>
 800ec34:	683b      	ldr	r3, [r7, #0]
 800ec36:	88db      	ldrh	r3, [r3, #6]
 800ec38:	2b00      	cmp	r3, #0
 800ec3a:	d104      	bne.n	800ec46 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800ec3c:	7bbb      	ldrb	r3, [r7, #14]
 800ec3e:	4619      	mov	r1, r3
 800ec40:	6878      	ldr	r0, [r7, #4]
 800ec42:	f003 fb31 	bl	80122a8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800ec46:	6878      	ldr	r0, [r7, #4]
 800ec48:	f000 fd23 	bl	800f692 <USBD_CtlSendStatus>

              break;
 800ec4c:	e004      	b.n	800ec58 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800ec4e:	6839      	ldr	r1, [r7, #0]
 800ec50:	6878      	ldr	r0, [r7, #4]
 800ec52:	f000 fc53 	bl	800f4fc <USBD_CtlError>
              break;
 800ec56:	bf00      	nop
          }
          break;
 800ec58:	e0ec      	b.n	800ee34 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800ec5a:	687b      	ldr	r3, [r7, #4]
 800ec5c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ec60:	b2db      	uxtb	r3, r3
 800ec62:	2b02      	cmp	r3, #2
 800ec64:	d002      	beq.n	800ec6c <USBD_StdEPReq+0xe6>
 800ec66:	2b03      	cmp	r3, #3
 800ec68:	d016      	beq.n	800ec98 <USBD_StdEPReq+0x112>
 800ec6a:	e030      	b.n	800ecce <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ec6c:	7bbb      	ldrb	r3, [r7, #14]
 800ec6e:	2b00      	cmp	r3, #0
 800ec70:	d00d      	beq.n	800ec8e <USBD_StdEPReq+0x108>
 800ec72:	7bbb      	ldrb	r3, [r7, #14]
 800ec74:	2b80      	cmp	r3, #128	; 0x80
 800ec76:	d00a      	beq.n	800ec8e <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800ec78:	7bbb      	ldrb	r3, [r7, #14]
 800ec7a:	4619      	mov	r1, r3
 800ec7c:	6878      	ldr	r0, [r7, #4]
 800ec7e:	f003 fb13 	bl	80122a8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800ec82:	2180      	movs	r1, #128	; 0x80
 800ec84:	6878      	ldr	r0, [r7, #4]
 800ec86:	f003 fb0f 	bl	80122a8 <USBD_LL_StallEP>
 800ec8a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800ec8c:	e025      	b.n	800ecda <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800ec8e:	6839      	ldr	r1, [r7, #0]
 800ec90:	6878      	ldr	r0, [r7, #4]
 800ec92:	f000 fc33 	bl	800f4fc <USBD_CtlError>
              break;
 800ec96:	e020      	b.n	800ecda <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800ec98:	683b      	ldr	r3, [r7, #0]
 800ec9a:	885b      	ldrh	r3, [r3, #2]
 800ec9c:	2b00      	cmp	r3, #0
 800ec9e:	d11b      	bne.n	800ecd8 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800eca0:	7bbb      	ldrb	r3, [r7, #14]
 800eca2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800eca6:	2b00      	cmp	r3, #0
 800eca8:	d004      	beq.n	800ecb4 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800ecaa:	7bbb      	ldrb	r3, [r7, #14]
 800ecac:	4619      	mov	r1, r3
 800ecae:	6878      	ldr	r0, [r7, #4]
 800ecb0:	f003 fb19 	bl	80122e6 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800ecb4:	6878      	ldr	r0, [r7, #4]
 800ecb6:	f000 fcec 	bl	800f692 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ecba:	687b      	ldr	r3, [r7, #4]
 800ecbc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ecc0:	689b      	ldr	r3, [r3, #8]
 800ecc2:	6839      	ldr	r1, [r7, #0]
 800ecc4:	6878      	ldr	r0, [r7, #4]
 800ecc6:	4798      	blx	r3
 800ecc8:	4603      	mov	r3, r0
 800ecca:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800eccc:	e004      	b.n	800ecd8 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800ecce:	6839      	ldr	r1, [r7, #0]
 800ecd0:	6878      	ldr	r0, [r7, #4]
 800ecd2:	f000 fc13 	bl	800f4fc <USBD_CtlError>
              break;
 800ecd6:	e000      	b.n	800ecda <USBD_StdEPReq+0x154>
              break;
 800ecd8:	bf00      	nop
          }
          break;
 800ecda:	e0ab      	b.n	800ee34 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800ecdc:	687b      	ldr	r3, [r7, #4]
 800ecde:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ece2:	b2db      	uxtb	r3, r3
 800ece4:	2b02      	cmp	r3, #2
 800ece6:	d002      	beq.n	800ecee <USBD_StdEPReq+0x168>
 800ece8:	2b03      	cmp	r3, #3
 800ecea:	d032      	beq.n	800ed52 <USBD_StdEPReq+0x1cc>
 800ecec:	e097      	b.n	800ee1e <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ecee:	7bbb      	ldrb	r3, [r7, #14]
 800ecf0:	2b00      	cmp	r3, #0
 800ecf2:	d007      	beq.n	800ed04 <USBD_StdEPReq+0x17e>
 800ecf4:	7bbb      	ldrb	r3, [r7, #14]
 800ecf6:	2b80      	cmp	r3, #128	; 0x80
 800ecf8:	d004      	beq.n	800ed04 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800ecfa:	6839      	ldr	r1, [r7, #0]
 800ecfc:	6878      	ldr	r0, [r7, #4]
 800ecfe:	f000 fbfd 	bl	800f4fc <USBD_CtlError>
                break;
 800ed02:	e091      	b.n	800ee28 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ed04:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ed08:	2b00      	cmp	r3, #0
 800ed0a:	da0b      	bge.n	800ed24 <USBD_StdEPReq+0x19e>
 800ed0c:	7bbb      	ldrb	r3, [r7, #14]
 800ed0e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ed12:	4613      	mov	r3, r2
 800ed14:	009b      	lsls	r3, r3, #2
 800ed16:	4413      	add	r3, r2
 800ed18:	009b      	lsls	r3, r3, #2
 800ed1a:	3310      	adds	r3, #16
 800ed1c:	687a      	ldr	r2, [r7, #4]
 800ed1e:	4413      	add	r3, r2
 800ed20:	3304      	adds	r3, #4
 800ed22:	e00b      	b.n	800ed3c <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ed24:	7bbb      	ldrb	r3, [r7, #14]
 800ed26:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ed2a:	4613      	mov	r3, r2
 800ed2c:	009b      	lsls	r3, r3, #2
 800ed2e:	4413      	add	r3, r2
 800ed30:	009b      	lsls	r3, r3, #2
 800ed32:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800ed36:	687a      	ldr	r2, [r7, #4]
 800ed38:	4413      	add	r3, r2
 800ed3a:	3304      	adds	r3, #4
 800ed3c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800ed3e:	68bb      	ldr	r3, [r7, #8]
 800ed40:	2200      	movs	r2, #0
 800ed42:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800ed44:	68bb      	ldr	r3, [r7, #8]
 800ed46:	2202      	movs	r2, #2
 800ed48:	4619      	mov	r1, r3
 800ed4a:	6878      	ldr	r0, [r7, #4]
 800ed4c:	f000 fc47 	bl	800f5de <USBD_CtlSendData>
              break;
 800ed50:	e06a      	b.n	800ee28 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800ed52:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ed56:	2b00      	cmp	r3, #0
 800ed58:	da11      	bge.n	800ed7e <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800ed5a:	7bbb      	ldrb	r3, [r7, #14]
 800ed5c:	f003 020f 	and.w	r2, r3, #15
 800ed60:	6879      	ldr	r1, [r7, #4]
 800ed62:	4613      	mov	r3, r2
 800ed64:	009b      	lsls	r3, r3, #2
 800ed66:	4413      	add	r3, r2
 800ed68:	009b      	lsls	r3, r3, #2
 800ed6a:	440b      	add	r3, r1
 800ed6c:	3324      	adds	r3, #36	; 0x24
 800ed6e:	881b      	ldrh	r3, [r3, #0]
 800ed70:	2b00      	cmp	r3, #0
 800ed72:	d117      	bne.n	800eda4 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800ed74:	6839      	ldr	r1, [r7, #0]
 800ed76:	6878      	ldr	r0, [r7, #4]
 800ed78:	f000 fbc0 	bl	800f4fc <USBD_CtlError>
                  break;
 800ed7c:	e054      	b.n	800ee28 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800ed7e:	7bbb      	ldrb	r3, [r7, #14]
 800ed80:	f003 020f 	and.w	r2, r3, #15
 800ed84:	6879      	ldr	r1, [r7, #4]
 800ed86:	4613      	mov	r3, r2
 800ed88:	009b      	lsls	r3, r3, #2
 800ed8a:	4413      	add	r3, r2
 800ed8c:	009b      	lsls	r3, r3, #2
 800ed8e:	440b      	add	r3, r1
 800ed90:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800ed94:	881b      	ldrh	r3, [r3, #0]
 800ed96:	2b00      	cmp	r3, #0
 800ed98:	d104      	bne.n	800eda4 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800ed9a:	6839      	ldr	r1, [r7, #0]
 800ed9c:	6878      	ldr	r0, [r7, #4]
 800ed9e:	f000 fbad 	bl	800f4fc <USBD_CtlError>
                  break;
 800eda2:	e041      	b.n	800ee28 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800eda4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800eda8:	2b00      	cmp	r3, #0
 800edaa:	da0b      	bge.n	800edc4 <USBD_StdEPReq+0x23e>
 800edac:	7bbb      	ldrb	r3, [r7, #14]
 800edae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800edb2:	4613      	mov	r3, r2
 800edb4:	009b      	lsls	r3, r3, #2
 800edb6:	4413      	add	r3, r2
 800edb8:	009b      	lsls	r3, r3, #2
 800edba:	3310      	adds	r3, #16
 800edbc:	687a      	ldr	r2, [r7, #4]
 800edbe:	4413      	add	r3, r2
 800edc0:	3304      	adds	r3, #4
 800edc2:	e00b      	b.n	800eddc <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800edc4:	7bbb      	ldrb	r3, [r7, #14]
 800edc6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800edca:	4613      	mov	r3, r2
 800edcc:	009b      	lsls	r3, r3, #2
 800edce:	4413      	add	r3, r2
 800edd0:	009b      	lsls	r3, r3, #2
 800edd2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800edd6:	687a      	ldr	r2, [r7, #4]
 800edd8:	4413      	add	r3, r2
 800edda:	3304      	adds	r3, #4
 800eddc:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800edde:	7bbb      	ldrb	r3, [r7, #14]
 800ede0:	2b00      	cmp	r3, #0
 800ede2:	d002      	beq.n	800edea <USBD_StdEPReq+0x264>
 800ede4:	7bbb      	ldrb	r3, [r7, #14]
 800ede6:	2b80      	cmp	r3, #128	; 0x80
 800ede8:	d103      	bne.n	800edf2 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800edea:	68bb      	ldr	r3, [r7, #8]
 800edec:	2200      	movs	r2, #0
 800edee:	601a      	str	r2, [r3, #0]
 800edf0:	e00e      	b.n	800ee10 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800edf2:	7bbb      	ldrb	r3, [r7, #14]
 800edf4:	4619      	mov	r1, r3
 800edf6:	6878      	ldr	r0, [r7, #4]
 800edf8:	f003 fa94 	bl	8012324 <USBD_LL_IsStallEP>
 800edfc:	4603      	mov	r3, r0
 800edfe:	2b00      	cmp	r3, #0
 800ee00:	d003      	beq.n	800ee0a <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800ee02:	68bb      	ldr	r3, [r7, #8]
 800ee04:	2201      	movs	r2, #1
 800ee06:	601a      	str	r2, [r3, #0]
 800ee08:	e002      	b.n	800ee10 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800ee0a:	68bb      	ldr	r3, [r7, #8]
 800ee0c:	2200      	movs	r2, #0
 800ee0e:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800ee10:	68bb      	ldr	r3, [r7, #8]
 800ee12:	2202      	movs	r2, #2
 800ee14:	4619      	mov	r1, r3
 800ee16:	6878      	ldr	r0, [r7, #4]
 800ee18:	f000 fbe1 	bl	800f5de <USBD_CtlSendData>
              break;
 800ee1c:	e004      	b.n	800ee28 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800ee1e:	6839      	ldr	r1, [r7, #0]
 800ee20:	6878      	ldr	r0, [r7, #4]
 800ee22:	f000 fb6b 	bl	800f4fc <USBD_CtlError>
              break;
 800ee26:	bf00      	nop
          }
          break;
 800ee28:	e004      	b.n	800ee34 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800ee2a:	6839      	ldr	r1, [r7, #0]
 800ee2c:	6878      	ldr	r0, [r7, #4]
 800ee2e:	f000 fb65 	bl	800f4fc <USBD_CtlError>
          break;
 800ee32:	bf00      	nop
      }
      break;
 800ee34:	e004      	b.n	800ee40 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800ee36:	6839      	ldr	r1, [r7, #0]
 800ee38:	6878      	ldr	r0, [r7, #4]
 800ee3a:	f000 fb5f 	bl	800f4fc <USBD_CtlError>
      break;
 800ee3e:	bf00      	nop
  }

  return ret;
 800ee40:	7bfb      	ldrb	r3, [r7, #15]
}
 800ee42:	4618      	mov	r0, r3
 800ee44:	3710      	adds	r7, #16
 800ee46:	46bd      	mov	sp, r7
 800ee48:	bd80      	pop	{r7, pc}
	...

0800ee4c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ee4c:	b580      	push	{r7, lr}
 800ee4e:	b084      	sub	sp, #16
 800ee50:	af00      	add	r7, sp, #0
 800ee52:	6078      	str	r0, [r7, #4]
 800ee54:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800ee56:	2300      	movs	r3, #0
 800ee58:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800ee5a:	2300      	movs	r3, #0
 800ee5c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800ee5e:	2300      	movs	r3, #0
 800ee60:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800ee62:	683b      	ldr	r3, [r7, #0]
 800ee64:	885b      	ldrh	r3, [r3, #2]
 800ee66:	0a1b      	lsrs	r3, r3, #8
 800ee68:	b29b      	uxth	r3, r3
 800ee6a:	3b01      	subs	r3, #1
 800ee6c:	2b0e      	cmp	r3, #14
 800ee6e:	f200 8152 	bhi.w	800f116 <USBD_GetDescriptor+0x2ca>
 800ee72:	a201      	add	r2, pc, #4	; (adr r2, 800ee78 <USBD_GetDescriptor+0x2c>)
 800ee74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ee78:	0800eee9 	.word	0x0800eee9
 800ee7c:	0800ef01 	.word	0x0800ef01
 800ee80:	0800ef41 	.word	0x0800ef41
 800ee84:	0800f117 	.word	0x0800f117
 800ee88:	0800f117 	.word	0x0800f117
 800ee8c:	0800f0b7 	.word	0x0800f0b7
 800ee90:	0800f0e3 	.word	0x0800f0e3
 800ee94:	0800f117 	.word	0x0800f117
 800ee98:	0800f117 	.word	0x0800f117
 800ee9c:	0800f117 	.word	0x0800f117
 800eea0:	0800f117 	.word	0x0800f117
 800eea4:	0800f117 	.word	0x0800f117
 800eea8:	0800f117 	.word	0x0800f117
 800eeac:	0800f117 	.word	0x0800f117
 800eeb0:	0800eeb5 	.word	0x0800eeb5
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800eeb4:	687b      	ldr	r3, [r7, #4]
 800eeb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800eeba:	69db      	ldr	r3, [r3, #28]
 800eebc:	2b00      	cmp	r3, #0
 800eebe:	d00b      	beq.n	800eed8 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800eec0:	687b      	ldr	r3, [r7, #4]
 800eec2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800eec6:	69db      	ldr	r3, [r3, #28]
 800eec8:	687a      	ldr	r2, [r7, #4]
 800eeca:	7c12      	ldrb	r2, [r2, #16]
 800eecc:	f107 0108 	add.w	r1, r7, #8
 800eed0:	4610      	mov	r0, r2
 800eed2:	4798      	blx	r3
 800eed4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800eed6:	e126      	b.n	800f126 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800eed8:	6839      	ldr	r1, [r7, #0]
 800eeda:	6878      	ldr	r0, [r7, #4]
 800eedc:	f000 fb0e 	bl	800f4fc <USBD_CtlError>
        err++;
 800eee0:	7afb      	ldrb	r3, [r7, #11]
 800eee2:	3301      	adds	r3, #1
 800eee4:	72fb      	strb	r3, [r7, #11]
      break;
 800eee6:	e11e      	b.n	800f126 <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800eee8:	687b      	ldr	r3, [r7, #4]
 800eeea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800eeee:	681b      	ldr	r3, [r3, #0]
 800eef0:	687a      	ldr	r2, [r7, #4]
 800eef2:	7c12      	ldrb	r2, [r2, #16]
 800eef4:	f107 0108 	add.w	r1, r7, #8
 800eef8:	4610      	mov	r0, r2
 800eefa:	4798      	blx	r3
 800eefc:	60f8      	str	r0, [r7, #12]
      break;
 800eefe:	e112      	b.n	800f126 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ef00:	687b      	ldr	r3, [r7, #4]
 800ef02:	7c1b      	ldrb	r3, [r3, #16]
 800ef04:	2b00      	cmp	r3, #0
 800ef06:	d10d      	bne.n	800ef24 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800ef08:	687b      	ldr	r3, [r7, #4]
 800ef0a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ef0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ef10:	f107 0208 	add.w	r2, r7, #8
 800ef14:	4610      	mov	r0, r2
 800ef16:	4798      	blx	r3
 800ef18:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ef1a:	68fb      	ldr	r3, [r7, #12]
 800ef1c:	3301      	adds	r3, #1
 800ef1e:	2202      	movs	r2, #2
 800ef20:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800ef22:	e100      	b.n	800f126 <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800ef24:	687b      	ldr	r3, [r7, #4]
 800ef26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ef2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ef2c:	f107 0208 	add.w	r2, r7, #8
 800ef30:	4610      	mov	r0, r2
 800ef32:	4798      	blx	r3
 800ef34:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ef36:	68fb      	ldr	r3, [r7, #12]
 800ef38:	3301      	adds	r3, #1
 800ef3a:	2202      	movs	r2, #2
 800ef3c:	701a      	strb	r2, [r3, #0]
      break;
 800ef3e:	e0f2      	b.n	800f126 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800ef40:	683b      	ldr	r3, [r7, #0]
 800ef42:	885b      	ldrh	r3, [r3, #2]
 800ef44:	b2db      	uxtb	r3, r3
 800ef46:	2b05      	cmp	r3, #5
 800ef48:	f200 80ac 	bhi.w	800f0a4 <USBD_GetDescriptor+0x258>
 800ef4c:	a201      	add	r2, pc, #4	; (adr r2, 800ef54 <USBD_GetDescriptor+0x108>)
 800ef4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ef52:	bf00      	nop
 800ef54:	0800ef6d 	.word	0x0800ef6d
 800ef58:	0800efa1 	.word	0x0800efa1
 800ef5c:	0800efd5 	.word	0x0800efd5
 800ef60:	0800f009 	.word	0x0800f009
 800ef64:	0800f03d 	.word	0x0800f03d
 800ef68:	0800f071 	.word	0x0800f071
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800ef6c:	687b      	ldr	r3, [r7, #4]
 800ef6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ef72:	685b      	ldr	r3, [r3, #4]
 800ef74:	2b00      	cmp	r3, #0
 800ef76:	d00b      	beq.n	800ef90 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800ef78:	687b      	ldr	r3, [r7, #4]
 800ef7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ef7e:	685b      	ldr	r3, [r3, #4]
 800ef80:	687a      	ldr	r2, [r7, #4]
 800ef82:	7c12      	ldrb	r2, [r2, #16]
 800ef84:	f107 0108 	add.w	r1, r7, #8
 800ef88:	4610      	mov	r0, r2
 800ef8a:	4798      	blx	r3
 800ef8c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ef8e:	e091      	b.n	800f0b4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ef90:	6839      	ldr	r1, [r7, #0]
 800ef92:	6878      	ldr	r0, [r7, #4]
 800ef94:	f000 fab2 	bl	800f4fc <USBD_CtlError>
            err++;
 800ef98:	7afb      	ldrb	r3, [r7, #11]
 800ef9a:	3301      	adds	r3, #1
 800ef9c:	72fb      	strb	r3, [r7, #11]
          break;
 800ef9e:	e089      	b.n	800f0b4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800efa0:	687b      	ldr	r3, [r7, #4]
 800efa2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800efa6:	689b      	ldr	r3, [r3, #8]
 800efa8:	2b00      	cmp	r3, #0
 800efaa:	d00b      	beq.n	800efc4 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800efac:	687b      	ldr	r3, [r7, #4]
 800efae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800efb2:	689b      	ldr	r3, [r3, #8]
 800efb4:	687a      	ldr	r2, [r7, #4]
 800efb6:	7c12      	ldrb	r2, [r2, #16]
 800efb8:	f107 0108 	add.w	r1, r7, #8
 800efbc:	4610      	mov	r0, r2
 800efbe:	4798      	blx	r3
 800efc0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800efc2:	e077      	b.n	800f0b4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800efc4:	6839      	ldr	r1, [r7, #0]
 800efc6:	6878      	ldr	r0, [r7, #4]
 800efc8:	f000 fa98 	bl	800f4fc <USBD_CtlError>
            err++;
 800efcc:	7afb      	ldrb	r3, [r7, #11]
 800efce:	3301      	adds	r3, #1
 800efd0:	72fb      	strb	r3, [r7, #11]
          break;
 800efd2:	e06f      	b.n	800f0b4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800efd4:	687b      	ldr	r3, [r7, #4]
 800efd6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800efda:	68db      	ldr	r3, [r3, #12]
 800efdc:	2b00      	cmp	r3, #0
 800efde:	d00b      	beq.n	800eff8 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800efe0:	687b      	ldr	r3, [r7, #4]
 800efe2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800efe6:	68db      	ldr	r3, [r3, #12]
 800efe8:	687a      	ldr	r2, [r7, #4]
 800efea:	7c12      	ldrb	r2, [r2, #16]
 800efec:	f107 0108 	add.w	r1, r7, #8
 800eff0:	4610      	mov	r0, r2
 800eff2:	4798      	blx	r3
 800eff4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800eff6:	e05d      	b.n	800f0b4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800eff8:	6839      	ldr	r1, [r7, #0]
 800effa:	6878      	ldr	r0, [r7, #4]
 800effc:	f000 fa7e 	bl	800f4fc <USBD_CtlError>
            err++;
 800f000:	7afb      	ldrb	r3, [r7, #11]
 800f002:	3301      	adds	r3, #1
 800f004:	72fb      	strb	r3, [r7, #11]
          break;
 800f006:	e055      	b.n	800f0b4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800f008:	687b      	ldr	r3, [r7, #4]
 800f00a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f00e:	691b      	ldr	r3, [r3, #16]
 800f010:	2b00      	cmp	r3, #0
 800f012:	d00b      	beq.n	800f02c <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800f014:	687b      	ldr	r3, [r7, #4]
 800f016:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f01a:	691b      	ldr	r3, [r3, #16]
 800f01c:	687a      	ldr	r2, [r7, #4]
 800f01e:	7c12      	ldrb	r2, [r2, #16]
 800f020:	f107 0108 	add.w	r1, r7, #8
 800f024:	4610      	mov	r0, r2
 800f026:	4798      	blx	r3
 800f028:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f02a:	e043      	b.n	800f0b4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800f02c:	6839      	ldr	r1, [r7, #0]
 800f02e:	6878      	ldr	r0, [r7, #4]
 800f030:	f000 fa64 	bl	800f4fc <USBD_CtlError>
            err++;
 800f034:	7afb      	ldrb	r3, [r7, #11]
 800f036:	3301      	adds	r3, #1
 800f038:	72fb      	strb	r3, [r7, #11]
          break;
 800f03a:	e03b      	b.n	800f0b4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800f03c:	687b      	ldr	r3, [r7, #4]
 800f03e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f042:	695b      	ldr	r3, [r3, #20]
 800f044:	2b00      	cmp	r3, #0
 800f046:	d00b      	beq.n	800f060 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800f048:	687b      	ldr	r3, [r7, #4]
 800f04a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f04e:	695b      	ldr	r3, [r3, #20]
 800f050:	687a      	ldr	r2, [r7, #4]
 800f052:	7c12      	ldrb	r2, [r2, #16]
 800f054:	f107 0108 	add.w	r1, r7, #8
 800f058:	4610      	mov	r0, r2
 800f05a:	4798      	blx	r3
 800f05c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f05e:	e029      	b.n	800f0b4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800f060:	6839      	ldr	r1, [r7, #0]
 800f062:	6878      	ldr	r0, [r7, #4]
 800f064:	f000 fa4a 	bl	800f4fc <USBD_CtlError>
            err++;
 800f068:	7afb      	ldrb	r3, [r7, #11]
 800f06a:	3301      	adds	r3, #1
 800f06c:	72fb      	strb	r3, [r7, #11]
          break;
 800f06e:	e021      	b.n	800f0b4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800f070:	687b      	ldr	r3, [r7, #4]
 800f072:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f076:	699b      	ldr	r3, [r3, #24]
 800f078:	2b00      	cmp	r3, #0
 800f07a:	d00b      	beq.n	800f094 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800f07c:	687b      	ldr	r3, [r7, #4]
 800f07e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f082:	699b      	ldr	r3, [r3, #24]
 800f084:	687a      	ldr	r2, [r7, #4]
 800f086:	7c12      	ldrb	r2, [r2, #16]
 800f088:	f107 0108 	add.w	r1, r7, #8
 800f08c:	4610      	mov	r0, r2
 800f08e:	4798      	blx	r3
 800f090:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f092:	e00f      	b.n	800f0b4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800f094:	6839      	ldr	r1, [r7, #0]
 800f096:	6878      	ldr	r0, [r7, #4]
 800f098:	f000 fa30 	bl	800f4fc <USBD_CtlError>
            err++;
 800f09c:	7afb      	ldrb	r3, [r7, #11]
 800f09e:	3301      	adds	r3, #1
 800f0a0:	72fb      	strb	r3, [r7, #11]
          break;
 800f0a2:	e007      	b.n	800f0b4 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800f0a4:	6839      	ldr	r1, [r7, #0]
 800f0a6:	6878      	ldr	r0, [r7, #4]
 800f0a8:	f000 fa28 	bl	800f4fc <USBD_CtlError>
          err++;
 800f0ac:	7afb      	ldrb	r3, [r7, #11]
 800f0ae:	3301      	adds	r3, #1
 800f0b0:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800f0b2:	bf00      	nop
      }
      break;
 800f0b4:	e037      	b.n	800f126 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f0b6:	687b      	ldr	r3, [r7, #4]
 800f0b8:	7c1b      	ldrb	r3, [r3, #16]
 800f0ba:	2b00      	cmp	r3, #0
 800f0bc:	d109      	bne.n	800f0d2 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800f0be:	687b      	ldr	r3, [r7, #4]
 800f0c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f0c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f0c6:	f107 0208 	add.w	r2, r7, #8
 800f0ca:	4610      	mov	r0, r2
 800f0cc:	4798      	blx	r3
 800f0ce:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f0d0:	e029      	b.n	800f126 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800f0d2:	6839      	ldr	r1, [r7, #0]
 800f0d4:	6878      	ldr	r0, [r7, #4]
 800f0d6:	f000 fa11 	bl	800f4fc <USBD_CtlError>
        err++;
 800f0da:	7afb      	ldrb	r3, [r7, #11]
 800f0dc:	3301      	adds	r3, #1
 800f0de:	72fb      	strb	r3, [r7, #11]
      break;
 800f0e0:	e021      	b.n	800f126 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f0e2:	687b      	ldr	r3, [r7, #4]
 800f0e4:	7c1b      	ldrb	r3, [r3, #16]
 800f0e6:	2b00      	cmp	r3, #0
 800f0e8:	d10d      	bne.n	800f106 <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800f0ea:	687b      	ldr	r3, [r7, #4]
 800f0ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f0f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f0f2:	f107 0208 	add.w	r2, r7, #8
 800f0f6:	4610      	mov	r0, r2
 800f0f8:	4798      	blx	r3
 800f0fa:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800f0fc:	68fb      	ldr	r3, [r7, #12]
 800f0fe:	3301      	adds	r3, #1
 800f100:	2207      	movs	r2, #7
 800f102:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f104:	e00f      	b.n	800f126 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800f106:	6839      	ldr	r1, [r7, #0]
 800f108:	6878      	ldr	r0, [r7, #4]
 800f10a:	f000 f9f7 	bl	800f4fc <USBD_CtlError>
        err++;
 800f10e:	7afb      	ldrb	r3, [r7, #11]
 800f110:	3301      	adds	r3, #1
 800f112:	72fb      	strb	r3, [r7, #11]
      break;
 800f114:	e007      	b.n	800f126 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800f116:	6839      	ldr	r1, [r7, #0]
 800f118:	6878      	ldr	r0, [r7, #4]
 800f11a:	f000 f9ef 	bl	800f4fc <USBD_CtlError>
      err++;
 800f11e:	7afb      	ldrb	r3, [r7, #11]
 800f120:	3301      	adds	r3, #1
 800f122:	72fb      	strb	r3, [r7, #11]
      break;
 800f124:	bf00      	nop
  }

  if (err != 0U)
 800f126:	7afb      	ldrb	r3, [r7, #11]
 800f128:	2b00      	cmp	r3, #0
 800f12a:	d11e      	bne.n	800f16a <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800f12c:	683b      	ldr	r3, [r7, #0]
 800f12e:	88db      	ldrh	r3, [r3, #6]
 800f130:	2b00      	cmp	r3, #0
 800f132:	d016      	beq.n	800f162 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800f134:	893b      	ldrh	r3, [r7, #8]
 800f136:	2b00      	cmp	r3, #0
 800f138:	d00e      	beq.n	800f158 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800f13a:	683b      	ldr	r3, [r7, #0]
 800f13c:	88da      	ldrh	r2, [r3, #6]
 800f13e:	893b      	ldrh	r3, [r7, #8]
 800f140:	4293      	cmp	r3, r2
 800f142:	bf28      	it	cs
 800f144:	4613      	movcs	r3, r2
 800f146:	b29b      	uxth	r3, r3
 800f148:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800f14a:	893b      	ldrh	r3, [r7, #8]
 800f14c:	461a      	mov	r2, r3
 800f14e:	68f9      	ldr	r1, [r7, #12]
 800f150:	6878      	ldr	r0, [r7, #4]
 800f152:	f000 fa44 	bl	800f5de <USBD_CtlSendData>
 800f156:	e009      	b.n	800f16c <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800f158:	6839      	ldr	r1, [r7, #0]
 800f15a:	6878      	ldr	r0, [r7, #4]
 800f15c:	f000 f9ce 	bl	800f4fc <USBD_CtlError>
 800f160:	e004      	b.n	800f16c <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800f162:	6878      	ldr	r0, [r7, #4]
 800f164:	f000 fa95 	bl	800f692 <USBD_CtlSendStatus>
 800f168:	e000      	b.n	800f16c <USBD_GetDescriptor+0x320>
    return;
 800f16a:	bf00      	nop
  }
}
 800f16c:	3710      	adds	r7, #16
 800f16e:	46bd      	mov	sp, r7
 800f170:	bd80      	pop	{r7, pc}
 800f172:	bf00      	nop

0800f174 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f174:	b580      	push	{r7, lr}
 800f176:	b084      	sub	sp, #16
 800f178:	af00      	add	r7, sp, #0
 800f17a:	6078      	str	r0, [r7, #4]
 800f17c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800f17e:	683b      	ldr	r3, [r7, #0]
 800f180:	889b      	ldrh	r3, [r3, #4]
 800f182:	2b00      	cmp	r3, #0
 800f184:	d131      	bne.n	800f1ea <USBD_SetAddress+0x76>
 800f186:	683b      	ldr	r3, [r7, #0]
 800f188:	88db      	ldrh	r3, [r3, #6]
 800f18a:	2b00      	cmp	r3, #0
 800f18c:	d12d      	bne.n	800f1ea <USBD_SetAddress+0x76>
 800f18e:	683b      	ldr	r3, [r7, #0]
 800f190:	885b      	ldrh	r3, [r3, #2]
 800f192:	2b7f      	cmp	r3, #127	; 0x7f
 800f194:	d829      	bhi.n	800f1ea <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800f196:	683b      	ldr	r3, [r7, #0]
 800f198:	885b      	ldrh	r3, [r3, #2]
 800f19a:	b2db      	uxtb	r3, r3
 800f19c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f1a0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f1a2:	687b      	ldr	r3, [r7, #4]
 800f1a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f1a8:	b2db      	uxtb	r3, r3
 800f1aa:	2b03      	cmp	r3, #3
 800f1ac:	d104      	bne.n	800f1b8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800f1ae:	6839      	ldr	r1, [r7, #0]
 800f1b0:	6878      	ldr	r0, [r7, #4]
 800f1b2:	f000 f9a3 	bl	800f4fc <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f1b6:	e01d      	b.n	800f1f4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800f1b8:	687b      	ldr	r3, [r7, #4]
 800f1ba:	7bfa      	ldrb	r2, [r7, #15]
 800f1bc:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800f1c0:	7bfb      	ldrb	r3, [r7, #15]
 800f1c2:	4619      	mov	r1, r3
 800f1c4:	6878      	ldr	r0, [r7, #4]
 800f1c6:	f003 f8da 	bl	801237e <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800f1ca:	6878      	ldr	r0, [r7, #4]
 800f1cc:	f000 fa61 	bl	800f692 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800f1d0:	7bfb      	ldrb	r3, [r7, #15]
 800f1d2:	2b00      	cmp	r3, #0
 800f1d4:	d004      	beq.n	800f1e0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800f1d6:	687b      	ldr	r3, [r7, #4]
 800f1d8:	2202      	movs	r2, #2
 800f1da:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f1de:	e009      	b.n	800f1f4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800f1e0:	687b      	ldr	r3, [r7, #4]
 800f1e2:	2201      	movs	r2, #1
 800f1e4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f1e8:	e004      	b.n	800f1f4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800f1ea:	6839      	ldr	r1, [r7, #0]
 800f1ec:	6878      	ldr	r0, [r7, #4]
 800f1ee:	f000 f985 	bl	800f4fc <USBD_CtlError>
  }
}
 800f1f2:	bf00      	nop
 800f1f4:	bf00      	nop
 800f1f6:	3710      	adds	r7, #16
 800f1f8:	46bd      	mov	sp, r7
 800f1fa:	bd80      	pop	{r7, pc}

0800f1fc <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f1fc:	b580      	push	{r7, lr}
 800f1fe:	b084      	sub	sp, #16
 800f200:	af00      	add	r7, sp, #0
 800f202:	6078      	str	r0, [r7, #4]
 800f204:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f206:	2300      	movs	r3, #0
 800f208:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800f20a:	683b      	ldr	r3, [r7, #0]
 800f20c:	885b      	ldrh	r3, [r3, #2]
 800f20e:	b2da      	uxtb	r2, r3
 800f210:	4b4c      	ldr	r3, [pc, #304]	; (800f344 <USBD_SetConfig+0x148>)
 800f212:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800f214:	4b4b      	ldr	r3, [pc, #300]	; (800f344 <USBD_SetConfig+0x148>)
 800f216:	781b      	ldrb	r3, [r3, #0]
 800f218:	2b01      	cmp	r3, #1
 800f21a:	d905      	bls.n	800f228 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800f21c:	6839      	ldr	r1, [r7, #0]
 800f21e:	6878      	ldr	r0, [r7, #4]
 800f220:	f000 f96c 	bl	800f4fc <USBD_CtlError>
    return USBD_FAIL;
 800f224:	2303      	movs	r3, #3
 800f226:	e088      	b.n	800f33a <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800f228:	687b      	ldr	r3, [r7, #4]
 800f22a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f22e:	b2db      	uxtb	r3, r3
 800f230:	2b02      	cmp	r3, #2
 800f232:	d002      	beq.n	800f23a <USBD_SetConfig+0x3e>
 800f234:	2b03      	cmp	r3, #3
 800f236:	d025      	beq.n	800f284 <USBD_SetConfig+0x88>
 800f238:	e071      	b.n	800f31e <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800f23a:	4b42      	ldr	r3, [pc, #264]	; (800f344 <USBD_SetConfig+0x148>)
 800f23c:	781b      	ldrb	r3, [r3, #0]
 800f23e:	2b00      	cmp	r3, #0
 800f240:	d01c      	beq.n	800f27c <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800f242:	4b40      	ldr	r3, [pc, #256]	; (800f344 <USBD_SetConfig+0x148>)
 800f244:	781b      	ldrb	r3, [r3, #0]
 800f246:	461a      	mov	r2, r3
 800f248:	687b      	ldr	r3, [r7, #4]
 800f24a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800f24c:	4b3d      	ldr	r3, [pc, #244]	; (800f344 <USBD_SetConfig+0x148>)
 800f24e:	781b      	ldrb	r3, [r3, #0]
 800f250:	4619      	mov	r1, r3
 800f252:	6878      	ldr	r0, [r7, #4]
 800f254:	f7ff f992 	bl	800e57c <USBD_SetClassConfig>
 800f258:	4603      	mov	r3, r0
 800f25a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800f25c:	7bfb      	ldrb	r3, [r7, #15]
 800f25e:	2b00      	cmp	r3, #0
 800f260:	d004      	beq.n	800f26c <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800f262:	6839      	ldr	r1, [r7, #0]
 800f264:	6878      	ldr	r0, [r7, #4]
 800f266:	f000 f949 	bl	800f4fc <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800f26a:	e065      	b.n	800f338 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800f26c:	6878      	ldr	r0, [r7, #4]
 800f26e:	f000 fa10 	bl	800f692 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800f272:	687b      	ldr	r3, [r7, #4]
 800f274:	2203      	movs	r2, #3
 800f276:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800f27a:	e05d      	b.n	800f338 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800f27c:	6878      	ldr	r0, [r7, #4]
 800f27e:	f000 fa08 	bl	800f692 <USBD_CtlSendStatus>
      break;
 800f282:	e059      	b.n	800f338 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800f284:	4b2f      	ldr	r3, [pc, #188]	; (800f344 <USBD_SetConfig+0x148>)
 800f286:	781b      	ldrb	r3, [r3, #0]
 800f288:	2b00      	cmp	r3, #0
 800f28a:	d112      	bne.n	800f2b2 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800f28c:	687b      	ldr	r3, [r7, #4]
 800f28e:	2202      	movs	r2, #2
 800f290:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800f294:	4b2b      	ldr	r3, [pc, #172]	; (800f344 <USBD_SetConfig+0x148>)
 800f296:	781b      	ldrb	r3, [r3, #0]
 800f298:	461a      	mov	r2, r3
 800f29a:	687b      	ldr	r3, [r7, #4]
 800f29c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800f29e:	4b29      	ldr	r3, [pc, #164]	; (800f344 <USBD_SetConfig+0x148>)
 800f2a0:	781b      	ldrb	r3, [r3, #0]
 800f2a2:	4619      	mov	r1, r3
 800f2a4:	6878      	ldr	r0, [r7, #4]
 800f2a6:	f7ff f985 	bl	800e5b4 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800f2aa:	6878      	ldr	r0, [r7, #4]
 800f2ac:	f000 f9f1 	bl	800f692 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800f2b0:	e042      	b.n	800f338 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800f2b2:	4b24      	ldr	r3, [pc, #144]	; (800f344 <USBD_SetConfig+0x148>)
 800f2b4:	781b      	ldrb	r3, [r3, #0]
 800f2b6:	461a      	mov	r2, r3
 800f2b8:	687b      	ldr	r3, [r7, #4]
 800f2ba:	685b      	ldr	r3, [r3, #4]
 800f2bc:	429a      	cmp	r2, r3
 800f2be:	d02a      	beq.n	800f316 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800f2c0:	687b      	ldr	r3, [r7, #4]
 800f2c2:	685b      	ldr	r3, [r3, #4]
 800f2c4:	b2db      	uxtb	r3, r3
 800f2c6:	4619      	mov	r1, r3
 800f2c8:	6878      	ldr	r0, [r7, #4]
 800f2ca:	f7ff f973 	bl	800e5b4 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800f2ce:	4b1d      	ldr	r3, [pc, #116]	; (800f344 <USBD_SetConfig+0x148>)
 800f2d0:	781b      	ldrb	r3, [r3, #0]
 800f2d2:	461a      	mov	r2, r3
 800f2d4:	687b      	ldr	r3, [r7, #4]
 800f2d6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800f2d8:	4b1a      	ldr	r3, [pc, #104]	; (800f344 <USBD_SetConfig+0x148>)
 800f2da:	781b      	ldrb	r3, [r3, #0]
 800f2dc:	4619      	mov	r1, r3
 800f2de:	6878      	ldr	r0, [r7, #4]
 800f2e0:	f7ff f94c 	bl	800e57c <USBD_SetClassConfig>
 800f2e4:	4603      	mov	r3, r0
 800f2e6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800f2e8:	7bfb      	ldrb	r3, [r7, #15]
 800f2ea:	2b00      	cmp	r3, #0
 800f2ec:	d00f      	beq.n	800f30e <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800f2ee:	6839      	ldr	r1, [r7, #0]
 800f2f0:	6878      	ldr	r0, [r7, #4]
 800f2f2:	f000 f903 	bl	800f4fc <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800f2f6:	687b      	ldr	r3, [r7, #4]
 800f2f8:	685b      	ldr	r3, [r3, #4]
 800f2fa:	b2db      	uxtb	r3, r3
 800f2fc:	4619      	mov	r1, r3
 800f2fe:	6878      	ldr	r0, [r7, #4]
 800f300:	f7ff f958 	bl	800e5b4 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800f304:	687b      	ldr	r3, [r7, #4]
 800f306:	2202      	movs	r2, #2
 800f308:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800f30c:	e014      	b.n	800f338 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800f30e:	6878      	ldr	r0, [r7, #4]
 800f310:	f000 f9bf 	bl	800f692 <USBD_CtlSendStatus>
      break;
 800f314:	e010      	b.n	800f338 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800f316:	6878      	ldr	r0, [r7, #4]
 800f318:	f000 f9bb 	bl	800f692 <USBD_CtlSendStatus>
      break;
 800f31c:	e00c      	b.n	800f338 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800f31e:	6839      	ldr	r1, [r7, #0]
 800f320:	6878      	ldr	r0, [r7, #4]
 800f322:	f000 f8eb 	bl	800f4fc <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800f326:	4b07      	ldr	r3, [pc, #28]	; (800f344 <USBD_SetConfig+0x148>)
 800f328:	781b      	ldrb	r3, [r3, #0]
 800f32a:	4619      	mov	r1, r3
 800f32c:	6878      	ldr	r0, [r7, #4]
 800f32e:	f7ff f941 	bl	800e5b4 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800f332:	2303      	movs	r3, #3
 800f334:	73fb      	strb	r3, [r7, #15]
      break;
 800f336:	bf00      	nop
  }

  return ret;
 800f338:	7bfb      	ldrb	r3, [r7, #15]
}
 800f33a:	4618      	mov	r0, r3
 800f33c:	3710      	adds	r7, #16
 800f33e:	46bd      	mov	sp, r7
 800f340:	bd80      	pop	{r7, pc}
 800f342:	bf00      	nop
 800f344:	2000097c 	.word	0x2000097c

0800f348 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f348:	b580      	push	{r7, lr}
 800f34a:	b082      	sub	sp, #8
 800f34c:	af00      	add	r7, sp, #0
 800f34e:	6078      	str	r0, [r7, #4]
 800f350:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800f352:	683b      	ldr	r3, [r7, #0]
 800f354:	88db      	ldrh	r3, [r3, #6]
 800f356:	2b01      	cmp	r3, #1
 800f358:	d004      	beq.n	800f364 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800f35a:	6839      	ldr	r1, [r7, #0]
 800f35c:	6878      	ldr	r0, [r7, #4]
 800f35e:	f000 f8cd 	bl	800f4fc <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800f362:	e023      	b.n	800f3ac <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800f364:	687b      	ldr	r3, [r7, #4]
 800f366:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f36a:	b2db      	uxtb	r3, r3
 800f36c:	2b02      	cmp	r3, #2
 800f36e:	dc02      	bgt.n	800f376 <USBD_GetConfig+0x2e>
 800f370:	2b00      	cmp	r3, #0
 800f372:	dc03      	bgt.n	800f37c <USBD_GetConfig+0x34>
 800f374:	e015      	b.n	800f3a2 <USBD_GetConfig+0x5a>
 800f376:	2b03      	cmp	r3, #3
 800f378:	d00b      	beq.n	800f392 <USBD_GetConfig+0x4a>
 800f37a:	e012      	b.n	800f3a2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800f37c:	687b      	ldr	r3, [r7, #4]
 800f37e:	2200      	movs	r2, #0
 800f380:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800f382:	687b      	ldr	r3, [r7, #4]
 800f384:	3308      	adds	r3, #8
 800f386:	2201      	movs	r2, #1
 800f388:	4619      	mov	r1, r3
 800f38a:	6878      	ldr	r0, [r7, #4]
 800f38c:	f000 f927 	bl	800f5de <USBD_CtlSendData>
        break;
 800f390:	e00c      	b.n	800f3ac <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800f392:	687b      	ldr	r3, [r7, #4]
 800f394:	3304      	adds	r3, #4
 800f396:	2201      	movs	r2, #1
 800f398:	4619      	mov	r1, r3
 800f39a:	6878      	ldr	r0, [r7, #4]
 800f39c:	f000 f91f 	bl	800f5de <USBD_CtlSendData>
        break;
 800f3a0:	e004      	b.n	800f3ac <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800f3a2:	6839      	ldr	r1, [r7, #0]
 800f3a4:	6878      	ldr	r0, [r7, #4]
 800f3a6:	f000 f8a9 	bl	800f4fc <USBD_CtlError>
        break;
 800f3aa:	bf00      	nop
}
 800f3ac:	bf00      	nop
 800f3ae:	3708      	adds	r7, #8
 800f3b0:	46bd      	mov	sp, r7
 800f3b2:	bd80      	pop	{r7, pc}

0800f3b4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f3b4:	b580      	push	{r7, lr}
 800f3b6:	b082      	sub	sp, #8
 800f3b8:	af00      	add	r7, sp, #0
 800f3ba:	6078      	str	r0, [r7, #4]
 800f3bc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800f3be:	687b      	ldr	r3, [r7, #4]
 800f3c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f3c4:	b2db      	uxtb	r3, r3
 800f3c6:	3b01      	subs	r3, #1
 800f3c8:	2b02      	cmp	r3, #2
 800f3ca:	d81e      	bhi.n	800f40a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800f3cc:	683b      	ldr	r3, [r7, #0]
 800f3ce:	88db      	ldrh	r3, [r3, #6]
 800f3d0:	2b02      	cmp	r3, #2
 800f3d2:	d004      	beq.n	800f3de <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800f3d4:	6839      	ldr	r1, [r7, #0]
 800f3d6:	6878      	ldr	r0, [r7, #4]
 800f3d8:	f000 f890 	bl	800f4fc <USBD_CtlError>
        break;
 800f3dc:	e01a      	b.n	800f414 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800f3de:	687b      	ldr	r3, [r7, #4]
 800f3e0:	2201      	movs	r2, #1
 800f3e2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800f3e4:	687b      	ldr	r3, [r7, #4]
 800f3e6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800f3ea:	2b00      	cmp	r3, #0
 800f3ec:	d005      	beq.n	800f3fa <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800f3ee:	687b      	ldr	r3, [r7, #4]
 800f3f0:	68db      	ldr	r3, [r3, #12]
 800f3f2:	f043 0202 	orr.w	r2, r3, #2
 800f3f6:	687b      	ldr	r3, [r7, #4]
 800f3f8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800f3fa:	687b      	ldr	r3, [r7, #4]
 800f3fc:	330c      	adds	r3, #12
 800f3fe:	2202      	movs	r2, #2
 800f400:	4619      	mov	r1, r3
 800f402:	6878      	ldr	r0, [r7, #4]
 800f404:	f000 f8eb 	bl	800f5de <USBD_CtlSendData>
      break;
 800f408:	e004      	b.n	800f414 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800f40a:	6839      	ldr	r1, [r7, #0]
 800f40c:	6878      	ldr	r0, [r7, #4]
 800f40e:	f000 f875 	bl	800f4fc <USBD_CtlError>
      break;
 800f412:	bf00      	nop
  }
}
 800f414:	bf00      	nop
 800f416:	3708      	adds	r7, #8
 800f418:	46bd      	mov	sp, r7
 800f41a:	bd80      	pop	{r7, pc}

0800f41c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f41c:	b580      	push	{r7, lr}
 800f41e:	b082      	sub	sp, #8
 800f420:	af00      	add	r7, sp, #0
 800f422:	6078      	str	r0, [r7, #4]
 800f424:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800f426:	683b      	ldr	r3, [r7, #0]
 800f428:	885b      	ldrh	r3, [r3, #2]
 800f42a:	2b01      	cmp	r3, #1
 800f42c:	d106      	bne.n	800f43c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800f42e:	687b      	ldr	r3, [r7, #4]
 800f430:	2201      	movs	r2, #1
 800f432:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800f436:	6878      	ldr	r0, [r7, #4]
 800f438:	f000 f92b 	bl	800f692 <USBD_CtlSendStatus>
  }
}
 800f43c:	bf00      	nop
 800f43e:	3708      	adds	r7, #8
 800f440:	46bd      	mov	sp, r7
 800f442:	bd80      	pop	{r7, pc}

0800f444 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f444:	b580      	push	{r7, lr}
 800f446:	b082      	sub	sp, #8
 800f448:	af00      	add	r7, sp, #0
 800f44a:	6078      	str	r0, [r7, #4]
 800f44c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800f44e:	687b      	ldr	r3, [r7, #4]
 800f450:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f454:	b2db      	uxtb	r3, r3
 800f456:	3b01      	subs	r3, #1
 800f458:	2b02      	cmp	r3, #2
 800f45a:	d80b      	bhi.n	800f474 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800f45c:	683b      	ldr	r3, [r7, #0]
 800f45e:	885b      	ldrh	r3, [r3, #2]
 800f460:	2b01      	cmp	r3, #1
 800f462:	d10c      	bne.n	800f47e <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800f464:	687b      	ldr	r3, [r7, #4]
 800f466:	2200      	movs	r2, #0
 800f468:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800f46c:	6878      	ldr	r0, [r7, #4]
 800f46e:	f000 f910 	bl	800f692 <USBD_CtlSendStatus>
      }
      break;
 800f472:	e004      	b.n	800f47e <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800f474:	6839      	ldr	r1, [r7, #0]
 800f476:	6878      	ldr	r0, [r7, #4]
 800f478:	f000 f840 	bl	800f4fc <USBD_CtlError>
      break;
 800f47c:	e000      	b.n	800f480 <USBD_ClrFeature+0x3c>
      break;
 800f47e:	bf00      	nop
  }
}
 800f480:	bf00      	nop
 800f482:	3708      	adds	r7, #8
 800f484:	46bd      	mov	sp, r7
 800f486:	bd80      	pop	{r7, pc}

0800f488 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800f488:	b580      	push	{r7, lr}
 800f48a:	b084      	sub	sp, #16
 800f48c:	af00      	add	r7, sp, #0
 800f48e:	6078      	str	r0, [r7, #4]
 800f490:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800f492:	683b      	ldr	r3, [r7, #0]
 800f494:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800f496:	68fb      	ldr	r3, [r7, #12]
 800f498:	781a      	ldrb	r2, [r3, #0]
 800f49a:	687b      	ldr	r3, [r7, #4]
 800f49c:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800f49e:	68fb      	ldr	r3, [r7, #12]
 800f4a0:	3301      	adds	r3, #1
 800f4a2:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800f4a4:	68fb      	ldr	r3, [r7, #12]
 800f4a6:	781a      	ldrb	r2, [r3, #0]
 800f4a8:	687b      	ldr	r3, [r7, #4]
 800f4aa:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800f4ac:	68fb      	ldr	r3, [r7, #12]
 800f4ae:	3301      	adds	r3, #1
 800f4b0:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800f4b2:	68f8      	ldr	r0, [r7, #12]
 800f4b4:	f7ff fa92 	bl	800e9dc <SWAPBYTE>
 800f4b8:	4603      	mov	r3, r0
 800f4ba:	461a      	mov	r2, r3
 800f4bc:	687b      	ldr	r3, [r7, #4]
 800f4be:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800f4c0:	68fb      	ldr	r3, [r7, #12]
 800f4c2:	3301      	adds	r3, #1
 800f4c4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800f4c6:	68fb      	ldr	r3, [r7, #12]
 800f4c8:	3301      	adds	r3, #1
 800f4ca:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800f4cc:	68f8      	ldr	r0, [r7, #12]
 800f4ce:	f7ff fa85 	bl	800e9dc <SWAPBYTE>
 800f4d2:	4603      	mov	r3, r0
 800f4d4:	461a      	mov	r2, r3
 800f4d6:	687b      	ldr	r3, [r7, #4]
 800f4d8:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800f4da:	68fb      	ldr	r3, [r7, #12]
 800f4dc:	3301      	adds	r3, #1
 800f4de:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800f4e0:	68fb      	ldr	r3, [r7, #12]
 800f4e2:	3301      	adds	r3, #1
 800f4e4:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800f4e6:	68f8      	ldr	r0, [r7, #12]
 800f4e8:	f7ff fa78 	bl	800e9dc <SWAPBYTE>
 800f4ec:	4603      	mov	r3, r0
 800f4ee:	461a      	mov	r2, r3
 800f4f0:	687b      	ldr	r3, [r7, #4]
 800f4f2:	80da      	strh	r2, [r3, #6]
}
 800f4f4:	bf00      	nop
 800f4f6:	3710      	adds	r7, #16
 800f4f8:	46bd      	mov	sp, r7
 800f4fa:	bd80      	pop	{r7, pc}

0800f4fc <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f4fc:	b580      	push	{r7, lr}
 800f4fe:	b082      	sub	sp, #8
 800f500:	af00      	add	r7, sp, #0
 800f502:	6078      	str	r0, [r7, #4]
 800f504:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800f506:	2180      	movs	r1, #128	; 0x80
 800f508:	6878      	ldr	r0, [r7, #4]
 800f50a:	f002 fecd 	bl	80122a8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800f50e:	2100      	movs	r1, #0
 800f510:	6878      	ldr	r0, [r7, #4]
 800f512:	f002 fec9 	bl	80122a8 <USBD_LL_StallEP>
}
 800f516:	bf00      	nop
 800f518:	3708      	adds	r7, #8
 800f51a:	46bd      	mov	sp, r7
 800f51c:	bd80      	pop	{r7, pc}

0800f51e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800f51e:	b580      	push	{r7, lr}
 800f520:	b086      	sub	sp, #24
 800f522:	af00      	add	r7, sp, #0
 800f524:	60f8      	str	r0, [r7, #12]
 800f526:	60b9      	str	r1, [r7, #8]
 800f528:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800f52a:	2300      	movs	r3, #0
 800f52c:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800f52e:	68fb      	ldr	r3, [r7, #12]
 800f530:	2b00      	cmp	r3, #0
 800f532:	d036      	beq.n	800f5a2 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800f534:	68fb      	ldr	r3, [r7, #12]
 800f536:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800f538:	6938      	ldr	r0, [r7, #16]
 800f53a:	f000 f836 	bl	800f5aa <USBD_GetLen>
 800f53e:	4603      	mov	r3, r0
 800f540:	3301      	adds	r3, #1
 800f542:	b29b      	uxth	r3, r3
 800f544:	005b      	lsls	r3, r3, #1
 800f546:	b29a      	uxth	r2, r3
 800f548:	687b      	ldr	r3, [r7, #4]
 800f54a:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800f54c:	7dfb      	ldrb	r3, [r7, #23]
 800f54e:	68ba      	ldr	r2, [r7, #8]
 800f550:	4413      	add	r3, r2
 800f552:	687a      	ldr	r2, [r7, #4]
 800f554:	7812      	ldrb	r2, [r2, #0]
 800f556:	701a      	strb	r2, [r3, #0]
  idx++;
 800f558:	7dfb      	ldrb	r3, [r7, #23]
 800f55a:	3301      	adds	r3, #1
 800f55c:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800f55e:	7dfb      	ldrb	r3, [r7, #23]
 800f560:	68ba      	ldr	r2, [r7, #8]
 800f562:	4413      	add	r3, r2
 800f564:	2203      	movs	r2, #3
 800f566:	701a      	strb	r2, [r3, #0]
  idx++;
 800f568:	7dfb      	ldrb	r3, [r7, #23]
 800f56a:	3301      	adds	r3, #1
 800f56c:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800f56e:	e013      	b.n	800f598 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800f570:	7dfb      	ldrb	r3, [r7, #23]
 800f572:	68ba      	ldr	r2, [r7, #8]
 800f574:	4413      	add	r3, r2
 800f576:	693a      	ldr	r2, [r7, #16]
 800f578:	7812      	ldrb	r2, [r2, #0]
 800f57a:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800f57c:	693b      	ldr	r3, [r7, #16]
 800f57e:	3301      	adds	r3, #1
 800f580:	613b      	str	r3, [r7, #16]
    idx++;
 800f582:	7dfb      	ldrb	r3, [r7, #23]
 800f584:	3301      	adds	r3, #1
 800f586:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800f588:	7dfb      	ldrb	r3, [r7, #23]
 800f58a:	68ba      	ldr	r2, [r7, #8]
 800f58c:	4413      	add	r3, r2
 800f58e:	2200      	movs	r2, #0
 800f590:	701a      	strb	r2, [r3, #0]
    idx++;
 800f592:	7dfb      	ldrb	r3, [r7, #23]
 800f594:	3301      	adds	r3, #1
 800f596:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800f598:	693b      	ldr	r3, [r7, #16]
 800f59a:	781b      	ldrb	r3, [r3, #0]
 800f59c:	2b00      	cmp	r3, #0
 800f59e:	d1e7      	bne.n	800f570 <USBD_GetString+0x52>
 800f5a0:	e000      	b.n	800f5a4 <USBD_GetString+0x86>
    return;
 800f5a2:	bf00      	nop
  }
}
 800f5a4:	3718      	adds	r7, #24
 800f5a6:	46bd      	mov	sp, r7
 800f5a8:	bd80      	pop	{r7, pc}

0800f5aa <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800f5aa:	b480      	push	{r7}
 800f5ac:	b085      	sub	sp, #20
 800f5ae:	af00      	add	r7, sp, #0
 800f5b0:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800f5b2:	2300      	movs	r3, #0
 800f5b4:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800f5b6:	687b      	ldr	r3, [r7, #4]
 800f5b8:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800f5ba:	e005      	b.n	800f5c8 <USBD_GetLen+0x1e>
  {
    len++;
 800f5bc:	7bfb      	ldrb	r3, [r7, #15]
 800f5be:	3301      	adds	r3, #1
 800f5c0:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800f5c2:	68bb      	ldr	r3, [r7, #8]
 800f5c4:	3301      	adds	r3, #1
 800f5c6:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800f5c8:	68bb      	ldr	r3, [r7, #8]
 800f5ca:	781b      	ldrb	r3, [r3, #0]
 800f5cc:	2b00      	cmp	r3, #0
 800f5ce:	d1f5      	bne.n	800f5bc <USBD_GetLen+0x12>
  }

  return len;
 800f5d0:	7bfb      	ldrb	r3, [r7, #15]
}
 800f5d2:	4618      	mov	r0, r3
 800f5d4:	3714      	adds	r7, #20
 800f5d6:	46bd      	mov	sp, r7
 800f5d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5dc:	4770      	bx	lr

0800f5de <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800f5de:	b580      	push	{r7, lr}
 800f5e0:	b084      	sub	sp, #16
 800f5e2:	af00      	add	r7, sp, #0
 800f5e4:	60f8      	str	r0, [r7, #12]
 800f5e6:	60b9      	str	r1, [r7, #8]
 800f5e8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800f5ea:	68fb      	ldr	r3, [r7, #12]
 800f5ec:	2202      	movs	r2, #2
 800f5ee:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800f5f2:	68fb      	ldr	r3, [r7, #12]
 800f5f4:	687a      	ldr	r2, [r7, #4]
 800f5f6:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800f5f8:	68fb      	ldr	r3, [r7, #12]
 800f5fa:	687a      	ldr	r2, [r7, #4]
 800f5fc:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800f5fe:	687b      	ldr	r3, [r7, #4]
 800f600:	68ba      	ldr	r2, [r7, #8]
 800f602:	2100      	movs	r1, #0
 800f604:	68f8      	ldr	r0, [r7, #12]
 800f606:	f002 fed9 	bl	80123bc <USBD_LL_Transmit>

  return USBD_OK;
 800f60a:	2300      	movs	r3, #0
}
 800f60c:	4618      	mov	r0, r3
 800f60e:	3710      	adds	r7, #16
 800f610:	46bd      	mov	sp, r7
 800f612:	bd80      	pop	{r7, pc}

0800f614 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800f614:	b580      	push	{r7, lr}
 800f616:	b084      	sub	sp, #16
 800f618:	af00      	add	r7, sp, #0
 800f61a:	60f8      	str	r0, [r7, #12]
 800f61c:	60b9      	str	r1, [r7, #8]
 800f61e:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800f620:	687b      	ldr	r3, [r7, #4]
 800f622:	68ba      	ldr	r2, [r7, #8]
 800f624:	2100      	movs	r1, #0
 800f626:	68f8      	ldr	r0, [r7, #12]
 800f628:	f002 fec8 	bl	80123bc <USBD_LL_Transmit>

  return USBD_OK;
 800f62c:	2300      	movs	r3, #0
}
 800f62e:	4618      	mov	r0, r3
 800f630:	3710      	adds	r7, #16
 800f632:	46bd      	mov	sp, r7
 800f634:	bd80      	pop	{r7, pc}

0800f636 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800f636:	b580      	push	{r7, lr}
 800f638:	b084      	sub	sp, #16
 800f63a:	af00      	add	r7, sp, #0
 800f63c:	60f8      	str	r0, [r7, #12]
 800f63e:	60b9      	str	r1, [r7, #8]
 800f640:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800f642:	68fb      	ldr	r3, [r7, #12]
 800f644:	2203      	movs	r2, #3
 800f646:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800f64a:	68fb      	ldr	r3, [r7, #12]
 800f64c:	687a      	ldr	r2, [r7, #4]
 800f64e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800f652:	68fb      	ldr	r3, [r7, #12]
 800f654:	687a      	ldr	r2, [r7, #4]
 800f656:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800f65a:	687b      	ldr	r3, [r7, #4]
 800f65c:	68ba      	ldr	r2, [r7, #8]
 800f65e:	2100      	movs	r1, #0
 800f660:	68f8      	ldr	r0, [r7, #12]
 800f662:	f002 fecc 	bl	80123fe <USBD_LL_PrepareReceive>

  return USBD_OK;
 800f666:	2300      	movs	r3, #0
}
 800f668:	4618      	mov	r0, r3
 800f66a:	3710      	adds	r7, #16
 800f66c:	46bd      	mov	sp, r7
 800f66e:	bd80      	pop	{r7, pc}

0800f670 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800f670:	b580      	push	{r7, lr}
 800f672:	b084      	sub	sp, #16
 800f674:	af00      	add	r7, sp, #0
 800f676:	60f8      	str	r0, [r7, #12]
 800f678:	60b9      	str	r1, [r7, #8]
 800f67a:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800f67c:	687b      	ldr	r3, [r7, #4]
 800f67e:	68ba      	ldr	r2, [r7, #8]
 800f680:	2100      	movs	r1, #0
 800f682:	68f8      	ldr	r0, [r7, #12]
 800f684:	f002 febb 	bl	80123fe <USBD_LL_PrepareReceive>

  return USBD_OK;
 800f688:	2300      	movs	r3, #0
}
 800f68a:	4618      	mov	r0, r3
 800f68c:	3710      	adds	r7, #16
 800f68e:	46bd      	mov	sp, r7
 800f690:	bd80      	pop	{r7, pc}

0800f692 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800f692:	b580      	push	{r7, lr}
 800f694:	b082      	sub	sp, #8
 800f696:	af00      	add	r7, sp, #0
 800f698:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800f69a:	687b      	ldr	r3, [r7, #4]
 800f69c:	2204      	movs	r2, #4
 800f69e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800f6a2:	2300      	movs	r3, #0
 800f6a4:	2200      	movs	r2, #0
 800f6a6:	2100      	movs	r1, #0
 800f6a8:	6878      	ldr	r0, [r7, #4]
 800f6aa:	f002 fe87 	bl	80123bc <USBD_LL_Transmit>

  return USBD_OK;
 800f6ae:	2300      	movs	r3, #0
}
 800f6b0:	4618      	mov	r0, r3
 800f6b2:	3708      	adds	r7, #8
 800f6b4:	46bd      	mov	sp, r7
 800f6b6:	bd80      	pop	{r7, pc}

0800f6b8 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800f6b8:	b580      	push	{r7, lr}
 800f6ba:	b082      	sub	sp, #8
 800f6bc:	af00      	add	r7, sp, #0
 800f6be:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800f6c0:	687b      	ldr	r3, [r7, #4]
 800f6c2:	2205      	movs	r2, #5
 800f6c4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800f6c8:	2300      	movs	r3, #0
 800f6ca:	2200      	movs	r2, #0
 800f6cc:	2100      	movs	r1, #0
 800f6ce:	6878      	ldr	r0, [r7, #4]
 800f6d0:	f002 fe95 	bl	80123fe <USBD_LL_PrepareReceive>

  return USBD_OK;
 800f6d4:	2300      	movs	r3, #0
}
 800f6d6:	4618      	mov	r0, r3
 800f6d8:	3708      	adds	r7, #8
 800f6da:	46bd      	mov	sp, r7
 800f6dc:	bd80      	pop	{r7, pc}

0800f6de <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800f6de:	b480      	push	{r7}
 800f6e0:	b085      	sub	sp, #20
 800f6e2:	af00      	add	r7, sp, #0
 800f6e4:	4603      	mov	r3, r0
 800f6e6:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800f6e8:	2300      	movs	r3, #0
 800f6ea:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800f6ec:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800f6f0:	2b84      	cmp	r3, #132	; 0x84
 800f6f2:	d005      	beq.n	800f700 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800f6f4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800f6f8:	68fb      	ldr	r3, [r7, #12]
 800f6fa:	4413      	add	r3, r2
 800f6fc:	3303      	adds	r3, #3
 800f6fe:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800f700:	68fb      	ldr	r3, [r7, #12]
}
 800f702:	4618      	mov	r0, r3
 800f704:	3714      	adds	r7, #20
 800f706:	46bd      	mov	sp, r7
 800f708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f70c:	4770      	bx	lr

0800f70e <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800f70e:	b580      	push	{r7, lr}
 800f710:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800f712:	f001 f80f 	bl	8010734 <vTaskStartScheduler>
  
  return osOK;
 800f716:	2300      	movs	r3, #0
}
 800f718:	4618      	mov	r0, r3
 800f71a:	bd80      	pop	{r7, pc}

0800f71c <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800f71c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f71e:	b087      	sub	sp, #28
 800f720:	af02      	add	r7, sp, #8
 800f722:	6078      	str	r0, [r7, #4]
 800f724:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800f726:	687b      	ldr	r3, [r7, #4]
 800f728:	685c      	ldr	r4, [r3, #4]
 800f72a:	687b      	ldr	r3, [r7, #4]
 800f72c:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800f72e:	687b      	ldr	r3, [r7, #4]
 800f730:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800f732:	b29e      	uxth	r6, r3
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800f734:	687b      	ldr	r3, [r7, #4]
 800f736:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800f73a:	4618      	mov	r0, r3
 800f73c:	f7ff ffcf 	bl	800f6de <makeFreeRtosPriority>
 800f740:	4602      	mov	r2, r0
 800f742:	f107 030c 	add.w	r3, r7, #12
 800f746:	9301      	str	r3, [sp, #4]
 800f748:	9200      	str	r2, [sp, #0]
 800f74a:	683b      	ldr	r3, [r7, #0]
 800f74c:	4632      	mov	r2, r6
 800f74e:	4629      	mov	r1, r5
 800f750:	4620      	mov	r0, r4
 800f752:	f000 fe71 	bl	8010438 <xTaskCreate>
 800f756:	4603      	mov	r3, r0
 800f758:	2b01      	cmp	r3, #1
 800f75a:	d001      	beq.n	800f760 <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 800f75c:	2300      	movs	r3, #0
 800f75e:	e000      	b.n	800f762 <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 800f760:	68fb      	ldr	r3, [r7, #12]
}
 800f762:	4618      	mov	r0, r3
 800f764:	3714      	adds	r7, #20
 800f766:	46bd      	mov	sp, r7
 800f768:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800f76a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800f76a:	b580      	push	{r7, lr}
 800f76c:	b084      	sub	sp, #16
 800f76e:	af00      	add	r7, sp, #0
 800f770:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800f772:	687b      	ldr	r3, [r7, #4]
 800f774:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800f776:	68fb      	ldr	r3, [r7, #12]
 800f778:	2b00      	cmp	r3, #0
 800f77a:	d001      	beq.n	800f780 <osDelay+0x16>
 800f77c:	68fb      	ldr	r3, [r7, #12]
 800f77e:	e000      	b.n	800f782 <osDelay+0x18>
 800f780:	2301      	movs	r3, #1
 800f782:	4618      	mov	r0, r3
 800f784:	f000 ffa2 	bl	80106cc <vTaskDelay>
  
  return osOK;
 800f788:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800f78a:	4618      	mov	r0, r3
 800f78c:	3710      	adds	r7, #16
 800f78e:	46bd      	mov	sp, r7
 800f790:	bd80      	pop	{r7, pc}

0800f792 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800f792:	b480      	push	{r7}
 800f794:	b083      	sub	sp, #12
 800f796:	af00      	add	r7, sp, #0
 800f798:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f79a:	687b      	ldr	r3, [r7, #4]
 800f79c:	f103 0208 	add.w	r2, r3, #8
 800f7a0:	687b      	ldr	r3, [r7, #4]
 800f7a2:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800f7a4:	687b      	ldr	r3, [r7, #4]
 800f7a6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f7aa:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f7ac:	687b      	ldr	r3, [r7, #4]
 800f7ae:	f103 0208 	add.w	r2, r3, #8
 800f7b2:	687b      	ldr	r3, [r7, #4]
 800f7b4:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f7b6:	687b      	ldr	r3, [r7, #4]
 800f7b8:	f103 0208 	add.w	r2, r3, #8
 800f7bc:	687b      	ldr	r3, [r7, #4]
 800f7be:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800f7c0:	687b      	ldr	r3, [r7, #4]
 800f7c2:	2200      	movs	r2, #0
 800f7c4:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800f7c6:	bf00      	nop
 800f7c8:	370c      	adds	r7, #12
 800f7ca:	46bd      	mov	sp, r7
 800f7cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7d0:	4770      	bx	lr

0800f7d2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800f7d2:	b480      	push	{r7}
 800f7d4:	b083      	sub	sp, #12
 800f7d6:	af00      	add	r7, sp, #0
 800f7d8:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800f7da:	687b      	ldr	r3, [r7, #4]
 800f7dc:	2200      	movs	r2, #0
 800f7de:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800f7e0:	bf00      	nop
 800f7e2:	370c      	adds	r7, #12
 800f7e4:	46bd      	mov	sp, r7
 800f7e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7ea:	4770      	bx	lr

0800f7ec <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800f7ec:	b480      	push	{r7}
 800f7ee:	b085      	sub	sp, #20
 800f7f0:	af00      	add	r7, sp, #0
 800f7f2:	6078      	str	r0, [r7, #4]
 800f7f4:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800f7f6:	687b      	ldr	r3, [r7, #4]
 800f7f8:	685b      	ldr	r3, [r3, #4]
 800f7fa:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800f7fc:	683b      	ldr	r3, [r7, #0]
 800f7fe:	68fa      	ldr	r2, [r7, #12]
 800f800:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800f802:	68fb      	ldr	r3, [r7, #12]
 800f804:	689a      	ldr	r2, [r3, #8]
 800f806:	683b      	ldr	r3, [r7, #0]
 800f808:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800f80a:	68fb      	ldr	r3, [r7, #12]
 800f80c:	689b      	ldr	r3, [r3, #8]
 800f80e:	683a      	ldr	r2, [r7, #0]
 800f810:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800f812:	68fb      	ldr	r3, [r7, #12]
 800f814:	683a      	ldr	r2, [r7, #0]
 800f816:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800f818:	683b      	ldr	r3, [r7, #0]
 800f81a:	687a      	ldr	r2, [r7, #4]
 800f81c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800f81e:	687b      	ldr	r3, [r7, #4]
 800f820:	681b      	ldr	r3, [r3, #0]
 800f822:	1c5a      	adds	r2, r3, #1
 800f824:	687b      	ldr	r3, [r7, #4]
 800f826:	601a      	str	r2, [r3, #0]
}
 800f828:	bf00      	nop
 800f82a:	3714      	adds	r7, #20
 800f82c:	46bd      	mov	sp, r7
 800f82e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f832:	4770      	bx	lr

0800f834 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800f834:	b480      	push	{r7}
 800f836:	b085      	sub	sp, #20
 800f838:	af00      	add	r7, sp, #0
 800f83a:	6078      	str	r0, [r7, #4]
 800f83c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800f83e:	683b      	ldr	r3, [r7, #0]
 800f840:	681b      	ldr	r3, [r3, #0]
 800f842:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800f844:	68bb      	ldr	r3, [r7, #8]
 800f846:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f84a:	d103      	bne.n	800f854 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800f84c:	687b      	ldr	r3, [r7, #4]
 800f84e:	691b      	ldr	r3, [r3, #16]
 800f850:	60fb      	str	r3, [r7, #12]
 800f852:	e00c      	b.n	800f86e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800f854:	687b      	ldr	r3, [r7, #4]
 800f856:	3308      	adds	r3, #8
 800f858:	60fb      	str	r3, [r7, #12]
 800f85a:	e002      	b.n	800f862 <vListInsert+0x2e>
 800f85c:	68fb      	ldr	r3, [r7, #12]
 800f85e:	685b      	ldr	r3, [r3, #4]
 800f860:	60fb      	str	r3, [r7, #12]
 800f862:	68fb      	ldr	r3, [r7, #12]
 800f864:	685b      	ldr	r3, [r3, #4]
 800f866:	681b      	ldr	r3, [r3, #0]
 800f868:	68ba      	ldr	r2, [r7, #8]
 800f86a:	429a      	cmp	r2, r3
 800f86c:	d2f6      	bcs.n	800f85c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800f86e:	68fb      	ldr	r3, [r7, #12]
 800f870:	685a      	ldr	r2, [r3, #4]
 800f872:	683b      	ldr	r3, [r7, #0]
 800f874:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800f876:	683b      	ldr	r3, [r7, #0]
 800f878:	685b      	ldr	r3, [r3, #4]
 800f87a:	683a      	ldr	r2, [r7, #0]
 800f87c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800f87e:	683b      	ldr	r3, [r7, #0]
 800f880:	68fa      	ldr	r2, [r7, #12]
 800f882:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800f884:	68fb      	ldr	r3, [r7, #12]
 800f886:	683a      	ldr	r2, [r7, #0]
 800f888:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800f88a:	683b      	ldr	r3, [r7, #0]
 800f88c:	687a      	ldr	r2, [r7, #4]
 800f88e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800f890:	687b      	ldr	r3, [r7, #4]
 800f892:	681b      	ldr	r3, [r3, #0]
 800f894:	1c5a      	adds	r2, r3, #1
 800f896:	687b      	ldr	r3, [r7, #4]
 800f898:	601a      	str	r2, [r3, #0]
}
 800f89a:	bf00      	nop
 800f89c:	3714      	adds	r7, #20
 800f89e:	46bd      	mov	sp, r7
 800f8a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8a4:	4770      	bx	lr

0800f8a6 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800f8a6:	b480      	push	{r7}
 800f8a8:	b085      	sub	sp, #20
 800f8aa:	af00      	add	r7, sp, #0
 800f8ac:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800f8ae:	687b      	ldr	r3, [r7, #4]
 800f8b0:	691b      	ldr	r3, [r3, #16]
 800f8b2:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800f8b4:	687b      	ldr	r3, [r7, #4]
 800f8b6:	685b      	ldr	r3, [r3, #4]
 800f8b8:	687a      	ldr	r2, [r7, #4]
 800f8ba:	6892      	ldr	r2, [r2, #8]
 800f8bc:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800f8be:	687b      	ldr	r3, [r7, #4]
 800f8c0:	689b      	ldr	r3, [r3, #8]
 800f8c2:	687a      	ldr	r2, [r7, #4]
 800f8c4:	6852      	ldr	r2, [r2, #4]
 800f8c6:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800f8c8:	68fb      	ldr	r3, [r7, #12]
 800f8ca:	685b      	ldr	r3, [r3, #4]
 800f8cc:	687a      	ldr	r2, [r7, #4]
 800f8ce:	429a      	cmp	r2, r3
 800f8d0:	d103      	bne.n	800f8da <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800f8d2:	687b      	ldr	r3, [r7, #4]
 800f8d4:	689a      	ldr	r2, [r3, #8]
 800f8d6:	68fb      	ldr	r3, [r7, #12]
 800f8d8:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800f8da:	687b      	ldr	r3, [r7, #4]
 800f8dc:	2200      	movs	r2, #0
 800f8de:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800f8e0:	68fb      	ldr	r3, [r7, #12]
 800f8e2:	681b      	ldr	r3, [r3, #0]
 800f8e4:	1e5a      	subs	r2, r3, #1
 800f8e6:	68fb      	ldr	r3, [r7, #12]
 800f8e8:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800f8ea:	68fb      	ldr	r3, [r7, #12]
 800f8ec:	681b      	ldr	r3, [r3, #0]
}
 800f8ee:	4618      	mov	r0, r3
 800f8f0:	3714      	adds	r7, #20
 800f8f2:	46bd      	mov	sp, r7
 800f8f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8f8:	4770      	bx	lr
	...

0800f8fc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800f8fc:	b580      	push	{r7, lr}
 800f8fe:	b084      	sub	sp, #16
 800f900:	af00      	add	r7, sp, #0
 800f902:	6078      	str	r0, [r7, #4]
 800f904:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800f906:	687b      	ldr	r3, [r7, #4]
 800f908:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800f90a:	68fb      	ldr	r3, [r7, #12]
 800f90c:	2b00      	cmp	r3, #0
 800f90e:	d10a      	bne.n	800f926 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800f910:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f914:	f383 8811 	msr	BASEPRI, r3
 800f918:	f3bf 8f6f 	isb	sy
 800f91c:	f3bf 8f4f 	dsb	sy
 800f920:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800f922:	bf00      	nop
 800f924:	e7fe      	b.n	800f924 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800f926:	f001 fe2d 	bl	8011584 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800f92a:	68fb      	ldr	r3, [r7, #12]
 800f92c:	681a      	ldr	r2, [r3, #0]
 800f92e:	68fb      	ldr	r3, [r7, #12]
 800f930:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f932:	68f9      	ldr	r1, [r7, #12]
 800f934:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800f936:	fb01 f303 	mul.w	r3, r1, r3
 800f93a:	441a      	add	r2, r3
 800f93c:	68fb      	ldr	r3, [r7, #12]
 800f93e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800f940:	68fb      	ldr	r3, [r7, #12]
 800f942:	2200      	movs	r2, #0
 800f944:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800f946:	68fb      	ldr	r3, [r7, #12]
 800f948:	681a      	ldr	r2, [r3, #0]
 800f94a:	68fb      	ldr	r3, [r7, #12]
 800f94c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800f94e:	68fb      	ldr	r3, [r7, #12]
 800f950:	681a      	ldr	r2, [r3, #0]
 800f952:	68fb      	ldr	r3, [r7, #12]
 800f954:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f956:	3b01      	subs	r3, #1
 800f958:	68f9      	ldr	r1, [r7, #12]
 800f95a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800f95c:	fb01 f303 	mul.w	r3, r1, r3
 800f960:	441a      	add	r2, r3
 800f962:	68fb      	ldr	r3, [r7, #12]
 800f964:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800f966:	68fb      	ldr	r3, [r7, #12]
 800f968:	22ff      	movs	r2, #255	; 0xff
 800f96a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800f96e:	68fb      	ldr	r3, [r7, #12]
 800f970:	22ff      	movs	r2, #255	; 0xff
 800f972:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800f976:	683b      	ldr	r3, [r7, #0]
 800f978:	2b00      	cmp	r3, #0
 800f97a:	d114      	bne.n	800f9a6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f97c:	68fb      	ldr	r3, [r7, #12]
 800f97e:	691b      	ldr	r3, [r3, #16]
 800f980:	2b00      	cmp	r3, #0
 800f982:	d01a      	beq.n	800f9ba <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f984:	68fb      	ldr	r3, [r7, #12]
 800f986:	3310      	adds	r3, #16
 800f988:	4618      	mov	r0, r3
 800f98a:	f001 f90b 	bl	8010ba4 <xTaskRemoveFromEventList>
 800f98e:	4603      	mov	r3, r0
 800f990:	2b00      	cmp	r3, #0
 800f992:	d012      	beq.n	800f9ba <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800f994:	4b0c      	ldr	r3, [pc, #48]	; (800f9c8 <xQueueGenericReset+0xcc>)
 800f996:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f99a:	601a      	str	r2, [r3, #0]
 800f99c:	f3bf 8f4f 	dsb	sy
 800f9a0:	f3bf 8f6f 	isb	sy
 800f9a4:	e009      	b.n	800f9ba <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800f9a6:	68fb      	ldr	r3, [r7, #12]
 800f9a8:	3310      	adds	r3, #16
 800f9aa:	4618      	mov	r0, r3
 800f9ac:	f7ff fef1 	bl	800f792 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800f9b0:	68fb      	ldr	r3, [r7, #12]
 800f9b2:	3324      	adds	r3, #36	; 0x24
 800f9b4:	4618      	mov	r0, r3
 800f9b6:	f7ff feec 	bl	800f792 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800f9ba:	f001 fe13 	bl	80115e4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800f9be:	2301      	movs	r3, #1
}
 800f9c0:	4618      	mov	r0, r3
 800f9c2:	3710      	adds	r7, #16
 800f9c4:	46bd      	mov	sp, r7
 800f9c6:	bd80      	pop	{r7, pc}
 800f9c8:	e000ed04 	.word	0xe000ed04

0800f9cc <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800f9cc:	b580      	push	{r7, lr}
 800f9ce:	b08a      	sub	sp, #40	; 0x28
 800f9d0:	af02      	add	r7, sp, #8
 800f9d2:	60f8      	str	r0, [r7, #12]
 800f9d4:	60b9      	str	r1, [r7, #8]
 800f9d6:	4613      	mov	r3, r2
 800f9d8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800f9da:	68fb      	ldr	r3, [r7, #12]
 800f9dc:	2b00      	cmp	r3, #0
 800f9de:	d10a      	bne.n	800f9f6 <xQueueGenericCreate+0x2a>
	__asm volatile
 800f9e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f9e4:	f383 8811 	msr	BASEPRI, r3
 800f9e8:	f3bf 8f6f 	isb	sy
 800f9ec:	f3bf 8f4f 	dsb	sy
 800f9f0:	613b      	str	r3, [r7, #16]
}
 800f9f2:	bf00      	nop
 800f9f4:	e7fe      	b.n	800f9f4 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f9f6:	68fb      	ldr	r3, [r7, #12]
 800f9f8:	68ba      	ldr	r2, [r7, #8]
 800f9fa:	fb02 f303 	mul.w	r3, r2, r3
 800f9fe:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800fa00:	69fb      	ldr	r3, [r7, #28]
 800fa02:	3348      	adds	r3, #72	; 0x48
 800fa04:	4618      	mov	r0, r3
 800fa06:	f001 fedf 	bl	80117c8 <pvPortMalloc>
 800fa0a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800fa0c:	69bb      	ldr	r3, [r7, #24]
 800fa0e:	2b00      	cmp	r3, #0
 800fa10:	d00d      	beq.n	800fa2e <xQueueGenericCreate+0x62>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800fa12:	69bb      	ldr	r3, [r7, #24]
 800fa14:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800fa16:	697b      	ldr	r3, [r7, #20]
 800fa18:	3348      	adds	r3, #72	; 0x48
 800fa1a:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800fa1c:	79fa      	ldrb	r2, [r7, #7]
 800fa1e:	69bb      	ldr	r3, [r7, #24]
 800fa20:	9300      	str	r3, [sp, #0]
 800fa22:	4613      	mov	r3, r2
 800fa24:	697a      	ldr	r2, [r7, #20]
 800fa26:	68b9      	ldr	r1, [r7, #8]
 800fa28:	68f8      	ldr	r0, [r7, #12]
 800fa2a:	f000 f805 	bl	800fa38 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800fa2e:	69bb      	ldr	r3, [r7, #24]
	}
 800fa30:	4618      	mov	r0, r3
 800fa32:	3720      	adds	r7, #32
 800fa34:	46bd      	mov	sp, r7
 800fa36:	bd80      	pop	{r7, pc}

0800fa38 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800fa38:	b580      	push	{r7, lr}
 800fa3a:	b084      	sub	sp, #16
 800fa3c:	af00      	add	r7, sp, #0
 800fa3e:	60f8      	str	r0, [r7, #12]
 800fa40:	60b9      	str	r1, [r7, #8]
 800fa42:	607a      	str	r2, [r7, #4]
 800fa44:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800fa46:	68bb      	ldr	r3, [r7, #8]
 800fa48:	2b00      	cmp	r3, #0
 800fa4a:	d103      	bne.n	800fa54 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800fa4c:	69bb      	ldr	r3, [r7, #24]
 800fa4e:	69ba      	ldr	r2, [r7, #24]
 800fa50:	601a      	str	r2, [r3, #0]
 800fa52:	e002      	b.n	800fa5a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800fa54:	69bb      	ldr	r3, [r7, #24]
 800fa56:	687a      	ldr	r2, [r7, #4]
 800fa58:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800fa5a:	69bb      	ldr	r3, [r7, #24]
 800fa5c:	68fa      	ldr	r2, [r7, #12]
 800fa5e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800fa60:	69bb      	ldr	r3, [r7, #24]
 800fa62:	68ba      	ldr	r2, [r7, #8]
 800fa64:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800fa66:	2101      	movs	r1, #1
 800fa68:	69b8      	ldr	r0, [r7, #24]
 800fa6a:	f7ff ff47 	bl	800f8fc <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800fa6e:	bf00      	nop
 800fa70:	3710      	adds	r7, #16
 800fa72:	46bd      	mov	sp, r7
 800fa74:	bd80      	pop	{r7, pc}

0800fa76 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800fa76:	b580      	push	{r7, lr}
 800fa78:	b082      	sub	sp, #8
 800fa7a:	af00      	add	r7, sp, #0
 800fa7c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800fa7e:	687b      	ldr	r3, [r7, #4]
 800fa80:	2b00      	cmp	r3, #0
 800fa82:	d00e      	beq.n	800faa2 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800fa84:	687b      	ldr	r3, [r7, #4]
 800fa86:	2200      	movs	r2, #0
 800fa88:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800fa8a:	687b      	ldr	r3, [r7, #4]
 800fa8c:	2200      	movs	r2, #0
 800fa8e:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800fa90:	687b      	ldr	r3, [r7, #4]
 800fa92:	2200      	movs	r2, #0
 800fa94:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800fa96:	2300      	movs	r3, #0
 800fa98:	2200      	movs	r2, #0
 800fa9a:	2100      	movs	r1, #0
 800fa9c:	6878      	ldr	r0, [r7, #4]
 800fa9e:	f000 f81d 	bl	800fadc <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800faa2:	bf00      	nop
 800faa4:	3708      	adds	r7, #8
 800faa6:	46bd      	mov	sp, r7
 800faa8:	bd80      	pop	{r7, pc}

0800faaa <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800faaa:	b580      	push	{r7, lr}
 800faac:	b086      	sub	sp, #24
 800faae:	af00      	add	r7, sp, #0
 800fab0:	4603      	mov	r3, r0
 800fab2:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800fab4:	2301      	movs	r3, #1
 800fab6:	617b      	str	r3, [r7, #20]
 800fab8:	2300      	movs	r3, #0
 800faba:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800fabc:	79fb      	ldrb	r3, [r7, #7]
 800fabe:	461a      	mov	r2, r3
 800fac0:	6939      	ldr	r1, [r7, #16]
 800fac2:	6978      	ldr	r0, [r7, #20]
 800fac4:	f7ff ff82 	bl	800f9cc <xQueueGenericCreate>
 800fac8:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800faca:	68f8      	ldr	r0, [r7, #12]
 800facc:	f7ff ffd3 	bl	800fa76 <prvInitialiseMutex>

		return xNewQueue;
 800fad0:	68fb      	ldr	r3, [r7, #12]
	}
 800fad2:	4618      	mov	r0, r3
 800fad4:	3718      	adds	r7, #24
 800fad6:	46bd      	mov	sp, r7
 800fad8:	bd80      	pop	{r7, pc}
	...

0800fadc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800fadc:	b580      	push	{r7, lr}
 800fade:	b08e      	sub	sp, #56	; 0x38
 800fae0:	af00      	add	r7, sp, #0
 800fae2:	60f8      	str	r0, [r7, #12]
 800fae4:	60b9      	str	r1, [r7, #8]
 800fae6:	607a      	str	r2, [r7, #4]
 800fae8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800faea:	2300      	movs	r3, #0
 800faec:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800faee:	68fb      	ldr	r3, [r7, #12]
 800faf0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800faf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800faf4:	2b00      	cmp	r3, #0
 800faf6:	d10a      	bne.n	800fb0e <xQueueGenericSend+0x32>
	__asm volatile
 800faf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fafc:	f383 8811 	msr	BASEPRI, r3
 800fb00:	f3bf 8f6f 	isb	sy
 800fb04:	f3bf 8f4f 	dsb	sy
 800fb08:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800fb0a:	bf00      	nop
 800fb0c:	e7fe      	b.n	800fb0c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800fb0e:	68bb      	ldr	r3, [r7, #8]
 800fb10:	2b00      	cmp	r3, #0
 800fb12:	d103      	bne.n	800fb1c <xQueueGenericSend+0x40>
 800fb14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fb18:	2b00      	cmp	r3, #0
 800fb1a:	d101      	bne.n	800fb20 <xQueueGenericSend+0x44>
 800fb1c:	2301      	movs	r3, #1
 800fb1e:	e000      	b.n	800fb22 <xQueueGenericSend+0x46>
 800fb20:	2300      	movs	r3, #0
 800fb22:	2b00      	cmp	r3, #0
 800fb24:	d10a      	bne.n	800fb3c <xQueueGenericSend+0x60>
	__asm volatile
 800fb26:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb2a:	f383 8811 	msr	BASEPRI, r3
 800fb2e:	f3bf 8f6f 	isb	sy
 800fb32:	f3bf 8f4f 	dsb	sy
 800fb36:	627b      	str	r3, [r7, #36]	; 0x24
}
 800fb38:	bf00      	nop
 800fb3a:	e7fe      	b.n	800fb3a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800fb3c:	683b      	ldr	r3, [r7, #0]
 800fb3e:	2b02      	cmp	r3, #2
 800fb40:	d103      	bne.n	800fb4a <xQueueGenericSend+0x6e>
 800fb42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fb46:	2b01      	cmp	r3, #1
 800fb48:	d101      	bne.n	800fb4e <xQueueGenericSend+0x72>
 800fb4a:	2301      	movs	r3, #1
 800fb4c:	e000      	b.n	800fb50 <xQueueGenericSend+0x74>
 800fb4e:	2300      	movs	r3, #0
 800fb50:	2b00      	cmp	r3, #0
 800fb52:	d10a      	bne.n	800fb6a <xQueueGenericSend+0x8e>
	__asm volatile
 800fb54:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb58:	f383 8811 	msr	BASEPRI, r3
 800fb5c:	f3bf 8f6f 	isb	sy
 800fb60:	f3bf 8f4f 	dsb	sy
 800fb64:	623b      	str	r3, [r7, #32]
}
 800fb66:	bf00      	nop
 800fb68:	e7fe      	b.n	800fb68 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800fb6a:	f001 f9bd 	bl	8010ee8 <xTaskGetSchedulerState>
 800fb6e:	4603      	mov	r3, r0
 800fb70:	2b00      	cmp	r3, #0
 800fb72:	d102      	bne.n	800fb7a <xQueueGenericSend+0x9e>
 800fb74:	687b      	ldr	r3, [r7, #4]
 800fb76:	2b00      	cmp	r3, #0
 800fb78:	d101      	bne.n	800fb7e <xQueueGenericSend+0xa2>
 800fb7a:	2301      	movs	r3, #1
 800fb7c:	e000      	b.n	800fb80 <xQueueGenericSend+0xa4>
 800fb7e:	2300      	movs	r3, #0
 800fb80:	2b00      	cmp	r3, #0
 800fb82:	d10a      	bne.n	800fb9a <xQueueGenericSend+0xbe>
	__asm volatile
 800fb84:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb88:	f383 8811 	msr	BASEPRI, r3
 800fb8c:	f3bf 8f6f 	isb	sy
 800fb90:	f3bf 8f4f 	dsb	sy
 800fb94:	61fb      	str	r3, [r7, #28]
}
 800fb96:	bf00      	nop
 800fb98:	e7fe      	b.n	800fb98 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800fb9a:	f001 fcf3 	bl	8011584 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800fb9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fba0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800fba2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fba4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fba6:	429a      	cmp	r2, r3
 800fba8:	d302      	bcc.n	800fbb0 <xQueueGenericSend+0xd4>
 800fbaa:	683b      	ldr	r3, [r7, #0]
 800fbac:	2b02      	cmp	r3, #2
 800fbae:	d129      	bne.n	800fc04 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800fbb0:	683a      	ldr	r2, [r7, #0]
 800fbb2:	68b9      	ldr	r1, [r7, #8]
 800fbb4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fbb6:	f000 fb2f 	bl	8010218 <prvCopyDataToQueue>
 800fbba:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800fbbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fbbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fbc0:	2b00      	cmp	r3, #0
 800fbc2:	d010      	beq.n	800fbe6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800fbc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fbc6:	3324      	adds	r3, #36	; 0x24
 800fbc8:	4618      	mov	r0, r3
 800fbca:	f000 ffeb 	bl	8010ba4 <xTaskRemoveFromEventList>
 800fbce:	4603      	mov	r3, r0
 800fbd0:	2b00      	cmp	r3, #0
 800fbd2:	d013      	beq.n	800fbfc <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800fbd4:	4b3f      	ldr	r3, [pc, #252]	; (800fcd4 <xQueueGenericSend+0x1f8>)
 800fbd6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fbda:	601a      	str	r2, [r3, #0]
 800fbdc:	f3bf 8f4f 	dsb	sy
 800fbe0:	f3bf 8f6f 	isb	sy
 800fbe4:	e00a      	b.n	800fbfc <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800fbe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fbe8:	2b00      	cmp	r3, #0
 800fbea:	d007      	beq.n	800fbfc <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800fbec:	4b39      	ldr	r3, [pc, #228]	; (800fcd4 <xQueueGenericSend+0x1f8>)
 800fbee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fbf2:	601a      	str	r2, [r3, #0]
 800fbf4:	f3bf 8f4f 	dsb	sy
 800fbf8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800fbfc:	f001 fcf2 	bl	80115e4 <vPortExitCritical>
				return pdPASS;
 800fc00:	2301      	movs	r3, #1
 800fc02:	e063      	b.n	800fccc <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800fc04:	687b      	ldr	r3, [r7, #4]
 800fc06:	2b00      	cmp	r3, #0
 800fc08:	d103      	bne.n	800fc12 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800fc0a:	f001 fceb 	bl	80115e4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800fc0e:	2300      	movs	r3, #0
 800fc10:	e05c      	b.n	800fccc <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800fc12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fc14:	2b00      	cmp	r3, #0
 800fc16:	d106      	bne.n	800fc26 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800fc18:	f107 0314 	add.w	r3, r7, #20
 800fc1c:	4618      	mov	r0, r3
 800fc1e:	f001 f823 	bl	8010c68 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800fc22:	2301      	movs	r3, #1
 800fc24:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800fc26:	f001 fcdd 	bl	80115e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800fc2a:	f000 fdd3 	bl	80107d4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800fc2e:	f001 fca9 	bl	8011584 <vPortEnterCritical>
 800fc32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc34:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800fc38:	b25b      	sxtb	r3, r3
 800fc3a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800fc3e:	d103      	bne.n	800fc48 <xQueueGenericSend+0x16c>
 800fc40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc42:	2200      	movs	r2, #0
 800fc44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800fc48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc4a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800fc4e:	b25b      	sxtb	r3, r3
 800fc50:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800fc54:	d103      	bne.n	800fc5e <xQueueGenericSend+0x182>
 800fc56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc58:	2200      	movs	r2, #0
 800fc5a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800fc5e:	f001 fcc1 	bl	80115e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800fc62:	1d3a      	adds	r2, r7, #4
 800fc64:	f107 0314 	add.w	r3, r7, #20
 800fc68:	4611      	mov	r1, r2
 800fc6a:	4618      	mov	r0, r3
 800fc6c:	f001 f812 	bl	8010c94 <xTaskCheckForTimeOut>
 800fc70:	4603      	mov	r3, r0
 800fc72:	2b00      	cmp	r3, #0
 800fc74:	d124      	bne.n	800fcc0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800fc76:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fc78:	f000 fbc6 	bl	8010408 <prvIsQueueFull>
 800fc7c:	4603      	mov	r3, r0
 800fc7e:	2b00      	cmp	r3, #0
 800fc80:	d018      	beq.n	800fcb4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800fc82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc84:	3310      	adds	r3, #16
 800fc86:	687a      	ldr	r2, [r7, #4]
 800fc88:	4611      	mov	r1, r2
 800fc8a:	4618      	mov	r0, r3
 800fc8c:	f000 ff66 	bl	8010b5c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800fc90:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fc92:	f000 fb51 	bl	8010338 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800fc96:	f000 fdab 	bl	80107f0 <xTaskResumeAll>
 800fc9a:	4603      	mov	r3, r0
 800fc9c:	2b00      	cmp	r3, #0
 800fc9e:	f47f af7c 	bne.w	800fb9a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800fca2:	4b0c      	ldr	r3, [pc, #48]	; (800fcd4 <xQueueGenericSend+0x1f8>)
 800fca4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fca8:	601a      	str	r2, [r3, #0]
 800fcaa:	f3bf 8f4f 	dsb	sy
 800fcae:	f3bf 8f6f 	isb	sy
 800fcb2:	e772      	b.n	800fb9a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800fcb4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fcb6:	f000 fb3f 	bl	8010338 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800fcba:	f000 fd99 	bl	80107f0 <xTaskResumeAll>
 800fcbe:	e76c      	b.n	800fb9a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800fcc0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fcc2:	f000 fb39 	bl	8010338 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800fcc6:	f000 fd93 	bl	80107f0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800fcca:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800fccc:	4618      	mov	r0, r3
 800fcce:	3738      	adds	r7, #56	; 0x38
 800fcd0:	46bd      	mov	sp, r7
 800fcd2:	bd80      	pop	{r7, pc}
 800fcd4:	e000ed04 	.word	0xe000ed04

0800fcd8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800fcd8:	b580      	push	{r7, lr}
 800fcda:	b090      	sub	sp, #64	; 0x40
 800fcdc:	af00      	add	r7, sp, #0
 800fcde:	60f8      	str	r0, [r7, #12]
 800fce0:	60b9      	str	r1, [r7, #8]
 800fce2:	607a      	str	r2, [r7, #4]
 800fce4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800fce6:	68fb      	ldr	r3, [r7, #12]
 800fce8:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800fcea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fcec:	2b00      	cmp	r3, #0
 800fcee:	d10a      	bne.n	800fd06 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800fcf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fcf4:	f383 8811 	msr	BASEPRI, r3
 800fcf8:	f3bf 8f6f 	isb	sy
 800fcfc:	f3bf 8f4f 	dsb	sy
 800fd00:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800fd02:	bf00      	nop
 800fd04:	e7fe      	b.n	800fd04 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800fd06:	68bb      	ldr	r3, [r7, #8]
 800fd08:	2b00      	cmp	r3, #0
 800fd0a:	d103      	bne.n	800fd14 <xQueueGenericSendFromISR+0x3c>
 800fd0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fd10:	2b00      	cmp	r3, #0
 800fd12:	d101      	bne.n	800fd18 <xQueueGenericSendFromISR+0x40>
 800fd14:	2301      	movs	r3, #1
 800fd16:	e000      	b.n	800fd1a <xQueueGenericSendFromISR+0x42>
 800fd18:	2300      	movs	r3, #0
 800fd1a:	2b00      	cmp	r3, #0
 800fd1c:	d10a      	bne.n	800fd34 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800fd1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd22:	f383 8811 	msr	BASEPRI, r3
 800fd26:	f3bf 8f6f 	isb	sy
 800fd2a:	f3bf 8f4f 	dsb	sy
 800fd2e:	627b      	str	r3, [r7, #36]	; 0x24
}
 800fd30:	bf00      	nop
 800fd32:	e7fe      	b.n	800fd32 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800fd34:	683b      	ldr	r3, [r7, #0]
 800fd36:	2b02      	cmp	r3, #2
 800fd38:	d103      	bne.n	800fd42 <xQueueGenericSendFromISR+0x6a>
 800fd3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fd3e:	2b01      	cmp	r3, #1
 800fd40:	d101      	bne.n	800fd46 <xQueueGenericSendFromISR+0x6e>
 800fd42:	2301      	movs	r3, #1
 800fd44:	e000      	b.n	800fd48 <xQueueGenericSendFromISR+0x70>
 800fd46:	2300      	movs	r3, #0
 800fd48:	2b00      	cmp	r3, #0
 800fd4a:	d10a      	bne.n	800fd62 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800fd4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd50:	f383 8811 	msr	BASEPRI, r3
 800fd54:	f3bf 8f6f 	isb	sy
 800fd58:	f3bf 8f4f 	dsb	sy
 800fd5c:	623b      	str	r3, [r7, #32]
}
 800fd5e:	bf00      	nop
 800fd60:	e7fe      	b.n	800fd60 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800fd62:	f001 fcf1 	bl	8011748 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800fd66:	f3ef 8211 	mrs	r2, BASEPRI
 800fd6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd6e:	f383 8811 	msr	BASEPRI, r3
 800fd72:	f3bf 8f6f 	isb	sy
 800fd76:	f3bf 8f4f 	dsb	sy
 800fd7a:	61fa      	str	r2, [r7, #28]
 800fd7c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800fd7e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800fd80:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800fd82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd84:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800fd86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fd8a:	429a      	cmp	r2, r3
 800fd8c:	d302      	bcc.n	800fd94 <xQueueGenericSendFromISR+0xbc>
 800fd8e:	683b      	ldr	r3, [r7, #0]
 800fd90:	2b02      	cmp	r3, #2
 800fd92:	d12f      	bne.n	800fdf4 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800fd94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd96:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800fd9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800fd9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fda0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fda2:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800fda4:	683a      	ldr	r2, [r7, #0]
 800fda6:	68b9      	ldr	r1, [r7, #8]
 800fda8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800fdaa:	f000 fa35 	bl	8010218 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800fdae:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800fdb2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800fdb6:	d112      	bne.n	800fdde <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800fdb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fdba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fdbc:	2b00      	cmp	r3, #0
 800fdbe:	d016      	beq.n	800fdee <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800fdc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fdc2:	3324      	adds	r3, #36	; 0x24
 800fdc4:	4618      	mov	r0, r3
 800fdc6:	f000 feed 	bl	8010ba4 <xTaskRemoveFromEventList>
 800fdca:	4603      	mov	r3, r0
 800fdcc:	2b00      	cmp	r3, #0
 800fdce:	d00e      	beq.n	800fdee <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800fdd0:	687b      	ldr	r3, [r7, #4]
 800fdd2:	2b00      	cmp	r3, #0
 800fdd4:	d00b      	beq.n	800fdee <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800fdd6:	687b      	ldr	r3, [r7, #4]
 800fdd8:	2201      	movs	r2, #1
 800fdda:	601a      	str	r2, [r3, #0]
 800fddc:	e007      	b.n	800fdee <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800fdde:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800fde2:	3301      	adds	r3, #1
 800fde4:	b2db      	uxtb	r3, r3
 800fde6:	b25a      	sxtb	r2, r3
 800fde8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fdea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800fdee:	2301      	movs	r3, #1
 800fdf0:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800fdf2:	e001      	b.n	800fdf8 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800fdf4:	2300      	movs	r3, #0
 800fdf6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800fdf8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fdfa:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800fdfc:	697b      	ldr	r3, [r7, #20]
 800fdfe:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800fe02:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800fe04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800fe06:	4618      	mov	r0, r3
 800fe08:	3740      	adds	r7, #64	; 0x40
 800fe0a:	46bd      	mov	sp, r7
 800fe0c:	bd80      	pop	{r7, pc}
	...

0800fe10 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800fe10:	b580      	push	{r7, lr}
 800fe12:	b08c      	sub	sp, #48	; 0x30
 800fe14:	af00      	add	r7, sp, #0
 800fe16:	60f8      	str	r0, [r7, #12]
 800fe18:	60b9      	str	r1, [r7, #8]
 800fe1a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800fe1c:	2300      	movs	r3, #0
 800fe1e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800fe20:	68fb      	ldr	r3, [r7, #12]
 800fe22:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800fe24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe26:	2b00      	cmp	r3, #0
 800fe28:	d10a      	bne.n	800fe40 <xQueueReceive+0x30>
	__asm volatile
 800fe2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe2e:	f383 8811 	msr	BASEPRI, r3
 800fe32:	f3bf 8f6f 	isb	sy
 800fe36:	f3bf 8f4f 	dsb	sy
 800fe3a:	623b      	str	r3, [r7, #32]
}
 800fe3c:	bf00      	nop
 800fe3e:	e7fe      	b.n	800fe3e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800fe40:	68bb      	ldr	r3, [r7, #8]
 800fe42:	2b00      	cmp	r3, #0
 800fe44:	d103      	bne.n	800fe4e <xQueueReceive+0x3e>
 800fe46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fe4a:	2b00      	cmp	r3, #0
 800fe4c:	d101      	bne.n	800fe52 <xQueueReceive+0x42>
 800fe4e:	2301      	movs	r3, #1
 800fe50:	e000      	b.n	800fe54 <xQueueReceive+0x44>
 800fe52:	2300      	movs	r3, #0
 800fe54:	2b00      	cmp	r3, #0
 800fe56:	d10a      	bne.n	800fe6e <xQueueReceive+0x5e>
	__asm volatile
 800fe58:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe5c:	f383 8811 	msr	BASEPRI, r3
 800fe60:	f3bf 8f6f 	isb	sy
 800fe64:	f3bf 8f4f 	dsb	sy
 800fe68:	61fb      	str	r3, [r7, #28]
}
 800fe6a:	bf00      	nop
 800fe6c:	e7fe      	b.n	800fe6c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800fe6e:	f001 f83b 	bl	8010ee8 <xTaskGetSchedulerState>
 800fe72:	4603      	mov	r3, r0
 800fe74:	2b00      	cmp	r3, #0
 800fe76:	d102      	bne.n	800fe7e <xQueueReceive+0x6e>
 800fe78:	687b      	ldr	r3, [r7, #4]
 800fe7a:	2b00      	cmp	r3, #0
 800fe7c:	d101      	bne.n	800fe82 <xQueueReceive+0x72>
 800fe7e:	2301      	movs	r3, #1
 800fe80:	e000      	b.n	800fe84 <xQueueReceive+0x74>
 800fe82:	2300      	movs	r3, #0
 800fe84:	2b00      	cmp	r3, #0
 800fe86:	d10a      	bne.n	800fe9e <xQueueReceive+0x8e>
	__asm volatile
 800fe88:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe8c:	f383 8811 	msr	BASEPRI, r3
 800fe90:	f3bf 8f6f 	isb	sy
 800fe94:	f3bf 8f4f 	dsb	sy
 800fe98:	61bb      	str	r3, [r7, #24]
}
 800fe9a:	bf00      	nop
 800fe9c:	e7fe      	b.n	800fe9c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800fe9e:	f001 fb71 	bl	8011584 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800fea2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fea4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fea6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800fea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800feaa:	2b00      	cmp	r3, #0
 800feac:	d01f      	beq.n	800feee <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800feae:	68b9      	ldr	r1, [r7, #8]
 800feb0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800feb2:	f000 fa1b 	bl	80102ec <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800feb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800feb8:	1e5a      	subs	r2, r3, #1
 800feba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800febc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800febe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fec0:	691b      	ldr	r3, [r3, #16]
 800fec2:	2b00      	cmp	r3, #0
 800fec4:	d00f      	beq.n	800fee6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800fec6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fec8:	3310      	adds	r3, #16
 800feca:	4618      	mov	r0, r3
 800fecc:	f000 fe6a 	bl	8010ba4 <xTaskRemoveFromEventList>
 800fed0:	4603      	mov	r3, r0
 800fed2:	2b00      	cmp	r3, #0
 800fed4:	d007      	beq.n	800fee6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800fed6:	4b3d      	ldr	r3, [pc, #244]	; (800ffcc <xQueueReceive+0x1bc>)
 800fed8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fedc:	601a      	str	r2, [r3, #0]
 800fede:	f3bf 8f4f 	dsb	sy
 800fee2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800fee6:	f001 fb7d 	bl	80115e4 <vPortExitCritical>
				return pdPASS;
 800feea:	2301      	movs	r3, #1
 800feec:	e069      	b.n	800ffc2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800feee:	687b      	ldr	r3, [r7, #4]
 800fef0:	2b00      	cmp	r3, #0
 800fef2:	d103      	bne.n	800fefc <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800fef4:	f001 fb76 	bl	80115e4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800fef8:	2300      	movs	r3, #0
 800fefa:	e062      	b.n	800ffc2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800fefc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fefe:	2b00      	cmp	r3, #0
 800ff00:	d106      	bne.n	800ff10 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ff02:	f107 0310 	add.w	r3, r7, #16
 800ff06:	4618      	mov	r0, r3
 800ff08:	f000 feae 	bl	8010c68 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ff0c:	2301      	movs	r3, #1
 800ff0e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ff10:	f001 fb68 	bl	80115e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ff14:	f000 fc5e 	bl	80107d4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ff18:	f001 fb34 	bl	8011584 <vPortEnterCritical>
 800ff1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff1e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ff22:	b25b      	sxtb	r3, r3
 800ff24:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ff28:	d103      	bne.n	800ff32 <xQueueReceive+0x122>
 800ff2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff2c:	2200      	movs	r2, #0
 800ff2e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ff32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff34:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ff38:	b25b      	sxtb	r3, r3
 800ff3a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ff3e:	d103      	bne.n	800ff48 <xQueueReceive+0x138>
 800ff40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff42:	2200      	movs	r2, #0
 800ff44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ff48:	f001 fb4c 	bl	80115e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ff4c:	1d3a      	adds	r2, r7, #4
 800ff4e:	f107 0310 	add.w	r3, r7, #16
 800ff52:	4611      	mov	r1, r2
 800ff54:	4618      	mov	r0, r3
 800ff56:	f000 fe9d 	bl	8010c94 <xTaskCheckForTimeOut>
 800ff5a:	4603      	mov	r3, r0
 800ff5c:	2b00      	cmp	r3, #0
 800ff5e:	d123      	bne.n	800ffa8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ff60:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ff62:	f000 fa3b 	bl	80103dc <prvIsQueueEmpty>
 800ff66:	4603      	mov	r3, r0
 800ff68:	2b00      	cmp	r3, #0
 800ff6a:	d017      	beq.n	800ff9c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ff6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff6e:	3324      	adds	r3, #36	; 0x24
 800ff70:	687a      	ldr	r2, [r7, #4]
 800ff72:	4611      	mov	r1, r2
 800ff74:	4618      	mov	r0, r3
 800ff76:	f000 fdf1 	bl	8010b5c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ff7a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ff7c:	f000 f9dc 	bl	8010338 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ff80:	f000 fc36 	bl	80107f0 <xTaskResumeAll>
 800ff84:	4603      	mov	r3, r0
 800ff86:	2b00      	cmp	r3, #0
 800ff88:	d189      	bne.n	800fe9e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800ff8a:	4b10      	ldr	r3, [pc, #64]	; (800ffcc <xQueueReceive+0x1bc>)
 800ff8c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ff90:	601a      	str	r2, [r3, #0]
 800ff92:	f3bf 8f4f 	dsb	sy
 800ff96:	f3bf 8f6f 	isb	sy
 800ff9a:	e780      	b.n	800fe9e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800ff9c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ff9e:	f000 f9cb 	bl	8010338 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ffa2:	f000 fc25 	bl	80107f0 <xTaskResumeAll>
 800ffa6:	e77a      	b.n	800fe9e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800ffa8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ffaa:	f000 f9c5 	bl	8010338 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ffae:	f000 fc1f 	bl	80107f0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ffb2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ffb4:	f000 fa12 	bl	80103dc <prvIsQueueEmpty>
 800ffb8:	4603      	mov	r3, r0
 800ffba:	2b00      	cmp	r3, #0
 800ffbc:	f43f af6f 	beq.w	800fe9e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800ffc0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800ffc2:	4618      	mov	r0, r3
 800ffc4:	3730      	adds	r7, #48	; 0x30
 800ffc6:	46bd      	mov	sp, r7
 800ffc8:	bd80      	pop	{r7, pc}
 800ffca:	bf00      	nop
 800ffcc:	e000ed04 	.word	0xe000ed04

0800ffd0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800ffd0:	b580      	push	{r7, lr}
 800ffd2:	b08e      	sub	sp, #56	; 0x38
 800ffd4:	af00      	add	r7, sp, #0
 800ffd6:	6078      	str	r0, [r7, #4]
 800ffd8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800ffda:	2300      	movs	r3, #0
 800ffdc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ffde:	687b      	ldr	r3, [r7, #4]
 800ffe0:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800ffe2:	2300      	movs	r3, #0
 800ffe4:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800ffe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ffe8:	2b00      	cmp	r3, #0
 800ffea:	d10a      	bne.n	8010002 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800ffec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fff0:	f383 8811 	msr	BASEPRI, r3
 800fff4:	f3bf 8f6f 	isb	sy
 800fff8:	f3bf 8f4f 	dsb	sy
 800fffc:	623b      	str	r3, [r7, #32]
}
 800fffe:	bf00      	nop
 8010000:	e7fe      	b.n	8010000 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8010002:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010006:	2b00      	cmp	r3, #0
 8010008:	d00a      	beq.n	8010020 <xQueueSemaphoreTake+0x50>
	__asm volatile
 801000a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801000e:	f383 8811 	msr	BASEPRI, r3
 8010012:	f3bf 8f6f 	isb	sy
 8010016:	f3bf 8f4f 	dsb	sy
 801001a:	61fb      	str	r3, [r7, #28]
}
 801001c:	bf00      	nop
 801001e:	e7fe      	b.n	801001e <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8010020:	f000 ff62 	bl	8010ee8 <xTaskGetSchedulerState>
 8010024:	4603      	mov	r3, r0
 8010026:	2b00      	cmp	r3, #0
 8010028:	d102      	bne.n	8010030 <xQueueSemaphoreTake+0x60>
 801002a:	683b      	ldr	r3, [r7, #0]
 801002c:	2b00      	cmp	r3, #0
 801002e:	d101      	bne.n	8010034 <xQueueSemaphoreTake+0x64>
 8010030:	2301      	movs	r3, #1
 8010032:	e000      	b.n	8010036 <xQueueSemaphoreTake+0x66>
 8010034:	2300      	movs	r3, #0
 8010036:	2b00      	cmp	r3, #0
 8010038:	d10a      	bne.n	8010050 <xQueueSemaphoreTake+0x80>
	__asm volatile
 801003a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801003e:	f383 8811 	msr	BASEPRI, r3
 8010042:	f3bf 8f6f 	isb	sy
 8010046:	f3bf 8f4f 	dsb	sy
 801004a:	61bb      	str	r3, [r7, #24]
}
 801004c:	bf00      	nop
 801004e:	e7fe      	b.n	801004e <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8010050:	f001 fa98 	bl	8011584 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8010054:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010056:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010058:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 801005a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801005c:	2b00      	cmp	r3, #0
 801005e:	d024      	beq.n	80100aa <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8010060:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010062:	1e5a      	subs	r2, r3, #1
 8010064:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010066:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8010068:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801006a:	681b      	ldr	r3, [r3, #0]
 801006c:	2b00      	cmp	r3, #0
 801006e:	d104      	bne.n	801007a <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8010070:	f001 f8e2 	bl	8011238 <pvTaskIncrementMutexHeldCount>
 8010074:	4602      	mov	r2, r0
 8010076:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010078:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801007a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801007c:	691b      	ldr	r3, [r3, #16]
 801007e:	2b00      	cmp	r3, #0
 8010080:	d00f      	beq.n	80100a2 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010082:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010084:	3310      	adds	r3, #16
 8010086:	4618      	mov	r0, r3
 8010088:	f000 fd8c 	bl	8010ba4 <xTaskRemoveFromEventList>
 801008c:	4603      	mov	r3, r0
 801008e:	2b00      	cmp	r3, #0
 8010090:	d007      	beq.n	80100a2 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8010092:	4b54      	ldr	r3, [pc, #336]	; (80101e4 <xQueueSemaphoreTake+0x214>)
 8010094:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010098:	601a      	str	r2, [r3, #0]
 801009a:	f3bf 8f4f 	dsb	sy
 801009e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80100a2:	f001 fa9f 	bl	80115e4 <vPortExitCritical>
				return pdPASS;
 80100a6:	2301      	movs	r3, #1
 80100a8:	e097      	b.n	80101da <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80100aa:	683b      	ldr	r3, [r7, #0]
 80100ac:	2b00      	cmp	r3, #0
 80100ae:	d111      	bne.n	80100d4 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80100b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80100b2:	2b00      	cmp	r3, #0
 80100b4:	d00a      	beq.n	80100cc <xQueueSemaphoreTake+0xfc>
	__asm volatile
 80100b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80100ba:	f383 8811 	msr	BASEPRI, r3
 80100be:	f3bf 8f6f 	isb	sy
 80100c2:	f3bf 8f4f 	dsb	sy
 80100c6:	617b      	str	r3, [r7, #20]
}
 80100c8:	bf00      	nop
 80100ca:	e7fe      	b.n	80100ca <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80100cc:	f001 fa8a 	bl	80115e4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80100d0:	2300      	movs	r3, #0
 80100d2:	e082      	b.n	80101da <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80100d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80100d6:	2b00      	cmp	r3, #0
 80100d8:	d106      	bne.n	80100e8 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80100da:	f107 030c 	add.w	r3, r7, #12
 80100de:	4618      	mov	r0, r3
 80100e0:	f000 fdc2 	bl	8010c68 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80100e4:	2301      	movs	r3, #1
 80100e6:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80100e8:	f001 fa7c 	bl	80115e4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80100ec:	f000 fb72 	bl	80107d4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80100f0:	f001 fa48 	bl	8011584 <vPortEnterCritical>
 80100f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80100f6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80100fa:	b25b      	sxtb	r3, r3
 80100fc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010100:	d103      	bne.n	801010a <xQueueSemaphoreTake+0x13a>
 8010102:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010104:	2200      	movs	r2, #0
 8010106:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801010a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801010c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010110:	b25b      	sxtb	r3, r3
 8010112:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010116:	d103      	bne.n	8010120 <xQueueSemaphoreTake+0x150>
 8010118:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801011a:	2200      	movs	r2, #0
 801011c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8010120:	f001 fa60 	bl	80115e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8010124:	463a      	mov	r2, r7
 8010126:	f107 030c 	add.w	r3, r7, #12
 801012a:	4611      	mov	r1, r2
 801012c:	4618      	mov	r0, r3
 801012e:	f000 fdb1 	bl	8010c94 <xTaskCheckForTimeOut>
 8010132:	4603      	mov	r3, r0
 8010134:	2b00      	cmp	r3, #0
 8010136:	d132      	bne.n	801019e <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010138:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801013a:	f000 f94f 	bl	80103dc <prvIsQueueEmpty>
 801013e:	4603      	mov	r3, r0
 8010140:	2b00      	cmp	r3, #0
 8010142:	d026      	beq.n	8010192 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8010144:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010146:	681b      	ldr	r3, [r3, #0]
 8010148:	2b00      	cmp	r3, #0
 801014a:	d109      	bne.n	8010160 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 801014c:	f001 fa1a 	bl	8011584 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8010150:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010152:	689b      	ldr	r3, [r3, #8]
 8010154:	4618      	mov	r0, r3
 8010156:	f000 fee5 	bl	8010f24 <xTaskPriorityInherit>
 801015a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 801015c:	f001 fa42 	bl	80115e4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8010160:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010162:	3324      	adds	r3, #36	; 0x24
 8010164:	683a      	ldr	r2, [r7, #0]
 8010166:	4611      	mov	r1, r2
 8010168:	4618      	mov	r0, r3
 801016a:	f000 fcf7 	bl	8010b5c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801016e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010170:	f000 f8e2 	bl	8010338 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8010174:	f000 fb3c 	bl	80107f0 <xTaskResumeAll>
 8010178:	4603      	mov	r3, r0
 801017a:	2b00      	cmp	r3, #0
 801017c:	f47f af68 	bne.w	8010050 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8010180:	4b18      	ldr	r3, [pc, #96]	; (80101e4 <xQueueSemaphoreTake+0x214>)
 8010182:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010186:	601a      	str	r2, [r3, #0]
 8010188:	f3bf 8f4f 	dsb	sy
 801018c:	f3bf 8f6f 	isb	sy
 8010190:	e75e      	b.n	8010050 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8010192:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010194:	f000 f8d0 	bl	8010338 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8010198:	f000 fb2a 	bl	80107f0 <xTaskResumeAll>
 801019c:	e758      	b.n	8010050 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 801019e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80101a0:	f000 f8ca 	bl	8010338 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80101a4:	f000 fb24 	bl	80107f0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80101a8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80101aa:	f000 f917 	bl	80103dc <prvIsQueueEmpty>
 80101ae:	4603      	mov	r3, r0
 80101b0:	2b00      	cmp	r3, #0
 80101b2:	f43f af4d 	beq.w	8010050 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80101b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80101b8:	2b00      	cmp	r3, #0
 80101ba:	d00d      	beq.n	80101d8 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 80101bc:	f001 f9e2 	bl	8011584 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80101c0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80101c2:	f000 f811 	bl	80101e8 <prvGetDisinheritPriorityAfterTimeout>
 80101c6:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80101c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80101ca:	689b      	ldr	r3, [r3, #8]
 80101cc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80101ce:	4618      	mov	r0, r3
 80101d0:	f000 ffa4 	bl	801111c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80101d4:	f001 fa06 	bl	80115e4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80101d8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80101da:	4618      	mov	r0, r3
 80101dc:	3738      	adds	r7, #56	; 0x38
 80101de:	46bd      	mov	sp, r7
 80101e0:	bd80      	pop	{r7, pc}
 80101e2:	bf00      	nop
 80101e4:	e000ed04 	.word	0xe000ed04

080101e8 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80101e8:	b480      	push	{r7}
 80101ea:	b085      	sub	sp, #20
 80101ec:	af00      	add	r7, sp, #0
 80101ee:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80101f0:	687b      	ldr	r3, [r7, #4]
 80101f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80101f4:	2b00      	cmp	r3, #0
 80101f6:	d006      	beq.n	8010206 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80101f8:	687b      	ldr	r3, [r7, #4]
 80101fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80101fc:	681b      	ldr	r3, [r3, #0]
 80101fe:	f1c3 0320 	rsb	r3, r3, #32
 8010202:	60fb      	str	r3, [r7, #12]
 8010204:	e001      	b.n	801020a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8010206:	2300      	movs	r3, #0
 8010208:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 801020a:	68fb      	ldr	r3, [r7, #12]
	}
 801020c:	4618      	mov	r0, r3
 801020e:	3714      	adds	r7, #20
 8010210:	46bd      	mov	sp, r7
 8010212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010216:	4770      	bx	lr

08010218 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8010218:	b580      	push	{r7, lr}
 801021a:	b086      	sub	sp, #24
 801021c:	af00      	add	r7, sp, #0
 801021e:	60f8      	str	r0, [r7, #12]
 8010220:	60b9      	str	r1, [r7, #8]
 8010222:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8010224:	2300      	movs	r3, #0
 8010226:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010228:	68fb      	ldr	r3, [r7, #12]
 801022a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801022c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 801022e:	68fb      	ldr	r3, [r7, #12]
 8010230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010232:	2b00      	cmp	r3, #0
 8010234:	d10d      	bne.n	8010252 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8010236:	68fb      	ldr	r3, [r7, #12]
 8010238:	681b      	ldr	r3, [r3, #0]
 801023a:	2b00      	cmp	r3, #0
 801023c:	d14d      	bne.n	80102da <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 801023e:	68fb      	ldr	r3, [r7, #12]
 8010240:	689b      	ldr	r3, [r3, #8]
 8010242:	4618      	mov	r0, r3
 8010244:	f000 fee4 	bl	8011010 <xTaskPriorityDisinherit>
 8010248:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 801024a:	68fb      	ldr	r3, [r7, #12]
 801024c:	2200      	movs	r2, #0
 801024e:	609a      	str	r2, [r3, #8]
 8010250:	e043      	b.n	80102da <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8010252:	687b      	ldr	r3, [r7, #4]
 8010254:	2b00      	cmp	r3, #0
 8010256:	d119      	bne.n	801028c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8010258:	68fb      	ldr	r3, [r7, #12]
 801025a:	6858      	ldr	r0, [r3, #4]
 801025c:	68fb      	ldr	r3, [r7, #12]
 801025e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010260:	461a      	mov	r2, r3
 8010262:	68b9      	ldr	r1, [r7, #8]
 8010264:	f003 f904 	bl	8013470 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8010268:	68fb      	ldr	r3, [r7, #12]
 801026a:	685a      	ldr	r2, [r3, #4]
 801026c:	68fb      	ldr	r3, [r7, #12]
 801026e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010270:	441a      	add	r2, r3
 8010272:	68fb      	ldr	r3, [r7, #12]
 8010274:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8010276:	68fb      	ldr	r3, [r7, #12]
 8010278:	685a      	ldr	r2, [r3, #4]
 801027a:	68fb      	ldr	r3, [r7, #12]
 801027c:	689b      	ldr	r3, [r3, #8]
 801027e:	429a      	cmp	r2, r3
 8010280:	d32b      	bcc.n	80102da <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8010282:	68fb      	ldr	r3, [r7, #12]
 8010284:	681a      	ldr	r2, [r3, #0]
 8010286:	68fb      	ldr	r3, [r7, #12]
 8010288:	605a      	str	r2, [r3, #4]
 801028a:	e026      	b.n	80102da <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 801028c:	68fb      	ldr	r3, [r7, #12]
 801028e:	68d8      	ldr	r0, [r3, #12]
 8010290:	68fb      	ldr	r3, [r7, #12]
 8010292:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010294:	461a      	mov	r2, r3
 8010296:	68b9      	ldr	r1, [r7, #8]
 8010298:	f003 f8ea 	bl	8013470 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 801029c:	68fb      	ldr	r3, [r7, #12]
 801029e:	68da      	ldr	r2, [r3, #12]
 80102a0:	68fb      	ldr	r3, [r7, #12]
 80102a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80102a4:	425b      	negs	r3, r3
 80102a6:	441a      	add	r2, r3
 80102a8:	68fb      	ldr	r3, [r7, #12]
 80102aa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80102ac:	68fb      	ldr	r3, [r7, #12]
 80102ae:	68da      	ldr	r2, [r3, #12]
 80102b0:	68fb      	ldr	r3, [r7, #12]
 80102b2:	681b      	ldr	r3, [r3, #0]
 80102b4:	429a      	cmp	r2, r3
 80102b6:	d207      	bcs.n	80102c8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80102b8:	68fb      	ldr	r3, [r7, #12]
 80102ba:	689a      	ldr	r2, [r3, #8]
 80102bc:	68fb      	ldr	r3, [r7, #12]
 80102be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80102c0:	425b      	negs	r3, r3
 80102c2:	441a      	add	r2, r3
 80102c4:	68fb      	ldr	r3, [r7, #12]
 80102c6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80102c8:	687b      	ldr	r3, [r7, #4]
 80102ca:	2b02      	cmp	r3, #2
 80102cc:	d105      	bne.n	80102da <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80102ce:	693b      	ldr	r3, [r7, #16]
 80102d0:	2b00      	cmp	r3, #0
 80102d2:	d002      	beq.n	80102da <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80102d4:	693b      	ldr	r3, [r7, #16]
 80102d6:	3b01      	subs	r3, #1
 80102d8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80102da:	693b      	ldr	r3, [r7, #16]
 80102dc:	1c5a      	adds	r2, r3, #1
 80102de:	68fb      	ldr	r3, [r7, #12]
 80102e0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80102e2:	697b      	ldr	r3, [r7, #20]
}
 80102e4:	4618      	mov	r0, r3
 80102e6:	3718      	adds	r7, #24
 80102e8:	46bd      	mov	sp, r7
 80102ea:	bd80      	pop	{r7, pc}

080102ec <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80102ec:	b580      	push	{r7, lr}
 80102ee:	b082      	sub	sp, #8
 80102f0:	af00      	add	r7, sp, #0
 80102f2:	6078      	str	r0, [r7, #4]
 80102f4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80102f6:	687b      	ldr	r3, [r7, #4]
 80102f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80102fa:	2b00      	cmp	r3, #0
 80102fc:	d018      	beq.n	8010330 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80102fe:	687b      	ldr	r3, [r7, #4]
 8010300:	68da      	ldr	r2, [r3, #12]
 8010302:	687b      	ldr	r3, [r7, #4]
 8010304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010306:	441a      	add	r2, r3
 8010308:	687b      	ldr	r3, [r7, #4]
 801030a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 801030c:	687b      	ldr	r3, [r7, #4]
 801030e:	68da      	ldr	r2, [r3, #12]
 8010310:	687b      	ldr	r3, [r7, #4]
 8010312:	689b      	ldr	r3, [r3, #8]
 8010314:	429a      	cmp	r2, r3
 8010316:	d303      	bcc.n	8010320 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8010318:	687b      	ldr	r3, [r7, #4]
 801031a:	681a      	ldr	r2, [r3, #0]
 801031c:	687b      	ldr	r3, [r7, #4]
 801031e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8010320:	687b      	ldr	r3, [r7, #4]
 8010322:	68d9      	ldr	r1, [r3, #12]
 8010324:	687b      	ldr	r3, [r7, #4]
 8010326:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010328:	461a      	mov	r2, r3
 801032a:	6838      	ldr	r0, [r7, #0]
 801032c:	f003 f8a0 	bl	8013470 <memcpy>
	}
}
 8010330:	bf00      	nop
 8010332:	3708      	adds	r7, #8
 8010334:	46bd      	mov	sp, r7
 8010336:	bd80      	pop	{r7, pc}

08010338 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8010338:	b580      	push	{r7, lr}
 801033a:	b084      	sub	sp, #16
 801033c:	af00      	add	r7, sp, #0
 801033e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8010340:	f001 f920 	bl	8011584 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8010344:	687b      	ldr	r3, [r7, #4]
 8010346:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801034a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801034c:	e011      	b.n	8010372 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801034e:	687b      	ldr	r3, [r7, #4]
 8010350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010352:	2b00      	cmp	r3, #0
 8010354:	d012      	beq.n	801037c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010356:	687b      	ldr	r3, [r7, #4]
 8010358:	3324      	adds	r3, #36	; 0x24
 801035a:	4618      	mov	r0, r3
 801035c:	f000 fc22 	bl	8010ba4 <xTaskRemoveFromEventList>
 8010360:	4603      	mov	r3, r0
 8010362:	2b00      	cmp	r3, #0
 8010364:	d001      	beq.n	801036a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8010366:	f000 fcf7 	bl	8010d58 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 801036a:	7bfb      	ldrb	r3, [r7, #15]
 801036c:	3b01      	subs	r3, #1
 801036e:	b2db      	uxtb	r3, r3
 8010370:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8010372:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010376:	2b00      	cmp	r3, #0
 8010378:	dce9      	bgt.n	801034e <prvUnlockQueue+0x16>
 801037a:	e000      	b.n	801037e <prvUnlockQueue+0x46>
					break;
 801037c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 801037e:	687b      	ldr	r3, [r7, #4]
 8010380:	22ff      	movs	r2, #255	; 0xff
 8010382:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8010386:	f001 f92d 	bl	80115e4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 801038a:	f001 f8fb 	bl	8011584 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 801038e:	687b      	ldr	r3, [r7, #4]
 8010390:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010394:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8010396:	e011      	b.n	80103bc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010398:	687b      	ldr	r3, [r7, #4]
 801039a:	691b      	ldr	r3, [r3, #16]
 801039c:	2b00      	cmp	r3, #0
 801039e:	d012      	beq.n	80103c6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80103a0:	687b      	ldr	r3, [r7, #4]
 80103a2:	3310      	adds	r3, #16
 80103a4:	4618      	mov	r0, r3
 80103a6:	f000 fbfd 	bl	8010ba4 <xTaskRemoveFromEventList>
 80103aa:	4603      	mov	r3, r0
 80103ac:	2b00      	cmp	r3, #0
 80103ae:	d001      	beq.n	80103b4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80103b0:	f000 fcd2 	bl	8010d58 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80103b4:	7bbb      	ldrb	r3, [r7, #14]
 80103b6:	3b01      	subs	r3, #1
 80103b8:	b2db      	uxtb	r3, r3
 80103ba:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80103bc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80103c0:	2b00      	cmp	r3, #0
 80103c2:	dce9      	bgt.n	8010398 <prvUnlockQueue+0x60>
 80103c4:	e000      	b.n	80103c8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80103c6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80103c8:	687b      	ldr	r3, [r7, #4]
 80103ca:	22ff      	movs	r2, #255	; 0xff
 80103cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80103d0:	f001 f908 	bl	80115e4 <vPortExitCritical>
}
 80103d4:	bf00      	nop
 80103d6:	3710      	adds	r7, #16
 80103d8:	46bd      	mov	sp, r7
 80103da:	bd80      	pop	{r7, pc}

080103dc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80103dc:	b580      	push	{r7, lr}
 80103de:	b084      	sub	sp, #16
 80103e0:	af00      	add	r7, sp, #0
 80103e2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80103e4:	f001 f8ce 	bl	8011584 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80103e8:	687b      	ldr	r3, [r7, #4]
 80103ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80103ec:	2b00      	cmp	r3, #0
 80103ee:	d102      	bne.n	80103f6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80103f0:	2301      	movs	r3, #1
 80103f2:	60fb      	str	r3, [r7, #12]
 80103f4:	e001      	b.n	80103fa <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80103f6:	2300      	movs	r3, #0
 80103f8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80103fa:	f001 f8f3 	bl	80115e4 <vPortExitCritical>

	return xReturn;
 80103fe:	68fb      	ldr	r3, [r7, #12]
}
 8010400:	4618      	mov	r0, r3
 8010402:	3710      	adds	r7, #16
 8010404:	46bd      	mov	sp, r7
 8010406:	bd80      	pop	{r7, pc}

08010408 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8010408:	b580      	push	{r7, lr}
 801040a:	b084      	sub	sp, #16
 801040c:	af00      	add	r7, sp, #0
 801040e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8010410:	f001 f8b8 	bl	8011584 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8010414:	687b      	ldr	r3, [r7, #4]
 8010416:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010418:	687b      	ldr	r3, [r7, #4]
 801041a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801041c:	429a      	cmp	r2, r3
 801041e:	d102      	bne.n	8010426 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8010420:	2301      	movs	r3, #1
 8010422:	60fb      	str	r3, [r7, #12]
 8010424:	e001      	b.n	801042a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8010426:	2300      	movs	r3, #0
 8010428:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801042a:	f001 f8db 	bl	80115e4 <vPortExitCritical>

	return xReturn;
 801042e:	68fb      	ldr	r3, [r7, #12]
}
 8010430:	4618      	mov	r0, r3
 8010432:	3710      	adds	r7, #16
 8010434:	46bd      	mov	sp, r7
 8010436:	bd80      	pop	{r7, pc}

08010438 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8010438:	b580      	push	{r7, lr}
 801043a:	b08c      	sub	sp, #48	; 0x30
 801043c:	af04      	add	r7, sp, #16
 801043e:	60f8      	str	r0, [r7, #12]
 8010440:	60b9      	str	r1, [r7, #8]
 8010442:	603b      	str	r3, [r7, #0]
 8010444:	4613      	mov	r3, r2
 8010446:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8010448:	88fb      	ldrh	r3, [r7, #6]
 801044a:	009b      	lsls	r3, r3, #2
 801044c:	4618      	mov	r0, r3
 801044e:	f001 f9bb 	bl	80117c8 <pvPortMalloc>
 8010452:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8010454:	697b      	ldr	r3, [r7, #20]
 8010456:	2b00      	cmp	r3, #0
 8010458:	d00e      	beq.n	8010478 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 801045a:	20a0      	movs	r0, #160	; 0xa0
 801045c:	f001 f9b4 	bl	80117c8 <pvPortMalloc>
 8010460:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8010462:	69fb      	ldr	r3, [r7, #28]
 8010464:	2b00      	cmp	r3, #0
 8010466:	d003      	beq.n	8010470 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8010468:	69fb      	ldr	r3, [r7, #28]
 801046a:	697a      	ldr	r2, [r7, #20]
 801046c:	631a      	str	r2, [r3, #48]	; 0x30
 801046e:	e005      	b.n	801047c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8010470:	6978      	ldr	r0, [r7, #20]
 8010472:	f001 fa75 	bl	8011960 <vPortFree>
 8010476:	e001      	b.n	801047c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8010478:	2300      	movs	r3, #0
 801047a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 801047c:	69fb      	ldr	r3, [r7, #28]
 801047e:	2b00      	cmp	r3, #0
 8010480:	d013      	beq.n	80104aa <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8010482:	88fa      	ldrh	r2, [r7, #6]
 8010484:	2300      	movs	r3, #0
 8010486:	9303      	str	r3, [sp, #12]
 8010488:	69fb      	ldr	r3, [r7, #28]
 801048a:	9302      	str	r3, [sp, #8]
 801048c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801048e:	9301      	str	r3, [sp, #4]
 8010490:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010492:	9300      	str	r3, [sp, #0]
 8010494:	683b      	ldr	r3, [r7, #0]
 8010496:	68b9      	ldr	r1, [r7, #8]
 8010498:	68f8      	ldr	r0, [r7, #12]
 801049a:	f000 f80f 	bl	80104bc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801049e:	69f8      	ldr	r0, [r7, #28]
 80104a0:	f000 f8aa 	bl	80105f8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80104a4:	2301      	movs	r3, #1
 80104a6:	61bb      	str	r3, [r7, #24]
 80104a8:	e002      	b.n	80104b0 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80104aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80104ae:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80104b0:	69bb      	ldr	r3, [r7, #24]
	}
 80104b2:	4618      	mov	r0, r3
 80104b4:	3720      	adds	r7, #32
 80104b6:	46bd      	mov	sp, r7
 80104b8:	bd80      	pop	{r7, pc}
	...

080104bc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80104bc:	b580      	push	{r7, lr}
 80104be:	b088      	sub	sp, #32
 80104c0:	af00      	add	r7, sp, #0
 80104c2:	60f8      	str	r0, [r7, #12]
 80104c4:	60b9      	str	r1, [r7, #8]
 80104c6:	607a      	str	r2, [r7, #4]
 80104c8:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80104ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80104cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80104ce:	687b      	ldr	r3, [r7, #4]
 80104d0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80104d4:	3b01      	subs	r3, #1
 80104d6:	009b      	lsls	r3, r3, #2
 80104d8:	4413      	add	r3, r2
 80104da:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80104dc:	69bb      	ldr	r3, [r7, #24]
 80104de:	f023 0307 	bic.w	r3, r3, #7
 80104e2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80104e4:	69bb      	ldr	r3, [r7, #24]
 80104e6:	f003 0307 	and.w	r3, r3, #7
 80104ea:	2b00      	cmp	r3, #0
 80104ec:	d00a      	beq.n	8010504 <prvInitialiseNewTask+0x48>
	__asm volatile
 80104ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80104f2:	f383 8811 	msr	BASEPRI, r3
 80104f6:	f3bf 8f6f 	isb	sy
 80104fa:	f3bf 8f4f 	dsb	sy
 80104fe:	617b      	str	r3, [r7, #20]
}
 8010500:	bf00      	nop
 8010502:	e7fe      	b.n	8010502 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8010504:	68bb      	ldr	r3, [r7, #8]
 8010506:	2b00      	cmp	r3, #0
 8010508:	d01f      	beq.n	801054a <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801050a:	2300      	movs	r3, #0
 801050c:	61fb      	str	r3, [r7, #28]
 801050e:	e012      	b.n	8010536 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8010510:	68ba      	ldr	r2, [r7, #8]
 8010512:	69fb      	ldr	r3, [r7, #28]
 8010514:	4413      	add	r3, r2
 8010516:	7819      	ldrb	r1, [r3, #0]
 8010518:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801051a:	69fb      	ldr	r3, [r7, #28]
 801051c:	4413      	add	r3, r2
 801051e:	3334      	adds	r3, #52	; 0x34
 8010520:	460a      	mov	r2, r1
 8010522:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8010524:	68ba      	ldr	r2, [r7, #8]
 8010526:	69fb      	ldr	r3, [r7, #28]
 8010528:	4413      	add	r3, r2
 801052a:	781b      	ldrb	r3, [r3, #0]
 801052c:	2b00      	cmp	r3, #0
 801052e:	d006      	beq.n	801053e <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8010530:	69fb      	ldr	r3, [r7, #28]
 8010532:	3301      	adds	r3, #1
 8010534:	61fb      	str	r3, [r7, #28]
 8010536:	69fb      	ldr	r3, [r7, #28]
 8010538:	2b0f      	cmp	r3, #15
 801053a:	d9e9      	bls.n	8010510 <prvInitialiseNewTask+0x54>
 801053c:	e000      	b.n	8010540 <prvInitialiseNewTask+0x84>
			{
				break;
 801053e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8010540:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010542:	2200      	movs	r2, #0
 8010544:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8010548:	e003      	b.n	8010552 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 801054a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801054c:	2200      	movs	r2, #0
 801054e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8010552:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010554:	2b1f      	cmp	r3, #31
 8010556:	d901      	bls.n	801055c <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8010558:	231f      	movs	r3, #31
 801055a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 801055c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801055e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010560:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8010562:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010564:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010566:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8010568:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801056a:	2200      	movs	r2, #0
 801056c:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 801056e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010570:	3304      	adds	r3, #4
 8010572:	4618      	mov	r0, r3
 8010574:	f7ff f92d 	bl	800f7d2 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8010578:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801057a:	3318      	adds	r3, #24
 801057c:	4618      	mov	r0, r3
 801057e:	f7ff f928 	bl	800f7d2 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8010582:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010584:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010586:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010588:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801058a:	f1c3 0220 	rsb	r2, r3, #32
 801058e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010590:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8010592:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010594:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010596:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8010598:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801059a:	2200      	movs	r2, #0
 801059c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80105a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80105a2:	2200      	movs	r2, #0
 80105a4:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80105a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80105aa:	334c      	adds	r3, #76	; 0x4c
 80105ac:	224c      	movs	r2, #76	; 0x4c
 80105ae:	2100      	movs	r1, #0
 80105b0:	4618      	mov	r0, r3
 80105b2:	f002 fe89 	bl	80132c8 <memset>
 80105b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80105b8:	4a0c      	ldr	r2, [pc, #48]	; (80105ec <prvInitialiseNewTask+0x130>)
 80105ba:	651a      	str	r2, [r3, #80]	; 0x50
 80105bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80105be:	4a0c      	ldr	r2, [pc, #48]	; (80105f0 <prvInitialiseNewTask+0x134>)
 80105c0:	655a      	str	r2, [r3, #84]	; 0x54
 80105c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80105c4:	4a0b      	ldr	r2, [pc, #44]	; (80105f4 <prvInitialiseNewTask+0x138>)
 80105c6:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80105c8:	683a      	ldr	r2, [r7, #0]
 80105ca:	68f9      	ldr	r1, [r7, #12]
 80105cc:	69b8      	ldr	r0, [r7, #24]
 80105ce:	f000 fead 	bl	801132c <pxPortInitialiseStack>
 80105d2:	4602      	mov	r2, r0
 80105d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80105d6:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80105d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80105da:	2b00      	cmp	r3, #0
 80105dc:	d002      	beq.n	80105e4 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80105de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80105e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80105e2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80105e4:	bf00      	nop
 80105e6:	3720      	adds	r7, #32
 80105e8:	46bd      	mov	sp, r7
 80105ea:	bd80      	pop	{r7, pc}
 80105ec:	200066ac 	.word	0x200066ac
 80105f0:	20006714 	.word	0x20006714
 80105f4:	2000677c 	.word	0x2000677c

080105f8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80105f8:	b580      	push	{r7, lr}
 80105fa:	b082      	sub	sp, #8
 80105fc:	af00      	add	r7, sp, #0
 80105fe:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8010600:	f000 ffc0 	bl	8011584 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8010604:	4b2a      	ldr	r3, [pc, #168]	; (80106b0 <prvAddNewTaskToReadyList+0xb8>)
 8010606:	681b      	ldr	r3, [r3, #0]
 8010608:	3301      	adds	r3, #1
 801060a:	4a29      	ldr	r2, [pc, #164]	; (80106b0 <prvAddNewTaskToReadyList+0xb8>)
 801060c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 801060e:	4b29      	ldr	r3, [pc, #164]	; (80106b4 <prvAddNewTaskToReadyList+0xbc>)
 8010610:	681b      	ldr	r3, [r3, #0]
 8010612:	2b00      	cmp	r3, #0
 8010614:	d109      	bne.n	801062a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8010616:	4a27      	ldr	r2, [pc, #156]	; (80106b4 <prvAddNewTaskToReadyList+0xbc>)
 8010618:	687b      	ldr	r3, [r7, #4]
 801061a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 801061c:	4b24      	ldr	r3, [pc, #144]	; (80106b0 <prvAddNewTaskToReadyList+0xb8>)
 801061e:	681b      	ldr	r3, [r3, #0]
 8010620:	2b01      	cmp	r3, #1
 8010622:	d110      	bne.n	8010646 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8010624:	f000 fbbc 	bl	8010da0 <prvInitialiseTaskLists>
 8010628:	e00d      	b.n	8010646 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 801062a:	4b23      	ldr	r3, [pc, #140]	; (80106b8 <prvAddNewTaskToReadyList+0xc0>)
 801062c:	681b      	ldr	r3, [r3, #0]
 801062e:	2b00      	cmp	r3, #0
 8010630:	d109      	bne.n	8010646 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8010632:	4b20      	ldr	r3, [pc, #128]	; (80106b4 <prvAddNewTaskToReadyList+0xbc>)
 8010634:	681b      	ldr	r3, [r3, #0]
 8010636:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010638:	687b      	ldr	r3, [r7, #4]
 801063a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801063c:	429a      	cmp	r2, r3
 801063e:	d802      	bhi.n	8010646 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8010640:	4a1c      	ldr	r2, [pc, #112]	; (80106b4 <prvAddNewTaskToReadyList+0xbc>)
 8010642:	687b      	ldr	r3, [r7, #4]
 8010644:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8010646:	4b1d      	ldr	r3, [pc, #116]	; (80106bc <prvAddNewTaskToReadyList+0xc4>)
 8010648:	681b      	ldr	r3, [r3, #0]
 801064a:	3301      	adds	r3, #1
 801064c:	4a1b      	ldr	r2, [pc, #108]	; (80106bc <prvAddNewTaskToReadyList+0xc4>)
 801064e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8010650:	687b      	ldr	r3, [r7, #4]
 8010652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010654:	2201      	movs	r2, #1
 8010656:	409a      	lsls	r2, r3
 8010658:	4b19      	ldr	r3, [pc, #100]	; (80106c0 <prvAddNewTaskToReadyList+0xc8>)
 801065a:	681b      	ldr	r3, [r3, #0]
 801065c:	4313      	orrs	r3, r2
 801065e:	4a18      	ldr	r2, [pc, #96]	; (80106c0 <prvAddNewTaskToReadyList+0xc8>)
 8010660:	6013      	str	r3, [r2, #0]
 8010662:	687b      	ldr	r3, [r7, #4]
 8010664:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010666:	4613      	mov	r3, r2
 8010668:	009b      	lsls	r3, r3, #2
 801066a:	4413      	add	r3, r2
 801066c:	009b      	lsls	r3, r3, #2
 801066e:	4a15      	ldr	r2, [pc, #84]	; (80106c4 <prvAddNewTaskToReadyList+0xcc>)
 8010670:	441a      	add	r2, r3
 8010672:	687b      	ldr	r3, [r7, #4]
 8010674:	3304      	adds	r3, #4
 8010676:	4619      	mov	r1, r3
 8010678:	4610      	mov	r0, r2
 801067a:	f7ff f8b7 	bl	800f7ec <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 801067e:	f000 ffb1 	bl	80115e4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8010682:	4b0d      	ldr	r3, [pc, #52]	; (80106b8 <prvAddNewTaskToReadyList+0xc0>)
 8010684:	681b      	ldr	r3, [r3, #0]
 8010686:	2b00      	cmp	r3, #0
 8010688:	d00e      	beq.n	80106a8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 801068a:	4b0a      	ldr	r3, [pc, #40]	; (80106b4 <prvAddNewTaskToReadyList+0xbc>)
 801068c:	681b      	ldr	r3, [r3, #0]
 801068e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010690:	687b      	ldr	r3, [r7, #4]
 8010692:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010694:	429a      	cmp	r2, r3
 8010696:	d207      	bcs.n	80106a8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8010698:	4b0b      	ldr	r3, [pc, #44]	; (80106c8 <prvAddNewTaskToReadyList+0xd0>)
 801069a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801069e:	601a      	str	r2, [r3, #0]
 80106a0:	f3bf 8f4f 	dsb	sy
 80106a4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80106a8:	bf00      	nop
 80106aa:	3708      	adds	r7, #8
 80106ac:	46bd      	mov	sp, r7
 80106ae:	bd80      	pop	{r7, pc}
 80106b0:	20000c74 	.word	0x20000c74
 80106b4:	20000980 	.word	0x20000980
 80106b8:	20000c80 	.word	0x20000c80
 80106bc:	20000c90 	.word	0x20000c90
 80106c0:	20000c7c 	.word	0x20000c7c
 80106c4:	20000984 	.word	0x20000984
 80106c8:	e000ed04 	.word	0xe000ed04

080106cc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80106cc:	b580      	push	{r7, lr}
 80106ce:	b084      	sub	sp, #16
 80106d0:	af00      	add	r7, sp, #0
 80106d2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80106d4:	2300      	movs	r3, #0
 80106d6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80106d8:	687b      	ldr	r3, [r7, #4]
 80106da:	2b00      	cmp	r3, #0
 80106dc:	d017      	beq.n	801070e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80106de:	4b13      	ldr	r3, [pc, #76]	; (801072c <vTaskDelay+0x60>)
 80106e0:	681b      	ldr	r3, [r3, #0]
 80106e2:	2b00      	cmp	r3, #0
 80106e4:	d00a      	beq.n	80106fc <vTaskDelay+0x30>
	__asm volatile
 80106e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80106ea:	f383 8811 	msr	BASEPRI, r3
 80106ee:	f3bf 8f6f 	isb	sy
 80106f2:	f3bf 8f4f 	dsb	sy
 80106f6:	60bb      	str	r3, [r7, #8]
}
 80106f8:	bf00      	nop
 80106fa:	e7fe      	b.n	80106fa <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80106fc:	f000 f86a 	bl	80107d4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8010700:	2100      	movs	r1, #0
 8010702:	6878      	ldr	r0, [r7, #4]
 8010704:	f000 fdac 	bl	8011260 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8010708:	f000 f872 	bl	80107f0 <xTaskResumeAll>
 801070c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 801070e:	68fb      	ldr	r3, [r7, #12]
 8010710:	2b00      	cmp	r3, #0
 8010712:	d107      	bne.n	8010724 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8010714:	4b06      	ldr	r3, [pc, #24]	; (8010730 <vTaskDelay+0x64>)
 8010716:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801071a:	601a      	str	r2, [r3, #0]
 801071c:	f3bf 8f4f 	dsb	sy
 8010720:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8010724:	bf00      	nop
 8010726:	3710      	adds	r7, #16
 8010728:	46bd      	mov	sp, r7
 801072a:	bd80      	pop	{r7, pc}
 801072c:	20000c9c 	.word	0x20000c9c
 8010730:	e000ed04 	.word	0xe000ed04

08010734 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8010734:	b580      	push	{r7, lr}
 8010736:	b086      	sub	sp, #24
 8010738:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 801073a:	4b1e      	ldr	r3, [pc, #120]	; (80107b4 <vTaskStartScheduler+0x80>)
 801073c:	9301      	str	r3, [sp, #4]
 801073e:	2300      	movs	r3, #0
 8010740:	9300      	str	r3, [sp, #0]
 8010742:	2300      	movs	r3, #0
 8010744:	2280      	movs	r2, #128	; 0x80
 8010746:	491c      	ldr	r1, [pc, #112]	; (80107b8 <vTaskStartScheduler+0x84>)
 8010748:	481c      	ldr	r0, [pc, #112]	; (80107bc <vTaskStartScheduler+0x88>)
 801074a:	f7ff fe75 	bl	8010438 <xTaskCreate>
 801074e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8010750:	68fb      	ldr	r3, [r7, #12]
 8010752:	2b01      	cmp	r3, #1
 8010754:	d11b      	bne.n	801078e <vTaskStartScheduler+0x5a>
	__asm volatile
 8010756:	f04f 0350 	mov.w	r3, #80	; 0x50
 801075a:	f383 8811 	msr	BASEPRI, r3
 801075e:	f3bf 8f6f 	isb	sy
 8010762:	f3bf 8f4f 	dsb	sy
 8010766:	60bb      	str	r3, [r7, #8]
}
 8010768:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 801076a:	4b15      	ldr	r3, [pc, #84]	; (80107c0 <vTaskStartScheduler+0x8c>)
 801076c:	681b      	ldr	r3, [r3, #0]
 801076e:	334c      	adds	r3, #76	; 0x4c
 8010770:	4a14      	ldr	r2, [pc, #80]	; (80107c4 <vTaskStartScheduler+0x90>)
 8010772:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8010774:	4b14      	ldr	r3, [pc, #80]	; (80107c8 <vTaskStartScheduler+0x94>)
 8010776:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801077a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 801077c:	4b13      	ldr	r3, [pc, #76]	; (80107cc <vTaskStartScheduler+0x98>)
 801077e:	2201      	movs	r2, #1
 8010780:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8010782:	4b13      	ldr	r3, [pc, #76]	; (80107d0 <vTaskStartScheduler+0x9c>)
 8010784:	2200      	movs	r2, #0
 8010786:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8010788:	f000 fe5a 	bl	8011440 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 801078c:	e00e      	b.n	80107ac <vTaskStartScheduler+0x78>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 801078e:	68fb      	ldr	r3, [r7, #12]
 8010790:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010794:	d10a      	bne.n	80107ac <vTaskStartScheduler+0x78>
	__asm volatile
 8010796:	f04f 0350 	mov.w	r3, #80	; 0x50
 801079a:	f383 8811 	msr	BASEPRI, r3
 801079e:	f3bf 8f6f 	isb	sy
 80107a2:	f3bf 8f4f 	dsb	sy
 80107a6:	607b      	str	r3, [r7, #4]
}
 80107a8:	bf00      	nop
 80107aa:	e7fe      	b.n	80107aa <vTaskStartScheduler+0x76>
}
 80107ac:	bf00      	nop
 80107ae:	3710      	adds	r7, #16
 80107b0:	46bd      	mov	sp, r7
 80107b2:	bd80      	pop	{r7, pc}
 80107b4:	20000c98 	.word	0x20000c98
 80107b8:	08015908 	.word	0x08015908
 80107bc:	08010d71 	.word	0x08010d71
 80107c0:	20000980 	.word	0x20000980
 80107c4:	200001e0 	.word	0x200001e0
 80107c8:	20000c94 	.word	0x20000c94
 80107cc:	20000c80 	.word	0x20000c80
 80107d0:	20000c78 	.word	0x20000c78

080107d4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80107d4:	b480      	push	{r7}
 80107d6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80107d8:	4b04      	ldr	r3, [pc, #16]	; (80107ec <vTaskSuspendAll+0x18>)
 80107da:	681b      	ldr	r3, [r3, #0]
 80107dc:	3301      	adds	r3, #1
 80107de:	4a03      	ldr	r2, [pc, #12]	; (80107ec <vTaskSuspendAll+0x18>)
 80107e0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80107e2:	bf00      	nop
 80107e4:	46bd      	mov	sp, r7
 80107e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107ea:	4770      	bx	lr
 80107ec:	20000c9c 	.word	0x20000c9c

080107f0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80107f0:	b580      	push	{r7, lr}
 80107f2:	b084      	sub	sp, #16
 80107f4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80107f6:	2300      	movs	r3, #0
 80107f8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80107fa:	2300      	movs	r3, #0
 80107fc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80107fe:	4b41      	ldr	r3, [pc, #260]	; (8010904 <xTaskResumeAll+0x114>)
 8010800:	681b      	ldr	r3, [r3, #0]
 8010802:	2b00      	cmp	r3, #0
 8010804:	d10a      	bne.n	801081c <xTaskResumeAll+0x2c>
	__asm volatile
 8010806:	f04f 0350 	mov.w	r3, #80	; 0x50
 801080a:	f383 8811 	msr	BASEPRI, r3
 801080e:	f3bf 8f6f 	isb	sy
 8010812:	f3bf 8f4f 	dsb	sy
 8010816:	603b      	str	r3, [r7, #0]
}
 8010818:	bf00      	nop
 801081a:	e7fe      	b.n	801081a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 801081c:	f000 feb2 	bl	8011584 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8010820:	4b38      	ldr	r3, [pc, #224]	; (8010904 <xTaskResumeAll+0x114>)
 8010822:	681b      	ldr	r3, [r3, #0]
 8010824:	3b01      	subs	r3, #1
 8010826:	4a37      	ldr	r2, [pc, #220]	; (8010904 <xTaskResumeAll+0x114>)
 8010828:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801082a:	4b36      	ldr	r3, [pc, #216]	; (8010904 <xTaskResumeAll+0x114>)
 801082c:	681b      	ldr	r3, [r3, #0]
 801082e:	2b00      	cmp	r3, #0
 8010830:	d161      	bne.n	80108f6 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8010832:	4b35      	ldr	r3, [pc, #212]	; (8010908 <xTaskResumeAll+0x118>)
 8010834:	681b      	ldr	r3, [r3, #0]
 8010836:	2b00      	cmp	r3, #0
 8010838:	d05d      	beq.n	80108f6 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801083a:	e02e      	b.n	801089a <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801083c:	4b33      	ldr	r3, [pc, #204]	; (801090c <xTaskResumeAll+0x11c>)
 801083e:	68db      	ldr	r3, [r3, #12]
 8010840:	68db      	ldr	r3, [r3, #12]
 8010842:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8010844:	68fb      	ldr	r3, [r7, #12]
 8010846:	3318      	adds	r3, #24
 8010848:	4618      	mov	r0, r3
 801084a:	f7ff f82c 	bl	800f8a6 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801084e:	68fb      	ldr	r3, [r7, #12]
 8010850:	3304      	adds	r3, #4
 8010852:	4618      	mov	r0, r3
 8010854:	f7ff f827 	bl	800f8a6 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8010858:	68fb      	ldr	r3, [r7, #12]
 801085a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801085c:	2201      	movs	r2, #1
 801085e:	409a      	lsls	r2, r3
 8010860:	4b2b      	ldr	r3, [pc, #172]	; (8010910 <xTaskResumeAll+0x120>)
 8010862:	681b      	ldr	r3, [r3, #0]
 8010864:	4313      	orrs	r3, r2
 8010866:	4a2a      	ldr	r2, [pc, #168]	; (8010910 <xTaskResumeAll+0x120>)
 8010868:	6013      	str	r3, [r2, #0]
 801086a:	68fb      	ldr	r3, [r7, #12]
 801086c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801086e:	4613      	mov	r3, r2
 8010870:	009b      	lsls	r3, r3, #2
 8010872:	4413      	add	r3, r2
 8010874:	009b      	lsls	r3, r3, #2
 8010876:	4a27      	ldr	r2, [pc, #156]	; (8010914 <xTaskResumeAll+0x124>)
 8010878:	441a      	add	r2, r3
 801087a:	68fb      	ldr	r3, [r7, #12]
 801087c:	3304      	adds	r3, #4
 801087e:	4619      	mov	r1, r3
 8010880:	4610      	mov	r0, r2
 8010882:	f7fe ffb3 	bl	800f7ec <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8010886:	68fb      	ldr	r3, [r7, #12]
 8010888:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801088a:	4b23      	ldr	r3, [pc, #140]	; (8010918 <xTaskResumeAll+0x128>)
 801088c:	681b      	ldr	r3, [r3, #0]
 801088e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010890:	429a      	cmp	r2, r3
 8010892:	d302      	bcc.n	801089a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8010894:	4b21      	ldr	r3, [pc, #132]	; (801091c <xTaskResumeAll+0x12c>)
 8010896:	2201      	movs	r2, #1
 8010898:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801089a:	4b1c      	ldr	r3, [pc, #112]	; (801090c <xTaskResumeAll+0x11c>)
 801089c:	681b      	ldr	r3, [r3, #0]
 801089e:	2b00      	cmp	r3, #0
 80108a0:	d1cc      	bne.n	801083c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80108a2:	68fb      	ldr	r3, [r7, #12]
 80108a4:	2b00      	cmp	r3, #0
 80108a6:	d001      	beq.n	80108ac <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80108a8:	f000 fafe 	bl	8010ea8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80108ac:	4b1c      	ldr	r3, [pc, #112]	; (8010920 <xTaskResumeAll+0x130>)
 80108ae:	681b      	ldr	r3, [r3, #0]
 80108b0:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80108b2:	687b      	ldr	r3, [r7, #4]
 80108b4:	2b00      	cmp	r3, #0
 80108b6:	d010      	beq.n	80108da <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80108b8:	f000 f836 	bl	8010928 <xTaskIncrementTick>
 80108bc:	4603      	mov	r3, r0
 80108be:	2b00      	cmp	r3, #0
 80108c0:	d002      	beq.n	80108c8 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80108c2:	4b16      	ldr	r3, [pc, #88]	; (801091c <xTaskResumeAll+0x12c>)
 80108c4:	2201      	movs	r2, #1
 80108c6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80108c8:	687b      	ldr	r3, [r7, #4]
 80108ca:	3b01      	subs	r3, #1
 80108cc:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80108ce:	687b      	ldr	r3, [r7, #4]
 80108d0:	2b00      	cmp	r3, #0
 80108d2:	d1f1      	bne.n	80108b8 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 80108d4:	4b12      	ldr	r3, [pc, #72]	; (8010920 <xTaskResumeAll+0x130>)
 80108d6:	2200      	movs	r2, #0
 80108d8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80108da:	4b10      	ldr	r3, [pc, #64]	; (801091c <xTaskResumeAll+0x12c>)
 80108dc:	681b      	ldr	r3, [r3, #0]
 80108de:	2b00      	cmp	r3, #0
 80108e0:	d009      	beq.n	80108f6 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80108e2:	2301      	movs	r3, #1
 80108e4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80108e6:	4b0f      	ldr	r3, [pc, #60]	; (8010924 <xTaskResumeAll+0x134>)
 80108e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80108ec:	601a      	str	r2, [r3, #0]
 80108ee:	f3bf 8f4f 	dsb	sy
 80108f2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80108f6:	f000 fe75 	bl	80115e4 <vPortExitCritical>

	return xAlreadyYielded;
 80108fa:	68bb      	ldr	r3, [r7, #8]
}
 80108fc:	4618      	mov	r0, r3
 80108fe:	3710      	adds	r7, #16
 8010900:	46bd      	mov	sp, r7
 8010902:	bd80      	pop	{r7, pc}
 8010904:	20000c9c 	.word	0x20000c9c
 8010908:	20000c74 	.word	0x20000c74
 801090c:	20000c34 	.word	0x20000c34
 8010910:	20000c7c 	.word	0x20000c7c
 8010914:	20000984 	.word	0x20000984
 8010918:	20000980 	.word	0x20000980
 801091c:	20000c88 	.word	0x20000c88
 8010920:	20000c84 	.word	0x20000c84
 8010924:	e000ed04 	.word	0xe000ed04

08010928 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8010928:	b580      	push	{r7, lr}
 801092a:	b086      	sub	sp, #24
 801092c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 801092e:	2300      	movs	r3, #0
 8010930:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010932:	4b4e      	ldr	r3, [pc, #312]	; (8010a6c <xTaskIncrementTick+0x144>)
 8010934:	681b      	ldr	r3, [r3, #0]
 8010936:	2b00      	cmp	r3, #0
 8010938:	f040 808e 	bne.w	8010a58 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 801093c:	4b4c      	ldr	r3, [pc, #304]	; (8010a70 <xTaskIncrementTick+0x148>)
 801093e:	681b      	ldr	r3, [r3, #0]
 8010940:	3301      	adds	r3, #1
 8010942:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8010944:	4a4a      	ldr	r2, [pc, #296]	; (8010a70 <xTaskIncrementTick+0x148>)
 8010946:	693b      	ldr	r3, [r7, #16]
 8010948:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 801094a:	693b      	ldr	r3, [r7, #16]
 801094c:	2b00      	cmp	r3, #0
 801094e:	d120      	bne.n	8010992 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8010950:	4b48      	ldr	r3, [pc, #288]	; (8010a74 <xTaskIncrementTick+0x14c>)
 8010952:	681b      	ldr	r3, [r3, #0]
 8010954:	681b      	ldr	r3, [r3, #0]
 8010956:	2b00      	cmp	r3, #0
 8010958:	d00a      	beq.n	8010970 <xTaskIncrementTick+0x48>
	__asm volatile
 801095a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801095e:	f383 8811 	msr	BASEPRI, r3
 8010962:	f3bf 8f6f 	isb	sy
 8010966:	f3bf 8f4f 	dsb	sy
 801096a:	603b      	str	r3, [r7, #0]
}
 801096c:	bf00      	nop
 801096e:	e7fe      	b.n	801096e <xTaskIncrementTick+0x46>
 8010970:	4b40      	ldr	r3, [pc, #256]	; (8010a74 <xTaskIncrementTick+0x14c>)
 8010972:	681b      	ldr	r3, [r3, #0]
 8010974:	60fb      	str	r3, [r7, #12]
 8010976:	4b40      	ldr	r3, [pc, #256]	; (8010a78 <xTaskIncrementTick+0x150>)
 8010978:	681b      	ldr	r3, [r3, #0]
 801097a:	4a3e      	ldr	r2, [pc, #248]	; (8010a74 <xTaskIncrementTick+0x14c>)
 801097c:	6013      	str	r3, [r2, #0]
 801097e:	4a3e      	ldr	r2, [pc, #248]	; (8010a78 <xTaskIncrementTick+0x150>)
 8010980:	68fb      	ldr	r3, [r7, #12]
 8010982:	6013      	str	r3, [r2, #0]
 8010984:	4b3d      	ldr	r3, [pc, #244]	; (8010a7c <xTaskIncrementTick+0x154>)
 8010986:	681b      	ldr	r3, [r3, #0]
 8010988:	3301      	adds	r3, #1
 801098a:	4a3c      	ldr	r2, [pc, #240]	; (8010a7c <xTaskIncrementTick+0x154>)
 801098c:	6013      	str	r3, [r2, #0]
 801098e:	f000 fa8b 	bl	8010ea8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8010992:	4b3b      	ldr	r3, [pc, #236]	; (8010a80 <xTaskIncrementTick+0x158>)
 8010994:	681b      	ldr	r3, [r3, #0]
 8010996:	693a      	ldr	r2, [r7, #16]
 8010998:	429a      	cmp	r2, r3
 801099a:	d348      	bcc.n	8010a2e <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801099c:	4b35      	ldr	r3, [pc, #212]	; (8010a74 <xTaskIncrementTick+0x14c>)
 801099e:	681b      	ldr	r3, [r3, #0]
 80109a0:	681b      	ldr	r3, [r3, #0]
 80109a2:	2b00      	cmp	r3, #0
 80109a4:	d104      	bne.n	80109b0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80109a6:	4b36      	ldr	r3, [pc, #216]	; (8010a80 <xTaskIncrementTick+0x158>)
 80109a8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80109ac:	601a      	str	r2, [r3, #0]
					break;
 80109ae:	e03e      	b.n	8010a2e <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80109b0:	4b30      	ldr	r3, [pc, #192]	; (8010a74 <xTaskIncrementTick+0x14c>)
 80109b2:	681b      	ldr	r3, [r3, #0]
 80109b4:	68db      	ldr	r3, [r3, #12]
 80109b6:	68db      	ldr	r3, [r3, #12]
 80109b8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80109ba:	68bb      	ldr	r3, [r7, #8]
 80109bc:	685b      	ldr	r3, [r3, #4]
 80109be:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80109c0:	693a      	ldr	r2, [r7, #16]
 80109c2:	687b      	ldr	r3, [r7, #4]
 80109c4:	429a      	cmp	r2, r3
 80109c6:	d203      	bcs.n	80109d0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80109c8:	4a2d      	ldr	r2, [pc, #180]	; (8010a80 <xTaskIncrementTick+0x158>)
 80109ca:	687b      	ldr	r3, [r7, #4]
 80109cc:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80109ce:	e02e      	b.n	8010a2e <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80109d0:	68bb      	ldr	r3, [r7, #8]
 80109d2:	3304      	adds	r3, #4
 80109d4:	4618      	mov	r0, r3
 80109d6:	f7fe ff66 	bl	800f8a6 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80109da:	68bb      	ldr	r3, [r7, #8]
 80109dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80109de:	2b00      	cmp	r3, #0
 80109e0:	d004      	beq.n	80109ec <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80109e2:	68bb      	ldr	r3, [r7, #8]
 80109e4:	3318      	adds	r3, #24
 80109e6:	4618      	mov	r0, r3
 80109e8:	f7fe ff5d 	bl	800f8a6 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80109ec:	68bb      	ldr	r3, [r7, #8]
 80109ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80109f0:	2201      	movs	r2, #1
 80109f2:	409a      	lsls	r2, r3
 80109f4:	4b23      	ldr	r3, [pc, #140]	; (8010a84 <xTaskIncrementTick+0x15c>)
 80109f6:	681b      	ldr	r3, [r3, #0]
 80109f8:	4313      	orrs	r3, r2
 80109fa:	4a22      	ldr	r2, [pc, #136]	; (8010a84 <xTaskIncrementTick+0x15c>)
 80109fc:	6013      	str	r3, [r2, #0]
 80109fe:	68bb      	ldr	r3, [r7, #8]
 8010a00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010a02:	4613      	mov	r3, r2
 8010a04:	009b      	lsls	r3, r3, #2
 8010a06:	4413      	add	r3, r2
 8010a08:	009b      	lsls	r3, r3, #2
 8010a0a:	4a1f      	ldr	r2, [pc, #124]	; (8010a88 <xTaskIncrementTick+0x160>)
 8010a0c:	441a      	add	r2, r3
 8010a0e:	68bb      	ldr	r3, [r7, #8]
 8010a10:	3304      	adds	r3, #4
 8010a12:	4619      	mov	r1, r3
 8010a14:	4610      	mov	r0, r2
 8010a16:	f7fe fee9 	bl	800f7ec <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8010a1a:	68bb      	ldr	r3, [r7, #8]
 8010a1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010a1e:	4b1b      	ldr	r3, [pc, #108]	; (8010a8c <xTaskIncrementTick+0x164>)
 8010a20:	681b      	ldr	r3, [r3, #0]
 8010a22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010a24:	429a      	cmp	r2, r3
 8010a26:	d3b9      	bcc.n	801099c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8010a28:	2301      	movs	r3, #1
 8010a2a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010a2c:	e7b6      	b.n	801099c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8010a2e:	4b17      	ldr	r3, [pc, #92]	; (8010a8c <xTaskIncrementTick+0x164>)
 8010a30:	681b      	ldr	r3, [r3, #0]
 8010a32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010a34:	4914      	ldr	r1, [pc, #80]	; (8010a88 <xTaskIncrementTick+0x160>)
 8010a36:	4613      	mov	r3, r2
 8010a38:	009b      	lsls	r3, r3, #2
 8010a3a:	4413      	add	r3, r2
 8010a3c:	009b      	lsls	r3, r3, #2
 8010a3e:	440b      	add	r3, r1
 8010a40:	681b      	ldr	r3, [r3, #0]
 8010a42:	2b01      	cmp	r3, #1
 8010a44:	d901      	bls.n	8010a4a <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8010a46:	2301      	movs	r3, #1
 8010a48:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8010a4a:	4b11      	ldr	r3, [pc, #68]	; (8010a90 <xTaskIncrementTick+0x168>)
 8010a4c:	681b      	ldr	r3, [r3, #0]
 8010a4e:	2b00      	cmp	r3, #0
 8010a50:	d007      	beq.n	8010a62 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8010a52:	2301      	movs	r3, #1
 8010a54:	617b      	str	r3, [r7, #20]
 8010a56:	e004      	b.n	8010a62 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8010a58:	4b0e      	ldr	r3, [pc, #56]	; (8010a94 <xTaskIncrementTick+0x16c>)
 8010a5a:	681b      	ldr	r3, [r3, #0]
 8010a5c:	3301      	adds	r3, #1
 8010a5e:	4a0d      	ldr	r2, [pc, #52]	; (8010a94 <xTaskIncrementTick+0x16c>)
 8010a60:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8010a62:	697b      	ldr	r3, [r7, #20]
}
 8010a64:	4618      	mov	r0, r3
 8010a66:	3718      	adds	r7, #24
 8010a68:	46bd      	mov	sp, r7
 8010a6a:	bd80      	pop	{r7, pc}
 8010a6c:	20000c9c 	.word	0x20000c9c
 8010a70:	20000c78 	.word	0x20000c78
 8010a74:	20000c2c 	.word	0x20000c2c
 8010a78:	20000c30 	.word	0x20000c30
 8010a7c:	20000c8c 	.word	0x20000c8c
 8010a80:	20000c94 	.word	0x20000c94
 8010a84:	20000c7c 	.word	0x20000c7c
 8010a88:	20000984 	.word	0x20000984
 8010a8c:	20000980 	.word	0x20000980
 8010a90:	20000c88 	.word	0x20000c88
 8010a94:	20000c84 	.word	0x20000c84

08010a98 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8010a98:	b480      	push	{r7}
 8010a9a:	b087      	sub	sp, #28
 8010a9c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8010a9e:	4b29      	ldr	r3, [pc, #164]	; (8010b44 <vTaskSwitchContext+0xac>)
 8010aa0:	681b      	ldr	r3, [r3, #0]
 8010aa2:	2b00      	cmp	r3, #0
 8010aa4:	d003      	beq.n	8010aae <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8010aa6:	4b28      	ldr	r3, [pc, #160]	; (8010b48 <vTaskSwitchContext+0xb0>)
 8010aa8:	2201      	movs	r2, #1
 8010aaa:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8010aac:	e044      	b.n	8010b38 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8010aae:	4b26      	ldr	r3, [pc, #152]	; (8010b48 <vTaskSwitchContext+0xb0>)
 8010ab0:	2200      	movs	r2, #0
 8010ab2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010ab4:	4b25      	ldr	r3, [pc, #148]	; (8010b4c <vTaskSwitchContext+0xb4>)
 8010ab6:	681b      	ldr	r3, [r3, #0]
 8010ab8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8010aba:	68fb      	ldr	r3, [r7, #12]
 8010abc:	fab3 f383 	clz	r3, r3
 8010ac0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8010ac2:	7afb      	ldrb	r3, [r7, #11]
 8010ac4:	f1c3 031f 	rsb	r3, r3, #31
 8010ac8:	617b      	str	r3, [r7, #20]
 8010aca:	4921      	ldr	r1, [pc, #132]	; (8010b50 <vTaskSwitchContext+0xb8>)
 8010acc:	697a      	ldr	r2, [r7, #20]
 8010ace:	4613      	mov	r3, r2
 8010ad0:	009b      	lsls	r3, r3, #2
 8010ad2:	4413      	add	r3, r2
 8010ad4:	009b      	lsls	r3, r3, #2
 8010ad6:	440b      	add	r3, r1
 8010ad8:	681b      	ldr	r3, [r3, #0]
 8010ada:	2b00      	cmp	r3, #0
 8010adc:	d10a      	bne.n	8010af4 <vTaskSwitchContext+0x5c>
	__asm volatile
 8010ade:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ae2:	f383 8811 	msr	BASEPRI, r3
 8010ae6:	f3bf 8f6f 	isb	sy
 8010aea:	f3bf 8f4f 	dsb	sy
 8010aee:	607b      	str	r3, [r7, #4]
}
 8010af0:	bf00      	nop
 8010af2:	e7fe      	b.n	8010af2 <vTaskSwitchContext+0x5a>
 8010af4:	697a      	ldr	r2, [r7, #20]
 8010af6:	4613      	mov	r3, r2
 8010af8:	009b      	lsls	r3, r3, #2
 8010afa:	4413      	add	r3, r2
 8010afc:	009b      	lsls	r3, r3, #2
 8010afe:	4a14      	ldr	r2, [pc, #80]	; (8010b50 <vTaskSwitchContext+0xb8>)
 8010b00:	4413      	add	r3, r2
 8010b02:	613b      	str	r3, [r7, #16]
 8010b04:	693b      	ldr	r3, [r7, #16]
 8010b06:	685b      	ldr	r3, [r3, #4]
 8010b08:	685a      	ldr	r2, [r3, #4]
 8010b0a:	693b      	ldr	r3, [r7, #16]
 8010b0c:	605a      	str	r2, [r3, #4]
 8010b0e:	693b      	ldr	r3, [r7, #16]
 8010b10:	685a      	ldr	r2, [r3, #4]
 8010b12:	693b      	ldr	r3, [r7, #16]
 8010b14:	3308      	adds	r3, #8
 8010b16:	429a      	cmp	r2, r3
 8010b18:	d104      	bne.n	8010b24 <vTaskSwitchContext+0x8c>
 8010b1a:	693b      	ldr	r3, [r7, #16]
 8010b1c:	685b      	ldr	r3, [r3, #4]
 8010b1e:	685a      	ldr	r2, [r3, #4]
 8010b20:	693b      	ldr	r3, [r7, #16]
 8010b22:	605a      	str	r2, [r3, #4]
 8010b24:	693b      	ldr	r3, [r7, #16]
 8010b26:	685b      	ldr	r3, [r3, #4]
 8010b28:	68db      	ldr	r3, [r3, #12]
 8010b2a:	4a0a      	ldr	r2, [pc, #40]	; (8010b54 <vTaskSwitchContext+0xbc>)
 8010b2c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8010b2e:	4b09      	ldr	r3, [pc, #36]	; (8010b54 <vTaskSwitchContext+0xbc>)
 8010b30:	681b      	ldr	r3, [r3, #0]
 8010b32:	334c      	adds	r3, #76	; 0x4c
 8010b34:	4a08      	ldr	r2, [pc, #32]	; (8010b58 <vTaskSwitchContext+0xc0>)
 8010b36:	6013      	str	r3, [r2, #0]
}
 8010b38:	bf00      	nop
 8010b3a:	371c      	adds	r7, #28
 8010b3c:	46bd      	mov	sp, r7
 8010b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b42:	4770      	bx	lr
 8010b44:	20000c9c 	.word	0x20000c9c
 8010b48:	20000c88 	.word	0x20000c88
 8010b4c:	20000c7c 	.word	0x20000c7c
 8010b50:	20000984 	.word	0x20000984
 8010b54:	20000980 	.word	0x20000980
 8010b58:	200001e0 	.word	0x200001e0

08010b5c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8010b5c:	b580      	push	{r7, lr}
 8010b5e:	b084      	sub	sp, #16
 8010b60:	af00      	add	r7, sp, #0
 8010b62:	6078      	str	r0, [r7, #4]
 8010b64:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8010b66:	687b      	ldr	r3, [r7, #4]
 8010b68:	2b00      	cmp	r3, #0
 8010b6a:	d10a      	bne.n	8010b82 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8010b6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b70:	f383 8811 	msr	BASEPRI, r3
 8010b74:	f3bf 8f6f 	isb	sy
 8010b78:	f3bf 8f4f 	dsb	sy
 8010b7c:	60fb      	str	r3, [r7, #12]
}
 8010b7e:	bf00      	nop
 8010b80:	e7fe      	b.n	8010b80 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8010b82:	4b07      	ldr	r3, [pc, #28]	; (8010ba0 <vTaskPlaceOnEventList+0x44>)
 8010b84:	681b      	ldr	r3, [r3, #0]
 8010b86:	3318      	adds	r3, #24
 8010b88:	4619      	mov	r1, r3
 8010b8a:	6878      	ldr	r0, [r7, #4]
 8010b8c:	f7fe fe52 	bl	800f834 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8010b90:	2101      	movs	r1, #1
 8010b92:	6838      	ldr	r0, [r7, #0]
 8010b94:	f000 fb64 	bl	8011260 <prvAddCurrentTaskToDelayedList>
}
 8010b98:	bf00      	nop
 8010b9a:	3710      	adds	r7, #16
 8010b9c:	46bd      	mov	sp, r7
 8010b9e:	bd80      	pop	{r7, pc}
 8010ba0:	20000980 	.word	0x20000980

08010ba4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8010ba4:	b580      	push	{r7, lr}
 8010ba6:	b086      	sub	sp, #24
 8010ba8:	af00      	add	r7, sp, #0
 8010baa:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010bac:	687b      	ldr	r3, [r7, #4]
 8010bae:	68db      	ldr	r3, [r3, #12]
 8010bb0:	68db      	ldr	r3, [r3, #12]
 8010bb2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8010bb4:	693b      	ldr	r3, [r7, #16]
 8010bb6:	2b00      	cmp	r3, #0
 8010bb8:	d10a      	bne.n	8010bd0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8010bba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010bbe:	f383 8811 	msr	BASEPRI, r3
 8010bc2:	f3bf 8f6f 	isb	sy
 8010bc6:	f3bf 8f4f 	dsb	sy
 8010bca:	60fb      	str	r3, [r7, #12]
}
 8010bcc:	bf00      	nop
 8010bce:	e7fe      	b.n	8010bce <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8010bd0:	693b      	ldr	r3, [r7, #16]
 8010bd2:	3318      	adds	r3, #24
 8010bd4:	4618      	mov	r0, r3
 8010bd6:	f7fe fe66 	bl	800f8a6 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010bda:	4b1d      	ldr	r3, [pc, #116]	; (8010c50 <xTaskRemoveFromEventList+0xac>)
 8010bdc:	681b      	ldr	r3, [r3, #0]
 8010bde:	2b00      	cmp	r3, #0
 8010be0:	d11c      	bne.n	8010c1c <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8010be2:	693b      	ldr	r3, [r7, #16]
 8010be4:	3304      	adds	r3, #4
 8010be6:	4618      	mov	r0, r3
 8010be8:	f7fe fe5d 	bl	800f8a6 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8010bec:	693b      	ldr	r3, [r7, #16]
 8010bee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010bf0:	2201      	movs	r2, #1
 8010bf2:	409a      	lsls	r2, r3
 8010bf4:	4b17      	ldr	r3, [pc, #92]	; (8010c54 <xTaskRemoveFromEventList+0xb0>)
 8010bf6:	681b      	ldr	r3, [r3, #0]
 8010bf8:	4313      	orrs	r3, r2
 8010bfa:	4a16      	ldr	r2, [pc, #88]	; (8010c54 <xTaskRemoveFromEventList+0xb0>)
 8010bfc:	6013      	str	r3, [r2, #0]
 8010bfe:	693b      	ldr	r3, [r7, #16]
 8010c00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010c02:	4613      	mov	r3, r2
 8010c04:	009b      	lsls	r3, r3, #2
 8010c06:	4413      	add	r3, r2
 8010c08:	009b      	lsls	r3, r3, #2
 8010c0a:	4a13      	ldr	r2, [pc, #76]	; (8010c58 <xTaskRemoveFromEventList+0xb4>)
 8010c0c:	441a      	add	r2, r3
 8010c0e:	693b      	ldr	r3, [r7, #16]
 8010c10:	3304      	adds	r3, #4
 8010c12:	4619      	mov	r1, r3
 8010c14:	4610      	mov	r0, r2
 8010c16:	f7fe fde9 	bl	800f7ec <vListInsertEnd>
 8010c1a:	e005      	b.n	8010c28 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8010c1c:	693b      	ldr	r3, [r7, #16]
 8010c1e:	3318      	adds	r3, #24
 8010c20:	4619      	mov	r1, r3
 8010c22:	480e      	ldr	r0, [pc, #56]	; (8010c5c <xTaskRemoveFromEventList+0xb8>)
 8010c24:	f7fe fde2 	bl	800f7ec <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8010c28:	693b      	ldr	r3, [r7, #16]
 8010c2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010c2c:	4b0c      	ldr	r3, [pc, #48]	; (8010c60 <xTaskRemoveFromEventList+0xbc>)
 8010c2e:	681b      	ldr	r3, [r3, #0]
 8010c30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010c32:	429a      	cmp	r2, r3
 8010c34:	d905      	bls.n	8010c42 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8010c36:	2301      	movs	r3, #1
 8010c38:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8010c3a:	4b0a      	ldr	r3, [pc, #40]	; (8010c64 <xTaskRemoveFromEventList+0xc0>)
 8010c3c:	2201      	movs	r2, #1
 8010c3e:	601a      	str	r2, [r3, #0]
 8010c40:	e001      	b.n	8010c46 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8010c42:	2300      	movs	r3, #0
 8010c44:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8010c46:	697b      	ldr	r3, [r7, #20]
}
 8010c48:	4618      	mov	r0, r3
 8010c4a:	3718      	adds	r7, #24
 8010c4c:	46bd      	mov	sp, r7
 8010c4e:	bd80      	pop	{r7, pc}
 8010c50:	20000c9c 	.word	0x20000c9c
 8010c54:	20000c7c 	.word	0x20000c7c
 8010c58:	20000984 	.word	0x20000984
 8010c5c:	20000c34 	.word	0x20000c34
 8010c60:	20000980 	.word	0x20000980
 8010c64:	20000c88 	.word	0x20000c88

08010c68 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8010c68:	b480      	push	{r7}
 8010c6a:	b083      	sub	sp, #12
 8010c6c:	af00      	add	r7, sp, #0
 8010c6e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8010c70:	4b06      	ldr	r3, [pc, #24]	; (8010c8c <vTaskInternalSetTimeOutState+0x24>)
 8010c72:	681a      	ldr	r2, [r3, #0]
 8010c74:	687b      	ldr	r3, [r7, #4]
 8010c76:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8010c78:	4b05      	ldr	r3, [pc, #20]	; (8010c90 <vTaskInternalSetTimeOutState+0x28>)
 8010c7a:	681a      	ldr	r2, [r3, #0]
 8010c7c:	687b      	ldr	r3, [r7, #4]
 8010c7e:	605a      	str	r2, [r3, #4]
}
 8010c80:	bf00      	nop
 8010c82:	370c      	adds	r7, #12
 8010c84:	46bd      	mov	sp, r7
 8010c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c8a:	4770      	bx	lr
 8010c8c:	20000c8c 	.word	0x20000c8c
 8010c90:	20000c78 	.word	0x20000c78

08010c94 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8010c94:	b580      	push	{r7, lr}
 8010c96:	b088      	sub	sp, #32
 8010c98:	af00      	add	r7, sp, #0
 8010c9a:	6078      	str	r0, [r7, #4]
 8010c9c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8010c9e:	687b      	ldr	r3, [r7, #4]
 8010ca0:	2b00      	cmp	r3, #0
 8010ca2:	d10a      	bne.n	8010cba <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8010ca4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ca8:	f383 8811 	msr	BASEPRI, r3
 8010cac:	f3bf 8f6f 	isb	sy
 8010cb0:	f3bf 8f4f 	dsb	sy
 8010cb4:	613b      	str	r3, [r7, #16]
}
 8010cb6:	bf00      	nop
 8010cb8:	e7fe      	b.n	8010cb8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8010cba:	683b      	ldr	r3, [r7, #0]
 8010cbc:	2b00      	cmp	r3, #0
 8010cbe:	d10a      	bne.n	8010cd6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8010cc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010cc4:	f383 8811 	msr	BASEPRI, r3
 8010cc8:	f3bf 8f6f 	isb	sy
 8010ccc:	f3bf 8f4f 	dsb	sy
 8010cd0:	60fb      	str	r3, [r7, #12]
}
 8010cd2:	bf00      	nop
 8010cd4:	e7fe      	b.n	8010cd4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8010cd6:	f000 fc55 	bl	8011584 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8010cda:	4b1d      	ldr	r3, [pc, #116]	; (8010d50 <xTaskCheckForTimeOut+0xbc>)
 8010cdc:	681b      	ldr	r3, [r3, #0]
 8010cde:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8010ce0:	687b      	ldr	r3, [r7, #4]
 8010ce2:	685b      	ldr	r3, [r3, #4]
 8010ce4:	69ba      	ldr	r2, [r7, #24]
 8010ce6:	1ad3      	subs	r3, r2, r3
 8010ce8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8010cea:	683b      	ldr	r3, [r7, #0]
 8010cec:	681b      	ldr	r3, [r3, #0]
 8010cee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010cf2:	d102      	bne.n	8010cfa <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8010cf4:	2300      	movs	r3, #0
 8010cf6:	61fb      	str	r3, [r7, #28]
 8010cf8:	e023      	b.n	8010d42 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8010cfa:	687b      	ldr	r3, [r7, #4]
 8010cfc:	681a      	ldr	r2, [r3, #0]
 8010cfe:	4b15      	ldr	r3, [pc, #84]	; (8010d54 <xTaskCheckForTimeOut+0xc0>)
 8010d00:	681b      	ldr	r3, [r3, #0]
 8010d02:	429a      	cmp	r2, r3
 8010d04:	d007      	beq.n	8010d16 <xTaskCheckForTimeOut+0x82>
 8010d06:	687b      	ldr	r3, [r7, #4]
 8010d08:	685b      	ldr	r3, [r3, #4]
 8010d0a:	69ba      	ldr	r2, [r7, #24]
 8010d0c:	429a      	cmp	r2, r3
 8010d0e:	d302      	bcc.n	8010d16 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8010d10:	2301      	movs	r3, #1
 8010d12:	61fb      	str	r3, [r7, #28]
 8010d14:	e015      	b.n	8010d42 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8010d16:	683b      	ldr	r3, [r7, #0]
 8010d18:	681b      	ldr	r3, [r3, #0]
 8010d1a:	697a      	ldr	r2, [r7, #20]
 8010d1c:	429a      	cmp	r2, r3
 8010d1e:	d20b      	bcs.n	8010d38 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8010d20:	683b      	ldr	r3, [r7, #0]
 8010d22:	681a      	ldr	r2, [r3, #0]
 8010d24:	697b      	ldr	r3, [r7, #20]
 8010d26:	1ad2      	subs	r2, r2, r3
 8010d28:	683b      	ldr	r3, [r7, #0]
 8010d2a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8010d2c:	6878      	ldr	r0, [r7, #4]
 8010d2e:	f7ff ff9b 	bl	8010c68 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8010d32:	2300      	movs	r3, #0
 8010d34:	61fb      	str	r3, [r7, #28]
 8010d36:	e004      	b.n	8010d42 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8010d38:	683b      	ldr	r3, [r7, #0]
 8010d3a:	2200      	movs	r2, #0
 8010d3c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8010d3e:	2301      	movs	r3, #1
 8010d40:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8010d42:	f000 fc4f 	bl	80115e4 <vPortExitCritical>

	return xReturn;
 8010d46:	69fb      	ldr	r3, [r7, #28]
}
 8010d48:	4618      	mov	r0, r3
 8010d4a:	3720      	adds	r7, #32
 8010d4c:	46bd      	mov	sp, r7
 8010d4e:	bd80      	pop	{r7, pc}
 8010d50:	20000c78 	.word	0x20000c78
 8010d54:	20000c8c 	.word	0x20000c8c

08010d58 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8010d58:	b480      	push	{r7}
 8010d5a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8010d5c:	4b03      	ldr	r3, [pc, #12]	; (8010d6c <vTaskMissedYield+0x14>)
 8010d5e:	2201      	movs	r2, #1
 8010d60:	601a      	str	r2, [r3, #0]
}
 8010d62:	bf00      	nop
 8010d64:	46bd      	mov	sp, r7
 8010d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d6a:	4770      	bx	lr
 8010d6c:	20000c88 	.word	0x20000c88

08010d70 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8010d70:	b580      	push	{r7, lr}
 8010d72:	b082      	sub	sp, #8
 8010d74:	af00      	add	r7, sp, #0
 8010d76:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8010d78:	f000 f852 	bl	8010e20 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8010d7c:	4b06      	ldr	r3, [pc, #24]	; (8010d98 <prvIdleTask+0x28>)
 8010d7e:	681b      	ldr	r3, [r3, #0]
 8010d80:	2b01      	cmp	r3, #1
 8010d82:	d9f9      	bls.n	8010d78 <prvIdleTask+0x8>
			{
				taskYIELD();
 8010d84:	4b05      	ldr	r3, [pc, #20]	; (8010d9c <prvIdleTask+0x2c>)
 8010d86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010d8a:	601a      	str	r2, [r3, #0]
 8010d8c:	f3bf 8f4f 	dsb	sy
 8010d90:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8010d94:	e7f0      	b.n	8010d78 <prvIdleTask+0x8>
 8010d96:	bf00      	nop
 8010d98:	20000984 	.word	0x20000984
 8010d9c:	e000ed04 	.word	0xe000ed04

08010da0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8010da0:	b580      	push	{r7, lr}
 8010da2:	b082      	sub	sp, #8
 8010da4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8010da6:	2300      	movs	r3, #0
 8010da8:	607b      	str	r3, [r7, #4]
 8010daa:	e00c      	b.n	8010dc6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8010dac:	687a      	ldr	r2, [r7, #4]
 8010dae:	4613      	mov	r3, r2
 8010db0:	009b      	lsls	r3, r3, #2
 8010db2:	4413      	add	r3, r2
 8010db4:	009b      	lsls	r3, r3, #2
 8010db6:	4a12      	ldr	r2, [pc, #72]	; (8010e00 <prvInitialiseTaskLists+0x60>)
 8010db8:	4413      	add	r3, r2
 8010dba:	4618      	mov	r0, r3
 8010dbc:	f7fe fce9 	bl	800f792 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8010dc0:	687b      	ldr	r3, [r7, #4]
 8010dc2:	3301      	adds	r3, #1
 8010dc4:	607b      	str	r3, [r7, #4]
 8010dc6:	687b      	ldr	r3, [r7, #4]
 8010dc8:	2b1f      	cmp	r3, #31
 8010dca:	d9ef      	bls.n	8010dac <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8010dcc:	480d      	ldr	r0, [pc, #52]	; (8010e04 <prvInitialiseTaskLists+0x64>)
 8010dce:	f7fe fce0 	bl	800f792 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8010dd2:	480d      	ldr	r0, [pc, #52]	; (8010e08 <prvInitialiseTaskLists+0x68>)
 8010dd4:	f7fe fcdd 	bl	800f792 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8010dd8:	480c      	ldr	r0, [pc, #48]	; (8010e0c <prvInitialiseTaskLists+0x6c>)
 8010dda:	f7fe fcda 	bl	800f792 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8010dde:	480c      	ldr	r0, [pc, #48]	; (8010e10 <prvInitialiseTaskLists+0x70>)
 8010de0:	f7fe fcd7 	bl	800f792 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8010de4:	480b      	ldr	r0, [pc, #44]	; (8010e14 <prvInitialiseTaskLists+0x74>)
 8010de6:	f7fe fcd4 	bl	800f792 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8010dea:	4b0b      	ldr	r3, [pc, #44]	; (8010e18 <prvInitialiseTaskLists+0x78>)
 8010dec:	4a05      	ldr	r2, [pc, #20]	; (8010e04 <prvInitialiseTaskLists+0x64>)
 8010dee:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8010df0:	4b0a      	ldr	r3, [pc, #40]	; (8010e1c <prvInitialiseTaskLists+0x7c>)
 8010df2:	4a05      	ldr	r2, [pc, #20]	; (8010e08 <prvInitialiseTaskLists+0x68>)
 8010df4:	601a      	str	r2, [r3, #0]
}
 8010df6:	bf00      	nop
 8010df8:	3708      	adds	r7, #8
 8010dfa:	46bd      	mov	sp, r7
 8010dfc:	bd80      	pop	{r7, pc}
 8010dfe:	bf00      	nop
 8010e00:	20000984 	.word	0x20000984
 8010e04:	20000c04 	.word	0x20000c04
 8010e08:	20000c18 	.word	0x20000c18
 8010e0c:	20000c34 	.word	0x20000c34
 8010e10:	20000c48 	.word	0x20000c48
 8010e14:	20000c60 	.word	0x20000c60
 8010e18:	20000c2c 	.word	0x20000c2c
 8010e1c:	20000c30 	.word	0x20000c30

08010e20 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8010e20:	b580      	push	{r7, lr}
 8010e22:	b082      	sub	sp, #8
 8010e24:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8010e26:	e019      	b.n	8010e5c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8010e28:	f000 fbac 	bl	8011584 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010e2c:	4b10      	ldr	r3, [pc, #64]	; (8010e70 <prvCheckTasksWaitingTermination+0x50>)
 8010e2e:	68db      	ldr	r3, [r3, #12]
 8010e30:	68db      	ldr	r3, [r3, #12]
 8010e32:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010e34:	687b      	ldr	r3, [r7, #4]
 8010e36:	3304      	adds	r3, #4
 8010e38:	4618      	mov	r0, r3
 8010e3a:	f7fe fd34 	bl	800f8a6 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8010e3e:	4b0d      	ldr	r3, [pc, #52]	; (8010e74 <prvCheckTasksWaitingTermination+0x54>)
 8010e40:	681b      	ldr	r3, [r3, #0]
 8010e42:	3b01      	subs	r3, #1
 8010e44:	4a0b      	ldr	r2, [pc, #44]	; (8010e74 <prvCheckTasksWaitingTermination+0x54>)
 8010e46:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8010e48:	4b0b      	ldr	r3, [pc, #44]	; (8010e78 <prvCheckTasksWaitingTermination+0x58>)
 8010e4a:	681b      	ldr	r3, [r3, #0]
 8010e4c:	3b01      	subs	r3, #1
 8010e4e:	4a0a      	ldr	r2, [pc, #40]	; (8010e78 <prvCheckTasksWaitingTermination+0x58>)
 8010e50:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8010e52:	f000 fbc7 	bl	80115e4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8010e56:	6878      	ldr	r0, [r7, #4]
 8010e58:	f000 f810 	bl	8010e7c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8010e5c:	4b06      	ldr	r3, [pc, #24]	; (8010e78 <prvCheckTasksWaitingTermination+0x58>)
 8010e5e:	681b      	ldr	r3, [r3, #0]
 8010e60:	2b00      	cmp	r3, #0
 8010e62:	d1e1      	bne.n	8010e28 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8010e64:	bf00      	nop
 8010e66:	bf00      	nop
 8010e68:	3708      	adds	r7, #8
 8010e6a:	46bd      	mov	sp, r7
 8010e6c:	bd80      	pop	{r7, pc}
 8010e6e:	bf00      	nop
 8010e70:	20000c48 	.word	0x20000c48
 8010e74:	20000c74 	.word	0x20000c74
 8010e78:	20000c5c 	.word	0x20000c5c

08010e7c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8010e7c:	b580      	push	{r7, lr}
 8010e7e:	b082      	sub	sp, #8
 8010e80:	af00      	add	r7, sp, #0
 8010e82:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8010e84:	687b      	ldr	r3, [r7, #4]
 8010e86:	334c      	adds	r3, #76	; 0x4c
 8010e88:	4618      	mov	r0, r3
 8010e8a:	f002 fa39 	bl	8013300 <_reclaim_reent>

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8010e8e:	687b      	ldr	r3, [r7, #4]
 8010e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010e92:	4618      	mov	r0, r3
 8010e94:	f000 fd64 	bl	8011960 <vPortFree>
			vPortFree( pxTCB );
 8010e98:	6878      	ldr	r0, [r7, #4]
 8010e9a:	f000 fd61 	bl	8011960 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8010e9e:	bf00      	nop
 8010ea0:	3708      	adds	r7, #8
 8010ea2:	46bd      	mov	sp, r7
 8010ea4:	bd80      	pop	{r7, pc}
	...

08010ea8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8010ea8:	b480      	push	{r7}
 8010eaa:	b083      	sub	sp, #12
 8010eac:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010eae:	4b0c      	ldr	r3, [pc, #48]	; (8010ee0 <prvResetNextTaskUnblockTime+0x38>)
 8010eb0:	681b      	ldr	r3, [r3, #0]
 8010eb2:	681b      	ldr	r3, [r3, #0]
 8010eb4:	2b00      	cmp	r3, #0
 8010eb6:	d104      	bne.n	8010ec2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8010eb8:	4b0a      	ldr	r3, [pc, #40]	; (8010ee4 <prvResetNextTaskUnblockTime+0x3c>)
 8010eba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010ebe:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8010ec0:	e008      	b.n	8010ed4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010ec2:	4b07      	ldr	r3, [pc, #28]	; (8010ee0 <prvResetNextTaskUnblockTime+0x38>)
 8010ec4:	681b      	ldr	r3, [r3, #0]
 8010ec6:	68db      	ldr	r3, [r3, #12]
 8010ec8:	68db      	ldr	r3, [r3, #12]
 8010eca:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8010ecc:	687b      	ldr	r3, [r7, #4]
 8010ece:	685b      	ldr	r3, [r3, #4]
 8010ed0:	4a04      	ldr	r2, [pc, #16]	; (8010ee4 <prvResetNextTaskUnblockTime+0x3c>)
 8010ed2:	6013      	str	r3, [r2, #0]
}
 8010ed4:	bf00      	nop
 8010ed6:	370c      	adds	r7, #12
 8010ed8:	46bd      	mov	sp, r7
 8010eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ede:	4770      	bx	lr
 8010ee0:	20000c2c 	.word	0x20000c2c
 8010ee4:	20000c94 	.word	0x20000c94

08010ee8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8010ee8:	b480      	push	{r7}
 8010eea:	b083      	sub	sp, #12
 8010eec:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8010eee:	4b0b      	ldr	r3, [pc, #44]	; (8010f1c <xTaskGetSchedulerState+0x34>)
 8010ef0:	681b      	ldr	r3, [r3, #0]
 8010ef2:	2b00      	cmp	r3, #0
 8010ef4:	d102      	bne.n	8010efc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8010ef6:	2301      	movs	r3, #1
 8010ef8:	607b      	str	r3, [r7, #4]
 8010efa:	e008      	b.n	8010f0e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010efc:	4b08      	ldr	r3, [pc, #32]	; (8010f20 <xTaskGetSchedulerState+0x38>)
 8010efe:	681b      	ldr	r3, [r3, #0]
 8010f00:	2b00      	cmp	r3, #0
 8010f02:	d102      	bne.n	8010f0a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8010f04:	2302      	movs	r3, #2
 8010f06:	607b      	str	r3, [r7, #4]
 8010f08:	e001      	b.n	8010f0e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8010f0a:	2300      	movs	r3, #0
 8010f0c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8010f0e:	687b      	ldr	r3, [r7, #4]
	}
 8010f10:	4618      	mov	r0, r3
 8010f12:	370c      	adds	r7, #12
 8010f14:	46bd      	mov	sp, r7
 8010f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f1a:	4770      	bx	lr
 8010f1c:	20000c80 	.word	0x20000c80
 8010f20:	20000c9c 	.word	0x20000c9c

08010f24 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8010f24:	b580      	push	{r7, lr}
 8010f26:	b084      	sub	sp, #16
 8010f28:	af00      	add	r7, sp, #0
 8010f2a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8010f2c:	687b      	ldr	r3, [r7, #4]
 8010f2e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8010f30:	2300      	movs	r3, #0
 8010f32:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8010f34:	687b      	ldr	r3, [r7, #4]
 8010f36:	2b00      	cmp	r3, #0
 8010f38:	d05e      	beq.n	8010ff8 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8010f3a:	68bb      	ldr	r3, [r7, #8]
 8010f3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010f3e:	4b31      	ldr	r3, [pc, #196]	; (8011004 <xTaskPriorityInherit+0xe0>)
 8010f40:	681b      	ldr	r3, [r3, #0]
 8010f42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010f44:	429a      	cmp	r2, r3
 8010f46:	d24e      	bcs.n	8010fe6 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8010f48:	68bb      	ldr	r3, [r7, #8]
 8010f4a:	699b      	ldr	r3, [r3, #24]
 8010f4c:	2b00      	cmp	r3, #0
 8010f4e:	db06      	blt.n	8010f5e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010f50:	4b2c      	ldr	r3, [pc, #176]	; (8011004 <xTaskPriorityInherit+0xe0>)
 8010f52:	681b      	ldr	r3, [r3, #0]
 8010f54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010f56:	f1c3 0220 	rsb	r2, r3, #32
 8010f5a:	68bb      	ldr	r3, [r7, #8]
 8010f5c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8010f5e:	68bb      	ldr	r3, [r7, #8]
 8010f60:	6959      	ldr	r1, [r3, #20]
 8010f62:	68bb      	ldr	r3, [r7, #8]
 8010f64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010f66:	4613      	mov	r3, r2
 8010f68:	009b      	lsls	r3, r3, #2
 8010f6a:	4413      	add	r3, r2
 8010f6c:	009b      	lsls	r3, r3, #2
 8010f6e:	4a26      	ldr	r2, [pc, #152]	; (8011008 <xTaskPriorityInherit+0xe4>)
 8010f70:	4413      	add	r3, r2
 8010f72:	4299      	cmp	r1, r3
 8010f74:	d12f      	bne.n	8010fd6 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010f76:	68bb      	ldr	r3, [r7, #8]
 8010f78:	3304      	adds	r3, #4
 8010f7a:	4618      	mov	r0, r3
 8010f7c:	f7fe fc93 	bl	800f8a6 <uxListRemove>
 8010f80:	4603      	mov	r3, r0
 8010f82:	2b00      	cmp	r3, #0
 8010f84:	d10a      	bne.n	8010f9c <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8010f86:	68bb      	ldr	r3, [r7, #8]
 8010f88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010f8a:	2201      	movs	r2, #1
 8010f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8010f90:	43da      	mvns	r2, r3
 8010f92:	4b1e      	ldr	r3, [pc, #120]	; (801100c <xTaskPriorityInherit+0xe8>)
 8010f94:	681b      	ldr	r3, [r3, #0]
 8010f96:	4013      	ands	r3, r2
 8010f98:	4a1c      	ldr	r2, [pc, #112]	; (801100c <xTaskPriorityInherit+0xe8>)
 8010f9a:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8010f9c:	4b19      	ldr	r3, [pc, #100]	; (8011004 <xTaskPriorityInherit+0xe0>)
 8010f9e:	681b      	ldr	r3, [r3, #0]
 8010fa0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010fa2:	68bb      	ldr	r3, [r7, #8]
 8010fa4:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8010fa6:	68bb      	ldr	r3, [r7, #8]
 8010fa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010faa:	2201      	movs	r2, #1
 8010fac:	409a      	lsls	r2, r3
 8010fae:	4b17      	ldr	r3, [pc, #92]	; (801100c <xTaskPriorityInherit+0xe8>)
 8010fb0:	681b      	ldr	r3, [r3, #0]
 8010fb2:	4313      	orrs	r3, r2
 8010fb4:	4a15      	ldr	r2, [pc, #84]	; (801100c <xTaskPriorityInherit+0xe8>)
 8010fb6:	6013      	str	r3, [r2, #0]
 8010fb8:	68bb      	ldr	r3, [r7, #8]
 8010fba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010fbc:	4613      	mov	r3, r2
 8010fbe:	009b      	lsls	r3, r3, #2
 8010fc0:	4413      	add	r3, r2
 8010fc2:	009b      	lsls	r3, r3, #2
 8010fc4:	4a10      	ldr	r2, [pc, #64]	; (8011008 <xTaskPriorityInherit+0xe4>)
 8010fc6:	441a      	add	r2, r3
 8010fc8:	68bb      	ldr	r3, [r7, #8]
 8010fca:	3304      	adds	r3, #4
 8010fcc:	4619      	mov	r1, r3
 8010fce:	4610      	mov	r0, r2
 8010fd0:	f7fe fc0c 	bl	800f7ec <vListInsertEnd>
 8010fd4:	e004      	b.n	8010fe0 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8010fd6:	4b0b      	ldr	r3, [pc, #44]	; (8011004 <xTaskPriorityInherit+0xe0>)
 8010fd8:	681b      	ldr	r3, [r3, #0]
 8010fda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010fdc:	68bb      	ldr	r3, [r7, #8]
 8010fde:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8010fe0:	2301      	movs	r3, #1
 8010fe2:	60fb      	str	r3, [r7, #12]
 8010fe4:	e008      	b.n	8010ff8 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8010fe6:	68bb      	ldr	r3, [r7, #8]
 8010fe8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010fea:	4b06      	ldr	r3, [pc, #24]	; (8011004 <xTaskPriorityInherit+0xe0>)
 8010fec:	681b      	ldr	r3, [r3, #0]
 8010fee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010ff0:	429a      	cmp	r2, r3
 8010ff2:	d201      	bcs.n	8010ff8 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8010ff4:	2301      	movs	r3, #1
 8010ff6:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8010ff8:	68fb      	ldr	r3, [r7, #12]
	}
 8010ffa:	4618      	mov	r0, r3
 8010ffc:	3710      	adds	r7, #16
 8010ffe:	46bd      	mov	sp, r7
 8011000:	bd80      	pop	{r7, pc}
 8011002:	bf00      	nop
 8011004:	20000980 	.word	0x20000980
 8011008:	20000984 	.word	0x20000984
 801100c:	20000c7c 	.word	0x20000c7c

08011010 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8011010:	b580      	push	{r7, lr}
 8011012:	b086      	sub	sp, #24
 8011014:	af00      	add	r7, sp, #0
 8011016:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8011018:	687b      	ldr	r3, [r7, #4]
 801101a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 801101c:	2300      	movs	r3, #0
 801101e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8011020:	687b      	ldr	r3, [r7, #4]
 8011022:	2b00      	cmp	r3, #0
 8011024:	d06e      	beq.n	8011104 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8011026:	4b3a      	ldr	r3, [pc, #232]	; (8011110 <xTaskPriorityDisinherit+0x100>)
 8011028:	681b      	ldr	r3, [r3, #0]
 801102a:	693a      	ldr	r2, [r7, #16]
 801102c:	429a      	cmp	r2, r3
 801102e:	d00a      	beq.n	8011046 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8011030:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011034:	f383 8811 	msr	BASEPRI, r3
 8011038:	f3bf 8f6f 	isb	sy
 801103c:	f3bf 8f4f 	dsb	sy
 8011040:	60fb      	str	r3, [r7, #12]
}
 8011042:	bf00      	nop
 8011044:	e7fe      	b.n	8011044 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8011046:	693b      	ldr	r3, [r7, #16]
 8011048:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801104a:	2b00      	cmp	r3, #0
 801104c:	d10a      	bne.n	8011064 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 801104e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011052:	f383 8811 	msr	BASEPRI, r3
 8011056:	f3bf 8f6f 	isb	sy
 801105a:	f3bf 8f4f 	dsb	sy
 801105e:	60bb      	str	r3, [r7, #8]
}
 8011060:	bf00      	nop
 8011062:	e7fe      	b.n	8011062 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8011064:	693b      	ldr	r3, [r7, #16]
 8011066:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011068:	1e5a      	subs	r2, r3, #1
 801106a:	693b      	ldr	r3, [r7, #16]
 801106c:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 801106e:	693b      	ldr	r3, [r7, #16]
 8011070:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011072:	693b      	ldr	r3, [r7, #16]
 8011074:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011076:	429a      	cmp	r2, r3
 8011078:	d044      	beq.n	8011104 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 801107a:	693b      	ldr	r3, [r7, #16]
 801107c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801107e:	2b00      	cmp	r3, #0
 8011080:	d140      	bne.n	8011104 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011082:	693b      	ldr	r3, [r7, #16]
 8011084:	3304      	adds	r3, #4
 8011086:	4618      	mov	r0, r3
 8011088:	f7fe fc0d 	bl	800f8a6 <uxListRemove>
 801108c:	4603      	mov	r3, r0
 801108e:	2b00      	cmp	r3, #0
 8011090:	d115      	bne.n	80110be <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8011092:	693b      	ldr	r3, [r7, #16]
 8011094:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011096:	491f      	ldr	r1, [pc, #124]	; (8011114 <xTaskPriorityDisinherit+0x104>)
 8011098:	4613      	mov	r3, r2
 801109a:	009b      	lsls	r3, r3, #2
 801109c:	4413      	add	r3, r2
 801109e:	009b      	lsls	r3, r3, #2
 80110a0:	440b      	add	r3, r1
 80110a2:	681b      	ldr	r3, [r3, #0]
 80110a4:	2b00      	cmp	r3, #0
 80110a6:	d10a      	bne.n	80110be <xTaskPriorityDisinherit+0xae>
 80110a8:	693b      	ldr	r3, [r7, #16]
 80110aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80110ac:	2201      	movs	r2, #1
 80110ae:	fa02 f303 	lsl.w	r3, r2, r3
 80110b2:	43da      	mvns	r2, r3
 80110b4:	4b18      	ldr	r3, [pc, #96]	; (8011118 <xTaskPriorityDisinherit+0x108>)
 80110b6:	681b      	ldr	r3, [r3, #0]
 80110b8:	4013      	ands	r3, r2
 80110ba:	4a17      	ldr	r2, [pc, #92]	; (8011118 <xTaskPriorityDisinherit+0x108>)
 80110bc:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80110be:	693b      	ldr	r3, [r7, #16]
 80110c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80110c2:	693b      	ldr	r3, [r7, #16]
 80110c4:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80110c6:	693b      	ldr	r3, [r7, #16]
 80110c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80110ca:	f1c3 0220 	rsb	r2, r3, #32
 80110ce:	693b      	ldr	r3, [r7, #16]
 80110d0:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80110d2:	693b      	ldr	r3, [r7, #16]
 80110d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80110d6:	2201      	movs	r2, #1
 80110d8:	409a      	lsls	r2, r3
 80110da:	4b0f      	ldr	r3, [pc, #60]	; (8011118 <xTaskPriorityDisinherit+0x108>)
 80110dc:	681b      	ldr	r3, [r3, #0]
 80110de:	4313      	orrs	r3, r2
 80110e0:	4a0d      	ldr	r2, [pc, #52]	; (8011118 <xTaskPriorityDisinherit+0x108>)
 80110e2:	6013      	str	r3, [r2, #0]
 80110e4:	693b      	ldr	r3, [r7, #16]
 80110e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80110e8:	4613      	mov	r3, r2
 80110ea:	009b      	lsls	r3, r3, #2
 80110ec:	4413      	add	r3, r2
 80110ee:	009b      	lsls	r3, r3, #2
 80110f0:	4a08      	ldr	r2, [pc, #32]	; (8011114 <xTaskPriorityDisinherit+0x104>)
 80110f2:	441a      	add	r2, r3
 80110f4:	693b      	ldr	r3, [r7, #16]
 80110f6:	3304      	adds	r3, #4
 80110f8:	4619      	mov	r1, r3
 80110fa:	4610      	mov	r0, r2
 80110fc:	f7fe fb76 	bl	800f7ec <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8011100:	2301      	movs	r3, #1
 8011102:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8011104:	697b      	ldr	r3, [r7, #20]
	}
 8011106:	4618      	mov	r0, r3
 8011108:	3718      	adds	r7, #24
 801110a:	46bd      	mov	sp, r7
 801110c:	bd80      	pop	{r7, pc}
 801110e:	bf00      	nop
 8011110:	20000980 	.word	0x20000980
 8011114:	20000984 	.word	0x20000984
 8011118:	20000c7c 	.word	0x20000c7c

0801111c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 801111c:	b580      	push	{r7, lr}
 801111e:	b088      	sub	sp, #32
 8011120:	af00      	add	r7, sp, #0
 8011122:	6078      	str	r0, [r7, #4]
 8011124:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8011126:	687b      	ldr	r3, [r7, #4]
 8011128:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 801112a:	2301      	movs	r3, #1
 801112c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801112e:	687b      	ldr	r3, [r7, #4]
 8011130:	2b00      	cmp	r3, #0
 8011132:	d077      	beq.n	8011224 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8011134:	69bb      	ldr	r3, [r7, #24]
 8011136:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011138:	2b00      	cmp	r3, #0
 801113a:	d10a      	bne.n	8011152 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 801113c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011140:	f383 8811 	msr	BASEPRI, r3
 8011144:	f3bf 8f6f 	isb	sy
 8011148:	f3bf 8f4f 	dsb	sy
 801114c:	60fb      	str	r3, [r7, #12]
}
 801114e:	bf00      	nop
 8011150:	e7fe      	b.n	8011150 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8011152:	69bb      	ldr	r3, [r7, #24]
 8011154:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011156:	683a      	ldr	r2, [r7, #0]
 8011158:	429a      	cmp	r2, r3
 801115a:	d902      	bls.n	8011162 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 801115c:	683b      	ldr	r3, [r7, #0]
 801115e:	61fb      	str	r3, [r7, #28]
 8011160:	e002      	b.n	8011168 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8011162:	69bb      	ldr	r3, [r7, #24]
 8011164:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011166:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8011168:	69bb      	ldr	r3, [r7, #24]
 801116a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801116c:	69fa      	ldr	r2, [r7, #28]
 801116e:	429a      	cmp	r2, r3
 8011170:	d058      	beq.n	8011224 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8011172:	69bb      	ldr	r3, [r7, #24]
 8011174:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011176:	697a      	ldr	r2, [r7, #20]
 8011178:	429a      	cmp	r2, r3
 801117a:	d153      	bne.n	8011224 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 801117c:	4b2b      	ldr	r3, [pc, #172]	; (801122c <vTaskPriorityDisinheritAfterTimeout+0x110>)
 801117e:	681b      	ldr	r3, [r3, #0]
 8011180:	69ba      	ldr	r2, [r7, #24]
 8011182:	429a      	cmp	r2, r3
 8011184:	d10a      	bne.n	801119c <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8011186:	f04f 0350 	mov.w	r3, #80	; 0x50
 801118a:	f383 8811 	msr	BASEPRI, r3
 801118e:	f3bf 8f6f 	isb	sy
 8011192:	f3bf 8f4f 	dsb	sy
 8011196:	60bb      	str	r3, [r7, #8]
}
 8011198:	bf00      	nop
 801119a:	e7fe      	b.n	801119a <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 801119c:	69bb      	ldr	r3, [r7, #24]
 801119e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80111a0:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80111a2:	69bb      	ldr	r3, [r7, #24]
 80111a4:	69fa      	ldr	r2, [r7, #28]
 80111a6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80111a8:	69bb      	ldr	r3, [r7, #24]
 80111aa:	699b      	ldr	r3, [r3, #24]
 80111ac:	2b00      	cmp	r3, #0
 80111ae:	db04      	blt.n	80111ba <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80111b0:	69fb      	ldr	r3, [r7, #28]
 80111b2:	f1c3 0220 	rsb	r2, r3, #32
 80111b6:	69bb      	ldr	r3, [r7, #24]
 80111b8:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80111ba:	69bb      	ldr	r3, [r7, #24]
 80111bc:	6959      	ldr	r1, [r3, #20]
 80111be:	693a      	ldr	r2, [r7, #16]
 80111c0:	4613      	mov	r3, r2
 80111c2:	009b      	lsls	r3, r3, #2
 80111c4:	4413      	add	r3, r2
 80111c6:	009b      	lsls	r3, r3, #2
 80111c8:	4a19      	ldr	r2, [pc, #100]	; (8011230 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 80111ca:	4413      	add	r3, r2
 80111cc:	4299      	cmp	r1, r3
 80111ce:	d129      	bne.n	8011224 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80111d0:	69bb      	ldr	r3, [r7, #24]
 80111d2:	3304      	adds	r3, #4
 80111d4:	4618      	mov	r0, r3
 80111d6:	f7fe fb66 	bl	800f8a6 <uxListRemove>
 80111da:	4603      	mov	r3, r0
 80111dc:	2b00      	cmp	r3, #0
 80111de:	d10a      	bne.n	80111f6 <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 80111e0:	69bb      	ldr	r3, [r7, #24]
 80111e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80111e4:	2201      	movs	r2, #1
 80111e6:	fa02 f303 	lsl.w	r3, r2, r3
 80111ea:	43da      	mvns	r2, r3
 80111ec:	4b11      	ldr	r3, [pc, #68]	; (8011234 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80111ee:	681b      	ldr	r3, [r3, #0]
 80111f0:	4013      	ands	r3, r2
 80111f2:	4a10      	ldr	r2, [pc, #64]	; (8011234 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80111f4:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80111f6:	69bb      	ldr	r3, [r7, #24]
 80111f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80111fa:	2201      	movs	r2, #1
 80111fc:	409a      	lsls	r2, r3
 80111fe:	4b0d      	ldr	r3, [pc, #52]	; (8011234 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8011200:	681b      	ldr	r3, [r3, #0]
 8011202:	4313      	orrs	r3, r2
 8011204:	4a0b      	ldr	r2, [pc, #44]	; (8011234 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8011206:	6013      	str	r3, [r2, #0]
 8011208:	69bb      	ldr	r3, [r7, #24]
 801120a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801120c:	4613      	mov	r3, r2
 801120e:	009b      	lsls	r3, r3, #2
 8011210:	4413      	add	r3, r2
 8011212:	009b      	lsls	r3, r3, #2
 8011214:	4a06      	ldr	r2, [pc, #24]	; (8011230 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8011216:	441a      	add	r2, r3
 8011218:	69bb      	ldr	r3, [r7, #24]
 801121a:	3304      	adds	r3, #4
 801121c:	4619      	mov	r1, r3
 801121e:	4610      	mov	r0, r2
 8011220:	f7fe fae4 	bl	800f7ec <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8011224:	bf00      	nop
 8011226:	3720      	adds	r7, #32
 8011228:	46bd      	mov	sp, r7
 801122a:	bd80      	pop	{r7, pc}
 801122c:	20000980 	.word	0x20000980
 8011230:	20000984 	.word	0x20000984
 8011234:	20000c7c 	.word	0x20000c7c

08011238 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8011238:	b480      	push	{r7}
 801123a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 801123c:	4b07      	ldr	r3, [pc, #28]	; (801125c <pvTaskIncrementMutexHeldCount+0x24>)
 801123e:	681b      	ldr	r3, [r3, #0]
 8011240:	2b00      	cmp	r3, #0
 8011242:	d004      	beq.n	801124e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8011244:	4b05      	ldr	r3, [pc, #20]	; (801125c <pvTaskIncrementMutexHeldCount+0x24>)
 8011246:	681b      	ldr	r3, [r3, #0]
 8011248:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 801124a:	3201      	adds	r2, #1
 801124c:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 801124e:	4b03      	ldr	r3, [pc, #12]	; (801125c <pvTaskIncrementMutexHeldCount+0x24>)
 8011250:	681b      	ldr	r3, [r3, #0]
	}
 8011252:	4618      	mov	r0, r3
 8011254:	46bd      	mov	sp, r7
 8011256:	f85d 7b04 	ldr.w	r7, [sp], #4
 801125a:	4770      	bx	lr
 801125c:	20000980 	.word	0x20000980

08011260 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8011260:	b580      	push	{r7, lr}
 8011262:	b084      	sub	sp, #16
 8011264:	af00      	add	r7, sp, #0
 8011266:	6078      	str	r0, [r7, #4]
 8011268:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 801126a:	4b29      	ldr	r3, [pc, #164]	; (8011310 <prvAddCurrentTaskToDelayedList+0xb0>)
 801126c:	681b      	ldr	r3, [r3, #0]
 801126e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011270:	4b28      	ldr	r3, [pc, #160]	; (8011314 <prvAddCurrentTaskToDelayedList+0xb4>)
 8011272:	681b      	ldr	r3, [r3, #0]
 8011274:	3304      	adds	r3, #4
 8011276:	4618      	mov	r0, r3
 8011278:	f7fe fb15 	bl	800f8a6 <uxListRemove>
 801127c:	4603      	mov	r3, r0
 801127e:	2b00      	cmp	r3, #0
 8011280:	d10b      	bne.n	801129a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8011282:	4b24      	ldr	r3, [pc, #144]	; (8011314 <prvAddCurrentTaskToDelayedList+0xb4>)
 8011284:	681b      	ldr	r3, [r3, #0]
 8011286:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011288:	2201      	movs	r2, #1
 801128a:	fa02 f303 	lsl.w	r3, r2, r3
 801128e:	43da      	mvns	r2, r3
 8011290:	4b21      	ldr	r3, [pc, #132]	; (8011318 <prvAddCurrentTaskToDelayedList+0xb8>)
 8011292:	681b      	ldr	r3, [r3, #0]
 8011294:	4013      	ands	r3, r2
 8011296:	4a20      	ldr	r2, [pc, #128]	; (8011318 <prvAddCurrentTaskToDelayedList+0xb8>)
 8011298:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 801129a:	687b      	ldr	r3, [r7, #4]
 801129c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80112a0:	d10a      	bne.n	80112b8 <prvAddCurrentTaskToDelayedList+0x58>
 80112a2:	683b      	ldr	r3, [r7, #0]
 80112a4:	2b00      	cmp	r3, #0
 80112a6:	d007      	beq.n	80112b8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80112a8:	4b1a      	ldr	r3, [pc, #104]	; (8011314 <prvAddCurrentTaskToDelayedList+0xb4>)
 80112aa:	681b      	ldr	r3, [r3, #0]
 80112ac:	3304      	adds	r3, #4
 80112ae:	4619      	mov	r1, r3
 80112b0:	481a      	ldr	r0, [pc, #104]	; (801131c <prvAddCurrentTaskToDelayedList+0xbc>)
 80112b2:	f7fe fa9b 	bl	800f7ec <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80112b6:	e026      	b.n	8011306 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80112b8:	68fa      	ldr	r2, [r7, #12]
 80112ba:	687b      	ldr	r3, [r7, #4]
 80112bc:	4413      	add	r3, r2
 80112be:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80112c0:	4b14      	ldr	r3, [pc, #80]	; (8011314 <prvAddCurrentTaskToDelayedList+0xb4>)
 80112c2:	681b      	ldr	r3, [r3, #0]
 80112c4:	68ba      	ldr	r2, [r7, #8]
 80112c6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80112c8:	68ba      	ldr	r2, [r7, #8]
 80112ca:	68fb      	ldr	r3, [r7, #12]
 80112cc:	429a      	cmp	r2, r3
 80112ce:	d209      	bcs.n	80112e4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80112d0:	4b13      	ldr	r3, [pc, #76]	; (8011320 <prvAddCurrentTaskToDelayedList+0xc0>)
 80112d2:	681a      	ldr	r2, [r3, #0]
 80112d4:	4b0f      	ldr	r3, [pc, #60]	; (8011314 <prvAddCurrentTaskToDelayedList+0xb4>)
 80112d6:	681b      	ldr	r3, [r3, #0]
 80112d8:	3304      	adds	r3, #4
 80112da:	4619      	mov	r1, r3
 80112dc:	4610      	mov	r0, r2
 80112de:	f7fe faa9 	bl	800f834 <vListInsert>
}
 80112e2:	e010      	b.n	8011306 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80112e4:	4b0f      	ldr	r3, [pc, #60]	; (8011324 <prvAddCurrentTaskToDelayedList+0xc4>)
 80112e6:	681a      	ldr	r2, [r3, #0]
 80112e8:	4b0a      	ldr	r3, [pc, #40]	; (8011314 <prvAddCurrentTaskToDelayedList+0xb4>)
 80112ea:	681b      	ldr	r3, [r3, #0]
 80112ec:	3304      	adds	r3, #4
 80112ee:	4619      	mov	r1, r3
 80112f0:	4610      	mov	r0, r2
 80112f2:	f7fe fa9f 	bl	800f834 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80112f6:	4b0c      	ldr	r3, [pc, #48]	; (8011328 <prvAddCurrentTaskToDelayedList+0xc8>)
 80112f8:	681b      	ldr	r3, [r3, #0]
 80112fa:	68ba      	ldr	r2, [r7, #8]
 80112fc:	429a      	cmp	r2, r3
 80112fe:	d202      	bcs.n	8011306 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8011300:	4a09      	ldr	r2, [pc, #36]	; (8011328 <prvAddCurrentTaskToDelayedList+0xc8>)
 8011302:	68bb      	ldr	r3, [r7, #8]
 8011304:	6013      	str	r3, [r2, #0]
}
 8011306:	bf00      	nop
 8011308:	3710      	adds	r7, #16
 801130a:	46bd      	mov	sp, r7
 801130c:	bd80      	pop	{r7, pc}
 801130e:	bf00      	nop
 8011310:	20000c78 	.word	0x20000c78
 8011314:	20000980 	.word	0x20000980
 8011318:	20000c7c 	.word	0x20000c7c
 801131c:	20000c60 	.word	0x20000c60
 8011320:	20000c30 	.word	0x20000c30
 8011324:	20000c2c 	.word	0x20000c2c
 8011328:	20000c94 	.word	0x20000c94

0801132c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 801132c:	b480      	push	{r7}
 801132e:	b085      	sub	sp, #20
 8011330:	af00      	add	r7, sp, #0
 8011332:	60f8      	str	r0, [r7, #12]
 8011334:	60b9      	str	r1, [r7, #8]
 8011336:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8011338:	68fb      	ldr	r3, [r7, #12]
 801133a:	3b04      	subs	r3, #4
 801133c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 801133e:	68fb      	ldr	r3, [r7, #12]
 8011340:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8011344:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8011346:	68fb      	ldr	r3, [r7, #12]
 8011348:	3b04      	subs	r3, #4
 801134a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 801134c:	68bb      	ldr	r3, [r7, #8]
 801134e:	f023 0201 	bic.w	r2, r3, #1
 8011352:	68fb      	ldr	r3, [r7, #12]
 8011354:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8011356:	68fb      	ldr	r3, [r7, #12]
 8011358:	3b04      	subs	r3, #4
 801135a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 801135c:	4a0c      	ldr	r2, [pc, #48]	; (8011390 <pxPortInitialiseStack+0x64>)
 801135e:	68fb      	ldr	r3, [r7, #12]
 8011360:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8011362:	68fb      	ldr	r3, [r7, #12]
 8011364:	3b14      	subs	r3, #20
 8011366:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8011368:	687a      	ldr	r2, [r7, #4]
 801136a:	68fb      	ldr	r3, [r7, #12]
 801136c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 801136e:	68fb      	ldr	r3, [r7, #12]
 8011370:	3b04      	subs	r3, #4
 8011372:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8011374:	68fb      	ldr	r3, [r7, #12]
 8011376:	f06f 0202 	mvn.w	r2, #2
 801137a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 801137c:	68fb      	ldr	r3, [r7, #12]
 801137e:	3b20      	subs	r3, #32
 8011380:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8011382:	68fb      	ldr	r3, [r7, #12]
}
 8011384:	4618      	mov	r0, r3
 8011386:	3714      	adds	r7, #20
 8011388:	46bd      	mov	sp, r7
 801138a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801138e:	4770      	bx	lr
 8011390:	08011395 	.word	0x08011395

08011394 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8011394:	b480      	push	{r7}
 8011396:	b085      	sub	sp, #20
 8011398:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 801139a:	2300      	movs	r3, #0
 801139c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 801139e:	4b12      	ldr	r3, [pc, #72]	; (80113e8 <prvTaskExitError+0x54>)
 80113a0:	681b      	ldr	r3, [r3, #0]
 80113a2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80113a6:	d00a      	beq.n	80113be <prvTaskExitError+0x2a>
	__asm volatile
 80113a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80113ac:	f383 8811 	msr	BASEPRI, r3
 80113b0:	f3bf 8f6f 	isb	sy
 80113b4:	f3bf 8f4f 	dsb	sy
 80113b8:	60fb      	str	r3, [r7, #12]
}
 80113ba:	bf00      	nop
 80113bc:	e7fe      	b.n	80113bc <prvTaskExitError+0x28>
	__asm volatile
 80113be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80113c2:	f383 8811 	msr	BASEPRI, r3
 80113c6:	f3bf 8f6f 	isb	sy
 80113ca:	f3bf 8f4f 	dsb	sy
 80113ce:	60bb      	str	r3, [r7, #8]
}
 80113d0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80113d2:	bf00      	nop
 80113d4:	687b      	ldr	r3, [r7, #4]
 80113d6:	2b00      	cmp	r3, #0
 80113d8:	d0fc      	beq.n	80113d4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80113da:	bf00      	nop
 80113dc:	bf00      	nop
 80113de:	3714      	adds	r7, #20
 80113e0:	46bd      	mov	sp, r7
 80113e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113e6:	4770      	bx	lr
 80113e8:	2000011c 	.word	0x2000011c
 80113ec:	00000000 	.word	0x00000000

080113f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80113f0:	4b07      	ldr	r3, [pc, #28]	; (8011410 <pxCurrentTCBConst2>)
 80113f2:	6819      	ldr	r1, [r3, #0]
 80113f4:	6808      	ldr	r0, [r1, #0]
 80113f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80113fa:	f380 8809 	msr	PSP, r0
 80113fe:	f3bf 8f6f 	isb	sy
 8011402:	f04f 0000 	mov.w	r0, #0
 8011406:	f380 8811 	msr	BASEPRI, r0
 801140a:	4770      	bx	lr
 801140c:	f3af 8000 	nop.w

08011410 <pxCurrentTCBConst2>:
 8011410:	20000980 	.word	0x20000980
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8011414:	bf00      	nop
 8011416:	bf00      	nop

08011418 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8011418:	4808      	ldr	r0, [pc, #32]	; (801143c <prvPortStartFirstTask+0x24>)
 801141a:	6800      	ldr	r0, [r0, #0]
 801141c:	6800      	ldr	r0, [r0, #0]
 801141e:	f380 8808 	msr	MSP, r0
 8011422:	f04f 0000 	mov.w	r0, #0
 8011426:	f380 8814 	msr	CONTROL, r0
 801142a:	b662      	cpsie	i
 801142c:	b661      	cpsie	f
 801142e:	f3bf 8f4f 	dsb	sy
 8011432:	f3bf 8f6f 	isb	sy
 8011436:	df00      	svc	0
 8011438:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801143a:	bf00      	nop
 801143c:	e000ed08 	.word	0xe000ed08

08011440 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8011440:	b580      	push	{r7, lr}
 8011442:	b086      	sub	sp, #24
 8011444:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8011446:	4b46      	ldr	r3, [pc, #280]	; (8011560 <xPortStartScheduler+0x120>)
 8011448:	681b      	ldr	r3, [r3, #0]
 801144a:	4a46      	ldr	r2, [pc, #280]	; (8011564 <xPortStartScheduler+0x124>)
 801144c:	4293      	cmp	r3, r2
 801144e:	d10a      	bne.n	8011466 <xPortStartScheduler+0x26>
	__asm volatile
 8011450:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011454:	f383 8811 	msr	BASEPRI, r3
 8011458:	f3bf 8f6f 	isb	sy
 801145c:	f3bf 8f4f 	dsb	sy
 8011460:	613b      	str	r3, [r7, #16]
}
 8011462:	bf00      	nop
 8011464:	e7fe      	b.n	8011464 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8011466:	4b3e      	ldr	r3, [pc, #248]	; (8011560 <xPortStartScheduler+0x120>)
 8011468:	681b      	ldr	r3, [r3, #0]
 801146a:	4a3f      	ldr	r2, [pc, #252]	; (8011568 <xPortStartScheduler+0x128>)
 801146c:	4293      	cmp	r3, r2
 801146e:	d10a      	bne.n	8011486 <xPortStartScheduler+0x46>
	__asm volatile
 8011470:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011474:	f383 8811 	msr	BASEPRI, r3
 8011478:	f3bf 8f6f 	isb	sy
 801147c:	f3bf 8f4f 	dsb	sy
 8011480:	60fb      	str	r3, [r7, #12]
}
 8011482:	bf00      	nop
 8011484:	e7fe      	b.n	8011484 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8011486:	4b39      	ldr	r3, [pc, #228]	; (801156c <xPortStartScheduler+0x12c>)
 8011488:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801148a:	697b      	ldr	r3, [r7, #20]
 801148c:	781b      	ldrb	r3, [r3, #0]
 801148e:	b2db      	uxtb	r3, r3
 8011490:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8011492:	697b      	ldr	r3, [r7, #20]
 8011494:	22ff      	movs	r2, #255	; 0xff
 8011496:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8011498:	697b      	ldr	r3, [r7, #20]
 801149a:	781b      	ldrb	r3, [r3, #0]
 801149c:	b2db      	uxtb	r3, r3
 801149e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80114a0:	78fb      	ldrb	r3, [r7, #3]
 80114a2:	b2db      	uxtb	r3, r3
 80114a4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80114a8:	b2da      	uxtb	r2, r3
 80114aa:	4b31      	ldr	r3, [pc, #196]	; (8011570 <xPortStartScheduler+0x130>)
 80114ac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80114ae:	4b31      	ldr	r3, [pc, #196]	; (8011574 <xPortStartScheduler+0x134>)
 80114b0:	2207      	movs	r2, #7
 80114b2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80114b4:	e009      	b.n	80114ca <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80114b6:	4b2f      	ldr	r3, [pc, #188]	; (8011574 <xPortStartScheduler+0x134>)
 80114b8:	681b      	ldr	r3, [r3, #0]
 80114ba:	3b01      	subs	r3, #1
 80114bc:	4a2d      	ldr	r2, [pc, #180]	; (8011574 <xPortStartScheduler+0x134>)
 80114be:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80114c0:	78fb      	ldrb	r3, [r7, #3]
 80114c2:	b2db      	uxtb	r3, r3
 80114c4:	005b      	lsls	r3, r3, #1
 80114c6:	b2db      	uxtb	r3, r3
 80114c8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80114ca:	78fb      	ldrb	r3, [r7, #3]
 80114cc:	b2db      	uxtb	r3, r3
 80114ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80114d2:	2b80      	cmp	r3, #128	; 0x80
 80114d4:	d0ef      	beq.n	80114b6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80114d6:	4b27      	ldr	r3, [pc, #156]	; (8011574 <xPortStartScheduler+0x134>)
 80114d8:	681b      	ldr	r3, [r3, #0]
 80114da:	f1c3 0307 	rsb	r3, r3, #7
 80114de:	2b04      	cmp	r3, #4
 80114e0:	d00a      	beq.n	80114f8 <xPortStartScheduler+0xb8>
	__asm volatile
 80114e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80114e6:	f383 8811 	msr	BASEPRI, r3
 80114ea:	f3bf 8f6f 	isb	sy
 80114ee:	f3bf 8f4f 	dsb	sy
 80114f2:	60bb      	str	r3, [r7, #8]
}
 80114f4:	bf00      	nop
 80114f6:	e7fe      	b.n	80114f6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80114f8:	4b1e      	ldr	r3, [pc, #120]	; (8011574 <xPortStartScheduler+0x134>)
 80114fa:	681b      	ldr	r3, [r3, #0]
 80114fc:	021b      	lsls	r3, r3, #8
 80114fe:	4a1d      	ldr	r2, [pc, #116]	; (8011574 <xPortStartScheduler+0x134>)
 8011500:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8011502:	4b1c      	ldr	r3, [pc, #112]	; (8011574 <xPortStartScheduler+0x134>)
 8011504:	681b      	ldr	r3, [r3, #0]
 8011506:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801150a:	4a1a      	ldr	r2, [pc, #104]	; (8011574 <xPortStartScheduler+0x134>)
 801150c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 801150e:	687b      	ldr	r3, [r7, #4]
 8011510:	b2da      	uxtb	r2, r3
 8011512:	697b      	ldr	r3, [r7, #20]
 8011514:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8011516:	4b18      	ldr	r3, [pc, #96]	; (8011578 <xPortStartScheduler+0x138>)
 8011518:	681b      	ldr	r3, [r3, #0]
 801151a:	4a17      	ldr	r2, [pc, #92]	; (8011578 <xPortStartScheduler+0x138>)
 801151c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8011520:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8011522:	4b15      	ldr	r3, [pc, #84]	; (8011578 <xPortStartScheduler+0x138>)
 8011524:	681b      	ldr	r3, [r3, #0]
 8011526:	4a14      	ldr	r2, [pc, #80]	; (8011578 <xPortStartScheduler+0x138>)
 8011528:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 801152c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 801152e:	f000 f8dd 	bl	80116ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8011532:	4b12      	ldr	r3, [pc, #72]	; (801157c <xPortStartScheduler+0x13c>)
 8011534:	2200      	movs	r2, #0
 8011536:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8011538:	f000 f8fc 	bl	8011734 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 801153c:	4b10      	ldr	r3, [pc, #64]	; (8011580 <xPortStartScheduler+0x140>)
 801153e:	681b      	ldr	r3, [r3, #0]
 8011540:	4a0f      	ldr	r2, [pc, #60]	; (8011580 <xPortStartScheduler+0x140>)
 8011542:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8011546:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8011548:	f7ff ff66 	bl	8011418 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 801154c:	f7ff faa4 	bl	8010a98 <vTaskSwitchContext>
	prvTaskExitError();
 8011550:	f7ff ff20 	bl	8011394 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8011554:	2300      	movs	r3, #0
}
 8011556:	4618      	mov	r0, r3
 8011558:	3718      	adds	r7, #24
 801155a:	46bd      	mov	sp, r7
 801155c:	bd80      	pop	{r7, pc}
 801155e:	bf00      	nop
 8011560:	e000ed00 	.word	0xe000ed00
 8011564:	410fc271 	.word	0x410fc271
 8011568:	410fc270 	.word	0x410fc270
 801156c:	e000e400 	.word	0xe000e400
 8011570:	20000ca0 	.word	0x20000ca0
 8011574:	20000ca4 	.word	0x20000ca4
 8011578:	e000ed20 	.word	0xe000ed20
 801157c:	2000011c 	.word	0x2000011c
 8011580:	e000ef34 	.word	0xe000ef34

08011584 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8011584:	b480      	push	{r7}
 8011586:	b083      	sub	sp, #12
 8011588:	af00      	add	r7, sp, #0
	__asm volatile
 801158a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801158e:	f383 8811 	msr	BASEPRI, r3
 8011592:	f3bf 8f6f 	isb	sy
 8011596:	f3bf 8f4f 	dsb	sy
 801159a:	607b      	str	r3, [r7, #4]
}
 801159c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801159e:	4b0f      	ldr	r3, [pc, #60]	; (80115dc <vPortEnterCritical+0x58>)
 80115a0:	681b      	ldr	r3, [r3, #0]
 80115a2:	3301      	adds	r3, #1
 80115a4:	4a0d      	ldr	r2, [pc, #52]	; (80115dc <vPortEnterCritical+0x58>)
 80115a6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80115a8:	4b0c      	ldr	r3, [pc, #48]	; (80115dc <vPortEnterCritical+0x58>)
 80115aa:	681b      	ldr	r3, [r3, #0]
 80115ac:	2b01      	cmp	r3, #1
 80115ae:	d10f      	bne.n	80115d0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80115b0:	4b0b      	ldr	r3, [pc, #44]	; (80115e0 <vPortEnterCritical+0x5c>)
 80115b2:	681b      	ldr	r3, [r3, #0]
 80115b4:	b2db      	uxtb	r3, r3
 80115b6:	2b00      	cmp	r3, #0
 80115b8:	d00a      	beq.n	80115d0 <vPortEnterCritical+0x4c>
	__asm volatile
 80115ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80115be:	f383 8811 	msr	BASEPRI, r3
 80115c2:	f3bf 8f6f 	isb	sy
 80115c6:	f3bf 8f4f 	dsb	sy
 80115ca:	603b      	str	r3, [r7, #0]
}
 80115cc:	bf00      	nop
 80115ce:	e7fe      	b.n	80115ce <vPortEnterCritical+0x4a>
	}
}
 80115d0:	bf00      	nop
 80115d2:	370c      	adds	r7, #12
 80115d4:	46bd      	mov	sp, r7
 80115d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115da:	4770      	bx	lr
 80115dc:	2000011c 	.word	0x2000011c
 80115e0:	e000ed04 	.word	0xe000ed04

080115e4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80115e4:	b480      	push	{r7}
 80115e6:	b083      	sub	sp, #12
 80115e8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80115ea:	4b12      	ldr	r3, [pc, #72]	; (8011634 <vPortExitCritical+0x50>)
 80115ec:	681b      	ldr	r3, [r3, #0]
 80115ee:	2b00      	cmp	r3, #0
 80115f0:	d10a      	bne.n	8011608 <vPortExitCritical+0x24>
	__asm volatile
 80115f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80115f6:	f383 8811 	msr	BASEPRI, r3
 80115fa:	f3bf 8f6f 	isb	sy
 80115fe:	f3bf 8f4f 	dsb	sy
 8011602:	607b      	str	r3, [r7, #4]
}
 8011604:	bf00      	nop
 8011606:	e7fe      	b.n	8011606 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8011608:	4b0a      	ldr	r3, [pc, #40]	; (8011634 <vPortExitCritical+0x50>)
 801160a:	681b      	ldr	r3, [r3, #0]
 801160c:	3b01      	subs	r3, #1
 801160e:	4a09      	ldr	r2, [pc, #36]	; (8011634 <vPortExitCritical+0x50>)
 8011610:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8011612:	4b08      	ldr	r3, [pc, #32]	; (8011634 <vPortExitCritical+0x50>)
 8011614:	681b      	ldr	r3, [r3, #0]
 8011616:	2b00      	cmp	r3, #0
 8011618:	d105      	bne.n	8011626 <vPortExitCritical+0x42>
 801161a:	2300      	movs	r3, #0
 801161c:	603b      	str	r3, [r7, #0]
	__asm volatile
 801161e:	683b      	ldr	r3, [r7, #0]
 8011620:	f383 8811 	msr	BASEPRI, r3
}
 8011624:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8011626:	bf00      	nop
 8011628:	370c      	adds	r7, #12
 801162a:	46bd      	mov	sp, r7
 801162c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011630:	4770      	bx	lr
 8011632:	bf00      	nop
 8011634:	2000011c 	.word	0x2000011c
	...

08011640 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8011640:	f3ef 8009 	mrs	r0, PSP
 8011644:	f3bf 8f6f 	isb	sy
 8011648:	4b15      	ldr	r3, [pc, #84]	; (80116a0 <pxCurrentTCBConst>)
 801164a:	681a      	ldr	r2, [r3, #0]
 801164c:	f01e 0f10 	tst.w	lr, #16
 8011650:	bf08      	it	eq
 8011652:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8011656:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801165a:	6010      	str	r0, [r2, #0]
 801165c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8011660:	f04f 0050 	mov.w	r0, #80	; 0x50
 8011664:	f380 8811 	msr	BASEPRI, r0
 8011668:	f3bf 8f4f 	dsb	sy
 801166c:	f3bf 8f6f 	isb	sy
 8011670:	f7ff fa12 	bl	8010a98 <vTaskSwitchContext>
 8011674:	f04f 0000 	mov.w	r0, #0
 8011678:	f380 8811 	msr	BASEPRI, r0
 801167c:	bc09      	pop	{r0, r3}
 801167e:	6819      	ldr	r1, [r3, #0]
 8011680:	6808      	ldr	r0, [r1, #0]
 8011682:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011686:	f01e 0f10 	tst.w	lr, #16
 801168a:	bf08      	it	eq
 801168c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8011690:	f380 8809 	msr	PSP, r0
 8011694:	f3bf 8f6f 	isb	sy
 8011698:	4770      	bx	lr
 801169a:	bf00      	nop
 801169c:	f3af 8000 	nop.w

080116a0 <pxCurrentTCBConst>:
 80116a0:	20000980 	.word	0x20000980
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80116a4:	bf00      	nop
 80116a6:	bf00      	nop

080116a8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80116a8:	b580      	push	{r7, lr}
 80116aa:	b082      	sub	sp, #8
 80116ac:	af00      	add	r7, sp, #0
	__asm volatile
 80116ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80116b2:	f383 8811 	msr	BASEPRI, r3
 80116b6:	f3bf 8f6f 	isb	sy
 80116ba:	f3bf 8f4f 	dsb	sy
 80116be:	607b      	str	r3, [r7, #4]
}
 80116c0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80116c2:	f7ff f931 	bl	8010928 <xTaskIncrementTick>
 80116c6:	4603      	mov	r3, r0
 80116c8:	2b00      	cmp	r3, #0
 80116ca:	d003      	beq.n	80116d4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80116cc:	4b06      	ldr	r3, [pc, #24]	; (80116e8 <SysTick_Handler+0x40>)
 80116ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80116d2:	601a      	str	r2, [r3, #0]
 80116d4:	2300      	movs	r3, #0
 80116d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80116d8:	683b      	ldr	r3, [r7, #0]
 80116da:	f383 8811 	msr	BASEPRI, r3
}
 80116de:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80116e0:	bf00      	nop
 80116e2:	3708      	adds	r7, #8
 80116e4:	46bd      	mov	sp, r7
 80116e6:	bd80      	pop	{r7, pc}
 80116e8:	e000ed04 	.word	0xe000ed04

080116ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80116ec:	b480      	push	{r7}
 80116ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80116f0:	4b0b      	ldr	r3, [pc, #44]	; (8011720 <vPortSetupTimerInterrupt+0x34>)
 80116f2:	2200      	movs	r2, #0
 80116f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80116f6:	4b0b      	ldr	r3, [pc, #44]	; (8011724 <vPortSetupTimerInterrupt+0x38>)
 80116f8:	2200      	movs	r2, #0
 80116fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80116fc:	4b0a      	ldr	r3, [pc, #40]	; (8011728 <vPortSetupTimerInterrupt+0x3c>)
 80116fe:	681b      	ldr	r3, [r3, #0]
 8011700:	4a0a      	ldr	r2, [pc, #40]	; (801172c <vPortSetupTimerInterrupt+0x40>)
 8011702:	fba2 2303 	umull	r2, r3, r2, r3
 8011706:	099b      	lsrs	r3, r3, #6
 8011708:	4a09      	ldr	r2, [pc, #36]	; (8011730 <vPortSetupTimerInterrupt+0x44>)
 801170a:	3b01      	subs	r3, #1
 801170c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801170e:	4b04      	ldr	r3, [pc, #16]	; (8011720 <vPortSetupTimerInterrupt+0x34>)
 8011710:	2207      	movs	r2, #7
 8011712:	601a      	str	r2, [r3, #0]
}
 8011714:	bf00      	nop
 8011716:	46bd      	mov	sp, r7
 8011718:	f85d 7b04 	ldr.w	r7, [sp], #4
 801171c:	4770      	bx	lr
 801171e:	bf00      	nop
 8011720:	e000e010 	.word	0xe000e010
 8011724:	e000e018 	.word	0xe000e018
 8011728:	20000000 	.word	0x20000000
 801172c:	10624dd3 	.word	0x10624dd3
 8011730:	e000e014 	.word	0xe000e014

08011734 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8011734:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8011744 <vPortEnableVFP+0x10>
 8011738:	6801      	ldr	r1, [r0, #0]
 801173a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801173e:	6001      	str	r1, [r0, #0]
 8011740:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8011742:	bf00      	nop
 8011744:	e000ed88 	.word	0xe000ed88

08011748 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8011748:	b480      	push	{r7}
 801174a:	b085      	sub	sp, #20
 801174c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801174e:	f3ef 8305 	mrs	r3, IPSR
 8011752:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8011754:	68fb      	ldr	r3, [r7, #12]
 8011756:	2b0f      	cmp	r3, #15
 8011758:	d914      	bls.n	8011784 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801175a:	4a17      	ldr	r2, [pc, #92]	; (80117b8 <vPortValidateInterruptPriority+0x70>)
 801175c:	68fb      	ldr	r3, [r7, #12]
 801175e:	4413      	add	r3, r2
 8011760:	781b      	ldrb	r3, [r3, #0]
 8011762:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8011764:	4b15      	ldr	r3, [pc, #84]	; (80117bc <vPortValidateInterruptPriority+0x74>)
 8011766:	781b      	ldrb	r3, [r3, #0]
 8011768:	7afa      	ldrb	r2, [r7, #11]
 801176a:	429a      	cmp	r2, r3
 801176c:	d20a      	bcs.n	8011784 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 801176e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011772:	f383 8811 	msr	BASEPRI, r3
 8011776:	f3bf 8f6f 	isb	sy
 801177a:	f3bf 8f4f 	dsb	sy
 801177e:	607b      	str	r3, [r7, #4]
}
 8011780:	bf00      	nop
 8011782:	e7fe      	b.n	8011782 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8011784:	4b0e      	ldr	r3, [pc, #56]	; (80117c0 <vPortValidateInterruptPriority+0x78>)
 8011786:	681b      	ldr	r3, [r3, #0]
 8011788:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 801178c:	4b0d      	ldr	r3, [pc, #52]	; (80117c4 <vPortValidateInterruptPriority+0x7c>)
 801178e:	681b      	ldr	r3, [r3, #0]
 8011790:	429a      	cmp	r2, r3
 8011792:	d90a      	bls.n	80117aa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8011794:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011798:	f383 8811 	msr	BASEPRI, r3
 801179c:	f3bf 8f6f 	isb	sy
 80117a0:	f3bf 8f4f 	dsb	sy
 80117a4:	603b      	str	r3, [r7, #0]
}
 80117a6:	bf00      	nop
 80117a8:	e7fe      	b.n	80117a8 <vPortValidateInterruptPriority+0x60>
	}
 80117aa:	bf00      	nop
 80117ac:	3714      	adds	r7, #20
 80117ae:	46bd      	mov	sp, r7
 80117b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117b4:	4770      	bx	lr
 80117b6:	bf00      	nop
 80117b8:	e000e3f0 	.word	0xe000e3f0
 80117bc:	20000ca0 	.word	0x20000ca0
 80117c0:	e000ed0c 	.word	0xe000ed0c
 80117c4:	20000ca4 	.word	0x20000ca4

080117c8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80117c8:	b580      	push	{r7, lr}
 80117ca:	b08a      	sub	sp, #40	; 0x28
 80117cc:	af00      	add	r7, sp, #0
 80117ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80117d0:	2300      	movs	r3, #0
 80117d2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80117d4:	f7fe fffe 	bl	80107d4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80117d8:	4b5b      	ldr	r3, [pc, #364]	; (8011948 <pvPortMalloc+0x180>)
 80117da:	681b      	ldr	r3, [r3, #0]
 80117dc:	2b00      	cmp	r3, #0
 80117de:	d101      	bne.n	80117e4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80117e0:	f000 f920 	bl	8011a24 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80117e4:	4b59      	ldr	r3, [pc, #356]	; (801194c <pvPortMalloc+0x184>)
 80117e6:	681a      	ldr	r2, [r3, #0]
 80117e8:	687b      	ldr	r3, [r7, #4]
 80117ea:	4013      	ands	r3, r2
 80117ec:	2b00      	cmp	r3, #0
 80117ee:	f040 8093 	bne.w	8011918 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80117f2:	687b      	ldr	r3, [r7, #4]
 80117f4:	2b00      	cmp	r3, #0
 80117f6:	d01d      	beq.n	8011834 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80117f8:	2208      	movs	r2, #8
 80117fa:	687b      	ldr	r3, [r7, #4]
 80117fc:	4413      	add	r3, r2
 80117fe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8011800:	687b      	ldr	r3, [r7, #4]
 8011802:	f003 0307 	and.w	r3, r3, #7
 8011806:	2b00      	cmp	r3, #0
 8011808:	d014      	beq.n	8011834 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801180a:	687b      	ldr	r3, [r7, #4]
 801180c:	f023 0307 	bic.w	r3, r3, #7
 8011810:	3308      	adds	r3, #8
 8011812:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8011814:	687b      	ldr	r3, [r7, #4]
 8011816:	f003 0307 	and.w	r3, r3, #7
 801181a:	2b00      	cmp	r3, #0
 801181c:	d00a      	beq.n	8011834 <pvPortMalloc+0x6c>
	__asm volatile
 801181e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011822:	f383 8811 	msr	BASEPRI, r3
 8011826:	f3bf 8f6f 	isb	sy
 801182a:	f3bf 8f4f 	dsb	sy
 801182e:	617b      	str	r3, [r7, #20]
}
 8011830:	bf00      	nop
 8011832:	e7fe      	b.n	8011832 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8011834:	687b      	ldr	r3, [r7, #4]
 8011836:	2b00      	cmp	r3, #0
 8011838:	d06e      	beq.n	8011918 <pvPortMalloc+0x150>
 801183a:	4b45      	ldr	r3, [pc, #276]	; (8011950 <pvPortMalloc+0x188>)
 801183c:	681b      	ldr	r3, [r3, #0]
 801183e:	687a      	ldr	r2, [r7, #4]
 8011840:	429a      	cmp	r2, r3
 8011842:	d869      	bhi.n	8011918 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8011844:	4b43      	ldr	r3, [pc, #268]	; (8011954 <pvPortMalloc+0x18c>)
 8011846:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8011848:	4b42      	ldr	r3, [pc, #264]	; (8011954 <pvPortMalloc+0x18c>)
 801184a:	681b      	ldr	r3, [r3, #0]
 801184c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801184e:	e004      	b.n	801185a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8011850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011852:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8011854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011856:	681b      	ldr	r3, [r3, #0]
 8011858:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801185a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801185c:	685b      	ldr	r3, [r3, #4]
 801185e:	687a      	ldr	r2, [r7, #4]
 8011860:	429a      	cmp	r2, r3
 8011862:	d903      	bls.n	801186c <pvPortMalloc+0xa4>
 8011864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011866:	681b      	ldr	r3, [r3, #0]
 8011868:	2b00      	cmp	r3, #0
 801186a:	d1f1      	bne.n	8011850 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801186c:	4b36      	ldr	r3, [pc, #216]	; (8011948 <pvPortMalloc+0x180>)
 801186e:	681b      	ldr	r3, [r3, #0]
 8011870:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011872:	429a      	cmp	r2, r3
 8011874:	d050      	beq.n	8011918 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8011876:	6a3b      	ldr	r3, [r7, #32]
 8011878:	681b      	ldr	r3, [r3, #0]
 801187a:	2208      	movs	r2, #8
 801187c:	4413      	add	r3, r2
 801187e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8011880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011882:	681a      	ldr	r2, [r3, #0]
 8011884:	6a3b      	ldr	r3, [r7, #32]
 8011886:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8011888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801188a:	685a      	ldr	r2, [r3, #4]
 801188c:	687b      	ldr	r3, [r7, #4]
 801188e:	1ad2      	subs	r2, r2, r3
 8011890:	2308      	movs	r3, #8
 8011892:	005b      	lsls	r3, r3, #1
 8011894:	429a      	cmp	r2, r3
 8011896:	d91f      	bls.n	80118d8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8011898:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801189a:	687b      	ldr	r3, [r7, #4]
 801189c:	4413      	add	r3, r2
 801189e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80118a0:	69bb      	ldr	r3, [r7, #24]
 80118a2:	f003 0307 	and.w	r3, r3, #7
 80118a6:	2b00      	cmp	r3, #0
 80118a8:	d00a      	beq.n	80118c0 <pvPortMalloc+0xf8>
	__asm volatile
 80118aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80118ae:	f383 8811 	msr	BASEPRI, r3
 80118b2:	f3bf 8f6f 	isb	sy
 80118b6:	f3bf 8f4f 	dsb	sy
 80118ba:	613b      	str	r3, [r7, #16]
}
 80118bc:	bf00      	nop
 80118be:	e7fe      	b.n	80118be <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80118c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80118c2:	685a      	ldr	r2, [r3, #4]
 80118c4:	687b      	ldr	r3, [r7, #4]
 80118c6:	1ad2      	subs	r2, r2, r3
 80118c8:	69bb      	ldr	r3, [r7, #24]
 80118ca:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80118cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80118ce:	687a      	ldr	r2, [r7, #4]
 80118d0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80118d2:	69b8      	ldr	r0, [r7, #24]
 80118d4:	f000 f908 	bl	8011ae8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80118d8:	4b1d      	ldr	r3, [pc, #116]	; (8011950 <pvPortMalloc+0x188>)
 80118da:	681a      	ldr	r2, [r3, #0]
 80118dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80118de:	685b      	ldr	r3, [r3, #4]
 80118e0:	1ad3      	subs	r3, r2, r3
 80118e2:	4a1b      	ldr	r2, [pc, #108]	; (8011950 <pvPortMalloc+0x188>)
 80118e4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80118e6:	4b1a      	ldr	r3, [pc, #104]	; (8011950 <pvPortMalloc+0x188>)
 80118e8:	681a      	ldr	r2, [r3, #0]
 80118ea:	4b1b      	ldr	r3, [pc, #108]	; (8011958 <pvPortMalloc+0x190>)
 80118ec:	681b      	ldr	r3, [r3, #0]
 80118ee:	429a      	cmp	r2, r3
 80118f0:	d203      	bcs.n	80118fa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80118f2:	4b17      	ldr	r3, [pc, #92]	; (8011950 <pvPortMalloc+0x188>)
 80118f4:	681b      	ldr	r3, [r3, #0]
 80118f6:	4a18      	ldr	r2, [pc, #96]	; (8011958 <pvPortMalloc+0x190>)
 80118f8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80118fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80118fc:	685a      	ldr	r2, [r3, #4]
 80118fe:	4b13      	ldr	r3, [pc, #76]	; (801194c <pvPortMalloc+0x184>)
 8011900:	681b      	ldr	r3, [r3, #0]
 8011902:	431a      	orrs	r2, r3
 8011904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011906:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8011908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801190a:	2200      	movs	r2, #0
 801190c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 801190e:	4b13      	ldr	r3, [pc, #76]	; (801195c <pvPortMalloc+0x194>)
 8011910:	681b      	ldr	r3, [r3, #0]
 8011912:	3301      	adds	r3, #1
 8011914:	4a11      	ldr	r2, [pc, #68]	; (801195c <pvPortMalloc+0x194>)
 8011916:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8011918:	f7fe ff6a 	bl	80107f0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801191c:	69fb      	ldr	r3, [r7, #28]
 801191e:	f003 0307 	and.w	r3, r3, #7
 8011922:	2b00      	cmp	r3, #0
 8011924:	d00a      	beq.n	801193c <pvPortMalloc+0x174>
	__asm volatile
 8011926:	f04f 0350 	mov.w	r3, #80	; 0x50
 801192a:	f383 8811 	msr	BASEPRI, r3
 801192e:	f3bf 8f6f 	isb	sy
 8011932:	f3bf 8f4f 	dsb	sy
 8011936:	60fb      	str	r3, [r7, #12]
}
 8011938:	bf00      	nop
 801193a:	e7fe      	b.n	801193a <pvPortMalloc+0x172>
	return pvReturn;
 801193c:	69fb      	ldr	r3, [r7, #28]
}
 801193e:	4618      	mov	r0, r3
 8011940:	3728      	adds	r7, #40	; 0x28
 8011942:	46bd      	mov	sp, r7
 8011944:	bd80      	pop	{r7, pc}
 8011946:	bf00      	nop
 8011948:	20004cb0 	.word	0x20004cb0
 801194c:	20004cc4 	.word	0x20004cc4
 8011950:	20004cb4 	.word	0x20004cb4
 8011954:	20004ca8 	.word	0x20004ca8
 8011958:	20004cb8 	.word	0x20004cb8
 801195c:	20004cbc 	.word	0x20004cbc

08011960 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8011960:	b580      	push	{r7, lr}
 8011962:	b086      	sub	sp, #24
 8011964:	af00      	add	r7, sp, #0
 8011966:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8011968:	687b      	ldr	r3, [r7, #4]
 801196a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 801196c:	687b      	ldr	r3, [r7, #4]
 801196e:	2b00      	cmp	r3, #0
 8011970:	d04d      	beq.n	8011a0e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8011972:	2308      	movs	r3, #8
 8011974:	425b      	negs	r3, r3
 8011976:	697a      	ldr	r2, [r7, #20]
 8011978:	4413      	add	r3, r2
 801197a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 801197c:	697b      	ldr	r3, [r7, #20]
 801197e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8011980:	693b      	ldr	r3, [r7, #16]
 8011982:	685a      	ldr	r2, [r3, #4]
 8011984:	4b24      	ldr	r3, [pc, #144]	; (8011a18 <vPortFree+0xb8>)
 8011986:	681b      	ldr	r3, [r3, #0]
 8011988:	4013      	ands	r3, r2
 801198a:	2b00      	cmp	r3, #0
 801198c:	d10a      	bne.n	80119a4 <vPortFree+0x44>
	__asm volatile
 801198e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011992:	f383 8811 	msr	BASEPRI, r3
 8011996:	f3bf 8f6f 	isb	sy
 801199a:	f3bf 8f4f 	dsb	sy
 801199e:	60fb      	str	r3, [r7, #12]
}
 80119a0:	bf00      	nop
 80119a2:	e7fe      	b.n	80119a2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80119a4:	693b      	ldr	r3, [r7, #16]
 80119a6:	681b      	ldr	r3, [r3, #0]
 80119a8:	2b00      	cmp	r3, #0
 80119aa:	d00a      	beq.n	80119c2 <vPortFree+0x62>
	__asm volatile
 80119ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80119b0:	f383 8811 	msr	BASEPRI, r3
 80119b4:	f3bf 8f6f 	isb	sy
 80119b8:	f3bf 8f4f 	dsb	sy
 80119bc:	60bb      	str	r3, [r7, #8]
}
 80119be:	bf00      	nop
 80119c0:	e7fe      	b.n	80119c0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80119c2:	693b      	ldr	r3, [r7, #16]
 80119c4:	685a      	ldr	r2, [r3, #4]
 80119c6:	4b14      	ldr	r3, [pc, #80]	; (8011a18 <vPortFree+0xb8>)
 80119c8:	681b      	ldr	r3, [r3, #0]
 80119ca:	4013      	ands	r3, r2
 80119cc:	2b00      	cmp	r3, #0
 80119ce:	d01e      	beq.n	8011a0e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80119d0:	693b      	ldr	r3, [r7, #16]
 80119d2:	681b      	ldr	r3, [r3, #0]
 80119d4:	2b00      	cmp	r3, #0
 80119d6:	d11a      	bne.n	8011a0e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80119d8:	693b      	ldr	r3, [r7, #16]
 80119da:	685a      	ldr	r2, [r3, #4]
 80119dc:	4b0e      	ldr	r3, [pc, #56]	; (8011a18 <vPortFree+0xb8>)
 80119de:	681b      	ldr	r3, [r3, #0]
 80119e0:	43db      	mvns	r3, r3
 80119e2:	401a      	ands	r2, r3
 80119e4:	693b      	ldr	r3, [r7, #16]
 80119e6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80119e8:	f7fe fef4 	bl	80107d4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80119ec:	693b      	ldr	r3, [r7, #16]
 80119ee:	685a      	ldr	r2, [r3, #4]
 80119f0:	4b0a      	ldr	r3, [pc, #40]	; (8011a1c <vPortFree+0xbc>)
 80119f2:	681b      	ldr	r3, [r3, #0]
 80119f4:	4413      	add	r3, r2
 80119f6:	4a09      	ldr	r2, [pc, #36]	; (8011a1c <vPortFree+0xbc>)
 80119f8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80119fa:	6938      	ldr	r0, [r7, #16]
 80119fc:	f000 f874 	bl	8011ae8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8011a00:	4b07      	ldr	r3, [pc, #28]	; (8011a20 <vPortFree+0xc0>)
 8011a02:	681b      	ldr	r3, [r3, #0]
 8011a04:	3301      	adds	r3, #1
 8011a06:	4a06      	ldr	r2, [pc, #24]	; (8011a20 <vPortFree+0xc0>)
 8011a08:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8011a0a:	f7fe fef1 	bl	80107f0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8011a0e:	bf00      	nop
 8011a10:	3718      	adds	r7, #24
 8011a12:	46bd      	mov	sp, r7
 8011a14:	bd80      	pop	{r7, pc}
 8011a16:	bf00      	nop
 8011a18:	20004cc4 	.word	0x20004cc4
 8011a1c:	20004cb4 	.word	0x20004cb4
 8011a20:	20004cc0 	.word	0x20004cc0

08011a24 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8011a24:	b480      	push	{r7}
 8011a26:	b085      	sub	sp, #20
 8011a28:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8011a2a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8011a2e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8011a30:	4b27      	ldr	r3, [pc, #156]	; (8011ad0 <prvHeapInit+0xac>)
 8011a32:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8011a34:	68fb      	ldr	r3, [r7, #12]
 8011a36:	f003 0307 	and.w	r3, r3, #7
 8011a3a:	2b00      	cmp	r3, #0
 8011a3c:	d00c      	beq.n	8011a58 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8011a3e:	68fb      	ldr	r3, [r7, #12]
 8011a40:	3307      	adds	r3, #7
 8011a42:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8011a44:	68fb      	ldr	r3, [r7, #12]
 8011a46:	f023 0307 	bic.w	r3, r3, #7
 8011a4a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8011a4c:	68ba      	ldr	r2, [r7, #8]
 8011a4e:	68fb      	ldr	r3, [r7, #12]
 8011a50:	1ad3      	subs	r3, r2, r3
 8011a52:	4a1f      	ldr	r2, [pc, #124]	; (8011ad0 <prvHeapInit+0xac>)
 8011a54:	4413      	add	r3, r2
 8011a56:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8011a58:	68fb      	ldr	r3, [r7, #12]
 8011a5a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8011a5c:	4a1d      	ldr	r2, [pc, #116]	; (8011ad4 <prvHeapInit+0xb0>)
 8011a5e:	687b      	ldr	r3, [r7, #4]
 8011a60:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8011a62:	4b1c      	ldr	r3, [pc, #112]	; (8011ad4 <prvHeapInit+0xb0>)
 8011a64:	2200      	movs	r2, #0
 8011a66:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8011a68:	687b      	ldr	r3, [r7, #4]
 8011a6a:	68ba      	ldr	r2, [r7, #8]
 8011a6c:	4413      	add	r3, r2
 8011a6e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8011a70:	2208      	movs	r2, #8
 8011a72:	68fb      	ldr	r3, [r7, #12]
 8011a74:	1a9b      	subs	r3, r3, r2
 8011a76:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8011a78:	68fb      	ldr	r3, [r7, #12]
 8011a7a:	f023 0307 	bic.w	r3, r3, #7
 8011a7e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8011a80:	68fb      	ldr	r3, [r7, #12]
 8011a82:	4a15      	ldr	r2, [pc, #84]	; (8011ad8 <prvHeapInit+0xb4>)
 8011a84:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8011a86:	4b14      	ldr	r3, [pc, #80]	; (8011ad8 <prvHeapInit+0xb4>)
 8011a88:	681b      	ldr	r3, [r3, #0]
 8011a8a:	2200      	movs	r2, #0
 8011a8c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8011a8e:	4b12      	ldr	r3, [pc, #72]	; (8011ad8 <prvHeapInit+0xb4>)
 8011a90:	681b      	ldr	r3, [r3, #0]
 8011a92:	2200      	movs	r2, #0
 8011a94:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8011a96:	687b      	ldr	r3, [r7, #4]
 8011a98:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8011a9a:	683b      	ldr	r3, [r7, #0]
 8011a9c:	68fa      	ldr	r2, [r7, #12]
 8011a9e:	1ad2      	subs	r2, r2, r3
 8011aa0:	683b      	ldr	r3, [r7, #0]
 8011aa2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8011aa4:	4b0c      	ldr	r3, [pc, #48]	; (8011ad8 <prvHeapInit+0xb4>)
 8011aa6:	681a      	ldr	r2, [r3, #0]
 8011aa8:	683b      	ldr	r3, [r7, #0]
 8011aaa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8011aac:	683b      	ldr	r3, [r7, #0]
 8011aae:	685b      	ldr	r3, [r3, #4]
 8011ab0:	4a0a      	ldr	r2, [pc, #40]	; (8011adc <prvHeapInit+0xb8>)
 8011ab2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8011ab4:	683b      	ldr	r3, [r7, #0]
 8011ab6:	685b      	ldr	r3, [r3, #4]
 8011ab8:	4a09      	ldr	r2, [pc, #36]	; (8011ae0 <prvHeapInit+0xbc>)
 8011aba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8011abc:	4b09      	ldr	r3, [pc, #36]	; (8011ae4 <prvHeapInit+0xc0>)
 8011abe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8011ac2:	601a      	str	r2, [r3, #0]
}
 8011ac4:	bf00      	nop
 8011ac6:	3714      	adds	r7, #20
 8011ac8:	46bd      	mov	sp, r7
 8011aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ace:	4770      	bx	lr
 8011ad0:	20000ca8 	.word	0x20000ca8
 8011ad4:	20004ca8 	.word	0x20004ca8
 8011ad8:	20004cb0 	.word	0x20004cb0
 8011adc:	20004cb8 	.word	0x20004cb8
 8011ae0:	20004cb4 	.word	0x20004cb4
 8011ae4:	20004cc4 	.word	0x20004cc4

08011ae8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8011ae8:	b480      	push	{r7}
 8011aea:	b085      	sub	sp, #20
 8011aec:	af00      	add	r7, sp, #0
 8011aee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8011af0:	4b28      	ldr	r3, [pc, #160]	; (8011b94 <prvInsertBlockIntoFreeList+0xac>)
 8011af2:	60fb      	str	r3, [r7, #12]
 8011af4:	e002      	b.n	8011afc <prvInsertBlockIntoFreeList+0x14>
 8011af6:	68fb      	ldr	r3, [r7, #12]
 8011af8:	681b      	ldr	r3, [r3, #0]
 8011afa:	60fb      	str	r3, [r7, #12]
 8011afc:	68fb      	ldr	r3, [r7, #12]
 8011afe:	681b      	ldr	r3, [r3, #0]
 8011b00:	687a      	ldr	r2, [r7, #4]
 8011b02:	429a      	cmp	r2, r3
 8011b04:	d8f7      	bhi.n	8011af6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8011b06:	68fb      	ldr	r3, [r7, #12]
 8011b08:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8011b0a:	68fb      	ldr	r3, [r7, #12]
 8011b0c:	685b      	ldr	r3, [r3, #4]
 8011b0e:	68ba      	ldr	r2, [r7, #8]
 8011b10:	4413      	add	r3, r2
 8011b12:	687a      	ldr	r2, [r7, #4]
 8011b14:	429a      	cmp	r2, r3
 8011b16:	d108      	bne.n	8011b2a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8011b18:	68fb      	ldr	r3, [r7, #12]
 8011b1a:	685a      	ldr	r2, [r3, #4]
 8011b1c:	687b      	ldr	r3, [r7, #4]
 8011b1e:	685b      	ldr	r3, [r3, #4]
 8011b20:	441a      	add	r2, r3
 8011b22:	68fb      	ldr	r3, [r7, #12]
 8011b24:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8011b26:	68fb      	ldr	r3, [r7, #12]
 8011b28:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8011b2a:	687b      	ldr	r3, [r7, #4]
 8011b2c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8011b2e:	687b      	ldr	r3, [r7, #4]
 8011b30:	685b      	ldr	r3, [r3, #4]
 8011b32:	68ba      	ldr	r2, [r7, #8]
 8011b34:	441a      	add	r2, r3
 8011b36:	68fb      	ldr	r3, [r7, #12]
 8011b38:	681b      	ldr	r3, [r3, #0]
 8011b3a:	429a      	cmp	r2, r3
 8011b3c:	d118      	bne.n	8011b70 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8011b3e:	68fb      	ldr	r3, [r7, #12]
 8011b40:	681a      	ldr	r2, [r3, #0]
 8011b42:	4b15      	ldr	r3, [pc, #84]	; (8011b98 <prvInsertBlockIntoFreeList+0xb0>)
 8011b44:	681b      	ldr	r3, [r3, #0]
 8011b46:	429a      	cmp	r2, r3
 8011b48:	d00d      	beq.n	8011b66 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8011b4a:	687b      	ldr	r3, [r7, #4]
 8011b4c:	685a      	ldr	r2, [r3, #4]
 8011b4e:	68fb      	ldr	r3, [r7, #12]
 8011b50:	681b      	ldr	r3, [r3, #0]
 8011b52:	685b      	ldr	r3, [r3, #4]
 8011b54:	441a      	add	r2, r3
 8011b56:	687b      	ldr	r3, [r7, #4]
 8011b58:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8011b5a:	68fb      	ldr	r3, [r7, #12]
 8011b5c:	681b      	ldr	r3, [r3, #0]
 8011b5e:	681a      	ldr	r2, [r3, #0]
 8011b60:	687b      	ldr	r3, [r7, #4]
 8011b62:	601a      	str	r2, [r3, #0]
 8011b64:	e008      	b.n	8011b78 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8011b66:	4b0c      	ldr	r3, [pc, #48]	; (8011b98 <prvInsertBlockIntoFreeList+0xb0>)
 8011b68:	681a      	ldr	r2, [r3, #0]
 8011b6a:	687b      	ldr	r3, [r7, #4]
 8011b6c:	601a      	str	r2, [r3, #0]
 8011b6e:	e003      	b.n	8011b78 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8011b70:	68fb      	ldr	r3, [r7, #12]
 8011b72:	681a      	ldr	r2, [r3, #0]
 8011b74:	687b      	ldr	r3, [r7, #4]
 8011b76:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8011b78:	68fa      	ldr	r2, [r7, #12]
 8011b7a:	687b      	ldr	r3, [r7, #4]
 8011b7c:	429a      	cmp	r2, r3
 8011b7e:	d002      	beq.n	8011b86 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8011b80:	68fb      	ldr	r3, [r7, #12]
 8011b82:	687a      	ldr	r2, [r7, #4]
 8011b84:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8011b86:	bf00      	nop
 8011b88:	3714      	adds	r7, #20
 8011b8a:	46bd      	mov	sp, r7
 8011b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b90:	4770      	bx	lr
 8011b92:	bf00      	nop
 8011b94:	20004ca8 	.word	0x20004ca8
 8011b98:	20004cb0 	.word	0x20004cb0

08011b9c <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 8011b9c:	b580      	push	{r7, lr}
 8011b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 8011ba0:	2200      	movs	r2, #0
 8011ba2:	4912      	ldr	r1, [pc, #72]	; (8011bec <MX_USB_Device_Init+0x50>)
 8011ba4:	4812      	ldr	r0, [pc, #72]	; (8011bf0 <MX_USB_Device_Init+0x54>)
 8011ba6:	f7fc fc7b 	bl	800e4a0 <USBD_Init>
 8011baa:	4603      	mov	r3, r0
 8011bac:	2b00      	cmp	r3, #0
 8011bae:	d001      	beq.n	8011bb4 <MX_USB_Device_Init+0x18>
    Error_Handler();
 8011bb0:	f7f0 f93a 	bl	8001e28 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 8011bb4:	490f      	ldr	r1, [pc, #60]	; (8011bf4 <MX_USB_Device_Init+0x58>)
 8011bb6:	480e      	ldr	r0, [pc, #56]	; (8011bf0 <MX_USB_Device_Init+0x54>)
 8011bb8:	f7fc fca2 	bl	800e500 <USBD_RegisterClass>
 8011bbc:	4603      	mov	r3, r0
 8011bbe:	2b00      	cmp	r3, #0
 8011bc0:	d001      	beq.n	8011bc6 <MX_USB_Device_Init+0x2a>
    Error_Handler();
 8011bc2:	f7f0 f931 	bl	8001e28 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 8011bc6:	490c      	ldr	r1, [pc, #48]	; (8011bf8 <MX_USB_Device_Init+0x5c>)
 8011bc8:	4809      	ldr	r0, [pc, #36]	; (8011bf0 <MX_USB_Device_Init+0x54>)
 8011bca:	f7fc fbf3 	bl	800e3b4 <USBD_CDC_RegisterInterface>
 8011bce:	4603      	mov	r3, r0
 8011bd0:	2b00      	cmp	r3, #0
 8011bd2:	d001      	beq.n	8011bd8 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 8011bd4:	f7f0 f928 	bl	8001e28 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 8011bd8:	4805      	ldr	r0, [pc, #20]	; (8011bf0 <MX_USB_Device_Init+0x54>)
 8011bda:	f7fc fcb8 	bl	800e54e <USBD_Start>
 8011bde:	4603      	mov	r3, r0
 8011be0:	2b00      	cmp	r3, #0
 8011be2:	d001      	beq.n	8011be8 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 8011be4:	f7f0 f920 	bl	8001e28 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 8011be8:	bf00      	nop
 8011bea:	bd80      	pop	{r7, pc}
 8011bec:	20000134 	.word	0x20000134
 8011bf0:	20004cc8 	.word	0x20004cc8
 8011bf4:	20000018 	.word	0x20000018
 8011bf8:	20000120 	.word	0x20000120

08011bfc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8011bfc:	b580      	push	{r7, lr}
 8011bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8011c00:	2200      	movs	r2, #0
 8011c02:	4905      	ldr	r1, [pc, #20]	; (8011c18 <CDC_Init_FS+0x1c>)
 8011c04:	4805      	ldr	r0, [pc, #20]	; (8011c1c <CDC_Init_FS+0x20>)
 8011c06:	f7fc fbea 	bl	800e3de <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8011c0a:	4905      	ldr	r1, [pc, #20]	; (8011c20 <CDC_Init_FS+0x24>)
 8011c0c:	4803      	ldr	r0, [pc, #12]	; (8011c1c <CDC_Init_FS+0x20>)
 8011c0e:	f7fc fc04 	bl	800e41a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8011c12:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8011c14:	4618      	mov	r0, r3
 8011c16:	bd80      	pop	{r7, pc}
 8011c18:	20005798 	.word	0x20005798
 8011c1c:	20004cc8 	.word	0x20004cc8
 8011c20:	20004f98 	.word	0x20004f98

08011c24 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8011c24:	b480      	push	{r7}
 8011c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8011c28:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8011c2a:	4618      	mov	r0, r3
 8011c2c:	46bd      	mov	sp, r7
 8011c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c32:	4770      	bx	lr

08011c34 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8011c34:	b480      	push	{r7}
 8011c36:	b083      	sub	sp, #12
 8011c38:	af00      	add	r7, sp, #0
 8011c3a:	4603      	mov	r3, r0
 8011c3c:	6039      	str	r1, [r7, #0]
 8011c3e:	71fb      	strb	r3, [r7, #7]
 8011c40:	4613      	mov	r3, r2
 8011c42:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8011c44:	79fb      	ldrb	r3, [r7, #7]
 8011c46:	2b23      	cmp	r3, #35	; 0x23
 8011c48:	d84a      	bhi.n	8011ce0 <CDC_Control_FS+0xac>
 8011c4a:	a201      	add	r2, pc, #4	; (adr r2, 8011c50 <CDC_Control_FS+0x1c>)
 8011c4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011c50:	08011ce1 	.word	0x08011ce1
 8011c54:	08011ce1 	.word	0x08011ce1
 8011c58:	08011ce1 	.word	0x08011ce1
 8011c5c:	08011ce1 	.word	0x08011ce1
 8011c60:	08011ce1 	.word	0x08011ce1
 8011c64:	08011ce1 	.word	0x08011ce1
 8011c68:	08011ce1 	.word	0x08011ce1
 8011c6c:	08011ce1 	.word	0x08011ce1
 8011c70:	08011ce1 	.word	0x08011ce1
 8011c74:	08011ce1 	.word	0x08011ce1
 8011c78:	08011ce1 	.word	0x08011ce1
 8011c7c:	08011ce1 	.word	0x08011ce1
 8011c80:	08011ce1 	.word	0x08011ce1
 8011c84:	08011ce1 	.word	0x08011ce1
 8011c88:	08011ce1 	.word	0x08011ce1
 8011c8c:	08011ce1 	.word	0x08011ce1
 8011c90:	08011ce1 	.word	0x08011ce1
 8011c94:	08011ce1 	.word	0x08011ce1
 8011c98:	08011ce1 	.word	0x08011ce1
 8011c9c:	08011ce1 	.word	0x08011ce1
 8011ca0:	08011ce1 	.word	0x08011ce1
 8011ca4:	08011ce1 	.word	0x08011ce1
 8011ca8:	08011ce1 	.word	0x08011ce1
 8011cac:	08011ce1 	.word	0x08011ce1
 8011cb0:	08011ce1 	.word	0x08011ce1
 8011cb4:	08011ce1 	.word	0x08011ce1
 8011cb8:	08011ce1 	.word	0x08011ce1
 8011cbc:	08011ce1 	.word	0x08011ce1
 8011cc0:	08011ce1 	.word	0x08011ce1
 8011cc4:	08011ce1 	.word	0x08011ce1
 8011cc8:	08011ce1 	.word	0x08011ce1
 8011ccc:	08011ce1 	.word	0x08011ce1
 8011cd0:	08011ce1 	.word	0x08011ce1
 8011cd4:	08011ce1 	.word	0x08011ce1
 8011cd8:	08011ce1 	.word	0x08011ce1
 8011cdc:	08011ce1 	.word	0x08011ce1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8011ce0:	bf00      	nop
  }

  return (USBD_OK);
 8011ce2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8011ce4:	4618      	mov	r0, r3
 8011ce6:	370c      	adds	r7, #12
 8011ce8:	46bd      	mov	sp, r7
 8011cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cee:	4770      	bx	lr

08011cf0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8011cf0:	b580      	push	{r7, lr}
 8011cf2:	b082      	sub	sp, #8
 8011cf4:	af00      	add	r7, sp, #0
 8011cf6:	6078      	str	r0, [r7, #4]
 8011cf8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8011cfa:	6879      	ldr	r1, [r7, #4]
 8011cfc:	4805      	ldr	r0, [pc, #20]	; (8011d14 <CDC_Receive_FS+0x24>)
 8011cfe:	f7fc fb8c 	bl	800e41a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8011d02:	4804      	ldr	r0, [pc, #16]	; (8011d14 <CDC_Receive_FS+0x24>)
 8011d04:	f7fc fba2 	bl	800e44c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8011d08:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8011d0a:	4618      	mov	r0, r3
 8011d0c:	3708      	adds	r7, #8
 8011d0e:	46bd      	mov	sp, r7
 8011d10:	bd80      	pop	{r7, pc}
 8011d12:	bf00      	nop
 8011d14:	20004cc8 	.word	0x20004cc8

08011d18 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8011d18:	b480      	push	{r7}
 8011d1a:	b087      	sub	sp, #28
 8011d1c:	af00      	add	r7, sp, #0
 8011d1e:	60f8      	str	r0, [r7, #12]
 8011d20:	60b9      	str	r1, [r7, #8]
 8011d22:	4613      	mov	r3, r2
 8011d24:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8011d26:	2300      	movs	r3, #0
 8011d28:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8011d2a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8011d2e:	4618      	mov	r0, r3
 8011d30:	371c      	adds	r7, #28
 8011d32:	46bd      	mov	sp, r7
 8011d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d38:	4770      	bx	lr
	...

08011d3c <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011d3c:	b480      	push	{r7}
 8011d3e:	b083      	sub	sp, #12
 8011d40:	af00      	add	r7, sp, #0
 8011d42:	4603      	mov	r3, r0
 8011d44:	6039      	str	r1, [r7, #0]
 8011d46:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 8011d48:	683b      	ldr	r3, [r7, #0]
 8011d4a:	2212      	movs	r2, #18
 8011d4c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 8011d4e:	4b03      	ldr	r3, [pc, #12]	; (8011d5c <USBD_CDC_DeviceDescriptor+0x20>)
}
 8011d50:	4618      	mov	r0, r3
 8011d52:	370c      	adds	r7, #12
 8011d54:	46bd      	mov	sp, r7
 8011d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d5a:	4770      	bx	lr
 8011d5c:	20000154 	.word	0x20000154

08011d60 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011d60:	b480      	push	{r7}
 8011d62:	b083      	sub	sp, #12
 8011d64:	af00      	add	r7, sp, #0
 8011d66:	4603      	mov	r3, r0
 8011d68:	6039      	str	r1, [r7, #0]
 8011d6a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8011d6c:	683b      	ldr	r3, [r7, #0]
 8011d6e:	2204      	movs	r2, #4
 8011d70:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8011d72:	4b03      	ldr	r3, [pc, #12]	; (8011d80 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 8011d74:	4618      	mov	r0, r3
 8011d76:	370c      	adds	r7, #12
 8011d78:	46bd      	mov	sp, r7
 8011d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d7e:	4770      	bx	lr
 8011d80:	20000168 	.word	0x20000168

08011d84 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011d84:	b580      	push	{r7, lr}
 8011d86:	b082      	sub	sp, #8
 8011d88:	af00      	add	r7, sp, #0
 8011d8a:	4603      	mov	r3, r0
 8011d8c:	6039      	str	r1, [r7, #0]
 8011d8e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8011d90:	79fb      	ldrb	r3, [r7, #7]
 8011d92:	2b00      	cmp	r3, #0
 8011d94:	d105      	bne.n	8011da2 <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8011d96:	683a      	ldr	r2, [r7, #0]
 8011d98:	4907      	ldr	r1, [pc, #28]	; (8011db8 <USBD_CDC_ProductStrDescriptor+0x34>)
 8011d9a:	4808      	ldr	r0, [pc, #32]	; (8011dbc <USBD_CDC_ProductStrDescriptor+0x38>)
 8011d9c:	f7fd fbbf 	bl	800f51e <USBD_GetString>
 8011da0:	e004      	b.n	8011dac <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8011da2:	683a      	ldr	r2, [r7, #0]
 8011da4:	4904      	ldr	r1, [pc, #16]	; (8011db8 <USBD_CDC_ProductStrDescriptor+0x34>)
 8011da6:	4805      	ldr	r0, [pc, #20]	; (8011dbc <USBD_CDC_ProductStrDescriptor+0x38>)
 8011da8:	f7fd fbb9 	bl	800f51e <USBD_GetString>
  }
  return USBD_StrDesc;
 8011dac:	4b02      	ldr	r3, [pc, #8]	; (8011db8 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 8011dae:	4618      	mov	r0, r3
 8011db0:	3708      	adds	r7, #8
 8011db2:	46bd      	mov	sp, r7
 8011db4:	bd80      	pop	{r7, pc}
 8011db6:	bf00      	nop
 8011db8:	20005f98 	.word	0x20005f98
 8011dbc:	08015910 	.word	0x08015910

08011dc0 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011dc0:	b580      	push	{r7, lr}
 8011dc2:	b082      	sub	sp, #8
 8011dc4:	af00      	add	r7, sp, #0
 8011dc6:	4603      	mov	r3, r0
 8011dc8:	6039      	str	r1, [r7, #0]
 8011dca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8011dcc:	683a      	ldr	r2, [r7, #0]
 8011dce:	4904      	ldr	r1, [pc, #16]	; (8011de0 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 8011dd0:	4804      	ldr	r0, [pc, #16]	; (8011de4 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 8011dd2:	f7fd fba4 	bl	800f51e <USBD_GetString>
  return USBD_StrDesc;
 8011dd6:	4b02      	ldr	r3, [pc, #8]	; (8011de0 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 8011dd8:	4618      	mov	r0, r3
 8011dda:	3708      	adds	r7, #8
 8011ddc:	46bd      	mov	sp, r7
 8011dde:	bd80      	pop	{r7, pc}
 8011de0:	20005f98 	.word	0x20005f98
 8011de4:	08015928 	.word	0x08015928

08011de8 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011de8:	b580      	push	{r7, lr}
 8011dea:	b082      	sub	sp, #8
 8011dec:	af00      	add	r7, sp, #0
 8011dee:	4603      	mov	r3, r0
 8011df0:	6039      	str	r1, [r7, #0]
 8011df2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8011df4:	683b      	ldr	r3, [r7, #0]
 8011df6:	221a      	movs	r2, #26
 8011df8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8011dfa:	f000 f843 	bl	8011e84 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8011dfe:	4b02      	ldr	r3, [pc, #8]	; (8011e08 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 8011e00:	4618      	mov	r0, r3
 8011e02:	3708      	adds	r7, #8
 8011e04:	46bd      	mov	sp, r7
 8011e06:	bd80      	pop	{r7, pc}
 8011e08:	2000016c 	.word	0x2000016c

08011e0c <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011e0c:	b580      	push	{r7, lr}
 8011e0e:	b082      	sub	sp, #8
 8011e10:	af00      	add	r7, sp, #0
 8011e12:	4603      	mov	r3, r0
 8011e14:	6039      	str	r1, [r7, #0]
 8011e16:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8011e18:	79fb      	ldrb	r3, [r7, #7]
 8011e1a:	2b00      	cmp	r3, #0
 8011e1c:	d105      	bne.n	8011e2a <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8011e1e:	683a      	ldr	r2, [r7, #0]
 8011e20:	4907      	ldr	r1, [pc, #28]	; (8011e40 <USBD_CDC_ConfigStrDescriptor+0x34>)
 8011e22:	4808      	ldr	r0, [pc, #32]	; (8011e44 <USBD_CDC_ConfigStrDescriptor+0x38>)
 8011e24:	f7fd fb7b 	bl	800f51e <USBD_GetString>
 8011e28:	e004      	b.n	8011e34 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8011e2a:	683a      	ldr	r2, [r7, #0]
 8011e2c:	4904      	ldr	r1, [pc, #16]	; (8011e40 <USBD_CDC_ConfigStrDescriptor+0x34>)
 8011e2e:	4805      	ldr	r0, [pc, #20]	; (8011e44 <USBD_CDC_ConfigStrDescriptor+0x38>)
 8011e30:	f7fd fb75 	bl	800f51e <USBD_GetString>
  }
  return USBD_StrDesc;
 8011e34:	4b02      	ldr	r3, [pc, #8]	; (8011e40 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 8011e36:	4618      	mov	r0, r3
 8011e38:	3708      	adds	r7, #8
 8011e3a:	46bd      	mov	sp, r7
 8011e3c:	bd80      	pop	{r7, pc}
 8011e3e:	bf00      	nop
 8011e40:	20005f98 	.word	0x20005f98
 8011e44:	0801593c 	.word	0x0801593c

08011e48 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011e48:	b580      	push	{r7, lr}
 8011e4a:	b082      	sub	sp, #8
 8011e4c:	af00      	add	r7, sp, #0
 8011e4e:	4603      	mov	r3, r0
 8011e50:	6039      	str	r1, [r7, #0]
 8011e52:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8011e54:	79fb      	ldrb	r3, [r7, #7]
 8011e56:	2b00      	cmp	r3, #0
 8011e58:	d105      	bne.n	8011e66 <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8011e5a:	683a      	ldr	r2, [r7, #0]
 8011e5c:	4907      	ldr	r1, [pc, #28]	; (8011e7c <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8011e5e:	4808      	ldr	r0, [pc, #32]	; (8011e80 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8011e60:	f7fd fb5d 	bl	800f51e <USBD_GetString>
 8011e64:	e004      	b.n	8011e70 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8011e66:	683a      	ldr	r2, [r7, #0]
 8011e68:	4904      	ldr	r1, [pc, #16]	; (8011e7c <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8011e6a:	4805      	ldr	r0, [pc, #20]	; (8011e80 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8011e6c:	f7fd fb57 	bl	800f51e <USBD_GetString>
  }
  return USBD_StrDesc;
 8011e70:	4b02      	ldr	r3, [pc, #8]	; (8011e7c <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 8011e72:	4618      	mov	r0, r3
 8011e74:	3708      	adds	r7, #8
 8011e76:	46bd      	mov	sp, r7
 8011e78:	bd80      	pop	{r7, pc}
 8011e7a:	bf00      	nop
 8011e7c:	20005f98 	.word	0x20005f98
 8011e80:	08015948 	.word	0x08015948

08011e84 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8011e84:	b580      	push	{r7, lr}
 8011e86:	b084      	sub	sp, #16
 8011e88:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8011e8a:	4b0f      	ldr	r3, [pc, #60]	; (8011ec8 <Get_SerialNum+0x44>)
 8011e8c:	681b      	ldr	r3, [r3, #0]
 8011e8e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8011e90:	4b0e      	ldr	r3, [pc, #56]	; (8011ecc <Get_SerialNum+0x48>)
 8011e92:	681b      	ldr	r3, [r3, #0]
 8011e94:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8011e96:	4b0e      	ldr	r3, [pc, #56]	; (8011ed0 <Get_SerialNum+0x4c>)
 8011e98:	681b      	ldr	r3, [r3, #0]
 8011e9a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8011e9c:	68fa      	ldr	r2, [r7, #12]
 8011e9e:	687b      	ldr	r3, [r7, #4]
 8011ea0:	4413      	add	r3, r2
 8011ea2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8011ea4:	68fb      	ldr	r3, [r7, #12]
 8011ea6:	2b00      	cmp	r3, #0
 8011ea8:	d009      	beq.n	8011ebe <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8011eaa:	2208      	movs	r2, #8
 8011eac:	4909      	ldr	r1, [pc, #36]	; (8011ed4 <Get_SerialNum+0x50>)
 8011eae:	68f8      	ldr	r0, [r7, #12]
 8011eb0:	f000 f814 	bl	8011edc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8011eb4:	2204      	movs	r2, #4
 8011eb6:	4908      	ldr	r1, [pc, #32]	; (8011ed8 <Get_SerialNum+0x54>)
 8011eb8:	68b8      	ldr	r0, [r7, #8]
 8011eba:	f000 f80f 	bl	8011edc <IntToUnicode>
  }
}
 8011ebe:	bf00      	nop
 8011ec0:	3710      	adds	r7, #16
 8011ec2:	46bd      	mov	sp, r7
 8011ec4:	bd80      	pop	{r7, pc}
 8011ec6:	bf00      	nop
 8011ec8:	1fff7590 	.word	0x1fff7590
 8011ecc:	1fff7594 	.word	0x1fff7594
 8011ed0:	1fff7598 	.word	0x1fff7598
 8011ed4:	2000016e 	.word	0x2000016e
 8011ed8:	2000017e 	.word	0x2000017e

08011edc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8011edc:	b480      	push	{r7}
 8011ede:	b087      	sub	sp, #28
 8011ee0:	af00      	add	r7, sp, #0
 8011ee2:	60f8      	str	r0, [r7, #12]
 8011ee4:	60b9      	str	r1, [r7, #8]
 8011ee6:	4613      	mov	r3, r2
 8011ee8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8011eea:	2300      	movs	r3, #0
 8011eec:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8011eee:	2300      	movs	r3, #0
 8011ef0:	75fb      	strb	r3, [r7, #23]
 8011ef2:	e027      	b.n	8011f44 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8011ef4:	68fb      	ldr	r3, [r7, #12]
 8011ef6:	0f1b      	lsrs	r3, r3, #28
 8011ef8:	2b09      	cmp	r3, #9
 8011efa:	d80b      	bhi.n	8011f14 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8011efc:	68fb      	ldr	r3, [r7, #12]
 8011efe:	0f1b      	lsrs	r3, r3, #28
 8011f00:	b2da      	uxtb	r2, r3
 8011f02:	7dfb      	ldrb	r3, [r7, #23]
 8011f04:	005b      	lsls	r3, r3, #1
 8011f06:	4619      	mov	r1, r3
 8011f08:	68bb      	ldr	r3, [r7, #8]
 8011f0a:	440b      	add	r3, r1
 8011f0c:	3230      	adds	r2, #48	; 0x30
 8011f0e:	b2d2      	uxtb	r2, r2
 8011f10:	701a      	strb	r2, [r3, #0]
 8011f12:	e00a      	b.n	8011f2a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8011f14:	68fb      	ldr	r3, [r7, #12]
 8011f16:	0f1b      	lsrs	r3, r3, #28
 8011f18:	b2da      	uxtb	r2, r3
 8011f1a:	7dfb      	ldrb	r3, [r7, #23]
 8011f1c:	005b      	lsls	r3, r3, #1
 8011f1e:	4619      	mov	r1, r3
 8011f20:	68bb      	ldr	r3, [r7, #8]
 8011f22:	440b      	add	r3, r1
 8011f24:	3237      	adds	r2, #55	; 0x37
 8011f26:	b2d2      	uxtb	r2, r2
 8011f28:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8011f2a:	68fb      	ldr	r3, [r7, #12]
 8011f2c:	011b      	lsls	r3, r3, #4
 8011f2e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8011f30:	7dfb      	ldrb	r3, [r7, #23]
 8011f32:	005b      	lsls	r3, r3, #1
 8011f34:	3301      	adds	r3, #1
 8011f36:	68ba      	ldr	r2, [r7, #8]
 8011f38:	4413      	add	r3, r2
 8011f3a:	2200      	movs	r2, #0
 8011f3c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8011f3e:	7dfb      	ldrb	r3, [r7, #23]
 8011f40:	3301      	adds	r3, #1
 8011f42:	75fb      	strb	r3, [r7, #23]
 8011f44:	7dfa      	ldrb	r2, [r7, #23]
 8011f46:	79fb      	ldrb	r3, [r7, #7]
 8011f48:	429a      	cmp	r2, r3
 8011f4a:	d3d3      	bcc.n	8011ef4 <IntToUnicode+0x18>
  }
}
 8011f4c:	bf00      	nop
 8011f4e:	bf00      	nop
 8011f50:	371c      	adds	r7, #28
 8011f52:	46bd      	mov	sp, r7
 8011f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f58:	4770      	bx	lr
	...

08011f5c <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011f5c:	b580      	push	{r7, lr}
 8011f5e:	b098      	sub	sp, #96	; 0x60
 8011f60:	af00      	add	r7, sp, #0
 8011f62:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8011f64:	f107 030c 	add.w	r3, r7, #12
 8011f68:	2254      	movs	r2, #84	; 0x54
 8011f6a:	2100      	movs	r1, #0
 8011f6c:	4618      	mov	r0, r3
 8011f6e:	f001 f9ab 	bl	80132c8 <memset>
  if(pcdHandle->Instance==USB)
 8011f72:	687b      	ldr	r3, [r7, #4]
 8011f74:	681b      	ldr	r3, [r3, #0]
 8011f76:	4a15      	ldr	r2, [pc, #84]	; (8011fcc <HAL_PCD_MspInit+0x70>)
 8011f78:	4293      	cmp	r3, r2
 8011f7a:	d122      	bne.n	8011fc2 <HAL_PCD_MspInit+0x66>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8011f7c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8011f80:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8011f82:	2300      	movs	r3, #0
 8011f84:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8011f86:	f107 030c 	add.w	r3, r7, #12
 8011f8a:	4618      	mov	r0, r3
 8011f8c:	f7f6 fb8e 	bl	80086ac <HAL_RCCEx_PeriphCLKConfig>
 8011f90:	4603      	mov	r3, r0
 8011f92:	2b00      	cmp	r3, #0
 8011f94:	d001      	beq.n	8011f9a <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 8011f96:	f7ef ff47 	bl	8001e28 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8011f9a:	4b0d      	ldr	r3, [pc, #52]	; (8011fd0 <HAL_PCD_MspInit+0x74>)
 8011f9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011f9e:	4a0c      	ldr	r2, [pc, #48]	; (8011fd0 <HAL_PCD_MspInit+0x74>)
 8011fa0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8011fa4:	6593      	str	r3, [r2, #88]	; 0x58
 8011fa6:	4b0a      	ldr	r3, [pc, #40]	; (8011fd0 <HAL_PCD_MspInit+0x74>)
 8011fa8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011faa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8011fae:	60bb      	str	r3, [r7, #8]
 8011fb0:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 5, 0);
 8011fb2:	2200      	movs	r2, #0
 8011fb4:	2105      	movs	r1, #5
 8011fb6:	2014      	movs	r0, #20
 8011fb8:	f7f2 ff10 	bl	8004ddc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 8011fbc:	2014      	movs	r0, #20
 8011fbe:	f7f2 ff27 	bl	8004e10 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8011fc2:	bf00      	nop
 8011fc4:	3760      	adds	r7, #96	; 0x60
 8011fc6:	46bd      	mov	sp, r7
 8011fc8:	bd80      	pop	{r7, pc}
 8011fca:	bf00      	nop
 8011fcc:	40005c00 	.word	0x40005c00
 8011fd0:	40021000 	.word	0x40021000

08011fd4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011fd4:	b580      	push	{r7, lr}
 8011fd6:	b082      	sub	sp, #8
 8011fd8:	af00      	add	r7, sp, #0
 8011fda:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8011fdc:	687b      	ldr	r3, [r7, #4]
 8011fde:	f8d3 22f0 	ldr.w	r2, [r3, #752]	; 0x2f0
 8011fe2:	687b      	ldr	r3, [r7, #4]
 8011fe4:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8011fe8:	4619      	mov	r1, r3
 8011fea:	4610      	mov	r0, r2
 8011fec:	f7fc fafa 	bl	800e5e4 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 8011ff0:	bf00      	nop
 8011ff2:	3708      	adds	r7, #8
 8011ff4:	46bd      	mov	sp, r7
 8011ff6:	bd80      	pop	{r7, pc}

08011ff8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011ff8:	b580      	push	{r7, lr}
 8011ffa:	b082      	sub	sp, #8
 8011ffc:	af00      	add	r7, sp, #0
 8011ffe:	6078      	str	r0, [r7, #4]
 8012000:	460b      	mov	r3, r1
 8012002:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8012004:	687b      	ldr	r3, [r7, #4]
 8012006:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 801200a:	78fa      	ldrb	r2, [r7, #3]
 801200c:	6879      	ldr	r1, [r7, #4]
 801200e:	4613      	mov	r3, r2
 8012010:	009b      	lsls	r3, r3, #2
 8012012:	4413      	add	r3, r2
 8012014:	00db      	lsls	r3, r3, #3
 8012016:	440b      	add	r3, r1
 8012018:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 801201c:	681a      	ldr	r2, [r3, #0]
 801201e:	78fb      	ldrb	r3, [r7, #3]
 8012020:	4619      	mov	r1, r3
 8012022:	f7fc fb34 	bl	800e68e <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 8012026:	bf00      	nop
 8012028:	3708      	adds	r7, #8
 801202a:	46bd      	mov	sp, r7
 801202c:	bd80      	pop	{r7, pc}

0801202e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801202e:	b580      	push	{r7, lr}
 8012030:	b082      	sub	sp, #8
 8012032:	af00      	add	r7, sp, #0
 8012034:	6078      	str	r0, [r7, #4]
 8012036:	460b      	mov	r3, r1
 8012038:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801203a:	687b      	ldr	r3, [r7, #4]
 801203c:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 8012040:	78fa      	ldrb	r2, [r7, #3]
 8012042:	6879      	ldr	r1, [r7, #4]
 8012044:	4613      	mov	r3, r2
 8012046:	009b      	lsls	r3, r3, #2
 8012048:	4413      	add	r3, r2
 801204a:	00db      	lsls	r3, r3, #3
 801204c:	440b      	add	r3, r1
 801204e:	333c      	adds	r3, #60	; 0x3c
 8012050:	681a      	ldr	r2, [r3, #0]
 8012052:	78fb      	ldrb	r3, [r7, #3]
 8012054:	4619      	mov	r1, r3
 8012056:	f7fc fb7d 	bl	800e754 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 801205a:	bf00      	nop
 801205c:	3708      	adds	r7, #8
 801205e:	46bd      	mov	sp, r7
 8012060:	bd80      	pop	{r7, pc}

08012062 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012062:	b580      	push	{r7, lr}
 8012064:	b082      	sub	sp, #8
 8012066:	af00      	add	r7, sp, #0
 8012068:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801206a:	687b      	ldr	r3, [r7, #4]
 801206c:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8012070:	4618      	mov	r0, r3
 8012072:	f7fc fc91 	bl	800e998 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 8012076:	bf00      	nop
 8012078:	3708      	adds	r7, #8
 801207a:	46bd      	mov	sp, r7
 801207c:	bd80      	pop	{r7, pc}

0801207e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801207e:	b580      	push	{r7, lr}
 8012080:	b084      	sub	sp, #16
 8012082:	af00      	add	r7, sp, #0
 8012084:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8012086:	2301      	movs	r3, #1
 8012088:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 801208a:	687b      	ldr	r3, [r7, #4]
 801208c:	689b      	ldr	r3, [r3, #8]
 801208e:	2b02      	cmp	r3, #2
 8012090:	d001      	beq.n	8012096 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8012092:	f7ef fec9 	bl	8001e28 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8012096:	687b      	ldr	r3, [r7, #4]
 8012098:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 801209c:	7bfa      	ldrb	r2, [r7, #15]
 801209e:	4611      	mov	r1, r2
 80120a0:	4618      	mov	r0, r3
 80120a2:	f7fc fc3b 	bl	800e91c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80120a6:	687b      	ldr	r3, [r7, #4]
 80120a8:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 80120ac:	4618      	mov	r0, r3
 80120ae:	f7fc fbe7 	bl	800e880 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 80120b2:	bf00      	nop
 80120b4:	3710      	adds	r7, #16
 80120b6:	46bd      	mov	sp, r7
 80120b8:	bd80      	pop	{r7, pc}
	...

080120bc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80120bc:	b580      	push	{r7, lr}
 80120be:	b082      	sub	sp, #8
 80120c0:	af00      	add	r7, sp, #0
 80120c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80120c4:	687b      	ldr	r3, [r7, #4]
 80120c6:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 80120ca:	4618      	mov	r0, r3
 80120cc:	f7fc fc36 	bl	800e93c <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80120d0:	687b      	ldr	r3, [r7, #4]
 80120d2:	699b      	ldr	r3, [r3, #24]
 80120d4:	2b00      	cmp	r3, #0
 80120d6:	d005      	beq.n	80120e4 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80120d8:	4b04      	ldr	r3, [pc, #16]	; (80120ec <HAL_PCD_SuspendCallback+0x30>)
 80120da:	691b      	ldr	r3, [r3, #16]
 80120dc:	4a03      	ldr	r2, [pc, #12]	; (80120ec <HAL_PCD_SuspendCallback+0x30>)
 80120de:	f043 0306 	orr.w	r3, r3, #6
 80120e2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 80120e4:	bf00      	nop
 80120e6:	3708      	adds	r7, #8
 80120e8:	46bd      	mov	sp, r7
 80120ea:	bd80      	pop	{r7, pc}
 80120ec:	e000ed00 	.word	0xe000ed00

080120f0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80120f0:	b580      	push	{r7, lr}
 80120f2:	b082      	sub	sp, #8
 80120f4:	af00      	add	r7, sp, #0
 80120f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 80120f8:	687b      	ldr	r3, [r7, #4]
 80120fa:	699b      	ldr	r3, [r3, #24]
 80120fc:	2b00      	cmp	r3, #0
 80120fe:	d007      	beq.n	8012110 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8012100:	4b08      	ldr	r3, [pc, #32]	; (8012124 <HAL_PCD_ResumeCallback+0x34>)
 8012102:	691b      	ldr	r3, [r3, #16]
 8012104:	4a07      	ldr	r2, [pc, #28]	; (8012124 <HAL_PCD_ResumeCallback+0x34>)
 8012106:	f023 0306 	bic.w	r3, r3, #6
 801210a:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 801210c:	f000 f9fa 	bl	8012504 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8012110:	687b      	ldr	r3, [r7, #4]
 8012112:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8012116:	4618      	mov	r0, r3
 8012118:	f7fc fc26 	bl	800e968 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 801211c:	bf00      	nop
 801211e:	3708      	adds	r7, #8
 8012120:	46bd      	mov	sp, r7
 8012122:	bd80      	pop	{r7, pc}
 8012124:	e000ed00 	.word	0xe000ed00

08012128 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8012128:	b580      	push	{r7, lr}
 801212a:	b082      	sub	sp, #8
 801212c:	af00      	add	r7, sp, #0
 801212e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 8012130:	4a2b      	ldr	r2, [pc, #172]	; (80121e0 <USBD_LL_Init+0xb8>)
 8012132:	687b      	ldr	r3, [r7, #4]
 8012134:	f8c2 32f0 	str.w	r3, [r2, #752]	; 0x2f0
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 8012138:	687b      	ldr	r3, [r7, #4]
 801213a:	4a29      	ldr	r2, [pc, #164]	; (80121e0 <USBD_LL_Init+0xb8>)
 801213c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_FS.Instance = USB;
 8012140:	4b27      	ldr	r3, [pc, #156]	; (80121e0 <USBD_LL_Init+0xb8>)
 8012142:	4a28      	ldr	r2, [pc, #160]	; (80121e4 <USBD_LL_Init+0xbc>)
 8012144:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8012146:	4b26      	ldr	r3, [pc, #152]	; (80121e0 <USBD_LL_Init+0xb8>)
 8012148:	2208      	movs	r2, #8
 801214a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 801214c:	4b24      	ldr	r3, [pc, #144]	; (80121e0 <USBD_LL_Init+0xb8>)
 801214e:	2202      	movs	r2, #2
 8012150:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8012152:	4b23      	ldr	r3, [pc, #140]	; (80121e0 <USBD_LL_Init+0xb8>)
 8012154:	2202      	movs	r2, #2
 8012156:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8012158:	4b21      	ldr	r3, [pc, #132]	; (80121e0 <USBD_LL_Init+0xb8>)
 801215a:	2200      	movs	r2, #0
 801215c:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 801215e:	4b20      	ldr	r3, [pc, #128]	; (80121e0 <USBD_LL_Init+0xb8>)
 8012160:	2200      	movs	r2, #0
 8012162:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8012164:	4b1e      	ldr	r3, [pc, #120]	; (80121e0 <USBD_LL_Init+0xb8>)
 8012166:	2200      	movs	r2, #0
 8012168:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 801216a:	4b1d      	ldr	r3, [pc, #116]	; (80121e0 <USBD_LL_Init+0xb8>)
 801216c:	2200      	movs	r2, #0
 801216e:	621a      	str	r2, [r3, #32]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8012170:	481b      	ldr	r0, [pc, #108]	; (80121e0 <USBD_LL_Init+0xb8>)
 8012172:	f7f3 ff62 	bl	800603a <HAL_PCD_Init>
 8012176:	4603      	mov	r3, r0
 8012178:	2b00      	cmp	r3, #0
 801217a:	d001      	beq.n	8012180 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 801217c:	f7ef fe54 	bl	8001e28 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8012180:	687b      	ldr	r3, [r7, #4]
 8012182:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8012186:	2318      	movs	r3, #24
 8012188:	2200      	movs	r2, #0
 801218a:	2100      	movs	r1, #0
 801218c:	f7f5 fc1b 	bl	80079c6 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8012190:	687b      	ldr	r3, [r7, #4]
 8012192:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8012196:	2358      	movs	r3, #88	; 0x58
 8012198:	2200      	movs	r2, #0
 801219a:	2180      	movs	r1, #128	; 0x80
 801219c:	f7f5 fc13 	bl	80079c6 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 80121a0:	687b      	ldr	r3, [r7, #4]
 80121a2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80121a6:	23c0      	movs	r3, #192	; 0xc0
 80121a8:	2200      	movs	r2, #0
 80121aa:	2181      	movs	r1, #129	; 0x81
 80121ac:	f7f5 fc0b 	bl	80079c6 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 80121b0:	687b      	ldr	r3, [r7, #4]
 80121b2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80121b6:	f44f 7388 	mov.w	r3, #272	; 0x110
 80121ba:	2200      	movs	r2, #0
 80121bc:	2101      	movs	r1, #1
 80121be:	f7f5 fc02 	bl	80079c6 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 80121c2:	687b      	ldr	r3, [r7, #4]
 80121c4:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80121c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80121cc:	2200      	movs	r2, #0
 80121ce:	2182      	movs	r1, #130	; 0x82
 80121d0:	f7f5 fbf9 	bl	80079c6 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 80121d4:	2300      	movs	r3, #0
}
 80121d6:	4618      	mov	r0, r3
 80121d8:	3708      	adds	r7, #8
 80121da:	46bd      	mov	sp, r7
 80121dc:	bd80      	pop	{r7, pc}
 80121de:	bf00      	nop
 80121e0:	20006198 	.word	0x20006198
 80121e4:	40005c00 	.word	0x40005c00

080121e8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80121e8:	b580      	push	{r7, lr}
 80121ea:	b084      	sub	sp, #16
 80121ec:	af00      	add	r7, sp, #0
 80121ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80121f0:	2300      	movs	r3, #0
 80121f2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80121f4:	2300      	movs	r3, #0
 80121f6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80121f8:	687b      	ldr	r3, [r7, #4]
 80121fa:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80121fe:	4618      	mov	r0, r3
 8012200:	f7f4 f800 	bl	8006204 <HAL_PCD_Start>
 8012204:	4603      	mov	r3, r0
 8012206:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012208:	7bfb      	ldrb	r3, [r7, #15]
 801220a:	4618      	mov	r0, r3
 801220c:	f000 f980 	bl	8012510 <USBD_Get_USB_Status>
 8012210:	4603      	mov	r3, r0
 8012212:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012214:	7bbb      	ldrb	r3, [r7, #14]
}
 8012216:	4618      	mov	r0, r3
 8012218:	3710      	adds	r7, #16
 801221a:	46bd      	mov	sp, r7
 801221c:	bd80      	pop	{r7, pc}

0801221e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801221e:	b580      	push	{r7, lr}
 8012220:	b084      	sub	sp, #16
 8012222:	af00      	add	r7, sp, #0
 8012224:	6078      	str	r0, [r7, #4]
 8012226:	4608      	mov	r0, r1
 8012228:	4611      	mov	r1, r2
 801222a:	461a      	mov	r2, r3
 801222c:	4603      	mov	r3, r0
 801222e:	70fb      	strb	r3, [r7, #3]
 8012230:	460b      	mov	r3, r1
 8012232:	70bb      	strb	r3, [r7, #2]
 8012234:	4613      	mov	r3, r2
 8012236:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012238:	2300      	movs	r3, #0
 801223a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801223c:	2300      	movs	r3, #0
 801223e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8012240:	687b      	ldr	r3, [r7, #4]
 8012242:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8012246:	78bb      	ldrb	r3, [r7, #2]
 8012248:	883a      	ldrh	r2, [r7, #0]
 801224a:	78f9      	ldrb	r1, [r7, #3]
 801224c:	f7f4 f948 	bl	80064e0 <HAL_PCD_EP_Open>
 8012250:	4603      	mov	r3, r0
 8012252:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012254:	7bfb      	ldrb	r3, [r7, #15]
 8012256:	4618      	mov	r0, r3
 8012258:	f000 f95a 	bl	8012510 <USBD_Get_USB_Status>
 801225c:	4603      	mov	r3, r0
 801225e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012260:	7bbb      	ldrb	r3, [r7, #14]
}
 8012262:	4618      	mov	r0, r3
 8012264:	3710      	adds	r7, #16
 8012266:	46bd      	mov	sp, r7
 8012268:	bd80      	pop	{r7, pc}

0801226a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801226a:	b580      	push	{r7, lr}
 801226c:	b084      	sub	sp, #16
 801226e:	af00      	add	r7, sp, #0
 8012270:	6078      	str	r0, [r7, #4]
 8012272:	460b      	mov	r3, r1
 8012274:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012276:	2300      	movs	r3, #0
 8012278:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801227a:	2300      	movs	r3, #0
 801227c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801227e:	687b      	ldr	r3, [r7, #4]
 8012280:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8012284:	78fa      	ldrb	r2, [r7, #3]
 8012286:	4611      	mov	r1, r2
 8012288:	4618      	mov	r0, r3
 801228a:	f7f4 f98f 	bl	80065ac <HAL_PCD_EP_Close>
 801228e:	4603      	mov	r3, r0
 8012290:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012292:	7bfb      	ldrb	r3, [r7, #15]
 8012294:	4618      	mov	r0, r3
 8012296:	f000 f93b 	bl	8012510 <USBD_Get_USB_Status>
 801229a:	4603      	mov	r3, r0
 801229c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801229e:	7bbb      	ldrb	r3, [r7, #14]
}
 80122a0:	4618      	mov	r0, r3
 80122a2:	3710      	adds	r7, #16
 80122a4:	46bd      	mov	sp, r7
 80122a6:	bd80      	pop	{r7, pc}

080122a8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80122a8:	b580      	push	{r7, lr}
 80122aa:	b084      	sub	sp, #16
 80122ac:	af00      	add	r7, sp, #0
 80122ae:	6078      	str	r0, [r7, #4]
 80122b0:	460b      	mov	r3, r1
 80122b2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80122b4:	2300      	movs	r3, #0
 80122b6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80122b8:	2300      	movs	r3, #0
 80122ba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80122bc:	687b      	ldr	r3, [r7, #4]
 80122be:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80122c2:	78fa      	ldrb	r2, [r7, #3]
 80122c4:	4611      	mov	r1, r2
 80122c6:	4618      	mov	r0, r3
 80122c8:	f7f4 fa50 	bl	800676c <HAL_PCD_EP_SetStall>
 80122cc:	4603      	mov	r3, r0
 80122ce:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80122d0:	7bfb      	ldrb	r3, [r7, #15]
 80122d2:	4618      	mov	r0, r3
 80122d4:	f000 f91c 	bl	8012510 <USBD_Get_USB_Status>
 80122d8:	4603      	mov	r3, r0
 80122da:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80122dc:	7bbb      	ldrb	r3, [r7, #14]
}
 80122de:	4618      	mov	r0, r3
 80122e0:	3710      	adds	r7, #16
 80122e2:	46bd      	mov	sp, r7
 80122e4:	bd80      	pop	{r7, pc}

080122e6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80122e6:	b580      	push	{r7, lr}
 80122e8:	b084      	sub	sp, #16
 80122ea:	af00      	add	r7, sp, #0
 80122ec:	6078      	str	r0, [r7, #4]
 80122ee:	460b      	mov	r3, r1
 80122f0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80122f2:	2300      	movs	r3, #0
 80122f4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80122f6:	2300      	movs	r3, #0
 80122f8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80122fa:	687b      	ldr	r3, [r7, #4]
 80122fc:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8012300:	78fa      	ldrb	r2, [r7, #3]
 8012302:	4611      	mov	r1, r2
 8012304:	4618      	mov	r0, r3
 8012306:	f7f4 fa83 	bl	8006810 <HAL_PCD_EP_ClrStall>
 801230a:	4603      	mov	r3, r0
 801230c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801230e:	7bfb      	ldrb	r3, [r7, #15]
 8012310:	4618      	mov	r0, r3
 8012312:	f000 f8fd 	bl	8012510 <USBD_Get_USB_Status>
 8012316:	4603      	mov	r3, r0
 8012318:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801231a:	7bbb      	ldrb	r3, [r7, #14]
}
 801231c:	4618      	mov	r0, r3
 801231e:	3710      	adds	r7, #16
 8012320:	46bd      	mov	sp, r7
 8012322:	bd80      	pop	{r7, pc}

08012324 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8012324:	b480      	push	{r7}
 8012326:	b085      	sub	sp, #20
 8012328:	af00      	add	r7, sp, #0
 801232a:	6078      	str	r0, [r7, #4]
 801232c:	460b      	mov	r3, r1
 801232e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8012330:	687b      	ldr	r3, [r7, #4]
 8012332:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8012336:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8012338:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801233c:	2b00      	cmp	r3, #0
 801233e:	da0c      	bge.n	801235a <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8012340:	78fb      	ldrb	r3, [r7, #3]
 8012342:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012346:	68f9      	ldr	r1, [r7, #12]
 8012348:	1c5a      	adds	r2, r3, #1
 801234a:	4613      	mov	r3, r2
 801234c:	009b      	lsls	r3, r3, #2
 801234e:	4413      	add	r3, r2
 8012350:	00db      	lsls	r3, r3, #3
 8012352:	440b      	add	r3, r1
 8012354:	3302      	adds	r3, #2
 8012356:	781b      	ldrb	r3, [r3, #0]
 8012358:	e00b      	b.n	8012372 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 801235a:	78fb      	ldrb	r3, [r7, #3]
 801235c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8012360:	68f9      	ldr	r1, [r7, #12]
 8012362:	4613      	mov	r3, r2
 8012364:	009b      	lsls	r3, r3, #2
 8012366:	4413      	add	r3, r2
 8012368:	00db      	lsls	r3, r3, #3
 801236a:	440b      	add	r3, r1
 801236c:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8012370:	781b      	ldrb	r3, [r3, #0]
  }
}
 8012372:	4618      	mov	r0, r3
 8012374:	3714      	adds	r7, #20
 8012376:	46bd      	mov	sp, r7
 8012378:	f85d 7b04 	ldr.w	r7, [sp], #4
 801237c:	4770      	bx	lr

0801237e <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 801237e:	b580      	push	{r7, lr}
 8012380:	b084      	sub	sp, #16
 8012382:	af00      	add	r7, sp, #0
 8012384:	6078      	str	r0, [r7, #4]
 8012386:	460b      	mov	r3, r1
 8012388:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801238a:	2300      	movs	r3, #0
 801238c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801238e:	2300      	movs	r3, #0
 8012390:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8012392:	687b      	ldr	r3, [r7, #4]
 8012394:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8012398:	78fa      	ldrb	r2, [r7, #3]
 801239a:	4611      	mov	r1, r2
 801239c:	4618      	mov	r0, r3
 801239e:	f7f4 f87a 	bl	8006496 <HAL_PCD_SetAddress>
 80123a2:	4603      	mov	r3, r0
 80123a4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80123a6:	7bfb      	ldrb	r3, [r7, #15]
 80123a8:	4618      	mov	r0, r3
 80123aa:	f000 f8b1 	bl	8012510 <USBD_Get_USB_Status>
 80123ae:	4603      	mov	r3, r0
 80123b0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80123b2:	7bbb      	ldrb	r3, [r7, #14]
}
 80123b4:	4618      	mov	r0, r3
 80123b6:	3710      	adds	r7, #16
 80123b8:	46bd      	mov	sp, r7
 80123ba:	bd80      	pop	{r7, pc}

080123bc <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80123bc:	b580      	push	{r7, lr}
 80123be:	b086      	sub	sp, #24
 80123c0:	af00      	add	r7, sp, #0
 80123c2:	60f8      	str	r0, [r7, #12]
 80123c4:	607a      	str	r2, [r7, #4]
 80123c6:	603b      	str	r3, [r7, #0]
 80123c8:	460b      	mov	r3, r1
 80123ca:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80123cc:	2300      	movs	r3, #0
 80123ce:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80123d0:	2300      	movs	r3, #0
 80123d2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80123d4:	68fb      	ldr	r3, [r7, #12]
 80123d6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80123da:	7af9      	ldrb	r1, [r7, #11]
 80123dc:	683b      	ldr	r3, [r7, #0]
 80123de:	687a      	ldr	r2, [r7, #4]
 80123e0:	f7f4 f981 	bl	80066e6 <HAL_PCD_EP_Transmit>
 80123e4:	4603      	mov	r3, r0
 80123e6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80123e8:	7dfb      	ldrb	r3, [r7, #23]
 80123ea:	4618      	mov	r0, r3
 80123ec:	f000 f890 	bl	8012510 <USBD_Get_USB_Status>
 80123f0:	4603      	mov	r3, r0
 80123f2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80123f4:	7dbb      	ldrb	r3, [r7, #22]
}
 80123f6:	4618      	mov	r0, r3
 80123f8:	3718      	adds	r7, #24
 80123fa:	46bd      	mov	sp, r7
 80123fc:	bd80      	pop	{r7, pc}

080123fe <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80123fe:	b580      	push	{r7, lr}
 8012400:	b086      	sub	sp, #24
 8012402:	af00      	add	r7, sp, #0
 8012404:	60f8      	str	r0, [r7, #12]
 8012406:	607a      	str	r2, [r7, #4]
 8012408:	603b      	str	r3, [r7, #0]
 801240a:	460b      	mov	r3, r1
 801240c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801240e:	2300      	movs	r3, #0
 8012410:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012412:	2300      	movs	r3, #0
 8012414:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8012416:	68fb      	ldr	r3, [r7, #12]
 8012418:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 801241c:	7af9      	ldrb	r1, [r7, #11]
 801241e:	683b      	ldr	r3, [r7, #0]
 8012420:	687a      	ldr	r2, [r7, #4]
 8012422:	f7f4 f90b 	bl	800663c <HAL_PCD_EP_Receive>
 8012426:	4603      	mov	r3, r0
 8012428:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801242a:	7dfb      	ldrb	r3, [r7, #23]
 801242c:	4618      	mov	r0, r3
 801242e:	f000 f86f 	bl	8012510 <USBD_Get_USB_Status>
 8012432:	4603      	mov	r3, r0
 8012434:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8012436:	7dbb      	ldrb	r3, [r7, #22]
}
 8012438:	4618      	mov	r0, r3
 801243a:	3718      	adds	r7, #24
 801243c:	46bd      	mov	sp, r7
 801243e:	bd80      	pop	{r7, pc}

08012440 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8012440:	b580      	push	{r7, lr}
 8012442:	b082      	sub	sp, #8
 8012444:	af00      	add	r7, sp, #0
 8012446:	6078      	str	r0, [r7, #4]
 8012448:	460b      	mov	r3, r1
 801244a:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801244c:	687b      	ldr	r3, [r7, #4]
 801244e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8012452:	78fa      	ldrb	r2, [r7, #3]
 8012454:	4611      	mov	r1, r2
 8012456:	4618      	mov	r0, r3
 8012458:	f7f4 f92d 	bl	80066b6 <HAL_PCD_EP_GetRxCount>
 801245c:	4603      	mov	r3, r0
}
 801245e:	4618      	mov	r0, r3
 8012460:	3708      	adds	r7, #8
 8012462:	46bd      	mov	sp, r7
 8012464:	bd80      	pop	{r7, pc}
	...

08012468 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012468:	b580      	push	{r7, lr}
 801246a:	b082      	sub	sp, #8
 801246c:	af00      	add	r7, sp, #0
 801246e:	6078      	str	r0, [r7, #4]
 8012470:	460b      	mov	r3, r1
 8012472:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 8012474:	78fb      	ldrb	r3, [r7, #3]
 8012476:	2b00      	cmp	r3, #0
 8012478:	d002      	beq.n	8012480 <HAL_PCDEx_LPM_Callback+0x18>
 801247a:	2b01      	cmp	r3, #1
 801247c:	d013      	beq.n	80124a6 <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 801247e:	e023      	b.n	80124c8 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 8012480:	687b      	ldr	r3, [r7, #4]
 8012482:	699b      	ldr	r3, [r3, #24]
 8012484:	2b00      	cmp	r3, #0
 8012486:	d007      	beq.n	8012498 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8012488:	f000 f83c 	bl	8012504 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801248c:	4b10      	ldr	r3, [pc, #64]	; (80124d0 <HAL_PCDEx_LPM_Callback+0x68>)
 801248e:	691b      	ldr	r3, [r3, #16]
 8012490:	4a0f      	ldr	r2, [pc, #60]	; (80124d0 <HAL_PCDEx_LPM_Callback+0x68>)
 8012492:	f023 0306 	bic.w	r3, r3, #6
 8012496:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 8012498:	687b      	ldr	r3, [r7, #4]
 801249a:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 801249e:	4618      	mov	r0, r3
 80124a0:	f7fc fa62 	bl	800e968 <USBD_LL_Resume>
    break;
 80124a4:	e010      	b.n	80124c8 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 80124a6:	687b      	ldr	r3, [r7, #4]
 80124a8:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 80124ac:	4618      	mov	r0, r3
 80124ae:	f7fc fa45 	bl	800e93c <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 80124b2:	687b      	ldr	r3, [r7, #4]
 80124b4:	699b      	ldr	r3, [r3, #24]
 80124b6:	2b00      	cmp	r3, #0
 80124b8:	d005      	beq.n	80124c6 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80124ba:	4b05      	ldr	r3, [pc, #20]	; (80124d0 <HAL_PCDEx_LPM_Callback+0x68>)
 80124bc:	691b      	ldr	r3, [r3, #16]
 80124be:	4a04      	ldr	r2, [pc, #16]	; (80124d0 <HAL_PCDEx_LPM_Callback+0x68>)
 80124c0:	f043 0306 	orr.w	r3, r3, #6
 80124c4:	6113      	str	r3, [r2, #16]
    break;
 80124c6:	bf00      	nop
}
 80124c8:	bf00      	nop
 80124ca:	3708      	adds	r7, #8
 80124cc:	46bd      	mov	sp, r7
 80124ce:	bd80      	pop	{r7, pc}
 80124d0:	e000ed00 	.word	0xe000ed00

080124d4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80124d4:	b480      	push	{r7}
 80124d6:	b083      	sub	sp, #12
 80124d8:	af00      	add	r7, sp, #0
 80124da:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80124dc:	4b03      	ldr	r3, [pc, #12]	; (80124ec <USBD_static_malloc+0x18>)
}
 80124de:	4618      	mov	r0, r3
 80124e0:	370c      	adds	r7, #12
 80124e2:	46bd      	mov	sp, r7
 80124e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124e8:	4770      	bx	lr
 80124ea:	bf00      	nop
 80124ec:	2000648c 	.word	0x2000648c

080124f0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80124f0:	b480      	push	{r7}
 80124f2:	b083      	sub	sp, #12
 80124f4:	af00      	add	r7, sp, #0
 80124f6:	6078      	str	r0, [r7, #4]

}
 80124f8:	bf00      	nop
 80124fa:	370c      	adds	r7, #12
 80124fc:	46bd      	mov	sp, r7
 80124fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012502:	4770      	bx	lr

08012504 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8012504:	b580      	push	{r7, lr}
 8012506:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8012508:	f7ef fc1e 	bl	8001d48 <SystemClock_Config>
}
 801250c:	bf00      	nop
 801250e:	bd80      	pop	{r7, pc}

08012510 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8012510:	b480      	push	{r7}
 8012512:	b085      	sub	sp, #20
 8012514:	af00      	add	r7, sp, #0
 8012516:	4603      	mov	r3, r0
 8012518:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801251a:	2300      	movs	r3, #0
 801251c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801251e:	79fb      	ldrb	r3, [r7, #7]
 8012520:	2b03      	cmp	r3, #3
 8012522:	d817      	bhi.n	8012554 <USBD_Get_USB_Status+0x44>
 8012524:	a201      	add	r2, pc, #4	; (adr r2, 801252c <USBD_Get_USB_Status+0x1c>)
 8012526:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801252a:	bf00      	nop
 801252c:	0801253d 	.word	0x0801253d
 8012530:	08012543 	.word	0x08012543
 8012534:	08012549 	.word	0x08012549
 8012538:	0801254f 	.word	0x0801254f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 801253c:	2300      	movs	r3, #0
 801253e:	73fb      	strb	r3, [r7, #15]
    break;
 8012540:	e00b      	b.n	801255a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8012542:	2303      	movs	r3, #3
 8012544:	73fb      	strb	r3, [r7, #15]
    break;
 8012546:	e008      	b.n	801255a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8012548:	2301      	movs	r3, #1
 801254a:	73fb      	strb	r3, [r7, #15]
    break;
 801254c:	e005      	b.n	801255a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801254e:	2303      	movs	r3, #3
 8012550:	73fb      	strb	r3, [r7, #15]
    break;
 8012552:	e002      	b.n	801255a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8012554:	2303      	movs	r3, #3
 8012556:	73fb      	strb	r3, [r7, #15]
    break;
 8012558:	bf00      	nop
  }
  return usb_status;
 801255a:	7bfb      	ldrb	r3, [r7, #15]
}
 801255c:	4618      	mov	r0, r3
 801255e:	3714      	adds	r7, #20
 8012560:	46bd      	mov	sp, r7
 8012562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012566:	4770      	bx	lr

08012568 <__cvt>:
 8012568:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801256c:	ec55 4b10 	vmov	r4, r5, d0
 8012570:	2d00      	cmp	r5, #0
 8012572:	460e      	mov	r6, r1
 8012574:	4619      	mov	r1, r3
 8012576:	462b      	mov	r3, r5
 8012578:	bfbb      	ittet	lt
 801257a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 801257e:	461d      	movlt	r5, r3
 8012580:	2300      	movge	r3, #0
 8012582:	232d      	movlt	r3, #45	; 0x2d
 8012584:	700b      	strb	r3, [r1, #0]
 8012586:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012588:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 801258c:	4691      	mov	r9, r2
 801258e:	f023 0820 	bic.w	r8, r3, #32
 8012592:	bfbc      	itt	lt
 8012594:	4622      	movlt	r2, r4
 8012596:	4614      	movlt	r4, r2
 8012598:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801259c:	d005      	beq.n	80125aa <__cvt+0x42>
 801259e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80125a2:	d100      	bne.n	80125a6 <__cvt+0x3e>
 80125a4:	3601      	adds	r6, #1
 80125a6:	2102      	movs	r1, #2
 80125a8:	e000      	b.n	80125ac <__cvt+0x44>
 80125aa:	2103      	movs	r1, #3
 80125ac:	ab03      	add	r3, sp, #12
 80125ae:	9301      	str	r3, [sp, #4]
 80125b0:	ab02      	add	r3, sp, #8
 80125b2:	9300      	str	r3, [sp, #0]
 80125b4:	ec45 4b10 	vmov	d0, r4, r5
 80125b8:	4653      	mov	r3, sl
 80125ba:	4632      	mov	r2, r6
 80125bc:	f000 fff0 	bl	80135a0 <_dtoa_r>
 80125c0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80125c4:	4607      	mov	r7, r0
 80125c6:	d102      	bne.n	80125ce <__cvt+0x66>
 80125c8:	f019 0f01 	tst.w	r9, #1
 80125cc:	d022      	beq.n	8012614 <__cvt+0xac>
 80125ce:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80125d2:	eb07 0906 	add.w	r9, r7, r6
 80125d6:	d110      	bne.n	80125fa <__cvt+0x92>
 80125d8:	783b      	ldrb	r3, [r7, #0]
 80125da:	2b30      	cmp	r3, #48	; 0x30
 80125dc:	d10a      	bne.n	80125f4 <__cvt+0x8c>
 80125de:	2200      	movs	r2, #0
 80125e0:	2300      	movs	r3, #0
 80125e2:	4620      	mov	r0, r4
 80125e4:	4629      	mov	r1, r5
 80125e6:	f7ee fa97 	bl	8000b18 <__aeabi_dcmpeq>
 80125ea:	b918      	cbnz	r0, 80125f4 <__cvt+0x8c>
 80125ec:	f1c6 0601 	rsb	r6, r6, #1
 80125f0:	f8ca 6000 	str.w	r6, [sl]
 80125f4:	f8da 3000 	ldr.w	r3, [sl]
 80125f8:	4499      	add	r9, r3
 80125fa:	2200      	movs	r2, #0
 80125fc:	2300      	movs	r3, #0
 80125fe:	4620      	mov	r0, r4
 8012600:	4629      	mov	r1, r5
 8012602:	f7ee fa89 	bl	8000b18 <__aeabi_dcmpeq>
 8012606:	b108      	cbz	r0, 801260c <__cvt+0xa4>
 8012608:	f8cd 900c 	str.w	r9, [sp, #12]
 801260c:	2230      	movs	r2, #48	; 0x30
 801260e:	9b03      	ldr	r3, [sp, #12]
 8012610:	454b      	cmp	r3, r9
 8012612:	d307      	bcc.n	8012624 <__cvt+0xbc>
 8012614:	9b03      	ldr	r3, [sp, #12]
 8012616:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8012618:	1bdb      	subs	r3, r3, r7
 801261a:	4638      	mov	r0, r7
 801261c:	6013      	str	r3, [r2, #0]
 801261e:	b004      	add	sp, #16
 8012620:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012624:	1c59      	adds	r1, r3, #1
 8012626:	9103      	str	r1, [sp, #12]
 8012628:	701a      	strb	r2, [r3, #0]
 801262a:	e7f0      	b.n	801260e <__cvt+0xa6>

0801262c <__exponent>:
 801262c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801262e:	4603      	mov	r3, r0
 8012630:	2900      	cmp	r1, #0
 8012632:	bfb8      	it	lt
 8012634:	4249      	neglt	r1, r1
 8012636:	f803 2b02 	strb.w	r2, [r3], #2
 801263a:	bfb4      	ite	lt
 801263c:	222d      	movlt	r2, #45	; 0x2d
 801263e:	222b      	movge	r2, #43	; 0x2b
 8012640:	2909      	cmp	r1, #9
 8012642:	7042      	strb	r2, [r0, #1]
 8012644:	dd2a      	ble.n	801269c <__exponent+0x70>
 8012646:	f10d 0207 	add.w	r2, sp, #7
 801264a:	4617      	mov	r7, r2
 801264c:	260a      	movs	r6, #10
 801264e:	4694      	mov	ip, r2
 8012650:	fb91 f5f6 	sdiv	r5, r1, r6
 8012654:	fb06 1415 	mls	r4, r6, r5, r1
 8012658:	3430      	adds	r4, #48	; 0x30
 801265a:	f80c 4c01 	strb.w	r4, [ip, #-1]
 801265e:	460c      	mov	r4, r1
 8012660:	2c63      	cmp	r4, #99	; 0x63
 8012662:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 8012666:	4629      	mov	r1, r5
 8012668:	dcf1      	bgt.n	801264e <__exponent+0x22>
 801266a:	3130      	adds	r1, #48	; 0x30
 801266c:	f1ac 0402 	sub.w	r4, ip, #2
 8012670:	f802 1c01 	strb.w	r1, [r2, #-1]
 8012674:	1c41      	adds	r1, r0, #1
 8012676:	4622      	mov	r2, r4
 8012678:	42ba      	cmp	r2, r7
 801267a:	d30a      	bcc.n	8012692 <__exponent+0x66>
 801267c:	f10d 0209 	add.w	r2, sp, #9
 8012680:	eba2 020c 	sub.w	r2, r2, ip
 8012684:	42bc      	cmp	r4, r7
 8012686:	bf88      	it	hi
 8012688:	2200      	movhi	r2, #0
 801268a:	4413      	add	r3, r2
 801268c:	1a18      	subs	r0, r3, r0
 801268e:	b003      	add	sp, #12
 8012690:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012692:	f812 5b01 	ldrb.w	r5, [r2], #1
 8012696:	f801 5f01 	strb.w	r5, [r1, #1]!
 801269a:	e7ed      	b.n	8012678 <__exponent+0x4c>
 801269c:	2330      	movs	r3, #48	; 0x30
 801269e:	3130      	adds	r1, #48	; 0x30
 80126a0:	7083      	strb	r3, [r0, #2]
 80126a2:	70c1      	strb	r1, [r0, #3]
 80126a4:	1d03      	adds	r3, r0, #4
 80126a6:	e7f1      	b.n	801268c <__exponent+0x60>

080126a8 <_printf_float>:
 80126a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80126ac:	ed2d 8b02 	vpush	{d8}
 80126b0:	b08d      	sub	sp, #52	; 0x34
 80126b2:	460c      	mov	r4, r1
 80126b4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80126b8:	4616      	mov	r6, r2
 80126ba:	461f      	mov	r7, r3
 80126bc:	4605      	mov	r5, r0
 80126be:	f000 fe0b 	bl	80132d8 <_localeconv_r>
 80126c2:	f8d0 a000 	ldr.w	sl, [r0]
 80126c6:	4650      	mov	r0, sl
 80126c8:	f7ed fdfa 	bl	80002c0 <strlen>
 80126cc:	2300      	movs	r3, #0
 80126ce:	930a      	str	r3, [sp, #40]	; 0x28
 80126d0:	6823      	ldr	r3, [r4, #0]
 80126d2:	9305      	str	r3, [sp, #20]
 80126d4:	f8d8 3000 	ldr.w	r3, [r8]
 80126d8:	f894 b018 	ldrb.w	fp, [r4, #24]
 80126dc:	3307      	adds	r3, #7
 80126de:	f023 0307 	bic.w	r3, r3, #7
 80126e2:	f103 0208 	add.w	r2, r3, #8
 80126e6:	f8c8 2000 	str.w	r2, [r8]
 80126ea:	e9d3 8900 	ldrd	r8, r9, [r3]
 80126ee:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80126f2:	9307      	str	r3, [sp, #28]
 80126f4:	f8cd 8018 	str.w	r8, [sp, #24]
 80126f8:	ee08 0a10 	vmov	s16, r0
 80126fc:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8012700:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8012704:	4b9e      	ldr	r3, [pc, #632]	; (8012980 <_printf_float+0x2d8>)
 8012706:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801270a:	f7ee fa37 	bl	8000b7c <__aeabi_dcmpun>
 801270e:	bb88      	cbnz	r0, 8012774 <_printf_float+0xcc>
 8012710:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8012714:	4b9a      	ldr	r3, [pc, #616]	; (8012980 <_printf_float+0x2d8>)
 8012716:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801271a:	f7ee fa11 	bl	8000b40 <__aeabi_dcmple>
 801271e:	bb48      	cbnz	r0, 8012774 <_printf_float+0xcc>
 8012720:	2200      	movs	r2, #0
 8012722:	2300      	movs	r3, #0
 8012724:	4640      	mov	r0, r8
 8012726:	4649      	mov	r1, r9
 8012728:	f7ee fa00 	bl	8000b2c <__aeabi_dcmplt>
 801272c:	b110      	cbz	r0, 8012734 <_printf_float+0x8c>
 801272e:	232d      	movs	r3, #45	; 0x2d
 8012730:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012734:	4a93      	ldr	r2, [pc, #588]	; (8012984 <_printf_float+0x2dc>)
 8012736:	4b94      	ldr	r3, [pc, #592]	; (8012988 <_printf_float+0x2e0>)
 8012738:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 801273c:	bf94      	ite	ls
 801273e:	4690      	movls	r8, r2
 8012740:	4698      	movhi	r8, r3
 8012742:	2303      	movs	r3, #3
 8012744:	6123      	str	r3, [r4, #16]
 8012746:	9b05      	ldr	r3, [sp, #20]
 8012748:	f023 0304 	bic.w	r3, r3, #4
 801274c:	6023      	str	r3, [r4, #0]
 801274e:	f04f 0900 	mov.w	r9, #0
 8012752:	9700      	str	r7, [sp, #0]
 8012754:	4633      	mov	r3, r6
 8012756:	aa0b      	add	r2, sp, #44	; 0x2c
 8012758:	4621      	mov	r1, r4
 801275a:	4628      	mov	r0, r5
 801275c:	f000 f9da 	bl	8012b14 <_printf_common>
 8012760:	3001      	adds	r0, #1
 8012762:	f040 8090 	bne.w	8012886 <_printf_float+0x1de>
 8012766:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801276a:	b00d      	add	sp, #52	; 0x34
 801276c:	ecbd 8b02 	vpop	{d8}
 8012770:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012774:	4642      	mov	r2, r8
 8012776:	464b      	mov	r3, r9
 8012778:	4640      	mov	r0, r8
 801277a:	4649      	mov	r1, r9
 801277c:	f7ee f9fe 	bl	8000b7c <__aeabi_dcmpun>
 8012780:	b140      	cbz	r0, 8012794 <_printf_float+0xec>
 8012782:	464b      	mov	r3, r9
 8012784:	2b00      	cmp	r3, #0
 8012786:	bfbc      	itt	lt
 8012788:	232d      	movlt	r3, #45	; 0x2d
 801278a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 801278e:	4a7f      	ldr	r2, [pc, #508]	; (801298c <_printf_float+0x2e4>)
 8012790:	4b7f      	ldr	r3, [pc, #508]	; (8012990 <_printf_float+0x2e8>)
 8012792:	e7d1      	b.n	8012738 <_printf_float+0x90>
 8012794:	6863      	ldr	r3, [r4, #4]
 8012796:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 801279a:	9206      	str	r2, [sp, #24]
 801279c:	1c5a      	adds	r2, r3, #1
 801279e:	d13f      	bne.n	8012820 <_printf_float+0x178>
 80127a0:	2306      	movs	r3, #6
 80127a2:	6063      	str	r3, [r4, #4]
 80127a4:	9b05      	ldr	r3, [sp, #20]
 80127a6:	6861      	ldr	r1, [r4, #4]
 80127a8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80127ac:	2300      	movs	r3, #0
 80127ae:	9303      	str	r3, [sp, #12]
 80127b0:	ab0a      	add	r3, sp, #40	; 0x28
 80127b2:	e9cd b301 	strd	fp, r3, [sp, #4]
 80127b6:	ab09      	add	r3, sp, #36	; 0x24
 80127b8:	ec49 8b10 	vmov	d0, r8, r9
 80127bc:	9300      	str	r3, [sp, #0]
 80127be:	6022      	str	r2, [r4, #0]
 80127c0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80127c4:	4628      	mov	r0, r5
 80127c6:	f7ff fecf 	bl	8012568 <__cvt>
 80127ca:	9b06      	ldr	r3, [sp, #24]
 80127cc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80127ce:	2b47      	cmp	r3, #71	; 0x47
 80127d0:	4680      	mov	r8, r0
 80127d2:	d108      	bne.n	80127e6 <_printf_float+0x13e>
 80127d4:	1cc8      	adds	r0, r1, #3
 80127d6:	db02      	blt.n	80127de <_printf_float+0x136>
 80127d8:	6863      	ldr	r3, [r4, #4]
 80127da:	4299      	cmp	r1, r3
 80127dc:	dd41      	ble.n	8012862 <_printf_float+0x1ba>
 80127de:	f1ab 0302 	sub.w	r3, fp, #2
 80127e2:	fa5f fb83 	uxtb.w	fp, r3
 80127e6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80127ea:	d820      	bhi.n	801282e <_printf_float+0x186>
 80127ec:	3901      	subs	r1, #1
 80127ee:	465a      	mov	r2, fp
 80127f0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80127f4:	9109      	str	r1, [sp, #36]	; 0x24
 80127f6:	f7ff ff19 	bl	801262c <__exponent>
 80127fa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80127fc:	1813      	adds	r3, r2, r0
 80127fe:	2a01      	cmp	r2, #1
 8012800:	4681      	mov	r9, r0
 8012802:	6123      	str	r3, [r4, #16]
 8012804:	dc02      	bgt.n	801280c <_printf_float+0x164>
 8012806:	6822      	ldr	r2, [r4, #0]
 8012808:	07d2      	lsls	r2, r2, #31
 801280a:	d501      	bpl.n	8012810 <_printf_float+0x168>
 801280c:	3301      	adds	r3, #1
 801280e:	6123      	str	r3, [r4, #16]
 8012810:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8012814:	2b00      	cmp	r3, #0
 8012816:	d09c      	beq.n	8012752 <_printf_float+0xaa>
 8012818:	232d      	movs	r3, #45	; 0x2d
 801281a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801281e:	e798      	b.n	8012752 <_printf_float+0xaa>
 8012820:	9a06      	ldr	r2, [sp, #24]
 8012822:	2a47      	cmp	r2, #71	; 0x47
 8012824:	d1be      	bne.n	80127a4 <_printf_float+0xfc>
 8012826:	2b00      	cmp	r3, #0
 8012828:	d1bc      	bne.n	80127a4 <_printf_float+0xfc>
 801282a:	2301      	movs	r3, #1
 801282c:	e7b9      	b.n	80127a2 <_printf_float+0xfa>
 801282e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8012832:	d118      	bne.n	8012866 <_printf_float+0x1be>
 8012834:	2900      	cmp	r1, #0
 8012836:	6863      	ldr	r3, [r4, #4]
 8012838:	dd0b      	ble.n	8012852 <_printf_float+0x1aa>
 801283a:	6121      	str	r1, [r4, #16]
 801283c:	b913      	cbnz	r3, 8012844 <_printf_float+0x19c>
 801283e:	6822      	ldr	r2, [r4, #0]
 8012840:	07d0      	lsls	r0, r2, #31
 8012842:	d502      	bpl.n	801284a <_printf_float+0x1a2>
 8012844:	3301      	adds	r3, #1
 8012846:	440b      	add	r3, r1
 8012848:	6123      	str	r3, [r4, #16]
 801284a:	65a1      	str	r1, [r4, #88]	; 0x58
 801284c:	f04f 0900 	mov.w	r9, #0
 8012850:	e7de      	b.n	8012810 <_printf_float+0x168>
 8012852:	b913      	cbnz	r3, 801285a <_printf_float+0x1b2>
 8012854:	6822      	ldr	r2, [r4, #0]
 8012856:	07d2      	lsls	r2, r2, #31
 8012858:	d501      	bpl.n	801285e <_printf_float+0x1b6>
 801285a:	3302      	adds	r3, #2
 801285c:	e7f4      	b.n	8012848 <_printf_float+0x1a0>
 801285e:	2301      	movs	r3, #1
 8012860:	e7f2      	b.n	8012848 <_printf_float+0x1a0>
 8012862:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8012866:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012868:	4299      	cmp	r1, r3
 801286a:	db05      	blt.n	8012878 <_printf_float+0x1d0>
 801286c:	6823      	ldr	r3, [r4, #0]
 801286e:	6121      	str	r1, [r4, #16]
 8012870:	07d8      	lsls	r0, r3, #31
 8012872:	d5ea      	bpl.n	801284a <_printf_float+0x1a2>
 8012874:	1c4b      	adds	r3, r1, #1
 8012876:	e7e7      	b.n	8012848 <_printf_float+0x1a0>
 8012878:	2900      	cmp	r1, #0
 801287a:	bfd4      	ite	le
 801287c:	f1c1 0202 	rsble	r2, r1, #2
 8012880:	2201      	movgt	r2, #1
 8012882:	4413      	add	r3, r2
 8012884:	e7e0      	b.n	8012848 <_printf_float+0x1a0>
 8012886:	6823      	ldr	r3, [r4, #0]
 8012888:	055a      	lsls	r2, r3, #21
 801288a:	d407      	bmi.n	801289c <_printf_float+0x1f4>
 801288c:	6923      	ldr	r3, [r4, #16]
 801288e:	4642      	mov	r2, r8
 8012890:	4631      	mov	r1, r6
 8012892:	4628      	mov	r0, r5
 8012894:	47b8      	blx	r7
 8012896:	3001      	adds	r0, #1
 8012898:	d12c      	bne.n	80128f4 <_printf_float+0x24c>
 801289a:	e764      	b.n	8012766 <_printf_float+0xbe>
 801289c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80128a0:	f240 80e0 	bls.w	8012a64 <_printf_float+0x3bc>
 80128a4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80128a8:	2200      	movs	r2, #0
 80128aa:	2300      	movs	r3, #0
 80128ac:	f7ee f934 	bl	8000b18 <__aeabi_dcmpeq>
 80128b0:	2800      	cmp	r0, #0
 80128b2:	d034      	beq.n	801291e <_printf_float+0x276>
 80128b4:	4a37      	ldr	r2, [pc, #220]	; (8012994 <_printf_float+0x2ec>)
 80128b6:	2301      	movs	r3, #1
 80128b8:	4631      	mov	r1, r6
 80128ba:	4628      	mov	r0, r5
 80128bc:	47b8      	blx	r7
 80128be:	3001      	adds	r0, #1
 80128c0:	f43f af51 	beq.w	8012766 <_printf_float+0xbe>
 80128c4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80128c8:	429a      	cmp	r2, r3
 80128ca:	db02      	blt.n	80128d2 <_printf_float+0x22a>
 80128cc:	6823      	ldr	r3, [r4, #0]
 80128ce:	07d8      	lsls	r0, r3, #31
 80128d0:	d510      	bpl.n	80128f4 <_printf_float+0x24c>
 80128d2:	ee18 3a10 	vmov	r3, s16
 80128d6:	4652      	mov	r2, sl
 80128d8:	4631      	mov	r1, r6
 80128da:	4628      	mov	r0, r5
 80128dc:	47b8      	blx	r7
 80128de:	3001      	adds	r0, #1
 80128e0:	f43f af41 	beq.w	8012766 <_printf_float+0xbe>
 80128e4:	f04f 0800 	mov.w	r8, #0
 80128e8:	f104 091a 	add.w	r9, r4, #26
 80128ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80128ee:	3b01      	subs	r3, #1
 80128f0:	4543      	cmp	r3, r8
 80128f2:	dc09      	bgt.n	8012908 <_printf_float+0x260>
 80128f4:	6823      	ldr	r3, [r4, #0]
 80128f6:	079b      	lsls	r3, r3, #30
 80128f8:	f100 8107 	bmi.w	8012b0a <_printf_float+0x462>
 80128fc:	68e0      	ldr	r0, [r4, #12]
 80128fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012900:	4298      	cmp	r0, r3
 8012902:	bfb8      	it	lt
 8012904:	4618      	movlt	r0, r3
 8012906:	e730      	b.n	801276a <_printf_float+0xc2>
 8012908:	2301      	movs	r3, #1
 801290a:	464a      	mov	r2, r9
 801290c:	4631      	mov	r1, r6
 801290e:	4628      	mov	r0, r5
 8012910:	47b8      	blx	r7
 8012912:	3001      	adds	r0, #1
 8012914:	f43f af27 	beq.w	8012766 <_printf_float+0xbe>
 8012918:	f108 0801 	add.w	r8, r8, #1
 801291c:	e7e6      	b.n	80128ec <_printf_float+0x244>
 801291e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012920:	2b00      	cmp	r3, #0
 8012922:	dc39      	bgt.n	8012998 <_printf_float+0x2f0>
 8012924:	4a1b      	ldr	r2, [pc, #108]	; (8012994 <_printf_float+0x2ec>)
 8012926:	2301      	movs	r3, #1
 8012928:	4631      	mov	r1, r6
 801292a:	4628      	mov	r0, r5
 801292c:	47b8      	blx	r7
 801292e:	3001      	adds	r0, #1
 8012930:	f43f af19 	beq.w	8012766 <_printf_float+0xbe>
 8012934:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8012938:	4313      	orrs	r3, r2
 801293a:	d102      	bne.n	8012942 <_printf_float+0x29a>
 801293c:	6823      	ldr	r3, [r4, #0]
 801293e:	07d9      	lsls	r1, r3, #31
 8012940:	d5d8      	bpl.n	80128f4 <_printf_float+0x24c>
 8012942:	ee18 3a10 	vmov	r3, s16
 8012946:	4652      	mov	r2, sl
 8012948:	4631      	mov	r1, r6
 801294a:	4628      	mov	r0, r5
 801294c:	47b8      	blx	r7
 801294e:	3001      	adds	r0, #1
 8012950:	f43f af09 	beq.w	8012766 <_printf_float+0xbe>
 8012954:	f04f 0900 	mov.w	r9, #0
 8012958:	f104 0a1a 	add.w	sl, r4, #26
 801295c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801295e:	425b      	negs	r3, r3
 8012960:	454b      	cmp	r3, r9
 8012962:	dc01      	bgt.n	8012968 <_printf_float+0x2c0>
 8012964:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012966:	e792      	b.n	801288e <_printf_float+0x1e6>
 8012968:	2301      	movs	r3, #1
 801296a:	4652      	mov	r2, sl
 801296c:	4631      	mov	r1, r6
 801296e:	4628      	mov	r0, r5
 8012970:	47b8      	blx	r7
 8012972:	3001      	adds	r0, #1
 8012974:	f43f aef7 	beq.w	8012766 <_printf_float+0xbe>
 8012978:	f109 0901 	add.w	r9, r9, #1
 801297c:	e7ee      	b.n	801295c <_printf_float+0x2b4>
 801297e:	bf00      	nop
 8012980:	7fefffff 	.word	0x7fefffff
 8012984:	0801599c 	.word	0x0801599c
 8012988:	080159a0 	.word	0x080159a0
 801298c:	080159a4 	.word	0x080159a4
 8012990:	080159a8 	.word	0x080159a8
 8012994:	080159ac 	.word	0x080159ac
 8012998:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801299a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801299c:	429a      	cmp	r2, r3
 801299e:	bfa8      	it	ge
 80129a0:	461a      	movge	r2, r3
 80129a2:	2a00      	cmp	r2, #0
 80129a4:	4691      	mov	r9, r2
 80129a6:	dc37      	bgt.n	8012a18 <_printf_float+0x370>
 80129a8:	f04f 0b00 	mov.w	fp, #0
 80129ac:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80129b0:	f104 021a 	add.w	r2, r4, #26
 80129b4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80129b6:	9305      	str	r3, [sp, #20]
 80129b8:	eba3 0309 	sub.w	r3, r3, r9
 80129bc:	455b      	cmp	r3, fp
 80129be:	dc33      	bgt.n	8012a28 <_printf_float+0x380>
 80129c0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80129c4:	429a      	cmp	r2, r3
 80129c6:	db3b      	blt.n	8012a40 <_printf_float+0x398>
 80129c8:	6823      	ldr	r3, [r4, #0]
 80129ca:	07da      	lsls	r2, r3, #31
 80129cc:	d438      	bmi.n	8012a40 <_printf_float+0x398>
 80129ce:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80129d2:	eba2 0903 	sub.w	r9, r2, r3
 80129d6:	9b05      	ldr	r3, [sp, #20]
 80129d8:	1ad2      	subs	r2, r2, r3
 80129da:	4591      	cmp	r9, r2
 80129dc:	bfa8      	it	ge
 80129de:	4691      	movge	r9, r2
 80129e0:	f1b9 0f00 	cmp.w	r9, #0
 80129e4:	dc35      	bgt.n	8012a52 <_printf_float+0x3aa>
 80129e6:	f04f 0800 	mov.w	r8, #0
 80129ea:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80129ee:	f104 0a1a 	add.w	sl, r4, #26
 80129f2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80129f6:	1a9b      	subs	r3, r3, r2
 80129f8:	eba3 0309 	sub.w	r3, r3, r9
 80129fc:	4543      	cmp	r3, r8
 80129fe:	f77f af79 	ble.w	80128f4 <_printf_float+0x24c>
 8012a02:	2301      	movs	r3, #1
 8012a04:	4652      	mov	r2, sl
 8012a06:	4631      	mov	r1, r6
 8012a08:	4628      	mov	r0, r5
 8012a0a:	47b8      	blx	r7
 8012a0c:	3001      	adds	r0, #1
 8012a0e:	f43f aeaa 	beq.w	8012766 <_printf_float+0xbe>
 8012a12:	f108 0801 	add.w	r8, r8, #1
 8012a16:	e7ec      	b.n	80129f2 <_printf_float+0x34a>
 8012a18:	4613      	mov	r3, r2
 8012a1a:	4631      	mov	r1, r6
 8012a1c:	4642      	mov	r2, r8
 8012a1e:	4628      	mov	r0, r5
 8012a20:	47b8      	blx	r7
 8012a22:	3001      	adds	r0, #1
 8012a24:	d1c0      	bne.n	80129a8 <_printf_float+0x300>
 8012a26:	e69e      	b.n	8012766 <_printf_float+0xbe>
 8012a28:	2301      	movs	r3, #1
 8012a2a:	4631      	mov	r1, r6
 8012a2c:	4628      	mov	r0, r5
 8012a2e:	9205      	str	r2, [sp, #20]
 8012a30:	47b8      	blx	r7
 8012a32:	3001      	adds	r0, #1
 8012a34:	f43f ae97 	beq.w	8012766 <_printf_float+0xbe>
 8012a38:	9a05      	ldr	r2, [sp, #20]
 8012a3a:	f10b 0b01 	add.w	fp, fp, #1
 8012a3e:	e7b9      	b.n	80129b4 <_printf_float+0x30c>
 8012a40:	ee18 3a10 	vmov	r3, s16
 8012a44:	4652      	mov	r2, sl
 8012a46:	4631      	mov	r1, r6
 8012a48:	4628      	mov	r0, r5
 8012a4a:	47b8      	blx	r7
 8012a4c:	3001      	adds	r0, #1
 8012a4e:	d1be      	bne.n	80129ce <_printf_float+0x326>
 8012a50:	e689      	b.n	8012766 <_printf_float+0xbe>
 8012a52:	9a05      	ldr	r2, [sp, #20]
 8012a54:	464b      	mov	r3, r9
 8012a56:	4442      	add	r2, r8
 8012a58:	4631      	mov	r1, r6
 8012a5a:	4628      	mov	r0, r5
 8012a5c:	47b8      	blx	r7
 8012a5e:	3001      	adds	r0, #1
 8012a60:	d1c1      	bne.n	80129e6 <_printf_float+0x33e>
 8012a62:	e680      	b.n	8012766 <_printf_float+0xbe>
 8012a64:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012a66:	2a01      	cmp	r2, #1
 8012a68:	dc01      	bgt.n	8012a6e <_printf_float+0x3c6>
 8012a6a:	07db      	lsls	r3, r3, #31
 8012a6c:	d53a      	bpl.n	8012ae4 <_printf_float+0x43c>
 8012a6e:	2301      	movs	r3, #1
 8012a70:	4642      	mov	r2, r8
 8012a72:	4631      	mov	r1, r6
 8012a74:	4628      	mov	r0, r5
 8012a76:	47b8      	blx	r7
 8012a78:	3001      	adds	r0, #1
 8012a7a:	f43f ae74 	beq.w	8012766 <_printf_float+0xbe>
 8012a7e:	ee18 3a10 	vmov	r3, s16
 8012a82:	4652      	mov	r2, sl
 8012a84:	4631      	mov	r1, r6
 8012a86:	4628      	mov	r0, r5
 8012a88:	47b8      	blx	r7
 8012a8a:	3001      	adds	r0, #1
 8012a8c:	f43f ae6b 	beq.w	8012766 <_printf_float+0xbe>
 8012a90:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8012a94:	2200      	movs	r2, #0
 8012a96:	2300      	movs	r3, #0
 8012a98:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8012a9c:	f7ee f83c 	bl	8000b18 <__aeabi_dcmpeq>
 8012aa0:	b9d8      	cbnz	r0, 8012ada <_printf_float+0x432>
 8012aa2:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8012aa6:	f108 0201 	add.w	r2, r8, #1
 8012aaa:	4631      	mov	r1, r6
 8012aac:	4628      	mov	r0, r5
 8012aae:	47b8      	blx	r7
 8012ab0:	3001      	adds	r0, #1
 8012ab2:	d10e      	bne.n	8012ad2 <_printf_float+0x42a>
 8012ab4:	e657      	b.n	8012766 <_printf_float+0xbe>
 8012ab6:	2301      	movs	r3, #1
 8012ab8:	4652      	mov	r2, sl
 8012aba:	4631      	mov	r1, r6
 8012abc:	4628      	mov	r0, r5
 8012abe:	47b8      	blx	r7
 8012ac0:	3001      	adds	r0, #1
 8012ac2:	f43f ae50 	beq.w	8012766 <_printf_float+0xbe>
 8012ac6:	f108 0801 	add.w	r8, r8, #1
 8012aca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012acc:	3b01      	subs	r3, #1
 8012ace:	4543      	cmp	r3, r8
 8012ad0:	dcf1      	bgt.n	8012ab6 <_printf_float+0x40e>
 8012ad2:	464b      	mov	r3, r9
 8012ad4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8012ad8:	e6da      	b.n	8012890 <_printf_float+0x1e8>
 8012ada:	f04f 0800 	mov.w	r8, #0
 8012ade:	f104 0a1a 	add.w	sl, r4, #26
 8012ae2:	e7f2      	b.n	8012aca <_printf_float+0x422>
 8012ae4:	2301      	movs	r3, #1
 8012ae6:	4642      	mov	r2, r8
 8012ae8:	e7df      	b.n	8012aaa <_printf_float+0x402>
 8012aea:	2301      	movs	r3, #1
 8012aec:	464a      	mov	r2, r9
 8012aee:	4631      	mov	r1, r6
 8012af0:	4628      	mov	r0, r5
 8012af2:	47b8      	blx	r7
 8012af4:	3001      	adds	r0, #1
 8012af6:	f43f ae36 	beq.w	8012766 <_printf_float+0xbe>
 8012afa:	f108 0801 	add.w	r8, r8, #1
 8012afe:	68e3      	ldr	r3, [r4, #12]
 8012b00:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8012b02:	1a5b      	subs	r3, r3, r1
 8012b04:	4543      	cmp	r3, r8
 8012b06:	dcf0      	bgt.n	8012aea <_printf_float+0x442>
 8012b08:	e6f8      	b.n	80128fc <_printf_float+0x254>
 8012b0a:	f04f 0800 	mov.w	r8, #0
 8012b0e:	f104 0919 	add.w	r9, r4, #25
 8012b12:	e7f4      	b.n	8012afe <_printf_float+0x456>

08012b14 <_printf_common>:
 8012b14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012b18:	4616      	mov	r6, r2
 8012b1a:	4699      	mov	r9, r3
 8012b1c:	688a      	ldr	r2, [r1, #8]
 8012b1e:	690b      	ldr	r3, [r1, #16]
 8012b20:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8012b24:	4293      	cmp	r3, r2
 8012b26:	bfb8      	it	lt
 8012b28:	4613      	movlt	r3, r2
 8012b2a:	6033      	str	r3, [r6, #0]
 8012b2c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8012b30:	4607      	mov	r7, r0
 8012b32:	460c      	mov	r4, r1
 8012b34:	b10a      	cbz	r2, 8012b3a <_printf_common+0x26>
 8012b36:	3301      	adds	r3, #1
 8012b38:	6033      	str	r3, [r6, #0]
 8012b3a:	6823      	ldr	r3, [r4, #0]
 8012b3c:	0699      	lsls	r1, r3, #26
 8012b3e:	bf42      	ittt	mi
 8012b40:	6833      	ldrmi	r3, [r6, #0]
 8012b42:	3302      	addmi	r3, #2
 8012b44:	6033      	strmi	r3, [r6, #0]
 8012b46:	6825      	ldr	r5, [r4, #0]
 8012b48:	f015 0506 	ands.w	r5, r5, #6
 8012b4c:	d106      	bne.n	8012b5c <_printf_common+0x48>
 8012b4e:	f104 0a19 	add.w	sl, r4, #25
 8012b52:	68e3      	ldr	r3, [r4, #12]
 8012b54:	6832      	ldr	r2, [r6, #0]
 8012b56:	1a9b      	subs	r3, r3, r2
 8012b58:	42ab      	cmp	r3, r5
 8012b5a:	dc26      	bgt.n	8012baa <_printf_common+0x96>
 8012b5c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8012b60:	1e13      	subs	r3, r2, #0
 8012b62:	6822      	ldr	r2, [r4, #0]
 8012b64:	bf18      	it	ne
 8012b66:	2301      	movne	r3, #1
 8012b68:	0692      	lsls	r2, r2, #26
 8012b6a:	d42b      	bmi.n	8012bc4 <_printf_common+0xb0>
 8012b6c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8012b70:	4649      	mov	r1, r9
 8012b72:	4638      	mov	r0, r7
 8012b74:	47c0      	blx	r8
 8012b76:	3001      	adds	r0, #1
 8012b78:	d01e      	beq.n	8012bb8 <_printf_common+0xa4>
 8012b7a:	6823      	ldr	r3, [r4, #0]
 8012b7c:	6922      	ldr	r2, [r4, #16]
 8012b7e:	f003 0306 	and.w	r3, r3, #6
 8012b82:	2b04      	cmp	r3, #4
 8012b84:	bf02      	ittt	eq
 8012b86:	68e5      	ldreq	r5, [r4, #12]
 8012b88:	6833      	ldreq	r3, [r6, #0]
 8012b8a:	1aed      	subeq	r5, r5, r3
 8012b8c:	68a3      	ldr	r3, [r4, #8]
 8012b8e:	bf0c      	ite	eq
 8012b90:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8012b94:	2500      	movne	r5, #0
 8012b96:	4293      	cmp	r3, r2
 8012b98:	bfc4      	itt	gt
 8012b9a:	1a9b      	subgt	r3, r3, r2
 8012b9c:	18ed      	addgt	r5, r5, r3
 8012b9e:	2600      	movs	r6, #0
 8012ba0:	341a      	adds	r4, #26
 8012ba2:	42b5      	cmp	r5, r6
 8012ba4:	d11a      	bne.n	8012bdc <_printf_common+0xc8>
 8012ba6:	2000      	movs	r0, #0
 8012ba8:	e008      	b.n	8012bbc <_printf_common+0xa8>
 8012baa:	2301      	movs	r3, #1
 8012bac:	4652      	mov	r2, sl
 8012bae:	4649      	mov	r1, r9
 8012bb0:	4638      	mov	r0, r7
 8012bb2:	47c0      	blx	r8
 8012bb4:	3001      	adds	r0, #1
 8012bb6:	d103      	bne.n	8012bc0 <_printf_common+0xac>
 8012bb8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012bbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012bc0:	3501      	adds	r5, #1
 8012bc2:	e7c6      	b.n	8012b52 <_printf_common+0x3e>
 8012bc4:	18e1      	adds	r1, r4, r3
 8012bc6:	1c5a      	adds	r2, r3, #1
 8012bc8:	2030      	movs	r0, #48	; 0x30
 8012bca:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8012bce:	4422      	add	r2, r4
 8012bd0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8012bd4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8012bd8:	3302      	adds	r3, #2
 8012bda:	e7c7      	b.n	8012b6c <_printf_common+0x58>
 8012bdc:	2301      	movs	r3, #1
 8012bde:	4622      	mov	r2, r4
 8012be0:	4649      	mov	r1, r9
 8012be2:	4638      	mov	r0, r7
 8012be4:	47c0      	blx	r8
 8012be6:	3001      	adds	r0, #1
 8012be8:	d0e6      	beq.n	8012bb8 <_printf_common+0xa4>
 8012bea:	3601      	adds	r6, #1
 8012bec:	e7d9      	b.n	8012ba2 <_printf_common+0x8e>
	...

08012bf0 <_printf_i>:
 8012bf0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012bf4:	7e0f      	ldrb	r7, [r1, #24]
 8012bf6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8012bf8:	2f78      	cmp	r7, #120	; 0x78
 8012bfa:	4691      	mov	r9, r2
 8012bfc:	4680      	mov	r8, r0
 8012bfe:	460c      	mov	r4, r1
 8012c00:	469a      	mov	sl, r3
 8012c02:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8012c06:	d807      	bhi.n	8012c18 <_printf_i+0x28>
 8012c08:	2f62      	cmp	r7, #98	; 0x62
 8012c0a:	d80a      	bhi.n	8012c22 <_printf_i+0x32>
 8012c0c:	2f00      	cmp	r7, #0
 8012c0e:	f000 80d4 	beq.w	8012dba <_printf_i+0x1ca>
 8012c12:	2f58      	cmp	r7, #88	; 0x58
 8012c14:	f000 80c0 	beq.w	8012d98 <_printf_i+0x1a8>
 8012c18:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012c1c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8012c20:	e03a      	b.n	8012c98 <_printf_i+0xa8>
 8012c22:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8012c26:	2b15      	cmp	r3, #21
 8012c28:	d8f6      	bhi.n	8012c18 <_printf_i+0x28>
 8012c2a:	a101      	add	r1, pc, #4	; (adr r1, 8012c30 <_printf_i+0x40>)
 8012c2c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8012c30:	08012c89 	.word	0x08012c89
 8012c34:	08012c9d 	.word	0x08012c9d
 8012c38:	08012c19 	.word	0x08012c19
 8012c3c:	08012c19 	.word	0x08012c19
 8012c40:	08012c19 	.word	0x08012c19
 8012c44:	08012c19 	.word	0x08012c19
 8012c48:	08012c9d 	.word	0x08012c9d
 8012c4c:	08012c19 	.word	0x08012c19
 8012c50:	08012c19 	.word	0x08012c19
 8012c54:	08012c19 	.word	0x08012c19
 8012c58:	08012c19 	.word	0x08012c19
 8012c5c:	08012da1 	.word	0x08012da1
 8012c60:	08012cc9 	.word	0x08012cc9
 8012c64:	08012d5b 	.word	0x08012d5b
 8012c68:	08012c19 	.word	0x08012c19
 8012c6c:	08012c19 	.word	0x08012c19
 8012c70:	08012dc3 	.word	0x08012dc3
 8012c74:	08012c19 	.word	0x08012c19
 8012c78:	08012cc9 	.word	0x08012cc9
 8012c7c:	08012c19 	.word	0x08012c19
 8012c80:	08012c19 	.word	0x08012c19
 8012c84:	08012d63 	.word	0x08012d63
 8012c88:	682b      	ldr	r3, [r5, #0]
 8012c8a:	1d1a      	adds	r2, r3, #4
 8012c8c:	681b      	ldr	r3, [r3, #0]
 8012c8e:	602a      	str	r2, [r5, #0]
 8012c90:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012c94:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8012c98:	2301      	movs	r3, #1
 8012c9a:	e09f      	b.n	8012ddc <_printf_i+0x1ec>
 8012c9c:	6820      	ldr	r0, [r4, #0]
 8012c9e:	682b      	ldr	r3, [r5, #0]
 8012ca0:	0607      	lsls	r7, r0, #24
 8012ca2:	f103 0104 	add.w	r1, r3, #4
 8012ca6:	6029      	str	r1, [r5, #0]
 8012ca8:	d501      	bpl.n	8012cae <_printf_i+0xbe>
 8012caa:	681e      	ldr	r6, [r3, #0]
 8012cac:	e003      	b.n	8012cb6 <_printf_i+0xc6>
 8012cae:	0646      	lsls	r6, r0, #25
 8012cb0:	d5fb      	bpl.n	8012caa <_printf_i+0xba>
 8012cb2:	f9b3 6000 	ldrsh.w	r6, [r3]
 8012cb6:	2e00      	cmp	r6, #0
 8012cb8:	da03      	bge.n	8012cc2 <_printf_i+0xd2>
 8012cba:	232d      	movs	r3, #45	; 0x2d
 8012cbc:	4276      	negs	r6, r6
 8012cbe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012cc2:	485a      	ldr	r0, [pc, #360]	; (8012e2c <_printf_i+0x23c>)
 8012cc4:	230a      	movs	r3, #10
 8012cc6:	e012      	b.n	8012cee <_printf_i+0xfe>
 8012cc8:	682b      	ldr	r3, [r5, #0]
 8012cca:	6820      	ldr	r0, [r4, #0]
 8012ccc:	1d19      	adds	r1, r3, #4
 8012cce:	6029      	str	r1, [r5, #0]
 8012cd0:	0605      	lsls	r5, r0, #24
 8012cd2:	d501      	bpl.n	8012cd8 <_printf_i+0xe8>
 8012cd4:	681e      	ldr	r6, [r3, #0]
 8012cd6:	e002      	b.n	8012cde <_printf_i+0xee>
 8012cd8:	0641      	lsls	r1, r0, #25
 8012cda:	d5fb      	bpl.n	8012cd4 <_printf_i+0xe4>
 8012cdc:	881e      	ldrh	r6, [r3, #0]
 8012cde:	4853      	ldr	r0, [pc, #332]	; (8012e2c <_printf_i+0x23c>)
 8012ce0:	2f6f      	cmp	r7, #111	; 0x6f
 8012ce2:	bf0c      	ite	eq
 8012ce4:	2308      	moveq	r3, #8
 8012ce6:	230a      	movne	r3, #10
 8012ce8:	2100      	movs	r1, #0
 8012cea:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8012cee:	6865      	ldr	r5, [r4, #4]
 8012cf0:	60a5      	str	r5, [r4, #8]
 8012cf2:	2d00      	cmp	r5, #0
 8012cf4:	bfa2      	ittt	ge
 8012cf6:	6821      	ldrge	r1, [r4, #0]
 8012cf8:	f021 0104 	bicge.w	r1, r1, #4
 8012cfc:	6021      	strge	r1, [r4, #0]
 8012cfe:	b90e      	cbnz	r6, 8012d04 <_printf_i+0x114>
 8012d00:	2d00      	cmp	r5, #0
 8012d02:	d04b      	beq.n	8012d9c <_printf_i+0x1ac>
 8012d04:	4615      	mov	r5, r2
 8012d06:	fbb6 f1f3 	udiv	r1, r6, r3
 8012d0a:	fb03 6711 	mls	r7, r3, r1, r6
 8012d0e:	5dc7      	ldrb	r7, [r0, r7]
 8012d10:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8012d14:	4637      	mov	r7, r6
 8012d16:	42bb      	cmp	r3, r7
 8012d18:	460e      	mov	r6, r1
 8012d1a:	d9f4      	bls.n	8012d06 <_printf_i+0x116>
 8012d1c:	2b08      	cmp	r3, #8
 8012d1e:	d10b      	bne.n	8012d38 <_printf_i+0x148>
 8012d20:	6823      	ldr	r3, [r4, #0]
 8012d22:	07de      	lsls	r6, r3, #31
 8012d24:	d508      	bpl.n	8012d38 <_printf_i+0x148>
 8012d26:	6923      	ldr	r3, [r4, #16]
 8012d28:	6861      	ldr	r1, [r4, #4]
 8012d2a:	4299      	cmp	r1, r3
 8012d2c:	bfde      	ittt	le
 8012d2e:	2330      	movle	r3, #48	; 0x30
 8012d30:	f805 3c01 	strble.w	r3, [r5, #-1]
 8012d34:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8012d38:	1b52      	subs	r2, r2, r5
 8012d3a:	6122      	str	r2, [r4, #16]
 8012d3c:	f8cd a000 	str.w	sl, [sp]
 8012d40:	464b      	mov	r3, r9
 8012d42:	aa03      	add	r2, sp, #12
 8012d44:	4621      	mov	r1, r4
 8012d46:	4640      	mov	r0, r8
 8012d48:	f7ff fee4 	bl	8012b14 <_printf_common>
 8012d4c:	3001      	adds	r0, #1
 8012d4e:	d14a      	bne.n	8012de6 <_printf_i+0x1f6>
 8012d50:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012d54:	b004      	add	sp, #16
 8012d56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012d5a:	6823      	ldr	r3, [r4, #0]
 8012d5c:	f043 0320 	orr.w	r3, r3, #32
 8012d60:	6023      	str	r3, [r4, #0]
 8012d62:	4833      	ldr	r0, [pc, #204]	; (8012e30 <_printf_i+0x240>)
 8012d64:	2778      	movs	r7, #120	; 0x78
 8012d66:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8012d6a:	6823      	ldr	r3, [r4, #0]
 8012d6c:	6829      	ldr	r1, [r5, #0]
 8012d6e:	061f      	lsls	r7, r3, #24
 8012d70:	f851 6b04 	ldr.w	r6, [r1], #4
 8012d74:	d402      	bmi.n	8012d7c <_printf_i+0x18c>
 8012d76:	065f      	lsls	r7, r3, #25
 8012d78:	bf48      	it	mi
 8012d7a:	b2b6      	uxthmi	r6, r6
 8012d7c:	07df      	lsls	r7, r3, #31
 8012d7e:	bf48      	it	mi
 8012d80:	f043 0320 	orrmi.w	r3, r3, #32
 8012d84:	6029      	str	r1, [r5, #0]
 8012d86:	bf48      	it	mi
 8012d88:	6023      	strmi	r3, [r4, #0]
 8012d8a:	b91e      	cbnz	r6, 8012d94 <_printf_i+0x1a4>
 8012d8c:	6823      	ldr	r3, [r4, #0]
 8012d8e:	f023 0320 	bic.w	r3, r3, #32
 8012d92:	6023      	str	r3, [r4, #0]
 8012d94:	2310      	movs	r3, #16
 8012d96:	e7a7      	b.n	8012ce8 <_printf_i+0xf8>
 8012d98:	4824      	ldr	r0, [pc, #144]	; (8012e2c <_printf_i+0x23c>)
 8012d9a:	e7e4      	b.n	8012d66 <_printf_i+0x176>
 8012d9c:	4615      	mov	r5, r2
 8012d9e:	e7bd      	b.n	8012d1c <_printf_i+0x12c>
 8012da0:	682b      	ldr	r3, [r5, #0]
 8012da2:	6826      	ldr	r6, [r4, #0]
 8012da4:	6961      	ldr	r1, [r4, #20]
 8012da6:	1d18      	adds	r0, r3, #4
 8012da8:	6028      	str	r0, [r5, #0]
 8012daa:	0635      	lsls	r5, r6, #24
 8012dac:	681b      	ldr	r3, [r3, #0]
 8012dae:	d501      	bpl.n	8012db4 <_printf_i+0x1c4>
 8012db0:	6019      	str	r1, [r3, #0]
 8012db2:	e002      	b.n	8012dba <_printf_i+0x1ca>
 8012db4:	0670      	lsls	r0, r6, #25
 8012db6:	d5fb      	bpl.n	8012db0 <_printf_i+0x1c0>
 8012db8:	8019      	strh	r1, [r3, #0]
 8012dba:	2300      	movs	r3, #0
 8012dbc:	6123      	str	r3, [r4, #16]
 8012dbe:	4615      	mov	r5, r2
 8012dc0:	e7bc      	b.n	8012d3c <_printf_i+0x14c>
 8012dc2:	682b      	ldr	r3, [r5, #0]
 8012dc4:	1d1a      	adds	r2, r3, #4
 8012dc6:	602a      	str	r2, [r5, #0]
 8012dc8:	681d      	ldr	r5, [r3, #0]
 8012dca:	6862      	ldr	r2, [r4, #4]
 8012dcc:	2100      	movs	r1, #0
 8012dce:	4628      	mov	r0, r5
 8012dd0:	f7ed fa26 	bl	8000220 <memchr>
 8012dd4:	b108      	cbz	r0, 8012dda <_printf_i+0x1ea>
 8012dd6:	1b40      	subs	r0, r0, r5
 8012dd8:	6060      	str	r0, [r4, #4]
 8012dda:	6863      	ldr	r3, [r4, #4]
 8012ddc:	6123      	str	r3, [r4, #16]
 8012dde:	2300      	movs	r3, #0
 8012de0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012de4:	e7aa      	b.n	8012d3c <_printf_i+0x14c>
 8012de6:	6923      	ldr	r3, [r4, #16]
 8012de8:	462a      	mov	r2, r5
 8012dea:	4649      	mov	r1, r9
 8012dec:	4640      	mov	r0, r8
 8012dee:	47d0      	blx	sl
 8012df0:	3001      	adds	r0, #1
 8012df2:	d0ad      	beq.n	8012d50 <_printf_i+0x160>
 8012df4:	6823      	ldr	r3, [r4, #0]
 8012df6:	079b      	lsls	r3, r3, #30
 8012df8:	d413      	bmi.n	8012e22 <_printf_i+0x232>
 8012dfa:	68e0      	ldr	r0, [r4, #12]
 8012dfc:	9b03      	ldr	r3, [sp, #12]
 8012dfe:	4298      	cmp	r0, r3
 8012e00:	bfb8      	it	lt
 8012e02:	4618      	movlt	r0, r3
 8012e04:	e7a6      	b.n	8012d54 <_printf_i+0x164>
 8012e06:	2301      	movs	r3, #1
 8012e08:	4632      	mov	r2, r6
 8012e0a:	4649      	mov	r1, r9
 8012e0c:	4640      	mov	r0, r8
 8012e0e:	47d0      	blx	sl
 8012e10:	3001      	adds	r0, #1
 8012e12:	d09d      	beq.n	8012d50 <_printf_i+0x160>
 8012e14:	3501      	adds	r5, #1
 8012e16:	68e3      	ldr	r3, [r4, #12]
 8012e18:	9903      	ldr	r1, [sp, #12]
 8012e1a:	1a5b      	subs	r3, r3, r1
 8012e1c:	42ab      	cmp	r3, r5
 8012e1e:	dcf2      	bgt.n	8012e06 <_printf_i+0x216>
 8012e20:	e7eb      	b.n	8012dfa <_printf_i+0x20a>
 8012e22:	2500      	movs	r5, #0
 8012e24:	f104 0619 	add.w	r6, r4, #25
 8012e28:	e7f5      	b.n	8012e16 <_printf_i+0x226>
 8012e2a:	bf00      	nop
 8012e2c:	080159ae 	.word	0x080159ae
 8012e30:	080159bf 	.word	0x080159bf

08012e34 <std>:
 8012e34:	2300      	movs	r3, #0
 8012e36:	b510      	push	{r4, lr}
 8012e38:	4604      	mov	r4, r0
 8012e3a:	e9c0 3300 	strd	r3, r3, [r0]
 8012e3e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8012e42:	6083      	str	r3, [r0, #8]
 8012e44:	8181      	strh	r1, [r0, #12]
 8012e46:	6643      	str	r3, [r0, #100]	; 0x64
 8012e48:	81c2      	strh	r2, [r0, #14]
 8012e4a:	6183      	str	r3, [r0, #24]
 8012e4c:	4619      	mov	r1, r3
 8012e4e:	2208      	movs	r2, #8
 8012e50:	305c      	adds	r0, #92	; 0x5c
 8012e52:	f000 fa39 	bl	80132c8 <memset>
 8012e56:	4b05      	ldr	r3, [pc, #20]	; (8012e6c <std+0x38>)
 8012e58:	6263      	str	r3, [r4, #36]	; 0x24
 8012e5a:	4b05      	ldr	r3, [pc, #20]	; (8012e70 <std+0x3c>)
 8012e5c:	62a3      	str	r3, [r4, #40]	; 0x28
 8012e5e:	4b05      	ldr	r3, [pc, #20]	; (8012e74 <std+0x40>)
 8012e60:	62e3      	str	r3, [r4, #44]	; 0x2c
 8012e62:	4b05      	ldr	r3, [pc, #20]	; (8012e78 <std+0x44>)
 8012e64:	6224      	str	r4, [r4, #32]
 8012e66:	6323      	str	r3, [r4, #48]	; 0x30
 8012e68:	bd10      	pop	{r4, pc}
 8012e6a:	bf00      	nop
 8012e6c:	08013119 	.word	0x08013119
 8012e70:	0801313b 	.word	0x0801313b
 8012e74:	08013173 	.word	0x08013173
 8012e78:	08013197 	.word	0x08013197

08012e7c <stdio_exit_handler>:
 8012e7c:	4a02      	ldr	r2, [pc, #8]	; (8012e88 <stdio_exit_handler+0xc>)
 8012e7e:	4903      	ldr	r1, [pc, #12]	; (8012e8c <stdio_exit_handler+0x10>)
 8012e80:	4803      	ldr	r0, [pc, #12]	; (8012e90 <stdio_exit_handler+0x14>)
 8012e82:	f000 b869 	b.w	8012f58 <_fwalk_sglue>
 8012e86:	bf00      	nop
 8012e88:	20000188 	.word	0x20000188
 8012e8c:	080150c1 	.word	0x080150c1
 8012e90:	20000194 	.word	0x20000194

08012e94 <cleanup_stdio>:
 8012e94:	6841      	ldr	r1, [r0, #4]
 8012e96:	4b0c      	ldr	r3, [pc, #48]	; (8012ec8 <cleanup_stdio+0x34>)
 8012e98:	4299      	cmp	r1, r3
 8012e9a:	b510      	push	{r4, lr}
 8012e9c:	4604      	mov	r4, r0
 8012e9e:	d001      	beq.n	8012ea4 <cleanup_stdio+0x10>
 8012ea0:	f002 f90e 	bl	80150c0 <_fflush_r>
 8012ea4:	68a1      	ldr	r1, [r4, #8]
 8012ea6:	4b09      	ldr	r3, [pc, #36]	; (8012ecc <cleanup_stdio+0x38>)
 8012ea8:	4299      	cmp	r1, r3
 8012eaa:	d002      	beq.n	8012eb2 <cleanup_stdio+0x1e>
 8012eac:	4620      	mov	r0, r4
 8012eae:	f002 f907 	bl	80150c0 <_fflush_r>
 8012eb2:	68e1      	ldr	r1, [r4, #12]
 8012eb4:	4b06      	ldr	r3, [pc, #24]	; (8012ed0 <cleanup_stdio+0x3c>)
 8012eb6:	4299      	cmp	r1, r3
 8012eb8:	d004      	beq.n	8012ec4 <cleanup_stdio+0x30>
 8012eba:	4620      	mov	r0, r4
 8012ebc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012ec0:	f002 b8fe 	b.w	80150c0 <_fflush_r>
 8012ec4:	bd10      	pop	{r4, pc}
 8012ec6:	bf00      	nop
 8012ec8:	200066ac 	.word	0x200066ac
 8012ecc:	20006714 	.word	0x20006714
 8012ed0:	2000677c 	.word	0x2000677c

08012ed4 <global_stdio_init.part.0>:
 8012ed4:	b510      	push	{r4, lr}
 8012ed6:	4b0b      	ldr	r3, [pc, #44]	; (8012f04 <global_stdio_init.part.0+0x30>)
 8012ed8:	4c0b      	ldr	r4, [pc, #44]	; (8012f08 <global_stdio_init.part.0+0x34>)
 8012eda:	4a0c      	ldr	r2, [pc, #48]	; (8012f0c <global_stdio_init.part.0+0x38>)
 8012edc:	601a      	str	r2, [r3, #0]
 8012ede:	4620      	mov	r0, r4
 8012ee0:	2200      	movs	r2, #0
 8012ee2:	2104      	movs	r1, #4
 8012ee4:	f7ff ffa6 	bl	8012e34 <std>
 8012ee8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8012eec:	2201      	movs	r2, #1
 8012eee:	2109      	movs	r1, #9
 8012ef0:	f7ff ffa0 	bl	8012e34 <std>
 8012ef4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8012ef8:	2202      	movs	r2, #2
 8012efa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012efe:	2112      	movs	r1, #18
 8012f00:	f7ff bf98 	b.w	8012e34 <std>
 8012f04:	200067e4 	.word	0x200067e4
 8012f08:	200066ac 	.word	0x200066ac
 8012f0c:	08012e7d 	.word	0x08012e7d

08012f10 <__sfp_lock_acquire>:
 8012f10:	4801      	ldr	r0, [pc, #4]	; (8012f18 <__sfp_lock_acquire+0x8>)
 8012f12:	f000 baab 	b.w	801346c <__retarget_lock_acquire_recursive>
 8012f16:	bf00      	nop
 8012f18:	200067ed 	.word	0x200067ed

08012f1c <__sfp_lock_release>:
 8012f1c:	4801      	ldr	r0, [pc, #4]	; (8012f24 <__sfp_lock_release+0x8>)
 8012f1e:	f000 baa6 	b.w	801346e <__retarget_lock_release_recursive>
 8012f22:	bf00      	nop
 8012f24:	200067ed 	.word	0x200067ed

08012f28 <__sinit>:
 8012f28:	b510      	push	{r4, lr}
 8012f2a:	4604      	mov	r4, r0
 8012f2c:	f7ff fff0 	bl	8012f10 <__sfp_lock_acquire>
 8012f30:	6a23      	ldr	r3, [r4, #32]
 8012f32:	b11b      	cbz	r3, 8012f3c <__sinit+0x14>
 8012f34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012f38:	f7ff bff0 	b.w	8012f1c <__sfp_lock_release>
 8012f3c:	4b04      	ldr	r3, [pc, #16]	; (8012f50 <__sinit+0x28>)
 8012f3e:	6223      	str	r3, [r4, #32]
 8012f40:	4b04      	ldr	r3, [pc, #16]	; (8012f54 <__sinit+0x2c>)
 8012f42:	681b      	ldr	r3, [r3, #0]
 8012f44:	2b00      	cmp	r3, #0
 8012f46:	d1f5      	bne.n	8012f34 <__sinit+0xc>
 8012f48:	f7ff ffc4 	bl	8012ed4 <global_stdio_init.part.0>
 8012f4c:	e7f2      	b.n	8012f34 <__sinit+0xc>
 8012f4e:	bf00      	nop
 8012f50:	08012e95 	.word	0x08012e95
 8012f54:	200067e4 	.word	0x200067e4

08012f58 <_fwalk_sglue>:
 8012f58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012f5c:	4607      	mov	r7, r0
 8012f5e:	4688      	mov	r8, r1
 8012f60:	4614      	mov	r4, r2
 8012f62:	2600      	movs	r6, #0
 8012f64:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8012f68:	f1b9 0901 	subs.w	r9, r9, #1
 8012f6c:	d505      	bpl.n	8012f7a <_fwalk_sglue+0x22>
 8012f6e:	6824      	ldr	r4, [r4, #0]
 8012f70:	2c00      	cmp	r4, #0
 8012f72:	d1f7      	bne.n	8012f64 <_fwalk_sglue+0xc>
 8012f74:	4630      	mov	r0, r6
 8012f76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012f7a:	89ab      	ldrh	r3, [r5, #12]
 8012f7c:	2b01      	cmp	r3, #1
 8012f7e:	d907      	bls.n	8012f90 <_fwalk_sglue+0x38>
 8012f80:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8012f84:	3301      	adds	r3, #1
 8012f86:	d003      	beq.n	8012f90 <_fwalk_sglue+0x38>
 8012f88:	4629      	mov	r1, r5
 8012f8a:	4638      	mov	r0, r7
 8012f8c:	47c0      	blx	r8
 8012f8e:	4306      	orrs	r6, r0
 8012f90:	3568      	adds	r5, #104	; 0x68
 8012f92:	e7e9      	b.n	8012f68 <_fwalk_sglue+0x10>

08012f94 <iprintf>:
 8012f94:	b40f      	push	{r0, r1, r2, r3}
 8012f96:	b507      	push	{r0, r1, r2, lr}
 8012f98:	4906      	ldr	r1, [pc, #24]	; (8012fb4 <iprintf+0x20>)
 8012f9a:	ab04      	add	r3, sp, #16
 8012f9c:	6808      	ldr	r0, [r1, #0]
 8012f9e:	f853 2b04 	ldr.w	r2, [r3], #4
 8012fa2:	6881      	ldr	r1, [r0, #8]
 8012fa4:	9301      	str	r3, [sp, #4]
 8012fa6:	f001 feeb 	bl	8014d80 <_vfiprintf_r>
 8012faa:	b003      	add	sp, #12
 8012fac:	f85d eb04 	ldr.w	lr, [sp], #4
 8012fb0:	b004      	add	sp, #16
 8012fb2:	4770      	bx	lr
 8012fb4:	200001e0 	.word	0x200001e0

08012fb8 <_puts_r>:
 8012fb8:	6a03      	ldr	r3, [r0, #32]
 8012fba:	b570      	push	{r4, r5, r6, lr}
 8012fbc:	6884      	ldr	r4, [r0, #8]
 8012fbe:	4605      	mov	r5, r0
 8012fc0:	460e      	mov	r6, r1
 8012fc2:	b90b      	cbnz	r3, 8012fc8 <_puts_r+0x10>
 8012fc4:	f7ff ffb0 	bl	8012f28 <__sinit>
 8012fc8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012fca:	07db      	lsls	r3, r3, #31
 8012fcc:	d405      	bmi.n	8012fda <_puts_r+0x22>
 8012fce:	89a3      	ldrh	r3, [r4, #12]
 8012fd0:	0598      	lsls	r0, r3, #22
 8012fd2:	d402      	bmi.n	8012fda <_puts_r+0x22>
 8012fd4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012fd6:	f000 fa49 	bl	801346c <__retarget_lock_acquire_recursive>
 8012fda:	89a3      	ldrh	r3, [r4, #12]
 8012fdc:	0719      	lsls	r1, r3, #28
 8012fde:	d513      	bpl.n	8013008 <_puts_r+0x50>
 8012fe0:	6923      	ldr	r3, [r4, #16]
 8012fe2:	b18b      	cbz	r3, 8013008 <_puts_r+0x50>
 8012fe4:	3e01      	subs	r6, #1
 8012fe6:	68a3      	ldr	r3, [r4, #8]
 8012fe8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8012fec:	3b01      	subs	r3, #1
 8012fee:	60a3      	str	r3, [r4, #8]
 8012ff0:	b9e9      	cbnz	r1, 801302e <_puts_r+0x76>
 8012ff2:	2b00      	cmp	r3, #0
 8012ff4:	da2e      	bge.n	8013054 <_puts_r+0x9c>
 8012ff6:	4622      	mov	r2, r4
 8012ff8:	210a      	movs	r1, #10
 8012ffa:	4628      	mov	r0, r5
 8012ffc:	f000 f8cf 	bl	801319e <__swbuf_r>
 8013000:	3001      	adds	r0, #1
 8013002:	d007      	beq.n	8013014 <_puts_r+0x5c>
 8013004:	250a      	movs	r5, #10
 8013006:	e007      	b.n	8013018 <_puts_r+0x60>
 8013008:	4621      	mov	r1, r4
 801300a:	4628      	mov	r0, r5
 801300c:	f000 f904 	bl	8013218 <__swsetup_r>
 8013010:	2800      	cmp	r0, #0
 8013012:	d0e7      	beq.n	8012fe4 <_puts_r+0x2c>
 8013014:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8013018:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801301a:	07da      	lsls	r2, r3, #31
 801301c:	d405      	bmi.n	801302a <_puts_r+0x72>
 801301e:	89a3      	ldrh	r3, [r4, #12]
 8013020:	059b      	lsls	r3, r3, #22
 8013022:	d402      	bmi.n	801302a <_puts_r+0x72>
 8013024:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013026:	f000 fa22 	bl	801346e <__retarget_lock_release_recursive>
 801302a:	4628      	mov	r0, r5
 801302c:	bd70      	pop	{r4, r5, r6, pc}
 801302e:	2b00      	cmp	r3, #0
 8013030:	da04      	bge.n	801303c <_puts_r+0x84>
 8013032:	69a2      	ldr	r2, [r4, #24]
 8013034:	429a      	cmp	r2, r3
 8013036:	dc06      	bgt.n	8013046 <_puts_r+0x8e>
 8013038:	290a      	cmp	r1, #10
 801303a:	d004      	beq.n	8013046 <_puts_r+0x8e>
 801303c:	6823      	ldr	r3, [r4, #0]
 801303e:	1c5a      	adds	r2, r3, #1
 8013040:	6022      	str	r2, [r4, #0]
 8013042:	7019      	strb	r1, [r3, #0]
 8013044:	e7cf      	b.n	8012fe6 <_puts_r+0x2e>
 8013046:	4622      	mov	r2, r4
 8013048:	4628      	mov	r0, r5
 801304a:	f000 f8a8 	bl	801319e <__swbuf_r>
 801304e:	3001      	adds	r0, #1
 8013050:	d1c9      	bne.n	8012fe6 <_puts_r+0x2e>
 8013052:	e7df      	b.n	8013014 <_puts_r+0x5c>
 8013054:	6823      	ldr	r3, [r4, #0]
 8013056:	250a      	movs	r5, #10
 8013058:	1c5a      	adds	r2, r3, #1
 801305a:	6022      	str	r2, [r4, #0]
 801305c:	701d      	strb	r5, [r3, #0]
 801305e:	e7db      	b.n	8013018 <_puts_r+0x60>

08013060 <puts>:
 8013060:	4b02      	ldr	r3, [pc, #8]	; (801306c <puts+0xc>)
 8013062:	4601      	mov	r1, r0
 8013064:	6818      	ldr	r0, [r3, #0]
 8013066:	f7ff bfa7 	b.w	8012fb8 <_puts_r>
 801306a:	bf00      	nop
 801306c:	200001e0 	.word	0x200001e0

08013070 <sniprintf>:
 8013070:	b40c      	push	{r2, r3}
 8013072:	b530      	push	{r4, r5, lr}
 8013074:	4b17      	ldr	r3, [pc, #92]	; (80130d4 <sniprintf+0x64>)
 8013076:	1e0c      	subs	r4, r1, #0
 8013078:	681d      	ldr	r5, [r3, #0]
 801307a:	b09d      	sub	sp, #116	; 0x74
 801307c:	da08      	bge.n	8013090 <sniprintf+0x20>
 801307e:	238b      	movs	r3, #139	; 0x8b
 8013080:	602b      	str	r3, [r5, #0]
 8013082:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013086:	b01d      	add	sp, #116	; 0x74
 8013088:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801308c:	b002      	add	sp, #8
 801308e:	4770      	bx	lr
 8013090:	f44f 7302 	mov.w	r3, #520	; 0x208
 8013094:	f8ad 3014 	strh.w	r3, [sp, #20]
 8013098:	bf14      	ite	ne
 801309a:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 801309e:	4623      	moveq	r3, r4
 80130a0:	9304      	str	r3, [sp, #16]
 80130a2:	9307      	str	r3, [sp, #28]
 80130a4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80130a8:	9002      	str	r0, [sp, #8]
 80130aa:	9006      	str	r0, [sp, #24]
 80130ac:	f8ad 3016 	strh.w	r3, [sp, #22]
 80130b0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80130b2:	ab21      	add	r3, sp, #132	; 0x84
 80130b4:	a902      	add	r1, sp, #8
 80130b6:	4628      	mov	r0, r5
 80130b8:	9301      	str	r3, [sp, #4]
 80130ba:	f001 fd39 	bl	8014b30 <_svfiprintf_r>
 80130be:	1c43      	adds	r3, r0, #1
 80130c0:	bfbc      	itt	lt
 80130c2:	238b      	movlt	r3, #139	; 0x8b
 80130c4:	602b      	strlt	r3, [r5, #0]
 80130c6:	2c00      	cmp	r4, #0
 80130c8:	d0dd      	beq.n	8013086 <sniprintf+0x16>
 80130ca:	9b02      	ldr	r3, [sp, #8]
 80130cc:	2200      	movs	r2, #0
 80130ce:	701a      	strb	r2, [r3, #0]
 80130d0:	e7d9      	b.n	8013086 <sniprintf+0x16>
 80130d2:	bf00      	nop
 80130d4:	200001e0 	.word	0x200001e0

080130d8 <siprintf>:
 80130d8:	b40e      	push	{r1, r2, r3}
 80130da:	b500      	push	{lr}
 80130dc:	b09c      	sub	sp, #112	; 0x70
 80130de:	ab1d      	add	r3, sp, #116	; 0x74
 80130e0:	9002      	str	r0, [sp, #8]
 80130e2:	9006      	str	r0, [sp, #24]
 80130e4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80130e8:	4809      	ldr	r0, [pc, #36]	; (8013110 <siprintf+0x38>)
 80130ea:	9107      	str	r1, [sp, #28]
 80130ec:	9104      	str	r1, [sp, #16]
 80130ee:	4909      	ldr	r1, [pc, #36]	; (8013114 <siprintf+0x3c>)
 80130f0:	f853 2b04 	ldr.w	r2, [r3], #4
 80130f4:	9105      	str	r1, [sp, #20]
 80130f6:	6800      	ldr	r0, [r0, #0]
 80130f8:	9301      	str	r3, [sp, #4]
 80130fa:	a902      	add	r1, sp, #8
 80130fc:	f001 fd18 	bl	8014b30 <_svfiprintf_r>
 8013100:	9b02      	ldr	r3, [sp, #8]
 8013102:	2200      	movs	r2, #0
 8013104:	701a      	strb	r2, [r3, #0]
 8013106:	b01c      	add	sp, #112	; 0x70
 8013108:	f85d eb04 	ldr.w	lr, [sp], #4
 801310c:	b003      	add	sp, #12
 801310e:	4770      	bx	lr
 8013110:	200001e0 	.word	0x200001e0
 8013114:	ffff0208 	.word	0xffff0208

08013118 <__sread>:
 8013118:	b510      	push	{r4, lr}
 801311a:	460c      	mov	r4, r1
 801311c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013120:	f000 f956 	bl	80133d0 <_read_r>
 8013124:	2800      	cmp	r0, #0
 8013126:	bfab      	itete	ge
 8013128:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801312a:	89a3      	ldrhlt	r3, [r4, #12]
 801312c:	181b      	addge	r3, r3, r0
 801312e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8013132:	bfac      	ite	ge
 8013134:	6563      	strge	r3, [r4, #84]	; 0x54
 8013136:	81a3      	strhlt	r3, [r4, #12]
 8013138:	bd10      	pop	{r4, pc}

0801313a <__swrite>:
 801313a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801313e:	461f      	mov	r7, r3
 8013140:	898b      	ldrh	r3, [r1, #12]
 8013142:	05db      	lsls	r3, r3, #23
 8013144:	4605      	mov	r5, r0
 8013146:	460c      	mov	r4, r1
 8013148:	4616      	mov	r6, r2
 801314a:	d505      	bpl.n	8013158 <__swrite+0x1e>
 801314c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013150:	2302      	movs	r3, #2
 8013152:	2200      	movs	r2, #0
 8013154:	f000 f92a 	bl	80133ac <_lseek_r>
 8013158:	89a3      	ldrh	r3, [r4, #12]
 801315a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801315e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8013162:	81a3      	strh	r3, [r4, #12]
 8013164:	4632      	mov	r2, r6
 8013166:	463b      	mov	r3, r7
 8013168:	4628      	mov	r0, r5
 801316a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801316e:	f000 b941 	b.w	80133f4 <_write_r>

08013172 <__sseek>:
 8013172:	b510      	push	{r4, lr}
 8013174:	460c      	mov	r4, r1
 8013176:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801317a:	f000 f917 	bl	80133ac <_lseek_r>
 801317e:	1c43      	adds	r3, r0, #1
 8013180:	89a3      	ldrh	r3, [r4, #12]
 8013182:	bf15      	itete	ne
 8013184:	6560      	strne	r0, [r4, #84]	; 0x54
 8013186:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801318a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801318e:	81a3      	strheq	r3, [r4, #12]
 8013190:	bf18      	it	ne
 8013192:	81a3      	strhne	r3, [r4, #12]
 8013194:	bd10      	pop	{r4, pc}

08013196 <__sclose>:
 8013196:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801319a:	f000 b8a1 	b.w	80132e0 <_close_r>

0801319e <__swbuf_r>:
 801319e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80131a0:	460e      	mov	r6, r1
 80131a2:	4614      	mov	r4, r2
 80131a4:	4605      	mov	r5, r0
 80131a6:	b118      	cbz	r0, 80131b0 <__swbuf_r+0x12>
 80131a8:	6a03      	ldr	r3, [r0, #32]
 80131aa:	b90b      	cbnz	r3, 80131b0 <__swbuf_r+0x12>
 80131ac:	f7ff febc 	bl	8012f28 <__sinit>
 80131b0:	69a3      	ldr	r3, [r4, #24]
 80131b2:	60a3      	str	r3, [r4, #8]
 80131b4:	89a3      	ldrh	r3, [r4, #12]
 80131b6:	071a      	lsls	r2, r3, #28
 80131b8:	d525      	bpl.n	8013206 <__swbuf_r+0x68>
 80131ba:	6923      	ldr	r3, [r4, #16]
 80131bc:	b31b      	cbz	r3, 8013206 <__swbuf_r+0x68>
 80131be:	6823      	ldr	r3, [r4, #0]
 80131c0:	6922      	ldr	r2, [r4, #16]
 80131c2:	1a98      	subs	r0, r3, r2
 80131c4:	6963      	ldr	r3, [r4, #20]
 80131c6:	b2f6      	uxtb	r6, r6
 80131c8:	4283      	cmp	r3, r0
 80131ca:	4637      	mov	r7, r6
 80131cc:	dc04      	bgt.n	80131d8 <__swbuf_r+0x3a>
 80131ce:	4621      	mov	r1, r4
 80131d0:	4628      	mov	r0, r5
 80131d2:	f001 ff75 	bl	80150c0 <_fflush_r>
 80131d6:	b9e0      	cbnz	r0, 8013212 <__swbuf_r+0x74>
 80131d8:	68a3      	ldr	r3, [r4, #8]
 80131da:	3b01      	subs	r3, #1
 80131dc:	60a3      	str	r3, [r4, #8]
 80131de:	6823      	ldr	r3, [r4, #0]
 80131e0:	1c5a      	adds	r2, r3, #1
 80131e2:	6022      	str	r2, [r4, #0]
 80131e4:	701e      	strb	r6, [r3, #0]
 80131e6:	6962      	ldr	r2, [r4, #20]
 80131e8:	1c43      	adds	r3, r0, #1
 80131ea:	429a      	cmp	r2, r3
 80131ec:	d004      	beq.n	80131f8 <__swbuf_r+0x5a>
 80131ee:	89a3      	ldrh	r3, [r4, #12]
 80131f0:	07db      	lsls	r3, r3, #31
 80131f2:	d506      	bpl.n	8013202 <__swbuf_r+0x64>
 80131f4:	2e0a      	cmp	r6, #10
 80131f6:	d104      	bne.n	8013202 <__swbuf_r+0x64>
 80131f8:	4621      	mov	r1, r4
 80131fa:	4628      	mov	r0, r5
 80131fc:	f001 ff60 	bl	80150c0 <_fflush_r>
 8013200:	b938      	cbnz	r0, 8013212 <__swbuf_r+0x74>
 8013202:	4638      	mov	r0, r7
 8013204:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013206:	4621      	mov	r1, r4
 8013208:	4628      	mov	r0, r5
 801320a:	f000 f805 	bl	8013218 <__swsetup_r>
 801320e:	2800      	cmp	r0, #0
 8013210:	d0d5      	beq.n	80131be <__swbuf_r+0x20>
 8013212:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8013216:	e7f4      	b.n	8013202 <__swbuf_r+0x64>

08013218 <__swsetup_r>:
 8013218:	b538      	push	{r3, r4, r5, lr}
 801321a:	4b2a      	ldr	r3, [pc, #168]	; (80132c4 <__swsetup_r+0xac>)
 801321c:	4605      	mov	r5, r0
 801321e:	6818      	ldr	r0, [r3, #0]
 8013220:	460c      	mov	r4, r1
 8013222:	b118      	cbz	r0, 801322c <__swsetup_r+0x14>
 8013224:	6a03      	ldr	r3, [r0, #32]
 8013226:	b90b      	cbnz	r3, 801322c <__swsetup_r+0x14>
 8013228:	f7ff fe7e 	bl	8012f28 <__sinit>
 801322c:	89a3      	ldrh	r3, [r4, #12]
 801322e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8013232:	0718      	lsls	r0, r3, #28
 8013234:	d422      	bmi.n	801327c <__swsetup_r+0x64>
 8013236:	06d9      	lsls	r1, r3, #27
 8013238:	d407      	bmi.n	801324a <__swsetup_r+0x32>
 801323a:	2309      	movs	r3, #9
 801323c:	602b      	str	r3, [r5, #0]
 801323e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8013242:	81a3      	strh	r3, [r4, #12]
 8013244:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013248:	e034      	b.n	80132b4 <__swsetup_r+0x9c>
 801324a:	0758      	lsls	r0, r3, #29
 801324c:	d512      	bpl.n	8013274 <__swsetup_r+0x5c>
 801324e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013250:	b141      	cbz	r1, 8013264 <__swsetup_r+0x4c>
 8013252:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013256:	4299      	cmp	r1, r3
 8013258:	d002      	beq.n	8013260 <__swsetup_r+0x48>
 801325a:	4628      	mov	r0, r5
 801325c:	f000 ff92 	bl	8014184 <_free_r>
 8013260:	2300      	movs	r3, #0
 8013262:	6363      	str	r3, [r4, #52]	; 0x34
 8013264:	89a3      	ldrh	r3, [r4, #12]
 8013266:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801326a:	81a3      	strh	r3, [r4, #12]
 801326c:	2300      	movs	r3, #0
 801326e:	6063      	str	r3, [r4, #4]
 8013270:	6923      	ldr	r3, [r4, #16]
 8013272:	6023      	str	r3, [r4, #0]
 8013274:	89a3      	ldrh	r3, [r4, #12]
 8013276:	f043 0308 	orr.w	r3, r3, #8
 801327a:	81a3      	strh	r3, [r4, #12]
 801327c:	6923      	ldr	r3, [r4, #16]
 801327e:	b94b      	cbnz	r3, 8013294 <__swsetup_r+0x7c>
 8013280:	89a3      	ldrh	r3, [r4, #12]
 8013282:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8013286:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801328a:	d003      	beq.n	8013294 <__swsetup_r+0x7c>
 801328c:	4621      	mov	r1, r4
 801328e:	4628      	mov	r0, r5
 8013290:	f001 ff64 	bl	801515c <__smakebuf_r>
 8013294:	89a0      	ldrh	r0, [r4, #12]
 8013296:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801329a:	f010 0301 	ands.w	r3, r0, #1
 801329e:	d00a      	beq.n	80132b6 <__swsetup_r+0x9e>
 80132a0:	2300      	movs	r3, #0
 80132a2:	60a3      	str	r3, [r4, #8]
 80132a4:	6963      	ldr	r3, [r4, #20]
 80132a6:	425b      	negs	r3, r3
 80132a8:	61a3      	str	r3, [r4, #24]
 80132aa:	6923      	ldr	r3, [r4, #16]
 80132ac:	b943      	cbnz	r3, 80132c0 <__swsetup_r+0xa8>
 80132ae:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80132b2:	d1c4      	bne.n	801323e <__swsetup_r+0x26>
 80132b4:	bd38      	pop	{r3, r4, r5, pc}
 80132b6:	0781      	lsls	r1, r0, #30
 80132b8:	bf58      	it	pl
 80132ba:	6963      	ldrpl	r3, [r4, #20]
 80132bc:	60a3      	str	r3, [r4, #8]
 80132be:	e7f4      	b.n	80132aa <__swsetup_r+0x92>
 80132c0:	2000      	movs	r0, #0
 80132c2:	e7f7      	b.n	80132b4 <__swsetup_r+0x9c>
 80132c4:	200001e0 	.word	0x200001e0

080132c8 <memset>:
 80132c8:	4402      	add	r2, r0
 80132ca:	4603      	mov	r3, r0
 80132cc:	4293      	cmp	r3, r2
 80132ce:	d100      	bne.n	80132d2 <memset+0xa>
 80132d0:	4770      	bx	lr
 80132d2:	f803 1b01 	strb.w	r1, [r3], #1
 80132d6:	e7f9      	b.n	80132cc <memset+0x4>

080132d8 <_localeconv_r>:
 80132d8:	4800      	ldr	r0, [pc, #0]	; (80132dc <_localeconv_r+0x4>)
 80132da:	4770      	bx	lr
 80132dc:	200002d4 	.word	0x200002d4

080132e0 <_close_r>:
 80132e0:	b538      	push	{r3, r4, r5, lr}
 80132e2:	4d06      	ldr	r5, [pc, #24]	; (80132fc <_close_r+0x1c>)
 80132e4:	2300      	movs	r3, #0
 80132e6:	4604      	mov	r4, r0
 80132e8:	4608      	mov	r0, r1
 80132ea:	602b      	str	r3, [r5, #0]
 80132ec:	f7ee fed7 	bl	800209e <_close>
 80132f0:	1c43      	adds	r3, r0, #1
 80132f2:	d102      	bne.n	80132fa <_close_r+0x1a>
 80132f4:	682b      	ldr	r3, [r5, #0]
 80132f6:	b103      	cbz	r3, 80132fa <_close_r+0x1a>
 80132f8:	6023      	str	r3, [r4, #0]
 80132fa:	bd38      	pop	{r3, r4, r5, pc}
 80132fc:	200067e8 	.word	0x200067e8

08013300 <_reclaim_reent>:
 8013300:	4b29      	ldr	r3, [pc, #164]	; (80133a8 <_reclaim_reent+0xa8>)
 8013302:	681b      	ldr	r3, [r3, #0]
 8013304:	4283      	cmp	r3, r0
 8013306:	b570      	push	{r4, r5, r6, lr}
 8013308:	4604      	mov	r4, r0
 801330a:	d04b      	beq.n	80133a4 <_reclaim_reent+0xa4>
 801330c:	69c3      	ldr	r3, [r0, #28]
 801330e:	b143      	cbz	r3, 8013322 <_reclaim_reent+0x22>
 8013310:	68db      	ldr	r3, [r3, #12]
 8013312:	2b00      	cmp	r3, #0
 8013314:	d144      	bne.n	80133a0 <_reclaim_reent+0xa0>
 8013316:	69e3      	ldr	r3, [r4, #28]
 8013318:	6819      	ldr	r1, [r3, #0]
 801331a:	b111      	cbz	r1, 8013322 <_reclaim_reent+0x22>
 801331c:	4620      	mov	r0, r4
 801331e:	f000 ff31 	bl	8014184 <_free_r>
 8013322:	6961      	ldr	r1, [r4, #20]
 8013324:	b111      	cbz	r1, 801332c <_reclaim_reent+0x2c>
 8013326:	4620      	mov	r0, r4
 8013328:	f000 ff2c 	bl	8014184 <_free_r>
 801332c:	69e1      	ldr	r1, [r4, #28]
 801332e:	b111      	cbz	r1, 8013336 <_reclaim_reent+0x36>
 8013330:	4620      	mov	r0, r4
 8013332:	f000 ff27 	bl	8014184 <_free_r>
 8013336:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8013338:	b111      	cbz	r1, 8013340 <_reclaim_reent+0x40>
 801333a:	4620      	mov	r0, r4
 801333c:	f000 ff22 	bl	8014184 <_free_r>
 8013340:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013342:	b111      	cbz	r1, 801334a <_reclaim_reent+0x4a>
 8013344:	4620      	mov	r0, r4
 8013346:	f000 ff1d 	bl	8014184 <_free_r>
 801334a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801334c:	b111      	cbz	r1, 8013354 <_reclaim_reent+0x54>
 801334e:	4620      	mov	r0, r4
 8013350:	f000 ff18 	bl	8014184 <_free_r>
 8013354:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8013356:	b111      	cbz	r1, 801335e <_reclaim_reent+0x5e>
 8013358:	4620      	mov	r0, r4
 801335a:	f000 ff13 	bl	8014184 <_free_r>
 801335e:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8013360:	b111      	cbz	r1, 8013368 <_reclaim_reent+0x68>
 8013362:	4620      	mov	r0, r4
 8013364:	f000 ff0e 	bl	8014184 <_free_r>
 8013368:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 801336a:	b111      	cbz	r1, 8013372 <_reclaim_reent+0x72>
 801336c:	4620      	mov	r0, r4
 801336e:	f000 ff09 	bl	8014184 <_free_r>
 8013372:	6a23      	ldr	r3, [r4, #32]
 8013374:	b1b3      	cbz	r3, 80133a4 <_reclaim_reent+0xa4>
 8013376:	4620      	mov	r0, r4
 8013378:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801337c:	4718      	bx	r3
 801337e:	5949      	ldr	r1, [r1, r5]
 8013380:	b941      	cbnz	r1, 8013394 <_reclaim_reent+0x94>
 8013382:	3504      	adds	r5, #4
 8013384:	69e3      	ldr	r3, [r4, #28]
 8013386:	2d80      	cmp	r5, #128	; 0x80
 8013388:	68d9      	ldr	r1, [r3, #12]
 801338a:	d1f8      	bne.n	801337e <_reclaim_reent+0x7e>
 801338c:	4620      	mov	r0, r4
 801338e:	f000 fef9 	bl	8014184 <_free_r>
 8013392:	e7c0      	b.n	8013316 <_reclaim_reent+0x16>
 8013394:	680e      	ldr	r6, [r1, #0]
 8013396:	4620      	mov	r0, r4
 8013398:	f000 fef4 	bl	8014184 <_free_r>
 801339c:	4631      	mov	r1, r6
 801339e:	e7ef      	b.n	8013380 <_reclaim_reent+0x80>
 80133a0:	2500      	movs	r5, #0
 80133a2:	e7ef      	b.n	8013384 <_reclaim_reent+0x84>
 80133a4:	bd70      	pop	{r4, r5, r6, pc}
 80133a6:	bf00      	nop
 80133a8:	200001e0 	.word	0x200001e0

080133ac <_lseek_r>:
 80133ac:	b538      	push	{r3, r4, r5, lr}
 80133ae:	4d07      	ldr	r5, [pc, #28]	; (80133cc <_lseek_r+0x20>)
 80133b0:	4604      	mov	r4, r0
 80133b2:	4608      	mov	r0, r1
 80133b4:	4611      	mov	r1, r2
 80133b6:	2200      	movs	r2, #0
 80133b8:	602a      	str	r2, [r5, #0]
 80133ba:	461a      	mov	r2, r3
 80133bc:	f7ee fe96 	bl	80020ec <_lseek>
 80133c0:	1c43      	adds	r3, r0, #1
 80133c2:	d102      	bne.n	80133ca <_lseek_r+0x1e>
 80133c4:	682b      	ldr	r3, [r5, #0]
 80133c6:	b103      	cbz	r3, 80133ca <_lseek_r+0x1e>
 80133c8:	6023      	str	r3, [r4, #0]
 80133ca:	bd38      	pop	{r3, r4, r5, pc}
 80133cc:	200067e8 	.word	0x200067e8

080133d0 <_read_r>:
 80133d0:	b538      	push	{r3, r4, r5, lr}
 80133d2:	4d07      	ldr	r5, [pc, #28]	; (80133f0 <_read_r+0x20>)
 80133d4:	4604      	mov	r4, r0
 80133d6:	4608      	mov	r0, r1
 80133d8:	4611      	mov	r1, r2
 80133da:	2200      	movs	r2, #0
 80133dc:	602a      	str	r2, [r5, #0]
 80133de:	461a      	mov	r2, r3
 80133e0:	f7ee fe24 	bl	800202c <_read>
 80133e4:	1c43      	adds	r3, r0, #1
 80133e6:	d102      	bne.n	80133ee <_read_r+0x1e>
 80133e8:	682b      	ldr	r3, [r5, #0]
 80133ea:	b103      	cbz	r3, 80133ee <_read_r+0x1e>
 80133ec:	6023      	str	r3, [r4, #0]
 80133ee:	bd38      	pop	{r3, r4, r5, pc}
 80133f0:	200067e8 	.word	0x200067e8

080133f4 <_write_r>:
 80133f4:	b538      	push	{r3, r4, r5, lr}
 80133f6:	4d07      	ldr	r5, [pc, #28]	; (8013414 <_write_r+0x20>)
 80133f8:	4604      	mov	r4, r0
 80133fa:	4608      	mov	r0, r1
 80133fc:	4611      	mov	r1, r2
 80133fe:	2200      	movs	r2, #0
 8013400:	602a      	str	r2, [r5, #0]
 8013402:	461a      	mov	r2, r3
 8013404:	f7ee fe2f 	bl	8002066 <_write>
 8013408:	1c43      	adds	r3, r0, #1
 801340a:	d102      	bne.n	8013412 <_write_r+0x1e>
 801340c:	682b      	ldr	r3, [r5, #0]
 801340e:	b103      	cbz	r3, 8013412 <_write_r+0x1e>
 8013410:	6023      	str	r3, [r4, #0]
 8013412:	bd38      	pop	{r3, r4, r5, pc}
 8013414:	200067e8 	.word	0x200067e8

08013418 <__errno>:
 8013418:	4b01      	ldr	r3, [pc, #4]	; (8013420 <__errno+0x8>)
 801341a:	6818      	ldr	r0, [r3, #0]
 801341c:	4770      	bx	lr
 801341e:	bf00      	nop
 8013420:	200001e0 	.word	0x200001e0

08013424 <__libc_init_array>:
 8013424:	b570      	push	{r4, r5, r6, lr}
 8013426:	4d0d      	ldr	r5, [pc, #52]	; (801345c <__libc_init_array+0x38>)
 8013428:	4c0d      	ldr	r4, [pc, #52]	; (8013460 <__libc_init_array+0x3c>)
 801342a:	1b64      	subs	r4, r4, r5
 801342c:	10a4      	asrs	r4, r4, #2
 801342e:	2600      	movs	r6, #0
 8013430:	42a6      	cmp	r6, r4
 8013432:	d109      	bne.n	8013448 <__libc_init_array+0x24>
 8013434:	4d0b      	ldr	r5, [pc, #44]	; (8013464 <__libc_init_array+0x40>)
 8013436:	4c0c      	ldr	r4, [pc, #48]	; (8013468 <__libc_init_array+0x44>)
 8013438:	f002 f800 	bl	801543c <_init>
 801343c:	1b64      	subs	r4, r4, r5
 801343e:	10a4      	asrs	r4, r4, #2
 8013440:	2600      	movs	r6, #0
 8013442:	42a6      	cmp	r6, r4
 8013444:	d105      	bne.n	8013452 <__libc_init_array+0x2e>
 8013446:	bd70      	pop	{r4, r5, r6, pc}
 8013448:	f855 3b04 	ldr.w	r3, [r5], #4
 801344c:	4798      	blx	r3
 801344e:	3601      	adds	r6, #1
 8013450:	e7ee      	b.n	8013430 <__libc_init_array+0xc>
 8013452:	f855 3b04 	ldr.w	r3, [r5], #4
 8013456:	4798      	blx	r3
 8013458:	3601      	adds	r6, #1
 801345a:	e7f2      	b.n	8013442 <__libc_init_array+0x1e>
 801345c:	08015d14 	.word	0x08015d14
 8013460:	08015d14 	.word	0x08015d14
 8013464:	08015d14 	.word	0x08015d14
 8013468:	08015d18 	.word	0x08015d18

0801346c <__retarget_lock_acquire_recursive>:
 801346c:	4770      	bx	lr

0801346e <__retarget_lock_release_recursive>:
 801346e:	4770      	bx	lr

08013470 <memcpy>:
 8013470:	440a      	add	r2, r1
 8013472:	4291      	cmp	r1, r2
 8013474:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8013478:	d100      	bne.n	801347c <memcpy+0xc>
 801347a:	4770      	bx	lr
 801347c:	b510      	push	{r4, lr}
 801347e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013482:	f803 4f01 	strb.w	r4, [r3, #1]!
 8013486:	4291      	cmp	r1, r2
 8013488:	d1f9      	bne.n	801347e <memcpy+0xe>
 801348a:	bd10      	pop	{r4, pc}

0801348c <quorem>:
 801348c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013490:	6903      	ldr	r3, [r0, #16]
 8013492:	690c      	ldr	r4, [r1, #16]
 8013494:	42a3      	cmp	r3, r4
 8013496:	4607      	mov	r7, r0
 8013498:	db7e      	blt.n	8013598 <quorem+0x10c>
 801349a:	3c01      	subs	r4, #1
 801349c:	f101 0814 	add.w	r8, r1, #20
 80134a0:	f100 0514 	add.w	r5, r0, #20
 80134a4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80134a8:	9301      	str	r3, [sp, #4]
 80134aa:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80134ae:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80134b2:	3301      	adds	r3, #1
 80134b4:	429a      	cmp	r2, r3
 80134b6:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80134ba:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80134be:	fbb2 f6f3 	udiv	r6, r2, r3
 80134c2:	d331      	bcc.n	8013528 <quorem+0x9c>
 80134c4:	f04f 0e00 	mov.w	lr, #0
 80134c8:	4640      	mov	r0, r8
 80134ca:	46ac      	mov	ip, r5
 80134cc:	46f2      	mov	sl, lr
 80134ce:	f850 2b04 	ldr.w	r2, [r0], #4
 80134d2:	b293      	uxth	r3, r2
 80134d4:	fb06 e303 	mla	r3, r6, r3, lr
 80134d8:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80134dc:	0c1a      	lsrs	r2, r3, #16
 80134de:	b29b      	uxth	r3, r3
 80134e0:	ebaa 0303 	sub.w	r3, sl, r3
 80134e4:	f8dc a000 	ldr.w	sl, [ip]
 80134e8:	fa13 f38a 	uxtah	r3, r3, sl
 80134ec:	fb06 220e 	mla	r2, r6, lr, r2
 80134f0:	9300      	str	r3, [sp, #0]
 80134f2:	9b00      	ldr	r3, [sp, #0]
 80134f4:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80134f8:	b292      	uxth	r2, r2
 80134fa:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80134fe:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8013502:	f8bd 3000 	ldrh.w	r3, [sp]
 8013506:	4581      	cmp	r9, r0
 8013508:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801350c:	f84c 3b04 	str.w	r3, [ip], #4
 8013510:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8013514:	d2db      	bcs.n	80134ce <quorem+0x42>
 8013516:	f855 300b 	ldr.w	r3, [r5, fp]
 801351a:	b92b      	cbnz	r3, 8013528 <quorem+0x9c>
 801351c:	9b01      	ldr	r3, [sp, #4]
 801351e:	3b04      	subs	r3, #4
 8013520:	429d      	cmp	r5, r3
 8013522:	461a      	mov	r2, r3
 8013524:	d32c      	bcc.n	8013580 <quorem+0xf4>
 8013526:	613c      	str	r4, [r7, #16]
 8013528:	4638      	mov	r0, r7
 801352a:	f001 f9a7 	bl	801487c <__mcmp>
 801352e:	2800      	cmp	r0, #0
 8013530:	db22      	blt.n	8013578 <quorem+0xec>
 8013532:	3601      	adds	r6, #1
 8013534:	4629      	mov	r1, r5
 8013536:	2000      	movs	r0, #0
 8013538:	f858 2b04 	ldr.w	r2, [r8], #4
 801353c:	f8d1 c000 	ldr.w	ip, [r1]
 8013540:	b293      	uxth	r3, r2
 8013542:	1ac3      	subs	r3, r0, r3
 8013544:	0c12      	lsrs	r2, r2, #16
 8013546:	fa13 f38c 	uxtah	r3, r3, ip
 801354a:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 801354e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8013552:	b29b      	uxth	r3, r3
 8013554:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8013558:	45c1      	cmp	r9, r8
 801355a:	f841 3b04 	str.w	r3, [r1], #4
 801355e:	ea4f 4022 	mov.w	r0, r2, asr #16
 8013562:	d2e9      	bcs.n	8013538 <quorem+0xac>
 8013564:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8013568:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801356c:	b922      	cbnz	r2, 8013578 <quorem+0xec>
 801356e:	3b04      	subs	r3, #4
 8013570:	429d      	cmp	r5, r3
 8013572:	461a      	mov	r2, r3
 8013574:	d30a      	bcc.n	801358c <quorem+0x100>
 8013576:	613c      	str	r4, [r7, #16]
 8013578:	4630      	mov	r0, r6
 801357a:	b003      	add	sp, #12
 801357c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013580:	6812      	ldr	r2, [r2, #0]
 8013582:	3b04      	subs	r3, #4
 8013584:	2a00      	cmp	r2, #0
 8013586:	d1ce      	bne.n	8013526 <quorem+0x9a>
 8013588:	3c01      	subs	r4, #1
 801358a:	e7c9      	b.n	8013520 <quorem+0x94>
 801358c:	6812      	ldr	r2, [r2, #0]
 801358e:	3b04      	subs	r3, #4
 8013590:	2a00      	cmp	r2, #0
 8013592:	d1f0      	bne.n	8013576 <quorem+0xea>
 8013594:	3c01      	subs	r4, #1
 8013596:	e7eb      	b.n	8013570 <quorem+0xe4>
 8013598:	2000      	movs	r0, #0
 801359a:	e7ee      	b.n	801357a <quorem+0xee>
 801359c:	0000      	movs	r0, r0
	...

080135a0 <_dtoa_r>:
 80135a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80135a4:	ed2d 8b04 	vpush	{d8-d9}
 80135a8:	69c5      	ldr	r5, [r0, #28]
 80135aa:	b093      	sub	sp, #76	; 0x4c
 80135ac:	ed8d 0b02 	vstr	d0, [sp, #8]
 80135b0:	ec57 6b10 	vmov	r6, r7, d0
 80135b4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80135b8:	9107      	str	r1, [sp, #28]
 80135ba:	4604      	mov	r4, r0
 80135bc:	920a      	str	r2, [sp, #40]	; 0x28
 80135be:	930d      	str	r3, [sp, #52]	; 0x34
 80135c0:	b975      	cbnz	r5, 80135e0 <_dtoa_r+0x40>
 80135c2:	2010      	movs	r0, #16
 80135c4:	f000 fe2a 	bl	801421c <malloc>
 80135c8:	4602      	mov	r2, r0
 80135ca:	61e0      	str	r0, [r4, #28]
 80135cc:	b920      	cbnz	r0, 80135d8 <_dtoa_r+0x38>
 80135ce:	4bae      	ldr	r3, [pc, #696]	; (8013888 <_dtoa_r+0x2e8>)
 80135d0:	21ef      	movs	r1, #239	; 0xef
 80135d2:	48ae      	ldr	r0, [pc, #696]	; (801388c <_dtoa_r+0x2ec>)
 80135d4:	f001 fe4a 	bl	801526c <__assert_func>
 80135d8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80135dc:	6005      	str	r5, [r0, #0]
 80135de:	60c5      	str	r5, [r0, #12]
 80135e0:	69e3      	ldr	r3, [r4, #28]
 80135e2:	6819      	ldr	r1, [r3, #0]
 80135e4:	b151      	cbz	r1, 80135fc <_dtoa_r+0x5c>
 80135e6:	685a      	ldr	r2, [r3, #4]
 80135e8:	604a      	str	r2, [r1, #4]
 80135ea:	2301      	movs	r3, #1
 80135ec:	4093      	lsls	r3, r2
 80135ee:	608b      	str	r3, [r1, #8]
 80135f0:	4620      	mov	r0, r4
 80135f2:	f000 ff07 	bl	8014404 <_Bfree>
 80135f6:	69e3      	ldr	r3, [r4, #28]
 80135f8:	2200      	movs	r2, #0
 80135fa:	601a      	str	r2, [r3, #0]
 80135fc:	1e3b      	subs	r3, r7, #0
 80135fe:	bfbb      	ittet	lt
 8013600:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8013604:	9303      	strlt	r3, [sp, #12]
 8013606:	2300      	movge	r3, #0
 8013608:	2201      	movlt	r2, #1
 801360a:	bfac      	ite	ge
 801360c:	f8c8 3000 	strge.w	r3, [r8]
 8013610:	f8c8 2000 	strlt.w	r2, [r8]
 8013614:	4b9e      	ldr	r3, [pc, #632]	; (8013890 <_dtoa_r+0x2f0>)
 8013616:	f8dd 800c 	ldr.w	r8, [sp, #12]
 801361a:	ea33 0308 	bics.w	r3, r3, r8
 801361e:	d11b      	bne.n	8013658 <_dtoa_r+0xb8>
 8013620:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8013622:	f242 730f 	movw	r3, #9999	; 0x270f
 8013626:	6013      	str	r3, [r2, #0]
 8013628:	f3c8 0313 	ubfx	r3, r8, #0, #20
 801362c:	4333      	orrs	r3, r6
 801362e:	f000 8593 	beq.w	8014158 <_dtoa_r+0xbb8>
 8013632:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013634:	b963      	cbnz	r3, 8013650 <_dtoa_r+0xb0>
 8013636:	4b97      	ldr	r3, [pc, #604]	; (8013894 <_dtoa_r+0x2f4>)
 8013638:	e027      	b.n	801368a <_dtoa_r+0xea>
 801363a:	4b97      	ldr	r3, [pc, #604]	; (8013898 <_dtoa_r+0x2f8>)
 801363c:	9300      	str	r3, [sp, #0]
 801363e:	3308      	adds	r3, #8
 8013640:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8013642:	6013      	str	r3, [r2, #0]
 8013644:	9800      	ldr	r0, [sp, #0]
 8013646:	b013      	add	sp, #76	; 0x4c
 8013648:	ecbd 8b04 	vpop	{d8-d9}
 801364c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013650:	4b90      	ldr	r3, [pc, #576]	; (8013894 <_dtoa_r+0x2f4>)
 8013652:	9300      	str	r3, [sp, #0]
 8013654:	3303      	adds	r3, #3
 8013656:	e7f3      	b.n	8013640 <_dtoa_r+0xa0>
 8013658:	ed9d 7b02 	vldr	d7, [sp, #8]
 801365c:	2200      	movs	r2, #0
 801365e:	ec51 0b17 	vmov	r0, r1, d7
 8013662:	eeb0 8a47 	vmov.f32	s16, s14
 8013666:	eef0 8a67 	vmov.f32	s17, s15
 801366a:	2300      	movs	r3, #0
 801366c:	f7ed fa54 	bl	8000b18 <__aeabi_dcmpeq>
 8013670:	4681      	mov	r9, r0
 8013672:	b160      	cbz	r0, 801368e <_dtoa_r+0xee>
 8013674:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8013676:	2301      	movs	r3, #1
 8013678:	6013      	str	r3, [r2, #0]
 801367a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801367c:	2b00      	cmp	r3, #0
 801367e:	f000 8568 	beq.w	8014152 <_dtoa_r+0xbb2>
 8013682:	4b86      	ldr	r3, [pc, #536]	; (801389c <_dtoa_r+0x2fc>)
 8013684:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8013686:	6013      	str	r3, [r2, #0]
 8013688:	3b01      	subs	r3, #1
 801368a:	9300      	str	r3, [sp, #0]
 801368c:	e7da      	b.n	8013644 <_dtoa_r+0xa4>
 801368e:	aa10      	add	r2, sp, #64	; 0x40
 8013690:	a911      	add	r1, sp, #68	; 0x44
 8013692:	4620      	mov	r0, r4
 8013694:	eeb0 0a48 	vmov.f32	s0, s16
 8013698:	eef0 0a68 	vmov.f32	s1, s17
 801369c:	f001 f994 	bl	80149c8 <__d2b>
 80136a0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80136a4:	4682      	mov	sl, r0
 80136a6:	2d00      	cmp	r5, #0
 80136a8:	d07f      	beq.n	80137aa <_dtoa_r+0x20a>
 80136aa:	ee18 3a90 	vmov	r3, s17
 80136ae:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80136b2:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80136b6:	ec51 0b18 	vmov	r0, r1, d8
 80136ba:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80136be:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80136c2:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 80136c6:	4619      	mov	r1, r3
 80136c8:	2200      	movs	r2, #0
 80136ca:	4b75      	ldr	r3, [pc, #468]	; (80138a0 <_dtoa_r+0x300>)
 80136cc:	f7ec fe04 	bl	80002d8 <__aeabi_dsub>
 80136d0:	a367      	add	r3, pc, #412	; (adr r3, 8013870 <_dtoa_r+0x2d0>)
 80136d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80136d6:	f7ec ffb7 	bl	8000648 <__aeabi_dmul>
 80136da:	a367      	add	r3, pc, #412	; (adr r3, 8013878 <_dtoa_r+0x2d8>)
 80136dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80136e0:	f7ec fdfc 	bl	80002dc <__adddf3>
 80136e4:	4606      	mov	r6, r0
 80136e6:	4628      	mov	r0, r5
 80136e8:	460f      	mov	r7, r1
 80136ea:	f7ec ff43 	bl	8000574 <__aeabi_i2d>
 80136ee:	a364      	add	r3, pc, #400	; (adr r3, 8013880 <_dtoa_r+0x2e0>)
 80136f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80136f4:	f7ec ffa8 	bl	8000648 <__aeabi_dmul>
 80136f8:	4602      	mov	r2, r0
 80136fa:	460b      	mov	r3, r1
 80136fc:	4630      	mov	r0, r6
 80136fe:	4639      	mov	r1, r7
 8013700:	f7ec fdec 	bl	80002dc <__adddf3>
 8013704:	4606      	mov	r6, r0
 8013706:	460f      	mov	r7, r1
 8013708:	f7ed fa4e 	bl	8000ba8 <__aeabi_d2iz>
 801370c:	2200      	movs	r2, #0
 801370e:	4683      	mov	fp, r0
 8013710:	2300      	movs	r3, #0
 8013712:	4630      	mov	r0, r6
 8013714:	4639      	mov	r1, r7
 8013716:	f7ed fa09 	bl	8000b2c <__aeabi_dcmplt>
 801371a:	b148      	cbz	r0, 8013730 <_dtoa_r+0x190>
 801371c:	4658      	mov	r0, fp
 801371e:	f7ec ff29 	bl	8000574 <__aeabi_i2d>
 8013722:	4632      	mov	r2, r6
 8013724:	463b      	mov	r3, r7
 8013726:	f7ed f9f7 	bl	8000b18 <__aeabi_dcmpeq>
 801372a:	b908      	cbnz	r0, 8013730 <_dtoa_r+0x190>
 801372c:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8013730:	f1bb 0f16 	cmp.w	fp, #22
 8013734:	d857      	bhi.n	80137e6 <_dtoa_r+0x246>
 8013736:	4b5b      	ldr	r3, [pc, #364]	; (80138a4 <_dtoa_r+0x304>)
 8013738:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801373c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013740:	ec51 0b18 	vmov	r0, r1, d8
 8013744:	f7ed f9f2 	bl	8000b2c <__aeabi_dcmplt>
 8013748:	2800      	cmp	r0, #0
 801374a:	d04e      	beq.n	80137ea <_dtoa_r+0x24a>
 801374c:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8013750:	2300      	movs	r3, #0
 8013752:	930c      	str	r3, [sp, #48]	; 0x30
 8013754:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8013756:	1b5b      	subs	r3, r3, r5
 8013758:	1e5a      	subs	r2, r3, #1
 801375a:	bf45      	ittet	mi
 801375c:	f1c3 0301 	rsbmi	r3, r3, #1
 8013760:	9305      	strmi	r3, [sp, #20]
 8013762:	2300      	movpl	r3, #0
 8013764:	2300      	movmi	r3, #0
 8013766:	9206      	str	r2, [sp, #24]
 8013768:	bf54      	ite	pl
 801376a:	9305      	strpl	r3, [sp, #20]
 801376c:	9306      	strmi	r3, [sp, #24]
 801376e:	f1bb 0f00 	cmp.w	fp, #0
 8013772:	db3c      	blt.n	80137ee <_dtoa_r+0x24e>
 8013774:	9b06      	ldr	r3, [sp, #24]
 8013776:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 801377a:	445b      	add	r3, fp
 801377c:	9306      	str	r3, [sp, #24]
 801377e:	2300      	movs	r3, #0
 8013780:	9308      	str	r3, [sp, #32]
 8013782:	9b07      	ldr	r3, [sp, #28]
 8013784:	2b09      	cmp	r3, #9
 8013786:	d868      	bhi.n	801385a <_dtoa_r+0x2ba>
 8013788:	2b05      	cmp	r3, #5
 801378a:	bfc4      	itt	gt
 801378c:	3b04      	subgt	r3, #4
 801378e:	9307      	strgt	r3, [sp, #28]
 8013790:	9b07      	ldr	r3, [sp, #28]
 8013792:	f1a3 0302 	sub.w	r3, r3, #2
 8013796:	bfcc      	ite	gt
 8013798:	2500      	movgt	r5, #0
 801379a:	2501      	movle	r5, #1
 801379c:	2b03      	cmp	r3, #3
 801379e:	f200 8085 	bhi.w	80138ac <_dtoa_r+0x30c>
 80137a2:	e8df f003 	tbb	[pc, r3]
 80137a6:	3b2e      	.short	0x3b2e
 80137a8:	5839      	.short	0x5839
 80137aa:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80137ae:	441d      	add	r5, r3
 80137b0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80137b4:	2b20      	cmp	r3, #32
 80137b6:	bfc1      	itttt	gt
 80137b8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80137bc:	fa08 f803 	lslgt.w	r8, r8, r3
 80137c0:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 80137c4:	fa26 f303 	lsrgt.w	r3, r6, r3
 80137c8:	bfd6      	itet	le
 80137ca:	f1c3 0320 	rsble	r3, r3, #32
 80137ce:	ea48 0003 	orrgt.w	r0, r8, r3
 80137d2:	fa06 f003 	lslle.w	r0, r6, r3
 80137d6:	f7ec febd 	bl	8000554 <__aeabi_ui2d>
 80137da:	2201      	movs	r2, #1
 80137dc:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 80137e0:	3d01      	subs	r5, #1
 80137e2:	920e      	str	r2, [sp, #56]	; 0x38
 80137e4:	e76f      	b.n	80136c6 <_dtoa_r+0x126>
 80137e6:	2301      	movs	r3, #1
 80137e8:	e7b3      	b.n	8013752 <_dtoa_r+0x1b2>
 80137ea:	900c      	str	r0, [sp, #48]	; 0x30
 80137ec:	e7b2      	b.n	8013754 <_dtoa_r+0x1b4>
 80137ee:	9b05      	ldr	r3, [sp, #20]
 80137f0:	eba3 030b 	sub.w	r3, r3, fp
 80137f4:	9305      	str	r3, [sp, #20]
 80137f6:	f1cb 0300 	rsb	r3, fp, #0
 80137fa:	9308      	str	r3, [sp, #32]
 80137fc:	2300      	movs	r3, #0
 80137fe:	930b      	str	r3, [sp, #44]	; 0x2c
 8013800:	e7bf      	b.n	8013782 <_dtoa_r+0x1e2>
 8013802:	2300      	movs	r3, #0
 8013804:	9309      	str	r3, [sp, #36]	; 0x24
 8013806:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013808:	2b00      	cmp	r3, #0
 801380a:	dc52      	bgt.n	80138b2 <_dtoa_r+0x312>
 801380c:	2301      	movs	r3, #1
 801380e:	9301      	str	r3, [sp, #4]
 8013810:	9304      	str	r3, [sp, #16]
 8013812:	461a      	mov	r2, r3
 8013814:	920a      	str	r2, [sp, #40]	; 0x28
 8013816:	e00b      	b.n	8013830 <_dtoa_r+0x290>
 8013818:	2301      	movs	r3, #1
 801381a:	e7f3      	b.n	8013804 <_dtoa_r+0x264>
 801381c:	2300      	movs	r3, #0
 801381e:	9309      	str	r3, [sp, #36]	; 0x24
 8013820:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013822:	445b      	add	r3, fp
 8013824:	9301      	str	r3, [sp, #4]
 8013826:	3301      	adds	r3, #1
 8013828:	2b01      	cmp	r3, #1
 801382a:	9304      	str	r3, [sp, #16]
 801382c:	bfb8      	it	lt
 801382e:	2301      	movlt	r3, #1
 8013830:	69e0      	ldr	r0, [r4, #28]
 8013832:	2100      	movs	r1, #0
 8013834:	2204      	movs	r2, #4
 8013836:	f102 0614 	add.w	r6, r2, #20
 801383a:	429e      	cmp	r6, r3
 801383c:	d93d      	bls.n	80138ba <_dtoa_r+0x31a>
 801383e:	6041      	str	r1, [r0, #4]
 8013840:	4620      	mov	r0, r4
 8013842:	f000 fd9f 	bl	8014384 <_Balloc>
 8013846:	9000      	str	r0, [sp, #0]
 8013848:	2800      	cmp	r0, #0
 801384a:	d139      	bne.n	80138c0 <_dtoa_r+0x320>
 801384c:	4b16      	ldr	r3, [pc, #88]	; (80138a8 <_dtoa_r+0x308>)
 801384e:	4602      	mov	r2, r0
 8013850:	f240 11af 	movw	r1, #431	; 0x1af
 8013854:	e6bd      	b.n	80135d2 <_dtoa_r+0x32>
 8013856:	2301      	movs	r3, #1
 8013858:	e7e1      	b.n	801381e <_dtoa_r+0x27e>
 801385a:	2501      	movs	r5, #1
 801385c:	2300      	movs	r3, #0
 801385e:	9307      	str	r3, [sp, #28]
 8013860:	9509      	str	r5, [sp, #36]	; 0x24
 8013862:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013866:	9301      	str	r3, [sp, #4]
 8013868:	9304      	str	r3, [sp, #16]
 801386a:	2200      	movs	r2, #0
 801386c:	2312      	movs	r3, #18
 801386e:	e7d1      	b.n	8013814 <_dtoa_r+0x274>
 8013870:	636f4361 	.word	0x636f4361
 8013874:	3fd287a7 	.word	0x3fd287a7
 8013878:	8b60c8b3 	.word	0x8b60c8b3
 801387c:	3fc68a28 	.word	0x3fc68a28
 8013880:	509f79fb 	.word	0x509f79fb
 8013884:	3fd34413 	.word	0x3fd34413
 8013888:	080159dd 	.word	0x080159dd
 801388c:	080159f4 	.word	0x080159f4
 8013890:	7ff00000 	.word	0x7ff00000
 8013894:	080159d9 	.word	0x080159d9
 8013898:	080159d0 	.word	0x080159d0
 801389c:	080159ad 	.word	0x080159ad
 80138a0:	3ff80000 	.word	0x3ff80000
 80138a4:	08015ae0 	.word	0x08015ae0
 80138a8:	08015a4c 	.word	0x08015a4c
 80138ac:	2301      	movs	r3, #1
 80138ae:	9309      	str	r3, [sp, #36]	; 0x24
 80138b0:	e7d7      	b.n	8013862 <_dtoa_r+0x2c2>
 80138b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80138b4:	9301      	str	r3, [sp, #4]
 80138b6:	9304      	str	r3, [sp, #16]
 80138b8:	e7ba      	b.n	8013830 <_dtoa_r+0x290>
 80138ba:	3101      	adds	r1, #1
 80138bc:	0052      	lsls	r2, r2, #1
 80138be:	e7ba      	b.n	8013836 <_dtoa_r+0x296>
 80138c0:	69e3      	ldr	r3, [r4, #28]
 80138c2:	9a00      	ldr	r2, [sp, #0]
 80138c4:	601a      	str	r2, [r3, #0]
 80138c6:	9b04      	ldr	r3, [sp, #16]
 80138c8:	2b0e      	cmp	r3, #14
 80138ca:	f200 80a8 	bhi.w	8013a1e <_dtoa_r+0x47e>
 80138ce:	2d00      	cmp	r5, #0
 80138d0:	f000 80a5 	beq.w	8013a1e <_dtoa_r+0x47e>
 80138d4:	f1bb 0f00 	cmp.w	fp, #0
 80138d8:	dd38      	ble.n	801394c <_dtoa_r+0x3ac>
 80138da:	4bc0      	ldr	r3, [pc, #768]	; (8013bdc <_dtoa_r+0x63c>)
 80138dc:	f00b 020f 	and.w	r2, fp, #15
 80138e0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80138e4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80138e8:	e9d3 6700 	ldrd	r6, r7, [r3]
 80138ec:	ea4f 182b 	mov.w	r8, fp, asr #4
 80138f0:	d019      	beq.n	8013926 <_dtoa_r+0x386>
 80138f2:	4bbb      	ldr	r3, [pc, #748]	; (8013be0 <_dtoa_r+0x640>)
 80138f4:	ec51 0b18 	vmov	r0, r1, d8
 80138f8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80138fc:	f7ec ffce 	bl	800089c <__aeabi_ddiv>
 8013900:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013904:	f008 080f 	and.w	r8, r8, #15
 8013908:	2503      	movs	r5, #3
 801390a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8013be0 <_dtoa_r+0x640>
 801390e:	f1b8 0f00 	cmp.w	r8, #0
 8013912:	d10a      	bne.n	801392a <_dtoa_r+0x38a>
 8013914:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013918:	4632      	mov	r2, r6
 801391a:	463b      	mov	r3, r7
 801391c:	f7ec ffbe 	bl	800089c <__aeabi_ddiv>
 8013920:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013924:	e02b      	b.n	801397e <_dtoa_r+0x3de>
 8013926:	2502      	movs	r5, #2
 8013928:	e7ef      	b.n	801390a <_dtoa_r+0x36a>
 801392a:	f018 0f01 	tst.w	r8, #1
 801392e:	d008      	beq.n	8013942 <_dtoa_r+0x3a2>
 8013930:	4630      	mov	r0, r6
 8013932:	4639      	mov	r1, r7
 8013934:	e9d9 2300 	ldrd	r2, r3, [r9]
 8013938:	f7ec fe86 	bl	8000648 <__aeabi_dmul>
 801393c:	3501      	adds	r5, #1
 801393e:	4606      	mov	r6, r0
 8013940:	460f      	mov	r7, r1
 8013942:	ea4f 0868 	mov.w	r8, r8, asr #1
 8013946:	f109 0908 	add.w	r9, r9, #8
 801394a:	e7e0      	b.n	801390e <_dtoa_r+0x36e>
 801394c:	f000 809f 	beq.w	8013a8e <_dtoa_r+0x4ee>
 8013950:	f1cb 0600 	rsb	r6, fp, #0
 8013954:	4ba1      	ldr	r3, [pc, #644]	; (8013bdc <_dtoa_r+0x63c>)
 8013956:	4fa2      	ldr	r7, [pc, #648]	; (8013be0 <_dtoa_r+0x640>)
 8013958:	f006 020f 	and.w	r2, r6, #15
 801395c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8013960:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013964:	ec51 0b18 	vmov	r0, r1, d8
 8013968:	f7ec fe6e 	bl	8000648 <__aeabi_dmul>
 801396c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013970:	1136      	asrs	r6, r6, #4
 8013972:	2300      	movs	r3, #0
 8013974:	2502      	movs	r5, #2
 8013976:	2e00      	cmp	r6, #0
 8013978:	d17e      	bne.n	8013a78 <_dtoa_r+0x4d8>
 801397a:	2b00      	cmp	r3, #0
 801397c:	d1d0      	bne.n	8013920 <_dtoa_r+0x380>
 801397e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013980:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8013984:	2b00      	cmp	r3, #0
 8013986:	f000 8084 	beq.w	8013a92 <_dtoa_r+0x4f2>
 801398a:	4b96      	ldr	r3, [pc, #600]	; (8013be4 <_dtoa_r+0x644>)
 801398c:	2200      	movs	r2, #0
 801398e:	4640      	mov	r0, r8
 8013990:	4649      	mov	r1, r9
 8013992:	f7ed f8cb 	bl	8000b2c <__aeabi_dcmplt>
 8013996:	2800      	cmp	r0, #0
 8013998:	d07b      	beq.n	8013a92 <_dtoa_r+0x4f2>
 801399a:	9b04      	ldr	r3, [sp, #16]
 801399c:	2b00      	cmp	r3, #0
 801399e:	d078      	beq.n	8013a92 <_dtoa_r+0x4f2>
 80139a0:	9b01      	ldr	r3, [sp, #4]
 80139a2:	2b00      	cmp	r3, #0
 80139a4:	dd39      	ble.n	8013a1a <_dtoa_r+0x47a>
 80139a6:	4b90      	ldr	r3, [pc, #576]	; (8013be8 <_dtoa_r+0x648>)
 80139a8:	2200      	movs	r2, #0
 80139aa:	4640      	mov	r0, r8
 80139ac:	4649      	mov	r1, r9
 80139ae:	f7ec fe4b 	bl	8000648 <__aeabi_dmul>
 80139b2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80139b6:	9e01      	ldr	r6, [sp, #4]
 80139b8:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 80139bc:	3501      	adds	r5, #1
 80139be:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80139c2:	4628      	mov	r0, r5
 80139c4:	f7ec fdd6 	bl	8000574 <__aeabi_i2d>
 80139c8:	4642      	mov	r2, r8
 80139ca:	464b      	mov	r3, r9
 80139cc:	f7ec fe3c 	bl	8000648 <__aeabi_dmul>
 80139d0:	4b86      	ldr	r3, [pc, #536]	; (8013bec <_dtoa_r+0x64c>)
 80139d2:	2200      	movs	r2, #0
 80139d4:	f7ec fc82 	bl	80002dc <__adddf3>
 80139d8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80139dc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80139e0:	9303      	str	r3, [sp, #12]
 80139e2:	2e00      	cmp	r6, #0
 80139e4:	d158      	bne.n	8013a98 <_dtoa_r+0x4f8>
 80139e6:	4b82      	ldr	r3, [pc, #520]	; (8013bf0 <_dtoa_r+0x650>)
 80139e8:	2200      	movs	r2, #0
 80139ea:	4640      	mov	r0, r8
 80139ec:	4649      	mov	r1, r9
 80139ee:	f7ec fc73 	bl	80002d8 <__aeabi_dsub>
 80139f2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80139f6:	4680      	mov	r8, r0
 80139f8:	4689      	mov	r9, r1
 80139fa:	f7ed f8b5 	bl	8000b68 <__aeabi_dcmpgt>
 80139fe:	2800      	cmp	r0, #0
 8013a00:	f040 8296 	bne.w	8013f30 <_dtoa_r+0x990>
 8013a04:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8013a08:	4640      	mov	r0, r8
 8013a0a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8013a0e:	4649      	mov	r1, r9
 8013a10:	f7ed f88c 	bl	8000b2c <__aeabi_dcmplt>
 8013a14:	2800      	cmp	r0, #0
 8013a16:	f040 8289 	bne.w	8013f2c <_dtoa_r+0x98c>
 8013a1a:	ed8d 8b02 	vstr	d8, [sp, #8]
 8013a1e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8013a20:	2b00      	cmp	r3, #0
 8013a22:	f2c0 814e 	blt.w	8013cc2 <_dtoa_r+0x722>
 8013a26:	f1bb 0f0e 	cmp.w	fp, #14
 8013a2a:	f300 814a 	bgt.w	8013cc2 <_dtoa_r+0x722>
 8013a2e:	4b6b      	ldr	r3, [pc, #428]	; (8013bdc <_dtoa_r+0x63c>)
 8013a30:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8013a34:	e9d3 8900 	ldrd	r8, r9, [r3]
 8013a38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013a3a:	2b00      	cmp	r3, #0
 8013a3c:	f280 80dc 	bge.w	8013bf8 <_dtoa_r+0x658>
 8013a40:	9b04      	ldr	r3, [sp, #16]
 8013a42:	2b00      	cmp	r3, #0
 8013a44:	f300 80d8 	bgt.w	8013bf8 <_dtoa_r+0x658>
 8013a48:	f040 826f 	bne.w	8013f2a <_dtoa_r+0x98a>
 8013a4c:	4b68      	ldr	r3, [pc, #416]	; (8013bf0 <_dtoa_r+0x650>)
 8013a4e:	2200      	movs	r2, #0
 8013a50:	4640      	mov	r0, r8
 8013a52:	4649      	mov	r1, r9
 8013a54:	f7ec fdf8 	bl	8000648 <__aeabi_dmul>
 8013a58:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8013a5c:	f7ed f87a 	bl	8000b54 <__aeabi_dcmpge>
 8013a60:	9e04      	ldr	r6, [sp, #16]
 8013a62:	4637      	mov	r7, r6
 8013a64:	2800      	cmp	r0, #0
 8013a66:	f040 8245 	bne.w	8013ef4 <_dtoa_r+0x954>
 8013a6a:	9d00      	ldr	r5, [sp, #0]
 8013a6c:	2331      	movs	r3, #49	; 0x31
 8013a6e:	f805 3b01 	strb.w	r3, [r5], #1
 8013a72:	f10b 0b01 	add.w	fp, fp, #1
 8013a76:	e241      	b.n	8013efc <_dtoa_r+0x95c>
 8013a78:	07f2      	lsls	r2, r6, #31
 8013a7a:	d505      	bpl.n	8013a88 <_dtoa_r+0x4e8>
 8013a7c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8013a80:	f7ec fde2 	bl	8000648 <__aeabi_dmul>
 8013a84:	3501      	adds	r5, #1
 8013a86:	2301      	movs	r3, #1
 8013a88:	1076      	asrs	r6, r6, #1
 8013a8a:	3708      	adds	r7, #8
 8013a8c:	e773      	b.n	8013976 <_dtoa_r+0x3d6>
 8013a8e:	2502      	movs	r5, #2
 8013a90:	e775      	b.n	801397e <_dtoa_r+0x3de>
 8013a92:	9e04      	ldr	r6, [sp, #16]
 8013a94:	465f      	mov	r7, fp
 8013a96:	e792      	b.n	80139be <_dtoa_r+0x41e>
 8013a98:	9900      	ldr	r1, [sp, #0]
 8013a9a:	4b50      	ldr	r3, [pc, #320]	; (8013bdc <_dtoa_r+0x63c>)
 8013a9c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8013aa0:	4431      	add	r1, r6
 8013aa2:	9102      	str	r1, [sp, #8]
 8013aa4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8013aa6:	eeb0 9a47 	vmov.f32	s18, s14
 8013aaa:	eef0 9a67 	vmov.f32	s19, s15
 8013aae:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8013ab2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8013ab6:	2900      	cmp	r1, #0
 8013ab8:	d044      	beq.n	8013b44 <_dtoa_r+0x5a4>
 8013aba:	494e      	ldr	r1, [pc, #312]	; (8013bf4 <_dtoa_r+0x654>)
 8013abc:	2000      	movs	r0, #0
 8013abe:	f7ec feed 	bl	800089c <__aeabi_ddiv>
 8013ac2:	ec53 2b19 	vmov	r2, r3, d9
 8013ac6:	f7ec fc07 	bl	80002d8 <__aeabi_dsub>
 8013aca:	9d00      	ldr	r5, [sp, #0]
 8013acc:	ec41 0b19 	vmov	d9, r0, r1
 8013ad0:	4649      	mov	r1, r9
 8013ad2:	4640      	mov	r0, r8
 8013ad4:	f7ed f868 	bl	8000ba8 <__aeabi_d2iz>
 8013ad8:	4606      	mov	r6, r0
 8013ada:	f7ec fd4b 	bl	8000574 <__aeabi_i2d>
 8013ade:	4602      	mov	r2, r0
 8013ae0:	460b      	mov	r3, r1
 8013ae2:	4640      	mov	r0, r8
 8013ae4:	4649      	mov	r1, r9
 8013ae6:	f7ec fbf7 	bl	80002d8 <__aeabi_dsub>
 8013aea:	3630      	adds	r6, #48	; 0x30
 8013aec:	f805 6b01 	strb.w	r6, [r5], #1
 8013af0:	ec53 2b19 	vmov	r2, r3, d9
 8013af4:	4680      	mov	r8, r0
 8013af6:	4689      	mov	r9, r1
 8013af8:	f7ed f818 	bl	8000b2c <__aeabi_dcmplt>
 8013afc:	2800      	cmp	r0, #0
 8013afe:	d164      	bne.n	8013bca <_dtoa_r+0x62a>
 8013b00:	4642      	mov	r2, r8
 8013b02:	464b      	mov	r3, r9
 8013b04:	4937      	ldr	r1, [pc, #220]	; (8013be4 <_dtoa_r+0x644>)
 8013b06:	2000      	movs	r0, #0
 8013b08:	f7ec fbe6 	bl	80002d8 <__aeabi_dsub>
 8013b0c:	ec53 2b19 	vmov	r2, r3, d9
 8013b10:	f7ed f80c 	bl	8000b2c <__aeabi_dcmplt>
 8013b14:	2800      	cmp	r0, #0
 8013b16:	f040 80b6 	bne.w	8013c86 <_dtoa_r+0x6e6>
 8013b1a:	9b02      	ldr	r3, [sp, #8]
 8013b1c:	429d      	cmp	r5, r3
 8013b1e:	f43f af7c 	beq.w	8013a1a <_dtoa_r+0x47a>
 8013b22:	4b31      	ldr	r3, [pc, #196]	; (8013be8 <_dtoa_r+0x648>)
 8013b24:	ec51 0b19 	vmov	r0, r1, d9
 8013b28:	2200      	movs	r2, #0
 8013b2a:	f7ec fd8d 	bl	8000648 <__aeabi_dmul>
 8013b2e:	4b2e      	ldr	r3, [pc, #184]	; (8013be8 <_dtoa_r+0x648>)
 8013b30:	ec41 0b19 	vmov	d9, r0, r1
 8013b34:	2200      	movs	r2, #0
 8013b36:	4640      	mov	r0, r8
 8013b38:	4649      	mov	r1, r9
 8013b3a:	f7ec fd85 	bl	8000648 <__aeabi_dmul>
 8013b3e:	4680      	mov	r8, r0
 8013b40:	4689      	mov	r9, r1
 8013b42:	e7c5      	b.n	8013ad0 <_dtoa_r+0x530>
 8013b44:	ec51 0b17 	vmov	r0, r1, d7
 8013b48:	f7ec fd7e 	bl	8000648 <__aeabi_dmul>
 8013b4c:	9b02      	ldr	r3, [sp, #8]
 8013b4e:	9d00      	ldr	r5, [sp, #0]
 8013b50:	930f      	str	r3, [sp, #60]	; 0x3c
 8013b52:	ec41 0b19 	vmov	d9, r0, r1
 8013b56:	4649      	mov	r1, r9
 8013b58:	4640      	mov	r0, r8
 8013b5a:	f7ed f825 	bl	8000ba8 <__aeabi_d2iz>
 8013b5e:	4606      	mov	r6, r0
 8013b60:	f7ec fd08 	bl	8000574 <__aeabi_i2d>
 8013b64:	3630      	adds	r6, #48	; 0x30
 8013b66:	4602      	mov	r2, r0
 8013b68:	460b      	mov	r3, r1
 8013b6a:	4640      	mov	r0, r8
 8013b6c:	4649      	mov	r1, r9
 8013b6e:	f7ec fbb3 	bl	80002d8 <__aeabi_dsub>
 8013b72:	f805 6b01 	strb.w	r6, [r5], #1
 8013b76:	9b02      	ldr	r3, [sp, #8]
 8013b78:	429d      	cmp	r5, r3
 8013b7a:	4680      	mov	r8, r0
 8013b7c:	4689      	mov	r9, r1
 8013b7e:	f04f 0200 	mov.w	r2, #0
 8013b82:	d124      	bne.n	8013bce <_dtoa_r+0x62e>
 8013b84:	4b1b      	ldr	r3, [pc, #108]	; (8013bf4 <_dtoa_r+0x654>)
 8013b86:	ec51 0b19 	vmov	r0, r1, d9
 8013b8a:	f7ec fba7 	bl	80002dc <__adddf3>
 8013b8e:	4602      	mov	r2, r0
 8013b90:	460b      	mov	r3, r1
 8013b92:	4640      	mov	r0, r8
 8013b94:	4649      	mov	r1, r9
 8013b96:	f7ec ffe7 	bl	8000b68 <__aeabi_dcmpgt>
 8013b9a:	2800      	cmp	r0, #0
 8013b9c:	d173      	bne.n	8013c86 <_dtoa_r+0x6e6>
 8013b9e:	ec53 2b19 	vmov	r2, r3, d9
 8013ba2:	4914      	ldr	r1, [pc, #80]	; (8013bf4 <_dtoa_r+0x654>)
 8013ba4:	2000      	movs	r0, #0
 8013ba6:	f7ec fb97 	bl	80002d8 <__aeabi_dsub>
 8013baa:	4602      	mov	r2, r0
 8013bac:	460b      	mov	r3, r1
 8013bae:	4640      	mov	r0, r8
 8013bb0:	4649      	mov	r1, r9
 8013bb2:	f7ec ffbb 	bl	8000b2c <__aeabi_dcmplt>
 8013bb6:	2800      	cmp	r0, #0
 8013bb8:	f43f af2f 	beq.w	8013a1a <_dtoa_r+0x47a>
 8013bbc:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8013bbe:	1e6b      	subs	r3, r5, #1
 8013bc0:	930f      	str	r3, [sp, #60]	; 0x3c
 8013bc2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8013bc6:	2b30      	cmp	r3, #48	; 0x30
 8013bc8:	d0f8      	beq.n	8013bbc <_dtoa_r+0x61c>
 8013bca:	46bb      	mov	fp, r7
 8013bcc:	e04a      	b.n	8013c64 <_dtoa_r+0x6c4>
 8013bce:	4b06      	ldr	r3, [pc, #24]	; (8013be8 <_dtoa_r+0x648>)
 8013bd0:	f7ec fd3a 	bl	8000648 <__aeabi_dmul>
 8013bd4:	4680      	mov	r8, r0
 8013bd6:	4689      	mov	r9, r1
 8013bd8:	e7bd      	b.n	8013b56 <_dtoa_r+0x5b6>
 8013bda:	bf00      	nop
 8013bdc:	08015ae0 	.word	0x08015ae0
 8013be0:	08015ab8 	.word	0x08015ab8
 8013be4:	3ff00000 	.word	0x3ff00000
 8013be8:	40240000 	.word	0x40240000
 8013bec:	401c0000 	.word	0x401c0000
 8013bf0:	40140000 	.word	0x40140000
 8013bf4:	3fe00000 	.word	0x3fe00000
 8013bf8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8013bfc:	9d00      	ldr	r5, [sp, #0]
 8013bfe:	4642      	mov	r2, r8
 8013c00:	464b      	mov	r3, r9
 8013c02:	4630      	mov	r0, r6
 8013c04:	4639      	mov	r1, r7
 8013c06:	f7ec fe49 	bl	800089c <__aeabi_ddiv>
 8013c0a:	f7ec ffcd 	bl	8000ba8 <__aeabi_d2iz>
 8013c0e:	9001      	str	r0, [sp, #4]
 8013c10:	f7ec fcb0 	bl	8000574 <__aeabi_i2d>
 8013c14:	4642      	mov	r2, r8
 8013c16:	464b      	mov	r3, r9
 8013c18:	f7ec fd16 	bl	8000648 <__aeabi_dmul>
 8013c1c:	4602      	mov	r2, r0
 8013c1e:	460b      	mov	r3, r1
 8013c20:	4630      	mov	r0, r6
 8013c22:	4639      	mov	r1, r7
 8013c24:	f7ec fb58 	bl	80002d8 <__aeabi_dsub>
 8013c28:	9e01      	ldr	r6, [sp, #4]
 8013c2a:	9f04      	ldr	r7, [sp, #16]
 8013c2c:	3630      	adds	r6, #48	; 0x30
 8013c2e:	f805 6b01 	strb.w	r6, [r5], #1
 8013c32:	9e00      	ldr	r6, [sp, #0]
 8013c34:	1bae      	subs	r6, r5, r6
 8013c36:	42b7      	cmp	r7, r6
 8013c38:	4602      	mov	r2, r0
 8013c3a:	460b      	mov	r3, r1
 8013c3c:	d134      	bne.n	8013ca8 <_dtoa_r+0x708>
 8013c3e:	f7ec fb4d 	bl	80002dc <__adddf3>
 8013c42:	4642      	mov	r2, r8
 8013c44:	464b      	mov	r3, r9
 8013c46:	4606      	mov	r6, r0
 8013c48:	460f      	mov	r7, r1
 8013c4a:	f7ec ff8d 	bl	8000b68 <__aeabi_dcmpgt>
 8013c4e:	b9c8      	cbnz	r0, 8013c84 <_dtoa_r+0x6e4>
 8013c50:	4642      	mov	r2, r8
 8013c52:	464b      	mov	r3, r9
 8013c54:	4630      	mov	r0, r6
 8013c56:	4639      	mov	r1, r7
 8013c58:	f7ec ff5e 	bl	8000b18 <__aeabi_dcmpeq>
 8013c5c:	b110      	cbz	r0, 8013c64 <_dtoa_r+0x6c4>
 8013c5e:	9b01      	ldr	r3, [sp, #4]
 8013c60:	07db      	lsls	r3, r3, #31
 8013c62:	d40f      	bmi.n	8013c84 <_dtoa_r+0x6e4>
 8013c64:	4651      	mov	r1, sl
 8013c66:	4620      	mov	r0, r4
 8013c68:	f000 fbcc 	bl	8014404 <_Bfree>
 8013c6c:	2300      	movs	r3, #0
 8013c6e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8013c70:	702b      	strb	r3, [r5, #0]
 8013c72:	f10b 0301 	add.w	r3, fp, #1
 8013c76:	6013      	str	r3, [r2, #0]
 8013c78:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013c7a:	2b00      	cmp	r3, #0
 8013c7c:	f43f ace2 	beq.w	8013644 <_dtoa_r+0xa4>
 8013c80:	601d      	str	r5, [r3, #0]
 8013c82:	e4df      	b.n	8013644 <_dtoa_r+0xa4>
 8013c84:	465f      	mov	r7, fp
 8013c86:	462b      	mov	r3, r5
 8013c88:	461d      	mov	r5, r3
 8013c8a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8013c8e:	2a39      	cmp	r2, #57	; 0x39
 8013c90:	d106      	bne.n	8013ca0 <_dtoa_r+0x700>
 8013c92:	9a00      	ldr	r2, [sp, #0]
 8013c94:	429a      	cmp	r2, r3
 8013c96:	d1f7      	bne.n	8013c88 <_dtoa_r+0x6e8>
 8013c98:	9900      	ldr	r1, [sp, #0]
 8013c9a:	2230      	movs	r2, #48	; 0x30
 8013c9c:	3701      	adds	r7, #1
 8013c9e:	700a      	strb	r2, [r1, #0]
 8013ca0:	781a      	ldrb	r2, [r3, #0]
 8013ca2:	3201      	adds	r2, #1
 8013ca4:	701a      	strb	r2, [r3, #0]
 8013ca6:	e790      	b.n	8013bca <_dtoa_r+0x62a>
 8013ca8:	4ba3      	ldr	r3, [pc, #652]	; (8013f38 <_dtoa_r+0x998>)
 8013caa:	2200      	movs	r2, #0
 8013cac:	f7ec fccc 	bl	8000648 <__aeabi_dmul>
 8013cb0:	2200      	movs	r2, #0
 8013cb2:	2300      	movs	r3, #0
 8013cb4:	4606      	mov	r6, r0
 8013cb6:	460f      	mov	r7, r1
 8013cb8:	f7ec ff2e 	bl	8000b18 <__aeabi_dcmpeq>
 8013cbc:	2800      	cmp	r0, #0
 8013cbe:	d09e      	beq.n	8013bfe <_dtoa_r+0x65e>
 8013cc0:	e7d0      	b.n	8013c64 <_dtoa_r+0x6c4>
 8013cc2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013cc4:	2a00      	cmp	r2, #0
 8013cc6:	f000 80ca 	beq.w	8013e5e <_dtoa_r+0x8be>
 8013cca:	9a07      	ldr	r2, [sp, #28]
 8013ccc:	2a01      	cmp	r2, #1
 8013cce:	f300 80ad 	bgt.w	8013e2c <_dtoa_r+0x88c>
 8013cd2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8013cd4:	2a00      	cmp	r2, #0
 8013cd6:	f000 80a5 	beq.w	8013e24 <_dtoa_r+0x884>
 8013cda:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8013cde:	9e08      	ldr	r6, [sp, #32]
 8013ce0:	9d05      	ldr	r5, [sp, #20]
 8013ce2:	9a05      	ldr	r2, [sp, #20]
 8013ce4:	441a      	add	r2, r3
 8013ce6:	9205      	str	r2, [sp, #20]
 8013ce8:	9a06      	ldr	r2, [sp, #24]
 8013cea:	2101      	movs	r1, #1
 8013cec:	441a      	add	r2, r3
 8013cee:	4620      	mov	r0, r4
 8013cf0:	9206      	str	r2, [sp, #24]
 8013cf2:	f000 fc3d 	bl	8014570 <__i2b>
 8013cf6:	4607      	mov	r7, r0
 8013cf8:	b165      	cbz	r5, 8013d14 <_dtoa_r+0x774>
 8013cfa:	9b06      	ldr	r3, [sp, #24]
 8013cfc:	2b00      	cmp	r3, #0
 8013cfe:	dd09      	ble.n	8013d14 <_dtoa_r+0x774>
 8013d00:	42ab      	cmp	r3, r5
 8013d02:	9a05      	ldr	r2, [sp, #20]
 8013d04:	bfa8      	it	ge
 8013d06:	462b      	movge	r3, r5
 8013d08:	1ad2      	subs	r2, r2, r3
 8013d0a:	9205      	str	r2, [sp, #20]
 8013d0c:	9a06      	ldr	r2, [sp, #24]
 8013d0e:	1aed      	subs	r5, r5, r3
 8013d10:	1ad3      	subs	r3, r2, r3
 8013d12:	9306      	str	r3, [sp, #24]
 8013d14:	9b08      	ldr	r3, [sp, #32]
 8013d16:	b1f3      	cbz	r3, 8013d56 <_dtoa_r+0x7b6>
 8013d18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013d1a:	2b00      	cmp	r3, #0
 8013d1c:	f000 80a3 	beq.w	8013e66 <_dtoa_r+0x8c6>
 8013d20:	2e00      	cmp	r6, #0
 8013d22:	dd10      	ble.n	8013d46 <_dtoa_r+0x7a6>
 8013d24:	4639      	mov	r1, r7
 8013d26:	4632      	mov	r2, r6
 8013d28:	4620      	mov	r0, r4
 8013d2a:	f000 fce1 	bl	80146f0 <__pow5mult>
 8013d2e:	4652      	mov	r2, sl
 8013d30:	4601      	mov	r1, r0
 8013d32:	4607      	mov	r7, r0
 8013d34:	4620      	mov	r0, r4
 8013d36:	f000 fc31 	bl	801459c <__multiply>
 8013d3a:	4651      	mov	r1, sl
 8013d3c:	4680      	mov	r8, r0
 8013d3e:	4620      	mov	r0, r4
 8013d40:	f000 fb60 	bl	8014404 <_Bfree>
 8013d44:	46c2      	mov	sl, r8
 8013d46:	9b08      	ldr	r3, [sp, #32]
 8013d48:	1b9a      	subs	r2, r3, r6
 8013d4a:	d004      	beq.n	8013d56 <_dtoa_r+0x7b6>
 8013d4c:	4651      	mov	r1, sl
 8013d4e:	4620      	mov	r0, r4
 8013d50:	f000 fcce 	bl	80146f0 <__pow5mult>
 8013d54:	4682      	mov	sl, r0
 8013d56:	2101      	movs	r1, #1
 8013d58:	4620      	mov	r0, r4
 8013d5a:	f000 fc09 	bl	8014570 <__i2b>
 8013d5e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013d60:	2b00      	cmp	r3, #0
 8013d62:	4606      	mov	r6, r0
 8013d64:	f340 8081 	ble.w	8013e6a <_dtoa_r+0x8ca>
 8013d68:	461a      	mov	r2, r3
 8013d6a:	4601      	mov	r1, r0
 8013d6c:	4620      	mov	r0, r4
 8013d6e:	f000 fcbf 	bl	80146f0 <__pow5mult>
 8013d72:	9b07      	ldr	r3, [sp, #28]
 8013d74:	2b01      	cmp	r3, #1
 8013d76:	4606      	mov	r6, r0
 8013d78:	dd7a      	ble.n	8013e70 <_dtoa_r+0x8d0>
 8013d7a:	f04f 0800 	mov.w	r8, #0
 8013d7e:	6933      	ldr	r3, [r6, #16]
 8013d80:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8013d84:	6918      	ldr	r0, [r3, #16]
 8013d86:	f000 fba5 	bl	80144d4 <__hi0bits>
 8013d8a:	f1c0 0020 	rsb	r0, r0, #32
 8013d8e:	9b06      	ldr	r3, [sp, #24]
 8013d90:	4418      	add	r0, r3
 8013d92:	f010 001f 	ands.w	r0, r0, #31
 8013d96:	f000 8094 	beq.w	8013ec2 <_dtoa_r+0x922>
 8013d9a:	f1c0 0320 	rsb	r3, r0, #32
 8013d9e:	2b04      	cmp	r3, #4
 8013da0:	f340 8085 	ble.w	8013eae <_dtoa_r+0x90e>
 8013da4:	9b05      	ldr	r3, [sp, #20]
 8013da6:	f1c0 001c 	rsb	r0, r0, #28
 8013daa:	4403      	add	r3, r0
 8013dac:	9305      	str	r3, [sp, #20]
 8013dae:	9b06      	ldr	r3, [sp, #24]
 8013db0:	4403      	add	r3, r0
 8013db2:	4405      	add	r5, r0
 8013db4:	9306      	str	r3, [sp, #24]
 8013db6:	9b05      	ldr	r3, [sp, #20]
 8013db8:	2b00      	cmp	r3, #0
 8013dba:	dd05      	ble.n	8013dc8 <_dtoa_r+0x828>
 8013dbc:	4651      	mov	r1, sl
 8013dbe:	461a      	mov	r2, r3
 8013dc0:	4620      	mov	r0, r4
 8013dc2:	f000 fcef 	bl	80147a4 <__lshift>
 8013dc6:	4682      	mov	sl, r0
 8013dc8:	9b06      	ldr	r3, [sp, #24]
 8013dca:	2b00      	cmp	r3, #0
 8013dcc:	dd05      	ble.n	8013dda <_dtoa_r+0x83a>
 8013dce:	4631      	mov	r1, r6
 8013dd0:	461a      	mov	r2, r3
 8013dd2:	4620      	mov	r0, r4
 8013dd4:	f000 fce6 	bl	80147a4 <__lshift>
 8013dd8:	4606      	mov	r6, r0
 8013dda:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013ddc:	2b00      	cmp	r3, #0
 8013dde:	d072      	beq.n	8013ec6 <_dtoa_r+0x926>
 8013de0:	4631      	mov	r1, r6
 8013de2:	4650      	mov	r0, sl
 8013de4:	f000 fd4a 	bl	801487c <__mcmp>
 8013de8:	2800      	cmp	r0, #0
 8013dea:	da6c      	bge.n	8013ec6 <_dtoa_r+0x926>
 8013dec:	2300      	movs	r3, #0
 8013dee:	4651      	mov	r1, sl
 8013df0:	220a      	movs	r2, #10
 8013df2:	4620      	mov	r0, r4
 8013df4:	f000 fb28 	bl	8014448 <__multadd>
 8013df8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013dfa:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8013dfe:	4682      	mov	sl, r0
 8013e00:	2b00      	cmp	r3, #0
 8013e02:	f000 81b0 	beq.w	8014166 <_dtoa_r+0xbc6>
 8013e06:	2300      	movs	r3, #0
 8013e08:	4639      	mov	r1, r7
 8013e0a:	220a      	movs	r2, #10
 8013e0c:	4620      	mov	r0, r4
 8013e0e:	f000 fb1b 	bl	8014448 <__multadd>
 8013e12:	9b01      	ldr	r3, [sp, #4]
 8013e14:	2b00      	cmp	r3, #0
 8013e16:	4607      	mov	r7, r0
 8013e18:	f300 8096 	bgt.w	8013f48 <_dtoa_r+0x9a8>
 8013e1c:	9b07      	ldr	r3, [sp, #28]
 8013e1e:	2b02      	cmp	r3, #2
 8013e20:	dc59      	bgt.n	8013ed6 <_dtoa_r+0x936>
 8013e22:	e091      	b.n	8013f48 <_dtoa_r+0x9a8>
 8013e24:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8013e26:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8013e2a:	e758      	b.n	8013cde <_dtoa_r+0x73e>
 8013e2c:	9b04      	ldr	r3, [sp, #16]
 8013e2e:	1e5e      	subs	r6, r3, #1
 8013e30:	9b08      	ldr	r3, [sp, #32]
 8013e32:	42b3      	cmp	r3, r6
 8013e34:	bfbf      	itttt	lt
 8013e36:	9b08      	ldrlt	r3, [sp, #32]
 8013e38:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8013e3a:	9608      	strlt	r6, [sp, #32]
 8013e3c:	1af3      	sublt	r3, r6, r3
 8013e3e:	bfb4      	ite	lt
 8013e40:	18d2      	addlt	r2, r2, r3
 8013e42:	1b9e      	subge	r6, r3, r6
 8013e44:	9b04      	ldr	r3, [sp, #16]
 8013e46:	bfbc      	itt	lt
 8013e48:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8013e4a:	2600      	movlt	r6, #0
 8013e4c:	2b00      	cmp	r3, #0
 8013e4e:	bfb7      	itett	lt
 8013e50:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8013e54:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8013e58:	1a9d      	sublt	r5, r3, r2
 8013e5a:	2300      	movlt	r3, #0
 8013e5c:	e741      	b.n	8013ce2 <_dtoa_r+0x742>
 8013e5e:	9e08      	ldr	r6, [sp, #32]
 8013e60:	9d05      	ldr	r5, [sp, #20]
 8013e62:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8013e64:	e748      	b.n	8013cf8 <_dtoa_r+0x758>
 8013e66:	9a08      	ldr	r2, [sp, #32]
 8013e68:	e770      	b.n	8013d4c <_dtoa_r+0x7ac>
 8013e6a:	9b07      	ldr	r3, [sp, #28]
 8013e6c:	2b01      	cmp	r3, #1
 8013e6e:	dc19      	bgt.n	8013ea4 <_dtoa_r+0x904>
 8013e70:	9b02      	ldr	r3, [sp, #8]
 8013e72:	b9bb      	cbnz	r3, 8013ea4 <_dtoa_r+0x904>
 8013e74:	9b03      	ldr	r3, [sp, #12]
 8013e76:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8013e7a:	b99b      	cbnz	r3, 8013ea4 <_dtoa_r+0x904>
 8013e7c:	9b03      	ldr	r3, [sp, #12]
 8013e7e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8013e82:	0d1b      	lsrs	r3, r3, #20
 8013e84:	051b      	lsls	r3, r3, #20
 8013e86:	b183      	cbz	r3, 8013eaa <_dtoa_r+0x90a>
 8013e88:	9b05      	ldr	r3, [sp, #20]
 8013e8a:	3301      	adds	r3, #1
 8013e8c:	9305      	str	r3, [sp, #20]
 8013e8e:	9b06      	ldr	r3, [sp, #24]
 8013e90:	3301      	adds	r3, #1
 8013e92:	9306      	str	r3, [sp, #24]
 8013e94:	f04f 0801 	mov.w	r8, #1
 8013e98:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013e9a:	2b00      	cmp	r3, #0
 8013e9c:	f47f af6f 	bne.w	8013d7e <_dtoa_r+0x7de>
 8013ea0:	2001      	movs	r0, #1
 8013ea2:	e774      	b.n	8013d8e <_dtoa_r+0x7ee>
 8013ea4:	f04f 0800 	mov.w	r8, #0
 8013ea8:	e7f6      	b.n	8013e98 <_dtoa_r+0x8f8>
 8013eaa:	4698      	mov	r8, r3
 8013eac:	e7f4      	b.n	8013e98 <_dtoa_r+0x8f8>
 8013eae:	d082      	beq.n	8013db6 <_dtoa_r+0x816>
 8013eb0:	9a05      	ldr	r2, [sp, #20]
 8013eb2:	331c      	adds	r3, #28
 8013eb4:	441a      	add	r2, r3
 8013eb6:	9205      	str	r2, [sp, #20]
 8013eb8:	9a06      	ldr	r2, [sp, #24]
 8013eba:	441a      	add	r2, r3
 8013ebc:	441d      	add	r5, r3
 8013ebe:	9206      	str	r2, [sp, #24]
 8013ec0:	e779      	b.n	8013db6 <_dtoa_r+0x816>
 8013ec2:	4603      	mov	r3, r0
 8013ec4:	e7f4      	b.n	8013eb0 <_dtoa_r+0x910>
 8013ec6:	9b04      	ldr	r3, [sp, #16]
 8013ec8:	2b00      	cmp	r3, #0
 8013eca:	dc37      	bgt.n	8013f3c <_dtoa_r+0x99c>
 8013ecc:	9b07      	ldr	r3, [sp, #28]
 8013ece:	2b02      	cmp	r3, #2
 8013ed0:	dd34      	ble.n	8013f3c <_dtoa_r+0x99c>
 8013ed2:	9b04      	ldr	r3, [sp, #16]
 8013ed4:	9301      	str	r3, [sp, #4]
 8013ed6:	9b01      	ldr	r3, [sp, #4]
 8013ed8:	b963      	cbnz	r3, 8013ef4 <_dtoa_r+0x954>
 8013eda:	4631      	mov	r1, r6
 8013edc:	2205      	movs	r2, #5
 8013ede:	4620      	mov	r0, r4
 8013ee0:	f000 fab2 	bl	8014448 <__multadd>
 8013ee4:	4601      	mov	r1, r0
 8013ee6:	4606      	mov	r6, r0
 8013ee8:	4650      	mov	r0, sl
 8013eea:	f000 fcc7 	bl	801487c <__mcmp>
 8013eee:	2800      	cmp	r0, #0
 8013ef0:	f73f adbb 	bgt.w	8013a6a <_dtoa_r+0x4ca>
 8013ef4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013ef6:	9d00      	ldr	r5, [sp, #0]
 8013ef8:	ea6f 0b03 	mvn.w	fp, r3
 8013efc:	f04f 0800 	mov.w	r8, #0
 8013f00:	4631      	mov	r1, r6
 8013f02:	4620      	mov	r0, r4
 8013f04:	f000 fa7e 	bl	8014404 <_Bfree>
 8013f08:	2f00      	cmp	r7, #0
 8013f0a:	f43f aeab 	beq.w	8013c64 <_dtoa_r+0x6c4>
 8013f0e:	f1b8 0f00 	cmp.w	r8, #0
 8013f12:	d005      	beq.n	8013f20 <_dtoa_r+0x980>
 8013f14:	45b8      	cmp	r8, r7
 8013f16:	d003      	beq.n	8013f20 <_dtoa_r+0x980>
 8013f18:	4641      	mov	r1, r8
 8013f1a:	4620      	mov	r0, r4
 8013f1c:	f000 fa72 	bl	8014404 <_Bfree>
 8013f20:	4639      	mov	r1, r7
 8013f22:	4620      	mov	r0, r4
 8013f24:	f000 fa6e 	bl	8014404 <_Bfree>
 8013f28:	e69c      	b.n	8013c64 <_dtoa_r+0x6c4>
 8013f2a:	2600      	movs	r6, #0
 8013f2c:	4637      	mov	r7, r6
 8013f2e:	e7e1      	b.n	8013ef4 <_dtoa_r+0x954>
 8013f30:	46bb      	mov	fp, r7
 8013f32:	4637      	mov	r7, r6
 8013f34:	e599      	b.n	8013a6a <_dtoa_r+0x4ca>
 8013f36:	bf00      	nop
 8013f38:	40240000 	.word	0x40240000
 8013f3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013f3e:	2b00      	cmp	r3, #0
 8013f40:	f000 80c8 	beq.w	80140d4 <_dtoa_r+0xb34>
 8013f44:	9b04      	ldr	r3, [sp, #16]
 8013f46:	9301      	str	r3, [sp, #4]
 8013f48:	2d00      	cmp	r5, #0
 8013f4a:	dd05      	ble.n	8013f58 <_dtoa_r+0x9b8>
 8013f4c:	4639      	mov	r1, r7
 8013f4e:	462a      	mov	r2, r5
 8013f50:	4620      	mov	r0, r4
 8013f52:	f000 fc27 	bl	80147a4 <__lshift>
 8013f56:	4607      	mov	r7, r0
 8013f58:	f1b8 0f00 	cmp.w	r8, #0
 8013f5c:	d05b      	beq.n	8014016 <_dtoa_r+0xa76>
 8013f5e:	6879      	ldr	r1, [r7, #4]
 8013f60:	4620      	mov	r0, r4
 8013f62:	f000 fa0f 	bl	8014384 <_Balloc>
 8013f66:	4605      	mov	r5, r0
 8013f68:	b928      	cbnz	r0, 8013f76 <_dtoa_r+0x9d6>
 8013f6a:	4b83      	ldr	r3, [pc, #524]	; (8014178 <_dtoa_r+0xbd8>)
 8013f6c:	4602      	mov	r2, r0
 8013f6e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8013f72:	f7ff bb2e 	b.w	80135d2 <_dtoa_r+0x32>
 8013f76:	693a      	ldr	r2, [r7, #16]
 8013f78:	3202      	adds	r2, #2
 8013f7a:	0092      	lsls	r2, r2, #2
 8013f7c:	f107 010c 	add.w	r1, r7, #12
 8013f80:	300c      	adds	r0, #12
 8013f82:	f7ff fa75 	bl	8013470 <memcpy>
 8013f86:	2201      	movs	r2, #1
 8013f88:	4629      	mov	r1, r5
 8013f8a:	4620      	mov	r0, r4
 8013f8c:	f000 fc0a 	bl	80147a4 <__lshift>
 8013f90:	9b00      	ldr	r3, [sp, #0]
 8013f92:	3301      	adds	r3, #1
 8013f94:	9304      	str	r3, [sp, #16]
 8013f96:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013f9a:	4413      	add	r3, r2
 8013f9c:	9308      	str	r3, [sp, #32]
 8013f9e:	9b02      	ldr	r3, [sp, #8]
 8013fa0:	f003 0301 	and.w	r3, r3, #1
 8013fa4:	46b8      	mov	r8, r7
 8013fa6:	9306      	str	r3, [sp, #24]
 8013fa8:	4607      	mov	r7, r0
 8013faa:	9b04      	ldr	r3, [sp, #16]
 8013fac:	4631      	mov	r1, r6
 8013fae:	3b01      	subs	r3, #1
 8013fb0:	4650      	mov	r0, sl
 8013fb2:	9301      	str	r3, [sp, #4]
 8013fb4:	f7ff fa6a 	bl	801348c <quorem>
 8013fb8:	4641      	mov	r1, r8
 8013fba:	9002      	str	r0, [sp, #8]
 8013fbc:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8013fc0:	4650      	mov	r0, sl
 8013fc2:	f000 fc5b 	bl	801487c <__mcmp>
 8013fc6:	463a      	mov	r2, r7
 8013fc8:	9005      	str	r0, [sp, #20]
 8013fca:	4631      	mov	r1, r6
 8013fcc:	4620      	mov	r0, r4
 8013fce:	f000 fc71 	bl	80148b4 <__mdiff>
 8013fd2:	68c2      	ldr	r2, [r0, #12]
 8013fd4:	4605      	mov	r5, r0
 8013fd6:	bb02      	cbnz	r2, 801401a <_dtoa_r+0xa7a>
 8013fd8:	4601      	mov	r1, r0
 8013fda:	4650      	mov	r0, sl
 8013fdc:	f000 fc4e 	bl	801487c <__mcmp>
 8013fe0:	4602      	mov	r2, r0
 8013fe2:	4629      	mov	r1, r5
 8013fe4:	4620      	mov	r0, r4
 8013fe6:	9209      	str	r2, [sp, #36]	; 0x24
 8013fe8:	f000 fa0c 	bl	8014404 <_Bfree>
 8013fec:	9b07      	ldr	r3, [sp, #28]
 8013fee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013ff0:	9d04      	ldr	r5, [sp, #16]
 8013ff2:	ea43 0102 	orr.w	r1, r3, r2
 8013ff6:	9b06      	ldr	r3, [sp, #24]
 8013ff8:	4319      	orrs	r1, r3
 8013ffa:	d110      	bne.n	801401e <_dtoa_r+0xa7e>
 8013ffc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8014000:	d029      	beq.n	8014056 <_dtoa_r+0xab6>
 8014002:	9b05      	ldr	r3, [sp, #20]
 8014004:	2b00      	cmp	r3, #0
 8014006:	dd02      	ble.n	801400e <_dtoa_r+0xa6e>
 8014008:	9b02      	ldr	r3, [sp, #8]
 801400a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 801400e:	9b01      	ldr	r3, [sp, #4]
 8014010:	f883 9000 	strb.w	r9, [r3]
 8014014:	e774      	b.n	8013f00 <_dtoa_r+0x960>
 8014016:	4638      	mov	r0, r7
 8014018:	e7ba      	b.n	8013f90 <_dtoa_r+0x9f0>
 801401a:	2201      	movs	r2, #1
 801401c:	e7e1      	b.n	8013fe2 <_dtoa_r+0xa42>
 801401e:	9b05      	ldr	r3, [sp, #20]
 8014020:	2b00      	cmp	r3, #0
 8014022:	db04      	blt.n	801402e <_dtoa_r+0xa8e>
 8014024:	9907      	ldr	r1, [sp, #28]
 8014026:	430b      	orrs	r3, r1
 8014028:	9906      	ldr	r1, [sp, #24]
 801402a:	430b      	orrs	r3, r1
 801402c:	d120      	bne.n	8014070 <_dtoa_r+0xad0>
 801402e:	2a00      	cmp	r2, #0
 8014030:	dded      	ble.n	801400e <_dtoa_r+0xa6e>
 8014032:	4651      	mov	r1, sl
 8014034:	2201      	movs	r2, #1
 8014036:	4620      	mov	r0, r4
 8014038:	f000 fbb4 	bl	80147a4 <__lshift>
 801403c:	4631      	mov	r1, r6
 801403e:	4682      	mov	sl, r0
 8014040:	f000 fc1c 	bl	801487c <__mcmp>
 8014044:	2800      	cmp	r0, #0
 8014046:	dc03      	bgt.n	8014050 <_dtoa_r+0xab0>
 8014048:	d1e1      	bne.n	801400e <_dtoa_r+0xa6e>
 801404a:	f019 0f01 	tst.w	r9, #1
 801404e:	d0de      	beq.n	801400e <_dtoa_r+0xa6e>
 8014050:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8014054:	d1d8      	bne.n	8014008 <_dtoa_r+0xa68>
 8014056:	9a01      	ldr	r2, [sp, #4]
 8014058:	2339      	movs	r3, #57	; 0x39
 801405a:	7013      	strb	r3, [r2, #0]
 801405c:	462b      	mov	r3, r5
 801405e:	461d      	mov	r5, r3
 8014060:	3b01      	subs	r3, #1
 8014062:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8014066:	2a39      	cmp	r2, #57	; 0x39
 8014068:	d06c      	beq.n	8014144 <_dtoa_r+0xba4>
 801406a:	3201      	adds	r2, #1
 801406c:	701a      	strb	r2, [r3, #0]
 801406e:	e747      	b.n	8013f00 <_dtoa_r+0x960>
 8014070:	2a00      	cmp	r2, #0
 8014072:	dd07      	ble.n	8014084 <_dtoa_r+0xae4>
 8014074:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8014078:	d0ed      	beq.n	8014056 <_dtoa_r+0xab6>
 801407a:	9a01      	ldr	r2, [sp, #4]
 801407c:	f109 0301 	add.w	r3, r9, #1
 8014080:	7013      	strb	r3, [r2, #0]
 8014082:	e73d      	b.n	8013f00 <_dtoa_r+0x960>
 8014084:	9b04      	ldr	r3, [sp, #16]
 8014086:	9a08      	ldr	r2, [sp, #32]
 8014088:	f803 9c01 	strb.w	r9, [r3, #-1]
 801408c:	4293      	cmp	r3, r2
 801408e:	d043      	beq.n	8014118 <_dtoa_r+0xb78>
 8014090:	4651      	mov	r1, sl
 8014092:	2300      	movs	r3, #0
 8014094:	220a      	movs	r2, #10
 8014096:	4620      	mov	r0, r4
 8014098:	f000 f9d6 	bl	8014448 <__multadd>
 801409c:	45b8      	cmp	r8, r7
 801409e:	4682      	mov	sl, r0
 80140a0:	f04f 0300 	mov.w	r3, #0
 80140a4:	f04f 020a 	mov.w	r2, #10
 80140a8:	4641      	mov	r1, r8
 80140aa:	4620      	mov	r0, r4
 80140ac:	d107      	bne.n	80140be <_dtoa_r+0xb1e>
 80140ae:	f000 f9cb 	bl	8014448 <__multadd>
 80140b2:	4680      	mov	r8, r0
 80140b4:	4607      	mov	r7, r0
 80140b6:	9b04      	ldr	r3, [sp, #16]
 80140b8:	3301      	adds	r3, #1
 80140ba:	9304      	str	r3, [sp, #16]
 80140bc:	e775      	b.n	8013faa <_dtoa_r+0xa0a>
 80140be:	f000 f9c3 	bl	8014448 <__multadd>
 80140c2:	4639      	mov	r1, r7
 80140c4:	4680      	mov	r8, r0
 80140c6:	2300      	movs	r3, #0
 80140c8:	220a      	movs	r2, #10
 80140ca:	4620      	mov	r0, r4
 80140cc:	f000 f9bc 	bl	8014448 <__multadd>
 80140d0:	4607      	mov	r7, r0
 80140d2:	e7f0      	b.n	80140b6 <_dtoa_r+0xb16>
 80140d4:	9b04      	ldr	r3, [sp, #16]
 80140d6:	9301      	str	r3, [sp, #4]
 80140d8:	9d00      	ldr	r5, [sp, #0]
 80140da:	4631      	mov	r1, r6
 80140dc:	4650      	mov	r0, sl
 80140de:	f7ff f9d5 	bl	801348c <quorem>
 80140e2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80140e6:	9b00      	ldr	r3, [sp, #0]
 80140e8:	f805 9b01 	strb.w	r9, [r5], #1
 80140ec:	1aea      	subs	r2, r5, r3
 80140ee:	9b01      	ldr	r3, [sp, #4]
 80140f0:	4293      	cmp	r3, r2
 80140f2:	dd07      	ble.n	8014104 <_dtoa_r+0xb64>
 80140f4:	4651      	mov	r1, sl
 80140f6:	2300      	movs	r3, #0
 80140f8:	220a      	movs	r2, #10
 80140fa:	4620      	mov	r0, r4
 80140fc:	f000 f9a4 	bl	8014448 <__multadd>
 8014100:	4682      	mov	sl, r0
 8014102:	e7ea      	b.n	80140da <_dtoa_r+0xb3a>
 8014104:	9b01      	ldr	r3, [sp, #4]
 8014106:	2b00      	cmp	r3, #0
 8014108:	bfc8      	it	gt
 801410a:	461d      	movgt	r5, r3
 801410c:	9b00      	ldr	r3, [sp, #0]
 801410e:	bfd8      	it	le
 8014110:	2501      	movle	r5, #1
 8014112:	441d      	add	r5, r3
 8014114:	f04f 0800 	mov.w	r8, #0
 8014118:	4651      	mov	r1, sl
 801411a:	2201      	movs	r2, #1
 801411c:	4620      	mov	r0, r4
 801411e:	f000 fb41 	bl	80147a4 <__lshift>
 8014122:	4631      	mov	r1, r6
 8014124:	4682      	mov	sl, r0
 8014126:	f000 fba9 	bl	801487c <__mcmp>
 801412a:	2800      	cmp	r0, #0
 801412c:	dc96      	bgt.n	801405c <_dtoa_r+0xabc>
 801412e:	d102      	bne.n	8014136 <_dtoa_r+0xb96>
 8014130:	f019 0f01 	tst.w	r9, #1
 8014134:	d192      	bne.n	801405c <_dtoa_r+0xabc>
 8014136:	462b      	mov	r3, r5
 8014138:	461d      	mov	r5, r3
 801413a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801413e:	2a30      	cmp	r2, #48	; 0x30
 8014140:	d0fa      	beq.n	8014138 <_dtoa_r+0xb98>
 8014142:	e6dd      	b.n	8013f00 <_dtoa_r+0x960>
 8014144:	9a00      	ldr	r2, [sp, #0]
 8014146:	429a      	cmp	r2, r3
 8014148:	d189      	bne.n	801405e <_dtoa_r+0xabe>
 801414a:	f10b 0b01 	add.w	fp, fp, #1
 801414e:	2331      	movs	r3, #49	; 0x31
 8014150:	e796      	b.n	8014080 <_dtoa_r+0xae0>
 8014152:	4b0a      	ldr	r3, [pc, #40]	; (801417c <_dtoa_r+0xbdc>)
 8014154:	f7ff ba99 	b.w	801368a <_dtoa_r+0xea>
 8014158:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801415a:	2b00      	cmp	r3, #0
 801415c:	f47f aa6d 	bne.w	801363a <_dtoa_r+0x9a>
 8014160:	4b07      	ldr	r3, [pc, #28]	; (8014180 <_dtoa_r+0xbe0>)
 8014162:	f7ff ba92 	b.w	801368a <_dtoa_r+0xea>
 8014166:	9b01      	ldr	r3, [sp, #4]
 8014168:	2b00      	cmp	r3, #0
 801416a:	dcb5      	bgt.n	80140d8 <_dtoa_r+0xb38>
 801416c:	9b07      	ldr	r3, [sp, #28]
 801416e:	2b02      	cmp	r3, #2
 8014170:	f73f aeb1 	bgt.w	8013ed6 <_dtoa_r+0x936>
 8014174:	e7b0      	b.n	80140d8 <_dtoa_r+0xb38>
 8014176:	bf00      	nop
 8014178:	08015a4c 	.word	0x08015a4c
 801417c:	080159ac 	.word	0x080159ac
 8014180:	080159d0 	.word	0x080159d0

08014184 <_free_r>:
 8014184:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8014186:	2900      	cmp	r1, #0
 8014188:	d044      	beq.n	8014214 <_free_r+0x90>
 801418a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801418e:	9001      	str	r0, [sp, #4]
 8014190:	2b00      	cmp	r3, #0
 8014192:	f1a1 0404 	sub.w	r4, r1, #4
 8014196:	bfb8      	it	lt
 8014198:	18e4      	addlt	r4, r4, r3
 801419a:	f000 f8e7 	bl	801436c <__malloc_lock>
 801419e:	4a1e      	ldr	r2, [pc, #120]	; (8014218 <_free_r+0x94>)
 80141a0:	9801      	ldr	r0, [sp, #4]
 80141a2:	6813      	ldr	r3, [r2, #0]
 80141a4:	b933      	cbnz	r3, 80141b4 <_free_r+0x30>
 80141a6:	6063      	str	r3, [r4, #4]
 80141a8:	6014      	str	r4, [r2, #0]
 80141aa:	b003      	add	sp, #12
 80141ac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80141b0:	f000 b8e2 	b.w	8014378 <__malloc_unlock>
 80141b4:	42a3      	cmp	r3, r4
 80141b6:	d908      	bls.n	80141ca <_free_r+0x46>
 80141b8:	6825      	ldr	r5, [r4, #0]
 80141ba:	1961      	adds	r1, r4, r5
 80141bc:	428b      	cmp	r3, r1
 80141be:	bf01      	itttt	eq
 80141c0:	6819      	ldreq	r1, [r3, #0]
 80141c2:	685b      	ldreq	r3, [r3, #4]
 80141c4:	1949      	addeq	r1, r1, r5
 80141c6:	6021      	streq	r1, [r4, #0]
 80141c8:	e7ed      	b.n	80141a6 <_free_r+0x22>
 80141ca:	461a      	mov	r2, r3
 80141cc:	685b      	ldr	r3, [r3, #4]
 80141ce:	b10b      	cbz	r3, 80141d4 <_free_r+0x50>
 80141d0:	42a3      	cmp	r3, r4
 80141d2:	d9fa      	bls.n	80141ca <_free_r+0x46>
 80141d4:	6811      	ldr	r1, [r2, #0]
 80141d6:	1855      	adds	r5, r2, r1
 80141d8:	42a5      	cmp	r5, r4
 80141da:	d10b      	bne.n	80141f4 <_free_r+0x70>
 80141dc:	6824      	ldr	r4, [r4, #0]
 80141de:	4421      	add	r1, r4
 80141e0:	1854      	adds	r4, r2, r1
 80141e2:	42a3      	cmp	r3, r4
 80141e4:	6011      	str	r1, [r2, #0]
 80141e6:	d1e0      	bne.n	80141aa <_free_r+0x26>
 80141e8:	681c      	ldr	r4, [r3, #0]
 80141ea:	685b      	ldr	r3, [r3, #4]
 80141ec:	6053      	str	r3, [r2, #4]
 80141ee:	440c      	add	r4, r1
 80141f0:	6014      	str	r4, [r2, #0]
 80141f2:	e7da      	b.n	80141aa <_free_r+0x26>
 80141f4:	d902      	bls.n	80141fc <_free_r+0x78>
 80141f6:	230c      	movs	r3, #12
 80141f8:	6003      	str	r3, [r0, #0]
 80141fa:	e7d6      	b.n	80141aa <_free_r+0x26>
 80141fc:	6825      	ldr	r5, [r4, #0]
 80141fe:	1961      	adds	r1, r4, r5
 8014200:	428b      	cmp	r3, r1
 8014202:	bf04      	itt	eq
 8014204:	6819      	ldreq	r1, [r3, #0]
 8014206:	685b      	ldreq	r3, [r3, #4]
 8014208:	6063      	str	r3, [r4, #4]
 801420a:	bf04      	itt	eq
 801420c:	1949      	addeq	r1, r1, r5
 801420e:	6021      	streq	r1, [r4, #0]
 8014210:	6054      	str	r4, [r2, #4]
 8014212:	e7ca      	b.n	80141aa <_free_r+0x26>
 8014214:	b003      	add	sp, #12
 8014216:	bd30      	pop	{r4, r5, pc}
 8014218:	200067f0 	.word	0x200067f0

0801421c <malloc>:
 801421c:	4b02      	ldr	r3, [pc, #8]	; (8014228 <malloc+0xc>)
 801421e:	4601      	mov	r1, r0
 8014220:	6818      	ldr	r0, [r3, #0]
 8014222:	f000 b823 	b.w	801426c <_malloc_r>
 8014226:	bf00      	nop
 8014228:	200001e0 	.word	0x200001e0

0801422c <sbrk_aligned>:
 801422c:	b570      	push	{r4, r5, r6, lr}
 801422e:	4e0e      	ldr	r6, [pc, #56]	; (8014268 <sbrk_aligned+0x3c>)
 8014230:	460c      	mov	r4, r1
 8014232:	6831      	ldr	r1, [r6, #0]
 8014234:	4605      	mov	r5, r0
 8014236:	b911      	cbnz	r1, 801423e <sbrk_aligned+0x12>
 8014238:	f001 f808 	bl	801524c <_sbrk_r>
 801423c:	6030      	str	r0, [r6, #0]
 801423e:	4621      	mov	r1, r4
 8014240:	4628      	mov	r0, r5
 8014242:	f001 f803 	bl	801524c <_sbrk_r>
 8014246:	1c43      	adds	r3, r0, #1
 8014248:	d00a      	beq.n	8014260 <sbrk_aligned+0x34>
 801424a:	1cc4      	adds	r4, r0, #3
 801424c:	f024 0403 	bic.w	r4, r4, #3
 8014250:	42a0      	cmp	r0, r4
 8014252:	d007      	beq.n	8014264 <sbrk_aligned+0x38>
 8014254:	1a21      	subs	r1, r4, r0
 8014256:	4628      	mov	r0, r5
 8014258:	f000 fff8 	bl	801524c <_sbrk_r>
 801425c:	3001      	adds	r0, #1
 801425e:	d101      	bne.n	8014264 <sbrk_aligned+0x38>
 8014260:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8014264:	4620      	mov	r0, r4
 8014266:	bd70      	pop	{r4, r5, r6, pc}
 8014268:	200067f4 	.word	0x200067f4

0801426c <_malloc_r>:
 801426c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014270:	1ccd      	adds	r5, r1, #3
 8014272:	f025 0503 	bic.w	r5, r5, #3
 8014276:	3508      	adds	r5, #8
 8014278:	2d0c      	cmp	r5, #12
 801427a:	bf38      	it	cc
 801427c:	250c      	movcc	r5, #12
 801427e:	2d00      	cmp	r5, #0
 8014280:	4607      	mov	r7, r0
 8014282:	db01      	blt.n	8014288 <_malloc_r+0x1c>
 8014284:	42a9      	cmp	r1, r5
 8014286:	d905      	bls.n	8014294 <_malloc_r+0x28>
 8014288:	230c      	movs	r3, #12
 801428a:	603b      	str	r3, [r7, #0]
 801428c:	2600      	movs	r6, #0
 801428e:	4630      	mov	r0, r6
 8014290:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014294:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8014368 <_malloc_r+0xfc>
 8014298:	f000 f868 	bl	801436c <__malloc_lock>
 801429c:	f8d8 3000 	ldr.w	r3, [r8]
 80142a0:	461c      	mov	r4, r3
 80142a2:	bb5c      	cbnz	r4, 80142fc <_malloc_r+0x90>
 80142a4:	4629      	mov	r1, r5
 80142a6:	4638      	mov	r0, r7
 80142a8:	f7ff ffc0 	bl	801422c <sbrk_aligned>
 80142ac:	1c43      	adds	r3, r0, #1
 80142ae:	4604      	mov	r4, r0
 80142b0:	d155      	bne.n	801435e <_malloc_r+0xf2>
 80142b2:	f8d8 4000 	ldr.w	r4, [r8]
 80142b6:	4626      	mov	r6, r4
 80142b8:	2e00      	cmp	r6, #0
 80142ba:	d145      	bne.n	8014348 <_malloc_r+0xdc>
 80142bc:	2c00      	cmp	r4, #0
 80142be:	d048      	beq.n	8014352 <_malloc_r+0xe6>
 80142c0:	6823      	ldr	r3, [r4, #0]
 80142c2:	4631      	mov	r1, r6
 80142c4:	4638      	mov	r0, r7
 80142c6:	eb04 0903 	add.w	r9, r4, r3
 80142ca:	f000 ffbf 	bl	801524c <_sbrk_r>
 80142ce:	4581      	cmp	r9, r0
 80142d0:	d13f      	bne.n	8014352 <_malloc_r+0xe6>
 80142d2:	6821      	ldr	r1, [r4, #0]
 80142d4:	1a6d      	subs	r5, r5, r1
 80142d6:	4629      	mov	r1, r5
 80142d8:	4638      	mov	r0, r7
 80142da:	f7ff ffa7 	bl	801422c <sbrk_aligned>
 80142de:	3001      	adds	r0, #1
 80142e0:	d037      	beq.n	8014352 <_malloc_r+0xe6>
 80142e2:	6823      	ldr	r3, [r4, #0]
 80142e4:	442b      	add	r3, r5
 80142e6:	6023      	str	r3, [r4, #0]
 80142e8:	f8d8 3000 	ldr.w	r3, [r8]
 80142ec:	2b00      	cmp	r3, #0
 80142ee:	d038      	beq.n	8014362 <_malloc_r+0xf6>
 80142f0:	685a      	ldr	r2, [r3, #4]
 80142f2:	42a2      	cmp	r2, r4
 80142f4:	d12b      	bne.n	801434e <_malloc_r+0xe2>
 80142f6:	2200      	movs	r2, #0
 80142f8:	605a      	str	r2, [r3, #4]
 80142fa:	e00f      	b.n	801431c <_malloc_r+0xb0>
 80142fc:	6822      	ldr	r2, [r4, #0]
 80142fe:	1b52      	subs	r2, r2, r5
 8014300:	d41f      	bmi.n	8014342 <_malloc_r+0xd6>
 8014302:	2a0b      	cmp	r2, #11
 8014304:	d917      	bls.n	8014336 <_malloc_r+0xca>
 8014306:	1961      	adds	r1, r4, r5
 8014308:	42a3      	cmp	r3, r4
 801430a:	6025      	str	r5, [r4, #0]
 801430c:	bf18      	it	ne
 801430e:	6059      	strne	r1, [r3, #4]
 8014310:	6863      	ldr	r3, [r4, #4]
 8014312:	bf08      	it	eq
 8014314:	f8c8 1000 	streq.w	r1, [r8]
 8014318:	5162      	str	r2, [r4, r5]
 801431a:	604b      	str	r3, [r1, #4]
 801431c:	4638      	mov	r0, r7
 801431e:	f104 060b 	add.w	r6, r4, #11
 8014322:	f000 f829 	bl	8014378 <__malloc_unlock>
 8014326:	f026 0607 	bic.w	r6, r6, #7
 801432a:	1d23      	adds	r3, r4, #4
 801432c:	1af2      	subs	r2, r6, r3
 801432e:	d0ae      	beq.n	801428e <_malloc_r+0x22>
 8014330:	1b9b      	subs	r3, r3, r6
 8014332:	50a3      	str	r3, [r4, r2]
 8014334:	e7ab      	b.n	801428e <_malloc_r+0x22>
 8014336:	42a3      	cmp	r3, r4
 8014338:	6862      	ldr	r2, [r4, #4]
 801433a:	d1dd      	bne.n	80142f8 <_malloc_r+0x8c>
 801433c:	f8c8 2000 	str.w	r2, [r8]
 8014340:	e7ec      	b.n	801431c <_malloc_r+0xb0>
 8014342:	4623      	mov	r3, r4
 8014344:	6864      	ldr	r4, [r4, #4]
 8014346:	e7ac      	b.n	80142a2 <_malloc_r+0x36>
 8014348:	4634      	mov	r4, r6
 801434a:	6876      	ldr	r6, [r6, #4]
 801434c:	e7b4      	b.n	80142b8 <_malloc_r+0x4c>
 801434e:	4613      	mov	r3, r2
 8014350:	e7cc      	b.n	80142ec <_malloc_r+0x80>
 8014352:	230c      	movs	r3, #12
 8014354:	603b      	str	r3, [r7, #0]
 8014356:	4638      	mov	r0, r7
 8014358:	f000 f80e 	bl	8014378 <__malloc_unlock>
 801435c:	e797      	b.n	801428e <_malloc_r+0x22>
 801435e:	6025      	str	r5, [r4, #0]
 8014360:	e7dc      	b.n	801431c <_malloc_r+0xb0>
 8014362:	605b      	str	r3, [r3, #4]
 8014364:	deff      	udf	#255	; 0xff
 8014366:	bf00      	nop
 8014368:	200067f0 	.word	0x200067f0

0801436c <__malloc_lock>:
 801436c:	4801      	ldr	r0, [pc, #4]	; (8014374 <__malloc_lock+0x8>)
 801436e:	f7ff b87d 	b.w	801346c <__retarget_lock_acquire_recursive>
 8014372:	bf00      	nop
 8014374:	200067ec 	.word	0x200067ec

08014378 <__malloc_unlock>:
 8014378:	4801      	ldr	r0, [pc, #4]	; (8014380 <__malloc_unlock+0x8>)
 801437a:	f7ff b878 	b.w	801346e <__retarget_lock_release_recursive>
 801437e:	bf00      	nop
 8014380:	200067ec 	.word	0x200067ec

08014384 <_Balloc>:
 8014384:	b570      	push	{r4, r5, r6, lr}
 8014386:	69c6      	ldr	r6, [r0, #28]
 8014388:	4604      	mov	r4, r0
 801438a:	460d      	mov	r5, r1
 801438c:	b976      	cbnz	r6, 80143ac <_Balloc+0x28>
 801438e:	2010      	movs	r0, #16
 8014390:	f7ff ff44 	bl	801421c <malloc>
 8014394:	4602      	mov	r2, r0
 8014396:	61e0      	str	r0, [r4, #28]
 8014398:	b920      	cbnz	r0, 80143a4 <_Balloc+0x20>
 801439a:	4b18      	ldr	r3, [pc, #96]	; (80143fc <_Balloc+0x78>)
 801439c:	4818      	ldr	r0, [pc, #96]	; (8014400 <_Balloc+0x7c>)
 801439e:	216b      	movs	r1, #107	; 0x6b
 80143a0:	f000 ff64 	bl	801526c <__assert_func>
 80143a4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80143a8:	6006      	str	r6, [r0, #0]
 80143aa:	60c6      	str	r6, [r0, #12]
 80143ac:	69e6      	ldr	r6, [r4, #28]
 80143ae:	68f3      	ldr	r3, [r6, #12]
 80143b0:	b183      	cbz	r3, 80143d4 <_Balloc+0x50>
 80143b2:	69e3      	ldr	r3, [r4, #28]
 80143b4:	68db      	ldr	r3, [r3, #12]
 80143b6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80143ba:	b9b8      	cbnz	r0, 80143ec <_Balloc+0x68>
 80143bc:	2101      	movs	r1, #1
 80143be:	fa01 f605 	lsl.w	r6, r1, r5
 80143c2:	1d72      	adds	r2, r6, #5
 80143c4:	0092      	lsls	r2, r2, #2
 80143c6:	4620      	mov	r0, r4
 80143c8:	f000 ff6e 	bl	80152a8 <_calloc_r>
 80143cc:	b160      	cbz	r0, 80143e8 <_Balloc+0x64>
 80143ce:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80143d2:	e00e      	b.n	80143f2 <_Balloc+0x6e>
 80143d4:	2221      	movs	r2, #33	; 0x21
 80143d6:	2104      	movs	r1, #4
 80143d8:	4620      	mov	r0, r4
 80143da:	f000 ff65 	bl	80152a8 <_calloc_r>
 80143de:	69e3      	ldr	r3, [r4, #28]
 80143e0:	60f0      	str	r0, [r6, #12]
 80143e2:	68db      	ldr	r3, [r3, #12]
 80143e4:	2b00      	cmp	r3, #0
 80143e6:	d1e4      	bne.n	80143b2 <_Balloc+0x2e>
 80143e8:	2000      	movs	r0, #0
 80143ea:	bd70      	pop	{r4, r5, r6, pc}
 80143ec:	6802      	ldr	r2, [r0, #0]
 80143ee:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80143f2:	2300      	movs	r3, #0
 80143f4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80143f8:	e7f7      	b.n	80143ea <_Balloc+0x66>
 80143fa:	bf00      	nop
 80143fc:	080159dd 	.word	0x080159dd
 8014400:	08015a5d 	.word	0x08015a5d

08014404 <_Bfree>:
 8014404:	b570      	push	{r4, r5, r6, lr}
 8014406:	69c6      	ldr	r6, [r0, #28]
 8014408:	4605      	mov	r5, r0
 801440a:	460c      	mov	r4, r1
 801440c:	b976      	cbnz	r6, 801442c <_Bfree+0x28>
 801440e:	2010      	movs	r0, #16
 8014410:	f7ff ff04 	bl	801421c <malloc>
 8014414:	4602      	mov	r2, r0
 8014416:	61e8      	str	r0, [r5, #28]
 8014418:	b920      	cbnz	r0, 8014424 <_Bfree+0x20>
 801441a:	4b09      	ldr	r3, [pc, #36]	; (8014440 <_Bfree+0x3c>)
 801441c:	4809      	ldr	r0, [pc, #36]	; (8014444 <_Bfree+0x40>)
 801441e:	218f      	movs	r1, #143	; 0x8f
 8014420:	f000 ff24 	bl	801526c <__assert_func>
 8014424:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8014428:	6006      	str	r6, [r0, #0]
 801442a:	60c6      	str	r6, [r0, #12]
 801442c:	b13c      	cbz	r4, 801443e <_Bfree+0x3a>
 801442e:	69eb      	ldr	r3, [r5, #28]
 8014430:	6862      	ldr	r2, [r4, #4]
 8014432:	68db      	ldr	r3, [r3, #12]
 8014434:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8014438:	6021      	str	r1, [r4, #0]
 801443a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801443e:	bd70      	pop	{r4, r5, r6, pc}
 8014440:	080159dd 	.word	0x080159dd
 8014444:	08015a5d 	.word	0x08015a5d

08014448 <__multadd>:
 8014448:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801444c:	690d      	ldr	r5, [r1, #16]
 801444e:	4607      	mov	r7, r0
 8014450:	460c      	mov	r4, r1
 8014452:	461e      	mov	r6, r3
 8014454:	f101 0c14 	add.w	ip, r1, #20
 8014458:	2000      	movs	r0, #0
 801445a:	f8dc 3000 	ldr.w	r3, [ip]
 801445e:	b299      	uxth	r1, r3
 8014460:	fb02 6101 	mla	r1, r2, r1, r6
 8014464:	0c1e      	lsrs	r6, r3, #16
 8014466:	0c0b      	lsrs	r3, r1, #16
 8014468:	fb02 3306 	mla	r3, r2, r6, r3
 801446c:	b289      	uxth	r1, r1
 801446e:	3001      	adds	r0, #1
 8014470:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8014474:	4285      	cmp	r5, r0
 8014476:	f84c 1b04 	str.w	r1, [ip], #4
 801447a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801447e:	dcec      	bgt.n	801445a <__multadd+0x12>
 8014480:	b30e      	cbz	r6, 80144c6 <__multadd+0x7e>
 8014482:	68a3      	ldr	r3, [r4, #8]
 8014484:	42ab      	cmp	r3, r5
 8014486:	dc19      	bgt.n	80144bc <__multadd+0x74>
 8014488:	6861      	ldr	r1, [r4, #4]
 801448a:	4638      	mov	r0, r7
 801448c:	3101      	adds	r1, #1
 801448e:	f7ff ff79 	bl	8014384 <_Balloc>
 8014492:	4680      	mov	r8, r0
 8014494:	b928      	cbnz	r0, 80144a2 <__multadd+0x5a>
 8014496:	4602      	mov	r2, r0
 8014498:	4b0c      	ldr	r3, [pc, #48]	; (80144cc <__multadd+0x84>)
 801449a:	480d      	ldr	r0, [pc, #52]	; (80144d0 <__multadd+0x88>)
 801449c:	21ba      	movs	r1, #186	; 0xba
 801449e:	f000 fee5 	bl	801526c <__assert_func>
 80144a2:	6922      	ldr	r2, [r4, #16]
 80144a4:	3202      	adds	r2, #2
 80144a6:	f104 010c 	add.w	r1, r4, #12
 80144aa:	0092      	lsls	r2, r2, #2
 80144ac:	300c      	adds	r0, #12
 80144ae:	f7fe ffdf 	bl	8013470 <memcpy>
 80144b2:	4621      	mov	r1, r4
 80144b4:	4638      	mov	r0, r7
 80144b6:	f7ff ffa5 	bl	8014404 <_Bfree>
 80144ba:	4644      	mov	r4, r8
 80144bc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80144c0:	3501      	adds	r5, #1
 80144c2:	615e      	str	r6, [r3, #20]
 80144c4:	6125      	str	r5, [r4, #16]
 80144c6:	4620      	mov	r0, r4
 80144c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80144cc:	08015a4c 	.word	0x08015a4c
 80144d0:	08015a5d 	.word	0x08015a5d

080144d4 <__hi0bits>:
 80144d4:	0c03      	lsrs	r3, r0, #16
 80144d6:	041b      	lsls	r3, r3, #16
 80144d8:	b9d3      	cbnz	r3, 8014510 <__hi0bits+0x3c>
 80144da:	0400      	lsls	r0, r0, #16
 80144dc:	2310      	movs	r3, #16
 80144de:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80144e2:	bf04      	itt	eq
 80144e4:	0200      	lsleq	r0, r0, #8
 80144e6:	3308      	addeq	r3, #8
 80144e8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80144ec:	bf04      	itt	eq
 80144ee:	0100      	lsleq	r0, r0, #4
 80144f0:	3304      	addeq	r3, #4
 80144f2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80144f6:	bf04      	itt	eq
 80144f8:	0080      	lsleq	r0, r0, #2
 80144fa:	3302      	addeq	r3, #2
 80144fc:	2800      	cmp	r0, #0
 80144fe:	db05      	blt.n	801450c <__hi0bits+0x38>
 8014500:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8014504:	f103 0301 	add.w	r3, r3, #1
 8014508:	bf08      	it	eq
 801450a:	2320      	moveq	r3, #32
 801450c:	4618      	mov	r0, r3
 801450e:	4770      	bx	lr
 8014510:	2300      	movs	r3, #0
 8014512:	e7e4      	b.n	80144de <__hi0bits+0xa>

08014514 <__lo0bits>:
 8014514:	6803      	ldr	r3, [r0, #0]
 8014516:	f013 0207 	ands.w	r2, r3, #7
 801451a:	d00c      	beq.n	8014536 <__lo0bits+0x22>
 801451c:	07d9      	lsls	r1, r3, #31
 801451e:	d422      	bmi.n	8014566 <__lo0bits+0x52>
 8014520:	079a      	lsls	r2, r3, #30
 8014522:	bf49      	itett	mi
 8014524:	085b      	lsrmi	r3, r3, #1
 8014526:	089b      	lsrpl	r3, r3, #2
 8014528:	6003      	strmi	r3, [r0, #0]
 801452a:	2201      	movmi	r2, #1
 801452c:	bf5c      	itt	pl
 801452e:	6003      	strpl	r3, [r0, #0]
 8014530:	2202      	movpl	r2, #2
 8014532:	4610      	mov	r0, r2
 8014534:	4770      	bx	lr
 8014536:	b299      	uxth	r1, r3
 8014538:	b909      	cbnz	r1, 801453e <__lo0bits+0x2a>
 801453a:	0c1b      	lsrs	r3, r3, #16
 801453c:	2210      	movs	r2, #16
 801453e:	b2d9      	uxtb	r1, r3
 8014540:	b909      	cbnz	r1, 8014546 <__lo0bits+0x32>
 8014542:	3208      	adds	r2, #8
 8014544:	0a1b      	lsrs	r3, r3, #8
 8014546:	0719      	lsls	r1, r3, #28
 8014548:	bf04      	itt	eq
 801454a:	091b      	lsreq	r3, r3, #4
 801454c:	3204      	addeq	r2, #4
 801454e:	0799      	lsls	r1, r3, #30
 8014550:	bf04      	itt	eq
 8014552:	089b      	lsreq	r3, r3, #2
 8014554:	3202      	addeq	r2, #2
 8014556:	07d9      	lsls	r1, r3, #31
 8014558:	d403      	bmi.n	8014562 <__lo0bits+0x4e>
 801455a:	085b      	lsrs	r3, r3, #1
 801455c:	f102 0201 	add.w	r2, r2, #1
 8014560:	d003      	beq.n	801456a <__lo0bits+0x56>
 8014562:	6003      	str	r3, [r0, #0]
 8014564:	e7e5      	b.n	8014532 <__lo0bits+0x1e>
 8014566:	2200      	movs	r2, #0
 8014568:	e7e3      	b.n	8014532 <__lo0bits+0x1e>
 801456a:	2220      	movs	r2, #32
 801456c:	e7e1      	b.n	8014532 <__lo0bits+0x1e>
	...

08014570 <__i2b>:
 8014570:	b510      	push	{r4, lr}
 8014572:	460c      	mov	r4, r1
 8014574:	2101      	movs	r1, #1
 8014576:	f7ff ff05 	bl	8014384 <_Balloc>
 801457a:	4602      	mov	r2, r0
 801457c:	b928      	cbnz	r0, 801458a <__i2b+0x1a>
 801457e:	4b05      	ldr	r3, [pc, #20]	; (8014594 <__i2b+0x24>)
 8014580:	4805      	ldr	r0, [pc, #20]	; (8014598 <__i2b+0x28>)
 8014582:	f240 1145 	movw	r1, #325	; 0x145
 8014586:	f000 fe71 	bl	801526c <__assert_func>
 801458a:	2301      	movs	r3, #1
 801458c:	6144      	str	r4, [r0, #20]
 801458e:	6103      	str	r3, [r0, #16]
 8014590:	bd10      	pop	{r4, pc}
 8014592:	bf00      	nop
 8014594:	08015a4c 	.word	0x08015a4c
 8014598:	08015a5d 	.word	0x08015a5d

0801459c <__multiply>:
 801459c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80145a0:	4691      	mov	r9, r2
 80145a2:	690a      	ldr	r2, [r1, #16]
 80145a4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80145a8:	429a      	cmp	r2, r3
 80145aa:	bfb8      	it	lt
 80145ac:	460b      	movlt	r3, r1
 80145ae:	460c      	mov	r4, r1
 80145b0:	bfbc      	itt	lt
 80145b2:	464c      	movlt	r4, r9
 80145b4:	4699      	movlt	r9, r3
 80145b6:	6927      	ldr	r7, [r4, #16]
 80145b8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80145bc:	68a3      	ldr	r3, [r4, #8]
 80145be:	6861      	ldr	r1, [r4, #4]
 80145c0:	eb07 060a 	add.w	r6, r7, sl
 80145c4:	42b3      	cmp	r3, r6
 80145c6:	b085      	sub	sp, #20
 80145c8:	bfb8      	it	lt
 80145ca:	3101      	addlt	r1, #1
 80145cc:	f7ff feda 	bl	8014384 <_Balloc>
 80145d0:	b930      	cbnz	r0, 80145e0 <__multiply+0x44>
 80145d2:	4602      	mov	r2, r0
 80145d4:	4b44      	ldr	r3, [pc, #272]	; (80146e8 <__multiply+0x14c>)
 80145d6:	4845      	ldr	r0, [pc, #276]	; (80146ec <__multiply+0x150>)
 80145d8:	f44f 71b1 	mov.w	r1, #354	; 0x162
 80145dc:	f000 fe46 	bl	801526c <__assert_func>
 80145e0:	f100 0514 	add.w	r5, r0, #20
 80145e4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80145e8:	462b      	mov	r3, r5
 80145ea:	2200      	movs	r2, #0
 80145ec:	4543      	cmp	r3, r8
 80145ee:	d321      	bcc.n	8014634 <__multiply+0x98>
 80145f0:	f104 0314 	add.w	r3, r4, #20
 80145f4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80145f8:	f109 0314 	add.w	r3, r9, #20
 80145fc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8014600:	9202      	str	r2, [sp, #8]
 8014602:	1b3a      	subs	r2, r7, r4
 8014604:	3a15      	subs	r2, #21
 8014606:	f022 0203 	bic.w	r2, r2, #3
 801460a:	3204      	adds	r2, #4
 801460c:	f104 0115 	add.w	r1, r4, #21
 8014610:	428f      	cmp	r7, r1
 8014612:	bf38      	it	cc
 8014614:	2204      	movcc	r2, #4
 8014616:	9201      	str	r2, [sp, #4]
 8014618:	9a02      	ldr	r2, [sp, #8]
 801461a:	9303      	str	r3, [sp, #12]
 801461c:	429a      	cmp	r2, r3
 801461e:	d80c      	bhi.n	801463a <__multiply+0x9e>
 8014620:	2e00      	cmp	r6, #0
 8014622:	dd03      	ble.n	801462c <__multiply+0x90>
 8014624:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8014628:	2b00      	cmp	r3, #0
 801462a:	d05b      	beq.n	80146e4 <__multiply+0x148>
 801462c:	6106      	str	r6, [r0, #16]
 801462e:	b005      	add	sp, #20
 8014630:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014634:	f843 2b04 	str.w	r2, [r3], #4
 8014638:	e7d8      	b.n	80145ec <__multiply+0x50>
 801463a:	f8b3 a000 	ldrh.w	sl, [r3]
 801463e:	f1ba 0f00 	cmp.w	sl, #0
 8014642:	d024      	beq.n	801468e <__multiply+0xf2>
 8014644:	f104 0e14 	add.w	lr, r4, #20
 8014648:	46a9      	mov	r9, r5
 801464a:	f04f 0c00 	mov.w	ip, #0
 801464e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8014652:	f8d9 1000 	ldr.w	r1, [r9]
 8014656:	fa1f fb82 	uxth.w	fp, r2
 801465a:	b289      	uxth	r1, r1
 801465c:	fb0a 110b 	mla	r1, sl, fp, r1
 8014660:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8014664:	f8d9 2000 	ldr.w	r2, [r9]
 8014668:	4461      	add	r1, ip
 801466a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801466e:	fb0a c20b 	mla	r2, sl, fp, ip
 8014672:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8014676:	b289      	uxth	r1, r1
 8014678:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801467c:	4577      	cmp	r7, lr
 801467e:	f849 1b04 	str.w	r1, [r9], #4
 8014682:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8014686:	d8e2      	bhi.n	801464e <__multiply+0xb2>
 8014688:	9a01      	ldr	r2, [sp, #4]
 801468a:	f845 c002 	str.w	ip, [r5, r2]
 801468e:	9a03      	ldr	r2, [sp, #12]
 8014690:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8014694:	3304      	adds	r3, #4
 8014696:	f1b9 0f00 	cmp.w	r9, #0
 801469a:	d021      	beq.n	80146e0 <__multiply+0x144>
 801469c:	6829      	ldr	r1, [r5, #0]
 801469e:	f104 0c14 	add.w	ip, r4, #20
 80146a2:	46ae      	mov	lr, r5
 80146a4:	f04f 0a00 	mov.w	sl, #0
 80146a8:	f8bc b000 	ldrh.w	fp, [ip]
 80146ac:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80146b0:	fb09 220b 	mla	r2, r9, fp, r2
 80146b4:	4452      	add	r2, sl
 80146b6:	b289      	uxth	r1, r1
 80146b8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80146bc:	f84e 1b04 	str.w	r1, [lr], #4
 80146c0:	f85c 1b04 	ldr.w	r1, [ip], #4
 80146c4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80146c8:	f8be 1000 	ldrh.w	r1, [lr]
 80146cc:	fb09 110a 	mla	r1, r9, sl, r1
 80146d0:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 80146d4:	4567      	cmp	r7, ip
 80146d6:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80146da:	d8e5      	bhi.n	80146a8 <__multiply+0x10c>
 80146dc:	9a01      	ldr	r2, [sp, #4]
 80146de:	50a9      	str	r1, [r5, r2]
 80146e0:	3504      	adds	r5, #4
 80146e2:	e799      	b.n	8014618 <__multiply+0x7c>
 80146e4:	3e01      	subs	r6, #1
 80146e6:	e79b      	b.n	8014620 <__multiply+0x84>
 80146e8:	08015a4c 	.word	0x08015a4c
 80146ec:	08015a5d 	.word	0x08015a5d

080146f0 <__pow5mult>:
 80146f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80146f4:	4615      	mov	r5, r2
 80146f6:	f012 0203 	ands.w	r2, r2, #3
 80146fa:	4606      	mov	r6, r0
 80146fc:	460f      	mov	r7, r1
 80146fe:	d007      	beq.n	8014710 <__pow5mult+0x20>
 8014700:	4c25      	ldr	r4, [pc, #148]	; (8014798 <__pow5mult+0xa8>)
 8014702:	3a01      	subs	r2, #1
 8014704:	2300      	movs	r3, #0
 8014706:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801470a:	f7ff fe9d 	bl	8014448 <__multadd>
 801470e:	4607      	mov	r7, r0
 8014710:	10ad      	asrs	r5, r5, #2
 8014712:	d03d      	beq.n	8014790 <__pow5mult+0xa0>
 8014714:	69f4      	ldr	r4, [r6, #28]
 8014716:	b97c      	cbnz	r4, 8014738 <__pow5mult+0x48>
 8014718:	2010      	movs	r0, #16
 801471a:	f7ff fd7f 	bl	801421c <malloc>
 801471e:	4602      	mov	r2, r0
 8014720:	61f0      	str	r0, [r6, #28]
 8014722:	b928      	cbnz	r0, 8014730 <__pow5mult+0x40>
 8014724:	4b1d      	ldr	r3, [pc, #116]	; (801479c <__pow5mult+0xac>)
 8014726:	481e      	ldr	r0, [pc, #120]	; (80147a0 <__pow5mult+0xb0>)
 8014728:	f240 11b3 	movw	r1, #435	; 0x1b3
 801472c:	f000 fd9e 	bl	801526c <__assert_func>
 8014730:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8014734:	6004      	str	r4, [r0, #0]
 8014736:	60c4      	str	r4, [r0, #12]
 8014738:	f8d6 801c 	ldr.w	r8, [r6, #28]
 801473c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8014740:	b94c      	cbnz	r4, 8014756 <__pow5mult+0x66>
 8014742:	f240 2171 	movw	r1, #625	; 0x271
 8014746:	4630      	mov	r0, r6
 8014748:	f7ff ff12 	bl	8014570 <__i2b>
 801474c:	2300      	movs	r3, #0
 801474e:	f8c8 0008 	str.w	r0, [r8, #8]
 8014752:	4604      	mov	r4, r0
 8014754:	6003      	str	r3, [r0, #0]
 8014756:	f04f 0900 	mov.w	r9, #0
 801475a:	07eb      	lsls	r3, r5, #31
 801475c:	d50a      	bpl.n	8014774 <__pow5mult+0x84>
 801475e:	4639      	mov	r1, r7
 8014760:	4622      	mov	r2, r4
 8014762:	4630      	mov	r0, r6
 8014764:	f7ff ff1a 	bl	801459c <__multiply>
 8014768:	4639      	mov	r1, r7
 801476a:	4680      	mov	r8, r0
 801476c:	4630      	mov	r0, r6
 801476e:	f7ff fe49 	bl	8014404 <_Bfree>
 8014772:	4647      	mov	r7, r8
 8014774:	106d      	asrs	r5, r5, #1
 8014776:	d00b      	beq.n	8014790 <__pow5mult+0xa0>
 8014778:	6820      	ldr	r0, [r4, #0]
 801477a:	b938      	cbnz	r0, 801478c <__pow5mult+0x9c>
 801477c:	4622      	mov	r2, r4
 801477e:	4621      	mov	r1, r4
 8014780:	4630      	mov	r0, r6
 8014782:	f7ff ff0b 	bl	801459c <__multiply>
 8014786:	6020      	str	r0, [r4, #0]
 8014788:	f8c0 9000 	str.w	r9, [r0]
 801478c:	4604      	mov	r4, r0
 801478e:	e7e4      	b.n	801475a <__pow5mult+0x6a>
 8014790:	4638      	mov	r0, r7
 8014792:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014796:	bf00      	nop
 8014798:	08015ba8 	.word	0x08015ba8
 801479c:	080159dd 	.word	0x080159dd
 80147a0:	08015a5d 	.word	0x08015a5d

080147a4 <__lshift>:
 80147a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80147a8:	460c      	mov	r4, r1
 80147aa:	6849      	ldr	r1, [r1, #4]
 80147ac:	6923      	ldr	r3, [r4, #16]
 80147ae:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80147b2:	68a3      	ldr	r3, [r4, #8]
 80147b4:	4607      	mov	r7, r0
 80147b6:	4691      	mov	r9, r2
 80147b8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80147bc:	f108 0601 	add.w	r6, r8, #1
 80147c0:	42b3      	cmp	r3, r6
 80147c2:	db0b      	blt.n	80147dc <__lshift+0x38>
 80147c4:	4638      	mov	r0, r7
 80147c6:	f7ff fddd 	bl	8014384 <_Balloc>
 80147ca:	4605      	mov	r5, r0
 80147cc:	b948      	cbnz	r0, 80147e2 <__lshift+0x3e>
 80147ce:	4602      	mov	r2, r0
 80147d0:	4b28      	ldr	r3, [pc, #160]	; (8014874 <__lshift+0xd0>)
 80147d2:	4829      	ldr	r0, [pc, #164]	; (8014878 <__lshift+0xd4>)
 80147d4:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 80147d8:	f000 fd48 	bl	801526c <__assert_func>
 80147dc:	3101      	adds	r1, #1
 80147de:	005b      	lsls	r3, r3, #1
 80147e0:	e7ee      	b.n	80147c0 <__lshift+0x1c>
 80147e2:	2300      	movs	r3, #0
 80147e4:	f100 0114 	add.w	r1, r0, #20
 80147e8:	f100 0210 	add.w	r2, r0, #16
 80147ec:	4618      	mov	r0, r3
 80147ee:	4553      	cmp	r3, sl
 80147f0:	db33      	blt.n	801485a <__lshift+0xb6>
 80147f2:	6920      	ldr	r0, [r4, #16]
 80147f4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80147f8:	f104 0314 	add.w	r3, r4, #20
 80147fc:	f019 091f 	ands.w	r9, r9, #31
 8014800:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8014804:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8014808:	d02b      	beq.n	8014862 <__lshift+0xbe>
 801480a:	f1c9 0e20 	rsb	lr, r9, #32
 801480e:	468a      	mov	sl, r1
 8014810:	2200      	movs	r2, #0
 8014812:	6818      	ldr	r0, [r3, #0]
 8014814:	fa00 f009 	lsl.w	r0, r0, r9
 8014818:	4310      	orrs	r0, r2
 801481a:	f84a 0b04 	str.w	r0, [sl], #4
 801481e:	f853 2b04 	ldr.w	r2, [r3], #4
 8014822:	459c      	cmp	ip, r3
 8014824:	fa22 f20e 	lsr.w	r2, r2, lr
 8014828:	d8f3      	bhi.n	8014812 <__lshift+0x6e>
 801482a:	ebac 0304 	sub.w	r3, ip, r4
 801482e:	3b15      	subs	r3, #21
 8014830:	f023 0303 	bic.w	r3, r3, #3
 8014834:	3304      	adds	r3, #4
 8014836:	f104 0015 	add.w	r0, r4, #21
 801483a:	4584      	cmp	ip, r0
 801483c:	bf38      	it	cc
 801483e:	2304      	movcc	r3, #4
 8014840:	50ca      	str	r2, [r1, r3]
 8014842:	b10a      	cbz	r2, 8014848 <__lshift+0xa4>
 8014844:	f108 0602 	add.w	r6, r8, #2
 8014848:	3e01      	subs	r6, #1
 801484a:	4638      	mov	r0, r7
 801484c:	612e      	str	r6, [r5, #16]
 801484e:	4621      	mov	r1, r4
 8014850:	f7ff fdd8 	bl	8014404 <_Bfree>
 8014854:	4628      	mov	r0, r5
 8014856:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801485a:	f842 0f04 	str.w	r0, [r2, #4]!
 801485e:	3301      	adds	r3, #1
 8014860:	e7c5      	b.n	80147ee <__lshift+0x4a>
 8014862:	3904      	subs	r1, #4
 8014864:	f853 2b04 	ldr.w	r2, [r3], #4
 8014868:	f841 2f04 	str.w	r2, [r1, #4]!
 801486c:	459c      	cmp	ip, r3
 801486e:	d8f9      	bhi.n	8014864 <__lshift+0xc0>
 8014870:	e7ea      	b.n	8014848 <__lshift+0xa4>
 8014872:	bf00      	nop
 8014874:	08015a4c 	.word	0x08015a4c
 8014878:	08015a5d 	.word	0x08015a5d

0801487c <__mcmp>:
 801487c:	b530      	push	{r4, r5, lr}
 801487e:	6902      	ldr	r2, [r0, #16]
 8014880:	690c      	ldr	r4, [r1, #16]
 8014882:	1b12      	subs	r2, r2, r4
 8014884:	d10e      	bne.n	80148a4 <__mcmp+0x28>
 8014886:	f100 0314 	add.w	r3, r0, #20
 801488a:	3114      	adds	r1, #20
 801488c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8014890:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8014894:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8014898:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801489c:	42a5      	cmp	r5, r4
 801489e:	d003      	beq.n	80148a8 <__mcmp+0x2c>
 80148a0:	d305      	bcc.n	80148ae <__mcmp+0x32>
 80148a2:	2201      	movs	r2, #1
 80148a4:	4610      	mov	r0, r2
 80148a6:	bd30      	pop	{r4, r5, pc}
 80148a8:	4283      	cmp	r3, r0
 80148aa:	d3f3      	bcc.n	8014894 <__mcmp+0x18>
 80148ac:	e7fa      	b.n	80148a4 <__mcmp+0x28>
 80148ae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80148b2:	e7f7      	b.n	80148a4 <__mcmp+0x28>

080148b4 <__mdiff>:
 80148b4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80148b8:	460c      	mov	r4, r1
 80148ba:	4606      	mov	r6, r0
 80148bc:	4611      	mov	r1, r2
 80148be:	4620      	mov	r0, r4
 80148c0:	4690      	mov	r8, r2
 80148c2:	f7ff ffdb 	bl	801487c <__mcmp>
 80148c6:	1e05      	subs	r5, r0, #0
 80148c8:	d110      	bne.n	80148ec <__mdiff+0x38>
 80148ca:	4629      	mov	r1, r5
 80148cc:	4630      	mov	r0, r6
 80148ce:	f7ff fd59 	bl	8014384 <_Balloc>
 80148d2:	b930      	cbnz	r0, 80148e2 <__mdiff+0x2e>
 80148d4:	4b3a      	ldr	r3, [pc, #232]	; (80149c0 <__mdiff+0x10c>)
 80148d6:	4602      	mov	r2, r0
 80148d8:	f240 2137 	movw	r1, #567	; 0x237
 80148dc:	4839      	ldr	r0, [pc, #228]	; (80149c4 <__mdiff+0x110>)
 80148de:	f000 fcc5 	bl	801526c <__assert_func>
 80148e2:	2301      	movs	r3, #1
 80148e4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80148e8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80148ec:	bfa4      	itt	ge
 80148ee:	4643      	movge	r3, r8
 80148f0:	46a0      	movge	r8, r4
 80148f2:	4630      	mov	r0, r6
 80148f4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80148f8:	bfa6      	itte	ge
 80148fa:	461c      	movge	r4, r3
 80148fc:	2500      	movge	r5, #0
 80148fe:	2501      	movlt	r5, #1
 8014900:	f7ff fd40 	bl	8014384 <_Balloc>
 8014904:	b920      	cbnz	r0, 8014910 <__mdiff+0x5c>
 8014906:	4b2e      	ldr	r3, [pc, #184]	; (80149c0 <__mdiff+0x10c>)
 8014908:	4602      	mov	r2, r0
 801490a:	f240 2145 	movw	r1, #581	; 0x245
 801490e:	e7e5      	b.n	80148dc <__mdiff+0x28>
 8014910:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8014914:	6926      	ldr	r6, [r4, #16]
 8014916:	60c5      	str	r5, [r0, #12]
 8014918:	f104 0914 	add.w	r9, r4, #20
 801491c:	f108 0514 	add.w	r5, r8, #20
 8014920:	f100 0e14 	add.w	lr, r0, #20
 8014924:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8014928:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 801492c:	f108 0210 	add.w	r2, r8, #16
 8014930:	46f2      	mov	sl, lr
 8014932:	2100      	movs	r1, #0
 8014934:	f859 3b04 	ldr.w	r3, [r9], #4
 8014938:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801493c:	fa11 f88b 	uxtah	r8, r1, fp
 8014940:	b299      	uxth	r1, r3
 8014942:	0c1b      	lsrs	r3, r3, #16
 8014944:	eba8 0801 	sub.w	r8, r8, r1
 8014948:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801494c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8014950:	fa1f f888 	uxth.w	r8, r8
 8014954:	1419      	asrs	r1, r3, #16
 8014956:	454e      	cmp	r6, r9
 8014958:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801495c:	f84a 3b04 	str.w	r3, [sl], #4
 8014960:	d8e8      	bhi.n	8014934 <__mdiff+0x80>
 8014962:	1b33      	subs	r3, r6, r4
 8014964:	3b15      	subs	r3, #21
 8014966:	f023 0303 	bic.w	r3, r3, #3
 801496a:	3304      	adds	r3, #4
 801496c:	3415      	adds	r4, #21
 801496e:	42a6      	cmp	r6, r4
 8014970:	bf38      	it	cc
 8014972:	2304      	movcc	r3, #4
 8014974:	441d      	add	r5, r3
 8014976:	4473      	add	r3, lr
 8014978:	469e      	mov	lr, r3
 801497a:	462e      	mov	r6, r5
 801497c:	4566      	cmp	r6, ip
 801497e:	d30e      	bcc.n	801499e <__mdiff+0xea>
 8014980:	f10c 0203 	add.w	r2, ip, #3
 8014984:	1b52      	subs	r2, r2, r5
 8014986:	f022 0203 	bic.w	r2, r2, #3
 801498a:	3d03      	subs	r5, #3
 801498c:	45ac      	cmp	ip, r5
 801498e:	bf38      	it	cc
 8014990:	2200      	movcc	r2, #0
 8014992:	4413      	add	r3, r2
 8014994:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8014998:	b17a      	cbz	r2, 80149ba <__mdiff+0x106>
 801499a:	6107      	str	r7, [r0, #16]
 801499c:	e7a4      	b.n	80148e8 <__mdiff+0x34>
 801499e:	f856 8b04 	ldr.w	r8, [r6], #4
 80149a2:	fa11 f288 	uxtah	r2, r1, r8
 80149a6:	1414      	asrs	r4, r2, #16
 80149a8:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80149ac:	b292      	uxth	r2, r2
 80149ae:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80149b2:	f84e 2b04 	str.w	r2, [lr], #4
 80149b6:	1421      	asrs	r1, r4, #16
 80149b8:	e7e0      	b.n	801497c <__mdiff+0xc8>
 80149ba:	3f01      	subs	r7, #1
 80149bc:	e7ea      	b.n	8014994 <__mdiff+0xe0>
 80149be:	bf00      	nop
 80149c0:	08015a4c 	.word	0x08015a4c
 80149c4:	08015a5d 	.word	0x08015a5d

080149c8 <__d2b>:
 80149c8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80149cc:	460f      	mov	r7, r1
 80149ce:	2101      	movs	r1, #1
 80149d0:	ec59 8b10 	vmov	r8, r9, d0
 80149d4:	4616      	mov	r6, r2
 80149d6:	f7ff fcd5 	bl	8014384 <_Balloc>
 80149da:	4604      	mov	r4, r0
 80149dc:	b930      	cbnz	r0, 80149ec <__d2b+0x24>
 80149de:	4602      	mov	r2, r0
 80149e0:	4b24      	ldr	r3, [pc, #144]	; (8014a74 <__d2b+0xac>)
 80149e2:	4825      	ldr	r0, [pc, #148]	; (8014a78 <__d2b+0xb0>)
 80149e4:	f240 310f 	movw	r1, #783	; 0x30f
 80149e8:	f000 fc40 	bl	801526c <__assert_func>
 80149ec:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80149f0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80149f4:	bb2d      	cbnz	r5, 8014a42 <__d2b+0x7a>
 80149f6:	9301      	str	r3, [sp, #4]
 80149f8:	f1b8 0300 	subs.w	r3, r8, #0
 80149fc:	d026      	beq.n	8014a4c <__d2b+0x84>
 80149fe:	4668      	mov	r0, sp
 8014a00:	9300      	str	r3, [sp, #0]
 8014a02:	f7ff fd87 	bl	8014514 <__lo0bits>
 8014a06:	e9dd 1200 	ldrd	r1, r2, [sp]
 8014a0a:	b1e8      	cbz	r0, 8014a48 <__d2b+0x80>
 8014a0c:	f1c0 0320 	rsb	r3, r0, #32
 8014a10:	fa02 f303 	lsl.w	r3, r2, r3
 8014a14:	430b      	orrs	r3, r1
 8014a16:	40c2      	lsrs	r2, r0
 8014a18:	6163      	str	r3, [r4, #20]
 8014a1a:	9201      	str	r2, [sp, #4]
 8014a1c:	9b01      	ldr	r3, [sp, #4]
 8014a1e:	61a3      	str	r3, [r4, #24]
 8014a20:	2b00      	cmp	r3, #0
 8014a22:	bf14      	ite	ne
 8014a24:	2202      	movne	r2, #2
 8014a26:	2201      	moveq	r2, #1
 8014a28:	6122      	str	r2, [r4, #16]
 8014a2a:	b1bd      	cbz	r5, 8014a5c <__d2b+0x94>
 8014a2c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8014a30:	4405      	add	r5, r0
 8014a32:	603d      	str	r5, [r7, #0]
 8014a34:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8014a38:	6030      	str	r0, [r6, #0]
 8014a3a:	4620      	mov	r0, r4
 8014a3c:	b003      	add	sp, #12
 8014a3e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014a42:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8014a46:	e7d6      	b.n	80149f6 <__d2b+0x2e>
 8014a48:	6161      	str	r1, [r4, #20]
 8014a4a:	e7e7      	b.n	8014a1c <__d2b+0x54>
 8014a4c:	a801      	add	r0, sp, #4
 8014a4e:	f7ff fd61 	bl	8014514 <__lo0bits>
 8014a52:	9b01      	ldr	r3, [sp, #4]
 8014a54:	6163      	str	r3, [r4, #20]
 8014a56:	3020      	adds	r0, #32
 8014a58:	2201      	movs	r2, #1
 8014a5a:	e7e5      	b.n	8014a28 <__d2b+0x60>
 8014a5c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8014a60:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8014a64:	6038      	str	r0, [r7, #0]
 8014a66:	6918      	ldr	r0, [r3, #16]
 8014a68:	f7ff fd34 	bl	80144d4 <__hi0bits>
 8014a6c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8014a70:	e7e2      	b.n	8014a38 <__d2b+0x70>
 8014a72:	bf00      	nop
 8014a74:	08015a4c 	.word	0x08015a4c
 8014a78:	08015a5d 	.word	0x08015a5d

08014a7c <__ssputs_r>:
 8014a7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014a80:	688e      	ldr	r6, [r1, #8]
 8014a82:	461f      	mov	r7, r3
 8014a84:	42be      	cmp	r6, r7
 8014a86:	680b      	ldr	r3, [r1, #0]
 8014a88:	4682      	mov	sl, r0
 8014a8a:	460c      	mov	r4, r1
 8014a8c:	4690      	mov	r8, r2
 8014a8e:	d82c      	bhi.n	8014aea <__ssputs_r+0x6e>
 8014a90:	898a      	ldrh	r2, [r1, #12]
 8014a92:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8014a96:	d026      	beq.n	8014ae6 <__ssputs_r+0x6a>
 8014a98:	6965      	ldr	r5, [r4, #20]
 8014a9a:	6909      	ldr	r1, [r1, #16]
 8014a9c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8014aa0:	eba3 0901 	sub.w	r9, r3, r1
 8014aa4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8014aa8:	1c7b      	adds	r3, r7, #1
 8014aaa:	444b      	add	r3, r9
 8014aac:	106d      	asrs	r5, r5, #1
 8014aae:	429d      	cmp	r5, r3
 8014ab0:	bf38      	it	cc
 8014ab2:	461d      	movcc	r5, r3
 8014ab4:	0553      	lsls	r3, r2, #21
 8014ab6:	d527      	bpl.n	8014b08 <__ssputs_r+0x8c>
 8014ab8:	4629      	mov	r1, r5
 8014aba:	f7ff fbd7 	bl	801426c <_malloc_r>
 8014abe:	4606      	mov	r6, r0
 8014ac0:	b360      	cbz	r0, 8014b1c <__ssputs_r+0xa0>
 8014ac2:	6921      	ldr	r1, [r4, #16]
 8014ac4:	464a      	mov	r2, r9
 8014ac6:	f7fe fcd3 	bl	8013470 <memcpy>
 8014aca:	89a3      	ldrh	r3, [r4, #12]
 8014acc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8014ad0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014ad4:	81a3      	strh	r3, [r4, #12]
 8014ad6:	6126      	str	r6, [r4, #16]
 8014ad8:	6165      	str	r5, [r4, #20]
 8014ada:	444e      	add	r6, r9
 8014adc:	eba5 0509 	sub.w	r5, r5, r9
 8014ae0:	6026      	str	r6, [r4, #0]
 8014ae2:	60a5      	str	r5, [r4, #8]
 8014ae4:	463e      	mov	r6, r7
 8014ae6:	42be      	cmp	r6, r7
 8014ae8:	d900      	bls.n	8014aec <__ssputs_r+0x70>
 8014aea:	463e      	mov	r6, r7
 8014aec:	6820      	ldr	r0, [r4, #0]
 8014aee:	4632      	mov	r2, r6
 8014af0:	4641      	mov	r1, r8
 8014af2:	f000 fb6f 	bl	80151d4 <memmove>
 8014af6:	68a3      	ldr	r3, [r4, #8]
 8014af8:	1b9b      	subs	r3, r3, r6
 8014afa:	60a3      	str	r3, [r4, #8]
 8014afc:	6823      	ldr	r3, [r4, #0]
 8014afe:	4433      	add	r3, r6
 8014b00:	6023      	str	r3, [r4, #0]
 8014b02:	2000      	movs	r0, #0
 8014b04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014b08:	462a      	mov	r2, r5
 8014b0a:	f000 fbf5 	bl	80152f8 <_realloc_r>
 8014b0e:	4606      	mov	r6, r0
 8014b10:	2800      	cmp	r0, #0
 8014b12:	d1e0      	bne.n	8014ad6 <__ssputs_r+0x5a>
 8014b14:	6921      	ldr	r1, [r4, #16]
 8014b16:	4650      	mov	r0, sl
 8014b18:	f7ff fb34 	bl	8014184 <_free_r>
 8014b1c:	230c      	movs	r3, #12
 8014b1e:	f8ca 3000 	str.w	r3, [sl]
 8014b22:	89a3      	ldrh	r3, [r4, #12]
 8014b24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014b28:	81a3      	strh	r3, [r4, #12]
 8014b2a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014b2e:	e7e9      	b.n	8014b04 <__ssputs_r+0x88>

08014b30 <_svfiprintf_r>:
 8014b30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014b34:	4698      	mov	r8, r3
 8014b36:	898b      	ldrh	r3, [r1, #12]
 8014b38:	061b      	lsls	r3, r3, #24
 8014b3a:	b09d      	sub	sp, #116	; 0x74
 8014b3c:	4607      	mov	r7, r0
 8014b3e:	460d      	mov	r5, r1
 8014b40:	4614      	mov	r4, r2
 8014b42:	d50e      	bpl.n	8014b62 <_svfiprintf_r+0x32>
 8014b44:	690b      	ldr	r3, [r1, #16]
 8014b46:	b963      	cbnz	r3, 8014b62 <_svfiprintf_r+0x32>
 8014b48:	2140      	movs	r1, #64	; 0x40
 8014b4a:	f7ff fb8f 	bl	801426c <_malloc_r>
 8014b4e:	6028      	str	r0, [r5, #0]
 8014b50:	6128      	str	r0, [r5, #16]
 8014b52:	b920      	cbnz	r0, 8014b5e <_svfiprintf_r+0x2e>
 8014b54:	230c      	movs	r3, #12
 8014b56:	603b      	str	r3, [r7, #0]
 8014b58:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014b5c:	e0d0      	b.n	8014d00 <_svfiprintf_r+0x1d0>
 8014b5e:	2340      	movs	r3, #64	; 0x40
 8014b60:	616b      	str	r3, [r5, #20]
 8014b62:	2300      	movs	r3, #0
 8014b64:	9309      	str	r3, [sp, #36]	; 0x24
 8014b66:	2320      	movs	r3, #32
 8014b68:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8014b6c:	f8cd 800c 	str.w	r8, [sp, #12]
 8014b70:	2330      	movs	r3, #48	; 0x30
 8014b72:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8014d18 <_svfiprintf_r+0x1e8>
 8014b76:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8014b7a:	f04f 0901 	mov.w	r9, #1
 8014b7e:	4623      	mov	r3, r4
 8014b80:	469a      	mov	sl, r3
 8014b82:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014b86:	b10a      	cbz	r2, 8014b8c <_svfiprintf_r+0x5c>
 8014b88:	2a25      	cmp	r2, #37	; 0x25
 8014b8a:	d1f9      	bne.n	8014b80 <_svfiprintf_r+0x50>
 8014b8c:	ebba 0b04 	subs.w	fp, sl, r4
 8014b90:	d00b      	beq.n	8014baa <_svfiprintf_r+0x7a>
 8014b92:	465b      	mov	r3, fp
 8014b94:	4622      	mov	r2, r4
 8014b96:	4629      	mov	r1, r5
 8014b98:	4638      	mov	r0, r7
 8014b9a:	f7ff ff6f 	bl	8014a7c <__ssputs_r>
 8014b9e:	3001      	adds	r0, #1
 8014ba0:	f000 80a9 	beq.w	8014cf6 <_svfiprintf_r+0x1c6>
 8014ba4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014ba6:	445a      	add	r2, fp
 8014ba8:	9209      	str	r2, [sp, #36]	; 0x24
 8014baa:	f89a 3000 	ldrb.w	r3, [sl]
 8014bae:	2b00      	cmp	r3, #0
 8014bb0:	f000 80a1 	beq.w	8014cf6 <_svfiprintf_r+0x1c6>
 8014bb4:	2300      	movs	r3, #0
 8014bb6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8014bba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014bbe:	f10a 0a01 	add.w	sl, sl, #1
 8014bc2:	9304      	str	r3, [sp, #16]
 8014bc4:	9307      	str	r3, [sp, #28]
 8014bc6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8014bca:	931a      	str	r3, [sp, #104]	; 0x68
 8014bcc:	4654      	mov	r4, sl
 8014bce:	2205      	movs	r2, #5
 8014bd0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014bd4:	4850      	ldr	r0, [pc, #320]	; (8014d18 <_svfiprintf_r+0x1e8>)
 8014bd6:	f7eb fb23 	bl	8000220 <memchr>
 8014bda:	9a04      	ldr	r2, [sp, #16]
 8014bdc:	b9d8      	cbnz	r0, 8014c16 <_svfiprintf_r+0xe6>
 8014bde:	06d0      	lsls	r0, r2, #27
 8014be0:	bf44      	itt	mi
 8014be2:	2320      	movmi	r3, #32
 8014be4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014be8:	0711      	lsls	r1, r2, #28
 8014bea:	bf44      	itt	mi
 8014bec:	232b      	movmi	r3, #43	; 0x2b
 8014bee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014bf2:	f89a 3000 	ldrb.w	r3, [sl]
 8014bf6:	2b2a      	cmp	r3, #42	; 0x2a
 8014bf8:	d015      	beq.n	8014c26 <_svfiprintf_r+0xf6>
 8014bfa:	9a07      	ldr	r2, [sp, #28]
 8014bfc:	4654      	mov	r4, sl
 8014bfe:	2000      	movs	r0, #0
 8014c00:	f04f 0c0a 	mov.w	ip, #10
 8014c04:	4621      	mov	r1, r4
 8014c06:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014c0a:	3b30      	subs	r3, #48	; 0x30
 8014c0c:	2b09      	cmp	r3, #9
 8014c0e:	d94d      	bls.n	8014cac <_svfiprintf_r+0x17c>
 8014c10:	b1b0      	cbz	r0, 8014c40 <_svfiprintf_r+0x110>
 8014c12:	9207      	str	r2, [sp, #28]
 8014c14:	e014      	b.n	8014c40 <_svfiprintf_r+0x110>
 8014c16:	eba0 0308 	sub.w	r3, r0, r8
 8014c1a:	fa09 f303 	lsl.w	r3, r9, r3
 8014c1e:	4313      	orrs	r3, r2
 8014c20:	9304      	str	r3, [sp, #16]
 8014c22:	46a2      	mov	sl, r4
 8014c24:	e7d2      	b.n	8014bcc <_svfiprintf_r+0x9c>
 8014c26:	9b03      	ldr	r3, [sp, #12]
 8014c28:	1d19      	adds	r1, r3, #4
 8014c2a:	681b      	ldr	r3, [r3, #0]
 8014c2c:	9103      	str	r1, [sp, #12]
 8014c2e:	2b00      	cmp	r3, #0
 8014c30:	bfbb      	ittet	lt
 8014c32:	425b      	neglt	r3, r3
 8014c34:	f042 0202 	orrlt.w	r2, r2, #2
 8014c38:	9307      	strge	r3, [sp, #28]
 8014c3a:	9307      	strlt	r3, [sp, #28]
 8014c3c:	bfb8      	it	lt
 8014c3e:	9204      	strlt	r2, [sp, #16]
 8014c40:	7823      	ldrb	r3, [r4, #0]
 8014c42:	2b2e      	cmp	r3, #46	; 0x2e
 8014c44:	d10c      	bne.n	8014c60 <_svfiprintf_r+0x130>
 8014c46:	7863      	ldrb	r3, [r4, #1]
 8014c48:	2b2a      	cmp	r3, #42	; 0x2a
 8014c4a:	d134      	bne.n	8014cb6 <_svfiprintf_r+0x186>
 8014c4c:	9b03      	ldr	r3, [sp, #12]
 8014c4e:	1d1a      	adds	r2, r3, #4
 8014c50:	681b      	ldr	r3, [r3, #0]
 8014c52:	9203      	str	r2, [sp, #12]
 8014c54:	2b00      	cmp	r3, #0
 8014c56:	bfb8      	it	lt
 8014c58:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8014c5c:	3402      	adds	r4, #2
 8014c5e:	9305      	str	r3, [sp, #20]
 8014c60:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8014d28 <_svfiprintf_r+0x1f8>
 8014c64:	7821      	ldrb	r1, [r4, #0]
 8014c66:	2203      	movs	r2, #3
 8014c68:	4650      	mov	r0, sl
 8014c6a:	f7eb fad9 	bl	8000220 <memchr>
 8014c6e:	b138      	cbz	r0, 8014c80 <_svfiprintf_r+0x150>
 8014c70:	9b04      	ldr	r3, [sp, #16]
 8014c72:	eba0 000a 	sub.w	r0, r0, sl
 8014c76:	2240      	movs	r2, #64	; 0x40
 8014c78:	4082      	lsls	r2, r0
 8014c7a:	4313      	orrs	r3, r2
 8014c7c:	3401      	adds	r4, #1
 8014c7e:	9304      	str	r3, [sp, #16]
 8014c80:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014c84:	4825      	ldr	r0, [pc, #148]	; (8014d1c <_svfiprintf_r+0x1ec>)
 8014c86:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8014c8a:	2206      	movs	r2, #6
 8014c8c:	f7eb fac8 	bl	8000220 <memchr>
 8014c90:	2800      	cmp	r0, #0
 8014c92:	d038      	beq.n	8014d06 <_svfiprintf_r+0x1d6>
 8014c94:	4b22      	ldr	r3, [pc, #136]	; (8014d20 <_svfiprintf_r+0x1f0>)
 8014c96:	bb1b      	cbnz	r3, 8014ce0 <_svfiprintf_r+0x1b0>
 8014c98:	9b03      	ldr	r3, [sp, #12]
 8014c9a:	3307      	adds	r3, #7
 8014c9c:	f023 0307 	bic.w	r3, r3, #7
 8014ca0:	3308      	adds	r3, #8
 8014ca2:	9303      	str	r3, [sp, #12]
 8014ca4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014ca6:	4433      	add	r3, r6
 8014ca8:	9309      	str	r3, [sp, #36]	; 0x24
 8014caa:	e768      	b.n	8014b7e <_svfiprintf_r+0x4e>
 8014cac:	fb0c 3202 	mla	r2, ip, r2, r3
 8014cb0:	460c      	mov	r4, r1
 8014cb2:	2001      	movs	r0, #1
 8014cb4:	e7a6      	b.n	8014c04 <_svfiprintf_r+0xd4>
 8014cb6:	2300      	movs	r3, #0
 8014cb8:	3401      	adds	r4, #1
 8014cba:	9305      	str	r3, [sp, #20]
 8014cbc:	4619      	mov	r1, r3
 8014cbe:	f04f 0c0a 	mov.w	ip, #10
 8014cc2:	4620      	mov	r0, r4
 8014cc4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014cc8:	3a30      	subs	r2, #48	; 0x30
 8014cca:	2a09      	cmp	r2, #9
 8014ccc:	d903      	bls.n	8014cd6 <_svfiprintf_r+0x1a6>
 8014cce:	2b00      	cmp	r3, #0
 8014cd0:	d0c6      	beq.n	8014c60 <_svfiprintf_r+0x130>
 8014cd2:	9105      	str	r1, [sp, #20]
 8014cd4:	e7c4      	b.n	8014c60 <_svfiprintf_r+0x130>
 8014cd6:	fb0c 2101 	mla	r1, ip, r1, r2
 8014cda:	4604      	mov	r4, r0
 8014cdc:	2301      	movs	r3, #1
 8014cde:	e7f0      	b.n	8014cc2 <_svfiprintf_r+0x192>
 8014ce0:	ab03      	add	r3, sp, #12
 8014ce2:	9300      	str	r3, [sp, #0]
 8014ce4:	462a      	mov	r2, r5
 8014ce6:	4b0f      	ldr	r3, [pc, #60]	; (8014d24 <_svfiprintf_r+0x1f4>)
 8014ce8:	a904      	add	r1, sp, #16
 8014cea:	4638      	mov	r0, r7
 8014cec:	f7fd fcdc 	bl	80126a8 <_printf_float>
 8014cf0:	1c42      	adds	r2, r0, #1
 8014cf2:	4606      	mov	r6, r0
 8014cf4:	d1d6      	bne.n	8014ca4 <_svfiprintf_r+0x174>
 8014cf6:	89ab      	ldrh	r3, [r5, #12]
 8014cf8:	065b      	lsls	r3, r3, #25
 8014cfa:	f53f af2d 	bmi.w	8014b58 <_svfiprintf_r+0x28>
 8014cfe:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014d00:	b01d      	add	sp, #116	; 0x74
 8014d02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014d06:	ab03      	add	r3, sp, #12
 8014d08:	9300      	str	r3, [sp, #0]
 8014d0a:	462a      	mov	r2, r5
 8014d0c:	4b05      	ldr	r3, [pc, #20]	; (8014d24 <_svfiprintf_r+0x1f4>)
 8014d0e:	a904      	add	r1, sp, #16
 8014d10:	4638      	mov	r0, r7
 8014d12:	f7fd ff6d 	bl	8012bf0 <_printf_i>
 8014d16:	e7eb      	b.n	8014cf0 <_svfiprintf_r+0x1c0>
 8014d18:	08015bb4 	.word	0x08015bb4
 8014d1c:	08015bbe 	.word	0x08015bbe
 8014d20:	080126a9 	.word	0x080126a9
 8014d24:	08014a7d 	.word	0x08014a7d
 8014d28:	08015bba 	.word	0x08015bba

08014d2c <__sfputc_r>:
 8014d2c:	6893      	ldr	r3, [r2, #8]
 8014d2e:	3b01      	subs	r3, #1
 8014d30:	2b00      	cmp	r3, #0
 8014d32:	b410      	push	{r4}
 8014d34:	6093      	str	r3, [r2, #8]
 8014d36:	da08      	bge.n	8014d4a <__sfputc_r+0x1e>
 8014d38:	6994      	ldr	r4, [r2, #24]
 8014d3a:	42a3      	cmp	r3, r4
 8014d3c:	db01      	blt.n	8014d42 <__sfputc_r+0x16>
 8014d3e:	290a      	cmp	r1, #10
 8014d40:	d103      	bne.n	8014d4a <__sfputc_r+0x1e>
 8014d42:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014d46:	f7fe ba2a 	b.w	801319e <__swbuf_r>
 8014d4a:	6813      	ldr	r3, [r2, #0]
 8014d4c:	1c58      	adds	r0, r3, #1
 8014d4e:	6010      	str	r0, [r2, #0]
 8014d50:	7019      	strb	r1, [r3, #0]
 8014d52:	4608      	mov	r0, r1
 8014d54:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014d58:	4770      	bx	lr

08014d5a <__sfputs_r>:
 8014d5a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014d5c:	4606      	mov	r6, r0
 8014d5e:	460f      	mov	r7, r1
 8014d60:	4614      	mov	r4, r2
 8014d62:	18d5      	adds	r5, r2, r3
 8014d64:	42ac      	cmp	r4, r5
 8014d66:	d101      	bne.n	8014d6c <__sfputs_r+0x12>
 8014d68:	2000      	movs	r0, #0
 8014d6a:	e007      	b.n	8014d7c <__sfputs_r+0x22>
 8014d6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014d70:	463a      	mov	r2, r7
 8014d72:	4630      	mov	r0, r6
 8014d74:	f7ff ffda 	bl	8014d2c <__sfputc_r>
 8014d78:	1c43      	adds	r3, r0, #1
 8014d7a:	d1f3      	bne.n	8014d64 <__sfputs_r+0xa>
 8014d7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08014d80 <_vfiprintf_r>:
 8014d80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014d84:	460d      	mov	r5, r1
 8014d86:	b09d      	sub	sp, #116	; 0x74
 8014d88:	4614      	mov	r4, r2
 8014d8a:	4698      	mov	r8, r3
 8014d8c:	4606      	mov	r6, r0
 8014d8e:	b118      	cbz	r0, 8014d98 <_vfiprintf_r+0x18>
 8014d90:	6a03      	ldr	r3, [r0, #32]
 8014d92:	b90b      	cbnz	r3, 8014d98 <_vfiprintf_r+0x18>
 8014d94:	f7fe f8c8 	bl	8012f28 <__sinit>
 8014d98:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014d9a:	07d9      	lsls	r1, r3, #31
 8014d9c:	d405      	bmi.n	8014daa <_vfiprintf_r+0x2a>
 8014d9e:	89ab      	ldrh	r3, [r5, #12]
 8014da0:	059a      	lsls	r2, r3, #22
 8014da2:	d402      	bmi.n	8014daa <_vfiprintf_r+0x2a>
 8014da4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014da6:	f7fe fb61 	bl	801346c <__retarget_lock_acquire_recursive>
 8014daa:	89ab      	ldrh	r3, [r5, #12]
 8014dac:	071b      	lsls	r3, r3, #28
 8014dae:	d501      	bpl.n	8014db4 <_vfiprintf_r+0x34>
 8014db0:	692b      	ldr	r3, [r5, #16]
 8014db2:	b99b      	cbnz	r3, 8014ddc <_vfiprintf_r+0x5c>
 8014db4:	4629      	mov	r1, r5
 8014db6:	4630      	mov	r0, r6
 8014db8:	f7fe fa2e 	bl	8013218 <__swsetup_r>
 8014dbc:	b170      	cbz	r0, 8014ddc <_vfiprintf_r+0x5c>
 8014dbe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014dc0:	07dc      	lsls	r4, r3, #31
 8014dc2:	d504      	bpl.n	8014dce <_vfiprintf_r+0x4e>
 8014dc4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014dc8:	b01d      	add	sp, #116	; 0x74
 8014dca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014dce:	89ab      	ldrh	r3, [r5, #12]
 8014dd0:	0598      	lsls	r0, r3, #22
 8014dd2:	d4f7      	bmi.n	8014dc4 <_vfiprintf_r+0x44>
 8014dd4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014dd6:	f7fe fb4a 	bl	801346e <__retarget_lock_release_recursive>
 8014dda:	e7f3      	b.n	8014dc4 <_vfiprintf_r+0x44>
 8014ddc:	2300      	movs	r3, #0
 8014dde:	9309      	str	r3, [sp, #36]	; 0x24
 8014de0:	2320      	movs	r3, #32
 8014de2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8014de6:	f8cd 800c 	str.w	r8, [sp, #12]
 8014dea:	2330      	movs	r3, #48	; 0x30
 8014dec:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8014fa0 <_vfiprintf_r+0x220>
 8014df0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8014df4:	f04f 0901 	mov.w	r9, #1
 8014df8:	4623      	mov	r3, r4
 8014dfa:	469a      	mov	sl, r3
 8014dfc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014e00:	b10a      	cbz	r2, 8014e06 <_vfiprintf_r+0x86>
 8014e02:	2a25      	cmp	r2, #37	; 0x25
 8014e04:	d1f9      	bne.n	8014dfa <_vfiprintf_r+0x7a>
 8014e06:	ebba 0b04 	subs.w	fp, sl, r4
 8014e0a:	d00b      	beq.n	8014e24 <_vfiprintf_r+0xa4>
 8014e0c:	465b      	mov	r3, fp
 8014e0e:	4622      	mov	r2, r4
 8014e10:	4629      	mov	r1, r5
 8014e12:	4630      	mov	r0, r6
 8014e14:	f7ff ffa1 	bl	8014d5a <__sfputs_r>
 8014e18:	3001      	adds	r0, #1
 8014e1a:	f000 80a9 	beq.w	8014f70 <_vfiprintf_r+0x1f0>
 8014e1e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014e20:	445a      	add	r2, fp
 8014e22:	9209      	str	r2, [sp, #36]	; 0x24
 8014e24:	f89a 3000 	ldrb.w	r3, [sl]
 8014e28:	2b00      	cmp	r3, #0
 8014e2a:	f000 80a1 	beq.w	8014f70 <_vfiprintf_r+0x1f0>
 8014e2e:	2300      	movs	r3, #0
 8014e30:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8014e34:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014e38:	f10a 0a01 	add.w	sl, sl, #1
 8014e3c:	9304      	str	r3, [sp, #16]
 8014e3e:	9307      	str	r3, [sp, #28]
 8014e40:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8014e44:	931a      	str	r3, [sp, #104]	; 0x68
 8014e46:	4654      	mov	r4, sl
 8014e48:	2205      	movs	r2, #5
 8014e4a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014e4e:	4854      	ldr	r0, [pc, #336]	; (8014fa0 <_vfiprintf_r+0x220>)
 8014e50:	f7eb f9e6 	bl	8000220 <memchr>
 8014e54:	9a04      	ldr	r2, [sp, #16]
 8014e56:	b9d8      	cbnz	r0, 8014e90 <_vfiprintf_r+0x110>
 8014e58:	06d1      	lsls	r1, r2, #27
 8014e5a:	bf44      	itt	mi
 8014e5c:	2320      	movmi	r3, #32
 8014e5e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014e62:	0713      	lsls	r3, r2, #28
 8014e64:	bf44      	itt	mi
 8014e66:	232b      	movmi	r3, #43	; 0x2b
 8014e68:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014e6c:	f89a 3000 	ldrb.w	r3, [sl]
 8014e70:	2b2a      	cmp	r3, #42	; 0x2a
 8014e72:	d015      	beq.n	8014ea0 <_vfiprintf_r+0x120>
 8014e74:	9a07      	ldr	r2, [sp, #28]
 8014e76:	4654      	mov	r4, sl
 8014e78:	2000      	movs	r0, #0
 8014e7a:	f04f 0c0a 	mov.w	ip, #10
 8014e7e:	4621      	mov	r1, r4
 8014e80:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014e84:	3b30      	subs	r3, #48	; 0x30
 8014e86:	2b09      	cmp	r3, #9
 8014e88:	d94d      	bls.n	8014f26 <_vfiprintf_r+0x1a6>
 8014e8a:	b1b0      	cbz	r0, 8014eba <_vfiprintf_r+0x13a>
 8014e8c:	9207      	str	r2, [sp, #28]
 8014e8e:	e014      	b.n	8014eba <_vfiprintf_r+0x13a>
 8014e90:	eba0 0308 	sub.w	r3, r0, r8
 8014e94:	fa09 f303 	lsl.w	r3, r9, r3
 8014e98:	4313      	orrs	r3, r2
 8014e9a:	9304      	str	r3, [sp, #16]
 8014e9c:	46a2      	mov	sl, r4
 8014e9e:	e7d2      	b.n	8014e46 <_vfiprintf_r+0xc6>
 8014ea0:	9b03      	ldr	r3, [sp, #12]
 8014ea2:	1d19      	adds	r1, r3, #4
 8014ea4:	681b      	ldr	r3, [r3, #0]
 8014ea6:	9103      	str	r1, [sp, #12]
 8014ea8:	2b00      	cmp	r3, #0
 8014eaa:	bfbb      	ittet	lt
 8014eac:	425b      	neglt	r3, r3
 8014eae:	f042 0202 	orrlt.w	r2, r2, #2
 8014eb2:	9307      	strge	r3, [sp, #28]
 8014eb4:	9307      	strlt	r3, [sp, #28]
 8014eb6:	bfb8      	it	lt
 8014eb8:	9204      	strlt	r2, [sp, #16]
 8014eba:	7823      	ldrb	r3, [r4, #0]
 8014ebc:	2b2e      	cmp	r3, #46	; 0x2e
 8014ebe:	d10c      	bne.n	8014eda <_vfiprintf_r+0x15a>
 8014ec0:	7863      	ldrb	r3, [r4, #1]
 8014ec2:	2b2a      	cmp	r3, #42	; 0x2a
 8014ec4:	d134      	bne.n	8014f30 <_vfiprintf_r+0x1b0>
 8014ec6:	9b03      	ldr	r3, [sp, #12]
 8014ec8:	1d1a      	adds	r2, r3, #4
 8014eca:	681b      	ldr	r3, [r3, #0]
 8014ecc:	9203      	str	r2, [sp, #12]
 8014ece:	2b00      	cmp	r3, #0
 8014ed0:	bfb8      	it	lt
 8014ed2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8014ed6:	3402      	adds	r4, #2
 8014ed8:	9305      	str	r3, [sp, #20]
 8014eda:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8014fb0 <_vfiprintf_r+0x230>
 8014ede:	7821      	ldrb	r1, [r4, #0]
 8014ee0:	2203      	movs	r2, #3
 8014ee2:	4650      	mov	r0, sl
 8014ee4:	f7eb f99c 	bl	8000220 <memchr>
 8014ee8:	b138      	cbz	r0, 8014efa <_vfiprintf_r+0x17a>
 8014eea:	9b04      	ldr	r3, [sp, #16]
 8014eec:	eba0 000a 	sub.w	r0, r0, sl
 8014ef0:	2240      	movs	r2, #64	; 0x40
 8014ef2:	4082      	lsls	r2, r0
 8014ef4:	4313      	orrs	r3, r2
 8014ef6:	3401      	adds	r4, #1
 8014ef8:	9304      	str	r3, [sp, #16]
 8014efa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014efe:	4829      	ldr	r0, [pc, #164]	; (8014fa4 <_vfiprintf_r+0x224>)
 8014f00:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8014f04:	2206      	movs	r2, #6
 8014f06:	f7eb f98b 	bl	8000220 <memchr>
 8014f0a:	2800      	cmp	r0, #0
 8014f0c:	d03f      	beq.n	8014f8e <_vfiprintf_r+0x20e>
 8014f0e:	4b26      	ldr	r3, [pc, #152]	; (8014fa8 <_vfiprintf_r+0x228>)
 8014f10:	bb1b      	cbnz	r3, 8014f5a <_vfiprintf_r+0x1da>
 8014f12:	9b03      	ldr	r3, [sp, #12]
 8014f14:	3307      	adds	r3, #7
 8014f16:	f023 0307 	bic.w	r3, r3, #7
 8014f1a:	3308      	adds	r3, #8
 8014f1c:	9303      	str	r3, [sp, #12]
 8014f1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014f20:	443b      	add	r3, r7
 8014f22:	9309      	str	r3, [sp, #36]	; 0x24
 8014f24:	e768      	b.n	8014df8 <_vfiprintf_r+0x78>
 8014f26:	fb0c 3202 	mla	r2, ip, r2, r3
 8014f2a:	460c      	mov	r4, r1
 8014f2c:	2001      	movs	r0, #1
 8014f2e:	e7a6      	b.n	8014e7e <_vfiprintf_r+0xfe>
 8014f30:	2300      	movs	r3, #0
 8014f32:	3401      	adds	r4, #1
 8014f34:	9305      	str	r3, [sp, #20]
 8014f36:	4619      	mov	r1, r3
 8014f38:	f04f 0c0a 	mov.w	ip, #10
 8014f3c:	4620      	mov	r0, r4
 8014f3e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014f42:	3a30      	subs	r2, #48	; 0x30
 8014f44:	2a09      	cmp	r2, #9
 8014f46:	d903      	bls.n	8014f50 <_vfiprintf_r+0x1d0>
 8014f48:	2b00      	cmp	r3, #0
 8014f4a:	d0c6      	beq.n	8014eda <_vfiprintf_r+0x15a>
 8014f4c:	9105      	str	r1, [sp, #20]
 8014f4e:	e7c4      	b.n	8014eda <_vfiprintf_r+0x15a>
 8014f50:	fb0c 2101 	mla	r1, ip, r1, r2
 8014f54:	4604      	mov	r4, r0
 8014f56:	2301      	movs	r3, #1
 8014f58:	e7f0      	b.n	8014f3c <_vfiprintf_r+0x1bc>
 8014f5a:	ab03      	add	r3, sp, #12
 8014f5c:	9300      	str	r3, [sp, #0]
 8014f5e:	462a      	mov	r2, r5
 8014f60:	4b12      	ldr	r3, [pc, #72]	; (8014fac <_vfiprintf_r+0x22c>)
 8014f62:	a904      	add	r1, sp, #16
 8014f64:	4630      	mov	r0, r6
 8014f66:	f7fd fb9f 	bl	80126a8 <_printf_float>
 8014f6a:	4607      	mov	r7, r0
 8014f6c:	1c78      	adds	r0, r7, #1
 8014f6e:	d1d6      	bne.n	8014f1e <_vfiprintf_r+0x19e>
 8014f70:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014f72:	07d9      	lsls	r1, r3, #31
 8014f74:	d405      	bmi.n	8014f82 <_vfiprintf_r+0x202>
 8014f76:	89ab      	ldrh	r3, [r5, #12]
 8014f78:	059a      	lsls	r2, r3, #22
 8014f7a:	d402      	bmi.n	8014f82 <_vfiprintf_r+0x202>
 8014f7c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014f7e:	f7fe fa76 	bl	801346e <__retarget_lock_release_recursive>
 8014f82:	89ab      	ldrh	r3, [r5, #12]
 8014f84:	065b      	lsls	r3, r3, #25
 8014f86:	f53f af1d 	bmi.w	8014dc4 <_vfiprintf_r+0x44>
 8014f8a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014f8c:	e71c      	b.n	8014dc8 <_vfiprintf_r+0x48>
 8014f8e:	ab03      	add	r3, sp, #12
 8014f90:	9300      	str	r3, [sp, #0]
 8014f92:	462a      	mov	r2, r5
 8014f94:	4b05      	ldr	r3, [pc, #20]	; (8014fac <_vfiprintf_r+0x22c>)
 8014f96:	a904      	add	r1, sp, #16
 8014f98:	4630      	mov	r0, r6
 8014f9a:	f7fd fe29 	bl	8012bf0 <_printf_i>
 8014f9e:	e7e4      	b.n	8014f6a <_vfiprintf_r+0x1ea>
 8014fa0:	08015bb4 	.word	0x08015bb4
 8014fa4:	08015bbe 	.word	0x08015bbe
 8014fa8:	080126a9 	.word	0x080126a9
 8014fac:	08014d5b 	.word	0x08014d5b
 8014fb0:	08015bba 	.word	0x08015bba

08014fb4 <__sflush_r>:
 8014fb4:	898a      	ldrh	r2, [r1, #12]
 8014fb6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014fba:	4605      	mov	r5, r0
 8014fbc:	0710      	lsls	r0, r2, #28
 8014fbe:	460c      	mov	r4, r1
 8014fc0:	d458      	bmi.n	8015074 <__sflush_r+0xc0>
 8014fc2:	684b      	ldr	r3, [r1, #4]
 8014fc4:	2b00      	cmp	r3, #0
 8014fc6:	dc05      	bgt.n	8014fd4 <__sflush_r+0x20>
 8014fc8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8014fca:	2b00      	cmp	r3, #0
 8014fcc:	dc02      	bgt.n	8014fd4 <__sflush_r+0x20>
 8014fce:	2000      	movs	r0, #0
 8014fd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014fd4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8014fd6:	2e00      	cmp	r6, #0
 8014fd8:	d0f9      	beq.n	8014fce <__sflush_r+0x1a>
 8014fda:	2300      	movs	r3, #0
 8014fdc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8014fe0:	682f      	ldr	r7, [r5, #0]
 8014fe2:	6a21      	ldr	r1, [r4, #32]
 8014fe4:	602b      	str	r3, [r5, #0]
 8014fe6:	d032      	beq.n	801504e <__sflush_r+0x9a>
 8014fe8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8014fea:	89a3      	ldrh	r3, [r4, #12]
 8014fec:	075a      	lsls	r2, r3, #29
 8014fee:	d505      	bpl.n	8014ffc <__sflush_r+0x48>
 8014ff0:	6863      	ldr	r3, [r4, #4]
 8014ff2:	1ac0      	subs	r0, r0, r3
 8014ff4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8014ff6:	b10b      	cbz	r3, 8014ffc <__sflush_r+0x48>
 8014ff8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8014ffa:	1ac0      	subs	r0, r0, r3
 8014ffc:	2300      	movs	r3, #0
 8014ffe:	4602      	mov	r2, r0
 8015000:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8015002:	6a21      	ldr	r1, [r4, #32]
 8015004:	4628      	mov	r0, r5
 8015006:	47b0      	blx	r6
 8015008:	1c43      	adds	r3, r0, #1
 801500a:	89a3      	ldrh	r3, [r4, #12]
 801500c:	d106      	bne.n	801501c <__sflush_r+0x68>
 801500e:	6829      	ldr	r1, [r5, #0]
 8015010:	291d      	cmp	r1, #29
 8015012:	d82b      	bhi.n	801506c <__sflush_r+0xb8>
 8015014:	4a29      	ldr	r2, [pc, #164]	; (80150bc <__sflush_r+0x108>)
 8015016:	410a      	asrs	r2, r1
 8015018:	07d6      	lsls	r6, r2, #31
 801501a:	d427      	bmi.n	801506c <__sflush_r+0xb8>
 801501c:	2200      	movs	r2, #0
 801501e:	6062      	str	r2, [r4, #4]
 8015020:	04d9      	lsls	r1, r3, #19
 8015022:	6922      	ldr	r2, [r4, #16]
 8015024:	6022      	str	r2, [r4, #0]
 8015026:	d504      	bpl.n	8015032 <__sflush_r+0x7e>
 8015028:	1c42      	adds	r2, r0, #1
 801502a:	d101      	bne.n	8015030 <__sflush_r+0x7c>
 801502c:	682b      	ldr	r3, [r5, #0]
 801502e:	b903      	cbnz	r3, 8015032 <__sflush_r+0x7e>
 8015030:	6560      	str	r0, [r4, #84]	; 0x54
 8015032:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8015034:	602f      	str	r7, [r5, #0]
 8015036:	2900      	cmp	r1, #0
 8015038:	d0c9      	beq.n	8014fce <__sflush_r+0x1a>
 801503a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801503e:	4299      	cmp	r1, r3
 8015040:	d002      	beq.n	8015048 <__sflush_r+0x94>
 8015042:	4628      	mov	r0, r5
 8015044:	f7ff f89e 	bl	8014184 <_free_r>
 8015048:	2000      	movs	r0, #0
 801504a:	6360      	str	r0, [r4, #52]	; 0x34
 801504c:	e7c0      	b.n	8014fd0 <__sflush_r+0x1c>
 801504e:	2301      	movs	r3, #1
 8015050:	4628      	mov	r0, r5
 8015052:	47b0      	blx	r6
 8015054:	1c41      	adds	r1, r0, #1
 8015056:	d1c8      	bne.n	8014fea <__sflush_r+0x36>
 8015058:	682b      	ldr	r3, [r5, #0]
 801505a:	2b00      	cmp	r3, #0
 801505c:	d0c5      	beq.n	8014fea <__sflush_r+0x36>
 801505e:	2b1d      	cmp	r3, #29
 8015060:	d001      	beq.n	8015066 <__sflush_r+0xb2>
 8015062:	2b16      	cmp	r3, #22
 8015064:	d101      	bne.n	801506a <__sflush_r+0xb6>
 8015066:	602f      	str	r7, [r5, #0]
 8015068:	e7b1      	b.n	8014fce <__sflush_r+0x1a>
 801506a:	89a3      	ldrh	r3, [r4, #12]
 801506c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015070:	81a3      	strh	r3, [r4, #12]
 8015072:	e7ad      	b.n	8014fd0 <__sflush_r+0x1c>
 8015074:	690f      	ldr	r7, [r1, #16]
 8015076:	2f00      	cmp	r7, #0
 8015078:	d0a9      	beq.n	8014fce <__sflush_r+0x1a>
 801507a:	0793      	lsls	r3, r2, #30
 801507c:	680e      	ldr	r6, [r1, #0]
 801507e:	bf08      	it	eq
 8015080:	694b      	ldreq	r3, [r1, #20]
 8015082:	600f      	str	r7, [r1, #0]
 8015084:	bf18      	it	ne
 8015086:	2300      	movne	r3, #0
 8015088:	eba6 0807 	sub.w	r8, r6, r7
 801508c:	608b      	str	r3, [r1, #8]
 801508e:	f1b8 0f00 	cmp.w	r8, #0
 8015092:	dd9c      	ble.n	8014fce <__sflush_r+0x1a>
 8015094:	6a21      	ldr	r1, [r4, #32]
 8015096:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8015098:	4643      	mov	r3, r8
 801509a:	463a      	mov	r2, r7
 801509c:	4628      	mov	r0, r5
 801509e:	47b0      	blx	r6
 80150a0:	2800      	cmp	r0, #0
 80150a2:	dc06      	bgt.n	80150b2 <__sflush_r+0xfe>
 80150a4:	89a3      	ldrh	r3, [r4, #12]
 80150a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80150aa:	81a3      	strh	r3, [r4, #12]
 80150ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80150b0:	e78e      	b.n	8014fd0 <__sflush_r+0x1c>
 80150b2:	4407      	add	r7, r0
 80150b4:	eba8 0800 	sub.w	r8, r8, r0
 80150b8:	e7e9      	b.n	801508e <__sflush_r+0xda>
 80150ba:	bf00      	nop
 80150bc:	dfbffffe 	.word	0xdfbffffe

080150c0 <_fflush_r>:
 80150c0:	b538      	push	{r3, r4, r5, lr}
 80150c2:	690b      	ldr	r3, [r1, #16]
 80150c4:	4605      	mov	r5, r0
 80150c6:	460c      	mov	r4, r1
 80150c8:	b913      	cbnz	r3, 80150d0 <_fflush_r+0x10>
 80150ca:	2500      	movs	r5, #0
 80150cc:	4628      	mov	r0, r5
 80150ce:	bd38      	pop	{r3, r4, r5, pc}
 80150d0:	b118      	cbz	r0, 80150da <_fflush_r+0x1a>
 80150d2:	6a03      	ldr	r3, [r0, #32]
 80150d4:	b90b      	cbnz	r3, 80150da <_fflush_r+0x1a>
 80150d6:	f7fd ff27 	bl	8012f28 <__sinit>
 80150da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80150de:	2b00      	cmp	r3, #0
 80150e0:	d0f3      	beq.n	80150ca <_fflush_r+0xa>
 80150e2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80150e4:	07d0      	lsls	r0, r2, #31
 80150e6:	d404      	bmi.n	80150f2 <_fflush_r+0x32>
 80150e8:	0599      	lsls	r1, r3, #22
 80150ea:	d402      	bmi.n	80150f2 <_fflush_r+0x32>
 80150ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80150ee:	f7fe f9bd 	bl	801346c <__retarget_lock_acquire_recursive>
 80150f2:	4628      	mov	r0, r5
 80150f4:	4621      	mov	r1, r4
 80150f6:	f7ff ff5d 	bl	8014fb4 <__sflush_r>
 80150fa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80150fc:	07da      	lsls	r2, r3, #31
 80150fe:	4605      	mov	r5, r0
 8015100:	d4e4      	bmi.n	80150cc <_fflush_r+0xc>
 8015102:	89a3      	ldrh	r3, [r4, #12]
 8015104:	059b      	lsls	r3, r3, #22
 8015106:	d4e1      	bmi.n	80150cc <_fflush_r+0xc>
 8015108:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801510a:	f7fe f9b0 	bl	801346e <__retarget_lock_release_recursive>
 801510e:	e7dd      	b.n	80150cc <_fflush_r+0xc>

08015110 <__swhatbuf_r>:
 8015110:	b570      	push	{r4, r5, r6, lr}
 8015112:	460c      	mov	r4, r1
 8015114:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015118:	2900      	cmp	r1, #0
 801511a:	b096      	sub	sp, #88	; 0x58
 801511c:	4615      	mov	r5, r2
 801511e:	461e      	mov	r6, r3
 8015120:	da0d      	bge.n	801513e <__swhatbuf_r+0x2e>
 8015122:	89a3      	ldrh	r3, [r4, #12]
 8015124:	f013 0f80 	tst.w	r3, #128	; 0x80
 8015128:	f04f 0100 	mov.w	r1, #0
 801512c:	bf0c      	ite	eq
 801512e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8015132:	2340      	movne	r3, #64	; 0x40
 8015134:	2000      	movs	r0, #0
 8015136:	6031      	str	r1, [r6, #0]
 8015138:	602b      	str	r3, [r5, #0]
 801513a:	b016      	add	sp, #88	; 0x58
 801513c:	bd70      	pop	{r4, r5, r6, pc}
 801513e:	466a      	mov	r2, sp
 8015140:	f000 f862 	bl	8015208 <_fstat_r>
 8015144:	2800      	cmp	r0, #0
 8015146:	dbec      	blt.n	8015122 <__swhatbuf_r+0x12>
 8015148:	9901      	ldr	r1, [sp, #4]
 801514a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 801514e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8015152:	4259      	negs	r1, r3
 8015154:	4159      	adcs	r1, r3
 8015156:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801515a:	e7eb      	b.n	8015134 <__swhatbuf_r+0x24>

0801515c <__smakebuf_r>:
 801515c:	898b      	ldrh	r3, [r1, #12]
 801515e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8015160:	079d      	lsls	r5, r3, #30
 8015162:	4606      	mov	r6, r0
 8015164:	460c      	mov	r4, r1
 8015166:	d507      	bpl.n	8015178 <__smakebuf_r+0x1c>
 8015168:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801516c:	6023      	str	r3, [r4, #0]
 801516e:	6123      	str	r3, [r4, #16]
 8015170:	2301      	movs	r3, #1
 8015172:	6163      	str	r3, [r4, #20]
 8015174:	b002      	add	sp, #8
 8015176:	bd70      	pop	{r4, r5, r6, pc}
 8015178:	ab01      	add	r3, sp, #4
 801517a:	466a      	mov	r2, sp
 801517c:	f7ff ffc8 	bl	8015110 <__swhatbuf_r>
 8015180:	9900      	ldr	r1, [sp, #0]
 8015182:	4605      	mov	r5, r0
 8015184:	4630      	mov	r0, r6
 8015186:	f7ff f871 	bl	801426c <_malloc_r>
 801518a:	b948      	cbnz	r0, 80151a0 <__smakebuf_r+0x44>
 801518c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015190:	059a      	lsls	r2, r3, #22
 8015192:	d4ef      	bmi.n	8015174 <__smakebuf_r+0x18>
 8015194:	f023 0303 	bic.w	r3, r3, #3
 8015198:	f043 0302 	orr.w	r3, r3, #2
 801519c:	81a3      	strh	r3, [r4, #12]
 801519e:	e7e3      	b.n	8015168 <__smakebuf_r+0xc>
 80151a0:	89a3      	ldrh	r3, [r4, #12]
 80151a2:	6020      	str	r0, [r4, #0]
 80151a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80151a8:	81a3      	strh	r3, [r4, #12]
 80151aa:	9b00      	ldr	r3, [sp, #0]
 80151ac:	6163      	str	r3, [r4, #20]
 80151ae:	9b01      	ldr	r3, [sp, #4]
 80151b0:	6120      	str	r0, [r4, #16]
 80151b2:	b15b      	cbz	r3, 80151cc <__smakebuf_r+0x70>
 80151b4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80151b8:	4630      	mov	r0, r6
 80151ba:	f000 f837 	bl	801522c <_isatty_r>
 80151be:	b128      	cbz	r0, 80151cc <__smakebuf_r+0x70>
 80151c0:	89a3      	ldrh	r3, [r4, #12]
 80151c2:	f023 0303 	bic.w	r3, r3, #3
 80151c6:	f043 0301 	orr.w	r3, r3, #1
 80151ca:	81a3      	strh	r3, [r4, #12]
 80151cc:	89a3      	ldrh	r3, [r4, #12]
 80151ce:	431d      	orrs	r5, r3
 80151d0:	81a5      	strh	r5, [r4, #12]
 80151d2:	e7cf      	b.n	8015174 <__smakebuf_r+0x18>

080151d4 <memmove>:
 80151d4:	4288      	cmp	r0, r1
 80151d6:	b510      	push	{r4, lr}
 80151d8:	eb01 0402 	add.w	r4, r1, r2
 80151dc:	d902      	bls.n	80151e4 <memmove+0x10>
 80151de:	4284      	cmp	r4, r0
 80151e0:	4623      	mov	r3, r4
 80151e2:	d807      	bhi.n	80151f4 <memmove+0x20>
 80151e4:	1e43      	subs	r3, r0, #1
 80151e6:	42a1      	cmp	r1, r4
 80151e8:	d008      	beq.n	80151fc <memmove+0x28>
 80151ea:	f811 2b01 	ldrb.w	r2, [r1], #1
 80151ee:	f803 2f01 	strb.w	r2, [r3, #1]!
 80151f2:	e7f8      	b.n	80151e6 <memmove+0x12>
 80151f4:	4402      	add	r2, r0
 80151f6:	4601      	mov	r1, r0
 80151f8:	428a      	cmp	r2, r1
 80151fa:	d100      	bne.n	80151fe <memmove+0x2a>
 80151fc:	bd10      	pop	{r4, pc}
 80151fe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8015202:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8015206:	e7f7      	b.n	80151f8 <memmove+0x24>

08015208 <_fstat_r>:
 8015208:	b538      	push	{r3, r4, r5, lr}
 801520a:	4d07      	ldr	r5, [pc, #28]	; (8015228 <_fstat_r+0x20>)
 801520c:	2300      	movs	r3, #0
 801520e:	4604      	mov	r4, r0
 8015210:	4608      	mov	r0, r1
 8015212:	4611      	mov	r1, r2
 8015214:	602b      	str	r3, [r5, #0]
 8015216:	f7ec ff4e 	bl	80020b6 <_fstat>
 801521a:	1c43      	adds	r3, r0, #1
 801521c:	d102      	bne.n	8015224 <_fstat_r+0x1c>
 801521e:	682b      	ldr	r3, [r5, #0]
 8015220:	b103      	cbz	r3, 8015224 <_fstat_r+0x1c>
 8015222:	6023      	str	r3, [r4, #0]
 8015224:	bd38      	pop	{r3, r4, r5, pc}
 8015226:	bf00      	nop
 8015228:	200067e8 	.word	0x200067e8

0801522c <_isatty_r>:
 801522c:	b538      	push	{r3, r4, r5, lr}
 801522e:	4d06      	ldr	r5, [pc, #24]	; (8015248 <_isatty_r+0x1c>)
 8015230:	2300      	movs	r3, #0
 8015232:	4604      	mov	r4, r0
 8015234:	4608      	mov	r0, r1
 8015236:	602b      	str	r3, [r5, #0]
 8015238:	f7ec ff4d 	bl	80020d6 <_isatty>
 801523c:	1c43      	adds	r3, r0, #1
 801523e:	d102      	bne.n	8015246 <_isatty_r+0x1a>
 8015240:	682b      	ldr	r3, [r5, #0]
 8015242:	b103      	cbz	r3, 8015246 <_isatty_r+0x1a>
 8015244:	6023      	str	r3, [r4, #0]
 8015246:	bd38      	pop	{r3, r4, r5, pc}
 8015248:	200067e8 	.word	0x200067e8

0801524c <_sbrk_r>:
 801524c:	b538      	push	{r3, r4, r5, lr}
 801524e:	4d06      	ldr	r5, [pc, #24]	; (8015268 <_sbrk_r+0x1c>)
 8015250:	2300      	movs	r3, #0
 8015252:	4604      	mov	r4, r0
 8015254:	4608      	mov	r0, r1
 8015256:	602b      	str	r3, [r5, #0]
 8015258:	f7ec ff56 	bl	8002108 <_sbrk>
 801525c:	1c43      	adds	r3, r0, #1
 801525e:	d102      	bne.n	8015266 <_sbrk_r+0x1a>
 8015260:	682b      	ldr	r3, [r5, #0]
 8015262:	b103      	cbz	r3, 8015266 <_sbrk_r+0x1a>
 8015264:	6023      	str	r3, [r4, #0]
 8015266:	bd38      	pop	{r3, r4, r5, pc}
 8015268:	200067e8 	.word	0x200067e8

0801526c <__assert_func>:
 801526c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801526e:	4614      	mov	r4, r2
 8015270:	461a      	mov	r2, r3
 8015272:	4b09      	ldr	r3, [pc, #36]	; (8015298 <__assert_func+0x2c>)
 8015274:	681b      	ldr	r3, [r3, #0]
 8015276:	4605      	mov	r5, r0
 8015278:	68d8      	ldr	r0, [r3, #12]
 801527a:	b14c      	cbz	r4, 8015290 <__assert_func+0x24>
 801527c:	4b07      	ldr	r3, [pc, #28]	; (801529c <__assert_func+0x30>)
 801527e:	9100      	str	r1, [sp, #0]
 8015280:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8015284:	4906      	ldr	r1, [pc, #24]	; (80152a0 <__assert_func+0x34>)
 8015286:	462b      	mov	r3, r5
 8015288:	f000 f872 	bl	8015370 <fiprintf>
 801528c:	f000 f882 	bl	8015394 <abort>
 8015290:	4b04      	ldr	r3, [pc, #16]	; (80152a4 <__assert_func+0x38>)
 8015292:	461c      	mov	r4, r3
 8015294:	e7f3      	b.n	801527e <__assert_func+0x12>
 8015296:	bf00      	nop
 8015298:	200001e0 	.word	0x200001e0
 801529c:	08015bcf 	.word	0x08015bcf
 80152a0:	08015bdc 	.word	0x08015bdc
 80152a4:	08015c0a 	.word	0x08015c0a

080152a8 <_calloc_r>:
 80152a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80152aa:	fba1 2402 	umull	r2, r4, r1, r2
 80152ae:	b94c      	cbnz	r4, 80152c4 <_calloc_r+0x1c>
 80152b0:	4611      	mov	r1, r2
 80152b2:	9201      	str	r2, [sp, #4]
 80152b4:	f7fe ffda 	bl	801426c <_malloc_r>
 80152b8:	9a01      	ldr	r2, [sp, #4]
 80152ba:	4605      	mov	r5, r0
 80152bc:	b930      	cbnz	r0, 80152cc <_calloc_r+0x24>
 80152be:	4628      	mov	r0, r5
 80152c0:	b003      	add	sp, #12
 80152c2:	bd30      	pop	{r4, r5, pc}
 80152c4:	220c      	movs	r2, #12
 80152c6:	6002      	str	r2, [r0, #0]
 80152c8:	2500      	movs	r5, #0
 80152ca:	e7f8      	b.n	80152be <_calloc_r+0x16>
 80152cc:	4621      	mov	r1, r4
 80152ce:	f7fd fffb 	bl	80132c8 <memset>
 80152d2:	e7f4      	b.n	80152be <_calloc_r+0x16>

080152d4 <__ascii_mbtowc>:
 80152d4:	b082      	sub	sp, #8
 80152d6:	b901      	cbnz	r1, 80152da <__ascii_mbtowc+0x6>
 80152d8:	a901      	add	r1, sp, #4
 80152da:	b142      	cbz	r2, 80152ee <__ascii_mbtowc+0x1a>
 80152dc:	b14b      	cbz	r3, 80152f2 <__ascii_mbtowc+0x1e>
 80152de:	7813      	ldrb	r3, [r2, #0]
 80152e0:	600b      	str	r3, [r1, #0]
 80152e2:	7812      	ldrb	r2, [r2, #0]
 80152e4:	1e10      	subs	r0, r2, #0
 80152e6:	bf18      	it	ne
 80152e8:	2001      	movne	r0, #1
 80152ea:	b002      	add	sp, #8
 80152ec:	4770      	bx	lr
 80152ee:	4610      	mov	r0, r2
 80152f0:	e7fb      	b.n	80152ea <__ascii_mbtowc+0x16>
 80152f2:	f06f 0001 	mvn.w	r0, #1
 80152f6:	e7f8      	b.n	80152ea <__ascii_mbtowc+0x16>

080152f8 <_realloc_r>:
 80152f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80152fc:	4680      	mov	r8, r0
 80152fe:	4614      	mov	r4, r2
 8015300:	460e      	mov	r6, r1
 8015302:	b921      	cbnz	r1, 801530e <_realloc_r+0x16>
 8015304:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015308:	4611      	mov	r1, r2
 801530a:	f7fe bfaf 	b.w	801426c <_malloc_r>
 801530e:	b92a      	cbnz	r2, 801531c <_realloc_r+0x24>
 8015310:	f7fe ff38 	bl	8014184 <_free_r>
 8015314:	4625      	mov	r5, r4
 8015316:	4628      	mov	r0, r5
 8015318:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801531c:	f000 f841 	bl	80153a2 <_malloc_usable_size_r>
 8015320:	4284      	cmp	r4, r0
 8015322:	4607      	mov	r7, r0
 8015324:	d802      	bhi.n	801532c <_realloc_r+0x34>
 8015326:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801532a:	d812      	bhi.n	8015352 <_realloc_r+0x5a>
 801532c:	4621      	mov	r1, r4
 801532e:	4640      	mov	r0, r8
 8015330:	f7fe ff9c 	bl	801426c <_malloc_r>
 8015334:	4605      	mov	r5, r0
 8015336:	2800      	cmp	r0, #0
 8015338:	d0ed      	beq.n	8015316 <_realloc_r+0x1e>
 801533a:	42bc      	cmp	r4, r7
 801533c:	4622      	mov	r2, r4
 801533e:	4631      	mov	r1, r6
 8015340:	bf28      	it	cs
 8015342:	463a      	movcs	r2, r7
 8015344:	f7fe f894 	bl	8013470 <memcpy>
 8015348:	4631      	mov	r1, r6
 801534a:	4640      	mov	r0, r8
 801534c:	f7fe ff1a 	bl	8014184 <_free_r>
 8015350:	e7e1      	b.n	8015316 <_realloc_r+0x1e>
 8015352:	4635      	mov	r5, r6
 8015354:	e7df      	b.n	8015316 <_realloc_r+0x1e>

08015356 <__ascii_wctomb>:
 8015356:	b149      	cbz	r1, 801536c <__ascii_wctomb+0x16>
 8015358:	2aff      	cmp	r2, #255	; 0xff
 801535a:	bf85      	ittet	hi
 801535c:	238a      	movhi	r3, #138	; 0x8a
 801535e:	6003      	strhi	r3, [r0, #0]
 8015360:	700a      	strbls	r2, [r1, #0]
 8015362:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8015366:	bf98      	it	ls
 8015368:	2001      	movls	r0, #1
 801536a:	4770      	bx	lr
 801536c:	4608      	mov	r0, r1
 801536e:	4770      	bx	lr

08015370 <fiprintf>:
 8015370:	b40e      	push	{r1, r2, r3}
 8015372:	b503      	push	{r0, r1, lr}
 8015374:	4601      	mov	r1, r0
 8015376:	ab03      	add	r3, sp, #12
 8015378:	4805      	ldr	r0, [pc, #20]	; (8015390 <fiprintf+0x20>)
 801537a:	f853 2b04 	ldr.w	r2, [r3], #4
 801537e:	6800      	ldr	r0, [r0, #0]
 8015380:	9301      	str	r3, [sp, #4]
 8015382:	f7ff fcfd 	bl	8014d80 <_vfiprintf_r>
 8015386:	b002      	add	sp, #8
 8015388:	f85d eb04 	ldr.w	lr, [sp], #4
 801538c:	b003      	add	sp, #12
 801538e:	4770      	bx	lr
 8015390:	200001e0 	.word	0x200001e0

08015394 <abort>:
 8015394:	b508      	push	{r3, lr}
 8015396:	2006      	movs	r0, #6
 8015398:	f000 f834 	bl	8015404 <raise>
 801539c:	2001      	movs	r0, #1
 801539e:	f7ec fe3b 	bl	8002018 <_exit>

080153a2 <_malloc_usable_size_r>:
 80153a2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80153a6:	1f18      	subs	r0, r3, #4
 80153a8:	2b00      	cmp	r3, #0
 80153aa:	bfbc      	itt	lt
 80153ac:	580b      	ldrlt	r3, [r1, r0]
 80153ae:	18c0      	addlt	r0, r0, r3
 80153b0:	4770      	bx	lr

080153b2 <_raise_r>:
 80153b2:	291f      	cmp	r1, #31
 80153b4:	b538      	push	{r3, r4, r5, lr}
 80153b6:	4604      	mov	r4, r0
 80153b8:	460d      	mov	r5, r1
 80153ba:	d904      	bls.n	80153c6 <_raise_r+0x14>
 80153bc:	2316      	movs	r3, #22
 80153be:	6003      	str	r3, [r0, #0]
 80153c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80153c4:	bd38      	pop	{r3, r4, r5, pc}
 80153c6:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80153c8:	b112      	cbz	r2, 80153d0 <_raise_r+0x1e>
 80153ca:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80153ce:	b94b      	cbnz	r3, 80153e4 <_raise_r+0x32>
 80153d0:	4620      	mov	r0, r4
 80153d2:	f000 f831 	bl	8015438 <_getpid_r>
 80153d6:	462a      	mov	r2, r5
 80153d8:	4601      	mov	r1, r0
 80153da:	4620      	mov	r0, r4
 80153dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80153e0:	f000 b818 	b.w	8015414 <_kill_r>
 80153e4:	2b01      	cmp	r3, #1
 80153e6:	d00a      	beq.n	80153fe <_raise_r+0x4c>
 80153e8:	1c59      	adds	r1, r3, #1
 80153ea:	d103      	bne.n	80153f4 <_raise_r+0x42>
 80153ec:	2316      	movs	r3, #22
 80153ee:	6003      	str	r3, [r0, #0]
 80153f0:	2001      	movs	r0, #1
 80153f2:	e7e7      	b.n	80153c4 <_raise_r+0x12>
 80153f4:	2400      	movs	r4, #0
 80153f6:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80153fa:	4628      	mov	r0, r5
 80153fc:	4798      	blx	r3
 80153fe:	2000      	movs	r0, #0
 8015400:	e7e0      	b.n	80153c4 <_raise_r+0x12>
	...

08015404 <raise>:
 8015404:	4b02      	ldr	r3, [pc, #8]	; (8015410 <raise+0xc>)
 8015406:	4601      	mov	r1, r0
 8015408:	6818      	ldr	r0, [r3, #0]
 801540a:	f7ff bfd2 	b.w	80153b2 <_raise_r>
 801540e:	bf00      	nop
 8015410:	200001e0 	.word	0x200001e0

08015414 <_kill_r>:
 8015414:	b538      	push	{r3, r4, r5, lr}
 8015416:	4d07      	ldr	r5, [pc, #28]	; (8015434 <_kill_r+0x20>)
 8015418:	2300      	movs	r3, #0
 801541a:	4604      	mov	r4, r0
 801541c:	4608      	mov	r0, r1
 801541e:	4611      	mov	r1, r2
 8015420:	602b      	str	r3, [r5, #0]
 8015422:	f7ec fde9 	bl	8001ff8 <_kill>
 8015426:	1c43      	adds	r3, r0, #1
 8015428:	d102      	bne.n	8015430 <_kill_r+0x1c>
 801542a:	682b      	ldr	r3, [r5, #0]
 801542c:	b103      	cbz	r3, 8015430 <_kill_r+0x1c>
 801542e:	6023      	str	r3, [r4, #0]
 8015430:	bd38      	pop	{r3, r4, r5, pc}
 8015432:	bf00      	nop
 8015434:	200067e8 	.word	0x200067e8

08015438 <_getpid_r>:
 8015438:	f7ec bdd6 	b.w	8001fe8 <_getpid>

0801543c <_init>:
 801543c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801543e:	bf00      	nop
 8015440:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015442:	bc08      	pop	{r3}
 8015444:	469e      	mov	lr, r3
 8015446:	4770      	bx	lr

08015448 <_fini>:
 8015448:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801544a:	bf00      	nop
 801544c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801544e:	bc08      	pop	{r3}
 8015450:	469e      	mov	lr, r3
 8015452:	4770      	bx	lr
