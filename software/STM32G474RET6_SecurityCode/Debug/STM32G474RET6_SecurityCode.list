
STM32G474RET6_SecurityCode.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001448c  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007c4  08014670  08014670  00024670  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08014e34  08014e34  00030350  2**0
                  CONTENTS
  4 .ARM          00000008  08014e34  08014e34  00024e34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08014e3c  08014e3c  00030350  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08014e3c  08014e3c  00024e3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08014e40  08014e40  00024e40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000350  20000000  08014e44  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000327c  20000350  08015194  00030350  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200035cc  08015194  000335cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030350  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00030380  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002ff98  00000000  00000000  000303c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000071f0  00000000  00000000  0006035b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002628  00000000  00000000  00067550  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001d3f  00000000  00000000  00069b78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000307b5  00000000  00000000  0006b8b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00031a72  00000000  00000000  0009c06c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001280f1  00000000  00000000  000cdade  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000b140  00000000  00000000  001f5bd0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000077  00000000  00000000  00200d10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000350 	.word	0x20000350
 80001fc:	00000000 	.word	0x00000000
 8000200:	08014654 	.word	0x08014654

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000354 	.word	0x20000354
 800021c:	08014654 	.word	0x08014654

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_uldivmod>:
 8000bf8:	b953      	cbnz	r3, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfa:	b94a      	cbnz	r2, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bf08      	it	eq
 8000c00:	2800      	cmpeq	r0, #0
 8000c02:	bf1c      	itt	ne
 8000c04:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c08:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c0c:	f000 b970 	b.w	8000ef0 <__aeabi_idiv0>
 8000c10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c18:	f000 f806 	bl	8000c28 <__udivmoddi4>
 8000c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c24:	b004      	add	sp, #16
 8000c26:	4770      	bx	lr

08000c28 <__udivmoddi4>:
 8000c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c2c:	9e08      	ldr	r6, [sp, #32]
 8000c2e:	460d      	mov	r5, r1
 8000c30:	4604      	mov	r4, r0
 8000c32:	460f      	mov	r7, r1
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d14a      	bne.n	8000cce <__udivmoddi4+0xa6>
 8000c38:	428a      	cmp	r2, r1
 8000c3a:	4694      	mov	ip, r2
 8000c3c:	d965      	bls.n	8000d0a <__udivmoddi4+0xe2>
 8000c3e:	fab2 f382 	clz	r3, r2
 8000c42:	b143      	cbz	r3, 8000c56 <__udivmoddi4+0x2e>
 8000c44:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c48:	f1c3 0220 	rsb	r2, r3, #32
 8000c4c:	409f      	lsls	r7, r3
 8000c4e:	fa20 f202 	lsr.w	r2, r0, r2
 8000c52:	4317      	orrs	r7, r2
 8000c54:	409c      	lsls	r4, r3
 8000c56:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c5a:	fa1f f58c 	uxth.w	r5, ip
 8000c5e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c62:	0c22      	lsrs	r2, r4, #16
 8000c64:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c68:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c6c:	fb01 f005 	mul.w	r0, r1, r5
 8000c70:	4290      	cmp	r0, r2
 8000c72:	d90a      	bls.n	8000c8a <__udivmoddi4+0x62>
 8000c74:	eb1c 0202 	adds.w	r2, ip, r2
 8000c78:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000c7c:	f080 811c 	bcs.w	8000eb8 <__udivmoddi4+0x290>
 8000c80:	4290      	cmp	r0, r2
 8000c82:	f240 8119 	bls.w	8000eb8 <__udivmoddi4+0x290>
 8000c86:	3902      	subs	r1, #2
 8000c88:	4462      	add	r2, ip
 8000c8a:	1a12      	subs	r2, r2, r0
 8000c8c:	b2a4      	uxth	r4, r4
 8000c8e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c92:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c96:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c9a:	fb00 f505 	mul.w	r5, r0, r5
 8000c9e:	42a5      	cmp	r5, r4
 8000ca0:	d90a      	bls.n	8000cb8 <__udivmoddi4+0x90>
 8000ca2:	eb1c 0404 	adds.w	r4, ip, r4
 8000ca6:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000caa:	f080 8107 	bcs.w	8000ebc <__udivmoddi4+0x294>
 8000cae:	42a5      	cmp	r5, r4
 8000cb0:	f240 8104 	bls.w	8000ebc <__udivmoddi4+0x294>
 8000cb4:	4464      	add	r4, ip
 8000cb6:	3802      	subs	r0, #2
 8000cb8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000cbc:	1b64      	subs	r4, r4, r5
 8000cbe:	2100      	movs	r1, #0
 8000cc0:	b11e      	cbz	r6, 8000cca <__udivmoddi4+0xa2>
 8000cc2:	40dc      	lsrs	r4, r3
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	e9c6 4300 	strd	r4, r3, [r6]
 8000cca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cce:	428b      	cmp	r3, r1
 8000cd0:	d908      	bls.n	8000ce4 <__udivmoddi4+0xbc>
 8000cd2:	2e00      	cmp	r6, #0
 8000cd4:	f000 80ed 	beq.w	8000eb2 <__udivmoddi4+0x28a>
 8000cd8:	2100      	movs	r1, #0
 8000cda:	e9c6 0500 	strd	r0, r5, [r6]
 8000cde:	4608      	mov	r0, r1
 8000ce0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ce4:	fab3 f183 	clz	r1, r3
 8000ce8:	2900      	cmp	r1, #0
 8000cea:	d149      	bne.n	8000d80 <__udivmoddi4+0x158>
 8000cec:	42ab      	cmp	r3, r5
 8000cee:	d302      	bcc.n	8000cf6 <__udivmoddi4+0xce>
 8000cf0:	4282      	cmp	r2, r0
 8000cf2:	f200 80f8 	bhi.w	8000ee6 <__udivmoddi4+0x2be>
 8000cf6:	1a84      	subs	r4, r0, r2
 8000cf8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cfc:	2001      	movs	r0, #1
 8000cfe:	4617      	mov	r7, r2
 8000d00:	2e00      	cmp	r6, #0
 8000d02:	d0e2      	beq.n	8000cca <__udivmoddi4+0xa2>
 8000d04:	e9c6 4700 	strd	r4, r7, [r6]
 8000d08:	e7df      	b.n	8000cca <__udivmoddi4+0xa2>
 8000d0a:	b902      	cbnz	r2, 8000d0e <__udivmoddi4+0xe6>
 8000d0c:	deff      	udf	#255	; 0xff
 8000d0e:	fab2 f382 	clz	r3, r2
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	f040 8090 	bne.w	8000e38 <__udivmoddi4+0x210>
 8000d18:	1a8a      	subs	r2, r1, r2
 8000d1a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d1e:	fa1f fe8c 	uxth.w	lr, ip
 8000d22:	2101      	movs	r1, #1
 8000d24:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d28:	fb07 2015 	mls	r0, r7, r5, r2
 8000d2c:	0c22      	lsrs	r2, r4, #16
 8000d2e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d32:	fb0e f005 	mul.w	r0, lr, r5
 8000d36:	4290      	cmp	r0, r2
 8000d38:	d908      	bls.n	8000d4c <__udivmoddi4+0x124>
 8000d3a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d3e:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000d42:	d202      	bcs.n	8000d4a <__udivmoddi4+0x122>
 8000d44:	4290      	cmp	r0, r2
 8000d46:	f200 80cb 	bhi.w	8000ee0 <__udivmoddi4+0x2b8>
 8000d4a:	4645      	mov	r5, r8
 8000d4c:	1a12      	subs	r2, r2, r0
 8000d4e:	b2a4      	uxth	r4, r4
 8000d50:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d54:	fb07 2210 	mls	r2, r7, r0, r2
 8000d58:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d5c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d60:	45a6      	cmp	lr, r4
 8000d62:	d908      	bls.n	8000d76 <__udivmoddi4+0x14e>
 8000d64:	eb1c 0404 	adds.w	r4, ip, r4
 8000d68:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000d6c:	d202      	bcs.n	8000d74 <__udivmoddi4+0x14c>
 8000d6e:	45a6      	cmp	lr, r4
 8000d70:	f200 80bb 	bhi.w	8000eea <__udivmoddi4+0x2c2>
 8000d74:	4610      	mov	r0, r2
 8000d76:	eba4 040e 	sub.w	r4, r4, lr
 8000d7a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d7e:	e79f      	b.n	8000cc0 <__udivmoddi4+0x98>
 8000d80:	f1c1 0720 	rsb	r7, r1, #32
 8000d84:	408b      	lsls	r3, r1
 8000d86:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d8a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d8e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d92:	fa20 f307 	lsr.w	r3, r0, r7
 8000d96:	40fd      	lsrs	r5, r7
 8000d98:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d9c:	4323      	orrs	r3, r4
 8000d9e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000da2:	fa1f fe8c 	uxth.w	lr, ip
 8000da6:	fb09 5518 	mls	r5, r9, r8, r5
 8000daa:	0c1c      	lsrs	r4, r3, #16
 8000dac:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000db0:	fb08 f50e 	mul.w	r5, r8, lr
 8000db4:	42a5      	cmp	r5, r4
 8000db6:	fa02 f201 	lsl.w	r2, r2, r1
 8000dba:	fa00 f001 	lsl.w	r0, r0, r1
 8000dbe:	d90b      	bls.n	8000dd8 <__udivmoddi4+0x1b0>
 8000dc0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000dc8:	f080 8088 	bcs.w	8000edc <__udivmoddi4+0x2b4>
 8000dcc:	42a5      	cmp	r5, r4
 8000dce:	f240 8085 	bls.w	8000edc <__udivmoddi4+0x2b4>
 8000dd2:	f1a8 0802 	sub.w	r8, r8, #2
 8000dd6:	4464      	add	r4, ip
 8000dd8:	1b64      	subs	r4, r4, r5
 8000dda:	b29d      	uxth	r5, r3
 8000ddc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000de0:	fb09 4413 	mls	r4, r9, r3, r4
 8000de4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000de8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000dec:	45a6      	cmp	lr, r4
 8000dee:	d908      	bls.n	8000e02 <__udivmoddi4+0x1da>
 8000df0:	eb1c 0404 	adds.w	r4, ip, r4
 8000df4:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000df8:	d26c      	bcs.n	8000ed4 <__udivmoddi4+0x2ac>
 8000dfa:	45a6      	cmp	lr, r4
 8000dfc:	d96a      	bls.n	8000ed4 <__udivmoddi4+0x2ac>
 8000dfe:	3b02      	subs	r3, #2
 8000e00:	4464      	add	r4, ip
 8000e02:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e06:	fba3 9502 	umull	r9, r5, r3, r2
 8000e0a:	eba4 040e 	sub.w	r4, r4, lr
 8000e0e:	42ac      	cmp	r4, r5
 8000e10:	46c8      	mov	r8, r9
 8000e12:	46ae      	mov	lr, r5
 8000e14:	d356      	bcc.n	8000ec4 <__udivmoddi4+0x29c>
 8000e16:	d053      	beq.n	8000ec0 <__udivmoddi4+0x298>
 8000e18:	b156      	cbz	r6, 8000e30 <__udivmoddi4+0x208>
 8000e1a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e1e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e22:	fa04 f707 	lsl.w	r7, r4, r7
 8000e26:	40ca      	lsrs	r2, r1
 8000e28:	40cc      	lsrs	r4, r1
 8000e2a:	4317      	orrs	r7, r2
 8000e2c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e30:	4618      	mov	r0, r3
 8000e32:	2100      	movs	r1, #0
 8000e34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e38:	f1c3 0120 	rsb	r1, r3, #32
 8000e3c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e40:	fa20 f201 	lsr.w	r2, r0, r1
 8000e44:	fa25 f101 	lsr.w	r1, r5, r1
 8000e48:	409d      	lsls	r5, r3
 8000e4a:	432a      	orrs	r2, r5
 8000e4c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e50:	fa1f fe8c 	uxth.w	lr, ip
 8000e54:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e58:	fb07 1510 	mls	r5, r7, r0, r1
 8000e5c:	0c11      	lsrs	r1, r2, #16
 8000e5e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e62:	fb00 f50e 	mul.w	r5, r0, lr
 8000e66:	428d      	cmp	r5, r1
 8000e68:	fa04 f403 	lsl.w	r4, r4, r3
 8000e6c:	d908      	bls.n	8000e80 <__udivmoddi4+0x258>
 8000e6e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e72:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000e76:	d22f      	bcs.n	8000ed8 <__udivmoddi4+0x2b0>
 8000e78:	428d      	cmp	r5, r1
 8000e7a:	d92d      	bls.n	8000ed8 <__udivmoddi4+0x2b0>
 8000e7c:	3802      	subs	r0, #2
 8000e7e:	4461      	add	r1, ip
 8000e80:	1b49      	subs	r1, r1, r5
 8000e82:	b292      	uxth	r2, r2
 8000e84:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e88:	fb07 1115 	mls	r1, r7, r5, r1
 8000e8c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e90:	fb05 f10e 	mul.w	r1, r5, lr
 8000e94:	4291      	cmp	r1, r2
 8000e96:	d908      	bls.n	8000eaa <__udivmoddi4+0x282>
 8000e98:	eb1c 0202 	adds.w	r2, ip, r2
 8000e9c:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000ea0:	d216      	bcs.n	8000ed0 <__udivmoddi4+0x2a8>
 8000ea2:	4291      	cmp	r1, r2
 8000ea4:	d914      	bls.n	8000ed0 <__udivmoddi4+0x2a8>
 8000ea6:	3d02      	subs	r5, #2
 8000ea8:	4462      	add	r2, ip
 8000eaa:	1a52      	subs	r2, r2, r1
 8000eac:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000eb0:	e738      	b.n	8000d24 <__udivmoddi4+0xfc>
 8000eb2:	4631      	mov	r1, r6
 8000eb4:	4630      	mov	r0, r6
 8000eb6:	e708      	b.n	8000cca <__udivmoddi4+0xa2>
 8000eb8:	4639      	mov	r1, r7
 8000eba:	e6e6      	b.n	8000c8a <__udivmoddi4+0x62>
 8000ebc:	4610      	mov	r0, r2
 8000ebe:	e6fb      	b.n	8000cb8 <__udivmoddi4+0x90>
 8000ec0:	4548      	cmp	r0, r9
 8000ec2:	d2a9      	bcs.n	8000e18 <__udivmoddi4+0x1f0>
 8000ec4:	ebb9 0802 	subs.w	r8, r9, r2
 8000ec8:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000ecc:	3b01      	subs	r3, #1
 8000ece:	e7a3      	b.n	8000e18 <__udivmoddi4+0x1f0>
 8000ed0:	4645      	mov	r5, r8
 8000ed2:	e7ea      	b.n	8000eaa <__udivmoddi4+0x282>
 8000ed4:	462b      	mov	r3, r5
 8000ed6:	e794      	b.n	8000e02 <__udivmoddi4+0x1da>
 8000ed8:	4640      	mov	r0, r8
 8000eda:	e7d1      	b.n	8000e80 <__udivmoddi4+0x258>
 8000edc:	46d0      	mov	r8, sl
 8000ede:	e77b      	b.n	8000dd8 <__udivmoddi4+0x1b0>
 8000ee0:	3d02      	subs	r5, #2
 8000ee2:	4462      	add	r2, ip
 8000ee4:	e732      	b.n	8000d4c <__udivmoddi4+0x124>
 8000ee6:	4608      	mov	r0, r1
 8000ee8:	e70a      	b.n	8000d00 <__udivmoddi4+0xd8>
 8000eea:	4464      	add	r4, ip
 8000eec:	3802      	subs	r0, #2
 8000eee:	e742      	b.n	8000d76 <__udivmoddi4+0x14e>

08000ef0 <__aeabi_idiv0>:
 8000ef0:	4770      	bx	lr
 8000ef2:	bf00      	nop

08000ef4 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc3;
ADC_HandleTypeDef hadc4;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b08c      	sub	sp, #48	; 0x30
 8000ef8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000efa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000efe:	2200      	movs	r2, #0
 8000f00:	601a      	str	r2, [r3, #0]
 8000f02:	605a      	str	r2, [r3, #4]
 8000f04:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000f06:	1d3b      	adds	r3, r7, #4
 8000f08:	2220      	movs	r2, #32
 8000f0a:	2100      	movs	r1, #0
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	f011 fb3d 	bl	801258c <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000f12:	4b32      	ldr	r3, [pc, #200]	; (8000fdc <MX_ADC1_Init+0xe8>)
 8000f14:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000f18:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000f1a:	4b30      	ldr	r3, [pc, #192]	; (8000fdc <MX_ADC1_Init+0xe8>)
 8000f1c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000f20:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000f22:	4b2e      	ldr	r3, [pc, #184]	; (8000fdc <MX_ADC1_Init+0xe8>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f28:	4b2c      	ldr	r3, [pc, #176]	; (8000fdc <MX_ADC1_Init+0xe8>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000f2e:	4b2b      	ldr	r3, [pc, #172]	; (8000fdc <MX_ADC1_Init+0xe8>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000f34:	4b29      	ldr	r3, [pc, #164]	; (8000fdc <MX_ADC1_Init+0xe8>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f3a:	4b28      	ldr	r3, [pc, #160]	; (8000fdc <MX_ADC1_Init+0xe8>)
 8000f3c:	2204      	movs	r2, #4
 8000f3e:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000f40:	4b26      	ldr	r3, [pc, #152]	; (8000fdc <MX_ADC1_Init+0xe8>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000f46:	4b25      	ldr	r3, [pc, #148]	; (8000fdc <MX_ADC1_Init+0xe8>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000f4c:	4b23      	ldr	r3, [pc, #140]	; (8000fdc <MX_ADC1_Init+0xe8>)
 8000f4e:	2201      	movs	r2, #1
 8000f50:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f52:	4b22      	ldr	r3, [pc, #136]	; (8000fdc <MX_ADC1_Init+0xe8>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f5a:	4b20      	ldr	r3, [pc, #128]	; (8000fdc <MX_ADC1_Init+0xe8>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f60:	4b1e      	ldr	r3, [pc, #120]	; (8000fdc <MX_ADC1_Init+0xe8>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000f66:	4b1d      	ldr	r3, [pc, #116]	; (8000fdc <MX_ADC1_Init+0xe8>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000f6e:	4b1b      	ldr	r3, [pc, #108]	; (8000fdc <MX_ADC1_Init+0xe8>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000f74:	4b19      	ldr	r3, [pc, #100]	; (8000fdc <MX_ADC1_Init+0xe8>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f7c:	4817      	ldr	r0, [pc, #92]	; (8000fdc <MX_ADC1_Init+0xe8>)
 8000f7e:	f002 fc65 	bl	800384c <HAL_ADC_Init>
 8000f82:	4603      	mov	r3, r0
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d001      	beq.n	8000f8c <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000f88:	f000 fe22 	bl	8001bd0 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000f90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f94:	4619      	mov	r1, r3
 8000f96:	4811      	ldr	r0, [pc, #68]	; (8000fdc <MX_ADC1_Init+0xe8>)
 8000f98:	f003 fa80 	bl	800449c <HAL_ADCEx_MultiModeConfigChannel>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d001      	beq.n	8000fa6 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000fa2:	f000 fe15 	bl	8001bd0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000fa6:	4b0e      	ldr	r3, [pc, #56]	; (8000fe0 <MX_ADC1_Init+0xec>)
 8000fa8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000faa:	2306      	movs	r3, #6
 8000fac:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000fb2:	237f      	movs	r3, #127	; 0x7f
 8000fb4:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000fb6:	2304      	movs	r3, #4
 8000fb8:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fbe:	1d3b      	adds	r3, r7, #4
 8000fc0:	4619      	mov	r1, r3
 8000fc2:	4806      	ldr	r0, [pc, #24]	; (8000fdc <MX_ADC1_Init+0xe8>)
 8000fc4:	f002 fe04 	bl	8003bd0 <HAL_ADC_ConfigChannel>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d001      	beq.n	8000fd2 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8000fce:	f000 fdff 	bl	8001bd0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000fd2:	bf00      	nop
 8000fd4:	3730      	adds	r7, #48	; 0x30
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	2000036c 	.word	0x2000036c
 8000fe0:	04300002 	.word	0x04300002

08000fe4 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b088      	sub	sp, #32
 8000fe8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000fea:	463b      	mov	r3, r7
 8000fec:	2220      	movs	r2, #32
 8000fee:	2100      	movs	r1, #0
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f011 facb 	bl	801258c <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000ff6:	4b2b      	ldr	r3, [pc, #172]	; (80010a4 <MX_ADC2_Init+0xc0>)
 8000ff8:	4a2b      	ldr	r2, [pc, #172]	; (80010a8 <MX_ADC2_Init+0xc4>)
 8000ffa:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000ffc:	4b29      	ldr	r3, [pc, #164]	; (80010a4 <MX_ADC2_Init+0xc0>)
 8000ffe:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001002:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001004:	4b27      	ldr	r3, [pc, #156]	; (80010a4 <MX_ADC2_Init+0xc0>)
 8001006:	2200      	movs	r2, #0
 8001008:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800100a:	4b26      	ldr	r3, [pc, #152]	; (80010a4 <MX_ADC2_Init+0xc0>)
 800100c:	2200      	movs	r2, #0
 800100e:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8001010:	4b24      	ldr	r3, [pc, #144]	; (80010a4 <MX_ADC2_Init+0xc0>)
 8001012:	2200      	movs	r2, #0
 8001014:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001016:	4b23      	ldr	r3, [pc, #140]	; (80010a4 <MX_ADC2_Init+0xc0>)
 8001018:	2200      	movs	r2, #0
 800101a:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800101c:	4b21      	ldr	r3, [pc, #132]	; (80010a4 <MX_ADC2_Init+0xc0>)
 800101e:	2204      	movs	r2, #4
 8001020:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8001022:	4b20      	ldr	r3, [pc, #128]	; (80010a4 <MX_ADC2_Init+0xc0>)
 8001024:	2200      	movs	r2, #0
 8001026:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001028:	4b1e      	ldr	r3, [pc, #120]	; (80010a4 <MX_ADC2_Init+0xc0>)
 800102a:	2200      	movs	r2, #0
 800102c:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 800102e:	4b1d      	ldr	r3, [pc, #116]	; (80010a4 <MX_ADC2_Init+0xc0>)
 8001030:	2201      	movs	r2, #1
 8001032:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001034:	4b1b      	ldr	r3, [pc, #108]	; (80010a4 <MX_ADC2_Init+0xc0>)
 8001036:	2200      	movs	r2, #0
 8001038:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800103c:	4b19      	ldr	r3, [pc, #100]	; (80010a4 <MX_ADC2_Init+0xc0>)
 800103e:	2200      	movs	r2, #0
 8001040:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001042:	4b18      	ldr	r3, [pc, #96]	; (80010a4 <MX_ADC2_Init+0xc0>)
 8001044:	2200      	movs	r2, #0
 8001046:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001048:	4b16      	ldr	r3, [pc, #88]	; (80010a4 <MX_ADC2_Init+0xc0>)
 800104a:	2200      	movs	r2, #0
 800104c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001050:	4b14      	ldr	r3, [pc, #80]	; (80010a4 <MX_ADC2_Init+0xc0>)
 8001052:	2200      	movs	r2, #0
 8001054:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8001056:	4b13      	ldr	r3, [pc, #76]	; (80010a4 <MX_ADC2_Init+0xc0>)
 8001058:	2200      	movs	r2, #0
 800105a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800105e:	4811      	ldr	r0, [pc, #68]	; (80010a4 <MX_ADC2_Init+0xc0>)
 8001060:	f002 fbf4 	bl	800384c <HAL_ADC_Init>
 8001064:	4603      	mov	r3, r0
 8001066:	2b00      	cmp	r3, #0
 8001068:	d001      	beq.n	800106e <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 800106a:	f000 fdb1 	bl	8001bd0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800106e:	4b0f      	ldr	r3, [pc, #60]	; (80010ac <MX_ADC2_Init+0xc8>)
 8001070:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001072:	2306      	movs	r3, #6
 8001074:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001076:	2300      	movs	r3, #0
 8001078:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800107a:	237f      	movs	r3, #127	; 0x7f
 800107c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800107e:	2304      	movs	r3, #4
 8001080:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001082:	2300      	movs	r3, #0
 8001084:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001086:	463b      	mov	r3, r7
 8001088:	4619      	mov	r1, r3
 800108a:	4806      	ldr	r0, [pc, #24]	; (80010a4 <MX_ADC2_Init+0xc0>)
 800108c:	f002 fda0 	bl	8003bd0 <HAL_ADC_ConfigChannel>
 8001090:	4603      	mov	r3, r0
 8001092:	2b00      	cmp	r3, #0
 8001094:	d001      	beq.n	800109a <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 8001096:	f000 fd9b 	bl	8001bd0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800109a:	bf00      	nop
 800109c:	3720      	adds	r7, #32
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	200003d8 	.word	0x200003d8
 80010a8:	50000100 	.word	0x50000100
 80010ac:	25b00200 	.word	0x25b00200

080010b0 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b08c      	sub	sp, #48	; 0x30
 80010b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80010b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010ba:	2200      	movs	r2, #0
 80010bc:	601a      	str	r2, [r3, #0]
 80010be:	605a      	str	r2, [r3, #4]
 80010c0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80010c2:	1d3b      	adds	r3, r7, #4
 80010c4:	2220      	movs	r2, #32
 80010c6:	2100      	movs	r1, #0
 80010c8:	4618      	mov	r0, r3
 80010ca:	f011 fa5f 	bl	801258c <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 80010ce:	4b31      	ldr	r3, [pc, #196]	; (8001194 <MX_ADC3_Init+0xe4>)
 80010d0:	4a31      	ldr	r2, [pc, #196]	; (8001198 <MX_ADC3_Init+0xe8>)
 80010d2:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80010d4:	4b2f      	ldr	r3, [pc, #188]	; (8001194 <MX_ADC3_Init+0xe4>)
 80010d6:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80010da:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80010dc:	4b2d      	ldr	r3, [pc, #180]	; (8001194 <MX_ADC3_Init+0xe4>)
 80010de:	2200      	movs	r2, #0
 80010e0:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80010e2:	4b2c      	ldr	r3, [pc, #176]	; (8001194 <MX_ADC3_Init+0xe4>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	60da      	str	r2, [r3, #12]
  hadc3.Init.GainCompensation = 0;
 80010e8:	4b2a      	ldr	r3, [pc, #168]	; (8001194 <MX_ADC3_Init+0xe4>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	611a      	str	r2, [r3, #16]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80010ee:	4b29      	ldr	r3, [pc, #164]	; (8001194 <MX_ADC3_Init+0xe4>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	615a      	str	r2, [r3, #20]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80010f4:	4b27      	ldr	r3, [pc, #156]	; (8001194 <MX_ADC3_Init+0xe4>)
 80010f6:	2204      	movs	r2, #4
 80010f8:	619a      	str	r2, [r3, #24]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 80010fa:	4b26      	ldr	r3, [pc, #152]	; (8001194 <MX_ADC3_Init+0xe4>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8001100:	4b24      	ldr	r3, [pc, #144]	; (8001194 <MX_ADC3_Init+0xe4>)
 8001102:	2200      	movs	r2, #0
 8001104:	775a      	strb	r2, [r3, #29]
  hadc3.Init.NbrOfConversion = 1;
 8001106:	4b23      	ldr	r3, [pc, #140]	; (8001194 <MX_ADC3_Init+0xe4>)
 8001108:	2201      	movs	r2, #1
 800110a:	621a      	str	r2, [r3, #32]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800110c:	4b21      	ldr	r3, [pc, #132]	; (8001194 <MX_ADC3_Init+0xe4>)
 800110e:	2200      	movs	r2, #0
 8001110:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001114:	4b1f      	ldr	r3, [pc, #124]	; (8001194 <MX_ADC3_Init+0xe4>)
 8001116:	2200      	movs	r2, #0
 8001118:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800111a:	4b1e      	ldr	r3, [pc, #120]	; (8001194 <MX_ADC3_Init+0xe4>)
 800111c:	2200      	movs	r2, #0
 800111e:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8001120:	4b1c      	ldr	r3, [pc, #112]	; (8001194 <MX_ADC3_Init+0xe4>)
 8001122:	2200      	movs	r2, #0
 8001124:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001128:	4b1a      	ldr	r3, [pc, #104]	; (8001194 <MX_ADC3_Init+0xe4>)
 800112a:	2200      	movs	r2, #0
 800112c:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc3.Init.OversamplingMode = DISABLE;
 800112e:	4b19      	ldr	r3, [pc, #100]	; (8001194 <MX_ADC3_Init+0xe4>)
 8001130:	2200      	movs	r2, #0
 8001132:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001136:	4817      	ldr	r0, [pc, #92]	; (8001194 <MX_ADC3_Init+0xe4>)
 8001138:	f002 fb88 	bl	800384c <HAL_ADC_Init>
 800113c:	4603      	mov	r3, r0
 800113e:	2b00      	cmp	r3, #0
 8001140:	d001      	beq.n	8001146 <MX_ADC3_Init+0x96>
  {
    Error_Handler();
 8001142:	f000 fd45 	bl	8001bd0 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001146:	2300      	movs	r3, #0
 8001148:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 800114a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800114e:	4619      	mov	r1, r3
 8001150:	4810      	ldr	r0, [pc, #64]	; (8001194 <MX_ADC3_Init+0xe4>)
 8001152:	f003 f9a3 	bl	800449c <HAL_ADCEx_MultiModeConfigChannel>
 8001156:	4603      	mov	r3, r0
 8001158:	2b00      	cmp	r3, #0
 800115a:	d001      	beq.n	8001160 <MX_ADC3_Init+0xb0>
  {
    Error_Handler();
 800115c:	f000 fd38 	bl	8001bd0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001160:	4b0e      	ldr	r3, [pc, #56]	; (800119c <MX_ADC3_Init+0xec>)
 8001162:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001164:	2306      	movs	r3, #6
 8001166:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001168:	2300      	movs	r3, #0
 800116a:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800116c:	237f      	movs	r3, #127	; 0x7f
 800116e:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001170:	2304      	movs	r3, #4
 8001172:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001174:	2300      	movs	r3, #0
 8001176:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001178:	1d3b      	adds	r3, r7, #4
 800117a:	4619      	mov	r1, r3
 800117c:	4805      	ldr	r0, [pc, #20]	; (8001194 <MX_ADC3_Init+0xe4>)
 800117e:	f002 fd27 	bl	8003bd0 <HAL_ADC_ConfigChannel>
 8001182:	4603      	mov	r3, r0
 8001184:	2b00      	cmp	r3, #0
 8001186:	d001      	beq.n	800118c <MX_ADC3_Init+0xdc>
  {
    Error_Handler();
 8001188:	f000 fd22 	bl	8001bd0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 800118c:	bf00      	nop
 800118e:	3730      	adds	r7, #48	; 0x30
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}
 8001194:	20000444 	.word	0x20000444
 8001198:	50000400 	.word	0x50000400
 800119c:	04300002 	.word	0x04300002

080011a0 <MX_ADC4_Init>:
/* ADC4 init function */
void MX_ADC4_Init(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b088      	sub	sp, #32
 80011a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC4_Init 0 */

  /* USER CODE END ADC4_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80011a6:	463b      	mov	r3, r7
 80011a8:	2220      	movs	r2, #32
 80011aa:	2100      	movs	r1, #0
 80011ac:	4618      	mov	r0, r3
 80011ae:	f011 f9ed 	bl	801258c <memset>

  /* USER CODE END ADC4_Init 1 */

  /** Common config
  */
  hadc4.Instance = ADC4;
 80011b2:	4b2b      	ldr	r3, [pc, #172]	; (8001260 <MX_ADC4_Init+0xc0>)
 80011b4:	4a2b      	ldr	r2, [pc, #172]	; (8001264 <MX_ADC4_Init+0xc4>)
 80011b6:	601a      	str	r2, [r3, #0]
  hadc4.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80011b8:	4b29      	ldr	r3, [pc, #164]	; (8001260 <MX_ADC4_Init+0xc0>)
 80011ba:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80011be:	605a      	str	r2, [r3, #4]
  hadc4.Init.Resolution = ADC_RESOLUTION_12B;
 80011c0:	4b27      	ldr	r3, [pc, #156]	; (8001260 <MX_ADC4_Init+0xc0>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	609a      	str	r2, [r3, #8]
  hadc4.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80011c6:	4b26      	ldr	r3, [pc, #152]	; (8001260 <MX_ADC4_Init+0xc0>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	60da      	str	r2, [r3, #12]
  hadc4.Init.GainCompensation = 0;
 80011cc:	4b24      	ldr	r3, [pc, #144]	; (8001260 <MX_ADC4_Init+0xc0>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	611a      	str	r2, [r3, #16]
  hadc4.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80011d2:	4b23      	ldr	r3, [pc, #140]	; (8001260 <MX_ADC4_Init+0xc0>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	615a      	str	r2, [r3, #20]
  hadc4.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80011d8:	4b21      	ldr	r3, [pc, #132]	; (8001260 <MX_ADC4_Init+0xc0>)
 80011da:	2204      	movs	r2, #4
 80011dc:	619a      	str	r2, [r3, #24]
  hadc4.Init.LowPowerAutoWait = DISABLE;
 80011de:	4b20      	ldr	r3, [pc, #128]	; (8001260 <MX_ADC4_Init+0xc0>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	771a      	strb	r2, [r3, #28]
  hadc4.Init.ContinuousConvMode = DISABLE;
 80011e4:	4b1e      	ldr	r3, [pc, #120]	; (8001260 <MX_ADC4_Init+0xc0>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	775a      	strb	r2, [r3, #29]
  hadc4.Init.NbrOfConversion = 1;
 80011ea:	4b1d      	ldr	r3, [pc, #116]	; (8001260 <MX_ADC4_Init+0xc0>)
 80011ec:	2201      	movs	r2, #1
 80011ee:	621a      	str	r2, [r3, #32]
  hadc4.Init.DiscontinuousConvMode = DISABLE;
 80011f0:	4b1b      	ldr	r3, [pc, #108]	; (8001260 <MX_ADC4_Init+0xc0>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc4.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80011f8:	4b19      	ldr	r3, [pc, #100]	; (8001260 <MX_ADC4_Init+0xc0>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc4.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80011fe:	4b18      	ldr	r3, [pc, #96]	; (8001260 <MX_ADC4_Init+0xc0>)
 8001200:	2200      	movs	r2, #0
 8001202:	631a      	str	r2, [r3, #48]	; 0x30
  hadc4.Init.DMAContinuousRequests = DISABLE;
 8001204:	4b16      	ldr	r3, [pc, #88]	; (8001260 <MX_ADC4_Init+0xc0>)
 8001206:	2200      	movs	r2, #0
 8001208:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc4.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800120c:	4b14      	ldr	r3, [pc, #80]	; (8001260 <MX_ADC4_Init+0xc0>)
 800120e:	2200      	movs	r2, #0
 8001210:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc4.Init.OversamplingMode = DISABLE;
 8001212:	4b13      	ldr	r3, [pc, #76]	; (8001260 <MX_ADC4_Init+0xc0>)
 8001214:	2200      	movs	r2, #0
 8001216:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc4) != HAL_OK)
 800121a:	4811      	ldr	r0, [pc, #68]	; (8001260 <MX_ADC4_Init+0xc0>)
 800121c:	f002 fb16 	bl	800384c <HAL_ADC_Init>
 8001220:	4603      	mov	r3, r0
 8001222:	2b00      	cmp	r3, #0
 8001224:	d001      	beq.n	800122a <MX_ADC4_Init+0x8a>
  {
    Error_Handler();
 8001226:	f000 fcd3 	bl	8001bd0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800122a:	4b0f      	ldr	r3, [pc, #60]	; (8001268 <MX_ADC4_Init+0xc8>)
 800122c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800122e:	2306      	movs	r3, #6
 8001230:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_47CYCLES_5;
 8001232:	2304      	movs	r3, #4
 8001234:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001236:	237f      	movs	r3, #127	; 0x7f
 8001238:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800123a:	2304      	movs	r3, #4
 800123c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800123e:	2300      	movs	r3, #0
 8001240:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 8001242:	463b      	mov	r3, r7
 8001244:	4619      	mov	r1, r3
 8001246:	4806      	ldr	r0, [pc, #24]	; (8001260 <MX_ADC4_Init+0xc0>)
 8001248:	f002 fcc2 	bl	8003bd0 <HAL_ADC_ConfigChannel>
 800124c:	4603      	mov	r3, r0
 800124e:	2b00      	cmp	r3, #0
 8001250:	d001      	beq.n	8001256 <MX_ADC4_Init+0xb6>
  {
    Error_Handler();
 8001252:	f000 fcbd 	bl	8001bd0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC4_Init 2 */

  /* USER CODE END ADC4_Init 2 */

}
 8001256:	bf00      	nop
 8001258:	3720      	adds	r7, #32
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	200004b0 	.word	0x200004b0
 8001264:	50000500 	.word	0x50000500
 8001268:	0c900008 	.word	0x0c900008

0800126c <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;
static uint32_t HAL_RCC_ADC345_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b0a6      	sub	sp, #152	; 0x98
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001274:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001278:	2200      	movs	r2, #0
 800127a:	601a      	str	r2, [r3, #0]
 800127c:	605a      	str	r2, [r3, #4]
 800127e:	609a      	str	r2, [r3, #8]
 8001280:	60da      	str	r2, [r3, #12]
 8001282:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001284:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001288:	2254      	movs	r2, #84	; 0x54
 800128a:	2100      	movs	r1, #0
 800128c:	4618      	mov	r0, r3
 800128e:	f011 f97d 	bl	801258c <memset>
  if(adcHandle->Instance==ADC1)
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800129a:	d141      	bne.n	8001320 <HAL_ADC_MspInit+0xb4>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 800129c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80012a0:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80012a2:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80012a6:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012a8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80012ac:	4618      	mov	r0, r3
 80012ae:	f006 fe47 	bl	8007f40 <HAL_RCCEx_PeriphCLKConfig>
 80012b2:	4603      	mov	r3, r0
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d001      	beq.n	80012bc <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80012b8:	f000 fc8a 	bl	8001bd0 <Error_Handler>
    }

    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 80012bc:	4b91      	ldr	r3, [pc, #580]	; (8001504 <HAL_ADC_MspInit+0x298>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	3301      	adds	r3, #1
 80012c2:	4a90      	ldr	r2, [pc, #576]	; (8001504 <HAL_ADC_MspInit+0x298>)
 80012c4:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80012c6:	4b8f      	ldr	r3, [pc, #572]	; (8001504 <HAL_ADC_MspInit+0x298>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	2b01      	cmp	r3, #1
 80012cc:	d10b      	bne.n	80012e6 <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80012ce:	4b8e      	ldr	r3, [pc, #568]	; (8001508 <HAL_ADC_MspInit+0x29c>)
 80012d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012d2:	4a8d      	ldr	r2, [pc, #564]	; (8001508 <HAL_ADC_MspInit+0x29c>)
 80012d4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80012d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012da:	4b8b      	ldr	r3, [pc, #556]	; (8001508 <HAL_ADC_MspInit+0x29c>)
 80012dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012de:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80012e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80012e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012e6:	4b88      	ldr	r3, [pc, #544]	; (8001508 <HAL_ADC_MspInit+0x29c>)
 80012e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012ea:	4a87      	ldr	r2, [pc, #540]	; (8001508 <HAL_ADC_MspInit+0x29c>)
 80012ec:	f043 0301 	orr.w	r3, r3, #1
 80012f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012f2:	4b85      	ldr	r3, [pc, #532]	; (8001508 <HAL_ADC_MspInit+0x29c>)
 80012f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012f6:	f003 0301 	and.w	r3, r3, #1
 80012fa:	62bb      	str	r3, [r7, #40]	; 0x28
 80012fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80012fe:	2303      	movs	r3, #3
 8001300:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001304:	2303      	movs	r3, #3
 8001306:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800130a:	2300      	movs	r3, #0
 800130c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001310:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001314:	4619      	mov	r1, r3
 8001316:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800131a:	f003 fb85 	bl	8004a28 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC4_MspInit 1 */

  /* USER CODE END ADC4_MspInit 1 */
  }
}
 800131e:	e0ed      	b.n	80014fc <HAL_ADC_MspInit+0x290>
  else if(adcHandle->Instance==ADC2)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4a79      	ldr	r2, [pc, #484]	; (800150c <HAL_ADC_MspInit+0x2a0>)
 8001326:	4293      	cmp	r3, r2
 8001328:	d15b      	bne.n	80013e2 <HAL_ADC_MspInit+0x176>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 800132a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800132e:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001330:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001334:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001336:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800133a:	4618      	mov	r0, r3
 800133c:	f006 fe00 	bl	8007f40 <HAL_RCCEx_PeriphCLKConfig>
 8001340:	4603      	mov	r3, r0
 8001342:	2b00      	cmp	r3, #0
 8001344:	d001      	beq.n	800134a <HAL_ADC_MspInit+0xde>
      Error_Handler();
 8001346:	f000 fc43 	bl	8001bd0 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 800134a:	4b6e      	ldr	r3, [pc, #440]	; (8001504 <HAL_ADC_MspInit+0x298>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	3301      	adds	r3, #1
 8001350:	4a6c      	ldr	r2, [pc, #432]	; (8001504 <HAL_ADC_MspInit+0x298>)
 8001352:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001354:	4b6b      	ldr	r3, [pc, #428]	; (8001504 <HAL_ADC_MspInit+0x298>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	2b01      	cmp	r3, #1
 800135a:	d10b      	bne.n	8001374 <HAL_ADC_MspInit+0x108>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800135c:	4b6a      	ldr	r3, [pc, #424]	; (8001508 <HAL_ADC_MspInit+0x29c>)
 800135e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001360:	4a69      	ldr	r2, [pc, #420]	; (8001508 <HAL_ADC_MspInit+0x29c>)
 8001362:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001366:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001368:	4b67      	ldr	r3, [pc, #412]	; (8001508 <HAL_ADC_MspInit+0x29c>)
 800136a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800136c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001370:	627b      	str	r3, [r7, #36]	; 0x24
 8001372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001374:	4b64      	ldr	r3, [pc, #400]	; (8001508 <HAL_ADC_MspInit+0x29c>)
 8001376:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001378:	4a63      	ldr	r2, [pc, #396]	; (8001508 <HAL_ADC_MspInit+0x29c>)
 800137a:	f043 0304 	orr.w	r3, r3, #4
 800137e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001380:	4b61      	ldr	r3, [pc, #388]	; (8001508 <HAL_ADC_MspInit+0x29c>)
 8001382:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001384:	f003 0304 	and.w	r3, r3, #4
 8001388:	623b      	str	r3, [r7, #32]
 800138a:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800138c:	4b5e      	ldr	r3, [pc, #376]	; (8001508 <HAL_ADC_MspInit+0x29c>)
 800138e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001390:	4a5d      	ldr	r2, [pc, #372]	; (8001508 <HAL_ADC_MspInit+0x29c>)
 8001392:	f043 0302 	orr.w	r3, r3, #2
 8001396:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001398:	4b5b      	ldr	r3, [pc, #364]	; (8001508 <HAL_ADC_MspInit+0x29c>)
 800139a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800139c:	f003 0302 	and.w	r3, r3, #2
 80013a0:	61fb      	str	r3, [r7, #28]
 80013a2:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80013a4:	2308      	movs	r3, #8
 80013a6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013aa:	2303      	movs	r3, #3
 80013ac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b0:	2300      	movs	r3, #0
 80013b2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013b6:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80013ba:	4619      	mov	r1, r3
 80013bc:	4854      	ldr	r0, [pc, #336]	; (8001510 <HAL_ADC_MspInit+0x2a4>)
 80013be:	f003 fb33 	bl	8004a28 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80013c2:	2304      	movs	r3, #4
 80013c4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013c8:	2303      	movs	r3, #3
 80013ca:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ce:	2300      	movs	r3, #0
 80013d0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013d4:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80013d8:	4619      	mov	r1, r3
 80013da:	484e      	ldr	r0, [pc, #312]	; (8001514 <HAL_ADC_MspInit+0x2a8>)
 80013dc:	f003 fb24 	bl	8004a28 <HAL_GPIO_Init>
}
 80013e0:	e08c      	b.n	80014fc <HAL_ADC_MspInit+0x290>
  else if(adcHandle->Instance==ADC3)
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	4a4c      	ldr	r2, [pc, #304]	; (8001518 <HAL_ADC_MspInit+0x2ac>)
 80013e8:	4293      	cmp	r3, r2
 80013ea:	d141      	bne.n	8001470 <HAL_ADC_MspInit+0x204>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 80013ec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80013f0:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 80013f2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80013f6:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013f8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80013fc:	4618      	mov	r0, r3
 80013fe:	f006 fd9f 	bl	8007f40 <HAL_RCCEx_PeriphCLKConfig>
 8001402:	4603      	mov	r3, r0
 8001404:	2b00      	cmp	r3, #0
 8001406:	d001      	beq.n	800140c <HAL_ADC_MspInit+0x1a0>
      Error_Handler();
 8001408:	f000 fbe2 	bl	8001bd0 <Error_Handler>
    HAL_RCC_ADC345_CLK_ENABLED++;
 800140c:	4b43      	ldr	r3, [pc, #268]	; (800151c <HAL_ADC_MspInit+0x2b0>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	3301      	adds	r3, #1
 8001412:	4a42      	ldr	r2, [pc, #264]	; (800151c <HAL_ADC_MspInit+0x2b0>)
 8001414:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 8001416:	4b41      	ldr	r3, [pc, #260]	; (800151c <HAL_ADC_MspInit+0x2b0>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	2b01      	cmp	r3, #1
 800141c:	d10b      	bne.n	8001436 <HAL_ADC_MspInit+0x1ca>
      __HAL_RCC_ADC345_CLK_ENABLE();
 800141e:	4b3a      	ldr	r3, [pc, #232]	; (8001508 <HAL_ADC_MspInit+0x29c>)
 8001420:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001422:	4a39      	ldr	r2, [pc, #228]	; (8001508 <HAL_ADC_MspInit+0x29c>)
 8001424:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001428:	64d3      	str	r3, [r2, #76]	; 0x4c
 800142a:	4b37      	ldr	r3, [pc, #220]	; (8001508 <HAL_ADC_MspInit+0x29c>)
 800142c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800142e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001432:	61bb      	str	r3, [r7, #24]
 8001434:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001436:	4b34      	ldr	r3, [pc, #208]	; (8001508 <HAL_ADC_MspInit+0x29c>)
 8001438:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800143a:	4a33      	ldr	r2, [pc, #204]	; (8001508 <HAL_ADC_MspInit+0x29c>)
 800143c:	f043 0302 	orr.w	r3, r3, #2
 8001440:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001442:	4b31      	ldr	r3, [pc, #196]	; (8001508 <HAL_ADC_MspInit+0x29c>)
 8001444:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001446:	f003 0302 	and.w	r3, r3, #2
 800144a:	617b      	str	r3, [r7, #20]
 800144c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_13;
 800144e:	f242 0302 	movw	r3, #8194	; 0x2002
 8001452:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001456:	2303      	movs	r3, #3
 8001458:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800145c:	2300      	movs	r3, #0
 800145e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001462:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001466:	4619      	mov	r1, r3
 8001468:	482a      	ldr	r0, [pc, #168]	; (8001514 <HAL_ADC_MspInit+0x2a8>)
 800146a:	f003 fadd 	bl	8004a28 <HAL_GPIO_Init>
}
 800146e:	e045      	b.n	80014fc <HAL_ADC_MspInit+0x290>
  else if(adcHandle->Instance==ADC4)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	4a2a      	ldr	r2, [pc, #168]	; (8001520 <HAL_ADC_MspInit+0x2b4>)
 8001476:	4293      	cmp	r3, r2
 8001478:	d140      	bne.n	80014fc <HAL_ADC_MspInit+0x290>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 800147a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800147e:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 8001480:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8001484:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001486:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800148a:	4618      	mov	r0, r3
 800148c:	f006 fd58 	bl	8007f40 <HAL_RCCEx_PeriphCLKConfig>
 8001490:	4603      	mov	r3, r0
 8001492:	2b00      	cmp	r3, #0
 8001494:	d001      	beq.n	800149a <HAL_ADC_MspInit+0x22e>
      Error_Handler();
 8001496:	f000 fb9b 	bl	8001bd0 <Error_Handler>
    HAL_RCC_ADC345_CLK_ENABLED++;
 800149a:	4b20      	ldr	r3, [pc, #128]	; (800151c <HAL_ADC_MspInit+0x2b0>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	3301      	adds	r3, #1
 80014a0:	4a1e      	ldr	r2, [pc, #120]	; (800151c <HAL_ADC_MspInit+0x2b0>)
 80014a2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 80014a4:	4b1d      	ldr	r3, [pc, #116]	; (800151c <HAL_ADC_MspInit+0x2b0>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	2b01      	cmp	r3, #1
 80014aa:	d10b      	bne.n	80014c4 <HAL_ADC_MspInit+0x258>
      __HAL_RCC_ADC345_CLK_ENABLE();
 80014ac:	4b16      	ldr	r3, [pc, #88]	; (8001508 <HAL_ADC_MspInit+0x29c>)
 80014ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014b0:	4a15      	ldr	r2, [pc, #84]	; (8001508 <HAL_ADC_MspInit+0x29c>)
 80014b2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014b6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014b8:	4b13      	ldr	r3, [pc, #76]	; (8001508 <HAL_ADC_MspInit+0x29c>)
 80014ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014c0:	613b      	str	r3, [r7, #16]
 80014c2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014c4:	4b10      	ldr	r3, [pc, #64]	; (8001508 <HAL_ADC_MspInit+0x29c>)
 80014c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014c8:	4a0f      	ldr	r2, [pc, #60]	; (8001508 <HAL_ADC_MspInit+0x29c>)
 80014ca:	f043 0302 	orr.w	r3, r3, #2
 80014ce:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014d0:	4b0d      	ldr	r3, [pc, #52]	; (8001508 <HAL_ADC_MspInit+0x29c>)
 80014d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014d4:	f003 0302 	and.w	r3, r3, #2
 80014d8:	60fb      	str	r3, [r7, #12]
 80014da:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14;
 80014dc:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 80014e0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014e4:	2303      	movs	r3, #3
 80014e6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ea:	2300      	movs	r3, #0
 80014ec:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014f0:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80014f4:	4619      	mov	r1, r3
 80014f6:	4807      	ldr	r0, [pc, #28]	; (8001514 <HAL_ADC_MspInit+0x2a8>)
 80014f8:	f003 fa96 	bl	8004a28 <HAL_GPIO_Init>
}
 80014fc:	bf00      	nop
 80014fe:	3798      	adds	r7, #152	; 0x98
 8001500:	46bd      	mov	sp, r7
 8001502:	bd80      	pop	{r7, pc}
 8001504:	2000051c 	.word	0x2000051c
 8001508:	40021000 	.word	0x40021000
 800150c:	50000100 	.word	0x50000100
 8001510:	48000800 	.word	0x48000800
 8001514:	48000400 	.word	0x48000400
 8001518:	50000400 	.word	0x50000400
 800151c:	20000520 	.word	0x20000520
 8001520:	50000500 	.word	0x50000500

08001524 <MX_CORDIC_Init>:

CORDIC_HandleTypeDef hcordic;

/* CORDIC init function */
void MX_CORDIC_Init(void)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	af00      	add	r7, sp, #0
  /* USER CODE END CORDIC_Init 0 */

  /* USER CODE BEGIN CORDIC_Init 1 */

  /* USER CODE END CORDIC_Init 1 */
  hcordic.Instance = CORDIC;
 8001528:	4b06      	ldr	r3, [pc, #24]	; (8001544 <MX_CORDIC_Init+0x20>)
 800152a:	4a07      	ldr	r2, [pc, #28]	; (8001548 <MX_CORDIC_Init+0x24>)
 800152c:	601a      	str	r2, [r3, #0]
  if (HAL_CORDIC_Init(&hcordic) != HAL_OK)
 800152e:	4805      	ldr	r0, [pc, #20]	; (8001544 <MX_CORDIC_Init+0x20>)
 8001530:	f003 f8bc 	bl	80046ac <HAL_CORDIC_Init>
 8001534:	4603      	mov	r3, r0
 8001536:	2b00      	cmp	r3, #0
 8001538:	d001      	beq.n	800153e <MX_CORDIC_Init+0x1a>
  {
    Error_Handler();
 800153a:	f000 fb49 	bl	8001bd0 <Error_Handler>
  }
  /* USER CODE BEGIN CORDIC_Init 2 */

  /* USER CODE END CORDIC_Init 2 */

}
 800153e:	bf00      	nop
 8001540:	bd80      	pop	{r7, pc}
 8001542:	bf00      	nop
 8001544:	20000524 	.word	0x20000524
 8001548:	40020c00 	.word	0x40020c00

0800154c <HAL_CORDIC_MspInit>:

void HAL_CORDIC_MspInit(CORDIC_HandleTypeDef* cordicHandle)
{
 800154c:	b480      	push	{r7}
 800154e:	b085      	sub	sp, #20
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]

  if(cordicHandle->Instance==CORDIC)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	4a0a      	ldr	r2, [pc, #40]	; (8001584 <HAL_CORDIC_MspInit+0x38>)
 800155a:	4293      	cmp	r3, r2
 800155c:	d10b      	bne.n	8001576 <HAL_CORDIC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CORDIC_MspInit 0 */

  /* USER CODE END CORDIC_MspInit 0 */
    /* CORDIC clock enable */
    __HAL_RCC_CORDIC_CLK_ENABLE();
 800155e:	4b0a      	ldr	r3, [pc, #40]	; (8001588 <HAL_CORDIC_MspInit+0x3c>)
 8001560:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001562:	4a09      	ldr	r2, [pc, #36]	; (8001588 <HAL_CORDIC_MspInit+0x3c>)
 8001564:	f043 0308 	orr.w	r3, r3, #8
 8001568:	6493      	str	r3, [r2, #72]	; 0x48
 800156a:	4b07      	ldr	r3, [pc, #28]	; (8001588 <HAL_CORDIC_MspInit+0x3c>)
 800156c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800156e:	f003 0308 	and.w	r3, r3, #8
 8001572:	60fb      	str	r3, [r7, #12]
 8001574:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CORDIC_MspInit 1 */

  /* USER CODE END CORDIC_MspInit 1 */
  }
}
 8001576:	bf00      	nop
 8001578:	3714      	adds	r7, #20
 800157a:	46bd      	mov	sp, r7
 800157c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001580:	4770      	bx	lr
 8001582:	bf00      	nop
 8001584:	40020c00 	.word	0x40020c00
 8001588:	40021000 	.word	0x40021000

0800158c <MX_FMAC_Init>:

FMAC_HandleTypeDef hfmac;

/* FMAC init function */
void MX_FMAC_Init(void)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	af00      	add	r7, sp, #0
  /* USER CODE END FMAC_Init 0 */

  /* USER CODE BEGIN FMAC_Init 1 */

  /* USER CODE END FMAC_Init 1 */
  hfmac.Instance = FMAC;
 8001590:	4b06      	ldr	r3, [pc, #24]	; (80015ac <MX_FMAC_Init+0x20>)
 8001592:	4a07      	ldr	r2, [pc, #28]	; (80015b0 <MX_FMAC_Init+0x24>)
 8001594:	601a      	str	r2, [r3, #0]
  if (HAL_FMAC_Init(&hfmac) != HAL_OK)
 8001596:	4805      	ldr	r0, [pc, #20]	; (80015ac <MX_FMAC_Init+0x20>)
 8001598:	f003 f99a 	bl	80048d0 <HAL_FMAC_Init>
 800159c:	4603      	mov	r3, r0
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d001      	beq.n	80015a6 <MX_FMAC_Init+0x1a>
  {
    Error_Handler();
 80015a2:	f000 fb15 	bl	8001bd0 <Error_Handler>
  }
  /* USER CODE BEGIN FMAC_Init 2 */

  /* USER CODE END FMAC_Init 2 */

}
 80015a6:	bf00      	nop
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	2000054c 	.word	0x2000054c
 80015b0:	40021400 	.word	0x40021400

080015b4 <HAL_FMAC_MspInit>:

void HAL_FMAC_MspInit(FMAC_HandleTypeDef* fmacHandle)
{
 80015b4:	b480      	push	{r7}
 80015b6:	b085      	sub	sp, #20
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]

  if(fmacHandle->Instance==FMAC)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	4a0a      	ldr	r2, [pc, #40]	; (80015ec <HAL_FMAC_MspInit+0x38>)
 80015c2:	4293      	cmp	r3, r2
 80015c4:	d10b      	bne.n	80015de <HAL_FMAC_MspInit+0x2a>
  {
  /* USER CODE BEGIN FMAC_MspInit 0 */

  /* USER CODE END FMAC_MspInit 0 */
    /* FMAC clock enable */
    __HAL_RCC_FMAC_CLK_ENABLE();
 80015c6:	4b0a      	ldr	r3, [pc, #40]	; (80015f0 <HAL_FMAC_MspInit+0x3c>)
 80015c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80015ca:	4a09      	ldr	r2, [pc, #36]	; (80015f0 <HAL_FMAC_MspInit+0x3c>)
 80015cc:	f043 0310 	orr.w	r3, r3, #16
 80015d0:	6493      	str	r3, [r2, #72]	; 0x48
 80015d2:	4b07      	ldr	r3, [pc, #28]	; (80015f0 <HAL_FMAC_MspInit+0x3c>)
 80015d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80015d6:	f003 0310 	and.w	r3, r3, #16
 80015da:	60fb      	str	r3, [r7, #12]
 80015dc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN FMAC_MspInit 1 */

  /* USER CODE END FMAC_MspInit 1 */
  }
}
 80015de:	bf00      	nop
 80015e0:	3714      	adds	r7, #20
 80015e2:	46bd      	mov	sp, r7
 80015e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e8:	4770      	bx	lr
 80015ea:	bf00      	nop
 80015ec:	40021400 	.word	0x40021400
 80015f0:	40021000 	.word	0x40021000

080015f4 <HAL_GPIO_EXTI_Callback>:
/* USER CODE BEGIN 0 */



void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80015f4:	b480      	push	{r7}
 80015f6:	b083      	sub	sp, #12
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	4603      	mov	r3, r0
 80015fc:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == ENC_BTN_A_Pin){
		//ENC_Button_Update(HAL_GPIO_ReadPin(ENC_BTN_B_GPIO_Port, ENC_BTN_B_Pin));
	}

}
 80015fe:	bf00      	nop
 8001600:	370c      	adds	r7, #12
 8001602:	46bd      	mov	sp, r7
 8001604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001608:	4770      	bx	lr
	...

0800160c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b08c      	sub	sp, #48	; 0x30
 8001610:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001612:	f107 031c 	add.w	r3, r7, #28
 8001616:	2200      	movs	r2, #0
 8001618:	601a      	str	r2, [r3, #0]
 800161a:	605a      	str	r2, [r3, #4]
 800161c:	609a      	str	r2, [r3, #8]
 800161e:	60da      	str	r2, [r3, #12]
 8001620:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001622:	4b68      	ldr	r3, [pc, #416]	; (80017c4 <MX_GPIO_Init+0x1b8>)
 8001624:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001626:	4a67      	ldr	r2, [pc, #412]	; (80017c4 <MX_GPIO_Init+0x1b8>)
 8001628:	f043 0304 	orr.w	r3, r3, #4
 800162c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800162e:	4b65      	ldr	r3, [pc, #404]	; (80017c4 <MX_GPIO_Init+0x1b8>)
 8001630:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001632:	f003 0304 	and.w	r3, r3, #4
 8001636:	61bb      	str	r3, [r7, #24]
 8001638:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800163a:	4b62      	ldr	r3, [pc, #392]	; (80017c4 <MX_GPIO_Init+0x1b8>)
 800163c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800163e:	4a61      	ldr	r2, [pc, #388]	; (80017c4 <MX_GPIO_Init+0x1b8>)
 8001640:	f043 0320 	orr.w	r3, r3, #32
 8001644:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001646:	4b5f      	ldr	r3, [pc, #380]	; (80017c4 <MX_GPIO_Init+0x1b8>)
 8001648:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800164a:	f003 0320 	and.w	r3, r3, #32
 800164e:	617b      	str	r3, [r7, #20]
 8001650:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001652:	4b5c      	ldr	r3, [pc, #368]	; (80017c4 <MX_GPIO_Init+0x1b8>)
 8001654:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001656:	4a5b      	ldr	r2, [pc, #364]	; (80017c4 <MX_GPIO_Init+0x1b8>)
 8001658:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800165c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800165e:	4b59      	ldr	r3, [pc, #356]	; (80017c4 <MX_GPIO_Init+0x1b8>)
 8001660:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001662:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001666:	613b      	str	r3, [r7, #16]
 8001668:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800166a:	4b56      	ldr	r3, [pc, #344]	; (80017c4 <MX_GPIO_Init+0x1b8>)
 800166c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800166e:	4a55      	ldr	r2, [pc, #340]	; (80017c4 <MX_GPIO_Init+0x1b8>)
 8001670:	f043 0301 	orr.w	r3, r3, #1
 8001674:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001676:	4b53      	ldr	r3, [pc, #332]	; (80017c4 <MX_GPIO_Init+0x1b8>)
 8001678:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800167a:	f003 0301 	and.w	r3, r3, #1
 800167e:	60fb      	str	r3, [r7, #12]
 8001680:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001682:	4b50      	ldr	r3, [pc, #320]	; (80017c4 <MX_GPIO_Init+0x1b8>)
 8001684:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001686:	4a4f      	ldr	r2, [pc, #316]	; (80017c4 <MX_GPIO_Init+0x1b8>)
 8001688:	f043 0302 	orr.w	r3, r3, #2
 800168c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800168e:	4b4d      	ldr	r3, [pc, #308]	; (80017c4 <MX_GPIO_Init+0x1b8>)
 8001690:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001692:	f003 0302 	and.w	r3, r3, #2
 8001696:	60bb      	str	r3, [r7, #8]
 8001698:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800169a:	4b4a      	ldr	r3, [pc, #296]	; (80017c4 <MX_GPIO_Init+0x1b8>)
 800169c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800169e:	4a49      	ldr	r2, [pc, #292]	; (80017c4 <MX_GPIO_Init+0x1b8>)
 80016a0:	f043 0308 	orr.w	r3, r3, #8
 80016a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016a6:	4b47      	ldr	r3, [pc, #284]	; (80017c4 <MX_GPIO_Init+0x1b8>)
 80016a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016aa:	f003 0308 	and.w	r3, r3, #8
 80016ae:	607b      	str	r3, [r7, #4]
 80016b0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Pwr_Enable_U_Pin|Pwr_Enable_V_Pin|Pwr_Enable_W_Pin|USR_LED_2_Pin
 80016b2:	2200      	movs	r2, #0
 80016b4:	f44f 417c 	mov.w	r1, #64512	; 0xfc00
 80016b8:	4843      	ldr	r0, [pc, #268]	; (80017c8 <MX_GPIO_Init+0x1bc>)
 80016ba:	f003 fb37 	bl	8004d2c <HAL_GPIO_WritePin>
                          |USR_LED_3_Pin|USR_LED_4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USR_LED_1_GPIO_Port, USR_LED_1_Pin, GPIO_PIN_RESET);
 80016be:	2200      	movs	r2, #0
 80016c0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80016c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016c8:	f003 fb30 	bl	8004d2c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin */
  GPIO_InitStruct.Pin = Pwr_Enable_U_Pin|Pwr_Enable_V_Pin|Pwr_Enable_W_Pin|USR_LED_2_Pin
 80016cc:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 80016d0:	61fb      	str	r3, [r7, #28]
                          |USR_LED_3_Pin|USR_LED_4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016d2:	2301      	movs	r3, #1
 80016d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d6:	2300      	movs	r3, #0
 80016d8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016da:	2300      	movs	r3, #0
 80016dc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016de:	f107 031c 	add.w	r3, r7, #28
 80016e2:	4619      	mov	r1, r3
 80016e4:	4838      	ldr	r0, [pc, #224]	; (80017c8 <MX_GPIO_Init+0x1bc>)
 80016e6:	f003 f99f 	bl	8004a28 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NRST_Pin;
 80016ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80016ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016f0:	2300      	movs	r3, #0
 80016f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f4:	2300      	movs	r3, #0
 80016f6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(NRST_GPIO_Port, &GPIO_InitStruct);
 80016f8:	f107 031c 	add.w	r3, r7, #28
 80016fc:	4619      	mov	r1, r3
 80016fe:	4833      	ldr	r0, [pc, #204]	; (80017cc <MX_GPIO_Init+0x1c0>)
 8001700:	f003 f992 	bl	8004a28 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USR_BTN_2_Pin;
 8001704:	2310      	movs	r3, #16
 8001706:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001708:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800170c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800170e:	2301      	movs	r3, #1
 8001710:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USR_BTN_2_GPIO_Port, &GPIO_InitStruct);
 8001712:	f107 031c 	add.w	r3, r7, #28
 8001716:	4619      	mov	r1, r3
 8001718:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800171c:	f003 f984 	bl	8004a28 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENC_BTN_Pin;
 8001720:	2320      	movs	r3, #32
 8001722:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001724:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001728:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800172a:	2300      	movs	r3, #0
 800172c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ENC_BTN_GPIO_Port, &GPIO_InitStruct);
 800172e:	f107 031c 	add.w	r3, r7, #28
 8001732:	4619      	mov	r1, r3
 8001734:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001738:	f003 f976 	bl	8004a28 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Nucleo_NRST_Pin;
 800173c:	2301      	movs	r3, #1
 800173e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001740:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001744:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001746:	2300      	movs	r3, #0
 8001748:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Nucleo_NRST_GPIO_Port, &GPIO_InitStruct);
 800174a:	f107 031c 	add.w	r3, r7, #28
 800174e:	4619      	mov	r1, r3
 8001750:	481f      	ldr	r0, [pc, #124]	; (80017d0 <MX_GPIO_Init+0x1c4>)
 8001752:	f003 f969 	bl	8004a28 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USR_LED_1_Pin;
 8001756:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800175a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800175c:	2301      	movs	r3, #1
 800175e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001760:	2300      	movs	r3, #0
 8001762:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001764:	2300      	movs	r3, #0
 8001766:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USR_LED_1_GPIO_Port, &GPIO_InitStruct);
 8001768:	f107 031c 	add.w	r3, r7, #28
 800176c:	4619      	mov	r1, r3
 800176e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001772:	f003 f959 	bl	8004a28 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USR_BTN_1_Pin;
 8001776:	2304      	movs	r3, #4
 8001778:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800177a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800177e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001780:	2301      	movs	r3, #1
 8001782:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USR_BTN_1_GPIO_Port, &GPIO_InitStruct);
 8001784:	f107 031c 	add.w	r3, r7, #28
 8001788:	4619      	mov	r1, r3
 800178a:	4812      	ldr	r0, [pc, #72]	; (80017d4 <MX_GPIO_Init+0x1c8>)
 800178c:	f003 f94c 	bl	8004a28 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Soft_NRST_Pin;
 8001790:	2380      	movs	r3, #128	; 0x80
 8001792:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001794:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001798:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800179a:	2301      	movs	r3, #1
 800179c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Soft_NRST_GPIO_Port, &GPIO_InitStruct);
 800179e:	f107 031c 	add.w	r3, r7, #28
 80017a2:	4619      	mov	r1, r3
 80017a4:	480a      	ldr	r0, [pc, #40]	; (80017d0 <MX_GPIO_Init+0x1c4>)
 80017a6:	f003 f93f 	bl	8004a28 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 80017aa:	2200      	movs	r2, #0
 80017ac:	2105      	movs	r1, #5
 80017ae:	2017      	movs	r0, #23
 80017b0:	f003 f866 	bl	8004880 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80017b4:	2017      	movs	r0, #23
 80017b6:	f003 f87d 	bl	80048b4 <HAL_NVIC_EnableIRQ>

}
 80017ba:	bf00      	nop
 80017bc:	3730      	adds	r7, #48	; 0x30
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	40021000 	.word	0x40021000
 80017c8:	48000800 	.word	0x48000800
 80017cc:	48001800 	.word	0x48001800
 80017d0:	48000400 	.word	0x48000400
 80017d4:	48000c00 	.word	0x48000c00

080017d8 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80017dc:	4b1b      	ldr	r3, [pc, #108]	; (800184c <MX_I2C2_Init+0x74>)
 80017de:	4a1c      	ldr	r2, [pc, #112]	; (8001850 <MX_I2C2_Init+0x78>)
 80017e0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x30A0A7FB;
 80017e2:	4b1a      	ldr	r3, [pc, #104]	; (800184c <MX_I2C2_Init+0x74>)
 80017e4:	4a1b      	ldr	r2, [pc, #108]	; (8001854 <MX_I2C2_Init+0x7c>)
 80017e6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80017e8:	4b18      	ldr	r3, [pc, #96]	; (800184c <MX_I2C2_Init+0x74>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80017ee:	4b17      	ldr	r3, [pc, #92]	; (800184c <MX_I2C2_Init+0x74>)
 80017f0:	2201      	movs	r2, #1
 80017f2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80017f4:	4b15      	ldr	r3, [pc, #84]	; (800184c <MX_I2C2_Init+0x74>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80017fa:	4b14      	ldr	r3, [pc, #80]	; (800184c <MX_I2C2_Init+0x74>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001800:	4b12      	ldr	r3, [pc, #72]	; (800184c <MX_I2C2_Init+0x74>)
 8001802:	2200      	movs	r2, #0
 8001804:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001806:	4b11      	ldr	r3, [pc, #68]	; (800184c <MX_I2C2_Init+0x74>)
 8001808:	2200      	movs	r2, #0
 800180a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800180c:	4b0f      	ldr	r3, [pc, #60]	; (800184c <MX_I2C2_Init+0x74>)
 800180e:	2200      	movs	r2, #0
 8001810:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001812:	480e      	ldr	r0, [pc, #56]	; (800184c <MX_I2C2_Init+0x74>)
 8001814:	f003 fad4 	bl	8004dc0 <HAL_I2C_Init>
 8001818:	4603      	mov	r3, r0
 800181a:	2b00      	cmp	r3, #0
 800181c:	d001      	beq.n	8001822 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800181e:	f000 f9d7 	bl	8001bd0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001822:	2100      	movs	r1, #0
 8001824:	4809      	ldr	r0, [pc, #36]	; (800184c <MX_I2C2_Init+0x74>)
 8001826:	f003 ffbb 	bl	80057a0 <HAL_I2CEx_ConfigAnalogFilter>
 800182a:	4603      	mov	r3, r0
 800182c:	2b00      	cmp	r3, #0
 800182e:	d001      	beq.n	8001834 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001830:	f000 f9ce 	bl	8001bd0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001834:	2100      	movs	r1, #0
 8001836:	4805      	ldr	r0, [pc, #20]	; (800184c <MX_I2C2_Init+0x74>)
 8001838:	f003 fffd 	bl	8005836 <HAL_I2CEx_ConfigDigitalFilter>
 800183c:	4603      	mov	r3, r0
 800183e:	2b00      	cmp	r3, #0
 8001840:	d001      	beq.n	8001846 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001842:	f000 f9c5 	bl	8001bd0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001846:	bf00      	nop
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	20000584 	.word	0x20000584
 8001850:	40005800 	.word	0x40005800
 8001854:	30a0a7fb 	.word	0x30a0a7fb

08001858 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b09e      	sub	sp, #120	; 0x78
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001860:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001864:	2200      	movs	r2, #0
 8001866:	601a      	str	r2, [r3, #0]
 8001868:	605a      	str	r2, [r3, #4]
 800186a:	609a      	str	r2, [r3, #8]
 800186c:	60da      	str	r2, [r3, #12]
 800186e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001870:	f107 0310 	add.w	r3, r7, #16
 8001874:	2254      	movs	r2, #84	; 0x54
 8001876:	2100      	movs	r1, #0
 8001878:	4618      	mov	r0, r3
 800187a:	f010 fe87 	bl	801258c <memset>
  if(i2cHandle->Instance==I2C2)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	4a1f      	ldr	r2, [pc, #124]	; (8001900 <HAL_I2C_MspInit+0xa8>)
 8001884:	4293      	cmp	r3, r2
 8001886:	d137      	bne.n	80018f8 <HAL_I2C_MspInit+0xa0>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001888:	2380      	movs	r3, #128	; 0x80
 800188a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 800188c:	2300      	movs	r3, #0
 800188e:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001890:	f107 0310 	add.w	r3, r7, #16
 8001894:	4618      	mov	r0, r3
 8001896:	f006 fb53 	bl	8007f40 <HAL_RCCEx_PeriphCLKConfig>
 800189a:	4603      	mov	r3, r0
 800189c:	2b00      	cmp	r3, #0
 800189e:	d001      	beq.n	80018a4 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80018a0:	f000 f996 	bl	8001bd0 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018a4:	4b17      	ldr	r3, [pc, #92]	; (8001904 <HAL_I2C_MspInit+0xac>)
 80018a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018a8:	4a16      	ldr	r2, [pc, #88]	; (8001904 <HAL_I2C_MspInit+0xac>)
 80018aa:	f043 0301 	orr.w	r3, r3, #1
 80018ae:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018b0:	4b14      	ldr	r3, [pc, #80]	; (8001904 <HAL_I2C_MspInit+0xac>)
 80018b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018b4:	f003 0301 	and.w	r3, r3, #1
 80018b8:	60fb      	str	r3, [r7, #12]
 80018ba:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PA8     ------> I2C2_SDA
    PA9     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80018bc:	f44f 7340 	mov.w	r3, #768	; 0x300
 80018c0:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80018c2:	2312      	movs	r3, #18
 80018c4:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c6:	2300      	movs	r3, #0
 80018c8:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ca:	2300      	movs	r3, #0
 80018cc:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80018ce:	2304      	movs	r3, #4
 80018d0:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018d2:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80018d6:	4619      	mov	r1, r3
 80018d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018dc:	f003 f8a4 	bl	8004a28 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80018e0:	4b08      	ldr	r3, [pc, #32]	; (8001904 <HAL_I2C_MspInit+0xac>)
 80018e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018e4:	4a07      	ldr	r2, [pc, #28]	; (8001904 <HAL_I2C_MspInit+0xac>)
 80018e6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80018ea:	6593      	str	r3, [r2, #88]	; 0x58
 80018ec:	4b05      	ldr	r3, [pc, #20]	; (8001904 <HAL_I2C_MspInit+0xac>)
 80018ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018f0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018f4:	60bb      	str	r3, [r7, #8]
 80018f6:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80018f8:	bf00      	nop
 80018fa:	3778      	adds	r7, #120	; 0x78
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bd80      	pop	{r7, pc}
 8001900:	40005800 	.word	0x40005800
 8001904:	40021000 	.word	0x40021000

08001908 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b088      	sub	sp, #32
 800190c:	af02      	add	r7, sp, #8
//	int uartTxSize = 0;
//	uint16_t bus_voltage_raw;
//	float bus_voltage;
//	int time = 0;
//	BaseType_t xReturned;
	TaskHandle_t xHandle_LCD, xHandle_Rotary, xHandle_LED, xHandle_TCN75A, xHandle_Fan = NULL;
 800190e:	2300      	movs	r3, #0
 8001910:	607b      	str	r3, [r7, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001912:	f001 fd68 	bl	80033e6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001916:	f000 f8eb 	bl	8001af0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800191a:	f7ff fe77 	bl	800160c <MX_GPIO_Init>
  MX_ADC1_Init();
 800191e:	f7ff fae9 	bl	8000ef4 <MX_ADC1_Init>
  MX_ADC2_Init();
 8001922:	f7ff fb5f 	bl	8000fe4 <MX_ADC2_Init>
  MX_ADC3_Init();
 8001926:	f7ff fbc3 	bl	80010b0 <MX_ADC3_Init>
  MX_ADC4_Init();
 800192a:	f7ff fc39 	bl	80011a0 <MX_ADC4_Init>
  MX_CORDIC_Init();
 800192e:	f7ff fdf9 	bl	8001524 <MX_CORDIC_Init>
  MX_FMAC_Init();
 8001932:	f7ff fe2b 	bl	800158c <MX_FMAC_Init>
  MX_I2C2_Init();
 8001936:	f7ff ff4f 	bl	80017d8 <MX_I2C2_Init>
  MX_TIM8_Init();
 800193a:	f000 fbb5 	bl	80020a8 <MX_TIM8_Init>
  MX_TIM15_Init();
 800193e:	f000 fc4b 	bl	80021d8 <MX_TIM15_Init>
  MX_TIM17_Init();
 8001942:	f000 fd43 	bl	80023cc <MX_TIM17_Init>
  MX_USART1_UART_Init();
 8001946:	f000 ff25 	bl	8002794 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 800194a:	f000 ff6f 	bl	800282c <MX_USART3_UART_Init>
  MX_TIM16_Init();
 800194e:	f000 fcc3 	bl	80022d8 <MX_TIM16_Init>
  MX_TIM1_Init();
 8001952:	f000 fae3 	bl	8001f1c <MX_TIM1_Init>
  MX_USB_Device_Init();
 8001956:	f00f fa83 	bl	8010e60 <MX_USB_Device_Init>
  MX_TIM3_Init();
 800195a:	f000 fb4d 	bl	8001ff8 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  //I2C_Scan(&hi2c2);
	printf("*****************************************\r\n"
 800195e:	4847      	ldr	r0, [pc, #284]	; (8001a7c <main+0x174>)
 8001960:	f010 fce0 	bl	8012324 <puts>
		   "* ENSEA INVERTER PROJECT                *\r\n"
		   "* Firmware revision 1.1		            *\r\n"
		   "* By Nicolas Papazoglou & Alexis Martin *\r\n"
		   "*****************************************\r\n");
	//I2C_Scan(&hi2c2);
	xUartMutex = xSemaphoreCreateMutex();
 8001964:	2001      	movs	r0, #1
 8001966:	f00d fc90 	bl	800f28a <xQueueCreateMutex>
 800196a:	4603      	mov	r3, r0
 800196c:	4a44      	ldr	r2, [pc, #272]	; (8001a80 <main+0x178>)
 800196e:	6013      	str	r3, [r2, #0]
	xI2CMutex = xSemaphoreCreateMutex();
 8001970:	2001      	movs	r0, #1
 8001972:	f00d fc8a 	bl	800f28a <xQueueCreateMutex>
 8001976:	4603      	mov	r3, r0
 8001978:	4a42      	ldr	r2, [pc, #264]	; (8001a84 <main+0x17c>)
 800197a:	6013      	str	r3, [r2, #0]
	xTemperatureQueue = xQueueCreate(1, sizeof(float));
 800197c:	2200      	movs	r2, #0
 800197e:	2104      	movs	r1, #4
 8001980:	2001      	movs	r0, #1
 8001982:	f00d fc13 	bl	800f1ac <xQueueGenericCreate>
 8001986:	4603      	mov	r3, r0
 8001988:	4a3f      	ldr	r2, [pc, #252]	; (8001a88 <main+0x180>)
 800198a:	6013      	str	r3, [r2, #0]

	HAL_GPIO_WritePin(Pwr_Enable_U_GPIO_Port, Pwr_Enable_U_Pin, RESET);
 800198c:	2200      	movs	r2, #0
 800198e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001992:	483e      	ldr	r0, [pc, #248]	; (8001a8c <main+0x184>)
 8001994:	f003 f9ca 	bl	8004d2c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Pwr_Enable_V_GPIO_Port, Pwr_Enable_V_Pin, RESET);
 8001998:	2200      	movs	r2, #0
 800199a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800199e:	483b      	ldr	r0, [pc, #236]	; (8001a8c <main+0x184>)
 80019a0:	f003 f9c4 	bl	8004d2c <HAL_GPIO_WritePin>
//	xTaskCreate(vTask_1, "Task_1", STACK_SIZE, NULL, 1, &xHandle_LCD);
//	xTaskCreate(vTask_2, "Task_2", STACK_SIZE, NULL, 2, &xHandle_LCD);

	if(pdPASS==xTaskCreate(vTask_LCD, "LCD_Task", STACK_SIZE, (void *) &hi2c2, LCD_Task_Priority, &xHandle_LCD)){
 80019a4:	f107 0314 	add.w	r3, r7, #20
 80019a8:	9301      	str	r3, [sp, #4]
 80019aa:	2304      	movs	r3, #4
 80019ac:	9300      	str	r3, [sp, #0]
 80019ae:	4b38      	ldr	r3, [pc, #224]	; (8001a90 <main+0x188>)
 80019b0:	2280      	movs	r2, #128	; 0x80
 80019b2:	4938      	ldr	r1, [pc, #224]	; (8001a94 <main+0x18c>)
 80019b4:	4838      	ldr	r0, [pc, #224]	; (8001a98 <main+0x190>)
 80019b6:	f00e f893 	bl	800fae0 <xTaskCreate>
 80019ba:	4603      	mov	r3, r0
 80019bc:	2b01      	cmp	r3, #1
 80019be:	d103      	bne.n	80019c8 <main+0xc0>
		printf("LCD_Task successfully created\r\n");
 80019c0:	4836      	ldr	r0, [pc, #216]	; (8001a9c <main+0x194>)
 80019c2:	f010 fcaf 	bl	8012324 <puts>
 80019c6:	e002      	b.n	80019ce <main+0xc6>
	}
	else{
		printf("LCD_Task creation error\r\n");
 80019c8:	4835      	ldr	r0, [pc, #212]	; (8001aa0 <main+0x198>)
 80019ca:	f010 fcab 	bl	8012324 <puts>
	}

	if(pdPASS==xTaskCreate(vTask_RotaryEnc, "RotEncorder_Task", STACK_SIZE, (void *) &htim3, RotaryEnc_Task_Priority, &xHandle_Rotary)){
 80019ce:	f107 0310 	add.w	r3, r7, #16
 80019d2:	9301      	str	r3, [sp, #4]
 80019d4:	2302      	movs	r3, #2
 80019d6:	9300      	str	r3, [sp, #0]
 80019d8:	4b32      	ldr	r3, [pc, #200]	; (8001aa4 <main+0x19c>)
 80019da:	2280      	movs	r2, #128	; 0x80
 80019dc:	4932      	ldr	r1, [pc, #200]	; (8001aa8 <main+0x1a0>)
 80019de:	4833      	ldr	r0, [pc, #204]	; (8001aac <main+0x1a4>)
 80019e0:	f00e f87e 	bl	800fae0 <xTaskCreate>
 80019e4:	4603      	mov	r3, r0
 80019e6:	2b01      	cmp	r3, #1
 80019e8:	d103      	bne.n	80019f2 <main+0xea>
		printf("RotEncorder_Task successfully created\r\n");
 80019ea:	4831      	ldr	r0, [pc, #196]	; (8001ab0 <main+0x1a8>)
 80019ec:	f010 fc9a 	bl	8012324 <puts>
 80019f0:	e002      	b.n	80019f8 <main+0xf0>
	}
	else{
		printf("RotEncorder_Task creation error\r\n");
 80019f2:	4830      	ldr	r0, [pc, #192]	; (8001ab4 <main+0x1ac>)
 80019f4:	f010 fc96 	bl	8012324 <puts>
	}

	if(pdPASS==xTaskCreate(vTask_LED, "LED_Task", STACK_SIZE, (void *) NULL, LED_Task_Priority, &xHandle_LED)){
 80019f8:	f107 030c 	add.w	r3, r7, #12
 80019fc:	9301      	str	r3, [sp, #4]
 80019fe:	2301      	movs	r3, #1
 8001a00:	9300      	str	r3, [sp, #0]
 8001a02:	2300      	movs	r3, #0
 8001a04:	2280      	movs	r2, #128	; 0x80
 8001a06:	492c      	ldr	r1, [pc, #176]	; (8001ab8 <main+0x1b0>)
 8001a08:	482c      	ldr	r0, [pc, #176]	; (8001abc <main+0x1b4>)
 8001a0a:	f00e f869 	bl	800fae0 <xTaskCreate>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	2b01      	cmp	r3, #1
 8001a12:	d103      	bne.n	8001a1c <main+0x114>
		printf("LED_Task successfully created\r\n");
 8001a14:	482a      	ldr	r0, [pc, #168]	; (8001ac0 <main+0x1b8>)
 8001a16:	f010 fc85 	bl	8012324 <puts>
 8001a1a:	e002      	b.n	8001a22 <main+0x11a>
	}
	else{
		printf("LED_Task creation error\r\n");
 8001a1c:	4829      	ldr	r0, [pc, #164]	; (8001ac4 <main+0x1bc>)
 8001a1e:	f010 fc81 	bl	8012324 <puts>
	}

	if(pdPASS==xTaskCreate(vTask_TCN75A, "TCN75A_Task", STACK_SIZE, (void *) &hi2c2, TCN75A_Task_Priority, &xHandle_TCN75A)){
 8001a22:	f107 0308 	add.w	r3, r7, #8
 8001a26:	9301      	str	r3, [sp, #4]
 8001a28:	2303      	movs	r3, #3
 8001a2a:	9300      	str	r3, [sp, #0]
 8001a2c:	4b18      	ldr	r3, [pc, #96]	; (8001a90 <main+0x188>)
 8001a2e:	2280      	movs	r2, #128	; 0x80
 8001a30:	4925      	ldr	r1, [pc, #148]	; (8001ac8 <main+0x1c0>)
 8001a32:	4826      	ldr	r0, [pc, #152]	; (8001acc <main+0x1c4>)
 8001a34:	f00e f854 	bl	800fae0 <xTaskCreate>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	2b01      	cmp	r3, #1
 8001a3c:	d103      	bne.n	8001a46 <main+0x13e>
		printf("TCN75A_Task successfully created\r\n");
 8001a3e:	4824      	ldr	r0, [pc, #144]	; (8001ad0 <main+0x1c8>)
 8001a40:	f010 fc70 	bl	8012324 <puts>
 8001a44:	e002      	b.n	8001a4c <main+0x144>
	}
	else{
		printf("TCN75A_Task creation error\r\n");
 8001a46:	4823      	ldr	r0, [pc, #140]	; (8001ad4 <main+0x1cc>)
 8001a48:	f010 fc6c 	bl	8012324 <puts>
	}

	if(pdPASS==xTaskCreate(vTask_Fan, "Fan_Task", STACK_SIZE, (void *) &htim16, Fan_Task_Priority, &xHandle_Fan)){
 8001a4c:	1d3b      	adds	r3, r7, #4
 8001a4e:	9301      	str	r3, [sp, #4]
 8001a50:	2300      	movs	r3, #0
 8001a52:	9300      	str	r3, [sp, #0]
 8001a54:	4b20      	ldr	r3, [pc, #128]	; (8001ad8 <main+0x1d0>)
 8001a56:	2280      	movs	r2, #128	; 0x80
 8001a58:	4920      	ldr	r1, [pc, #128]	; (8001adc <main+0x1d4>)
 8001a5a:	4821      	ldr	r0, [pc, #132]	; (8001ae0 <main+0x1d8>)
 8001a5c:	f00e f840 	bl	800fae0 <xTaskCreate>
 8001a60:	4603      	mov	r3, r0
 8001a62:	2b01      	cmp	r3, #1
 8001a64:	d103      	bne.n	8001a6e <main+0x166>
		printf("Fan_Task successfully created\r\n");
 8001a66:	481f      	ldr	r0, [pc, #124]	; (8001ae4 <main+0x1dc>)
 8001a68:	f010 fc5c 	bl	8012324 <puts>
 8001a6c:	e002      	b.n	8001a74 <main+0x16c>
	}
	else{
		printf("Fan_Task creation error\r\n");
 8001a6e:	481e      	ldr	r0, [pc, #120]	; (8001ae8 <main+0x1e0>)
 8001a70:	f010 fc58 	bl	8012324 <puts>
	}
	printf("Starting Scheduler... \r\n");
 8001a74:	481d      	ldr	r0, [pc, #116]	; (8001aec <main+0x1e4>)
 8001a76:	f010 fc55 	bl	8012324 <puts>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

	while (1)
 8001a7a:	e7fe      	b.n	8001a7a <main+0x172>
 8001a7c:	080146c0 	.word	0x080146c0
 8001a80:	200005d0 	.word	0x200005d0
 8001a84:	200005d4 	.word	0x200005d4
 8001a88:	200005d8 	.word	0x200005d8
 8001a8c:	48000800 	.word	0x48000800
 8001a90:	20000584 	.word	0x20000584
 8001a94:	08014794 	.word	0x08014794
 8001a98:	08002dbd 	.word	0x08002dbd
 8001a9c:	080147a0 	.word	0x080147a0
 8001aa0:	080147c0 	.word	0x080147c0
 8001aa4:	20000678 	.word	0x20000678
 8001aa8:	080147dc 	.word	0x080147dc
 8001aac:	080032f1 	.word	0x080032f1
 8001ab0:	080147f0 	.word	0x080147f0
 8001ab4:	08014818 	.word	0x08014818
 8001ab8:	0801483c 	.word	0x0801483c
 8001abc:	08003231 	.word	0x08003231
 8001ac0:	08014848 	.word	0x08014848
 8001ac4:	08014868 	.word	0x08014868
 8001ac8:	08014884 	.word	0x08014884
 8001acc:	080029f9 	.word	0x080029f9
 8001ad0:	08014890 	.word	0x08014890
 8001ad4:	080148b4 	.word	0x080148b4
 8001ad8:	2000075c 	.word	0x2000075c
 8001adc:	080148d0 	.word	0x080148d0
 8001ae0:	08002bcd 	.word	0x08002bcd
 8001ae4:	080148dc 	.word	0x080148dc
 8001ae8:	080148fc 	.word	0x080148fc
 8001aec:	08014918 	.word	0x08014918

08001af0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b094      	sub	sp, #80	; 0x50
 8001af4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001af6:	f107 0318 	add.w	r3, r7, #24
 8001afa:	2238      	movs	r2, #56	; 0x38
 8001afc:	2100      	movs	r1, #0
 8001afe:	4618      	mov	r0, r3
 8001b00:	f010 fd44 	bl	801258c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b04:	1d3b      	adds	r3, r7, #4
 8001b06:	2200      	movs	r2, #0
 8001b08:	601a      	str	r2, [r3, #0]
 8001b0a:	605a      	str	r2, [r3, #4]
 8001b0c:	609a      	str	r2, [r3, #8]
 8001b0e:	60da      	str	r2, [r3, #12]
 8001b10:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001b12:	2000      	movs	r0, #0
 8001b14:	f005 fc0e 	bl	8007334 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8001b18:	2321      	movs	r3, #33	; 0x21
 8001b1a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001b1c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001b20:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001b22:	2301      	movs	r3, #1
 8001b24:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b26:	2302      	movs	r3, #2
 8001b28:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001b2a:	2303      	movs	r3, #3
 8001b2c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8001b2e:	2304      	movs	r3, #4
 8001b30:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8001b32:	2355      	movs	r3, #85	; 0x55
 8001b34:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001b36:	2302      	movs	r3, #2
 8001b38:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 8001b3a:	2304      	movs	r3, #4
 8001b3c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001b3e:	2302      	movs	r3, #2
 8001b40:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b42:	f107 0318 	add.w	r3, r7, #24
 8001b46:	4618      	mov	r0, r3
 8001b48:	f005 fc98 	bl	800747c <HAL_RCC_OscConfig>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d001      	beq.n	8001b56 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001b52:	f000 f83d 	bl	8001bd0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b56:	230f      	movs	r3, #15
 8001b58:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b5a:	2303      	movs	r3, #3
 8001b5c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001b62:	2300      	movs	r3, #0
 8001b64:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001b66:	2300      	movs	r3, #0
 8001b68:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001b6a:	1d3b      	adds	r3, r7, #4
 8001b6c:	2104      	movs	r1, #4
 8001b6e:	4618      	mov	r0, r3
 8001b70:	f005 ff9c 	bl	8007aac <HAL_RCC_ClockConfig>
 8001b74:	4603      	mov	r3, r0
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d001      	beq.n	8001b7e <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8001b7a:	f000 f829 	bl	8001bd0 <Error_Handler>
  }
}
 8001b7e:	bf00      	nop
 8001b80:	3750      	adds	r7, #80	; 0x50
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}
	...

08001b88 <__io_putchar>:

/* USER CODE BEGIN 4 */
PUTCHAR_PROTOTYPE
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b082      	sub	sp, #8
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
	/* Place your implementation of fputc here */
	/* e.g. write a character to the USART1 and Loop until the end of transmission */
	HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 0xFFFF);
 8001b90:	1d39      	adds	r1, r7, #4
 8001b92:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001b96:	2201      	movs	r2, #1
 8001b98:	4803      	ldr	r0, [pc, #12]	; (8001ba8 <__io_putchar+0x20>)
 8001b9a:	f008 fcb9 	bl	800a510 <HAL_UART_Transmit>

	return ch;
 8001b9e:	687b      	ldr	r3, [r7, #4]
}
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	3708      	adds	r7, #8
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bd80      	pop	{r7, pc}
 8001ba8:	20000884 	.word	0x20000884

08001bac <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b082      	sub	sp, #8
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4a04      	ldr	r2, [pc, #16]	; (8001bcc <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d101      	bne.n	8001bc2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001bbe:	f001 fc2b 	bl	8003418 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001bc2:	bf00      	nop
 8001bc4:	3708      	adds	r7, #8
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}
 8001bca:	bf00      	nop
 8001bcc:	40001000 	.word	0x40001000

08001bd0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001bd4:	b672      	cpsid	i
}
 8001bd6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001bd8:	e7fe      	b.n	8001bd8 <Error_Handler+0x8>
	...

08001bdc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b082      	sub	sp, #8
 8001be0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001be2:	4b11      	ldr	r3, [pc, #68]	; (8001c28 <HAL_MspInit+0x4c>)
 8001be4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001be6:	4a10      	ldr	r2, [pc, #64]	; (8001c28 <HAL_MspInit+0x4c>)
 8001be8:	f043 0301 	orr.w	r3, r3, #1
 8001bec:	6613      	str	r3, [r2, #96]	; 0x60
 8001bee:	4b0e      	ldr	r3, [pc, #56]	; (8001c28 <HAL_MspInit+0x4c>)
 8001bf0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bf2:	f003 0301 	and.w	r3, r3, #1
 8001bf6:	607b      	str	r3, [r7, #4]
 8001bf8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bfa:	4b0b      	ldr	r3, [pc, #44]	; (8001c28 <HAL_MspInit+0x4c>)
 8001bfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bfe:	4a0a      	ldr	r2, [pc, #40]	; (8001c28 <HAL_MspInit+0x4c>)
 8001c00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c04:	6593      	str	r3, [r2, #88]	; 0x58
 8001c06:	4b08      	ldr	r3, [pc, #32]	; (8001c28 <HAL_MspInit+0x4c>)
 8001c08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c0e:	603b      	str	r3, [r7, #0]
 8001c10:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001c12:	2200      	movs	r2, #0
 8001c14:	210f      	movs	r1, #15
 8001c16:	f06f 0001 	mvn.w	r0, #1
 8001c1a:	f002 fe31 	bl	8004880 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c1e:	bf00      	nop
 8001c20:	3708      	adds	r7, #8
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	bf00      	nop
 8001c28:	40021000 	.word	0x40021000

08001c2c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b08c      	sub	sp, #48	; 0x30
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001c34:	2300      	movs	r3, #0
 8001c36:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              uwPrescalerValue = 0;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001c3c:	4b2c      	ldr	r3, [pc, #176]	; (8001cf0 <HAL_InitTick+0xc4>)
 8001c3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c40:	4a2b      	ldr	r2, [pc, #172]	; (8001cf0 <HAL_InitTick+0xc4>)
 8001c42:	f043 0310 	orr.w	r3, r3, #16
 8001c46:	6593      	str	r3, [r2, #88]	; 0x58
 8001c48:	4b29      	ldr	r3, [pc, #164]	; (8001cf0 <HAL_InitTick+0xc4>)
 8001c4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c4c:	f003 0310 	and.w	r3, r3, #16
 8001c50:	60bb      	str	r3, [r7, #8]
 8001c52:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001c54:	f107 020c 	add.w	r2, r7, #12
 8001c58:	f107 0310 	add.w	r3, r7, #16
 8001c5c:	4611      	mov	r1, r2
 8001c5e:	4618      	mov	r0, r3
 8001c60:	f006 f8f8 	bl	8007e54 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001c64:	f006 f8ca 	bl	8007dfc <HAL_RCC_GetPCLK1Freq>
 8001c68:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001c6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c6c:	4a21      	ldr	r2, [pc, #132]	; (8001cf4 <HAL_InitTick+0xc8>)
 8001c6e:	fba2 2303 	umull	r2, r3, r2, r3
 8001c72:	0c9b      	lsrs	r3, r3, #18
 8001c74:	3b01      	subs	r3, #1
 8001c76:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001c78:	4b1f      	ldr	r3, [pc, #124]	; (8001cf8 <HAL_InitTick+0xcc>)
 8001c7a:	4a20      	ldr	r2, [pc, #128]	; (8001cfc <HAL_InitTick+0xd0>)
 8001c7c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001c7e:	4b1e      	ldr	r3, [pc, #120]	; (8001cf8 <HAL_InitTick+0xcc>)
 8001c80:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001c84:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001c86:	4a1c      	ldr	r2, [pc, #112]	; (8001cf8 <HAL_InitTick+0xcc>)
 8001c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c8a:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001c8c:	4b1a      	ldr	r3, [pc, #104]	; (8001cf8 <HAL_InitTick+0xcc>)
 8001c8e:	2200      	movs	r2, #0
 8001c90:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c92:	4b19      	ldr	r3, [pc, #100]	; (8001cf8 <HAL_InitTick+0xcc>)
 8001c94:	2200      	movs	r2, #0
 8001c96:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 8001c98:	4817      	ldr	r0, [pc, #92]	; (8001cf8 <HAL_InitTick+0xcc>)
 8001c9a:	f006 fb9f 	bl	80083dc <HAL_TIM_Base_Init>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8001ca4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d11b      	bne.n	8001ce4 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001cac:	4812      	ldr	r0, [pc, #72]	; (8001cf8 <HAL_InitTick+0xcc>)
 8001cae:	f006 fbed 	bl	800848c <HAL_TIM_Base_Start_IT>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8001cb8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d111      	bne.n	8001ce4 <HAL_InitTick+0xb8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001cc0:	2036      	movs	r0, #54	; 0x36
 8001cc2:	f002 fdf7 	bl	80048b4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	2b0f      	cmp	r3, #15
 8001cca:	d808      	bhi.n	8001cde <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001ccc:	2200      	movs	r2, #0
 8001cce:	6879      	ldr	r1, [r7, #4]
 8001cd0:	2036      	movs	r0, #54	; 0x36
 8001cd2:	f002 fdd5 	bl	8004880 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001cd6:	4a0a      	ldr	r2, [pc, #40]	; (8001d00 <HAL_InitTick+0xd4>)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	6013      	str	r3, [r2, #0]
 8001cdc:	e002      	b.n	8001ce4 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 8001cde:	2301      	movs	r3, #1
 8001ce0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001ce4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8001ce8:	4618      	mov	r0, r3
 8001cea:	3730      	adds	r7, #48	; 0x30
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bd80      	pop	{r7, pc}
 8001cf0:	40021000 	.word	0x40021000
 8001cf4:	431bde83 	.word	0x431bde83
 8001cf8:	200005dc 	.word	0x200005dc
 8001cfc:	40001000 	.word	0x40001000
 8001d00:	20000004 	.word	0x20000004

08001d04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d04:	b480      	push	{r7}
 8001d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d08:	e7fe      	b.n	8001d08 <NMI_Handler+0x4>

08001d0a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d0a:	b480      	push	{r7}
 8001d0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d0e:	e7fe      	b.n	8001d0e <HardFault_Handler+0x4>

08001d10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d10:	b480      	push	{r7}
 8001d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d14:	e7fe      	b.n	8001d14 <MemManage_Handler+0x4>

08001d16 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d16:	b480      	push	{r7}
 8001d18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d1a:	e7fe      	b.n	8001d1a <BusFault_Handler+0x4>

08001d1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d20:	e7fe      	b.n	8001d20 <UsageFault_Handler+0x4>

08001d22 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d22:	b480      	push	{r7}
 8001d24:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d26:	bf00      	nop
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2e:	4770      	bx	lr

08001d30 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001d34:	4802      	ldr	r0, [pc, #8]	; (8001d40 <USB_LP_IRQHandler+0x10>)
 8001d36:	f003 fed1 	bl	8005adc <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8001d3a:	bf00      	nop
 8001d3c:	bd80      	pop	{r7, pc}
 8001d3e:	bf00      	nop
 8001d40:	20002f6c 	.word	0x20002f6c

08001d44 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ENC_BTN_Pin);
 8001d48:	2020      	movs	r0, #32
 8001d4a:	f003 f821 	bl	8004d90 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ENC_BTN_B_Pin);
 8001d4e:	2080      	movs	r0, #128	; 0x80
 8001d50:	f003 f81e 	bl	8004d90 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001d54:	bf00      	nop
 8001d56:	bd80      	pop	{r7, pc}

08001d58 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001d5c:	4802      	ldr	r0, [pc, #8]	; (8001d68 <TIM6_DAC_IRQHandler+0x10>)
 8001d5e:	f006 ff16 	bl	8008b8e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001d62:	bf00      	nop
 8001d64:	bd80      	pop	{r7, pc}
 8001d66:	bf00      	nop
 8001d68:	200005dc 	.word	0x200005dc

08001d6c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	af00      	add	r7, sp, #0
	return 1;
 8001d70:	2301      	movs	r3, #1
}
 8001d72:	4618      	mov	r0, r3
 8001d74:	46bd      	mov	sp, r7
 8001d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7a:	4770      	bx	lr

08001d7c <_kill>:

int _kill(int pid, int sig)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b082      	sub	sp, #8
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
 8001d84:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001d86:	f010 fc53 	bl	8012630 <__errno>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	2216      	movs	r2, #22
 8001d8e:	601a      	str	r2, [r3, #0]
	return -1;
 8001d90:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001d94:	4618      	mov	r0, r3
 8001d96:	3708      	adds	r7, #8
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	bd80      	pop	{r7, pc}

08001d9c <_exit>:

void _exit (int status)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b082      	sub	sp, #8
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001da4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001da8:	6878      	ldr	r0, [r7, #4]
 8001daa:	f7ff ffe7 	bl	8001d7c <_kill>
	while (1) {}		/* Make sure we hang here */
 8001dae:	e7fe      	b.n	8001dae <_exit+0x12>

08001db0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b086      	sub	sp, #24
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	60f8      	str	r0, [r7, #12]
 8001db8:	60b9      	str	r1, [r7, #8]
 8001dba:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	617b      	str	r3, [r7, #20]
 8001dc0:	e00a      	b.n	8001dd8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001dc2:	f3af 8000 	nop.w
 8001dc6:	4601      	mov	r1, r0
 8001dc8:	68bb      	ldr	r3, [r7, #8]
 8001dca:	1c5a      	adds	r2, r3, #1
 8001dcc:	60ba      	str	r2, [r7, #8]
 8001dce:	b2ca      	uxtb	r2, r1
 8001dd0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dd2:	697b      	ldr	r3, [r7, #20]
 8001dd4:	3301      	adds	r3, #1
 8001dd6:	617b      	str	r3, [r7, #20]
 8001dd8:	697a      	ldr	r2, [r7, #20]
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	429a      	cmp	r2, r3
 8001dde:	dbf0      	blt.n	8001dc2 <_read+0x12>
	}

return len;
 8001de0:	687b      	ldr	r3, [r7, #4]
}
 8001de2:	4618      	mov	r0, r3
 8001de4:	3718      	adds	r7, #24
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}

08001dea <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001dea:	b580      	push	{r7, lr}
 8001dec:	b086      	sub	sp, #24
 8001dee:	af00      	add	r7, sp, #0
 8001df0:	60f8      	str	r0, [r7, #12]
 8001df2:	60b9      	str	r1, [r7, #8]
 8001df4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001df6:	2300      	movs	r3, #0
 8001df8:	617b      	str	r3, [r7, #20]
 8001dfa:	e009      	b.n	8001e10 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001dfc:	68bb      	ldr	r3, [r7, #8]
 8001dfe:	1c5a      	adds	r2, r3, #1
 8001e00:	60ba      	str	r2, [r7, #8]
 8001e02:	781b      	ldrb	r3, [r3, #0]
 8001e04:	4618      	mov	r0, r3
 8001e06:	f7ff febf 	bl	8001b88 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e0a:	697b      	ldr	r3, [r7, #20]
 8001e0c:	3301      	adds	r3, #1
 8001e0e:	617b      	str	r3, [r7, #20]
 8001e10:	697a      	ldr	r2, [r7, #20]
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	429a      	cmp	r2, r3
 8001e16:	dbf1      	blt.n	8001dfc <_write+0x12>
	}
	return len;
 8001e18:	687b      	ldr	r3, [r7, #4]
}
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	3718      	adds	r7, #24
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}

08001e22 <_close>:

int _close(int file)
{
 8001e22:	b480      	push	{r7}
 8001e24:	b083      	sub	sp, #12
 8001e26:	af00      	add	r7, sp, #0
 8001e28:	6078      	str	r0, [r7, #4]
	return -1;
 8001e2a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001e2e:	4618      	mov	r0, r3
 8001e30:	370c      	adds	r7, #12
 8001e32:	46bd      	mov	sp, r7
 8001e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e38:	4770      	bx	lr

08001e3a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001e3a:	b480      	push	{r7}
 8001e3c:	b083      	sub	sp, #12
 8001e3e:	af00      	add	r7, sp, #0
 8001e40:	6078      	str	r0, [r7, #4]
 8001e42:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001e4a:	605a      	str	r2, [r3, #4]
	return 0;
 8001e4c:	2300      	movs	r3, #0
}
 8001e4e:	4618      	mov	r0, r3
 8001e50:	370c      	adds	r7, #12
 8001e52:	46bd      	mov	sp, r7
 8001e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e58:	4770      	bx	lr

08001e5a <_isatty>:

int _isatty(int file)
{
 8001e5a:	b480      	push	{r7}
 8001e5c:	b083      	sub	sp, #12
 8001e5e:	af00      	add	r7, sp, #0
 8001e60:	6078      	str	r0, [r7, #4]
	return 1;
 8001e62:	2301      	movs	r3, #1
}
 8001e64:	4618      	mov	r0, r3
 8001e66:	370c      	adds	r7, #12
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6e:	4770      	bx	lr

08001e70 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001e70:	b480      	push	{r7}
 8001e72:	b085      	sub	sp, #20
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	60f8      	str	r0, [r7, #12]
 8001e78:	60b9      	str	r1, [r7, #8]
 8001e7a:	607a      	str	r2, [r7, #4]
	return 0;
 8001e7c:	2300      	movs	r3, #0
}
 8001e7e:	4618      	mov	r0, r3
 8001e80:	3714      	adds	r7, #20
 8001e82:	46bd      	mov	sp, r7
 8001e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e88:	4770      	bx	lr
	...

08001e8c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b086      	sub	sp, #24
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e94:	4a14      	ldr	r2, [pc, #80]	; (8001ee8 <_sbrk+0x5c>)
 8001e96:	4b15      	ldr	r3, [pc, #84]	; (8001eec <_sbrk+0x60>)
 8001e98:	1ad3      	subs	r3, r2, r3
 8001e9a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e9c:	697b      	ldr	r3, [r7, #20]
 8001e9e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ea0:	4b13      	ldr	r3, [pc, #76]	; (8001ef0 <_sbrk+0x64>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d102      	bne.n	8001eae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ea8:	4b11      	ldr	r3, [pc, #68]	; (8001ef0 <_sbrk+0x64>)
 8001eaa:	4a12      	ldr	r2, [pc, #72]	; (8001ef4 <_sbrk+0x68>)
 8001eac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001eae:	4b10      	ldr	r3, [pc, #64]	; (8001ef0 <_sbrk+0x64>)
 8001eb0:	681a      	ldr	r2, [r3, #0]
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	4413      	add	r3, r2
 8001eb6:	693a      	ldr	r2, [r7, #16]
 8001eb8:	429a      	cmp	r2, r3
 8001eba:	d207      	bcs.n	8001ecc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ebc:	f010 fbb8 	bl	8012630 <__errno>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	220c      	movs	r2, #12
 8001ec4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ec6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001eca:	e009      	b.n	8001ee0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ecc:	4b08      	ldr	r3, [pc, #32]	; (8001ef0 <_sbrk+0x64>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ed2:	4b07      	ldr	r3, [pc, #28]	; (8001ef0 <_sbrk+0x64>)
 8001ed4:	681a      	ldr	r2, [r3, #0]
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	4413      	add	r3, r2
 8001eda:	4a05      	ldr	r2, [pc, #20]	; (8001ef0 <_sbrk+0x64>)
 8001edc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ede:	68fb      	ldr	r3, [r7, #12]
}
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	3718      	adds	r7, #24
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bd80      	pop	{r7, pc}
 8001ee8:	20020000 	.word	0x20020000
 8001eec:	00000400 	.word	0x00000400
 8001ef0:	20000628 	.word	0x20000628
 8001ef4:	200035d0 	.word	0x200035d0

08001ef8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001efc:	4b06      	ldr	r3, [pc, #24]	; (8001f18 <SystemInit+0x20>)
 8001efe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f02:	4a05      	ldr	r2, [pc, #20]	; (8001f18 <SystemInit+0x20>)
 8001f04:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001f08:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f0c:	bf00      	nop
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f14:	4770      	bx	lr
 8001f16:	bf00      	nop
 8001f18:	e000ed00 	.word	0xe000ed00

08001f1c <MX_TIM1_Init>:
TIM_HandleTypeDef htim16;
TIM_HandleTypeDef htim17;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b08c      	sub	sp, #48	; 0x30
 8001f20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f22:	f107 0320 	add.w	r3, r7, #32
 8001f26:	2200      	movs	r2, #0
 8001f28:	601a      	str	r2, [r3, #0]
 8001f2a:	605a      	str	r2, [r3, #4]
 8001f2c:	609a      	str	r2, [r3, #8]
 8001f2e:	60da      	str	r2, [r3, #12]
  TIM_HallSensor_InitTypeDef sConfig = {0};
 8001f30:	f107 0310 	add.w	r3, r7, #16
 8001f34:	2200      	movs	r2, #0
 8001f36:	601a      	str	r2, [r3, #0]
 8001f38:	605a      	str	r2, [r3, #4]
 8001f3a:	609a      	str	r2, [r3, #8]
 8001f3c:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f3e:	1d3b      	adds	r3, r7, #4
 8001f40:	2200      	movs	r2, #0
 8001f42:	601a      	str	r2, [r3, #0]
 8001f44:	605a      	str	r2, [r3, #4]
 8001f46:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001f48:	4b29      	ldr	r3, [pc, #164]	; (8001ff0 <MX_TIM1_Init+0xd4>)
 8001f4a:	4a2a      	ldr	r2, [pc, #168]	; (8001ff4 <MX_TIM1_Init+0xd8>)
 8001f4c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001f4e:	4b28      	ldr	r3, [pc, #160]	; (8001ff0 <MX_TIM1_Init+0xd4>)
 8001f50:	2200      	movs	r2, #0
 8001f52:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f54:	4b26      	ldr	r3, [pc, #152]	; (8001ff0 <MX_TIM1_Init+0xd4>)
 8001f56:	2200      	movs	r2, #0
 8001f58:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001f5a:	4b25      	ldr	r3, [pc, #148]	; (8001ff0 <MX_TIM1_Init+0xd4>)
 8001f5c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001f60:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f62:	4b23      	ldr	r3, [pc, #140]	; (8001ff0 <MX_TIM1_Init+0xd4>)
 8001f64:	2200      	movs	r2, #0
 8001f66:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001f68:	4b21      	ldr	r3, [pc, #132]	; (8001ff0 <MX_TIM1_Init+0xd4>)
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f6e:	4b20      	ldr	r3, [pc, #128]	; (8001ff0 <MX_TIM1_Init+0xd4>)
 8001f70:	2200      	movs	r2, #0
 8001f72:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001f74:	481e      	ldr	r0, [pc, #120]	; (8001ff0 <MX_TIM1_Init+0xd4>)
 8001f76:	f006 fa31 	bl	80083dc <HAL_TIM_Base_Init>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d001      	beq.n	8001f84 <MX_TIM1_Init+0x68>
  {
    Error_Handler();
 8001f80:	f7ff fe26 	bl	8001bd0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f88:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001f8a:	f107 0320 	add.w	r3, r7, #32
 8001f8e:	4619      	mov	r1, r3
 8001f90:	4817      	ldr	r0, [pc, #92]	; (8001ff0 <MX_TIM1_Init+0xd4>)
 8001f92:	f007 f92b 	bl	80091ec <HAL_TIM_ConfigClockSource>
 8001f96:	4603      	mov	r3, r0
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d001      	beq.n	8001fa0 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 8001f9c:	f7ff fe18 	bl	8001bd0 <Error_Handler>
  }
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Filter = 0;
 8001fa8:	2300      	movs	r3, #0
 8001faa:	61bb      	str	r3, [r7, #24]
  sConfig.Commutation_Delay = 0;
 8001fac:	2300      	movs	r3, #0
 8001fae:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_HallSensor_Init(&htim1, &sConfig) != HAL_OK)
 8001fb0:	f107 0310 	add.w	r3, r7, #16
 8001fb4:	4619      	mov	r1, r3
 8001fb6:	480e      	ldr	r0, [pc, #56]	; (8001ff0 <MX_TIM1_Init+0xd4>)
 8001fb8:	f008 f813 	bl	8009fe2 <HAL_TIMEx_HallSensor_Init>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d001      	beq.n	8001fc6 <MX_TIM1_Init+0xaa>
  {
    Error_Handler();
 8001fc2:	f7ff fe05 	bl	8001bd0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC2REF;
 8001fc6:	2350      	movs	r3, #80	; 0x50
 8001fc8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001fd2:	1d3b      	adds	r3, r7, #4
 8001fd4:	4619      	mov	r1, r3
 8001fd6:	4806      	ldr	r0, [pc, #24]	; (8001ff0 <MX_TIM1_Init+0xd4>)
 8001fd8:	f008 f8bc 	bl	800a154 <HAL_TIMEx_MasterConfigSynchronization>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d001      	beq.n	8001fe6 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8001fe2:	f7ff fdf5 	bl	8001bd0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001fe6:	bf00      	nop
 8001fe8:	3730      	adds	r7, #48	; 0x30
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bd80      	pop	{r7, pc}
 8001fee:	bf00      	nop
 8001ff0:	2000062c 	.word	0x2000062c
 8001ff4:	40012c00 	.word	0x40012c00

08001ff8 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b08c      	sub	sp, #48	; 0x30
 8001ffc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001ffe:	f107 030c 	add.w	r3, r7, #12
 8002002:	2224      	movs	r2, #36	; 0x24
 8002004:	2100      	movs	r1, #0
 8002006:	4618      	mov	r0, r3
 8002008:	f010 fac0 	bl	801258c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800200c:	463b      	mov	r3, r7
 800200e:	2200      	movs	r2, #0
 8002010:	601a      	str	r2, [r3, #0]
 8002012:	605a      	str	r2, [r3, #4]
 8002014:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002016:	4b21      	ldr	r3, [pc, #132]	; (800209c <MX_TIM3_Init+0xa4>)
 8002018:	4a21      	ldr	r2, [pc, #132]	; (80020a0 <MX_TIM3_Init+0xa8>)
 800201a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800201c:	4b1f      	ldr	r3, [pc, #124]	; (800209c <MX_TIM3_Init+0xa4>)
 800201e:	2200      	movs	r2, #0
 8002020:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002022:	4b1e      	ldr	r3, [pc, #120]	; (800209c <MX_TIM3_Init+0xa4>)
 8002024:	2200      	movs	r2, #0
 8002026:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002028:	4b1c      	ldr	r3, [pc, #112]	; (800209c <MX_TIM3_Init+0xa4>)
 800202a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800202e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002030:	4b1a      	ldr	r3, [pc, #104]	; (800209c <MX_TIM3_Init+0xa4>)
 8002032:	2200      	movs	r2, #0
 8002034:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002036:	4b19      	ldr	r3, [pc, #100]	; (800209c <MX_TIM3_Init+0xa4>)
 8002038:	2200      	movs	r2, #0
 800203a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_X1_TI1;
 800203c:	4b19      	ldr	r3, [pc, #100]	; (80020a4 <MX_TIM3_Init+0xac>)
 800203e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002040:	2300      	movs	r3, #0
 8002042:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002044:	2301      	movs	r3, #1
 8002046:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002048:	2300      	movs	r3, #0
 800204a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800204c:	2300      	movs	r3, #0
 800204e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002050:	2300      	movs	r3, #0
 8002052:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002054:	2301      	movs	r3, #1
 8002056:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002058:	2300      	movs	r3, #0
 800205a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800205c:	2300      	movs	r3, #0
 800205e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8002060:	f107 030c 	add.w	r3, r7, #12
 8002064:	4619      	mov	r1, r3
 8002066:	480d      	ldr	r0, [pc, #52]	; (800209c <MX_TIM3_Init+0xa4>)
 8002068:	f006 fc5d 	bl	8008926 <HAL_TIM_Encoder_Init>
 800206c:	4603      	mov	r3, r0
 800206e:	2b00      	cmp	r3, #0
 8002070:	d001      	beq.n	8002076 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8002072:	f7ff fdad 	bl	8001bd0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002076:	2300      	movs	r3, #0
 8002078:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800207a:	2300      	movs	r3, #0
 800207c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800207e:	463b      	mov	r3, r7
 8002080:	4619      	mov	r1, r3
 8002082:	4806      	ldr	r0, [pc, #24]	; (800209c <MX_TIM3_Init+0xa4>)
 8002084:	f008 f866 	bl	800a154 <HAL_TIMEx_MasterConfigSynchronization>
 8002088:	4603      	mov	r3, r0
 800208a:	2b00      	cmp	r3, #0
 800208c:	d001      	beq.n	8002092 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 800208e:	f7ff fd9f 	bl	8001bd0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002092:	bf00      	nop
 8002094:	3730      	adds	r7, #48	; 0x30
 8002096:	46bd      	mov	sp, r7
 8002098:	bd80      	pop	{r7, pc}
 800209a:	bf00      	nop
 800209c:	20000678 	.word	0x20000678
 80020a0:	40000400 	.word	0x40000400
 80020a4:	00010006 	.word	0x00010006

080020a8 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b08c      	sub	sp, #48	; 0x30
 80020ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80020ae:	f107 0320 	add.w	r3, r7, #32
 80020b2:	2200      	movs	r2, #0
 80020b4:	601a      	str	r2, [r3, #0]
 80020b6:	605a      	str	r2, [r3, #4]
 80020b8:	609a      	str	r2, [r3, #8]
 80020ba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020bc:	f107 0314 	add.w	r3, r7, #20
 80020c0:	2200      	movs	r2, #0
 80020c2:	601a      	str	r2, [r3, #0]
 80020c4:	605a      	str	r2, [r3, #4]
 80020c6:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80020c8:	1d3b      	adds	r3, r7, #4
 80020ca:	2200      	movs	r2, #0
 80020cc:	601a      	str	r2, [r3, #0]
 80020ce:	605a      	str	r2, [r3, #4]
 80020d0:	609a      	str	r2, [r3, #8]
 80020d2:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80020d4:	4b3e      	ldr	r3, [pc, #248]	; (80021d0 <MX_TIM8_Init+0x128>)
 80020d6:	4a3f      	ldr	r2, [pc, #252]	; (80021d4 <MX_TIM8_Init+0x12c>)
 80020d8:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80020da:	4b3d      	ldr	r3, [pc, #244]	; (80021d0 <MX_TIM8_Init+0x128>)
 80020dc:	2200      	movs	r2, #0
 80020de:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020e0:	4b3b      	ldr	r3, [pc, #236]	; (80021d0 <MX_TIM8_Init+0x128>)
 80020e2:	2200      	movs	r2, #0
 80020e4:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 80020e6:	4b3a      	ldr	r3, [pc, #232]	; (80021d0 <MX_TIM8_Init+0x128>)
 80020e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80020ec:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020ee:	4b38      	ldr	r3, [pc, #224]	; (80021d0 <MX_TIM8_Init+0x128>)
 80020f0:	2200      	movs	r2, #0
 80020f2:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80020f4:	4b36      	ldr	r3, [pc, #216]	; (80021d0 <MX_TIM8_Init+0x128>)
 80020f6:	2200      	movs	r2, #0
 80020f8:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020fa:	4b35      	ldr	r3, [pc, #212]	; (80021d0 <MX_TIM8_Init+0x128>)
 80020fc:	2200      	movs	r2, #0
 80020fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8002100:	4833      	ldr	r0, [pc, #204]	; (80021d0 <MX_TIM8_Init+0x128>)
 8002102:	f006 f96b 	bl	80083dc <HAL_TIM_Base_Init>
 8002106:	4603      	mov	r3, r0
 8002108:	2b00      	cmp	r3, #0
 800210a:	d001      	beq.n	8002110 <MX_TIM8_Init+0x68>
  {
    Error_Handler();
 800210c:	f7ff fd60 	bl	8001bd0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002110:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002114:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8002116:	f107 0320 	add.w	r3, r7, #32
 800211a:	4619      	mov	r1, r3
 800211c:	482c      	ldr	r0, [pc, #176]	; (80021d0 <MX_TIM8_Init+0x128>)
 800211e:	f007 f865 	bl	80091ec <HAL_TIM_ConfigClockSource>
 8002122:	4603      	mov	r3, r0
 8002124:	2b00      	cmp	r3, #0
 8002126:	d001      	beq.n	800212c <MX_TIM8_Init+0x84>
  {
    Error_Handler();
 8002128:	f7ff fd52 	bl	8001bd0 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim8) != HAL_OK)
 800212c:	4828      	ldr	r0, [pc, #160]	; (80021d0 <MX_TIM8_Init+0x128>)
 800212e:	f006 fb99 	bl	8008864 <HAL_TIM_IC_Init>
 8002132:	4603      	mov	r3, r0
 8002134:	2b00      	cmp	r3, #0
 8002136:	d001      	beq.n	800213c <MX_TIM8_Init+0x94>
  {
    Error_Handler();
 8002138:	f7ff fd4a 	bl	8001bd0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800213c:	2300      	movs	r3, #0
 800213e:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002140:	2300      	movs	r3, #0
 8002142:	61bb      	str	r3, [r7, #24]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002144:	2300      	movs	r3, #0
 8002146:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002148:	f107 0314 	add.w	r3, r7, #20
 800214c:	4619      	mov	r1, r3
 800214e:	4820      	ldr	r0, [pc, #128]	; (80021d0 <MX_TIM8_Init+0x128>)
 8002150:	f008 f800 	bl	800a154 <HAL_TIMEx_MasterConfigSynchronization>
 8002154:	4603      	mov	r3, r0
 8002156:	2b00      	cmp	r3, #0
 8002158:	d001      	beq.n	800215e <MX_TIM8_Init+0xb6>
  {
    Error_Handler();
 800215a:	f7ff fd39 	bl	8001bd0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800215e:	2300      	movs	r3, #0
 8002160:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002162:	2301      	movs	r3, #1
 8002164:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002166:	2300      	movs	r3, #0
 8002168:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 800216a:	2300      	movs	r3, #0
 800216c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim8, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800216e:	1d3b      	adds	r3, r7, #4
 8002170:	2200      	movs	r2, #0
 8002172:	4619      	mov	r1, r3
 8002174:	4816      	ldr	r0, [pc, #88]	; (80021d0 <MX_TIM8_Init+0x128>)
 8002176:	f006 fe89 	bl	8008e8c <HAL_TIM_IC_ConfigChannel>
 800217a:	4603      	mov	r3, r0
 800217c:	2b00      	cmp	r3, #0
 800217e:	d001      	beq.n	8002184 <MX_TIM8_Init+0xdc>
  {
    Error_Handler();
 8002180:	f7ff fd26 	bl	8001bd0 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim8, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8002184:	1d3b      	adds	r3, r7, #4
 8002186:	2204      	movs	r2, #4
 8002188:	4619      	mov	r1, r3
 800218a:	4811      	ldr	r0, [pc, #68]	; (80021d0 <MX_TIM8_Init+0x128>)
 800218c:	f006 fe7e 	bl	8008e8c <HAL_TIM_IC_ConfigChannel>
 8002190:	4603      	mov	r3, r0
 8002192:	2b00      	cmp	r3, #0
 8002194:	d001      	beq.n	800219a <MX_TIM8_Init+0xf2>
  {
    Error_Handler();
 8002196:	f7ff fd1b 	bl	8001bd0 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim8, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 800219a:	1d3b      	adds	r3, r7, #4
 800219c:	2208      	movs	r2, #8
 800219e:	4619      	mov	r1, r3
 80021a0:	480b      	ldr	r0, [pc, #44]	; (80021d0 <MX_TIM8_Init+0x128>)
 80021a2:	f006 fe73 	bl	8008e8c <HAL_TIM_IC_ConfigChannel>
 80021a6:	4603      	mov	r3, r0
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d001      	beq.n	80021b0 <MX_TIM8_Init+0x108>
  {
    Error_Handler();
 80021ac:	f7ff fd10 	bl	8001bd0 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim8, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 80021b0:	1d3b      	adds	r3, r7, #4
 80021b2:	220c      	movs	r2, #12
 80021b4:	4619      	mov	r1, r3
 80021b6:	4806      	ldr	r0, [pc, #24]	; (80021d0 <MX_TIM8_Init+0x128>)
 80021b8:	f006 fe68 	bl	8008e8c <HAL_TIM_IC_ConfigChannel>
 80021bc:	4603      	mov	r3, r0
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d001      	beq.n	80021c6 <MX_TIM8_Init+0x11e>
  {
    Error_Handler();
 80021c2:	f7ff fd05 	bl	8001bd0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 80021c6:	bf00      	nop
 80021c8:	3730      	adds	r7, #48	; 0x30
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}
 80021ce:	bf00      	nop
 80021d0:	200006c4 	.word	0x200006c4
 80021d4:	40013400 	.word	0x40013400

080021d8 <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b08c      	sub	sp, #48	; 0x30
 80021dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80021de:	f107 0320 	add.w	r3, r7, #32
 80021e2:	2200      	movs	r2, #0
 80021e4:	601a      	str	r2, [r3, #0]
 80021e6:	605a      	str	r2, [r3, #4]
 80021e8:	609a      	str	r2, [r3, #8]
 80021ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021ec:	f107 0314 	add.w	r3, r7, #20
 80021f0:	2200      	movs	r2, #0
 80021f2:	601a      	str	r2, [r3, #0]
 80021f4:	605a      	str	r2, [r3, #4]
 80021f6:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80021f8:	1d3b      	adds	r3, r7, #4
 80021fa:	2200      	movs	r2, #0
 80021fc:	601a      	str	r2, [r3, #0]
 80021fe:	605a      	str	r2, [r3, #4]
 8002200:	609a      	str	r2, [r3, #8]
 8002202:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8002204:	4b32      	ldr	r3, [pc, #200]	; (80022d0 <MX_TIM15_Init+0xf8>)
 8002206:	4a33      	ldr	r2, [pc, #204]	; (80022d4 <MX_TIM15_Init+0xfc>)
 8002208:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 800220a:	4b31      	ldr	r3, [pc, #196]	; (80022d0 <MX_TIM15_Init+0xf8>)
 800220c:	2200      	movs	r2, #0
 800220e:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002210:	4b2f      	ldr	r3, [pc, #188]	; (80022d0 <MX_TIM15_Init+0xf8>)
 8002212:	2200      	movs	r2, #0
 8002214:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 8002216:	4b2e      	ldr	r3, [pc, #184]	; (80022d0 <MX_TIM15_Init+0xf8>)
 8002218:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800221c:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800221e:	4b2c      	ldr	r3, [pc, #176]	; (80022d0 <MX_TIM15_Init+0xf8>)
 8002220:	2200      	movs	r2, #0
 8002222:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8002224:	4b2a      	ldr	r3, [pc, #168]	; (80022d0 <MX_TIM15_Init+0xf8>)
 8002226:	2200      	movs	r2, #0
 8002228:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800222a:	4b29      	ldr	r3, [pc, #164]	; (80022d0 <MX_TIM15_Init+0xf8>)
 800222c:	2200      	movs	r2, #0
 800222e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8002230:	4827      	ldr	r0, [pc, #156]	; (80022d0 <MX_TIM15_Init+0xf8>)
 8002232:	f006 f8d3 	bl	80083dc <HAL_TIM_Base_Init>
 8002236:	4603      	mov	r3, r0
 8002238:	2b00      	cmp	r3, #0
 800223a:	d001      	beq.n	8002240 <MX_TIM15_Init+0x68>
  {
    Error_Handler();
 800223c:	f7ff fcc8 	bl	8001bd0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002240:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002244:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8002246:	f107 0320 	add.w	r3, r7, #32
 800224a:	4619      	mov	r1, r3
 800224c:	4820      	ldr	r0, [pc, #128]	; (80022d0 <MX_TIM15_Init+0xf8>)
 800224e:	f006 ffcd 	bl	80091ec <HAL_TIM_ConfigClockSource>
 8002252:	4603      	mov	r3, r0
 8002254:	2b00      	cmp	r3, #0
 8002256:	d001      	beq.n	800225c <MX_TIM15_Init+0x84>
  {
    Error_Handler();
 8002258:	f7ff fcba 	bl	8001bd0 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim15) != HAL_OK)
 800225c:	481c      	ldr	r0, [pc, #112]	; (80022d0 <MX_TIM15_Init+0xf8>)
 800225e:	f006 fb01 	bl	8008864 <HAL_TIM_IC_Init>
 8002262:	4603      	mov	r3, r0
 8002264:	2b00      	cmp	r3, #0
 8002266:	d001      	beq.n	800226c <MX_TIM15_Init+0x94>
  {
    Error_Handler();
 8002268:	f7ff fcb2 	bl	8001bd0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800226c:	2300      	movs	r3, #0
 800226e:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002270:	2300      	movs	r3, #0
 8002272:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8002274:	f107 0314 	add.w	r3, r7, #20
 8002278:	4619      	mov	r1, r3
 800227a:	4815      	ldr	r0, [pc, #84]	; (80022d0 <MX_TIM15_Init+0xf8>)
 800227c:	f007 ff6a 	bl	800a154 <HAL_TIMEx_MasterConfigSynchronization>
 8002280:	4603      	mov	r3, r0
 8002282:	2b00      	cmp	r3, #0
 8002284:	d001      	beq.n	800228a <MX_TIM15_Init+0xb2>
  {
    Error_Handler();
 8002286:	f7ff fca3 	bl	8001bd0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800228a:	2300      	movs	r3, #0
 800228c:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800228e:	2301      	movs	r3, #1
 8002290:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002292:	2300      	movs	r3, #0
 8002294:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8002296:	2300      	movs	r3, #0
 8002298:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim15, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800229a:	1d3b      	adds	r3, r7, #4
 800229c:	2200      	movs	r2, #0
 800229e:	4619      	mov	r1, r3
 80022a0:	480b      	ldr	r0, [pc, #44]	; (80022d0 <MX_TIM15_Init+0xf8>)
 80022a2:	f006 fdf3 	bl	8008e8c <HAL_TIM_IC_ConfigChannel>
 80022a6:	4603      	mov	r3, r0
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d001      	beq.n	80022b0 <MX_TIM15_Init+0xd8>
  {
    Error_Handler();
 80022ac:	f7ff fc90 	bl	8001bd0 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim15, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80022b0:	1d3b      	adds	r3, r7, #4
 80022b2:	2204      	movs	r2, #4
 80022b4:	4619      	mov	r1, r3
 80022b6:	4806      	ldr	r0, [pc, #24]	; (80022d0 <MX_TIM15_Init+0xf8>)
 80022b8:	f006 fde8 	bl	8008e8c <HAL_TIM_IC_ConfigChannel>
 80022bc:	4603      	mov	r3, r0
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d001      	beq.n	80022c6 <MX_TIM15_Init+0xee>
  {
    Error_Handler();
 80022c2:	f7ff fc85 	bl	8001bd0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 80022c6:	bf00      	nop
 80022c8:	3730      	adds	r7, #48	; 0x30
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bd80      	pop	{r7, pc}
 80022ce:	bf00      	nop
 80022d0:	20000710 	.word	0x20000710
 80022d4:	40014000 	.word	0x40014000

080022d8 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b094      	sub	sp, #80	; 0x50
 80022dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80022de:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80022e2:	2200      	movs	r2, #0
 80022e4:	601a      	str	r2, [r3, #0]
 80022e6:	605a      	str	r2, [r3, #4]
 80022e8:	609a      	str	r2, [r3, #8]
 80022ea:	60da      	str	r2, [r3, #12]
 80022ec:	611a      	str	r2, [r3, #16]
 80022ee:	615a      	str	r2, [r3, #20]
 80022f0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80022f2:	463b      	mov	r3, r7
 80022f4:	2234      	movs	r2, #52	; 0x34
 80022f6:	2100      	movs	r1, #0
 80022f8:	4618      	mov	r0, r3
 80022fa:	f010 f947 	bl	801258c <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80022fe:	4b31      	ldr	r3, [pc, #196]	; (80023c4 <MX_TIM16_Init+0xec>)
 8002300:	4a31      	ldr	r2, [pc, #196]	; (80023c8 <MX_TIM16_Init+0xf0>)
 8002302:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 8002304:	4b2f      	ldr	r3, [pc, #188]	; (80023c4 <MX_TIM16_Init+0xec>)
 8002306:	2200      	movs	r2, #0
 8002308:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800230a:	4b2e      	ldr	r3, [pc, #184]	; (80023c4 <MX_TIM16_Init+0xec>)
 800230c:	2200      	movs	r2, #0
 800230e:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 8500;
 8002310:	4b2c      	ldr	r3, [pc, #176]	; (80023c4 <MX_TIM16_Init+0xec>)
 8002312:	f242 1234 	movw	r2, #8500	; 0x2134
 8002316:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002318:	4b2a      	ldr	r3, [pc, #168]	; (80023c4 <MX_TIM16_Init+0xec>)
 800231a:	2200      	movs	r2, #0
 800231c:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800231e:	4b29      	ldr	r3, [pc, #164]	; (80023c4 <MX_TIM16_Init+0xec>)
 8002320:	2200      	movs	r2, #0
 8002322:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002324:	4b27      	ldr	r3, [pc, #156]	; (80023c4 <MX_TIM16_Init+0xec>)
 8002326:	2280      	movs	r2, #128	; 0x80
 8002328:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800232a:	4826      	ldr	r0, [pc, #152]	; (80023c4 <MX_TIM16_Init+0xec>)
 800232c:	f006 f856 	bl	80083dc <HAL_TIM_Base_Init>
 8002330:	4603      	mov	r3, r0
 8002332:	2b00      	cmp	r3, #0
 8002334:	d001      	beq.n	800233a <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 8002336:	f7ff fc4b 	bl	8001bd0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 800233a:	4822      	ldr	r0, [pc, #136]	; (80023c4 <MX_TIM16_Init+0xec>)
 800233c:	f006 f91e 	bl	800857c <HAL_TIM_PWM_Init>
 8002340:	4603      	mov	r3, r0
 8002342:	2b00      	cmp	r3, #0
 8002344:	d001      	beq.n	800234a <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 8002346:	f7ff fc43 	bl	8001bd0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800234a:	2360      	movs	r3, #96	; 0x60
 800234c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 0;
 800234e:	2300      	movs	r3, #0
 8002350:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002352:	2300      	movs	r3, #0
 8002354:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002356:	2300      	movs	r3, #0
 8002358:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800235a:	2300      	movs	r3, #0
 800235c:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800235e:	2300      	movs	r3, #0
 8002360:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002362:	2300      	movs	r3, #0
 8002364:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002366:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800236a:	2200      	movs	r2, #0
 800236c:	4619      	mov	r1, r3
 800236e:	4815      	ldr	r0, [pc, #84]	; (80023c4 <MX_TIM16_Init+0xec>)
 8002370:	f006 fe28 	bl	8008fc4 <HAL_TIM_PWM_ConfigChannel>
 8002374:	4603      	mov	r3, r0
 8002376:	2b00      	cmp	r3, #0
 8002378:	d001      	beq.n	800237e <MX_TIM16_Init+0xa6>
  {
    Error_Handler();
 800237a:	f7ff fc29 	bl	8001bd0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800237e:	2300      	movs	r3, #0
 8002380:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002382:	2300      	movs	r3, #0
 8002384:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002386:	2300      	movs	r3, #0
 8002388:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 800238a:	2300      	movs	r3, #0
 800238c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800238e:	2300      	movs	r3, #0
 8002390:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002392:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002396:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002398:	2300      	movs	r3, #0
 800239a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800239c:	2300      	movs	r3, #0
 800239e:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 80023a0:	463b      	mov	r3, r7
 80023a2:	4619      	mov	r1, r3
 80023a4:	4807      	ldr	r0, [pc, #28]	; (80023c4 <MX_TIM16_Init+0xec>)
 80023a6:	f007 ff6b 	bl	800a280 <HAL_TIMEx_ConfigBreakDeadTime>
 80023aa:	4603      	mov	r3, r0
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d001      	beq.n	80023b4 <MX_TIM16_Init+0xdc>
  {
    Error_Handler();
 80023b0:	f7ff fc0e 	bl	8001bd0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 80023b4:	4803      	ldr	r0, [pc, #12]	; (80023c4 <MX_TIM16_Init+0xec>)
 80023b6:	f000 f991 	bl	80026dc <HAL_TIM_MspPostInit>

}
 80023ba:	bf00      	nop
 80023bc:	3750      	adds	r7, #80	; 0x50
 80023be:	46bd      	mov	sp, r7
 80023c0:	bd80      	pop	{r7, pc}
 80023c2:	bf00      	nop
 80023c4:	2000075c 	.word	0x2000075c
 80023c8:	40014400 	.word	0x40014400

080023cc <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b094      	sub	sp, #80	; 0x50
 80023d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80023d2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80023d6:	2200      	movs	r2, #0
 80023d8:	601a      	str	r2, [r3, #0]
 80023da:	605a      	str	r2, [r3, #4]
 80023dc:	609a      	str	r2, [r3, #8]
 80023de:	60da      	str	r2, [r3, #12]
 80023e0:	611a      	str	r2, [r3, #16]
 80023e2:	615a      	str	r2, [r3, #20]
 80023e4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80023e6:	463b      	mov	r3, r7
 80023e8:	2234      	movs	r2, #52	; 0x34
 80023ea:	2100      	movs	r1, #0
 80023ec:	4618      	mov	r0, r3
 80023ee:	f010 f8cd 	bl	801258c <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 80023f2:	4b30      	ldr	r3, [pc, #192]	; (80024b4 <MX_TIM17_Init+0xe8>)
 80023f4:	4a30      	ldr	r2, [pc, #192]	; (80024b8 <MX_TIM17_Init+0xec>)
 80023f6:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 9-1;
 80023f8:	4b2e      	ldr	r3, [pc, #184]	; (80024b4 <MX_TIM17_Init+0xe8>)
 80023fa:	2208      	movs	r2, #8
 80023fc:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023fe:	4b2d      	ldr	r3, [pc, #180]	; (80024b4 <MX_TIM17_Init+0xe8>)
 8002400:	2200      	movs	r2, #0
 8002402:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 255;
 8002404:	4b2b      	ldr	r3, [pc, #172]	; (80024b4 <MX_TIM17_Init+0xe8>)
 8002406:	22ff      	movs	r2, #255	; 0xff
 8002408:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800240a:	4b2a      	ldr	r3, [pc, #168]	; (80024b4 <MX_TIM17_Init+0xe8>)
 800240c:	2200      	movs	r2, #0
 800240e:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8002410:	4b28      	ldr	r3, [pc, #160]	; (80024b4 <MX_TIM17_Init+0xe8>)
 8002412:	2200      	movs	r2, #0
 8002414:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002416:	4b27      	ldr	r3, [pc, #156]	; (80024b4 <MX_TIM17_Init+0xe8>)
 8002418:	2200      	movs	r2, #0
 800241a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 800241c:	4825      	ldr	r0, [pc, #148]	; (80024b4 <MX_TIM17_Init+0xe8>)
 800241e:	f005 ffdd 	bl	80083dc <HAL_TIM_Base_Init>
 8002422:	4603      	mov	r3, r0
 8002424:	2b00      	cmp	r3, #0
 8002426:	d001      	beq.n	800242c <MX_TIM17_Init+0x60>
  {
    Error_Handler();
 8002428:	f7ff fbd2 	bl	8001bd0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 800242c:	4821      	ldr	r0, [pc, #132]	; (80024b4 <MX_TIM17_Init+0xe8>)
 800242e:	f006 f8a5 	bl	800857c <HAL_TIM_PWM_Init>
 8002432:	4603      	mov	r3, r0
 8002434:	2b00      	cmp	r3, #0
 8002436:	d001      	beq.n	800243c <MX_TIM17_Init+0x70>
  {
    Error_Handler();
 8002438:	f7ff fbca 	bl	8001bd0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800243c:	2360      	movs	r3, #96	; 0x60
 800243e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 0;
 8002440:	2300      	movs	r3, #0
 8002442:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002444:	2300      	movs	r3, #0
 8002446:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002448:	2300      	movs	r3, #0
 800244a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800244c:	2300      	movs	r3, #0
 800244e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002450:	2300      	movs	r3, #0
 8002452:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002454:	2300      	movs	r3, #0
 8002456:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002458:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800245c:	2200      	movs	r2, #0
 800245e:	4619      	mov	r1, r3
 8002460:	4814      	ldr	r0, [pc, #80]	; (80024b4 <MX_TIM17_Init+0xe8>)
 8002462:	f006 fdaf 	bl	8008fc4 <HAL_TIM_PWM_ConfigChannel>
 8002466:	4603      	mov	r3, r0
 8002468:	2b00      	cmp	r3, #0
 800246a:	d001      	beq.n	8002470 <MX_TIM17_Init+0xa4>
  {
    Error_Handler();
 800246c:	f7ff fbb0 	bl	8001bd0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002470:	2300      	movs	r3, #0
 8002472:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002474:	2300      	movs	r3, #0
 8002476:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002478:	2300      	movs	r3, #0
 800247a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 800247c:	2300      	movs	r3, #0
 800247e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002480:	2300      	movs	r3, #0
 8002482:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002484:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002488:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800248a:	2300      	movs	r3, #0
 800248c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800248e:	2300      	movs	r3, #0
 8002490:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8002492:	463b      	mov	r3, r7
 8002494:	4619      	mov	r1, r3
 8002496:	4807      	ldr	r0, [pc, #28]	; (80024b4 <MX_TIM17_Init+0xe8>)
 8002498:	f007 fef2 	bl	800a280 <HAL_TIMEx_ConfigBreakDeadTime>
 800249c:	4603      	mov	r3, r0
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d001      	beq.n	80024a6 <MX_TIM17_Init+0xda>
  {
    Error_Handler();
 80024a2:	f7ff fb95 	bl	8001bd0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 80024a6:	4803      	ldr	r0, [pc, #12]	; (80024b4 <MX_TIM17_Init+0xe8>)
 80024a8:	f000 f918 	bl	80026dc <HAL_TIM_MspPostInit>

}
 80024ac:	bf00      	nop
 80024ae:	3750      	adds	r7, #80	; 0x50
 80024b0:	46bd      	mov	sp, r7
 80024b2:	bd80      	pop	{r7, pc}
 80024b4:	200007a8 	.word	0x200007a8
 80024b8:	40014800 	.word	0x40014800

080024bc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b090      	sub	sp, #64	; 0x40
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024c4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80024c8:	2200      	movs	r2, #0
 80024ca:	601a      	str	r2, [r3, #0]
 80024cc:	605a      	str	r2, [r3, #4]
 80024ce:	609a      	str	r2, [r3, #8]
 80024d0:	60da      	str	r2, [r3, #12]
 80024d2:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4a58      	ldr	r2, [pc, #352]	; (800263c <HAL_TIM_Base_MspInit+0x180>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	d128      	bne.n	8002530 <HAL_TIM_Base_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80024de:	4b58      	ldr	r3, [pc, #352]	; (8002640 <HAL_TIM_Base_MspInit+0x184>)
 80024e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024e2:	4a57      	ldr	r2, [pc, #348]	; (8002640 <HAL_TIM_Base_MspInit+0x184>)
 80024e4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80024e8:	6613      	str	r3, [r2, #96]	; 0x60
 80024ea:	4b55      	ldr	r3, [pc, #340]	; (8002640 <HAL_TIM_Base_MspInit+0x184>)
 80024ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80024f2:	62bb      	str	r3, [r7, #40]	; 0x28
 80024f4:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80024f6:	4b52      	ldr	r3, [pc, #328]	; (8002640 <HAL_TIM_Base_MspInit+0x184>)
 80024f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024fa:	4a51      	ldr	r2, [pc, #324]	; (8002640 <HAL_TIM_Base_MspInit+0x184>)
 80024fc:	f043 0304 	orr.w	r3, r3, #4
 8002500:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002502:	4b4f      	ldr	r3, [pc, #316]	; (8002640 <HAL_TIM_Base_MspInit+0x184>)
 8002504:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002506:	f003 0304 	and.w	r3, r3, #4
 800250a:	627b      	str	r3, [r7, #36]	; 0x24
 800250c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2
    PC2     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 800250e:	2307      	movs	r3, #7
 8002510:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002512:	2302      	movs	r3, #2
 8002514:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002516:	2300      	movs	r3, #0
 8002518:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800251a:	2300      	movs	r3, #0
 800251c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 800251e:	2302      	movs	r3, #2
 8002520:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002522:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002526:	4619      	mov	r1, r3
 8002528:	4846      	ldr	r0, [pc, #280]	; (8002644 <HAL_TIM_Base_MspInit+0x188>)
 800252a:	f002 fa7d 	bl	8004a28 <HAL_GPIO_Init>
    __HAL_RCC_TIM17_CLK_ENABLE();
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 800252e:	e080      	b.n	8002632 <HAL_TIM_Base_MspInit+0x176>
  else if(tim_baseHandle->Instance==TIM8)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4a44      	ldr	r2, [pc, #272]	; (8002648 <HAL_TIM_Base_MspInit+0x18c>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d129      	bne.n	800258e <HAL_TIM_Base_MspInit+0xd2>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800253a:	4b41      	ldr	r3, [pc, #260]	; (8002640 <HAL_TIM_Base_MspInit+0x184>)
 800253c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800253e:	4a40      	ldr	r2, [pc, #256]	; (8002640 <HAL_TIM_Base_MspInit+0x184>)
 8002540:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002544:	6613      	str	r3, [r2, #96]	; 0x60
 8002546:	4b3e      	ldr	r3, [pc, #248]	; (8002640 <HAL_TIM_Base_MspInit+0x184>)
 8002548:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800254a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800254e:	623b      	str	r3, [r7, #32]
 8002550:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002552:	4b3b      	ldr	r3, [pc, #236]	; (8002640 <HAL_TIM_Base_MspInit+0x184>)
 8002554:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002556:	4a3a      	ldr	r2, [pc, #232]	; (8002640 <HAL_TIM_Base_MspInit+0x184>)
 8002558:	f043 0304 	orr.w	r3, r3, #4
 800255c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800255e:	4b38      	ldr	r3, [pc, #224]	; (8002640 <HAL_TIM_Base_MspInit+0x184>)
 8002560:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002562:	f003 0304 	and.w	r3, r3, #4
 8002566:	61fb      	str	r3, [r7, #28]
 8002568:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 800256a:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800256e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002570:	2302      	movs	r3, #2
 8002572:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002574:	2300      	movs	r3, #0
 8002576:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002578:	2300      	movs	r3, #0
 800257a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 800257c:	2304      	movs	r3, #4
 800257e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002580:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002584:	4619      	mov	r1, r3
 8002586:	482f      	ldr	r0, [pc, #188]	; (8002644 <HAL_TIM_Base_MspInit+0x188>)
 8002588:	f002 fa4e 	bl	8004a28 <HAL_GPIO_Init>
}
 800258c:	e051      	b.n	8002632 <HAL_TIM_Base_MspInit+0x176>
  else if(tim_baseHandle->Instance==TIM15)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4a2e      	ldr	r2, [pc, #184]	; (800264c <HAL_TIM_Base_MspInit+0x190>)
 8002594:	4293      	cmp	r3, r2
 8002596:	d129      	bne.n	80025ec <HAL_TIM_Base_MspInit+0x130>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8002598:	4b29      	ldr	r3, [pc, #164]	; (8002640 <HAL_TIM_Base_MspInit+0x184>)
 800259a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800259c:	4a28      	ldr	r2, [pc, #160]	; (8002640 <HAL_TIM_Base_MspInit+0x184>)
 800259e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025a2:	6613      	str	r3, [r2, #96]	; 0x60
 80025a4:	4b26      	ldr	r3, [pc, #152]	; (8002640 <HAL_TIM_Base_MspInit+0x184>)
 80025a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025ac:	61bb      	str	r3, [r7, #24]
 80025ae:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025b0:	4b23      	ldr	r3, [pc, #140]	; (8002640 <HAL_TIM_Base_MspInit+0x184>)
 80025b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025b4:	4a22      	ldr	r2, [pc, #136]	; (8002640 <HAL_TIM_Base_MspInit+0x184>)
 80025b6:	f043 0301 	orr.w	r3, r3, #1
 80025ba:	64d3      	str	r3, [r2, #76]	; 0x4c
 80025bc:	4b20      	ldr	r3, [pc, #128]	; (8002640 <HAL_TIM_Base_MspInit+0x184>)
 80025be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025c0:	f003 0301 	and.w	r3, r3, #1
 80025c4:	617b      	str	r3, [r7, #20]
 80025c6:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80025c8:	230c      	movs	r3, #12
 80025ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025cc:	2302      	movs	r3, #2
 80025ce:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025d0:	2300      	movs	r3, #0
 80025d2:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025d4:	2300      	movs	r3, #0
 80025d6:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM15;
 80025d8:	2309      	movs	r3, #9
 80025da:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025dc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80025e0:	4619      	mov	r1, r3
 80025e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80025e6:	f002 fa1f 	bl	8004a28 <HAL_GPIO_Init>
}
 80025ea:	e022      	b.n	8002632 <HAL_TIM_Base_MspInit+0x176>
  else if(tim_baseHandle->Instance==TIM16)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4a17      	ldr	r2, [pc, #92]	; (8002650 <HAL_TIM_Base_MspInit+0x194>)
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d10c      	bne.n	8002610 <HAL_TIM_Base_MspInit+0x154>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80025f6:	4b12      	ldr	r3, [pc, #72]	; (8002640 <HAL_TIM_Base_MspInit+0x184>)
 80025f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025fa:	4a11      	ldr	r2, [pc, #68]	; (8002640 <HAL_TIM_Base_MspInit+0x184>)
 80025fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002600:	6613      	str	r3, [r2, #96]	; 0x60
 8002602:	4b0f      	ldr	r3, [pc, #60]	; (8002640 <HAL_TIM_Base_MspInit+0x184>)
 8002604:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002606:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800260a:	613b      	str	r3, [r7, #16]
 800260c:	693b      	ldr	r3, [r7, #16]
}
 800260e:	e010      	b.n	8002632 <HAL_TIM_Base_MspInit+0x176>
  else if(tim_baseHandle->Instance==TIM17)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4a0f      	ldr	r2, [pc, #60]	; (8002654 <HAL_TIM_Base_MspInit+0x198>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d10b      	bne.n	8002632 <HAL_TIM_Base_MspInit+0x176>
    __HAL_RCC_TIM17_CLK_ENABLE();
 800261a:	4b09      	ldr	r3, [pc, #36]	; (8002640 <HAL_TIM_Base_MspInit+0x184>)
 800261c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800261e:	4a08      	ldr	r2, [pc, #32]	; (8002640 <HAL_TIM_Base_MspInit+0x184>)
 8002620:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002624:	6613      	str	r3, [r2, #96]	; 0x60
 8002626:	4b06      	ldr	r3, [pc, #24]	; (8002640 <HAL_TIM_Base_MspInit+0x184>)
 8002628:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800262a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800262e:	60fb      	str	r3, [r7, #12]
 8002630:	68fb      	ldr	r3, [r7, #12]
}
 8002632:	bf00      	nop
 8002634:	3740      	adds	r7, #64	; 0x40
 8002636:	46bd      	mov	sp, r7
 8002638:	bd80      	pop	{r7, pc}
 800263a:	bf00      	nop
 800263c:	40012c00 	.word	0x40012c00
 8002640:	40021000 	.word	0x40021000
 8002644:	48000800 	.word	0x48000800
 8002648:	40013400 	.word	0x40013400
 800264c:	40014000 	.word	0x40014000
 8002650:	40014400 	.word	0x40014400
 8002654:	40014800 	.word	0x40014800

08002658 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b08a      	sub	sp, #40	; 0x28
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002660:	f107 0314 	add.w	r3, r7, #20
 8002664:	2200      	movs	r2, #0
 8002666:	601a      	str	r2, [r3, #0]
 8002668:	605a      	str	r2, [r3, #4]
 800266a:	609a      	str	r2, [r3, #8]
 800266c:	60da      	str	r2, [r3, #12]
 800266e:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4a17      	ldr	r2, [pc, #92]	; (80026d4 <HAL_TIM_Encoder_MspInit+0x7c>)
 8002676:	4293      	cmp	r3, r2
 8002678:	d128      	bne.n	80026cc <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800267a:	4b17      	ldr	r3, [pc, #92]	; (80026d8 <HAL_TIM_Encoder_MspInit+0x80>)
 800267c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800267e:	4a16      	ldr	r2, [pc, #88]	; (80026d8 <HAL_TIM_Encoder_MspInit+0x80>)
 8002680:	f043 0302 	orr.w	r3, r3, #2
 8002684:	6593      	str	r3, [r2, #88]	; 0x58
 8002686:	4b14      	ldr	r3, [pc, #80]	; (80026d8 <HAL_TIM_Encoder_MspInit+0x80>)
 8002688:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800268a:	f003 0302 	and.w	r3, r3, #2
 800268e:	613b      	str	r3, [r7, #16]
 8002690:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002692:	4b11      	ldr	r3, [pc, #68]	; (80026d8 <HAL_TIM_Encoder_MspInit+0x80>)
 8002694:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002696:	4a10      	ldr	r2, [pc, #64]	; (80026d8 <HAL_TIM_Encoder_MspInit+0x80>)
 8002698:	f043 0301 	orr.w	r3, r3, #1
 800269c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800269e:	4b0e      	ldr	r3, [pc, #56]	; (80026d8 <HAL_TIM_Encoder_MspInit+0x80>)
 80026a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026a2:	f003 0301 	and.w	r3, r3, #1
 80026a6:	60fb      	str	r3, [r7, #12]
 80026a8:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = ENC_BTN_A_Pin|ENC_BTN_B_Pin;
 80026aa:	23c0      	movs	r3, #192	; 0xc0
 80026ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026ae:	2302      	movs	r3, #2
 80026b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026b2:	2300      	movs	r3, #0
 80026b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026b6:	2300      	movs	r3, #0
 80026b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80026ba:	2302      	movs	r3, #2
 80026bc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026be:	f107 0314 	add.w	r3, r7, #20
 80026c2:	4619      	mov	r1, r3
 80026c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80026c8:	f002 f9ae 	bl	8004a28 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80026cc:	bf00      	nop
 80026ce:	3728      	adds	r7, #40	; 0x28
 80026d0:	46bd      	mov	sp, r7
 80026d2:	bd80      	pop	{r7, pc}
 80026d4:	40000400 	.word	0x40000400
 80026d8:	40021000 	.word	0x40021000

080026dc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b08a      	sub	sp, #40	; 0x28
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026e4:	f107 0314 	add.w	r3, r7, #20
 80026e8:	2200      	movs	r2, #0
 80026ea:	601a      	str	r2, [r3, #0]
 80026ec:	605a      	str	r2, [r3, #4]
 80026ee:	609a      	str	r2, [r3, #8]
 80026f0:	60da      	str	r2, [r3, #12]
 80026f2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM16)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4a22      	ldr	r2, [pc, #136]	; (8002784 <HAL_TIM_MspPostInit+0xa8>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d11c      	bne.n	8002738 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM16_MspPostInit 0 */

  /* USER CODE END TIM16_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026fe:	4b22      	ldr	r3, [pc, #136]	; (8002788 <HAL_TIM_MspPostInit+0xac>)
 8002700:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002702:	4a21      	ldr	r2, [pc, #132]	; (8002788 <HAL_TIM_MspPostInit+0xac>)
 8002704:	f043 0302 	orr.w	r3, r3, #2
 8002708:	64d3      	str	r3, [r2, #76]	; 0x4c
 800270a:	4b1f      	ldr	r3, [pc, #124]	; (8002788 <HAL_TIM_MspPostInit+0xac>)
 800270c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800270e:	f003 0302 	and.w	r3, r3, #2
 8002712:	613b      	str	r3, [r7, #16]
 8002714:	693b      	ldr	r3, [r7, #16]
    /**TIM16 GPIO Configuration
    PB4     ------> TIM16_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002716:	2310      	movs	r3, #16
 8002718:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800271a:	2302      	movs	r3, #2
 800271c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800271e:	2300      	movs	r3, #0
 8002720:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002722:	2300      	movs	r3, #0
 8002724:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 8002726:	2301      	movs	r3, #1
 8002728:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800272a:	f107 0314 	add.w	r3, r7, #20
 800272e:	4619      	mov	r1, r3
 8002730:	4816      	ldr	r0, [pc, #88]	; (800278c <HAL_TIM_MspPostInit+0xb0>)
 8002732:	f002 f979 	bl	8004a28 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 8002736:	e020      	b.n	800277a <HAL_TIM_MspPostInit+0x9e>
  else if(timHandle->Instance==TIM17)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4a14      	ldr	r2, [pc, #80]	; (8002790 <HAL_TIM_MspPostInit+0xb4>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d11b      	bne.n	800277a <HAL_TIM_MspPostInit+0x9e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002742:	4b11      	ldr	r3, [pc, #68]	; (8002788 <HAL_TIM_MspPostInit+0xac>)
 8002744:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002746:	4a10      	ldr	r2, [pc, #64]	; (8002788 <HAL_TIM_MspPostInit+0xac>)
 8002748:	f043 0302 	orr.w	r3, r3, #2
 800274c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800274e:	4b0e      	ldr	r3, [pc, #56]	; (8002788 <HAL_TIM_MspPostInit+0xac>)
 8002750:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002752:	f003 0302 	and.w	r3, r3, #2
 8002756:	60fb      	str	r3, [r7, #12]
 8002758:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ISO_PWM_BREAK_Pin;
 800275a:	2320      	movs	r3, #32
 800275c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800275e:	2302      	movs	r3, #2
 8002760:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002762:	2300      	movs	r3, #0
 8002764:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002766:	2300      	movs	r3, #0
 8002768:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM17;
 800276a:	230a      	movs	r3, #10
 800276c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ISO_PWM_BREAK_GPIO_Port, &GPIO_InitStruct);
 800276e:	f107 0314 	add.w	r3, r7, #20
 8002772:	4619      	mov	r1, r3
 8002774:	4805      	ldr	r0, [pc, #20]	; (800278c <HAL_TIM_MspPostInit+0xb0>)
 8002776:	f002 f957 	bl	8004a28 <HAL_GPIO_Init>
}
 800277a:	bf00      	nop
 800277c:	3728      	adds	r7, #40	; 0x28
 800277e:	46bd      	mov	sp, r7
 8002780:	bd80      	pop	{r7, pc}
 8002782:	bf00      	nop
 8002784:	40014400 	.word	0x40014400
 8002788:	40021000 	.word	0x40021000
 800278c:	48000400 	.word	0x48000400
 8002790:	40014800 	.word	0x40014800

08002794 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002798:	4b22      	ldr	r3, [pc, #136]	; (8002824 <MX_USART1_UART_Init+0x90>)
 800279a:	4a23      	ldr	r2, [pc, #140]	; (8002828 <MX_USART1_UART_Init+0x94>)
 800279c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800279e:	4b21      	ldr	r3, [pc, #132]	; (8002824 <MX_USART1_UART_Init+0x90>)
 80027a0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80027a4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80027a6:	4b1f      	ldr	r3, [pc, #124]	; (8002824 <MX_USART1_UART_Init+0x90>)
 80027a8:	2200      	movs	r2, #0
 80027aa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80027ac:	4b1d      	ldr	r3, [pc, #116]	; (8002824 <MX_USART1_UART_Init+0x90>)
 80027ae:	2200      	movs	r2, #0
 80027b0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80027b2:	4b1c      	ldr	r3, [pc, #112]	; (8002824 <MX_USART1_UART_Init+0x90>)
 80027b4:	2200      	movs	r2, #0
 80027b6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80027b8:	4b1a      	ldr	r3, [pc, #104]	; (8002824 <MX_USART1_UART_Init+0x90>)
 80027ba:	220c      	movs	r2, #12
 80027bc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80027be:	4b19      	ldr	r3, [pc, #100]	; (8002824 <MX_USART1_UART_Init+0x90>)
 80027c0:	2200      	movs	r2, #0
 80027c2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80027c4:	4b17      	ldr	r3, [pc, #92]	; (8002824 <MX_USART1_UART_Init+0x90>)
 80027c6:	2200      	movs	r2, #0
 80027c8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80027ca:	4b16      	ldr	r3, [pc, #88]	; (8002824 <MX_USART1_UART_Init+0x90>)
 80027cc:	2200      	movs	r2, #0
 80027ce:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80027d0:	4b14      	ldr	r3, [pc, #80]	; (8002824 <MX_USART1_UART_Init+0x90>)
 80027d2:	2200      	movs	r2, #0
 80027d4:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80027d6:	4b13      	ldr	r3, [pc, #76]	; (8002824 <MX_USART1_UART_Init+0x90>)
 80027d8:	2200      	movs	r2, #0
 80027da:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80027dc:	4811      	ldr	r0, [pc, #68]	; (8002824 <MX_USART1_UART_Init+0x90>)
 80027de:	f007 fe47 	bl	800a470 <HAL_UART_Init>
 80027e2:	4603      	mov	r3, r0
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d001      	beq.n	80027ec <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80027e8:	f7ff f9f2 	bl	8001bd0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80027ec:	2100      	movs	r1, #0
 80027ee:	480d      	ldr	r0, [pc, #52]	; (8002824 <MX_USART1_UART_Init+0x90>)
 80027f0:	f008 fc0e 	bl	800b010 <HAL_UARTEx_SetTxFifoThreshold>
 80027f4:	4603      	mov	r3, r0
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d001      	beq.n	80027fe <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80027fa:	f7ff f9e9 	bl	8001bd0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80027fe:	2100      	movs	r1, #0
 8002800:	4808      	ldr	r0, [pc, #32]	; (8002824 <MX_USART1_UART_Init+0x90>)
 8002802:	f008 fc43 	bl	800b08c <HAL_UARTEx_SetRxFifoThreshold>
 8002806:	4603      	mov	r3, r0
 8002808:	2b00      	cmp	r3, #0
 800280a:	d001      	beq.n	8002810 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 800280c:	f7ff f9e0 	bl	8001bd0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002810:	4804      	ldr	r0, [pc, #16]	; (8002824 <MX_USART1_UART_Init+0x90>)
 8002812:	f008 fbc4 	bl	800af9e <HAL_UARTEx_DisableFifoMode>
 8002816:	4603      	mov	r3, r0
 8002818:	2b00      	cmp	r3, #0
 800281a:	d001      	beq.n	8002820 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 800281c:	f7ff f9d8 	bl	8001bd0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002820:	bf00      	nop
 8002822:	bd80      	pop	{r7, pc}
 8002824:	200007f4 	.word	0x200007f4
 8002828:	40013800 	.word	0x40013800

0800282c <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002830:	4b22      	ldr	r3, [pc, #136]	; (80028bc <MX_USART3_UART_Init+0x90>)
 8002832:	4a23      	ldr	r2, [pc, #140]	; (80028c0 <MX_USART3_UART_Init+0x94>)
 8002834:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002836:	4b21      	ldr	r3, [pc, #132]	; (80028bc <MX_USART3_UART_Init+0x90>)
 8002838:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800283c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800283e:	4b1f      	ldr	r3, [pc, #124]	; (80028bc <MX_USART3_UART_Init+0x90>)
 8002840:	2200      	movs	r2, #0
 8002842:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002844:	4b1d      	ldr	r3, [pc, #116]	; (80028bc <MX_USART3_UART_Init+0x90>)
 8002846:	2200      	movs	r2, #0
 8002848:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800284a:	4b1c      	ldr	r3, [pc, #112]	; (80028bc <MX_USART3_UART_Init+0x90>)
 800284c:	2200      	movs	r2, #0
 800284e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002850:	4b1a      	ldr	r3, [pc, #104]	; (80028bc <MX_USART3_UART_Init+0x90>)
 8002852:	220c      	movs	r2, #12
 8002854:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002856:	4b19      	ldr	r3, [pc, #100]	; (80028bc <MX_USART3_UART_Init+0x90>)
 8002858:	2200      	movs	r2, #0
 800285a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800285c:	4b17      	ldr	r3, [pc, #92]	; (80028bc <MX_USART3_UART_Init+0x90>)
 800285e:	2200      	movs	r2, #0
 8002860:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002862:	4b16      	ldr	r3, [pc, #88]	; (80028bc <MX_USART3_UART_Init+0x90>)
 8002864:	2200      	movs	r2, #0
 8002866:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002868:	4b14      	ldr	r3, [pc, #80]	; (80028bc <MX_USART3_UART_Init+0x90>)
 800286a:	2200      	movs	r2, #0
 800286c:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800286e:	4b13      	ldr	r3, [pc, #76]	; (80028bc <MX_USART3_UART_Init+0x90>)
 8002870:	2200      	movs	r2, #0
 8002872:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002874:	4811      	ldr	r0, [pc, #68]	; (80028bc <MX_USART3_UART_Init+0x90>)
 8002876:	f007 fdfb 	bl	800a470 <HAL_UART_Init>
 800287a:	4603      	mov	r3, r0
 800287c:	2b00      	cmp	r3, #0
 800287e:	d001      	beq.n	8002884 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8002880:	f7ff f9a6 	bl	8001bd0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002884:	2100      	movs	r1, #0
 8002886:	480d      	ldr	r0, [pc, #52]	; (80028bc <MX_USART3_UART_Init+0x90>)
 8002888:	f008 fbc2 	bl	800b010 <HAL_UARTEx_SetTxFifoThreshold>
 800288c:	4603      	mov	r3, r0
 800288e:	2b00      	cmp	r3, #0
 8002890:	d001      	beq.n	8002896 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8002892:	f7ff f99d 	bl	8001bd0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002896:	2100      	movs	r1, #0
 8002898:	4808      	ldr	r0, [pc, #32]	; (80028bc <MX_USART3_UART_Init+0x90>)
 800289a:	f008 fbf7 	bl	800b08c <HAL_UARTEx_SetRxFifoThreshold>
 800289e:	4603      	mov	r3, r0
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d001      	beq.n	80028a8 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80028a4:	f7ff f994 	bl	8001bd0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80028a8:	4804      	ldr	r0, [pc, #16]	; (80028bc <MX_USART3_UART_Init+0x90>)
 80028aa:	f008 fb78 	bl	800af9e <HAL_UARTEx_DisableFifoMode>
 80028ae:	4603      	mov	r3, r0
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d001      	beq.n	80028b8 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80028b4:	f7ff f98c 	bl	8001bd0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80028b8:	bf00      	nop
 80028ba:	bd80      	pop	{r7, pc}
 80028bc:	20000884 	.word	0x20000884
 80028c0:	40004800 	.word	0x40004800

080028c4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b0a0      	sub	sp, #128	; 0x80
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028cc:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80028d0:	2200      	movs	r2, #0
 80028d2:	601a      	str	r2, [r3, #0]
 80028d4:	605a      	str	r2, [r3, #4]
 80028d6:	609a      	str	r2, [r3, #8]
 80028d8:	60da      	str	r2, [r3, #12]
 80028da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80028dc:	f107 0318 	add.w	r3, r7, #24
 80028e0:	2254      	movs	r2, #84	; 0x54
 80028e2:	2100      	movs	r1, #0
 80028e4:	4618      	mov	r0, r3
 80028e6:	f00f fe51 	bl	801258c <memset>
  if(uartHandle->Instance==USART1)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4a3d      	ldr	r2, [pc, #244]	; (80029e4 <HAL_UART_MspInit+0x120>)
 80028f0:	4293      	cmp	r3, r2
 80028f2:	d136      	bne.n	8002962 <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80028f4:	2301      	movs	r3, #1
 80028f6:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80028f8:	2300      	movs	r3, #0
 80028fa:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80028fc:	f107 0318 	add.w	r3, r7, #24
 8002900:	4618      	mov	r0, r3
 8002902:	f005 fb1d 	bl	8007f40 <HAL_RCCEx_PeriphCLKConfig>
 8002906:	4603      	mov	r3, r0
 8002908:	2b00      	cmp	r3, #0
 800290a:	d001      	beq.n	8002910 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800290c:	f7ff f960 	bl	8001bd0 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002910:	4b35      	ldr	r3, [pc, #212]	; (80029e8 <HAL_UART_MspInit+0x124>)
 8002912:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002914:	4a34      	ldr	r2, [pc, #208]	; (80029e8 <HAL_UART_MspInit+0x124>)
 8002916:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800291a:	6613      	str	r3, [r2, #96]	; 0x60
 800291c:	4b32      	ldr	r3, [pc, #200]	; (80029e8 <HAL_UART_MspInit+0x124>)
 800291e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002920:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002924:	617b      	str	r3, [r7, #20]
 8002926:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002928:	4b2f      	ldr	r3, [pc, #188]	; (80029e8 <HAL_UART_MspInit+0x124>)
 800292a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800292c:	4a2e      	ldr	r2, [pc, #184]	; (80029e8 <HAL_UART_MspInit+0x124>)
 800292e:	f043 0304 	orr.w	r3, r3, #4
 8002932:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002934:	4b2c      	ldr	r3, [pc, #176]	; (80029e8 <HAL_UART_MspInit+0x124>)
 8002936:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002938:	f003 0304 	and.w	r3, r3, #4
 800293c:	613b      	str	r3, [r7, #16]
 800293e:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002940:	2330      	movs	r3, #48	; 0x30
 8002942:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002944:	2302      	movs	r3, #2
 8002946:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002948:	2300      	movs	r3, #0
 800294a:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800294c:	2300      	movs	r3, #0
 800294e:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002950:	2307      	movs	r3, #7
 8002952:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002954:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002958:	4619      	mov	r1, r3
 800295a:	4824      	ldr	r0, [pc, #144]	; (80029ec <HAL_UART_MspInit+0x128>)
 800295c:	f002 f864 	bl	8004a28 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8002960:	e03b      	b.n	80029da <HAL_UART_MspInit+0x116>
  else if(uartHandle->Instance==USART3)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	4a22      	ldr	r2, [pc, #136]	; (80029f0 <HAL_UART_MspInit+0x12c>)
 8002968:	4293      	cmp	r3, r2
 800296a:	d136      	bne.n	80029da <HAL_UART_MspInit+0x116>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800296c:	2304      	movs	r3, #4
 800296e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002970:	2300      	movs	r3, #0
 8002972:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002974:	f107 0318 	add.w	r3, r7, #24
 8002978:	4618      	mov	r0, r3
 800297a:	f005 fae1 	bl	8007f40 <HAL_RCCEx_PeriphCLKConfig>
 800297e:	4603      	mov	r3, r0
 8002980:	2b00      	cmp	r3, #0
 8002982:	d001      	beq.n	8002988 <HAL_UART_MspInit+0xc4>
      Error_Handler();
 8002984:	f7ff f924 	bl	8001bd0 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002988:	4b17      	ldr	r3, [pc, #92]	; (80029e8 <HAL_UART_MspInit+0x124>)
 800298a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800298c:	4a16      	ldr	r2, [pc, #88]	; (80029e8 <HAL_UART_MspInit+0x124>)
 800298e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002992:	6593      	str	r3, [r2, #88]	; 0x58
 8002994:	4b14      	ldr	r3, [pc, #80]	; (80029e8 <HAL_UART_MspInit+0x124>)
 8002996:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002998:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800299c:	60fb      	str	r3, [r7, #12]
 800299e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029a0:	4b11      	ldr	r3, [pc, #68]	; (80029e8 <HAL_UART_MspInit+0x124>)
 80029a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029a4:	4a10      	ldr	r2, [pc, #64]	; (80029e8 <HAL_UART_MspInit+0x124>)
 80029a6:	f043 0302 	orr.w	r3, r3, #2
 80029aa:	64d3      	str	r3, [r2, #76]	; 0x4c
 80029ac:	4b0e      	ldr	r3, [pc, #56]	; (80029e8 <HAL_UART_MspInit+0x124>)
 80029ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029b0:	f003 0302 	and.w	r3, r3, #2
 80029b4:	60bb      	str	r3, [r7, #8]
 80029b6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80029b8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80029bc:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029be:	2302      	movs	r3, #2
 80029c0:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029c2:	2300      	movs	r3, #0
 80029c4:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029c6:	2300      	movs	r3, #0
 80029c8:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80029ca:	2307      	movs	r3, #7
 80029cc:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029ce:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80029d2:	4619      	mov	r1, r3
 80029d4:	4807      	ldr	r0, [pc, #28]	; (80029f4 <HAL_UART_MspInit+0x130>)
 80029d6:	f002 f827 	bl	8004a28 <HAL_GPIO_Init>
}
 80029da:	bf00      	nop
 80029dc:	3780      	adds	r7, #128	; 0x80
 80029de:	46bd      	mov	sp, r7
 80029e0:	bd80      	pop	{r7, pc}
 80029e2:	bf00      	nop
 80029e4:	40013800 	.word	0x40013800
 80029e8:	40021000 	.word	0x40021000
 80029ec:	48000800 	.word	0x48000800
 80029f0:	40004800 	.word	0x40004800
 80029f4:	48000400 	.word	0x48000400

080029f8 <vTask_TCN75A>:
extern SemaphoreHandle_t xI2CMutex;
extern QueueHandle_t xTemperatureQueue;
TCN75A_HandleTypeDef hTCN75A1;


void vTask_TCN75A(void *pvParameters){
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b084      	sub	sp, #16
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
	I2C_HandleTypeDef* hi2c = (I2C_HandleTypeDef*) pvParameters;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	60fb      	str	r3, [r7, #12]
	if(xSemaphoreTake(xUartMutex, portMAX_DELAY) == pdTRUE){
 8002a04:	4b32      	ldr	r3, [pc, #200]	; (8002ad0 <vTask_TCN75A+0xd8>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	f00c fe33 	bl	800f678 <xQueueSemaphoreTake>
 8002a12:	4603      	mov	r3, r0
 8002a14:	2b01      	cmp	r3, #1
 8002a16:	d109      	bne.n	8002a2c <vTask_TCN75A+0x34>
		printf("Init Task TCN75A...   ");
 8002a18:	482e      	ldr	r0, [pc, #184]	; (8002ad4 <vTask_TCN75A+0xdc>)
 8002a1a:	f00f fc1d 	bl	8012258 <iprintf>
		xSemaphoreGive(xUartMutex);
 8002a1e:	4b2c      	ldr	r3, [pc, #176]	; (8002ad0 <vTask_TCN75A+0xd8>)
 8002a20:	6818      	ldr	r0, [r3, #0]
 8002a22:	2300      	movs	r3, #0
 8002a24:	2200      	movs	r2, #0
 8002a26:	2100      	movs	r1, #0
 8002a28:	f00c fc48 	bl	800f2bc <xQueueGenericSend>
	}
	TCN75A_Init(&hTCN75A1, hi2c);
 8002a2c:	68f9      	ldr	r1, [r7, #12]
 8002a2e:	482a      	ldr	r0, [pc, #168]	; (8002ad8 <vTask_TCN75A+0xe0>)
 8002a30:	f000 f860 	bl	8002af4 <TCN75A_Init>
	if(xSemaphoreTake(xUartMutex, portMAX_DELAY) == pdTRUE){
 8002a34:	4b26      	ldr	r3, [pc, #152]	; (8002ad0 <vTask_TCN75A+0xd8>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	f00c fe1b 	bl	800f678 <xQueueSemaphoreTake>
 8002a42:	4603      	mov	r3, r0
 8002a44:	2b01      	cmp	r3, #1
 8002a46:	d109      	bne.n	8002a5c <vTask_TCN75A+0x64>
		printf(" Done\r\n");
 8002a48:	4824      	ldr	r0, [pc, #144]	; (8002adc <vTask_TCN75A+0xe4>)
 8002a4a:	f00f fc6b 	bl	8012324 <puts>
		xSemaphoreGive(xUartMutex);
 8002a4e:	4b20      	ldr	r3, [pc, #128]	; (8002ad0 <vTask_TCN75A+0xd8>)
 8002a50:	6818      	ldr	r0, [r3, #0]
 8002a52:	2300      	movs	r3, #0
 8002a54:	2200      	movs	r2, #0
 8002a56:	2100      	movs	r1, #0
 8002a58:	f00c fc30 	bl	800f2bc <xQueueGenericSend>
	}
	vTaskDelay(1000);
 8002a5c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002a60:	f00d f970 	bl	800fd44 <vTaskDelay>
	for(;;){
		TCN75A_Read_Temperature(&hTCN75A1);
 8002a64:	481c      	ldr	r0, [pc, #112]	; (8002ad8 <vTask_TCN75A+0xe0>)
 8002a66:	f000 f867 	bl	8002b38 <TCN75A_Read_Temperature>
		if(xSemaphoreTake(xUartMutex, portMAX_DELAY) == pdTRUE){
 8002a6a:	4b19      	ldr	r3, [pc, #100]	; (8002ad0 <vTask_TCN75A+0xd8>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002a72:	4618      	mov	r0, r3
 8002a74:	f00c fe00 	bl	800f678 <xQueueSemaphoreTake>
 8002a78:	4603      	mov	r3, r0
 8002a7a:	2b01      	cmp	r3, #1
 8002a7c:	d11e      	bne.n	8002abc <vTask_TCN75A+0xc4>
			printf("Temperature %2.2f°C\r\n",hTCN75A1.temperature);
 8002a7e:	4b16      	ldr	r3, [pc, #88]	; (8002ad8 <vTask_TCN75A+0xe0>)
 8002a80:	68db      	ldr	r3, [r3, #12]
 8002a82:	4618      	mov	r0, r3
 8002a84:	f7fd fd88 	bl	8000598 <__aeabi_f2d>
 8002a88:	4602      	mov	r2, r0
 8002a8a:	460b      	mov	r3, r1
 8002a8c:	4814      	ldr	r0, [pc, #80]	; (8002ae0 <vTask_TCN75A+0xe8>)
 8002a8e:	f00f fbe3 	bl	8012258 <iprintf>
			xSemaphoreGive(xUartMutex);
 8002a92:	4b0f      	ldr	r3, [pc, #60]	; (8002ad0 <vTask_TCN75A+0xd8>)
 8002a94:	6818      	ldr	r0, [r3, #0]
 8002a96:	2300      	movs	r3, #0
 8002a98:	2200      	movs	r2, #0
 8002a9a:	2100      	movs	r1, #0
 8002a9c:	f00c fc0e 	bl	800f2bc <xQueueGenericSend>
			if(pdPASS == xQueueSend(xTemperatureQueue, &hTCN75A1.temperature, portMAX_DELAY)){
 8002aa0:	4b10      	ldr	r3, [pc, #64]	; (8002ae4 <vTask_TCN75A+0xec>)
 8002aa2:	6818      	ldr	r0, [r3, #0]
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002aaa:	490f      	ldr	r1, [pc, #60]	; (8002ae8 <vTask_TCN75A+0xf0>)
 8002aac:	f00c fc06 	bl	800f2bc <xQueueGenericSend>
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	2b01      	cmp	r3, #1
 8002ab4:	d102      	bne.n	8002abc <vTask_TCN75A+0xc4>
				printf("Temperature transmit to fan controller\r\n");
 8002ab6:	480d      	ldr	r0, [pc, #52]	; (8002aec <vTask_TCN75A+0xf4>)
 8002ab8:	f00f fc34 	bl	8012324 <puts>
			}

		}
		vTaskDelay(1000);
 8002abc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002ac0:	f00d f940 	bl	800fd44 <vTaskDelay>
		HAL_GPIO_TogglePin(USR_LED_3_GPIO_Port, USR_LED_3_Pin);
 8002ac4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002ac8:	4809      	ldr	r0, [pc, #36]	; (8002af0 <vTask_TCN75A+0xf8>)
 8002aca:	f002 f947 	bl	8004d5c <HAL_GPIO_TogglePin>
	for(;;){
 8002ace:	e7c9      	b.n	8002a64 <vTask_TCN75A+0x6c>
 8002ad0:	200005d0 	.word	0x200005d0
 8002ad4:	08014930 	.word	0x08014930
 8002ad8:	20000914 	.word	0x20000914
 8002adc:	08014948 	.word	0x08014948
 8002ae0:	08014950 	.word	0x08014950
 8002ae4:	200005d8 	.word	0x200005d8
 8002ae8:	20000920 	.word	0x20000920
 8002aec:	08014968 	.word	0x08014968
 8002af0:	48000800 	.word	0x48000800

08002af4 <TCN75A_Init>:
	}
}

void TCN75A_Init(TCN75A_HandleTypeDef* hTCN75A, I2C_HandleTypeDef* hi2c){
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b086      	sub	sp, #24
 8002af8:	af02      	add	r7, sp, #8
 8002afa:	6078      	str	r0, [r7, #4]
 8002afc:	6039      	str	r1, [r7, #0]
	hTCN75A->hi2c = hi2c;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	683a      	ldr	r2, [r7, #0]
 8002b02:	601a      	str	r2, [r3, #0]
	hTCN75A->I2C_addr = _TCN75A_I2C_ADDR;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2248      	movs	r2, #72	; 0x48
 8002b08:	711a      	strb	r2, [r3, #4]

	uint8_t config[2] = {_TCN75A_RP_CONFIG, _TCN75A_12BITS};
 8002b0a:	f246 0301 	movw	r3, #24577	; 0x6001
 8002b0e:	81bb      	strh	r3, [r7, #12]
	HAL_I2C_Master_Transmit(hTCN75A->hi2c, hTCN75A->I2C_addr<<1, config, 2, HAL_MAX_DELAY);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6818      	ldr	r0, [r3, #0]
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	791b      	ldrb	r3, [r3, #4]
 8002b18:	b29b      	uxth	r3, r3
 8002b1a:	005b      	lsls	r3, r3, #1
 8002b1c:	b299      	uxth	r1, r3
 8002b1e:	f107 020c 	add.w	r2, r7, #12
 8002b22:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002b26:	9300      	str	r3, [sp, #0]
 8002b28:	2302      	movs	r3, #2
 8002b2a:	f002 f9d9 	bl	8004ee0 <HAL_I2C_Master_Transmit>
}
 8002b2e:	bf00      	nop
 8002b30:	3710      	adds	r7, #16
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bd80      	pop	{r7, pc}
	...

08002b38 <TCN75A_Read_Temperature>:

void TCN75A_Read_Temperature(TCN75A_HandleTypeDef* hTCN75A){
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b088      	sub	sp, #32
 8002b3c:	af04      	add	r7, sp, #16
 8002b3e:	6078      	str	r0, [r7, #4]
	uint8_t data[2] = {0x00, 0x00};
 8002b40:	2300      	movs	r3, #0
 8002b42:	81bb      	strh	r3, [r7, #12]
	if(xSemaphoreTake(xI2CMutex, portMAX_DELAY)==pdTRUE){
 8002b44:	4b20      	ldr	r3, [pc, #128]	; (8002bc8 <TCN75A_Read_Temperature+0x90>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	f00c fd93 	bl	800f678 <xQueueSemaphoreTake>
 8002b52:	4603      	mov	r3, r0
 8002b54:	2b01      	cmp	r3, #1
 8002b56:	d119      	bne.n	8002b8c <TCN75A_Read_Temperature+0x54>
		//HAL_I2C_Master_Transmit(hTCN75A->hi2c, hTCN75A->I2C_addr<<1, data, 1, HAL_MAX_DELAY);
		//HAL_I2C_Master_Receive(hTCN75A->hi2c, hTCN75A->I2C_addr<<1, data, 2, HAL_MAX_DELAY);
		HAL_I2C_Mem_Read(hTCN75A->hi2c, hTCN75A->I2C_addr<<1, _TCN75A_RP_TA, 1, data, 2, HAL_MAX_DELAY);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6818      	ldr	r0, [r3, #0]
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	791b      	ldrb	r3, [r3, #4]
 8002b60:	b29b      	uxth	r3, r3
 8002b62:	005b      	lsls	r3, r3, #1
 8002b64:	b299      	uxth	r1, r3
 8002b66:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002b6a:	9302      	str	r3, [sp, #8]
 8002b6c:	2302      	movs	r3, #2
 8002b6e:	9301      	str	r3, [sp, #4]
 8002b70:	f107 030c 	add.w	r3, r7, #12
 8002b74:	9300      	str	r3, [sp, #0]
 8002b76:	2301      	movs	r3, #1
 8002b78:	2200      	movs	r2, #0
 8002b7a:	f002 faa5 	bl	80050c8 <HAL_I2C_Mem_Read>
		xSemaphoreGive(xI2CMutex);
 8002b7e:	4b12      	ldr	r3, [pc, #72]	; (8002bc8 <TCN75A_Read_Temperature+0x90>)
 8002b80:	6818      	ldr	r0, [r3, #0]
 8002b82:	2300      	movs	r3, #0
 8002b84:	2200      	movs	r2, #0
 8002b86:	2100      	movs	r1, #0
 8002b88:	f00c fb98 	bl	800f2bc <xQueueGenericSend>
	}
		hTCN75A->temperature_raw = (data[0]<<4)|(data[1]>>4);
 8002b8c:	7b3b      	ldrb	r3, [r7, #12]
 8002b8e:	011b      	lsls	r3, r3, #4
 8002b90:	b21a      	sxth	r2, r3
 8002b92:	7b7b      	ldrb	r3, [r7, #13]
 8002b94:	091b      	lsrs	r3, r3, #4
 8002b96:	b2db      	uxtb	r3, r3
 8002b98:	b21b      	sxth	r3, r3
 8002b9a:	4313      	orrs	r3, r2
 8002b9c:	b21b      	sxth	r3, r3
 8002b9e:	b29a      	uxth	r2, r3
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	811a      	strh	r2, [r3, #8]
		hTCN75A->temperature = (float)hTCN75A->temperature_raw / 16.0;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	891b      	ldrh	r3, [r3, #8]
 8002ba8:	ee07 3a90 	vmov	s15, r3
 8002bac:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002bb0:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 8002bb4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	edc3 7a03 	vstr	s15, [r3, #12]
}
 8002bbe:	bf00      	nop
 8002bc0:	3710      	adds	r7, #16
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bd80      	pop	{r7, pc}
 8002bc6:	bf00      	nop
 8002bc8:	200005d4 	.word	0x200005d4

08002bcc <vTask_Fan>:
#include "semphr.h"

extern SemaphoreHandle_t xUartMutex;
extern QueueHandle_t xTemperatureQueue;

void vTask_Fan(void *pvParameters){
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b088      	sub	sp, #32
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
	FAN_HandleTypeDef hfan1;
	float temperature;
	float speed = 0;
 8002bd4:	f04f 0300 	mov.w	r3, #0
 8002bd8:	61fb      	str	r3, [r7, #28]
	if(xSemaphoreTake(xUartMutex, portMAX_DELAY) == pdTRUE){
 8002bda:	4b30      	ldr	r3, [pc, #192]	; (8002c9c <vTask_Fan+0xd0>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002be2:	4618      	mov	r0, r3
 8002be4:	f00c fd48 	bl	800f678 <xQueueSemaphoreTake>
 8002be8:	4603      	mov	r3, r0
 8002bea:	2b01      	cmp	r3, #1
 8002bec:	d109      	bne.n	8002c02 <vTask_Fan+0x36>
		printf("Init Fan...           ");
 8002bee:	482c      	ldr	r0, [pc, #176]	; (8002ca0 <vTask_Fan+0xd4>)
 8002bf0:	f00f fb32 	bl	8012258 <iprintf>
		xSemaphoreGive(xUartMutex);
 8002bf4:	4b29      	ldr	r3, [pc, #164]	; (8002c9c <vTask_Fan+0xd0>)
 8002bf6:	6818      	ldr	r0, [r3, #0]
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	2100      	movs	r1, #0
 8002bfe:	f00c fb5d 	bl	800f2bc <xQueueGenericSend>
	}
	Fan_Init(&hfan1, (TIM_HandleTypeDef*)pvParameters);
 8002c02:	f107 0310 	add.w	r3, r7, #16
 8002c06:	6879      	ldr	r1, [r7, #4]
 8002c08:	4618      	mov	r0, r3
 8002c0a:	f000 f84f 	bl	8002cac <Fan_Init>
	if(xSemaphoreTake(xUartMutex, portMAX_DELAY) == pdTRUE){
 8002c0e:	4b23      	ldr	r3, [pc, #140]	; (8002c9c <vTask_Fan+0xd0>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002c16:	4618      	mov	r0, r3
 8002c18:	f00c fd2e 	bl	800f678 <xQueueSemaphoreTake>
 8002c1c:	4603      	mov	r3, r0
 8002c1e:	2b01      	cmp	r3, #1
 8002c20:	d109      	bne.n	8002c36 <vTask_Fan+0x6a>
		printf(" Done\r\n");
 8002c22:	4820      	ldr	r0, [pc, #128]	; (8002ca4 <vTask_Fan+0xd8>)
 8002c24:	f00f fb7e 	bl	8012324 <puts>
		xSemaphoreGive(xUartMutex);
 8002c28:	4b1c      	ldr	r3, [pc, #112]	; (8002c9c <vTask_Fan+0xd0>)
 8002c2a:	6818      	ldr	r0, [r3, #0]
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	2200      	movs	r2, #0
 8002c30:	2100      	movs	r1, #0
 8002c32:	f00c fb43 	bl	800f2bc <xQueueGenericSend>
	}

	for(;;){
		if(pdPASS == xQueueReceive(xTemperatureQueue, &temperature, portMAX_DELAY)){
 8002c36:	4b1c      	ldr	r3, [pc, #112]	; (8002ca8 <vTask_Fan+0xdc>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f107 010c 	add.w	r1, r7, #12
 8002c3e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002c42:	4618      	mov	r0, r3
 8002c44:	f00c fc38 	bl	800f4b8 <xQueueReceive>
 8002c48:	4603      	mov	r3, r0
 8002c4a:	2b01      	cmp	r3, #1
 8002c4c:	d120      	bne.n	8002c90 <vTask_Fan+0xc4>
			speed = (temperature > 30) ? 1 : ((temperature < 29) ? 0 : speed);
 8002c4e:	edd7 7a03 	vldr	s15, [r7, #12]
 8002c52:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8002c56:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c5e:	dd02      	ble.n	8002c66 <vTask_Fan+0x9a>
 8002c60:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8002c64:	e00c      	b.n	8002c80 <vTask_Fan+0xb4>
 8002c66:	edd7 7a03 	vldr	s15, [r7, #12]
 8002c6a:	eeb3 7a0d 	vmov.f32	s14, #61	; 0x41e80000  29.0
 8002c6e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c76:	d502      	bpl.n	8002c7e <vTask_Fan+0xb2>
 8002c78:	f04f 0300 	mov.w	r3, #0
 8002c7c:	e000      	b.n	8002c80 <vTask_Fan+0xb4>
 8002c7e:	69fb      	ldr	r3, [r7, #28]
 8002c80:	61fb      	str	r3, [r7, #28]
			Fan_Set_Speed(&hfan1, speed);
 8002c82:	f107 0310 	add.w	r3, r7, #16
 8002c86:	ed97 0a07 	vldr	s0, [r7, #28]
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	f000 f836 	bl	8002cfc <Fan_Set_Speed>
		}
		vTaskDelay(1000);
 8002c90:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002c94:	f00d f856 	bl	800fd44 <vTaskDelay>
		if(pdPASS == xQueueReceive(xTemperatureQueue, &temperature, portMAX_DELAY)){
 8002c98:	e7cd      	b.n	8002c36 <vTask_Fan+0x6a>
 8002c9a:	bf00      	nop
 8002c9c:	200005d0 	.word	0x200005d0
 8002ca0:	08014990 	.word	0x08014990
 8002ca4:	080149a8 	.word	0x080149a8
 8002ca8:	200005d8 	.word	0x200005d8

08002cac <Fan_Init>:
	}
}

void Fan_Init(FAN_HandleTypeDef* hfan, TIM_HandleTypeDef* htim){
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b082      	sub	sp, #8
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
 8002cb4:	6039      	str	r1, [r7, #0]
	hfan->htim = htim;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	683a      	ldr	r2, [r7, #0]
 8002cba:	601a      	str	r2, [r3, #0]
	hfan->Max_Pwm = __HAL_TIM_GET_AUTORELOAD(htim);
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cc2:	b29a      	uxth	r2, r3
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	809a      	strh	r2, [r3, #4]
	hfan->Pwm = 0;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2200      	movs	r2, #0
 8002ccc:	80da      	strh	r2, [r3, #6]
	hfan->Channel = FAN_CHANNEL;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	721a      	strb	r2, [r3, #8]
	Fan_Set_Speed(hfan, 0);
 8002cd4:	ed9f 0a08 	vldr	s0, [pc, #32]	; 8002cf8 <Fan_Init+0x4c>
 8002cd8:	6878      	ldr	r0, [r7, #4]
 8002cda:	f000 f80f 	bl	8002cfc <Fan_Set_Speed>
	HAL_TIM_PWM_Start(hfan->htim, hfan->Channel);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681a      	ldr	r2, [r3, #0]
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	7a1b      	ldrb	r3, [r3, #8]
 8002ce6:	4619      	mov	r1, r3
 8002ce8:	4610      	mov	r0, r2
 8002cea:	f005 fca9 	bl	8008640 <HAL_TIM_PWM_Start>
}
 8002cee:	bf00      	nop
 8002cf0:	3708      	adds	r7, #8
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bd80      	pop	{r7, pc}
 8002cf6:	bf00      	nop
 8002cf8:	00000000 	.word	0x00000000

08002cfc <Fan_Set_Speed>:

void Fan_Set_Speed(FAN_HandleTypeDef* hfan, float speed){
 8002cfc:	b480      	push	{r7}
 8002cfe:	b083      	sub	sp, #12
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
 8002d04:	ed87 0a00 	vstr	s0, [r7]
	hfan->Pwm = (uint16_t)(speed*((float)hfan->Max_Pwm));
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	889b      	ldrh	r3, [r3, #4]
 8002d0c:	ee07 3a90 	vmov	s15, r3
 8002d10:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002d14:	edd7 7a00 	vldr	s15, [r7]
 8002d18:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d1c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002d20:	ee17 3a90 	vmov	r3, s15
 8002d24:	b29a      	uxth	r2, r3
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	80da      	strh	r2, [r3, #6]
	__HAL_TIM_SET_COMPARE(hfan->htim, hfan->Channel, hfan->Pwm);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	7a1b      	ldrb	r3, [r3, #8]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d106      	bne.n	8002d40 <Fan_Set_Speed+0x44>
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	88da      	ldrh	r2, [r3, #6]
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	635a      	str	r2, [r3, #52]	; 0x34
}
 8002d3e:	e036      	b.n	8002dae <Fan_Set_Speed+0xb2>
	__HAL_TIM_SET_COMPARE(hfan->htim, hfan->Channel, hfan->Pwm);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	7a1b      	ldrb	r3, [r3, #8]
 8002d44:	2b04      	cmp	r3, #4
 8002d46:	d107      	bne.n	8002d58 <Fan_Set_Speed+0x5c>
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	88d9      	ldrh	r1, [r3, #6]
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	681a      	ldr	r2, [r3, #0]
 8002d52:	460b      	mov	r3, r1
 8002d54:	6393      	str	r3, [r2, #56]	; 0x38
}
 8002d56:	e02a      	b.n	8002dae <Fan_Set_Speed+0xb2>
	__HAL_TIM_SET_COMPARE(hfan->htim, hfan->Channel, hfan->Pwm);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	7a1b      	ldrb	r3, [r3, #8]
 8002d5c:	2b08      	cmp	r3, #8
 8002d5e:	d107      	bne.n	8002d70 <Fan_Set_Speed+0x74>
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	88d9      	ldrh	r1, [r3, #6]
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	681a      	ldr	r2, [r3, #0]
 8002d6a:	460b      	mov	r3, r1
 8002d6c:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8002d6e:	e01e      	b.n	8002dae <Fan_Set_Speed+0xb2>
	__HAL_TIM_SET_COMPARE(hfan->htim, hfan->Channel, hfan->Pwm);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	7a1b      	ldrb	r3, [r3, #8]
 8002d74:	2b0c      	cmp	r3, #12
 8002d76:	d107      	bne.n	8002d88 <Fan_Set_Speed+0x8c>
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	88d9      	ldrh	r1, [r3, #6]
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	681a      	ldr	r2, [r3, #0]
 8002d82:	460b      	mov	r3, r1
 8002d84:	6413      	str	r3, [r2, #64]	; 0x40
}
 8002d86:	e012      	b.n	8002dae <Fan_Set_Speed+0xb2>
	__HAL_TIM_SET_COMPARE(hfan->htim, hfan->Channel, hfan->Pwm);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	7a1b      	ldrb	r3, [r3, #8]
 8002d8c:	2b10      	cmp	r3, #16
 8002d8e:	d107      	bne.n	8002da0 <Fan_Set_Speed+0xa4>
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	88d9      	ldrh	r1, [r3, #6]
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	681a      	ldr	r2, [r3, #0]
 8002d9a:	460b      	mov	r3, r1
 8002d9c:	6493      	str	r3, [r2, #72]	; 0x48
}
 8002d9e:	e006      	b.n	8002dae <Fan_Set_Speed+0xb2>
	__HAL_TIM_SET_COMPARE(hfan->htim, hfan->Channel, hfan->Pwm);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	88d9      	ldrh	r1, [r3, #6]
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	681a      	ldr	r2, [r3, #0]
 8002daa:	460b      	mov	r3, r1
 8002dac:	64d3      	str	r3, [r2, #76]	; 0x4c
}
 8002dae:	bf00      	nop
 8002db0:	370c      	adds	r7, #12
 8002db2:	46bd      	mov	sp, r7
 8002db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db8:	4770      	bx	lr
	...

08002dbc <vTask_LCD>:
LCD_HandleTypeDef hlcd1;
uint8_t LCD_Text_Buffer[_LCD_MAX_CHAR];
const uint8_t _ROW_16[] = {0x80, 0xC0};

// Task
void vTask_LCD(void *pvParameters){
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b084      	sub	sp, #16
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
	int time = 0;
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	60fb      	str	r3, [r7, #12]
	I2C_HandleTypeDef* hi2c = (I2C_HandleTypeDef*) pvParameters;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	60bb      	str	r3, [r7, #8]
	if(xSemaphoreTake(xUartMutex, portMAX_DELAY) == pdTRUE){
 8002dcc:	4b22      	ldr	r3, [pc, #136]	; (8002e58 <vTask_LCD+0x9c>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	f00c fc4f 	bl	800f678 <xQueueSemaphoreTake>
 8002dda:	4603      	mov	r3, r0
 8002ddc:	2b01      	cmp	r3, #1
 8002dde:	d109      	bne.n	8002df4 <vTask_LCD+0x38>
		printf("Init Task LCD...      ");
 8002de0:	481e      	ldr	r0, [pc, #120]	; (8002e5c <vTask_LCD+0xa0>)
 8002de2:	f00f fa39 	bl	8012258 <iprintf>
		xSemaphoreGive(xUartMutex);
 8002de6:	4b1c      	ldr	r3, [pc, #112]	; (8002e58 <vTask_LCD+0x9c>)
 8002de8:	6818      	ldr	r0, [r3, #0]
 8002dea:	2300      	movs	r3, #0
 8002dec:	2200      	movs	r2, #0
 8002dee:	2100      	movs	r1, #0
 8002df0:	f00c fa64 	bl	800f2bc <xQueueGenericSend>
	}
	LCD_Init(&hlcd1, hi2c);
 8002df4:	68b9      	ldr	r1, [r7, #8]
 8002df6:	481a      	ldr	r0, [pc, #104]	; (8002e60 <vTask_LCD+0xa4>)
 8002df8:	f000 f8a2 	bl	8002f40 <LCD_Init>
	if(xSemaphoreTake(xUartMutex, portMAX_DELAY) == pdTRUE){
 8002dfc:	4b16      	ldr	r3, [pc, #88]	; (8002e58 <vTask_LCD+0x9c>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002e04:	4618      	mov	r0, r3
 8002e06:	f00c fc37 	bl	800f678 <xQueueSemaphoreTake>
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	2b01      	cmp	r3, #1
 8002e0e:	d109      	bne.n	8002e24 <vTask_LCD+0x68>
		printf(" Done\r\n");
 8002e10:	4814      	ldr	r0, [pc, #80]	; (8002e64 <vTask_LCD+0xa8>)
 8002e12:	f00f fa87 	bl	8012324 <puts>
		xSemaphoreGive(xUartMutex);
 8002e16:	4b10      	ldr	r3, [pc, #64]	; (8002e58 <vTask_LCD+0x9c>)
 8002e18:	6818      	ldr	r0, [r3, #0]
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	2100      	movs	r1, #0
 8002e20:	f00c fa4c 	bl	800f2bc <xQueueGenericSend>
	}
	for(;;){
		snprintf((char*)(&hlcd1)->LCD_Text_Buffer, _LCD_MAX_CHAR, "Time : %4d sec", time);
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	4a10      	ldr	r2, [pc, #64]	; (8002e68 <vTask_LCD+0xac>)
 8002e28:	2121      	movs	r1, #33	; 0x21
 8002e2a:	4810      	ldr	r0, [pc, #64]	; (8002e6c <vTask_LCD+0xb0>)
 8002e2c:	f00f fa82 	bl	8012334 <sniprintf>
		LCD_Print(&hlcd1, (&hlcd1)->LCD_Text_Buffer, _LCD_1ST_LINE);
 8002e30:	2200      	movs	r2, #0
 8002e32:	490e      	ldr	r1, [pc, #56]	; (8002e6c <vTask_LCD+0xb0>)
 8002e34:	480a      	ldr	r0, [pc, #40]	; (8002e60 <vTask_LCD+0xa4>)
 8002e36:	f000 f8df 	bl	8002ff8 <LCD_Print>
		vTaskDelay(1000);
 8002e3a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002e3e:	f00c ff81 	bl	800fd44 <vTaskDelay>
		time++;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	3301      	adds	r3, #1
 8002e46:	60fb      	str	r3, [r7, #12]
		HAL_GPIO_TogglePin(USR_LED_1_GPIO_Port, USR_LED_1_Pin);
 8002e48:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002e4c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002e50:	f001 ff84 	bl	8004d5c <HAL_GPIO_TogglePin>
	for(;;){
 8002e54:	e7e6      	b.n	8002e24 <vTask_LCD+0x68>
 8002e56:	bf00      	nop
 8002e58:	200005d0 	.word	0x200005d0
 8002e5c:	080149b0 	.word	0x080149b0
 8002e60:	20000924 	.word	0x20000924
 8002e64:	080149c8 	.word	0x080149c8
 8002e68:	080149d0 	.word	0x080149d0
 8002e6c:	2000092e 	.word	0x2000092e

08002e70 <LCD_Send_Command>:
	}
}

// Fonction d'écriture d'une commande sur l'écran LCD
HAL_StatusTypeDef LCD_Send_Command(LCD_HandleTypeDef *hlcd, uint8_t command) {
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b086      	sub	sp, #24
 8002e74:	af02      	add	r7, sp, #8
 8002e76:	6078      	str	r0, [r7, #4]
 8002e78:	460b      	mov	r3, r1
 8002e7a:	70fb      	strb	r3, [r7, #3]
	uint8_t data[2] = {hlcd->LCD_Command, command};
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	795b      	ldrb	r3, [r3, #5]
 8002e80:	733b      	strb	r3, [r7, #12]
 8002e82:	78fb      	ldrb	r3, [r7, #3]
 8002e84:	737b      	strb	r3, [r7, #13]
	HAL_StatusTypeDef ret;
	if(xSemaphoreTake(xI2CMutex, portMAX_DELAY)==pdTRUE){
 8002e86:	4b13      	ldr	r3, [pc, #76]	; (8002ed4 <LCD_Send_Command+0x64>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002e8e:	4618      	mov	r0, r3
 8002e90:	f00c fbf2 	bl	800f678 <xQueueSemaphoreTake>
 8002e94:	4603      	mov	r3, r0
 8002e96:	2b01      	cmp	r3, #1
 8002e98:	d117      	bne.n	8002eca <LCD_Send_Command+0x5a>
		ret = HAL_I2C_Master_Transmit(hlcd->LCD_hi2c, hlcd->LCD_I2C_addr<<1, data, sizeof(data), HAL_MAX_DELAY);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6818      	ldr	r0, [r3, #0]
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	791b      	ldrb	r3, [r3, #4]
 8002ea2:	b29b      	uxth	r3, r3
 8002ea4:	005b      	lsls	r3, r3, #1
 8002ea6:	b299      	uxth	r1, r3
 8002ea8:	f107 020c 	add.w	r2, r7, #12
 8002eac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002eb0:	9300      	str	r3, [sp, #0]
 8002eb2:	2302      	movs	r3, #2
 8002eb4:	f002 f814 	bl	8004ee0 <HAL_I2C_Master_Transmit>
 8002eb8:	4603      	mov	r3, r0
 8002eba:	73fb      	strb	r3, [r7, #15]
		xSemaphoreGive(xI2CMutex);
 8002ebc:	4b05      	ldr	r3, [pc, #20]	; (8002ed4 <LCD_Send_Command+0x64>)
 8002ebe:	6818      	ldr	r0, [r3, #0]
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	2100      	movs	r1, #0
 8002ec6:	f00c f9f9 	bl	800f2bc <xQueueGenericSend>
	}
	return ret;
 8002eca:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ecc:	4618      	mov	r0, r3
 8002ece:	3710      	adds	r7, #16
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	bd80      	pop	{r7, pc}
 8002ed4:	200005d4 	.word	0x200005d4

08002ed8 <LCD_Send_Data>:

// Fonction d'écriture d'une donnée (caractère) sur l'écran LCD
HAL_StatusTypeDef LCD_Send_Data(LCD_HandleTypeDef *hlcd, uint8_t data) {
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b086      	sub	sp, #24
 8002edc:	af02      	add	r7, sp, #8
 8002ede:	6078      	str	r0, [r7, #4]
 8002ee0:	460b      	mov	r3, r1
 8002ee2:	70fb      	strb	r3, [r7, #3]
	uint8_t data_array[2] = {hlcd->LCD_Data, data};
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	799b      	ldrb	r3, [r3, #6]
 8002ee8:	733b      	strb	r3, [r7, #12]
 8002eea:	78fb      	ldrb	r3, [r7, #3]
 8002eec:	737b      	strb	r3, [r7, #13]
	HAL_StatusTypeDef ret;
	if(xSemaphoreTake(xI2CMutex, portMAX_DELAY)==pdTRUE){
 8002eee:	4b13      	ldr	r3, [pc, #76]	; (8002f3c <LCD_Send_Data+0x64>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	f00c fbbe 	bl	800f678 <xQueueSemaphoreTake>
 8002efc:	4603      	mov	r3, r0
 8002efe:	2b01      	cmp	r3, #1
 8002f00:	d117      	bne.n	8002f32 <LCD_Send_Data+0x5a>
		ret = HAL_I2C_Master_Transmit(hlcd->LCD_hi2c, hlcd->LCD_I2C_addr<<1, data_array, sizeof(data_array), HAL_MAX_DELAY);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6818      	ldr	r0, [r3, #0]
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	791b      	ldrb	r3, [r3, #4]
 8002f0a:	b29b      	uxth	r3, r3
 8002f0c:	005b      	lsls	r3, r3, #1
 8002f0e:	b299      	uxth	r1, r3
 8002f10:	f107 020c 	add.w	r2, r7, #12
 8002f14:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002f18:	9300      	str	r3, [sp, #0]
 8002f1a:	2302      	movs	r3, #2
 8002f1c:	f001 ffe0 	bl	8004ee0 <HAL_I2C_Master_Transmit>
 8002f20:	4603      	mov	r3, r0
 8002f22:	73fb      	strb	r3, [r7, #15]
		xSemaphoreGive(xI2CMutex);
 8002f24:	4b05      	ldr	r3, [pc, #20]	; (8002f3c <LCD_Send_Data+0x64>)
 8002f26:	6818      	ldr	r0, [r3, #0]
 8002f28:	2300      	movs	r3, #0
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	2100      	movs	r1, #0
 8002f2e:	f00c f9c5 	bl	800f2bc <xQueueGenericSend>
	}
	return ret;
 8002f32:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f34:	4618      	mov	r0, r3
 8002f36:	3710      	adds	r7, #16
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	bd80      	pop	{r7, pc}
 8002f3c:	200005d4 	.word	0x200005d4

08002f40 <LCD_Init>:

// Fonction d'initialisation de l'écran LCD
void LCD_Init(LCD_HandleTypeDef *hlcd, I2C_HandleTypeDef *hi2c) {
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b082      	sub	sp, #8
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
 8002f48:	6039      	str	r1, [r7, #0]
	//	int debug;
	//	uint8_t data[2];
	hlcd->LCD_hi2c = hi2c;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	683a      	ldr	r2, [r7, #0]
 8002f4e:	601a      	str	r2, [r3, #0]
	hlcd->LCD_I2C_addr = _LCD_I2C_TXT_ADDR;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	223e      	movs	r2, #62	; 0x3e
 8002f54:	711a      	strb	r2, [r3, #4]
	hlcd->LCD_Command = _LCD_COMMAND;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2280      	movs	r2, #128	; 0x80
 8002f5a:	715a      	strb	r2, [r3, #5]
	hlcd->LCD_Data = _LCD_DATA;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2240      	movs	r2, #64	; 0x40
 8002f60:	719a      	strb	r2, [r3, #6]
	hlcd->LCD_Background_Color[0] = 0;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2200      	movs	r2, #0
 8002f66:	71da      	strb	r2, [r3, #7]
	hlcd->LCD_Background_Color[1] = 255;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	22ff      	movs	r2, #255	; 0xff
 8002f6c:	721a      	strb	r2, [r3, #8]
	hlcd->LCD_Background_Color[2] = 128;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2280      	movs	r2, #128	; 0x80
 8002f72:	725a      	strb	r2, [r3, #9]
	sprintf((char*)hlcd->LCD_Text_Buffer,"");
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	330a      	adds	r3, #10
 8002f78:	491e      	ldr	r1, [pc, #120]	; (8002ff4 <LCD_Init+0xb4>)
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	f00f fa0e 	bl	801239c <siprintf>

	HAL_Delay(50);
 8002f80:	2032      	movs	r0, #50	; 0x32
 8002f82:	f000 fa67 	bl	8003454 <HAL_Delay>
	LCD_Send_Command(hlcd, _LCD_FUNCTIONSET | _LCD_4BITMODE | _LCD_1LINE | _LCD_5x8DOTS);
 8002f86:	2120      	movs	r1, #32
 8002f88:	6878      	ldr	r0, [r7, #4]
 8002f8a:	f7ff ff71 	bl	8002e70 <LCD_Send_Command>
	//	LCD_Send_Command(hlcd, 0x28);
	HAL_Delay(5);
 8002f8e:	2005      	movs	r0, #5
 8002f90:	f000 fa60 	bl	8003454 <HAL_Delay>
	LCD_Send_Command(hlcd, _LCD_FUNCTIONSET | _LCD_4BITMODE | _LCD_1LINE | _LCD_5x8DOTS);
 8002f94:	2120      	movs	r1, #32
 8002f96:	6878      	ldr	r0, [r7, #4]
 8002f98:	f7ff ff6a 	bl	8002e70 <LCD_Send_Command>
	//	LCD_Send_Command(hlcd, 0x28);
	HAL_Delay(1);
 8002f9c:	2001      	movs	r0, #1
 8002f9e:	f000 fa59 	bl	8003454 <HAL_Delay>
	LCD_Send_Command(hlcd, _LCD_FUNCTIONSET | _LCD_4BITMODE | _LCD_1LINE | _LCD_5x8DOTS);
 8002fa2:	2120      	movs	r1, #32
 8002fa4:	6878      	ldr	r0, [r7, #4]
 8002fa6:	f7ff ff63 	bl	8002e70 <LCD_Send_Command>
	//	LCD_Send_Command(hlcd, 0x28);
	HAL_Delay(1);
 8002faa:	2001      	movs	r0, #1
 8002fac:	f000 fa52 	bl	8003454 <HAL_Delay>
	LCD_Send_Command(hlcd, _LCD_FUNCTIONSET | _LCD_4BITMODE | _LCD_1LINE | _LCD_5x8DOTS);
 8002fb0:	2120      	movs	r1, #32
 8002fb2:	6878      	ldr	r0, [r7, #4]
 8002fb4:	f7ff ff5c 	bl	8002e70 <LCD_Send_Command>
	//	LCD_Send_Command(hlcd, 0x28);

	LCD_Send_Command(hlcd, _LCD_DISPLAYCONTROL | _LCD_DISPLAYON | _LCD_CURSORON | _LCD_BLINKON);
 8002fb8:	210f      	movs	r1, #15
 8002fba:	6878      	ldr	r0, [r7, #4]
 8002fbc:	f7ff ff58 	bl	8002e70 <LCD_Send_Command>
	LCD_Send_Command(hlcd, _LCD_CLEARDISPLAY);
 8002fc0:	2101      	movs	r1, #1
 8002fc2:	6878      	ldr	r0, [r7, #4]
 8002fc4:	f7ff ff54 	bl	8002e70 <LCD_Send_Command>
	HAL_Delay(2);
 8002fc8:	2002      	movs	r0, #2
 8002fca:	f000 fa43 	bl	8003454 <HAL_Delay>
	LCD_Send_Command(hlcd, _LCD_ENTRYMODESET | _LCD_ENTRYLEFT | _LCD_ENTRYSHIFTDECREMENT);
 8002fce:	2106      	movs	r1, #6
 8002fd0:	6878      	ldr	r0, [r7, #4]
 8002fd2:	f7ff ff4d 	bl	8002e70 <LCD_Send_Command>
	//	LCD_Send_Command(hlcd, 0x28);
	//	LCD_Send_Command(hlcd, 0x01);
	//	LCD_Send_Command(hlcd, 0x0C);
	//	LCD_Send_Command(hlcd, 0x06);

	LCD_Background_Init(hlcd);
 8002fd6:	6878      	ldr	r0, [r7, #4]
 8002fd8:	f000 f838 	bl	800304c <LCD_Background_Init>
	LCD_Set_Background_Color(hlcd, hlcd->LCD_Background_Color, _DIMMING_HALF);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	3307      	adds	r3, #7
 8002fe0:	2201      	movs	r2, #1
 8002fe2:	4619      	mov	r1, r3
 8002fe4:	6878      	ldr	r0, [r7, #4]
 8002fe6:	f000 f88f 	bl	8003108 <LCD_Set_Background_Color>
}
 8002fea:	bf00      	nop
 8002fec:	3708      	adds	r7, #8
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	bd80      	pop	{r7, pc}
 8002ff2:	bf00      	nop
 8002ff4:	080149e0 	.word	0x080149e0

08002ff8 <LCD_Print>:

void LCD_Clear(LCD_HandleTypeDef *hlcd) {
	LCD_Send_Command(hlcd, _LCD_CLEARDISPLAY);
}

void LCD_Print(LCD_HandleTypeDef *hlcd, uint8_t *message, uint8_t line){
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b086      	sub	sp, #24
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	60f8      	str	r0, [r7, #12]
 8003000:	60b9      	str	r1, [r7, #8]
 8003002:	4613      	mov	r3, r2
 8003004:	71fb      	strb	r3, [r7, #7]
	LCD_Send_Command(hlcd, _ROW_16[line]);
 8003006:	79fb      	ldrb	r3, [r7, #7]
 8003008:	4a0f      	ldr	r2, [pc, #60]	; (8003048 <LCD_Print+0x50>)
 800300a:	5cd3      	ldrb	r3, [r2, r3]
 800300c:	4619      	mov	r1, r3
 800300e:	68f8      	ldr	r0, [r7, #12]
 8003010:	f7ff ff2e 	bl	8002e70 <LCD_Send_Command>
	uint8_t i = 0;
 8003014:	2300      	movs	r3, #0
 8003016:	75fb      	strb	r3, [r7, #23]
	while (message[i] != '\0') {
 8003018:	e00a      	b.n	8003030 <LCD_Print+0x38>
		LCD_Send_Data(hlcd, message[i]);
 800301a:	7dfb      	ldrb	r3, [r7, #23]
 800301c:	68ba      	ldr	r2, [r7, #8]
 800301e:	4413      	add	r3, r2
 8003020:	781b      	ldrb	r3, [r3, #0]
 8003022:	4619      	mov	r1, r3
 8003024:	68f8      	ldr	r0, [r7, #12]
 8003026:	f7ff ff57 	bl	8002ed8 <LCD_Send_Data>
		i++;
 800302a:	7dfb      	ldrb	r3, [r7, #23]
 800302c:	3301      	adds	r3, #1
 800302e:	75fb      	strb	r3, [r7, #23]
	while (message[i] != '\0') {
 8003030:	7dfb      	ldrb	r3, [r7, #23]
 8003032:	68ba      	ldr	r2, [r7, #8]
 8003034:	4413      	add	r3, r2
 8003036:	781b      	ldrb	r3, [r3, #0]
 8003038:	2b00      	cmp	r3, #0
 800303a:	d1ee      	bne.n	800301a <LCD_Print+0x22>
	}
}
 800303c:	bf00      	nop
 800303e:	bf00      	nop
 8003040:	3718      	adds	r7, #24
 8003042:	46bd      	mov	sp, r7
 8003044:	bd80      	pop	{r7, pc}
 8003046:	bf00      	nop
 8003048:	08014a98 	.word	0x08014a98

0800304c <LCD_Background_Init>:

void LCD_Background_Init(LCD_HandleTypeDef *hlcd){
 800304c:	b580      	push	{r7, lr}
 800304e:	b086      	sub	sp, #24
 8003050:	af02      	add	r7, sp, #8
 8003052:	6078      	str	r0, [r7, #4]
	uint8_t data[2];
	if(xSemaphoreTake(xI2CMutex, portMAX_DELAY)==pdTRUE){
 8003054:	4b2b      	ldr	r3, [pc, #172]	; (8003104 <LCD_Background_Init+0xb8>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800305c:	4618      	mov	r0, r3
 800305e:	f00c fb0b 	bl	800f678 <xQueueSemaphoreTake>
 8003062:	4603      	mov	r3, r0
 8003064:	2b01      	cmp	r3, #1
 8003066:	d133      	bne.n	80030d0 <LCD_Background_Init+0x84>
		data[0] = _REG_MODE1;
 8003068:	2300      	movs	r3, #0
 800306a:	723b      	strb	r3, [r7, #8]
		data[1] = 0x00;
 800306c:	2300      	movs	r3, #0
 800306e:	727b      	strb	r3, [r7, #9]
		HAL_I2C_Master_Transmit(hlcd->LCD_hi2c, _LCD_I2C_RGB_ADDR<<1, data, 2, HAL_MAX_DELAY);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6818      	ldr	r0, [r3, #0]
 8003074:	f107 0208 	add.w	r2, r7, #8
 8003078:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800307c:	9300      	str	r3, [sp, #0]
 800307e:	2302      	movs	r3, #2
 8003080:	21c4      	movs	r1, #196	; 0xc4
 8003082:	f001 ff2d 	bl	8004ee0 <HAL_I2C_Master_Transmit>
		data[0] = _REG_OUTPUT;
 8003086:	2308      	movs	r3, #8
 8003088:	723b      	strb	r3, [r7, #8]
		data[1] = 0xFF;
 800308a:	23ff      	movs	r3, #255	; 0xff
 800308c:	727b      	strb	r3, [r7, #9]
		HAL_I2C_Master_Transmit(hlcd->LCD_hi2c, _LCD_I2C_RGB_ADDR<<1, data, 2, HAL_MAX_DELAY);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6818      	ldr	r0, [r3, #0]
 8003092:	f107 0208 	add.w	r2, r7, #8
 8003096:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800309a:	9300      	str	r3, [sp, #0]
 800309c:	2302      	movs	r3, #2
 800309e:	21c4      	movs	r1, #196	; 0xc4
 80030a0:	f001 ff1e 	bl	8004ee0 <HAL_I2C_Master_Transmit>
		data[0] = _REG_MODE2;
 80030a4:	2301      	movs	r3, #1
 80030a6:	723b      	strb	r3, [r7, #8]
		data[1] = 0x20;
 80030a8:	2320      	movs	r3, #32
 80030aa:	727b      	strb	r3, [r7, #9]
		HAL_I2C_Master_Transmit(hlcd->LCD_hi2c, _LCD_I2C_RGB_ADDR<<1, data, 2, HAL_MAX_DELAY);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6818      	ldr	r0, [r3, #0]
 80030b0:	f107 0208 	add.w	r2, r7, #8
 80030b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80030b8:	9300      	str	r3, [sp, #0]
 80030ba:	2302      	movs	r3, #2
 80030bc:	21c4      	movs	r1, #196	; 0xc4
 80030be:	f001 ff0f 	bl	8004ee0 <HAL_I2C_Master_Transmit>
		xSemaphoreGive(xI2CMutex);
 80030c2:	4b10      	ldr	r3, [pc, #64]	; (8003104 <LCD_Background_Init+0xb8>)
 80030c4:	6818      	ldr	r0, [r3, #0]
 80030c6:	2300      	movs	r3, #0
 80030c8:	2200      	movs	r2, #0
 80030ca:	2100      	movs	r1, #0
 80030cc:	f00c f8f6 	bl	800f2bc <xQueueGenericSend>
	}
	for(int blink_idx = 0; blink_idx<10; blink_idx++){
 80030d0:	2300      	movs	r3, #0
 80030d2:	60fb      	str	r3, [r7, #12]
 80030d4:	e00e      	b.n	80030f4 <LCD_Background_Init+0xa8>
		LCD_Set_Background_Color_White(hlcd);
 80030d6:	6878      	ldr	r0, [r7, #4]
 80030d8:	f000 f876 	bl	80031c8 <LCD_Set_Background_Color_White>
		HAL_Delay(50);
 80030dc:	2032      	movs	r0, #50	; 0x32
 80030de:	f000 f9b9 	bl	8003454 <HAL_Delay>
		LCD_Set_Background_Color_Red(hlcd);
 80030e2:	6878      	ldr	r0, [r7, #4]
 80030e4:	f000 f88a 	bl	80031fc <LCD_Set_Background_Color_Red>
		HAL_Delay(50);
 80030e8:	2032      	movs	r0, #50	; 0x32
 80030ea:	f000 f9b3 	bl	8003454 <HAL_Delay>
	for(int blink_idx = 0; blink_idx<10; blink_idx++){
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	3301      	adds	r3, #1
 80030f2:	60fb      	str	r3, [r7, #12]
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	2b09      	cmp	r3, #9
 80030f8:	dded      	ble.n	80030d6 <LCD_Background_Init+0x8a>
	}
}
 80030fa:	bf00      	nop
 80030fc:	bf00      	nop
 80030fe:	3710      	adds	r7, #16
 8003100:	46bd      	mov	sp, r7
 8003102:	bd80      	pop	{r7, pc}
 8003104:	200005d4 	.word	0x200005d4

08003108 <LCD_Set_Background_Color>:

void LCD_Set_Background_Color(LCD_HandleTypeDef *hlcd, uint8_t rgb[3], uint8_t dimming){
 8003108:	b580      	push	{r7, lr}
 800310a:	b088      	sub	sp, #32
 800310c:	af02      	add	r7, sp, #8
 800310e:	60f8      	str	r0, [r7, #12]
 8003110:	60b9      	str	r1, [r7, #8]
 8003112:	4613      	mov	r3, r2
 8003114:	71fb      	strb	r3, [r7, #7]
	uint8_t data[2];
	if(xSemaphoreTake(xI2CMutex, portMAX_DELAY)==pdTRUE){
 8003116:	4b2b      	ldr	r3, [pc, #172]	; (80031c4 <LCD_Set_Background_Color+0xbc>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800311e:	4618      	mov	r0, r3
 8003120:	f00c faaa 	bl	800f678 <xQueueSemaphoreTake>
 8003124:	4603      	mov	r3, r0
 8003126:	2b01      	cmp	r3, #1
 8003128:	d147      	bne.n	80031ba <LCD_Set_Background_Color+0xb2>
		data[0] = 0x04;
 800312a:	2304      	movs	r3, #4
 800312c:	753b      	strb	r3, [r7, #20]
		data[1] = rgb[0]>>dimming;
 800312e:	68bb      	ldr	r3, [r7, #8]
 8003130:	781b      	ldrb	r3, [r3, #0]
 8003132:	461a      	mov	r2, r3
 8003134:	79fb      	ldrb	r3, [r7, #7]
 8003136:	fa42 f303 	asr.w	r3, r2, r3
 800313a:	b2db      	uxtb	r3, r3
 800313c:	757b      	strb	r3, [r7, #21]
		HAL_I2C_Master_Transmit(hlcd->LCD_hi2c, _LCD_I2C_RGB_ADDR<<1, data, 2, HAL_MAX_DELAY);
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	6818      	ldr	r0, [r3, #0]
 8003142:	f107 0214 	add.w	r2, r7, #20
 8003146:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800314a:	9300      	str	r3, [sp, #0]
 800314c:	2302      	movs	r3, #2
 800314e:	21c4      	movs	r1, #196	; 0xc4
 8003150:	f001 fec6 	bl	8004ee0 <HAL_I2C_Master_Transmit>

		data[0] = 0x03;
 8003154:	2303      	movs	r3, #3
 8003156:	753b      	strb	r3, [r7, #20]
		data[1] = rgb[1]>>dimming;
 8003158:	68bb      	ldr	r3, [r7, #8]
 800315a:	3301      	adds	r3, #1
 800315c:	781b      	ldrb	r3, [r3, #0]
 800315e:	461a      	mov	r2, r3
 8003160:	79fb      	ldrb	r3, [r7, #7]
 8003162:	fa42 f303 	asr.w	r3, r2, r3
 8003166:	b2db      	uxtb	r3, r3
 8003168:	757b      	strb	r3, [r7, #21]
		HAL_I2C_Master_Transmit(hlcd->LCD_hi2c, _LCD_I2C_RGB_ADDR<<1, data, 2, HAL_MAX_DELAY);
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	6818      	ldr	r0, [r3, #0]
 800316e:	f107 0214 	add.w	r2, r7, #20
 8003172:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003176:	9300      	str	r3, [sp, #0]
 8003178:	2302      	movs	r3, #2
 800317a:	21c4      	movs	r1, #196	; 0xc4
 800317c:	f001 feb0 	bl	8004ee0 <HAL_I2C_Master_Transmit>

		data[0] = 0x02;
 8003180:	2302      	movs	r3, #2
 8003182:	753b      	strb	r3, [r7, #20]
		data[1] = rgb[2]>>dimming;
 8003184:	68bb      	ldr	r3, [r7, #8]
 8003186:	3302      	adds	r3, #2
 8003188:	781b      	ldrb	r3, [r3, #0]
 800318a:	461a      	mov	r2, r3
 800318c:	79fb      	ldrb	r3, [r7, #7]
 800318e:	fa42 f303 	asr.w	r3, r2, r3
 8003192:	b2db      	uxtb	r3, r3
 8003194:	757b      	strb	r3, [r7, #21]
		HAL_I2C_Master_Transmit(hlcd->LCD_hi2c, _LCD_I2C_RGB_ADDR<<1, data, 2, HAL_MAX_DELAY);
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	6818      	ldr	r0, [r3, #0]
 800319a:	f107 0214 	add.w	r2, r7, #20
 800319e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80031a2:	9300      	str	r3, [sp, #0]
 80031a4:	2302      	movs	r3, #2
 80031a6:	21c4      	movs	r1, #196	; 0xc4
 80031a8:	f001 fe9a 	bl	8004ee0 <HAL_I2C_Master_Transmit>
		xSemaphoreGive(xI2CMutex);
 80031ac:	4b05      	ldr	r3, [pc, #20]	; (80031c4 <LCD_Set_Background_Color+0xbc>)
 80031ae:	6818      	ldr	r0, [r3, #0]
 80031b0:	2300      	movs	r3, #0
 80031b2:	2200      	movs	r2, #0
 80031b4:	2100      	movs	r1, #0
 80031b6:	f00c f881 	bl	800f2bc <xQueueGenericSend>
	}
}
 80031ba:	bf00      	nop
 80031bc:	3718      	adds	r7, #24
 80031be:	46bd      	mov	sp, r7
 80031c0:	bd80      	pop	{r7, pc}
 80031c2:	bf00      	nop
 80031c4:	200005d4 	.word	0x200005d4

080031c8 <LCD_Set_Background_Color_White>:

void LCD_Set_Background_Color_White(LCD_HandleTypeDef *hlcd){
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b084      	sub	sp, #16
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
	uint8_t rgb[3] = _COLOR_WHITE;
 80031d0:	4a09      	ldr	r2, [pc, #36]	; (80031f8 <LCD_Set_Background_Color_White+0x30>)
 80031d2:	f107 030c 	add.w	r3, r7, #12
 80031d6:	6812      	ldr	r2, [r2, #0]
 80031d8:	4611      	mov	r1, r2
 80031da:	8019      	strh	r1, [r3, #0]
 80031dc:	3302      	adds	r3, #2
 80031de:	0c12      	lsrs	r2, r2, #16
 80031e0:	701a      	strb	r2, [r3, #0]
	LCD_Set_Background_Color(hlcd, rgb, _DIMMING_NO);
 80031e2:	f107 030c 	add.w	r3, r7, #12
 80031e6:	2200      	movs	r2, #0
 80031e8:	4619      	mov	r1, r3
 80031ea:	6878      	ldr	r0, [r7, #4]
 80031ec:	f7ff ff8c 	bl	8003108 <LCD_Set_Background_Color>
}
 80031f0:	bf00      	nop
 80031f2:	3710      	adds	r7, #16
 80031f4:	46bd      	mov	sp, r7
 80031f6:	bd80      	pop	{r7, pc}
 80031f8:	080149e4 	.word	0x080149e4

080031fc <LCD_Set_Background_Color_Red>:

void LCD_Set_Background_Color_Red(LCD_HandleTypeDef *hlcd){
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b084      	sub	sp, #16
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
	uint8_t rgb[3] = _COLOR_RED;
 8003204:	4a09      	ldr	r2, [pc, #36]	; (800322c <LCD_Set_Background_Color_Red+0x30>)
 8003206:	f107 030c 	add.w	r3, r7, #12
 800320a:	6812      	ldr	r2, [r2, #0]
 800320c:	4611      	mov	r1, r2
 800320e:	8019      	strh	r1, [r3, #0]
 8003210:	3302      	adds	r3, #2
 8003212:	0c12      	lsrs	r2, r2, #16
 8003214:	701a      	strb	r2, [r3, #0]
	LCD_Set_Background_Color(hlcd, rgb, _DIMMING_NO);
 8003216:	f107 030c 	add.w	r3, r7, #12
 800321a:	2200      	movs	r2, #0
 800321c:	4619      	mov	r1, r3
 800321e:	6878      	ldr	r0, [r7, #4]
 8003220:	f7ff ff72 	bl	8003108 <LCD_Set_Background_Color>
}
 8003224:	bf00      	nop
 8003226:	3710      	adds	r7, #16
 8003228:	46bd      	mov	sp, r7
 800322a:	bd80      	pop	{r7, pc}
 800322c:	080149e8 	.word	0x080149e8

08003230 <vTask_LED>:
 *  Created on: Aug 1, 2023
 *      Author: nicolas
 */
#include "mylibs/led.h"

void vTask_LED(void *pvParameters){
 8003230:	b580      	push	{r7, lr}
 8003232:	b084      	sub	sp, #16
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
	uint8_t led = 0;
 8003238:	2300      	movs	r3, #0
 800323a:	73fb      	strb	r3, [r7, #15]
	printf("Init LED...           ");
 800323c:	4809      	ldr	r0, [pc, #36]	; (8003264 <vTask_LED+0x34>)
 800323e:	f00f f80b 	bl	8012258 <iprintf>
	LED_Init();
 8003242:	f000 f813 	bl	800326c <LED_Init>
	printf(" Done\r\n");
 8003246:	4808      	ldr	r0, [pc, #32]	; (8003268 <vTask_LED+0x38>)
 8003248:	f00f f86c 	bl	8012324 <puts>
	for(;;){
		LED_Write(led);
 800324c:	7bfb      	ldrb	r3, [r7, #15]
 800324e:	4618      	mov	r0, r3
 8003250:	f000 f814 	bl	800327c <LED_Write>
		led++;
 8003254:	7bfb      	ldrb	r3, [r7, #15]
 8003256:	3301      	adds	r3, #1
 8003258:	73fb      	strb	r3, [r7, #15]
		vTaskDelay(500);
 800325a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800325e:	f00c fd71 	bl	800fd44 <vTaskDelay>
	for(;;){
 8003262:	e7f3      	b.n	800324c <vTask_LED+0x1c>
 8003264:	080149f4 	.word	0x080149f4
 8003268:	08014a0c 	.word	0x08014a0c

0800326c <LED_Init>:
	}
}

void LED_Init(){
 800326c:	b480      	push	{r7}
 800326e:	af00      	add	r7, sp, #0

}
 8003270:	bf00      	nop
 8003272:	46bd      	mov	sp, r7
 8003274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003278:	4770      	bx	lr
	...

0800327c <LED_Write>:

void LED_Write(uint8_t leds){
 800327c:	b580      	push	{r7, lr}
 800327e:	b082      	sub	sp, #8
 8003280:	af00      	add	r7, sp, #0
 8003282:	4603      	mov	r3, r0
 8003284:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(USR_LED_1_GPIO_Port, USR_LED_1_Pin, (leds>>0)&1);
 8003286:	79fb      	ldrb	r3, [r7, #7]
 8003288:	f003 0301 	and.w	r3, r3, #1
 800328c:	b2db      	uxtb	r3, r3
 800328e:	461a      	mov	r2, r3
 8003290:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003294:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003298:	f001 fd48 	bl	8004d2c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(USR_LED_2_GPIO_Port, USR_LED_2_Pin, (leds>>1)&1);
 800329c:	79fb      	ldrb	r3, [r7, #7]
 800329e:	085b      	lsrs	r3, r3, #1
 80032a0:	b2db      	uxtb	r3, r3
 80032a2:	f003 0301 	and.w	r3, r3, #1
 80032a6:	b2db      	uxtb	r3, r3
 80032a8:	461a      	mov	r2, r3
 80032aa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80032ae:	480f      	ldr	r0, [pc, #60]	; (80032ec <LED_Write+0x70>)
 80032b0:	f001 fd3c 	bl	8004d2c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(USR_LED_3_GPIO_Port, USR_LED_3_Pin, (leds>>2)&1);
 80032b4:	79fb      	ldrb	r3, [r7, #7]
 80032b6:	089b      	lsrs	r3, r3, #2
 80032b8:	b2db      	uxtb	r3, r3
 80032ba:	f003 0301 	and.w	r3, r3, #1
 80032be:	b2db      	uxtb	r3, r3
 80032c0:	461a      	mov	r2, r3
 80032c2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80032c6:	4809      	ldr	r0, [pc, #36]	; (80032ec <LED_Write+0x70>)
 80032c8:	f001 fd30 	bl	8004d2c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(USR_LED_4_GPIO_Port, USR_LED_4_Pin, (leds>>3)&1);
 80032cc:	79fb      	ldrb	r3, [r7, #7]
 80032ce:	08db      	lsrs	r3, r3, #3
 80032d0:	b2db      	uxtb	r3, r3
 80032d2:	f003 0301 	and.w	r3, r3, #1
 80032d6:	b2db      	uxtb	r3, r3
 80032d8:	461a      	mov	r2, r3
 80032da:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80032de:	4803      	ldr	r0, [pc, #12]	; (80032ec <LED_Write+0x70>)
 80032e0:	f001 fd24 	bl	8004d2c <HAL_GPIO_WritePin>
}
 80032e4:	bf00      	nop
 80032e6:	3708      	adds	r7, #8
 80032e8:	46bd      	mov	sp, r7
 80032ea:	bd80      	pop	{r7, pc}
 80032ec:	48000800 	.word	0x48000800

080032f0 <vTask_RotaryEnc>:
extern SemaphoreHandle_t xUartMutex;

uint8_t value;
uint32_t last_Tick = 0;

void vTask_RotaryEnc(void *pvParameters){
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b086      	sub	sp, #24
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
	TIM_HandleTypeDef* htim = (TIM_HandleTypeDef*) pvParameters;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	613b      	str	r3, [r7, #16]
	uint32_t RotaryEnc_Previous_Value = 0;
 80032fc:	2300      	movs	r3, #0
 80032fe:	617b      	str	r3, [r7, #20]
	uint32_t RotaryEnc_Value = 0;
 8003300:	2300      	movs	r3, #0
 8003302:	60fb      	str	r3, [r7, #12]
	printf("Init Rotary Encoder...");
 8003304:	4818      	ldr	r0, [pc, #96]	; (8003368 <vTask_RotaryEnc+0x78>)
 8003306:	f00e ffa7 	bl	8012258 <iprintf>
	RotaryEnc_Init(htim);
 800330a:	6938      	ldr	r0, [r7, #16]
 800330c:	f000 f836 	bl	800337c <RotaryEnc_Init>
	printf(" Done\r\n");
 8003310:	4816      	ldr	r0, [pc, #88]	; (800336c <vTask_RotaryEnc+0x7c>)
 8003312:	f00f f807 	bl	8012324 <puts>
	for(;;){
		RotaryEnc_Value = __HAL_TIM_GET_COUNTER(htim);
 8003316:	693b      	ldr	r3, [r7, #16]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800331c:	60fb      	str	r3, [r7, #12]

		if(RotaryEnc_Previous_Value != RotaryEnc_Value){
 800331e:	697a      	ldr	r2, [r7, #20]
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	429a      	cmp	r2, r3
 8003324:	d015      	beq.n	8003352 <vTask_RotaryEnc+0x62>
			if(xSemaphoreTake(xUartMutex, portMAX_DELAY) == pdTRUE){
 8003326:	4b12      	ldr	r3, [pc, #72]	; (8003370 <vTask_RotaryEnc+0x80>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800332e:	4618      	mov	r0, r3
 8003330:	f00c f9a2 	bl	800f678 <xQueueSemaphoreTake>
 8003334:	4603      	mov	r3, r0
 8003336:	2b01      	cmp	r3, #1
 8003338:	d109      	bne.n	800334e <vTask_RotaryEnc+0x5e>
				printf("!\r\n");
 800333a:	480e      	ldr	r0, [pc, #56]	; (8003374 <vTask_RotaryEnc+0x84>)
 800333c:	f00e fff2 	bl	8012324 <puts>
				xSemaphoreGive(xUartMutex);
 8003340:	4b0b      	ldr	r3, [pc, #44]	; (8003370 <vTask_RotaryEnc+0x80>)
 8003342:	6818      	ldr	r0, [r3, #0]
 8003344:	2300      	movs	r3, #0
 8003346:	2200      	movs	r2, #0
 8003348:	2100      	movs	r1, #0
 800334a:	f00b ffb7 	bl	800f2bc <xQueueGenericSend>
			}
			RotaryEnc_Previous_Value = RotaryEnc_Value;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	617b      	str	r3, [r7, #20]
		}

		vTaskDelay(1000);
 8003352:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003356:	f00c fcf5 	bl	800fd44 <vTaskDelay>
		HAL_GPIO_TogglePin(USR_LED_2_GPIO_Port, USR_LED_2_Pin);
 800335a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800335e:	4806      	ldr	r0, [pc, #24]	; (8003378 <vTask_RotaryEnc+0x88>)
 8003360:	f001 fcfc 	bl	8004d5c <HAL_GPIO_TogglePin>
		RotaryEnc_Value = __HAL_TIM_GET_COUNTER(htim);
 8003364:	e7d7      	b.n	8003316 <vTask_RotaryEnc+0x26>
 8003366:	bf00      	nop
 8003368:	08014a14 	.word	0x08014a14
 800336c:	08014a2c 	.word	0x08014a2c
 8003370:	200005d0 	.word	0x200005d0
 8003374:	08014a34 	.word	0x08014a34
 8003378:	48000800 	.word	0x48000800

0800337c <RotaryEnc_Init>:
	}
}

void RotaryEnc_Init(TIM_HandleTypeDef* htim){
 800337c:	b580      	push	{r7, lr}
 800337e:	b082      	sub	sp, #8
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
	HAL_TIM_Encoder_Start(htim, TIM_CHANNEL_1);
 8003384:	2100      	movs	r1, #0
 8003386:	6878      	ldr	r0, [r7, #4]
 8003388:	f005 fb73 	bl	8008a72 <HAL_TIM_Encoder_Start>
}
 800338c:	bf00      	nop
 800338e:	3708      	adds	r7, #8
 8003390:	46bd      	mov	sp, r7
 8003392:	bd80      	pop	{r7, pc}

08003394 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003394:	480d      	ldr	r0, [pc, #52]	; (80033cc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003396:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003398:	480d      	ldr	r0, [pc, #52]	; (80033d0 <LoopForever+0x6>)
  ldr r1, =_edata
 800339a:	490e      	ldr	r1, [pc, #56]	; (80033d4 <LoopForever+0xa>)
  ldr r2, =_sidata
 800339c:	4a0e      	ldr	r2, [pc, #56]	; (80033d8 <LoopForever+0xe>)
  movs r3, #0
 800339e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80033a0:	e002      	b.n	80033a8 <LoopCopyDataInit>

080033a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80033a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80033a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80033a6:	3304      	adds	r3, #4

080033a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80033a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80033aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80033ac:	d3f9      	bcc.n	80033a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80033ae:	4a0b      	ldr	r2, [pc, #44]	; (80033dc <LoopForever+0x12>)
  ldr r4, =_ebss
 80033b0:	4c0b      	ldr	r4, [pc, #44]	; (80033e0 <LoopForever+0x16>)
  movs r3, #0
 80033b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80033b4:	e001      	b.n	80033ba <LoopFillZerobss>

080033b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80033b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80033b8:	3204      	adds	r2, #4

080033ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80033ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80033bc:	d3fb      	bcc.n	80033b6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80033be:	f7fe fd9b 	bl	8001ef8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80033c2:	f00f f93b 	bl	801263c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80033c6:	f7fe fa9f 	bl	8001908 <main>

080033ca <LoopForever>:

LoopForever:
    b LoopForever
 80033ca:	e7fe      	b.n	80033ca <LoopForever>
  ldr   r0, =_estack
 80033cc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80033d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80033d4:	20000350 	.word	0x20000350
  ldr r2, =_sidata
 80033d8:	08014e44 	.word	0x08014e44
  ldr r2, =_sbss
 80033dc:	20000350 	.word	0x20000350
  ldr r4, =_ebss
 80033e0:	200035cc 	.word	0x200035cc

080033e4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80033e4:	e7fe      	b.n	80033e4 <ADC1_2_IRQHandler>

080033e6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80033e6:	b580      	push	{r7, lr}
 80033e8:	b082      	sub	sp, #8
 80033ea:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80033ec:	2300      	movs	r3, #0
 80033ee:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80033f0:	2003      	movs	r0, #3
 80033f2:	f001 fa3a 	bl	800486a <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80033f6:	200f      	movs	r0, #15
 80033f8:	f7fe fc18 	bl	8001c2c <HAL_InitTick>
 80033fc:	4603      	mov	r3, r0
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d002      	beq.n	8003408 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003402:	2301      	movs	r3, #1
 8003404:	71fb      	strb	r3, [r7, #7]
 8003406:	e001      	b.n	800340c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003408:	f7fe fbe8 	bl	8001bdc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800340c:	79fb      	ldrb	r3, [r7, #7]

}
 800340e:	4618      	mov	r0, r3
 8003410:	3708      	adds	r7, #8
 8003412:	46bd      	mov	sp, r7
 8003414:	bd80      	pop	{r7, pc}
	...

08003418 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003418:	b480      	push	{r7}
 800341a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800341c:	4b05      	ldr	r3, [pc, #20]	; (8003434 <HAL_IncTick+0x1c>)
 800341e:	681a      	ldr	r2, [r3, #0]
 8003420:	4b05      	ldr	r3, [pc, #20]	; (8003438 <HAL_IncTick+0x20>)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4413      	add	r3, r2
 8003426:	4a03      	ldr	r2, [pc, #12]	; (8003434 <HAL_IncTick+0x1c>)
 8003428:	6013      	str	r3, [r2, #0]
}
 800342a:	bf00      	nop
 800342c:	46bd      	mov	sp, r7
 800342e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003432:	4770      	bx	lr
 8003434:	20000950 	.word	0x20000950
 8003438:	20000008 	.word	0x20000008

0800343c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800343c:	b480      	push	{r7}
 800343e:	af00      	add	r7, sp, #0
  return uwTick;
 8003440:	4b03      	ldr	r3, [pc, #12]	; (8003450 <HAL_GetTick+0x14>)
 8003442:	681b      	ldr	r3, [r3, #0]
}
 8003444:	4618      	mov	r0, r3
 8003446:	46bd      	mov	sp, r7
 8003448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344c:	4770      	bx	lr
 800344e:	bf00      	nop
 8003450:	20000950 	.word	0x20000950

08003454 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b084      	sub	sp, #16
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800345c:	f7ff ffee 	bl	800343c <HAL_GetTick>
 8003460:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800346c:	d004      	beq.n	8003478 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800346e:	4b09      	ldr	r3, [pc, #36]	; (8003494 <HAL_Delay+0x40>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	68fa      	ldr	r2, [r7, #12]
 8003474:	4413      	add	r3, r2
 8003476:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003478:	bf00      	nop
 800347a:	f7ff ffdf 	bl	800343c <HAL_GetTick>
 800347e:	4602      	mov	r2, r0
 8003480:	68bb      	ldr	r3, [r7, #8]
 8003482:	1ad3      	subs	r3, r2, r3
 8003484:	68fa      	ldr	r2, [r7, #12]
 8003486:	429a      	cmp	r2, r3
 8003488:	d8f7      	bhi.n	800347a <HAL_Delay+0x26>
  {
  }
}
 800348a:	bf00      	nop
 800348c:	bf00      	nop
 800348e:	3710      	adds	r7, #16
 8003490:	46bd      	mov	sp, r7
 8003492:	bd80      	pop	{r7, pc}
 8003494:	20000008 	.word	0x20000008

08003498 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003498:	b480      	push	{r7}
 800349a:	b083      	sub	sp, #12
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
 80034a0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	689b      	ldr	r3, [r3, #8]
 80034a6:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	431a      	orrs	r2, r3
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	609a      	str	r2, [r3, #8]
}
 80034b2:	bf00      	nop
 80034b4:	370c      	adds	r7, #12
 80034b6:	46bd      	mov	sp, r7
 80034b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034bc:	4770      	bx	lr

080034be <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80034be:	b480      	push	{r7}
 80034c0:	b083      	sub	sp, #12
 80034c2:	af00      	add	r7, sp, #0
 80034c4:	6078      	str	r0, [r7, #4]
 80034c6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	689b      	ldr	r3, [r3, #8]
 80034cc:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	431a      	orrs	r2, r3
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	609a      	str	r2, [r3, #8]
}
 80034d8:	bf00      	nop
 80034da:	370c      	adds	r7, #12
 80034dc:	46bd      	mov	sp, r7
 80034de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e2:	4770      	bx	lr

080034e4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80034e4:	b480      	push	{r7}
 80034e6:	b083      	sub	sp, #12
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	689b      	ldr	r3, [r3, #8]
 80034f0:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80034f4:	4618      	mov	r0, r3
 80034f6:	370c      	adds	r7, #12
 80034f8:	46bd      	mov	sp, r7
 80034fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fe:	4770      	bx	lr

08003500 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003500:	b480      	push	{r7}
 8003502:	b087      	sub	sp, #28
 8003504:	af00      	add	r7, sp, #0
 8003506:	60f8      	str	r0, [r7, #12]
 8003508:	60b9      	str	r1, [r7, #8]
 800350a:	607a      	str	r2, [r7, #4]
 800350c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	3360      	adds	r3, #96	; 0x60
 8003512:	461a      	mov	r2, r3
 8003514:	68bb      	ldr	r3, [r7, #8]
 8003516:	009b      	lsls	r3, r3, #2
 8003518:	4413      	add	r3, r2
 800351a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800351c:	697b      	ldr	r3, [r7, #20]
 800351e:	681a      	ldr	r2, [r3, #0]
 8003520:	4b08      	ldr	r3, [pc, #32]	; (8003544 <LL_ADC_SetOffset+0x44>)
 8003522:	4013      	ands	r3, r2
 8003524:	687a      	ldr	r2, [r7, #4]
 8003526:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800352a:	683a      	ldr	r2, [r7, #0]
 800352c:	430a      	orrs	r2, r1
 800352e:	4313      	orrs	r3, r2
 8003530:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003534:	697b      	ldr	r3, [r7, #20]
 8003536:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8003538:	bf00      	nop
 800353a:	371c      	adds	r7, #28
 800353c:	46bd      	mov	sp, r7
 800353e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003542:	4770      	bx	lr
 8003544:	03fff000 	.word	0x03fff000

08003548 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8003548:	b480      	push	{r7}
 800354a:	b085      	sub	sp, #20
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
 8003550:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	3360      	adds	r3, #96	; 0x60
 8003556:	461a      	mov	r2, r3
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	009b      	lsls	r3, r3, #2
 800355c:	4413      	add	r3, r2
 800355e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8003568:	4618      	mov	r0, r3
 800356a:	3714      	adds	r7, #20
 800356c:	46bd      	mov	sp, r7
 800356e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003572:	4770      	bx	lr

08003574 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003574:	b480      	push	{r7}
 8003576:	b087      	sub	sp, #28
 8003578:	af00      	add	r7, sp, #0
 800357a:	60f8      	str	r0, [r7, #12]
 800357c:	60b9      	str	r1, [r7, #8]
 800357e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	3360      	adds	r3, #96	; 0x60
 8003584:	461a      	mov	r2, r3
 8003586:	68bb      	ldr	r3, [r7, #8]
 8003588:	009b      	lsls	r3, r3, #2
 800358a:	4413      	add	r3, r2
 800358c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800358e:	697b      	ldr	r3, [r7, #20]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	431a      	orrs	r2, r3
 800359a:	697b      	ldr	r3, [r7, #20]
 800359c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800359e:	bf00      	nop
 80035a0:	371c      	adds	r7, #28
 80035a2:	46bd      	mov	sp, r7
 80035a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a8:	4770      	bx	lr

080035aa <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80035aa:	b480      	push	{r7}
 80035ac:	b087      	sub	sp, #28
 80035ae:	af00      	add	r7, sp, #0
 80035b0:	60f8      	str	r0, [r7, #12]
 80035b2:	60b9      	str	r1, [r7, #8]
 80035b4:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	3360      	adds	r3, #96	; 0x60
 80035ba:	461a      	mov	r2, r3
 80035bc:	68bb      	ldr	r3, [r7, #8]
 80035be:	009b      	lsls	r3, r3, #2
 80035c0:	4413      	add	r3, r2
 80035c2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80035c4:	697b      	ldr	r3, [r7, #20]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	431a      	orrs	r2, r3
 80035d0:	697b      	ldr	r3, [r7, #20]
 80035d2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80035d4:	bf00      	nop
 80035d6:	371c      	adds	r7, #28
 80035d8:	46bd      	mov	sp, r7
 80035da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035de:	4770      	bx	lr

080035e0 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80035e0:	b480      	push	{r7}
 80035e2:	b087      	sub	sp, #28
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	60f8      	str	r0, [r7, #12]
 80035e8:	60b9      	str	r1, [r7, #8]
 80035ea:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	3360      	adds	r3, #96	; 0x60
 80035f0:	461a      	mov	r2, r3
 80035f2:	68bb      	ldr	r3, [r7, #8]
 80035f4:	009b      	lsls	r3, r3, #2
 80035f6:	4413      	add	r3, r2
 80035f8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80035fa:	697b      	ldr	r3, [r7, #20]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	431a      	orrs	r2, r3
 8003606:	697b      	ldr	r3, [r7, #20]
 8003608:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 800360a:	bf00      	nop
 800360c:	371c      	adds	r7, #28
 800360e:	46bd      	mov	sp, r7
 8003610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003614:	4770      	bx	lr

08003616 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8003616:	b480      	push	{r7}
 8003618:	b083      	sub	sp, #12
 800361a:	af00      	add	r7, sp, #0
 800361c:	6078      	str	r0, [r7, #4]
 800361e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	695b      	ldr	r3, [r3, #20]
 8003624:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	431a      	orrs	r2, r3
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	615a      	str	r2, [r3, #20]
}
 8003630:	bf00      	nop
 8003632:	370c      	adds	r7, #12
 8003634:	46bd      	mov	sp, r7
 8003636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363a:	4770      	bx	lr

0800363c <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800363c:	b480      	push	{r7}
 800363e:	b087      	sub	sp, #28
 8003640:	af00      	add	r7, sp, #0
 8003642:	60f8      	str	r0, [r7, #12]
 8003644:	60b9      	str	r1, [r7, #8]
 8003646:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	3330      	adds	r3, #48	; 0x30
 800364c:	461a      	mov	r2, r3
 800364e:	68bb      	ldr	r3, [r7, #8]
 8003650:	0a1b      	lsrs	r3, r3, #8
 8003652:	009b      	lsls	r3, r3, #2
 8003654:	f003 030c 	and.w	r3, r3, #12
 8003658:	4413      	add	r3, r2
 800365a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800365c:	697b      	ldr	r3, [r7, #20]
 800365e:	681a      	ldr	r2, [r3, #0]
 8003660:	68bb      	ldr	r3, [r7, #8]
 8003662:	f003 031f 	and.w	r3, r3, #31
 8003666:	211f      	movs	r1, #31
 8003668:	fa01 f303 	lsl.w	r3, r1, r3
 800366c:	43db      	mvns	r3, r3
 800366e:	401a      	ands	r2, r3
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	0e9b      	lsrs	r3, r3, #26
 8003674:	f003 011f 	and.w	r1, r3, #31
 8003678:	68bb      	ldr	r3, [r7, #8]
 800367a:	f003 031f 	and.w	r3, r3, #31
 800367e:	fa01 f303 	lsl.w	r3, r1, r3
 8003682:	431a      	orrs	r2, r3
 8003684:	697b      	ldr	r3, [r7, #20]
 8003686:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003688:	bf00      	nop
 800368a:	371c      	adds	r7, #28
 800368c:	46bd      	mov	sp, r7
 800368e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003692:	4770      	bx	lr

08003694 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003694:	b480      	push	{r7}
 8003696:	b087      	sub	sp, #28
 8003698:	af00      	add	r7, sp, #0
 800369a:	60f8      	str	r0, [r7, #12]
 800369c:	60b9      	str	r1, [r7, #8]
 800369e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	3314      	adds	r3, #20
 80036a4:	461a      	mov	r2, r3
 80036a6:	68bb      	ldr	r3, [r7, #8]
 80036a8:	0e5b      	lsrs	r3, r3, #25
 80036aa:	009b      	lsls	r3, r3, #2
 80036ac:	f003 0304 	and.w	r3, r3, #4
 80036b0:	4413      	add	r3, r2
 80036b2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80036b4:	697b      	ldr	r3, [r7, #20]
 80036b6:	681a      	ldr	r2, [r3, #0]
 80036b8:	68bb      	ldr	r3, [r7, #8]
 80036ba:	0d1b      	lsrs	r3, r3, #20
 80036bc:	f003 031f 	and.w	r3, r3, #31
 80036c0:	2107      	movs	r1, #7
 80036c2:	fa01 f303 	lsl.w	r3, r1, r3
 80036c6:	43db      	mvns	r3, r3
 80036c8:	401a      	ands	r2, r3
 80036ca:	68bb      	ldr	r3, [r7, #8]
 80036cc:	0d1b      	lsrs	r3, r3, #20
 80036ce:	f003 031f 	and.w	r3, r3, #31
 80036d2:	6879      	ldr	r1, [r7, #4]
 80036d4:	fa01 f303 	lsl.w	r3, r1, r3
 80036d8:	431a      	orrs	r2, r3
 80036da:	697b      	ldr	r3, [r7, #20]
 80036dc:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80036de:	bf00      	nop
 80036e0:	371c      	adds	r7, #28
 80036e2:	46bd      	mov	sp, r7
 80036e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e8:	4770      	bx	lr
	...

080036ec <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80036ec:	b480      	push	{r7}
 80036ee:	b085      	sub	sp, #20
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	60f8      	str	r0, [r7, #12]
 80036f4:	60b9      	str	r1, [r7, #8]
 80036f6:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	4a0f      	ldr	r2, [pc, #60]	; (8003738 <LL_ADC_SetChannelSingleDiff+0x4c>)
 80036fc:	4293      	cmp	r3, r2
 80036fe:	d10a      	bne.n	8003716 <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8003706:	68bb      	ldr	r3, [r7, #8]
 8003708:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800370c:	431a      	orrs	r2, r3
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 8003714:	e00a      	b.n	800372c <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800371c:	68bb      	ldr	r3, [r7, #8]
 800371e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003722:	43db      	mvns	r3, r3
 8003724:	401a      	ands	r2, r3
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 800372c:	bf00      	nop
 800372e:	3714      	adds	r7, #20
 8003730:	46bd      	mov	sp, r7
 8003732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003736:	4770      	bx	lr
 8003738:	407f0000 	.word	0x407f0000

0800373c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800373c:	b480      	push	{r7}
 800373e:	b083      	sub	sp, #12
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	689b      	ldr	r3, [r3, #8]
 8003748:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 800374c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003750:	687a      	ldr	r2, [r7, #4]
 8003752:	6093      	str	r3, [r2, #8]
}
 8003754:	bf00      	nop
 8003756:	370c      	adds	r7, #12
 8003758:	46bd      	mov	sp, r7
 800375a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375e:	4770      	bx	lr

08003760 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8003760:	b480      	push	{r7}
 8003762:	b083      	sub	sp, #12
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	689b      	ldr	r3, [r3, #8]
 800376c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003770:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003774:	d101      	bne.n	800377a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003776:	2301      	movs	r3, #1
 8003778:	e000      	b.n	800377c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800377a:	2300      	movs	r3, #0
}
 800377c:	4618      	mov	r0, r3
 800377e:	370c      	adds	r7, #12
 8003780:	46bd      	mov	sp, r7
 8003782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003786:	4770      	bx	lr

08003788 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003788:	b480      	push	{r7}
 800378a:	b083      	sub	sp, #12
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	689b      	ldr	r3, [r3, #8]
 8003794:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8003798:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800379c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80037a4:	bf00      	nop
 80037a6:	370c      	adds	r7, #12
 80037a8:	46bd      	mov	sp, r7
 80037aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ae:	4770      	bx	lr

080037b0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80037b0:	b480      	push	{r7}
 80037b2:	b083      	sub	sp, #12
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	689b      	ldr	r3, [r3, #8]
 80037bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037c0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80037c4:	d101      	bne.n	80037ca <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80037c6:	2301      	movs	r3, #1
 80037c8:	e000      	b.n	80037cc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80037ca:	2300      	movs	r3, #0
}
 80037cc:	4618      	mov	r0, r3
 80037ce:	370c      	adds	r7, #12
 80037d0:	46bd      	mov	sp, r7
 80037d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d6:	4770      	bx	lr

080037d8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80037d8:	b480      	push	{r7}
 80037da:	b083      	sub	sp, #12
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	689b      	ldr	r3, [r3, #8]
 80037e4:	f003 0301 	and.w	r3, r3, #1
 80037e8:	2b01      	cmp	r3, #1
 80037ea:	d101      	bne.n	80037f0 <LL_ADC_IsEnabled+0x18>
 80037ec:	2301      	movs	r3, #1
 80037ee:	e000      	b.n	80037f2 <LL_ADC_IsEnabled+0x1a>
 80037f0:	2300      	movs	r3, #0
}
 80037f2:	4618      	mov	r0, r3
 80037f4:	370c      	adds	r7, #12
 80037f6:	46bd      	mov	sp, r7
 80037f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fc:	4770      	bx	lr

080037fe <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80037fe:	b480      	push	{r7}
 8003800:	b083      	sub	sp, #12
 8003802:	af00      	add	r7, sp, #0
 8003804:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	689b      	ldr	r3, [r3, #8]
 800380a:	f003 0304 	and.w	r3, r3, #4
 800380e:	2b04      	cmp	r3, #4
 8003810:	d101      	bne.n	8003816 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003812:	2301      	movs	r3, #1
 8003814:	e000      	b.n	8003818 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003816:	2300      	movs	r3, #0
}
 8003818:	4618      	mov	r0, r3
 800381a:	370c      	adds	r7, #12
 800381c:	46bd      	mov	sp, r7
 800381e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003822:	4770      	bx	lr

08003824 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003824:	b480      	push	{r7}
 8003826:	b083      	sub	sp, #12
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	689b      	ldr	r3, [r3, #8]
 8003830:	f003 0308 	and.w	r3, r3, #8
 8003834:	2b08      	cmp	r3, #8
 8003836:	d101      	bne.n	800383c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003838:	2301      	movs	r3, #1
 800383a:	e000      	b.n	800383e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800383c:	2300      	movs	r3, #0
}
 800383e:	4618      	mov	r0, r3
 8003840:	370c      	adds	r7, #12
 8003842:	46bd      	mov	sp, r7
 8003844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003848:	4770      	bx	lr
	...

0800384c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800384c:	b590      	push	{r4, r7, lr}
 800384e:	b089      	sub	sp, #36	; 0x24
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003854:	2300      	movs	r3, #0
 8003856:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003858:	2300      	movs	r3, #0
 800385a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2b00      	cmp	r3, #0
 8003860:	d101      	bne.n	8003866 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003862:	2301      	movs	r3, #1
 8003864:	e1af      	b.n	8003bc6 <HAL_ADC_Init+0x37a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	695b      	ldr	r3, [r3, #20]
 800386a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003870:	2b00      	cmp	r3, #0
 8003872:	d109      	bne.n	8003888 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003874:	6878      	ldr	r0, [r7, #4]
 8003876:	f7fd fcf9 	bl	800126c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2200      	movs	r2, #0
 800387e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2200      	movs	r2, #0
 8003884:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	4618      	mov	r0, r3
 800388e:	f7ff ff67 	bl	8003760 <LL_ADC_IsDeepPowerDownEnabled>
 8003892:	4603      	mov	r3, r0
 8003894:	2b00      	cmp	r3, #0
 8003896:	d004      	beq.n	80038a2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4618      	mov	r0, r3
 800389e:	f7ff ff4d 	bl	800373c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	4618      	mov	r0, r3
 80038a8:	f7ff ff82 	bl	80037b0 <LL_ADC_IsInternalRegulatorEnabled>
 80038ac:	4603      	mov	r3, r0
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d115      	bne.n	80038de <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	4618      	mov	r0, r3
 80038b8:	f7ff ff66 	bl	8003788 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80038bc:	4b9f      	ldr	r3, [pc, #636]	; (8003b3c <HAL_ADC_Init+0x2f0>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	099b      	lsrs	r3, r3, #6
 80038c2:	4a9f      	ldr	r2, [pc, #636]	; (8003b40 <HAL_ADC_Init+0x2f4>)
 80038c4:	fba2 2303 	umull	r2, r3, r2, r3
 80038c8:	099b      	lsrs	r3, r3, #6
 80038ca:	3301      	adds	r3, #1
 80038cc:	005b      	lsls	r3, r3, #1
 80038ce:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80038d0:	e002      	b.n	80038d8 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80038d2:	68bb      	ldr	r3, [r7, #8]
 80038d4:	3b01      	subs	r3, #1
 80038d6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80038d8:	68bb      	ldr	r3, [r7, #8]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d1f9      	bne.n	80038d2 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4618      	mov	r0, r3
 80038e4:	f7ff ff64 	bl	80037b0 <LL_ADC_IsInternalRegulatorEnabled>
 80038e8:	4603      	mov	r3, r0
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d10d      	bne.n	800390a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038f2:	f043 0210 	orr.w	r2, r3, #16
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038fe:	f043 0201 	orr.w	r2, r3, #1
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8003906:	2301      	movs	r3, #1
 8003908:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4618      	mov	r0, r3
 8003910:	f7ff ff75 	bl	80037fe <LL_ADC_REG_IsConversionOngoing>
 8003914:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800391a:	f003 0310 	and.w	r3, r3, #16
 800391e:	2b00      	cmp	r3, #0
 8003920:	f040 8148 	bne.w	8003bb4 <HAL_ADC_Init+0x368>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003924:	697b      	ldr	r3, [r7, #20]
 8003926:	2b00      	cmp	r3, #0
 8003928:	f040 8144 	bne.w	8003bb4 <HAL_ADC_Init+0x368>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003930:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003934:	f043 0202 	orr.w	r2, r3, #2
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4618      	mov	r0, r3
 8003942:	f7ff ff49 	bl	80037d8 <LL_ADC_IsEnabled>
 8003946:	4603      	mov	r3, r0
 8003948:	2b00      	cmp	r3, #0
 800394a:	d141      	bne.n	80039d0 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003954:	d004      	beq.n	8003960 <HAL_ADC_Init+0x114>
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	4a7a      	ldr	r2, [pc, #488]	; (8003b44 <HAL_ADC_Init+0x2f8>)
 800395c:	4293      	cmp	r3, r2
 800395e:	d10f      	bne.n	8003980 <HAL_ADC_Init+0x134>
 8003960:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003964:	f7ff ff38 	bl	80037d8 <LL_ADC_IsEnabled>
 8003968:	4604      	mov	r4, r0
 800396a:	4876      	ldr	r0, [pc, #472]	; (8003b44 <HAL_ADC_Init+0x2f8>)
 800396c:	f7ff ff34 	bl	80037d8 <LL_ADC_IsEnabled>
 8003970:	4603      	mov	r3, r0
 8003972:	4323      	orrs	r3, r4
 8003974:	2b00      	cmp	r3, #0
 8003976:	bf0c      	ite	eq
 8003978:	2301      	moveq	r3, #1
 800397a:	2300      	movne	r3, #0
 800397c:	b2db      	uxtb	r3, r3
 800397e:	e012      	b.n	80039a6 <HAL_ADC_Init+0x15a>
 8003980:	4871      	ldr	r0, [pc, #452]	; (8003b48 <HAL_ADC_Init+0x2fc>)
 8003982:	f7ff ff29 	bl	80037d8 <LL_ADC_IsEnabled>
 8003986:	4604      	mov	r4, r0
 8003988:	4870      	ldr	r0, [pc, #448]	; (8003b4c <HAL_ADC_Init+0x300>)
 800398a:	f7ff ff25 	bl	80037d8 <LL_ADC_IsEnabled>
 800398e:	4603      	mov	r3, r0
 8003990:	431c      	orrs	r4, r3
 8003992:	486f      	ldr	r0, [pc, #444]	; (8003b50 <HAL_ADC_Init+0x304>)
 8003994:	f7ff ff20 	bl	80037d8 <LL_ADC_IsEnabled>
 8003998:	4603      	mov	r3, r0
 800399a:	4323      	orrs	r3, r4
 800399c:	2b00      	cmp	r3, #0
 800399e:	bf0c      	ite	eq
 80039a0:	2301      	moveq	r3, #1
 80039a2:	2300      	movne	r3, #0
 80039a4:	b2db      	uxtb	r3, r3
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d012      	beq.n	80039d0 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80039b2:	d004      	beq.n	80039be <HAL_ADC_Init+0x172>
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	4a62      	ldr	r2, [pc, #392]	; (8003b44 <HAL_ADC_Init+0x2f8>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d101      	bne.n	80039c2 <HAL_ADC_Init+0x176>
 80039be:	4a65      	ldr	r2, [pc, #404]	; (8003b54 <HAL_ADC_Init+0x308>)
 80039c0:	e000      	b.n	80039c4 <HAL_ADC_Init+0x178>
 80039c2:	4a65      	ldr	r2, [pc, #404]	; (8003b58 <HAL_ADC_Init+0x30c>)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	685b      	ldr	r3, [r3, #4]
 80039c8:	4619      	mov	r1, r3
 80039ca:	4610      	mov	r0, r2
 80039cc:	f7ff fd64 	bl	8003498 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	7f5b      	ldrb	r3, [r3, #29]
 80039d4:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80039da:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80039e0:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80039e6:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80039ee:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80039f0:	4313      	orrs	r3, r2
 80039f2:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80039fa:	2b01      	cmp	r3, #1
 80039fc:	d106      	bne.n	8003a0c <HAL_ADC_Init+0x1c0>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a02:	3b01      	subs	r3, #1
 8003a04:	045b      	lsls	r3, r3, #17
 8003a06:	69ba      	ldr	r2, [r7, #24]
 8003a08:	4313      	orrs	r3, r2
 8003a0a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d009      	beq.n	8003a28 <HAL_ADC_Init+0x1dc>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a18:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a20:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003a22:	69ba      	ldr	r2, [r7, #24]
 8003a24:	4313      	orrs	r3, r2
 8003a26:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	68da      	ldr	r2, [r3, #12]
 8003a2e:	4b4b      	ldr	r3, [pc, #300]	; (8003b5c <HAL_ADC_Init+0x310>)
 8003a30:	4013      	ands	r3, r2
 8003a32:	687a      	ldr	r2, [r7, #4]
 8003a34:	6812      	ldr	r2, [r2, #0]
 8003a36:	69b9      	ldr	r1, [r7, #24]
 8003a38:	430b      	orrs	r3, r1
 8003a3a:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	691b      	ldr	r3, [r3, #16]
 8003a42:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	430a      	orrs	r2, r1
 8003a50:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4618      	mov	r0, r3
 8003a58:	f7ff fed1 	bl	80037fe <LL_ADC_REG_IsConversionOngoing>
 8003a5c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	4618      	mov	r0, r3
 8003a64:	f7ff fede 	bl	8003824 <LL_ADC_INJ_IsConversionOngoing>
 8003a68:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003a6a:	693b      	ldr	r3, [r7, #16]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d17f      	bne.n	8003b70 <HAL_ADC_Init+0x324>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d17c      	bne.n	8003b70 <HAL_ADC_Init+0x324>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8003a7a:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003a82:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8003a84:	4313      	orrs	r3, r2
 8003a86:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	68db      	ldr	r3, [r3, #12]
 8003a8e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003a92:	f023 0302 	bic.w	r3, r3, #2
 8003a96:	687a      	ldr	r2, [r7, #4]
 8003a98:	6812      	ldr	r2, [r2, #0]
 8003a9a:	69b9      	ldr	r1, [r7, #24]
 8003a9c:	430b      	orrs	r3, r1
 8003a9e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	691b      	ldr	r3, [r3, #16]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d017      	beq.n	8003ad8 <HAL_ADC_Init+0x28c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	691a      	ldr	r2, [r3, #16]
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003ab6:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003ac0:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003ac4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003ac8:	687a      	ldr	r2, [r7, #4]
 8003aca:	6911      	ldr	r1, [r2, #16]
 8003acc:	687a      	ldr	r2, [r7, #4]
 8003ace:	6812      	ldr	r2, [r2, #0]
 8003ad0:	430b      	orrs	r3, r1
 8003ad2:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8003ad6:	e013      	b.n	8003b00 <HAL_ADC_Init+0x2b4>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	691a      	ldr	r2, [r3, #16]
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003ae6:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003af0:	687a      	ldr	r2, [r7, #4]
 8003af2:	6812      	ldr	r2, [r2, #0]
 8003af4:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003af8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003afc:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003b06:	2b01      	cmp	r3, #1
 8003b08:	d12a      	bne.n	8003b60 <HAL_ADC_Init+0x314>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	691b      	ldr	r3, [r3, #16]
 8003b10:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8003b14:	f023 0304 	bic.w	r3, r3, #4
 8003b18:	687a      	ldr	r2, [r7, #4]
 8003b1a:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8003b1c:	687a      	ldr	r2, [r7, #4]
 8003b1e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003b20:	4311      	orrs	r1, r2
 8003b22:	687a      	ldr	r2, [r7, #4]
 8003b24:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8003b26:	4311      	orrs	r1, r2
 8003b28:	687a      	ldr	r2, [r7, #4]
 8003b2a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003b2c:	430a      	orrs	r2, r1
 8003b2e:	431a      	orrs	r2, r3
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f042 0201 	orr.w	r2, r2, #1
 8003b38:	611a      	str	r2, [r3, #16]
 8003b3a:	e019      	b.n	8003b70 <HAL_ADC_Init+0x324>
 8003b3c:	20000000 	.word	0x20000000
 8003b40:	053e2d63 	.word	0x053e2d63
 8003b44:	50000100 	.word	0x50000100
 8003b48:	50000400 	.word	0x50000400
 8003b4c:	50000500 	.word	0x50000500
 8003b50:	50000600 	.word	0x50000600
 8003b54:	50000300 	.word	0x50000300
 8003b58:	50000700 	.word	0x50000700
 8003b5c:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	691a      	ldr	r2, [r3, #16]
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f022 0201 	bic.w	r2, r2, #1
 8003b6e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	695b      	ldr	r3, [r3, #20]
 8003b74:	2b01      	cmp	r3, #1
 8003b76:	d10c      	bne.n	8003b92 <HAL_ADC_Init+0x346>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b7e:	f023 010f 	bic.w	r1, r3, #15
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6a1b      	ldr	r3, [r3, #32]
 8003b86:	1e5a      	subs	r2, r3, #1
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	430a      	orrs	r2, r1
 8003b8e:	631a      	str	r2, [r3, #48]	; 0x30
 8003b90:	e007      	b.n	8003ba2 <HAL_ADC_Init+0x356>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f022 020f 	bic.w	r2, r2, #15
 8003ba0:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ba6:	f023 0303 	bic.w	r3, r3, #3
 8003baa:	f043 0201 	orr.w	r2, r3, #1
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	65da      	str	r2, [r3, #92]	; 0x5c
 8003bb2:	e007      	b.n	8003bc4 <HAL_ADC_Init+0x378>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bb8:	f043 0210 	orr.w	r2, r3, #16
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003bc0:	2301      	movs	r3, #1
 8003bc2:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003bc4:	7ffb      	ldrb	r3, [r7, #31]
}
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	3724      	adds	r7, #36	; 0x24
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	bd90      	pop	{r4, r7, pc}
 8003bce:	bf00      	nop

08003bd0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b0b6      	sub	sp, #216	; 0xd8
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
 8003bd8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003bda:	2300      	movs	r3, #0
 8003bdc:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003be0:	2300      	movs	r3, #0
 8003be2:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003bea:	2b01      	cmp	r3, #1
 8003bec:	d102      	bne.n	8003bf4 <HAL_ADC_ConfigChannel+0x24>
 8003bee:	2302      	movs	r3, #2
 8003bf0:	f000 bc13 	b.w	800441a <HAL_ADC_ConfigChannel+0x84a>
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2201      	movs	r2, #1
 8003bf8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	4618      	mov	r0, r3
 8003c02:	f7ff fdfc 	bl	80037fe <LL_ADC_REG_IsConversionOngoing>
 8003c06:	4603      	mov	r3, r0
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	f040 83f3 	bne.w	80043f4 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6818      	ldr	r0, [r3, #0]
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	6859      	ldr	r1, [r3, #4]
 8003c16:	683b      	ldr	r3, [r7, #0]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	461a      	mov	r2, r3
 8003c1c:	f7ff fd0e 	bl	800363c <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	4618      	mov	r0, r3
 8003c26:	f7ff fdea 	bl	80037fe <LL_ADC_REG_IsConversionOngoing>
 8003c2a:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	4618      	mov	r0, r3
 8003c34:	f7ff fdf6 	bl	8003824 <LL_ADC_INJ_IsConversionOngoing>
 8003c38:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003c3c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	f040 81d9 	bne.w	8003ff8 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003c46:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	f040 81d4 	bne.w	8003ff8 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	689b      	ldr	r3, [r3, #8]
 8003c54:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003c58:	d10f      	bne.n	8003c7a <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6818      	ldr	r0, [r3, #0]
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	2200      	movs	r2, #0
 8003c64:	4619      	mov	r1, r3
 8003c66:	f7ff fd15 	bl	8003694 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8003c72:	4618      	mov	r0, r3
 8003c74:	f7ff fccf 	bl	8003616 <LL_ADC_SetSamplingTimeCommonConfig>
 8003c78:	e00e      	b.n	8003c98 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6818      	ldr	r0, [r3, #0]
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	6819      	ldr	r1, [r3, #0]
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	689b      	ldr	r3, [r3, #8]
 8003c86:	461a      	mov	r2, r3
 8003c88:	f7ff fd04 	bl	8003694 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	2100      	movs	r1, #0
 8003c92:	4618      	mov	r0, r3
 8003c94:	f7ff fcbf 	bl	8003616 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	695a      	ldr	r2, [r3, #20]
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	68db      	ldr	r3, [r3, #12]
 8003ca2:	08db      	lsrs	r3, r3, #3
 8003ca4:	f003 0303 	and.w	r3, r3, #3
 8003ca8:	005b      	lsls	r3, r3, #1
 8003caa:	fa02 f303 	lsl.w	r3, r2, r3
 8003cae:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	691b      	ldr	r3, [r3, #16]
 8003cb6:	2b04      	cmp	r3, #4
 8003cb8:	d022      	beq.n	8003d00 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6818      	ldr	r0, [r3, #0]
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	6919      	ldr	r1, [r3, #16]
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	681a      	ldr	r2, [r3, #0]
 8003cc6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003cca:	f7ff fc19 	bl	8003500 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6818      	ldr	r0, [r3, #0]
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	6919      	ldr	r1, [r3, #16]
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	699b      	ldr	r3, [r3, #24]
 8003cda:	461a      	mov	r2, r3
 8003cdc:	f7ff fc65 	bl	80035aa <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6818      	ldr	r0, [r3, #0]
 8003ce4:	683b      	ldr	r3, [r7, #0]
 8003ce6:	6919      	ldr	r1, [r3, #16]
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	7f1b      	ldrb	r3, [r3, #28]
 8003cec:	2b01      	cmp	r3, #1
 8003cee:	d102      	bne.n	8003cf6 <HAL_ADC_ConfigChannel+0x126>
 8003cf0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003cf4:	e000      	b.n	8003cf8 <HAL_ADC_ConfigChannel+0x128>
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	461a      	mov	r2, r3
 8003cfa:	f7ff fc71 	bl	80035e0 <LL_ADC_SetOffsetSaturation>
 8003cfe:	e17b      	b.n	8003ff8 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	2100      	movs	r1, #0
 8003d06:	4618      	mov	r0, r3
 8003d08:	f7ff fc1e 	bl	8003548 <LL_ADC_GetOffsetChannel>
 8003d0c:	4603      	mov	r3, r0
 8003d0e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d10a      	bne.n	8003d2c <HAL_ADC_ConfigChannel+0x15c>
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	2100      	movs	r1, #0
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	f7ff fc13 	bl	8003548 <LL_ADC_GetOffsetChannel>
 8003d22:	4603      	mov	r3, r0
 8003d24:	0e9b      	lsrs	r3, r3, #26
 8003d26:	f003 021f 	and.w	r2, r3, #31
 8003d2a:	e01e      	b.n	8003d6a <HAL_ADC_ConfigChannel+0x19a>
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	2100      	movs	r1, #0
 8003d32:	4618      	mov	r0, r3
 8003d34:	f7ff fc08 	bl	8003548 <LL_ADC_GetOffsetChannel>
 8003d38:	4603      	mov	r3, r0
 8003d3a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d3e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003d42:	fa93 f3a3 	rbit	r3, r3
 8003d46:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003d4a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003d4e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003d52:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d101      	bne.n	8003d5e <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8003d5a:	2320      	movs	r3, #32
 8003d5c:	e004      	b.n	8003d68 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8003d5e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003d62:	fab3 f383 	clz	r3, r3
 8003d66:	b2db      	uxtb	r3, r3
 8003d68:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d105      	bne.n	8003d82 <HAL_ADC_ConfigChannel+0x1b2>
 8003d76:	683b      	ldr	r3, [r7, #0]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	0e9b      	lsrs	r3, r3, #26
 8003d7c:	f003 031f 	and.w	r3, r3, #31
 8003d80:	e018      	b.n	8003db4 <HAL_ADC_ConfigChannel+0x1e4>
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d8a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003d8e:	fa93 f3a3 	rbit	r3, r3
 8003d92:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8003d96:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003d9a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8003d9e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d101      	bne.n	8003daa <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8003da6:	2320      	movs	r3, #32
 8003da8:	e004      	b.n	8003db4 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8003daa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003dae:	fab3 f383 	clz	r3, r3
 8003db2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003db4:	429a      	cmp	r2, r3
 8003db6:	d106      	bne.n	8003dc6 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	2100      	movs	r1, #0
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	f7ff fbd7 	bl	8003574 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	2101      	movs	r1, #1
 8003dcc:	4618      	mov	r0, r3
 8003dce:	f7ff fbbb 	bl	8003548 <LL_ADC_GetOffsetChannel>
 8003dd2:	4603      	mov	r3, r0
 8003dd4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d10a      	bne.n	8003df2 <HAL_ADC_ConfigChannel+0x222>
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	2101      	movs	r1, #1
 8003de2:	4618      	mov	r0, r3
 8003de4:	f7ff fbb0 	bl	8003548 <LL_ADC_GetOffsetChannel>
 8003de8:	4603      	mov	r3, r0
 8003dea:	0e9b      	lsrs	r3, r3, #26
 8003dec:	f003 021f 	and.w	r2, r3, #31
 8003df0:	e01e      	b.n	8003e30 <HAL_ADC_ConfigChannel+0x260>
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	2101      	movs	r1, #1
 8003df8:	4618      	mov	r0, r3
 8003dfa:	f7ff fba5 	bl	8003548 <LL_ADC_GetOffsetChannel>
 8003dfe:	4603      	mov	r3, r0
 8003e00:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e04:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003e08:	fa93 f3a3 	rbit	r3, r3
 8003e0c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8003e10:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003e14:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8003e18:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d101      	bne.n	8003e24 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8003e20:	2320      	movs	r3, #32
 8003e22:	e004      	b.n	8003e2e <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8003e24:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003e28:	fab3 f383 	clz	r3, r3
 8003e2c:	b2db      	uxtb	r3, r3
 8003e2e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d105      	bne.n	8003e48 <HAL_ADC_ConfigChannel+0x278>
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	0e9b      	lsrs	r3, r3, #26
 8003e42:	f003 031f 	and.w	r3, r3, #31
 8003e46:	e018      	b.n	8003e7a <HAL_ADC_ConfigChannel+0x2aa>
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e50:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003e54:	fa93 f3a3 	rbit	r3, r3
 8003e58:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8003e5c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003e60:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8003e64:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d101      	bne.n	8003e70 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8003e6c:	2320      	movs	r3, #32
 8003e6e:	e004      	b.n	8003e7a <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8003e70:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003e74:	fab3 f383 	clz	r3, r3
 8003e78:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003e7a:	429a      	cmp	r2, r3
 8003e7c:	d106      	bne.n	8003e8c <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	2200      	movs	r2, #0
 8003e84:	2101      	movs	r1, #1
 8003e86:	4618      	mov	r0, r3
 8003e88:	f7ff fb74 	bl	8003574 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	2102      	movs	r1, #2
 8003e92:	4618      	mov	r0, r3
 8003e94:	f7ff fb58 	bl	8003548 <LL_ADC_GetOffsetChannel>
 8003e98:	4603      	mov	r3, r0
 8003e9a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d10a      	bne.n	8003eb8 <HAL_ADC_ConfigChannel+0x2e8>
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	2102      	movs	r1, #2
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	f7ff fb4d 	bl	8003548 <LL_ADC_GetOffsetChannel>
 8003eae:	4603      	mov	r3, r0
 8003eb0:	0e9b      	lsrs	r3, r3, #26
 8003eb2:	f003 021f 	and.w	r2, r3, #31
 8003eb6:	e01e      	b.n	8003ef6 <HAL_ADC_ConfigChannel+0x326>
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	2102      	movs	r1, #2
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	f7ff fb42 	bl	8003548 <LL_ADC_GetOffsetChannel>
 8003ec4:	4603      	mov	r3, r0
 8003ec6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003eca:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003ece:	fa93 f3a3 	rbit	r3, r3
 8003ed2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8003ed6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003eda:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8003ede:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d101      	bne.n	8003eea <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8003ee6:	2320      	movs	r3, #32
 8003ee8:	e004      	b.n	8003ef4 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8003eea:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003eee:	fab3 f383 	clz	r3, r3
 8003ef2:	b2db      	uxtb	r3, r3
 8003ef4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d105      	bne.n	8003f0e <HAL_ADC_ConfigChannel+0x33e>
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	0e9b      	lsrs	r3, r3, #26
 8003f08:	f003 031f 	and.w	r3, r3, #31
 8003f0c:	e016      	b.n	8003f3c <HAL_ADC_ConfigChannel+0x36c>
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f16:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003f1a:	fa93 f3a3 	rbit	r3, r3
 8003f1e:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8003f20:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003f22:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8003f26:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d101      	bne.n	8003f32 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8003f2e:	2320      	movs	r3, #32
 8003f30:	e004      	b.n	8003f3c <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8003f32:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003f36:	fab3 f383 	clz	r3, r3
 8003f3a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003f3c:	429a      	cmp	r2, r3
 8003f3e:	d106      	bne.n	8003f4e <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	2200      	movs	r2, #0
 8003f46:	2102      	movs	r1, #2
 8003f48:	4618      	mov	r0, r3
 8003f4a:	f7ff fb13 	bl	8003574 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	2103      	movs	r1, #3
 8003f54:	4618      	mov	r0, r3
 8003f56:	f7ff faf7 	bl	8003548 <LL_ADC_GetOffsetChannel>
 8003f5a:	4603      	mov	r3, r0
 8003f5c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d10a      	bne.n	8003f7a <HAL_ADC_ConfigChannel+0x3aa>
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	2103      	movs	r1, #3
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	f7ff faec 	bl	8003548 <LL_ADC_GetOffsetChannel>
 8003f70:	4603      	mov	r3, r0
 8003f72:	0e9b      	lsrs	r3, r3, #26
 8003f74:	f003 021f 	and.w	r2, r3, #31
 8003f78:	e017      	b.n	8003faa <HAL_ADC_ConfigChannel+0x3da>
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	2103      	movs	r1, #3
 8003f80:	4618      	mov	r0, r3
 8003f82:	f7ff fae1 	bl	8003548 <LL_ADC_GetOffsetChannel>
 8003f86:	4603      	mov	r3, r0
 8003f88:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f8a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f8c:	fa93 f3a3 	rbit	r3, r3
 8003f90:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8003f92:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003f94:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8003f96:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d101      	bne.n	8003fa0 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8003f9c:	2320      	movs	r3, #32
 8003f9e:	e003      	b.n	8003fa8 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8003fa0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003fa2:	fab3 f383 	clz	r3, r3
 8003fa6:	b2db      	uxtb	r3, r3
 8003fa8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d105      	bne.n	8003fc2 <HAL_ADC_ConfigChannel+0x3f2>
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	0e9b      	lsrs	r3, r3, #26
 8003fbc:	f003 031f 	and.w	r3, r3, #31
 8003fc0:	e011      	b.n	8003fe6 <HAL_ADC_ConfigChannel+0x416>
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fc8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003fca:	fa93 f3a3 	rbit	r3, r3
 8003fce:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8003fd0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003fd2:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8003fd4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d101      	bne.n	8003fde <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8003fda:	2320      	movs	r3, #32
 8003fdc:	e003      	b.n	8003fe6 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8003fde:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fe0:	fab3 f383 	clz	r3, r3
 8003fe4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003fe6:	429a      	cmp	r2, r3
 8003fe8:	d106      	bne.n	8003ff8 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	2200      	movs	r2, #0
 8003ff0:	2103      	movs	r1, #3
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	f7ff fabe 	bl	8003574 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	f7ff fbeb 	bl	80037d8 <LL_ADC_IsEnabled>
 8004002:	4603      	mov	r3, r0
 8004004:	2b00      	cmp	r3, #0
 8004006:	f040 813d 	bne.w	8004284 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6818      	ldr	r0, [r3, #0]
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	6819      	ldr	r1, [r3, #0]
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	68db      	ldr	r3, [r3, #12]
 8004016:	461a      	mov	r2, r3
 8004018:	f7ff fb68 	bl	80036ec <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	68db      	ldr	r3, [r3, #12]
 8004020:	4aa2      	ldr	r2, [pc, #648]	; (80042ac <HAL_ADC_ConfigChannel+0x6dc>)
 8004022:	4293      	cmp	r3, r2
 8004024:	f040 812e 	bne.w	8004284 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004034:	2b00      	cmp	r3, #0
 8004036:	d10b      	bne.n	8004050 <HAL_ADC_ConfigChannel+0x480>
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	0e9b      	lsrs	r3, r3, #26
 800403e:	3301      	adds	r3, #1
 8004040:	f003 031f 	and.w	r3, r3, #31
 8004044:	2b09      	cmp	r3, #9
 8004046:	bf94      	ite	ls
 8004048:	2301      	movls	r3, #1
 800404a:	2300      	movhi	r3, #0
 800404c:	b2db      	uxtb	r3, r3
 800404e:	e019      	b.n	8004084 <HAL_ADC_ConfigChannel+0x4b4>
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004056:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004058:	fa93 f3a3 	rbit	r3, r3
 800405c:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 800405e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004060:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8004062:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004064:	2b00      	cmp	r3, #0
 8004066:	d101      	bne.n	800406c <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8004068:	2320      	movs	r3, #32
 800406a:	e003      	b.n	8004074 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 800406c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800406e:	fab3 f383 	clz	r3, r3
 8004072:	b2db      	uxtb	r3, r3
 8004074:	3301      	adds	r3, #1
 8004076:	f003 031f 	and.w	r3, r3, #31
 800407a:	2b09      	cmp	r3, #9
 800407c:	bf94      	ite	ls
 800407e:	2301      	movls	r3, #1
 8004080:	2300      	movhi	r3, #0
 8004082:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004084:	2b00      	cmp	r3, #0
 8004086:	d079      	beq.n	800417c <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004090:	2b00      	cmp	r3, #0
 8004092:	d107      	bne.n	80040a4 <HAL_ADC_ConfigChannel+0x4d4>
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	0e9b      	lsrs	r3, r3, #26
 800409a:	3301      	adds	r3, #1
 800409c:	069b      	lsls	r3, r3, #26
 800409e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80040a2:	e015      	b.n	80040d0 <HAL_ADC_ConfigChannel+0x500>
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80040ac:	fa93 f3a3 	rbit	r3, r3
 80040b0:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80040b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80040b4:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80040b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d101      	bne.n	80040c0 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 80040bc:	2320      	movs	r3, #32
 80040be:	e003      	b.n	80040c8 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 80040c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80040c2:	fab3 f383 	clz	r3, r3
 80040c6:	b2db      	uxtb	r3, r3
 80040c8:	3301      	adds	r3, #1
 80040ca:	069b      	lsls	r3, r3, #26
 80040cc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d109      	bne.n	80040f0 <HAL_ADC_ConfigChannel+0x520>
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	0e9b      	lsrs	r3, r3, #26
 80040e2:	3301      	adds	r3, #1
 80040e4:	f003 031f 	and.w	r3, r3, #31
 80040e8:	2101      	movs	r1, #1
 80040ea:	fa01 f303 	lsl.w	r3, r1, r3
 80040ee:	e017      	b.n	8004120 <HAL_ADC_ConfigChannel+0x550>
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80040f8:	fa93 f3a3 	rbit	r3, r3
 80040fc:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80040fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004100:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8004102:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004104:	2b00      	cmp	r3, #0
 8004106:	d101      	bne.n	800410c <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8004108:	2320      	movs	r3, #32
 800410a:	e003      	b.n	8004114 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 800410c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800410e:	fab3 f383 	clz	r3, r3
 8004112:	b2db      	uxtb	r3, r3
 8004114:	3301      	adds	r3, #1
 8004116:	f003 031f 	and.w	r3, r3, #31
 800411a:	2101      	movs	r1, #1
 800411c:	fa01 f303 	lsl.w	r3, r1, r3
 8004120:	ea42 0103 	orr.w	r1, r2, r3
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800412c:	2b00      	cmp	r3, #0
 800412e:	d10a      	bne.n	8004146 <HAL_ADC_ConfigChannel+0x576>
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	0e9b      	lsrs	r3, r3, #26
 8004136:	3301      	adds	r3, #1
 8004138:	f003 021f 	and.w	r2, r3, #31
 800413c:	4613      	mov	r3, r2
 800413e:	005b      	lsls	r3, r3, #1
 8004140:	4413      	add	r3, r2
 8004142:	051b      	lsls	r3, r3, #20
 8004144:	e018      	b.n	8004178 <HAL_ADC_ConfigChannel+0x5a8>
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800414c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800414e:	fa93 f3a3 	rbit	r3, r3
 8004152:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8004154:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004156:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8004158:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800415a:	2b00      	cmp	r3, #0
 800415c:	d101      	bne.n	8004162 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 800415e:	2320      	movs	r3, #32
 8004160:	e003      	b.n	800416a <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8004162:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004164:	fab3 f383 	clz	r3, r3
 8004168:	b2db      	uxtb	r3, r3
 800416a:	3301      	adds	r3, #1
 800416c:	f003 021f 	and.w	r2, r3, #31
 8004170:	4613      	mov	r3, r2
 8004172:	005b      	lsls	r3, r3, #1
 8004174:	4413      	add	r3, r2
 8004176:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004178:	430b      	orrs	r3, r1
 800417a:	e07e      	b.n	800427a <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004184:	2b00      	cmp	r3, #0
 8004186:	d107      	bne.n	8004198 <HAL_ADC_ConfigChannel+0x5c8>
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	0e9b      	lsrs	r3, r3, #26
 800418e:	3301      	adds	r3, #1
 8004190:	069b      	lsls	r3, r3, #26
 8004192:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004196:	e015      	b.n	80041c4 <HAL_ADC_ConfigChannel+0x5f4>
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800419e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041a0:	fa93 f3a3 	rbit	r3, r3
 80041a4:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80041a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041a8:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80041aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d101      	bne.n	80041b4 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 80041b0:	2320      	movs	r3, #32
 80041b2:	e003      	b.n	80041bc <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 80041b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041b6:	fab3 f383 	clz	r3, r3
 80041ba:	b2db      	uxtb	r3, r3
 80041bc:	3301      	adds	r3, #1
 80041be:	069b      	lsls	r3, r3, #26
 80041c0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d109      	bne.n	80041e4 <HAL_ADC_ConfigChannel+0x614>
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	0e9b      	lsrs	r3, r3, #26
 80041d6:	3301      	adds	r3, #1
 80041d8:	f003 031f 	and.w	r3, r3, #31
 80041dc:	2101      	movs	r1, #1
 80041de:	fa01 f303 	lsl.w	r3, r1, r3
 80041e2:	e017      	b.n	8004214 <HAL_ADC_ConfigChannel+0x644>
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041ea:	6a3b      	ldr	r3, [r7, #32]
 80041ec:	fa93 f3a3 	rbit	r3, r3
 80041f0:	61fb      	str	r3, [r7, #28]
  return result;
 80041f2:	69fb      	ldr	r3, [r7, #28]
 80041f4:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80041f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d101      	bne.n	8004200 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 80041fc:	2320      	movs	r3, #32
 80041fe:	e003      	b.n	8004208 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8004200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004202:	fab3 f383 	clz	r3, r3
 8004206:	b2db      	uxtb	r3, r3
 8004208:	3301      	adds	r3, #1
 800420a:	f003 031f 	and.w	r3, r3, #31
 800420e:	2101      	movs	r1, #1
 8004210:	fa01 f303 	lsl.w	r3, r1, r3
 8004214:	ea42 0103 	orr.w	r1, r2, r3
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004220:	2b00      	cmp	r3, #0
 8004222:	d10d      	bne.n	8004240 <HAL_ADC_ConfigChannel+0x670>
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	0e9b      	lsrs	r3, r3, #26
 800422a:	3301      	adds	r3, #1
 800422c:	f003 021f 	and.w	r2, r3, #31
 8004230:	4613      	mov	r3, r2
 8004232:	005b      	lsls	r3, r3, #1
 8004234:	4413      	add	r3, r2
 8004236:	3b1e      	subs	r3, #30
 8004238:	051b      	lsls	r3, r3, #20
 800423a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800423e:	e01b      	b.n	8004278 <HAL_ADC_ConfigChannel+0x6a8>
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004246:	697b      	ldr	r3, [r7, #20]
 8004248:	fa93 f3a3 	rbit	r3, r3
 800424c:	613b      	str	r3, [r7, #16]
  return result;
 800424e:	693b      	ldr	r3, [r7, #16]
 8004250:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004252:	69bb      	ldr	r3, [r7, #24]
 8004254:	2b00      	cmp	r3, #0
 8004256:	d101      	bne.n	800425c <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8004258:	2320      	movs	r3, #32
 800425a:	e003      	b.n	8004264 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 800425c:	69bb      	ldr	r3, [r7, #24]
 800425e:	fab3 f383 	clz	r3, r3
 8004262:	b2db      	uxtb	r3, r3
 8004264:	3301      	adds	r3, #1
 8004266:	f003 021f 	and.w	r2, r3, #31
 800426a:	4613      	mov	r3, r2
 800426c:	005b      	lsls	r3, r3, #1
 800426e:	4413      	add	r3, r2
 8004270:	3b1e      	subs	r3, #30
 8004272:	051b      	lsls	r3, r3, #20
 8004274:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004278:	430b      	orrs	r3, r1
 800427a:	683a      	ldr	r2, [r7, #0]
 800427c:	6892      	ldr	r2, [r2, #8]
 800427e:	4619      	mov	r1, r3
 8004280:	f7ff fa08 	bl	8003694 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	681a      	ldr	r2, [r3, #0]
 8004288:	4b09      	ldr	r3, [pc, #36]	; (80042b0 <HAL_ADC_ConfigChannel+0x6e0>)
 800428a:	4013      	ands	r3, r2
 800428c:	2b00      	cmp	r3, #0
 800428e:	f000 80be 	beq.w	800440e <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800429a:	d004      	beq.n	80042a6 <HAL_ADC_ConfigChannel+0x6d6>
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	4a04      	ldr	r2, [pc, #16]	; (80042b4 <HAL_ADC_ConfigChannel+0x6e4>)
 80042a2:	4293      	cmp	r3, r2
 80042a4:	d10a      	bne.n	80042bc <HAL_ADC_ConfigChannel+0x6ec>
 80042a6:	4b04      	ldr	r3, [pc, #16]	; (80042b8 <HAL_ADC_ConfigChannel+0x6e8>)
 80042a8:	e009      	b.n	80042be <HAL_ADC_ConfigChannel+0x6ee>
 80042aa:	bf00      	nop
 80042ac:	407f0000 	.word	0x407f0000
 80042b0:	80080000 	.word	0x80080000
 80042b4:	50000100 	.word	0x50000100
 80042b8:	50000300 	.word	0x50000300
 80042bc:	4b59      	ldr	r3, [pc, #356]	; (8004424 <HAL_ADC_ConfigChannel+0x854>)
 80042be:	4618      	mov	r0, r3
 80042c0:	f7ff f910 	bl	80034e4 <LL_ADC_GetCommonPathInternalCh>
 80042c4:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	4a56      	ldr	r2, [pc, #344]	; (8004428 <HAL_ADC_ConfigChannel+0x858>)
 80042ce:	4293      	cmp	r3, r2
 80042d0:	d004      	beq.n	80042dc <HAL_ADC_ConfigChannel+0x70c>
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	4a55      	ldr	r2, [pc, #340]	; (800442c <HAL_ADC_ConfigChannel+0x85c>)
 80042d8:	4293      	cmp	r3, r2
 80042da:	d13a      	bne.n	8004352 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80042dc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80042e0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d134      	bne.n	8004352 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80042f0:	d005      	beq.n	80042fe <HAL_ADC_ConfigChannel+0x72e>
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	4a4e      	ldr	r2, [pc, #312]	; (8004430 <HAL_ADC_ConfigChannel+0x860>)
 80042f8:	4293      	cmp	r3, r2
 80042fa:	f040 8085 	bne.w	8004408 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004306:	d004      	beq.n	8004312 <HAL_ADC_ConfigChannel+0x742>
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	4a49      	ldr	r2, [pc, #292]	; (8004434 <HAL_ADC_ConfigChannel+0x864>)
 800430e:	4293      	cmp	r3, r2
 8004310:	d101      	bne.n	8004316 <HAL_ADC_ConfigChannel+0x746>
 8004312:	4a49      	ldr	r2, [pc, #292]	; (8004438 <HAL_ADC_ConfigChannel+0x868>)
 8004314:	e000      	b.n	8004318 <HAL_ADC_ConfigChannel+0x748>
 8004316:	4a43      	ldr	r2, [pc, #268]	; (8004424 <HAL_ADC_ConfigChannel+0x854>)
 8004318:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800431c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004320:	4619      	mov	r1, r3
 8004322:	4610      	mov	r0, r2
 8004324:	f7ff f8cb 	bl	80034be <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004328:	4b44      	ldr	r3, [pc, #272]	; (800443c <HAL_ADC_ConfigChannel+0x86c>)
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	099b      	lsrs	r3, r3, #6
 800432e:	4a44      	ldr	r2, [pc, #272]	; (8004440 <HAL_ADC_ConfigChannel+0x870>)
 8004330:	fba2 2303 	umull	r2, r3, r2, r3
 8004334:	099b      	lsrs	r3, r3, #6
 8004336:	1c5a      	adds	r2, r3, #1
 8004338:	4613      	mov	r3, r2
 800433a:	005b      	lsls	r3, r3, #1
 800433c:	4413      	add	r3, r2
 800433e:	009b      	lsls	r3, r3, #2
 8004340:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004342:	e002      	b.n	800434a <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	3b01      	subs	r3, #1
 8004348:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	2b00      	cmp	r3, #0
 800434e:	d1f9      	bne.n	8004344 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004350:	e05a      	b.n	8004408 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	4a3b      	ldr	r2, [pc, #236]	; (8004444 <HAL_ADC_ConfigChannel+0x874>)
 8004358:	4293      	cmp	r3, r2
 800435a:	d125      	bne.n	80043a8 <HAL_ADC_ConfigChannel+0x7d8>
 800435c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004360:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004364:	2b00      	cmp	r3, #0
 8004366:	d11f      	bne.n	80043a8 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	4a31      	ldr	r2, [pc, #196]	; (8004434 <HAL_ADC_ConfigChannel+0x864>)
 800436e:	4293      	cmp	r3, r2
 8004370:	d104      	bne.n	800437c <HAL_ADC_ConfigChannel+0x7ac>
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	4a34      	ldr	r2, [pc, #208]	; (8004448 <HAL_ADC_ConfigChannel+0x878>)
 8004378:	4293      	cmp	r3, r2
 800437a:	d047      	beq.n	800440c <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004384:	d004      	beq.n	8004390 <HAL_ADC_ConfigChannel+0x7c0>
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	4a2a      	ldr	r2, [pc, #168]	; (8004434 <HAL_ADC_ConfigChannel+0x864>)
 800438c:	4293      	cmp	r3, r2
 800438e:	d101      	bne.n	8004394 <HAL_ADC_ConfigChannel+0x7c4>
 8004390:	4a29      	ldr	r2, [pc, #164]	; (8004438 <HAL_ADC_ConfigChannel+0x868>)
 8004392:	e000      	b.n	8004396 <HAL_ADC_ConfigChannel+0x7c6>
 8004394:	4a23      	ldr	r2, [pc, #140]	; (8004424 <HAL_ADC_ConfigChannel+0x854>)
 8004396:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800439a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800439e:	4619      	mov	r1, r3
 80043a0:	4610      	mov	r0, r2
 80043a2:	f7ff f88c 	bl	80034be <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80043a6:	e031      	b.n	800440c <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	4a27      	ldr	r2, [pc, #156]	; (800444c <HAL_ADC_ConfigChannel+0x87c>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d12d      	bne.n	800440e <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80043b2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80043b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d127      	bne.n	800440e <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	4a1c      	ldr	r2, [pc, #112]	; (8004434 <HAL_ADC_ConfigChannel+0x864>)
 80043c4:	4293      	cmp	r3, r2
 80043c6:	d022      	beq.n	800440e <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80043d0:	d004      	beq.n	80043dc <HAL_ADC_ConfigChannel+0x80c>
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	4a17      	ldr	r2, [pc, #92]	; (8004434 <HAL_ADC_ConfigChannel+0x864>)
 80043d8:	4293      	cmp	r3, r2
 80043da:	d101      	bne.n	80043e0 <HAL_ADC_ConfigChannel+0x810>
 80043dc:	4a16      	ldr	r2, [pc, #88]	; (8004438 <HAL_ADC_ConfigChannel+0x868>)
 80043de:	e000      	b.n	80043e2 <HAL_ADC_ConfigChannel+0x812>
 80043e0:	4a10      	ldr	r2, [pc, #64]	; (8004424 <HAL_ADC_ConfigChannel+0x854>)
 80043e2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80043e6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80043ea:	4619      	mov	r1, r3
 80043ec:	4610      	mov	r0, r2
 80043ee:	f7ff f866 	bl	80034be <LL_ADC_SetCommonPathInternalCh>
 80043f2:	e00c      	b.n	800440e <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043f8:	f043 0220 	orr.w	r2, r3, #32
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8004400:	2301      	movs	r3, #1
 8004402:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8004406:	e002      	b.n	800440e <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004408:	bf00      	nop
 800440a:	e000      	b.n	800440e <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800440c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2200      	movs	r2, #0
 8004412:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8004416:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800441a:	4618      	mov	r0, r3
 800441c:	37d8      	adds	r7, #216	; 0xd8
 800441e:	46bd      	mov	sp, r7
 8004420:	bd80      	pop	{r7, pc}
 8004422:	bf00      	nop
 8004424:	50000700 	.word	0x50000700
 8004428:	c3210000 	.word	0xc3210000
 800442c:	90c00010 	.word	0x90c00010
 8004430:	50000600 	.word	0x50000600
 8004434:	50000100 	.word	0x50000100
 8004438:	50000300 	.word	0x50000300
 800443c:	20000000 	.word	0x20000000
 8004440:	053e2d63 	.word	0x053e2d63
 8004444:	c7520000 	.word	0xc7520000
 8004448:	50000500 	.word	0x50000500
 800444c:	cb840000 	.word	0xcb840000

08004450 <LL_ADC_IsEnabled>:
{
 8004450:	b480      	push	{r7}
 8004452:	b083      	sub	sp, #12
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	689b      	ldr	r3, [r3, #8]
 800445c:	f003 0301 	and.w	r3, r3, #1
 8004460:	2b01      	cmp	r3, #1
 8004462:	d101      	bne.n	8004468 <LL_ADC_IsEnabled+0x18>
 8004464:	2301      	movs	r3, #1
 8004466:	e000      	b.n	800446a <LL_ADC_IsEnabled+0x1a>
 8004468:	2300      	movs	r3, #0
}
 800446a:	4618      	mov	r0, r3
 800446c:	370c      	adds	r7, #12
 800446e:	46bd      	mov	sp, r7
 8004470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004474:	4770      	bx	lr

08004476 <LL_ADC_REG_IsConversionOngoing>:
{
 8004476:	b480      	push	{r7}
 8004478:	b083      	sub	sp, #12
 800447a:	af00      	add	r7, sp, #0
 800447c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	689b      	ldr	r3, [r3, #8]
 8004482:	f003 0304 	and.w	r3, r3, #4
 8004486:	2b04      	cmp	r3, #4
 8004488:	d101      	bne.n	800448e <LL_ADC_REG_IsConversionOngoing+0x18>
 800448a:	2301      	movs	r3, #1
 800448c:	e000      	b.n	8004490 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800448e:	2300      	movs	r3, #0
}
 8004490:	4618      	mov	r0, r3
 8004492:	370c      	adds	r7, #12
 8004494:	46bd      	mov	sp, r7
 8004496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449a:	4770      	bx	lr

0800449c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 800449c:	b590      	push	{r4, r7, lr}
 800449e:	b0a1      	sub	sp, #132	; 0x84
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
 80044a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80044a6:	2300      	movs	r3, #0
 80044a8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80044b2:	2b01      	cmp	r3, #1
 80044b4:	d101      	bne.n	80044ba <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80044b6:	2302      	movs	r3, #2
 80044b8:	e0e7      	b.n	800468a <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	2201      	movs	r2, #1
 80044be:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 80044c2:	2300      	movs	r3, #0
 80044c4:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 80044c6:	2300      	movs	r3, #0
 80044c8:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80044d2:	d102      	bne.n	80044da <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80044d4:	4b6f      	ldr	r3, [pc, #444]	; (8004694 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80044d6:	60bb      	str	r3, [r7, #8]
 80044d8:	e009      	b.n	80044ee <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	4a6e      	ldr	r2, [pc, #440]	; (8004698 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80044e0:	4293      	cmp	r3, r2
 80044e2:	d102      	bne.n	80044ea <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 80044e4:	4b6d      	ldr	r3, [pc, #436]	; (800469c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80044e6:	60bb      	str	r3, [r7, #8]
 80044e8:	e001      	b.n	80044ee <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80044ea:	2300      	movs	r3, #0
 80044ec:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80044ee:	68bb      	ldr	r3, [r7, #8]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d10b      	bne.n	800450c <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044f8:	f043 0220 	orr.w	r2, r3, #32
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2200      	movs	r2, #0
 8004504:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8004508:	2301      	movs	r3, #1
 800450a:	e0be      	b.n	800468a <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 800450c:	68bb      	ldr	r3, [r7, #8]
 800450e:	4618      	mov	r0, r3
 8004510:	f7ff ffb1 	bl	8004476 <LL_ADC_REG_IsConversionOngoing>
 8004514:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	4618      	mov	r0, r3
 800451c:	f7ff ffab 	bl	8004476 <LL_ADC_REG_IsConversionOngoing>
 8004520:	4603      	mov	r3, r0
 8004522:	2b00      	cmp	r3, #0
 8004524:	f040 80a0 	bne.w	8004668 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8004528:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800452a:	2b00      	cmp	r3, #0
 800452c:	f040 809c 	bne.w	8004668 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004538:	d004      	beq.n	8004544 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	4a55      	ldr	r2, [pc, #340]	; (8004694 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004540:	4293      	cmp	r3, r2
 8004542:	d101      	bne.n	8004548 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8004544:	4b56      	ldr	r3, [pc, #344]	; (80046a0 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8004546:	e000      	b.n	800454a <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8004548:	4b56      	ldr	r3, [pc, #344]	; (80046a4 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 800454a:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	2b00      	cmp	r3, #0
 8004552:	d04b      	beq.n	80045ec <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8004554:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004556:	689b      	ldr	r3, [r3, #8]
 8004558:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	6859      	ldr	r1, [r3, #4]
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004566:	035b      	lsls	r3, r3, #13
 8004568:	430b      	orrs	r3, r1
 800456a:	431a      	orrs	r2, r3
 800456c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800456e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004578:	d004      	beq.n	8004584 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	4a45      	ldr	r2, [pc, #276]	; (8004694 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004580:	4293      	cmp	r3, r2
 8004582:	d10f      	bne.n	80045a4 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8004584:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8004588:	f7ff ff62 	bl	8004450 <LL_ADC_IsEnabled>
 800458c:	4604      	mov	r4, r0
 800458e:	4841      	ldr	r0, [pc, #260]	; (8004694 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004590:	f7ff ff5e 	bl	8004450 <LL_ADC_IsEnabled>
 8004594:	4603      	mov	r3, r0
 8004596:	4323      	orrs	r3, r4
 8004598:	2b00      	cmp	r3, #0
 800459a:	bf0c      	ite	eq
 800459c:	2301      	moveq	r3, #1
 800459e:	2300      	movne	r3, #0
 80045a0:	b2db      	uxtb	r3, r3
 80045a2:	e012      	b.n	80045ca <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 80045a4:	483c      	ldr	r0, [pc, #240]	; (8004698 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80045a6:	f7ff ff53 	bl	8004450 <LL_ADC_IsEnabled>
 80045aa:	4604      	mov	r4, r0
 80045ac:	483b      	ldr	r0, [pc, #236]	; (800469c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80045ae:	f7ff ff4f 	bl	8004450 <LL_ADC_IsEnabled>
 80045b2:	4603      	mov	r3, r0
 80045b4:	431c      	orrs	r4, r3
 80045b6:	483c      	ldr	r0, [pc, #240]	; (80046a8 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80045b8:	f7ff ff4a 	bl	8004450 <LL_ADC_IsEnabled>
 80045bc:	4603      	mov	r3, r0
 80045be:	4323      	orrs	r3, r4
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	bf0c      	ite	eq
 80045c4:	2301      	moveq	r3, #1
 80045c6:	2300      	movne	r3, #0
 80045c8:	b2db      	uxtb	r3, r3
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d056      	beq.n	800467c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80045ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80045d0:	689b      	ldr	r3, [r3, #8]
 80045d2:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80045d6:	f023 030f 	bic.w	r3, r3, #15
 80045da:	683a      	ldr	r2, [r7, #0]
 80045dc:	6811      	ldr	r1, [r2, #0]
 80045de:	683a      	ldr	r2, [r7, #0]
 80045e0:	6892      	ldr	r2, [r2, #8]
 80045e2:	430a      	orrs	r2, r1
 80045e4:	431a      	orrs	r2, r3
 80045e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80045e8:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80045ea:	e047      	b.n	800467c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80045ec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80045ee:	689b      	ldr	r3, [r3, #8]
 80045f0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80045f4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80045f6:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004600:	d004      	beq.n	800460c <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	4a23      	ldr	r2, [pc, #140]	; (8004694 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004608:	4293      	cmp	r3, r2
 800460a:	d10f      	bne.n	800462c <HAL_ADCEx_MultiModeConfigChannel+0x190>
 800460c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8004610:	f7ff ff1e 	bl	8004450 <LL_ADC_IsEnabled>
 8004614:	4604      	mov	r4, r0
 8004616:	481f      	ldr	r0, [pc, #124]	; (8004694 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004618:	f7ff ff1a 	bl	8004450 <LL_ADC_IsEnabled>
 800461c:	4603      	mov	r3, r0
 800461e:	4323      	orrs	r3, r4
 8004620:	2b00      	cmp	r3, #0
 8004622:	bf0c      	ite	eq
 8004624:	2301      	moveq	r3, #1
 8004626:	2300      	movne	r3, #0
 8004628:	b2db      	uxtb	r3, r3
 800462a:	e012      	b.n	8004652 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 800462c:	481a      	ldr	r0, [pc, #104]	; (8004698 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800462e:	f7ff ff0f 	bl	8004450 <LL_ADC_IsEnabled>
 8004632:	4604      	mov	r4, r0
 8004634:	4819      	ldr	r0, [pc, #100]	; (800469c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8004636:	f7ff ff0b 	bl	8004450 <LL_ADC_IsEnabled>
 800463a:	4603      	mov	r3, r0
 800463c:	431c      	orrs	r4, r3
 800463e:	481a      	ldr	r0, [pc, #104]	; (80046a8 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8004640:	f7ff ff06 	bl	8004450 <LL_ADC_IsEnabled>
 8004644:	4603      	mov	r3, r0
 8004646:	4323      	orrs	r3, r4
 8004648:	2b00      	cmp	r3, #0
 800464a:	bf0c      	ite	eq
 800464c:	2301      	moveq	r3, #1
 800464e:	2300      	movne	r3, #0
 8004650:	b2db      	uxtb	r3, r3
 8004652:	2b00      	cmp	r3, #0
 8004654:	d012      	beq.n	800467c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004656:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004658:	689b      	ldr	r3, [r3, #8]
 800465a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800465e:	f023 030f 	bic.w	r3, r3, #15
 8004662:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8004664:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004666:	e009      	b.n	800467c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800466c:	f043 0220 	orr.w	r2, r3, #32
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8004674:	2301      	movs	r3, #1
 8004676:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800467a:	e000      	b.n	800467e <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800467c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	2200      	movs	r2, #0
 8004682:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8004686:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800468a:	4618      	mov	r0, r3
 800468c:	3784      	adds	r7, #132	; 0x84
 800468e:	46bd      	mov	sp, r7
 8004690:	bd90      	pop	{r4, r7, pc}
 8004692:	bf00      	nop
 8004694:	50000100 	.word	0x50000100
 8004698:	50000400 	.word	0x50000400
 800469c:	50000500 	.word	0x50000500
 80046a0:	50000300 	.word	0x50000300
 80046a4:	50000700 	.word	0x50000700
 80046a8:	50000600 	.word	0x50000600

080046ac <HAL_CORDIC_Init>:
  * @brief  Initialize the CORDIC peripheral and the associated handle.
  * @param  hcordic pointer to a CORDIC_HandleTypeDef structure.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CORDIC_Init(CORDIC_HandleTypeDef *hcordic)
{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b082      	sub	sp, #8
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
  /* Check the CORDIC handle allocation */
  if (hcordic == NULL)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d101      	bne.n	80046be <HAL_CORDIC_Init+0x12>
  {
    /* Return error status */
    return HAL_ERROR;
 80046ba:	2301      	movs	r3, #1
 80046bc:	e023      	b.n	8004706 <HAL_CORDIC_Init+0x5a>

    /* Initialize the low level hardware */
    hcordic->MspInitCallback(hcordic);
  }
#else
  if (hcordic->State == HAL_CORDIC_STATE_RESET)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80046c4:	b2db      	uxtb	r3, r3
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d106      	bne.n	80046d8 <HAL_CORDIC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hcordic->Lock = HAL_UNLOCKED;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	2200      	movs	r2, #0
 80046ce:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize the low level hardware */
    HAL_CORDIC_MspInit(hcordic);
 80046d2:	6878      	ldr	r0, [r7, #4]
 80046d4:	f7fc ff3a 	bl	800154c <HAL_CORDIC_MspInit>
  }
#endif /* (USE_HAL_CORDIC_REGISTER_CALLBACKS) */

  /* Set CORDIC error code to none */
  hcordic->ErrorCode = HAL_CORDIC_ERROR_NONE;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2200      	movs	r2, #0
 80046dc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Reset pInBuff and pOutBuff */
  hcordic->pInBuff = NULL;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	2200      	movs	r2, #0
 80046e2:	605a      	str	r2, [r3, #4]
  hcordic->pOutBuff = NULL;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2200      	movs	r2, #0
 80046e8:	609a      	str	r2, [r3, #8]

  /* Reset NbCalcToOrder and NbCalcToGet */
  hcordic->NbCalcToOrder = 0U;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	2200      	movs	r2, #0
 80046ee:	60da      	str	r2, [r3, #12]
  hcordic->NbCalcToGet = 0U;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2200      	movs	r2, #0
 80046f4:	611a      	str	r2, [r3, #16]

  /* Reset DMADirection */
  hcordic->DMADirection = CORDIC_DMA_DIR_NONE;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2200      	movs	r2, #0
 80046fa:	615a      	str	r2, [r3, #20]

  /* Change CORDIC peripheral state */
  hcordic->State = HAL_CORDIC_STATE_READY;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2201      	movs	r2, #1
 8004700:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Return function status */
  return HAL_OK;
 8004704:	2300      	movs	r3, #0
}
 8004706:	4618      	mov	r0, r3
 8004708:	3708      	adds	r7, #8
 800470a:	46bd      	mov	sp, r7
 800470c:	bd80      	pop	{r7, pc}
	...

08004710 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004710:	b480      	push	{r7}
 8004712:	b085      	sub	sp, #20
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	f003 0307 	and.w	r3, r3, #7
 800471e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004720:	4b0c      	ldr	r3, [pc, #48]	; (8004754 <__NVIC_SetPriorityGrouping+0x44>)
 8004722:	68db      	ldr	r3, [r3, #12]
 8004724:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004726:	68ba      	ldr	r2, [r7, #8]
 8004728:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800472c:	4013      	ands	r3, r2
 800472e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004734:	68bb      	ldr	r3, [r7, #8]
 8004736:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004738:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800473c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004740:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004742:	4a04      	ldr	r2, [pc, #16]	; (8004754 <__NVIC_SetPriorityGrouping+0x44>)
 8004744:	68bb      	ldr	r3, [r7, #8]
 8004746:	60d3      	str	r3, [r2, #12]
}
 8004748:	bf00      	nop
 800474a:	3714      	adds	r7, #20
 800474c:	46bd      	mov	sp, r7
 800474e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004752:	4770      	bx	lr
 8004754:	e000ed00 	.word	0xe000ed00

08004758 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004758:	b480      	push	{r7}
 800475a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800475c:	4b04      	ldr	r3, [pc, #16]	; (8004770 <__NVIC_GetPriorityGrouping+0x18>)
 800475e:	68db      	ldr	r3, [r3, #12]
 8004760:	0a1b      	lsrs	r3, r3, #8
 8004762:	f003 0307 	and.w	r3, r3, #7
}
 8004766:	4618      	mov	r0, r3
 8004768:	46bd      	mov	sp, r7
 800476a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476e:	4770      	bx	lr
 8004770:	e000ed00 	.word	0xe000ed00

08004774 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004774:	b480      	push	{r7}
 8004776:	b083      	sub	sp, #12
 8004778:	af00      	add	r7, sp, #0
 800477a:	4603      	mov	r3, r0
 800477c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800477e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004782:	2b00      	cmp	r3, #0
 8004784:	db0b      	blt.n	800479e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004786:	79fb      	ldrb	r3, [r7, #7]
 8004788:	f003 021f 	and.w	r2, r3, #31
 800478c:	4907      	ldr	r1, [pc, #28]	; (80047ac <__NVIC_EnableIRQ+0x38>)
 800478e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004792:	095b      	lsrs	r3, r3, #5
 8004794:	2001      	movs	r0, #1
 8004796:	fa00 f202 	lsl.w	r2, r0, r2
 800479a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800479e:	bf00      	nop
 80047a0:	370c      	adds	r7, #12
 80047a2:	46bd      	mov	sp, r7
 80047a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a8:	4770      	bx	lr
 80047aa:	bf00      	nop
 80047ac:	e000e100 	.word	0xe000e100

080047b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80047b0:	b480      	push	{r7}
 80047b2:	b083      	sub	sp, #12
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	4603      	mov	r3, r0
 80047b8:	6039      	str	r1, [r7, #0]
 80047ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80047bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	db0a      	blt.n	80047da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	b2da      	uxtb	r2, r3
 80047c8:	490c      	ldr	r1, [pc, #48]	; (80047fc <__NVIC_SetPriority+0x4c>)
 80047ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047ce:	0112      	lsls	r2, r2, #4
 80047d0:	b2d2      	uxtb	r2, r2
 80047d2:	440b      	add	r3, r1
 80047d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80047d8:	e00a      	b.n	80047f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	b2da      	uxtb	r2, r3
 80047de:	4908      	ldr	r1, [pc, #32]	; (8004800 <__NVIC_SetPriority+0x50>)
 80047e0:	79fb      	ldrb	r3, [r7, #7]
 80047e2:	f003 030f 	and.w	r3, r3, #15
 80047e6:	3b04      	subs	r3, #4
 80047e8:	0112      	lsls	r2, r2, #4
 80047ea:	b2d2      	uxtb	r2, r2
 80047ec:	440b      	add	r3, r1
 80047ee:	761a      	strb	r2, [r3, #24]
}
 80047f0:	bf00      	nop
 80047f2:	370c      	adds	r7, #12
 80047f4:	46bd      	mov	sp, r7
 80047f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fa:	4770      	bx	lr
 80047fc:	e000e100 	.word	0xe000e100
 8004800:	e000ed00 	.word	0xe000ed00

08004804 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004804:	b480      	push	{r7}
 8004806:	b089      	sub	sp, #36	; 0x24
 8004808:	af00      	add	r7, sp, #0
 800480a:	60f8      	str	r0, [r7, #12]
 800480c:	60b9      	str	r1, [r7, #8]
 800480e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	f003 0307 	and.w	r3, r3, #7
 8004816:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004818:	69fb      	ldr	r3, [r7, #28]
 800481a:	f1c3 0307 	rsb	r3, r3, #7
 800481e:	2b04      	cmp	r3, #4
 8004820:	bf28      	it	cs
 8004822:	2304      	movcs	r3, #4
 8004824:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004826:	69fb      	ldr	r3, [r7, #28]
 8004828:	3304      	adds	r3, #4
 800482a:	2b06      	cmp	r3, #6
 800482c:	d902      	bls.n	8004834 <NVIC_EncodePriority+0x30>
 800482e:	69fb      	ldr	r3, [r7, #28]
 8004830:	3b03      	subs	r3, #3
 8004832:	e000      	b.n	8004836 <NVIC_EncodePriority+0x32>
 8004834:	2300      	movs	r3, #0
 8004836:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004838:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800483c:	69bb      	ldr	r3, [r7, #24]
 800483e:	fa02 f303 	lsl.w	r3, r2, r3
 8004842:	43da      	mvns	r2, r3
 8004844:	68bb      	ldr	r3, [r7, #8]
 8004846:	401a      	ands	r2, r3
 8004848:	697b      	ldr	r3, [r7, #20]
 800484a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800484c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004850:	697b      	ldr	r3, [r7, #20]
 8004852:	fa01 f303 	lsl.w	r3, r1, r3
 8004856:	43d9      	mvns	r1, r3
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800485c:	4313      	orrs	r3, r2
         );
}
 800485e:	4618      	mov	r0, r3
 8004860:	3724      	adds	r7, #36	; 0x24
 8004862:	46bd      	mov	sp, r7
 8004864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004868:	4770      	bx	lr

0800486a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800486a:	b580      	push	{r7, lr}
 800486c:	b082      	sub	sp, #8
 800486e:	af00      	add	r7, sp, #0
 8004870:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004872:	6878      	ldr	r0, [r7, #4]
 8004874:	f7ff ff4c 	bl	8004710 <__NVIC_SetPriorityGrouping>
}
 8004878:	bf00      	nop
 800487a:	3708      	adds	r7, #8
 800487c:	46bd      	mov	sp, r7
 800487e:	bd80      	pop	{r7, pc}

08004880 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004880:	b580      	push	{r7, lr}
 8004882:	b086      	sub	sp, #24
 8004884:	af00      	add	r7, sp, #0
 8004886:	4603      	mov	r3, r0
 8004888:	60b9      	str	r1, [r7, #8]
 800488a:	607a      	str	r2, [r7, #4]
 800488c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800488e:	f7ff ff63 	bl	8004758 <__NVIC_GetPriorityGrouping>
 8004892:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004894:	687a      	ldr	r2, [r7, #4]
 8004896:	68b9      	ldr	r1, [r7, #8]
 8004898:	6978      	ldr	r0, [r7, #20]
 800489a:	f7ff ffb3 	bl	8004804 <NVIC_EncodePriority>
 800489e:	4602      	mov	r2, r0
 80048a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80048a4:	4611      	mov	r1, r2
 80048a6:	4618      	mov	r0, r3
 80048a8:	f7ff ff82 	bl	80047b0 <__NVIC_SetPriority>
}
 80048ac:	bf00      	nop
 80048ae:	3718      	adds	r7, #24
 80048b0:	46bd      	mov	sp, r7
 80048b2:	bd80      	pop	{r7, pc}

080048b4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80048b4:	b580      	push	{r7, lr}
 80048b6:	b082      	sub	sp, #8
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	4603      	mov	r3, r0
 80048bc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80048be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048c2:	4618      	mov	r0, r3
 80048c4:	f7ff ff56 	bl	8004774 <__NVIC_EnableIRQ>
}
 80048c8:	bf00      	nop
 80048ca:	3708      	adds	r7, #8
 80048cc:	46bd      	mov	sp, r7
 80048ce:	bd80      	pop	{r7, pc}

080048d0 <HAL_FMAC_Init>:
  * @brief  Initialize the FMAC peripheral and the associated handle.
  * @param  hfmac pointer to a FMAC_HandleTypeDef structure.
  * @retval HAL_StatusTypeDef HAL status
  */
HAL_StatusTypeDef HAL_FMAC_Init(FMAC_HandleTypeDef *hfmac)
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	b084      	sub	sp, #16
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the FMAC handle allocation */
  if (hfmac == NULL)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d101      	bne.n	80048e2 <HAL_FMAC_Init+0x12>
  {
    return HAL_ERROR;
 80048de:	2301      	movs	r3, #1
 80048e0:	e033      	b.n	800494a <HAL_FMAC_Init+0x7a>
  }

  /* Check the instance */
  assert_param(IS_FMAC_ALL_INSTANCE(hfmac->Instance));

  if (hfmac->State == HAL_FMAC_STATE_RESET)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80048e8:	b2db      	uxtb	r3, r3
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d106      	bne.n	80048fc <HAL_FMAC_Init+0x2c>
  {
    /* Initialize lock resource */
    hfmac->Lock = HAL_UNLOCKED;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2200      	movs	r2, #0
 80048f2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Init the low level hardware */
    hfmac->MspInitCallback(hfmac);
#else
    /* Init the low level hardware */
    HAL_FMAC_MspInit(hfmac);
 80048f6:	6878      	ldr	r0, [r7, #4]
 80048f8:	f7fc fe5c 	bl	80015b4 <HAL_FMAC_MspInit>
#endif /* USE_HAL_FMAC_REGISTER_CALLBACKS */
  }

  /* Reset pInput and pOutput */
  hfmac->FilterParam = 0U;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2200      	movs	r2, #0
 8004900:	605a      	str	r2, [r3, #4]
  FMAC_ResetDataPointers(hfmac);
 8004902:	6878      	ldr	r0, [r7, #4]
 8004904:	f000 f854 	bl	80049b0 <FMAC_ResetDataPointers>

  /* Reset FMAC unit (internal pointers) */
  if (FMAC_Reset(hfmac) == HAL_ERROR)
 8004908:	6878      	ldr	r0, [r7, #4]
 800490a:	f000 f822 	bl	8004952 <FMAC_Reset>
 800490e:	4603      	mov	r3, r0
 8004910:	2b01      	cmp	r3, #1
 8004912:	d10c      	bne.n	800492e <HAL_FMAC_Init+0x5e>
  {
    /* Update FMAC error code and FMAC peripheral state */
    hfmac->ErrorCode |= HAL_FMAC_ERROR_RESET;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004918:	f043 0210 	orr.w	r2, r3, #16
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	635a      	str	r2, [r3, #52]	; 0x34
    hfmac->State = HAL_FMAC_STATE_TIMEOUT;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	22a0      	movs	r2, #160	; 0xa0
 8004924:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

    status = HAL_ERROR;
 8004928:	2301      	movs	r3, #1
 800492a:	73fb      	strb	r3, [r7, #15]
 800492c:	e008      	b.n	8004940 <HAL_FMAC_Init+0x70>
  }
  else
  {
    /* Update FMAC error code and FMAC peripheral state */
    hfmac->ErrorCode = HAL_FMAC_ERROR_NONE;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2200      	movs	r2, #0
 8004932:	635a      	str	r2, [r3, #52]	; 0x34
    hfmac->State = HAL_FMAC_STATE_READY;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2220      	movs	r2, #32
 8004938:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

    status = HAL_OK;
 800493c:	2300      	movs	r3, #0
 800493e:	73fb      	strb	r3, [r7, #15]
  }

  __HAL_UNLOCK(hfmac);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2200      	movs	r2, #0
 8004944:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 8004948:	7bfb      	ldrb	r3, [r7, #15]
}
 800494a:	4618      	mov	r0, r3
 800494c:	3710      	adds	r7, #16
 800494e:	46bd      	mov	sp, r7
 8004950:	bd80      	pop	{r7, pc}

08004952 <FMAC_Reset>:
  * @brief  Perform a reset of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval HAL_StatusTypeDef HAL status
  */
static HAL_StatusTypeDef FMAC_Reset(FMAC_HandleTypeDef *hfmac)
{
 8004952:	b580      	push	{r7, lr}
 8004954:	b084      	sub	sp, #16
 8004956:	af00      	add	r7, sp, #0
 8004958:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800495a:	f7fe fd6f 	bl	800343c <HAL_GetTick>
 800495e:	60f8      	str	r0, [r7, #12]

  /* Perform the reset */
  SET_BIT(hfmac->Instance->CR, FMAC_CR_RESET);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	691a      	ldr	r2, [r3, #16]
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800496e:	611a      	str	r2, [r3, #16]

  /* Wait until flag is reset */
  while (READ_BIT(hfmac->Instance->CR, FMAC_CR_RESET) != 0U)
 8004970:	e00f      	b.n	8004992 <FMAC_Reset+0x40>
  {
    if ((HAL_GetTick() - tickstart) > HAL_FMAC_RESET_TIMEOUT_VALUE)
 8004972:	f7fe fd63 	bl	800343c <HAL_GetTick>
 8004976:	4602      	mov	r2, r0
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	1ad3      	subs	r3, r2, r3
 800497c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004980:	d907      	bls.n	8004992 <FMAC_Reset+0x40>
    {
      hfmac->ErrorCode |= HAL_FMAC_ERROR_TIMEOUT;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004986:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800498e:	2301      	movs	r3, #1
 8004990:	e00a      	b.n	80049a8 <FMAC_Reset+0x56>
  while (READ_BIT(hfmac->Instance->CR, FMAC_CR_RESET) != 0U)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	691b      	ldr	r3, [r3, #16]
 8004998:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800499c:	2b00      	cmp	r3, #0
 800499e:	d1e8      	bne.n	8004972 <FMAC_Reset+0x20>
    }
  }

  hfmac->ErrorCode = HAL_FMAC_ERROR_NONE;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2200      	movs	r2, #0
 80049a4:	635a      	str	r2, [r3, #52]	; 0x34
  return HAL_OK;
 80049a6:	2300      	movs	r3, #0
}
 80049a8:	4618      	mov	r0, r3
 80049aa:	3710      	adds	r7, #16
 80049ac:	46bd      	mov	sp, r7
 80049ae:	bd80      	pop	{r7, pc}

080049b0 <FMAC_ResetDataPointers>:
  * @brief  Reset the data pointers of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval None
  */
static void FMAC_ResetDataPointers(FMAC_HandleTypeDef *hfmac)
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b082      	sub	sp, #8
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
  FMAC_ResetInputStateAndDataPointers(hfmac);
 80049b8:	6878      	ldr	r0, [r7, #4]
 80049ba:	f000 f807 	bl	80049cc <FMAC_ResetInputStateAndDataPointers>
  FMAC_ResetOutputStateAndDataPointers(hfmac);
 80049be:	6878      	ldr	r0, [r7, #4]
 80049c0:	f000 f81b 	bl	80049fa <FMAC_ResetOutputStateAndDataPointers>
}
 80049c4:	bf00      	nop
 80049c6:	3708      	adds	r7, #8
 80049c8:	46bd      	mov	sp, r7
 80049ca:	bd80      	pop	{r7, pc}

080049cc <FMAC_ResetInputStateAndDataPointers>:
  * @brief  Reset the input data pointers of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval None
  */
static void FMAC_ResetInputStateAndDataPointers(FMAC_HandleTypeDef *hfmac)
{
 80049cc:	b480      	push	{r7}
 80049ce:	b083      	sub	sp, #12
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
  hfmac->pInput = NULL;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2200      	movs	r2, #0
 80049d8:	60da      	str	r2, [r3, #12]
  hfmac->pInputSize = NULL;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	2200      	movs	r2, #0
 80049de:	615a      	str	r2, [r3, #20]
  hfmac->InputCurrentSize = 0U;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2200      	movs	r2, #0
 80049e4:	821a      	strh	r2, [r3, #16]
  hfmac->WrState = HAL_FMAC_STATE_READY;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	2220      	movs	r2, #32
 80049ea:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
}
 80049ee:	bf00      	nop
 80049f0:	370c      	adds	r7, #12
 80049f2:	46bd      	mov	sp, r7
 80049f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f8:	4770      	bx	lr

080049fa <FMAC_ResetOutputStateAndDataPointers>:
  * @brief  Reset the output data pointers of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval None
  */
static void FMAC_ResetOutputStateAndDataPointers(FMAC_HandleTypeDef *hfmac)
{
 80049fa:	b480      	push	{r7}
 80049fc:	b083      	sub	sp, #12
 80049fe:	af00      	add	r7, sp, #0
 8004a00:	6078      	str	r0, [r7, #4]
  hfmac->pOutput = NULL;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	2200      	movs	r2, #0
 8004a06:	619a      	str	r2, [r3, #24]
  hfmac->pOutputSize = NULL;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	621a      	str	r2, [r3, #32]
  hfmac->OutputCurrentSize = 0U;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	2200      	movs	r2, #0
 8004a12:	839a      	strh	r2, [r3, #28]
  hfmac->RdState = HAL_FMAC_STATE_READY;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2220      	movs	r2, #32
 8004a18:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
}
 8004a1c:	bf00      	nop
 8004a1e:	370c      	adds	r7, #12
 8004a20:	46bd      	mov	sp, r7
 8004a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a26:	4770      	bx	lr

08004a28 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004a28:	b480      	push	{r7}
 8004a2a:	b087      	sub	sp, #28
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
 8004a30:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004a32:	2300      	movs	r3, #0
 8004a34:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004a36:	e15a      	b.n	8004cee <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004a38:	683b      	ldr	r3, [r7, #0]
 8004a3a:	681a      	ldr	r2, [r3, #0]
 8004a3c:	2101      	movs	r1, #1
 8004a3e:	697b      	ldr	r3, [r7, #20]
 8004a40:	fa01 f303 	lsl.w	r3, r1, r3
 8004a44:	4013      	ands	r3, r2
 8004a46:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	f000 814c 	beq.w	8004ce8 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	685b      	ldr	r3, [r3, #4]
 8004a54:	f003 0303 	and.w	r3, r3, #3
 8004a58:	2b01      	cmp	r3, #1
 8004a5a:	d005      	beq.n	8004a68 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	685b      	ldr	r3, [r3, #4]
 8004a60:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004a64:	2b02      	cmp	r3, #2
 8004a66:	d130      	bne.n	8004aca <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	689b      	ldr	r3, [r3, #8]
 8004a6c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004a6e:	697b      	ldr	r3, [r7, #20]
 8004a70:	005b      	lsls	r3, r3, #1
 8004a72:	2203      	movs	r2, #3
 8004a74:	fa02 f303 	lsl.w	r3, r2, r3
 8004a78:	43db      	mvns	r3, r3
 8004a7a:	693a      	ldr	r2, [r7, #16]
 8004a7c:	4013      	ands	r3, r2
 8004a7e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	68da      	ldr	r2, [r3, #12]
 8004a84:	697b      	ldr	r3, [r7, #20]
 8004a86:	005b      	lsls	r3, r3, #1
 8004a88:	fa02 f303 	lsl.w	r3, r2, r3
 8004a8c:	693a      	ldr	r2, [r7, #16]
 8004a8e:	4313      	orrs	r3, r2
 8004a90:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	693a      	ldr	r2, [r7, #16]
 8004a96:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	685b      	ldr	r3, [r3, #4]
 8004a9c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004a9e:	2201      	movs	r2, #1
 8004aa0:	697b      	ldr	r3, [r7, #20]
 8004aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8004aa6:	43db      	mvns	r3, r3
 8004aa8:	693a      	ldr	r2, [r7, #16]
 8004aaa:	4013      	ands	r3, r2
 8004aac:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004aae:	683b      	ldr	r3, [r7, #0]
 8004ab0:	685b      	ldr	r3, [r3, #4]
 8004ab2:	091b      	lsrs	r3, r3, #4
 8004ab4:	f003 0201 	and.w	r2, r3, #1
 8004ab8:	697b      	ldr	r3, [r7, #20]
 8004aba:	fa02 f303 	lsl.w	r3, r2, r3
 8004abe:	693a      	ldr	r2, [r7, #16]
 8004ac0:	4313      	orrs	r3, r2
 8004ac2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	693a      	ldr	r2, [r7, #16]
 8004ac8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004aca:	683b      	ldr	r3, [r7, #0]
 8004acc:	685b      	ldr	r3, [r3, #4]
 8004ace:	f003 0303 	and.w	r3, r3, #3
 8004ad2:	2b03      	cmp	r3, #3
 8004ad4:	d017      	beq.n	8004b06 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	68db      	ldr	r3, [r3, #12]
 8004ada:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004adc:	697b      	ldr	r3, [r7, #20]
 8004ade:	005b      	lsls	r3, r3, #1
 8004ae0:	2203      	movs	r2, #3
 8004ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ae6:	43db      	mvns	r3, r3
 8004ae8:	693a      	ldr	r2, [r7, #16]
 8004aea:	4013      	ands	r3, r2
 8004aec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004aee:	683b      	ldr	r3, [r7, #0]
 8004af0:	689a      	ldr	r2, [r3, #8]
 8004af2:	697b      	ldr	r3, [r7, #20]
 8004af4:	005b      	lsls	r3, r3, #1
 8004af6:	fa02 f303 	lsl.w	r3, r2, r3
 8004afa:	693a      	ldr	r2, [r7, #16]
 8004afc:	4313      	orrs	r3, r2
 8004afe:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	693a      	ldr	r2, [r7, #16]
 8004b04:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004b06:	683b      	ldr	r3, [r7, #0]
 8004b08:	685b      	ldr	r3, [r3, #4]
 8004b0a:	f003 0303 	and.w	r3, r3, #3
 8004b0e:	2b02      	cmp	r3, #2
 8004b10:	d123      	bne.n	8004b5a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004b12:	697b      	ldr	r3, [r7, #20]
 8004b14:	08da      	lsrs	r2, r3, #3
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	3208      	adds	r2, #8
 8004b1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b1e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004b20:	697b      	ldr	r3, [r7, #20]
 8004b22:	f003 0307 	and.w	r3, r3, #7
 8004b26:	009b      	lsls	r3, r3, #2
 8004b28:	220f      	movs	r2, #15
 8004b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8004b2e:	43db      	mvns	r3, r3
 8004b30:	693a      	ldr	r2, [r7, #16]
 8004b32:	4013      	ands	r3, r2
 8004b34:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004b36:	683b      	ldr	r3, [r7, #0]
 8004b38:	691a      	ldr	r2, [r3, #16]
 8004b3a:	697b      	ldr	r3, [r7, #20]
 8004b3c:	f003 0307 	and.w	r3, r3, #7
 8004b40:	009b      	lsls	r3, r3, #2
 8004b42:	fa02 f303 	lsl.w	r3, r2, r3
 8004b46:	693a      	ldr	r2, [r7, #16]
 8004b48:	4313      	orrs	r3, r2
 8004b4a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004b4c:	697b      	ldr	r3, [r7, #20]
 8004b4e:	08da      	lsrs	r2, r3, #3
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	3208      	adds	r2, #8
 8004b54:	6939      	ldr	r1, [r7, #16]
 8004b56:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004b60:	697b      	ldr	r3, [r7, #20]
 8004b62:	005b      	lsls	r3, r3, #1
 8004b64:	2203      	movs	r2, #3
 8004b66:	fa02 f303 	lsl.w	r3, r2, r3
 8004b6a:	43db      	mvns	r3, r3
 8004b6c:	693a      	ldr	r2, [r7, #16]
 8004b6e:	4013      	ands	r3, r2
 8004b70:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	685b      	ldr	r3, [r3, #4]
 8004b76:	f003 0203 	and.w	r2, r3, #3
 8004b7a:	697b      	ldr	r3, [r7, #20]
 8004b7c:	005b      	lsls	r3, r3, #1
 8004b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8004b82:	693a      	ldr	r2, [r7, #16]
 8004b84:	4313      	orrs	r3, r2
 8004b86:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	693a      	ldr	r2, [r7, #16]
 8004b8c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004b8e:	683b      	ldr	r3, [r7, #0]
 8004b90:	685b      	ldr	r3, [r3, #4]
 8004b92:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	f000 80a6 	beq.w	8004ce8 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004b9c:	4b5b      	ldr	r3, [pc, #364]	; (8004d0c <HAL_GPIO_Init+0x2e4>)
 8004b9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ba0:	4a5a      	ldr	r2, [pc, #360]	; (8004d0c <HAL_GPIO_Init+0x2e4>)
 8004ba2:	f043 0301 	orr.w	r3, r3, #1
 8004ba6:	6613      	str	r3, [r2, #96]	; 0x60
 8004ba8:	4b58      	ldr	r3, [pc, #352]	; (8004d0c <HAL_GPIO_Init+0x2e4>)
 8004baa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004bac:	f003 0301 	and.w	r3, r3, #1
 8004bb0:	60bb      	str	r3, [r7, #8]
 8004bb2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004bb4:	4a56      	ldr	r2, [pc, #344]	; (8004d10 <HAL_GPIO_Init+0x2e8>)
 8004bb6:	697b      	ldr	r3, [r7, #20]
 8004bb8:	089b      	lsrs	r3, r3, #2
 8004bba:	3302      	adds	r3, #2
 8004bbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004bc0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004bc2:	697b      	ldr	r3, [r7, #20]
 8004bc4:	f003 0303 	and.w	r3, r3, #3
 8004bc8:	009b      	lsls	r3, r3, #2
 8004bca:	220f      	movs	r2, #15
 8004bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8004bd0:	43db      	mvns	r3, r3
 8004bd2:	693a      	ldr	r2, [r7, #16]
 8004bd4:	4013      	ands	r3, r2
 8004bd6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004bde:	d01f      	beq.n	8004c20 <HAL_GPIO_Init+0x1f8>
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	4a4c      	ldr	r2, [pc, #304]	; (8004d14 <HAL_GPIO_Init+0x2ec>)
 8004be4:	4293      	cmp	r3, r2
 8004be6:	d019      	beq.n	8004c1c <HAL_GPIO_Init+0x1f4>
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	4a4b      	ldr	r2, [pc, #300]	; (8004d18 <HAL_GPIO_Init+0x2f0>)
 8004bec:	4293      	cmp	r3, r2
 8004bee:	d013      	beq.n	8004c18 <HAL_GPIO_Init+0x1f0>
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	4a4a      	ldr	r2, [pc, #296]	; (8004d1c <HAL_GPIO_Init+0x2f4>)
 8004bf4:	4293      	cmp	r3, r2
 8004bf6:	d00d      	beq.n	8004c14 <HAL_GPIO_Init+0x1ec>
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	4a49      	ldr	r2, [pc, #292]	; (8004d20 <HAL_GPIO_Init+0x2f8>)
 8004bfc:	4293      	cmp	r3, r2
 8004bfe:	d007      	beq.n	8004c10 <HAL_GPIO_Init+0x1e8>
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	4a48      	ldr	r2, [pc, #288]	; (8004d24 <HAL_GPIO_Init+0x2fc>)
 8004c04:	4293      	cmp	r3, r2
 8004c06:	d101      	bne.n	8004c0c <HAL_GPIO_Init+0x1e4>
 8004c08:	2305      	movs	r3, #5
 8004c0a:	e00a      	b.n	8004c22 <HAL_GPIO_Init+0x1fa>
 8004c0c:	2306      	movs	r3, #6
 8004c0e:	e008      	b.n	8004c22 <HAL_GPIO_Init+0x1fa>
 8004c10:	2304      	movs	r3, #4
 8004c12:	e006      	b.n	8004c22 <HAL_GPIO_Init+0x1fa>
 8004c14:	2303      	movs	r3, #3
 8004c16:	e004      	b.n	8004c22 <HAL_GPIO_Init+0x1fa>
 8004c18:	2302      	movs	r3, #2
 8004c1a:	e002      	b.n	8004c22 <HAL_GPIO_Init+0x1fa>
 8004c1c:	2301      	movs	r3, #1
 8004c1e:	e000      	b.n	8004c22 <HAL_GPIO_Init+0x1fa>
 8004c20:	2300      	movs	r3, #0
 8004c22:	697a      	ldr	r2, [r7, #20]
 8004c24:	f002 0203 	and.w	r2, r2, #3
 8004c28:	0092      	lsls	r2, r2, #2
 8004c2a:	4093      	lsls	r3, r2
 8004c2c:	693a      	ldr	r2, [r7, #16]
 8004c2e:	4313      	orrs	r3, r2
 8004c30:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004c32:	4937      	ldr	r1, [pc, #220]	; (8004d10 <HAL_GPIO_Init+0x2e8>)
 8004c34:	697b      	ldr	r3, [r7, #20]
 8004c36:	089b      	lsrs	r3, r3, #2
 8004c38:	3302      	adds	r3, #2
 8004c3a:	693a      	ldr	r2, [r7, #16]
 8004c3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004c40:	4b39      	ldr	r3, [pc, #228]	; (8004d28 <HAL_GPIO_Init+0x300>)
 8004c42:	689b      	ldr	r3, [r3, #8]
 8004c44:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	43db      	mvns	r3, r3
 8004c4a:	693a      	ldr	r2, [r7, #16]
 8004c4c:	4013      	ands	r3, r2
 8004c4e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	685b      	ldr	r3, [r3, #4]
 8004c54:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d003      	beq.n	8004c64 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8004c5c:	693a      	ldr	r2, [r7, #16]
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	4313      	orrs	r3, r2
 8004c62:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004c64:	4a30      	ldr	r2, [pc, #192]	; (8004d28 <HAL_GPIO_Init+0x300>)
 8004c66:	693b      	ldr	r3, [r7, #16]
 8004c68:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004c6a:	4b2f      	ldr	r3, [pc, #188]	; (8004d28 <HAL_GPIO_Init+0x300>)
 8004c6c:	68db      	ldr	r3, [r3, #12]
 8004c6e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	43db      	mvns	r3, r3
 8004c74:	693a      	ldr	r2, [r7, #16]
 8004c76:	4013      	ands	r3, r2
 8004c78:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	685b      	ldr	r3, [r3, #4]
 8004c7e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d003      	beq.n	8004c8e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8004c86:	693a      	ldr	r2, [r7, #16]
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	4313      	orrs	r3, r2
 8004c8c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004c8e:	4a26      	ldr	r2, [pc, #152]	; (8004d28 <HAL_GPIO_Init+0x300>)
 8004c90:	693b      	ldr	r3, [r7, #16]
 8004c92:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8004c94:	4b24      	ldr	r3, [pc, #144]	; (8004d28 <HAL_GPIO_Init+0x300>)
 8004c96:	685b      	ldr	r3, [r3, #4]
 8004c98:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	43db      	mvns	r3, r3
 8004c9e:	693a      	ldr	r2, [r7, #16]
 8004ca0:	4013      	ands	r3, r2
 8004ca2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004ca4:	683b      	ldr	r3, [r7, #0]
 8004ca6:	685b      	ldr	r3, [r3, #4]
 8004ca8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d003      	beq.n	8004cb8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004cb0:	693a      	ldr	r2, [r7, #16]
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	4313      	orrs	r3, r2
 8004cb6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004cb8:	4a1b      	ldr	r2, [pc, #108]	; (8004d28 <HAL_GPIO_Init+0x300>)
 8004cba:	693b      	ldr	r3, [r7, #16]
 8004cbc:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004cbe:	4b1a      	ldr	r3, [pc, #104]	; (8004d28 <HAL_GPIO_Init+0x300>)
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	43db      	mvns	r3, r3
 8004cc8:	693a      	ldr	r2, [r7, #16]
 8004cca:	4013      	ands	r3, r2
 8004ccc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	685b      	ldr	r3, [r3, #4]
 8004cd2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d003      	beq.n	8004ce2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8004cda:	693a      	ldr	r2, [r7, #16]
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	4313      	orrs	r3, r2
 8004ce0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004ce2:	4a11      	ldr	r2, [pc, #68]	; (8004d28 <HAL_GPIO_Init+0x300>)
 8004ce4:	693b      	ldr	r3, [r7, #16]
 8004ce6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004ce8:	697b      	ldr	r3, [r7, #20]
 8004cea:	3301      	adds	r3, #1
 8004cec:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	681a      	ldr	r2, [r3, #0]
 8004cf2:	697b      	ldr	r3, [r7, #20]
 8004cf4:	fa22 f303 	lsr.w	r3, r2, r3
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	f47f ae9d 	bne.w	8004a38 <HAL_GPIO_Init+0x10>
  }
}
 8004cfe:	bf00      	nop
 8004d00:	bf00      	nop
 8004d02:	371c      	adds	r7, #28
 8004d04:	46bd      	mov	sp, r7
 8004d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0a:	4770      	bx	lr
 8004d0c:	40021000 	.word	0x40021000
 8004d10:	40010000 	.word	0x40010000
 8004d14:	48000400 	.word	0x48000400
 8004d18:	48000800 	.word	0x48000800
 8004d1c:	48000c00 	.word	0x48000c00
 8004d20:	48001000 	.word	0x48001000
 8004d24:	48001400 	.word	0x48001400
 8004d28:	40010400 	.word	0x40010400

08004d2c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004d2c:	b480      	push	{r7}
 8004d2e:	b083      	sub	sp, #12
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
 8004d34:	460b      	mov	r3, r1
 8004d36:	807b      	strh	r3, [r7, #2]
 8004d38:	4613      	mov	r3, r2
 8004d3a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004d3c:	787b      	ldrb	r3, [r7, #1]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d003      	beq.n	8004d4a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004d42:	887a      	ldrh	r2, [r7, #2]
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004d48:	e002      	b.n	8004d50 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004d4a:	887a      	ldrh	r2, [r7, #2]
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004d50:	bf00      	nop
 8004d52:	370c      	adds	r7, #12
 8004d54:	46bd      	mov	sp, r7
 8004d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5a:	4770      	bx	lr

08004d5c <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004d5c:	b480      	push	{r7}
 8004d5e:	b085      	sub	sp, #20
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
 8004d64:	460b      	mov	r3, r1
 8004d66:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	695b      	ldr	r3, [r3, #20]
 8004d6c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004d6e:	887a      	ldrh	r2, [r7, #2]
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	4013      	ands	r3, r2
 8004d74:	041a      	lsls	r2, r3, #16
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	43d9      	mvns	r1, r3
 8004d7a:	887b      	ldrh	r3, [r7, #2]
 8004d7c:	400b      	ands	r3, r1
 8004d7e:	431a      	orrs	r2, r3
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	619a      	str	r2, [r3, #24]
}
 8004d84:	bf00      	nop
 8004d86:	3714      	adds	r7, #20
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8e:	4770      	bx	lr

08004d90 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004d90:	b580      	push	{r7, lr}
 8004d92:	b082      	sub	sp, #8
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	4603      	mov	r3, r0
 8004d98:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004d9a:	4b08      	ldr	r3, [pc, #32]	; (8004dbc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004d9c:	695a      	ldr	r2, [r3, #20]
 8004d9e:	88fb      	ldrh	r3, [r7, #6]
 8004da0:	4013      	ands	r3, r2
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d006      	beq.n	8004db4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004da6:	4a05      	ldr	r2, [pc, #20]	; (8004dbc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004da8:	88fb      	ldrh	r3, [r7, #6]
 8004daa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004dac:	88fb      	ldrh	r3, [r7, #6]
 8004dae:	4618      	mov	r0, r3
 8004db0:	f7fc fc20 	bl	80015f4 <HAL_GPIO_EXTI_Callback>
  }
}
 8004db4:	bf00      	nop
 8004db6:	3708      	adds	r7, #8
 8004db8:	46bd      	mov	sp, r7
 8004dba:	bd80      	pop	{r7, pc}
 8004dbc:	40010400 	.word	0x40010400

08004dc0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	b082      	sub	sp, #8
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d101      	bne.n	8004dd2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004dce:	2301      	movs	r3, #1
 8004dd0:	e081      	b.n	8004ed6 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004dd8:	b2db      	uxtb	r3, r3
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d106      	bne.n	8004dec <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	2200      	movs	r2, #0
 8004de2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004de6:	6878      	ldr	r0, [r7, #4]
 8004de8:	f7fc fd36 	bl	8001858 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2224      	movs	r2, #36	; 0x24
 8004df0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	681a      	ldr	r2, [r3, #0]
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f022 0201 	bic.w	r2, r2, #1
 8004e02:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	685a      	ldr	r2, [r3, #4]
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004e10:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	689a      	ldr	r2, [r3, #8]
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004e20:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	68db      	ldr	r3, [r3, #12]
 8004e26:	2b01      	cmp	r3, #1
 8004e28:	d107      	bne.n	8004e3a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	689a      	ldr	r2, [r3, #8]
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004e36:	609a      	str	r2, [r3, #8]
 8004e38:	e006      	b.n	8004e48 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	689a      	ldr	r2, [r3, #8]
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004e46:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	68db      	ldr	r3, [r3, #12]
 8004e4c:	2b02      	cmp	r3, #2
 8004e4e:	d104      	bne.n	8004e5a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004e58:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	685b      	ldr	r3, [r3, #4]
 8004e60:	687a      	ldr	r2, [r7, #4]
 8004e62:	6812      	ldr	r2, [r2, #0]
 8004e64:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004e68:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e6c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	68da      	ldr	r2, [r3, #12]
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004e7c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	691a      	ldr	r2, [r3, #16]
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	695b      	ldr	r3, [r3, #20]
 8004e86:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	699b      	ldr	r3, [r3, #24]
 8004e8e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	430a      	orrs	r2, r1
 8004e96:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	69d9      	ldr	r1, [r3, #28]
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	6a1a      	ldr	r2, [r3, #32]
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	430a      	orrs	r2, r1
 8004ea6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	681a      	ldr	r2, [r3, #0]
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f042 0201 	orr.w	r2, r2, #1
 8004eb6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2200      	movs	r2, #0
 8004ebc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	2220      	movs	r2, #32
 8004ec2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	2200      	movs	r2, #0
 8004eca:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2200      	movs	r2, #0
 8004ed0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004ed4:	2300      	movs	r3, #0
}
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	3708      	adds	r7, #8
 8004eda:	46bd      	mov	sp, r7
 8004edc:	bd80      	pop	{r7, pc}
	...

08004ee0 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	b088      	sub	sp, #32
 8004ee4:	af02      	add	r7, sp, #8
 8004ee6:	60f8      	str	r0, [r7, #12]
 8004ee8:	607a      	str	r2, [r7, #4]
 8004eea:	461a      	mov	r2, r3
 8004eec:	460b      	mov	r3, r1
 8004eee:	817b      	strh	r3, [r7, #10]
 8004ef0:	4613      	mov	r3, r2
 8004ef2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004efa:	b2db      	uxtb	r3, r3
 8004efc:	2b20      	cmp	r3, #32
 8004efe:	f040 80da 	bne.w	80050b6 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004f08:	2b01      	cmp	r3, #1
 8004f0a:	d101      	bne.n	8004f10 <HAL_I2C_Master_Transmit+0x30>
 8004f0c:	2302      	movs	r3, #2
 8004f0e:	e0d3      	b.n	80050b8 <HAL_I2C_Master_Transmit+0x1d8>
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	2201      	movs	r2, #1
 8004f14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004f18:	f7fe fa90 	bl	800343c <HAL_GetTick>
 8004f1c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004f1e:	697b      	ldr	r3, [r7, #20]
 8004f20:	9300      	str	r3, [sp, #0]
 8004f22:	2319      	movs	r3, #25
 8004f24:	2201      	movs	r2, #1
 8004f26:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004f2a:	68f8      	ldr	r0, [r7, #12]
 8004f2c:	f000 fa5e 	bl	80053ec <I2C_WaitOnFlagUntilTimeout>
 8004f30:	4603      	mov	r3, r0
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d001      	beq.n	8004f3a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8004f36:	2301      	movs	r3, #1
 8004f38:	e0be      	b.n	80050b8 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	2221      	movs	r2, #33	; 0x21
 8004f3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	2210      	movs	r2, #16
 8004f46:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	687a      	ldr	r2, [r7, #4]
 8004f54:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	893a      	ldrh	r2, [r7, #8]
 8004f5a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	2200      	movs	r2, #0
 8004f60:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f66:	b29b      	uxth	r3, r3
 8004f68:	2bff      	cmp	r3, #255	; 0xff
 8004f6a:	d90e      	bls.n	8004f8a <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	22ff      	movs	r2, #255	; 0xff
 8004f70:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f76:	b2da      	uxtb	r2, r3
 8004f78:	8979      	ldrh	r1, [r7, #10]
 8004f7a:	4b51      	ldr	r3, [pc, #324]	; (80050c0 <HAL_I2C_Master_Transmit+0x1e0>)
 8004f7c:	9300      	str	r3, [sp, #0]
 8004f7e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004f82:	68f8      	ldr	r0, [r7, #12]
 8004f84:	f000 fbda 	bl	800573c <I2C_TransferConfig>
 8004f88:	e06c      	b.n	8005064 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f8e:	b29a      	uxth	r2, r3
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f98:	b2da      	uxtb	r2, r3
 8004f9a:	8979      	ldrh	r1, [r7, #10]
 8004f9c:	4b48      	ldr	r3, [pc, #288]	; (80050c0 <HAL_I2C_Master_Transmit+0x1e0>)
 8004f9e:	9300      	str	r3, [sp, #0]
 8004fa0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004fa4:	68f8      	ldr	r0, [r7, #12]
 8004fa6:	f000 fbc9 	bl	800573c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8004faa:	e05b      	b.n	8005064 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004fac:	697a      	ldr	r2, [r7, #20]
 8004fae:	6a39      	ldr	r1, [r7, #32]
 8004fb0:	68f8      	ldr	r0, [r7, #12]
 8004fb2:	f000 fa5b 	bl	800546c <I2C_WaitOnTXISFlagUntilTimeout>
 8004fb6:	4603      	mov	r3, r0
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d001      	beq.n	8004fc0 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8004fbc:	2301      	movs	r3, #1
 8004fbe:	e07b      	b.n	80050b8 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fc4:	781a      	ldrb	r2, [r3, #0]
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fd0:	1c5a      	adds	r2, r3, #1
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fda:	b29b      	uxth	r3, r3
 8004fdc:	3b01      	subs	r3, #1
 8004fde:	b29a      	uxth	r2, r3
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fe8:	3b01      	subs	r3, #1
 8004fea:	b29a      	uxth	r2, r3
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ff4:	b29b      	uxth	r3, r3
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d034      	beq.n	8005064 <HAL_I2C_Master_Transmit+0x184>
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d130      	bne.n	8005064 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005002:	697b      	ldr	r3, [r7, #20]
 8005004:	9300      	str	r3, [sp, #0]
 8005006:	6a3b      	ldr	r3, [r7, #32]
 8005008:	2200      	movs	r2, #0
 800500a:	2180      	movs	r1, #128	; 0x80
 800500c:	68f8      	ldr	r0, [r7, #12]
 800500e:	f000 f9ed 	bl	80053ec <I2C_WaitOnFlagUntilTimeout>
 8005012:	4603      	mov	r3, r0
 8005014:	2b00      	cmp	r3, #0
 8005016:	d001      	beq.n	800501c <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8005018:	2301      	movs	r3, #1
 800501a:	e04d      	b.n	80050b8 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005020:	b29b      	uxth	r3, r3
 8005022:	2bff      	cmp	r3, #255	; 0xff
 8005024:	d90e      	bls.n	8005044 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	22ff      	movs	r2, #255	; 0xff
 800502a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005030:	b2da      	uxtb	r2, r3
 8005032:	8979      	ldrh	r1, [r7, #10]
 8005034:	2300      	movs	r3, #0
 8005036:	9300      	str	r3, [sp, #0]
 8005038:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800503c:	68f8      	ldr	r0, [r7, #12]
 800503e:	f000 fb7d 	bl	800573c <I2C_TransferConfig>
 8005042:	e00f      	b.n	8005064 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005048:	b29a      	uxth	r2, r3
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005052:	b2da      	uxtb	r2, r3
 8005054:	8979      	ldrh	r1, [r7, #10]
 8005056:	2300      	movs	r3, #0
 8005058:	9300      	str	r3, [sp, #0]
 800505a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800505e:	68f8      	ldr	r0, [r7, #12]
 8005060:	f000 fb6c 	bl	800573c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005068:	b29b      	uxth	r3, r3
 800506a:	2b00      	cmp	r3, #0
 800506c:	d19e      	bne.n	8004fac <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800506e:	697a      	ldr	r2, [r7, #20]
 8005070:	6a39      	ldr	r1, [r7, #32]
 8005072:	68f8      	ldr	r0, [r7, #12]
 8005074:	f000 fa3a 	bl	80054ec <I2C_WaitOnSTOPFlagUntilTimeout>
 8005078:	4603      	mov	r3, r0
 800507a:	2b00      	cmp	r3, #0
 800507c:	d001      	beq.n	8005082 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800507e:	2301      	movs	r3, #1
 8005080:	e01a      	b.n	80050b8 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	2220      	movs	r2, #32
 8005088:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	6859      	ldr	r1, [r3, #4]
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	681a      	ldr	r2, [r3, #0]
 8005094:	4b0b      	ldr	r3, [pc, #44]	; (80050c4 <HAL_I2C_Master_Transmit+0x1e4>)
 8005096:	400b      	ands	r3, r1
 8005098:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	2220      	movs	r2, #32
 800509e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	2200      	movs	r2, #0
 80050a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	2200      	movs	r2, #0
 80050ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80050b2:	2300      	movs	r3, #0
 80050b4:	e000      	b.n	80050b8 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80050b6:	2302      	movs	r3, #2
  }
}
 80050b8:	4618      	mov	r0, r3
 80050ba:	3718      	adds	r7, #24
 80050bc:	46bd      	mov	sp, r7
 80050be:	bd80      	pop	{r7, pc}
 80050c0:	80002000 	.word	0x80002000
 80050c4:	fe00e800 	.word	0xfe00e800

080050c8 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80050c8:	b580      	push	{r7, lr}
 80050ca:	b088      	sub	sp, #32
 80050cc:	af02      	add	r7, sp, #8
 80050ce:	60f8      	str	r0, [r7, #12]
 80050d0:	4608      	mov	r0, r1
 80050d2:	4611      	mov	r1, r2
 80050d4:	461a      	mov	r2, r3
 80050d6:	4603      	mov	r3, r0
 80050d8:	817b      	strh	r3, [r7, #10]
 80050da:	460b      	mov	r3, r1
 80050dc:	813b      	strh	r3, [r7, #8]
 80050de:	4613      	mov	r3, r2
 80050e0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80050e8:	b2db      	uxtb	r3, r3
 80050ea:	2b20      	cmp	r3, #32
 80050ec:	f040 80fd 	bne.w	80052ea <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80050f0:	6a3b      	ldr	r3, [r7, #32]
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d002      	beq.n	80050fc <HAL_I2C_Mem_Read+0x34>
 80050f6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d105      	bne.n	8005108 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005102:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8005104:	2301      	movs	r3, #1
 8005106:	e0f1      	b.n	80052ec <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800510e:	2b01      	cmp	r3, #1
 8005110:	d101      	bne.n	8005116 <HAL_I2C_Mem_Read+0x4e>
 8005112:	2302      	movs	r3, #2
 8005114:	e0ea      	b.n	80052ec <HAL_I2C_Mem_Read+0x224>
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	2201      	movs	r2, #1
 800511a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800511e:	f7fe f98d 	bl	800343c <HAL_GetTick>
 8005122:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005124:	697b      	ldr	r3, [r7, #20]
 8005126:	9300      	str	r3, [sp, #0]
 8005128:	2319      	movs	r3, #25
 800512a:	2201      	movs	r2, #1
 800512c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005130:	68f8      	ldr	r0, [r7, #12]
 8005132:	f000 f95b 	bl	80053ec <I2C_WaitOnFlagUntilTimeout>
 8005136:	4603      	mov	r3, r0
 8005138:	2b00      	cmp	r3, #0
 800513a:	d001      	beq.n	8005140 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800513c:	2301      	movs	r3, #1
 800513e:	e0d5      	b.n	80052ec <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	2222      	movs	r2, #34	; 0x22
 8005144:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	2240      	movs	r2, #64	; 0x40
 800514c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	2200      	movs	r2, #0
 8005154:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	6a3a      	ldr	r2, [r7, #32]
 800515a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005160:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	2200      	movs	r2, #0
 8005166:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005168:	88f8      	ldrh	r0, [r7, #6]
 800516a:	893a      	ldrh	r2, [r7, #8]
 800516c:	8979      	ldrh	r1, [r7, #10]
 800516e:	697b      	ldr	r3, [r7, #20]
 8005170:	9301      	str	r3, [sp, #4]
 8005172:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005174:	9300      	str	r3, [sp, #0]
 8005176:	4603      	mov	r3, r0
 8005178:	68f8      	ldr	r0, [r7, #12]
 800517a:	f000 f8bf 	bl	80052fc <I2C_RequestMemoryRead>
 800517e:	4603      	mov	r3, r0
 8005180:	2b00      	cmp	r3, #0
 8005182:	d005      	beq.n	8005190 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	2200      	movs	r2, #0
 8005188:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800518c:	2301      	movs	r3, #1
 800518e:	e0ad      	b.n	80052ec <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005194:	b29b      	uxth	r3, r3
 8005196:	2bff      	cmp	r3, #255	; 0xff
 8005198:	d90e      	bls.n	80051b8 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	22ff      	movs	r2, #255	; 0xff
 800519e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051a4:	b2da      	uxtb	r2, r3
 80051a6:	8979      	ldrh	r1, [r7, #10]
 80051a8:	4b52      	ldr	r3, [pc, #328]	; (80052f4 <HAL_I2C_Mem_Read+0x22c>)
 80051aa:	9300      	str	r3, [sp, #0]
 80051ac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80051b0:	68f8      	ldr	r0, [r7, #12]
 80051b2:	f000 fac3 	bl	800573c <I2C_TransferConfig>
 80051b6:	e00f      	b.n	80051d8 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051bc:	b29a      	uxth	r2, r3
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051c6:	b2da      	uxtb	r2, r3
 80051c8:	8979      	ldrh	r1, [r7, #10]
 80051ca:	4b4a      	ldr	r3, [pc, #296]	; (80052f4 <HAL_I2C_Mem_Read+0x22c>)
 80051cc:	9300      	str	r3, [sp, #0]
 80051ce:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80051d2:	68f8      	ldr	r0, [r7, #12]
 80051d4:	f000 fab2 	bl	800573c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80051d8:	697b      	ldr	r3, [r7, #20]
 80051da:	9300      	str	r3, [sp, #0]
 80051dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051de:	2200      	movs	r2, #0
 80051e0:	2104      	movs	r1, #4
 80051e2:	68f8      	ldr	r0, [r7, #12]
 80051e4:	f000 f902 	bl	80053ec <I2C_WaitOnFlagUntilTimeout>
 80051e8:	4603      	mov	r3, r0
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d001      	beq.n	80051f2 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80051ee:	2301      	movs	r3, #1
 80051f0:	e07c      	b.n	80052ec <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051fc:	b2d2      	uxtb	r2, r2
 80051fe:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005204:	1c5a      	adds	r2, r3, #1
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800520e:	3b01      	subs	r3, #1
 8005210:	b29a      	uxth	r2, r3
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800521a:	b29b      	uxth	r3, r3
 800521c:	3b01      	subs	r3, #1
 800521e:	b29a      	uxth	r2, r3
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005228:	b29b      	uxth	r3, r3
 800522a:	2b00      	cmp	r3, #0
 800522c:	d034      	beq.n	8005298 <HAL_I2C_Mem_Read+0x1d0>
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005232:	2b00      	cmp	r3, #0
 8005234:	d130      	bne.n	8005298 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005236:	697b      	ldr	r3, [r7, #20]
 8005238:	9300      	str	r3, [sp, #0]
 800523a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800523c:	2200      	movs	r2, #0
 800523e:	2180      	movs	r1, #128	; 0x80
 8005240:	68f8      	ldr	r0, [r7, #12]
 8005242:	f000 f8d3 	bl	80053ec <I2C_WaitOnFlagUntilTimeout>
 8005246:	4603      	mov	r3, r0
 8005248:	2b00      	cmp	r3, #0
 800524a:	d001      	beq.n	8005250 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800524c:	2301      	movs	r3, #1
 800524e:	e04d      	b.n	80052ec <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005254:	b29b      	uxth	r3, r3
 8005256:	2bff      	cmp	r3, #255	; 0xff
 8005258:	d90e      	bls.n	8005278 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	22ff      	movs	r2, #255	; 0xff
 800525e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005264:	b2da      	uxtb	r2, r3
 8005266:	8979      	ldrh	r1, [r7, #10]
 8005268:	2300      	movs	r3, #0
 800526a:	9300      	str	r3, [sp, #0]
 800526c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005270:	68f8      	ldr	r0, [r7, #12]
 8005272:	f000 fa63 	bl	800573c <I2C_TransferConfig>
 8005276:	e00f      	b.n	8005298 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800527c:	b29a      	uxth	r2, r3
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005286:	b2da      	uxtb	r2, r3
 8005288:	8979      	ldrh	r1, [r7, #10]
 800528a:	2300      	movs	r3, #0
 800528c:	9300      	str	r3, [sp, #0]
 800528e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005292:	68f8      	ldr	r0, [r7, #12]
 8005294:	f000 fa52 	bl	800573c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800529c:	b29b      	uxth	r3, r3
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d19a      	bne.n	80051d8 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80052a2:	697a      	ldr	r2, [r7, #20]
 80052a4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80052a6:	68f8      	ldr	r0, [r7, #12]
 80052a8:	f000 f920 	bl	80054ec <I2C_WaitOnSTOPFlagUntilTimeout>
 80052ac:	4603      	mov	r3, r0
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d001      	beq.n	80052b6 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80052b2:	2301      	movs	r3, #1
 80052b4:	e01a      	b.n	80052ec <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	2220      	movs	r2, #32
 80052bc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	6859      	ldr	r1, [r3, #4]
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	681a      	ldr	r2, [r3, #0]
 80052c8:	4b0b      	ldr	r3, [pc, #44]	; (80052f8 <HAL_I2C_Mem_Read+0x230>)
 80052ca:	400b      	ands	r3, r1
 80052cc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	2220      	movs	r2, #32
 80052d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	2200      	movs	r2, #0
 80052da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	2200      	movs	r2, #0
 80052e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80052e6:	2300      	movs	r3, #0
 80052e8:	e000      	b.n	80052ec <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80052ea:	2302      	movs	r3, #2
  }
}
 80052ec:	4618      	mov	r0, r3
 80052ee:	3718      	adds	r7, #24
 80052f0:	46bd      	mov	sp, r7
 80052f2:	bd80      	pop	{r7, pc}
 80052f4:	80002400 	.word	0x80002400
 80052f8:	fe00e800 	.word	0xfe00e800

080052fc <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80052fc:	b580      	push	{r7, lr}
 80052fe:	b086      	sub	sp, #24
 8005300:	af02      	add	r7, sp, #8
 8005302:	60f8      	str	r0, [r7, #12]
 8005304:	4608      	mov	r0, r1
 8005306:	4611      	mov	r1, r2
 8005308:	461a      	mov	r2, r3
 800530a:	4603      	mov	r3, r0
 800530c:	817b      	strh	r3, [r7, #10]
 800530e:	460b      	mov	r3, r1
 8005310:	813b      	strh	r3, [r7, #8]
 8005312:	4613      	mov	r3, r2
 8005314:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8005316:	88fb      	ldrh	r3, [r7, #6]
 8005318:	b2da      	uxtb	r2, r3
 800531a:	8979      	ldrh	r1, [r7, #10]
 800531c:	4b20      	ldr	r3, [pc, #128]	; (80053a0 <I2C_RequestMemoryRead+0xa4>)
 800531e:	9300      	str	r3, [sp, #0]
 8005320:	2300      	movs	r3, #0
 8005322:	68f8      	ldr	r0, [r7, #12]
 8005324:	f000 fa0a 	bl	800573c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005328:	69fa      	ldr	r2, [r7, #28]
 800532a:	69b9      	ldr	r1, [r7, #24]
 800532c:	68f8      	ldr	r0, [r7, #12]
 800532e:	f000 f89d 	bl	800546c <I2C_WaitOnTXISFlagUntilTimeout>
 8005332:	4603      	mov	r3, r0
 8005334:	2b00      	cmp	r3, #0
 8005336:	d001      	beq.n	800533c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8005338:	2301      	movs	r3, #1
 800533a:	e02c      	b.n	8005396 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800533c:	88fb      	ldrh	r3, [r7, #6]
 800533e:	2b01      	cmp	r3, #1
 8005340:	d105      	bne.n	800534e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005342:	893b      	ldrh	r3, [r7, #8]
 8005344:	b2da      	uxtb	r2, r3
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	629a      	str	r2, [r3, #40]	; 0x28
 800534c:	e015      	b.n	800537a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800534e:	893b      	ldrh	r3, [r7, #8]
 8005350:	0a1b      	lsrs	r3, r3, #8
 8005352:	b29b      	uxth	r3, r3
 8005354:	b2da      	uxtb	r2, r3
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800535c:	69fa      	ldr	r2, [r7, #28]
 800535e:	69b9      	ldr	r1, [r7, #24]
 8005360:	68f8      	ldr	r0, [r7, #12]
 8005362:	f000 f883 	bl	800546c <I2C_WaitOnTXISFlagUntilTimeout>
 8005366:	4603      	mov	r3, r0
 8005368:	2b00      	cmp	r3, #0
 800536a:	d001      	beq.n	8005370 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800536c:	2301      	movs	r3, #1
 800536e:	e012      	b.n	8005396 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005370:	893b      	ldrh	r3, [r7, #8]
 8005372:	b2da      	uxtb	r2, r3
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800537a:	69fb      	ldr	r3, [r7, #28]
 800537c:	9300      	str	r3, [sp, #0]
 800537e:	69bb      	ldr	r3, [r7, #24]
 8005380:	2200      	movs	r2, #0
 8005382:	2140      	movs	r1, #64	; 0x40
 8005384:	68f8      	ldr	r0, [r7, #12]
 8005386:	f000 f831 	bl	80053ec <I2C_WaitOnFlagUntilTimeout>
 800538a:	4603      	mov	r3, r0
 800538c:	2b00      	cmp	r3, #0
 800538e:	d001      	beq.n	8005394 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8005390:	2301      	movs	r3, #1
 8005392:	e000      	b.n	8005396 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8005394:	2300      	movs	r3, #0
}
 8005396:	4618      	mov	r0, r3
 8005398:	3710      	adds	r7, #16
 800539a:	46bd      	mov	sp, r7
 800539c:	bd80      	pop	{r7, pc}
 800539e:	bf00      	nop
 80053a0:	80002000 	.word	0x80002000

080053a4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80053a4:	b480      	push	{r7}
 80053a6:	b083      	sub	sp, #12
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	699b      	ldr	r3, [r3, #24]
 80053b2:	f003 0302 	and.w	r3, r3, #2
 80053b6:	2b02      	cmp	r3, #2
 80053b8:	d103      	bne.n	80053c2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	2200      	movs	r2, #0
 80053c0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	699b      	ldr	r3, [r3, #24]
 80053c8:	f003 0301 	and.w	r3, r3, #1
 80053cc:	2b01      	cmp	r3, #1
 80053ce:	d007      	beq.n	80053e0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	699a      	ldr	r2, [r3, #24]
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f042 0201 	orr.w	r2, r2, #1
 80053de:	619a      	str	r2, [r3, #24]
  }
}
 80053e0:	bf00      	nop
 80053e2:	370c      	adds	r7, #12
 80053e4:	46bd      	mov	sp, r7
 80053e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ea:	4770      	bx	lr

080053ec <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80053ec:	b580      	push	{r7, lr}
 80053ee:	b084      	sub	sp, #16
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	60f8      	str	r0, [r7, #12]
 80053f4:	60b9      	str	r1, [r7, #8]
 80053f6:	603b      	str	r3, [r7, #0]
 80053f8:	4613      	mov	r3, r2
 80053fa:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80053fc:	e022      	b.n	8005444 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005404:	d01e      	beq.n	8005444 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005406:	f7fe f819 	bl	800343c <HAL_GetTick>
 800540a:	4602      	mov	r2, r0
 800540c:	69bb      	ldr	r3, [r7, #24]
 800540e:	1ad3      	subs	r3, r2, r3
 8005410:	683a      	ldr	r2, [r7, #0]
 8005412:	429a      	cmp	r2, r3
 8005414:	d302      	bcc.n	800541c <I2C_WaitOnFlagUntilTimeout+0x30>
 8005416:	683b      	ldr	r3, [r7, #0]
 8005418:	2b00      	cmp	r3, #0
 800541a:	d113      	bne.n	8005444 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005420:	f043 0220 	orr.w	r2, r3, #32
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	2220      	movs	r2, #32
 800542c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	2200      	movs	r2, #0
 8005434:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	2200      	movs	r2, #0
 800543c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8005440:	2301      	movs	r3, #1
 8005442:	e00f      	b.n	8005464 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	699a      	ldr	r2, [r3, #24]
 800544a:	68bb      	ldr	r3, [r7, #8]
 800544c:	4013      	ands	r3, r2
 800544e:	68ba      	ldr	r2, [r7, #8]
 8005450:	429a      	cmp	r2, r3
 8005452:	bf0c      	ite	eq
 8005454:	2301      	moveq	r3, #1
 8005456:	2300      	movne	r3, #0
 8005458:	b2db      	uxtb	r3, r3
 800545a:	461a      	mov	r2, r3
 800545c:	79fb      	ldrb	r3, [r7, #7]
 800545e:	429a      	cmp	r2, r3
 8005460:	d0cd      	beq.n	80053fe <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005462:	2300      	movs	r3, #0
}
 8005464:	4618      	mov	r0, r3
 8005466:	3710      	adds	r7, #16
 8005468:	46bd      	mov	sp, r7
 800546a:	bd80      	pop	{r7, pc}

0800546c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800546c:	b580      	push	{r7, lr}
 800546e:	b084      	sub	sp, #16
 8005470:	af00      	add	r7, sp, #0
 8005472:	60f8      	str	r0, [r7, #12]
 8005474:	60b9      	str	r1, [r7, #8]
 8005476:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005478:	e02c      	b.n	80054d4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800547a:	687a      	ldr	r2, [r7, #4]
 800547c:	68b9      	ldr	r1, [r7, #8]
 800547e:	68f8      	ldr	r0, [r7, #12]
 8005480:	f000 f870 	bl	8005564 <I2C_IsErrorOccurred>
 8005484:	4603      	mov	r3, r0
 8005486:	2b00      	cmp	r3, #0
 8005488:	d001      	beq.n	800548e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800548a:	2301      	movs	r3, #1
 800548c:	e02a      	b.n	80054e4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800548e:	68bb      	ldr	r3, [r7, #8]
 8005490:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005494:	d01e      	beq.n	80054d4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005496:	f7fd ffd1 	bl	800343c <HAL_GetTick>
 800549a:	4602      	mov	r2, r0
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	1ad3      	subs	r3, r2, r3
 80054a0:	68ba      	ldr	r2, [r7, #8]
 80054a2:	429a      	cmp	r2, r3
 80054a4:	d302      	bcc.n	80054ac <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80054a6:	68bb      	ldr	r3, [r7, #8]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d113      	bne.n	80054d4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054b0:	f043 0220 	orr.w	r2, r3, #32
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	2220      	movs	r2, #32
 80054bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	2200      	movs	r2, #0
 80054c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	2200      	movs	r2, #0
 80054cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80054d0:	2301      	movs	r3, #1
 80054d2:	e007      	b.n	80054e4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	699b      	ldr	r3, [r3, #24]
 80054da:	f003 0302 	and.w	r3, r3, #2
 80054de:	2b02      	cmp	r3, #2
 80054e0:	d1cb      	bne.n	800547a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80054e2:	2300      	movs	r3, #0
}
 80054e4:	4618      	mov	r0, r3
 80054e6:	3710      	adds	r7, #16
 80054e8:	46bd      	mov	sp, r7
 80054ea:	bd80      	pop	{r7, pc}

080054ec <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80054ec:	b580      	push	{r7, lr}
 80054ee:	b084      	sub	sp, #16
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	60f8      	str	r0, [r7, #12]
 80054f4:	60b9      	str	r1, [r7, #8]
 80054f6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80054f8:	e028      	b.n	800554c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80054fa:	687a      	ldr	r2, [r7, #4]
 80054fc:	68b9      	ldr	r1, [r7, #8]
 80054fe:	68f8      	ldr	r0, [r7, #12]
 8005500:	f000 f830 	bl	8005564 <I2C_IsErrorOccurred>
 8005504:	4603      	mov	r3, r0
 8005506:	2b00      	cmp	r3, #0
 8005508:	d001      	beq.n	800550e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800550a:	2301      	movs	r3, #1
 800550c:	e026      	b.n	800555c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800550e:	f7fd ff95 	bl	800343c <HAL_GetTick>
 8005512:	4602      	mov	r2, r0
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	1ad3      	subs	r3, r2, r3
 8005518:	68ba      	ldr	r2, [r7, #8]
 800551a:	429a      	cmp	r2, r3
 800551c:	d302      	bcc.n	8005524 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800551e:	68bb      	ldr	r3, [r7, #8]
 8005520:	2b00      	cmp	r3, #0
 8005522:	d113      	bne.n	800554c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005528:	f043 0220 	orr.w	r2, r3, #32
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	2220      	movs	r2, #32
 8005534:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	2200      	movs	r2, #0
 800553c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	2200      	movs	r2, #0
 8005544:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8005548:	2301      	movs	r3, #1
 800554a:	e007      	b.n	800555c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	699b      	ldr	r3, [r3, #24]
 8005552:	f003 0320 	and.w	r3, r3, #32
 8005556:	2b20      	cmp	r3, #32
 8005558:	d1cf      	bne.n	80054fa <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800555a:	2300      	movs	r3, #0
}
 800555c:	4618      	mov	r0, r3
 800555e:	3710      	adds	r7, #16
 8005560:	46bd      	mov	sp, r7
 8005562:	bd80      	pop	{r7, pc}

08005564 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005564:	b580      	push	{r7, lr}
 8005566:	b08a      	sub	sp, #40	; 0x28
 8005568:	af00      	add	r7, sp, #0
 800556a:	60f8      	str	r0, [r7, #12]
 800556c:	60b9      	str	r1, [r7, #8]
 800556e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005570:	2300      	movs	r3, #0
 8005572:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	699b      	ldr	r3, [r3, #24]
 800557c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800557e:	2300      	movs	r3, #0
 8005580:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8005586:	69bb      	ldr	r3, [r7, #24]
 8005588:	f003 0310 	and.w	r3, r3, #16
 800558c:	2b00      	cmp	r3, #0
 800558e:	d075      	beq.n	800567c <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	2210      	movs	r2, #16
 8005596:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005598:	e056      	b.n	8005648 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800559a:	68bb      	ldr	r3, [r7, #8]
 800559c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80055a0:	d052      	beq.n	8005648 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80055a2:	f7fd ff4b 	bl	800343c <HAL_GetTick>
 80055a6:	4602      	mov	r2, r0
 80055a8:	69fb      	ldr	r3, [r7, #28]
 80055aa:	1ad3      	subs	r3, r2, r3
 80055ac:	68ba      	ldr	r2, [r7, #8]
 80055ae:	429a      	cmp	r2, r3
 80055b0:	d302      	bcc.n	80055b8 <I2C_IsErrorOccurred+0x54>
 80055b2:	68bb      	ldr	r3, [r7, #8]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d147      	bne.n	8005648 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	685b      	ldr	r3, [r3, #4]
 80055be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80055c2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80055ca:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	699b      	ldr	r3, [r3, #24]
 80055d2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80055d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80055da:	d12e      	bne.n	800563a <I2C_IsErrorOccurred+0xd6>
 80055dc:	697b      	ldr	r3, [r7, #20]
 80055de:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80055e2:	d02a      	beq.n	800563a <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 80055e4:	7cfb      	ldrb	r3, [r7, #19]
 80055e6:	2b20      	cmp	r3, #32
 80055e8:	d027      	beq.n	800563a <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	685a      	ldr	r2, [r3, #4]
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80055f8:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80055fa:	f7fd ff1f 	bl	800343c <HAL_GetTick>
 80055fe:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005600:	e01b      	b.n	800563a <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8005602:	f7fd ff1b 	bl	800343c <HAL_GetTick>
 8005606:	4602      	mov	r2, r0
 8005608:	69fb      	ldr	r3, [r7, #28]
 800560a:	1ad3      	subs	r3, r2, r3
 800560c:	2b19      	cmp	r3, #25
 800560e:	d914      	bls.n	800563a <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005614:	f043 0220 	orr.w	r2, r3, #32
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	2220      	movs	r2, #32
 8005620:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	2200      	movs	r2, #0
 8005628:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	2200      	movs	r2, #0
 8005630:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8005634:	2301      	movs	r3, #1
 8005636:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	699b      	ldr	r3, [r3, #24]
 8005640:	f003 0320 	and.w	r3, r3, #32
 8005644:	2b20      	cmp	r3, #32
 8005646:	d1dc      	bne.n	8005602 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	699b      	ldr	r3, [r3, #24]
 800564e:	f003 0320 	and.w	r3, r3, #32
 8005652:	2b20      	cmp	r3, #32
 8005654:	d003      	beq.n	800565e <I2C_IsErrorOccurred+0xfa>
 8005656:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800565a:	2b00      	cmp	r3, #0
 800565c:	d09d      	beq.n	800559a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800565e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005662:	2b00      	cmp	r3, #0
 8005664:	d103      	bne.n	800566e <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	2220      	movs	r2, #32
 800566c:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800566e:	6a3b      	ldr	r3, [r7, #32]
 8005670:	f043 0304 	orr.w	r3, r3, #4
 8005674:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8005676:	2301      	movs	r3, #1
 8005678:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	699b      	ldr	r3, [r3, #24]
 8005682:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8005684:	69bb      	ldr	r3, [r7, #24]
 8005686:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800568a:	2b00      	cmp	r3, #0
 800568c:	d00b      	beq.n	80056a6 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800568e:	6a3b      	ldr	r3, [r7, #32]
 8005690:	f043 0301 	orr.w	r3, r3, #1
 8005694:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800569e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80056a0:	2301      	movs	r3, #1
 80056a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80056a6:	69bb      	ldr	r3, [r7, #24]
 80056a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d00b      	beq.n	80056c8 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80056b0:	6a3b      	ldr	r3, [r7, #32]
 80056b2:	f043 0308 	orr.w	r3, r3, #8
 80056b6:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80056c0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80056c2:	2301      	movs	r3, #1
 80056c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80056c8:	69bb      	ldr	r3, [r7, #24]
 80056ca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d00b      	beq.n	80056ea <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80056d2:	6a3b      	ldr	r3, [r7, #32]
 80056d4:	f043 0302 	orr.w	r3, r3, #2
 80056d8:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f44f 7200 	mov.w	r2, #512	; 0x200
 80056e2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80056e4:	2301      	movs	r3, #1
 80056e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80056ea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d01c      	beq.n	800572c <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80056f2:	68f8      	ldr	r0, [r7, #12]
 80056f4:	f7ff fe56 	bl	80053a4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	6859      	ldr	r1, [r3, #4]
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	681a      	ldr	r2, [r3, #0]
 8005702:	4b0d      	ldr	r3, [pc, #52]	; (8005738 <I2C_IsErrorOccurred+0x1d4>)
 8005704:	400b      	ands	r3, r1
 8005706:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800570c:	6a3b      	ldr	r3, [r7, #32]
 800570e:	431a      	orrs	r2, r3
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	2220      	movs	r2, #32
 8005718:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	2200      	movs	r2, #0
 8005720:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	2200      	movs	r2, #0
 8005728:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800572c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8005730:	4618      	mov	r0, r3
 8005732:	3728      	adds	r7, #40	; 0x28
 8005734:	46bd      	mov	sp, r7
 8005736:	bd80      	pop	{r7, pc}
 8005738:	fe00e800 	.word	0xfe00e800

0800573c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800573c:	b480      	push	{r7}
 800573e:	b087      	sub	sp, #28
 8005740:	af00      	add	r7, sp, #0
 8005742:	60f8      	str	r0, [r7, #12]
 8005744:	607b      	str	r3, [r7, #4]
 8005746:	460b      	mov	r3, r1
 8005748:	817b      	strh	r3, [r7, #10]
 800574a:	4613      	mov	r3, r2
 800574c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800574e:	897b      	ldrh	r3, [r7, #10]
 8005750:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005754:	7a7b      	ldrb	r3, [r7, #9]
 8005756:	041b      	lsls	r3, r3, #16
 8005758:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800575c:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005762:	6a3b      	ldr	r3, [r7, #32]
 8005764:	4313      	orrs	r3, r2
 8005766:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800576a:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	685a      	ldr	r2, [r3, #4]
 8005772:	6a3b      	ldr	r3, [r7, #32]
 8005774:	0d5b      	lsrs	r3, r3, #21
 8005776:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800577a:	4b08      	ldr	r3, [pc, #32]	; (800579c <I2C_TransferConfig+0x60>)
 800577c:	430b      	orrs	r3, r1
 800577e:	43db      	mvns	r3, r3
 8005780:	ea02 0103 	and.w	r1, r2, r3
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	697a      	ldr	r2, [r7, #20]
 800578a:	430a      	orrs	r2, r1
 800578c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800578e:	bf00      	nop
 8005790:	371c      	adds	r7, #28
 8005792:	46bd      	mov	sp, r7
 8005794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005798:	4770      	bx	lr
 800579a:	bf00      	nop
 800579c:	03ff63ff 	.word	0x03ff63ff

080057a0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80057a0:	b480      	push	{r7}
 80057a2:	b083      	sub	sp, #12
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]
 80057a8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80057b0:	b2db      	uxtb	r3, r3
 80057b2:	2b20      	cmp	r3, #32
 80057b4:	d138      	bne.n	8005828 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80057bc:	2b01      	cmp	r3, #1
 80057be:	d101      	bne.n	80057c4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80057c0:	2302      	movs	r3, #2
 80057c2:	e032      	b.n	800582a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2201      	movs	r2, #1
 80057c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2224      	movs	r2, #36	; 0x24
 80057d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	681a      	ldr	r2, [r3, #0]
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	f022 0201 	bic.w	r2, r2, #1
 80057e2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	681a      	ldr	r2, [r3, #0]
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80057f2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	6819      	ldr	r1, [r3, #0]
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	683a      	ldr	r2, [r7, #0]
 8005800:	430a      	orrs	r2, r1
 8005802:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	681a      	ldr	r2, [r3, #0]
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f042 0201 	orr.w	r2, r2, #1
 8005812:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2220      	movs	r2, #32
 8005818:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2200      	movs	r2, #0
 8005820:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005824:	2300      	movs	r3, #0
 8005826:	e000      	b.n	800582a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005828:	2302      	movs	r3, #2
  }
}
 800582a:	4618      	mov	r0, r3
 800582c:	370c      	adds	r7, #12
 800582e:	46bd      	mov	sp, r7
 8005830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005834:	4770      	bx	lr

08005836 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005836:	b480      	push	{r7}
 8005838:	b085      	sub	sp, #20
 800583a:	af00      	add	r7, sp, #0
 800583c:	6078      	str	r0, [r7, #4]
 800583e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005846:	b2db      	uxtb	r3, r3
 8005848:	2b20      	cmp	r3, #32
 800584a:	d139      	bne.n	80058c0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005852:	2b01      	cmp	r3, #1
 8005854:	d101      	bne.n	800585a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005856:	2302      	movs	r3, #2
 8005858:	e033      	b.n	80058c2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	2201      	movs	r2, #1
 800585e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	2224      	movs	r2, #36	; 0x24
 8005866:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	681a      	ldr	r2, [r3, #0]
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f022 0201 	bic.w	r2, r2, #1
 8005878:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005888:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800588a:	683b      	ldr	r3, [r7, #0]
 800588c:	021b      	lsls	r3, r3, #8
 800588e:	68fa      	ldr	r2, [r7, #12]
 8005890:	4313      	orrs	r3, r2
 8005892:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	68fa      	ldr	r2, [r7, #12]
 800589a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	681a      	ldr	r2, [r3, #0]
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	f042 0201 	orr.w	r2, r2, #1
 80058aa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2220      	movs	r2, #32
 80058b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2200      	movs	r2, #0
 80058b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80058bc:	2300      	movs	r3, #0
 80058be:	e000      	b.n	80058c2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80058c0:	2302      	movs	r3, #2
  }
}
 80058c2:	4618      	mov	r0, r3
 80058c4:	3714      	adds	r7, #20
 80058c6:	46bd      	mov	sp, r7
 80058c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058cc:	4770      	bx	lr

080058ce <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80058ce:	b5f0      	push	{r4, r5, r6, r7, lr}
 80058d0:	b08b      	sub	sp, #44	; 0x2c
 80058d2:	af06      	add	r7, sp, #24
 80058d4:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d101      	bne.n	80058e0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80058dc:	2301      	movs	r3, #1
 80058de:	e0d7      	b.n	8005a90 <HAL_PCD_Init+0x1c2>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80058e6:	b2db      	uxtb	r3, r3
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d106      	bne.n	80058fa <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2200      	movs	r2, #0
 80058f0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80058f4:	6878      	ldr	r0, [r7, #4]
 80058f6:	f00b fc93 	bl	8011220 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	2203      	movs	r2, #3
 80058fe:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	4618      	mov	r0, r3
 8005908:	f005 fc63 	bl	800b1d2 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800590c:	2300      	movs	r3, #0
 800590e:	73fb      	strb	r3, [r7, #15]
 8005910:	e04c      	b.n	80059ac <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005912:	7bfb      	ldrb	r3, [r7, #15]
 8005914:	6879      	ldr	r1, [r7, #4]
 8005916:	1c5a      	adds	r2, r3, #1
 8005918:	4613      	mov	r3, r2
 800591a:	009b      	lsls	r3, r3, #2
 800591c:	4413      	add	r3, r2
 800591e:	00db      	lsls	r3, r3, #3
 8005920:	440b      	add	r3, r1
 8005922:	3301      	adds	r3, #1
 8005924:	2201      	movs	r2, #1
 8005926:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005928:	7bfb      	ldrb	r3, [r7, #15]
 800592a:	6879      	ldr	r1, [r7, #4]
 800592c:	1c5a      	adds	r2, r3, #1
 800592e:	4613      	mov	r3, r2
 8005930:	009b      	lsls	r3, r3, #2
 8005932:	4413      	add	r3, r2
 8005934:	00db      	lsls	r3, r3, #3
 8005936:	440b      	add	r3, r1
 8005938:	7bfa      	ldrb	r2, [r7, #15]
 800593a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800593c:	7bfa      	ldrb	r2, [r7, #15]
 800593e:	7bfb      	ldrb	r3, [r7, #15]
 8005940:	b298      	uxth	r0, r3
 8005942:	6879      	ldr	r1, [r7, #4]
 8005944:	4613      	mov	r3, r2
 8005946:	009b      	lsls	r3, r3, #2
 8005948:	4413      	add	r3, r2
 800594a:	00db      	lsls	r3, r3, #3
 800594c:	440b      	add	r3, r1
 800594e:	3336      	adds	r3, #54	; 0x36
 8005950:	4602      	mov	r2, r0
 8005952:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005954:	7bfb      	ldrb	r3, [r7, #15]
 8005956:	6879      	ldr	r1, [r7, #4]
 8005958:	1c5a      	adds	r2, r3, #1
 800595a:	4613      	mov	r3, r2
 800595c:	009b      	lsls	r3, r3, #2
 800595e:	4413      	add	r3, r2
 8005960:	00db      	lsls	r3, r3, #3
 8005962:	440b      	add	r3, r1
 8005964:	3303      	adds	r3, #3
 8005966:	2200      	movs	r2, #0
 8005968:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800596a:	7bfa      	ldrb	r2, [r7, #15]
 800596c:	6879      	ldr	r1, [r7, #4]
 800596e:	4613      	mov	r3, r2
 8005970:	009b      	lsls	r3, r3, #2
 8005972:	4413      	add	r3, r2
 8005974:	00db      	lsls	r3, r3, #3
 8005976:	440b      	add	r3, r1
 8005978:	3338      	adds	r3, #56	; 0x38
 800597a:	2200      	movs	r2, #0
 800597c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800597e:	7bfa      	ldrb	r2, [r7, #15]
 8005980:	6879      	ldr	r1, [r7, #4]
 8005982:	4613      	mov	r3, r2
 8005984:	009b      	lsls	r3, r3, #2
 8005986:	4413      	add	r3, r2
 8005988:	00db      	lsls	r3, r3, #3
 800598a:	440b      	add	r3, r1
 800598c:	333c      	adds	r3, #60	; 0x3c
 800598e:	2200      	movs	r2, #0
 8005990:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005992:	7bfa      	ldrb	r2, [r7, #15]
 8005994:	6879      	ldr	r1, [r7, #4]
 8005996:	4613      	mov	r3, r2
 8005998:	009b      	lsls	r3, r3, #2
 800599a:	4413      	add	r3, r2
 800599c:	00db      	lsls	r3, r3, #3
 800599e:	440b      	add	r3, r1
 80059a0:	3340      	adds	r3, #64	; 0x40
 80059a2:	2200      	movs	r2, #0
 80059a4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80059a6:	7bfb      	ldrb	r3, [r7, #15]
 80059a8:	3301      	adds	r3, #1
 80059aa:	73fb      	strb	r3, [r7, #15]
 80059ac:	7bfa      	ldrb	r2, [r7, #15]
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	685b      	ldr	r3, [r3, #4]
 80059b2:	429a      	cmp	r2, r3
 80059b4:	d3ad      	bcc.n	8005912 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80059b6:	2300      	movs	r3, #0
 80059b8:	73fb      	strb	r3, [r7, #15]
 80059ba:	e044      	b.n	8005a46 <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80059bc:	7bfa      	ldrb	r2, [r7, #15]
 80059be:	6879      	ldr	r1, [r7, #4]
 80059c0:	4613      	mov	r3, r2
 80059c2:	009b      	lsls	r3, r3, #2
 80059c4:	4413      	add	r3, r2
 80059c6:	00db      	lsls	r3, r3, #3
 80059c8:	440b      	add	r3, r1
 80059ca:	f203 1369 	addw	r3, r3, #361	; 0x169
 80059ce:	2200      	movs	r2, #0
 80059d0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80059d2:	7bfa      	ldrb	r2, [r7, #15]
 80059d4:	6879      	ldr	r1, [r7, #4]
 80059d6:	4613      	mov	r3, r2
 80059d8:	009b      	lsls	r3, r3, #2
 80059da:	4413      	add	r3, r2
 80059dc:	00db      	lsls	r3, r3, #3
 80059de:	440b      	add	r3, r1
 80059e0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80059e4:	7bfa      	ldrb	r2, [r7, #15]
 80059e6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80059e8:	7bfa      	ldrb	r2, [r7, #15]
 80059ea:	6879      	ldr	r1, [r7, #4]
 80059ec:	4613      	mov	r3, r2
 80059ee:	009b      	lsls	r3, r3, #2
 80059f0:	4413      	add	r3, r2
 80059f2:	00db      	lsls	r3, r3, #3
 80059f4:	440b      	add	r3, r1
 80059f6:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80059fa:	2200      	movs	r2, #0
 80059fc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80059fe:	7bfa      	ldrb	r2, [r7, #15]
 8005a00:	6879      	ldr	r1, [r7, #4]
 8005a02:	4613      	mov	r3, r2
 8005a04:	009b      	lsls	r3, r3, #2
 8005a06:	4413      	add	r3, r2
 8005a08:	00db      	lsls	r3, r3, #3
 8005a0a:	440b      	add	r3, r1
 8005a0c:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8005a10:	2200      	movs	r2, #0
 8005a12:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005a14:	7bfa      	ldrb	r2, [r7, #15]
 8005a16:	6879      	ldr	r1, [r7, #4]
 8005a18:	4613      	mov	r3, r2
 8005a1a:	009b      	lsls	r3, r3, #2
 8005a1c:	4413      	add	r3, r2
 8005a1e:	00db      	lsls	r3, r3, #3
 8005a20:	440b      	add	r3, r1
 8005a22:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8005a26:	2200      	movs	r2, #0
 8005a28:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005a2a:	7bfa      	ldrb	r2, [r7, #15]
 8005a2c:	6879      	ldr	r1, [r7, #4]
 8005a2e:	4613      	mov	r3, r2
 8005a30:	009b      	lsls	r3, r3, #2
 8005a32:	4413      	add	r3, r2
 8005a34:	00db      	lsls	r3, r3, #3
 8005a36:	440b      	add	r3, r1
 8005a38:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005a40:	7bfb      	ldrb	r3, [r7, #15]
 8005a42:	3301      	adds	r3, #1
 8005a44:	73fb      	strb	r3, [r7, #15]
 8005a46:	7bfa      	ldrb	r2, [r7, #15]
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	685b      	ldr	r3, [r3, #4]
 8005a4c:	429a      	cmp	r2, r3
 8005a4e:	d3b5      	bcc.n	80059bc <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	603b      	str	r3, [r7, #0]
 8005a56:	687e      	ldr	r6, [r7, #4]
 8005a58:	466d      	mov	r5, sp
 8005a5a:	f106 0410 	add.w	r4, r6, #16
 8005a5e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005a60:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005a62:	6823      	ldr	r3, [r4, #0]
 8005a64:	602b      	str	r3, [r5, #0]
 8005a66:	1d33      	adds	r3, r6, #4
 8005a68:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005a6a:	6838      	ldr	r0, [r7, #0]
 8005a6c:	f005 fbcc 	bl	800b208 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2200      	movs	r2, #0
 8005a74:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2201      	movs	r2, #1
 8005a7c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	69db      	ldr	r3, [r3, #28]
 8005a84:	2b01      	cmp	r3, #1
 8005a86:	d102      	bne.n	8005a8e <HAL_PCD_Init+0x1c0>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8005a88:	6878      	ldr	r0, [r7, #4]
 8005a8a:	f001 fc29 	bl	80072e0 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8005a8e:	2300      	movs	r3, #0
}
 8005a90:	4618      	mov	r0, r3
 8005a92:	3714      	adds	r7, #20
 8005a94:	46bd      	mov	sp, r7
 8005a96:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005a98 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8005a98:	b580      	push	{r7, lr}
 8005a9a:	b082      	sub	sp, #8
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005aa6:	2b01      	cmp	r3, #1
 8005aa8:	d101      	bne.n	8005aae <HAL_PCD_Start+0x16>
 8005aaa:	2302      	movs	r3, #2
 8005aac:	e012      	b.n	8005ad4 <HAL_PCD_Start+0x3c>
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	2201      	movs	r2, #1
 8005ab2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	4618      	mov	r0, r3
 8005abc:	f005 fb72 	bl	800b1a4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	4618      	mov	r0, r3
 8005ac6:	f007 fd8b 	bl	800d5e0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	2200      	movs	r2, #0
 8005ace:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8005ad2:	2300      	movs	r3, #0
}
 8005ad4:	4618      	mov	r0, r3
 8005ad6:	3708      	adds	r7, #8
 8005ad8:	46bd      	mov	sp, r7
 8005ada:	bd80      	pop	{r7, pc}

08005adc <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8005adc:	b580      	push	{r7, lr}
 8005ade:	b084      	sub	sp, #16
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	4618      	mov	r0, r3
 8005aea:	f007 fd90 	bl	800d60e <USB_ReadInterrupts>
 8005aee:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d003      	beq.n	8005b02 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8005afa:	6878      	ldr	r0, [r7, #4]
 8005afc:	f000 fb26 	bl	800614c <PCD_EP_ISR_Handler>

    return;
 8005b00:	e110      	b.n	8005d24 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d013      	beq.n	8005b34 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005b14:	b29a      	uxth	r2, r3
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b1e:	b292      	uxth	r2, r2
 8005b20:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8005b24:	6878      	ldr	r0, [r7, #4]
 8005b26:	f00b fc0c 	bl	8011342 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8005b2a:	2100      	movs	r1, #0
 8005b2c:	6878      	ldr	r0, [r7, #4]
 8005b2e:	f000 f8fc 	bl	8005d2a <HAL_PCD_SetAddress>

    return;
 8005b32:	e0f7      	b.n	8005d24 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d00c      	beq.n	8005b58 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005b46:	b29a      	uxth	r2, r3
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005b50:	b292      	uxth	r2, r2
 8005b52:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8005b56:	e0e5      	b.n	8005d24 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d00c      	beq.n	8005b7c <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005b6a:	b29a      	uxth	r2, r3
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005b74:	b292      	uxth	r2, r2
 8005b76:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8005b7a:	e0d3      	b.n	8005d24 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d034      	beq.n	8005bf0 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005b8e:	b29a      	uxth	r2, r3
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f022 0204 	bic.w	r2, r2, #4
 8005b98:	b292      	uxth	r2, r2
 8005b9a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005ba6:	b29a      	uxth	r2, r3
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f022 0208 	bic.w	r2, r2, #8
 8005bb0:	b292      	uxth	r2, r2
 8005bb2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8005bbc:	2b01      	cmp	r3, #1
 8005bbe:	d107      	bne.n	8005bd0 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	2200      	movs	r2, #0
 8005bc4:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8005bc8:	2100      	movs	r1, #0
 8005bca:	6878      	ldr	r0, [r7, #4]
 8005bcc:	f00b fdae 	bl	801172c <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8005bd0:	6878      	ldr	r0, [r7, #4]
 8005bd2:	f00b fbef 	bl	80113b4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005bde:	b29a      	uxth	r2, r3
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005be8:	b292      	uxth	r2, r2
 8005bea:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8005bee:	e099      	b.n	8005d24 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d027      	beq.n	8005c4a <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005c02:	b29a      	uxth	r2, r3
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f042 0208 	orr.w	r2, r2, #8
 8005c0c:	b292      	uxth	r2, r2
 8005c0e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005c1a:	b29a      	uxth	r2, r3
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005c24:	b292      	uxth	r2, r2
 8005c26:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005c32:	b29a      	uxth	r2, r3
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	f042 0204 	orr.w	r2, r2, #4
 8005c3c:	b292      	uxth	r2, r2
 8005c3e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8005c42:	6878      	ldr	r0, [r7, #4]
 8005c44:	f00b fb9c 	bl	8011380 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8005c48:	e06c      	b.n	8005d24 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d040      	beq.n	8005cd6 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005c5c:	b29a      	uxth	r2, r3
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005c66:	b292      	uxth	r2, r2
 8005c68:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d12b      	bne.n	8005cce <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005c7e:	b29a      	uxth	r2, r3
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	f042 0204 	orr.w	r2, r2, #4
 8005c88:	b292      	uxth	r2, r2
 8005c8a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005c96:	b29a      	uxth	r2, r3
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	f042 0208 	orr.w	r2, r2, #8
 8005ca0:	b292      	uxth	r2, r2
 8005ca2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	2201      	movs	r2, #1
 8005caa:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8005cb6:	b29b      	uxth	r3, r3
 8005cb8:	089b      	lsrs	r3, r3, #2
 8005cba:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8005cc4:	2101      	movs	r1, #1
 8005cc6:	6878      	ldr	r0, [r7, #4]
 8005cc8:	f00b fd30 	bl	801172c <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8005ccc:	e02a      	b.n	8005d24 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8005cce:	6878      	ldr	r0, [r7, #4]
 8005cd0:	f00b fb56 	bl	8011380 <HAL_PCD_SuspendCallback>
    return;
 8005cd4:	e026      	b.n	8005d24 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d00f      	beq.n	8005d00 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005ce8:	b29a      	uxth	r2, r3
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005cf2:	b292      	uxth	r2, r2
 8005cf4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8005cf8:	6878      	ldr	r0, [r7, #4]
 8005cfa:	f00b fb14 	bl	8011326 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8005cfe:	e011      	b.n	8005d24 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d00c      	beq.n	8005d24 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005d12:	b29a      	uxth	r2, r3
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005d1c:	b292      	uxth	r2, r2
 8005d1e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8005d22:	bf00      	nop
  }
}
 8005d24:	3710      	adds	r7, #16
 8005d26:	46bd      	mov	sp, r7
 8005d28:	bd80      	pop	{r7, pc}

08005d2a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8005d2a:	b580      	push	{r7, lr}
 8005d2c:	b082      	sub	sp, #8
 8005d2e:	af00      	add	r7, sp, #0
 8005d30:	6078      	str	r0, [r7, #4]
 8005d32:	460b      	mov	r3, r1
 8005d34:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005d3c:	2b01      	cmp	r3, #1
 8005d3e:	d101      	bne.n	8005d44 <HAL_PCD_SetAddress+0x1a>
 8005d40:	2302      	movs	r3, #2
 8005d42:	e013      	b.n	8005d6c <HAL_PCD_SetAddress+0x42>
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	2201      	movs	r2, #1
 8005d48:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	78fa      	ldrb	r2, [r7, #3]
 8005d50:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	78fa      	ldrb	r2, [r7, #3]
 8005d5a:	4611      	mov	r1, r2
 8005d5c:	4618      	mov	r0, r3
 8005d5e:	f007 fc2b 	bl	800d5b8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	2200      	movs	r2, #0
 8005d66:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8005d6a:	2300      	movs	r3, #0
}
 8005d6c:	4618      	mov	r0, r3
 8005d6e:	3708      	adds	r7, #8
 8005d70:	46bd      	mov	sp, r7
 8005d72:	bd80      	pop	{r7, pc}

08005d74 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8005d74:	b580      	push	{r7, lr}
 8005d76:	b084      	sub	sp, #16
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	6078      	str	r0, [r7, #4]
 8005d7c:	4608      	mov	r0, r1
 8005d7e:	4611      	mov	r1, r2
 8005d80:	461a      	mov	r2, r3
 8005d82:	4603      	mov	r3, r0
 8005d84:	70fb      	strb	r3, [r7, #3]
 8005d86:	460b      	mov	r3, r1
 8005d88:	803b      	strh	r3, [r7, #0]
 8005d8a:	4613      	mov	r3, r2
 8005d8c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8005d8e:	2300      	movs	r3, #0
 8005d90:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005d92:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	da0e      	bge.n	8005db8 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005d9a:	78fb      	ldrb	r3, [r7, #3]
 8005d9c:	f003 0307 	and.w	r3, r3, #7
 8005da0:	1c5a      	adds	r2, r3, #1
 8005da2:	4613      	mov	r3, r2
 8005da4:	009b      	lsls	r3, r3, #2
 8005da6:	4413      	add	r3, r2
 8005da8:	00db      	lsls	r3, r3, #3
 8005daa:	687a      	ldr	r2, [r7, #4]
 8005dac:	4413      	add	r3, r2
 8005dae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	2201      	movs	r2, #1
 8005db4:	705a      	strb	r2, [r3, #1]
 8005db6:	e00e      	b.n	8005dd6 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005db8:	78fb      	ldrb	r3, [r7, #3]
 8005dba:	f003 0207 	and.w	r2, r3, #7
 8005dbe:	4613      	mov	r3, r2
 8005dc0:	009b      	lsls	r3, r3, #2
 8005dc2:	4413      	add	r3, r2
 8005dc4:	00db      	lsls	r3, r3, #3
 8005dc6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005dca:	687a      	ldr	r2, [r7, #4]
 8005dcc:	4413      	add	r3, r2
 8005dce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	2200      	movs	r2, #0
 8005dd4:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8005dd6:	78fb      	ldrb	r3, [r7, #3]
 8005dd8:	f003 0307 	and.w	r3, r3, #7
 8005ddc:	b2da      	uxtb	r2, r3
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8005de2:	883a      	ldrh	r2, [r7, #0]
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	78ba      	ldrb	r2, [r7, #2]
 8005dec:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	785b      	ldrb	r3, [r3, #1]
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d004      	beq.n	8005e00 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	781b      	ldrb	r3, [r3, #0]
 8005dfa:	b29a      	uxth	r2, r3
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8005e00:	78bb      	ldrb	r3, [r7, #2]
 8005e02:	2b02      	cmp	r3, #2
 8005e04:	d102      	bne.n	8005e0c <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	2200      	movs	r2, #0
 8005e0a:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005e12:	2b01      	cmp	r3, #1
 8005e14:	d101      	bne.n	8005e1a <HAL_PCD_EP_Open+0xa6>
 8005e16:	2302      	movs	r3, #2
 8005e18:	e00e      	b.n	8005e38 <HAL_PCD_EP_Open+0xc4>
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	2201      	movs	r2, #1
 8005e1e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	68f9      	ldr	r1, [r7, #12]
 8005e28:	4618      	mov	r0, r3
 8005e2a:	f005 fa0f 	bl	800b24c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	2200      	movs	r2, #0
 8005e32:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8005e36:	7afb      	ldrb	r3, [r7, #11]
}
 8005e38:	4618      	mov	r0, r3
 8005e3a:	3710      	adds	r7, #16
 8005e3c:	46bd      	mov	sp, r7
 8005e3e:	bd80      	pop	{r7, pc}

08005e40 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005e40:	b580      	push	{r7, lr}
 8005e42:	b084      	sub	sp, #16
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]
 8005e48:	460b      	mov	r3, r1
 8005e4a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005e4c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	da0e      	bge.n	8005e72 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005e54:	78fb      	ldrb	r3, [r7, #3]
 8005e56:	f003 0307 	and.w	r3, r3, #7
 8005e5a:	1c5a      	adds	r2, r3, #1
 8005e5c:	4613      	mov	r3, r2
 8005e5e:	009b      	lsls	r3, r3, #2
 8005e60:	4413      	add	r3, r2
 8005e62:	00db      	lsls	r3, r3, #3
 8005e64:	687a      	ldr	r2, [r7, #4]
 8005e66:	4413      	add	r3, r2
 8005e68:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	2201      	movs	r2, #1
 8005e6e:	705a      	strb	r2, [r3, #1]
 8005e70:	e00e      	b.n	8005e90 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005e72:	78fb      	ldrb	r3, [r7, #3]
 8005e74:	f003 0207 	and.w	r2, r3, #7
 8005e78:	4613      	mov	r3, r2
 8005e7a:	009b      	lsls	r3, r3, #2
 8005e7c:	4413      	add	r3, r2
 8005e7e:	00db      	lsls	r3, r3, #3
 8005e80:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005e84:	687a      	ldr	r2, [r7, #4]
 8005e86:	4413      	add	r3, r2
 8005e88:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8005e90:	78fb      	ldrb	r3, [r7, #3]
 8005e92:	f003 0307 	and.w	r3, r3, #7
 8005e96:	b2da      	uxtb	r2, r3
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005ea2:	2b01      	cmp	r3, #1
 8005ea4:	d101      	bne.n	8005eaa <HAL_PCD_EP_Close+0x6a>
 8005ea6:	2302      	movs	r3, #2
 8005ea8:	e00e      	b.n	8005ec8 <HAL_PCD_EP_Close+0x88>
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	2201      	movs	r2, #1
 8005eae:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	68f9      	ldr	r1, [r7, #12]
 8005eb8:	4618      	mov	r0, r3
 8005eba:	f005 fd5b 	bl	800b974 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	2200      	movs	r2, #0
 8005ec2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8005ec6:	2300      	movs	r3, #0
}
 8005ec8:	4618      	mov	r0, r3
 8005eca:	3710      	adds	r7, #16
 8005ecc:	46bd      	mov	sp, r7
 8005ece:	bd80      	pop	{r7, pc}

08005ed0 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005ed0:	b580      	push	{r7, lr}
 8005ed2:	b086      	sub	sp, #24
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	60f8      	str	r0, [r7, #12]
 8005ed8:	607a      	str	r2, [r7, #4]
 8005eda:	603b      	str	r3, [r7, #0]
 8005edc:	460b      	mov	r3, r1
 8005ede:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005ee0:	7afb      	ldrb	r3, [r7, #11]
 8005ee2:	f003 0207 	and.w	r2, r3, #7
 8005ee6:	4613      	mov	r3, r2
 8005ee8:	009b      	lsls	r3, r3, #2
 8005eea:	4413      	add	r3, r2
 8005eec:	00db      	lsls	r3, r3, #3
 8005eee:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005ef2:	68fa      	ldr	r2, [r7, #12]
 8005ef4:	4413      	add	r3, r2
 8005ef6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005ef8:	697b      	ldr	r3, [r7, #20]
 8005efa:	687a      	ldr	r2, [r7, #4]
 8005efc:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8005efe:	697b      	ldr	r3, [r7, #20]
 8005f00:	683a      	ldr	r2, [r7, #0]
 8005f02:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8005f04:	697b      	ldr	r3, [r7, #20]
 8005f06:	2200      	movs	r2, #0
 8005f08:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8005f0a:	697b      	ldr	r3, [r7, #20]
 8005f0c:	2200      	movs	r2, #0
 8005f0e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005f10:	7afb      	ldrb	r3, [r7, #11]
 8005f12:	f003 0307 	and.w	r3, r3, #7
 8005f16:	b2da      	uxtb	r2, r3
 8005f18:	697b      	ldr	r3, [r7, #20]
 8005f1a:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005f1c:	7afb      	ldrb	r3, [r7, #11]
 8005f1e:	f003 0307 	and.w	r3, r3, #7
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d106      	bne.n	8005f34 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	6979      	ldr	r1, [r7, #20]
 8005f2c:	4618      	mov	r0, r3
 8005f2e:	f005 ff0e 	bl	800bd4e <USB_EPStartXfer>
 8005f32:	e005      	b.n	8005f40 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	6979      	ldr	r1, [r7, #20]
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	f005 ff07 	bl	800bd4e <USB_EPStartXfer>
  }

  return HAL_OK;
 8005f40:	2300      	movs	r3, #0
}
 8005f42:	4618      	mov	r0, r3
 8005f44:	3718      	adds	r7, #24
 8005f46:	46bd      	mov	sp, r7
 8005f48:	bd80      	pop	{r7, pc}

08005f4a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005f4a:	b480      	push	{r7}
 8005f4c:	b083      	sub	sp, #12
 8005f4e:	af00      	add	r7, sp, #0
 8005f50:	6078      	str	r0, [r7, #4]
 8005f52:	460b      	mov	r3, r1
 8005f54:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8005f56:	78fb      	ldrb	r3, [r7, #3]
 8005f58:	f003 0207 	and.w	r2, r3, #7
 8005f5c:	6879      	ldr	r1, [r7, #4]
 8005f5e:	4613      	mov	r3, r2
 8005f60:	009b      	lsls	r3, r3, #2
 8005f62:	4413      	add	r3, r2
 8005f64:	00db      	lsls	r3, r3, #3
 8005f66:	440b      	add	r3, r1
 8005f68:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8005f6c:	681b      	ldr	r3, [r3, #0]
}
 8005f6e:	4618      	mov	r0, r3
 8005f70:	370c      	adds	r7, #12
 8005f72:	46bd      	mov	sp, r7
 8005f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f78:	4770      	bx	lr

08005f7a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005f7a:	b580      	push	{r7, lr}
 8005f7c:	b086      	sub	sp, #24
 8005f7e:	af00      	add	r7, sp, #0
 8005f80:	60f8      	str	r0, [r7, #12]
 8005f82:	607a      	str	r2, [r7, #4]
 8005f84:	603b      	str	r3, [r7, #0]
 8005f86:	460b      	mov	r3, r1
 8005f88:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005f8a:	7afb      	ldrb	r3, [r7, #11]
 8005f8c:	f003 0307 	and.w	r3, r3, #7
 8005f90:	1c5a      	adds	r2, r3, #1
 8005f92:	4613      	mov	r3, r2
 8005f94:	009b      	lsls	r3, r3, #2
 8005f96:	4413      	add	r3, r2
 8005f98:	00db      	lsls	r3, r3, #3
 8005f9a:	68fa      	ldr	r2, [r7, #12]
 8005f9c:	4413      	add	r3, r2
 8005f9e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005fa0:	697b      	ldr	r3, [r7, #20]
 8005fa2:	687a      	ldr	r2, [r7, #4]
 8005fa4:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8005fa6:	697b      	ldr	r3, [r7, #20]
 8005fa8:	683a      	ldr	r2, [r7, #0]
 8005faa:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8005fac:	697b      	ldr	r3, [r7, #20]
 8005fae:	2201      	movs	r2, #1
 8005fb0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8005fb4:	697b      	ldr	r3, [r7, #20]
 8005fb6:	683a      	ldr	r2, [r7, #0]
 8005fb8:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8005fba:	697b      	ldr	r3, [r7, #20]
 8005fbc:	2200      	movs	r2, #0
 8005fbe:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8005fc0:	697b      	ldr	r3, [r7, #20]
 8005fc2:	2201      	movs	r2, #1
 8005fc4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005fc6:	7afb      	ldrb	r3, [r7, #11]
 8005fc8:	f003 0307 	and.w	r3, r3, #7
 8005fcc:	b2da      	uxtb	r2, r3
 8005fce:	697b      	ldr	r3, [r7, #20]
 8005fd0:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005fd2:	7afb      	ldrb	r3, [r7, #11]
 8005fd4:	f003 0307 	and.w	r3, r3, #7
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d106      	bne.n	8005fea <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	6979      	ldr	r1, [r7, #20]
 8005fe2:	4618      	mov	r0, r3
 8005fe4:	f005 feb3 	bl	800bd4e <USB_EPStartXfer>
 8005fe8:	e005      	b.n	8005ff6 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	6979      	ldr	r1, [r7, #20]
 8005ff0:	4618      	mov	r0, r3
 8005ff2:	f005 feac 	bl	800bd4e <USB_EPStartXfer>
  }

  return HAL_OK;
 8005ff6:	2300      	movs	r3, #0
}
 8005ff8:	4618      	mov	r0, r3
 8005ffa:	3718      	adds	r7, #24
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	bd80      	pop	{r7, pc}

08006000 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006000:	b580      	push	{r7, lr}
 8006002:	b084      	sub	sp, #16
 8006004:	af00      	add	r7, sp, #0
 8006006:	6078      	str	r0, [r7, #4]
 8006008:	460b      	mov	r3, r1
 800600a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800600c:	78fb      	ldrb	r3, [r7, #3]
 800600e:	f003 0207 	and.w	r2, r3, #7
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	685b      	ldr	r3, [r3, #4]
 8006016:	429a      	cmp	r2, r3
 8006018:	d901      	bls.n	800601e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800601a:	2301      	movs	r3, #1
 800601c:	e03e      	b.n	800609c <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800601e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006022:	2b00      	cmp	r3, #0
 8006024:	da0e      	bge.n	8006044 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006026:	78fb      	ldrb	r3, [r7, #3]
 8006028:	f003 0307 	and.w	r3, r3, #7
 800602c:	1c5a      	adds	r2, r3, #1
 800602e:	4613      	mov	r3, r2
 8006030:	009b      	lsls	r3, r3, #2
 8006032:	4413      	add	r3, r2
 8006034:	00db      	lsls	r3, r3, #3
 8006036:	687a      	ldr	r2, [r7, #4]
 8006038:	4413      	add	r3, r2
 800603a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	2201      	movs	r2, #1
 8006040:	705a      	strb	r2, [r3, #1]
 8006042:	e00c      	b.n	800605e <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006044:	78fa      	ldrb	r2, [r7, #3]
 8006046:	4613      	mov	r3, r2
 8006048:	009b      	lsls	r3, r3, #2
 800604a:	4413      	add	r3, r2
 800604c:	00db      	lsls	r3, r3, #3
 800604e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8006052:	687a      	ldr	r2, [r7, #4]
 8006054:	4413      	add	r3, r2
 8006056:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	2200      	movs	r2, #0
 800605c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	2201      	movs	r2, #1
 8006062:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006064:	78fb      	ldrb	r3, [r7, #3]
 8006066:	f003 0307 	and.w	r3, r3, #7
 800606a:	b2da      	uxtb	r2, r3
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006076:	2b01      	cmp	r3, #1
 8006078:	d101      	bne.n	800607e <HAL_PCD_EP_SetStall+0x7e>
 800607a:	2302      	movs	r3, #2
 800607c:	e00e      	b.n	800609c <HAL_PCD_EP_SetStall+0x9c>
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	2201      	movs	r2, #1
 8006082:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	68f9      	ldr	r1, [r7, #12]
 800608c:	4618      	mov	r0, r3
 800608e:	f007 f994 	bl	800d3ba <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	2200      	movs	r2, #0
 8006096:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800609a:	2300      	movs	r3, #0
}
 800609c:	4618      	mov	r0, r3
 800609e:	3710      	adds	r7, #16
 80060a0:	46bd      	mov	sp, r7
 80060a2:	bd80      	pop	{r7, pc}

080060a4 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80060a4:	b580      	push	{r7, lr}
 80060a6:	b084      	sub	sp, #16
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	6078      	str	r0, [r7, #4]
 80060ac:	460b      	mov	r3, r1
 80060ae:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80060b0:	78fb      	ldrb	r3, [r7, #3]
 80060b2:	f003 020f 	and.w	r2, r3, #15
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	685b      	ldr	r3, [r3, #4]
 80060ba:	429a      	cmp	r2, r3
 80060bc:	d901      	bls.n	80060c2 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80060be:	2301      	movs	r3, #1
 80060c0:	e040      	b.n	8006144 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80060c2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	da0e      	bge.n	80060e8 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80060ca:	78fb      	ldrb	r3, [r7, #3]
 80060cc:	f003 0307 	and.w	r3, r3, #7
 80060d0:	1c5a      	adds	r2, r3, #1
 80060d2:	4613      	mov	r3, r2
 80060d4:	009b      	lsls	r3, r3, #2
 80060d6:	4413      	add	r3, r2
 80060d8:	00db      	lsls	r3, r3, #3
 80060da:	687a      	ldr	r2, [r7, #4]
 80060dc:	4413      	add	r3, r2
 80060de:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	2201      	movs	r2, #1
 80060e4:	705a      	strb	r2, [r3, #1]
 80060e6:	e00e      	b.n	8006106 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80060e8:	78fb      	ldrb	r3, [r7, #3]
 80060ea:	f003 0207 	and.w	r2, r3, #7
 80060ee:	4613      	mov	r3, r2
 80060f0:	009b      	lsls	r3, r3, #2
 80060f2:	4413      	add	r3, r2
 80060f4:	00db      	lsls	r3, r3, #3
 80060f6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80060fa:	687a      	ldr	r2, [r7, #4]
 80060fc:	4413      	add	r3, r2
 80060fe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	2200      	movs	r2, #0
 8006104:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	2200      	movs	r2, #0
 800610a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800610c:	78fb      	ldrb	r3, [r7, #3]
 800610e:	f003 0307 	and.w	r3, r3, #7
 8006112:	b2da      	uxtb	r2, r3
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800611e:	2b01      	cmp	r3, #1
 8006120:	d101      	bne.n	8006126 <HAL_PCD_EP_ClrStall+0x82>
 8006122:	2302      	movs	r3, #2
 8006124:	e00e      	b.n	8006144 <HAL_PCD_EP_ClrStall+0xa0>
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	2201      	movs	r2, #1
 800612a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	68f9      	ldr	r1, [r7, #12]
 8006134:	4618      	mov	r0, r3
 8006136:	f007 f991 	bl	800d45c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	2200      	movs	r2, #0
 800613e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8006142:	2300      	movs	r3, #0
}
 8006144:	4618      	mov	r0, r3
 8006146:	3710      	adds	r7, #16
 8006148:	46bd      	mov	sp, r7
 800614a:	bd80      	pop	{r7, pc}

0800614c <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800614c:	b580      	push	{r7, lr}
 800614e:	b096      	sub	sp, #88	; 0x58
 8006150:	af00      	add	r7, sp, #0
 8006152:	6078      	str	r0, [r7, #4]
  uint16_t wEPVal;
  uint16_t TxPctSize;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8006154:	e39c      	b.n	8006890 <PCD_EP_ISR_Handler+0x744>
  {
    wIstr = hpcd->Instance->ISTR;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800615e:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8006162:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006166:	b2db      	uxtb	r3, r3
 8006168:	f003 030f 	and.w	r3, r3, #15
 800616c:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55

    if (epindex == 0U)
 8006170:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8006174:	2b00      	cmp	r3, #0
 8006176:	f040 815e 	bne.w	8006436 <PCD_EP_ISR_Handler+0x2ea>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800617a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800617e:	f003 0310 	and.w	r3, r3, #16
 8006182:	2b00      	cmp	r3, #0
 8006184:	d150      	bne.n	8006228 <PCD_EP_ISR_Handler+0xdc>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	881b      	ldrh	r3, [r3, #0]
 800618c:	b29b      	uxth	r3, r3
 800618e:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8006192:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006196:	81fb      	strh	r3, [r7, #14]
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681a      	ldr	r2, [r3, #0]
 800619c:	89fb      	ldrh	r3, [r7, #14]
 800619e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80061a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80061a6:	b29b      	uxth	r3, r3
 80061a8:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	3328      	adds	r3, #40	; 0x28
 80061ae:	64fb      	str	r3, [r7, #76]	; 0x4c

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80061b8:	b29b      	uxth	r3, r3
 80061ba:	461a      	mov	r2, r3
 80061bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80061be:	781b      	ldrb	r3, [r3, #0]
 80061c0:	00db      	lsls	r3, r3, #3
 80061c2:	4413      	add	r3, r2
 80061c4:	687a      	ldr	r2, [r7, #4]
 80061c6:	6812      	ldr	r2, [r2, #0]
 80061c8:	4413      	add	r3, r2
 80061ca:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80061ce:	881b      	ldrh	r3, [r3, #0]
 80061d0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80061d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80061d6:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80061d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80061da:	695a      	ldr	r2, [r3, #20]
 80061dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80061de:	69db      	ldr	r3, [r3, #28]
 80061e0:	441a      	add	r2, r3
 80061e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80061e4:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80061e6:	2100      	movs	r1, #0
 80061e8:	6878      	ldr	r0, [r7, #4]
 80061ea:	f00b f882 	bl	80112f2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80061f4:	b2db      	uxtb	r3, r3
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	f000 834a 	beq.w	8006890 <PCD_EP_ISR_Handler+0x744>
 80061fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80061fe:	699b      	ldr	r3, [r3, #24]
 8006200:	2b00      	cmp	r3, #0
 8006202:	f040 8345 	bne.w	8006890 <PCD_EP_ISR_Handler+0x744>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800620c:	b2db      	uxtb	r3, r3
 800620e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006212:	b2da      	uxtb	r2, r3
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	b292      	uxth	r2, r2
 800621a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	2200      	movs	r2, #0
 8006222:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8006226:	e333      	b.n	8006890 <PCD_EP_ISR_Handler+0x744>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800622e:	64fb      	str	r3, [r7, #76]	; 0x4c
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	881b      	ldrh	r3, [r3, #0]
 8006236:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800623a:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800623e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006242:	2b00      	cmp	r3, #0
 8006244:	d032      	beq.n	80062ac <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800624e:	b29b      	uxth	r3, r3
 8006250:	461a      	mov	r2, r3
 8006252:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006254:	781b      	ldrb	r3, [r3, #0]
 8006256:	00db      	lsls	r3, r3, #3
 8006258:	4413      	add	r3, r2
 800625a:	687a      	ldr	r2, [r7, #4]
 800625c:	6812      	ldr	r2, [r2, #0]
 800625e:	4413      	add	r3, r2
 8006260:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006264:	881b      	ldrh	r3, [r3, #0]
 8006266:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800626a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800626c:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	6818      	ldr	r0, [r3, #0]
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8006278:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800627a:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800627c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800627e:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8006280:	b29b      	uxth	r3, r3
 8006282:	f007 fa16 	bl	800d6b2 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	881b      	ldrh	r3, [r3, #0]
 800628c:	b29a      	uxth	r2, r3
 800628e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8006292:	4013      	ands	r3, r2
 8006294:	823b      	strh	r3, [r7, #16]
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	8a3a      	ldrh	r2, [r7, #16]
 800629c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80062a0:	b292      	uxth	r2, r2
 80062a2:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80062a4:	6878      	ldr	r0, [r7, #4]
 80062a6:	f00a fff7 	bl	8011298 <HAL_PCD_SetupStageCallback>
 80062aa:	e2f1      	b.n	8006890 <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80062ac:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	f280 82ed 	bge.w	8006890 <PCD_EP_ISR_Handler+0x744>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	881b      	ldrh	r3, [r3, #0]
 80062bc:	b29a      	uxth	r2, r3
 80062be:	f640 738f 	movw	r3, #3983	; 0xf8f
 80062c2:	4013      	ands	r3, r2
 80062c4:	83fb      	strh	r3, [r7, #30]
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	8bfa      	ldrh	r2, [r7, #30]
 80062cc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80062d0:	b292      	uxth	r2, r2
 80062d2:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80062dc:	b29b      	uxth	r3, r3
 80062de:	461a      	mov	r2, r3
 80062e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80062e2:	781b      	ldrb	r3, [r3, #0]
 80062e4:	00db      	lsls	r3, r3, #3
 80062e6:	4413      	add	r3, r2
 80062e8:	687a      	ldr	r2, [r7, #4]
 80062ea:	6812      	ldr	r2, [r2, #0]
 80062ec:	4413      	add	r3, r2
 80062ee:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80062f2:	881b      	ldrh	r3, [r3, #0]
 80062f4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80062f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80062fa:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80062fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80062fe:	69db      	ldr	r3, [r3, #28]
 8006300:	2b00      	cmp	r3, #0
 8006302:	d019      	beq.n	8006338 <PCD_EP_ISR_Handler+0x1ec>
 8006304:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006306:	695b      	ldr	r3, [r3, #20]
 8006308:	2b00      	cmp	r3, #0
 800630a:	d015      	beq.n	8006338 <PCD_EP_ISR_Handler+0x1ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	6818      	ldr	r0, [r3, #0]
 8006310:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006312:	6959      	ldr	r1, [r3, #20]
 8006314:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006316:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8006318:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800631a:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800631c:	b29b      	uxth	r3, r3
 800631e:	f007 f9c8 	bl	800d6b2 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8006322:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006324:	695a      	ldr	r2, [r3, #20]
 8006326:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006328:	69db      	ldr	r3, [r3, #28]
 800632a:	441a      	add	r2, r3
 800632c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800632e:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8006330:	2100      	movs	r1, #0
 8006332:	6878      	ldr	r0, [r7, #4]
 8006334:	f00a ffc2 	bl	80112bc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	881b      	ldrh	r3, [r3, #0]
 800633e:	b29b      	uxth	r3, r3
 8006340:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006344:	2b00      	cmp	r3, #0
 8006346:	f040 82a3 	bne.w	8006890 <PCD_EP_ISR_Handler+0x744>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	61bb      	str	r3, [r7, #24]
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006358:	b29b      	uxth	r3, r3
 800635a:	461a      	mov	r2, r3
 800635c:	69bb      	ldr	r3, [r7, #24]
 800635e:	4413      	add	r3, r2
 8006360:	61bb      	str	r3, [r7, #24]
 8006362:	69bb      	ldr	r3, [r7, #24]
 8006364:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006368:	617b      	str	r3, [r7, #20]
 800636a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800636c:	691b      	ldr	r3, [r3, #16]
 800636e:	2b3e      	cmp	r3, #62	; 0x3e
 8006370:	d918      	bls.n	80063a4 <PCD_EP_ISR_Handler+0x258>
 8006372:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006374:	691b      	ldr	r3, [r3, #16]
 8006376:	095b      	lsrs	r3, r3, #5
 8006378:	647b      	str	r3, [r7, #68]	; 0x44
 800637a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800637c:	691b      	ldr	r3, [r3, #16]
 800637e:	f003 031f 	and.w	r3, r3, #31
 8006382:	2b00      	cmp	r3, #0
 8006384:	d102      	bne.n	800638c <PCD_EP_ISR_Handler+0x240>
 8006386:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006388:	3b01      	subs	r3, #1
 800638a:	647b      	str	r3, [r7, #68]	; 0x44
 800638c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800638e:	b29b      	uxth	r3, r3
 8006390:	029b      	lsls	r3, r3, #10
 8006392:	b29b      	uxth	r3, r3
 8006394:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006398:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800639c:	b29a      	uxth	r2, r3
 800639e:	697b      	ldr	r3, [r7, #20]
 80063a0:	801a      	strh	r2, [r3, #0]
 80063a2:	e029      	b.n	80063f8 <PCD_EP_ISR_Handler+0x2ac>
 80063a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80063a6:	691b      	ldr	r3, [r3, #16]
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d112      	bne.n	80063d2 <PCD_EP_ISR_Handler+0x286>
 80063ac:	697b      	ldr	r3, [r7, #20]
 80063ae:	881b      	ldrh	r3, [r3, #0]
 80063b0:	b29b      	uxth	r3, r3
 80063b2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80063b6:	b29a      	uxth	r2, r3
 80063b8:	697b      	ldr	r3, [r7, #20]
 80063ba:	801a      	strh	r2, [r3, #0]
 80063bc:	697b      	ldr	r3, [r7, #20]
 80063be:	881b      	ldrh	r3, [r3, #0]
 80063c0:	b29b      	uxth	r3, r3
 80063c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80063c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80063ca:	b29a      	uxth	r2, r3
 80063cc:	697b      	ldr	r3, [r7, #20]
 80063ce:	801a      	strh	r2, [r3, #0]
 80063d0:	e012      	b.n	80063f8 <PCD_EP_ISR_Handler+0x2ac>
 80063d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80063d4:	691b      	ldr	r3, [r3, #16]
 80063d6:	085b      	lsrs	r3, r3, #1
 80063d8:	647b      	str	r3, [r7, #68]	; 0x44
 80063da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80063dc:	691b      	ldr	r3, [r3, #16]
 80063de:	f003 0301 	and.w	r3, r3, #1
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d002      	beq.n	80063ec <PCD_EP_ISR_Handler+0x2a0>
 80063e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80063e8:	3301      	adds	r3, #1
 80063ea:	647b      	str	r3, [r7, #68]	; 0x44
 80063ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80063ee:	b29b      	uxth	r3, r3
 80063f0:	029b      	lsls	r3, r3, #10
 80063f2:	b29a      	uxth	r2, r3
 80063f4:	697b      	ldr	r3, [r7, #20]
 80063f6:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	881b      	ldrh	r3, [r3, #0]
 80063fe:	b29b      	uxth	r3, r3
 8006400:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006404:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006408:	827b      	strh	r3, [r7, #18]
 800640a:	8a7b      	ldrh	r3, [r7, #18]
 800640c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006410:	827b      	strh	r3, [r7, #18]
 8006412:	8a7b      	ldrh	r3, [r7, #18]
 8006414:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006418:	827b      	strh	r3, [r7, #18]
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681a      	ldr	r2, [r3, #0]
 800641e:	8a7b      	ldrh	r3, [r7, #18]
 8006420:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006424:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006428:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800642c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006430:	b29b      	uxth	r3, r3
 8006432:	8013      	strh	r3, [r2, #0]
 8006434:	e22c      	b.n	8006890 <PCD_EP_ISR_Handler+0x744>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	461a      	mov	r2, r3
 800643c:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8006440:	009b      	lsls	r3, r3, #2
 8006442:	4413      	add	r3, r2
 8006444:	881b      	ldrh	r3, [r3, #0]
 8006446:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800644a:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 800644e:	2b00      	cmp	r3, #0
 8006450:	f280 80f6 	bge.w	8006640 <PCD_EP_ISR_Handler+0x4f4>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	461a      	mov	r2, r3
 800645a:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800645e:	009b      	lsls	r3, r3, #2
 8006460:	4413      	add	r3, r2
 8006462:	881b      	ldrh	r3, [r3, #0]
 8006464:	b29a      	uxth	r2, r3
 8006466:	f640 738f 	movw	r3, #3983	; 0xf8f
 800646a:	4013      	ands	r3, r2
 800646c:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	461a      	mov	r2, r3
 8006476:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800647a:	009b      	lsls	r3, r3, #2
 800647c:	4413      	add	r3, r2
 800647e:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8006482:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006486:	b292      	uxth	r2, r2
 8006488:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800648a:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 800648e:	4613      	mov	r3, r2
 8006490:	009b      	lsls	r3, r3, #2
 8006492:	4413      	add	r3, r2
 8006494:	00db      	lsls	r3, r3, #3
 8006496:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800649a:	687a      	ldr	r2, [r7, #4]
 800649c:	4413      	add	r3, r2
 800649e:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80064a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80064a2:	7b1b      	ldrb	r3, [r3, #12]
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d123      	bne.n	80064f0 <PCD_EP_ISR_Handler+0x3a4>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80064b0:	b29b      	uxth	r3, r3
 80064b2:	461a      	mov	r2, r3
 80064b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80064b6:	781b      	ldrb	r3, [r3, #0]
 80064b8:	00db      	lsls	r3, r3, #3
 80064ba:	4413      	add	r3, r2
 80064bc:	687a      	ldr	r2, [r7, #4]
 80064be:	6812      	ldr	r2, [r2, #0]
 80064c0:	4413      	add	r3, r2
 80064c2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80064c6:	881b      	ldrh	r3, [r3, #0]
 80064c8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80064cc:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

          if (count != 0U)
 80064d0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	f000 808e 	beq.w	80065f6 <PCD_EP_ISR_Handler+0x4aa>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	6818      	ldr	r0, [r3, #0]
 80064de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80064e0:	6959      	ldr	r1, [r3, #20]
 80064e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80064e4:	88da      	ldrh	r2, [r3, #6]
 80064e6:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80064ea:	f007 f8e2 	bl	800d6b2 <USB_ReadPMA>
 80064ee:	e082      	b.n	80065f6 <PCD_EP_ISR_Handler+0x4aa>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80064f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80064f2:	78db      	ldrb	r3, [r3, #3]
 80064f4:	2b02      	cmp	r3, #2
 80064f6:	d10a      	bne.n	800650e <PCD_EP_ISR_Handler+0x3c2>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80064f8:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80064fc:	461a      	mov	r2, r3
 80064fe:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8006500:	6878      	ldr	r0, [r7, #4]
 8006502:	f000 f9d3 	bl	80068ac <HAL_PCD_EP_DB_Receive>
 8006506:	4603      	mov	r3, r0
 8006508:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800650c:	e073      	b.n	80065f6 <PCD_EP_ISR_Handler+0x4aa>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	461a      	mov	r2, r3
 8006514:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006516:	781b      	ldrb	r3, [r3, #0]
 8006518:	009b      	lsls	r3, r3, #2
 800651a:	4413      	add	r3, r2
 800651c:	881b      	ldrh	r3, [r3, #0]
 800651e:	b29b      	uxth	r3, r3
 8006520:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006524:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006528:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	461a      	mov	r2, r3
 8006532:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006534:	781b      	ldrb	r3, [r3, #0]
 8006536:	009b      	lsls	r3, r3, #2
 8006538:	441a      	add	r2, r3
 800653a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800653e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006542:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006546:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800654a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800654e:	b29b      	uxth	r3, r3
 8006550:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	461a      	mov	r2, r3
 8006558:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800655a:	781b      	ldrb	r3, [r3, #0]
 800655c:	009b      	lsls	r3, r3, #2
 800655e:	4413      	add	r3, r2
 8006560:	881b      	ldrh	r3, [r3, #0]
 8006562:	b29b      	uxth	r3, r3
 8006564:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006568:	2b00      	cmp	r3, #0
 800656a:	d022      	beq.n	80065b2 <PCD_EP_ISR_Handler+0x466>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006574:	b29b      	uxth	r3, r3
 8006576:	461a      	mov	r2, r3
 8006578:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800657a:	781b      	ldrb	r3, [r3, #0]
 800657c:	00db      	lsls	r3, r3, #3
 800657e:	4413      	add	r3, r2
 8006580:	687a      	ldr	r2, [r7, #4]
 8006582:	6812      	ldr	r2, [r2, #0]
 8006584:	4413      	add	r3, r2
 8006586:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800658a:	881b      	ldrh	r3, [r3, #0]
 800658c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006590:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 8006594:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8006598:	2b00      	cmp	r3, #0
 800659a:	d02c      	beq.n	80065f6 <PCD_EP_ISR_Handler+0x4aa>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	6818      	ldr	r0, [r3, #0]
 80065a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80065a2:	6959      	ldr	r1, [r3, #20]
 80065a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80065a6:	891a      	ldrh	r2, [r3, #8]
 80065a8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80065ac:	f007 f881 	bl	800d6b2 <USB_ReadPMA>
 80065b0:	e021      	b.n	80065f6 <PCD_EP_ISR_Handler+0x4aa>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80065ba:	b29b      	uxth	r3, r3
 80065bc:	461a      	mov	r2, r3
 80065be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80065c0:	781b      	ldrb	r3, [r3, #0]
 80065c2:	00db      	lsls	r3, r3, #3
 80065c4:	4413      	add	r3, r2
 80065c6:	687a      	ldr	r2, [r7, #4]
 80065c8:	6812      	ldr	r2, [r2, #0]
 80065ca:	4413      	add	r3, r2
 80065cc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80065d0:	881b      	ldrh	r3, [r3, #0]
 80065d2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80065d6:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 80065da:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d009      	beq.n	80065f6 <PCD_EP_ISR_Handler+0x4aa>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	6818      	ldr	r0, [r3, #0]
 80065e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80065e8:	6959      	ldr	r1, [r3, #20]
 80065ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80065ec:	895a      	ldrh	r2, [r3, #10]
 80065ee:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80065f2:	f007 f85e 	bl	800d6b2 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80065f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80065f8:	69da      	ldr	r2, [r3, #28]
 80065fa:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80065fe:	441a      	add	r2, r3
 8006600:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006602:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8006604:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006606:	695a      	ldr	r2, [r3, #20]
 8006608:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800660c:	441a      	add	r2, r3
 800660e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006610:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8006612:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006614:	699b      	ldr	r3, [r3, #24]
 8006616:	2b00      	cmp	r3, #0
 8006618:	d005      	beq.n	8006626 <PCD_EP_ISR_Handler+0x4da>
 800661a:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 800661e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006620:	691b      	ldr	r3, [r3, #16]
 8006622:	429a      	cmp	r2, r3
 8006624:	d206      	bcs.n	8006634 <PCD_EP_ISR_Handler+0x4e8>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8006626:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006628:	781b      	ldrb	r3, [r3, #0]
 800662a:	4619      	mov	r1, r3
 800662c:	6878      	ldr	r0, [r7, #4]
 800662e:	f00a fe45 	bl	80112bc <HAL_PCD_DataOutStageCallback>
 8006632:	e005      	b.n	8006640 <PCD_EP_ISR_Handler+0x4f4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800663a:	4618      	mov	r0, r3
 800663c:	f005 fb87 	bl	800bd4e <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8006640:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8006644:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006648:	2b00      	cmp	r3, #0
 800664a:	f000 8121 	beq.w	8006890 <PCD_EP_ISR_Handler+0x744>
      {
        ep = &hpcd->IN_ep[epindex];
 800664e:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8006652:	1c5a      	adds	r2, r3, #1
 8006654:	4613      	mov	r3, r2
 8006656:	009b      	lsls	r3, r3, #2
 8006658:	4413      	add	r3, r2
 800665a:	00db      	lsls	r3, r3, #3
 800665c:	687a      	ldr	r2, [r7, #4]
 800665e:	4413      	add	r3, r2
 8006660:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	461a      	mov	r2, r3
 8006668:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800666c:	009b      	lsls	r3, r3, #2
 800666e:	4413      	add	r3, r2
 8006670:	881b      	ldrh	r3, [r3, #0]
 8006672:	b29b      	uxth	r3, r3
 8006674:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8006678:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800667c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	461a      	mov	r2, r3
 8006686:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800668a:	009b      	lsls	r3, r3, #2
 800668c:	441a      	add	r2, r3
 800668e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8006692:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006696:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800669a:	b29b      	uxth	r3, r3
 800669c:	8013      	strh	r3, [r2, #0]

        if (ep->type != EP_TYPE_BULK)
 800669e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80066a0:	78db      	ldrb	r3, [r3, #3]
 80066a2:	2b02      	cmp	r3, #2
 80066a4:	f000 80a2 	beq.w	80067ec <PCD_EP_ISR_Handler+0x6a0>
        {
          ep->xfer_len = 0U;
 80066a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80066aa:	2200      	movs	r2, #0
 80066ac:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 80066ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80066b0:	7b1b      	ldrb	r3, [r3, #12]
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	f000 8093 	beq.w	80067de <PCD_EP_ISR_Handler+0x692>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80066b8:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80066bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d046      	beq.n	8006752 <PCD_EP_ISR_Handler+0x606>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80066c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80066c6:	785b      	ldrb	r3, [r3, #1]
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d126      	bne.n	800671a <PCD_EP_ISR_Handler+0x5ce>
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	627b      	str	r3, [r7, #36]	; 0x24
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80066da:	b29b      	uxth	r3, r3
 80066dc:	461a      	mov	r2, r3
 80066de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066e0:	4413      	add	r3, r2
 80066e2:	627b      	str	r3, [r7, #36]	; 0x24
 80066e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80066e6:	781b      	ldrb	r3, [r3, #0]
 80066e8:	00da      	lsls	r2, r3, #3
 80066ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066ec:	4413      	add	r3, r2
 80066ee:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80066f2:	623b      	str	r3, [r7, #32]
 80066f4:	6a3b      	ldr	r3, [r7, #32]
 80066f6:	881b      	ldrh	r3, [r3, #0]
 80066f8:	b29b      	uxth	r3, r3
 80066fa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80066fe:	b29a      	uxth	r2, r3
 8006700:	6a3b      	ldr	r3, [r7, #32]
 8006702:	801a      	strh	r2, [r3, #0]
 8006704:	6a3b      	ldr	r3, [r7, #32]
 8006706:	881b      	ldrh	r3, [r3, #0]
 8006708:	b29b      	uxth	r3, r3
 800670a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800670e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006712:	b29a      	uxth	r2, r3
 8006714:	6a3b      	ldr	r3, [r7, #32]
 8006716:	801a      	strh	r2, [r3, #0]
 8006718:	e061      	b.n	80067de <PCD_EP_ISR_Handler+0x692>
 800671a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800671c:	785b      	ldrb	r3, [r3, #1]
 800671e:	2b01      	cmp	r3, #1
 8006720:	d15d      	bne.n	80067de <PCD_EP_ISR_Handler+0x692>
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006730:	b29b      	uxth	r3, r3
 8006732:	461a      	mov	r2, r3
 8006734:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006736:	4413      	add	r3, r2
 8006738:	62fb      	str	r3, [r7, #44]	; 0x2c
 800673a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800673c:	781b      	ldrb	r3, [r3, #0]
 800673e:	00da      	lsls	r2, r3, #3
 8006740:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006742:	4413      	add	r3, r2
 8006744:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006748:	62bb      	str	r3, [r7, #40]	; 0x28
 800674a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800674c:	2200      	movs	r2, #0
 800674e:	801a      	strh	r2, [r3, #0]
 8006750:	e045      	b.n	80067de <PCD_EP_ISR_Handler+0x692>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006758:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800675a:	785b      	ldrb	r3, [r3, #1]
 800675c:	2b00      	cmp	r3, #0
 800675e:	d126      	bne.n	80067ae <PCD_EP_ISR_Handler+0x662>
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	637b      	str	r3, [r7, #52]	; 0x34
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800676e:	b29b      	uxth	r3, r3
 8006770:	461a      	mov	r2, r3
 8006772:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006774:	4413      	add	r3, r2
 8006776:	637b      	str	r3, [r7, #52]	; 0x34
 8006778:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800677a:	781b      	ldrb	r3, [r3, #0]
 800677c:	00da      	lsls	r2, r3, #3
 800677e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006780:	4413      	add	r3, r2
 8006782:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006786:	633b      	str	r3, [r7, #48]	; 0x30
 8006788:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800678a:	881b      	ldrh	r3, [r3, #0]
 800678c:	b29b      	uxth	r3, r3
 800678e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006792:	b29a      	uxth	r2, r3
 8006794:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006796:	801a      	strh	r2, [r3, #0]
 8006798:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800679a:	881b      	ldrh	r3, [r3, #0]
 800679c:	b29b      	uxth	r3, r3
 800679e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80067a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80067a6:	b29a      	uxth	r2, r3
 80067a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067aa:	801a      	strh	r2, [r3, #0]
 80067ac:	e017      	b.n	80067de <PCD_EP_ISR_Handler+0x692>
 80067ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80067b0:	785b      	ldrb	r3, [r3, #1]
 80067b2:	2b01      	cmp	r3, #1
 80067b4:	d113      	bne.n	80067de <PCD_EP_ISR_Handler+0x692>
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80067be:	b29b      	uxth	r3, r3
 80067c0:	461a      	mov	r2, r3
 80067c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067c4:	4413      	add	r3, r2
 80067c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80067c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80067ca:	781b      	ldrb	r3, [r3, #0]
 80067cc:	00da      	lsls	r2, r3, #3
 80067ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067d0:	4413      	add	r3, r2
 80067d2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80067d6:	63bb      	str	r3, [r7, #56]	; 0x38
 80067d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067da:	2200      	movs	r2, #0
 80067dc:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80067de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80067e0:	781b      	ldrb	r3, [r3, #0]
 80067e2:	4619      	mov	r1, r3
 80067e4:	6878      	ldr	r0, [r7, #4]
 80067e6:	f00a fd84 	bl	80112f2 <HAL_PCD_DataInStageCallback>
 80067ea:	e051      	b.n	8006890 <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Bulk Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 80067ec:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80067f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d144      	bne.n	8006882 <PCD_EP_ISR_Handler+0x736>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006800:	b29b      	uxth	r3, r3
 8006802:	461a      	mov	r2, r3
 8006804:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006806:	781b      	ldrb	r3, [r3, #0]
 8006808:	00db      	lsls	r3, r3, #3
 800680a:	4413      	add	r3, r2
 800680c:	687a      	ldr	r2, [r7, #4]
 800680e:	6812      	ldr	r2, [r2, #0]
 8006810:	4413      	add	r3, r2
 8006812:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006816:	881b      	ldrh	r3, [r3, #0]
 8006818:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800681c:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8006820:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006822:	699a      	ldr	r2, [r3, #24]
 8006824:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006828:	429a      	cmp	r2, r3
 800682a:	d907      	bls.n	800683c <PCD_EP_ISR_Handler+0x6f0>
            {
              ep->xfer_len -= TxPctSize;
 800682c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800682e:	699a      	ldr	r2, [r3, #24]
 8006830:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006834:	1ad2      	subs	r2, r2, r3
 8006836:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006838:	619a      	str	r2, [r3, #24]
 800683a:	e002      	b.n	8006842 <PCD_EP_ISR_Handler+0x6f6>
            }
            else
            {
              ep->xfer_len = 0U;
 800683c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800683e:	2200      	movs	r2, #0
 8006840:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8006842:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006844:	699b      	ldr	r3, [r3, #24]
 8006846:	2b00      	cmp	r3, #0
 8006848:	d106      	bne.n	8006858 <PCD_EP_ISR_Handler+0x70c>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800684a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800684c:	781b      	ldrb	r3, [r3, #0]
 800684e:	4619      	mov	r1, r3
 8006850:	6878      	ldr	r0, [r7, #4]
 8006852:	f00a fd4e 	bl	80112f2 <HAL_PCD_DataInStageCallback>
 8006856:	e01b      	b.n	8006890 <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8006858:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800685a:	695a      	ldr	r2, [r3, #20]
 800685c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006860:	441a      	add	r2, r3
 8006862:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006864:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8006866:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006868:	69da      	ldr	r2, [r3, #28]
 800686a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800686e:	441a      	add	r2, r3
 8006870:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006872:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800687a:	4618      	mov	r0, r3
 800687c:	f005 fa67 	bl	800bd4e <USB_EPStartXfer>
 8006880:	e006      	b.n	8006890 <PCD_EP_ISR_Handler+0x744>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8006882:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8006886:	461a      	mov	r2, r3
 8006888:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800688a:	6878      	ldr	r0, [r7, #4]
 800688c:	f000 f917 	bl	8006abe <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006898:	b29b      	uxth	r3, r3
 800689a:	b21b      	sxth	r3, r3
 800689c:	2b00      	cmp	r3, #0
 800689e:	f6ff ac5a 	blt.w	8006156 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80068a2:	2300      	movs	r3, #0
}
 80068a4:	4618      	mov	r0, r3
 80068a6:	3758      	adds	r7, #88	; 0x58
 80068a8:	46bd      	mov	sp, r7
 80068aa:	bd80      	pop	{r7, pc}

080068ac <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80068ac:	b580      	push	{r7, lr}
 80068ae:	b088      	sub	sp, #32
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	60f8      	str	r0, [r7, #12]
 80068b4:	60b9      	str	r1, [r7, #8]
 80068b6:	4613      	mov	r3, r2
 80068b8:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80068ba:	88fb      	ldrh	r3, [r7, #6]
 80068bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d07c      	beq.n	80069be <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80068cc:	b29b      	uxth	r3, r3
 80068ce:	461a      	mov	r2, r3
 80068d0:	68bb      	ldr	r3, [r7, #8]
 80068d2:	781b      	ldrb	r3, [r3, #0]
 80068d4:	00db      	lsls	r3, r3, #3
 80068d6:	4413      	add	r3, r2
 80068d8:	68fa      	ldr	r2, [r7, #12]
 80068da:	6812      	ldr	r2, [r2, #0]
 80068dc:	4413      	add	r3, r2
 80068de:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80068e2:	881b      	ldrh	r3, [r3, #0]
 80068e4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80068e8:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80068ea:	68bb      	ldr	r3, [r7, #8]
 80068ec:	699a      	ldr	r2, [r3, #24]
 80068ee:	8b7b      	ldrh	r3, [r7, #26]
 80068f0:	429a      	cmp	r2, r3
 80068f2:	d306      	bcc.n	8006902 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 80068f4:	68bb      	ldr	r3, [r7, #8]
 80068f6:	699a      	ldr	r2, [r3, #24]
 80068f8:	8b7b      	ldrh	r3, [r7, #26]
 80068fa:	1ad2      	subs	r2, r2, r3
 80068fc:	68bb      	ldr	r3, [r7, #8]
 80068fe:	619a      	str	r2, [r3, #24]
 8006900:	e002      	b.n	8006908 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8006902:	68bb      	ldr	r3, [r7, #8]
 8006904:	2200      	movs	r2, #0
 8006906:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8006908:	68bb      	ldr	r3, [r7, #8]
 800690a:	699b      	ldr	r3, [r3, #24]
 800690c:	2b00      	cmp	r3, #0
 800690e:	d123      	bne.n	8006958 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	461a      	mov	r2, r3
 8006916:	68bb      	ldr	r3, [r7, #8]
 8006918:	781b      	ldrb	r3, [r3, #0]
 800691a:	009b      	lsls	r3, r3, #2
 800691c:	4413      	add	r3, r2
 800691e:	881b      	ldrh	r3, [r3, #0]
 8006920:	b29b      	uxth	r3, r3
 8006922:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006926:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800692a:	833b      	strh	r3, [r7, #24]
 800692c:	8b3b      	ldrh	r3, [r7, #24]
 800692e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006932:	833b      	strh	r3, [r7, #24]
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	461a      	mov	r2, r3
 800693a:	68bb      	ldr	r3, [r7, #8]
 800693c:	781b      	ldrb	r3, [r3, #0]
 800693e:	009b      	lsls	r3, r3, #2
 8006940:	441a      	add	r2, r3
 8006942:	8b3b      	ldrh	r3, [r7, #24]
 8006944:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006948:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800694c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006950:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006954:	b29b      	uxth	r3, r3
 8006956:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8006958:	88fb      	ldrh	r3, [r7, #6]
 800695a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800695e:	2b00      	cmp	r3, #0
 8006960:	d01f      	beq.n	80069a2 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	461a      	mov	r2, r3
 8006968:	68bb      	ldr	r3, [r7, #8]
 800696a:	781b      	ldrb	r3, [r3, #0]
 800696c:	009b      	lsls	r3, r3, #2
 800696e:	4413      	add	r3, r2
 8006970:	881b      	ldrh	r3, [r3, #0]
 8006972:	b29b      	uxth	r3, r3
 8006974:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006978:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800697c:	82fb      	strh	r3, [r7, #22]
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	461a      	mov	r2, r3
 8006984:	68bb      	ldr	r3, [r7, #8]
 8006986:	781b      	ldrb	r3, [r3, #0]
 8006988:	009b      	lsls	r3, r3, #2
 800698a:	441a      	add	r2, r3
 800698c:	8afb      	ldrh	r3, [r7, #22]
 800698e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006992:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006996:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800699a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800699e:	b29b      	uxth	r3, r3
 80069a0:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80069a2:	8b7b      	ldrh	r3, [r7, #26]
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	f000 8085 	beq.w	8006ab4 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	6818      	ldr	r0, [r3, #0]
 80069ae:	68bb      	ldr	r3, [r7, #8]
 80069b0:	6959      	ldr	r1, [r3, #20]
 80069b2:	68bb      	ldr	r3, [r7, #8]
 80069b4:	891a      	ldrh	r2, [r3, #8]
 80069b6:	8b7b      	ldrh	r3, [r7, #26]
 80069b8:	f006 fe7b 	bl	800d6b2 <USB_ReadPMA>
 80069bc:	e07a      	b.n	8006ab4 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80069c6:	b29b      	uxth	r3, r3
 80069c8:	461a      	mov	r2, r3
 80069ca:	68bb      	ldr	r3, [r7, #8]
 80069cc:	781b      	ldrb	r3, [r3, #0]
 80069ce:	00db      	lsls	r3, r3, #3
 80069d0:	4413      	add	r3, r2
 80069d2:	68fa      	ldr	r2, [r7, #12]
 80069d4:	6812      	ldr	r2, [r2, #0]
 80069d6:	4413      	add	r3, r2
 80069d8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80069dc:	881b      	ldrh	r3, [r3, #0]
 80069de:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80069e2:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80069e4:	68bb      	ldr	r3, [r7, #8]
 80069e6:	699a      	ldr	r2, [r3, #24]
 80069e8:	8b7b      	ldrh	r3, [r7, #26]
 80069ea:	429a      	cmp	r2, r3
 80069ec:	d306      	bcc.n	80069fc <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 80069ee:	68bb      	ldr	r3, [r7, #8]
 80069f0:	699a      	ldr	r2, [r3, #24]
 80069f2:	8b7b      	ldrh	r3, [r7, #26]
 80069f4:	1ad2      	subs	r2, r2, r3
 80069f6:	68bb      	ldr	r3, [r7, #8]
 80069f8:	619a      	str	r2, [r3, #24]
 80069fa:	e002      	b.n	8006a02 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 80069fc:	68bb      	ldr	r3, [r7, #8]
 80069fe:	2200      	movs	r2, #0
 8006a00:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8006a02:	68bb      	ldr	r3, [r7, #8]
 8006a04:	699b      	ldr	r3, [r3, #24]
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d123      	bne.n	8006a52 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	461a      	mov	r2, r3
 8006a10:	68bb      	ldr	r3, [r7, #8]
 8006a12:	781b      	ldrb	r3, [r3, #0]
 8006a14:	009b      	lsls	r3, r3, #2
 8006a16:	4413      	add	r3, r2
 8006a18:	881b      	ldrh	r3, [r3, #0]
 8006a1a:	b29b      	uxth	r3, r3
 8006a1c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006a20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a24:	83fb      	strh	r3, [r7, #30]
 8006a26:	8bfb      	ldrh	r3, [r7, #30]
 8006a28:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006a2c:	83fb      	strh	r3, [r7, #30]
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	461a      	mov	r2, r3
 8006a34:	68bb      	ldr	r3, [r7, #8]
 8006a36:	781b      	ldrb	r3, [r3, #0]
 8006a38:	009b      	lsls	r3, r3, #2
 8006a3a:	441a      	add	r2, r3
 8006a3c:	8bfb      	ldrh	r3, [r7, #30]
 8006a3e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a42:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a46:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a4e:	b29b      	uxth	r3, r3
 8006a50:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8006a52:	88fb      	ldrh	r3, [r7, #6]
 8006a54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d11f      	bne.n	8006a9c <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	461a      	mov	r2, r3
 8006a62:	68bb      	ldr	r3, [r7, #8]
 8006a64:	781b      	ldrb	r3, [r3, #0]
 8006a66:	009b      	lsls	r3, r3, #2
 8006a68:	4413      	add	r3, r2
 8006a6a:	881b      	ldrh	r3, [r3, #0]
 8006a6c:	b29b      	uxth	r3, r3
 8006a6e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a76:	83bb      	strh	r3, [r7, #28]
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	461a      	mov	r2, r3
 8006a7e:	68bb      	ldr	r3, [r7, #8]
 8006a80:	781b      	ldrb	r3, [r3, #0]
 8006a82:	009b      	lsls	r3, r3, #2
 8006a84:	441a      	add	r2, r3
 8006a86:	8bbb      	ldrh	r3, [r7, #28]
 8006a88:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a8c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a90:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a94:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006a98:	b29b      	uxth	r3, r3
 8006a9a:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8006a9c:	8b7b      	ldrh	r3, [r7, #26]
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d008      	beq.n	8006ab4 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	6818      	ldr	r0, [r3, #0]
 8006aa6:	68bb      	ldr	r3, [r7, #8]
 8006aa8:	6959      	ldr	r1, [r3, #20]
 8006aaa:	68bb      	ldr	r3, [r7, #8]
 8006aac:	895a      	ldrh	r2, [r3, #10]
 8006aae:	8b7b      	ldrh	r3, [r7, #26]
 8006ab0:	f006 fdff 	bl	800d6b2 <USB_ReadPMA>
    }
  }

  return count;
 8006ab4:	8b7b      	ldrh	r3, [r7, #26]
}
 8006ab6:	4618      	mov	r0, r3
 8006ab8:	3720      	adds	r7, #32
 8006aba:	46bd      	mov	sp, r7
 8006abc:	bd80      	pop	{r7, pc}

08006abe <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8006abe:	b580      	push	{r7, lr}
 8006ac0:	b0a2      	sub	sp, #136	; 0x88
 8006ac2:	af00      	add	r7, sp, #0
 8006ac4:	60f8      	str	r0, [r7, #12]
 8006ac6:	60b9      	str	r1, [r7, #8]
 8006ac8:	4613      	mov	r3, r2
 8006aca:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8006acc:	88fb      	ldrh	r3, [r7, #6]
 8006ace:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	f000 81c5 	beq.w	8006e62 <HAL_PCD_EP_DB_Transmit+0x3a4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ae0:	b29b      	uxth	r3, r3
 8006ae2:	461a      	mov	r2, r3
 8006ae4:	68bb      	ldr	r3, [r7, #8]
 8006ae6:	781b      	ldrb	r3, [r3, #0]
 8006ae8:	00db      	lsls	r3, r3, #3
 8006aea:	4413      	add	r3, r2
 8006aec:	68fa      	ldr	r2, [r7, #12]
 8006aee:	6812      	ldr	r2, [r2, #0]
 8006af0:	4413      	add	r3, r2
 8006af2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006af6:	881b      	ldrh	r3, [r3, #0]
 8006af8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006afc:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxPctSize)
 8006b00:	68bb      	ldr	r3, [r7, #8]
 8006b02:	699a      	ldr	r2, [r3, #24]
 8006b04:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006b08:	429a      	cmp	r2, r3
 8006b0a:	d907      	bls.n	8006b1c <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8006b0c:	68bb      	ldr	r3, [r7, #8]
 8006b0e:	699a      	ldr	r2, [r3, #24]
 8006b10:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006b14:	1ad2      	subs	r2, r2, r3
 8006b16:	68bb      	ldr	r3, [r7, #8]
 8006b18:	619a      	str	r2, [r3, #24]
 8006b1a:	e002      	b.n	8006b22 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8006b1c:	68bb      	ldr	r3, [r7, #8]
 8006b1e:	2200      	movs	r2, #0
 8006b20:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8006b22:	68bb      	ldr	r3, [r7, #8]
 8006b24:	699b      	ldr	r3, [r3, #24]
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	f040 80b9 	bne.w	8006c9e <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006b2c:	68bb      	ldr	r3, [r7, #8]
 8006b2e:	785b      	ldrb	r3, [r3, #1]
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d126      	bne.n	8006b82 <HAL_PCD_EP_DB_Transmit+0xc4>
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	62bb      	str	r3, [r7, #40]	; 0x28
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006b42:	b29b      	uxth	r3, r3
 8006b44:	461a      	mov	r2, r3
 8006b46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b48:	4413      	add	r3, r2
 8006b4a:	62bb      	str	r3, [r7, #40]	; 0x28
 8006b4c:	68bb      	ldr	r3, [r7, #8]
 8006b4e:	781b      	ldrb	r3, [r3, #0]
 8006b50:	00da      	lsls	r2, r3, #3
 8006b52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b54:	4413      	add	r3, r2
 8006b56:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006b5a:	627b      	str	r3, [r7, #36]	; 0x24
 8006b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b5e:	881b      	ldrh	r3, [r3, #0]
 8006b60:	b29b      	uxth	r3, r3
 8006b62:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006b66:	b29a      	uxth	r2, r3
 8006b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b6a:	801a      	strh	r2, [r3, #0]
 8006b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b6e:	881b      	ldrh	r3, [r3, #0]
 8006b70:	b29b      	uxth	r3, r3
 8006b72:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b76:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b7a:	b29a      	uxth	r2, r3
 8006b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b7e:	801a      	strh	r2, [r3, #0]
 8006b80:	e01a      	b.n	8006bb8 <HAL_PCD_EP_DB_Transmit+0xfa>
 8006b82:	68bb      	ldr	r3, [r7, #8]
 8006b84:	785b      	ldrb	r3, [r3, #1]
 8006b86:	2b01      	cmp	r3, #1
 8006b88:	d116      	bne.n	8006bb8 <HAL_PCD_EP_DB_Transmit+0xfa>
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	633b      	str	r3, [r7, #48]	; 0x30
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006b98:	b29b      	uxth	r3, r3
 8006b9a:	461a      	mov	r2, r3
 8006b9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b9e:	4413      	add	r3, r2
 8006ba0:	633b      	str	r3, [r7, #48]	; 0x30
 8006ba2:	68bb      	ldr	r3, [r7, #8]
 8006ba4:	781b      	ldrb	r3, [r3, #0]
 8006ba6:	00da      	lsls	r2, r3, #3
 8006ba8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006baa:	4413      	add	r3, r2
 8006bac:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006bb0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006bb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bb4:	2200      	movs	r2, #0
 8006bb6:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	623b      	str	r3, [r7, #32]
 8006bbe:	68bb      	ldr	r3, [r7, #8]
 8006bc0:	785b      	ldrb	r3, [r3, #1]
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d126      	bne.n	8006c14 <HAL_PCD_EP_DB_Transmit+0x156>
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	61bb      	str	r3, [r7, #24]
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006bd4:	b29b      	uxth	r3, r3
 8006bd6:	461a      	mov	r2, r3
 8006bd8:	69bb      	ldr	r3, [r7, #24]
 8006bda:	4413      	add	r3, r2
 8006bdc:	61bb      	str	r3, [r7, #24]
 8006bde:	68bb      	ldr	r3, [r7, #8]
 8006be0:	781b      	ldrb	r3, [r3, #0]
 8006be2:	00da      	lsls	r2, r3, #3
 8006be4:	69bb      	ldr	r3, [r7, #24]
 8006be6:	4413      	add	r3, r2
 8006be8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006bec:	617b      	str	r3, [r7, #20]
 8006bee:	697b      	ldr	r3, [r7, #20]
 8006bf0:	881b      	ldrh	r3, [r3, #0]
 8006bf2:	b29b      	uxth	r3, r3
 8006bf4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006bf8:	b29a      	uxth	r2, r3
 8006bfa:	697b      	ldr	r3, [r7, #20]
 8006bfc:	801a      	strh	r2, [r3, #0]
 8006bfe:	697b      	ldr	r3, [r7, #20]
 8006c00:	881b      	ldrh	r3, [r3, #0]
 8006c02:	b29b      	uxth	r3, r3
 8006c04:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c08:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c0c:	b29a      	uxth	r2, r3
 8006c0e:	697b      	ldr	r3, [r7, #20]
 8006c10:	801a      	strh	r2, [r3, #0]
 8006c12:	e017      	b.n	8006c44 <HAL_PCD_EP_DB_Transmit+0x186>
 8006c14:	68bb      	ldr	r3, [r7, #8]
 8006c16:	785b      	ldrb	r3, [r3, #1]
 8006c18:	2b01      	cmp	r3, #1
 8006c1a:	d113      	bne.n	8006c44 <HAL_PCD_EP_DB_Transmit+0x186>
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c24:	b29b      	uxth	r3, r3
 8006c26:	461a      	mov	r2, r3
 8006c28:	6a3b      	ldr	r3, [r7, #32]
 8006c2a:	4413      	add	r3, r2
 8006c2c:	623b      	str	r3, [r7, #32]
 8006c2e:	68bb      	ldr	r3, [r7, #8]
 8006c30:	781b      	ldrb	r3, [r3, #0]
 8006c32:	00da      	lsls	r2, r3, #3
 8006c34:	6a3b      	ldr	r3, [r7, #32]
 8006c36:	4413      	add	r3, r2
 8006c38:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006c3c:	61fb      	str	r3, [r7, #28]
 8006c3e:	69fb      	ldr	r3, [r7, #28]
 8006c40:	2200      	movs	r2, #0
 8006c42:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8006c44:	68bb      	ldr	r3, [r7, #8]
 8006c46:	781b      	ldrb	r3, [r3, #0]
 8006c48:	4619      	mov	r1, r3
 8006c4a:	68f8      	ldr	r0, [r7, #12]
 8006c4c:	f00a fb51 	bl	80112f2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8006c50:	88fb      	ldrh	r3, [r7, #6]
 8006c52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	f000 82d2 	beq.w	8007200 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	461a      	mov	r2, r3
 8006c62:	68bb      	ldr	r3, [r7, #8]
 8006c64:	781b      	ldrb	r3, [r3, #0]
 8006c66:	009b      	lsls	r3, r3, #2
 8006c68:	4413      	add	r3, r2
 8006c6a:	881b      	ldrh	r3, [r3, #0]
 8006c6c:	b29b      	uxth	r3, r3
 8006c6e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c76:	827b      	strh	r3, [r7, #18]
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	461a      	mov	r2, r3
 8006c7e:	68bb      	ldr	r3, [r7, #8]
 8006c80:	781b      	ldrb	r3, [r3, #0]
 8006c82:	009b      	lsls	r3, r3, #2
 8006c84:	441a      	add	r2, r3
 8006c86:	8a7b      	ldrh	r3, [r7, #18]
 8006c88:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c8c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c90:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006c94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c98:	b29b      	uxth	r3, r3
 8006c9a:	8013      	strh	r3, [r2, #0]
 8006c9c:	e2b0      	b.n	8007200 <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8006c9e:	88fb      	ldrh	r3, [r7, #6]
 8006ca0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d021      	beq.n	8006cec <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	461a      	mov	r2, r3
 8006cae:	68bb      	ldr	r3, [r7, #8]
 8006cb0:	781b      	ldrb	r3, [r3, #0]
 8006cb2:	009b      	lsls	r3, r3, #2
 8006cb4:	4413      	add	r3, r2
 8006cb6:	881b      	ldrh	r3, [r3, #0]
 8006cb8:	b29b      	uxth	r3, r3
 8006cba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006cbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006cc2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	461a      	mov	r2, r3
 8006ccc:	68bb      	ldr	r3, [r7, #8]
 8006cce:	781b      	ldrb	r3, [r3, #0]
 8006cd0:	009b      	lsls	r3, r3, #2
 8006cd2:	441a      	add	r2, r3
 8006cd4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8006cd8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006cdc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ce0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006ce4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ce8:	b29b      	uxth	r3, r3
 8006cea:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8006cec:	68bb      	ldr	r3, [r7, #8]
 8006cee:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006cf2:	2b01      	cmp	r3, #1
 8006cf4:	f040 8284 	bne.w	8007200 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 8006cf8:	68bb      	ldr	r3, [r7, #8]
 8006cfa:	695a      	ldr	r2, [r3, #20]
 8006cfc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006d00:	441a      	add	r2, r3
 8006d02:	68bb      	ldr	r3, [r7, #8]
 8006d04:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8006d06:	68bb      	ldr	r3, [r7, #8]
 8006d08:	69da      	ldr	r2, [r3, #28]
 8006d0a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006d0e:	441a      	add	r2, r3
 8006d10:	68bb      	ldr	r3, [r7, #8]
 8006d12:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8006d14:	68bb      	ldr	r3, [r7, #8]
 8006d16:	6a1a      	ldr	r2, [r3, #32]
 8006d18:	68bb      	ldr	r3, [r7, #8]
 8006d1a:	691b      	ldr	r3, [r3, #16]
 8006d1c:	429a      	cmp	r2, r3
 8006d1e:	d309      	bcc.n	8006d34 <HAL_PCD_EP_DB_Transmit+0x276>
        {
          len = ep->maxpacket;
 8006d20:	68bb      	ldr	r3, [r7, #8]
 8006d22:	691b      	ldr	r3, [r3, #16]
 8006d24:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8006d26:	68bb      	ldr	r3, [r7, #8]
 8006d28:	6a1a      	ldr	r2, [r3, #32]
 8006d2a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006d2c:	1ad2      	subs	r2, r2, r3
 8006d2e:	68bb      	ldr	r3, [r7, #8]
 8006d30:	621a      	str	r2, [r3, #32]
 8006d32:	e015      	b.n	8006d60 <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else if (ep->xfer_len_db == 0U)
 8006d34:	68bb      	ldr	r3, [r7, #8]
 8006d36:	6a1b      	ldr	r3, [r3, #32]
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d107      	bne.n	8006d4c <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxPctSize;
 8006d3c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006d40:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8006d42:	68bb      	ldr	r3, [r7, #8]
 8006d44:	2200      	movs	r2, #0
 8006d46:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8006d4a:	e009      	b.n	8006d60 <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8006d4c:	68bb      	ldr	r3, [r7, #8]
 8006d4e:	2200      	movs	r2, #0
 8006d50:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8006d54:	68bb      	ldr	r3, [r7, #8]
 8006d56:	6a1b      	ldr	r3, [r3, #32]
 8006d58:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8006d5a:	68bb      	ldr	r3, [r7, #8]
 8006d5c:	2200      	movs	r2, #0
 8006d5e:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8006d60:	68bb      	ldr	r3, [r7, #8]
 8006d62:	785b      	ldrb	r3, [r3, #1]
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d155      	bne.n	8006e14 <HAL_PCD_EP_DB_Transmit+0x356>
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	63bb      	str	r3, [r7, #56]	; 0x38
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006d76:	b29b      	uxth	r3, r3
 8006d78:	461a      	mov	r2, r3
 8006d7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d7c:	4413      	add	r3, r2
 8006d7e:	63bb      	str	r3, [r7, #56]	; 0x38
 8006d80:	68bb      	ldr	r3, [r7, #8]
 8006d82:	781b      	ldrb	r3, [r3, #0]
 8006d84:	00da      	lsls	r2, r3, #3
 8006d86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d88:	4413      	add	r3, r2
 8006d8a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006d8e:	637b      	str	r3, [r7, #52]	; 0x34
 8006d90:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006d92:	2b3e      	cmp	r3, #62	; 0x3e
 8006d94:	d916      	bls.n	8006dc4 <HAL_PCD_EP_DB_Transmit+0x306>
 8006d96:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006d98:	095b      	lsrs	r3, r3, #5
 8006d9a:	64bb      	str	r3, [r7, #72]	; 0x48
 8006d9c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006d9e:	f003 031f 	and.w	r3, r3, #31
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d102      	bne.n	8006dac <HAL_PCD_EP_DB_Transmit+0x2ee>
 8006da6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006da8:	3b01      	subs	r3, #1
 8006daa:	64bb      	str	r3, [r7, #72]	; 0x48
 8006dac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006dae:	b29b      	uxth	r3, r3
 8006db0:	029b      	lsls	r3, r3, #10
 8006db2:	b29b      	uxth	r3, r3
 8006db4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006db8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006dbc:	b29a      	uxth	r2, r3
 8006dbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006dc0:	801a      	strh	r2, [r3, #0]
 8006dc2:	e043      	b.n	8006e4c <HAL_PCD_EP_DB_Transmit+0x38e>
 8006dc4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d112      	bne.n	8006df0 <HAL_PCD_EP_DB_Transmit+0x332>
 8006dca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006dcc:	881b      	ldrh	r3, [r3, #0]
 8006dce:	b29b      	uxth	r3, r3
 8006dd0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006dd4:	b29a      	uxth	r2, r3
 8006dd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006dd8:	801a      	strh	r2, [r3, #0]
 8006dda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ddc:	881b      	ldrh	r3, [r3, #0]
 8006dde:	b29b      	uxth	r3, r3
 8006de0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006de4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006de8:	b29a      	uxth	r2, r3
 8006dea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006dec:	801a      	strh	r2, [r3, #0]
 8006dee:	e02d      	b.n	8006e4c <HAL_PCD_EP_DB_Transmit+0x38e>
 8006df0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006df2:	085b      	lsrs	r3, r3, #1
 8006df4:	64bb      	str	r3, [r7, #72]	; 0x48
 8006df6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006df8:	f003 0301 	and.w	r3, r3, #1
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d002      	beq.n	8006e06 <HAL_PCD_EP_DB_Transmit+0x348>
 8006e00:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006e02:	3301      	adds	r3, #1
 8006e04:	64bb      	str	r3, [r7, #72]	; 0x48
 8006e06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006e08:	b29b      	uxth	r3, r3
 8006e0a:	029b      	lsls	r3, r3, #10
 8006e0c:	b29a      	uxth	r2, r3
 8006e0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e10:	801a      	strh	r2, [r3, #0]
 8006e12:	e01b      	b.n	8006e4c <HAL_PCD_EP_DB_Transmit+0x38e>
 8006e14:	68bb      	ldr	r3, [r7, #8]
 8006e16:	785b      	ldrb	r3, [r3, #1]
 8006e18:	2b01      	cmp	r3, #1
 8006e1a:	d117      	bne.n	8006e4c <HAL_PCD_EP_DB_Transmit+0x38e>
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	643b      	str	r3, [r7, #64]	; 0x40
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006e2a:	b29b      	uxth	r3, r3
 8006e2c:	461a      	mov	r2, r3
 8006e2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e30:	4413      	add	r3, r2
 8006e32:	643b      	str	r3, [r7, #64]	; 0x40
 8006e34:	68bb      	ldr	r3, [r7, #8]
 8006e36:	781b      	ldrb	r3, [r3, #0]
 8006e38:	00da      	lsls	r2, r3, #3
 8006e3a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e3c:	4413      	add	r3, r2
 8006e3e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006e42:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006e44:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006e46:	b29a      	uxth	r2, r3
 8006e48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e4a:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	6818      	ldr	r0, [r3, #0]
 8006e50:	68bb      	ldr	r3, [r7, #8]
 8006e52:	6959      	ldr	r1, [r3, #20]
 8006e54:	68bb      	ldr	r3, [r7, #8]
 8006e56:	891a      	ldrh	r2, [r3, #8]
 8006e58:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006e5a:	b29b      	uxth	r3, r3
 8006e5c:	f006 fbe7 	bl	800d62e <USB_WritePMA>
 8006e60:	e1ce      	b.n	8007200 <HAL_PCD_EP_DB_Transmit+0x742>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006e6a:	b29b      	uxth	r3, r3
 8006e6c:	461a      	mov	r2, r3
 8006e6e:	68bb      	ldr	r3, [r7, #8]
 8006e70:	781b      	ldrb	r3, [r3, #0]
 8006e72:	00db      	lsls	r3, r3, #3
 8006e74:	4413      	add	r3, r2
 8006e76:	68fa      	ldr	r2, [r7, #12]
 8006e78:	6812      	ldr	r2, [r2, #0]
 8006e7a:	4413      	add	r3, r2
 8006e7c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006e80:	881b      	ldrh	r3, [r3, #0]
 8006e82:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006e86:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxPctSize)
 8006e8a:	68bb      	ldr	r3, [r7, #8]
 8006e8c:	699a      	ldr	r2, [r3, #24]
 8006e8e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006e92:	429a      	cmp	r2, r3
 8006e94:	d307      	bcc.n	8006ea6 <HAL_PCD_EP_DB_Transmit+0x3e8>
    {
      ep->xfer_len -= TxPctSize;
 8006e96:	68bb      	ldr	r3, [r7, #8]
 8006e98:	699a      	ldr	r2, [r3, #24]
 8006e9a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006e9e:	1ad2      	subs	r2, r2, r3
 8006ea0:	68bb      	ldr	r3, [r7, #8]
 8006ea2:	619a      	str	r2, [r3, #24]
 8006ea4:	e002      	b.n	8006eac <HAL_PCD_EP_DB_Transmit+0x3ee>
    }
    else
    {
      ep->xfer_len = 0U;
 8006ea6:	68bb      	ldr	r3, [r7, #8]
 8006ea8:	2200      	movs	r2, #0
 8006eaa:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8006eac:	68bb      	ldr	r3, [r7, #8]
 8006eae:	699b      	ldr	r3, [r3, #24]
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	f040 80c4 	bne.w	800703e <HAL_PCD_EP_DB_Transmit+0x580>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006eb6:	68bb      	ldr	r3, [r7, #8]
 8006eb8:	785b      	ldrb	r3, [r3, #1]
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d126      	bne.n	8006f0c <HAL_PCD_EP_DB_Transmit+0x44e>
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	66bb      	str	r3, [r7, #104]	; 0x68
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ecc:	b29b      	uxth	r3, r3
 8006ece:	461a      	mov	r2, r3
 8006ed0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006ed2:	4413      	add	r3, r2
 8006ed4:	66bb      	str	r3, [r7, #104]	; 0x68
 8006ed6:	68bb      	ldr	r3, [r7, #8]
 8006ed8:	781b      	ldrb	r3, [r3, #0]
 8006eda:	00da      	lsls	r2, r3, #3
 8006edc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006ede:	4413      	add	r3, r2
 8006ee0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006ee4:	667b      	str	r3, [r7, #100]	; 0x64
 8006ee6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006ee8:	881b      	ldrh	r3, [r3, #0]
 8006eea:	b29b      	uxth	r3, r3
 8006eec:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006ef0:	b29a      	uxth	r2, r3
 8006ef2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006ef4:	801a      	strh	r2, [r3, #0]
 8006ef6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006ef8:	881b      	ldrh	r3, [r3, #0]
 8006efa:	b29b      	uxth	r3, r3
 8006efc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f00:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f04:	b29a      	uxth	r2, r3
 8006f06:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006f08:	801a      	strh	r2, [r3, #0]
 8006f0a:	e01a      	b.n	8006f42 <HAL_PCD_EP_DB_Transmit+0x484>
 8006f0c:	68bb      	ldr	r3, [r7, #8]
 8006f0e:	785b      	ldrb	r3, [r3, #1]
 8006f10:	2b01      	cmp	r3, #1
 8006f12:	d116      	bne.n	8006f42 <HAL_PCD_EP_DB_Transmit+0x484>
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	673b      	str	r3, [r7, #112]	; 0x70
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006f22:	b29b      	uxth	r3, r3
 8006f24:	461a      	mov	r2, r3
 8006f26:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006f28:	4413      	add	r3, r2
 8006f2a:	673b      	str	r3, [r7, #112]	; 0x70
 8006f2c:	68bb      	ldr	r3, [r7, #8]
 8006f2e:	781b      	ldrb	r3, [r3, #0]
 8006f30:	00da      	lsls	r2, r3, #3
 8006f32:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006f34:	4413      	add	r3, r2
 8006f36:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006f3a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006f3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f3e:	2200      	movs	r2, #0
 8006f40:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006f48:	68bb      	ldr	r3, [r7, #8]
 8006f4a:	785b      	ldrb	r3, [r3, #1]
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d12f      	bne.n	8006fb0 <HAL_PCD_EP_DB_Transmit+0x4f2>
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006f60:	b29b      	uxth	r3, r3
 8006f62:	461a      	mov	r2, r3
 8006f64:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006f68:	4413      	add	r3, r2
 8006f6a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006f6e:	68bb      	ldr	r3, [r7, #8]
 8006f70:	781b      	ldrb	r3, [r3, #0]
 8006f72:	00da      	lsls	r2, r3, #3
 8006f74:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006f78:	4413      	add	r3, r2
 8006f7a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006f7e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006f82:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006f86:	881b      	ldrh	r3, [r3, #0]
 8006f88:	b29b      	uxth	r3, r3
 8006f8a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006f8e:	b29a      	uxth	r2, r3
 8006f90:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006f94:	801a      	strh	r2, [r3, #0]
 8006f96:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006f9a:	881b      	ldrh	r3, [r3, #0]
 8006f9c:	b29b      	uxth	r3, r3
 8006f9e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006fa2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006fa6:	b29a      	uxth	r2, r3
 8006fa8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006fac:	801a      	strh	r2, [r3, #0]
 8006fae:	e017      	b.n	8006fe0 <HAL_PCD_EP_DB_Transmit+0x522>
 8006fb0:	68bb      	ldr	r3, [r7, #8]
 8006fb2:	785b      	ldrb	r3, [r3, #1]
 8006fb4:	2b01      	cmp	r3, #1
 8006fb6:	d113      	bne.n	8006fe0 <HAL_PCD_EP_DB_Transmit+0x522>
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006fc0:	b29b      	uxth	r3, r3
 8006fc2:	461a      	mov	r2, r3
 8006fc4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006fc6:	4413      	add	r3, r2
 8006fc8:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006fca:	68bb      	ldr	r3, [r7, #8]
 8006fcc:	781b      	ldrb	r3, [r3, #0]
 8006fce:	00da      	lsls	r2, r3, #3
 8006fd0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006fd2:	4413      	add	r3, r2
 8006fd4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006fd8:	67bb      	str	r3, [r7, #120]	; 0x78
 8006fda:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006fdc:	2200      	movs	r2, #0
 8006fde:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8006fe0:	68bb      	ldr	r3, [r7, #8]
 8006fe2:	781b      	ldrb	r3, [r3, #0]
 8006fe4:	4619      	mov	r1, r3
 8006fe6:	68f8      	ldr	r0, [r7, #12]
 8006fe8:	f00a f983 	bl	80112f2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8006fec:	88fb      	ldrh	r3, [r7, #6]
 8006fee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	f040 8104 	bne.w	8007200 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	461a      	mov	r2, r3
 8006ffe:	68bb      	ldr	r3, [r7, #8]
 8007000:	781b      	ldrb	r3, [r3, #0]
 8007002:	009b      	lsls	r3, r3, #2
 8007004:	4413      	add	r3, r2
 8007006:	881b      	ldrh	r3, [r3, #0]
 8007008:	b29b      	uxth	r3, r3
 800700a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800700e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007012:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	461a      	mov	r2, r3
 800701c:	68bb      	ldr	r3, [r7, #8]
 800701e:	781b      	ldrb	r3, [r3, #0]
 8007020:	009b      	lsls	r3, r3, #2
 8007022:	441a      	add	r2, r3
 8007024:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8007028:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800702c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007030:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007034:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007038:	b29b      	uxth	r3, r3
 800703a:	8013      	strh	r3, [r2, #0]
 800703c:	e0e0      	b.n	8007200 <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800703e:	88fb      	ldrh	r3, [r7, #6]
 8007040:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007044:	2b00      	cmp	r3, #0
 8007046:	d121      	bne.n	800708c <HAL_PCD_EP_DB_Transmit+0x5ce>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	461a      	mov	r2, r3
 800704e:	68bb      	ldr	r3, [r7, #8]
 8007050:	781b      	ldrb	r3, [r3, #0]
 8007052:	009b      	lsls	r3, r3, #2
 8007054:	4413      	add	r3, r2
 8007056:	881b      	ldrh	r3, [r3, #0]
 8007058:	b29b      	uxth	r3, r3
 800705a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800705e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007062:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	461a      	mov	r2, r3
 800706c:	68bb      	ldr	r3, [r7, #8]
 800706e:	781b      	ldrb	r3, [r3, #0]
 8007070:	009b      	lsls	r3, r3, #2
 8007072:	441a      	add	r2, r3
 8007074:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8007078:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800707c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007080:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007084:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007088:	b29b      	uxth	r3, r3
 800708a:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800708c:	68bb      	ldr	r3, [r7, #8]
 800708e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007092:	2b01      	cmp	r3, #1
 8007094:	f040 80b4 	bne.w	8007200 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 8007098:	68bb      	ldr	r3, [r7, #8]
 800709a:	695a      	ldr	r2, [r3, #20]
 800709c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80070a0:	441a      	add	r2, r3
 80070a2:	68bb      	ldr	r3, [r7, #8]
 80070a4:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80070a6:	68bb      	ldr	r3, [r7, #8]
 80070a8:	69da      	ldr	r2, [r3, #28]
 80070aa:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80070ae:	441a      	add	r2, r3
 80070b0:	68bb      	ldr	r3, [r7, #8]
 80070b2:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80070b4:	68bb      	ldr	r3, [r7, #8]
 80070b6:	6a1a      	ldr	r2, [r3, #32]
 80070b8:	68bb      	ldr	r3, [r7, #8]
 80070ba:	691b      	ldr	r3, [r3, #16]
 80070bc:	429a      	cmp	r2, r3
 80070be:	d309      	bcc.n	80070d4 <HAL_PCD_EP_DB_Transmit+0x616>
        {
          len = ep->maxpacket;
 80070c0:	68bb      	ldr	r3, [r7, #8]
 80070c2:	691b      	ldr	r3, [r3, #16]
 80070c4:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 80070c6:	68bb      	ldr	r3, [r7, #8]
 80070c8:	6a1a      	ldr	r2, [r3, #32]
 80070ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80070cc:	1ad2      	subs	r2, r2, r3
 80070ce:	68bb      	ldr	r3, [r7, #8]
 80070d0:	621a      	str	r2, [r3, #32]
 80070d2:	e015      	b.n	8007100 <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else if (ep->xfer_len_db == 0U)
 80070d4:	68bb      	ldr	r3, [r7, #8]
 80070d6:	6a1b      	ldr	r3, [r3, #32]
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d107      	bne.n	80070ec <HAL_PCD_EP_DB_Transmit+0x62e>
        {
          len = TxPctSize;
 80070dc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80070e0:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 80070e2:	68bb      	ldr	r3, [r7, #8]
 80070e4:	2200      	movs	r2, #0
 80070e6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80070ea:	e009      	b.n	8007100 <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else
        {
          len = ep->xfer_len_db;
 80070ec:	68bb      	ldr	r3, [r7, #8]
 80070ee:	6a1b      	ldr	r3, [r3, #32]
 80070f0:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 80070f2:	68bb      	ldr	r3, [r7, #8]
 80070f4:	2200      	movs	r2, #0
 80070f6:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80070f8:	68bb      	ldr	r3, [r7, #8]
 80070fa:	2200      	movs	r2, #0
 80070fc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	663b      	str	r3, [r7, #96]	; 0x60
 8007106:	68bb      	ldr	r3, [r7, #8]
 8007108:	785b      	ldrb	r3, [r3, #1]
 800710a:	2b00      	cmp	r3, #0
 800710c:	d155      	bne.n	80071ba <HAL_PCD_EP_DB_Transmit+0x6fc>
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	65bb      	str	r3, [r7, #88]	; 0x58
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800711c:	b29b      	uxth	r3, r3
 800711e:	461a      	mov	r2, r3
 8007120:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007122:	4413      	add	r3, r2
 8007124:	65bb      	str	r3, [r7, #88]	; 0x58
 8007126:	68bb      	ldr	r3, [r7, #8]
 8007128:	781b      	ldrb	r3, [r3, #0]
 800712a:	00da      	lsls	r2, r3, #3
 800712c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800712e:	4413      	add	r3, r2
 8007130:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007134:	657b      	str	r3, [r7, #84]	; 0x54
 8007136:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007138:	2b3e      	cmp	r3, #62	; 0x3e
 800713a:	d916      	bls.n	800716a <HAL_PCD_EP_DB_Transmit+0x6ac>
 800713c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800713e:	095b      	lsrs	r3, r3, #5
 8007140:	677b      	str	r3, [r7, #116]	; 0x74
 8007142:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007144:	f003 031f 	and.w	r3, r3, #31
 8007148:	2b00      	cmp	r3, #0
 800714a:	d102      	bne.n	8007152 <HAL_PCD_EP_DB_Transmit+0x694>
 800714c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800714e:	3b01      	subs	r3, #1
 8007150:	677b      	str	r3, [r7, #116]	; 0x74
 8007152:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007154:	b29b      	uxth	r3, r3
 8007156:	029b      	lsls	r3, r3, #10
 8007158:	b29b      	uxth	r3, r3
 800715a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800715e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007162:	b29a      	uxth	r2, r3
 8007164:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007166:	801a      	strh	r2, [r3, #0]
 8007168:	e040      	b.n	80071ec <HAL_PCD_EP_DB_Transmit+0x72e>
 800716a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800716c:	2b00      	cmp	r3, #0
 800716e:	d112      	bne.n	8007196 <HAL_PCD_EP_DB_Transmit+0x6d8>
 8007170:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007172:	881b      	ldrh	r3, [r3, #0]
 8007174:	b29b      	uxth	r3, r3
 8007176:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800717a:	b29a      	uxth	r2, r3
 800717c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800717e:	801a      	strh	r2, [r3, #0]
 8007180:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007182:	881b      	ldrh	r3, [r3, #0]
 8007184:	b29b      	uxth	r3, r3
 8007186:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800718a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800718e:	b29a      	uxth	r2, r3
 8007190:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007192:	801a      	strh	r2, [r3, #0]
 8007194:	e02a      	b.n	80071ec <HAL_PCD_EP_DB_Transmit+0x72e>
 8007196:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007198:	085b      	lsrs	r3, r3, #1
 800719a:	677b      	str	r3, [r7, #116]	; 0x74
 800719c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800719e:	f003 0301 	and.w	r3, r3, #1
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d002      	beq.n	80071ac <HAL_PCD_EP_DB_Transmit+0x6ee>
 80071a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80071a8:	3301      	adds	r3, #1
 80071aa:	677b      	str	r3, [r7, #116]	; 0x74
 80071ac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80071ae:	b29b      	uxth	r3, r3
 80071b0:	029b      	lsls	r3, r3, #10
 80071b2:	b29a      	uxth	r2, r3
 80071b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80071b6:	801a      	strh	r2, [r3, #0]
 80071b8:	e018      	b.n	80071ec <HAL_PCD_EP_DB_Transmit+0x72e>
 80071ba:	68bb      	ldr	r3, [r7, #8]
 80071bc:	785b      	ldrb	r3, [r3, #1]
 80071be:	2b01      	cmp	r3, #1
 80071c0:	d114      	bne.n	80071ec <HAL_PCD_EP_DB_Transmit+0x72e>
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80071ca:	b29b      	uxth	r3, r3
 80071cc:	461a      	mov	r2, r3
 80071ce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80071d0:	4413      	add	r3, r2
 80071d2:	663b      	str	r3, [r7, #96]	; 0x60
 80071d4:	68bb      	ldr	r3, [r7, #8]
 80071d6:	781b      	ldrb	r3, [r3, #0]
 80071d8:	00da      	lsls	r2, r3, #3
 80071da:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80071dc:	4413      	add	r3, r2
 80071de:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80071e2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80071e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80071e6:	b29a      	uxth	r2, r3
 80071e8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80071ea:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	6818      	ldr	r0, [r3, #0]
 80071f0:	68bb      	ldr	r3, [r7, #8]
 80071f2:	6959      	ldr	r1, [r3, #20]
 80071f4:	68bb      	ldr	r3, [r7, #8]
 80071f6:	895a      	ldrh	r2, [r3, #10]
 80071f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80071fa:	b29b      	uxth	r3, r3
 80071fc:	f006 fa17 	bl	800d62e <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	461a      	mov	r2, r3
 8007206:	68bb      	ldr	r3, [r7, #8]
 8007208:	781b      	ldrb	r3, [r3, #0]
 800720a:	009b      	lsls	r3, r3, #2
 800720c:	4413      	add	r3, r2
 800720e:	881b      	ldrh	r3, [r3, #0]
 8007210:	b29b      	uxth	r3, r3
 8007212:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007216:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800721a:	823b      	strh	r3, [r7, #16]
 800721c:	8a3b      	ldrh	r3, [r7, #16]
 800721e:	f083 0310 	eor.w	r3, r3, #16
 8007222:	823b      	strh	r3, [r7, #16]
 8007224:	8a3b      	ldrh	r3, [r7, #16]
 8007226:	f083 0320 	eor.w	r3, r3, #32
 800722a:	823b      	strh	r3, [r7, #16]
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	461a      	mov	r2, r3
 8007232:	68bb      	ldr	r3, [r7, #8]
 8007234:	781b      	ldrb	r3, [r3, #0]
 8007236:	009b      	lsls	r3, r3, #2
 8007238:	441a      	add	r2, r3
 800723a:	8a3b      	ldrh	r3, [r7, #16]
 800723c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007240:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007244:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007248:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800724c:	b29b      	uxth	r3, r3
 800724e:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8007250:	2300      	movs	r3, #0
}
 8007252:	4618      	mov	r0, r3
 8007254:	3788      	adds	r7, #136	; 0x88
 8007256:	46bd      	mov	sp, r7
 8007258:	bd80      	pop	{r7, pc}

0800725a <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800725a:	b480      	push	{r7}
 800725c:	b087      	sub	sp, #28
 800725e:	af00      	add	r7, sp, #0
 8007260:	60f8      	str	r0, [r7, #12]
 8007262:	607b      	str	r3, [r7, #4]
 8007264:	460b      	mov	r3, r1
 8007266:	817b      	strh	r3, [r7, #10]
 8007268:	4613      	mov	r3, r2
 800726a:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800726c:	897b      	ldrh	r3, [r7, #10]
 800726e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007272:	b29b      	uxth	r3, r3
 8007274:	2b00      	cmp	r3, #0
 8007276:	d00b      	beq.n	8007290 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007278:	897b      	ldrh	r3, [r7, #10]
 800727a:	f003 0307 	and.w	r3, r3, #7
 800727e:	1c5a      	adds	r2, r3, #1
 8007280:	4613      	mov	r3, r2
 8007282:	009b      	lsls	r3, r3, #2
 8007284:	4413      	add	r3, r2
 8007286:	00db      	lsls	r3, r3, #3
 8007288:	68fa      	ldr	r2, [r7, #12]
 800728a:	4413      	add	r3, r2
 800728c:	617b      	str	r3, [r7, #20]
 800728e:	e009      	b.n	80072a4 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8007290:	897a      	ldrh	r2, [r7, #10]
 8007292:	4613      	mov	r3, r2
 8007294:	009b      	lsls	r3, r3, #2
 8007296:	4413      	add	r3, r2
 8007298:	00db      	lsls	r3, r3, #3
 800729a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800729e:	68fa      	ldr	r2, [r7, #12]
 80072a0:	4413      	add	r3, r2
 80072a2:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80072a4:	893b      	ldrh	r3, [r7, #8]
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d107      	bne.n	80072ba <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80072aa:	697b      	ldr	r3, [r7, #20]
 80072ac:	2200      	movs	r2, #0
 80072ae:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	b29a      	uxth	r2, r3
 80072b4:	697b      	ldr	r3, [r7, #20]
 80072b6:	80da      	strh	r2, [r3, #6]
 80072b8:	e00b      	b.n	80072d2 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80072ba:	697b      	ldr	r3, [r7, #20]
 80072bc:	2201      	movs	r2, #1
 80072be:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	b29a      	uxth	r2, r3
 80072c4:	697b      	ldr	r3, [r7, #20]
 80072c6:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	0c1b      	lsrs	r3, r3, #16
 80072cc:	b29a      	uxth	r2, r3
 80072ce:	697b      	ldr	r3, [r7, #20]
 80072d0:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80072d2:	2300      	movs	r3, #0
}
 80072d4:	4618      	mov	r0, r3
 80072d6:	371c      	adds	r7, #28
 80072d8:	46bd      	mov	sp, r7
 80072da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072de:	4770      	bx	lr

080072e0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80072e0:	b480      	push	{r7}
 80072e2:	b085      	sub	sp, #20
 80072e4:	af00      	add	r7, sp, #0
 80072e6:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	2201      	movs	r2, #1
 80072f2:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	2200      	movs	r2, #0
 80072fa:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8007304:	b29b      	uxth	r3, r3
 8007306:	f043 0301 	orr.w	r3, r3, #1
 800730a:	b29a      	uxth	r2, r3
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8007318:	b29b      	uxth	r3, r3
 800731a:	f043 0302 	orr.w	r3, r3, #2
 800731e:	b29a      	uxth	r2, r3
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8007326:	2300      	movs	r3, #0
}
 8007328:	4618      	mov	r0, r3
 800732a:	3714      	adds	r7, #20
 800732c:	46bd      	mov	sp, r7
 800732e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007332:	4770      	bx	lr

08007334 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8007334:	b480      	push	{r7}
 8007336:	b085      	sub	sp, #20
 8007338:	af00      	add	r7, sp, #0
 800733a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	2b00      	cmp	r3, #0
 8007340:	d141      	bne.n	80073c6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8007342:	4b4b      	ldr	r3, [pc, #300]	; (8007470 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800734a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800734e:	d131      	bne.n	80073b4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007350:	4b47      	ldr	r3, [pc, #284]	; (8007470 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007352:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007356:	4a46      	ldr	r2, [pc, #280]	; (8007470 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007358:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800735c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8007360:	4b43      	ldr	r3, [pc, #268]	; (8007470 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8007368:	4a41      	ldr	r2, [pc, #260]	; (8007470 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800736a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800736e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8007370:	4b40      	ldr	r3, [pc, #256]	; (8007474 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	2232      	movs	r2, #50	; 0x32
 8007376:	fb02 f303 	mul.w	r3, r2, r3
 800737a:	4a3f      	ldr	r2, [pc, #252]	; (8007478 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800737c:	fba2 2303 	umull	r2, r3, r2, r3
 8007380:	0c9b      	lsrs	r3, r3, #18
 8007382:	3301      	adds	r3, #1
 8007384:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007386:	e002      	b.n	800738e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	3b01      	subs	r3, #1
 800738c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800738e:	4b38      	ldr	r3, [pc, #224]	; (8007470 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007390:	695b      	ldr	r3, [r3, #20]
 8007392:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007396:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800739a:	d102      	bne.n	80073a2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d1f2      	bne.n	8007388 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80073a2:	4b33      	ldr	r3, [pc, #204]	; (8007470 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80073a4:	695b      	ldr	r3, [r3, #20]
 80073a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80073aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80073ae:	d158      	bne.n	8007462 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80073b0:	2303      	movs	r3, #3
 80073b2:	e057      	b.n	8007464 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80073b4:	4b2e      	ldr	r3, [pc, #184]	; (8007470 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80073b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80073ba:	4a2d      	ldr	r2, [pc, #180]	; (8007470 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80073bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80073c0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80073c4:	e04d      	b.n	8007462 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80073cc:	d141      	bne.n	8007452 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80073ce:	4b28      	ldr	r3, [pc, #160]	; (8007470 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80073d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80073da:	d131      	bne.n	8007440 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80073dc:	4b24      	ldr	r3, [pc, #144]	; (8007470 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80073de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80073e2:	4a23      	ldr	r2, [pc, #140]	; (8007470 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80073e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80073e8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80073ec:	4b20      	ldr	r3, [pc, #128]	; (8007470 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80073f4:	4a1e      	ldr	r2, [pc, #120]	; (8007470 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80073f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80073fa:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80073fc:	4b1d      	ldr	r3, [pc, #116]	; (8007474 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	2232      	movs	r2, #50	; 0x32
 8007402:	fb02 f303 	mul.w	r3, r2, r3
 8007406:	4a1c      	ldr	r2, [pc, #112]	; (8007478 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8007408:	fba2 2303 	umull	r2, r3, r2, r3
 800740c:	0c9b      	lsrs	r3, r3, #18
 800740e:	3301      	adds	r3, #1
 8007410:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007412:	e002      	b.n	800741a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	3b01      	subs	r3, #1
 8007418:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800741a:	4b15      	ldr	r3, [pc, #84]	; (8007470 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800741c:	695b      	ldr	r3, [r3, #20]
 800741e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007422:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007426:	d102      	bne.n	800742e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	2b00      	cmp	r3, #0
 800742c:	d1f2      	bne.n	8007414 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800742e:	4b10      	ldr	r3, [pc, #64]	; (8007470 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007430:	695b      	ldr	r3, [r3, #20]
 8007432:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007436:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800743a:	d112      	bne.n	8007462 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800743c:	2303      	movs	r3, #3
 800743e:	e011      	b.n	8007464 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007440:	4b0b      	ldr	r3, [pc, #44]	; (8007470 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007442:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007446:	4a0a      	ldr	r2, [pc, #40]	; (8007470 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007448:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800744c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8007450:	e007      	b.n	8007462 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8007452:	4b07      	ldr	r3, [pc, #28]	; (8007470 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800745a:	4a05      	ldr	r2, [pc, #20]	; (8007470 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800745c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007460:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8007462:	2300      	movs	r3, #0
}
 8007464:	4618      	mov	r0, r3
 8007466:	3714      	adds	r7, #20
 8007468:	46bd      	mov	sp, r7
 800746a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800746e:	4770      	bx	lr
 8007470:	40007000 	.word	0x40007000
 8007474:	20000000 	.word	0x20000000
 8007478:	431bde83 	.word	0x431bde83

0800747c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800747c:	b580      	push	{r7, lr}
 800747e:	b088      	sub	sp, #32
 8007480:	af00      	add	r7, sp, #0
 8007482:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	2b00      	cmp	r3, #0
 8007488:	d101      	bne.n	800748e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800748a:	2301      	movs	r3, #1
 800748c:	e306      	b.n	8007a9c <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	f003 0301 	and.w	r3, r3, #1
 8007496:	2b00      	cmp	r3, #0
 8007498:	d075      	beq.n	8007586 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800749a:	4b97      	ldr	r3, [pc, #604]	; (80076f8 <HAL_RCC_OscConfig+0x27c>)
 800749c:	689b      	ldr	r3, [r3, #8]
 800749e:	f003 030c 	and.w	r3, r3, #12
 80074a2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80074a4:	4b94      	ldr	r3, [pc, #592]	; (80076f8 <HAL_RCC_OscConfig+0x27c>)
 80074a6:	68db      	ldr	r3, [r3, #12]
 80074a8:	f003 0303 	and.w	r3, r3, #3
 80074ac:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80074ae:	69bb      	ldr	r3, [r7, #24]
 80074b0:	2b0c      	cmp	r3, #12
 80074b2:	d102      	bne.n	80074ba <HAL_RCC_OscConfig+0x3e>
 80074b4:	697b      	ldr	r3, [r7, #20]
 80074b6:	2b03      	cmp	r3, #3
 80074b8:	d002      	beq.n	80074c0 <HAL_RCC_OscConfig+0x44>
 80074ba:	69bb      	ldr	r3, [r7, #24]
 80074bc:	2b08      	cmp	r3, #8
 80074be:	d10b      	bne.n	80074d8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80074c0:	4b8d      	ldr	r3, [pc, #564]	; (80076f8 <HAL_RCC_OscConfig+0x27c>)
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d05b      	beq.n	8007584 <HAL_RCC_OscConfig+0x108>
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	685b      	ldr	r3, [r3, #4]
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d157      	bne.n	8007584 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80074d4:	2301      	movs	r3, #1
 80074d6:	e2e1      	b.n	8007a9c <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	685b      	ldr	r3, [r3, #4]
 80074dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80074e0:	d106      	bne.n	80074f0 <HAL_RCC_OscConfig+0x74>
 80074e2:	4b85      	ldr	r3, [pc, #532]	; (80076f8 <HAL_RCC_OscConfig+0x27c>)
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	4a84      	ldr	r2, [pc, #528]	; (80076f8 <HAL_RCC_OscConfig+0x27c>)
 80074e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80074ec:	6013      	str	r3, [r2, #0]
 80074ee:	e01d      	b.n	800752c <HAL_RCC_OscConfig+0xb0>
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	685b      	ldr	r3, [r3, #4]
 80074f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80074f8:	d10c      	bne.n	8007514 <HAL_RCC_OscConfig+0x98>
 80074fa:	4b7f      	ldr	r3, [pc, #508]	; (80076f8 <HAL_RCC_OscConfig+0x27c>)
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	4a7e      	ldr	r2, [pc, #504]	; (80076f8 <HAL_RCC_OscConfig+0x27c>)
 8007500:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007504:	6013      	str	r3, [r2, #0]
 8007506:	4b7c      	ldr	r3, [pc, #496]	; (80076f8 <HAL_RCC_OscConfig+0x27c>)
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	4a7b      	ldr	r2, [pc, #492]	; (80076f8 <HAL_RCC_OscConfig+0x27c>)
 800750c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007510:	6013      	str	r3, [r2, #0]
 8007512:	e00b      	b.n	800752c <HAL_RCC_OscConfig+0xb0>
 8007514:	4b78      	ldr	r3, [pc, #480]	; (80076f8 <HAL_RCC_OscConfig+0x27c>)
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	4a77      	ldr	r2, [pc, #476]	; (80076f8 <HAL_RCC_OscConfig+0x27c>)
 800751a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800751e:	6013      	str	r3, [r2, #0]
 8007520:	4b75      	ldr	r3, [pc, #468]	; (80076f8 <HAL_RCC_OscConfig+0x27c>)
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	4a74      	ldr	r2, [pc, #464]	; (80076f8 <HAL_RCC_OscConfig+0x27c>)
 8007526:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800752a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	685b      	ldr	r3, [r3, #4]
 8007530:	2b00      	cmp	r3, #0
 8007532:	d013      	beq.n	800755c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007534:	f7fb ff82 	bl	800343c <HAL_GetTick>
 8007538:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800753a:	e008      	b.n	800754e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800753c:	f7fb ff7e 	bl	800343c <HAL_GetTick>
 8007540:	4602      	mov	r2, r0
 8007542:	693b      	ldr	r3, [r7, #16]
 8007544:	1ad3      	subs	r3, r2, r3
 8007546:	2b64      	cmp	r3, #100	; 0x64
 8007548:	d901      	bls.n	800754e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800754a:	2303      	movs	r3, #3
 800754c:	e2a6      	b.n	8007a9c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800754e:	4b6a      	ldr	r3, [pc, #424]	; (80076f8 <HAL_RCC_OscConfig+0x27c>)
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007556:	2b00      	cmp	r3, #0
 8007558:	d0f0      	beq.n	800753c <HAL_RCC_OscConfig+0xc0>
 800755a:	e014      	b.n	8007586 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800755c:	f7fb ff6e 	bl	800343c <HAL_GetTick>
 8007560:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007562:	e008      	b.n	8007576 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007564:	f7fb ff6a 	bl	800343c <HAL_GetTick>
 8007568:	4602      	mov	r2, r0
 800756a:	693b      	ldr	r3, [r7, #16]
 800756c:	1ad3      	subs	r3, r2, r3
 800756e:	2b64      	cmp	r3, #100	; 0x64
 8007570:	d901      	bls.n	8007576 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007572:	2303      	movs	r3, #3
 8007574:	e292      	b.n	8007a9c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007576:	4b60      	ldr	r3, [pc, #384]	; (80076f8 <HAL_RCC_OscConfig+0x27c>)
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800757e:	2b00      	cmp	r3, #0
 8007580:	d1f0      	bne.n	8007564 <HAL_RCC_OscConfig+0xe8>
 8007582:	e000      	b.n	8007586 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007584:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	f003 0302 	and.w	r3, r3, #2
 800758e:	2b00      	cmp	r3, #0
 8007590:	d075      	beq.n	800767e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007592:	4b59      	ldr	r3, [pc, #356]	; (80076f8 <HAL_RCC_OscConfig+0x27c>)
 8007594:	689b      	ldr	r3, [r3, #8]
 8007596:	f003 030c 	and.w	r3, r3, #12
 800759a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800759c:	4b56      	ldr	r3, [pc, #344]	; (80076f8 <HAL_RCC_OscConfig+0x27c>)
 800759e:	68db      	ldr	r3, [r3, #12]
 80075a0:	f003 0303 	and.w	r3, r3, #3
 80075a4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80075a6:	69bb      	ldr	r3, [r7, #24]
 80075a8:	2b0c      	cmp	r3, #12
 80075aa:	d102      	bne.n	80075b2 <HAL_RCC_OscConfig+0x136>
 80075ac:	697b      	ldr	r3, [r7, #20]
 80075ae:	2b02      	cmp	r3, #2
 80075b0:	d002      	beq.n	80075b8 <HAL_RCC_OscConfig+0x13c>
 80075b2:	69bb      	ldr	r3, [r7, #24]
 80075b4:	2b04      	cmp	r3, #4
 80075b6:	d11f      	bne.n	80075f8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80075b8:	4b4f      	ldr	r3, [pc, #316]	; (80076f8 <HAL_RCC_OscConfig+0x27c>)
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d005      	beq.n	80075d0 <HAL_RCC_OscConfig+0x154>
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	68db      	ldr	r3, [r3, #12]
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d101      	bne.n	80075d0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80075cc:	2301      	movs	r3, #1
 80075ce:	e265      	b.n	8007a9c <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80075d0:	4b49      	ldr	r3, [pc, #292]	; (80076f8 <HAL_RCC_OscConfig+0x27c>)
 80075d2:	685b      	ldr	r3, [r3, #4]
 80075d4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	691b      	ldr	r3, [r3, #16]
 80075dc:	061b      	lsls	r3, r3, #24
 80075de:	4946      	ldr	r1, [pc, #280]	; (80076f8 <HAL_RCC_OscConfig+0x27c>)
 80075e0:	4313      	orrs	r3, r2
 80075e2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80075e4:	4b45      	ldr	r3, [pc, #276]	; (80076fc <HAL_RCC_OscConfig+0x280>)
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	4618      	mov	r0, r3
 80075ea:	f7fa fb1f 	bl	8001c2c <HAL_InitTick>
 80075ee:	4603      	mov	r3, r0
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d043      	beq.n	800767c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80075f4:	2301      	movs	r3, #1
 80075f6:	e251      	b.n	8007a9c <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	68db      	ldr	r3, [r3, #12]
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d023      	beq.n	8007648 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007600:	4b3d      	ldr	r3, [pc, #244]	; (80076f8 <HAL_RCC_OscConfig+0x27c>)
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	4a3c      	ldr	r2, [pc, #240]	; (80076f8 <HAL_RCC_OscConfig+0x27c>)
 8007606:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800760a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800760c:	f7fb ff16 	bl	800343c <HAL_GetTick>
 8007610:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007612:	e008      	b.n	8007626 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007614:	f7fb ff12 	bl	800343c <HAL_GetTick>
 8007618:	4602      	mov	r2, r0
 800761a:	693b      	ldr	r3, [r7, #16]
 800761c:	1ad3      	subs	r3, r2, r3
 800761e:	2b02      	cmp	r3, #2
 8007620:	d901      	bls.n	8007626 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8007622:	2303      	movs	r3, #3
 8007624:	e23a      	b.n	8007a9c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007626:	4b34      	ldr	r3, [pc, #208]	; (80076f8 <HAL_RCC_OscConfig+0x27c>)
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800762e:	2b00      	cmp	r3, #0
 8007630:	d0f0      	beq.n	8007614 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007632:	4b31      	ldr	r3, [pc, #196]	; (80076f8 <HAL_RCC_OscConfig+0x27c>)
 8007634:	685b      	ldr	r3, [r3, #4]
 8007636:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	691b      	ldr	r3, [r3, #16]
 800763e:	061b      	lsls	r3, r3, #24
 8007640:	492d      	ldr	r1, [pc, #180]	; (80076f8 <HAL_RCC_OscConfig+0x27c>)
 8007642:	4313      	orrs	r3, r2
 8007644:	604b      	str	r3, [r1, #4]
 8007646:	e01a      	b.n	800767e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007648:	4b2b      	ldr	r3, [pc, #172]	; (80076f8 <HAL_RCC_OscConfig+0x27c>)
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	4a2a      	ldr	r2, [pc, #168]	; (80076f8 <HAL_RCC_OscConfig+0x27c>)
 800764e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007652:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007654:	f7fb fef2 	bl	800343c <HAL_GetTick>
 8007658:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800765a:	e008      	b.n	800766e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800765c:	f7fb feee 	bl	800343c <HAL_GetTick>
 8007660:	4602      	mov	r2, r0
 8007662:	693b      	ldr	r3, [r7, #16]
 8007664:	1ad3      	subs	r3, r2, r3
 8007666:	2b02      	cmp	r3, #2
 8007668:	d901      	bls.n	800766e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800766a:	2303      	movs	r3, #3
 800766c:	e216      	b.n	8007a9c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800766e:	4b22      	ldr	r3, [pc, #136]	; (80076f8 <HAL_RCC_OscConfig+0x27c>)
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007676:	2b00      	cmp	r3, #0
 8007678:	d1f0      	bne.n	800765c <HAL_RCC_OscConfig+0x1e0>
 800767a:	e000      	b.n	800767e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800767c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	f003 0308 	and.w	r3, r3, #8
 8007686:	2b00      	cmp	r3, #0
 8007688:	d041      	beq.n	800770e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	695b      	ldr	r3, [r3, #20]
 800768e:	2b00      	cmp	r3, #0
 8007690:	d01c      	beq.n	80076cc <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007692:	4b19      	ldr	r3, [pc, #100]	; (80076f8 <HAL_RCC_OscConfig+0x27c>)
 8007694:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007698:	4a17      	ldr	r2, [pc, #92]	; (80076f8 <HAL_RCC_OscConfig+0x27c>)
 800769a:	f043 0301 	orr.w	r3, r3, #1
 800769e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80076a2:	f7fb fecb 	bl	800343c <HAL_GetTick>
 80076a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80076a8:	e008      	b.n	80076bc <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80076aa:	f7fb fec7 	bl	800343c <HAL_GetTick>
 80076ae:	4602      	mov	r2, r0
 80076b0:	693b      	ldr	r3, [r7, #16]
 80076b2:	1ad3      	subs	r3, r2, r3
 80076b4:	2b02      	cmp	r3, #2
 80076b6:	d901      	bls.n	80076bc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80076b8:	2303      	movs	r3, #3
 80076ba:	e1ef      	b.n	8007a9c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80076bc:	4b0e      	ldr	r3, [pc, #56]	; (80076f8 <HAL_RCC_OscConfig+0x27c>)
 80076be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80076c2:	f003 0302 	and.w	r3, r3, #2
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d0ef      	beq.n	80076aa <HAL_RCC_OscConfig+0x22e>
 80076ca:	e020      	b.n	800770e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80076cc:	4b0a      	ldr	r3, [pc, #40]	; (80076f8 <HAL_RCC_OscConfig+0x27c>)
 80076ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80076d2:	4a09      	ldr	r2, [pc, #36]	; (80076f8 <HAL_RCC_OscConfig+0x27c>)
 80076d4:	f023 0301 	bic.w	r3, r3, #1
 80076d8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80076dc:	f7fb feae 	bl	800343c <HAL_GetTick>
 80076e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80076e2:	e00d      	b.n	8007700 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80076e4:	f7fb feaa 	bl	800343c <HAL_GetTick>
 80076e8:	4602      	mov	r2, r0
 80076ea:	693b      	ldr	r3, [r7, #16]
 80076ec:	1ad3      	subs	r3, r2, r3
 80076ee:	2b02      	cmp	r3, #2
 80076f0:	d906      	bls.n	8007700 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80076f2:	2303      	movs	r3, #3
 80076f4:	e1d2      	b.n	8007a9c <HAL_RCC_OscConfig+0x620>
 80076f6:	bf00      	nop
 80076f8:	40021000 	.word	0x40021000
 80076fc:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007700:	4b8c      	ldr	r3, [pc, #560]	; (8007934 <HAL_RCC_OscConfig+0x4b8>)
 8007702:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007706:	f003 0302 	and.w	r3, r3, #2
 800770a:	2b00      	cmp	r3, #0
 800770c:	d1ea      	bne.n	80076e4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	f003 0304 	and.w	r3, r3, #4
 8007716:	2b00      	cmp	r3, #0
 8007718:	f000 80a6 	beq.w	8007868 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800771c:	2300      	movs	r3, #0
 800771e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8007720:	4b84      	ldr	r3, [pc, #528]	; (8007934 <HAL_RCC_OscConfig+0x4b8>)
 8007722:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007724:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007728:	2b00      	cmp	r3, #0
 800772a:	d101      	bne.n	8007730 <HAL_RCC_OscConfig+0x2b4>
 800772c:	2301      	movs	r3, #1
 800772e:	e000      	b.n	8007732 <HAL_RCC_OscConfig+0x2b6>
 8007730:	2300      	movs	r3, #0
 8007732:	2b00      	cmp	r3, #0
 8007734:	d00d      	beq.n	8007752 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007736:	4b7f      	ldr	r3, [pc, #508]	; (8007934 <HAL_RCC_OscConfig+0x4b8>)
 8007738:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800773a:	4a7e      	ldr	r2, [pc, #504]	; (8007934 <HAL_RCC_OscConfig+0x4b8>)
 800773c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007740:	6593      	str	r3, [r2, #88]	; 0x58
 8007742:	4b7c      	ldr	r3, [pc, #496]	; (8007934 <HAL_RCC_OscConfig+0x4b8>)
 8007744:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007746:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800774a:	60fb      	str	r3, [r7, #12]
 800774c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800774e:	2301      	movs	r3, #1
 8007750:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007752:	4b79      	ldr	r3, [pc, #484]	; (8007938 <HAL_RCC_OscConfig+0x4bc>)
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800775a:	2b00      	cmp	r3, #0
 800775c:	d118      	bne.n	8007790 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800775e:	4b76      	ldr	r3, [pc, #472]	; (8007938 <HAL_RCC_OscConfig+0x4bc>)
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	4a75      	ldr	r2, [pc, #468]	; (8007938 <HAL_RCC_OscConfig+0x4bc>)
 8007764:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007768:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800776a:	f7fb fe67 	bl	800343c <HAL_GetTick>
 800776e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007770:	e008      	b.n	8007784 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007772:	f7fb fe63 	bl	800343c <HAL_GetTick>
 8007776:	4602      	mov	r2, r0
 8007778:	693b      	ldr	r3, [r7, #16]
 800777a:	1ad3      	subs	r3, r2, r3
 800777c:	2b02      	cmp	r3, #2
 800777e:	d901      	bls.n	8007784 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8007780:	2303      	movs	r3, #3
 8007782:	e18b      	b.n	8007a9c <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007784:	4b6c      	ldr	r3, [pc, #432]	; (8007938 <HAL_RCC_OscConfig+0x4bc>)
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800778c:	2b00      	cmp	r3, #0
 800778e:	d0f0      	beq.n	8007772 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	689b      	ldr	r3, [r3, #8]
 8007794:	2b01      	cmp	r3, #1
 8007796:	d108      	bne.n	80077aa <HAL_RCC_OscConfig+0x32e>
 8007798:	4b66      	ldr	r3, [pc, #408]	; (8007934 <HAL_RCC_OscConfig+0x4b8>)
 800779a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800779e:	4a65      	ldr	r2, [pc, #404]	; (8007934 <HAL_RCC_OscConfig+0x4b8>)
 80077a0:	f043 0301 	orr.w	r3, r3, #1
 80077a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80077a8:	e024      	b.n	80077f4 <HAL_RCC_OscConfig+0x378>
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	689b      	ldr	r3, [r3, #8]
 80077ae:	2b05      	cmp	r3, #5
 80077b0:	d110      	bne.n	80077d4 <HAL_RCC_OscConfig+0x358>
 80077b2:	4b60      	ldr	r3, [pc, #384]	; (8007934 <HAL_RCC_OscConfig+0x4b8>)
 80077b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80077b8:	4a5e      	ldr	r2, [pc, #376]	; (8007934 <HAL_RCC_OscConfig+0x4b8>)
 80077ba:	f043 0304 	orr.w	r3, r3, #4
 80077be:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80077c2:	4b5c      	ldr	r3, [pc, #368]	; (8007934 <HAL_RCC_OscConfig+0x4b8>)
 80077c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80077c8:	4a5a      	ldr	r2, [pc, #360]	; (8007934 <HAL_RCC_OscConfig+0x4b8>)
 80077ca:	f043 0301 	orr.w	r3, r3, #1
 80077ce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80077d2:	e00f      	b.n	80077f4 <HAL_RCC_OscConfig+0x378>
 80077d4:	4b57      	ldr	r3, [pc, #348]	; (8007934 <HAL_RCC_OscConfig+0x4b8>)
 80077d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80077da:	4a56      	ldr	r2, [pc, #344]	; (8007934 <HAL_RCC_OscConfig+0x4b8>)
 80077dc:	f023 0301 	bic.w	r3, r3, #1
 80077e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80077e4:	4b53      	ldr	r3, [pc, #332]	; (8007934 <HAL_RCC_OscConfig+0x4b8>)
 80077e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80077ea:	4a52      	ldr	r2, [pc, #328]	; (8007934 <HAL_RCC_OscConfig+0x4b8>)
 80077ec:	f023 0304 	bic.w	r3, r3, #4
 80077f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	689b      	ldr	r3, [r3, #8]
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d016      	beq.n	800782a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80077fc:	f7fb fe1e 	bl	800343c <HAL_GetTick>
 8007800:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007802:	e00a      	b.n	800781a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007804:	f7fb fe1a 	bl	800343c <HAL_GetTick>
 8007808:	4602      	mov	r2, r0
 800780a:	693b      	ldr	r3, [r7, #16]
 800780c:	1ad3      	subs	r3, r2, r3
 800780e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007812:	4293      	cmp	r3, r2
 8007814:	d901      	bls.n	800781a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8007816:	2303      	movs	r3, #3
 8007818:	e140      	b.n	8007a9c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800781a:	4b46      	ldr	r3, [pc, #280]	; (8007934 <HAL_RCC_OscConfig+0x4b8>)
 800781c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007820:	f003 0302 	and.w	r3, r3, #2
 8007824:	2b00      	cmp	r3, #0
 8007826:	d0ed      	beq.n	8007804 <HAL_RCC_OscConfig+0x388>
 8007828:	e015      	b.n	8007856 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800782a:	f7fb fe07 	bl	800343c <HAL_GetTick>
 800782e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007830:	e00a      	b.n	8007848 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007832:	f7fb fe03 	bl	800343c <HAL_GetTick>
 8007836:	4602      	mov	r2, r0
 8007838:	693b      	ldr	r3, [r7, #16]
 800783a:	1ad3      	subs	r3, r2, r3
 800783c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007840:	4293      	cmp	r3, r2
 8007842:	d901      	bls.n	8007848 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8007844:	2303      	movs	r3, #3
 8007846:	e129      	b.n	8007a9c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007848:	4b3a      	ldr	r3, [pc, #232]	; (8007934 <HAL_RCC_OscConfig+0x4b8>)
 800784a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800784e:	f003 0302 	and.w	r3, r3, #2
 8007852:	2b00      	cmp	r3, #0
 8007854:	d1ed      	bne.n	8007832 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007856:	7ffb      	ldrb	r3, [r7, #31]
 8007858:	2b01      	cmp	r3, #1
 800785a:	d105      	bne.n	8007868 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800785c:	4b35      	ldr	r3, [pc, #212]	; (8007934 <HAL_RCC_OscConfig+0x4b8>)
 800785e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007860:	4a34      	ldr	r2, [pc, #208]	; (8007934 <HAL_RCC_OscConfig+0x4b8>)
 8007862:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007866:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	f003 0320 	and.w	r3, r3, #32
 8007870:	2b00      	cmp	r3, #0
 8007872:	d03c      	beq.n	80078ee <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	699b      	ldr	r3, [r3, #24]
 8007878:	2b00      	cmp	r3, #0
 800787a:	d01c      	beq.n	80078b6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800787c:	4b2d      	ldr	r3, [pc, #180]	; (8007934 <HAL_RCC_OscConfig+0x4b8>)
 800787e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007882:	4a2c      	ldr	r2, [pc, #176]	; (8007934 <HAL_RCC_OscConfig+0x4b8>)
 8007884:	f043 0301 	orr.w	r3, r3, #1
 8007888:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800788c:	f7fb fdd6 	bl	800343c <HAL_GetTick>
 8007890:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8007892:	e008      	b.n	80078a6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007894:	f7fb fdd2 	bl	800343c <HAL_GetTick>
 8007898:	4602      	mov	r2, r0
 800789a:	693b      	ldr	r3, [r7, #16]
 800789c:	1ad3      	subs	r3, r2, r3
 800789e:	2b02      	cmp	r3, #2
 80078a0:	d901      	bls.n	80078a6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80078a2:	2303      	movs	r3, #3
 80078a4:	e0fa      	b.n	8007a9c <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80078a6:	4b23      	ldr	r3, [pc, #140]	; (8007934 <HAL_RCC_OscConfig+0x4b8>)
 80078a8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80078ac:	f003 0302 	and.w	r3, r3, #2
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d0ef      	beq.n	8007894 <HAL_RCC_OscConfig+0x418>
 80078b4:	e01b      	b.n	80078ee <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80078b6:	4b1f      	ldr	r3, [pc, #124]	; (8007934 <HAL_RCC_OscConfig+0x4b8>)
 80078b8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80078bc:	4a1d      	ldr	r2, [pc, #116]	; (8007934 <HAL_RCC_OscConfig+0x4b8>)
 80078be:	f023 0301 	bic.w	r3, r3, #1
 80078c2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80078c6:	f7fb fdb9 	bl	800343c <HAL_GetTick>
 80078ca:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80078cc:	e008      	b.n	80078e0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80078ce:	f7fb fdb5 	bl	800343c <HAL_GetTick>
 80078d2:	4602      	mov	r2, r0
 80078d4:	693b      	ldr	r3, [r7, #16]
 80078d6:	1ad3      	subs	r3, r2, r3
 80078d8:	2b02      	cmp	r3, #2
 80078da:	d901      	bls.n	80078e0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80078dc:	2303      	movs	r3, #3
 80078de:	e0dd      	b.n	8007a9c <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80078e0:	4b14      	ldr	r3, [pc, #80]	; (8007934 <HAL_RCC_OscConfig+0x4b8>)
 80078e2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80078e6:	f003 0302 	and.w	r3, r3, #2
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d1ef      	bne.n	80078ce <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	69db      	ldr	r3, [r3, #28]
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	f000 80d1 	beq.w	8007a9a <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80078f8:	4b0e      	ldr	r3, [pc, #56]	; (8007934 <HAL_RCC_OscConfig+0x4b8>)
 80078fa:	689b      	ldr	r3, [r3, #8]
 80078fc:	f003 030c 	and.w	r3, r3, #12
 8007900:	2b0c      	cmp	r3, #12
 8007902:	f000 808b 	beq.w	8007a1c <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	69db      	ldr	r3, [r3, #28]
 800790a:	2b02      	cmp	r3, #2
 800790c:	d15e      	bne.n	80079cc <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800790e:	4b09      	ldr	r3, [pc, #36]	; (8007934 <HAL_RCC_OscConfig+0x4b8>)
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	4a08      	ldr	r2, [pc, #32]	; (8007934 <HAL_RCC_OscConfig+0x4b8>)
 8007914:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007918:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800791a:	f7fb fd8f 	bl	800343c <HAL_GetTick>
 800791e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007920:	e00c      	b.n	800793c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007922:	f7fb fd8b 	bl	800343c <HAL_GetTick>
 8007926:	4602      	mov	r2, r0
 8007928:	693b      	ldr	r3, [r7, #16]
 800792a:	1ad3      	subs	r3, r2, r3
 800792c:	2b02      	cmp	r3, #2
 800792e:	d905      	bls.n	800793c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8007930:	2303      	movs	r3, #3
 8007932:	e0b3      	b.n	8007a9c <HAL_RCC_OscConfig+0x620>
 8007934:	40021000 	.word	0x40021000
 8007938:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800793c:	4b59      	ldr	r3, [pc, #356]	; (8007aa4 <HAL_RCC_OscConfig+0x628>)
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007944:	2b00      	cmp	r3, #0
 8007946:	d1ec      	bne.n	8007922 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007948:	4b56      	ldr	r3, [pc, #344]	; (8007aa4 <HAL_RCC_OscConfig+0x628>)
 800794a:	68da      	ldr	r2, [r3, #12]
 800794c:	4b56      	ldr	r3, [pc, #344]	; (8007aa8 <HAL_RCC_OscConfig+0x62c>)
 800794e:	4013      	ands	r3, r2
 8007950:	687a      	ldr	r2, [r7, #4]
 8007952:	6a11      	ldr	r1, [r2, #32]
 8007954:	687a      	ldr	r2, [r7, #4]
 8007956:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007958:	3a01      	subs	r2, #1
 800795a:	0112      	lsls	r2, r2, #4
 800795c:	4311      	orrs	r1, r2
 800795e:	687a      	ldr	r2, [r7, #4]
 8007960:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8007962:	0212      	lsls	r2, r2, #8
 8007964:	4311      	orrs	r1, r2
 8007966:	687a      	ldr	r2, [r7, #4]
 8007968:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800796a:	0852      	lsrs	r2, r2, #1
 800796c:	3a01      	subs	r2, #1
 800796e:	0552      	lsls	r2, r2, #21
 8007970:	4311      	orrs	r1, r2
 8007972:	687a      	ldr	r2, [r7, #4]
 8007974:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007976:	0852      	lsrs	r2, r2, #1
 8007978:	3a01      	subs	r2, #1
 800797a:	0652      	lsls	r2, r2, #25
 800797c:	4311      	orrs	r1, r2
 800797e:	687a      	ldr	r2, [r7, #4]
 8007980:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8007982:	06d2      	lsls	r2, r2, #27
 8007984:	430a      	orrs	r2, r1
 8007986:	4947      	ldr	r1, [pc, #284]	; (8007aa4 <HAL_RCC_OscConfig+0x628>)
 8007988:	4313      	orrs	r3, r2
 800798a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800798c:	4b45      	ldr	r3, [pc, #276]	; (8007aa4 <HAL_RCC_OscConfig+0x628>)
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	4a44      	ldr	r2, [pc, #272]	; (8007aa4 <HAL_RCC_OscConfig+0x628>)
 8007992:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007996:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007998:	4b42      	ldr	r3, [pc, #264]	; (8007aa4 <HAL_RCC_OscConfig+0x628>)
 800799a:	68db      	ldr	r3, [r3, #12]
 800799c:	4a41      	ldr	r2, [pc, #260]	; (8007aa4 <HAL_RCC_OscConfig+0x628>)
 800799e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80079a2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80079a4:	f7fb fd4a 	bl	800343c <HAL_GetTick>
 80079a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80079aa:	e008      	b.n	80079be <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80079ac:	f7fb fd46 	bl	800343c <HAL_GetTick>
 80079b0:	4602      	mov	r2, r0
 80079b2:	693b      	ldr	r3, [r7, #16]
 80079b4:	1ad3      	subs	r3, r2, r3
 80079b6:	2b02      	cmp	r3, #2
 80079b8:	d901      	bls.n	80079be <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80079ba:	2303      	movs	r3, #3
 80079bc:	e06e      	b.n	8007a9c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80079be:	4b39      	ldr	r3, [pc, #228]	; (8007aa4 <HAL_RCC_OscConfig+0x628>)
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d0f0      	beq.n	80079ac <HAL_RCC_OscConfig+0x530>
 80079ca:	e066      	b.n	8007a9a <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80079cc:	4b35      	ldr	r3, [pc, #212]	; (8007aa4 <HAL_RCC_OscConfig+0x628>)
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	4a34      	ldr	r2, [pc, #208]	; (8007aa4 <HAL_RCC_OscConfig+0x628>)
 80079d2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80079d6:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80079d8:	4b32      	ldr	r3, [pc, #200]	; (8007aa4 <HAL_RCC_OscConfig+0x628>)
 80079da:	68db      	ldr	r3, [r3, #12]
 80079dc:	4a31      	ldr	r2, [pc, #196]	; (8007aa4 <HAL_RCC_OscConfig+0x628>)
 80079de:	f023 0303 	bic.w	r3, r3, #3
 80079e2:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80079e4:	4b2f      	ldr	r3, [pc, #188]	; (8007aa4 <HAL_RCC_OscConfig+0x628>)
 80079e6:	68db      	ldr	r3, [r3, #12]
 80079e8:	4a2e      	ldr	r2, [pc, #184]	; (8007aa4 <HAL_RCC_OscConfig+0x628>)
 80079ea:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80079ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80079f2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80079f4:	f7fb fd22 	bl	800343c <HAL_GetTick>
 80079f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80079fa:	e008      	b.n	8007a0e <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80079fc:	f7fb fd1e 	bl	800343c <HAL_GetTick>
 8007a00:	4602      	mov	r2, r0
 8007a02:	693b      	ldr	r3, [r7, #16]
 8007a04:	1ad3      	subs	r3, r2, r3
 8007a06:	2b02      	cmp	r3, #2
 8007a08:	d901      	bls.n	8007a0e <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8007a0a:	2303      	movs	r3, #3
 8007a0c:	e046      	b.n	8007a9c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007a0e:	4b25      	ldr	r3, [pc, #148]	; (8007aa4 <HAL_RCC_OscConfig+0x628>)
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d1f0      	bne.n	80079fc <HAL_RCC_OscConfig+0x580>
 8007a1a:	e03e      	b.n	8007a9a <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	69db      	ldr	r3, [r3, #28]
 8007a20:	2b01      	cmp	r3, #1
 8007a22:	d101      	bne.n	8007a28 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8007a24:	2301      	movs	r3, #1
 8007a26:	e039      	b.n	8007a9c <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8007a28:	4b1e      	ldr	r3, [pc, #120]	; (8007aa4 <HAL_RCC_OscConfig+0x628>)
 8007a2a:	68db      	ldr	r3, [r3, #12]
 8007a2c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007a2e:	697b      	ldr	r3, [r7, #20]
 8007a30:	f003 0203 	and.w	r2, r3, #3
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	6a1b      	ldr	r3, [r3, #32]
 8007a38:	429a      	cmp	r2, r3
 8007a3a:	d12c      	bne.n	8007a96 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007a3c:	697b      	ldr	r3, [r7, #20]
 8007a3e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a46:	3b01      	subs	r3, #1
 8007a48:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007a4a:	429a      	cmp	r2, r3
 8007a4c:	d123      	bne.n	8007a96 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8007a4e:	697b      	ldr	r3, [r7, #20]
 8007a50:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a58:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007a5a:	429a      	cmp	r2, r3
 8007a5c:	d11b      	bne.n	8007a96 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007a5e:	697b      	ldr	r3, [r7, #20]
 8007a60:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a68:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8007a6a:	429a      	cmp	r2, r3
 8007a6c:	d113      	bne.n	8007a96 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007a6e:	697b      	ldr	r3, [r7, #20]
 8007a70:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a78:	085b      	lsrs	r3, r3, #1
 8007a7a:	3b01      	subs	r3, #1
 8007a7c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007a7e:	429a      	cmp	r2, r3
 8007a80:	d109      	bne.n	8007a96 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8007a82:	697b      	ldr	r3, [r7, #20]
 8007a84:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a8c:	085b      	lsrs	r3, r3, #1
 8007a8e:	3b01      	subs	r3, #1
 8007a90:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007a92:	429a      	cmp	r2, r3
 8007a94:	d001      	beq.n	8007a9a <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8007a96:	2301      	movs	r3, #1
 8007a98:	e000      	b.n	8007a9c <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8007a9a:	2300      	movs	r3, #0
}
 8007a9c:	4618      	mov	r0, r3
 8007a9e:	3720      	adds	r7, #32
 8007aa0:	46bd      	mov	sp, r7
 8007aa2:	bd80      	pop	{r7, pc}
 8007aa4:	40021000 	.word	0x40021000
 8007aa8:	019f800c 	.word	0x019f800c

08007aac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007aac:	b580      	push	{r7, lr}
 8007aae:	b086      	sub	sp, #24
 8007ab0:	af00      	add	r7, sp, #0
 8007ab2:	6078      	str	r0, [r7, #4]
 8007ab4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8007ab6:	2300      	movs	r3, #0
 8007ab8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d101      	bne.n	8007ac4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8007ac0:	2301      	movs	r3, #1
 8007ac2:	e11e      	b.n	8007d02 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007ac4:	4b91      	ldr	r3, [pc, #580]	; (8007d0c <HAL_RCC_ClockConfig+0x260>)
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	f003 030f 	and.w	r3, r3, #15
 8007acc:	683a      	ldr	r2, [r7, #0]
 8007ace:	429a      	cmp	r2, r3
 8007ad0:	d910      	bls.n	8007af4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007ad2:	4b8e      	ldr	r3, [pc, #568]	; (8007d0c <HAL_RCC_ClockConfig+0x260>)
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	f023 020f 	bic.w	r2, r3, #15
 8007ada:	498c      	ldr	r1, [pc, #560]	; (8007d0c <HAL_RCC_ClockConfig+0x260>)
 8007adc:	683b      	ldr	r3, [r7, #0]
 8007ade:	4313      	orrs	r3, r2
 8007ae0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007ae2:	4b8a      	ldr	r3, [pc, #552]	; (8007d0c <HAL_RCC_ClockConfig+0x260>)
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	f003 030f 	and.w	r3, r3, #15
 8007aea:	683a      	ldr	r2, [r7, #0]
 8007aec:	429a      	cmp	r2, r3
 8007aee:	d001      	beq.n	8007af4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8007af0:	2301      	movs	r3, #1
 8007af2:	e106      	b.n	8007d02 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	f003 0301 	and.w	r3, r3, #1
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d073      	beq.n	8007be8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	685b      	ldr	r3, [r3, #4]
 8007b04:	2b03      	cmp	r3, #3
 8007b06:	d129      	bne.n	8007b5c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007b08:	4b81      	ldr	r3, [pc, #516]	; (8007d10 <HAL_RCC_ClockConfig+0x264>)
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d101      	bne.n	8007b18 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8007b14:	2301      	movs	r3, #1
 8007b16:	e0f4      	b.n	8007d02 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8007b18:	f000 f9ce 	bl	8007eb8 <RCC_GetSysClockFreqFromPLLSource>
 8007b1c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8007b1e:	693b      	ldr	r3, [r7, #16]
 8007b20:	4a7c      	ldr	r2, [pc, #496]	; (8007d14 <HAL_RCC_ClockConfig+0x268>)
 8007b22:	4293      	cmp	r3, r2
 8007b24:	d93f      	bls.n	8007ba6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8007b26:	4b7a      	ldr	r3, [pc, #488]	; (8007d10 <HAL_RCC_ClockConfig+0x264>)
 8007b28:	689b      	ldr	r3, [r3, #8]
 8007b2a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d009      	beq.n	8007b46 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d033      	beq.n	8007ba6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d12f      	bne.n	8007ba6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8007b46:	4b72      	ldr	r3, [pc, #456]	; (8007d10 <HAL_RCC_ClockConfig+0x264>)
 8007b48:	689b      	ldr	r3, [r3, #8]
 8007b4a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007b4e:	4a70      	ldr	r2, [pc, #448]	; (8007d10 <HAL_RCC_ClockConfig+0x264>)
 8007b50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b54:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8007b56:	2380      	movs	r3, #128	; 0x80
 8007b58:	617b      	str	r3, [r7, #20]
 8007b5a:	e024      	b.n	8007ba6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	685b      	ldr	r3, [r3, #4]
 8007b60:	2b02      	cmp	r3, #2
 8007b62:	d107      	bne.n	8007b74 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007b64:	4b6a      	ldr	r3, [pc, #424]	; (8007d10 <HAL_RCC_ClockConfig+0x264>)
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d109      	bne.n	8007b84 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8007b70:	2301      	movs	r3, #1
 8007b72:	e0c6      	b.n	8007d02 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007b74:	4b66      	ldr	r3, [pc, #408]	; (8007d10 <HAL_RCC_ClockConfig+0x264>)
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d101      	bne.n	8007b84 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8007b80:	2301      	movs	r3, #1
 8007b82:	e0be      	b.n	8007d02 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8007b84:	f000 f8ce 	bl	8007d24 <HAL_RCC_GetSysClockFreq>
 8007b88:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8007b8a:	693b      	ldr	r3, [r7, #16]
 8007b8c:	4a61      	ldr	r2, [pc, #388]	; (8007d14 <HAL_RCC_ClockConfig+0x268>)
 8007b8e:	4293      	cmp	r3, r2
 8007b90:	d909      	bls.n	8007ba6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8007b92:	4b5f      	ldr	r3, [pc, #380]	; (8007d10 <HAL_RCC_ClockConfig+0x264>)
 8007b94:	689b      	ldr	r3, [r3, #8]
 8007b96:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007b9a:	4a5d      	ldr	r2, [pc, #372]	; (8007d10 <HAL_RCC_ClockConfig+0x264>)
 8007b9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ba0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8007ba2:	2380      	movs	r3, #128	; 0x80
 8007ba4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007ba6:	4b5a      	ldr	r3, [pc, #360]	; (8007d10 <HAL_RCC_ClockConfig+0x264>)
 8007ba8:	689b      	ldr	r3, [r3, #8]
 8007baa:	f023 0203 	bic.w	r2, r3, #3
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	685b      	ldr	r3, [r3, #4]
 8007bb2:	4957      	ldr	r1, [pc, #348]	; (8007d10 <HAL_RCC_ClockConfig+0x264>)
 8007bb4:	4313      	orrs	r3, r2
 8007bb6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007bb8:	f7fb fc40 	bl	800343c <HAL_GetTick>
 8007bbc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007bbe:	e00a      	b.n	8007bd6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007bc0:	f7fb fc3c 	bl	800343c <HAL_GetTick>
 8007bc4:	4602      	mov	r2, r0
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	1ad3      	subs	r3, r2, r3
 8007bca:	f241 3288 	movw	r2, #5000	; 0x1388
 8007bce:	4293      	cmp	r3, r2
 8007bd0:	d901      	bls.n	8007bd6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8007bd2:	2303      	movs	r3, #3
 8007bd4:	e095      	b.n	8007d02 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007bd6:	4b4e      	ldr	r3, [pc, #312]	; (8007d10 <HAL_RCC_ClockConfig+0x264>)
 8007bd8:	689b      	ldr	r3, [r3, #8]
 8007bda:	f003 020c 	and.w	r2, r3, #12
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	685b      	ldr	r3, [r3, #4]
 8007be2:	009b      	lsls	r3, r3, #2
 8007be4:	429a      	cmp	r2, r3
 8007be6:	d1eb      	bne.n	8007bc0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	f003 0302 	and.w	r3, r3, #2
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d023      	beq.n	8007c3c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	f003 0304 	and.w	r3, r3, #4
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d005      	beq.n	8007c0c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007c00:	4b43      	ldr	r3, [pc, #268]	; (8007d10 <HAL_RCC_ClockConfig+0x264>)
 8007c02:	689b      	ldr	r3, [r3, #8]
 8007c04:	4a42      	ldr	r2, [pc, #264]	; (8007d10 <HAL_RCC_ClockConfig+0x264>)
 8007c06:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8007c0a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	f003 0308 	and.w	r3, r3, #8
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d007      	beq.n	8007c28 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8007c18:	4b3d      	ldr	r3, [pc, #244]	; (8007d10 <HAL_RCC_ClockConfig+0x264>)
 8007c1a:	689b      	ldr	r3, [r3, #8]
 8007c1c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8007c20:	4a3b      	ldr	r2, [pc, #236]	; (8007d10 <HAL_RCC_ClockConfig+0x264>)
 8007c22:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8007c26:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007c28:	4b39      	ldr	r3, [pc, #228]	; (8007d10 <HAL_RCC_ClockConfig+0x264>)
 8007c2a:	689b      	ldr	r3, [r3, #8]
 8007c2c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	689b      	ldr	r3, [r3, #8]
 8007c34:	4936      	ldr	r1, [pc, #216]	; (8007d10 <HAL_RCC_ClockConfig+0x264>)
 8007c36:	4313      	orrs	r3, r2
 8007c38:	608b      	str	r3, [r1, #8]
 8007c3a:	e008      	b.n	8007c4e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8007c3c:	697b      	ldr	r3, [r7, #20]
 8007c3e:	2b80      	cmp	r3, #128	; 0x80
 8007c40:	d105      	bne.n	8007c4e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8007c42:	4b33      	ldr	r3, [pc, #204]	; (8007d10 <HAL_RCC_ClockConfig+0x264>)
 8007c44:	689b      	ldr	r3, [r3, #8]
 8007c46:	4a32      	ldr	r2, [pc, #200]	; (8007d10 <HAL_RCC_ClockConfig+0x264>)
 8007c48:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007c4c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007c4e:	4b2f      	ldr	r3, [pc, #188]	; (8007d0c <HAL_RCC_ClockConfig+0x260>)
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	f003 030f 	and.w	r3, r3, #15
 8007c56:	683a      	ldr	r2, [r7, #0]
 8007c58:	429a      	cmp	r2, r3
 8007c5a:	d21d      	bcs.n	8007c98 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007c5c:	4b2b      	ldr	r3, [pc, #172]	; (8007d0c <HAL_RCC_ClockConfig+0x260>)
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	f023 020f 	bic.w	r2, r3, #15
 8007c64:	4929      	ldr	r1, [pc, #164]	; (8007d0c <HAL_RCC_ClockConfig+0x260>)
 8007c66:	683b      	ldr	r3, [r7, #0]
 8007c68:	4313      	orrs	r3, r2
 8007c6a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8007c6c:	f7fb fbe6 	bl	800343c <HAL_GetTick>
 8007c70:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007c72:	e00a      	b.n	8007c8a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007c74:	f7fb fbe2 	bl	800343c <HAL_GetTick>
 8007c78:	4602      	mov	r2, r0
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	1ad3      	subs	r3, r2, r3
 8007c7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007c82:	4293      	cmp	r3, r2
 8007c84:	d901      	bls.n	8007c8a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8007c86:	2303      	movs	r3, #3
 8007c88:	e03b      	b.n	8007d02 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007c8a:	4b20      	ldr	r3, [pc, #128]	; (8007d0c <HAL_RCC_ClockConfig+0x260>)
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	f003 030f 	and.w	r3, r3, #15
 8007c92:	683a      	ldr	r2, [r7, #0]
 8007c94:	429a      	cmp	r2, r3
 8007c96:	d1ed      	bne.n	8007c74 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	f003 0304 	and.w	r3, r3, #4
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d008      	beq.n	8007cb6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007ca4:	4b1a      	ldr	r3, [pc, #104]	; (8007d10 <HAL_RCC_ClockConfig+0x264>)
 8007ca6:	689b      	ldr	r3, [r3, #8]
 8007ca8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	68db      	ldr	r3, [r3, #12]
 8007cb0:	4917      	ldr	r1, [pc, #92]	; (8007d10 <HAL_RCC_ClockConfig+0x264>)
 8007cb2:	4313      	orrs	r3, r2
 8007cb4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	f003 0308 	and.w	r3, r3, #8
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d009      	beq.n	8007cd6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007cc2:	4b13      	ldr	r3, [pc, #76]	; (8007d10 <HAL_RCC_ClockConfig+0x264>)
 8007cc4:	689b      	ldr	r3, [r3, #8]
 8007cc6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	691b      	ldr	r3, [r3, #16]
 8007cce:	00db      	lsls	r3, r3, #3
 8007cd0:	490f      	ldr	r1, [pc, #60]	; (8007d10 <HAL_RCC_ClockConfig+0x264>)
 8007cd2:	4313      	orrs	r3, r2
 8007cd4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8007cd6:	f000 f825 	bl	8007d24 <HAL_RCC_GetSysClockFreq>
 8007cda:	4602      	mov	r2, r0
 8007cdc:	4b0c      	ldr	r3, [pc, #48]	; (8007d10 <HAL_RCC_ClockConfig+0x264>)
 8007cde:	689b      	ldr	r3, [r3, #8]
 8007ce0:	091b      	lsrs	r3, r3, #4
 8007ce2:	f003 030f 	and.w	r3, r3, #15
 8007ce6:	490c      	ldr	r1, [pc, #48]	; (8007d18 <HAL_RCC_ClockConfig+0x26c>)
 8007ce8:	5ccb      	ldrb	r3, [r1, r3]
 8007cea:	f003 031f 	and.w	r3, r3, #31
 8007cee:	fa22 f303 	lsr.w	r3, r2, r3
 8007cf2:	4a0a      	ldr	r2, [pc, #40]	; (8007d1c <HAL_RCC_ClockConfig+0x270>)
 8007cf4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8007cf6:	4b0a      	ldr	r3, [pc, #40]	; (8007d20 <HAL_RCC_ClockConfig+0x274>)
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	4618      	mov	r0, r3
 8007cfc:	f7f9 ff96 	bl	8001c2c <HAL_InitTick>
 8007d00:	4603      	mov	r3, r0
}
 8007d02:	4618      	mov	r0, r3
 8007d04:	3718      	adds	r7, #24
 8007d06:	46bd      	mov	sp, r7
 8007d08:	bd80      	pop	{r7, pc}
 8007d0a:	bf00      	nop
 8007d0c:	40022000 	.word	0x40022000
 8007d10:	40021000 	.word	0x40021000
 8007d14:	04c4b400 	.word	0x04c4b400
 8007d18:	08014a80 	.word	0x08014a80
 8007d1c:	20000000 	.word	0x20000000
 8007d20:	20000004 	.word	0x20000004

08007d24 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007d24:	b480      	push	{r7}
 8007d26:	b087      	sub	sp, #28
 8007d28:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8007d2a:	4b2c      	ldr	r3, [pc, #176]	; (8007ddc <HAL_RCC_GetSysClockFreq+0xb8>)
 8007d2c:	689b      	ldr	r3, [r3, #8]
 8007d2e:	f003 030c 	and.w	r3, r3, #12
 8007d32:	2b04      	cmp	r3, #4
 8007d34:	d102      	bne.n	8007d3c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8007d36:	4b2a      	ldr	r3, [pc, #168]	; (8007de0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8007d38:	613b      	str	r3, [r7, #16]
 8007d3a:	e047      	b.n	8007dcc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8007d3c:	4b27      	ldr	r3, [pc, #156]	; (8007ddc <HAL_RCC_GetSysClockFreq+0xb8>)
 8007d3e:	689b      	ldr	r3, [r3, #8]
 8007d40:	f003 030c 	and.w	r3, r3, #12
 8007d44:	2b08      	cmp	r3, #8
 8007d46:	d102      	bne.n	8007d4e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8007d48:	4b25      	ldr	r3, [pc, #148]	; (8007de0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8007d4a:	613b      	str	r3, [r7, #16]
 8007d4c:	e03e      	b.n	8007dcc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8007d4e:	4b23      	ldr	r3, [pc, #140]	; (8007ddc <HAL_RCC_GetSysClockFreq+0xb8>)
 8007d50:	689b      	ldr	r3, [r3, #8]
 8007d52:	f003 030c 	and.w	r3, r3, #12
 8007d56:	2b0c      	cmp	r3, #12
 8007d58:	d136      	bne.n	8007dc8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007d5a:	4b20      	ldr	r3, [pc, #128]	; (8007ddc <HAL_RCC_GetSysClockFreq+0xb8>)
 8007d5c:	68db      	ldr	r3, [r3, #12]
 8007d5e:	f003 0303 	and.w	r3, r3, #3
 8007d62:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007d64:	4b1d      	ldr	r3, [pc, #116]	; (8007ddc <HAL_RCC_GetSysClockFreq+0xb8>)
 8007d66:	68db      	ldr	r3, [r3, #12]
 8007d68:	091b      	lsrs	r3, r3, #4
 8007d6a:	f003 030f 	and.w	r3, r3, #15
 8007d6e:	3301      	adds	r3, #1
 8007d70:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	2b03      	cmp	r3, #3
 8007d76:	d10c      	bne.n	8007d92 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007d78:	4a19      	ldr	r2, [pc, #100]	; (8007de0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8007d7a:	68bb      	ldr	r3, [r7, #8]
 8007d7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d80:	4a16      	ldr	r2, [pc, #88]	; (8007ddc <HAL_RCC_GetSysClockFreq+0xb8>)
 8007d82:	68d2      	ldr	r2, [r2, #12]
 8007d84:	0a12      	lsrs	r2, r2, #8
 8007d86:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8007d8a:	fb02 f303 	mul.w	r3, r2, r3
 8007d8e:	617b      	str	r3, [r7, #20]
      break;
 8007d90:	e00c      	b.n	8007dac <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007d92:	4a13      	ldr	r2, [pc, #76]	; (8007de0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8007d94:	68bb      	ldr	r3, [r7, #8]
 8007d96:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d9a:	4a10      	ldr	r2, [pc, #64]	; (8007ddc <HAL_RCC_GetSysClockFreq+0xb8>)
 8007d9c:	68d2      	ldr	r2, [r2, #12]
 8007d9e:	0a12      	lsrs	r2, r2, #8
 8007da0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8007da4:	fb02 f303 	mul.w	r3, r2, r3
 8007da8:	617b      	str	r3, [r7, #20]
      break;
 8007daa:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007dac:	4b0b      	ldr	r3, [pc, #44]	; (8007ddc <HAL_RCC_GetSysClockFreq+0xb8>)
 8007dae:	68db      	ldr	r3, [r3, #12]
 8007db0:	0e5b      	lsrs	r3, r3, #25
 8007db2:	f003 0303 	and.w	r3, r3, #3
 8007db6:	3301      	adds	r3, #1
 8007db8:	005b      	lsls	r3, r3, #1
 8007dba:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8007dbc:	697a      	ldr	r2, [r7, #20]
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8007dc4:	613b      	str	r3, [r7, #16]
 8007dc6:	e001      	b.n	8007dcc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8007dc8:	2300      	movs	r3, #0
 8007dca:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8007dcc:	693b      	ldr	r3, [r7, #16]
}
 8007dce:	4618      	mov	r0, r3
 8007dd0:	371c      	adds	r7, #28
 8007dd2:	46bd      	mov	sp, r7
 8007dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd8:	4770      	bx	lr
 8007dda:	bf00      	nop
 8007ddc:	40021000 	.word	0x40021000
 8007de0:	00f42400 	.word	0x00f42400

08007de4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007de4:	b480      	push	{r7}
 8007de6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007de8:	4b03      	ldr	r3, [pc, #12]	; (8007df8 <HAL_RCC_GetHCLKFreq+0x14>)
 8007dea:	681b      	ldr	r3, [r3, #0]
}
 8007dec:	4618      	mov	r0, r3
 8007dee:	46bd      	mov	sp, r7
 8007df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df4:	4770      	bx	lr
 8007df6:	bf00      	nop
 8007df8:	20000000 	.word	0x20000000

08007dfc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007dfc:	b580      	push	{r7, lr}
 8007dfe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8007e00:	f7ff fff0 	bl	8007de4 <HAL_RCC_GetHCLKFreq>
 8007e04:	4602      	mov	r2, r0
 8007e06:	4b06      	ldr	r3, [pc, #24]	; (8007e20 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007e08:	689b      	ldr	r3, [r3, #8]
 8007e0a:	0a1b      	lsrs	r3, r3, #8
 8007e0c:	f003 0307 	and.w	r3, r3, #7
 8007e10:	4904      	ldr	r1, [pc, #16]	; (8007e24 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007e12:	5ccb      	ldrb	r3, [r1, r3]
 8007e14:	f003 031f 	and.w	r3, r3, #31
 8007e18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007e1c:	4618      	mov	r0, r3
 8007e1e:	bd80      	pop	{r7, pc}
 8007e20:	40021000 	.word	0x40021000
 8007e24:	08014a90 	.word	0x08014a90

08007e28 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007e28:	b580      	push	{r7, lr}
 8007e2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8007e2c:	f7ff ffda 	bl	8007de4 <HAL_RCC_GetHCLKFreq>
 8007e30:	4602      	mov	r2, r0
 8007e32:	4b06      	ldr	r3, [pc, #24]	; (8007e4c <HAL_RCC_GetPCLK2Freq+0x24>)
 8007e34:	689b      	ldr	r3, [r3, #8]
 8007e36:	0adb      	lsrs	r3, r3, #11
 8007e38:	f003 0307 	and.w	r3, r3, #7
 8007e3c:	4904      	ldr	r1, [pc, #16]	; (8007e50 <HAL_RCC_GetPCLK2Freq+0x28>)
 8007e3e:	5ccb      	ldrb	r3, [r1, r3]
 8007e40:	f003 031f 	and.w	r3, r3, #31
 8007e44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007e48:	4618      	mov	r0, r3
 8007e4a:	bd80      	pop	{r7, pc}
 8007e4c:	40021000 	.word	0x40021000
 8007e50:	08014a90 	.word	0x08014a90

08007e54 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007e54:	b480      	push	{r7}
 8007e56:	b083      	sub	sp, #12
 8007e58:	af00      	add	r7, sp, #0
 8007e5a:	6078      	str	r0, [r7, #4]
 8007e5c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	220f      	movs	r2, #15
 8007e62:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8007e64:	4b12      	ldr	r3, [pc, #72]	; (8007eb0 <HAL_RCC_GetClockConfig+0x5c>)
 8007e66:	689b      	ldr	r3, [r3, #8]
 8007e68:	f003 0203 	and.w	r2, r3, #3
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8007e70:	4b0f      	ldr	r3, [pc, #60]	; (8007eb0 <HAL_RCC_GetClockConfig+0x5c>)
 8007e72:	689b      	ldr	r3, [r3, #8]
 8007e74:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8007e7c:	4b0c      	ldr	r3, [pc, #48]	; (8007eb0 <HAL_RCC_GetClockConfig+0x5c>)
 8007e7e:	689b      	ldr	r3, [r3, #8]
 8007e80:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8007e88:	4b09      	ldr	r3, [pc, #36]	; (8007eb0 <HAL_RCC_GetClockConfig+0x5c>)
 8007e8a:	689b      	ldr	r3, [r3, #8]
 8007e8c:	08db      	lsrs	r3, r3, #3
 8007e8e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8007e96:	4b07      	ldr	r3, [pc, #28]	; (8007eb4 <HAL_RCC_GetClockConfig+0x60>)
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	f003 020f 	and.w	r2, r3, #15
 8007e9e:	683b      	ldr	r3, [r7, #0]
 8007ea0:	601a      	str	r2, [r3, #0]
}
 8007ea2:	bf00      	nop
 8007ea4:	370c      	adds	r7, #12
 8007ea6:	46bd      	mov	sp, r7
 8007ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eac:	4770      	bx	lr
 8007eae:	bf00      	nop
 8007eb0:	40021000 	.word	0x40021000
 8007eb4:	40022000 	.word	0x40022000

08007eb8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8007eb8:	b480      	push	{r7}
 8007eba:	b087      	sub	sp, #28
 8007ebc:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007ebe:	4b1e      	ldr	r3, [pc, #120]	; (8007f38 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007ec0:	68db      	ldr	r3, [r3, #12]
 8007ec2:	f003 0303 	and.w	r3, r3, #3
 8007ec6:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007ec8:	4b1b      	ldr	r3, [pc, #108]	; (8007f38 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007eca:	68db      	ldr	r3, [r3, #12]
 8007ecc:	091b      	lsrs	r3, r3, #4
 8007ece:	f003 030f 	and.w	r3, r3, #15
 8007ed2:	3301      	adds	r3, #1
 8007ed4:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8007ed6:	693b      	ldr	r3, [r7, #16]
 8007ed8:	2b03      	cmp	r3, #3
 8007eda:	d10c      	bne.n	8007ef6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007edc:	4a17      	ldr	r2, [pc, #92]	; (8007f3c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ee4:	4a14      	ldr	r2, [pc, #80]	; (8007f38 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007ee6:	68d2      	ldr	r2, [r2, #12]
 8007ee8:	0a12      	lsrs	r2, r2, #8
 8007eea:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8007eee:	fb02 f303 	mul.w	r3, r2, r3
 8007ef2:	617b      	str	r3, [r7, #20]
    break;
 8007ef4:	e00c      	b.n	8007f10 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007ef6:	4a11      	ldr	r2, [pc, #68]	; (8007f3c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	fbb2 f3f3 	udiv	r3, r2, r3
 8007efe:	4a0e      	ldr	r2, [pc, #56]	; (8007f38 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007f00:	68d2      	ldr	r2, [r2, #12]
 8007f02:	0a12      	lsrs	r2, r2, #8
 8007f04:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8007f08:	fb02 f303 	mul.w	r3, r2, r3
 8007f0c:	617b      	str	r3, [r7, #20]
    break;
 8007f0e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007f10:	4b09      	ldr	r3, [pc, #36]	; (8007f38 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007f12:	68db      	ldr	r3, [r3, #12]
 8007f14:	0e5b      	lsrs	r3, r3, #25
 8007f16:	f003 0303 	and.w	r3, r3, #3
 8007f1a:	3301      	adds	r3, #1
 8007f1c:	005b      	lsls	r3, r3, #1
 8007f1e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8007f20:	697a      	ldr	r2, [r7, #20]
 8007f22:	68bb      	ldr	r3, [r7, #8]
 8007f24:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f28:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8007f2a:	687b      	ldr	r3, [r7, #4]
}
 8007f2c:	4618      	mov	r0, r3
 8007f2e:	371c      	adds	r7, #28
 8007f30:	46bd      	mov	sp, r7
 8007f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f36:	4770      	bx	lr
 8007f38:	40021000 	.word	0x40021000
 8007f3c:	00f42400 	.word	0x00f42400

08007f40 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007f40:	b580      	push	{r7, lr}
 8007f42:	b086      	sub	sp, #24
 8007f44:	af00      	add	r7, sp, #0
 8007f46:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007f48:	2300      	movs	r3, #0
 8007f4a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007f4c:	2300      	movs	r3, #0
 8007f4e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	f000 8098 	beq.w	800808e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007f5e:	2300      	movs	r3, #0
 8007f60:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007f62:	4b43      	ldr	r3, [pc, #268]	; (8008070 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007f64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d10d      	bne.n	8007f8a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007f6e:	4b40      	ldr	r3, [pc, #256]	; (8008070 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007f70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f72:	4a3f      	ldr	r2, [pc, #252]	; (8008070 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007f74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007f78:	6593      	str	r3, [r2, #88]	; 0x58
 8007f7a:	4b3d      	ldr	r3, [pc, #244]	; (8008070 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007f7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007f82:	60bb      	str	r3, [r7, #8]
 8007f84:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007f86:	2301      	movs	r3, #1
 8007f88:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007f8a:	4b3a      	ldr	r3, [pc, #232]	; (8008074 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	4a39      	ldr	r2, [pc, #228]	; (8008074 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007f90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007f94:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007f96:	f7fb fa51 	bl	800343c <HAL_GetTick>
 8007f9a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007f9c:	e009      	b.n	8007fb2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007f9e:	f7fb fa4d 	bl	800343c <HAL_GetTick>
 8007fa2:	4602      	mov	r2, r0
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	1ad3      	subs	r3, r2, r3
 8007fa8:	2b02      	cmp	r3, #2
 8007faa:	d902      	bls.n	8007fb2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8007fac:	2303      	movs	r3, #3
 8007fae:	74fb      	strb	r3, [r7, #19]
        break;
 8007fb0:	e005      	b.n	8007fbe <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007fb2:	4b30      	ldr	r3, [pc, #192]	; (8008074 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d0ef      	beq.n	8007f9e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8007fbe:	7cfb      	ldrb	r3, [r7, #19]
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d159      	bne.n	8008078 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007fc4:	4b2a      	ldr	r3, [pc, #168]	; (8008070 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007fc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007fca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007fce:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8007fd0:	697b      	ldr	r3, [r7, #20]
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d01e      	beq.n	8008014 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007fda:	697a      	ldr	r2, [r7, #20]
 8007fdc:	429a      	cmp	r2, r3
 8007fde:	d019      	beq.n	8008014 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007fe0:	4b23      	ldr	r3, [pc, #140]	; (8008070 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007fe2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007fe6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007fea:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007fec:	4b20      	ldr	r3, [pc, #128]	; (8008070 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007fee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ff2:	4a1f      	ldr	r2, [pc, #124]	; (8008070 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007ff4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007ff8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007ffc:	4b1c      	ldr	r3, [pc, #112]	; (8008070 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007ffe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008002:	4a1b      	ldr	r2, [pc, #108]	; (8008070 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008004:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008008:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800800c:	4a18      	ldr	r2, [pc, #96]	; (8008070 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800800e:	697b      	ldr	r3, [r7, #20]
 8008010:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8008014:	697b      	ldr	r3, [r7, #20]
 8008016:	f003 0301 	and.w	r3, r3, #1
 800801a:	2b00      	cmp	r3, #0
 800801c:	d016      	beq.n	800804c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800801e:	f7fb fa0d 	bl	800343c <HAL_GetTick>
 8008022:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008024:	e00b      	b.n	800803e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008026:	f7fb fa09 	bl	800343c <HAL_GetTick>
 800802a:	4602      	mov	r2, r0
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	1ad3      	subs	r3, r2, r3
 8008030:	f241 3288 	movw	r2, #5000	; 0x1388
 8008034:	4293      	cmp	r3, r2
 8008036:	d902      	bls.n	800803e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8008038:	2303      	movs	r3, #3
 800803a:	74fb      	strb	r3, [r7, #19]
            break;
 800803c:	e006      	b.n	800804c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800803e:	4b0c      	ldr	r3, [pc, #48]	; (8008070 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008040:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008044:	f003 0302 	and.w	r3, r3, #2
 8008048:	2b00      	cmp	r3, #0
 800804a:	d0ec      	beq.n	8008026 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800804c:	7cfb      	ldrb	r3, [r7, #19]
 800804e:	2b00      	cmp	r3, #0
 8008050:	d10b      	bne.n	800806a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008052:	4b07      	ldr	r3, [pc, #28]	; (8008070 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008054:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008058:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008060:	4903      	ldr	r1, [pc, #12]	; (8008070 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008062:	4313      	orrs	r3, r2
 8008064:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8008068:	e008      	b.n	800807c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800806a:	7cfb      	ldrb	r3, [r7, #19]
 800806c:	74bb      	strb	r3, [r7, #18]
 800806e:	e005      	b.n	800807c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8008070:	40021000 	.word	0x40021000
 8008074:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008078:	7cfb      	ldrb	r3, [r7, #19]
 800807a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800807c:	7c7b      	ldrb	r3, [r7, #17]
 800807e:	2b01      	cmp	r3, #1
 8008080:	d105      	bne.n	800808e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008082:	4ba7      	ldr	r3, [pc, #668]	; (8008320 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008084:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008086:	4aa6      	ldr	r2, [pc, #664]	; (8008320 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008088:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800808c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	f003 0301 	and.w	r3, r3, #1
 8008096:	2b00      	cmp	r3, #0
 8008098:	d00a      	beq.n	80080b0 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800809a:	4ba1      	ldr	r3, [pc, #644]	; (8008320 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800809c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80080a0:	f023 0203 	bic.w	r2, r3, #3
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	685b      	ldr	r3, [r3, #4]
 80080a8:	499d      	ldr	r1, [pc, #628]	; (8008320 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80080aa:	4313      	orrs	r3, r2
 80080ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	f003 0302 	and.w	r3, r3, #2
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d00a      	beq.n	80080d2 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80080bc:	4b98      	ldr	r3, [pc, #608]	; (8008320 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80080be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80080c2:	f023 020c 	bic.w	r2, r3, #12
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	689b      	ldr	r3, [r3, #8]
 80080ca:	4995      	ldr	r1, [pc, #596]	; (8008320 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80080cc:	4313      	orrs	r3, r2
 80080ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	f003 0304 	and.w	r3, r3, #4
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d00a      	beq.n	80080f4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80080de:	4b90      	ldr	r3, [pc, #576]	; (8008320 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80080e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80080e4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	68db      	ldr	r3, [r3, #12]
 80080ec:	498c      	ldr	r1, [pc, #560]	; (8008320 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80080ee:	4313      	orrs	r3, r2
 80080f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	f003 0308 	and.w	r3, r3, #8
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d00a      	beq.n	8008116 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8008100:	4b87      	ldr	r3, [pc, #540]	; (8008320 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008102:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008106:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	691b      	ldr	r3, [r3, #16]
 800810e:	4984      	ldr	r1, [pc, #528]	; (8008320 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008110:	4313      	orrs	r3, r2
 8008112:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	f003 0310 	and.w	r3, r3, #16
 800811e:	2b00      	cmp	r3, #0
 8008120:	d00a      	beq.n	8008138 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8008122:	4b7f      	ldr	r3, [pc, #508]	; (8008320 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008124:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008128:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	695b      	ldr	r3, [r3, #20]
 8008130:	497b      	ldr	r1, [pc, #492]	; (8008320 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008132:	4313      	orrs	r3, r2
 8008134:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	f003 0320 	and.w	r3, r3, #32
 8008140:	2b00      	cmp	r3, #0
 8008142:	d00a      	beq.n	800815a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008144:	4b76      	ldr	r3, [pc, #472]	; (8008320 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008146:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800814a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	699b      	ldr	r3, [r3, #24]
 8008152:	4973      	ldr	r1, [pc, #460]	; (8008320 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008154:	4313      	orrs	r3, r2
 8008156:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008162:	2b00      	cmp	r3, #0
 8008164:	d00a      	beq.n	800817c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008166:	4b6e      	ldr	r3, [pc, #440]	; (8008320 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008168:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800816c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	69db      	ldr	r3, [r3, #28]
 8008174:	496a      	ldr	r1, [pc, #424]	; (8008320 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008176:	4313      	orrs	r3, r2
 8008178:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008184:	2b00      	cmp	r3, #0
 8008186:	d00a      	beq.n	800819e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8008188:	4b65      	ldr	r3, [pc, #404]	; (8008320 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800818a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800818e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	6a1b      	ldr	r3, [r3, #32]
 8008196:	4962      	ldr	r1, [pc, #392]	; (8008320 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008198:	4313      	orrs	r3, r2
 800819a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d00a      	beq.n	80081c0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80081aa:	4b5d      	ldr	r3, [pc, #372]	; (8008320 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80081ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80081b0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081b8:	4959      	ldr	r1, [pc, #356]	; (8008320 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80081ba:	4313      	orrs	r3, r2
 80081bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d00a      	beq.n	80081e2 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80081cc:	4b54      	ldr	r3, [pc, #336]	; (8008320 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80081ce:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80081d2:	f023 0203 	bic.w	r2, r3, #3
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081da:	4951      	ldr	r1, [pc, #324]	; (8008320 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80081dc:	4313      	orrs	r3, r2
 80081de:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d00a      	beq.n	8008204 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80081ee:	4b4c      	ldr	r3, [pc, #304]	; (8008320 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80081f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80081f4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081fc:	4948      	ldr	r1, [pc, #288]	; (8008320 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80081fe:	4313      	orrs	r3, r2
 8008200:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800820c:	2b00      	cmp	r3, #0
 800820e:	d015      	beq.n	800823c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008210:	4b43      	ldr	r3, [pc, #268]	; (8008320 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008212:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008216:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800821e:	4940      	ldr	r1, [pc, #256]	; (8008320 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008220:	4313      	orrs	r3, r2
 8008222:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800822a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800822e:	d105      	bne.n	800823c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008230:	4b3b      	ldr	r3, [pc, #236]	; (8008320 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008232:	68db      	ldr	r3, [r3, #12]
 8008234:	4a3a      	ldr	r2, [pc, #232]	; (8008320 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008236:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800823a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008244:	2b00      	cmp	r3, #0
 8008246:	d015      	beq.n	8008274 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8008248:	4b35      	ldr	r3, [pc, #212]	; (8008320 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800824a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800824e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008256:	4932      	ldr	r1, [pc, #200]	; (8008320 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008258:	4313      	orrs	r3, r2
 800825a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008262:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008266:	d105      	bne.n	8008274 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008268:	4b2d      	ldr	r3, [pc, #180]	; (8008320 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800826a:	68db      	ldr	r3, [r3, #12]
 800826c:	4a2c      	ldr	r2, [pc, #176]	; (8008320 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800826e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008272:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800827c:	2b00      	cmp	r3, #0
 800827e:	d015      	beq.n	80082ac <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8008280:	4b27      	ldr	r3, [pc, #156]	; (8008320 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008282:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008286:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800828e:	4924      	ldr	r1, [pc, #144]	; (8008320 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008290:	4313      	orrs	r3, r2
 8008292:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800829a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800829e:	d105      	bne.n	80082ac <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80082a0:	4b1f      	ldr	r3, [pc, #124]	; (8008320 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80082a2:	68db      	ldr	r3, [r3, #12]
 80082a4:	4a1e      	ldr	r2, [pc, #120]	; (8008320 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80082a6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80082aa:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d015      	beq.n	80082e4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80082b8:	4b19      	ldr	r3, [pc, #100]	; (8008320 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80082ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80082be:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80082c6:	4916      	ldr	r1, [pc, #88]	; (8008320 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80082c8:	4313      	orrs	r3, r2
 80082ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80082d2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80082d6:	d105      	bne.n	80082e4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80082d8:	4b11      	ldr	r3, [pc, #68]	; (8008320 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80082da:	68db      	ldr	r3, [r3, #12]
 80082dc:	4a10      	ldr	r2, [pc, #64]	; (8008320 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80082de:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80082e2:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d019      	beq.n	8008324 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80082f0:	4b0b      	ldr	r3, [pc, #44]	; (8008320 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80082f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80082f6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082fe:	4908      	ldr	r1, [pc, #32]	; (8008320 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008300:	4313      	orrs	r3, r2
 8008302:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800830a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800830e:	d109      	bne.n	8008324 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008310:	4b03      	ldr	r3, [pc, #12]	; (8008320 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008312:	68db      	ldr	r3, [r3, #12]
 8008314:	4a02      	ldr	r2, [pc, #8]	; (8008320 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008316:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800831a:	60d3      	str	r3, [r2, #12]
 800831c:	e002      	b.n	8008324 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800831e:	bf00      	nop
 8008320:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800832c:	2b00      	cmp	r3, #0
 800832e:	d015      	beq.n	800835c <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8008330:	4b29      	ldr	r3, [pc, #164]	; (80083d8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008332:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008336:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800833e:	4926      	ldr	r1, [pc, #152]	; (80083d8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008340:	4313      	orrs	r3, r2
 8008342:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800834a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800834e:	d105      	bne.n	800835c <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8008350:	4b21      	ldr	r3, [pc, #132]	; (80083d8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008352:	68db      	ldr	r3, [r3, #12]
 8008354:	4a20      	ldr	r2, [pc, #128]	; (80083d8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008356:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800835a:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008364:	2b00      	cmp	r3, #0
 8008366:	d015      	beq.n	8008394 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8008368:	4b1b      	ldr	r3, [pc, #108]	; (80083d8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800836a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800836e:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008376:	4918      	ldr	r1, [pc, #96]	; (80083d8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008378:	4313      	orrs	r3, r2
 800837a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008382:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008386:	d105      	bne.n	8008394 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8008388:	4b13      	ldr	r3, [pc, #76]	; (80083d8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800838a:	68db      	ldr	r3, [r3, #12]
 800838c:	4a12      	ldr	r2, [pc, #72]	; (80083d8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800838e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008392:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800839c:	2b00      	cmp	r3, #0
 800839e:	d015      	beq.n	80083cc <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80083a0:	4b0d      	ldr	r3, [pc, #52]	; (80083d8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80083a2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80083a6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80083ae:	490a      	ldr	r1, [pc, #40]	; (80083d8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80083b0:	4313      	orrs	r3, r2
 80083b2:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80083ba:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80083be:	d105      	bne.n	80083cc <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80083c0:	4b05      	ldr	r3, [pc, #20]	; (80083d8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80083c2:	68db      	ldr	r3, [r3, #12]
 80083c4:	4a04      	ldr	r2, [pc, #16]	; (80083d8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80083c6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80083ca:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80083cc:	7cbb      	ldrb	r3, [r7, #18]
}
 80083ce:	4618      	mov	r0, r3
 80083d0:	3718      	adds	r7, #24
 80083d2:	46bd      	mov	sp, r7
 80083d4:	bd80      	pop	{r7, pc}
 80083d6:	bf00      	nop
 80083d8:	40021000 	.word	0x40021000

080083dc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80083dc:	b580      	push	{r7, lr}
 80083de:	b082      	sub	sp, #8
 80083e0:	af00      	add	r7, sp, #0
 80083e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d101      	bne.n	80083ee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80083ea:	2301      	movs	r3, #1
 80083ec:	e049      	b.n	8008482 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80083f4:	b2db      	uxtb	r3, r3
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d106      	bne.n	8008408 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	2200      	movs	r2, #0
 80083fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008402:	6878      	ldr	r0, [r7, #4]
 8008404:	f7fa f85a 	bl	80024bc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	2202      	movs	r2, #2
 800840c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681a      	ldr	r2, [r3, #0]
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	3304      	adds	r3, #4
 8008418:	4619      	mov	r1, r3
 800841a:	4610      	mov	r0, r2
 800841c:	f001 f824 	bl	8009468 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	2201      	movs	r2, #1
 8008424:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	2201      	movs	r2, #1
 800842c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	2201      	movs	r2, #1
 8008434:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	2201      	movs	r2, #1
 800843c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	2201      	movs	r2, #1
 8008444:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	2201      	movs	r2, #1
 800844c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	2201      	movs	r2, #1
 8008454:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	2201      	movs	r2, #1
 800845c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	2201      	movs	r2, #1
 8008464:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	2201      	movs	r2, #1
 800846c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	2201      	movs	r2, #1
 8008474:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	2201      	movs	r2, #1
 800847c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008480:	2300      	movs	r3, #0
}
 8008482:	4618      	mov	r0, r3
 8008484:	3708      	adds	r7, #8
 8008486:	46bd      	mov	sp, r7
 8008488:	bd80      	pop	{r7, pc}
	...

0800848c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800848c:	b480      	push	{r7}
 800848e:	b085      	sub	sp, #20
 8008490:	af00      	add	r7, sp, #0
 8008492:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800849a:	b2db      	uxtb	r3, r3
 800849c:	2b01      	cmp	r3, #1
 800849e:	d001      	beq.n	80084a4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80084a0:	2301      	movs	r3, #1
 80084a2:	e054      	b.n	800854e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	2202      	movs	r2, #2
 80084a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	68da      	ldr	r2, [r3, #12]
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	f042 0201 	orr.w	r2, r2, #1
 80084ba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	4a26      	ldr	r2, [pc, #152]	; (800855c <HAL_TIM_Base_Start_IT+0xd0>)
 80084c2:	4293      	cmp	r3, r2
 80084c4:	d022      	beq.n	800850c <HAL_TIM_Base_Start_IT+0x80>
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80084ce:	d01d      	beq.n	800850c <HAL_TIM_Base_Start_IT+0x80>
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	4a22      	ldr	r2, [pc, #136]	; (8008560 <HAL_TIM_Base_Start_IT+0xd4>)
 80084d6:	4293      	cmp	r3, r2
 80084d8:	d018      	beq.n	800850c <HAL_TIM_Base_Start_IT+0x80>
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	4a21      	ldr	r2, [pc, #132]	; (8008564 <HAL_TIM_Base_Start_IT+0xd8>)
 80084e0:	4293      	cmp	r3, r2
 80084e2:	d013      	beq.n	800850c <HAL_TIM_Base_Start_IT+0x80>
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	4a1f      	ldr	r2, [pc, #124]	; (8008568 <HAL_TIM_Base_Start_IT+0xdc>)
 80084ea:	4293      	cmp	r3, r2
 80084ec:	d00e      	beq.n	800850c <HAL_TIM_Base_Start_IT+0x80>
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	4a1e      	ldr	r2, [pc, #120]	; (800856c <HAL_TIM_Base_Start_IT+0xe0>)
 80084f4:	4293      	cmp	r3, r2
 80084f6:	d009      	beq.n	800850c <HAL_TIM_Base_Start_IT+0x80>
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	4a1c      	ldr	r2, [pc, #112]	; (8008570 <HAL_TIM_Base_Start_IT+0xe4>)
 80084fe:	4293      	cmp	r3, r2
 8008500:	d004      	beq.n	800850c <HAL_TIM_Base_Start_IT+0x80>
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	4a1b      	ldr	r2, [pc, #108]	; (8008574 <HAL_TIM_Base_Start_IT+0xe8>)
 8008508:	4293      	cmp	r3, r2
 800850a:	d115      	bne.n	8008538 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	689a      	ldr	r2, [r3, #8]
 8008512:	4b19      	ldr	r3, [pc, #100]	; (8008578 <HAL_TIM_Base_Start_IT+0xec>)
 8008514:	4013      	ands	r3, r2
 8008516:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	2b06      	cmp	r3, #6
 800851c:	d015      	beq.n	800854a <HAL_TIM_Base_Start_IT+0xbe>
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008524:	d011      	beq.n	800854a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	681a      	ldr	r2, [r3, #0]
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	f042 0201 	orr.w	r2, r2, #1
 8008534:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008536:	e008      	b.n	800854a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	681a      	ldr	r2, [r3, #0]
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	f042 0201 	orr.w	r2, r2, #1
 8008546:	601a      	str	r2, [r3, #0]
 8008548:	e000      	b.n	800854c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800854a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800854c:	2300      	movs	r3, #0
}
 800854e:	4618      	mov	r0, r3
 8008550:	3714      	adds	r7, #20
 8008552:	46bd      	mov	sp, r7
 8008554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008558:	4770      	bx	lr
 800855a:	bf00      	nop
 800855c:	40012c00 	.word	0x40012c00
 8008560:	40000400 	.word	0x40000400
 8008564:	40000800 	.word	0x40000800
 8008568:	40000c00 	.word	0x40000c00
 800856c:	40013400 	.word	0x40013400
 8008570:	40014000 	.word	0x40014000
 8008574:	40015000 	.word	0x40015000
 8008578:	00010007 	.word	0x00010007

0800857c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800857c:	b580      	push	{r7, lr}
 800857e:	b082      	sub	sp, #8
 8008580:	af00      	add	r7, sp, #0
 8008582:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	2b00      	cmp	r3, #0
 8008588:	d101      	bne.n	800858e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800858a:	2301      	movs	r3, #1
 800858c:	e049      	b.n	8008622 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008594:	b2db      	uxtb	r3, r3
 8008596:	2b00      	cmp	r3, #0
 8008598:	d106      	bne.n	80085a8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	2200      	movs	r2, #0
 800859e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80085a2:	6878      	ldr	r0, [r7, #4]
 80085a4:	f000 f841 	bl	800862a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	2202      	movs	r2, #2
 80085ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	681a      	ldr	r2, [r3, #0]
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	3304      	adds	r3, #4
 80085b8:	4619      	mov	r1, r3
 80085ba:	4610      	mov	r0, r2
 80085bc:	f000 ff54 	bl	8009468 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	2201      	movs	r2, #1
 80085c4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	2201      	movs	r2, #1
 80085cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	2201      	movs	r2, #1
 80085d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	2201      	movs	r2, #1
 80085dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	2201      	movs	r2, #1
 80085e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	2201      	movs	r2, #1
 80085ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	2201      	movs	r2, #1
 80085f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	2201      	movs	r2, #1
 80085fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	2201      	movs	r2, #1
 8008604:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	2201      	movs	r2, #1
 800860c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	2201      	movs	r2, #1
 8008614:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	2201      	movs	r2, #1
 800861c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008620:	2300      	movs	r3, #0
}
 8008622:	4618      	mov	r0, r3
 8008624:	3708      	adds	r7, #8
 8008626:	46bd      	mov	sp, r7
 8008628:	bd80      	pop	{r7, pc}

0800862a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800862a:	b480      	push	{r7}
 800862c:	b083      	sub	sp, #12
 800862e:	af00      	add	r7, sp, #0
 8008630:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008632:	bf00      	nop
 8008634:	370c      	adds	r7, #12
 8008636:	46bd      	mov	sp, r7
 8008638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800863c:	4770      	bx	lr
	...

08008640 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008640:	b580      	push	{r7, lr}
 8008642:	b084      	sub	sp, #16
 8008644:	af00      	add	r7, sp, #0
 8008646:	6078      	str	r0, [r7, #4]
 8008648:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800864a:	683b      	ldr	r3, [r7, #0]
 800864c:	2b00      	cmp	r3, #0
 800864e:	d109      	bne.n	8008664 <HAL_TIM_PWM_Start+0x24>
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008656:	b2db      	uxtb	r3, r3
 8008658:	2b01      	cmp	r3, #1
 800865a:	bf14      	ite	ne
 800865c:	2301      	movne	r3, #1
 800865e:	2300      	moveq	r3, #0
 8008660:	b2db      	uxtb	r3, r3
 8008662:	e03c      	b.n	80086de <HAL_TIM_PWM_Start+0x9e>
 8008664:	683b      	ldr	r3, [r7, #0]
 8008666:	2b04      	cmp	r3, #4
 8008668:	d109      	bne.n	800867e <HAL_TIM_PWM_Start+0x3e>
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008670:	b2db      	uxtb	r3, r3
 8008672:	2b01      	cmp	r3, #1
 8008674:	bf14      	ite	ne
 8008676:	2301      	movne	r3, #1
 8008678:	2300      	moveq	r3, #0
 800867a:	b2db      	uxtb	r3, r3
 800867c:	e02f      	b.n	80086de <HAL_TIM_PWM_Start+0x9e>
 800867e:	683b      	ldr	r3, [r7, #0]
 8008680:	2b08      	cmp	r3, #8
 8008682:	d109      	bne.n	8008698 <HAL_TIM_PWM_Start+0x58>
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800868a:	b2db      	uxtb	r3, r3
 800868c:	2b01      	cmp	r3, #1
 800868e:	bf14      	ite	ne
 8008690:	2301      	movne	r3, #1
 8008692:	2300      	moveq	r3, #0
 8008694:	b2db      	uxtb	r3, r3
 8008696:	e022      	b.n	80086de <HAL_TIM_PWM_Start+0x9e>
 8008698:	683b      	ldr	r3, [r7, #0]
 800869a:	2b0c      	cmp	r3, #12
 800869c:	d109      	bne.n	80086b2 <HAL_TIM_PWM_Start+0x72>
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80086a4:	b2db      	uxtb	r3, r3
 80086a6:	2b01      	cmp	r3, #1
 80086a8:	bf14      	ite	ne
 80086aa:	2301      	movne	r3, #1
 80086ac:	2300      	moveq	r3, #0
 80086ae:	b2db      	uxtb	r3, r3
 80086b0:	e015      	b.n	80086de <HAL_TIM_PWM_Start+0x9e>
 80086b2:	683b      	ldr	r3, [r7, #0]
 80086b4:	2b10      	cmp	r3, #16
 80086b6:	d109      	bne.n	80086cc <HAL_TIM_PWM_Start+0x8c>
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80086be:	b2db      	uxtb	r3, r3
 80086c0:	2b01      	cmp	r3, #1
 80086c2:	bf14      	ite	ne
 80086c4:	2301      	movne	r3, #1
 80086c6:	2300      	moveq	r3, #0
 80086c8:	b2db      	uxtb	r3, r3
 80086ca:	e008      	b.n	80086de <HAL_TIM_PWM_Start+0x9e>
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80086d2:	b2db      	uxtb	r3, r3
 80086d4:	2b01      	cmp	r3, #1
 80086d6:	bf14      	ite	ne
 80086d8:	2301      	movne	r3, #1
 80086da:	2300      	moveq	r3, #0
 80086dc:	b2db      	uxtb	r3, r3
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d001      	beq.n	80086e6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80086e2:	2301      	movs	r3, #1
 80086e4:	e0a6      	b.n	8008834 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80086e6:	683b      	ldr	r3, [r7, #0]
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d104      	bne.n	80086f6 <HAL_TIM_PWM_Start+0xb6>
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	2202      	movs	r2, #2
 80086f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80086f4:	e023      	b.n	800873e <HAL_TIM_PWM_Start+0xfe>
 80086f6:	683b      	ldr	r3, [r7, #0]
 80086f8:	2b04      	cmp	r3, #4
 80086fa:	d104      	bne.n	8008706 <HAL_TIM_PWM_Start+0xc6>
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	2202      	movs	r2, #2
 8008700:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008704:	e01b      	b.n	800873e <HAL_TIM_PWM_Start+0xfe>
 8008706:	683b      	ldr	r3, [r7, #0]
 8008708:	2b08      	cmp	r3, #8
 800870a:	d104      	bne.n	8008716 <HAL_TIM_PWM_Start+0xd6>
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	2202      	movs	r2, #2
 8008710:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008714:	e013      	b.n	800873e <HAL_TIM_PWM_Start+0xfe>
 8008716:	683b      	ldr	r3, [r7, #0]
 8008718:	2b0c      	cmp	r3, #12
 800871a:	d104      	bne.n	8008726 <HAL_TIM_PWM_Start+0xe6>
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	2202      	movs	r2, #2
 8008720:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008724:	e00b      	b.n	800873e <HAL_TIM_PWM_Start+0xfe>
 8008726:	683b      	ldr	r3, [r7, #0]
 8008728:	2b10      	cmp	r3, #16
 800872a:	d104      	bne.n	8008736 <HAL_TIM_PWM_Start+0xf6>
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	2202      	movs	r2, #2
 8008730:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008734:	e003      	b.n	800873e <HAL_TIM_PWM_Start+0xfe>
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	2202      	movs	r2, #2
 800873a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	2201      	movs	r2, #1
 8008744:	6839      	ldr	r1, [r7, #0]
 8008746:	4618      	mov	r0, r3
 8008748:	f001 fc26 	bl	8009f98 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	4a3a      	ldr	r2, [pc, #232]	; (800883c <HAL_TIM_PWM_Start+0x1fc>)
 8008752:	4293      	cmp	r3, r2
 8008754:	d018      	beq.n	8008788 <HAL_TIM_PWM_Start+0x148>
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	4a39      	ldr	r2, [pc, #228]	; (8008840 <HAL_TIM_PWM_Start+0x200>)
 800875c:	4293      	cmp	r3, r2
 800875e:	d013      	beq.n	8008788 <HAL_TIM_PWM_Start+0x148>
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	4a37      	ldr	r2, [pc, #220]	; (8008844 <HAL_TIM_PWM_Start+0x204>)
 8008766:	4293      	cmp	r3, r2
 8008768:	d00e      	beq.n	8008788 <HAL_TIM_PWM_Start+0x148>
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	4a36      	ldr	r2, [pc, #216]	; (8008848 <HAL_TIM_PWM_Start+0x208>)
 8008770:	4293      	cmp	r3, r2
 8008772:	d009      	beq.n	8008788 <HAL_TIM_PWM_Start+0x148>
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	4a34      	ldr	r2, [pc, #208]	; (800884c <HAL_TIM_PWM_Start+0x20c>)
 800877a:	4293      	cmp	r3, r2
 800877c:	d004      	beq.n	8008788 <HAL_TIM_PWM_Start+0x148>
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	4a33      	ldr	r2, [pc, #204]	; (8008850 <HAL_TIM_PWM_Start+0x210>)
 8008784:	4293      	cmp	r3, r2
 8008786:	d101      	bne.n	800878c <HAL_TIM_PWM_Start+0x14c>
 8008788:	2301      	movs	r3, #1
 800878a:	e000      	b.n	800878e <HAL_TIM_PWM_Start+0x14e>
 800878c:	2300      	movs	r3, #0
 800878e:	2b00      	cmp	r3, #0
 8008790:	d007      	beq.n	80087a2 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80087a0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	4a25      	ldr	r2, [pc, #148]	; (800883c <HAL_TIM_PWM_Start+0x1fc>)
 80087a8:	4293      	cmp	r3, r2
 80087aa:	d022      	beq.n	80087f2 <HAL_TIM_PWM_Start+0x1b2>
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80087b4:	d01d      	beq.n	80087f2 <HAL_TIM_PWM_Start+0x1b2>
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	4a26      	ldr	r2, [pc, #152]	; (8008854 <HAL_TIM_PWM_Start+0x214>)
 80087bc:	4293      	cmp	r3, r2
 80087be:	d018      	beq.n	80087f2 <HAL_TIM_PWM_Start+0x1b2>
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	4a24      	ldr	r2, [pc, #144]	; (8008858 <HAL_TIM_PWM_Start+0x218>)
 80087c6:	4293      	cmp	r3, r2
 80087c8:	d013      	beq.n	80087f2 <HAL_TIM_PWM_Start+0x1b2>
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	4a23      	ldr	r2, [pc, #140]	; (800885c <HAL_TIM_PWM_Start+0x21c>)
 80087d0:	4293      	cmp	r3, r2
 80087d2:	d00e      	beq.n	80087f2 <HAL_TIM_PWM_Start+0x1b2>
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	4a19      	ldr	r2, [pc, #100]	; (8008840 <HAL_TIM_PWM_Start+0x200>)
 80087da:	4293      	cmp	r3, r2
 80087dc:	d009      	beq.n	80087f2 <HAL_TIM_PWM_Start+0x1b2>
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	4a18      	ldr	r2, [pc, #96]	; (8008844 <HAL_TIM_PWM_Start+0x204>)
 80087e4:	4293      	cmp	r3, r2
 80087e6:	d004      	beq.n	80087f2 <HAL_TIM_PWM_Start+0x1b2>
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	4a18      	ldr	r2, [pc, #96]	; (8008850 <HAL_TIM_PWM_Start+0x210>)
 80087ee:	4293      	cmp	r3, r2
 80087f0:	d115      	bne.n	800881e <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	689a      	ldr	r2, [r3, #8]
 80087f8:	4b19      	ldr	r3, [pc, #100]	; (8008860 <HAL_TIM_PWM_Start+0x220>)
 80087fa:	4013      	ands	r3, r2
 80087fc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	2b06      	cmp	r3, #6
 8008802:	d015      	beq.n	8008830 <HAL_TIM_PWM_Start+0x1f0>
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800880a:	d011      	beq.n	8008830 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	681a      	ldr	r2, [r3, #0]
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	f042 0201 	orr.w	r2, r2, #1
 800881a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800881c:	e008      	b.n	8008830 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	681a      	ldr	r2, [r3, #0]
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	f042 0201 	orr.w	r2, r2, #1
 800882c:	601a      	str	r2, [r3, #0]
 800882e:	e000      	b.n	8008832 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008830:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008832:	2300      	movs	r3, #0
}
 8008834:	4618      	mov	r0, r3
 8008836:	3710      	adds	r7, #16
 8008838:	46bd      	mov	sp, r7
 800883a:	bd80      	pop	{r7, pc}
 800883c:	40012c00 	.word	0x40012c00
 8008840:	40013400 	.word	0x40013400
 8008844:	40014000 	.word	0x40014000
 8008848:	40014400 	.word	0x40014400
 800884c:	40014800 	.word	0x40014800
 8008850:	40015000 	.word	0x40015000
 8008854:	40000400 	.word	0x40000400
 8008858:	40000800 	.word	0x40000800
 800885c:	40000c00 	.word	0x40000c00
 8008860:	00010007 	.word	0x00010007

08008864 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8008864:	b580      	push	{r7, lr}
 8008866:	b082      	sub	sp, #8
 8008868:	af00      	add	r7, sp, #0
 800886a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	2b00      	cmp	r3, #0
 8008870:	d101      	bne.n	8008876 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8008872:	2301      	movs	r3, #1
 8008874:	e049      	b.n	800890a <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800887c:	b2db      	uxtb	r3, r3
 800887e:	2b00      	cmp	r3, #0
 8008880:	d106      	bne.n	8008890 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	2200      	movs	r2, #0
 8008886:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800888a:	6878      	ldr	r0, [r7, #4]
 800888c:	f000 f841 	bl	8008912 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	2202      	movs	r2, #2
 8008894:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	681a      	ldr	r2, [r3, #0]
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	3304      	adds	r3, #4
 80088a0:	4619      	mov	r1, r3
 80088a2:	4610      	mov	r0, r2
 80088a4:	f000 fde0 	bl	8009468 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	2201      	movs	r2, #1
 80088ac:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	2201      	movs	r2, #1
 80088b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	2201      	movs	r2, #1
 80088bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	2201      	movs	r2, #1
 80088c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	2201      	movs	r2, #1
 80088cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	2201      	movs	r2, #1
 80088d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	2201      	movs	r2, #1
 80088dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	2201      	movs	r2, #1
 80088e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	2201      	movs	r2, #1
 80088ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	2201      	movs	r2, #1
 80088f4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	2201      	movs	r2, #1
 80088fc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	2201      	movs	r2, #1
 8008904:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008908:	2300      	movs	r3, #0
}
 800890a:	4618      	mov	r0, r3
 800890c:	3708      	adds	r7, #8
 800890e:	46bd      	mov	sp, r7
 8008910:	bd80      	pop	{r7, pc}

08008912 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8008912:	b480      	push	{r7}
 8008914:	b083      	sub	sp, #12
 8008916:	af00      	add	r7, sp, #0
 8008918:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800891a:	bf00      	nop
 800891c:	370c      	adds	r7, #12
 800891e:	46bd      	mov	sp, r7
 8008920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008924:	4770      	bx	lr

08008926 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8008926:	b580      	push	{r7, lr}
 8008928:	b086      	sub	sp, #24
 800892a:	af00      	add	r7, sp, #0
 800892c:	6078      	str	r0, [r7, #4]
 800892e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	2b00      	cmp	r3, #0
 8008934:	d101      	bne.n	800893a <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8008936:	2301      	movs	r3, #1
 8008938:	e097      	b.n	8008a6a <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008940:	b2db      	uxtb	r3, r3
 8008942:	2b00      	cmp	r3, #0
 8008944:	d106      	bne.n	8008954 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	2200      	movs	r2, #0
 800894a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800894e:	6878      	ldr	r0, [r7, #4]
 8008950:	f7f9 fe82 	bl	8002658 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	2202      	movs	r2, #2
 8008958:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	689b      	ldr	r3, [r3, #8]
 8008962:	687a      	ldr	r2, [r7, #4]
 8008964:	6812      	ldr	r2, [r2, #0]
 8008966:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 800896a:	f023 0307 	bic.w	r3, r3, #7
 800896e:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	681a      	ldr	r2, [r3, #0]
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	3304      	adds	r3, #4
 8008978:	4619      	mov	r1, r3
 800897a:	4610      	mov	r0, r2
 800897c:	f000 fd74 	bl	8009468 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	689b      	ldr	r3, [r3, #8]
 8008986:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	699b      	ldr	r3, [r3, #24]
 800898e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	6a1b      	ldr	r3, [r3, #32]
 8008996:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8008998:	683b      	ldr	r3, [r7, #0]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	697a      	ldr	r2, [r7, #20]
 800899e:	4313      	orrs	r3, r2
 80089a0:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80089a2:	693b      	ldr	r3, [r7, #16]
 80089a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80089a8:	f023 0303 	bic.w	r3, r3, #3
 80089ac:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80089ae:	683b      	ldr	r3, [r7, #0]
 80089b0:	689a      	ldr	r2, [r3, #8]
 80089b2:	683b      	ldr	r3, [r7, #0]
 80089b4:	699b      	ldr	r3, [r3, #24]
 80089b6:	021b      	lsls	r3, r3, #8
 80089b8:	4313      	orrs	r3, r2
 80089ba:	693a      	ldr	r2, [r7, #16]
 80089bc:	4313      	orrs	r3, r2
 80089be:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80089c0:	693b      	ldr	r3, [r7, #16]
 80089c2:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80089c6:	f023 030c 	bic.w	r3, r3, #12
 80089ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80089cc:	693b      	ldr	r3, [r7, #16]
 80089ce:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80089d2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80089d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80089d8:	683b      	ldr	r3, [r7, #0]
 80089da:	68da      	ldr	r2, [r3, #12]
 80089dc:	683b      	ldr	r3, [r7, #0]
 80089de:	69db      	ldr	r3, [r3, #28]
 80089e0:	021b      	lsls	r3, r3, #8
 80089e2:	4313      	orrs	r3, r2
 80089e4:	693a      	ldr	r2, [r7, #16]
 80089e6:	4313      	orrs	r3, r2
 80089e8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80089ea:	683b      	ldr	r3, [r7, #0]
 80089ec:	691b      	ldr	r3, [r3, #16]
 80089ee:	011a      	lsls	r2, r3, #4
 80089f0:	683b      	ldr	r3, [r7, #0]
 80089f2:	6a1b      	ldr	r3, [r3, #32]
 80089f4:	031b      	lsls	r3, r3, #12
 80089f6:	4313      	orrs	r3, r2
 80089f8:	693a      	ldr	r2, [r7, #16]
 80089fa:	4313      	orrs	r3, r2
 80089fc:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8008a04:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8008a0c:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8008a0e:	683b      	ldr	r3, [r7, #0]
 8008a10:	685a      	ldr	r2, [r3, #4]
 8008a12:	683b      	ldr	r3, [r7, #0]
 8008a14:	695b      	ldr	r3, [r3, #20]
 8008a16:	011b      	lsls	r3, r3, #4
 8008a18:	4313      	orrs	r3, r2
 8008a1a:	68fa      	ldr	r2, [r7, #12]
 8008a1c:	4313      	orrs	r3, r2
 8008a1e:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	697a      	ldr	r2, [r7, #20]
 8008a26:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	693a      	ldr	r2, [r7, #16]
 8008a2e:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	68fa      	ldr	r2, [r7, #12]
 8008a36:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	2201      	movs	r2, #1
 8008a3c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	2201      	movs	r2, #1
 8008a44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	2201      	movs	r2, #1
 8008a4c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	2201      	movs	r2, #1
 8008a54:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	2201      	movs	r2, #1
 8008a5c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	2201      	movs	r2, #1
 8008a64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008a68:	2300      	movs	r3, #0
}
 8008a6a:	4618      	mov	r0, r3
 8008a6c:	3718      	adds	r7, #24
 8008a6e:	46bd      	mov	sp, r7
 8008a70:	bd80      	pop	{r7, pc}

08008a72 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008a72:	b580      	push	{r7, lr}
 8008a74:	b084      	sub	sp, #16
 8008a76:	af00      	add	r7, sp, #0
 8008a78:	6078      	str	r0, [r7, #4]
 8008a7a:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008a82:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008a8a:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008a92:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008a9a:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8008a9c:	683b      	ldr	r3, [r7, #0]
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d110      	bne.n	8008ac4 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008aa2:	7bfb      	ldrb	r3, [r7, #15]
 8008aa4:	2b01      	cmp	r3, #1
 8008aa6:	d102      	bne.n	8008aae <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8008aa8:	7b7b      	ldrb	r3, [r7, #13]
 8008aaa:	2b01      	cmp	r3, #1
 8008aac:	d001      	beq.n	8008ab2 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8008aae:	2301      	movs	r3, #1
 8008ab0:	e069      	b.n	8008b86 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	2202      	movs	r2, #2
 8008ab6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	2202      	movs	r2, #2
 8008abe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008ac2:	e031      	b.n	8008b28 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8008ac4:	683b      	ldr	r3, [r7, #0]
 8008ac6:	2b04      	cmp	r3, #4
 8008ac8:	d110      	bne.n	8008aec <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8008aca:	7bbb      	ldrb	r3, [r7, #14]
 8008acc:	2b01      	cmp	r3, #1
 8008ace:	d102      	bne.n	8008ad6 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8008ad0:	7b3b      	ldrb	r3, [r7, #12]
 8008ad2:	2b01      	cmp	r3, #1
 8008ad4:	d001      	beq.n	8008ada <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8008ad6:	2301      	movs	r3, #1
 8008ad8:	e055      	b.n	8008b86 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	2202      	movs	r2, #2
 8008ade:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	2202      	movs	r2, #2
 8008ae6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008aea:	e01d      	b.n	8008b28 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008aec:	7bfb      	ldrb	r3, [r7, #15]
 8008aee:	2b01      	cmp	r3, #1
 8008af0:	d108      	bne.n	8008b04 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8008af2:	7bbb      	ldrb	r3, [r7, #14]
 8008af4:	2b01      	cmp	r3, #1
 8008af6:	d105      	bne.n	8008b04 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008af8:	7b7b      	ldrb	r3, [r7, #13]
 8008afa:	2b01      	cmp	r3, #1
 8008afc:	d102      	bne.n	8008b04 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8008afe:	7b3b      	ldrb	r3, [r7, #12]
 8008b00:	2b01      	cmp	r3, #1
 8008b02:	d001      	beq.n	8008b08 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8008b04:	2301      	movs	r3, #1
 8008b06:	e03e      	b.n	8008b86 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	2202      	movs	r2, #2
 8008b0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	2202      	movs	r2, #2
 8008b14:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	2202      	movs	r2, #2
 8008b1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	2202      	movs	r2, #2
 8008b24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8008b28:	683b      	ldr	r3, [r7, #0]
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d003      	beq.n	8008b36 <HAL_TIM_Encoder_Start+0xc4>
 8008b2e:	683b      	ldr	r3, [r7, #0]
 8008b30:	2b04      	cmp	r3, #4
 8008b32:	d008      	beq.n	8008b46 <HAL_TIM_Encoder_Start+0xd4>
 8008b34:	e00f      	b.n	8008b56 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	2201      	movs	r2, #1
 8008b3c:	2100      	movs	r1, #0
 8008b3e:	4618      	mov	r0, r3
 8008b40:	f001 fa2a 	bl	8009f98 <TIM_CCxChannelCmd>
      break;
 8008b44:	e016      	b.n	8008b74 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	2201      	movs	r2, #1
 8008b4c:	2104      	movs	r1, #4
 8008b4e:	4618      	mov	r0, r3
 8008b50:	f001 fa22 	bl	8009f98 <TIM_CCxChannelCmd>
      break;
 8008b54:	e00e      	b.n	8008b74 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	2201      	movs	r2, #1
 8008b5c:	2100      	movs	r1, #0
 8008b5e:	4618      	mov	r0, r3
 8008b60:	f001 fa1a 	bl	8009f98 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	2201      	movs	r2, #1
 8008b6a:	2104      	movs	r1, #4
 8008b6c:	4618      	mov	r0, r3
 8008b6e:	f001 fa13 	bl	8009f98 <TIM_CCxChannelCmd>
      break;
 8008b72:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	681a      	ldr	r2, [r3, #0]
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	f042 0201 	orr.w	r2, r2, #1
 8008b82:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8008b84:	2300      	movs	r3, #0
}
 8008b86:	4618      	mov	r0, r3
 8008b88:	3710      	adds	r7, #16
 8008b8a:	46bd      	mov	sp, r7
 8008b8c:	bd80      	pop	{r7, pc}

08008b8e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008b8e:	b580      	push	{r7, lr}
 8008b90:	b082      	sub	sp, #8
 8008b92:	af00      	add	r7, sp, #0
 8008b94:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	691b      	ldr	r3, [r3, #16]
 8008b9c:	f003 0302 	and.w	r3, r3, #2
 8008ba0:	2b02      	cmp	r3, #2
 8008ba2:	d122      	bne.n	8008bea <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	68db      	ldr	r3, [r3, #12]
 8008baa:	f003 0302 	and.w	r3, r3, #2
 8008bae:	2b02      	cmp	r3, #2
 8008bb0:	d11b      	bne.n	8008bea <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	f06f 0202 	mvn.w	r2, #2
 8008bba:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	2201      	movs	r2, #1
 8008bc0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	699b      	ldr	r3, [r3, #24]
 8008bc8:	f003 0303 	and.w	r3, r3, #3
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d003      	beq.n	8008bd8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008bd0:	6878      	ldr	r0, [r7, #4]
 8008bd2:	f000 fc2b 	bl	800942c <HAL_TIM_IC_CaptureCallback>
 8008bd6:	e005      	b.n	8008be4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008bd8:	6878      	ldr	r0, [r7, #4]
 8008bda:	f000 fc1d 	bl	8009418 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008bde:	6878      	ldr	r0, [r7, #4]
 8008be0:	f000 fc2e 	bl	8009440 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	2200      	movs	r2, #0
 8008be8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	691b      	ldr	r3, [r3, #16]
 8008bf0:	f003 0304 	and.w	r3, r3, #4
 8008bf4:	2b04      	cmp	r3, #4
 8008bf6:	d122      	bne.n	8008c3e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	68db      	ldr	r3, [r3, #12]
 8008bfe:	f003 0304 	and.w	r3, r3, #4
 8008c02:	2b04      	cmp	r3, #4
 8008c04:	d11b      	bne.n	8008c3e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	f06f 0204 	mvn.w	r2, #4
 8008c0e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	2202      	movs	r2, #2
 8008c14:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	699b      	ldr	r3, [r3, #24]
 8008c1c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d003      	beq.n	8008c2c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008c24:	6878      	ldr	r0, [r7, #4]
 8008c26:	f000 fc01 	bl	800942c <HAL_TIM_IC_CaptureCallback>
 8008c2a:	e005      	b.n	8008c38 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008c2c:	6878      	ldr	r0, [r7, #4]
 8008c2e:	f000 fbf3 	bl	8009418 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008c32:	6878      	ldr	r0, [r7, #4]
 8008c34:	f000 fc04 	bl	8009440 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	2200      	movs	r2, #0
 8008c3c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	691b      	ldr	r3, [r3, #16]
 8008c44:	f003 0308 	and.w	r3, r3, #8
 8008c48:	2b08      	cmp	r3, #8
 8008c4a:	d122      	bne.n	8008c92 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	68db      	ldr	r3, [r3, #12]
 8008c52:	f003 0308 	and.w	r3, r3, #8
 8008c56:	2b08      	cmp	r3, #8
 8008c58:	d11b      	bne.n	8008c92 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	f06f 0208 	mvn.w	r2, #8
 8008c62:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	2204      	movs	r2, #4
 8008c68:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	69db      	ldr	r3, [r3, #28]
 8008c70:	f003 0303 	and.w	r3, r3, #3
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d003      	beq.n	8008c80 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008c78:	6878      	ldr	r0, [r7, #4]
 8008c7a:	f000 fbd7 	bl	800942c <HAL_TIM_IC_CaptureCallback>
 8008c7e:	e005      	b.n	8008c8c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008c80:	6878      	ldr	r0, [r7, #4]
 8008c82:	f000 fbc9 	bl	8009418 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008c86:	6878      	ldr	r0, [r7, #4]
 8008c88:	f000 fbda 	bl	8009440 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	2200      	movs	r2, #0
 8008c90:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	691b      	ldr	r3, [r3, #16]
 8008c98:	f003 0310 	and.w	r3, r3, #16
 8008c9c:	2b10      	cmp	r3, #16
 8008c9e:	d122      	bne.n	8008ce6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	68db      	ldr	r3, [r3, #12]
 8008ca6:	f003 0310 	and.w	r3, r3, #16
 8008caa:	2b10      	cmp	r3, #16
 8008cac:	d11b      	bne.n	8008ce6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	f06f 0210 	mvn.w	r2, #16
 8008cb6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	2208      	movs	r2, #8
 8008cbc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	69db      	ldr	r3, [r3, #28]
 8008cc4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d003      	beq.n	8008cd4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008ccc:	6878      	ldr	r0, [r7, #4]
 8008cce:	f000 fbad 	bl	800942c <HAL_TIM_IC_CaptureCallback>
 8008cd2:	e005      	b.n	8008ce0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008cd4:	6878      	ldr	r0, [r7, #4]
 8008cd6:	f000 fb9f 	bl	8009418 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008cda:	6878      	ldr	r0, [r7, #4]
 8008cdc:	f000 fbb0 	bl	8009440 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	2200      	movs	r2, #0
 8008ce4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	691b      	ldr	r3, [r3, #16]
 8008cec:	f003 0301 	and.w	r3, r3, #1
 8008cf0:	2b01      	cmp	r3, #1
 8008cf2:	d10e      	bne.n	8008d12 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	68db      	ldr	r3, [r3, #12]
 8008cfa:	f003 0301 	and.w	r3, r3, #1
 8008cfe:	2b01      	cmp	r3, #1
 8008d00:	d107      	bne.n	8008d12 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	f06f 0201 	mvn.w	r2, #1
 8008d0a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008d0c:	6878      	ldr	r0, [r7, #4]
 8008d0e:	f7f8 ff4d 	bl	8001bac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	691b      	ldr	r3, [r3, #16]
 8008d18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d1c:	2b80      	cmp	r3, #128	; 0x80
 8008d1e:	d10e      	bne.n	8008d3e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	68db      	ldr	r3, [r3, #12]
 8008d26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d2a:	2b80      	cmp	r3, #128	; 0x80
 8008d2c:	d107      	bne.n	8008d3e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008d36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008d38:	6878      	ldr	r0, [r7, #4]
 8008d3a:	f001 fb5d 	bl	800a3f8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	691b      	ldr	r3, [r3, #16]
 8008d44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d48:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008d4c:	d10e      	bne.n	8008d6c <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	68db      	ldr	r3, [r3, #12]
 8008d54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d58:	2b80      	cmp	r3, #128	; 0x80
 8008d5a:	d107      	bne.n	8008d6c <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008d64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008d66:	6878      	ldr	r0, [r7, #4]
 8008d68:	f001 fb50 	bl	800a40c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	691b      	ldr	r3, [r3, #16]
 8008d72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d76:	2b40      	cmp	r3, #64	; 0x40
 8008d78:	d10e      	bne.n	8008d98 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	68db      	ldr	r3, [r3, #12]
 8008d80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d84:	2b40      	cmp	r3, #64	; 0x40
 8008d86:	d107      	bne.n	8008d98 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008d90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008d92:	6878      	ldr	r0, [r7, #4]
 8008d94:	f000 fb5e 	bl	8009454 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	691b      	ldr	r3, [r3, #16]
 8008d9e:	f003 0320 	and.w	r3, r3, #32
 8008da2:	2b20      	cmp	r3, #32
 8008da4:	d10e      	bne.n	8008dc4 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	68db      	ldr	r3, [r3, #12]
 8008dac:	f003 0320 	and.w	r3, r3, #32
 8008db0:	2b20      	cmp	r3, #32
 8008db2:	d107      	bne.n	8008dc4 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	f06f 0220 	mvn.w	r2, #32
 8008dbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008dbe:	6878      	ldr	r0, [r7, #4]
 8008dc0:	f001 fb10 	bl	800a3e4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	691b      	ldr	r3, [r3, #16]
 8008dca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008dce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008dd2:	d10f      	bne.n	8008df4 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	68db      	ldr	r3, [r3, #12]
 8008dda:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008dde:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008de2:	d107      	bne.n	8008df4 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8008dec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8008dee:	6878      	ldr	r0, [r7, #4]
 8008df0:	f001 fb16 	bl	800a420 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	691b      	ldr	r3, [r3, #16]
 8008dfa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008dfe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008e02:	d10f      	bne.n	8008e24 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	68db      	ldr	r3, [r3, #12]
 8008e0a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008e0e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008e12:	d107      	bne.n	8008e24 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8008e1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8008e1e:	6878      	ldr	r0, [r7, #4]
 8008e20:	f001 fb08 	bl	800a434 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	691b      	ldr	r3, [r3, #16]
 8008e2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008e2e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008e32:	d10f      	bne.n	8008e54 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	68db      	ldr	r3, [r3, #12]
 8008e3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008e3e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008e42:	d107      	bne.n	8008e54 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8008e4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8008e4e:	6878      	ldr	r0, [r7, #4]
 8008e50:	f001 fafa 	bl	800a448 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	691b      	ldr	r3, [r3, #16]
 8008e5a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008e5e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008e62:	d10f      	bne.n	8008e84 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	68db      	ldr	r3, [r3, #12]
 8008e6a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008e6e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008e72:	d107      	bne.n	8008e84 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8008e7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8008e7e:	6878      	ldr	r0, [r7, #4]
 8008e80:	f001 faec 	bl	800a45c <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008e84:	bf00      	nop
 8008e86:	3708      	adds	r7, #8
 8008e88:	46bd      	mov	sp, r7
 8008e8a:	bd80      	pop	{r7, pc}

08008e8c <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8008e8c:	b580      	push	{r7, lr}
 8008e8e:	b086      	sub	sp, #24
 8008e90:	af00      	add	r7, sp, #0
 8008e92:	60f8      	str	r0, [r7, #12]
 8008e94:	60b9      	str	r1, [r7, #8]
 8008e96:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008e98:	2300      	movs	r3, #0
 8008e9a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008ea2:	2b01      	cmp	r3, #1
 8008ea4:	d101      	bne.n	8008eaa <HAL_TIM_IC_ConfigChannel+0x1e>
 8008ea6:	2302      	movs	r3, #2
 8008ea8:	e088      	b.n	8008fbc <HAL_TIM_IC_ConfigChannel+0x130>
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	2201      	movs	r2, #1
 8008eae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d11b      	bne.n	8008ef0 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	6818      	ldr	r0, [r3, #0]
 8008ebc:	68bb      	ldr	r3, [r7, #8]
 8008ebe:	6819      	ldr	r1, [r3, #0]
 8008ec0:	68bb      	ldr	r3, [r7, #8]
 8008ec2:	685a      	ldr	r2, [r3, #4]
 8008ec4:	68bb      	ldr	r3, [r7, #8]
 8008ec6:	68db      	ldr	r3, [r3, #12]
 8008ec8:	f000 fea0 	bl	8009c0c <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	699a      	ldr	r2, [r3, #24]
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	f022 020c 	bic.w	r2, r2, #12
 8008eda:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	6999      	ldr	r1, [r3, #24]
 8008ee2:	68bb      	ldr	r3, [r7, #8]
 8008ee4:	689a      	ldr	r2, [r3, #8]
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	430a      	orrs	r2, r1
 8008eec:	619a      	str	r2, [r3, #24]
 8008eee:	e060      	b.n	8008fb2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	2b04      	cmp	r3, #4
 8008ef4:	d11c      	bne.n	8008f30 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	6818      	ldr	r0, [r3, #0]
 8008efa:	68bb      	ldr	r3, [r7, #8]
 8008efc:	6819      	ldr	r1, [r3, #0]
 8008efe:	68bb      	ldr	r3, [r7, #8]
 8008f00:	685a      	ldr	r2, [r3, #4]
 8008f02:	68bb      	ldr	r3, [r7, #8]
 8008f04:	68db      	ldr	r3, [r3, #12]
 8008f06:	f000 ff24 	bl	8009d52 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	699a      	ldr	r2, [r3, #24]
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8008f18:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	6999      	ldr	r1, [r3, #24]
 8008f20:	68bb      	ldr	r3, [r7, #8]
 8008f22:	689b      	ldr	r3, [r3, #8]
 8008f24:	021a      	lsls	r2, r3, #8
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	430a      	orrs	r2, r1
 8008f2c:	619a      	str	r2, [r3, #24]
 8008f2e:	e040      	b.n	8008fb2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	2b08      	cmp	r3, #8
 8008f34:	d11b      	bne.n	8008f6e <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	6818      	ldr	r0, [r3, #0]
 8008f3a:	68bb      	ldr	r3, [r7, #8]
 8008f3c:	6819      	ldr	r1, [r3, #0]
 8008f3e:	68bb      	ldr	r3, [r7, #8]
 8008f40:	685a      	ldr	r2, [r3, #4]
 8008f42:	68bb      	ldr	r3, [r7, #8]
 8008f44:	68db      	ldr	r3, [r3, #12]
 8008f46:	f000 ff71 	bl	8009e2c <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	69da      	ldr	r2, [r3, #28]
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	f022 020c 	bic.w	r2, r2, #12
 8008f58:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	69d9      	ldr	r1, [r3, #28]
 8008f60:	68bb      	ldr	r3, [r7, #8]
 8008f62:	689a      	ldr	r2, [r3, #8]
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	430a      	orrs	r2, r1
 8008f6a:	61da      	str	r2, [r3, #28]
 8008f6c:	e021      	b.n	8008fb2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	2b0c      	cmp	r3, #12
 8008f72:	d11c      	bne.n	8008fae <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	6818      	ldr	r0, [r3, #0]
 8008f78:	68bb      	ldr	r3, [r7, #8]
 8008f7a:	6819      	ldr	r1, [r3, #0]
 8008f7c:	68bb      	ldr	r3, [r7, #8]
 8008f7e:	685a      	ldr	r2, [r3, #4]
 8008f80:	68bb      	ldr	r3, [r7, #8]
 8008f82:	68db      	ldr	r3, [r3, #12]
 8008f84:	f000 ff8e 	bl	8009ea4 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	69da      	ldr	r2, [r3, #28]
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8008f96:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	69d9      	ldr	r1, [r3, #28]
 8008f9e:	68bb      	ldr	r3, [r7, #8]
 8008fa0:	689b      	ldr	r3, [r3, #8]
 8008fa2:	021a      	lsls	r2, r3, #8
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	430a      	orrs	r2, r1
 8008faa:	61da      	str	r2, [r3, #28]
 8008fac:	e001      	b.n	8008fb2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8008fae:	2301      	movs	r3, #1
 8008fb0:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	2200      	movs	r2, #0
 8008fb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008fba:	7dfb      	ldrb	r3, [r7, #23]
}
 8008fbc:	4618      	mov	r0, r3
 8008fbe:	3718      	adds	r7, #24
 8008fc0:	46bd      	mov	sp, r7
 8008fc2:	bd80      	pop	{r7, pc}

08008fc4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008fc4:	b580      	push	{r7, lr}
 8008fc6:	b086      	sub	sp, #24
 8008fc8:	af00      	add	r7, sp, #0
 8008fca:	60f8      	str	r0, [r7, #12]
 8008fcc:	60b9      	str	r1, [r7, #8]
 8008fce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008fd0:	2300      	movs	r3, #0
 8008fd2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008fda:	2b01      	cmp	r3, #1
 8008fdc:	d101      	bne.n	8008fe2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008fde:	2302      	movs	r3, #2
 8008fe0:	e0ff      	b.n	80091e2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	2201      	movs	r2, #1
 8008fe6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	2b14      	cmp	r3, #20
 8008fee:	f200 80f0 	bhi.w	80091d2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8008ff2:	a201      	add	r2, pc, #4	; (adr r2, 8008ff8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008ff4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ff8:	0800904d 	.word	0x0800904d
 8008ffc:	080091d3 	.word	0x080091d3
 8009000:	080091d3 	.word	0x080091d3
 8009004:	080091d3 	.word	0x080091d3
 8009008:	0800908d 	.word	0x0800908d
 800900c:	080091d3 	.word	0x080091d3
 8009010:	080091d3 	.word	0x080091d3
 8009014:	080091d3 	.word	0x080091d3
 8009018:	080090cf 	.word	0x080090cf
 800901c:	080091d3 	.word	0x080091d3
 8009020:	080091d3 	.word	0x080091d3
 8009024:	080091d3 	.word	0x080091d3
 8009028:	0800910f 	.word	0x0800910f
 800902c:	080091d3 	.word	0x080091d3
 8009030:	080091d3 	.word	0x080091d3
 8009034:	080091d3 	.word	0x080091d3
 8009038:	08009151 	.word	0x08009151
 800903c:	080091d3 	.word	0x080091d3
 8009040:	080091d3 	.word	0x080091d3
 8009044:	080091d3 	.word	0x080091d3
 8009048:	08009191 	.word	0x08009191
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	68b9      	ldr	r1, [r7, #8]
 8009052:	4618      	mov	r0, r3
 8009054:	f000 fab0 	bl	80095b8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	699a      	ldr	r2, [r3, #24]
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	f042 0208 	orr.w	r2, r2, #8
 8009066:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	699a      	ldr	r2, [r3, #24]
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	f022 0204 	bic.w	r2, r2, #4
 8009076:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	6999      	ldr	r1, [r3, #24]
 800907e:	68bb      	ldr	r3, [r7, #8]
 8009080:	691a      	ldr	r2, [r3, #16]
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	430a      	orrs	r2, r1
 8009088:	619a      	str	r2, [r3, #24]
      break;
 800908a:	e0a5      	b.n	80091d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	68b9      	ldr	r1, [r7, #8]
 8009092:	4618      	mov	r0, r3
 8009094:	f000 fb2a 	bl	80096ec <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	699a      	ldr	r2, [r3, #24]
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80090a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	699a      	ldr	r2, [r3, #24]
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80090b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	6999      	ldr	r1, [r3, #24]
 80090be:	68bb      	ldr	r3, [r7, #8]
 80090c0:	691b      	ldr	r3, [r3, #16]
 80090c2:	021a      	lsls	r2, r3, #8
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	430a      	orrs	r2, r1
 80090ca:	619a      	str	r2, [r3, #24]
      break;
 80090cc:	e084      	b.n	80091d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	68b9      	ldr	r1, [r7, #8]
 80090d4:	4618      	mov	r0, r3
 80090d6:	f000 fb9d 	bl	8009814 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	69da      	ldr	r2, [r3, #28]
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	f042 0208 	orr.w	r2, r2, #8
 80090e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	69da      	ldr	r2, [r3, #28]
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	f022 0204 	bic.w	r2, r2, #4
 80090f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	69d9      	ldr	r1, [r3, #28]
 8009100:	68bb      	ldr	r3, [r7, #8]
 8009102:	691a      	ldr	r2, [r3, #16]
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	430a      	orrs	r2, r1
 800910a:	61da      	str	r2, [r3, #28]
      break;
 800910c:	e064      	b.n	80091d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	68b9      	ldr	r1, [r7, #8]
 8009114:	4618      	mov	r0, r3
 8009116:	f000 fc0f 	bl	8009938 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	69da      	ldr	r2, [r3, #28]
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009128:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	69da      	ldr	r2, [r3, #28]
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009138:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	69d9      	ldr	r1, [r3, #28]
 8009140:	68bb      	ldr	r3, [r7, #8]
 8009142:	691b      	ldr	r3, [r3, #16]
 8009144:	021a      	lsls	r2, r3, #8
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	430a      	orrs	r2, r1
 800914c:	61da      	str	r2, [r3, #28]
      break;
 800914e:	e043      	b.n	80091d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	68b9      	ldr	r1, [r7, #8]
 8009156:	4618      	mov	r0, r3
 8009158:	f000 fc82 	bl	8009a60 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	f042 0208 	orr.w	r2, r2, #8
 800916a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	f022 0204 	bic.w	r2, r2, #4
 800917a:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8009182:	68bb      	ldr	r3, [r7, #8]
 8009184:	691a      	ldr	r2, [r3, #16]
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	430a      	orrs	r2, r1
 800918c:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800918e:	e023      	b.n	80091d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	68b9      	ldr	r1, [r7, #8]
 8009196:	4618      	mov	r0, r3
 8009198:	f000 fccc 	bl	8009b34 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80091aa:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80091ba:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80091c2:	68bb      	ldr	r3, [r7, #8]
 80091c4:	691b      	ldr	r3, [r3, #16]
 80091c6:	021a      	lsls	r2, r3, #8
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	430a      	orrs	r2, r1
 80091ce:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80091d0:	e002      	b.n	80091d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80091d2:	2301      	movs	r3, #1
 80091d4:	75fb      	strb	r3, [r7, #23]
      break;
 80091d6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	2200      	movs	r2, #0
 80091dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80091e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80091e2:	4618      	mov	r0, r3
 80091e4:	3718      	adds	r7, #24
 80091e6:	46bd      	mov	sp, r7
 80091e8:	bd80      	pop	{r7, pc}
 80091ea:	bf00      	nop

080091ec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80091ec:	b580      	push	{r7, lr}
 80091ee:	b084      	sub	sp, #16
 80091f0:	af00      	add	r7, sp, #0
 80091f2:	6078      	str	r0, [r7, #4]
 80091f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80091f6:	2300      	movs	r3, #0
 80091f8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009200:	2b01      	cmp	r3, #1
 8009202:	d101      	bne.n	8009208 <HAL_TIM_ConfigClockSource+0x1c>
 8009204:	2302      	movs	r3, #2
 8009206:	e0f6      	b.n	80093f6 <HAL_TIM_ConfigClockSource+0x20a>
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	2201      	movs	r2, #1
 800920c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	2202      	movs	r2, #2
 8009214:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	689b      	ldr	r3, [r3, #8]
 800921e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009220:	68bb      	ldr	r3, [r7, #8]
 8009222:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8009226:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800922a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800922c:	68bb      	ldr	r3, [r7, #8]
 800922e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009232:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	68ba      	ldr	r2, [r7, #8]
 800923a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800923c:	683b      	ldr	r3, [r7, #0]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	4a6f      	ldr	r2, [pc, #444]	; (8009400 <HAL_TIM_ConfigClockSource+0x214>)
 8009242:	4293      	cmp	r3, r2
 8009244:	f000 80c1 	beq.w	80093ca <HAL_TIM_ConfigClockSource+0x1de>
 8009248:	4a6d      	ldr	r2, [pc, #436]	; (8009400 <HAL_TIM_ConfigClockSource+0x214>)
 800924a:	4293      	cmp	r3, r2
 800924c:	f200 80c6 	bhi.w	80093dc <HAL_TIM_ConfigClockSource+0x1f0>
 8009250:	4a6c      	ldr	r2, [pc, #432]	; (8009404 <HAL_TIM_ConfigClockSource+0x218>)
 8009252:	4293      	cmp	r3, r2
 8009254:	f000 80b9 	beq.w	80093ca <HAL_TIM_ConfigClockSource+0x1de>
 8009258:	4a6a      	ldr	r2, [pc, #424]	; (8009404 <HAL_TIM_ConfigClockSource+0x218>)
 800925a:	4293      	cmp	r3, r2
 800925c:	f200 80be 	bhi.w	80093dc <HAL_TIM_ConfigClockSource+0x1f0>
 8009260:	4a69      	ldr	r2, [pc, #420]	; (8009408 <HAL_TIM_ConfigClockSource+0x21c>)
 8009262:	4293      	cmp	r3, r2
 8009264:	f000 80b1 	beq.w	80093ca <HAL_TIM_ConfigClockSource+0x1de>
 8009268:	4a67      	ldr	r2, [pc, #412]	; (8009408 <HAL_TIM_ConfigClockSource+0x21c>)
 800926a:	4293      	cmp	r3, r2
 800926c:	f200 80b6 	bhi.w	80093dc <HAL_TIM_ConfigClockSource+0x1f0>
 8009270:	4a66      	ldr	r2, [pc, #408]	; (800940c <HAL_TIM_ConfigClockSource+0x220>)
 8009272:	4293      	cmp	r3, r2
 8009274:	f000 80a9 	beq.w	80093ca <HAL_TIM_ConfigClockSource+0x1de>
 8009278:	4a64      	ldr	r2, [pc, #400]	; (800940c <HAL_TIM_ConfigClockSource+0x220>)
 800927a:	4293      	cmp	r3, r2
 800927c:	f200 80ae 	bhi.w	80093dc <HAL_TIM_ConfigClockSource+0x1f0>
 8009280:	4a63      	ldr	r2, [pc, #396]	; (8009410 <HAL_TIM_ConfigClockSource+0x224>)
 8009282:	4293      	cmp	r3, r2
 8009284:	f000 80a1 	beq.w	80093ca <HAL_TIM_ConfigClockSource+0x1de>
 8009288:	4a61      	ldr	r2, [pc, #388]	; (8009410 <HAL_TIM_ConfigClockSource+0x224>)
 800928a:	4293      	cmp	r3, r2
 800928c:	f200 80a6 	bhi.w	80093dc <HAL_TIM_ConfigClockSource+0x1f0>
 8009290:	4a60      	ldr	r2, [pc, #384]	; (8009414 <HAL_TIM_ConfigClockSource+0x228>)
 8009292:	4293      	cmp	r3, r2
 8009294:	f000 8099 	beq.w	80093ca <HAL_TIM_ConfigClockSource+0x1de>
 8009298:	4a5e      	ldr	r2, [pc, #376]	; (8009414 <HAL_TIM_ConfigClockSource+0x228>)
 800929a:	4293      	cmp	r3, r2
 800929c:	f200 809e 	bhi.w	80093dc <HAL_TIM_ConfigClockSource+0x1f0>
 80092a0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80092a4:	f000 8091 	beq.w	80093ca <HAL_TIM_ConfigClockSource+0x1de>
 80092a8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80092ac:	f200 8096 	bhi.w	80093dc <HAL_TIM_ConfigClockSource+0x1f0>
 80092b0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80092b4:	f000 8089 	beq.w	80093ca <HAL_TIM_ConfigClockSource+0x1de>
 80092b8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80092bc:	f200 808e 	bhi.w	80093dc <HAL_TIM_ConfigClockSource+0x1f0>
 80092c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80092c4:	d03e      	beq.n	8009344 <HAL_TIM_ConfigClockSource+0x158>
 80092c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80092ca:	f200 8087 	bhi.w	80093dc <HAL_TIM_ConfigClockSource+0x1f0>
 80092ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80092d2:	f000 8086 	beq.w	80093e2 <HAL_TIM_ConfigClockSource+0x1f6>
 80092d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80092da:	d87f      	bhi.n	80093dc <HAL_TIM_ConfigClockSource+0x1f0>
 80092dc:	2b70      	cmp	r3, #112	; 0x70
 80092de:	d01a      	beq.n	8009316 <HAL_TIM_ConfigClockSource+0x12a>
 80092e0:	2b70      	cmp	r3, #112	; 0x70
 80092e2:	d87b      	bhi.n	80093dc <HAL_TIM_ConfigClockSource+0x1f0>
 80092e4:	2b60      	cmp	r3, #96	; 0x60
 80092e6:	d050      	beq.n	800938a <HAL_TIM_ConfigClockSource+0x19e>
 80092e8:	2b60      	cmp	r3, #96	; 0x60
 80092ea:	d877      	bhi.n	80093dc <HAL_TIM_ConfigClockSource+0x1f0>
 80092ec:	2b50      	cmp	r3, #80	; 0x50
 80092ee:	d03c      	beq.n	800936a <HAL_TIM_ConfigClockSource+0x17e>
 80092f0:	2b50      	cmp	r3, #80	; 0x50
 80092f2:	d873      	bhi.n	80093dc <HAL_TIM_ConfigClockSource+0x1f0>
 80092f4:	2b40      	cmp	r3, #64	; 0x40
 80092f6:	d058      	beq.n	80093aa <HAL_TIM_ConfigClockSource+0x1be>
 80092f8:	2b40      	cmp	r3, #64	; 0x40
 80092fa:	d86f      	bhi.n	80093dc <HAL_TIM_ConfigClockSource+0x1f0>
 80092fc:	2b30      	cmp	r3, #48	; 0x30
 80092fe:	d064      	beq.n	80093ca <HAL_TIM_ConfigClockSource+0x1de>
 8009300:	2b30      	cmp	r3, #48	; 0x30
 8009302:	d86b      	bhi.n	80093dc <HAL_TIM_ConfigClockSource+0x1f0>
 8009304:	2b20      	cmp	r3, #32
 8009306:	d060      	beq.n	80093ca <HAL_TIM_ConfigClockSource+0x1de>
 8009308:	2b20      	cmp	r3, #32
 800930a:	d867      	bhi.n	80093dc <HAL_TIM_ConfigClockSource+0x1f0>
 800930c:	2b00      	cmp	r3, #0
 800930e:	d05c      	beq.n	80093ca <HAL_TIM_ConfigClockSource+0x1de>
 8009310:	2b10      	cmp	r3, #16
 8009312:	d05a      	beq.n	80093ca <HAL_TIM_ConfigClockSource+0x1de>
 8009314:	e062      	b.n	80093dc <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	6818      	ldr	r0, [r3, #0]
 800931a:	683b      	ldr	r3, [r7, #0]
 800931c:	6899      	ldr	r1, [r3, #8]
 800931e:	683b      	ldr	r3, [r7, #0]
 8009320:	685a      	ldr	r2, [r3, #4]
 8009322:	683b      	ldr	r3, [r7, #0]
 8009324:	68db      	ldr	r3, [r3, #12]
 8009326:	f000 fe17 	bl	8009f58 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	689b      	ldr	r3, [r3, #8]
 8009330:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009332:	68bb      	ldr	r3, [r7, #8]
 8009334:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009338:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	68ba      	ldr	r2, [r7, #8]
 8009340:	609a      	str	r2, [r3, #8]
      break;
 8009342:	e04f      	b.n	80093e4 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	6818      	ldr	r0, [r3, #0]
 8009348:	683b      	ldr	r3, [r7, #0]
 800934a:	6899      	ldr	r1, [r3, #8]
 800934c:	683b      	ldr	r3, [r7, #0]
 800934e:	685a      	ldr	r2, [r3, #4]
 8009350:	683b      	ldr	r3, [r7, #0]
 8009352:	68db      	ldr	r3, [r3, #12]
 8009354:	f000 fe00 	bl	8009f58 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	689a      	ldr	r2, [r3, #8]
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009366:	609a      	str	r2, [r3, #8]
      break;
 8009368:	e03c      	b.n	80093e4 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	6818      	ldr	r0, [r3, #0]
 800936e:	683b      	ldr	r3, [r7, #0]
 8009370:	6859      	ldr	r1, [r3, #4]
 8009372:	683b      	ldr	r3, [r7, #0]
 8009374:	68db      	ldr	r3, [r3, #12]
 8009376:	461a      	mov	r2, r3
 8009378:	f000 fcbc 	bl	8009cf4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	2150      	movs	r1, #80	; 0x50
 8009382:	4618      	mov	r0, r3
 8009384:	f000 fdcb 	bl	8009f1e <TIM_ITRx_SetConfig>
      break;
 8009388:	e02c      	b.n	80093e4 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	6818      	ldr	r0, [r3, #0]
 800938e:	683b      	ldr	r3, [r7, #0]
 8009390:	6859      	ldr	r1, [r3, #4]
 8009392:	683b      	ldr	r3, [r7, #0]
 8009394:	68db      	ldr	r3, [r3, #12]
 8009396:	461a      	mov	r2, r3
 8009398:	f000 fd18 	bl	8009dcc <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	2160      	movs	r1, #96	; 0x60
 80093a2:	4618      	mov	r0, r3
 80093a4:	f000 fdbb 	bl	8009f1e <TIM_ITRx_SetConfig>
      break;
 80093a8:	e01c      	b.n	80093e4 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	6818      	ldr	r0, [r3, #0]
 80093ae:	683b      	ldr	r3, [r7, #0]
 80093b0:	6859      	ldr	r1, [r3, #4]
 80093b2:	683b      	ldr	r3, [r7, #0]
 80093b4:	68db      	ldr	r3, [r3, #12]
 80093b6:	461a      	mov	r2, r3
 80093b8:	f000 fc9c 	bl	8009cf4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	2140      	movs	r1, #64	; 0x40
 80093c2:	4618      	mov	r0, r3
 80093c4:	f000 fdab 	bl	8009f1e <TIM_ITRx_SetConfig>
      break;
 80093c8:	e00c      	b.n	80093e4 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	681a      	ldr	r2, [r3, #0]
 80093ce:	683b      	ldr	r3, [r7, #0]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	4619      	mov	r1, r3
 80093d4:	4610      	mov	r0, r2
 80093d6:	f000 fda2 	bl	8009f1e <TIM_ITRx_SetConfig>
      break;
 80093da:	e003      	b.n	80093e4 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 80093dc:	2301      	movs	r3, #1
 80093de:	73fb      	strb	r3, [r7, #15]
      break;
 80093e0:	e000      	b.n	80093e4 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 80093e2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	2201      	movs	r2, #1
 80093e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	2200      	movs	r2, #0
 80093f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80093f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80093f6:	4618      	mov	r0, r3
 80093f8:	3710      	adds	r7, #16
 80093fa:	46bd      	mov	sp, r7
 80093fc:	bd80      	pop	{r7, pc}
 80093fe:	bf00      	nop
 8009400:	00100070 	.word	0x00100070
 8009404:	00100060 	.word	0x00100060
 8009408:	00100050 	.word	0x00100050
 800940c:	00100040 	.word	0x00100040
 8009410:	00100030 	.word	0x00100030
 8009414:	00100020 	.word	0x00100020

08009418 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009418:	b480      	push	{r7}
 800941a:	b083      	sub	sp, #12
 800941c:	af00      	add	r7, sp, #0
 800941e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009420:	bf00      	nop
 8009422:	370c      	adds	r7, #12
 8009424:	46bd      	mov	sp, r7
 8009426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800942a:	4770      	bx	lr

0800942c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800942c:	b480      	push	{r7}
 800942e:	b083      	sub	sp, #12
 8009430:	af00      	add	r7, sp, #0
 8009432:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009434:	bf00      	nop
 8009436:	370c      	adds	r7, #12
 8009438:	46bd      	mov	sp, r7
 800943a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800943e:	4770      	bx	lr

08009440 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009440:	b480      	push	{r7}
 8009442:	b083      	sub	sp, #12
 8009444:	af00      	add	r7, sp, #0
 8009446:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009448:	bf00      	nop
 800944a:	370c      	adds	r7, #12
 800944c:	46bd      	mov	sp, r7
 800944e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009452:	4770      	bx	lr

08009454 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009454:	b480      	push	{r7}
 8009456:	b083      	sub	sp, #12
 8009458:	af00      	add	r7, sp, #0
 800945a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800945c:	bf00      	nop
 800945e:	370c      	adds	r7, #12
 8009460:	46bd      	mov	sp, r7
 8009462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009466:	4770      	bx	lr

08009468 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009468:	b480      	push	{r7}
 800946a:	b085      	sub	sp, #20
 800946c:	af00      	add	r7, sp, #0
 800946e:	6078      	str	r0, [r7, #4]
 8009470:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	4a46      	ldr	r2, [pc, #280]	; (8009594 <TIM_Base_SetConfig+0x12c>)
 800947c:	4293      	cmp	r3, r2
 800947e:	d017      	beq.n	80094b0 <TIM_Base_SetConfig+0x48>
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009486:	d013      	beq.n	80094b0 <TIM_Base_SetConfig+0x48>
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	4a43      	ldr	r2, [pc, #268]	; (8009598 <TIM_Base_SetConfig+0x130>)
 800948c:	4293      	cmp	r3, r2
 800948e:	d00f      	beq.n	80094b0 <TIM_Base_SetConfig+0x48>
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	4a42      	ldr	r2, [pc, #264]	; (800959c <TIM_Base_SetConfig+0x134>)
 8009494:	4293      	cmp	r3, r2
 8009496:	d00b      	beq.n	80094b0 <TIM_Base_SetConfig+0x48>
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	4a41      	ldr	r2, [pc, #260]	; (80095a0 <TIM_Base_SetConfig+0x138>)
 800949c:	4293      	cmp	r3, r2
 800949e:	d007      	beq.n	80094b0 <TIM_Base_SetConfig+0x48>
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	4a40      	ldr	r2, [pc, #256]	; (80095a4 <TIM_Base_SetConfig+0x13c>)
 80094a4:	4293      	cmp	r3, r2
 80094a6:	d003      	beq.n	80094b0 <TIM_Base_SetConfig+0x48>
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	4a3f      	ldr	r2, [pc, #252]	; (80095a8 <TIM_Base_SetConfig+0x140>)
 80094ac:	4293      	cmp	r3, r2
 80094ae:	d108      	bne.n	80094c2 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80094b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80094b8:	683b      	ldr	r3, [r7, #0]
 80094ba:	685b      	ldr	r3, [r3, #4]
 80094bc:	68fa      	ldr	r2, [r7, #12]
 80094be:	4313      	orrs	r3, r2
 80094c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	4a33      	ldr	r2, [pc, #204]	; (8009594 <TIM_Base_SetConfig+0x12c>)
 80094c6:	4293      	cmp	r3, r2
 80094c8:	d023      	beq.n	8009512 <TIM_Base_SetConfig+0xaa>
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80094d0:	d01f      	beq.n	8009512 <TIM_Base_SetConfig+0xaa>
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	4a30      	ldr	r2, [pc, #192]	; (8009598 <TIM_Base_SetConfig+0x130>)
 80094d6:	4293      	cmp	r3, r2
 80094d8:	d01b      	beq.n	8009512 <TIM_Base_SetConfig+0xaa>
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	4a2f      	ldr	r2, [pc, #188]	; (800959c <TIM_Base_SetConfig+0x134>)
 80094de:	4293      	cmp	r3, r2
 80094e0:	d017      	beq.n	8009512 <TIM_Base_SetConfig+0xaa>
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	4a2e      	ldr	r2, [pc, #184]	; (80095a0 <TIM_Base_SetConfig+0x138>)
 80094e6:	4293      	cmp	r3, r2
 80094e8:	d013      	beq.n	8009512 <TIM_Base_SetConfig+0xaa>
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	4a2d      	ldr	r2, [pc, #180]	; (80095a4 <TIM_Base_SetConfig+0x13c>)
 80094ee:	4293      	cmp	r3, r2
 80094f0:	d00f      	beq.n	8009512 <TIM_Base_SetConfig+0xaa>
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	4a2d      	ldr	r2, [pc, #180]	; (80095ac <TIM_Base_SetConfig+0x144>)
 80094f6:	4293      	cmp	r3, r2
 80094f8:	d00b      	beq.n	8009512 <TIM_Base_SetConfig+0xaa>
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	4a2c      	ldr	r2, [pc, #176]	; (80095b0 <TIM_Base_SetConfig+0x148>)
 80094fe:	4293      	cmp	r3, r2
 8009500:	d007      	beq.n	8009512 <TIM_Base_SetConfig+0xaa>
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	4a2b      	ldr	r2, [pc, #172]	; (80095b4 <TIM_Base_SetConfig+0x14c>)
 8009506:	4293      	cmp	r3, r2
 8009508:	d003      	beq.n	8009512 <TIM_Base_SetConfig+0xaa>
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	4a26      	ldr	r2, [pc, #152]	; (80095a8 <TIM_Base_SetConfig+0x140>)
 800950e:	4293      	cmp	r3, r2
 8009510:	d108      	bne.n	8009524 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009518:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800951a:	683b      	ldr	r3, [r7, #0]
 800951c:	68db      	ldr	r3, [r3, #12]
 800951e:	68fa      	ldr	r2, [r7, #12]
 8009520:	4313      	orrs	r3, r2
 8009522:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800952a:	683b      	ldr	r3, [r7, #0]
 800952c:	695b      	ldr	r3, [r3, #20]
 800952e:	4313      	orrs	r3, r2
 8009530:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	68fa      	ldr	r2, [r7, #12]
 8009536:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009538:	683b      	ldr	r3, [r7, #0]
 800953a:	689a      	ldr	r2, [r3, #8]
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009540:	683b      	ldr	r3, [r7, #0]
 8009542:	681a      	ldr	r2, [r3, #0]
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	4a12      	ldr	r2, [pc, #72]	; (8009594 <TIM_Base_SetConfig+0x12c>)
 800954c:	4293      	cmp	r3, r2
 800954e:	d013      	beq.n	8009578 <TIM_Base_SetConfig+0x110>
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	4a14      	ldr	r2, [pc, #80]	; (80095a4 <TIM_Base_SetConfig+0x13c>)
 8009554:	4293      	cmp	r3, r2
 8009556:	d00f      	beq.n	8009578 <TIM_Base_SetConfig+0x110>
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	4a14      	ldr	r2, [pc, #80]	; (80095ac <TIM_Base_SetConfig+0x144>)
 800955c:	4293      	cmp	r3, r2
 800955e:	d00b      	beq.n	8009578 <TIM_Base_SetConfig+0x110>
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	4a13      	ldr	r2, [pc, #76]	; (80095b0 <TIM_Base_SetConfig+0x148>)
 8009564:	4293      	cmp	r3, r2
 8009566:	d007      	beq.n	8009578 <TIM_Base_SetConfig+0x110>
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	4a12      	ldr	r2, [pc, #72]	; (80095b4 <TIM_Base_SetConfig+0x14c>)
 800956c:	4293      	cmp	r3, r2
 800956e:	d003      	beq.n	8009578 <TIM_Base_SetConfig+0x110>
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	4a0d      	ldr	r2, [pc, #52]	; (80095a8 <TIM_Base_SetConfig+0x140>)
 8009574:	4293      	cmp	r3, r2
 8009576:	d103      	bne.n	8009580 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009578:	683b      	ldr	r3, [r7, #0]
 800957a:	691a      	ldr	r2, [r3, #16]
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	2201      	movs	r2, #1
 8009584:	615a      	str	r2, [r3, #20]
}
 8009586:	bf00      	nop
 8009588:	3714      	adds	r7, #20
 800958a:	46bd      	mov	sp, r7
 800958c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009590:	4770      	bx	lr
 8009592:	bf00      	nop
 8009594:	40012c00 	.word	0x40012c00
 8009598:	40000400 	.word	0x40000400
 800959c:	40000800 	.word	0x40000800
 80095a0:	40000c00 	.word	0x40000c00
 80095a4:	40013400 	.word	0x40013400
 80095a8:	40015000 	.word	0x40015000
 80095ac:	40014000 	.word	0x40014000
 80095b0:	40014400 	.word	0x40014400
 80095b4:	40014800 	.word	0x40014800

080095b8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80095b8:	b480      	push	{r7}
 80095ba:	b087      	sub	sp, #28
 80095bc:	af00      	add	r7, sp, #0
 80095be:	6078      	str	r0, [r7, #4]
 80095c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	6a1b      	ldr	r3, [r3, #32]
 80095c6:	f023 0201 	bic.w	r2, r3, #1
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	6a1b      	ldr	r3, [r3, #32]
 80095d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	685b      	ldr	r3, [r3, #4]
 80095d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	699b      	ldr	r3, [r3, #24]
 80095de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80095e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80095ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	f023 0303 	bic.w	r3, r3, #3
 80095f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80095f4:	683b      	ldr	r3, [r7, #0]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	68fa      	ldr	r2, [r7, #12]
 80095fa:	4313      	orrs	r3, r2
 80095fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80095fe:	697b      	ldr	r3, [r7, #20]
 8009600:	f023 0302 	bic.w	r3, r3, #2
 8009604:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009606:	683b      	ldr	r3, [r7, #0]
 8009608:	689b      	ldr	r3, [r3, #8]
 800960a:	697a      	ldr	r2, [r7, #20]
 800960c:	4313      	orrs	r3, r2
 800960e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	4a30      	ldr	r2, [pc, #192]	; (80096d4 <TIM_OC1_SetConfig+0x11c>)
 8009614:	4293      	cmp	r3, r2
 8009616:	d013      	beq.n	8009640 <TIM_OC1_SetConfig+0x88>
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	4a2f      	ldr	r2, [pc, #188]	; (80096d8 <TIM_OC1_SetConfig+0x120>)
 800961c:	4293      	cmp	r3, r2
 800961e:	d00f      	beq.n	8009640 <TIM_OC1_SetConfig+0x88>
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	4a2e      	ldr	r2, [pc, #184]	; (80096dc <TIM_OC1_SetConfig+0x124>)
 8009624:	4293      	cmp	r3, r2
 8009626:	d00b      	beq.n	8009640 <TIM_OC1_SetConfig+0x88>
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	4a2d      	ldr	r2, [pc, #180]	; (80096e0 <TIM_OC1_SetConfig+0x128>)
 800962c:	4293      	cmp	r3, r2
 800962e:	d007      	beq.n	8009640 <TIM_OC1_SetConfig+0x88>
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	4a2c      	ldr	r2, [pc, #176]	; (80096e4 <TIM_OC1_SetConfig+0x12c>)
 8009634:	4293      	cmp	r3, r2
 8009636:	d003      	beq.n	8009640 <TIM_OC1_SetConfig+0x88>
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	4a2b      	ldr	r2, [pc, #172]	; (80096e8 <TIM_OC1_SetConfig+0x130>)
 800963c:	4293      	cmp	r3, r2
 800963e:	d10c      	bne.n	800965a <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009640:	697b      	ldr	r3, [r7, #20]
 8009642:	f023 0308 	bic.w	r3, r3, #8
 8009646:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009648:	683b      	ldr	r3, [r7, #0]
 800964a:	68db      	ldr	r3, [r3, #12]
 800964c:	697a      	ldr	r2, [r7, #20]
 800964e:	4313      	orrs	r3, r2
 8009650:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009652:	697b      	ldr	r3, [r7, #20]
 8009654:	f023 0304 	bic.w	r3, r3, #4
 8009658:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	4a1d      	ldr	r2, [pc, #116]	; (80096d4 <TIM_OC1_SetConfig+0x11c>)
 800965e:	4293      	cmp	r3, r2
 8009660:	d013      	beq.n	800968a <TIM_OC1_SetConfig+0xd2>
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	4a1c      	ldr	r2, [pc, #112]	; (80096d8 <TIM_OC1_SetConfig+0x120>)
 8009666:	4293      	cmp	r3, r2
 8009668:	d00f      	beq.n	800968a <TIM_OC1_SetConfig+0xd2>
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	4a1b      	ldr	r2, [pc, #108]	; (80096dc <TIM_OC1_SetConfig+0x124>)
 800966e:	4293      	cmp	r3, r2
 8009670:	d00b      	beq.n	800968a <TIM_OC1_SetConfig+0xd2>
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	4a1a      	ldr	r2, [pc, #104]	; (80096e0 <TIM_OC1_SetConfig+0x128>)
 8009676:	4293      	cmp	r3, r2
 8009678:	d007      	beq.n	800968a <TIM_OC1_SetConfig+0xd2>
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	4a19      	ldr	r2, [pc, #100]	; (80096e4 <TIM_OC1_SetConfig+0x12c>)
 800967e:	4293      	cmp	r3, r2
 8009680:	d003      	beq.n	800968a <TIM_OC1_SetConfig+0xd2>
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	4a18      	ldr	r2, [pc, #96]	; (80096e8 <TIM_OC1_SetConfig+0x130>)
 8009686:	4293      	cmp	r3, r2
 8009688:	d111      	bne.n	80096ae <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800968a:	693b      	ldr	r3, [r7, #16]
 800968c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009690:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009692:	693b      	ldr	r3, [r7, #16]
 8009694:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009698:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800969a:	683b      	ldr	r3, [r7, #0]
 800969c:	695b      	ldr	r3, [r3, #20]
 800969e:	693a      	ldr	r2, [r7, #16]
 80096a0:	4313      	orrs	r3, r2
 80096a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80096a4:	683b      	ldr	r3, [r7, #0]
 80096a6:	699b      	ldr	r3, [r3, #24]
 80096a8:	693a      	ldr	r2, [r7, #16]
 80096aa:	4313      	orrs	r3, r2
 80096ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	693a      	ldr	r2, [r7, #16]
 80096b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	68fa      	ldr	r2, [r7, #12]
 80096b8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80096ba:	683b      	ldr	r3, [r7, #0]
 80096bc:	685a      	ldr	r2, [r3, #4]
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	697a      	ldr	r2, [r7, #20]
 80096c6:	621a      	str	r2, [r3, #32]
}
 80096c8:	bf00      	nop
 80096ca:	371c      	adds	r7, #28
 80096cc:	46bd      	mov	sp, r7
 80096ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096d2:	4770      	bx	lr
 80096d4:	40012c00 	.word	0x40012c00
 80096d8:	40013400 	.word	0x40013400
 80096dc:	40014000 	.word	0x40014000
 80096e0:	40014400 	.word	0x40014400
 80096e4:	40014800 	.word	0x40014800
 80096e8:	40015000 	.word	0x40015000

080096ec <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80096ec:	b480      	push	{r7}
 80096ee:	b087      	sub	sp, #28
 80096f0:	af00      	add	r7, sp, #0
 80096f2:	6078      	str	r0, [r7, #4]
 80096f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	6a1b      	ldr	r3, [r3, #32]
 80096fa:	f023 0210 	bic.w	r2, r3, #16
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	6a1b      	ldr	r3, [r3, #32]
 8009706:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	685b      	ldr	r3, [r3, #4]
 800970c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	699b      	ldr	r3, [r3, #24]
 8009712:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800971a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800971e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009726:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009728:	683b      	ldr	r3, [r7, #0]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	021b      	lsls	r3, r3, #8
 800972e:	68fa      	ldr	r2, [r7, #12]
 8009730:	4313      	orrs	r3, r2
 8009732:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009734:	697b      	ldr	r3, [r7, #20]
 8009736:	f023 0320 	bic.w	r3, r3, #32
 800973a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800973c:	683b      	ldr	r3, [r7, #0]
 800973e:	689b      	ldr	r3, [r3, #8]
 8009740:	011b      	lsls	r3, r3, #4
 8009742:	697a      	ldr	r2, [r7, #20]
 8009744:	4313      	orrs	r3, r2
 8009746:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	4a2c      	ldr	r2, [pc, #176]	; (80097fc <TIM_OC2_SetConfig+0x110>)
 800974c:	4293      	cmp	r3, r2
 800974e:	d007      	beq.n	8009760 <TIM_OC2_SetConfig+0x74>
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	4a2b      	ldr	r2, [pc, #172]	; (8009800 <TIM_OC2_SetConfig+0x114>)
 8009754:	4293      	cmp	r3, r2
 8009756:	d003      	beq.n	8009760 <TIM_OC2_SetConfig+0x74>
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	4a2a      	ldr	r2, [pc, #168]	; (8009804 <TIM_OC2_SetConfig+0x118>)
 800975c:	4293      	cmp	r3, r2
 800975e:	d10d      	bne.n	800977c <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009760:	697b      	ldr	r3, [r7, #20]
 8009762:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009766:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009768:	683b      	ldr	r3, [r7, #0]
 800976a:	68db      	ldr	r3, [r3, #12]
 800976c:	011b      	lsls	r3, r3, #4
 800976e:	697a      	ldr	r2, [r7, #20]
 8009770:	4313      	orrs	r3, r2
 8009772:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009774:	697b      	ldr	r3, [r7, #20]
 8009776:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800977a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	4a1f      	ldr	r2, [pc, #124]	; (80097fc <TIM_OC2_SetConfig+0x110>)
 8009780:	4293      	cmp	r3, r2
 8009782:	d013      	beq.n	80097ac <TIM_OC2_SetConfig+0xc0>
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	4a1e      	ldr	r2, [pc, #120]	; (8009800 <TIM_OC2_SetConfig+0x114>)
 8009788:	4293      	cmp	r3, r2
 800978a:	d00f      	beq.n	80097ac <TIM_OC2_SetConfig+0xc0>
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	4a1e      	ldr	r2, [pc, #120]	; (8009808 <TIM_OC2_SetConfig+0x11c>)
 8009790:	4293      	cmp	r3, r2
 8009792:	d00b      	beq.n	80097ac <TIM_OC2_SetConfig+0xc0>
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	4a1d      	ldr	r2, [pc, #116]	; (800980c <TIM_OC2_SetConfig+0x120>)
 8009798:	4293      	cmp	r3, r2
 800979a:	d007      	beq.n	80097ac <TIM_OC2_SetConfig+0xc0>
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	4a1c      	ldr	r2, [pc, #112]	; (8009810 <TIM_OC2_SetConfig+0x124>)
 80097a0:	4293      	cmp	r3, r2
 80097a2:	d003      	beq.n	80097ac <TIM_OC2_SetConfig+0xc0>
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	4a17      	ldr	r2, [pc, #92]	; (8009804 <TIM_OC2_SetConfig+0x118>)
 80097a8:	4293      	cmp	r3, r2
 80097aa:	d113      	bne.n	80097d4 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80097ac:	693b      	ldr	r3, [r7, #16]
 80097ae:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80097b2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80097b4:	693b      	ldr	r3, [r7, #16]
 80097b6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80097ba:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80097bc:	683b      	ldr	r3, [r7, #0]
 80097be:	695b      	ldr	r3, [r3, #20]
 80097c0:	009b      	lsls	r3, r3, #2
 80097c2:	693a      	ldr	r2, [r7, #16]
 80097c4:	4313      	orrs	r3, r2
 80097c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80097c8:	683b      	ldr	r3, [r7, #0]
 80097ca:	699b      	ldr	r3, [r3, #24]
 80097cc:	009b      	lsls	r3, r3, #2
 80097ce:	693a      	ldr	r2, [r7, #16]
 80097d0:	4313      	orrs	r3, r2
 80097d2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	693a      	ldr	r2, [r7, #16]
 80097d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	68fa      	ldr	r2, [r7, #12]
 80097de:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80097e0:	683b      	ldr	r3, [r7, #0]
 80097e2:	685a      	ldr	r2, [r3, #4]
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	697a      	ldr	r2, [r7, #20]
 80097ec:	621a      	str	r2, [r3, #32]
}
 80097ee:	bf00      	nop
 80097f0:	371c      	adds	r7, #28
 80097f2:	46bd      	mov	sp, r7
 80097f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097f8:	4770      	bx	lr
 80097fa:	bf00      	nop
 80097fc:	40012c00 	.word	0x40012c00
 8009800:	40013400 	.word	0x40013400
 8009804:	40015000 	.word	0x40015000
 8009808:	40014000 	.word	0x40014000
 800980c:	40014400 	.word	0x40014400
 8009810:	40014800 	.word	0x40014800

08009814 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009814:	b480      	push	{r7}
 8009816:	b087      	sub	sp, #28
 8009818:	af00      	add	r7, sp, #0
 800981a:	6078      	str	r0, [r7, #4]
 800981c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	6a1b      	ldr	r3, [r3, #32]
 8009822:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	6a1b      	ldr	r3, [r3, #32]
 800982e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	685b      	ldr	r3, [r3, #4]
 8009834:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	69db      	ldr	r3, [r3, #28]
 800983a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009842:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009846:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	f023 0303 	bic.w	r3, r3, #3
 800984e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009850:	683b      	ldr	r3, [r7, #0]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	68fa      	ldr	r2, [r7, #12]
 8009856:	4313      	orrs	r3, r2
 8009858:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800985a:	697b      	ldr	r3, [r7, #20]
 800985c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009860:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009862:	683b      	ldr	r3, [r7, #0]
 8009864:	689b      	ldr	r3, [r3, #8]
 8009866:	021b      	lsls	r3, r3, #8
 8009868:	697a      	ldr	r2, [r7, #20]
 800986a:	4313      	orrs	r3, r2
 800986c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	4a2b      	ldr	r2, [pc, #172]	; (8009920 <TIM_OC3_SetConfig+0x10c>)
 8009872:	4293      	cmp	r3, r2
 8009874:	d007      	beq.n	8009886 <TIM_OC3_SetConfig+0x72>
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	4a2a      	ldr	r2, [pc, #168]	; (8009924 <TIM_OC3_SetConfig+0x110>)
 800987a:	4293      	cmp	r3, r2
 800987c:	d003      	beq.n	8009886 <TIM_OC3_SetConfig+0x72>
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	4a29      	ldr	r2, [pc, #164]	; (8009928 <TIM_OC3_SetConfig+0x114>)
 8009882:	4293      	cmp	r3, r2
 8009884:	d10d      	bne.n	80098a2 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009886:	697b      	ldr	r3, [r7, #20]
 8009888:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800988c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800988e:	683b      	ldr	r3, [r7, #0]
 8009890:	68db      	ldr	r3, [r3, #12]
 8009892:	021b      	lsls	r3, r3, #8
 8009894:	697a      	ldr	r2, [r7, #20]
 8009896:	4313      	orrs	r3, r2
 8009898:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800989a:	697b      	ldr	r3, [r7, #20]
 800989c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80098a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	4a1e      	ldr	r2, [pc, #120]	; (8009920 <TIM_OC3_SetConfig+0x10c>)
 80098a6:	4293      	cmp	r3, r2
 80098a8:	d013      	beq.n	80098d2 <TIM_OC3_SetConfig+0xbe>
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	4a1d      	ldr	r2, [pc, #116]	; (8009924 <TIM_OC3_SetConfig+0x110>)
 80098ae:	4293      	cmp	r3, r2
 80098b0:	d00f      	beq.n	80098d2 <TIM_OC3_SetConfig+0xbe>
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	4a1d      	ldr	r2, [pc, #116]	; (800992c <TIM_OC3_SetConfig+0x118>)
 80098b6:	4293      	cmp	r3, r2
 80098b8:	d00b      	beq.n	80098d2 <TIM_OC3_SetConfig+0xbe>
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	4a1c      	ldr	r2, [pc, #112]	; (8009930 <TIM_OC3_SetConfig+0x11c>)
 80098be:	4293      	cmp	r3, r2
 80098c0:	d007      	beq.n	80098d2 <TIM_OC3_SetConfig+0xbe>
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	4a1b      	ldr	r2, [pc, #108]	; (8009934 <TIM_OC3_SetConfig+0x120>)
 80098c6:	4293      	cmp	r3, r2
 80098c8:	d003      	beq.n	80098d2 <TIM_OC3_SetConfig+0xbe>
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	4a16      	ldr	r2, [pc, #88]	; (8009928 <TIM_OC3_SetConfig+0x114>)
 80098ce:	4293      	cmp	r3, r2
 80098d0:	d113      	bne.n	80098fa <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80098d2:	693b      	ldr	r3, [r7, #16]
 80098d4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80098d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80098da:	693b      	ldr	r3, [r7, #16]
 80098dc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80098e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80098e2:	683b      	ldr	r3, [r7, #0]
 80098e4:	695b      	ldr	r3, [r3, #20]
 80098e6:	011b      	lsls	r3, r3, #4
 80098e8:	693a      	ldr	r2, [r7, #16]
 80098ea:	4313      	orrs	r3, r2
 80098ec:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80098ee:	683b      	ldr	r3, [r7, #0]
 80098f0:	699b      	ldr	r3, [r3, #24]
 80098f2:	011b      	lsls	r3, r3, #4
 80098f4:	693a      	ldr	r2, [r7, #16]
 80098f6:	4313      	orrs	r3, r2
 80098f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	693a      	ldr	r2, [r7, #16]
 80098fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	68fa      	ldr	r2, [r7, #12]
 8009904:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009906:	683b      	ldr	r3, [r7, #0]
 8009908:	685a      	ldr	r2, [r3, #4]
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	697a      	ldr	r2, [r7, #20]
 8009912:	621a      	str	r2, [r3, #32]
}
 8009914:	bf00      	nop
 8009916:	371c      	adds	r7, #28
 8009918:	46bd      	mov	sp, r7
 800991a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800991e:	4770      	bx	lr
 8009920:	40012c00 	.word	0x40012c00
 8009924:	40013400 	.word	0x40013400
 8009928:	40015000 	.word	0x40015000
 800992c:	40014000 	.word	0x40014000
 8009930:	40014400 	.word	0x40014400
 8009934:	40014800 	.word	0x40014800

08009938 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009938:	b480      	push	{r7}
 800993a:	b087      	sub	sp, #28
 800993c:	af00      	add	r7, sp, #0
 800993e:	6078      	str	r0, [r7, #4]
 8009940:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	6a1b      	ldr	r3, [r3, #32]
 8009946:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	6a1b      	ldr	r3, [r3, #32]
 8009952:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	685b      	ldr	r3, [r3, #4]
 8009958:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	69db      	ldr	r3, [r3, #28]
 800995e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009966:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800996a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009972:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009974:	683b      	ldr	r3, [r7, #0]
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	021b      	lsls	r3, r3, #8
 800997a:	68fa      	ldr	r2, [r7, #12]
 800997c:	4313      	orrs	r3, r2
 800997e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009980:	697b      	ldr	r3, [r7, #20]
 8009982:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009986:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009988:	683b      	ldr	r3, [r7, #0]
 800998a:	689b      	ldr	r3, [r3, #8]
 800998c:	031b      	lsls	r3, r3, #12
 800998e:	697a      	ldr	r2, [r7, #20]
 8009990:	4313      	orrs	r3, r2
 8009992:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	4a2c      	ldr	r2, [pc, #176]	; (8009a48 <TIM_OC4_SetConfig+0x110>)
 8009998:	4293      	cmp	r3, r2
 800999a:	d007      	beq.n	80099ac <TIM_OC4_SetConfig+0x74>
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	4a2b      	ldr	r2, [pc, #172]	; (8009a4c <TIM_OC4_SetConfig+0x114>)
 80099a0:	4293      	cmp	r3, r2
 80099a2:	d003      	beq.n	80099ac <TIM_OC4_SetConfig+0x74>
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	4a2a      	ldr	r2, [pc, #168]	; (8009a50 <TIM_OC4_SetConfig+0x118>)
 80099a8:	4293      	cmp	r3, r2
 80099aa:	d10d      	bne.n	80099c8 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80099ac:	697b      	ldr	r3, [r7, #20]
 80099ae:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80099b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80099b4:	683b      	ldr	r3, [r7, #0]
 80099b6:	68db      	ldr	r3, [r3, #12]
 80099b8:	031b      	lsls	r3, r3, #12
 80099ba:	697a      	ldr	r2, [r7, #20]
 80099bc:	4313      	orrs	r3, r2
 80099be:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80099c0:	697b      	ldr	r3, [r7, #20]
 80099c2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80099c6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	4a1f      	ldr	r2, [pc, #124]	; (8009a48 <TIM_OC4_SetConfig+0x110>)
 80099cc:	4293      	cmp	r3, r2
 80099ce:	d013      	beq.n	80099f8 <TIM_OC4_SetConfig+0xc0>
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	4a1e      	ldr	r2, [pc, #120]	; (8009a4c <TIM_OC4_SetConfig+0x114>)
 80099d4:	4293      	cmp	r3, r2
 80099d6:	d00f      	beq.n	80099f8 <TIM_OC4_SetConfig+0xc0>
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	4a1e      	ldr	r2, [pc, #120]	; (8009a54 <TIM_OC4_SetConfig+0x11c>)
 80099dc:	4293      	cmp	r3, r2
 80099de:	d00b      	beq.n	80099f8 <TIM_OC4_SetConfig+0xc0>
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	4a1d      	ldr	r2, [pc, #116]	; (8009a58 <TIM_OC4_SetConfig+0x120>)
 80099e4:	4293      	cmp	r3, r2
 80099e6:	d007      	beq.n	80099f8 <TIM_OC4_SetConfig+0xc0>
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	4a1c      	ldr	r2, [pc, #112]	; (8009a5c <TIM_OC4_SetConfig+0x124>)
 80099ec:	4293      	cmp	r3, r2
 80099ee:	d003      	beq.n	80099f8 <TIM_OC4_SetConfig+0xc0>
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	4a17      	ldr	r2, [pc, #92]	; (8009a50 <TIM_OC4_SetConfig+0x118>)
 80099f4:	4293      	cmp	r3, r2
 80099f6:	d113      	bne.n	8009a20 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80099f8:	693b      	ldr	r3, [r7, #16]
 80099fa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80099fe:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8009a00:	693b      	ldr	r3, [r7, #16]
 8009a02:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009a06:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009a08:	683b      	ldr	r3, [r7, #0]
 8009a0a:	695b      	ldr	r3, [r3, #20]
 8009a0c:	019b      	lsls	r3, r3, #6
 8009a0e:	693a      	ldr	r2, [r7, #16]
 8009a10:	4313      	orrs	r3, r2
 8009a12:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8009a14:	683b      	ldr	r3, [r7, #0]
 8009a16:	699b      	ldr	r3, [r3, #24]
 8009a18:	019b      	lsls	r3, r3, #6
 8009a1a:	693a      	ldr	r2, [r7, #16]
 8009a1c:	4313      	orrs	r3, r2
 8009a1e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	693a      	ldr	r2, [r7, #16]
 8009a24:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	68fa      	ldr	r2, [r7, #12]
 8009a2a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009a2c:	683b      	ldr	r3, [r7, #0]
 8009a2e:	685a      	ldr	r2, [r3, #4]
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	697a      	ldr	r2, [r7, #20]
 8009a38:	621a      	str	r2, [r3, #32]
}
 8009a3a:	bf00      	nop
 8009a3c:	371c      	adds	r7, #28
 8009a3e:	46bd      	mov	sp, r7
 8009a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a44:	4770      	bx	lr
 8009a46:	bf00      	nop
 8009a48:	40012c00 	.word	0x40012c00
 8009a4c:	40013400 	.word	0x40013400
 8009a50:	40015000 	.word	0x40015000
 8009a54:	40014000 	.word	0x40014000
 8009a58:	40014400 	.word	0x40014400
 8009a5c:	40014800 	.word	0x40014800

08009a60 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8009a60:	b480      	push	{r7}
 8009a62:	b087      	sub	sp, #28
 8009a64:	af00      	add	r7, sp, #0
 8009a66:	6078      	str	r0, [r7, #4]
 8009a68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	6a1b      	ldr	r3, [r3, #32]
 8009a6e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	6a1b      	ldr	r3, [r3, #32]
 8009a7a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	685b      	ldr	r3, [r3, #4]
 8009a80:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009a86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009a8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009a92:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009a94:	683b      	ldr	r3, [r7, #0]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	68fa      	ldr	r2, [r7, #12]
 8009a9a:	4313      	orrs	r3, r2
 8009a9c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8009a9e:	693b      	ldr	r3, [r7, #16]
 8009aa0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8009aa4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8009aa6:	683b      	ldr	r3, [r7, #0]
 8009aa8:	689b      	ldr	r3, [r3, #8]
 8009aaa:	041b      	lsls	r3, r3, #16
 8009aac:	693a      	ldr	r2, [r7, #16]
 8009aae:	4313      	orrs	r3, r2
 8009ab0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	4a19      	ldr	r2, [pc, #100]	; (8009b1c <TIM_OC5_SetConfig+0xbc>)
 8009ab6:	4293      	cmp	r3, r2
 8009ab8:	d013      	beq.n	8009ae2 <TIM_OC5_SetConfig+0x82>
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	4a18      	ldr	r2, [pc, #96]	; (8009b20 <TIM_OC5_SetConfig+0xc0>)
 8009abe:	4293      	cmp	r3, r2
 8009ac0:	d00f      	beq.n	8009ae2 <TIM_OC5_SetConfig+0x82>
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	4a17      	ldr	r2, [pc, #92]	; (8009b24 <TIM_OC5_SetConfig+0xc4>)
 8009ac6:	4293      	cmp	r3, r2
 8009ac8:	d00b      	beq.n	8009ae2 <TIM_OC5_SetConfig+0x82>
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	4a16      	ldr	r2, [pc, #88]	; (8009b28 <TIM_OC5_SetConfig+0xc8>)
 8009ace:	4293      	cmp	r3, r2
 8009ad0:	d007      	beq.n	8009ae2 <TIM_OC5_SetConfig+0x82>
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	4a15      	ldr	r2, [pc, #84]	; (8009b2c <TIM_OC5_SetConfig+0xcc>)
 8009ad6:	4293      	cmp	r3, r2
 8009ad8:	d003      	beq.n	8009ae2 <TIM_OC5_SetConfig+0x82>
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	4a14      	ldr	r2, [pc, #80]	; (8009b30 <TIM_OC5_SetConfig+0xd0>)
 8009ade:	4293      	cmp	r3, r2
 8009ae0:	d109      	bne.n	8009af6 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8009ae2:	697b      	ldr	r3, [r7, #20]
 8009ae4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009ae8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8009aea:	683b      	ldr	r3, [r7, #0]
 8009aec:	695b      	ldr	r3, [r3, #20]
 8009aee:	021b      	lsls	r3, r3, #8
 8009af0:	697a      	ldr	r2, [r7, #20]
 8009af2:	4313      	orrs	r3, r2
 8009af4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	697a      	ldr	r2, [r7, #20]
 8009afa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	68fa      	ldr	r2, [r7, #12]
 8009b00:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8009b02:	683b      	ldr	r3, [r7, #0]
 8009b04:	685a      	ldr	r2, [r3, #4]
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	693a      	ldr	r2, [r7, #16]
 8009b0e:	621a      	str	r2, [r3, #32]
}
 8009b10:	bf00      	nop
 8009b12:	371c      	adds	r7, #28
 8009b14:	46bd      	mov	sp, r7
 8009b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b1a:	4770      	bx	lr
 8009b1c:	40012c00 	.word	0x40012c00
 8009b20:	40013400 	.word	0x40013400
 8009b24:	40014000 	.word	0x40014000
 8009b28:	40014400 	.word	0x40014400
 8009b2c:	40014800 	.word	0x40014800
 8009b30:	40015000 	.word	0x40015000

08009b34 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8009b34:	b480      	push	{r7}
 8009b36:	b087      	sub	sp, #28
 8009b38:	af00      	add	r7, sp, #0
 8009b3a:	6078      	str	r0, [r7, #4]
 8009b3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	6a1b      	ldr	r3, [r3, #32]
 8009b42:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	6a1b      	ldr	r3, [r3, #32]
 8009b4e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	685b      	ldr	r3, [r3, #4]
 8009b54:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009b5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009b62:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009b66:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009b68:	683b      	ldr	r3, [r7, #0]
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	021b      	lsls	r3, r3, #8
 8009b6e:	68fa      	ldr	r2, [r7, #12]
 8009b70:	4313      	orrs	r3, r2
 8009b72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009b74:	693b      	ldr	r3, [r7, #16]
 8009b76:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009b7a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009b7c:	683b      	ldr	r3, [r7, #0]
 8009b7e:	689b      	ldr	r3, [r3, #8]
 8009b80:	051b      	lsls	r3, r3, #20
 8009b82:	693a      	ldr	r2, [r7, #16]
 8009b84:	4313      	orrs	r3, r2
 8009b86:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	4a1a      	ldr	r2, [pc, #104]	; (8009bf4 <TIM_OC6_SetConfig+0xc0>)
 8009b8c:	4293      	cmp	r3, r2
 8009b8e:	d013      	beq.n	8009bb8 <TIM_OC6_SetConfig+0x84>
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	4a19      	ldr	r2, [pc, #100]	; (8009bf8 <TIM_OC6_SetConfig+0xc4>)
 8009b94:	4293      	cmp	r3, r2
 8009b96:	d00f      	beq.n	8009bb8 <TIM_OC6_SetConfig+0x84>
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	4a18      	ldr	r2, [pc, #96]	; (8009bfc <TIM_OC6_SetConfig+0xc8>)
 8009b9c:	4293      	cmp	r3, r2
 8009b9e:	d00b      	beq.n	8009bb8 <TIM_OC6_SetConfig+0x84>
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	4a17      	ldr	r2, [pc, #92]	; (8009c00 <TIM_OC6_SetConfig+0xcc>)
 8009ba4:	4293      	cmp	r3, r2
 8009ba6:	d007      	beq.n	8009bb8 <TIM_OC6_SetConfig+0x84>
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	4a16      	ldr	r2, [pc, #88]	; (8009c04 <TIM_OC6_SetConfig+0xd0>)
 8009bac:	4293      	cmp	r3, r2
 8009bae:	d003      	beq.n	8009bb8 <TIM_OC6_SetConfig+0x84>
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	4a15      	ldr	r2, [pc, #84]	; (8009c08 <TIM_OC6_SetConfig+0xd4>)
 8009bb4:	4293      	cmp	r3, r2
 8009bb6:	d109      	bne.n	8009bcc <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009bb8:	697b      	ldr	r3, [r7, #20]
 8009bba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009bbe:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009bc0:	683b      	ldr	r3, [r7, #0]
 8009bc2:	695b      	ldr	r3, [r3, #20]
 8009bc4:	029b      	lsls	r3, r3, #10
 8009bc6:	697a      	ldr	r2, [r7, #20]
 8009bc8:	4313      	orrs	r3, r2
 8009bca:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	697a      	ldr	r2, [r7, #20]
 8009bd0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	68fa      	ldr	r2, [r7, #12]
 8009bd6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009bd8:	683b      	ldr	r3, [r7, #0]
 8009bda:	685a      	ldr	r2, [r3, #4]
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	693a      	ldr	r2, [r7, #16]
 8009be4:	621a      	str	r2, [r3, #32]
}
 8009be6:	bf00      	nop
 8009be8:	371c      	adds	r7, #28
 8009bea:	46bd      	mov	sp, r7
 8009bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bf0:	4770      	bx	lr
 8009bf2:	bf00      	nop
 8009bf4:	40012c00 	.word	0x40012c00
 8009bf8:	40013400 	.word	0x40013400
 8009bfc:	40014000 	.word	0x40014000
 8009c00:	40014400 	.word	0x40014400
 8009c04:	40014800 	.word	0x40014800
 8009c08:	40015000 	.word	0x40015000

08009c0c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8009c0c:	b480      	push	{r7}
 8009c0e:	b087      	sub	sp, #28
 8009c10:	af00      	add	r7, sp, #0
 8009c12:	60f8      	str	r0, [r7, #12]
 8009c14:	60b9      	str	r1, [r7, #8]
 8009c16:	607a      	str	r2, [r7, #4]
 8009c18:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	6a1b      	ldr	r3, [r3, #32]
 8009c1e:	f023 0201 	bic.w	r2, r3, #1
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	699b      	ldr	r3, [r3, #24]
 8009c2a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	6a1b      	ldr	r3, [r3, #32]
 8009c30:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	4a28      	ldr	r2, [pc, #160]	; (8009cd8 <TIM_TI1_SetConfig+0xcc>)
 8009c36:	4293      	cmp	r3, r2
 8009c38:	d01b      	beq.n	8009c72 <TIM_TI1_SetConfig+0x66>
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009c40:	d017      	beq.n	8009c72 <TIM_TI1_SetConfig+0x66>
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	4a25      	ldr	r2, [pc, #148]	; (8009cdc <TIM_TI1_SetConfig+0xd0>)
 8009c46:	4293      	cmp	r3, r2
 8009c48:	d013      	beq.n	8009c72 <TIM_TI1_SetConfig+0x66>
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	4a24      	ldr	r2, [pc, #144]	; (8009ce0 <TIM_TI1_SetConfig+0xd4>)
 8009c4e:	4293      	cmp	r3, r2
 8009c50:	d00f      	beq.n	8009c72 <TIM_TI1_SetConfig+0x66>
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	4a23      	ldr	r2, [pc, #140]	; (8009ce4 <TIM_TI1_SetConfig+0xd8>)
 8009c56:	4293      	cmp	r3, r2
 8009c58:	d00b      	beq.n	8009c72 <TIM_TI1_SetConfig+0x66>
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	4a22      	ldr	r2, [pc, #136]	; (8009ce8 <TIM_TI1_SetConfig+0xdc>)
 8009c5e:	4293      	cmp	r3, r2
 8009c60:	d007      	beq.n	8009c72 <TIM_TI1_SetConfig+0x66>
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	4a21      	ldr	r2, [pc, #132]	; (8009cec <TIM_TI1_SetConfig+0xe0>)
 8009c66:	4293      	cmp	r3, r2
 8009c68:	d003      	beq.n	8009c72 <TIM_TI1_SetConfig+0x66>
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	4a20      	ldr	r2, [pc, #128]	; (8009cf0 <TIM_TI1_SetConfig+0xe4>)
 8009c6e:	4293      	cmp	r3, r2
 8009c70:	d101      	bne.n	8009c76 <TIM_TI1_SetConfig+0x6a>
 8009c72:	2301      	movs	r3, #1
 8009c74:	e000      	b.n	8009c78 <TIM_TI1_SetConfig+0x6c>
 8009c76:	2300      	movs	r3, #0
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d008      	beq.n	8009c8e <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8009c7c:	697b      	ldr	r3, [r7, #20]
 8009c7e:	f023 0303 	bic.w	r3, r3, #3
 8009c82:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8009c84:	697a      	ldr	r2, [r7, #20]
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	4313      	orrs	r3, r2
 8009c8a:	617b      	str	r3, [r7, #20]
 8009c8c:	e003      	b.n	8009c96 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8009c8e:	697b      	ldr	r3, [r7, #20]
 8009c90:	f043 0301 	orr.w	r3, r3, #1
 8009c94:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009c96:	697b      	ldr	r3, [r7, #20]
 8009c98:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009c9c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8009c9e:	683b      	ldr	r3, [r7, #0]
 8009ca0:	011b      	lsls	r3, r3, #4
 8009ca2:	b2db      	uxtb	r3, r3
 8009ca4:	697a      	ldr	r2, [r7, #20]
 8009ca6:	4313      	orrs	r3, r2
 8009ca8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009caa:	693b      	ldr	r3, [r7, #16]
 8009cac:	f023 030a 	bic.w	r3, r3, #10
 8009cb0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8009cb2:	68bb      	ldr	r3, [r7, #8]
 8009cb4:	f003 030a 	and.w	r3, r3, #10
 8009cb8:	693a      	ldr	r2, [r7, #16]
 8009cba:	4313      	orrs	r3, r2
 8009cbc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	697a      	ldr	r2, [r7, #20]
 8009cc2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	693a      	ldr	r2, [r7, #16]
 8009cc8:	621a      	str	r2, [r3, #32]
}
 8009cca:	bf00      	nop
 8009ccc:	371c      	adds	r7, #28
 8009cce:	46bd      	mov	sp, r7
 8009cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cd4:	4770      	bx	lr
 8009cd6:	bf00      	nop
 8009cd8:	40012c00 	.word	0x40012c00
 8009cdc:	40000400 	.word	0x40000400
 8009ce0:	40000800 	.word	0x40000800
 8009ce4:	40000c00 	.word	0x40000c00
 8009ce8:	40013400 	.word	0x40013400
 8009cec:	40014000 	.word	0x40014000
 8009cf0:	40015000 	.word	0x40015000

08009cf4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009cf4:	b480      	push	{r7}
 8009cf6:	b087      	sub	sp, #28
 8009cf8:	af00      	add	r7, sp, #0
 8009cfa:	60f8      	str	r0, [r7, #12]
 8009cfc:	60b9      	str	r1, [r7, #8]
 8009cfe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	6a1b      	ldr	r3, [r3, #32]
 8009d04:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	6a1b      	ldr	r3, [r3, #32]
 8009d0a:	f023 0201 	bic.w	r2, r3, #1
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	699b      	ldr	r3, [r3, #24]
 8009d16:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009d18:	693b      	ldr	r3, [r7, #16]
 8009d1a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009d1e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	011b      	lsls	r3, r3, #4
 8009d24:	693a      	ldr	r2, [r7, #16]
 8009d26:	4313      	orrs	r3, r2
 8009d28:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009d2a:	697b      	ldr	r3, [r7, #20]
 8009d2c:	f023 030a 	bic.w	r3, r3, #10
 8009d30:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009d32:	697a      	ldr	r2, [r7, #20]
 8009d34:	68bb      	ldr	r3, [r7, #8]
 8009d36:	4313      	orrs	r3, r2
 8009d38:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	693a      	ldr	r2, [r7, #16]
 8009d3e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	697a      	ldr	r2, [r7, #20]
 8009d44:	621a      	str	r2, [r3, #32]
}
 8009d46:	bf00      	nop
 8009d48:	371c      	adds	r7, #28
 8009d4a:	46bd      	mov	sp, r7
 8009d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d50:	4770      	bx	lr

08009d52 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8009d52:	b480      	push	{r7}
 8009d54:	b087      	sub	sp, #28
 8009d56:	af00      	add	r7, sp, #0
 8009d58:	60f8      	str	r0, [r7, #12]
 8009d5a:	60b9      	str	r1, [r7, #8]
 8009d5c:	607a      	str	r2, [r7, #4]
 8009d5e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	6a1b      	ldr	r3, [r3, #32]
 8009d64:	f023 0210 	bic.w	r2, r3, #16
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	699b      	ldr	r3, [r3, #24]
 8009d70:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	6a1b      	ldr	r3, [r3, #32]
 8009d76:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8009d78:	697b      	ldr	r3, [r7, #20]
 8009d7a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009d7e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	021b      	lsls	r3, r3, #8
 8009d84:	697a      	ldr	r2, [r7, #20]
 8009d86:	4313      	orrs	r3, r2
 8009d88:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009d8a:	697b      	ldr	r3, [r7, #20]
 8009d8c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009d90:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8009d92:	683b      	ldr	r3, [r7, #0]
 8009d94:	031b      	lsls	r3, r3, #12
 8009d96:	b29b      	uxth	r3, r3
 8009d98:	697a      	ldr	r2, [r7, #20]
 8009d9a:	4313      	orrs	r3, r2
 8009d9c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009d9e:	693b      	ldr	r3, [r7, #16]
 8009da0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009da4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8009da6:	68bb      	ldr	r3, [r7, #8]
 8009da8:	011b      	lsls	r3, r3, #4
 8009daa:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8009dae:	693a      	ldr	r2, [r7, #16]
 8009db0:	4313      	orrs	r3, r2
 8009db2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	697a      	ldr	r2, [r7, #20]
 8009db8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	693a      	ldr	r2, [r7, #16]
 8009dbe:	621a      	str	r2, [r3, #32]
}
 8009dc0:	bf00      	nop
 8009dc2:	371c      	adds	r7, #28
 8009dc4:	46bd      	mov	sp, r7
 8009dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dca:	4770      	bx	lr

08009dcc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009dcc:	b480      	push	{r7}
 8009dce:	b087      	sub	sp, #28
 8009dd0:	af00      	add	r7, sp, #0
 8009dd2:	60f8      	str	r0, [r7, #12]
 8009dd4:	60b9      	str	r1, [r7, #8]
 8009dd6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	6a1b      	ldr	r3, [r3, #32]
 8009ddc:	f023 0210 	bic.w	r2, r3, #16
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	699b      	ldr	r3, [r3, #24]
 8009de8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	6a1b      	ldr	r3, [r3, #32]
 8009dee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009df0:	697b      	ldr	r3, [r7, #20]
 8009df2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009df6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	031b      	lsls	r3, r3, #12
 8009dfc:	697a      	ldr	r2, [r7, #20]
 8009dfe:	4313      	orrs	r3, r2
 8009e00:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009e02:	693b      	ldr	r3, [r7, #16]
 8009e04:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009e08:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009e0a:	68bb      	ldr	r3, [r7, #8]
 8009e0c:	011b      	lsls	r3, r3, #4
 8009e0e:	693a      	ldr	r2, [r7, #16]
 8009e10:	4313      	orrs	r3, r2
 8009e12:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	697a      	ldr	r2, [r7, #20]
 8009e18:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	693a      	ldr	r2, [r7, #16]
 8009e1e:	621a      	str	r2, [r3, #32]
}
 8009e20:	bf00      	nop
 8009e22:	371c      	adds	r7, #28
 8009e24:	46bd      	mov	sp, r7
 8009e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e2a:	4770      	bx	lr

08009e2c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8009e2c:	b480      	push	{r7}
 8009e2e:	b087      	sub	sp, #28
 8009e30:	af00      	add	r7, sp, #0
 8009e32:	60f8      	str	r0, [r7, #12]
 8009e34:	60b9      	str	r1, [r7, #8]
 8009e36:	607a      	str	r2, [r7, #4]
 8009e38:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	6a1b      	ldr	r3, [r3, #32]
 8009e3e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8009e46:	68fb      	ldr	r3, [r7, #12]
 8009e48:	69db      	ldr	r3, [r3, #28]
 8009e4a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	6a1b      	ldr	r3, [r3, #32]
 8009e50:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8009e52:	697b      	ldr	r3, [r7, #20]
 8009e54:	f023 0303 	bic.w	r3, r3, #3
 8009e58:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8009e5a:	697a      	ldr	r2, [r7, #20]
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	4313      	orrs	r3, r2
 8009e60:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8009e62:	697b      	ldr	r3, [r7, #20]
 8009e64:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009e68:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8009e6a:	683b      	ldr	r3, [r7, #0]
 8009e6c:	011b      	lsls	r3, r3, #4
 8009e6e:	b2db      	uxtb	r3, r3
 8009e70:	697a      	ldr	r2, [r7, #20]
 8009e72:	4313      	orrs	r3, r2
 8009e74:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8009e76:	693b      	ldr	r3, [r7, #16]
 8009e78:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8009e7c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8009e7e:	68bb      	ldr	r3, [r7, #8]
 8009e80:	021b      	lsls	r3, r3, #8
 8009e82:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8009e86:	693a      	ldr	r2, [r7, #16]
 8009e88:	4313      	orrs	r3, r2
 8009e8a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	697a      	ldr	r2, [r7, #20]
 8009e90:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	693a      	ldr	r2, [r7, #16]
 8009e96:	621a      	str	r2, [r3, #32]
}
 8009e98:	bf00      	nop
 8009e9a:	371c      	adds	r7, #28
 8009e9c:	46bd      	mov	sp, r7
 8009e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ea2:	4770      	bx	lr

08009ea4 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8009ea4:	b480      	push	{r7}
 8009ea6:	b087      	sub	sp, #28
 8009ea8:	af00      	add	r7, sp, #0
 8009eaa:	60f8      	str	r0, [r7, #12]
 8009eac:	60b9      	str	r1, [r7, #8]
 8009eae:	607a      	str	r2, [r7, #4]
 8009eb0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	6a1b      	ldr	r3, [r3, #32]
 8009eb6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	69db      	ldr	r3, [r3, #28]
 8009ec2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	6a1b      	ldr	r3, [r3, #32]
 8009ec8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8009eca:	697b      	ldr	r3, [r7, #20]
 8009ecc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009ed0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	021b      	lsls	r3, r3, #8
 8009ed6:	697a      	ldr	r2, [r7, #20]
 8009ed8:	4313      	orrs	r3, r2
 8009eda:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8009edc:	697b      	ldr	r3, [r7, #20]
 8009ede:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009ee2:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8009ee4:	683b      	ldr	r3, [r7, #0]
 8009ee6:	031b      	lsls	r3, r3, #12
 8009ee8:	b29b      	uxth	r3, r3
 8009eea:	697a      	ldr	r2, [r7, #20]
 8009eec:	4313      	orrs	r3, r2
 8009eee:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8009ef0:	693b      	ldr	r3, [r7, #16]
 8009ef2:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8009ef6:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8009ef8:	68bb      	ldr	r3, [r7, #8]
 8009efa:	031b      	lsls	r3, r3, #12
 8009efc:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8009f00:	693a      	ldr	r2, [r7, #16]
 8009f02:	4313      	orrs	r3, r2
 8009f04:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	697a      	ldr	r2, [r7, #20]
 8009f0a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	693a      	ldr	r2, [r7, #16]
 8009f10:	621a      	str	r2, [r3, #32]
}
 8009f12:	bf00      	nop
 8009f14:	371c      	adds	r7, #28
 8009f16:	46bd      	mov	sp, r7
 8009f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f1c:	4770      	bx	lr

08009f1e <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009f1e:	b480      	push	{r7}
 8009f20:	b085      	sub	sp, #20
 8009f22:	af00      	add	r7, sp, #0
 8009f24:	6078      	str	r0, [r7, #4]
 8009f26:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	689b      	ldr	r3, [r3, #8]
 8009f2c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8009f34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009f38:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009f3a:	683a      	ldr	r2, [r7, #0]
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	4313      	orrs	r3, r2
 8009f40:	f043 0307 	orr.w	r3, r3, #7
 8009f44:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	68fa      	ldr	r2, [r7, #12]
 8009f4a:	609a      	str	r2, [r3, #8]
}
 8009f4c:	bf00      	nop
 8009f4e:	3714      	adds	r7, #20
 8009f50:	46bd      	mov	sp, r7
 8009f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f56:	4770      	bx	lr

08009f58 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009f58:	b480      	push	{r7}
 8009f5a:	b087      	sub	sp, #28
 8009f5c:	af00      	add	r7, sp, #0
 8009f5e:	60f8      	str	r0, [r7, #12]
 8009f60:	60b9      	str	r1, [r7, #8]
 8009f62:	607a      	str	r2, [r7, #4]
 8009f64:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	689b      	ldr	r3, [r3, #8]
 8009f6a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009f6c:	697b      	ldr	r3, [r7, #20]
 8009f6e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009f72:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009f74:	683b      	ldr	r3, [r7, #0]
 8009f76:	021a      	lsls	r2, r3, #8
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	431a      	orrs	r2, r3
 8009f7c:	68bb      	ldr	r3, [r7, #8]
 8009f7e:	4313      	orrs	r3, r2
 8009f80:	697a      	ldr	r2, [r7, #20]
 8009f82:	4313      	orrs	r3, r2
 8009f84:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	697a      	ldr	r2, [r7, #20]
 8009f8a:	609a      	str	r2, [r3, #8]
}
 8009f8c:	bf00      	nop
 8009f8e:	371c      	adds	r7, #28
 8009f90:	46bd      	mov	sp, r7
 8009f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f96:	4770      	bx	lr

08009f98 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009f98:	b480      	push	{r7}
 8009f9a:	b087      	sub	sp, #28
 8009f9c:	af00      	add	r7, sp, #0
 8009f9e:	60f8      	str	r0, [r7, #12]
 8009fa0:	60b9      	str	r1, [r7, #8]
 8009fa2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009fa4:	68bb      	ldr	r3, [r7, #8]
 8009fa6:	f003 031f 	and.w	r3, r3, #31
 8009faa:	2201      	movs	r2, #1
 8009fac:	fa02 f303 	lsl.w	r3, r2, r3
 8009fb0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	6a1a      	ldr	r2, [r3, #32]
 8009fb6:	697b      	ldr	r3, [r7, #20]
 8009fb8:	43db      	mvns	r3, r3
 8009fba:	401a      	ands	r2, r3
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	6a1a      	ldr	r2, [r3, #32]
 8009fc4:	68bb      	ldr	r3, [r7, #8]
 8009fc6:	f003 031f 	and.w	r3, r3, #31
 8009fca:	6879      	ldr	r1, [r7, #4]
 8009fcc:	fa01 f303 	lsl.w	r3, r1, r3
 8009fd0:	431a      	orrs	r2, r3
 8009fd2:	68fb      	ldr	r3, [r7, #12]
 8009fd4:	621a      	str	r2, [r3, #32]
}
 8009fd6:	bf00      	nop
 8009fd8:	371c      	adds	r7, #28
 8009fda:	46bd      	mov	sp, r7
 8009fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fe0:	4770      	bx	lr

08009fe2 <HAL_TIMEx_HallSensor_Init>:
  * @param  htim TIM Hall Sensor Interface handle
  * @param  sConfig TIM Hall Sensor configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Init(TIM_HandleTypeDef *htim, TIM_HallSensor_InitTypeDef *sConfig)
{
 8009fe2:	b580      	push	{r7, lr}
 8009fe4:	b08a      	sub	sp, #40	; 0x28
 8009fe6:	af00      	add	r7, sp, #0
 8009fe8:	6078      	str	r0, [r7, #4]
 8009fea:	6039      	str	r1, [r7, #0]
  TIM_OC_InitTypeDef OC_Config;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d101      	bne.n	8009ff6 <HAL_TIMEx_HallSensor_Init+0x14>
  {
    return HAL_ERROR;
 8009ff2:	2301      	movs	r3, #1
 8009ff4:	e0a0      	b.n	800a138 <HAL_TIMEx_HallSensor_Init+0x156>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
  assert_param(IS_TIM_IC_POLARITY(sConfig->IC1Polarity));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009ffc:	b2db      	uxtb	r3, r3
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d106      	bne.n	800a010 <HAL_TIMEx_HallSensor_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	2200      	movs	r2, #0
 800a006:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->HallSensor_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIMEx_HallSensor_MspInit(htim);
 800a00a:	6878      	ldr	r0, [r7, #4]
 800a00c:	f000 f898 	bl	800a140 <HAL_TIMEx_HallSensor_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	2202      	movs	r2, #2
 800a014:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	681a      	ldr	r2, [r3, #0]
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	3304      	adds	r3, #4
 800a020:	4619      	mov	r1, r3
 800a022:	4610      	mov	r0, r2
 800a024:	f7ff fa20 	bl	8009468 <TIM_Base_SetConfig>

  /* Configure the Channel 1 as Input Channel to interface with the three Outputs of the  Hall sensor */
  TIM_TI1_SetConfig(htim->Instance, sConfig->IC1Polarity, TIM_ICSELECTION_TRC, sConfig->IC1Filter);
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	6818      	ldr	r0, [r3, #0]
 800a02c:	683b      	ldr	r3, [r7, #0]
 800a02e:	6819      	ldr	r1, [r3, #0]
 800a030:	683b      	ldr	r3, [r7, #0]
 800a032:	689b      	ldr	r3, [r3, #8]
 800a034:	2203      	movs	r2, #3
 800a036:	f7ff fde9 	bl	8009c0c <TIM_TI1_SetConfig>

  /* Reset the IC1PSC Bits */
  htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	699a      	ldr	r2, [r3, #24]
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	f022 020c 	bic.w	r2, r2, #12
 800a048:	619a      	str	r2, [r3, #24]
  /* Set the IC1PSC value */
  htim->Instance->CCMR1 |= sConfig->IC1Prescaler;
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	6999      	ldr	r1, [r3, #24]
 800a050:	683b      	ldr	r3, [r7, #0]
 800a052:	685a      	ldr	r2, [r3, #4]
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	430a      	orrs	r2, r1
 800a05a:	619a      	str	r2, [r3, #24]

  /* Enable the Hall sensor interface (XOR function of the three inputs) */
  htim->Instance->CR2 |= TIM_CR2_TI1S;
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	685a      	ldr	r2, [r3, #4]
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800a06a:	605a      	str	r2, [r3, #4]

  /* Select the TIM_TS_TI1F_ED signal as Input trigger for the TIM */
  htim->Instance->SMCR &= ~TIM_SMCR_TS;
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	689b      	ldr	r3, [r3, #8]
 800a072:	687a      	ldr	r2, [r7, #4]
 800a074:	6812      	ldr	r2, [r2, #0]
 800a076:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800a07a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a07e:	6093      	str	r3, [r2, #8]
  htim->Instance->SMCR |= TIM_TS_TI1F_ED;
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	689a      	ldr	r2, [r3, #8]
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a08e:	609a      	str	r2, [r3, #8]

  /* Use the TIM_TS_TI1F_ED signal to reset the TIM counter each edge detection */
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	689b      	ldr	r3, [r3, #8]
 800a096:	687a      	ldr	r2, [r7, #4]
 800a098:	6812      	ldr	r2, [r2, #0]
 800a09a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a09e:	f023 0307 	bic.w	r3, r3, #7
 800a0a2:	6093      	str	r3, [r2, #8]
  htim->Instance->SMCR |= TIM_SLAVEMODE_RESET;
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	689a      	ldr	r2, [r3, #8]
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	f042 0204 	orr.w	r2, r2, #4
 800a0b2:	609a      	str	r2, [r3, #8]

  /* Program channel 2 in PWM 2 mode with the desired Commutation_Delay*/
  OC_Config.OCFastMode = TIM_OCFAST_DISABLE;
 800a0b4:	2300      	movs	r3, #0
 800a0b6:	61fb      	str	r3, [r7, #28]
  OC_Config.OCIdleState = TIM_OCIDLESTATE_RESET;
 800a0b8:	2300      	movs	r3, #0
 800a0ba:	623b      	str	r3, [r7, #32]
  OC_Config.OCMode = TIM_OCMODE_PWM2;
 800a0bc:	2370      	movs	r3, #112	; 0x70
 800a0be:	60fb      	str	r3, [r7, #12]
  OC_Config.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800a0c0:	2300      	movs	r3, #0
 800a0c2:	627b      	str	r3, [r7, #36]	; 0x24
  OC_Config.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800a0c4:	2300      	movs	r3, #0
 800a0c6:	61bb      	str	r3, [r7, #24]
  OC_Config.OCPolarity = TIM_OCPOLARITY_HIGH;
 800a0c8:	2300      	movs	r3, #0
 800a0ca:	617b      	str	r3, [r7, #20]
  OC_Config.Pulse = sConfig->Commutation_Delay;
 800a0cc:	683b      	ldr	r3, [r7, #0]
 800a0ce:	68db      	ldr	r3, [r3, #12]
 800a0d0:	613b      	str	r3, [r7, #16]

  TIM_OC2_SetConfig(htim->Instance, &OC_Config);
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	f107 020c 	add.w	r2, r7, #12
 800a0da:	4611      	mov	r1, r2
 800a0dc:	4618      	mov	r0, r3
 800a0de:	f7ff fb05 	bl	80096ec <TIM_OC2_SetConfig>

  /* Select OC2REF as trigger output on TRGO: write the MMS bits in the TIMx_CR2
    register to 101 */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	685b      	ldr	r3, [r3, #4]
 800a0e8:	687a      	ldr	r2, [r7, #4]
 800a0ea:	6812      	ldr	r2, [r2, #0]
 800a0ec:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800a0f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a0f4:	6053      	str	r3, [r2, #4]
  htim->Instance->CR2 |= TIM_TRGO_OC2REF;
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	685a      	ldr	r2, [r3, #4]
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	f042 0250 	orr.w	r2, r2, #80	; 0x50
 800a104:	605a      	str	r2, [r3, #4]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	2201      	movs	r2, #1
 800a10a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	2201      	movs	r2, #1
 800a112:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	2201      	movs	r2, #1
 800a11a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	2201      	movs	r2, #1
 800a122:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	2201      	movs	r2, #1
 800a12a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	2201      	movs	r2, #1
 800a132:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a136:	2300      	movs	r3, #0
}
 800a138:	4618      	mov	r0, r3
 800a13a:	3728      	adds	r7, #40	; 0x28
 800a13c:	46bd      	mov	sp, r7
 800a13e:	bd80      	pop	{r7, pc}

0800a140 <HAL_TIMEx_HallSensor_MspInit>:
  * @brief  Initializes the TIM Hall Sensor MSP.
  * @param  htim TIM Hall Sensor Interface handle
  * @retval None
  */
__weak void HAL_TIMEx_HallSensor_MspInit(TIM_HandleTypeDef *htim)
{
 800a140:	b480      	push	{r7}
 800a142:	b083      	sub	sp, #12
 800a144:	af00      	add	r7, sp, #0
 800a146:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_HallSensor_MspInit could be implemented in the user file
   */
}
 800a148:	bf00      	nop
 800a14a:	370c      	adds	r7, #12
 800a14c:	46bd      	mov	sp, r7
 800a14e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a152:	4770      	bx	lr

0800a154 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a154:	b480      	push	{r7}
 800a156:	b085      	sub	sp, #20
 800a158:	af00      	add	r7, sp, #0
 800a15a:	6078      	str	r0, [r7, #4]
 800a15c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a164:	2b01      	cmp	r3, #1
 800a166:	d101      	bne.n	800a16c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a168:	2302      	movs	r3, #2
 800a16a:	e074      	b.n	800a256 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	2201      	movs	r2, #1
 800a170:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	2202      	movs	r2, #2
 800a178:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	685b      	ldr	r3, [r3, #4]
 800a182:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	689b      	ldr	r3, [r3, #8]
 800a18a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	4a34      	ldr	r2, [pc, #208]	; (800a264 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800a192:	4293      	cmp	r3, r2
 800a194:	d009      	beq.n	800a1aa <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	4a33      	ldr	r2, [pc, #204]	; (800a268 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800a19c:	4293      	cmp	r3, r2
 800a19e:	d004      	beq.n	800a1aa <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	4a31      	ldr	r2, [pc, #196]	; (800a26c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800a1a6:	4293      	cmp	r3, r2
 800a1a8:	d108      	bne.n	800a1bc <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800a1b0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a1b2:	683b      	ldr	r3, [r7, #0]
 800a1b4:	685b      	ldr	r3, [r3, #4]
 800a1b6:	68fa      	ldr	r2, [r7, #12]
 800a1b8:	4313      	orrs	r3, r2
 800a1ba:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800a1c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a1c6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a1c8:	683b      	ldr	r3, [r7, #0]
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	68fa      	ldr	r2, [r7, #12]
 800a1ce:	4313      	orrs	r3, r2
 800a1d0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	68fa      	ldr	r2, [r7, #12]
 800a1d8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	4a21      	ldr	r2, [pc, #132]	; (800a264 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800a1e0:	4293      	cmp	r3, r2
 800a1e2:	d022      	beq.n	800a22a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a1ec:	d01d      	beq.n	800a22a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	4a1f      	ldr	r2, [pc, #124]	; (800a270 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800a1f4:	4293      	cmp	r3, r2
 800a1f6:	d018      	beq.n	800a22a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	4a1d      	ldr	r2, [pc, #116]	; (800a274 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800a1fe:	4293      	cmp	r3, r2
 800a200:	d013      	beq.n	800a22a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	4a1c      	ldr	r2, [pc, #112]	; (800a278 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800a208:	4293      	cmp	r3, r2
 800a20a:	d00e      	beq.n	800a22a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	4a15      	ldr	r2, [pc, #84]	; (800a268 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800a212:	4293      	cmp	r3, r2
 800a214:	d009      	beq.n	800a22a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	4a18      	ldr	r2, [pc, #96]	; (800a27c <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800a21c:	4293      	cmp	r3, r2
 800a21e:	d004      	beq.n	800a22a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	4a11      	ldr	r2, [pc, #68]	; (800a26c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800a226:	4293      	cmp	r3, r2
 800a228:	d10c      	bne.n	800a244 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a22a:	68bb      	ldr	r3, [r7, #8]
 800a22c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a230:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a232:	683b      	ldr	r3, [r7, #0]
 800a234:	689b      	ldr	r3, [r3, #8]
 800a236:	68ba      	ldr	r2, [r7, #8]
 800a238:	4313      	orrs	r3, r2
 800a23a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	68ba      	ldr	r2, [r7, #8]
 800a242:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	2201      	movs	r2, #1
 800a248:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	2200      	movs	r2, #0
 800a250:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a254:	2300      	movs	r3, #0
}
 800a256:	4618      	mov	r0, r3
 800a258:	3714      	adds	r7, #20
 800a25a:	46bd      	mov	sp, r7
 800a25c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a260:	4770      	bx	lr
 800a262:	bf00      	nop
 800a264:	40012c00 	.word	0x40012c00
 800a268:	40013400 	.word	0x40013400
 800a26c:	40015000 	.word	0x40015000
 800a270:	40000400 	.word	0x40000400
 800a274:	40000800 	.word	0x40000800
 800a278:	40000c00 	.word	0x40000c00
 800a27c:	40014000 	.word	0x40014000

0800a280 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800a280:	b480      	push	{r7}
 800a282:	b085      	sub	sp, #20
 800a284:	af00      	add	r7, sp, #0
 800a286:	6078      	str	r0, [r7, #4]
 800a288:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800a28a:	2300      	movs	r3, #0
 800a28c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a294:	2b01      	cmp	r3, #1
 800a296:	d101      	bne.n	800a29c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800a298:	2302      	movs	r3, #2
 800a29a:	e096      	b.n	800a3ca <HAL_TIMEx_ConfigBreakDeadTime+0x14a>
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	2201      	movs	r2, #1
 800a2a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800a2aa:	683b      	ldr	r3, [r7, #0]
 800a2ac:	68db      	ldr	r3, [r3, #12]
 800a2ae:	4313      	orrs	r3, r2
 800a2b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a2b8:	683b      	ldr	r3, [r7, #0]
 800a2ba:	689b      	ldr	r3, [r3, #8]
 800a2bc:	4313      	orrs	r3, r2
 800a2be:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800a2c6:	683b      	ldr	r3, [r7, #0]
 800a2c8:	685b      	ldr	r3, [r3, #4]
 800a2ca:	4313      	orrs	r3, r2
 800a2cc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800a2d4:	683b      	ldr	r3, [r7, #0]
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	4313      	orrs	r3, r2
 800a2da:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800a2dc:	68fb      	ldr	r3, [r7, #12]
 800a2de:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a2e2:	683b      	ldr	r3, [r7, #0]
 800a2e4:	691b      	ldr	r3, [r3, #16]
 800a2e6:	4313      	orrs	r3, r2
 800a2e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800a2f0:	683b      	ldr	r3, [r7, #0]
 800a2f2:	695b      	ldr	r3, [r3, #20]
 800a2f4:	4313      	orrs	r3, r2
 800a2f6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800a2fe:	683b      	ldr	r3, [r7, #0]
 800a300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a302:	4313      	orrs	r3, r2
 800a304:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800a30c:	683b      	ldr	r3, [r7, #0]
 800a30e:	699b      	ldr	r3, [r3, #24]
 800a310:	041b      	lsls	r3, r3, #16
 800a312:	4313      	orrs	r3, r2
 800a314:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	4a2f      	ldr	r2, [pc, #188]	; (800a3d8 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 800a31c:	4293      	cmp	r3, r2
 800a31e:	d009      	beq.n	800a334 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	4a2d      	ldr	r2, [pc, #180]	; (800a3dc <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800a326:	4293      	cmp	r3, r2
 800a328:	d004      	beq.n	800a334 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	4a2c      	ldr	r2, [pc, #176]	; (800a3e0 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 800a330:	4293      	cmp	r3, r2
 800a332:	d106      	bne.n	800a342 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800a33a:	683b      	ldr	r3, [r7, #0]
 800a33c:	69db      	ldr	r3, [r3, #28]
 800a33e:	4313      	orrs	r3, r2
 800a340:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	4a24      	ldr	r2, [pc, #144]	; (800a3d8 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 800a348:	4293      	cmp	r3, r2
 800a34a:	d009      	beq.n	800a360 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	4a22      	ldr	r2, [pc, #136]	; (800a3dc <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800a352:	4293      	cmp	r3, r2
 800a354:	d004      	beq.n	800a360 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	4a21      	ldr	r2, [pc, #132]	; (800a3e0 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 800a35c:	4293      	cmp	r3, r2
 800a35e:	d12b      	bne.n	800a3b8 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800a366:	683b      	ldr	r3, [r7, #0]
 800a368:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a36a:	051b      	lsls	r3, r3, #20
 800a36c:	4313      	orrs	r3, r2
 800a36e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800a376:	683b      	ldr	r3, [r7, #0]
 800a378:	6a1b      	ldr	r3, [r3, #32]
 800a37a:	4313      	orrs	r3, r2
 800a37c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800a384:	683b      	ldr	r3, [r7, #0]
 800a386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a388:	4313      	orrs	r3, r2
 800a38a:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	4a11      	ldr	r2, [pc, #68]	; (800a3d8 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 800a392:	4293      	cmp	r3, r2
 800a394:	d009      	beq.n	800a3aa <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	4a10      	ldr	r2, [pc, #64]	; (800a3dc <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800a39c:	4293      	cmp	r3, r2
 800a39e:	d004      	beq.n	800a3aa <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	4a0e      	ldr	r2, [pc, #56]	; (800a3e0 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 800a3a6:	4293      	cmp	r3, r2
 800a3a8:	d106      	bne.n	800a3b8 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800a3aa:	68fb      	ldr	r3, [r7, #12]
 800a3ac:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800a3b0:	683b      	ldr	r3, [r7, #0]
 800a3b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3b4:	4313      	orrs	r3, r2
 800a3b6:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	68fa      	ldr	r2, [r7, #12]
 800a3be:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	2200      	movs	r2, #0
 800a3c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a3c8:	2300      	movs	r3, #0
}
 800a3ca:	4618      	mov	r0, r3
 800a3cc:	3714      	adds	r7, #20
 800a3ce:	46bd      	mov	sp, r7
 800a3d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3d4:	4770      	bx	lr
 800a3d6:	bf00      	nop
 800a3d8:	40012c00 	.word	0x40012c00
 800a3dc:	40013400 	.word	0x40013400
 800a3e0:	40015000 	.word	0x40015000

0800a3e4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a3e4:	b480      	push	{r7}
 800a3e6:	b083      	sub	sp, #12
 800a3e8:	af00      	add	r7, sp, #0
 800a3ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a3ec:	bf00      	nop
 800a3ee:	370c      	adds	r7, #12
 800a3f0:	46bd      	mov	sp, r7
 800a3f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3f6:	4770      	bx	lr

0800a3f8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a3f8:	b480      	push	{r7}
 800a3fa:	b083      	sub	sp, #12
 800a3fc:	af00      	add	r7, sp, #0
 800a3fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a400:	bf00      	nop
 800a402:	370c      	adds	r7, #12
 800a404:	46bd      	mov	sp, r7
 800a406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a40a:	4770      	bx	lr

0800a40c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a40c:	b480      	push	{r7}
 800a40e:	b083      	sub	sp, #12
 800a410:	af00      	add	r7, sp, #0
 800a412:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a414:	bf00      	nop
 800a416:	370c      	adds	r7, #12
 800a418:	46bd      	mov	sp, r7
 800a41a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a41e:	4770      	bx	lr

0800a420 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800a420:	b480      	push	{r7}
 800a422:	b083      	sub	sp, #12
 800a424:	af00      	add	r7, sp, #0
 800a426:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800a428:	bf00      	nop
 800a42a:	370c      	adds	r7, #12
 800a42c:	46bd      	mov	sp, r7
 800a42e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a432:	4770      	bx	lr

0800a434 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800a434:	b480      	push	{r7}
 800a436:	b083      	sub	sp, #12
 800a438:	af00      	add	r7, sp, #0
 800a43a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800a43c:	bf00      	nop
 800a43e:	370c      	adds	r7, #12
 800a440:	46bd      	mov	sp, r7
 800a442:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a446:	4770      	bx	lr

0800a448 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800a448:	b480      	push	{r7}
 800a44a:	b083      	sub	sp, #12
 800a44c:	af00      	add	r7, sp, #0
 800a44e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800a450:	bf00      	nop
 800a452:	370c      	adds	r7, #12
 800a454:	46bd      	mov	sp, r7
 800a456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a45a:	4770      	bx	lr

0800a45c <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800a45c:	b480      	push	{r7}
 800a45e:	b083      	sub	sp, #12
 800a460:	af00      	add	r7, sp, #0
 800a462:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800a464:	bf00      	nop
 800a466:	370c      	adds	r7, #12
 800a468:	46bd      	mov	sp, r7
 800a46a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a46e:	4770      	bx	lr

0800a470 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a470:	b580      	push	{r7, lr}
 800a472:	b082      	sub	sp, #8
 800a474:	af00      	add	r7, sp, #0
 800a476:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d101      	bne.n	800a482 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a47e:	2301      	movs	r3, #1
 800a480:	e042      	b.n	800a508 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d106      	bne.n	800a49a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	2200      	movs	r2, #0
 800a490:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a494:	6878      	ldr	r0, [r7, #4]
 800a496:	f7f8 fa15 	bl	80028c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	2224      	movs	r2, #36	; 0x24
 800a49e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	681a      	ldr	r2, [r3, #0]
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	f022 0201 	bic.w	r2, r2, #1
 800a4b0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a4b2:	6878      	ldr	r0, [r7, #4]
 800a4b4:	f000 f8c2 	bl	800a63c <UART_SetConfig>
 800a4b8:	4603      	mov	r3, r0
 800a4ba:	2b01      	cmp	r3, #1
 800a4bc:	d101      	bne.n	800a4c2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800a4be:	2301      	movs	r3, #1
 800a4c0:	e022      	b.n	800a508 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	d002      	beq.n	800a4d0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800a4ca:	6878      	ldr	r0, [r7, #4]
 800a4cc:	f000 fbb2 	bl	800ac34 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	685a      	ldr	r2, [r3, #4]
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a4de:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	689a      	ldr	r2, [r3, #8]
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a4ee:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	681a      	ldr	r2, [r3, #0]
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	f042 0201 	orr.w	r2, r2, #1
 800a4fe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a500:	6878      	ldr	r0, [r7, #4]
 800a502:	f000 fc39 	bl	800ad78 <UART_CheckIdleState>
 800a506:	4603      	mov	r3, r0
}
 800a508:	4618      	mov	r0, r3
 800a50a:	3708      	adds	r7, #8
 800a50c:	46bd      	mov	sp, r7
 800a50e:	bd80      	pop	{r7, pc}

0800a510 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a510:	b580      	push	{r7, lr}
 800a512:	b08a      	sub	sp, #40	; 0x28
 800a514:	af02      	add	r7, sp, #8
 800a516:	60f8      	str	r0, [r7, #12]
 800a518:	60b9      	str	r1, [r7, #8]
 800a51a:	603b      	str	r3, [r7, #0]
 800a51c:	4613      	mov	r3, r2
 800a51e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a526:	2b20      	cmp	r3, #32
 800a528:	f040 8083 	bne.w	800a632 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800a52c:	68bb      	ldr	r3, [r7, #8]
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d002      	beq.n	800a538 <HAL_UART_Transmit+0x28>
 800a532:	88fb      	ldrh	r3, [r7, #6]
 800a534:	2b00      	cmp	r3, #0
 800a536:	d101      	bne.n	800a53c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800a538:	2301      	movs	r3, #1
 800a53a:	e07b      	b.n	800a634 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a542:	2b01      	cmp	r3, #1
 800a544:	d101      	bne.n	800a54a <HAL_UART_Transmit+0x3a>
 800a546:	2302      	movs	r3, #2
 800a548:	e074      	b.n	800a634 <HAL_UART_Transmit+0x124>
 800a54a:	68fb      	ldr	r3, [r7, #12]
 800a54c:	2201      	movs	r2, #1
 800a54e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	2200      	movs	r2, #0
 800a556:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a55a:	68fb      	ldr	r3, [r7, #12]
 800a55c:	2221      	movs	r2, #33	; 0x21
 800a55e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a562:	f7f8 ff6b 	bl	800343c <HAL_GetTick>
 800a566:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	88fa      	ldrh	r2, [r7, #6]
 800a56c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800a570:	68fb      	ldr	r3, [r7, #12]
 800a572:	88fa      	ldrh	r2, [r7, #6]
 800a574:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	689b      	ldr	r3, [r3, #8]
 800a57c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a580:	d108      	bne.n	800a594 <HAL_UART_Transmit+0x84>
 800a582:	68fb      	ldr	r3, [r7, #12]
 800a584:	691b      	ldr	r3, [r3, #16]
 800a586:	2b00      	cmp	r3, #0
 800a588:	d104      	bne.n	800a594 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800a58a:	2300      	movs	r3, #0
 800a58c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800a58e:	68bb      	ldr	r3, [r7, #8]
 800a590:	61bb      	str	r3, [r7, #24]
 800a592:	e003      	b.n	800a59c <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800a594:	68bb      	ldr	r3, [r7, #8]
 800a596:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a598:	2300      	movs	r3, #0
 800a59a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	2200      	movs	r2, #0
 800a5a0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800a5a4:	e02c      	b.n	800a600 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a5a6:	683b      	ldr	r3, [r7, #0]
 800a5a8:	9300      	str	r3, [sp, #0]
 800a5aa:	697b      	ldr	r3, [r7, #20]
 800a5ac:	2200      	movs	r2, #0
 800a5ae:	2180      	movs	r1, #128	; 0x80
 800a5b0:	68f8      	ldr	r0, [r7, #12]
 800a5b2:	f000 fc2c 	bl	800ae0e <UART_WaitOnFlagUntilTimeout>
 800a5b6:	4603      	mov	r3, r0
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	d001      	beq.n	800a5c0 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800a5bc:	2303      	movs	r3, #3
 800a5be:	e039      	b.n	800a634 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800a5c0:	69fb      	ldr	r3, [r7, #28]
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	d10b      	bne.n	800a5de <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a5c6:	69bb      	ldr	r3, [r7, #24]
 800a5c8:	881b      	ldrh	r3, [r3, #0]
 800a5ca:	461a      	mov	r2, r3
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a5d4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800a5d6:	69bb      	ldr	r3, [r7, #24]
 800a5d8:	3302      	adds	r3, #2
 800a5da:	61bb      	str	r3, [r7, #24]
 800a5dc:	e007      	b.n	800a5ee <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800a5de:	69fb      	ldr	r3, [r7, #28]
 800a5e0:	781a      	ldrb	r2, [r3, #0]
 800a5e2:	68fb      	ldr	r3, [r7, #12]
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800a5e8:	69fb      	ldr	r3, [r7, #28]
 800a5ea:	3301      	adds	r3, #1
 800a5ec:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800a5f4:	b29b      	uxth	r3, r3
 800a5f6:	3b01      	subs	r3, #1
 800a5f8:	b29a      	uxth	r2, r3
 800a5fa:	68fb      	ldr	r3, [r7, #12]
 800a5fc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800a606:	b29b      	uxth	r3, r3
 800a608:	2b00      	cmp	r3, #0
 800a60a:	d1cc      	bne.n	800a5a6 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a60c:	683b      	ldr	r3, [r7, #0]
 800a60e:	9300      	str	r3, [sp, #0]
 800a610:	697b      	ldr	r3, [r7, #20]
 800a612:	2200      	movs	r2, #0
 800a614:	2140      	movs	r1, #64	; 0x40
 800a616:	68f8      	ldr	r0, [r7, #12]
 800a618:	f000 fbf9 	bl	800ae0e <UART_WaitOnFlagUntilTimeout>
 800a61c:	4603      	mov	r3, r0
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d001      	beq.n	800a626 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800a622:	2303      	movs	r3, #3
 800a624:	e006      	b.n	800a634 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	2220      	movs	r2, #32
 800a62a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800a62e:	2300      	movs	r3, #0
 800a630:	e000      	b.n	800a634 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800a632:	2302      	movs	r3, #2
  }
}
 800a634:	4618      	mov	r0, r3
 800a636:	3720      	adds	r7, #32
 800a638:	46bd      	mov	sp, r7
 800a63a:	bd80      	pop	{r7, pc}

0800a63c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a63c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a640:	b08c      	sub	sp, #48	; 0x30
 800a642:	af00      	add	r7, sp, #0
 800a644:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a646:	2300      	movs	r3, #0
 800a648:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a64c:	697b      	ldr	r3, [r7, #20]
 800a64e:	689a      	ldr	r2, [r3, #8]
 800a650:	697b      	ldr	r3, [r7, #20]
 800a652:	691b      	ldr	r3, [r3, #16]
 800a654:	431a      	orrs	r2, r3
 800a656:	697b      	ldr	r3, [r7, #20]
 800a658:	695b      	ldr	r3, [r3, #20]
 800a65a:	431a      	orrs	r2, r3
 800a65c:	697b      	ldr	r3, [r7, #20]
 800a65e:	69db      	ldr	r3, [r3, #28]
 800a660:	4313      	orrs	r3, r2
 800a662:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a664:	697b      	ldr	r3, [r7, #20]
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	681a      	ldr	r2, [r3, #0]
 800a66a:	4baa      	ldr	r3, [pc, #680]	; (800a914 <UART_SetConfig+0x2d8>)
 800a66c:	4013      	ands	r3, r2
 800a66e:	697a      	ldr	r2, [r7, #20]
 800a670:	6812      	ldr	r2, [r2, #0]
 800a672:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a674:	430b      	orrs	r3, r1
 800a676:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a678:	697b      	ldr	r3, [r7, #20]
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	685b      	ldr	r3, [r3, #4]
 800a67e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a682:	697b      	ldr	r3, [r7, #20]
 800a684:	68da      	ldr	r2, [r3, #12]
 800a686:	697b      	ldr	r3, [r7, #20]
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	430a      	orrs	r2, r1
 800a68c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a68e:	697b      	ldr	r3, [r7, #20]
 800a690:	699b      	ldr	r3, [r3, #24]
 800a692:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a694:	697b      	ldr	r3, [r7, #20]
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	4a9f      	ldr	r2, [pc, #636]	; (800a918 <UART_SetConfig+0x2dc>)
 800a69a:	4293      	cmp	r3, r2
 800a69c:	d004      	beq.n	800a6a8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a69e:	697b      	ldr	r3, [r7, #20]
 800a6a0:	6a1b      	ldr	r3, [r3, #32]
 800a6a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a6a4:	4313      	orrs	r3, r2
 800a6a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a6a8:	697b      	ldr	r3, [r7, #20]
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	689b      	ldr	r3, [r3, #8]
 800a6ae:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800a6b2:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800a6b6:	697a      	ldr	r2, [r7, #20]
 800a6b8:	6812      	ldr	r2, [r2, #0]
 800a6ba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a6bc:	430b      	orrs	r3, r1
 800a6be:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a6c0:	697b      	ldr	r3, [r7, #20]
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6c6:	f023 010f 	bic.w	r1, r3, #15
 800a6ca:	697b      	ldr	r3, [r7, #20]
 800a6cc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a6ce:	697b      	ldr	r3, [r7, #20]
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	430a      	orrs	r2, r1
 800a6d4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a6d6:	697b      	ldr	r3, [r7, #20]
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	4a90      	ldr	r2, [pc, #576]	; (800a91c <UART_SetConfig+0x2e0>)
 800a6dc:	4293      	cmp	r3, r2
 800a6de:	d125      	bne.n	800a72c <UART_SetConfig+0xf0>
 800a6e0:	4b8f      	ldr	r3, [pc, #572]	; (800a920 <UART_SetConfig+0x2e4>)
 800a6e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a6e6:	f003 0303 	and.w	r3, r3, #3
 800a6ea:	2b03      	cmp	r3, #3
 800a6ec:	d81a      	bhi.n	800a724 <UART_SetConfig+0xe8>
 800a6ee:	a201      	add	r2, pc, #4	; (adr r2, 800a6f4 <UART_SetConfig+0xb8>)
 800a6f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6f4:	0800a705 	.word	0x0800a705
 800a6f8:	0800a715 	.word	0x0800a715
 800a6fc:	0800a70d 	.word	0x0800a70d
 800a700:	0800a71d 	.word	0x0800a71d
 800a704:	2301      	movs	r3, #1
 800a706:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a70a:	e116      	b.n	800a93a <UART_SetConfig+0x2fe>
 800a70c:	2302      	movs	r3, #2
 800a70e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a712:	e112      	b.n	800a93a <UART_SetConfig+0x2fe>
 800a714:	2304      	movs	r3, #4
 800a716:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a71a:	e10e      	b.n	800a93a <UART_SetConfig+0x2fe>
 800a71c:	2308      	movs	r3, #8
 800a71e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a722:	e10a      	b.n	800a93a <UART_SetConfig+0x2fe>
 800a724:	2310      	movs	r3, #16
 800a726:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a72a:	e106      	b.n	800a93a <UART_SetConfig+0x2fe>
 800a72c:	697b      	ldr	r3, [r7, #20]
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	4a7c      	ldr	r2, [pc, #496]	; (800a924 <UART_SetConfig+0x2e8>)
 800a732:	4293      	cmp	r3, r2
 800a734:	d138      	bne.n	800a7a8 <UART_SetConfig+0x16c>
 800a736:	4b7a      	ldr	r3, [pc, #488]	; (800a920 <UART_SetConfig+0x2e4>)
 800a738:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a73c:	f003 030c 	and.w	r3, r3, #12
 800a740:	2b0c      	cmp	r3, #12
 800a742:	d82d      	bhi.n	800a7a0 <UART_SetConfig+0x164>
 800a744:	a201      	add	r2, pc, #4	; (adr r2, 800a74c <UART_SetConfig+0x110>)
 800a746:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a74a:	bf00      	nop
 800a74c:	0800a781 	.word	0x0800a781
 800a750:	0800a7a1 	.word	0x0800a7a1
 800a754:	0800a7a1 	.word	0x0800a7a1
 800a758:	0800a7a1 	.word	0x0800a7a1
 800a75c:	0800a791 	.word	0x0800a791
 800a760:	0800a7a1 	.word	0x0800a7a1
 800a764:	0800a7a1 	.word	0x0800a7a1
 800a768:	0800a7a1 	.word	0x0800a7a1
 800a76c:	0800a789 	.word	0x0800a789
 800a770:	0800a7a1 	.word	0x0800a7a1
 800a774:	0800a7a1 	.word	0x0800a7a1
 800a778:	0800a7a1 	.word	0x0800a7a1
 800a77c:	0800a799 	.word	0x0800a799
 800a780:	2300      	movs	r3, #0
 800a782:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a786:	e0d8      	b.n	800a93a <UART_SetConfig+0x2fe>
 800a788:	2302      	movs	r3, #2
 800a78a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a78e:	e0d4      	b.n	800a93a <UART_SetConfig+0x2fe>
 800a790:	2304      	movs	r3, #4
 800a792:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a796:	e0d0      	b.n	800a93a <UART_SetConfig+0x2fe>
 800a798:	2308      	movs	r3, #8
 800a79a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a79e:	e0cc      	b.n	800a93a <UART_SetConfig+0x2fe>
 800a7a0:	2310      	movs	r3, #16
 800a7a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a7a6:	e0c8      	b.n	800a93a <UART_SetConfig+0x2fe>
 800a7a8:	697b      	ldr	r3, [r7, #20]
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	4a5e      	ldr	r2, [pc, #376]	; (800a928 <UART_SetConfig+0x2ec>)
 800a7ae:	4293      	cmp	r3, r2
 800a7b0:	d125      	bne.n	800a7fe <UART_SetConfig+0x1c2>
 800a7b2:	4b5b      	ldr	r3, [pc, #364]	; (800a920 <UART_SetConfig+0x2e4>)
 800a7b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a7b8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800a7bc:	2b30      	cmp	r3, #48	; 0x30
 800a7be:	d016      	beq.n	800a7ee <UART_SetConfig+0x1b2>
 800a7c0:	2b30      	cmp	r3, #48	; 0x30
 800a7c2:	d818      	bhi.n	800a7f6 <UART_SetConfig+0x1ba>
 800a7c4:	2b20      	cmp	r3, #32
 800a7c6:	d00a      	beq.n	800a7de <UART_SetConfig+0x1a2>
 800a7c8:	2b20      	cmp	r3, #32
 800a7ca:	d814      	bhi.n	800a7f6 <UART_SetConfig+0x1ba>
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	d002      	beq.n	800a7d6 <UART_SetConfig+0x19a>
 800a7d0:	2b10      	cmp	r3, #16
 800a7d2:	d008      	beq.n	800a7e6 <UART_SetConfig+0x1aa>
 800a7d4:	e00f      	b.n	800a7f6 <UART_SetConfig+0x1ba>
 800a7d6:	2300      	movs	r3, #0
 800a7d8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a7dc:	e0ad      	b.n	800a93a <UART_SetConfig+0x2fe>
 800a7de:	2302      	movs	r3, #2
 800a7e0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a7e4:	e0a9      	b.n	800a93a <UART_SetConfig+0x2fe>
 800a7e6:	2304      	movs	r3, #4
 800a7e8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a7ec:	e0a5      	b.n	800a93a <UART_SetConfig+0x2fe>
 800a7ee:	2308      	movs	r3, #8
 800a7f0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a7f4:	e0a1      	b.n	800a93a <UART_SetConfig+0x2fe>
 800a7f6:	2310      	movs	r3, #16
 800a7f8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a7fc:	e09d      	b.n	800a93a <UART_SetConfig+0x2fe>
 800a7fe:	697b      	ldr	r3, [r7, #20]
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	4a4a      	ldr	r2, [pc, #296]	; (800a92c <UART_SetConfig+0x2f0>)
 800a804:	4293      	cmp	r3, r2
 800a806:	d125      	bne.n	800a854 <UART_SetConfig+0x218>
 800a808:	4b45      	ldr	r3, [pc, #276]	; (800a920 <UART_SetConfig+0x2e4>)
 800a80a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a80e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800a812:	2bc0      	cmp	r3, #192	; 0xc0
 800a814:	d016      	beq.n	800a844 <UART_SetConfig+0x208>
 800a816:	2bc0      	cmp	r3, #192	; 0xc0
 800a818:	d818      	bhi.n	800a84c <UART_SetConfig+0x210>
 800a81a:	2b80      	cmp	r3, #128	; 0x80
 800a81c:	d00a      	beq.n	800a834 <UART_SetConfig+0x1f8>
 800a81e:	2b80      	cmp	r3, #128	; 0x80
 800a820:	d814      	bhi.n	800a84c <UART_SetConfig+0x210>
 800a822:	2b00      	cmp	r3, #0
 800a824:	d002      	beq.n	800a82c <UART_SetConfig+0x1f0>
 800a826:	2b40      	cmp	r3, #64	; 0x40
 800a828:	d008      	beq.n	800a83c <UART_SetConfig+0x200>
 800a82a:	e00f      	b.n	800a84c <UART_SetConfig+0x210>
 800a82c:	2300      	movs	r3, #0
 800a82e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a832:	e082      	b.n	800a93a <UART_SetConfig+0x2fe>
 800a834:	2302      	movs	r3, #2
 800a836:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a83a:	e07e      	b.n	800a93a <UART_SetConfig+0x2fe>
 800a83c:	2304      	movs	r3, #4
 800a83e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a842:	e07a      	b.n	800a93a <UART_SetConfig+0x2fe>
 800a844:	2308      	movs	r3, #8
 800a846:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a84a:	e076      	b.n	800a93a <UART_SetConfig+0x2fe>
 800a84c:	2310      	movs	r3, #16
 800a84e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a852:	e072      	b.n	800a93a <UART_SetConfig+0x2fe>
 800a854:	697b      	ldr	r3, [r7, #20]
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	4a35      	ldr	r2, [pc, #212]	; (800a930 <UART_SetConfig+0x2f4>)
 800a85a:	4293      	cmp	r3, r2
 800a85c:	d12a      	bne.n	800a8b4 <UART_SetConfig+0x278>
 800a85e:	4b30      	ldr	r3, [pc, #192]	; (800a920 <UART_SetConfig+0x2e4>)
 800a860:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a864:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a868:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a86c:	d01a      	beq.n	800a8a4 <UART_SetConfig+0x268>
 800a86e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a872:	d81b      	bhi.n	800a8ac <UART_SetConfig+0x270>
 800a874:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a878:	d00c      	beq.n	800a894 <UART_SetConfig+0x258>
 800a87a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a87e:	d815      	bhi.n	800a8ac <UART_SetConfig+0x270>
 800a880:	2b00      	cmp	r3, #0
 800a882:	d003      	beq.n	800a88c <UART_SetConfig+0x250>
 800a884:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a888:	d008      	beq.n	800a89c <UART_SetConfig+0x260>
 800a88a:	e00f      	b.n	800a8ac <UART_SetConfig+0x270>
 800a88c:	2300      	movs	r3, #0
 800a88e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a892:	e052      	b.n	800a93a <UART_SetConfig+0x2fe>
 800a894:	2302      	movs	r3, #2
 800a896:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a89a:	e04e      	b.n	800a93a <UART_SetConfig+0x2fe>
 800a89c:	2304      	movs	r3, #4
 800a89e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a8a2:	e04a      	b.n	800a93a <UART_SetConfig+0x2fe>
 800a8a4:	2308      	movs	r3, #8
 800a8a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a8aa:	e046      	b.n	800a93a <UART_SetConfig+0x2fe>
 800a8ac:	2310      	movs	r3, #16
 800a8ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a8b2:	e042      	b.n	800a93a <UART_SetConfig+0x2fe>
 800a8b4:	697b      	ldr	r3, [r7, #20]
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	4a17      	ldr	r2, [pc, #92]	; (800a918 <UART_SetConfig+0x2dc>)
 800a8ba:	4293      	cmp	r3, r2
 800a8bc:	d13a      	bne.n	800a934 <UART_SetConfig+0x2f8>
 800a8be:	4b18      	ldr	r3, [pc, #96]	; (800a920 <UART_SetConfig+0x2e4>)
 800a8c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a8c4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800a8c8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a8cc:	d01a      	beq.n	800a904 <UART_SetConfig+0x2c8>
 800a8ce:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a8d2:	d81b      	bhi.n	800a90c <UART_SetConfig+0x2d0>
 800a8d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a8d8:	d00c      	beq.n	800a8f4 <UART_SetConfig+0x2b8>
 800a8da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a8de:	d815      	bhi.n	800a90c <UART_SetConfig+0x2d0>
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	d003      	beq.n	800a8ec <UART_SetConfig+0x2b0>
 800a8e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a8e8:	d008      	beq.n	800a8fc <UART_SetConfig+0x2c0>
 800a8ea:	e00f      	b.n	800a90c <UART_SetConfig+0x2d0>
 800a8ec:	2300      	movs	r3, #0
 800a8ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a8f2:	e022      	b.n	800a93a <UART_SetConfig+0x2fe>
 800a8f4:	2302      	movs	r3, #2
 800a8f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a8fa:	e01e      	b.n	800a93a <UART_SetConfig+0x2fe>
 800a8fc:	2304      	movs	r3, #4
 800a8fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a902:	e01a      	b.n	800a93a <UART_SetConfig+0x2fe>
 800a904:	2308      	movs	r3, #8
 800a906:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a90a:	e016      	b.n	800a93a <UART_SetConfig+0x2fe>
 800a90c:	2310      	movs	r3, #16
 800a90e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a912:	e012      	b.n	800a93a <UART_SetConfig+0x2fe>
 800a914:	cfff69f3 	.word	0xcfff69f3
 800a918:	40008000 	.word	0x40008000
 800a91c:	40013800 	.word	0x40013800
 800a920:	40021000 	.word	0x40021000
 800a924:	40004400 	.word	0x40004400
 800a928:	40004800 	.word	0x40004800
 800a92c:	40004c00 	.word	0x40004c00
 800a930:	40005000 	.word	0x40005000
 800a934:	2310      	movs	r3, #16
 800a936:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a93a:	697b      	ldr	r3, [r7, #20]
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	4aae      	ldr	r2, [pc, #696]	; (800abf8 <UART_SetConfig+0x5bc>)
 800a940:	4293      	cmp	r3, r2
 800a942:	f040 8097 	bne.w	800aa74 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a946:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a94a:	2b08      	cmp	r3, #8
 800a94c:	d823      	bhi.n	800a996 <UART_SetConfig+0x35a>
 800a94e:	a201      	add	r2, pc, #4	; (adr r2, 800a954 <UART_SetConfig+0x318>)
 800a950:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a954:	0800a979 	.word	0x0800a979
 800a958:	0800a997 	.word	0x0800a997
 800a95c:	0800a981 	.word	0x0800a981
 800a960:	0800a997 	.word	0x0800a997
 800a964:	0800a987 	.word	0x0800a987
 800a968:	0800a997 	.word	0x0800a997
 800a96c:	0800a997 	.word	0x0800a997
 800a970:	0800a997 	.word	0x0800a997
 800a974:	0800a98f 	.word	0x0800a98f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a978:	f7fd fa40 	bl	8007dfc <HAL_RCC_GetPCLK1Freq>
 800a97c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800a97e:	e010      	b.n	800a9a2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a980:	4b9e      	ldr	r3, [pc, #632]	; (800abfc <UART_SetConfig+0x5c0>)
 800a982:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800a984:	e00d      	b.n	800a9a2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a986:	f7fd f9cd 	bl	8007d24 <HAL_RCC_GetSysClockFreq>
 800a98a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800a98c:	e009      	b.n	800a9a2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a98e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a992:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800a994:	e005      	b.n	800a9a2 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800a996:	2300      	movs	r3, #0
 800a998:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800a99a:	2301      	movs	r3, #1
 800a99c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800a9a0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a9a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	f000 8130 	beq.w	800ac0a <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a9aa:	697b      	ldr	r3, [r7, #20]
 800a9ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9ae:	4a94      	ldr	r2, [pc, #592]	; (800ac00 <UART_SetConfig+0x5c4>)
 800a9b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a9b4:	461a      	mov	r2, r3
 800a9b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9b8:	fbb3 f3f2 	udiv	r3, r3, r2
 800a9bc:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a9be:	697b      	ldr	r3, [r7, #20]
 800a9c0:	685a      	ldr	r2, [r3, #4]
 800a9c2:	4613      	mov	r3, r2
 800a9c4:	005b      	lsls	r3, r3, #1
 800a9c6:	4413      	add	r3, r2
 800a9c8:	69ba      	ldr	r2, [r7, #24]
 800a9ca:	429a      	cmp	r2, r3
 800a9cc:	d305      	bcc.n	800a9da <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a9ce:	697b      	ldr	r3, [r7, #20]
 800a9d0:	685b      	ldr	r3, [r3, #4]
 800a9d2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a9d4:	69ba      	ldr	r2, [r7, #24]
 800a9d6:	429a      	cmp	r2, r3
 800a9d8:	d903      	bls.n	800a9e2 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800a9da:	2301      	movs	r3, #1
 800a9dc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800a9e0:	e113      	b.n	800ac0a <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a9e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9e4:	2200      	movs	r2, #0
 800a9e6:	60bb      	str	r3, [r7, #8]
 800a9e8:	60fa      	str	r2, [r7, #12]
 800a9ea:	697b      	ldr	r3, [r7, #20]
 800a9ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9ee:	4a84      	ldr	r2, [pc, #528]	; (800ac00 <UART_SetConfig+0x5c4>)
 800a9f0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a9f4:	b29b      	uxth	r3, r3
 800a9f6:	2200      	movs	r2, #0
 800a9f8:	603b      	str	r3, [r7, #0]
 800a9fa:	607a      	str	r2, [r7, #4]
 800a9fc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aa00:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800aa04:	f7f6 f8f8 	bl	8000bf8 <__aeabi_uldivmod>
 800aa08:	4602      	mov	r2, r0
 800aa0a:	460b      	mov	r3, r1
 800aa0c:	4610      	mov	r0, r2
 800aa0e:	4619      	mov	r1, r3
 800aa10:	f04f 0200 	mov.w	r2, #0
 800aa14:	f04f 0300 	mov.w	r3, #0
 800aa18:	020b      	lsls	r3, r1, #8
 800aa1a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800aa1e:	0202      	lsls	r2, r0, #8
 800aa20:	6979      	ldr	r1, [r7, #20]
 800aa22:	6849      	ldr	r1, [r1, #4]
 800aa24:	0849      	lsrs	r1, r1, #1
 800aa26:	2000      	movs	r0, #0
 800aa28:	460c      	mov	r4, r1
 800aa2a:	4605      	mov	r5, r0
 800aa2c:	eb12 0804 	adds.w	r8, r2, r4
 800aa30:	eb43 0905 	adc.w	r9, r3, r5
 800aa34:	697b      	ldr	r3, [r7, #20]
 800aa36:	685b      	ldr	r3, [r3, #4]
 800aa38:	2200      	movs	r2, #0
 800aa3a:	469a      	mov	sl, r3
 800aa3c:	4693      	mov	fp, r2
 800aa3e:	4652      	mov	r2, sl
 800aa40:	465b      	mov	r3, fp
 800aa42:	4640      	mov	r0, r8
 800aa44:	4649      	mov	r1, r9
 800aa46:	f7f6 f8d7 	bl	8000bf8 <__aeabi_uldivmod>
 800aa4a:	4602      	mov	r2, r0
 800aa4c:	460b      	mov	r3, r1
 800aa4e:	4613      	mov	r3, r2
 800aa50:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800aa52:	6a3b      	ldr	r3, [r7, #32]
 800aa54:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800aa58:	d308      	bcc.n	800aa6c <UART_SetConfig+0x430>
 800aa5a:	6a3b      	ldr	r3, [r7, #32]
 800aa5c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800aa60:	d204      	bcs.n	800aa6c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800aa62:	697b      	ldr	r3, [r7, #20]
 800aa64:	681b      	ldr	r3, [r3, #0]
 800aa66:	6a3a      	ldr	r2, [r7, #32]
 800aa68:	60da      	str	r2, [r3, #12]
 800aa6a:	e0ce      	b.n	800ac0a <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800aa6c:	2301      	movs	r3, #1
 800aa6e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800aa72:	e0ca      	b.n	800ac0a <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800aa74:	697b      	ldr	r3, [r7, #20]
 800aa76:	69db      	ldr	r3, [r3, #28]
 800aa78:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800aa7c:	d166      	bne.n	800ab4c <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800aa7e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800aa82:	2b08      	cmp	r3, #8
 800aa84:	d827      	bhi.n	800aad6 <UART_SetConfig+0x49a>
 800aa86:	a201      	add	r2, pc, #4	; (adr r2, 800aa8c <UART_SetConfig+0x450>)
 800aa88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa8c:	0800aab1 	.word	0x0800aab1
 800aa90:	0800aab9 	.word	0x0800aab9
 800aa94:	0800aac1 	.word	0x0800aac1
 800aa98:	0800aad7 	.word	0x0800aad7
 800aa9c:	0800aac7 	.word	0x0800aac7
 800aaa0:	0800aad7 	.word	0x0800aad7
 800aaa4:	0800aad7 	.word	0x0800aad7
 800aaa8:	0800aad7 	.word	0x0800aad7
 800aaac:	0800aacf 	.word	0x0800aacf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800aab0:	f7fd f9a4 	bl	8007dfc <HAL_RCC_GetPCLK1Freq>
 800aab4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800aab6:	e014      	b.n	800aae2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800aab8:	f7fd f9b6 	bl	8007e28 <HAL_RCC_GetPCLK2Freq>
 800aabc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800aabe:	e010      	b.n	800aae2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800aac0:	4b4e      	ldr	r3, [pc, #312]	; (800abfc <UART_SetConfig+0x5c0>)
 800aac2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800aac4:	e00d      	b.n	800aae2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800aac6:	f7fd f92d 	bl	8007d24 <HAL_RCC_GetSysClockFreq>
 800aaca:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800aacc:	e009      	b.n	800aae2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800aace:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800aad2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800aad4:	e005      	b.n	800aae2 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800aad6:	2300      	movs	r3, #0
 800aad8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800aada:	2301      	movs	r3, #1
 800aadc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800aae0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800aae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	f000 8090 	beq.w	800ac0a <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800aaea:	697b      	ldr	r3, [r7, #20]
 800aaec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aaee:	4a44      	ldr	r2, [pc, #272]	; (800ac00 <UART_SetConfig+0x5c4>)
 800aaf0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800aaf4:	461a      	mov	r2, r3
 800aaf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aaf8:	fbb3 f3f2 	udiv	r3, r3, r2
 800aafc:	005a      	lsls	r2, r3, #1
 800aafe:	697b      	ldr	r3, [r7, #20]
 800ab00:	685b      	ldr	r3, [r3, #4]
 800ab02:	085b      	lsrs	r3, r3, #1
 800ab04:	441a      	add	r2, r3
 800ab06:	697b      	ldr	r3, [r7, #20]
 800ab08:	685b      	ldr	r3, [r3, #4]
 800ab0a:	fbb2 f3f3 	udiv	r3, r2, r3
 800ab0e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ab10:	6a3b      	ldr	r3, [r7, #32]
 800ab12:	2b0f      	cmp	r3, #15
 800ab14:	d916      	bls.n	800ab44 <UART_SetConfig+0x508>
 800ab16:	6a3b      	ldr	r3, [r7, #32]
 800ab18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ab1c:	d212      	bcs.n	800ab44 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ab1e:	6a3b      	ldr	r3, [r7, #32]
 800ab20:	b29b      	uxth	r3, r3
 800ab22:	f023 030f 	bic.w	r3, r3, #15
 800ab26:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ab28:	6a3b      	ldr	r3, [r7, #32]
 800ab2a:	085b      	lsrs	r3, r3, #1
 800ab2c:	b29b      	uxth	r3, r3
 800ab2e:	f003 0307 	and.w	r3, r3, #7
 800ab32:	b29a      	uxth	r2, r3
 800ab34:	8bfb      	ldrh	r3, [r7, #30]
 800ab36:	4313      	orrs	r3, r2
 800ab38:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800ab3a:	697b      	ldr	r3, [r7, #20]
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	8bfa      	ldrh	r2, [r7, #30]
 800ab40:	60da      	str	r2, [r3, #12]
 800ab42:	e062      	b.n	800ac0a <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800ab44:	2301      	movs	r3, #1
 800ab46:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800ab4a:	e05e      	b.n	800ac0a <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800ab4c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ab50:	2b08      	cmp	r3, #8
 800ab52:	d828      	bhi.n	800aba6 <UART_SetConfig+0x56a>
 800ab54:	a201      	add	r2, pc, #4	; (adr r2, 800ab5c <UART_SetConfig+0x520>)
 800ab56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab5a:	bf00      	nop
 800ab5c:	0800ab81 	.word	0x0800ab81
 800ab60:	0800ab89 	.word	0x0800ab89
 800ab64:	0800ab91 	.word	0x0800ab91
 800ab68:	0800aba7 	.word	0x0800aba7
 800ab6c:	0800ab97 	.word	0x0800ab97
 800ab70:	0800aba7 	.word	0x0800aba7
 800ab74:	0800aba7 	.word	0x0800aba7
 800ab78:	0800aba7 	.word	0x0800aba7
 800ab7c:	0800ab9f 	.word	0x0800ab9f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ab80:	f7fd f93c 	bl	8007dfc <HAL_RCC_GetPCLK1Freq>
 800ab84:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800ab86:	e014      	b.n	800abb2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ab88:	f7fd f94e 	bl	8007e28 <HAL_RCC_GetPCLK2Freq>
 800ab8c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800ab8e:	e010      	b.n	800abb2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ab90:	4b1a      	ldr	r3, [pc, #104]	; (800abfc <UART_SetConfig+0x5c0>)
 800ab92:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800ab94:	e00d      	b.n	800abb2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ab96:	f7fd f8c5 	bl	8007d24 <HAL_RCC_GetSysClockFreq>
 800ab9a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800ab9c:	e009      	b.n	800abb2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ab9e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800aba2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800aba4:	e005      	b.n	800abb2 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800aba6:	2300      	movs	r3, #0
 800aba8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800abaa:	2301      	movs	r3, #1
 800abac:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800abb0:	bf00      	nop
    }

    if (pclk != 0U)
 800abb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	d028      	beq.n	800ac0a <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800abb8:	697b      	ldr	r3, [r7, #20]
 800abba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abbc:	4a10      	ldr	r2, [pc, #64]	; (800ac00 <UART_SetConfig+0x5c4>)
 800abbe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800abc2:	461a      	mov	r2, r3
 800abc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abc6:	fbb3 f2f2 	udiv	r2, r3, r2
 800abca:	697b      	ldr	r3, [r7, #20]
 800abcc:	685b      	ldr	r3, [r3, #4]
 800abce:	085b      	lsrs	r3, r3, #1
 800abd0:	441a      	add	r2, r3
 800abd2:	697b      	ldr	r3, [r7, #20]
 800abd4:	685b      	ldr	r3, [r3, #4]
 800abd6:	fbb2 f3f3 	udiv	r3, r2, r3
 800abda:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800abdc:	6a3b      	ldr	r3, [r7, #32]
 800abde:	2b0f      	cmp	r3, #15
 800abe0:	d910      	bls.n	800ac04 <UART_SetConfig+0x5c8>
 800abe2:	6a3b      	ldr	r3, [r7, #32]
 800abe4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800abe8:	d20c      	bcs.n	800ac04 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800abea:	6a3b      	ldr	r3, [r7, #32]
 800abec:	b29a      	uxth	r2, r3
 800abee:	697b      	ldr	r3, [r7, #20]
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	60da      	str	r2, [r3, #12]
 800abf4:	e009      	b.n	800ac0a <UART_SetConfig+0x5ce>
 800abf6:	bf00      	nop
 800abf8:	40008000 	.word	0x40008000
 800abfc:	00f42400 	.word	0x00f42400
 800ac00:	08014a9c 	.word	0x08014a9c
      }
      else
      {
        ret = HAL_ERROR;
 800ac04:	2301      	movs	r3, #1
 800ac06:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800ac0a:	697b      	ldr	r3, [r7, #20]
 800ac0c:	2201      	movs	r2, #1
 800ac0e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800ac12:	697b      	ldr	r3, [r7, #20]
 800ac14:	2201      	movs	r2, #1
 800ac16:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800ac1a:	697b      	ldr	r3, [r7, #20]
 800ac1c:	2200      	movs	r2, #0
 800ac1e:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800ac20:	697b      	ldr	r3, [r7, #20]
 800ac22:	2200      	movs	r2, #0
 800ac24:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800ac26:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800ac2a:	4618      	mov	r0, r3
 800ac2c:	3730      	adds	r7, #48	; 0x30
 800ac2e:	46bd      	mov	sp, r7
 800ac30:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800ac34 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800ac34:	b480      	push	{r7}
 800ac36:	b083      	sub	sp, #12
 800ac38:	af00      	add	r7, sp, #0
 800ac3a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac40:	f003 0301 	and.w	r3, r3, #1
 800ac44:	2b00      	cmp	r3, #0
 800ac46:	d00a      	beq.n	800ac5e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	685b      	ldr	r3, [r3, #4]
 800ac4e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	681b      	ldr	r3, [r3, #0]
 800ac5a:	430a      	orrs	r2, r1
 800ac5c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac62:	f003 0302 	and.w	r3, r3, #2
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	d00a      	beq.n	800ac80 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	685b      	ldr	r3, [r3, #4]
 800ac70:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	430a      	orrs	r2, r1
 800ac7e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac84:	f003 0304 	and.w	r3, r3, #4
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	d00a      	beq.n	800aca2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	685b      	ldr	r3, [r3, #4]
 800ac92:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	430a      	orrs	r2, r1
 800aca0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aca6:	f003 0308 	and.w	r3, r3, #8
 800acaa:	2b00      	cmp	r3, #0
 800acac:	d00a      	beq.n	800acc4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	685b      	ldr	r3, [r3, #4]
 800acb4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	681b      	ldr	r3, [r3, #0]
 800acc0:	430a      	orrs	r2, r1
 800acc2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800acc8:	f003 0310 	and.w	r3, r3, #16
 800accc:	2b00      	cmp	r3, #0
 800acce:	d00a      	beq.n	800ace6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	681b      	ldr	r3, [r3, #0]
 800acd4:	689b      	ldr	r3, [r3, #8]
 800acd6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	430a      	orrs	r2, r1
 800ace4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800acea:	f003 0320 	and.w	r3, r3, #32
 800acee:	2b00      	cmp	r3, #0
 800acf0:	d00a      	beq.n	800ad08 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	681b      	ldr	r3, [r3, #0]
 800acf6:	689b      	ldr	r3, [r3, #8]
 800acf8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	430a      	orrs	r2, r1
 800ad06:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	d01a      	beq.n	800ad4a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	685b      	ldr	r3, [r3, #4]
 800ad1a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	430a      	orrs	r2, r1
 800ad28:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ad2e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ad32:	d10a      	bne.n	800ad4a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	685b      	ldr	r3, [r3, #4]
 800ad3a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	430a      	orrs	r2, r1
 800ad48:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	d00a      	beq.n	800ad6c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	685b      	ldr	r3, [r3, #4]
 800ad5c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	681b      	ldr	r3, [r3, #0]
 800ad68:	430a      	orrs	r2, r1
 800ad6a:	605a      	str	r2, [r3, #4]
  }
}
 800ad6c:	bf00      	nop
 800ad6e:	370c      	adds	r7, #12
 800ad70:	46bd      	mov	sp, r7
 800ad72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad76:	4770      	bx	lr

0800ad78 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800ad78:	b580      	push	{r7, lr}
 800ad7a:	b086      	sub	sp, #24
 800ad7c:	af02      	add	r7, sp, #8
 800ad7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	2200      	movs	r2, #0
 800ad84:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800ad88:	f7f8 fb58 	bl	800343c <HAL_GetTick>
 800ad8c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	f003 0308 	and.w	r3, r3, #8
 800ad98:	2b08      	cmp	r3, #8
 800ad9a:	d10e      	bne.n	800adba <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ad9c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ada0:	9300      	str	r3, [sp, #0]
 800ada2:	68fb      	ldr	r3, [r7, #12]
 800ada4:	2200      	movs	r2, #0
 800ada6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800adaa:	6878      	ldr	r0, [r7, #4]
 800adac:	f000 f82f 	bl	800ae0e <UART_WaitOnFlagUntilTimeout>
 800adb0:	4603      	mov	r3, r0
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	d001      	beq.n	800adba <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800adb6:	2303      	movs	r3, #3
 800adb8:	e025      	b.n	800ae06 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	681b      	ldr	r3, [r3, #0]
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	f003 0304 	and.w	r3, r3, #4
 800adc4:	2b04      	cmp	r3, #4
 800adc6:	d10e      	bne.n	800ade6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800adc8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800adcc:	9300      	str	r3, [sp, #0]
 800adce:	68fb      	ldr	r3, [r7, #12]
 800add0:	2200      	movs	r2, #0
 800add2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800add6:	6878      	ldr	r0, [r7, #4]
 800add8:	f000 f819 	bl	800ae0e <UART_WaitOnFlagUntilTimeout>
 800addc:	4603      	mov	r3, r0
 800adde:	2b00      	cmp	r3, #0
 800ade0:	d001      	beq.n	800ade6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ade2:	2303      	movs	r3, #3
 800ade4:	e00f      	b.n	800ae06 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	2220      	movs	r2, #32
 800adea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	2220      	movs	r2, #32
 800adf2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	2200      	movs	r2, #0
 800adfa:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	2200      	movs	r2, #0
 800ae00:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ae04:	2300      	movs	r3, #0
}
 800ae06:	4618      	mov	r0, r3
 800ae08:	3710      	adds	r7, #16
 800ae0a:	46bd      	mov	sp, r7
 800ae0c:	bd80      	pop	{r7, pc}

0800ae0e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ae0e:	b580      	push	{r7, lr}
 800ae10:	b09c      	sub	sp, #112	; 0x70
 800ae12:	af00      	add	r7, sp, #0
 800ae14:	60f8      	str	r0, [r7, #12]
 800ae16:	60b9      	str	r1, [r7, #8]
 800ae18:	603b      	str	r3, [r7, #0]
 800ae1a:	4613      	mov	r3, r2
 800ae1c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ae1e:	e0a9      	b.n	800af74 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ae20:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ae22:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ae26:	f000 80a5 	beq.w	800af74 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ae2a:	f7f8 fb07 	bl	800343c <HAL_GetTick>
 800ae2e:	4602      	mov	r2, r0
 800ae30:	683b      	ldr	r3, [r7, #0]
 800ae32:	1ad3      	subs	r3, r2, r3
 800ae34:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800ae36:	429a      	cmp	r2, r3
 800ae38:	d302      	bcc.n	800ae40 <UART_WaitOnFlagUntilTimeout+0x32>
 800ae3a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	d140      	bne.n	800aec2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800ae40:	68fb      	ldr	r3, [r7, #12]
 800ae42:	681b      	ldr	r3, [r3, #0]
 800ae44:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ae48:	e853 3f00 	ldrex	r3, [r3]
 800ae4c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800ae4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ae50:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800ae54:	667b      	str	r3, [r7, #100]	; 0x64
 800ae56:	68fb      	ldr	r3, [r7, #12]
 800ae58:	681b      	ldr	r3, [r3, #0]
 800ae5a:	461a      	mov	r2, r3
 800ae5c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ae5e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ae60:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae62:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800ae64:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800ae66:	e841 2300 	strex	r3, r2, [r1]
 800ae6a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800ae6c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ae6e:	2b00      	cmp	r3, #0
 800ae70:	d1e6      	bne.n	800ae40 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ae72:	68fb      	ldr	r3, [r7, #12]
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	3308      	adds	r3, #8
 800ae78:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ae7c:	e853 3f00 	ldrex	r3, [r3]
 800ae80:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ae82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae84:	f023 0301 	bic.w	r3, r3, #1
 800ae88:	663b      	str	r3, [r7, #96]	; 0x60
 800ae8a:	68fb      	ldr	r3, [r7, #12]
 800ae8c:	681b      	ldr	r3, [r3, #0]
 800ae8e:	3308      	adds	r3, #8
 800ae90:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ae92:	64ba      	str	r2, [r7, #72]	; 0x48
 800ae94:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae96:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ae98:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ae9a:	e841 2300 	strex	r3, r2, [r1]
 800ae9e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800aea0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	d1e5      	bne.n	800ae72 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800aea6:	68fb      	ldr	r3, [r7, #12]
 800aea8:	2220      	movs	r2, #32
 800aeaa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800aeae:	68fb      	ldr	r3, [r7, #12]
 800aeb0:	2220      	movs	r2, #32
 800aeb2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800aeb6:	68fb      	ldr	r3, [r7, #12]
 800aeb8:	2200      	movs	r2, #0
 800aeba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800aebe:	2303      	movs	r3, #3
 800aec0:	e069      	b.n	800af96 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800aec2:	68fb      	ldr	r3, [r7, #12]
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	681b      	ldr	r3, [r3, #0]
 800aec8:	f003 0304 	and.w	r3, r3, #4
 800aecc:	2b00      	cmp	r3, #0
 800aece:	d051      	beq.n	800af74 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800aed0:	68fb      	ldr	r3, [r7, #12]
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	69db      	ldr	r3, [r3, #28]
 800aed6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800aeda:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800aede:	d149      	bne.n	800af74 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800aee0:	68fb      	ldr	r3, [r7, #12]
 800aee2:	681b      	ldr	r3, [r3, #0]
 800aee4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800aee8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800aeea:	68fb      	ldr	r3, [r7, #12]
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aef0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aef2:	e853 3f00 	ldrex	r3, [r3]
 800aef6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800aef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aefa:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800aefe:	66fb      	str	r3, [r7, #108]	; 0x6c
 800af00:	68fb      	ldr	r3, [r7, #12]
 800af02:	681b      	ldr	r3, [r3, #0]
 800af04:	461a      	mov	r2, r3
 800af06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800af08:	637b      	str	r3, [r7, #52]	; 0x34
 800af0a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af0c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800af0e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800af10:	e841 2300 	strex	r3, r2, [r1]
 800af14:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800af16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af18:	2b00      	cmp	r3, #0
 800af1a:	d1e6      	bne.n	800aeea <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800af1c:	68fb      	ldr	r3, [r7, #12]
 800af1e:	681b      	ldr	r3, [r3, #0]
 800af20:	3308      	adds	r3, #8
 800af22:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af24:	697b      	ldr	r3, [r7, #20]
 800af26:	e853 3f00 	ldrex	r3, [r3]
 800af2a:	613b      	str	r3, [r7, #16]
   return(result);
 800af2c:	693b      	ldr	r3, [r7, #16]
 800af2e:	f023 0301 	bic.w	r3, r3, #1
 800af32:	66bb      	str	r3, [r7, #104]	; 0x68
 800af34:	68fb      	ldr	r3, [r7, #12]
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	3308      	adds	r3, #8
 800af3a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800af3c:	623a      	str	r2, [r7, #32]
 800af3e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af40:	69f9      	ldr	r1, [r7, #28]
 800af42:	6a3a      	ldr	r2, [r7, #32]
 800af44:	e841 2300 	strex	r3, r2, [r1]
 800af48:	61bb      	str	r3, [r7, #24]
   return(result);
 800af4a:	69bb      	ldr	r3, [r7, #24]
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	d1e5      	bne.n	800af1c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800af50:	68fb      	ldr	r3, [r7, #12]
 800af52:	2220      	movs	r2, #32
 800af54:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800af58:	68fb      	ldr	r3, [r7, #12]
 800af5a:	2220      	movs	r2, #32
 800af5c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800af60:	68fb      	ldr	r3, [r7, #12]
 800af62:	2220      	movs	r2, #32
 800af64:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800af68:	68fb      	ldr	r3, [r7, #12]
 800af6a:	2200      	movs	r2, #0
 800af6c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800af70:	2303      	movs	r3, #3
 800af72:	e010      	b.n	800af96 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800af74:	68fb      	ldr	r3, [r7, #12]
 800af76:	681b      	ldr	r3, [r3, #0]
 800af78:	69da      	ldr	r2, [r3, #28]
 800af7a:	68bb      	ldr	r3, [r7, #8]
 800af7c:	4013      	ands	r3, r2
 800af7e:	68ba      	ldr	r2, [r7, #8]
 800af80:	429a      	cmp	r2, r3
 800af82:	bf0c      	ite	eq
 800af84:	2301      	moveq	r3, #1
 800af86:	2300      	movne	r3, #0
 800af88:	b2db      	uxtb	r3, r3
 800af8a:	461a      	mov	r2, r3
 800af8c:	79fb      	ldrb	r3, [r7, #7]
 800af8e:	429a      	cmp	r2, r3
 800af90:	f43f af46 	beq.w	800ae20 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800af94:	2300      	movs	r3, #0
}
 800af96:	4618      	mov	r0, r3
 800af98:	3770      	adds	r7, #112	; 0x70
 800af9a:	46bd      	mov	sp, r7
 800af9c:	bd80      	pop	{r7, pc}

0800af9e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800af9e:	b480      	push	{r7}
 800afa0:	b085      	sub	sp, #20
 800afa2:	af00      	add	r7, sp, #0
 800afa4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800afac:	2b01      	cmp	r3, #1
 800afae:	d101      	bne.n	800afb4 <HAL_UARTEx_DisableFifoMode+0x16>
 800afb0:	2302      	movs	r3, #2
 800afb2:	e027      	b.n	800b004 <HAL_UARTEx_DisableFifoMode+0x66>
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	2201      	movs	r2, #1
 800afb8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	2224      	movs	r2, #36	; 0x24
 800afc0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	681b      	ldr	r3, [r3, #0]
 800afc8:	681b      	ldr	r3, [r3, #0]
 800afca:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	681a      	ldr	r2, [r3, #0]
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	f022 0201 	bic.w	r2, r2, #1
 800afda:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800afdc:	68fb      	ldr	r3, [r7, #12]
 800afde:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800afe2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	2200      	movs	r2, #0
 800afe8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	681b      	ldr	r3, [r3, #0]
 800afee:	68fa      	ldr	r2, [r7, #12]
 800aff0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	2220      	movs	r2, #32
 800aff6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	2200      	movs	r2, #0
 800affe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b002:	2300      	movs	r3, #0
}
 800b004:	4618      	mov	r0, r3
 800b006:	3714      	adds	r7, #20
 800b008:	46bd      	mov	sp, r7
 800b00a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b00e:	4770      	bx	lr

0800b010 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b010:	b580      	push	{r7, lr}
 800b012:	b084      	sub	sp, #16
 800b014:	af00      	add	r7, sp, #0
 800b016:	6078      	str	r0, [r7, #4]
 800b018:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b020:	2b01      	cmp	r3, #1
 800b022:	d101      	bne.n	800b028 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b024:	2302      	movs	r3, #2
 800b026:	e02d      	b.n	800b084 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	2201      	movs	r2, #1
 800b02c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	2224      	movs	r2, #36	; 0x24
 800b034:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	681b      	ldr	r3, [r3, #0]
 800b03e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	681b      	ldr	r3, [r3, #0]
 800b044:	681a      	ldr	r2, [r3, #0]
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	f022 0201 	bic.w	r2, r2, #1
 800b04e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	681b      	ldr	r3, [r3, #0]
 800b054:	689b      	ldr	r3, [r3, #8]
 800b056:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	681b      	ldr	r3, [r3, #0]
 800b05e:	683a      	ldr	r2, [r7, #0]
 800b060:	430a      	orrs	r2, r1
 800b062:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b064:	6878      	ldr	r0, [r7, #4]
 800b066:	f000 f84f 	bl	800b108 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	681b      	ldr	r3, [r3, #0]
 800b06e:	68fa      	ldr	r2, [r7, #12]
 800b070:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	2220      	movs	r2, #32
 800b076:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	2200      	movs	r2, #0
 800b07e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b082:	2300      	movs	r3, #0
}
 800b084:	4618      	mov	r0, r3
 800b086:	3710      	adds	r7, #16
 800b088:	46bd      	mov	sp, r7
 800b08a:	bd80      	pop	{r7, pc}

0800b08c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b08c:	b580      	push	{r7, lr}
 800b08e:	b084      	sub	sp, #16
 800b090:	af00      	add	r7, sp, #0
 800b092:	6078      	str	r0, [r7, #4]
 800b094:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b09c:	2b01      	cmp	r3, #1
 800b09e:	d101      	bne.n	800b0a4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b0a0:	2302      	movs	r3, #2
 800b0a2:	e02d      	b.n	800b100 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	2201      	movs	r2, #1
 800b0a8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	2224      	movs	r2, #36	; 0x24
 800b0b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	681b      	ldr	r3, [r3, #0]
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	681b      	ldr	r3, [r3, #0]
 800b0c0:	681a      	ldr	r2, [r3, #0]
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	681b      	ldr	r3, [r3, #0]
 800b0c6:	f022 0201 	bic.w	r2, r2, #1
 800b0ca:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	689b      	ldr	r3, [r3, #8]
 800b0d2:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	681b      	ldr	r3, [r3, #0]
 800b0da:	683a      	ldr	r2, [r7, #0]
 800b0dc:	430a      	orrs	r2, r1
 800b0de:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b0e0:	6878      	ldr	r0, [r7, #4]
 800b0e2:	f000 f811 	bl	800b108 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	681b      	ldr	r3, [r3, #0]
 800b0ea:	68fa      	ldr	r2, [r7, #12]
 800b0ec:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	2220      	movs	r2, #32
 800b0f2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	2200      	movs	r2, #0
 800b0fa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b0fe:	2300      	movs	r3, #0
}
 800b100:	4618      	mov	r0, r3
 800b102:	3710      	adds	r7, #16
 800b104:	46bd      	mov	sp, r7
 800b106:	bd80      	pop	{r7, pc}

0800b108 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b108:	b480      	push	{r7}
 800b10a:	b085      	sub	sp, #20
 800b10c:	af00      	add	r7, sp, #0
 800b10e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b114:	2b00      	cmp	r3, #0
 800b116:	d108      	bne.n	800b12a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	2201      	movs	r2, #1
 800b11c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	2201      	movs	r2, #1
 800b124:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b128:	e031      	b.n	800b18e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b12a:	2308      	movs	r3, #8
 800b12c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b12e:	2308      	movs	r3, #8
 800b130:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	681b      	ldr	r3, [r3, #0]
 800b136:	689b      	ldr	r3, [r3, #8]
 800b138:	0e5b      	lsrs	r3, r3, #25
 800b13a:	b2db      	uxtb	r3, r3
 800b13c:	f003 0307 	and.w	r3, r3, #7
 800b140:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	681b      	ldr	r3, [r3, #0]
 800b146:	689b      	ldr	r3, [r3, #8]
 800b148:	0f5b      	lsrs	r3, r3, #29
 800b14a:	b2db      	uxtb	r3, r3
 800b14c:	f003 0307 	and.w	r3, r3, #7
 800b150:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b152:	7bbb      	ldrb	r3, [r7, #14]
 800b154:	7b3a      	ldrb	r2, [r7, #12]
 800b156:	4911      	ldr	r1, [pc, #68]	; (800b19c <UARTEx_SetNbDataToProcess+0x94>)
 800b158:	5c8a      	ldrb	r2, [r1, r2]
 800b15a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b15e:	7b3a      	ldrb	r2, [r7, #12]
 800b160:	490f      	ldr	r1, [pc, #60]	; (800b1a0 <UARTEx_SetNbDataToProcess+0x98>)
 800b162:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b164:	fb93 f3f2 	sdiv	r3, r3, r2
 800b168:	b29a      	uxth	r2, r3
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b170:	7bfb      	ldrb	r3, [r7, #15]
 800b172:	7b7a      	ldrb	r2, [r7, #13]
 800b174:	4909      	ldr	r1, [pc, #36]	; (800b19c <UARTEx_SetNbDataToProcess+0x94>)
 800b176:	5c8a      	ldrb	r2, [r1, r2]
 800b178:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b17c:	7b7a      	ldrb	r2, [r7, #13]
 800b17e:	4908      	ldr	r1, [pc, #32]	; (800b1a0 <UARTEx_SetNbDataToProcess+0x98>)
 800b180:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b182:	fb93 f3f2 	sdiv	r3, r3, r2
 800b186:	b29a      	uxth	r2, r3
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800b18e:	bf00      	nop
 800b190:	3714      	adds	r7, #20
 800b192:	46bd      	mov	sp, r7
 800b194:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b198:	4770      	bx	lr
 800b19a:	bf00      	nop
 800b19c:	08014ab4 	.word	0x08014ab4
 800b1a0:	08014abc 	.word	0x08014abc

0800b1a4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800b1a4:	b480      	push	{r7}
 800b1a6:	b085      	sub	sp, #20
 800b1a8:	af00      	add	r7, sp, #0
 800b1aa:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	2200      	movs	r2, #0
 800b1b0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800b1b4:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800b1b8:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800b1ba:	68fb      	ldr	r3, [r7, #12]
 800b1bc:	b29a      	uxth	r2, r3
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800b1c4:	2300      	movs	r3, #0
}
 800b1c6:	4618      	mov	r0, r3
 800b1c8:	3714      	adds	r7, #20
 800b1ca:	46bd      	mov	sp, r7
 800b1cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1d0:	4770      	bx	lr

0800b1d2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800b1d2:	b480      	push	{r7}
 800b1d4:	b085      	sub	sp, #20
 800b1d6:	af00      	add	r7, sp, #0
 800b1d8:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800b1da:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800b1de:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800b1e6:	b29a      	uxth	r2, r3
 800b1e8:	68fb      	ldr	r3, [r7, #12]
 800b1ea:	b29b      	uxth	r3, r3
 800b1ec:	43db      	mvns	r3, r3
 800b1ee:	b29b      	uxth	r3, r3
 800b1f0:	4013      	ands	r3, r2
 800b1f2:	b29a      	uxth	r2, r3
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800b1fa:	2300      	movs	r3, #0
}
 800b1fc:	4618      	mov	r0, r3
 800b1fe:	3714      	adds	r7, #20
 800b200:	46bd      	mov	sp, r7
 800b202:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b206:	4770      	bx	lr

0800b208 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800b208:	b084      	sub	sp, #16
 800b20a:	b480      	push	{r7}
 800b20c:	b083      	sub	sp, #12
 800b20e:	af00      	add	r7, sp, #0
 800b210:	6078      	str	r0, [r7, #4]
 800b212:	f107 0014 	add.w	r0, r7, #20
 800b216:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	2201      	movs	r2, #1
 800b21e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	2200      	movs	r2, #0
 800b226:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	2200      	movs	r2, #0
 800b22e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	2200      	movs	r2, #0
 800b236:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800b23a:	2300      	movs	r3, #0
}
 800b23c:	4618      	mov	r0, r3
 800b23e:	370c      	adds	r7, #12
 800b240:	46bd      	mov	sp, r7
 800b242:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b246:	b004      	add	sp, #16
 800b248:	4770      	bx	lr
	...

0800b24c <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800b24c:	b480      	push	{r7}
 800b24e:	b09d      	sub	sp, #116	; 0x74
 800b250:	af00      	add	r7, sp, #0
 800b252:	6078      	str	r0, [r7, #4]
 800b254:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800b256:	2300      	movs	r3, #0
 800b258:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800b25c:	687a      	ldr	r2, [r7, #4]
 800b25e:	683b      	ldr	r3, [r7, #0]
 800b260:	781b      	ldrb	r3, [r3, #0]
 800b262:	009b      	lsls	r3, r3, #2
 800b264:	4413      	add	r3, r2
 800b266:	881b      	ldrh	r3, [r3, #0]
 800b268:	b29b      	uxth	r3, r3
 800b26a:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800b26e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b272:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800b276:	683b      	ldr	r3, [r7, #0]
 800b278:	78db      	ldrb	r3, [r3, #3]
 800b27a:	2b03      	cmp	r3, #3
 800b27c:	d81f      	bhi.n	800b2be <USB_ActivateEndpoint+0x72>
 800b27e:	a201      	add	r2, pc, #4	; (adr r2, 800b284 <USB_ActivateEndpoint+0x38>)
 800b280:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b284:	0800b295 	.word	0x0800b295
 800b288:	0800b2b1 	.word	0x0800b2b1
 800b28c:	0800b2c7 	.word	0x0800b2c7
 800b290:	0800b2a3 	.word	0x0800b2a3
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800b294:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800b298:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b29c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800b2a0:	e012      	b.n	800b2c8 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800b2a2:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800b2a6:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800b2aa:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800b2ae:	e00b      	b.n	800b2c8 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800b2b0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800b2b4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800b2b8:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800b2bc:	e004      	b.n	800b2c8 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800b2be:	2301      	movs	r3, #1
 800b2c0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 800b2c4:	e000      	b.n	800b2c8 <USB_ActivateEndpoint+0x7c>
      break;
 800b2c6:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800b2c8:	687a      	ldr	r2, [r7, #4]
 800b2ca:	683b      	ldr	r3, [r7, #0]
 800b2cc:	781b      	ldrb	r3, [r3, #0]
 800b2ce:	009b      	lsls	r3, r3, #2
 800b2d0:	441a      	add	r2, r3
 800b2d2:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800b2d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b2da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b2de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b2e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b2e6:	b29b      	uxth	r3, r3
 800b2e8:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800b2ea:	687a      	ldr	r2, [r7, #4]
 800b2ec:	683b      	ldr	r3, [r7, #0]
 800b2ee:	781b      	ldrb	r3, [r3, #0]
 800b2f0:	009b      	lsls	r3, r3, #2
 800b2f2:	4413      	add	r3, r2
 800b2f4:	881b      	ldrh	r3, [r3, #0]
 800b2f6:	b29b      	uxth	r3, r3
 800b2f8:	b21b      	sxth	r3, r3
 800b2fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b2fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b302:	b21a      	sxth	r2, r3
 800b304:	683b      	ldr	r3, [r7, #0]
 800b306:	781b      	ldrb	r3, [r3, #0]
 800b308:	b21b      	sxth	r3, r3
 800b30a:	4313      	orrs	r3, r2
 800b30c:	b21b      	sxth	r3, r3
 800b30e:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 800b312:	687a      	ldr	r2, [r7, #4]
 800b314:	683b      	ldr	r3, [r7, #0]
 800b316:	781b      	ldrb	r3, [r3, #0]
 800b318:	009b      	lsls	r3, r3, #2
 800b31a:	441a      	add	r2, r3
 800b31c:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800b320:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b324:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b328:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b32c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b330:	b29b      	uxth	r3, r3
 800b332:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800b334:	683b      	ldr	r3, [r7, #0]
 800b336:	7b1b      	ldrb	r3, [r3, #12]
 800b338:	2b00      	cmp	r3, #0
 800b33a:	f040 8149 	bne.w	800b5d0 <USB_ActivateEndpoint+0x384>
  {
    if (ep->is_in != 0U)
 800b33e:	683b      	ldr	r3, [r7, #0]
 800b340:	785b      	ldrb	r3, [r3, #1]
 800b342:	2b00      	cmp	r3, #0
 800b344:	f000 8084 	beq.w	800b450 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	61bb      	str	r3, [r7, #24]
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b352:	b29b      	uxth	r3, r3
 800b354:	461a      	mov	r2, r3
 800b356:	69bb      	ldr	r3, [r7, #24]
 800b358:	4413      	add	r3, r2
 800b35a:	61bb      	str	r3, [r7, #24]
 800b35c:	683b      	ldr	r3, [r7, #0]
 800b35e:	781b      	ldrb	r3, [r3, #0]
 800b360:	00da      	lsls	r2, r3, #3
 800b362:	69bb      	ldr	r3, [r7, #24]
 800b364:	4413      	add	r3, r2
 800b366:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b36a:	617b      	str	r3, [r7, #20]
 800b36c:	683b      	ldr	r3, [r7, #0]
 800b36e:	88db      	ldrh	r3, [r3, #6]
 800b370:	085b      	lsrs	r3, r3, #1
 800b372:	b29b      	uxth	r3, r3
 800b374:	005b      	lsls	r3, r3, #1
 800b376:	b29a      	uxth	r2, r3
 800b378:	697b      	ldr	r3, [r7, #20]
 800b37a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b37c:	687a      	ldr	r2, [r7, #4]
 800b37e:	683b      	ldr	r3, [r7, #0]
 800b380:	781b      	ldrb	r3, [r3, #0]
 800b382:	009b      	lsls	r3, r3, #2
 800b384:	4413      	add	r3, r2
 800b386:	881b      	ldrh	r3, [r3, #0]
 800b388:	827b      	strh	r3, [r7, #18]
 800b38a:	8a7b      	ldrh	r3, [r7, #18]
 800b38c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b390:	2b00      	cmp	r3, #0
 800b392:	d01b      	beq.n	800b3cc <USB_ActivateEndpoint+0x180>
 800b394:	687a      	ldr	r2, [r7, #4]
 800b396:	683b      	ldr	r3, [r7, #0]
 800b398:	781b      	ldrb	r3, [r3, #0]
 800b39a:	009b      	lsls	r3, r3, #2
 800b39c:	4413      	add	r3, r2
 800b39e:	881b      	ldrh	r3, [r3, #0]
 800b3a0:	b29b      	uxth	r3, r3
 800b3a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b3a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b3aa:	823b      	strh	r3, [r7, #16]
 800b3ac:	687a      	ldr	r2, [r7, #4]
 800b3ae:	683b      	ldr	r3, [r7, #0]
 800b3b0:	781b      	ldrb	r3, [r3, #0]
 800b3b2:	009b      	lsls	r3, r3, #2
 800b3b4:	441a      	add	r2, r3
 800b3b6:	8a3b      	ldrh	r3, [r7, #16]
 800b3b8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b3bc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b3c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b3c4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800b3c8:	b29b      	uxth	r3, r3
 800b3ca:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800b3cc:	683b      	ldr	r3, [r7, #0]
 800b3ce:	78db      	ldrb	r3, [r3, #3]
 800b3d0:	2b01      	cmp	r3, #1
 800b3d2:	d020      	beq.n	800b416 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800b3d4:	687a      	ldr	r2, [r7, #4]
 800b3d6:	683b      	ldr	r3, [r7, #0]
 800b3d8:	781b      	ldrb	r3, [r3, #0]
 800b3da:	009b      	lsls	r3, r3, #2
 800b3dc:	4413      	add	r3, r2
 800b3de:	881b      	ldrh	r3, [r3, #0]
 800b3e0:	b29b      	uxth	r3, r3
 800b3e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b3e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b3ea:	81bb      	strh	r3, [r7, #12]
 800b3ec:	89bb      	ldrh	r3, [r7, #12]
 800b3ee:	f083 0320 	eor.w	r3, r3, #32
 800b3f2:	81bb      	strh	r3, [r7, #12]
 800b3f4:	687a      	ldr	r2, [r7, #4]
 800b3f6:	683b      	ldr	r3, [r7, #0]
 800b3f8:	781b      	ldrb	r3, [r3, #0]
 800b3fa:	009b      	lsls	r3, r3, #2
 800b3fc:	441a      	add	r2, r3
 800b3fe:	89bb      	ldrh	r3, [r7, #12]
 800b400:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b404:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b408:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b40c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b410:	b29b      	uxth	r3, r3
 800b412:	8013      	strh	r3, [r2, #0]
 800b414:	e2a6      	b.n	800b964 <USB_ActivateEndpoint+0x718>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800b416:	687a      	ldr	r2, [r7, #4]
 800b418:	683b      	ldr	r3, [r7, #0]
 800b41a:	781b      	ldrb	r3, [r3, #0]
 800b41c:	009b      	lsls	r3, r3, #2
 800b41e:	4413      	add	r3, r2
 800b420:	881b      	ldrh	r3, [r3, #0]
 800b422:	b29b      	uxth	r3, r3
 800b424:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b428:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b42c:	81fb      	strh	r3, [r7, #14]
 800b42e:	687a      	ldr	r2, [r7, #4]
 800b430:	683b      	ldr	r3, [r7, #0]
 800b432:	781b      	ldrb	r3, [r3, #0]
 800b434:	009b      	lsls	r3, r3, #2
 800b436:	441a      	add	r2, r3
 800b438:	89fb      	ldrh	r3, [r7, #14]
 800b43a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b43e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b442:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b446:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b44a:	b29b      	uxth	r3, r3
 800b44c:	8013      	strh	r3, [r2, #0]
 800b44e:	e289      	b.n	800b964 <USB_ActivateEndpoint+0x718>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	633b      	str	r3, [r7, #48]	; 0x30
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b45a:	b29b      	uxth	r3, r3
 800b45c:	461a      	mov	r2, r3
 800b45e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b460:	4413      	add	r3, r2
 800b462:	633b      	str	r3, [r7, #48]	; 0x30
 800b464:	683b      	ldr	r3, [r7, #0]
 800b466:	781b      	ldrb	r3, [r3, #0]
 800b468:	00da      	lsls	r2, r3, #3
 800b46a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b46c:	4413      	add	r3, r2
 800b46e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800b472:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b474:	683b      	ldr	r3, [r7, #0]
 800b476:	88db      	ldrh	r3, [r3, #6]
 800b478:	085b      	lsrs	r3, r3, #1
 800b47a:	b29b      	uxth	r3, r3
 800b47c:	005b      	lsls	r3, r3, #1
 800b47e:	b29a      	uxth	r2, r3
 800b480:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b482:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	62bb      	str	r3, [r7, #40]	; 0x28
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b48e:	b29b      	uxth	r3, r3
 800b490:	461a      	mov	r2, r3
 800b492:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b494:	4413      	add	r3, r2
 800b496:	62bb      	str	r3, [r7, #40]	; 0x28
 800b498:	683b      	ldr	r3, [r7, #0]
 800b49a:	781b      	ldrb	r3, [r3, #0]
 800b49c:	00da      	lsls	r2, r3, #3
 800b49e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4a0:	4413      	add	r3, r2
 800b4a2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b4a6:	627b      	str	r3, [r7, #36]	; 0x24
 800b4a8:	683b      	ldr	r3, [r7, #0]
 800b4aa:	691b      	ldr	r3, [r3, #16]
 800b4ac:	2b3e      	cmp	r3, #62	; 0x3e
 800b4ae:	d918      	bls.n	800b4e2 <USB_ActivateEndpoint+0x296>
 800b4b0:	683b      	ldr	r3, [r7, #0]
 800b4b2:	691b      	ldr	r3, [r3, #16]
 800b4b4:	095b      	lsrs	r3, r3, #5
 800b4b6:	66bb      	str	r3, [r7, #104]	; 0x68
 800b4b8:	683b      	ldr	r3, [r7, #0]
 800b4ba:	691b      	ldr	r3, [r3, #16]
 800b4bc:	f003 031f 	and.w	r3, r3, #31
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	d102      	bne.n	800b4ca <USB_ActivateEndpoint+0x27e>
 800b4c4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b4c6:	3b01      	subs	r3, #1
 800b4c8:	66bb      	str	r3, [r7, #104]	; 0x68
 800b4ca:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b4cc:	b29b      	uxth	r3, r3
 800b4ce:	029b      	lsls	r3, r3, #10
 800b4d0:	b29b      	uxth	r3, r3
 800b4d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b4d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b4da:	b29a      	uxth	r2, r3
 800b4dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4de:	801a      	strh	r2, [r3, #0]
 800b4e0:	e029      	b.n	800b536 <USB_ActivateEndpoint+0x2ea>
 800b4e2:	683b      	ldr	r3, [r7, #0]
 800b4e4:	691b      	ldr	r3, [r3, #16]
 800b4e6:	2b00      	cmp	r3, #0
 800b4e8:	d112      	bne.n	800b510 <USB_ActivateEndpoint+0x2c4>
 800b4ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4ec:	881b      	ldrh	r3, [r3, #0]
 800b4ee:	b29b      	uxth	r3, r3
 800b4f0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800b4f4:	b29a      	uxth	r2, r3
 800b4f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4f8:	801a      	strh	r2, [r3, #0]
 800b4fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4fc:	881b      	ldrh	r3, [r3, #0]
 800b4fe:	b29b      	uxth	r3, r3
 800b500:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b504:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b508:	b29a      	uxth	r2, r3
 800b50a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b50c:	801a      	strh	r2, [r3, #0]
 800b50e:	e012      	b.n	800b536 <USB_ActivateEndpoint+0x2ea>
 800b510:	683b      	ldr	r3, [r7, #0]
 800b512:	691b      	ldr	r3, [r3, #16]
 800b514:	085b      	lsrs	r3, r3, #1
 800b516:	66bb      	str	r3, [r7, #104]	; 0x68
 800b518:	683b      	ldr	r3, [r7, #0]
 800b51a:	691b      	ldr	r3, [r3, #16]
 800b51c:	f003 0301 	and.w	r3, r3, #1
 800b520:	2b00      	cmp	r3, #0
 800b522:	d002      	beq.n	800b52a <USB_ActivateEndpoint+0x2de>
 800b524:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b526:	3301      	adds	r3, #1
 800b528:	66bb      	str	r3, [r7, #104]	; 0x68
 800b52a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b52c:	b29b      	uxth	r3, r3
 800b52e:	029b      	lsls	r3, r3, #10
 800b530:	b29a      	uxth	r2, r3
 800b532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b534:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800b536:	687a      	ldr	r2, [r7, #4]
 800b538:	683b      	ldr	r3, [r7, #0]
 800b53a:	781b      	ldrb	r3, [r3, #0]
 800b53c:	009b      	lsls	r3, r3, #2
 800b53e:	4413      	add	r3, r2
 800b540:	881b      	ldrh	r3, [r3, #0]
 800b542:	847b      	strh	r3, [r7, #34]	; 0x22
 800b544:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b546:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b54a:	2b00      	cmp	r3, #0
 800b54c:	d01b      	beq.n	800b586 <USB_ActivateEndpoint+0x33a>
 800b54e:	687a      	ldr	r2, [r7, #4]
 800b550:	683b      	ldr	r3, [r7, #0]
 800b552:	781b      	ldrb	r3, [r3, #0]
 800b554:	009b      	lsls	r3, r3, #2
 800b556:	4413      	add	r3, r2
 800b558:	881b      	ldrh	r3, [r3, #0]
 800b55a:	b29b      	uxth	r3, r3
 800b55c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b560:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b564:	843b      	strh	r3, [r7, #32]
 800b566:	687a      	ldr	r2, [r7, #4]
 800b568:	683b      	ldr	r3, [r7, #0]
 800b56a:	781b      	ldrb	r3, [r3, #0]
 800b56c:	009b      	lsls	r3, r3, #2
 800b56e:	441a      	add	r2, r3
 800b570:	8c3b      	ldrh	r3, [r7, #32]
 800b572:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b576:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b57a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800b57e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b582:	b29b      	uxth	r3, r3
 800b584:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800b586:	687a      	ldr	r2, [r7, #4]
 800b588:	683b      	ldr	r3, [r7, #0]
 800b58a:	781b      	ldrb	r3, [r3, #0]
 800b58c:	009b      	lsls	r3, r3, #2
 800b58e:	4413      	add	r3, r2
 800b590:	881b      	ldrh	r3, [r3, #0]
 800b592:	b29b      	uxth	r3, r3
 800b594:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b598:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b59c:	83fb      	strh	r3, [r7, #30]
 800b59e:	8bfb      	ldrh	r3, [r7, #30]
 800b5a0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800b5a4:	83fb      	strh	r3, [r7, #30]
 800b5a6:	8bfb      	ldrh	r3, [r7, #30]
 800b5a8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800b5ac:	83fb      	strh	r3, [r7, #30]
 800b5ae:	687a      	ldr	r2, [r7, #4]
 800b5b0:	683b      	ldr	r3, [r7, #0]
 800b5b2:	781b      	ldrb	r3, [r3, #0]
 800b5b4:	009b      	lsls	r3, r3, #2
 800b5b6:	441a      	add	r2, r3
 800b5b8:	8bfb      	ldrh	r3, [r7, #30]
 800b5ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b5be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b5c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b5c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b5ca:	b29b      	uxth	r3, r3
 800b5cc:	8013      	strh	r3, [r2, #0]
 800b5ce:	e1c9      	b.n	800b964 <USB_ActivateEndpoint+0x718>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800b5d0:	683b      	ldr	r3, [r7, #0]
 800b5d2:	78db      	ldrb	r3, [r3, #3]
 800b5d4:	2b02      	cmp	r3, #2
 800b5d6:	d11e      	bne.n	800b616 <USB_ActivateEndpoint+0x3ca>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800b5d8:	687a      	ldr	r2, [r7, #4]
 800b5da:	683b      	ldr	r3, [r7, #0]
 800b5dc:	781b      	ldrb	r3, [r3, #0]
 800b5de:	009b      	lsls	r3, r3, #2
 800b5e0:	4413      	add	r3, r2
 800b5e2:	881b      	ldrh	r3, [r3, #0]
 800b5e4:	b29b      	uxth	r3, r3
 800b5e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b5ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b5ee:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800b5f2:	687a      	ldr	r2, [r7, #4]
 800b5f4:	683b      	ldr	r3, [r7, #0]
 800b5f6:	781b      	ldrb	r3, [r3, #0]
 800b5f8:	009b      	lsls	r3, r3, #2
 800b5fa:	441a      	add	r2, r3
 800b5fc:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800b600:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b604:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b608:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800b60c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b610:	b29b      	uxth	r3, r3
 800b612:	8013      	strh	r3, [r2, #0]
 800b614:	e01d      	b.n	800b652 <USB_ActivateEndpoint+0x406>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800b616:	687a      	ldr	r2, [r7, #4]
 800b618:	683b      	ldr	r3, [r7, #0]
 800b61a:	781b      	ldrb	r3, [r3, #0]
 800b61c:	009b      	lsls	r3, r3, #2
 800b61e:	4413      	add	r3, r2
 800b620:	881b      	ldrh	r3, [r3, #0]
 800b622:	b29b      	uxth	r3, r3
 800b624:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800b628:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b62c:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 800b630:	687a      	ldr	r2, [r7, #4]
 800b632:	683b      	ldr	r3, [r7, #0]
 800b634:	781b      	ldrb	r3, [r3, #0]
 800b636:	009b      	lsls	r3, r3, #2
 800b638:	441a      	add	r2, r3
 800b63a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800b63e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b642:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b646:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b64a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b64e:	b29b      	uxth	r3, r3
 800b650:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b65c:	b29b      	uxth	r3, r3
 800b65e:	461a      	mov	r2, r3
 800b660:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b662:	4413      	add	r3, r2
 800b664:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b666:	683b      	ldr	r3, [r7, #0]
 800b668:	781b      	ldrb	r3, [r3, #0]
 800b66a:	00da      	lsls	r2, r3, #3
 800b66c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b66e:	4413      	add	r3, r2
 800b670:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b674:	65bb      	str	r3, [r7, #88]	; 0x58
 800b676:	683b      	ldr	r3, [r7, #0]
 800b678:	891b      	ldrh	r3, [r3, #8]
 800b67a:	085b      	lsrs	r3, r3, #1
 800b67c:	b29b      	uxth	r3, r3
 800b67e:	005b      	lsls	r3, r3, #1
 800b680:	b29a      	uxth	r2, r3
 800b682:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b684:	801a      	strh	r2, [r3, #0]
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	657b      	str	r3, [r7, #84]	; 0x54
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b690:	b29b      	uxth	r3, r3
 800b692:	461a      	mov	r2, r3
 800b694:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b696:	4413      	add	r3, r2
 800b698:	657b      	str	r3, [r7, #84]	; 0x54
 800b69a:	683b      	ldr	r3, [r7, #0]
 800b69c:	781b      	ldrb	r3, [r3, #0]
 800b69e:	00da      	lsls	r2, r3, #3
 800b6a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b6a2:	4413      	add	r3, r2
 800b6a4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800b6a8:	653b      	str	r3, [r7, #80]	; 0x50
 800b6aa:	683b      	ldr	r3, [r7, #0]
 800b6ac:	895b      	ldrh	r3, [r3, #10]
 800b6ae:	085b      	lsrs	r3, r3, #1
 800b6b0:	b29b      	uxth	r3, r3
 800b6b2:	005b      	lsls	r3, r3, #1
 800b6b4:	b29a      	uxth	r2, r3
 800b6b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b6b8:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800b6ba:	683b      	ldr	r3, [r7, #0]
 800b6bc:	785b      	ldrb	r3, [r3, #1]
 800b6be:	2b00      	cmp	r3, #0
 800b6c0:	f040 8093 	bne.w	800b7ea <USB_ActivateEndpoint+0x59e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800b6c4:	687a      	ldr	r2, [r7, #4]
 800b6c6:	683b      	ldr	r3, [r7, #0]
 800b6c8:	781b      	ldrb	r3, [r3, #0]
 800b6ca:	009b      	lsls	r3, r3, #2
 800b6cc:	4413      	add	r3, r2
 800b6ce:	881b      	ldrh	r3, [r3, #0]
 800b6d0:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800b6d4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800b6d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b6dc:	2b00      	cmp	r3, #0
 800b6de:	d01b      	beq.n	800b718 <USB_ActivateEndpoint+0x4cc>
 800b6e0:	687a      	ldr	r2, [r7, #4]
 800b6e2:	683b      	ldr	r3, [r7, #0]
 800b6e4:	781b      	ldrb	r3, [r3, #0]
 800b6e6:	009b      	lsls	r3, r3, #2
 800b6e8:	4413      	add	r3, r2
 800b6ea:	881b      	ldrh	r3, [r3, #0]
 800b6ec:	b29b      	uxth	r3, r3
 800b6ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b6f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b6f6:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800b6f8:	687a      	ldr	r2, [r7, #4]
 800b6fa:	683b      	ldr	r3, [r7, #0]
 800b6fc:	781b      	ldrb	r3, [r3, #0]
 800b6fe:	009b      	lsls	r3, r3, #2
 800b700:	441a      	add	r2, r3
 800b702:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800b704:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b708:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b70c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800b710:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b714:	b29b      	uxth	r3, r3
 800b716:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b718:	687a      	ldr	r2, [r7, #4]
 800b71a:	683b      	ldr	r3, [r7, #0]
 800b71c:	781b      	ldrb	r3, [r3, #0]
 800b71e:	009b      	lsls	r3, r3, #2
 800b720:	4413      	add	r3, r2
 800b722:	881b      	ldrh	r3, [r3, #0]
 800b724:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800b726:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800b728:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b72c:	2b00      	cmp	r3, #0
 800b72e:	d01b      	beq.n	800b768 <USB_ActivateEndpoint+0x51c>
 800b730:	687a      	ldr	r2, [r7, #4]
 800b732:	683b      	ldr	r3, [r7, #0]
 800b734:	781b      	ldrb	r3, [r3, #0]
 800b736:	009b      	lsls	r3, r3, #2
 800b738:	4413      	add	r3, r2
 800b73a:	881b      	ldrh	r3, [r3, #0]
 800b73c:	b29b      	uxth	r3, r3
 800b73e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b742:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b746:	877b      	strh	r3, [r7, #58]	; 0x3a
 800b748:	687a      	ldr	r2, [r7, #4]
 800b74a:	683b      	ldr	r3, [r7, #0]
 800b74c:	781b      	ldrb	r3, [r3, #0]
 800b74e:	009b      	lsls	r3, r3, #2
 800b750:	441a      	add	r2, r3
 800b752:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800b754:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b758:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b75c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b760:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800b764:	b29b      	uxth	r3, r3
 800b766:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800b768:	687a      	ldr	r2, [r7, #4]
 800b76a:	683b      	ldr	r3, [r7, #0]
 800b76c:	781b      	ldrb	r3, [r3, #0]
 800b76e:	009b      	lsls	r3, r3, #2
 800b770:	4413      	add	r3, r2
 800b772:	881b      	ldrh	r3, [r3, #0]
 800b774:	b29b      	uxth	r3, r3
 800b776:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b77a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b77e:	873b      	strh	r3, [r7, #56]	; 0x38
 800b780:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800b782:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800b786:	873b      	strh	r3, [r7, #56]	; 0x38
 800b788:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800b78a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800b78e:	873b      	strh	r3, [r7, #56]	; 0x38
 800b790:	687a      	ldr	r2, [r7, #4]
 800b792:	683b      	ldr	r3, [r7, #0]
 800b794:	781b      	ldrb	r3, [r3, #0]
 800b796:	009b      	lsls	r3, r3, #2
 800b798:	441a      	add	r2, r3
 800b79a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800b79c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b7a0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b7a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b7a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b7ac:	b29b      	uxth	r3, r3
 800b7ae:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800b7b0:	687a      	ldr	r2, [r7, #4]
 800b7b2:	683b      	ldr	r3, [r7, #0]
 800b7b4:	781b      	ldrb	r3, [r3, #0]
 800b7b6:	009b      	lsls	r3, r3, #2
 800b7b8:	4413      	add	r3, r2
 800b7ba:	881b      	ldrh	r3, [r3, #0]
 800b7bc:	b29b      	uxth	r3, r3
 800b7be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b7c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b7c6:	86fb      	strh	r3, [r7, #54]	; 0x36
 800b7c8:	687a      	ldr	r2, [r7, #4]
 800b7ca:	683b      	ldr	r3, [r7, #0]
 800b7cc:	781b      	ldrb	r3, [r3, #0]
 800b7ce:	009b      	lsls	r3, r3, #2
 800b7d0:	441a      	add	r2, r3
 800b7d2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800b7d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b7d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b7dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b7e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b7e4:	b29b      	uxth	r3, r3
 800b7e6:	8013      	strh	r3, [r2, #0]
 800b7e8:	e0bc      	b.n	800b964 <USB_ActivateEndpoint+0x718>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800b7ea:	687a      	ldr	r2, [r7, #4]
 800b7ec:	683b      	ldr	r3, [r7, #0]
 800b7ee:	781b      	ldrb	r3, [r3, #0]
 800b7f0:	009b      	lsls	r3, r3, #2
 800b7f2:	4413      	add	r3, r2
 800b7f4:	881b      	ldrh	r3, [r3, #0]
 800b7f6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800b7fa:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800b7fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b802:	2b00      	cmp	r3, #0
 800b804:	d01d      	beq.n	800b842 <USB_ActivateEndpoint+0x5f6>
 800b806:	687a      	ldr	r2, [r7, #4]
 800b808:	683b      	ldr	r3, [r7, #0]
 800b80a:	781b      	ldrb	r3, [r3, #0]
 800b80c:	009b      	lsls	r3, r3, #2
 800b80e:	4413      	add	r3, r2
 800b810:	881b      	ldrh	r3, [r3, #0]
 800b812:	b29b      	uxth	r3, r3
 800b814:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b818:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b81c:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800b820:	687a      	ldr	r2, [r7, #4]
 800b822:	683b      	ldr	r3, [r7, #0]
 800b824:	781b      	ldrb	r3, [r3, #0]
 800b826:	009b      	lsls	r3, r3, #2
 800b828:	441a      	add	r2, r3
 800b82a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800b82e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b832:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b836:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800b83a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b83e:	b29b      	uxth	r3, r3
 800b840:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b842:	687a      	ldr	r2, [r7, #4]
 800b844:	683b      	ldr	r3, [r7, #0]
 800b846:	781b      	ldrb	r3, [r3, #0]
 800b848:	009b      	lsls	r3, r3, #2
 800b84a:	4413      	add	r3, r2
 800b84c:	881b      	ldrh	r3, [r3, #0]
 800b84e:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800b852:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800b856:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b85a:	2b00      	cmp	r3, #0
 800b85c:	d01d      	beq.n	800b89a <USB_ActivateEndpoint+0x64e>
 800b85e:	687a      	ldr	r2, [r7, #4]
 800b860:	683b      	ldr	r3, [r7, #0]
 800b862:	781b      	ldrb	r3, [r3, #0]
 800b864:	009b      	lsls	r3, r3, #2
 800b866:	4413      	add	r3, r2
 800b868:	881b      	ldrh	r3, [r3, #0]
 800b86a:	b29b      	uxth	r3, r3
 800b86c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b870:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b874:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800b878:	687a      	ldr	r2, [r7, #4]
 800b87a:	683b      	ldr	r3, [r7, #0]
 800b87c:	781b      	ldrb	r3, [r3, #0]
 800b87e:	009b      	lsls	r3, r3, #2
 800b880:	441a      	add	r2, r3
 800b882:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800b886:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b88a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b88e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b892:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800b896:	b29b      	uxth	r3, r3
 800b898:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800b89a:	683b      	ldr	r3, [r7, #0]
 800b89c:	78db      	ldrb	r3, [r3, #3]
 800b89e:	2b01      	cmp	r3, #1
 800b8a0:	d024      	beq.n	800b8ec <USB_ActivateEndpoint+0x6a0>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800b8a2:	687a      	ldr	r2, [r7, #4]
 800b8a4:	683b      	ldr	r3, [r7, #0]
 800b8a6:	781b      	ldrb	r3, [r3, #0]
 800b8a8:	009b      	lsls	r3, r3, #2
 800b8aa:	4413      	add	r3, r2
 800b8ac:	881b      	ldrh	r3, [r3, #0]
 800b8ae:	b29b      	uxth	r3, r3
 800b8b0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b8b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b8b8:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800b8bc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800b8c0:	f083 0320 	eor.w	r3, r3, #32
 800b8c4:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800b8c8:	687a      	ldr	r2, [r7, #4]
 800b8ca:	683b      	ldr	r3, [r7, #0]
 800b8cc:	781b      	ldrb	r3, [r3, #0]
 800b8ce:	009b      	lsls	r3, r3, #2
 800b8d0:	441a      	add	r2, r3
 800b8d2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800b8d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b8da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b8de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b8e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b8e6:	b29b      	uxth	r3, r3
 800b8e8:	8013      	strh	r3, [r2, #0]
 800b8ea:	e01d      	b.n	800b928 <USB_ActivateEndpoint+0x6dc>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800b8ec:	687a      	ldr	r2, [r7, #4]
 800b8ee:	683b      	ldr	r3, [r7, #0]
 800b8f0:	781b      	ldrb	r3, [r3, #0]
 800b8f2:	009b      	lsls	r3, r3, #2
 800b8f4:	4413      	add	r3, r2
 800b8f6:	881b      	ldrh	r3, [r3, #0]
 800b8f8:	b29b      	uxth	r3, r3
 800b8fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b8fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b902:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800b906:	687a      	ldr	r2, [r7, #4]
 800b908:	683b      	ldr	r3, [r7, #0]
 800b90a:	781b      	ldrb	r3, [r3, #0]
 800b90c:	009b      	lsls	r3, r3, #2
 800b90e:	441a      	add	r2, r3
 800b910:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800b914:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b918:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b91c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b920:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b924:	b29b      	uxth	r3, r3
 800b926:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800b928:	687a      	ldr	r2, [r7, #4]
 800b92a:	683b      	ldr	r3, [r7, #0]
 800b92c:	781b      	ldrb	r3, [r3, #0]
 800b92e:	009b      	lsls	r3, r3, #2
 800b930:	4413      	add	r3, r2
 800b932:	881b      	ldrh	r3, [r3, #0]
 800b934:	b29b      	uxth	r3, r3
 800b936:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b93a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b93e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800b942:	687a      	ldr	r2, [r7, #4]
 800b944:	683b      	ldr	r3, [r7, #0]
 800b946:	781b      	ldrb	r3, [r3, #0]
 800b948:	009b      	lsls	r3, r3, #2
 800b94a:	441a      	add	r2, r3
 800b94c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800b950:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b954:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b958:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b95c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b960:	b29b      	uxth	r3, r3
 800b962:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800b964:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 800b968:	4618      	mov	r0, r3
 800b96a:	3774      	adds	r7, #116	; 0x74
 800b96c:	46bd      	mov	sp, r7
 800b96e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b972:	4770      	bx	lr

0800b974 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800b974:	b480      	push	{r7}
 800b976:	b08d      	sub	sp, #52	; 0x34
 800b978:	af00      	add	r7, sp, #0
 800b97a:	6078      	str	r0, [r7, #4]
 800b97c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800b97e:	683b      	ldr	r3, [r7, #0]
 800b980:	7b1b      	ldrb	r3, [r3, #12]
 800b982:	2b00      	cmp	r3, #0
 800b984:	f040 808e 	bne.w	800baa4 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800b988:	683b      	ldr	r3, [r7, #0]
 800b98a:	785b      	ldrb	r3, [r3, #1]
 800b98c:	2b00      	cmp	r3, #0
 800b98e:	d044      	beq.n	800ba1a <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b990:	687a      	ldr	r2, [r7, #4]
 800b992:	683b      	ldr	r3, [r7, #0]
 800b994:	781b      	ldrb	r3, [r3, #0]
 800b996:	009b      	lsls	r3, r3, #2
 800b998:	4413      	add	r3, r2
 800b99a:	881b      	ldrh	r3, [r3, #0]
 800b99c:	81bb      	strh	r3, [r7, #12]
 800b99e:	89bb      	ldrh	r3, [r7, #12]
 800b9a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b9a4:	2b00      	cmp	r3, #0
 800b9a6:	d01b      	beq.n	800b9e0 <USB_DeactivateEndpoint+0x6c>
 800b9a8:	687a      	ldr	r2, [r7, #4]
 800b9aa:	683b      	ldr	r3, [r7, #0]
 800b9ac:	781b      	ldrb	r3, [r3, #0]
 800b9ae:	009b      	lsls	r3, r3, #2
 800b9b0:	4413      	add	r3, r2
 800b9b2:	881b      	ldrh	r3, [r3, #0]
 800b9b4:	b29b      	uxth	r3, r3
 800b9b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b9ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b9be:	817b      	strh	r3, [r7, #10]
 800b9c0:	687a      	ldr	r2, [r7, #4]
 800b9c2:	683b      	ldr	r3, [r7, #0]
 800b9c4:	781b      	ldrb	r3, [r3, #0]
 800b9c6:	009b      	lsls	r3, r3, #2
 800b9c8:	441a      	add	r2, r3
 800b9ca:	897b      	ldrh	r3, [r7, #10]
 800b9cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b9d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b9d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b9d8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800b9dc:	b29b      	uxth	r3, r3
 800b9de:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800b9e0:	687a      	ldr	r2, [r7, #4]
 800b9e2:	683b      	ldr	r3, [r7, #0]
 800b9e4:	781b      	ldrb	r3, [r3, #0]
 800b9e6:	009b      	lsls	r3, r3, #2
 800b9e8:	4413      	add	r3, r2
 800b9ea:	881b      	ldrh	r3, [r3, #0]
 800b9ec:	b29b      	uxth	r3, r3
 800b9ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b9f2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b9f6:	813b      	strh	r3, [r7, #8]
 800b9f8:	687a      	ldr	r2, [r7, #4]
 800b9fa:	683b      	ldr	r3, [r7, #0]
 800b9fc:	781b      	ldrb	r3, [r3, #0]
 800b9fe:	009b      	lsls	r3, r3, #2
 800ba00:	441a      	add	r2, r3
 800ba02:	893b      	ldrh	r3, [r7, #8]
 800ba04:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ba08:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ba0c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ba10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ba14:	b29b      	uxth	r3, r3
 800ba16:	8013      	strh	r3, [r2, #0]
 800ba18:	e192      	b.n	800bd40 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800ba1a:	687a      	ldr	r2, [r7, #4]
 800ba1c:	683b      	ldr	r3, [r7, #0]
 800ba1e:	781b      	ldrb	r3, [r3, #0]
 800ba20:	009b      	lsls	r3, r3, #2
 800ba22:	4413      	add	r3, r2
 800ba24:	881b      	ldrh	r3, [r3, #0]
 800ba26:	827b      	strh	r3, [r7, #18]
 800ba28:	8a7b      	ldrh	r3, [r7, #18]
 800ba2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ba2e:	2b00      	cmp	r3, #0
 800ba30:	d01b      	beq.n	800ba6a <USB_DeactivateEndpoint+0xf6>
 800ba32:	687a      	ldr	r2, [r7, #4]
 800ba34:	683b      	ldr	r3, [r7, #0]
 800ba36:	781b      	ldrb	r3, [r3, #0]
 800ba38:	009b      	lsls	r3, r3, #2
 800ba3a:	4413      	add	r3, r2
 800ba3c:	881b      	ldrh	r3, [r3, #0]
 800ba3e:	b29b      	uxth	r3, r3
 800ba40:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ba44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ba48:	823b      	strh	r3, [r7, #16]
 800ba4a:	687a      	ldr	r2, [r7, #4]
 800ba4c:	683b      	ldr	r3, [r7, #0]
 800ba4e:	781b      	ldrb	r3, [r3, #0]
 800ba50:	009b      	lsls	r3, r3, #2
 800ba52:	441a      	add	r2, r3
 800ba54:	8a3b      	ldrh	r3, [r7, #16]
 800ba56:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ba5a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ba5e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800ba62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ba66:	b29b      	uxth	r3, r3
 800ba68:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800ba6a:	687a      	ldr	r2, [r7, #4]
 800ba6c:	683b      	ldr	r3, [r7, #0]
 800ba6e:	781b      	ldrb	r3, [r3, #0]
 800ba70:	009b      	lsls	r3, r3, #2
 800ba72:	4413      	add	r3, r2
 800ba74:	881b      	ldrh	r3, [r3, #0]
 800ba76:	b29b      	uxth	r3, r3
 800ba78:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ba7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ba80:	81fb      	strh	r3, [r7, #14]
 800ba82:	687a      	ldr	r2, [r7, #4]
 800ba84:	683b      	ldr	r3, [r7, #0]
 800ba86:	781b      	ldrb	r3, [r3, #0]
 800ba88:	009b      	lsls	r3, r3, #2
 800ba8a:	441a      	add	r2, r3
 800ba8c:	89fb      	ldrh	r3, [r7, #14]
 800ba8e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ba92:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ba96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ba9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ba9e:	b29b      	uxth	r3, r3
 800baa0:	8013      	strh	r3, [r2, #0]
 800baa2:	e14d      	b.n	800bd40 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800baa4:	683b      	ldr	r3, [r7, #0]
 800baa6:	785b      	ldrb	r3, [r3, #1]
 800baa8:	2b00      	cmp	r3, #0
 800baaa:	f040 80a5 	bne.w	800bbf8 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800baae:	687a      	ldr	r2, [r7, #4]
 800bab0:	683b      	ldr	r3, [r7, #0]
 800bab2:	781b      	ldrb	r3, [r3, #0]
 800bab4:	009b      	lsls	r3, r3, #2
 800bab6:	4413      	add	r3, r2
 800bab8:	881b      	ldrh	r3, [r3, #0]
 800baba:	843b      	strh	r3, [r7, #32]
 800babc:	8c3b      	ldrh	r3, [r7, #32]
 800babe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bac2:	2b00      	cmp	r3, #0
 800bac4:	d01b      	beq.n	800bafe <USB_DeactivateEndpoint+0x18a>
 800bac6:	687a      	ldr	r2, [r7, #4]
 800bac8:	683b      	ldr	r3, [r7, #0]
 800baca:	781b      	ldrb	r3, [r3, #0]
 800bacc:	009b      	lsls	r3, r3, #2
 800bace:	4413      	add	r3, r2
 800bad0:	881b      	ldrh	r3, [r3, #0]
 800bad2:	b29b      	uxth	r3, r3
 800bad4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bad8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800badc:	83fb      	strh	r3, [r7, #30]
 800bade:	687a      	ldr	r2, [r7, #4]
 800bae0:	683b      	ldr	r3, [r7, #0]
 800bae2:	781b      	ldrb	r3, [r3, #0]
 800bae4:	009b      	lsls	r3, r3, #2
 800bae6:	441a      	add	r2, r3
 800bae8:	8bfb      	ldrh	r3, [r7, #30]
 800baea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800baee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800baf2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800baf6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bafa:	b29b      	uxth	r3, r3
 800bafc:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800bafe:	687a      	ldr	r2, [r7, #4]
 800bb00:	683b      	ldr	r3, [r7, #0]
 800bb02:	781b      	ldrb	r3, [r3, #0]
 800bb04:	009b      	lsls	r3, r3, #2
 800bb06:	4413      	add	r3, r2
 800bb08:	881b      	ldrh	r3, [r3, #0]
 800bb0a:	83bb      	strh	r3, [r7, #28]
 800bb0c:	8bbb      	ldrh	r3, [r7, #28]
 800bb0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bb12:	2b00      	cmp	r3, #0
 800bb14:	d01b      	beq.n	800bb4e <USB_DeactivateEndpoint+0x1da>
 800bb16:	687a      	ldr	r2, [r7, #4]
 800bb18:	683b      	ldr	r3, [r7, #0]
 800bb1a:	781b      	ldrb	r3, [r3, #0]
 800bb1c:	009b      	lsls	r3, r3, #2
 800bb1e:	4413      	add	r3, r2
 800bb20:	881b      	ldrh	r3, [r3, #0]
 800bb22:	b29b      	uxth	r3, r3
 800bb24:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bb28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bb2c:	837b      	strh	r3, [r7, #26]
 800bb2e:	687a      	ldr	r2, [r7, #4]
 800bb30:	683b      	ldr	r3, [r7, #0]
 800bb32:	781b      	ldrb	r3, [r3, #0]
 800bb34:	009b      	lsls	r3, r3, #2
 800bb36:	441a      	add	r2, r3
 800bb38:	8b7b      	ldrh	r3, [r7, #26]
 800bb3a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bb3e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bb42:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bb46:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800bb4a:	b29b      	uxth	r3, r3
 800bb4c:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800bb4e:	687a      	ldr	r2, [r7, #4]
 800bb50:	683b      	ldr	r3, [r7, #0]
 800bb52:	781b      	ldrb	r3, [r3, #0]
 800bb54:	009b      	lsls	r3, r3, #2
 800bb56:	4413      	add	r3, r2
 800bb58:	881b      	ldrh	r3, [r3, #0]
 800bb5a:	b29b      	uxth	r3, r3
 800bb5c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bb60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bb64:	833b      	strh	r3, [r7, #24]
 800bb66:	687a      	ldr	r2, [r7, #4]
 800bb68:	683b      	ldr	r3, [r7, #0]
 800bb6a:	781b      	ldrb	r3, [r3, #0]
 800bb6c:	009b      	lsls	r3, r3, #2
 800bb6e:	441a      	add	r2, r3
 800bb70:	8b3b      	ldrh	r3, [r7, #24]
 800bb72:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bb76:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bb7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bb7e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800bb82:	b29b      	uxth	r3, r3
 800bb84:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800bb86:	687a      	ldr	r2, [r7, #4]
 800bb88:	683b      	ldr	r3, [r7, #0]
 800bb8a:	781b      	ldrb	r3, [r3, #0]
 800bb8c:	009b      	lsls	r3, r3, #2
 800bb8e:	4413      	add	r3, r2
 800bb90:	881b      	ldrh	r3, [r3, #0]
 800bb92:	b29b      	uxth	r3, r3
 800bb94:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800bb98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bb9c:	82fb      	strh	r3, [r7, #22]
 800bb9e:	687a      	ldr	r2, [r7, #4]
 800bba0:	683b      	ldr	r3, [r7, #0]
 800bba2:	781b      	ldrb	r3, [r3, #0]
 800bba4:	009b      	lsls	r3, r3, #2
 800bba6:	441a      	add	r2, r3
 800bba8:	8afb      	ldrh	r3, [r7, #22]
 800bbaa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bbae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bbb2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bbb6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bbba:	b29b      	uxth	r3, r3
 800bbbc:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800bbbe:	687a      	ldr	r2, [r7, #4]
 800bbc0:	683b      	ldr	r3, [r7, #0]
 800bbc2:	781b      	ldrb	r3, [r3, #0]
 800bbc4:	009b      	lsls	r3, r3, #2
 800bbc6:	4413      	add	r3, r2
 800bbc8:	881b      	ldrh	r3, [r3, #0]
 800bbca:	b29b      	uxth	r3, r3
 800bbcc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bbd0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bbd4:	82bb      	strh	r3, [r7, #20]
 800bbd6:	687a      	ldr	r2, [r7, #4]
 800bbd8:	683b      	ldr	r3, [r7, #0]
 800bbda:	781b      	ldrb	r3, [r3, #0]
 800bbdc:	009b      	lsls	r3, r3, #2
 800bbde:	441a      	add	r2, r3
 800bbe0:	8abb      	ldrh	r3, [r7, #20]
 800bbe2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bbe6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bbea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bbee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bbf2:	b29b      	uxth	r3, r3
 800bbf4:	8013      	strh	r3, [r2, #0]
 800bbf6:	e0a3      	b.n	800bd40 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800bbf8:	687a      	ldr	r2, [r7, #4]
 800bbfa:	683b      	ldr	r3, [r7, #0]
 800bbfc:	781b      	ldrb	r3, [r3, #0]
 800bbfe:	009b      	lsls	r3, r3, #2
 800bc00:	4413      	add	r3, r2
 800bc02:	881b      	ldrh	r3, [r3, #0]
 800bc04:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800bc06:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800bc08:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bc0c:	2b00      	cmp	r3, #0
 800bc0e:	d01b      	beq.n	800bc48 <USB_DeactivateEndpoint+0x2d4>
 800bc10:	687a      	ldr	r2, [r7, #4]
 800bc12:	683b      	ldr	r3, [r7, #0]
 800bc14:	781b      	ldrb	r3, [r3, #0]
 800bc16:	009b      	lsls	r3, r3, #2
 800bc18:	4413      	add	r3, r2
 800bc1a:	881b      	ldrh	r3, [r3, #0]
 800bc1c:	b29b      	uxth	r3, r3
 800bc1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bc22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bc26:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800bc28:	687a      	ldr	r2, [r7, #4]
 800bc2a:	683b      	ldr	r3, [r7, #0]
 800bc2c:	781b      	ldrb	r3, [r3, #0]
 800bc2e:	009b      	lsls	r3, r3, #2
 800bc30:	441a      	add	r2, r3
 800bc32:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800bc34:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bc38:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bc3c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800bc40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bc44:	b29b      	uxth	r3, r3
 800bc46:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800bc48:	687a      	ldr	r2, [r7, #4]
 800bc4a:	683b      	ldr	r3, [r7, #0]
 800bc4c:	781b      	ldrb	r3, [r3, #0]
 800bc4e:	009b      	lsls	r3, r3, #2
 800bc50:	4413      	add	r3, r2
 800bc52:	881b      	ldrh	r3, [r3, #0]
 800bc54:	857b      	strh	r3, [r7, #42]	; 0x2a
 800bc56:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800bc58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bc5c:	2b00      	cmp	r3, #0
 800bc5e:	d01b      	beq.n	800bc98 <USB_DeactivateEndpoint+0x324>
 800bc60:	687a      	ldr	r2, [r7, #4]
 800bc62:	683b      	ldr	r3, [r7, #0]
 800bc64:	781b      	ldrb	r3, [r3, #0]
 800bc66:	009b      	lsls	r3, r3, #2
 800bc68:	4413      	add	r3, r2
 800bc6a:	881b      	ldrh	r3, [r3, #0]
 800bc6c:	b29b      	uxth	r3, r3
 800bc6e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bc72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bc76:	853b      	strh	r3, [r7, #40]	; 0x28
 800bc78:	687a      	ldr	r2, [r7, #4]
 800bc7a:	683b      	ldr	r3, [r7, #0]
 800bc7c:	781b      	ldrb	r3, [r3, #0]
 800bc7e:	009b      	lsls	r3, r3, #2
 800bc80:	441a      	add	r2, r3
 800bc82:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800bc84:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bc88:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bc8c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bc90:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800bc94:	b29b      	uxth	r3, r3
 800bc96:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800bc98:	687a      	ldr	r2, [r7, #4]
 800bc9a:	683b      	ldr	r3, [r7, #0]
 800bc9c:	781b      	ldrb	r3, [r3, #0]
 800bc9e:	009b      	lsls	r3, r3, #2
 800bca0:	4413      	add	r3, r2
 800bca2:	881b      	ldrh	r3, [r3, #0]
 800bca4:	b29b      	uxth	r3, r3
 800bca6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bcaa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bcae:	84fb      	strh	r3, [r7, #38]	; 0x26
 800bcb0:	687a      	ldr	r2, [r7, #4]
 800bcb2:	683b      	ldr	r3, [r7, #0]
 800bcb4:	781b      	ldrb	r3, [r3, #0]
 800bcb6:	009b      	lsls	r3, r3, #2
 800bcb8:	441a      	add	r2, r3
 800bcba:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800bcbc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bcc0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bcc4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800bcc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bccc:	b29b      	uxth	r3, r3
 800bcce:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800bcd0:	687a      	ldr	r2, [r7, #4]
 800bcd2:	683b      	ldr	r3, [r7, #0]
 800bcd4:	781b      	ldrb	r3, [r3, #0]
 800bcd6:	009b      	lsls	r3, r3, #2
 800bcd8:	4413      	add	r3, r2
 800bcda:	881b      	ldrh	r3, [r3, #0]
 800bcdc:	b29b      	uxth	r3, r3
 800bcde:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bce2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bce6:	84bb      	strh	r3, [r7, #36]	; 0x24
 800bce8:	687a      	ldr	r2, [r7, #4]
 800bcea:	683b      	ldr	r3, [r7, #0]
 800bcec:	781b      	ldrb	r3, [r3, #0]
 800bcee:	009b      	lsls	r3, r3, #2
 800bcf0:	441a      	add	r2, r3
 800bcf2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bcf4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bcf8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bcfc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bd00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bd04:	b29b      	uxth	r3, r3
 800bd06:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800bd08:	687a      	ldr	r2, [r7, #4]
 800bd0a:	683b      	ldr	r3, [r7, #0]
 800bd0c:	781b      	ldrb	r3, [r3, #0]
 800bd0e:	009b      	lsls	r3, r3, #2
 800bd10:	4413      	add	r3, r2
 800bd12:	881b      	ldrh	r3, [r3, #0]
 800bd14:	b29b      	uxth	r3, r3
 800bd16:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800bd1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bd1e:	847b      	strh	r3, [r7, #34]	; 0x22
 800bd20:	687a      	ldr	r2, [r7, #4]
 800bd22:	683b      	ldr	r3, [r7, #0]
 800bd24:	781b      	ldrb	r3, [r3, #0]
 800bd26:	009b      	lsls	r3, r3, #2
 800bd28:	441a      	add	r2, r3
 800bd2a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800bd2c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bd30:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bd34:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bd38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bd3c:	b29b      	uxth	r3, r3
 800bd3e:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800bd40:	2300      	movs	r3, #0
}
 800bd42:	4618      	mov	r0, r3
 800bd44:	3734      	adds	r7, #52	; 0x34
 800bd46:	46bd      	mov	sp, r7
 800bd48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd4c:	4770      	bx	lr

0800bd4e <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800bd4e:	b580      	push	{r7, lr}
 800bd50:	b0c2      	sub	sp, #264	; 0x108
 800bd52:	af00      	add	r7, sp, #0
 800bd54:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bd58:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bd5c:	6018      	str	r0, [r3, #0]
 800bd5e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bd62:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bd66:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800bd68:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bd6c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bd70:	681b      	ldr	r3, [r3, #0]
 800bd72:	785b      	ldrb	r3, [r3, #1]
 800bd74:	2b01      	cmp	r3, #1
 800bd76:	f040 867b 	bne.w	800ca70 <USB_EPStartXfer+0xd22>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800bd7a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bd7e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bd82:	681b      	ldr	r3, [r3, #0]
 800bd84:	699a      	ldr	r2, [r3, #24]
 800bd86:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bd8a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bd8e:	681b      	ldr	r3, [r3, #0]
 800bd90:	691b      	ldr	r3, [r3, #16]
 800bd92:	429a      	cmp	r2, r3
 800bd94:	d908      	bls.n	800bda8 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 800bd96:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bd9a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bd9e:	681b      	ldr	r3, [r3, #0]
 800bda0:	691b      	ldr	r3, [r3, #16]
 800bda2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800bda6:	e007      	b.n	800bdb8 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800bda8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bdac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bdb0:	681b      	ldr	r3, [r3, #0]
 800bdb2:	699b      	ldr	r3, [r3, #24]
 800bdb4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800bdb8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bdbc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bdc0:	681b      	ldr	r3, [r3, #0]
 800bdc2:	7b1b      	ldrb	r3, [r3, #12]
 800bdc4:	2b00      	cmp	r3, #0
 800bdc6:	d13a      	bne.n	800be3e <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800bdc8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bdcc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bdd0:	681b      	ldr	r3, [r3, #0]
 800bdd2:	6959      	ldr	r1, [r3, #20]
 800bdd4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bdd8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bddc:	681b      	ldr	r3, [r3, #0]
 800bdde:	88da      	ldrh	r2, [r3, #6]
 800bde0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bde4:	b29b      	uxth	r3, r3
 800bde6:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800bdea:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800bdee:	6800      	ldr	r0, [r0, #0]
 800bdf0:	f001 fc1d 	bl	800d62e <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800bdf4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bdf8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bdfc:	681b      	ldr	r3, [r3, #0]
 800bdfe:	613b      	str	r3, [r7, #16]
 800be00:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800be04:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800be08:	681b      	ldr	r3, [r3, #0]
 800be0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800be0e:	b29b      	uxth	r3, r3
 800be10:	461a      	mov	r2, r3
 800be12:	693b      	ldr	r3, [r7, #16]
 800be14:	4413      	add	r3, r2
 800be16:	613b      	str	r3, [r7, #16]
 800be18:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800be1c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800be20:	681b      	ldr	r3, [r3, #0]
 800be22:	781b      	ldrb	r3, [r3, #0]
 800be24:	00da      	lsls	r2, r3, #3
 800be26:	693b      	ldr	r3, [r7, #16]
 800be28:	4413      	add	r3, r2
 800be2a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800be2e:	60fb      	str	r3, [r7, #12]
 800be30:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800be34:	b29a      	uxth	r2, r3
 800be36:	68fb      	ldr	r3, [r7, #12]
 800be38:	801a      	strh	r2, [r3, #0]
 800be3a:	f000 bde3 	b.w	800ca04 <USB_EPStartXfer+0xcb6>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800be3e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800be42:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800be46:	681b      	ldr	r3, [r3, #0]
 800be48:	78db      	ldrb	r3, [r3, #3]
 800be4a:	2b02      	cmp	r3, #2
 800be4c:	f040 843a 	bne.w	800c6c4 <USB_EPStartXfer+0x976>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800be50:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800be54:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800be58:	681b      	ldr	r3, [r3, #0]
 800be5a:	6a1a      	ldr	r2, [r3, #32]
 800be5c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800be60:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800be64:	681b      	ldr	r3, [r3, #0]
 800be66:	691b      	ldr	r3, [r3, #16]
 800be68:	429a      	cmp	r2, r3
 800be6a:	f240 83b7 	bls.w	800c5dc <USB_EPStartXfer+0x88e>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800be6e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800be72:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800be76:	681a      	ldr	r2, [r3, #0]
 800be78:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800be7c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800be80:	681b      	ldr	r3, [r3, #0]
 800be82:	781b      	ldrb	r3, [r3, #0]
 800be84:	009b      	lsls	r3, r3, #2
 800be86:	4413      	add	r3, r2
 800be88:	881b      	ldrh	r3, [r3, #0]
 800be8a:	b29b      	uxth	r3, r3
 800be8c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800be90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800be94:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800be98:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800be9c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bea0:	681a      	ldr	r2, [r3, #0]
 800bea2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bea6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800beaa:	681b      	ldr	r3, [r3, #0]
 800beac:	781b      	ldrb	r3, [r3, #0]
 800beae:	009b      	lsls	r3, r3, #2
 800beb0:	441a      	add	r2, r3
 800beb2:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800beb6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800beba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bebe:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800bec2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bec6:	b29b      	uxth	r3, r3
 800bec8:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800beca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bece:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bed2:	681b      	ldr	r3, [r3, #0]
 800bed4:	6a1a      	ldr	r2, [r3, #32]
 800bed6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800beda:	1ad2      	subs	r2, r2, r3
 800bedc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bee0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bee4:	681b      	ldr	r3, [r3, #0]
 800bee6:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800bee8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800beec:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bef0:	681a      	ldr	r2, [r3, #0]
 800bef2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bef6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800befa:	681b      	ldr	r3, [r3, #0]
 800befc:	781b      	ldrb	r3, [r3, #0]
 800befe:	009b      	lsls	r3, r3, #2
 800bf00:	4413      	add	r3, r2
 800bf02:	881b      	ldrh	r3, [r3, #0]
 800bf04:	b29b      	uxth	r3, r3
 800bf06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bf0a:	2b00      	cmp	r3, #0
 800bf0c:	f000 81b3 	beq.w	800c276 <USB_EPStartXfer+0x528>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800bf10:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bf14:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bf18:	681b      	ldr	r3, [r3, #0]
 800bf1a:	633b      	str	r3, [r7, #48]	; 0x30
 800bf1c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bf20:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bf24:	681b      	ldr	r3, [r3, #0]
 800bf26:	785b      	ldrb	r3, [r3, #1]
 800bf28:	2b00      	cmp	r3, #0
 800bf2a:	d16d      	bne.n	800c008 <USB_EPStartXfer+0x2ba>
 800bf2c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bf30:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bf34:	681b      	ldr	r3, [r3, #0]
 800bf36:	62bb      	str	r3, [r7, #40]	; 0x28
 800bf38:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bf3c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bf40:	681b      	ldr	r3, [r3, #0]
 800bf42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bf46:	b29b      	uxth	r3, r3
 800bf48:	461a      	mov	r2, r3
 800bf4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf4c:	4413      	add	r3, r2
 800bf4e:	62bb      	str	r3, [r7, #40]	; 0x28
 800bf50:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bf54:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bf58:	681b      	ldr	r3, [r3, #0]
 800bf5a:	781b      	ldrb	r3, [r3, #0]
 800bf5c:	00da      	lsls	r2, r3, #3
 800bf5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf60:	4413      	add	r3, r2
 800bf62:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800bf66:	627b      	str	r3, [r7, #36]	; 0x24
 800bf68:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bf6c:	2b3e      	cmp	r3, #62	; 0x3e
 800bf6e:	d91c      	bls.n	800bfaa <USB_EPStartXfer+0x25c>
 800bf70:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bf74:	095b      	lsrs	r3, r3, #5
 800bf76:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800bf7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bf7e:	f003 031f 	and.w	r3, r3, #31
 800bf82:	2b00      	cmp	r3, #0
 800bf84:	d104      	bne.n	800bf90 <USB_EPStartXfer+0x242>
 800bf86:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800bf8a:	3b01      	subs	r3, #1
 800bf8c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800bf90:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800bf94:	b29b      	uxth	r3, r3
 800bf96:	029b      	lsls	r3, r3, #10
 800bf98:	b29b      	uxth	r3, r3
 800bf9a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bf9e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bfa2:	b29a      	uxth	r2, r3
 800bfa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfa6:	801a      	strh	r2, [r3, #0]
 800bfa8:	e053      	b.n	800c052 <USB_EPStartXfer+0x304>
 800bfaa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bfae:	2b00      	cmp	r3, #0
 800bfb0:	d112      	bne.n	800bfd8 <USB_EPStartXfer+0x28a>
 800bfb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfb4:	881b      	ldrh	r3, [r3, #0]
 800bfb6:	b29b      	uxth	r3, r3
 800bfb8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800bfbc:	b29a      	uxth	r2, r3
 800bfbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfc0:	801a      	strh	r2, [r3, #0]
 800bfc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfc4:	881b      	ldrh	r3, [r3, #0]
 800bfc6:	b29b      	uxth	r3, r3
 800bfc8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bfcc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bfd0:	b29a      	uxth	r2, r3
 800bfd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfd4:	801a      	strh	r2, [r3, #0]
 800bfd6:	e03c      	b.n	800c052 <USB_EPStartXfer+0x304>
 800bfd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bfdc:	085b      	lsrs	r3, r3, #1
 800bfde:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800bfe2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bfe6:	f003 0301 	and.w	r3, r3, #1
 800bfea:	2b00      	cmp	r3, #0
 800bfec:	d004      	beq.n	800bff8 <USB_EPStartXfer+0x2aa>
 800bfee:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800bff2:	3301      	adds	r3, #1
 800bff4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800bff8:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800bffc:	b29b      	uxth	r3, r3
 800bffe:	029b      	lsls	r3, r3, #10
 800c000:	b29a      	uxth	r2, r3
 800c002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c004:	801a      	strh	r2, [r3, #0]
 800c006:	e024      	b.n	800c052 <USB_EPStartXfer+0x304>
 800c008:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c00c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c010:	681b      	ldr	r3, [r3, #0]
 800c012:	785b      	ldrb	r3, [r3, #1]
 800c014:	2b01      	cmp	r3, #1
 800c016:	d11c      	bne.n	800c052 <USB_EPStartXfer+0x304>
 800c018:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c01c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c020:	681b      	ldr	r3, [r3, #0]
 800c022:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c026:	b29b      	uxth	r3, r3
 800c028:	461a      	mov	r2, r3
 800c02a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c02c:	4413      	add	r3, r2
 800c02e:	633b      	str	r3, [r7, #48]	; 0x30
 800c030:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c034:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c038:	681b      	ldr	r3, [r3, #0]
 800c03a:	781b      	ldrb	r3, [r3, #0]
 800c03c:	00da      	lsls	r2, r3, #3
 800c03e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c040:	4413      	add	r3, r2
 800c042:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800c046:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c048:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c04c:	b29a      	uxth	r2, r3
 800c04e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c050:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800c052:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c056:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c05a:	681b      	ldr	r3, [r3, #0]
 800c05c:	895b      	ldrh	r3, [r3, #10]
 800c05e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800c062:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c066:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c06a:	681b      	ldr	r3, [r3, #0]
 800c06c:	6959      	ldr	r1, [r3, #20]
 800c06e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c072:	b29b      	uxth	r3, r3
 800c074:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800c078:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800c07c:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800c080:	6800      	ldr	r0, [r0, #0]
 800c082:	f001 fad4 	bl	800d62e <USB_WritePMA>
            ep->xfer_buff += len;
 800c086:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c08a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c08e:	681b      	ldr	r3, [r3, #0]
 800c090:	695a      	ldr	r2, [r3, #20]
 800c092:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c096:	441a      	add	r2, r3
 800c098:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c09c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c0a0:	681b      	ldr	r3, [r3, #0]
 800c0a2:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800c0a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c0a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c0ac:	681b      	ldr	r3, [r3, #0]
 800c0ae:	6a1a      	ldr	r2, [r3, #32]
 800c0b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c0b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c0b8:	681b      	ldr	r3, [r3, #0]
 800c0ba:	691b      	ldr	r3, [r3, #16]
 800c0bc:	429a      	cmp	r2, r3
 800c0be:	d90f      	bls.n	800c0e0 <USB_EPStartXfer+0x392>
            {
              ep->xfer_len_db -= len;
 800c0c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c0c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c0c8:	681b      	ldr	r3, [r3, #0]
 800c0ca:	6a1a      	ldr	r2, [r3, #32]
 800c0cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c0d0:	1ad2      	subs	r2, r2, r3
 800c0d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c0d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c0da:	681b      	ldr	r3, [r3, #0]
 800c0dc:	621a      	str	r2, [r3, #32]
 800c0de:	e00e      	b.n	800c0fe <USB_EPStartXfer+0x3b0>
            }
            else
            {
              len = ep->xfer_len_db;
 800c0e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c0e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c0e8:	681b      	ldr	r3, [r3, #0]
 800c0ea:	6a1b      	ldr	r3, [r3, #32]
 800c0ec:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800c0f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c0f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c0f8:	681b      	ldr	r3, [r3, #0]
 800c0fa:	2200      	movs	r2, #0
 800c0fc:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800c0fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c102:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c106:	681b      	ldr	r3, [r3, #0]
 800c108:	785b      	ldrb	r3, [r3, #1]
 800c10a:	2b00      	cmp	r3, #0
 800c10c:	d16d      	bne.n	800c1ea <USB_EPStartXfer+0x49c>
 800c10e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c112:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c116:	681b      	ldr	r3, [r3, #0]
 800c118:	61bb      	str	r3, [r7, #24]
 800c11a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c11e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c122:	681b      	ldr	r3, [r3, #0]
 800c124:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c128:	b29b      	uxth	r3, r3
 800c12a:	461a      	mov	r2, r3
 800c12c:	69bb      	ldr	r3, [r7, #24]
 800c12e:	4413      	add	r3, r2
 800c130:	61bb      	str	r3, [r7, #24]
 800c132:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c136:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c13a:	681b      	ldr	r3, [r3, #0]
 800c13c:	781b      	ldrb	r3, [r3, #0]
 800c13e:	00da      	lsls	r2, r3, #3
 800c140:	69bb      	ldr	r3, [r7, #24]
 800c142:	4413      	add	r3, r2
 800c144:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800c148:	617b      	str	r3, [r7, #20]
 800c14a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c14e:	2b3e      	cmp	r3, #62	; 0x3e
 800c150:	d91c      	bls.n	800c18c <USB_EPStartXfer+0x43e>
 800c152:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c156:	095b      	lsrs	r3, r3, #5
 800c158:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800c15c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c160:	f003 031f 	and.w	r3, r3, #31
 800c164:	2b00      	cmp	r3, #0
 800c166:	d104      	bne.n	800c172 <USB_EPStartXfer+0x424>
 800c168:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c16c:	3b01      	subs	r3, #1
 800c16e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800c172:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c176:	b29b      	uxth	r3, r3
 800c178:	029b      	lsls	r3, r3, #10
 800c17a:	b29b      	uxth	r3, r3
 800c17c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c180:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c184:	b29a      	uxth	r2, r3
 800c186:	697b      	ldr	r3, [r7, #20]
 800c188:	801a      	strh	r2, [r3, #0]
 800c18a:	e059      	b.n	800c240 <USB_EPStartXfer+0x4f2>
 800c18c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c190:	2b00      	cmp	r3, #0
 800c192:	d112      	bne.n	800c1ba <USB_EPStartXfer+0x46c>
 800c194:	697b      	ldr	r3, [r7, #20]
 800c196:	881b      	ldrh	r3, [r3, #0]
 800c198:	b29b      	uxth	r3, r3
 800c19a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800c19e:	b29a      	uxth	r2, r3
 800c1a0:	697b      	ldr	r3, [r7, #20]
 800c1a2:	801a      	strh	r2, [r3, #0]
 800c1a4:	697b      	ldr	r3, [r7, #20]
 800c1a6:	881b      	ldrh	r3, [r3, #0]
 800c1a8:	b29b      	uxth	r3, r3
 800c1aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c1ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c1b2:	b29a      	uxth	r2, r3
 800c1b4:	697b      	ldr	r3, [r7, #20]
 800c1b6:	801a      	strh	r2, [r3, #0]
 800c1b8:	e042      	b.n	800c240 <USB_EPStartXfer+0x4f2>
 800c1ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c1be:	085b      	lsrs	r3, r3, #1
 800c1c0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800c1c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c1c8:	f003 0301 	and.w	r3, r3, #1
 800c1cc:	2b00      	cmp	r3, #0
 800c1ce:	d004      	beq.n	800c1da <USB_EPStartXfer+0x48c>
 800c1d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c1d4:	3301      	adds	r3, #1
 800c1d6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800c1da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c1de:	b29b      	uxth	r3, r3
 800c1e0:	029b      	lsls	r3, r3, #10
 800c1e2:	b29a      	uxth	r2, r3
 800c1e4:	697b      	ldr	r3, [r7, #20]
 800c1e6:	801a      	strh	r2, [r3, #0]
 800c1e8:	e02a      	b.n	800c240 <USB_EPStartXfer+0x4f2>
 800c1ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c1ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c1f2:	681b      	ldr	r3, [r3, #0]
 800c1f4:	785b      	ldrb	r3, [r3, #1]
 800c1f6:	2b01      	cmp	r3, #1
 800c1f8:	d122      	bne.n	800c240 <USB_EPStartXfer+0x4f2>
 800c1fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c1fe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c202:	681b      	ldr	r3, [r3, #0]
 800c204:	623b      	str	r3, [r7, #32]
 800c206:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c20a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c20e:	681b      	ldr	r3, [r3, #0]
 800c210:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c214:	b29b      	uxth	r3, r3
 800c216:	461a      	mov	r2, r3
 800c218:	6a3b      	ldr	r3, [r7, #32]
 800c21a:	4413      	add	r3, r2
 800c21c:	623b      	str	r3, [r7, #32]
 800c21e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c222:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c226:	681b      	ldr	r3, [r3, #0]
 800c228:	781b      	ldrb	r3, [r3, #0]
 800c22a:	00da      	lsls	r2, r3, #3
 800c22c:	6a3b      	ldr	r3, [r7, #32]
 800c22e:	4413      	add	r3, r2
 800c230:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800c234:	61fb      	str	r3, [r7, #28]
 800c236:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c23a:	b29a      	uxth	r2, r3
 800c23c:	69fb      	ldr	r3, [r7, #28]
 800c23e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800c240:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c244:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c248:	681b      	ldr	r3, [r3, #0]
 800c24a:	891b      	ldrh	r3, [r3, #8]
 800c24c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800c250:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c254:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c258:	681b      	ldr	r3, [r3, #0]
 800c25a:	6959      	ldr	r1, [r3, #20]
 800c25c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c260:	b29b      	uxth	r3, r3
 800c262:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800c266:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800c26a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800c26e:	6800      	ldr	r0, [r0, #0]
 800c270:	f001 f9dd 	bl	800d62e <USB_WritePMA>
 800c274:	e3c6      	b.n	800ca04 <USB_EPStartXfer+0xcb6>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800c276:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c27a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c27e:	681b      	ldr	r3, [r3, #0]
 800c280:	785b      	ldrb	r3, [r3, #1]
 800c282:	2b00      	cmp	r3, #0
 800c284:	d16d      	bne.n	800c362 <USB_EPStartXfer+0x614>
 800c286:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c28a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c28e:	681b      	ldr	r3, [r3, #0]
 800c290:	64bb      	str	r3, [r7, #72]	; 0x48
 800c292:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c296:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c29a:	681b      	ldr	r3, [r3, #0]
 800c29c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c2a0:	b29b      	uxth	r3, r3
 800c2a2:	461a      	mov	r2, r3
 800c2a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c2a6:	4413      	add	r3, r2
 800c2a8:	64bb      	str	r3, [r7, #72]	; 0x48
 800c2aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c2ae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c2b2:	681b      	ldr	r3, [r3, #0]
 800c2b4:	781b      	ldrb	r3, [r3, #0]
 800c2b6:	00da      	lsls	r2, r3, #3
 800c2b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c2ba:	4413      	add	r3, r2
 800c2bc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800c2c0:	647b      	str	r3, [r7, #68]	; 0x44
 800c2c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c2c6:	2b3e      	cmp	r3, #62	; 0x3e
 800c2c8:	d91c      	bls.n	800c304 <USB_EPStartXfer+0x5b6>
 800c2ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c2ce:	095b      	lsrs	r3, r3, #5
 800c2d0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800c2d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c2d8:	f003 031f 	and.w	r3, r3, #31
 800c2dc:	2b00      	cmp	r3, #0
 800c2de:	d104      	bne.n	800c2ea <USB_EPStartXfer+0x59c>
 800c2e0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800c2e4:	3b01      	subs	r3, #1
 800c2e6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800c2ea:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800c2ee:	b29b      	uxth	r3, r3
 800c2f0:	029b      	lsls	r3, r3, #10
 800c2f2:	b29b      	uxth	r3, r3
 800c2f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c2f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c2fc:	b29a      	uxth	r2, r3
 800c2fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c300:	801a      	strh	r2, [r3, #0]
 800c302:	e059      	b.n	800c3b8 <USB_EPStartXfer+0x66a>
 800c304:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c308:	2b00      	cmp	r3, #0
 800c30a:	d112      	bne.n	800c332 <USB_EPStartXfer+0x5e4>
 800c30c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c30e:	881b      	ldrh	r3, [r3, #0]
 800c310:	b29b      	uxth	r3, r3
 800c312:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800c316:	b29a      	uxth	r2, r3
 800c318:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c31a:	801a      	strh	r2, [r3, #0]
 800c31c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c31e:	881b      	ldrh	r3, [r3, #0]
 800c320:	b29b      	uxth	r3, r3
 800c322:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c326:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c32a:	b29a      	uxth	r2, r3
 800c32c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c32e:	801a      	strh	r2, [r3, #0]
 800c330:	e042      	b.n	800c3b8 <USB_EPStartXfer+0x66a>
 800c332:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c336:	085b      	lsrs	r3, r3, #1
 800c338:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800c33c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c340:	f003 0301 	and.w	r3, r3, #1
 800c344:	2b00      	cmp	r3, #0
 800c346:	d004      	beq.n	800c352 <USB_EPStartXfer+0x604>
 800c348:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800c34c:	3301      	adds	r3, #1
 800c34e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800c352:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800c356:	b29b      	uxth	r3, r3
 800c358:	029b      	lsls	r3, r3, #10
 800c35a:	b29a      	uxth	r2, r3
 800c35c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c35e:	801a      	strh	r2, [r3, #0]
 800c360:	e02a      	b.n	800c3b8 <USB_EPStartXfer+0x66a>
 800c362:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c366:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c36a:	681b      	ldr	r3, [r3, #0]
 800c36c:	785b      	ldrb	r3, [r3, #1]
 800c36e:	2b01      	cmp	r3, #1
 800c370:	d122      	bne.n	800c3b8 <USB_EPStartXfer+0x66a>
 800c372:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c376:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c37a:	681b      	ldr	r3, [r3, #0]
 800c37c:	653b      	str	r3, [r7, #80]	; 0x50
 800c37e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c382:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c386:	681b      	ldr	r3, [r3, #0]
 800c388:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c38c:	b29b      	uxth	r3, r3
 800c38e:	461a      	mov	r2, r3
 800c390:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c392:	4413      	add	r3, r2
 800c394:	653b      	str	r3, [r7, #80]	; 0x50
 800c396:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c39a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c39e:	681b      	ldr	r3, [r3, #0]
 800c3a0:	781b      	ldrb	r3, [r3, #0]
 800c3a2:	00da      	lsls	r2, r3, #3
 800c3a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c3a6:	4413      	add	r3, r2
 800c3a8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800c3ac:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c3ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c3b2:	b29a      	uxth	r2, r3
 800c3b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c3b6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800c3b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c3bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c3c0:	681b      	ldr	r3, [r3, #0]
 800c3c2:	891b      	ldrh	r3, [r3, #8]
 800c3c4:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800c3c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c3cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c3d0:	681b      	ldr	r3, [r3, #0]
 800c3d2:	6959      	ldr	r1, [r3, #20]
 800c3d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c3d8:	b29b      	uxth	r3, r3
 800c3da:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800c3de:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800c3e2:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800c3e6:	6800      	ldr	r0, [r0, #0]
 800c3e8:	f001 f921 	bl	800d62e <USB_WritePMA>
            ep->xfer_buff += len;
 800c3ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c3f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c3f4:	681b      	ldr	r3, [r3, #0]
 800c3f6:	695a      	ldr	r2, [r3, #20]
 800c3f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c3fc:	441a      	add	r2, r3
 800c3fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c402:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c406:	681b      	ldr	r3, [r3, #0]
 800c408:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800c40a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c40e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c412:	681b      	ldr	r3, [r3, #0]
 800c414:	6a1a      	ldr	r2, [r3, #32]
 800c416:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c41a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c41e:	681b      	ldr	r3, [r3, #0]
 800c420:	691b      	ldr	r3, [r3, #16]
 800c422:	429a      	cmp	r2, r3
 800c424:	d90f      	bls.n	800c446 <USB_EPStartXfer+0x6f8>
            {
              ep->xfer_len_db -= len;
 800c426:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c42a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c42e:	681b      	ldr	r3, [r3, #0]
 800c430:	6a1a      	ldr	r2, [r3, #32]
 800c432:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c436:	1ad2      	subs	r2, r2, r3
 800c438:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c43c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c440:	681b      	ldr	r3, [r3, #0]
 800c442:	621a      	str	r2, [r3, #32]
 800c444:	e00e      	b.n	800c464 <USB_EPStartXfer+0x716>
            }
            else
            {
              len = ep->xfer_len_db;
 800c446:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c44a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c44e:	681b      	ldr	r3, [r3, #0]
 800c450:	6a1b      	ldr	r3, [r3, #32]
 800c452:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800c456:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c45a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c45e:	681b      	ldr	r3, [r3, #0]
 800c460:	2200      	movs	r2, #0
 800c462:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800c464:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c468:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c46c:	681b      	ldr	r3, [r3, #0]
 800c46e:	643b      	str	r3, [r7, #64]	; 0x40
 800c470:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c474:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c478:	681b      	ldr	r3, [r3, #0]
 800c47a:	785b      	ldrb	r3, [r3, #1]
 800c47c:	2b00      	cmp	r3, #0
 800c47e:	d16d      	bne.n	800c55c <USB_EPStartXfer+0x80e>
 800c480:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c484:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c488:	681b      	ldr	r3, [r3, #0]
 800c48a:	63bb      	str	r3, [r7, #56]	; 0x38
 800c48c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c490:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c494:	681b      	ldr	r3, [r3, #0]
 800c496:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c49a:	b29b      	uxth	r3, r3
 800c49c:	461a      	mov	r2, r3
 800c49e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4a0:	4413      	add	r3, r2
 800c4a2:	63bb      	str	r3, [r7, #56]	; 0x38
 800c4a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c4a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c4ac:	681b      	ldr	r3, [r3, #0]
 800c4ae:	781b      	ldrb	r3, [r3, #0]
 800c4b0:	00da      	lsls	r2, r3, #3
 800c4b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4b4:	4413      	add	r3, r2
 800c4b6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800c4ba:	637b      	str	r3, [r7, #52]	; 0x34
 800c4bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c4c0:	2b3e      	cmp	r3, #62	; 0x3e
 800c4c2:	d91c      	bls.n	800c4fe <USB_EPStartXfer+0x7b0>
 800c4c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c4c8:	095b      	lsrs	r3, r3, #5
 800c4ca:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800c4ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c4d2:	f003 031f 	and.w	r3, r3, #31
 800c4d6:	2b00      	cmp	r3, #0
 800c4d8:	d104      	bne.n	800c4e4 <USB_EPStartXfer+0x796>
 800c4da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c4de:	3b01      	subs	r3, #1
 800c4e0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800c4e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c4e8:	b29b      	uxth	r3, r3
 800c4ea:	029b      	lsls	r3, r3, #10
 800c4ec:	b29b      	uxth	r3, r3
 800c4ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c4f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c4f6:	b29a      	uxth	r2, r3
 800c4f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c4fa:	801a      	strh	r2, [r3, #0]
 800c4fc:	e053      	b.n	800c5a6 <USB_EPStartXfer+0x858>
 800c4fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c502:	2b00      	cmp	r3, #0
 800c504:	d112      	bne.n	800c52c <USB_EPStartXfer+0x7de>
 800c506:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c508:	881b      	ldrh	r3, [r3, #0]
 800c50a:	b29b      	uxth	r3, r3
 800c50c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800c510:	b29a      	uxth	r2, r3
 800c512:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c514:	801a      	strh	r2, [r3, #0]
 800c516:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c518:	881b      	ldrh	r3, [r3, #0]
 800c51a:	b29b      	uxth	r3, r3
 800c51c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c520:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c524:	b29a      	uxth	r2, r3
 800c526:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c528:	801a      	strh	r2, [r3, #0]
 800c52a:	e03c      	b.n	800c5a6 <USB_EPStartXfer+0x858>
 800c52c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c530:	085b      	lsrs	r3, r3, #1
 800c532:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800c536:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c53a:	f003 0301 	and.w	r3, r3, #1
 800c53e:	2b00      	cmp	r3, #0
 800c540:	d004      	beq.n	800c54c <USB_EPStartXfer+0x7fe>
 800c542:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c546:	3301      	adds	r3, #1
 800c548:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800c54c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c550:	b29b      	uxth	r3, r3
 800c552:	029b      	lsls	r3, r3, #10
 800c554:	b29a      	uxth	r2, r3
 800c556:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c558:	801a      	strh	r2, [r3, #0]
 800c55a:	e024      	b.n	800c5a6 <USB_EPStartXfer+0x858>
 800c55c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c560:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c564:	681b      	ldr	r3, [r3, #0]
 800c566:	785b      	ldrb	r3, [r3, #1]
 800c568:	2b01      	cmp	r3, #1
 800c56a:	d11c      	bne.n	800c5a6 <USB_EPStartXfer+0x858>
 800c56c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c570:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c574:	681b      	ldr	r3, [r3, #0]
 800c576:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c57a:	b29b      	uxth	r3, r3
 800c57c:	461a      	mov	r2, r3
 800c57e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c580:	4413      	add	r3, r2
 800c582:	643b      	str	r3, [r7, #64]	; 0x40
 800c584:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c588:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c58c:	681b      	ldr	r3, [r3, #0]
 800c58e:	781b      	ldrb	r3, [r3, #0]
 800c590:	00da      	lsls	r2, r3, #3
 800c592:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c594:	4413      	add	r3, r2
 800c596:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800c59a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c59c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c5a0:	b29a      	uxth	r2, r3
 800c5a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c5a4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800c5a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c5aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c5ae:	681b      	ldr	r3, [r3, #0]
 800c5b0:	895b      	ldrh	r3, [r3, #10]
 800c5b2:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800c5b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c5ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c5be:	681b      	ldr	r3, [r3, #0]
 800c5c0:	6959      	ldr	r1, [r3, #20]
 800c5c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c5c6:	b29b      	uxth	r3, r3
 800c5c8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800c5cc:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800c5d0:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800c5d4:	6800      	ldr	r0, [r0, #0]
 800c5d6:	f001 f82a 	bl	800d62e <USB_WritePMA>
 800c5da:	e213      	b.n	800ca04 <USB_EPStartXfer+0xcb6>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800c5dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c5e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c5e4:	681b      	ldr	r3, [r3, #0]
 800c5e6:	6a1b      	ldr	r3, [r3, #32]
 800c5e8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800c5ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c5f0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c5f4:	681a      	ldr	r2, [r3, #0]
 800c5f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c5fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c5fe:	681b      	ldr	r3, [r3, #0]
 800c600:	781b      	ldrb	r3, [r3, #0]
 800c602:	009b      	lsls	r3, r3, #2
 800c604:	4413      	add	r3, r2
 800c606:	881b      	ldrh	r3, [r3, #0]
 800c608:	b29b      	uxth	r3, r3
 800c60a:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800c60e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c612:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800c616:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c61a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c61e:	681a      	ldr	r2, [r3, #0]
 800c620:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c624:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c628:	681b      	ldr	r3, [r3, #0]
 800c62a:	781b      	ldrb	r3, [r3, #0]
 800c62c:	009b      	lsls	r3, r3, #2
 800c62e:	441a      	add	r2, r3
 800c630:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800c634:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c638:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c63c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c640:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c644:	b29b      	uxth	r3, r3
 800c646:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800c648:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c64c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c650:	681b      	ldr	r3, [r3, #0]
 800c652:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c654:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c658:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c65c:	681b      	ldr	r3, [r3, #0]
 800c65e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c662:	b29b      	uxth	r3, r3
 800c664:	461a      	mov	r2, r3
 800c666:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c668:	4413      	add	r3, r2
 800c66a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c66c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c670:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c674:	681b      	ldr	r3, [r3, #0]
 800c676:	781b      	ldrb	r3, [r3, #0]
 800c678:	00da      	lsls	r2, r3, #3
 800c67a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c67c:	4413      	add	r3, r2
 800c67e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800c682:	65bb      	str	r3, [r7, #88]	; 0x58
 800c684:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c688:	b29a      	uxth	r2, r3
 800c68a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c68c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800c68e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c692:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c696:	681b      	ldr	r3, [r3, #0]
 800c698:	891b      	ldrh	r3, [r3, #8]
 800c69a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800c69e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c6a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c6a6:	681b      	ldr	r3, [r3, #0]
 800c6a8:	6959      	ldr	r1, [r3, #20]
 800c6aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c6ae:	b29b      	uxth	r3, r3
 800c6b0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800c6b4:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800c6b8:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800c6bc:	6800      	ldr	r0, [r0, #0]
 800c6be:	f000 ffb6 	bl	800d62e <USB_WritePMA>
 800c6c2:	e19f      	b.n	800ca04 <USB_EPStartXfer+0xcb6>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800c6c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c6c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c6cc:	681b      	ldr	r3, [r3, #0]
 800c6ce:	6a1a      	ldr	r2, [r3, #32]
 800c6d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c6d4:	1ad2      	subs	r2, r2, r3
 800c6d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c6da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c6de:	681b      	ldr	r3, [r3, #0]
 800c6e0:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800c6e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c6e6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c6ea:	681a      	ldr	r2, [r3, #0]
 800c6ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c6f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c6f4:	681b      	ldr	r3, [r3, #0]
 800c6f6:	781b      	ldrb	r3, [r3, #0]
 800c6f8:	009b      	lsls	r3, r3, #2
 800c6fa:	4413      	add	r3, r2
 800c6fc:	881b      	ldrh	r3, [r3, #0]
 800c6fe:	b29b      	uxth	r3, r3
 800c700:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c704:	2b00      	cmp	r3, #0
 800c706:	f000 80bc 	beq.w	800c882 <USB_EPStartXfer+0xb34>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800c70a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c70e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c712:	681b      	ldr	r3, [r3, #0]
 800c714:	673b      	str	r3, [r7, #112]	; 0x70
 800c716:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c71a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c71e:	681b      	ldr	r3, [r3, #0]
 800c720:	785b      	ldrb	r3, [r3, #1]
 800c722:	2b00      	cmp	r3, #0
 800c724:	d16d      	bne.n	800c802 <USB_EPStartXfer+0xab4>
 800c726:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c72a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c72e:	681b      	ldr	r3, [r3, #0]
 800c730:	66bb      	str	r3, [r7, #104]	; 0x68
 800c732:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c736:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c73a:	681b      	ldr	r3, [r3, #0]
 800c73c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c740:	b29b      	uxth	r3, r3
 800c742:	461a      	mov	r2, r3
 800c744:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c746:	4413      	add	r3, r2
 800c748:	66bb      	str	r3, [r7, #104]	; 0x68
 800c74a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c74e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c752:	681b      	ldr	r3, [r3, #0]
 800c754:	781b      	ldrb	r3, [r3, #0]
 800c756:	00da      	lsls	r2, r3, #3
 800c758:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c75a:	4413      	add	r3, r2
 800c75c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800c760:	667b      	str	r3, [r7, #100]	; 0x64
 800c762:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c766:	2b3e      	cmp	r3, #62	; 0x3e
 800c768:	d91c      	bls.n	800c7a4 <USB_EPStartXfer+0xa56>
 800c76a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c76e:	095b      	lsrs	r3, r3, #5
 800c770:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800c774:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c778:	f003 031f 	and.w	r3, r3, #31
 800c77c:	2b00      	cmp	r3, #0
 800c77e:	d104      	bne.n	800c78a <USB_EPStartXfer+0xa3c>
 800c780:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800c784:	3b01      	subs	r3, #1
 800c786:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800c78a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800c78e:	b29b      	uxth	r3, r3
 800c790:	029b      	lsls	r3, r3, #10
 800c792:	b29b      	uxth	r3, r3
 800c794:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c798:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c79c:	b29a      	uxth	r2, r3
 800c79e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c7a0:	801a      	strh	r2, [r3, #0]
 800c7a2:	e053      	b.n	800c84c <USB_EPStartXfer+0xafe>
 800c7a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c7a8:	2b00      	cmp	r3, #0
 800c7aa:	d112      	bne.n	800c7d2 <USB_EPStartXfer+0xa84>
 800c7ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c7ae:	881b      	ldrh	r3, [r3, #0]
 800c7b0:	b29b      	uxth	r3, r3
 800c7b2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800c7b6:	b29a      	uxth	r2, r3
 800c7b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c7ba:	801a      	strh	r2, [r3, #0]
 800c7bc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c7be:	881b      	ldrh	r3, [r3, #0]
 800c7c0:	b29b      	uxth	r3, r3
 800c7c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c7c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c7ca:	b29a      	uxth	r2, r3
 800c7cc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c7ce:	801a      	strh	r2, [r3, #0]
 800c7d0:	e03c      	b.n	800c84c <USB_EPStartXfer+0xafe>
 800c7d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c7d6:	085b      	lsrs	r3, r3, #1
 800c7d8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800c7dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c7e0:	f003 0301 	and.w	r3, r3, #1
 800c7e4:	2b00      	cmp	r3, #0
 800c7e6:	d004      	beq.n	800c7f2 <USB_EPStartXfer+0xaa4>
 800c7e8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800c7ec:	3301      	adds	r3, #1
 800c7ee:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800c7f2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800c7f6:	b29b      	uxth	r3, r3
 800c7f8:	029b      	lsls	r3, r3, #10
 800c7fa:	b29a      	uxth	r2, r3
 800c7fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c7fe:	801a      	strh	r2, [r3, #0]
 800c800:	e024      	b.n	800c84c <USB_EPStartXfer+0xafe>
 800c802:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c806:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c80a:	681b      	ldr	r3, [r3, #0]
 800c80c:	785b      	ldrb	r3, [r3, #1]
 800c80e:	2b01      	cmp	r3, #1
 800c810:	d11c      	bne.n	800c84c <USB_EPStartXfer+0xafe>
 800c812:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c816:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c81a:	681b      	ldr	r3, [r3, #0]
 800c81c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c820:	b29b      	uxth	r3, r3
 800c822:	461a      	mov	r2, r3
 800c824:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c826:	4413      	add	r3, r2
 800c828:	673b      	str	r3, [r7, #112]	; 0x70
 800c82a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c82e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c832:	681b      	ldr	r3, [r3, #0]
 800c834:	781b      	ldrb	r3, [r3, #0]
 800c836:	00da      	lsls	r2, r3, #3
 800c838:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c83a:	4413      	add	r3, r2
 800c83c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800c840:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c842:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c846:	b29a      	uxth	r2, r3
 800c848:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c84a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800c84c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c850:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c854:	681b      	ldr	r3, [r3, #0]
 800c856:	895b      	ldrh	r3, [r3, #10]
 800c858:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800c85c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c860:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c864:	681b      	ldr	r3, [r3, #0]
 800c866:	6959      	ldr	r1, [r3, #20]
 800c868:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c86c:	b29b      	uxth	r3, r3
 800c86e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800c872:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800c876:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800c87a:	6800      	ldr	r0, [r0, #0]
 800c87c:	f000 fed7 	bl	800d62e <USB_WritePMA>
 800c880:	e0c0      	b.n	800ca04 <USB_EPStartXfer+0xcb6>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800c882:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c886:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c88a:	681b      	ldr	r3, [r3, #0]
 800c88c:	785b      	ldrb	r3, [r3, #1]
 800c88e:	2b00      	cmp	r3, #0
 800c890:	d16d      	bne.n	800c96e <USB_EPStartXfer+0xc20>
 800c892:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c896:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c89a:	681b      	ldr	r3, [r3, #0]
 800c89c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800c89e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c8a2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c8a6:	681b      	ldr	r3, [r3, #0]
 800c8a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c8ac:	b29b      	uxth	r3, r3
 800c8ae:	461a      	mov	r2, r3
 800c8b0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c8b2:	4413      	add	r3, r2
 800c8b4:	67fb      	str	r3, [r7, #124]	; 0x7c
 800c8b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c8ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c8be:	681b      	ldr	r3, [r3, #0]
 800c8c0:	781b      	ldrb	r3, [r3, #0]
 800c8c2:	00da      	lsls	r2, r3, #3
 800c8c4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c8c6:	4413      	add	r3, r2
 800c8c8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800c8cc:	67bb      	str	r3, [r7, #120]	; 0x78
 800c8ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c8d2:	2b3e      	cmp	r3, #62	; 0x3e
 800c8d4:	d91c      	bls.n	800c910 <USB_EPStartXfer+0xbc2>
 800c8d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c8da:	095b      	lsrs	r3, r3, #5
 800c8dc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800c8e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c8e4:	f003 031f 	and.w	r3, r3, #31
 800c8e8:	2b00      	cmp	r3, #0
 800c8ea:	d104      	bne.n	800c8f6 <USB_EPStartXfer+0xba8>
 800c8ec:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800c8f0:	3b01      	subs	r3, #1
 800c8f2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800c8f6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800c8fa:	b29b      	uxth	r3, r3
 800c8fc:	029b      	lsls	r3, r3, #10
 800c8fe:	b29b      	uxth	r3, r3
 800c900:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c904:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c908:	b29a      	uxth	r2, r3
 800c90a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c90c:	801a      	strh	r2, [r3, #0]
 800c90e:	e05f      	b.n	800c9d0 <USB_EPStartXfer+0xc82>
 800c910:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c914:	2b00      	cmp	r3, #0
 800c916:	d112      	bne.n	800c93e <USB_EPStartXfer+0xbf0>
 800c918:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c91a:	881b      	ldrh	r3, [r3, #0]
 800c91c:	b29b      	uxth	r3, r3
 800c91e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800c922:	b29a      	uxth	r2, r3
 800c924:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c926:	801a      	strh	r2, [r3, #0]
 800c928:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c92a:	881b      	ldrh	r3, [r3, #0]
 800c92c:	b29b      	uxth	r3, r3
 800c92e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c932:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c936:	b29a      	uxth	r2, r3
 800c938:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c93a:	801a      	strh	r2, [r3, #0]
 800c93c:	e048      	b.n	800c9d0 <USB_EPStartXfer+0xc82>
 800c93e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c942:	085b      	lsrs	r3, r3, #1
 800c944:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800c948:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c94c:	f003 0301 	and.w	r3, r3, #1
 800c950:	2b00      	cmp	r3, #0
 800c952:	d004      	beq.n	800c95e <USB_EPStartXfer+0xc10>
 800c954:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800c958:	3301      	adds	r3, #1
 800c95a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800c95e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800c962:	b29b      	uxth	r3, r3
 800c964:	029b      	lsls	r3, r3, #10
 800c966:	b29a      	uxth	r2, r3
 800c968:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c96a:	801a      	strh	r2, [r3, #0]
 800c96c:	e030      	b.n	800c9d0 <USB_EPStartXfer+0xc82>
 800c96e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c972:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c976:	681b      	ldr	r3, [r3, #0]
 800c978:	785b      	ldrb	r3, [r3, #1]
 800c97a:	2b01      	cmp	r3, #1
 800c97c:	d128      	bne.n	800c9d0 <USB_EPStartXfer+0xc82>
 800c97e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c982:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c986:	681b      	ldr	r3, [r3, #0]
 800c988:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800c98c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c990:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c994:	681b      	ldr	r3, [r3, #0]
 800c996:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c99a:	b29b      	uxth	r3, r3
 800c99c:	461a      	mov	r2, r3
 800c99e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c9a2:	4413      	add	r3, r2
 800c9a4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800c9a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c9ac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c9b0:	681b      	ldr	r3, [r3, #0]
 800c9b2:	781b      	ldrb	r3, [r3, #0]
 800c9b4:	00da      	lsls	r2, r3, #3
 800c9b6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c9ba:	4413      	add	r3, r2
 800c9bc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800c9c0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800c9c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c9c8:	b29a      	uxth	r2, r3
 800c9ca:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800c9ce:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800c9d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c9d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c9d8:	681b      	ldr	r3, [r3, #0]
 800c9da:	891b      	ldrh	r3, [r3, #8]
 800c9dc:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800c9e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c9e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c9e8:	681b      	ldr	r3, [r3, #0]
 800c9ea:	6959      	ldr	r1, [r3, #20]
 800c9ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c9f0:	b29b      	uxth	r3, r3
 800c9f2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800c9f6:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800c9fa:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800c9fe:	6800      	ldr	r0, [r0, #0]
 800ca00:	f000 fe15 	bl	800d62e <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800ca04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ca08:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ca0c:	681a      	ldr	r2, [r3, #0]
 800ca0e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ca12:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ca16:	681b      	ldr	r3, [r3, #0]
 800ca18:	781b      	ldrb	r3, [r3, #0]
 800ca1a:	009b      	lsls	r3, r3, #2
 800ca1c:	4413      	add	r3, r2
 800ca1e:	881b      	ldrh	r3, [r3, #0]
 800ca20:	b29b      	uxth	r3, r3
 800ca22:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ca26:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ca2a:	817b      	strh	r3, [r7, #10]
 800ca2c:	897b      	ldrh	r3, [r7, #10]
 800ca2e:	f083 0310 	eor.w	r3, r3, #16
 800ca32:	817b      	strh	r3, [r7, #10]
 800ca34:	897b      	ldrh	r3, [r7, #10]
 800ca36:	f083 0320 	eor.w	r3, r3, #32
 800ca3a:	817b      	strh	r3, [r7, #10]
 800ca3c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ca40:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ca44:	681a      	ldr	r2, [r3, #0]
 800ca46:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ca4a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ca4e:	681b      	ldr	r3, [r3, #0]
 800ca50:	781b      	ldrb	r3, [r3, #0]
 800ca52:	009b      	lsls	r3, r3, #2
 800ca54:	441a      	add	r2, r3
 800ca56:	897b      	ldrh	r3, [r7, #10]
 800ca58:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ca5c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ca60:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ca64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ca68:	b29b      	uxth	r3, r3
 800ca6a:	8013      	strh	r3, [r2, #0]
 800ca6c:	f000 bc9f 	b.w	800d3ae <USB_EPStartXfer+0x1660>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800ca70:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ca74:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ca78:	681b      	ldr	r3, [r3, #0]
 800ca7a:	7b1b      	ldrb	r3, [r3, #12]
 800ca7c:	2b00      	cmp	r3, #0
 800ca7e:	f040 80ae 	bne.w	800cbde <USB_EPStartXfer+0xe90>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800ca82:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ca86:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ca8a:	681b      	ldr	r3, [r3, #0]
 800ca8c:	699a      	ldr	r2, [r3, #24]
 800ca8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ca92:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ca96:	681b      	ldr	r3, [r3, #0]
 800ca98:	691b      	ldr	r3, [r3, #16]
 800ca9a:	429a      	cmp	r2, r3
 800ca9c:	d917      	bls.n	800cace <USB_EPStartXfer+0xd80>
      {
        len = ep->maxpacket;
 800ca9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800caa2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800caa6:	681b      	ldr	r3, [r3, #0]
 800caa8:	691b      	ldr	r3, [r3, #16]
 800caaa:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 800caae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cab2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cab6:	681b      	ldr	r3, [r3, #0]
 800cab8:	699a      	ldr	r2, [r3, #24]
 800caba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cabe:	1ad2      	subs	r2, r2, r3
 800cac0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cac4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cac8:	681b      	ldr	r3, [r3, #0]
 800caca:	619a      	str	r2, [r3, #24]
 800cacc:	e00e      	b.n	800caec <USB_EPStartXfer+0xd9e>
      }
      else
      {
        len = ep->xfer_len;
 800cace:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cad2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cad6:	681b      	ldr	r3, [r3, #0]
 800cad8:	699b      	ldr	r3, [r3, #24]
 800cada:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 800cade:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cae2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cae6:	681b      	ldr	r3, [r3, #0]
 800cae8:	2200      	movs	r2, #0
 800caea:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800caec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800caf0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800caf4:	681b      	ldr	r3, [r3, #0]
 800caf6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800cafa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cafe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800cb02:	681b      	ldr	r3, [r3, #0]
 800cb04:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800cb08:	b29b      	uxth	r3, r3
 800cb0a:	461a      	mov	r2, r3
 800cb0c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800cb10:	4413      	add	r3, r2
 800cb12:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800cb16:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cb1a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cb1e:	681b      	ldr	r3, [r3, #0]
 800cb20:	781b      	ldrb	r3, [r3, #0]
 800cb22:	00da      	lsls	r2, r3, #3
 800cb24:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800cb28:	4413      	add	r3, r2
 800cb2a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800cb2e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800cb32:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cb36:	2b3e      	cmp	r3, #62	; 0x3e
 800cb38:	d91d      	bls.n	800cb76 <USB_EPStartXfer+0xe28>
 800cb3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cb3e:	095b      	lsrs	r3, r3, #5
 800cb40:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800cb44:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cb48:	f003 031f 	and.w	r3, r3, #31
 800cb4c:	2b00      	cmp	r3, #0
 800cb4e:	d104      	bne.n	800cb5a <USB_EPStartXfer+0xe0c>
 800cb50:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800cb54:	3b01      	subs	r3, #1
 800cb56:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800cb5a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800cb5e:	b29b      	uxth	r3, r3
 800cb60:	029b      	lsls	r3, r3, #10
 800cb62:	b29b      	uxth	r3, r3
 800cb64:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cb68:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cb6c:	b29a      	uxth	r2, r3
 800cb6e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800cb72:	801a      	strh	r2, [r3, #0]
 800cb74:	e3e1      	b.n	800d33a <USB_EPStartXfer+0x15ec>
 800cb76:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cb7a:	2b00      	cmp	r3, #0
 800cb7c:	d116      	bne.n	800cbac <USB_EPStartXfer+0xe5e>
 800cb7e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800cb82:	881b      	ldrh	r3, [r3, #0]
 800cb84:	b29b      	uxth	r3, r3
 800cb86:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800cb8a:	b29a      	uxth	r2, r3
 800cb8c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800cb90:	801a      	strh	r2, [r3, #0]
 800cb92:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800cb96:	881b      	ldrh	r3, [r3, #0]
 800cb98:	b29b      	uxth	r3, r3
 800cb9a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cb9e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cba2:	b29a      	uxth	r2, r3
 800cba4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800cba8:	801a      	strh	r2, [r3, #0]
 800cbaa:	e3c6      	b.n	800d33a <USB_EPStartXfer+0x15ec>
 800cbac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cbb0:	085b      	lsrs	r3, r3, #1
 800cbb2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800cbb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cbba:	f003 0301 	and.w	r3, r3, #1
 800cbbe:	2b00      	cmp	r3, #0
 800cbc0:	d004      	beq.n	800cbcc <USB_EPStartXfer+0xe7e>
 800cbc2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800cbc6:	3301      	adds	r3, #1
 800cbc8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800cbcc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800cbd0:	b29b      	uxth	r3, r3
 800cbd2:	029b      	lsls	r3, r3, #10
 800cbd4:	b29a      	uxth	r2, r3
 800cbd6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800cbda:	801a      	strh	r2, [r3, #0]
 800cbdc:	e3ad      	b.n	800d33a <USB_EPStartXfer+0x15ec>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800cbde:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cbe2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cbe6:	681b      	ldr	r3, [r3, #0]
 800cbe8:	78db      	ldrb	r3, [r3, #3]
 800cbea:	2b02      	cmp	r3, #2
 800cbec:	f040 8200 	bne.w	800cff0 <USB_EPStartXfer+0x12a2>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800cbf0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cbf4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cbf8:	681b      	ldr	r3, [r3, #0]
 800cbfa:	785b      	ldrb	r3, [r3, #1]
 800cbfc:	2b00      	cmp	r3, #0
 800cbfe:	f040 8091 	bne.w	800cd24 <USB_EPStartXfer+0xfd6>
 800cc02:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cc06:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800cc0a:	681b      	ldr	r3, [r3, #0]
 800cc0c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800cc10:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cc14:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800cc18:	681b      	ldr	r3, [r3, #0]
 800cc1a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800cc1e:	b29b      	uxth	r3, r3
 800cc20:	461a      	mov	r2, r3
 800cc22:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800cc26:	4413      	add	r3, r2
 800cc28:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800cc2c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cc30:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cc34:	681b      	ldr	r3, [r3, #0]
 800cc36:	781b      	ldrb	r3, [r3, #0]
 800cc38:	00da      	lsls	r2, r3, #3
 800cc3a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800cc3e:	4413      	add	r3, r2
 800cc40:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800cc44:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800cc48:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cc4c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cc50:	681b      	ldr	r3, [r3, #0]
 800cc52:	691b      	ldr	r3, [r3, #16]
 800cc54:	2b3e      	cmp	r3, #62	; 0x3e
 800cc56:	d925      	bls.n	800cca4 <USB_EPStartXfer+0xf56>
 800cc58:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cc5c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cc60:	681b      	ldr	r3, [r3, #0]
 800cc62:	691b      	ldr	r3, [r3, #16]
 800cc64:	095b      	lsrs	r3, r3, #5
 800cc66:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800cc6a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cc6e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cc72:	681b      	ldr	r3, [r3, #0]
 800cc74:	691b      	ldr	r3, [r3, #16]
 800cc76:	f003 031f 	and.w	r3, r3, #31
 800cc7a:	2b00      	cmp	r3, #0
 800cc7c:	d104      	bne.n	800cc88 <USB_EPStartXfer+0xf3a>
 800cc7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cc82:	3b01      	subs	r3, #1
 800cc84:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800cc88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cc8c:	b29b      	uxth	r3, r3
 800cc8e:	029b      	lsls	r3, r3, #10
 800cc90:	b29b      	uxth	r3, r3
 800cc92:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cc96:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cc9a:	b29a      	uxth	r2, r3
 800cc9c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800cca0:	801a      	strh	r2, [r3, #0]
 800cca2:	e074      	b.n	800cd8e <USB_EPStartXfer+0x1040>
 800cca4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cca8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ccac:	681b      	ldr	r3, [r3, #0]
 800ccae:	691b      	ldr	r3, [r3, #16]
 800ccb0:	2b00      	cmp	r3, #0
 800ccb2:	d116      	bne.n	800cce2 <USB_EPStartXfer+0xf94>
 800ccb4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800ccb8:	881b      	ldrh	r3, [r3, #0]
 800ccba:	b29b      	uxth	r3, r3
 800ccbc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800ccc0:	b29a      	uxth	r2, r3
 800ccc2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800ccc6:	801a      	strh	r2, [r3, #0]
 800ccc8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800cccc:	881b      	ldrh	r3, [r3, #0]
 800ccce:	b29b      	uxth	r3, r3
 800ccd0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ccd4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ccd8:	b29a      	uxth	r2, r3
 800ccda:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800ccde:	801a      	strh	r2, [r3, #0]
 800cce0:	e055      	b.n	800cd8e <USB_EPStartXfer+0x1040>
 800cce2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cce6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ccea:	681b      	ldr	r3, [r3, #0]
 800ccec:	691b      	ldr	r3, [r3, #16]
 800ccee:	085b      	lsrs	r3, r3, #1
 800ccf0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800ccf4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ccf8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ccfc:	681b      	ldr	r3, [r3, #0]
 800ccfe:	691b      	ldr	r3, [r3, #16]
 800cd00:	f003 0301 	and.w	r3, r3, #1
 800cd04:	2b00      	cmp	r3, #0
 800cd06:	d004      	beq.n	800cd12 <USB_EPStartXfer+0xfc4>
 800cd08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cd0c:	3301      	adds	r3, #1
 800cd0e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800cd12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cd16:	b29b      	uxth	r3, r3
 800cd18:	029b      	lsls	r3, r3, #10
 800cd1a:	b29a      	uxth	r2, r3
 800cd1c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800cd20:	801a      	strh	r2, [r3, #0]
 800cd22:	e034      	b.n	800cd8e <USB_EPStartXfer+0x1040>
 800cd24:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cd28:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cd2c:	681b      	ldr	r3, [r3, #0]
 800cd2e:	785b      	ldrb	r3, [r3, #1]
 800cd30:	2b01      	cmp	r3, #1
 800cd32:	d12c      	bne.n	800cd8e <USB_EPStartXfer+0x1040>
 800cd34:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cd38:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800cd3c:	681b      	ldr	r3, [r3, #0]
 800cd3e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800cd42:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cd46:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800cd4a:	681b      	ldr	r3, [r3, #0]
 800cd4c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800cd50:	b29b      	uxth	r3, r3
 800cd52:	461a      	mov	r2, r3
 800cd54:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800cd58:	4413      	add	r3, r2
 800cd5a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800cd5e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cd62:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cd66:	681b      	ldr	r3, [r3, #0]
 800cd68:	781b      	ldrb	r3, [r3, #0]
 800cd6a:	00da      	lsls	r2, r3, #3
 800cd6c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800cd70:	4413      	add	r3, r2
 800cd72:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800cd76:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800cd7a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cd7e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cd82:	681b      	ldr	r3, [r3, #0]
 800cd84:	691b      	ldr	r3, [r3, #16]
 800cd86:	b29a      	uxth	r2, r3
 800cd88:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800cd8c:	801a      	strh	r2, [r3, #0]
 800cd8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cd92:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800cd96:	681b      	ldr	r3, [r3, #0]
 800cd98:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800cd9c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cda0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cda4:	681b      	ldr	r3, [r3, #0]
 800cda6:	785b      	ldrb	r3, [r3, #1]
 800cda8:	2b00      	cmp	r3, #0
 800cdaa:	f040 8091 	bne.w	800ced0 <USB_EPStartXfer+0x1182>
 800cdae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cdb2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800cdb6:	681b      	ldr	r3, [r3, #0]
 800cdb8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800cdbc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cdc0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800cdc4:	681b      	ldr	r3, [r3, #0]
 800cdc6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800cdca:	b29b      	uxth	r3, r3
 800cdcc:	461a      	mov	r2, r3
 800cdce:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800cdd2:	4413      	add	r3, r2
 800cdd4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800cdd8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cddc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cde0:	681b      	ldr	r3, [r3, #0]
 800cde2:	781b      	ldrb	r3, [r3, #0]
 800cde4:	00da      	lsls	r2, r3, #3
 800cde6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800cdea:	4413      	add	r3, r2
 800cdec:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800cdf0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800cdf4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cdf8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cdfc:	681b      	ldr	r3, [r3, #0]
 800cdfe:	691b      	ldr	r3, [r3, #16]
 800ce00:	2b3e      	cmp	r3, #62	; 0x3e
 800ce02:	d925      	bls.n	800ce50 <USB_EPStartXfer+0x1102>
 800ce04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ce08:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ce0c:	681b      	ldr	r3, [r3, #0]
 800ce0e:	691b      	ldr	r3, [r3, #16]
 800ce10:	095b      	lsrs	r3, r3, #5
 800ce12:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800ce16:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ce1a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ce1e:	681b      	ldr	r3, [r3, #0]
 800ce20:	691b      	ldr	r3, [r3, #16]
 800ce22:	f003 031f 	and.w	r3, r3, #31
 800ce26:	2b00      	cmp	r3, #0
 800ce28:	d104      	bne.n	800ce34 <USB_EPStartXfer+0x10e6>
 800ce2a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ce2e:	3b01      	subs	r3, #1
 800ce30:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800ce34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ce38:	b29b      	uxth	r3, r3
 800ce3a:	029b      	lsls	r3, r3, #10
 800ce3c:	b29b      	uxth	r3, r3
 800ce3e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ce42:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ce46:	b29a      	uxth	r2, r3
 800ce48:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800ce4c:	801a      	strh	r2, [r3, #0]
 800ce4e:	e06d      	b.n	800cf2c <USB_EPStartXfer+0x11de>
 800ce50:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ce54:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ce58:	681b      	ldr	r3, [r3, #0]
 800ce5a:	691b      	ldr	r3, [r3, #16]
 800ce5c:	2b00      	cmp	r3, #0
 800ce5e:	d116      	bne.n	800ce8e <USB_EPStartXfer+0x1140>
 800ce60:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800ce64:	881b      	ldrh	r3, [r3, #0]
 800ce66:	b29b      	uxth	r3, r3
 800ce68:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800ce6c:	b29a      	uxth	r2, r3
 800ce6e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800ce72:	801a      	strh	r2, [r3, #0]
 800ce74:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800ce78:	881b      	ldrh	r3, [r3, #0]
 800ce7a:	b29b      	uxth	r3, r3
 800ce7c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ce80:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ce84:	b29a      	uxth	r2, r3
 800ce86:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800ce8a:	801a      	strh	r2, [r3, #0]
 800ce8c:	e04e      	b.n	800cf2c <USB_EPStartXfer+0x11de>
 800ce8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ce92:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ce96:	681b      	ldr	r3, [r3, #0]
 800ce98:	691b      	ldr	r3, [r3, #16]
 800ce9a:	085b      	lsrs	r3, r3, #1
 800ce9c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800cea0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cea4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cea8:	681b      	ldr	r3, [r3, #0]
 800ceaa:	691b      	ldr	r3, [r3, #16]
 800ceac:	f003 0301 	and.w	r3, r3, #1
 800ceb0:	2b00      	cmp	r3, #0
 800ceb2:	d004      	beq.n	800cebe <USB_EPStartXfer+0x1170>
 800ceb4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ceb8:	3301      	adds	r3, #1
 800ceba:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800cebe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cec2:	b29b      	uxth	r3, r3
 800cec4:	029b      	lsls	r3, r3, #10
 800cec6:	b29a      	uxth	r2, r3
 800cec8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800cecc:	801a      	strh	r2, [r3, #0]
 800cece:	e02d      	b.n	800cf2c <USB_EPStartXfer+0x11de>
 800ced0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ced4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ced8:	681b      	ldr	r3, [r3, #0]
 800ceda:	785b      	ldrb	r3, [r3, #1]
 800cedc:	2b01      	cmp	r3, #1
 800cede:	d125      	bne.n	800cf2c <USB_EPStartXfer+0x11de>
 800cee0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cee4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800cee8:	681b      	ldr	r3, [r3, #0]
 800ceea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ceee:	b29b      	uxth	r3, r3
 800cef0:	461a      	mov	r2, r3
 800cef2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800cef6:	4413      	add	r3, r2
 800cef8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800cefc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cf00:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cf04:	681b      	ldr	r3, [r3, #0]
 800cf06:	781b      	ldrb	r3, [r3, #0]
 800cf08:	00da      	lsls	r2, r3, #3
 800cf0a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800cf0e:	4413      	add	r3, r2
 800cf10:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800cf14:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800cf18:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cf1c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cf20:	681b      	ldr	r3, [r3, #0]
 800cf22:	691b      	ldr	r3, [r3, #16]
 800cf24:	b29a      	uxth	r2, r3
 800cf26:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800cf2a:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800cf2c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cf30:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cf34:	681b      	ldr	r3, [r3, #0]
 800cf36:	69db      	ldr	r3, [r3, #28]
 800cf38:	2b00      	cmp	r3, #0
 800cf3a:	f000 81fe 	beq.w	800d33a <USB_EPStartXfer+0x15ec>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800cf3e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cf42:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800cf46:	681a      	ldr	r2, [r3, #0]
 800cf48:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cf4c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cf50:	681b      	ldr	r3, [r3, #0]
 800cf52:	781b      	ldrb	r3, [r3, #0]
 800cf54:	009b      	lsls	r3, r3, #2
 800cf56:	4413      	add	r3, r2
 800cf58:	881b      	ldrh	r3, [r3, #0]
 800cf5a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800cf5e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800cf62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800cf66:	2b00      	cmp	r3, #0
 800cf68:	d005      	beq.n	800cf76 <USB_EPStartXfer+0x1228>
 800cf6a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800cf6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cf72:	2b00      	cmp	r3, #0
 800cf74:	d10d      	bne.n	800cf92 <USB_EPStartXfer+0x1244>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800cf76:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800cf7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800cf7e:	2b00      	cmp	r3, #0
 800cf80:	f040 81db 	bne.w	800d33a <USB_EPStartXfer+0x15ec>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800cf84:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800cf88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cf8c:	2b00      	cmp	r3, #0
 800cf8e:	f040 81d4 	bne.w	800d33a <USB_EPStartXfer+0x15ec>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800cf92:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cf96:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800cf9a:	681a      	ldr	r2, [r3, #0]
 800cf9c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cfa0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cfa4:	681b      	ldr	r3, [r3, #0]
 800cfa6:	781b      	ldrb	r3, [r3, #0]
 800cfa8:	009b      	lsls	r3, r3, #2
 800cfaa:	4413      	add	r3, r2
 800cfac:	881b      	ldrh	r3, [r3, #0]
 800cfae:	b29b      	uxth	r3, r3
 800cfb0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800cfb4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cfb8:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 800cfbc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cfc0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800cfc4:	681a      	ldr	r2, [r3, #0]
 800cfc6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cfca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cfce:	681b      	ldr	r3, [r3, #0]
 800cfd0:	781b      	ldrb	r3, [r3, #0]
 800cfd2:	009b      	lsls	r3, r3, #2
 800cfd4:	441a      	add	r2, r3
 800cfd6:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 800cfda:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800cfde:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800cfe2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cfe6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800cfea:	b29b      	uxth	r3, r3
 800cfec:	8013      	strh	r3, [r2, #0]
 800cfee:	e1a4      	b.n	800d33a <USB_EPStartXfer+0x15ec>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800cff0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cff4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cff8:	681b      	ldr	r3, [r3, #0]
 800cffa:	78db      	ldrb	r3, [r3, #3]
 800cffc:	2b01      	cmp	r3, #1
 800cffe:	f040 819a 	bne.w	800d336 <USB_EPStartXfer+0x15e8>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800d002:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d006:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d00a:	681b      	ldr	r3, [r3, #0]
 800d00c:	699a      	ldr	r2, [r3, #24]
 800d00e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d012:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d016:	681b      	ldr	r3, [r3, #0]
 800d018:	691b      	ldr	r3, [r3, #16]
 800d01a:	429a      	cmp	r2, r3
 800d01c:	d917      	bls.n	800d04e <USB_EPStartXfer+0x1300>
        {
          len = ep->maxpacket;
 800d01e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d022:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d026:	681b      	ldr	r3, [r3, #0]
 800d028:	691b      	ldr	r3, [r3, #16]
 800d02a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 800d02e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d032:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d036:	681b      	ldr	r3, [r3, #0]
 800d038:	699a      	ldr	r2, [r3, #24]
 800d03a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d03e:	1ad2      	subs	r2, r2, r3
 800d040:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d044:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d048:	681b      	ldr	r3, [r3, #0]
 800d04a:	619a      	str	r2, [r3, #24]
 800d04c:	e00e      	b.n	800d06c <USB_EPStartXfer+0x131e>
        }
        else
        {
          len = ep->xfer_len;
 800d04e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d052:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d056:	681b      	ldr	r3, [r3, #0]
 800d058:	699b      	ldr	r3, [r3, #24]
 800d05a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 800d05e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d062:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d066:	681b      	ldr	r3, [r3, #0]
 800d068:	2200      	movs	r2, #0
 800d06a:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800d06c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d070:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d074:	681b      	ldr	r3, [r3, #0]
 800d076:	785b      	ldrb	r3, [r3, #1]
 800d078:	2b00      	cmp	r3, #0
 800d07a:	d178      	bne.n	800d16e <USB_EPStartXfer+0x1420>
 800d07c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d080:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d084:	681b      	ldr	r3, [r3, #0]
 800d086:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800d08a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d08e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d092:	681b      	ldr	r3, [r3, #0]
 800d094:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d098:	b29b      	uxth	r3, r3
 800d09a:	461a      	mov	r2, r3
 800d09c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800d0a0:	4413      	add	r3, r2
 800d0a2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800d0a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d0aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d0ae:	681b      	ldr	r3, [r3, #0]
 800d0b0:	781b      	ldrb	r3, [r3, #0]
 800d0b2:	00da      	lsls	r2, r3, #3
 800d0b4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800d0b8:	4413      	add	r3, r2
 800d0ba:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800d0be:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800d0c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d0c6:	2b3e      	cmp	r3, #62	; 0x3e
 800d0c8:	d91d      	bls.n	800d106 <USB_EPStartXfer+0x13b8>
 800d0ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d0ce:	095b      	lsrs	r3, r3, #5
 800d0d0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800d0d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d0d8:	f003 031f 	and.w	r3, r3, #31
 800d0dc:	2b00      	cmp	r3, #0
 800d0de:	d104      	bne.n	800d0ea <USB_EPStartXfer+0x139c>
 800d0e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d0e4:	3b01      	subs	r3, #1
 800d0e6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800d0ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d0ee:	b29b      	uxth	r3, r3
 800d0f0:	029b      	lsls	r3, r3, #10
 800d0f2:	b29b      	uxth	r3, r3
 800d0f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d0f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d0fc:	b29a      	uxth	r2, r3
 800d0fe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800d102:	801a      	strh	r2, [r3, #0]
 800d104:	e064      	b.n	800d1d0 <USB_EPStartXfer+0x1482>
 800d106:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d10a:	2b00      	cmp	r3, #0
 800d10c:	d116      	bne.n	800d13c <USB_EPStartXfer+0x13ee>
 800d10e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800d112:	881b      	ldrh	r3, [r3, #0]
 800d114:	b29b      	uxth	r3, r3
 800d116:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800d11a:	b29a      	uxth	r2, r3
 800d11c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800d120:	801a      	strh	r2, [r3, #0]
 800d122:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800d126:	881b      	ldrh	r3, [r3, #0]
 800d128:	b29b      	uxth	r3, r3
 800d12a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d12e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d132:	b29a      	uxth	r2, r3
 800d134:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800d138:	801a      	strh	r2, [r3, #0]
 800d13a:	e049      	b.n	800d1d0 <USB_EPStartXfer+0x1482>
 800d13c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d140:	085b      	lsrs	r3, r3, #1
 800d142:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800d146:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d14a:	f003 0301 	and.w	r3, r3, #1
 800d14e:	2b00      	cmp	r3, #0
 800d150:	d004      	beq.n	800d15c <USB_EPStartXfer+0x140e>
 800d152:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d156:	3301      	adds	r3, #1
 800d158:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800d15c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d160:	b29b      	uxth	r3, r3
 800d162:	029b      	lsls	r3, r3, #10
 800d164:	b29a      	uxth	r2, r3
 800d166:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800d16a:	801a      	strh	r2, [r3, #0]
 800d16c:	e030      	b.n	800d1d0 <USB_EPStartXfer+0x1482>
 800d16e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d172:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d176:	681b      	ldr	r3, [r3, #0]
 800d178:	785b      	ldrb	r3, [r3, #1]
 800d17a:	2b01      	cmp	r3, #1
 800d17c:	d128      	bne.n	800d1d0 <USB_EPStartXfer+0x1482>
 800d17e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d182:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d186:	681b      	ldr	r3, [r3, #0]
 800d188:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800d18c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d190:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d194:	681b      	ldr	r3, [r3, #0]
 800d196:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d19a:	b29b      	uxth	r3, r3
 800d19c:	461a      	mov	r2, r3
 800d19e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d1a2:	4413      	add	r3, r2
 800d1a4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800d1a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d1ac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d1b0:	681b      	ldr	r3, [r3, #0]
 800d1b2:	781b      	ldrb	r3, [r3, #0]
 800d1b4:	00da      	lsls	r2, r3, #3
 800d1b6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d1ba:	4413      	add	r3, r2
 800d1bc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800d1c0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800d1c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d1c8:	b29a      	uxth	r2, r3
 800d1ca:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800d1ce:	801a      	strh	r2, [r3, #0]
 800d1d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d1d4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d1d8:	681b      	ldr	r3, [r3, #0]
 800d1da:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800d1de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d1e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d1e6:	681b      	ldr	r3, [r3, #0]
 800d1e8:	785b      	ldrb	r3, [r3, #1]
 800d1ea:	2b00      	cmp	r3, #0
 800d1ec:	d178      	bne.n	800d2e0 <USB_EPStartXfer+0x1592>
 800d1ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d1f2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d1f6:	681b      	ldr	r3, [r3, #0]
 800d1f8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800d1fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d200:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d204:	681b      	ldr	r3, [r3, #0]
 800d206:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d20a:	b29b      	uxth	r3, r3
 800d20c:	461a      	mov	r2, r3
 800d20e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800d212:	4413      	add	r3, r2
 800d214:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800d218:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d21c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d220:	681b      	ldr	r3, [r3, #0]
 800d222:	781b      	ldrb	r3, [r3, #0]
 800d224:	00da      	lsls	r2, r3, #3
 800d226:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800d22a:	4413      	add	r3, r2
 800d22c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800d230:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800d234:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d238:	2b3e      	cmp	r3, #62	; 0x3e
 800d23a:	d91d      	bls.n	800d278 <USB_EPStartXfer+0x152a>
 800d23c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d240:	095b      	lsrs	r3, r3, #5
 800d242:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800d246:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d24a:	f003 031f 	and.w	r3, r3, #31
 800d24e:	2b00      	cmp	r3, #0
 800d250:	d104      	bne.n	800d25c <USB_EPStartXfer+0x150e>
 800d252:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800d256:	3b01      	subs	r3, #1
 800d258:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800d25c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800d260:	b29b      	uxth	r3, r3
 800d262:	029b      	lsls	r3, r3, #10
 800d264:	b29b      	uxth	r3, r3
 800d266:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d26a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d26e:	b29a      	uxth	r2, r3
 800d270:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800d274:	801a      	strh	r2, [r3, #0]
 800d276:	e060      	b.n	800d33a <USB_EPStartXfer+0x15ec>
 800d278:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d27c:	2b00      	cmp	r3, #0
 800d27e:	d116      	bne.n	800d2ae <USB_EPStartXfer+0x1560>
 800d280:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800d284:	881b      	ldrh	r3, [r3, #0]
 800d286:	b29b      	uxth	r3, r3
 800d288:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800d28c:	b29a      	uxth	r2, r3
 800d28e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800d292:	801a      	strh	r2, [r3, #0]
 800d294:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800d298:	881b      	ldrh	r3, [r3, #0]
 800d29a:	b29b      	uxth	r3, r3
 800d29c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d2a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d2a4:	b29a      	uxth	r2, r3
 800d2a6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800d2aa:	801a      	strh	r2, [r3, #0]
 800d2ac:	e045      	b.n	800d33a <USB_EPStartXfer+0x15ec>
 800d2ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d2b2:	085b      	lsrs	r3, r3, #1
 800d2b4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800d2b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d2bc:	f003 0301 	and.w	r3, r3, #1
 800d2c0:	2b00      	cmp	r3, #0
 800d2c2:	d004      	beq.n	800d2ce <USB_EPStartXfer+0x1580>
 800d2c4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800d2c8:	3301      	adds	r3, #1
 800d2ca:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800d2ce:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800d2d2:	b29b      	uxth	r3, r3
 800d2d4:	029b      	lsls	r3, r3, #10
 800d2d6:	b29a      	uxth	r2, r3
 800d2d8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800d2dc:	801a      	strh	r2, [r3, #0]
 800d2de:	e02c      	b.n	800d33a <USB_EPStartXfer+0x15ec>
 800d2e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d2e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d2e8:	681b      	ldr	r3, [r3, #0]
 800d2ea:	785b      	ldrb	r3, [r3, #1]
 800d2ec:	2b01      	cmp	r3, #1
 800d2ee:	d124      	bne.n	800d33a <USB_EPStartXfer+0x15ec>
 800d2f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d2f4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d2f8:	681b      	ldr	r3, [r3, #0]
 800d2fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d2fe:	b29b      	uxth	r3, r3
 800d300:	461a      	mov	r2, r3
 800d302:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800d306:	4413      	add	r3, r2
 800d308:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800d30c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d310:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d314:	681b      	ldr	r3, [r3, #0]
 800d316:	781b      	ldrb	r3, [r3, #0]
 800d318:	00da      	lsls	r2, r3, #3
 800d31a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800d31e:	4413      	add	r3, r2
 800d320:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800d324:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800d328:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800d32c:	b29a      	uxth	r2, r3
 800d32e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800d332:	801a      	strh	r2, [r3, #0]
 800d334:	e001      	b.n	800d33a <USB_EPStartXfer+0x15ec>
      }
      else
      {
        return HAL_ERROR;
 800d336:	2301      	movs	r3, #1
 800d338:	e03a      	b.n	800d3b0 <USB_EPStartXfer+0x1662>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800d33a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d33e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d342:	681a      	ldr	r2, [r3, #0]
 800d344:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d348:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d34c:	681b      	ldr	r3, [r3, #0]
 800d34e:	781b      	ldrb	r3, [r3, #0]
 800d350:	009b      	lsls	r3, r3, #2
 800d352:	4413      	add	r3, r2
 800d354:	881b      	ldrh	r3, [r3, #0]
 800d356:	b29b      	uxth	r3, r3
 800d358:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800d35c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d360:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800d364:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800d368:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800d36c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800d370:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800d374:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800d378:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800d37c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d380:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800d384:	681a      	ldr	r2, [r3, #0]
 800d386:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800d38a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800d38e:	681b      	ldr	r3, [r3, #0]
 800d390:	781b      	ldrb	r3, [r3, #0]
 800d392:	009b      	lsls	r3, r3, #2
 800d394:	441a      	add	r2, r3
 800d396:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800d39a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d39e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d3a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d3a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d3aa:	b29b      	uxth	r3, r3
 800d3ac:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800d3ae:	2300      	movs	r3, #0
}
 800d3b0:	4618      	mov	r0, r3
 800d3b2:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800d3b6:	46bd      	mov	sp, r7
 800d3b8:	bd80      	pop	{r7, pc}

0800d3ba <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800d3ba:	b480      	push	{r7}
 800d3bc:	b085      	sub	sp, #20
 800d3be:	af00      	add	r7, sp, #0
 800d3c0:	6078      	str	r0, [r7, #4]
 800d3c2:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800d3c4:	683b      	ldr	r3, [r7, #0]
 800d3c6:	785b      	ldrb	r3, [r3, #1]
 800d3c8:	2b00      	cmp	r3, #0
 800d3ca:	d020      	beq.n	800d40e <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800d3cc:	687a      	ldr	r2, [r7, #4]
 800d3ce:	683b      	ldr	r3, [r7, #0]
 800d3d0:	781b      	ldrb	r3, [r3, #0]
 800d3d2:	009b      	lsls	r3, r3, #2
 800d3d4:	4413      	add	r3, r2
 800d3d6:	881b      	ldrh	r3, [r3, #0]
 800d3d8:	b29b      	uxth	r3, r3
 800d3da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d3de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d3e2:	81bb      	strh	r3, [r7, #12]
 800d3e4:	89bb      	ldrh	r3, [r7, #12]
 800d3e6:	f083 0310 	eor.w	r3, r3, #16
 800d3ea:	81bb      	strh	r3, [r7, #12]
 800d3ec:	687a      	ldr	r2, [r7, #4]
 800d3ee:	683b      	ldr	r3, [r7, #0]
 800d3f0:	781b      	ldrb	r3, [r3, #0]
 800d3f2:	009b      	lsls	r3, r3, #2
 800d3f4:	441a      	add	r2, r3
 800d3f6:	89bb      	ldrh	r3, [r7, #12]
 800d3f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d3fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d400:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d404:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d408:	b29b      	uxth	r3, r3
 800d40a:	8013      	strh	r3, [r2, #0]
 800d40c:	e01f      	b.n	800d44e <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800d40e:	687a      	ldr	r2, [r7, #4]
 800d410:	683b      	ldr	r3, [r7, #0]
 800d412:	781b      	ldrb	r3, [r3, #0]
 800d414:	009b      	lsls	r3, r3, #2
 800d416:	4413      	add	r3, r2
 800d418:	881b      	ldrh	r3, [r3, #0]
 800d41a:	b29b      	uxth	r3, r3
 800d41c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800d420:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d424:	81fb      	strh	r3, [r7, #14]
 800d426:	89fb      	ldrh	r3, [r7, #14]
 800d428:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800d42c:	81fb      	strh	r3, [r7, #14]
 800d42e:	687a      	ldr	r2, [r7, #4]
 800d430:	683b      	ldr	r3, [r7, #0]
 800d432:	781b      	ldrb	r3, [r3, #0]
 800d434:	009b      	lsls	r3, r3, #2
 800d436:	441a      	add	r2, r3
 800d438:	89fb      	ldrh	r3, [r7, #14]
 800d43a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d43e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d442:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d446:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d44a:	b29b      	uxth	r3, r3
 800d44c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800d44e:	2300      	movs	r3, #0
}
 800d450:	4618      	mov	r0, r3
 800d452:	3714      	adds	r7, #20
 800d454:	46bd      	mov	sp, r7
 800d456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d45a:	4770      	bx	lr

0800d45c <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800d45c:	b480      	push	{r7}
 800d45e:	b087      	sub	sp, #28
 800d460:	af00      	add	r7, sp, #0
 800d462:	6078      	str	r0, [r7, #4]
 800d464:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800d466:	683b      	ldr	r3, [r7, #0]
 800d468:	7b1b      	ldrb	r3, [r3, #12]
 800d46a:	2b00      	cmp	r3, #0
 800d46c:	f040 809d 	bne.w	800d5aa <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800d470:	683b      	ldr	r3, [r7, #0]
 800d472:	785b      	ldrb	r3, [r3, #1]
 800d474:	2b00      	cmp	r3, #0
 800d476:	d04c      	beq.n	800d512 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800d478:	687a      	ldr	r2, [r7, #4]
 800d47a:	683b      	ldr	r3, [r7, #0]
 800d47c:	781b      	ldrb	r3, [r3, #0]
 800d47e:	009b      	lsls	r3, r3, #2
 800d480:	4413      	add	r3, r2
 800d482:	881b      	ldrh	r3, [r3, #0]
 800d484:	823b      	strh	r3, [r7, #16]
 800d486:	8a3b      	ldrh	r3, [r7, #16]
 800d488:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d48c:	2b00      	cmp	r3, #0
 800d48e:	d01b      	beq.n	800d4c8 <USB_EPClearStall+0x6c>
 800d490:	687a      	ldr	r2, [r7, #4]
 800d492:	683b      	ldr	r3, [r7, #0]
 800d494:	781b      	ldrb	r3, [r3, #0]
 800d496:	009b      	lsls	r3, r3, #2
 800d498:	4413      	add	r3, r2
 800d49a:	881b      	ldrh	r3, [r3, #0]
 800d49c:	b29b      	uxth	r3, r3
 800d49e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d4a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d4a6:	81fb      	strh	r3, [r7, #14]
 800d4a8:	687a      	ldr	r2, [r7, #4]
 800d4aa:	683b      	ldr	r3, [r7, #0]
 800d4ac:	781b      	ldrb	r3, [r3, #0]
 800d4ae:	009b      	lsls	r3, r3, #2
 800d4b0:	441a      	add	r2, r3
 800d4b2:	89fb      	ldrh	r3, [r7, #14]
 800d4b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d4b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d4bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d4c0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800d4c4:	b29b      	uxth	r3, r3
 800d4c6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800d4c8:	683b      	ldr	r3, [r7, #0]
 800d4ca:	78db      	ldrb	r3, [r3, #3]
 800d4cc:	2b01      	cmp	r3, #1
 800d4ce:	d06c      	beq.n	800d5aa <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800d4d0:	687a      	ldr	r2, [r7, #4]
 800d4d2:	683b      	ldr	r3, [r7, #0]
 800d4d4:	781b      	ldrb	r3, [r3, #0]
 800d4d6:	009b      	lsls	r3, r3, #2
 800d4d8:	4413      	add	r3, r2
 800d4da:	881b      	ldrh	r3, [r3, #0]
 800d4dc:	b29b      	uxth	r3, r3
 800d4de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d4e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d4e6:	81bb      	strh	r3, [r7, #12]
 800d4e8:	89bb      	ldrh	r3, [r7, #12]
 800d4ea:	f083 0320 	eor.w	r3, r3, #32
 800d4ee:	81bb      	strh	r3, [r7, #12]
 800d4f0:	687a      	ldr	r2, [r7, #4]
 800d4f2:	683b      	ldr	r3, [r7, #0]
 800d4f4:	781b      	ldrb	r3, [r3, #0]
 800d4f6:	009b      	lsls	r3, r3, #2
 800d4f8:	441a      	add	r2, r3
 800d4fa:	89bb      	ldrh	r3, [r7, #12]
 800d4fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d500:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d504:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d508:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d50c:	b29b      	uxth	r3, r3
 800d50e:	8013      	strh	r3, [r2, #0]
 800d510:	e04b      	b.n	800d5aa <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800d512:	687a      	ldr	r2, [r7, #4]
 800d514:	683b      	ldr	r3, [r7, #0]
 800d516:	781b      	ldrb	r3, [r3, #0]
 800d518:	009b      	lsls	r3, r3, #2
 800d51a:	4413      	add	r3, r2
 800d51c:	881b      	ldrh	r3, [r3, #0]
 800d51e:	82fb      	strh	r3, [r7, #22]
 800d520:	8afb      	ldrh	r3, [r7, #22]
 800d522:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d526:	2b00      	cmp	r3, #0
 800d528:	d01b      	beq.n	800d562 <USB_EPClearStall+0x106>
 800d52a:	687a      	ldr	r2, [r7, #4]
 800d52c:	683b      	ldr	r3, [r7, #0]
 800d52e:	781b      	ldrb	r3, [r3, #0]
 800d530:	009b      	lsls	r3, r3, #2
 800d532:	4413      	add	r3, r2
 800d534:	881b      	ldrh	r3, [r3, #0]
 800d536:	b29b      	uxth	r3, r3
 800d538:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d53c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d540:	82bb      	strh	r3, [r7, #20]
 800d542:	687a      	ldr	r2, [r7, #4]
 800d544:	683b      	ldr	r3, [r7, #0]
 800d546:	781b      	ldrb	r3, [r3, #0]
 800d548:	009b      	lsls	r3, r3, #2
 800d54a:	441a      	add	r2, r3
 800d54c:	8abb      	ldrh	r3, [r7, #20]
 800d54e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d552:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d556:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800d55a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d55e:	b29b      	uxth	r3, r3
 800d560:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800d562:	687a      	ldr	r2, [r7, #4]
 800d564:	683b      	ldr	r3, [r7, #0]
 800d566:	781b      	ldrb	r3, [r3, #0]
 800d568:	009b      	lsls	r3, r3, #2
 800d56a:	4413      	add	r3, r2
 800d56c:	881b      	ldrh	r3, [r3, #0]
 800d56e:	b29b      	uxth	r3, r3
 800d570:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800d574:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d578:	827b      	strh	r3, [r7, #18]
 800d57a:	8a7b      	ldrh	r3, [r7, #18]
 800d57c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800d580:	827b      	strh	r3, [r7, #18]
 800d582:	8a7b      	ldrh	r3, [r7, #18]
 800d584:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800d588:	827b      	strh	r3, [r7, #18]
 800d58a:	687a      	ldr	r2, [r7, #4]
 800d58c:	683b      	ldr	r3, [r7, #0]
 800d58e:	781b      	ldrb	r3, [r3, #0]
 800d590:	009b      	lsls	r3, r3, #2
 800d592:	441a      	add	r2, r3
 800d594:	8a7b      	ldrh	r3, [r7, #18]
 800d596:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d59a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d59e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d5a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d5a6:	b29b      	uxth	r3, r3
 800d5a8:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800d5aa:	2300      	movs	r3, #0
}
 800d5ac:	4618      	mov	r0, r3
 800d5ae:	371c      	adds	r7, #28
 800d5b0:	46bd      	mov	sp, r7
 800d5b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5b6:	4770      	bx	lr

0800d5b8 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800d5b8:	b480      	push	{r7}
 800d5ba:	b083      	sub	sp, #12
 800d5bc:	af00      	add	r7, sp, #0
 800d5be:	6078      	str	r0, [r7, #4]
 800d5c0:	460b      	mov	r3, r1
 800d5c2:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800d5c4:	78fb      	ldrb	r3, [r7, #3]
 800d5c6:	2b00      	cmp	r3, #0
 800d5c8:	d103      	bne.n	800d5d2 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	2280      	movs	r2, #128	; 0x80
 800d5ce:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800d5d2:	2300      	movs	r3, #0
}
 800d5d4:	4618      	mov	r0, r3
 800d5d6:	370c      	adds	r7, #12
 800d5d8:	46bd      	mov	sp, r7
 800d5da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5de:	4770      	bx	lr

0800d5e0 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800d5e0:	b480      	push	{r7}
 800d5e2:	b083      	sub	sp, #12
 800d5e4:	af00      	add	r7, sp, #0
 800d5e6:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800d5ee:	b29b      	uxth	r3, r3
 800d5f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d5f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d5f8:	b29a      	uxth	r2, r3
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 800d600:	2300      	movs	r3, #0
}
 800d602:	4618      	mov	r0, r3
 800d604:	370c      	adds	r7, #12
 800d606:	46bd      	mov	sp, r7
 800d608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d60c:	4770      	bx	lr

0800d60e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800d60e:	b480      	push	{r7}
 800d610:	b085      	sub	sp, #20
 800d612:	af00      	add	r7, sp, #0
 800d614:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800d616:	687b      	ldr	r3, [r7, #4]
 800d618:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800d61c:	b29b      	uxth	r3, r3
 800d61e:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800d620:	68fb      	ldr	r3, [r7, #12]
}
 800d622:	4618      	mov	r0, r3
 800d624:	3714      	adds	r7, #20
 800d626:	46bd      	mov	sp, r7
 800d628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d62c:	4770      	bx	lr

0800d62e <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800d62e:	b480      	push	{r7}
 800d630:	b08d      	sub	sp, #52	; 0x34
 800d632:	af00      	add	r7, sp, #0
 800d634:	60f8      	str	r0, [r7, #12]
 800d636:	60b9      	str	r1, [r7, #8]
 800d638:	4611      	mov	r1, r2
 800d63a:	461a      	mov	r2, r3
 800d63c:	460b      	mov	r3, r1
 800d63e:	80fb      	strh	r3, [r7, #6]
 800d640:	4613      	mov	r3, r2
 800d642:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800d644:	88bb      	ldrh	r3, [r7, #4]
 800d646:	3301      	adds	r3, #1
 800d648:	085b      	lsrs	r3, r3, #1
 800d64a:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 800d64c:	68fb      	ldr	r3, [r7, #12]
 800d64e:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t temp1;
  uint32_t temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800d650:	68bb      	ldr	r3, [r7, #8]
 800d652:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800d654:	88fa      	ldrh	r2, [r7, #6]
 800d656:	69fb      	ldr	r3, [r7, #28]
 800d658:	4413      	add	r3, r2
 800d65a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d65e:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 800d660:	6a3b      	ldr	r3, [r7, #32]
 800d662:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d664:	e01b      	b.n	800d69e <USB_WritePMA+0x70>
  {
    temp1 = *pBuf;
 800d666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d668:	781b      	ldrb	r3, [r3, #0]
 800d66a:	61bb      	str	r3, [r7, #24]
    pBuf++;
 800d66c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d66e:	3301      	adds	r3, #1
 800d670:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 800d672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d674:	781b      	ldrb	r3, [r3, #0]
 800d676:	b29b      	uxth	r3, r3
 800d678:	021b      	lsls	r3, r3, #8
 800d67a:	b29b      	uxth	r3, r3
 800d67c:	461a      	mov	r2, r3
 800d67e:	69bb      	ldr	r3, [r7, #24]
 800d680:	4313      	orrs	r3, r2
 800d682:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 800d684:	697b      	ldr	r3, [r7, #20]
 800d686:	b29a      	uxth	r2, r3
 800d688:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d68a:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800d68c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d68e:	3302      	adds	r3, #2
 800d690:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800d692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d694:	3301      	adds	r3, #1
 800d696:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 800d698:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d69a:	3b01      	subs	r3, #1
 800d69c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d69e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6a0:	2b00      	cmp	r3, #0
 800d6a2:	d1e0      	bne.n	800d666 <USB_WritePMA+0x38>
  }
}
 800d6a4:	bf00      	nop
 800d6a6:	bf00      	nop
 800d6a8:	3734      	adds	r7, #52	; 0x34
 800d6aa:	46bd      	mov	sp, r7
 800d6ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6b0:	4770      	bx	lr

0800d6b2 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800d6b2:	b480      	push	{r7}
 800d6b4:	b08b      	sub	sp, #44	; 0x2c
 800d6b6:	af00      	add	r7, sp, #0
 800d6b8:	60f8      	str	r0, [r7, #12]
 800d6ba:	60b9      	str	r1, [r7, #8]
 800d6bc:	4611      	mov	r1, r2
 800d6be:	461a      	mov	r2, r3
 800d6c0:	460b      	mov	r3, r1
 800d6c2:	80fb      	strh	r3, [r7, #6]
 800d6c4:	4613      	mov	r3, r2
 800d6c6:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800d6c8:	88bb      	ldrh	r3, [r7, #4]
 800d6ca:	085b      	lsrs	r3, r3, #1
 800d6cc:	b29b      	uxth	r3, r3
 800d6ce:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800d6d0:	68fb      	ldr	r3, [r7, #12]
 800d6d2:	617b      	str	r3, [r7, #20]
  uint32_t i;
  uint32_t temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800d6d4:	68bb      	ldr	r3, [r7, #8]
 800d6d6:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800d6d8:	88fa      	ldrh	r2, [r7, #6]
 800d6da:	697b      	ldr	r3, [r7, #20]
 800d6dc:	4413      	add	r3, r2
 800d6de:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d6e2:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800d6e4:	69bb      	ldr	r3, [r7, #24]
 800d6e6:	627b      	str	r3, [r7, #36]	; 0x24
 800d6e8:	e018      	b.n	800d71c <USB_ReadPMA+0x6a>
  {
    temp = *(__IO uint16_t *)pdwVal;
 800d6ea:	6a3b      	ldr	r3, [r7, #32]
 800d6ec:	881b      	ldrh	r3, [r3, #0]
 800d6ee:	b29b      	uxth	r3, r3
 800d6f0:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800d6f2:	6a3b      	ldr	r3, [r7, #32]
 800d6f4:	3302      	adds	r3, #2
 800d6f6:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800d6f8:	693b      	ldr	r3, [r7, #16]
 800d6fa:	b2da      	uxtb	r2, r3
 800d6fc:	69fb      	ldr	r3, [r7, #28]
 800d6fe:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800d700:	69fb      	ldr	r3, [r7, #28]
 800d702:	3301      	adds	r3, #1
 800d704:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800d706:	693b      	ldr	r3, [r7, #16]
 800d708:	0a1b      	lsrs	r3, r3, #8
 800d70a:	b2da      	uxtb	r2, r3
 800d70c:	69fb      	ldr	r3, [r7, #28]
 800d70e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800d710:	69fb      	ldr	r3, [r7, #28]
 800d712:	3301      	adds	r3, #1
 800d714:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 800d716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d718:	3b01      	subs	r3, #1
 800d71a:	627b      	str	r3, [r7, #36]	; 0x24
 800d71c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d71e:	2b00      	cmp	r3, #0
 800d720:	d1e3      	bne.n	800d6ea <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800d722:	88bb      	ldrh	r3, [r7, #4]
 800d724:	f003 0301 	and.w	r3, r3, #1
 800d728:	b29b      	uxth	r3, r3
 800d72a:	2b00      	cmp	r3, #0
 800d72c:	d007      	beq.n	800d73e <USB_ReadPMA+0x8c>
  {
    temp = *pdwVal;
 800d72e:	6a3b      	ldr	r3, [r7, #32]
 800d730:	881b      	ldrh	r3, [r3, #0]
 800d732:	b29b      	uxth	r3, r3
 800d734:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800d736:	693b      	ldr	r3, [r7, #16]
 800d738:	b2da      	uxtb	r2, r3
 800d73a:	69fb      	ldr	r3, [r7, #28]
 800d73c:	701a      	strb	r2, [r3, #0]
  }
}
 800d73e:	bf00      	nop
 800d740:	372c      	adds	r7, #44	; 0x2c
 800d742:	46bd      	mov	sp, r7
 800d744:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d748:	4770      	bx	lr

0800d74a <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d74a:	b580      	push	{r7, lr}
 800d74c:	b084      	sub	sp, #16
 800d74e:	af00      	add	r7, sp, #0
 800d750:	6078      	str	r0, [r7, #4]
 800d752:	460b      	mov	r3, r1
 800d754:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800d756:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800d75a:	f004 f81d 	bl	8011798 <USBD_static_malloc>
 800d75e:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800d760:	68fb      	ldr	r3, [r7, #12]
 800d762:	2b00      	cmp	r3, #0
 800d764:	d105      	bne.n	800d772 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800d766:	687b      	ldr	r3, [r7, #4]
 800d768:	2200      	movs	r2, #0
 800d76a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800d76e:	2302      	movs	r3, #2
 800d770:	e066      	b.n	800d840 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	68fa      	ldr	r2, [r7, #12]
 800d776:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	7c1b      	ldrb	r3, [r3, #16]
 800d77e:	2b00      	cmp	r3, #0
 800d780:	d119      	bne.n	800d7b6 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800d782:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d786:	2202      	movs	r2, #2
 800d788:	2181      	movs	r1, #129	; 0x81
 800d78a:	6878      	ldr	r0, [r7, #4]
 800d78c:	f003 fea9 	bl	80114e2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	2201      	movs	r2, #1
 800d794:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800d796:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d79a:	2202      	movs	r2, #2
 800d79c:	2101      	movs	r1, #1
 800d79e:	6878      	ldr	r0, [r7, #4]
 800d7a0:	f003 fe9f 	bl	80114e2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	2201      	movs	r2, #1
 800d7a8:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	2210      	movs	r2, #16
 800d7b0:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800d7b4:	e016      	b.n	800d7e4 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800d7b6:	2340      	movs	r3, #64	; 0x40
 800d7b8:	2202      	movs	r2, #2
 800d7ba:	2181      	movs	r1, #129	; 0x81
 800d7bc:	6878      	ldr	r0, [r7, #4]
 800d7be:	f003 fe90 	bl	80114e2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	2201      	movs	r2, #1
 800d7c6:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800d7c8:	2340      	movs	r3, #64	; 0x40
 800d7ca:	2202      	movs	r2, #2
 800d7cc:	2101      	movs	r1, #1
 800d7ce:	6878      	ldr	r0, [r7, #4]
 800d7d0:	f003 fe87 	bl	80114e2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	2201      	movs	r2, #1
 800d7d8:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	2210      	movs	r2, #16
 800d7e0:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800d7e4:	2308      	movs	r3, #8
 800d7e6:	2203      	movs	r2, #3
 800d7e8:	2182      	movs	r1, #130	; 0x82
 800d7ea:	6878      	ldr	r0, [r7, #4]
 800d7ec:	f003 fe79 	bl	80114e2 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800d7f0:	687b      	ldr	r3, [r7, #4]
 800d7f2:	2201      	movs	r2, #1
 800d7f4:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d7fe:	681b      	ldr	r3, [r3, #0]
 800d800:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800d802:	68fb      	ldr	r3, [r7, #12]
 800d804:	2200      	movs	r2, #0
 800d806:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800d80a:	68fb      	ldr	r3, [r7, #12]
 800d80c:	2200      	movs	r2, #0
 800d80e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	7c1b      	ldrb	r3, [r3, #16]
 800d816:	2b00      	cmp	r3, #0
 800d818:	d109      	bne.n	800d82e <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800d81a:	68fb      	ldr	r3, [r7, #12]
 800d81c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d820:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d824:	2101      	movs	r1, #1
 800d826:	6878      	ldr	r0, [r7, #4]
 800d828:	f003 ff4b 	bl	80116c2 <USBD_LL_PrepareReceive>
 800d82c:	e007      	b.n	800d83e <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800d82e:	68fb      	ldr	r3, [r7, #12]
 800d830:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d834:	2340      	movs	r3, #64	; 0x40
 800d836:	2101      	movs	r1, #1
 800d838:	6878      	ldr	r0, [r7, #4]
 800d83a:	f003 ff42 	bl	80116c2 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800d83e:	2300      	movs	r3, #0
}
 800d840:	4618      	mov	r0, r3
 800d842:	3710      	adds	r7, #16
 800d844:	46bd      	mov	sp, r7
 800d846:	bd80      	pop	{r7, pc}

0800d848 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d848:	b580      	push	{r7, lr}
 800d84a:	b082      	sub	sp, #8
 800d84c:	af00      	add	r7, sp, #0
 800d84e:	6078      	str	r0, [r7, #4]
 800d850:	460b      	mov	r3, r1
 800d852:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800d854:	2181      	movs	r1, #129	; 0x81
 800d856:	6878      	ldr	r0, [r7, #4]
 800d858:	f003 fe69 	bl	801152e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	2200      	movs	r2, #0
 800d860:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800d862:	2101      	movs	r1, #1
 800d864:	6878      	ldr	r0, [r7, #4]
 800d866:	f003 fe62 	bl	801152e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	2200      	movs	r2, #0
 800d86e:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800d872:	2182      	movs	r1, #130	; 0x82
 800d874:	6878      	ldr	r0, [r7, #4]
 800d876:	f003 fe5a 	bl	801152e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	2200      	movs	r2, #0
 800d87e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800d882:	687b      	ldr	r3, [r7, #4]
 800d884:	2200      	movs	r2, #0
 800d886:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d890:	2b00      	cmp	r3, #0
 800d892:	d00e      	beq.n	800d8b2 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d89a:	685b      	ldr	r3, [r3, #4]
 800d89c:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800d89e:	687b      	ldr	r3, [r7, #4]
 800d8a0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d8a4:	4618      	mov	r0, r3
 800d8a6:	f003 ff85 	bl	80117b4 <USBD_static_free>
    pdev->pClassData = NULL;
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	2200      	movs	r2, #0
 800d8ae:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800d8b2:	2300      	movs	r3, #0
}
 800d8b4:	4618      	mov	r0, r3
 800d8b6:	3708      	adds	r7, #8
 800d8b8:	46bd      	mov	sp, r7
 800d8ba:	bd80      	pop	{r7, pc}

0800d8bc <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800d8bc:	b580      	push	{r7, lr}
 800d8be:	b086      	sub	sp, #24
 800d8c0:	af00      	add	r7, sp, #0
 800d8c2:	6078      	str	r0, [r7, #4]
 800d8c4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d8cc:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800d8ce:	2300      	movs	r3, #0
 800d8d0:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800d8d2:	2300      	movs	r3, #0
 800d8d4:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800d8d6:	2300      	movs	r3, #0
 800d8d8:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800d8da:	693b      	ldr	r3, [r7, #16]
 800d8dc:	2b00      	cmp	r3, #0
 800d8de:	d101      	bne.n	800d8e4 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800d8e0:	2303      	movs	r3, #3
 800d8e2:	e0af      	b.n	800da44 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d8e4:	683b      	ldr	r3, [r7, #0]
 800d8e6:	781b      	ldrb	r3, [r3, #0]
 800d8e8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d8ec:	2b00      	cmp	r3, #0
 800d8ee:	d03f      	beq.n	800d970 <USBD_CDC_Setup+0xb4>
 800d8f0:	2b20      	cmp	r3, #32
 800d8f2:	f040 809f 	bne.w	800da34 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800d8f6:	683b      	ldr	r3, [r7, #0]
 800d8f8:	88db      	ldrh	r3, [r3, #6]
 800d8fa:	2b00      	cmp	r3, #0
 800d8fc:	d02e      	beq.n	800d95c <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800d8fe:	683b      	ldr	r3, [r7, #0]
 800d900:	781b      	ldrb	r3, [r3, #0]
 800d902:	b25b      	sxtb	r3, r3
 800d904:	2b00      	cmp	r3, #0
 800d906:	da16      	bge.n	800d936 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800d908:	687b      	ldr	r3, [r7, #4]
 800d90a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d90e:	689b      	ldr	r3, [r3, #8]
 800d910:	683a      	ldr	r2, [r7, #0]
 800d912:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800d914:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800d916:	683a      	ldr	r2, [r7, #0]
 800d918:	88d2      	ldrh	r2, [r2, #6]
 800d91a:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800d91c:	683b      	ldr	r3, [r7, #0]
 800d91e:	88db      	ldrh	r3, [r3, #6]
 800d920:	2b07      	cmp	r3, #7
 800d922:	bf28      	it	cs
 800d924:	2307      	movcs	r3, #7
 800d926:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800d928:	693b      	ldr	r3, [r7, #16]
 800d92a:	89fa      	ldrh	r2, [r7, #14]
 800d92c:	4619      	mov	r1, r3
 800d92e:	6878      	ldr	r0, [r7, #4]
 800d930:	f001 fa9f 	bl	800ee72 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800d934:	e085      	b.n	800da42 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800d936:	683b      	ldr	r3, [r7, #0]
 800d938:	785a      	ldrb	r2, [r3, #1]
 800d93a:	693b      	ldr	r3, [r7, #16]
 800d93c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800d940:	683b      	ldr	r3, [r7, #0]
 800d942:	88db      	ldrh	r3, [r3, #6]
 800d944:	b2da      	uxtb	r2, r3
 800d946:	693b      	ldr	r3, [r7, #16]
 800d948:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800d94c:	6939      	ldr	r1, [r7, #16]
 800d94e:	683b      	ldr	r3, [r7, #0]
 800d950:	88db      	ldrh	r3, [r3, #6]
 800d952:	461a      	mov	r2, r3
 800d954:	6878      	ldr	r0, [r7, #4]
 800d956:	f001 fab8 	bl	800eeca <USBD_CtlPrepareRx>
      break;
 800d95a:	e072      	b.n	800da42 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800d95c:	687b      	ldr	r3, [r7, #4]
 800d95e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d962:	689b      	ldr	r3, [r3, #8]
 800d964:	683a      	ldr	r2, [r7, #0]
 800d966:	7850      	ldrb	r0, [r2, #1]
 800d968:	2200      	movs	r2, #0
 800d96a:	6839      	ldr	r1, [r7, #0]
 800d96c:	4798      	blx	r3
      break;
 800d96e:	e068      	b.n	800da42 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d970:	683b      	ldr	r3, [r7, #0]
 800d972:	785b      	ldrb	r3, [r3, #1]
 800d974:	2b0b      	cmp	r3, #11
 800d976:	d852      	bhi.n	800da1e <USBD_CDC_Setup+0x162>
 800d978:	a201      	add	r2, pc, #4	; (adr r2, 800d980 <USBD_CDC_Setup+0xc4>)
 800d97a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d97e:	bf00      	nop
 800d980:	0800d9b1 	.word	0x0800d9b1
 800d984:	0800da2d 	.word	0x0800da2d
 800d988:	0800da1f 	.word	0x0800da1f
 800d98c:	0800da1f 	.word	0x0800da1f
 800d990:	0800da1f 	.word	0x0800da1f
 800d994:	0800da1f 	.word	0x0800da1f
 800d998:	0800da1f 	.word	0x0800da1f
 800d99c:	0800da1f 	.word	0x0800da1f
 800d9a0:	0800da1f 	.word	0x0800da1f
 800d9a4:	0800da1f 	.word	0x0800da1f
 800d9a8:	0800d9db 	.word	0x0800d9db
 800d9ac:	0800da05 	.word	0x0800da05
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d9b6:	b2db      	uxtb	r3, r3
 800d9b8:	2b03      	cmp	r3, #3
 800d9ba:	d107      	bne.n	800d9cc <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800d9bc:	f107 030a 	add.w	r3, r7, #10
 800d9c0:	2202      	movs	r2, #2
 800d9c2:	4619      	mov	r1, r3
 800d9c4:	6878      	ldr	r0, [r7, #4]
 800d9c6:	f001 fa54 	bl	800ee72 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800d9ca:	e032      	b.n	800da32 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800d9cc:	6839      	ldr	r1, [r7, #0]
 800d9ce:	6878      	ldr	r0, [r7, #4]
 800d9d0:	f001 f9de 	bl	800ed90 <USBD_CtlError>
            ret = USBD_FAIL;
 800d9d4:	2303      	movs	r3, #3
 800d9d6:	75fb      	strb	r3, [r7, #23]
          break;
 800d9d8:	e02b      	b.n	800da32 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d9da:	687b      	ldr	r3, [r7, #4]
 800d9dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d9e0:	b2db      	uxtb	r3, r3
 800d9e2:	2b03      	cmp	r3, #3
 800d9e4:	d107      	bne.n	800d9f6 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800d9e6:	f107 030d 	add.w	r3, r7, #13
 800d9ea:	2201      	movs	r2, #1
 800d9ec:	4619      	mov	r1, r3
 800d9ee:	6878      	ldr	r0, [r7, #4]
 800d9f0:	f001 fa3f 	bl	800ee72 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800d9f4:	e01d      	b.n	800da32 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800d9f6:	6839      	ldr	r1, [r7, #0]
 800d9f8:	6878      	ldr	r0, [r7, #4]
 800d9fa:	f001 f9c9 	bl	800ed90 <USBD_CtlError>
            ret = USBD_FAIL;
 800d9fe:	2303      	movs	r3, #3
 800da00:	75fb      	strb	r3, [r7, #23]
          break;
 800da02:	e016      	b.n	800da32 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800da0a:	b2db      	uxtb	r3, r3
 800da0c:	2b03      	cmp	r3, #3
 800da0e:	d00f      	beq.n	800da30 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800da10:	6839      	ldr	r1, [r7, #0]
 800da12:	6878      	ldr	r0, [r7, #4]
 800da14:	f001 f9bc 	bl	800ed90 <USBD_CtlError>
            ret = USBD_FAIL;
 800da18:	2303      	movs	r3, #3
 800da1a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800da1c:	e008      	b.n	800da30 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800da1e:	6839      	ldr	r1, [r7, #0]
 800da20:	6878      	ldr	r0, [r7, #4]
 800da22:	f001 f9b5 	bl	800ed90 <USBD_CtlError>
          ret = USBD_FAIL;
 800da26:	2303      	movs	r3, #3
 800da28:	75fb      	strb	r3, [r7, #23]
          break;
 800da2a:	e002      	b.n	800da32 <USBD_CDC_Setup+0x176>
          break;
 800da2c:	bf00      	nop
 800da2e:	e008      	b.n	800da42 <USBD_CDC_Setup+0x186>
          break;
 800da30:	bf00      	nop
      }
      break;
 800da32:	e006      	b.n	800da42 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800da34:	6839      	ldr	r1, [r7, #0]
 800da36:	6878      	ldr	r0, [r7, #4]
 800da38:	f001 f9aa 	bl	800ed90 <USBD_CtlError>
      ret = USBD_FAIL;
 800da3c:	2303      	movs	r3, #3
 800da3e:	75fb      	strb	r3, [r7, #23]
      break;
 800da40:	bf00      	nop
  }

  return (uint8_t)ret;
 800da42:	7dfb      	ldrb	r3, [r7, #23]
}
 800da44:	4618      	mov	r0, r3
 800da46:	3718      	adds	r7, #24
 800da48:	46bd      	mov	sp, r7
 800da4a:	bd80      	pop	{r7, pc}

0800da4c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800da4c:	b580      	push	{r7, lr}
 800da4e:	b084      	sub	sp, #16
 800da50:	af00      	add	r7, sp, #0
 800da52:	6078      	str	r0, [r7, #4]
 800da54:	460b      	mov	r3, r1
 800da56:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800da5e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800da60:	687b      	ldr	r3, [r7, #4]
 800da62:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800da66:	2b00      	cmp	r3, #0
 800da68:	d101      	bne.n	800da6e <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800da6a:	2303      	movs	r3, #3
 800da6c:	e04f      	b.n	800db0e <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800da6e:	687b      	ldr	r3, [r7, #4]
 800da70:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800da74:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800da76:	78fa      	ldrb	r2, [r7, #3]
 800da78:	6879      	ldr	r1, [r7, #4]
 800da7a:	4613      	mov	r3, r2
 800da7c:	009b      	lsls	r3, r3, #2
 800da7e:	4413      	add	r3, r2
 800da80:	009b      	lsls	r3, r3, #2
 800da82:	440b      	add	r3, r1
 800da84:	3318      	adds	r3, #24
 800da86:	681b      	ldr	r3, [r3, #0]
 800da88:	2b00      	cmp	r3, #0
 800da8a:	d029      	beq.n	800dae0 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800da8c:	78fa      	ldrb	r2, [r7, #3]
 800da8e:	6879      	ldr	r1, [r7, #4]
 800da90:	4613      	mov	r3, r2
 800da92:	009b      	lsls	r3, r3, #2
 800da94:	4413      	add	r3, r2
 800da96:	009b      	lsls	r3, r3, #2
 800da98:	440b      	add	r3, r1
 800da9a:	3318      	adds	r3, #24
 800da9c:	681a      	ldr	r2, [r3, #0]
 800da9e:	78f9      	ldrb	r1, [r7, #3]
 800daa0:	68f8      	ldr	r0, [r7, #12]
 800daa2:	460b      	mov	r3, r1
 800daa4:	009b      	lsls	r3, r3, #2
 800daa6:	440b      	add	r3, r1
 800daa8:	00db      	lsls	r3, r3, #3
 800daaa:	4403      	add	r3, r0
 800daac:	3338      	adds	r3, #56	; 0x38
 800daae:	681b      	ldr	r3, [r3, #0]
 800dab0:	fbb2 f1f3 	udiv	r1, r2, r3
 800dab4:	fb01 f303 	mul.w	r3, r1, r3
 800dab8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800daba:	2b00      	cmp	r3, #0
 800dabc:	d110      	bne.n	800dae0 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800dabe:	78fa      	ldrb	r2, [r7, #3]
 800dac0:	6879      	ldr	r1, [r7, #4]
 800dac2:	4613      	mov	r3, r2
 800dac4:	009b      	lsls	r3, r3, #2
 800dac6:	4413      	add	r3, r2
 800dac8:	009b      	lsls	r3, r3, #2
 800daca:	440b      	add	r3, r1
 800dacc:	3318      	adds	r3, #24
 800dace:	2200      	movs	r2, #0
 800dad0:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800dad2:	78f9      	ldrb	r1, [r7, #3]
 800dad4:	2300      	movs	r3, #0
 800dad6:	2200      	movs	r2, #0
 800dad8:	6878      	ldr	r0, [r7, #4]
 800dada:	f003 fdd1 	bl	8011680 <USBD_LL_Transmit>
 800dade:	e015      	b.n	800db0c <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800dae0:	68bb      	ldr	r3, [r7, #8]
 800dae2:	2200      	movs	r2, #0
 800dae4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800daee:	691b      	ldr	r3, [r3, #16]
 800daf0:	2b00      	cmp	r3, #0
 800daf2:	d00b      	beq.n	800db0c <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800daf4:	687b      	ldr	r3, [r7, #4]
 800daf6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800dafa:	691b      	ldr	r3, [r3, #16]
 800dafc:	68ba      	ldr	r2, [r7, #8]
 800dafe:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800db02:	68ba      	ldr	r2, [r7, #8]
 800db04:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800db08:	78fa      	ldrb	r2, [r7, #3]
 800db0a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800db0c:	2300      	movs	r3, #0
}
 800db0e:	4618      	mov	r0, r3
 800db10:	3710      	adds	r7, #16
 800db12:	46bd      	mov	sp, r7
 800db14:	bd80      	pop	{r7, pc}

0800db16 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800db16:	b580      	push	{r7, lr}
 800db18:	b084      	sub	sp, #16
 800db1a:	af00      	add	r7, sp, #0
 800db1c:	6078      	str	r0, [r7, #4]
 800db1e:	460b      	mov	r3, r1
 800db20:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800db22:	687b      	ldr	r3, [r7, #4]
 800db24:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800db28:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800db30:	2b00      	cmp	r3, #0
 800db32:	d101      	bne.n	800db38 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800db34:	2303      	movs	r3, #3
 800db36:	e015      	b.n	800db64 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800db38:	78fb      	ldrb	r3, [r7, #3]
 800db3a:	4619      	mov	r1, r3
 800db3c:	6878      	ldr	r0, [r7, #4]
 800db3e:	f003 fde1 	bl	8011704 <USBD_LL_GetRxDataSize>
 800db42:	4602      	mov	r2, r0
 800db44:	68fb      	ldr	r3, [r7, #12]
 800db46:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800db50:	68db      	ldr	r3, [r3, #12]
 800db52:	68fa      	ldr	r2, [r7, #12]
 800db54:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800db58:	68fa      	ldr	r2, [r7, #12]
 800db5a:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800db5e:	4611      	mov	r1, r2
 800db60:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800db62:	2300      	movs	r3, #0
}
 800db64:	4618      	mov	r0, r3
 800db66:	3710      	adds	r7, #16
 800db68:	46bd      	mov	sp, r7
 800db6a:	bd80      	pop	{r7, pc}

0800db6c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800db6c:	b580      	push	{r7, lr}
 800db6e:	b084      	sub	sp, #16
 800db70:	af00      	add	r7, sp, #0
 800db72:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800db7a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800db7c:	68fb      	ldr	r3, [r7, #12]
 800db7e:	2b00      	cmp	r3, #0
 800db80:	d101      	bne.n	800db86 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800db82:	2303      	movs	r3, #3
 800db84:	e01b      	b.n	800dbbe <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800db86:	687b      	ldr	r3, [r7, #4]
 800db88:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800db8c:	2b00      	cmp	r3, #0
 800db8e:	d015      	beq.n	800dbbc <USBD_CDC_EP0_RxReady+0x50>
 800db90:	68fb      	ldr	r3, [r7, #12]
 800db92:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800db96:	2bff      	cmp	r3, #255	; 0xff
 800db98:	d010      	beq.n	800dbbc <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800db9a:	687b      	ldr	r3, [r7, #4]
 800db9c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800dba0:	689b      	ldr	r3, [r3, #8]
 800dba2:	68fa      	ldr	r2, [r7, #12]
 800dba4:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800dba8:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800dbaa:	68fa      	ldr	r2, [r7, #12]
 800dbac:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800dbb0:	b292      	uxth	r2, r2
 800dbb2:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800dbb4:	68fb      	ldr	r3, [r7, #12]
 800dbb6:	22ff      	movs	r2, #255	; 0xff
 800dbb8:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800dbbc:	2300      	movs	r3, #0
}
 800dbbe:	4618      	mov	r0, r3
 800dbc0:	3710      	adds	r7, #16
 800dbc2:	46bd      	mov	sp, r7
 800dbc4:	bd80      	pop	{r7, pc}
	...

0800dbc8 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800dbc8:	b480      	push	{r7}
 800dbca:	b083      	sub	sp, #12
 800dbcc:	af00      	add	r7, sp, #0
 800dbce:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	2243      	movs	r2, #67	; 0x43
 800dbd4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800dbd6:	4b03      	ldr	r3, [pc, #12]	; (800dbe4 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800dbd8:	4618      	mov	r0, r3
 800dbda:	370c      	adds	r7, #12
 800dbdc:	46bd      	mov	sp, r7
 800dbde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbe2:	4770      	bx	lr
 800dbe4:	20000094 	.word	0x20000094

0800dbe8 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800dbe8:	b480      	push	{r7}
 800dbea:	b083      	sub	sp, #12
 800dbec:	af00      	add	r7, sp, #0
 800dbee:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	2243      	movs	r2, #67	; 0x43
 800dbf4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800dbf6:	4b03      	ldr	r3, [pc, #12]	; (800dc04 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800dbf8:	4618      	mov	r0, r3
 800dbfa:	370c      	adds	r7, #12
 800dbfc:	46bd      	mov	sp, r7
 800dbfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc02:	4770      	bx	lr
 800dc04:	20000050 	.word	0x20000050

0800dc08 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800dc08:	b480      	push	{r7}
 800dc0a:	b083      	sub	sp, #12
 800dc0c:	af00      	add	r7, sp, #0
 800dc0e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800dc10:	687b      	ldr	r3, [r7, #4]
 800dc12:	2243      	movs	r2, #67	; 0x43
 800dc14:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800dc16:	4b03      	ldr	r3, [pc, #12]	; (800dc24 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800dc18:	4618      	mov	r0, r3
 800dc1a:	370c      	adds	r7, #12
 800dc1c:	46bd      	mov	sp, r7
 800dc1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc22:	4770      	bx	lr
 800dc24:	200000d8 	.word	0x200000d8

0800dc28 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800dc28:	b480      	push	{r7}
 800dc2a:	b083      	sub	sp, #12
 800dc2c:	af00      	add	r7, sp, #0
 800dc2e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	220a      	movs	r2, #10
 800dc34:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800dc36:	4b03      	ldr	r3, [pc, #12]	; (800dc44 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800dc38:	4618      	mov	r0, r3
 800dc3a:	370c      	adds	r7, #12
 800dc3c:	46bd      	mov	sp, r7
 800dc3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc42:	4770      	bx	lr
 800dc44:	2000000c 	.word	0x2000000c

0800dc48 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800dc48:	b480      	push	{r7}
 800dc4a:	b083      	sub	sp, #12
 800dc4c:	af00      	add	r7, sp, #0
 800dc4e:	6078      	str	r0, [r7, #4]
 800dc50:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800dc52:	683b      	ldr	r3, [r7, #0]
 800dc54:	2b00      	cmp	r3, #0
 800dc56:	d101      	bne.n	800dc5c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800dc58:	2303      	movs	r3, #3
 800dc5a:	e004      	b.n	800dc66 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800dc5c:	687b      	ldr	r3, [r7, #4]
 800dc5e:	683a      	ldr	r2, [r7, #0]
 800dc60:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800dc64:	2300      	movs	r3, #0
}
 800dc66:	4618      	mov	r0, r3
 800dc68:	370c      	adds	r7, #12
 800dc6a:	46bd      	mov	sp, r7
 800dc6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc70:	4770      	bx	lr

0800dc72 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800dc72:	b480      	push	{r7}
 800dc74:	b087      	sub	sp, #28
 800dc76:	af00      	add	r7, sp, #0
 800dc78:	60f8      	str	r0, [r7, #12]
 800dc7a:	60b9      	str	r1, [r7, #8]
 800dc7c:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800dc7e:	68fb      	ldr	r3, [r7, #12]
 800dc80:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800dc84:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800dc86:	697b      	ldr	r3, [r7, #20]
 800dc88:	2b00      	cmp	r3, #0
 800dc8a:	d101      	bne.n	800dc90 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800dc8c:	2303      	movs	r3, #3
 800dc8e:	e008      	b.n	800dca2 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800dc90:	697b      	ldr	r3, [r7, #20]
 800dc92:	68ba      	ldr	r2, [r7, #8]
 800dc94:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800dc98:	697b      	ldr	r3, [r7, #20]
 800dc9a:	687a      	ldr	r2, [r7, #4]
 800dc9c:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800dca0:	2300      	movs	r3, #0
}
 800dca2:	4618      	mov	r0, r3
 800dca4:	371c      	adds	r7, #28
 800dca6:	46bd      	mov	sp, r7
 800dca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcac:	4770      	bx	lr

0800dcae <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800dcae:	b480      	push	{r7}
 800dcb0:	b085      	sub	sp, #20
 800dcb2:	af00      	add	r7, sp, #0
 800dcb4:	6078      	str	r0, [r7, #4]
 800dcb6:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800dcb8:	687b      	ldr	r3, [r7, #4]
 800dcba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800dcbe:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800dcc0:	68fb      	ldr	r3, [r7, #12]
 800dcc2:	2b00      	cmp	r3, #0
 800dcc4:	d101      	bne.n	800dcca <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800dcc6:	2303      	movs	r3, #3
 800dcc8:	e004      	b.n	800dcd4 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800dcca:	68fb      	ldr	r3, [r7, #12]
 800dccc:	683a      	ldr	r2, [r7, #0]
 800dcce:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800dcd2:	2300      	movs	r3, #0
}
 800dcd4:	4618      	mov	r0, r3
 800dcd6:	3714      	adds	r7, #20
 800dcd8:	46bd      	mov	sp, r7
 800dcda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcde:	4770      	bx	lr

0800dce0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800dce0:	b580      	push	{r7, lr}
 800dce2:	b084      	sub	sp, #16
 800dce4:	af00      	add	r7, sp, #0
 800dce6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800dcee:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800dcf0:	687b      	ldr	r3, [r7, #4]
 800dcf2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800dcf6:	2b00      	cmp	r3, #0
 800dcf8:	d101      	bne.n	800dcfe <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800dcfa:	2303      	movs	r3, #3
 800dcfc:	e016      	b.n	800dd2c <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	7c1b      	ldrb	r3, [r3, #16]
 800dd02:	2b00      	cmp	r3, #0
 800dd04:	d109      	bne.n	800dd1a <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800dd06:	68fb      	ldr	r3, [r7, #12]
 800dd08:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800dd0c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800dd10:	2101      	movs	r1, #1
 800dd12:	6878      	ldr	r0, [r7, #4]
 800dd14:	f003 fcd5 	bl	80116c2 <USBD_LL_PrepareReceive>
 800dd18:	e007      	b.n	800dd2a <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800dd1a:	68fb      	ldr	r3, [r7, #12]
 800dd1c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800dd20:	2340      	movs	r3, #64	; 0x40
 800dd22:	2101      	movs	r1, #1
 800dd24:	6878      	ldr	r0, [r7, #4]
 800dd26:	f003 fccc 	bl	80116c2 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800dd2a:	2300      	movs	r3, #0
}
 800dd2c:	4618      	mov	r0, r3
 800dd2e:	3710      	adds	r7, #16
 800dd30:	46bd      	mov	sp, r7
 800dd32:	bd80      	pop	{r7, pc}

0800dd34 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800dd34:	b580      	push	{r7, lr}
 800dd36:	b086      	sub	sp, #24
 800dd38:	af00      	add	r7, sp, #0
 800dd3a:	60f8      	str	r0, [r7, #12]
 800dd3c:	60b9      	str	r1, [r7, #8]
 800dd3e:	4613      	mov	r3, r2
 800dd40:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800dd42:	68fb      	ldr	r3, [r7, #12]
 800dd44:	2b00      	cmp	r3, #0
 800dd46:	d101      	bne.n	800dd4c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800dd48:	2303      	movs	r3, #3
 800dd4a:	e01f      	b.n	800dd8c <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800dd4c:	68fb      	ldr	r3, [r7, #12]
 800dd4e:	2200      	movs	r2, #0
 800dd50:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800dd54:	68fb      	ldr	r3, [r7, #12]
 800dd56:	2200      	movs	r2, #0
 800dd58:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800dd5c:	68fb      	ldr	r3, [r7, #12]
 800dd5e:	2200      	movs	r2, #0
 800dd60:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800dd64:	68bb      	ldr	r3, [r7, #8]
 800dd66:	2b00      	cmp	r3, #0
 800dd68:	d003      	beq.n	800dd72 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800dd6a:	68fb      	ldr	r3, [r7, #12]
 800dd6c:	68ba      	ldr	r2, [r7, #8]
 800dd6e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800dd72:	68fb      	ldr	r3, [r7, #12]
 800dd74:	2201      	movs	r2, #1
 800dd76:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800dd7a:	68fb      	ldr	r3, [r7, #12]
 800dd7c:	79fa      	ldrb	r2, [r7, #7]
 800dd7e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800dd80:	68f8      	ldr	r0, [r7, #12]
 800dd82:	f003 fb33 	bl	80113ec <USBD_LL_Init>
 800dd86:	4603      	mov	r3, r0
 800dd88:	75fb      	strb	r3, [r7, #23]

  return ret;
 800dd8a:	7dfb      	ldrb	r3, [r7, #23]
}
 800dd8c:	4618      	mov	r0, r3
 800dd8e:	3718      	adds	r7, #24
 800dd90:	46bd      	mov	sp, r7
 800dd92:	bd80      	pop	{r7, pc}

0800dd94 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800dd94:	b580      	push	{r7, lr}
 800dd96:	b084      	sub	sp, #16
 800dd98:	af00      	add	r7, sp, #0
 800dd9a:	6078      	str	r0, [r7, #4]
 800dd9c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800dd9e:	2300      	movs	r3, #0
 800dda0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800dda2:	683b      	ldr	r3, [r7, #0]
 800dda4:	2b00      	cmp	r3, #0
 800dda6:	d101      	bne.n	800ddac <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800dda8:	2303      	movs	r3, #3
 800ddaa:	e016      	b.n	800ddda <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800ddac:	687b      	ldr	r3, [r7, #4]
 800ddae:	683a      	ldr	r2, [r7, #0]
 800ddb0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800ddb4:	687b      	ldr	r3, [r7, #4]
 800ddb6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ddba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ddbc:	2b00      	cmp	r3, #0
 800ddbe:	d00b      	beq.n	800ddd8 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800ddc0:	687b      	ldr	r3, [r7, #4]
 800ddc2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ddc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ddc8:	f107 020e 	add.w	r2, r7, #14
 800ddcc:	4610      	mov	r0, r2
 800ddce:	4798      	blx	r3
 800ddd0:	4602      	mov	r2, r0
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800ddd8:	2300      	movs	r3, #0
}
 800ddda:	4618      	mov	r0, r3
 800dddc:	3710      	adds	r7, #16
 800ddde:	46bd      	mov	sp, r7
 800dde0:	bd80      	pop	{r7, pc}

0800dde2 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800dde2:	b580      	push	{r7, lr}
 800dde4:	b082      	sub	sp, #8
 800dde6:	af00      	add	r7, sp, #0
 800dde8:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800ddea:	6878      	ldr	r0, [r7, #4]
 800ddec:	f003 fb5e 	bl	80114ac <USBD_LL_Start>
 800ddf0:	4603      	mov	r3, r0
}
 800ddf2:	4618      	mov	r0, r3
 800ddf4:	3708      	adds	r7, #8
 800ddf6:	46bd      	mov	sp, r7
 800ddf8:	bd80      	pop	{r7, pc}

0800ddfa <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800ddfa:	b480      	push	{r7}
 800ddfc:	b083      	sub	sp, #12
 800ddfe:	af00      	add	r7, sp, #0
 800de00:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800de02:	2300      	movs	r3, #0
}
 800de04:	4618      	mov	r0, r3
 800de06:	370c      	adds	r7, #12
 800de08:	46bd      	mov	sp, r7
 800de0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de0e:	4770      	bx	lr

0800de10 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800de10:	b580      	push	{r7, lr}
 800de12:	b084      	sub	sp, #16
 800de14:	af00      	add	r7, sp, #0
 800de16:	6078      	str	r0, [r7, #4]
 800de18:	460b      	mov	r3, r1
 800de1a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800de1c:	2303      	movs	r3, #3
 800de1e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800de20:	687b      	ldr	r3, [r7, #4]
 800de22:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800de26:	2b00      	cmp	r3, #0
 800de28:	d009      	beq.n	800de3e <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800de2a:	687b      	ldr	r3, [r7, #4]
 800de2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800de30:	681b      	ldr	r3, [r3, #0]
 800de32:	78fa      	ldrb	r2, [r7, #3]
 800de34:	4611      	mov	r1, r2
 800de36:	6878      	ldr	r0, [r7, #4]
 800de38:	4798      	blx	r3
 800de3a:	4603      	mov	r3, r0
 800de3c:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800de3e:	7bfb      	ldrb	r3, [r7, #15]
}
 800de40:	4618      	mov	r0, r3
 800de42:	3710      	adds	r7, #16
 800de44:	46bd      	mov	sp, r7
 800de46:	bd80      	pop	{r7, pc}

0800de48 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800de48:	b580      	push	{r7, lr}
 800de4a:	b082      	sub	sp, #8
 800de4c:	af00      	add	r7, sp, #0
 800de4e:	6078      	str	r0, [r7, #4]
 800de50:	460b      	mov	r3, r1
 800de52:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800de54:	687b      	ldr	r3, [r7, #4]
 800de56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800de5a:	2b00      	cmp	r3, #0
 800de5c:	d007      	beq.n	800de6e <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800de5e:	687b      	ldr	r3, [r7, #4]
 800de60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800de64:	685b      	ldr	r3, [r3, #4]
 800de66:	78fa      	ldrb	r2, [r7, #3]
 800de68:	4611      	mov	r1, r2
 800de6a:	6878      	ldr	r0, [r7, #4]
 800de6c:	4798      	blx	r3
  }

  return USBD_OK;
 800de6e:	2300      	movs	r3, #0
}
 800de70:	4618      	mov	r0, r3
 800de72:	3708      	adds	r7, #8
 800de74:	46bd      	mov	sp, r7
 800de76:	bd80      	pop	{r7, pc}

0800de78 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800de78:	b580      	push	{r7, lr}
 800de7a:	b084      	sub	sp, #16
 800de7c:	af00      	add	r7, sp, #0
 800de7e:	6078      	str	r0, [r7, #4]
 800de80:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800de82:	687b      	ldr	r3, [r7, #4]
 800de84:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800de88:	6839      	ldr	r1, [r7, #0]
 800de8a:	4618      	mov	r0, r3
 800de8c:	f000 ff46 	bl	800ed1c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800de90:	687b      	ldr	r3, [r7, #4]
 800de92:	2201      	movs	r2, #1
 800de94:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800de98:	687b      	ldr	r3, [r7, #4]
 800de9a:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800de9e:	461a      	mov	r2, r3
 800dea0:	687b      	ldr	r3, [r7, #4]
 800dea2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800dea6:	687b      	ldr	r3, [r7, #4]
 800dea8:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800deac:	f003 031f 	and.w	r3, r3, #31
 800deb0:	2b02      	cmp	r3, #2
 800deb2:	d01a      	beq.n	800deea <USBD_LL_SetupStage+0x72>
 800deb4:	2b02      	cmp	r3, #2
 800deb6:	d822      	bhi.n	800defe <USBD_LL_SetupStage+0x86>
 800deb8:	2b00      	cmp	r3, #0
 800deba:	d002      	beq.n	800dec2 <USBD_LL_SetupStage+0x4a>
 800debc:	2b01      	cmp	r3, #1
 800debe:	d00a      	beq.n	800ded6 <USBD_LL_SetupStage+0x5e>
 800dec0:	e01d      	b.n	800defe <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800dec2:	687b      	ldr	r3, [r7, #4]
 800dec4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800dec8:	4619      	mov	r1, r3
 800deca:	6878      	ldr	r0, [r7, #4]
 800decc:	f000 f9ee 	bl	800e2ac <USBD_StdDevReq>
 800ded0:	4603      	mov	r3, r0
 800ded2:	73fb      	strb	r3, [r7, #15]
      break;
 800ded4:	e020      	b.n	800df18 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800ded6:	687b      	ldr	r3, [r7, #4]
 800ded8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800dedc:	4619      	mov	r1, r3
 800dede:	6878      	ldr	r0, [r7, #4]
 800dee0:	f000 fa52 	bl	800e388 <USBD_StdItfReq>
 800dee4:	4603      	mov	r3, r0
 800dee6:	73fb      	strb	r3, [r7, #15]
      break;
 800dee8:	e016      	b.n	800df18 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800deea:	687b      	ldr	r3, [r7, #4]
 800deec:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800def0:	4619      	mov	r1, r3
 800def2:	6878      	ldr	r0, [r7, #4]
 800def4:	f000 fa91 	bl	800e41a <USBD_StdEPReq>
 800def8:	4603      	mov	r3, r0
 800defa:	73fb      	strb	r3, [r7, #15]
      break;
 800defc:	e00c      	b.n	800df18 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800defe:	687b      	ldr	r3, [r7, #4]
 800df00:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800df04:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800df08:	b2db      	uxtb	r3, r3
 800df0a:	4619      	mov	r1, r3
 800df0c:	6878      	ldr	r0, [r7, #4]
 800df0e:	f003 fb2d 	bl	801156c <USBD_LL_StallEP>
 800df12:	4603      	mov	r3, r0
 800df14:	73fb      	strb	r3, [r7, #15]
      break;
 800df16:	bf00      	nop
  }

  return ret;
 800df18:	7bfb      	ldrb	r3, [r7, #15]
}
 800df1a:	4618      	mov	r0, r3
 800df1c:	3710      	adds	r7, #16
 800df1e:	46bd      	mov	sp, r7
 800df20:	bd80      	pop	{r7, pc}

0800df22 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800df22:	b580      	push	{r7, lr}
 800df24:	b086      	sub	sp, #24
 800df26:	af00      	add	r7, sp, #0
 800df28:	60f8      	str	r0, [r7, #12]
 800df2a:	460b      	mov	r3, r1
 800df2c:	607a      	str	r2, [r7, #4]
 800df2e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800df30:	7afb      	ldrb	r3, [r7, #11]
 800df32:	2b00      	cmp	r3, #0
 800df34:	d138      	bne.n	800dfa8 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800df36:	68fb      	ldr	r3, [r7, #12]
 800df38:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800df3c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800df3e:	68fb      	ldr	r3, [r7, #12]
 800df40:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800df44:	2b03      	cmp	r3, #3
 800df46:	d14a      	bne.n	800dfde <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800df48:	693b      	ldr	r3, [r7, #16]
 800df4a:	689a      	ldr	r2, [r3, #8]
 800df4c:	693b      	ldr	r3, [r7, #16]
 800df4e:	68db      	ldr	r3, [r3, #12]
 800df50:	429a      	cmp	r2, r3
 800df52:	d913      	bls.n	800df7c <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800df54:	693b      	ldr	r3, [r7, #16]
 800df56:	689a      	ldr	r2, [r3, #8]
 800df58:	693b      	ldr	r3, [r7, #16]
 800df5a:	68db      	ldr	r3, [r3, #12]
 800df5c:	1ad2      	subs	r2, r2, r3
 800df5e:	693b      	ldr	r3, [r7, #16]
 800df60:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800df62:	693b      	ldr	r3, [r7, #16]
 800df64:	68da      	ldr	r2, [r3, #12]
 800df66:	693b      	ldr	r3, [r7, #16]
 800df68:	689b      	ldr	r3, [r3, #8]
 800df6a:	4293      	cmp	r3, r2
 800df6c:	bf28      	it	cs
 800df6e:	4613      	movcs	r3, r2
 800df70:	461a      	mov	r2, r3
 800df72:	6879      	ldr	r1, [r7, #4]
 800df74:	68f8      	ldr	r0, [r7, #12]
 800df76:	f000 ffc5 	bl	800ef04 <USBD_CtlContinueRx>
 800df7a:	e030      	b.n	800dfde <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800df7c:	68fb      	ldr	r3, [r7, #12]
 800df7e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800df82:	b2db      	uxtb	r3, r3
 800df84:	2b03      	cmp	r3, #3
 800df86:	d10b      	bne.n	800dfa0 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800df88:	68fb      	ldr	r3, [r7, #12]
 800df8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800df8e:	691b      	ldr	r3, [r3, #16]
 800df90:	2b00      	cmp	r3, #0
 800df92:	d005      	beq.n	800dfa0 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800df94:	68fb      	ldr	r3, [r7, #12]
 800df96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800df9a:	691b      	ldr	r3, [r3, #16]
 800df9c:	68f8      	ldr	r0, [r7, #12]
 800df9e:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800dfa0:	68f8      	ldr	r0, [r7, #12]
 800dfa2:	f000 ffc0 	bl	800ef26 <USBD_CtlSendStatus>
 800dfa6:	e01a      	b.n	800dfde <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dfa8:	68fb      	ldr	r3, [r7, #12]
 800dfaa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dfae:	b2db      	uxtb	r3, r3
 800dfb0:	2b03      	cmp	r3, #3
 800dfb2:	d114      	bne.n	800dfde <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800dfb4:	68fb      	ldr	r3, [r7, #12]
 800dfb6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dfba:	699b      	ldr	r3, [r3, #24]
 800dfbc:	2b00      	cmp	r3, #0
 800dfbe:	d00e      	beq.n	800dfde <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800dfc0:	68fb      	ldr	r3, [r7, #12]
 800dfc2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dfc6:	699b      	ldr	r3, [r3, #24]
 800dfc8:	7afa      	ldrb	r2, [r7, #11]
 800dfca:	4611      	mov	r1, r2
 800dfcc:	68f8      	ldr	r0, [r7, #12]
 800dfce:	4798      	blx	r3
 800dfd0:	4603      	mov	r3, r0
 800dfd2:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800dfd4:	7dfb      	ldrb	r3, [r7, #23]
 800dfd6:	2b00      	cmp	r3, #0
 800dfd8:	d001      	beq.n	800dfde <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800dfda:	7dfb      	ldrb	r3, [r7, #23]
 800dfdc:	e000      	b.n	800dfe0 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800dfde:	2300      	movs	r3, #0
}
 800dfe0:	4618      	mov	r0, r3
 800dfe2:	3718      	adds	r7, #24
 800dfe4:	46bd      	mov	sp, r7
 800dfe6:	bd80      	pop	{r7, pc}

0800dfe8 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800dfe8:	b580      	push	{r7, lr}
 800dfea:	b086      	sub	sp, #24
 800dfec:	af00      	add	r7, sp, #0
 800dfee:	60f8      	str	r0, [r7, #12]
 800dff0:	460b      	mov	r3, r1
 800dff2:	607a      	str	r2, [r7, #4]
 800dff4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800dff6:	7afb      	ldrb	r3, [r7, #11]
 800dff8:	2b00      	cmp	r3, #0
 800dffa:	d16b      	bne.n	800e0d4 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800dffc:	68fb      	ldr	r3, [r7, #12]
 800dffe:	3314      	adds	r3, #20
 800e000:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800e002:	68fb      	ldr	r3, [r7, #12]
 800e004:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800e008:	2b02      	cmp	r3, #2
 800e00a:	d156      	bne.n	800e0ba <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800e00c:	693b      	ldr	r3, [r7, #16]
 800e00e:	689a      	ldr	r2, [r3, #8]
 800e010:	693b      	ldr	r3, [r7, #16]
 800e012:	68db      	ldr	r3, [r3, #12]
 800e014:	429a      	cmp	r2, r3
 800e016:	d914      	bls.n	800e042 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800e018:	693b      	ldr	r3, [r7, #16]
 800e01a:	689a      	ldr	r2, [r3, #8]
 800e01c:	693b      	ldr	r3, [r7, #16]
 800e01e:	68db      	ldr	r3, [r3, #12]
 800e020:	1ad2      	subs	r2, r2, r3
 800e022:	693b      	ldr	r3, [r7, #16]
 800e024:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800e026:	693b      	ldr	r3, [r7, #16]
 800e028:	689b      	ldr	r3, [r3, #8]
 800e02a:	461a      	mov	r2, r3
 800e02c:	6879      	ldr	r1, [r7, #4]
 800e02e:	68f8      	ldr	r0, [r7, #12]
 800e030:	f000 ff3a 	bl	800eea8 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e034:	2300      	movs	r3, #0
 800e036:	2200      	movs	r2, #0
 800e038:	2100      	movs	r1, #0
 800e03a:	68f8      	ldr	r0, [r7, #12]
 800e03c:	f003 fb41 	bl	80116c2 <USBD_LL_PrepareReceive>
 800e040:	e03b      	b.n	800e0ba <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800e042:	693b      	ldr	r3, [r7, #16]
 800e044:	68da      	ldr	r2, [r3, #12]
 800e046:	693b      	ldr	r3, [r7, #16]
 800e048:	689b      	ldr	r3, [r3, #8]
 800e04a:	429a      	cmp	r2, r3
 800e04c:	d11c      	bne.n	800e088 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800e04e:	693b      	ldr	r3, [r7, #16]
 800e050:	685a      	ldr	r2, [r3, #4]
 800e052:	693b      	ldr	r3, [r7, #16]
 800e054:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800e056:	429a      	cmp	r2, r3
 800e058:	d316      	bcc.n	800e088 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800e05a:	693b      	ldr	r3, [r7, #16]
 800e05c:	685a      	ldr	r2, [r3, #4]
 800e05e:	68fb      	ldr	r3, [r7, #12]
 800e060:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800e064:	429a      	cmp	r2, r3
 800e066:	d20f      	bcs.n	800e088 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800e068:	2200      	movs	r2, #0
 800e06a:	2100      	movs	r1, #0
 800e06c:	68f8      	ldr	r0, [r7, #12]
 800e06e:	f000 ff1b 	bl	800eea8 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800e072:	68fb      	ldr	r3, [r7, #12]
 800e074:	2200      	movs	r2, #0
 800e076:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e07a:	2300      	movs	r3, #0
 800e07c:	2200      	movs	r2, #0
 800e07e:	2100      	movs	r1, #0
 800e080:	68f8      	ldr	r0, [r7, #12]
 800e082:	f003 fb1e 	bl	80116c2 <USBD_LL_PrepareReceive>
 800e086:	e018      	b.n	800e0ba <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e088:	68fb      	ldr	r3, [r7, #12]
 800e08a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e08e:	b2db      	uxtb	r3, r3
 800e090:	2b03      	cmp	r3, #3
 800e092:	d10b      	bne.n	800e0ac <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800e094:	68fb      	ldr	r3, [r7, #12]
 800e096:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e09a:	68db      	ldr	r3, [r3, #12]
 800e09c:	2b00      	cmp	r3, #0
 800e09e:	d005      	beq.n	800e0ac <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800e0a0:	68fb      	ldr	r3, [r7, #12]
 800e0a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e0a6:	68db      	ldr	r3, [r3, #12]
 800e0a8:	68f8      	ldr	r0, [r7, #12]
 800e0aa:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800e0ac:	2180      	movs	r1, #128	; 0x80
 800e0ae:	68f8      	ldr	r0, [r7, #12]
 800e0b0:	f003 fa5c 	bl	801156c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800e0b4:	68f8      	ldr	r0, [r7, #12]
 800e0b6:	f000 ff49 	bl	800ef4c <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800e0ba:	68fb      	ldr	r3, [r7, #12]
 800e0bc:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800e0c0:	2b01      	cmp	r3, #1
 800e0c2:	d122      	bne.n	800e10a <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800e0c4:	68f8      	ldr	r0, [r7, #12]
 800e0c6:	f7ff fe98 	bl	800ddfa <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800e0ca:	68fb      	ldr	r3, [r7, #12]
 800e0cc:	2200      	movs	r2, #0
 800e0ce:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800e0d2:	e01a      	b.n	800e10a <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e0d4:	68fb      	ldr	r3, [r7, #12]
 800e0d6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e0da:	b2db      	uxtb	r3, r3
 800e0dc:	2b03      	cmp	r3, #3
 800e0de:	d114      	bne.n	800e10a <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800e0e0:	68fb      	ldr	r3, [r7, #12]
 800e0e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e0e6:	695b      	ldr	r3, [r3, #20]
 800e0e8:	2b00      	cmp	r3, #0
 800e0ea:	d00e      	beq.n	800e10a <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800e0ec:	68fb      	ldr	r3, [r7, #12]
 800e0ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e0f2:	695b      	ldr	r3, [r3, #20]
 800e0f4:	7afa      	ldrb	r2, [r7, #11]
 800e0f6:	4611      	mov	r1, r2
 800e0f8:	68f8      	ldr	r0, [r7, #12]
 800e0fa:	4798      	blx	r3
 800e0fc:	4603      	mov	r3, r0
 800e0fe:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800e100:	7dfb      	ldrb	r3, [r7, #23]
 800e102:	2b00      	cmp	r3, #0
 800e104:	d001      	beq.n	800e10a <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800e106:	7dfb      	ldrb	r3, [r7, #23]
 800e108:	e000      	b.n	800e10c <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800e10a:	2300      	movs	r3, #0
}
 800e10c:	4618      	mov	r0, r3
 800e10e:	3718      	adds	r7, #24
 800e110:	46bd      	mov	sp, r7
 800e112:	bd80      	pop	{r7, pc}

0800e114 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800e114:	b580      	push	{r7, lr}
 800e116:	b082      	sub	sp, #8
 800e118:	af00      	add	r7, sp, #0
 800e11a:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800e11c:	687b      	ldr	r3, [r7, #4]
 800e11e:	2201      	movs	r2, #1
 800e120:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800e124:	687b      	ldr	r3, [r7, #4]
 800e126:	2200      	movs	r2, #0
 800e128:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800e12c:	687b      	ldr	r3, [r7, #4]
 800e12e:	2200      	movs	r2, #0
 800e130:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800e132:	687b      	ldr	r3, [r7, #4]
 800e134:	2200      	movs	r2, #0
 800e136:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800e13a:	687b      	ldr	r3, [r7, #4]
 800e13c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e140:	2b00      	cmp	r3, #0
 800e142:	d101      	bne.n	800e148 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800e144:	2303      	movs	r3, #3
 800e146:	e02f      	b.n	800e1a8 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800e148:	687b      	ldr	r3, [r7, #4]
 800e14a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e14e:	2b00      	cmp	r3, #0
 800e150:	d00f      	beq.n	800e172 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800e152:	687b      	ldr	r3, [r7, #4]
 800e154:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e158:	685b      	ldr	r3, [r3, #4]
 800e15a:	2b00      	cmp	r3, #0
 800e15c:	d009      	beq.n	800e172 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800e15e:	687b      	ldr	r3, [r7, #4]
 800e160:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e164:	685b      	ldr	r3, [r3, #4]
 800e166:	687a      	ldr	r2, [r7, #4]
 800e168:	6852      	ldr	r2, [r2, #4]
 800e16a:	b2d2      	uxtb	r2, r2
 800e16c:	4611      	mov	r1, r2
 800e16e:	6878      	ldr	r0, [r7, #4]
 800e170:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800e172:	2340      	movs	r3, #64	; 0x40
 800e174:	2200      	movs	r2, #0
 800e176:	2100      	movs	r1, #0
 800e178:	6878      	ldr	r0, [r7, #4]
 800e17a:	f003 f9b2 	bl	80114e2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800e17e:	687b      	ldr	r3, [r7, #4]
 800e180:	2201      	movs	r2, #1
 800e182:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800e186:	687b      	ldr	r3, [r7, #4]
 800e188:	2240      	movs	r2, #64	; 0x40
 800e18a:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800e18e:	2340      	movs	r3, #64	; 0x40
 800e190:	2200      	movs	r2, #0
 800e192:	2180      	movs	r1, #128	; 0x80
 800e194:	6878      	ldr	r0, [r7, #4]
 800e196:	f003 f9a4 	bl	80114e2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800e19a:	687b      	ldr	r3, [r7, #4]
 800e19c:	2201      	movs	r2, #1
 800e19e:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800e1a0:	687b      	ldr	r3, [r7, #4]
 800e1a2:	2240      	movs	r2, #64	; 0x40
 800e1a4:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800e1a6:	2300      	movs	r3, #0
}
 800e1a8:	4618      	mov	r0, r3
 800e1aa:	3708      	adds	r7, #8
 800e1ac:	46bd      	mov	sp, r7
 800e1ae:	bd80      	pop	{r7, pc}

0800e1b0 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800e1b0:	b480      	push	{r7}
 800e1b2:	b083      	sub	sp, #12
 800e1b4:	af00      	add	r7, sp, #0
 800e1b6:	6078      	str	r0, [r7, #4]
 800e1b8:	460b      	mov	r3, r1
 800e1ba:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800e1bc:	687b      	ldr	r3, [r7, #4]
 800e1be:	78fa      	ldrb	r2, [r7, #3]
 800e1c0:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800e1c2:	2300      	movs	r3, #0
}
 800e1c4:	4618      	mov	r0, r3
 800e1c6:	370c      	adds	r7, #12
 800e1c8:	46bd      	mov	sp, r7
 800e1ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1ce:	4770      	bx	lr

0800e1d0 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800e1d0:	b480      	push	{r7}
 800e1d2:	b083      	sub	sp, #12
 800e1d4:	af00      	add	r7, sp, #0
 800e1d6:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800e1d8:	687b      	ldr	r3, [r7, #4]
 800e1da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e1de:	b2da      	uxtb	r2, r3
 800e1e0:	687b      	ldr	r3, [r7, #4]
 800e1e2:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800e1e6:	687b      	ldr	r3, [r7, #4]
 800e1e8:	2204      	movs	r2, #4
 800e1ea:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800e1ee:	2300      	movs	r3, #0
}
 800e1f0:	4618      	mov	r0, r3
 800e1f2:	370c      	adds	r7, #12
 800e1f4:	46bd      	mov	sp, r7
 800e1f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1fa:	4770      	bx	lr

0800e1fc <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800e1fc:	b480      	push	{r7}
 800e1fe:	b083      	sub	sp, #12
 800e200:	af00      	add	r7, sp, #0
 800e202:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800e204:	687b      	ldr	r3, [r7, #4]
 800e206:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e20a:	b2db      	uxtb	r3, r3
 800e20c:	2b04      	cmp	r3, #4
 800e20e:	d106      	bne.n	800e21e <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800e210:	687b      	ldr	r3, [r7, #4]
 800e212:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800e216:	b2da      	uxtb	r2, r3
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800e21e:	2300      	movs	r3, #0
}
 800e220:	4618      	mov	r0, r3
 800e222:	370c      	adds	r7, #12
 800e224:	46bd      	mov	sp, r7
 800e226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e22a:	4770      	bx	lr

0800e22c <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800e22c:	b580      	push	{r7, lr}
 800e22e:	b082      	sub	sp, #8
 800e230:	af00      	add	r7, sp, #0
 800e232:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800e234:	687b      	ldr	r3, [r7, #4]
 800e236:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e23a:	2b00      	cmp	r3, #0
 800e23c:	d101      	bne.n	800e242 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800e23e:	2303      	movs	r3, #3
 800e240:	e012      	b.n	800e268 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e242:	687b      	ldr	r3, [r7, #4]
 800e244:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e248:	b2db      	uxtb	r3, r3
 800e24a:	2b03      	cmp	r3, #3
 800e24c:	d10b      	bne.n	800e266 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800e24e:	687b      	ldr	r3, [r7, #4]
 800e250:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e254:	69db      	ldr	r3, [r3, #28]
 800e256:	2b00      	cmp	r3, #0
 800e258:	d005      	beq.n	800e266 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800e25a:	687b      	ldr	r3, [r7, #4]
 800e25c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e260:	69db      	ldr	r3, [r3, #28]
 800e262:	6878      	ldr	r0, [r7, #4]
 800e264:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800e266:	2300      	movs	r3, #0
}
 800e268:	4618      	mov	r0, r3
 800e26a:	3708      	adds	r7, #8
 800e26c:	46bd      	mov	sp, r7
 800e26e:	bd80      	pop	{r7, pc}

0800e270 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800e270:	b480      	push	{r7}
 800e272:	b087      	sub	sp, #28
 800e274:	af00      	add	r7, sp, #0
 800e276:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800e278:	687b      	ldr	r3, [r7, #4]
 800e27a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800e27c:	697b      	ldr	r3, [r7, #20]
 800e27e:	781b      	ldrb	r3, [r3, #0]
 800e280:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800e282:	697b      	ldr	r3, [r7, #20]
 800e284:	3301      	adds	r3, #1
 800e286:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800e288:	697b      	ldr	r3, [r7, #20]
 800e28a:	781b      	ldrb	r3, [r3, #0]
 800e28c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800e28e:	8a3b      	ldrh	r3, [r7, #16]
 800e290:	021b      	lsls	r3, r3, #8
 800e292:	b21a      	sxth	r2, r3
 800e294:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800e298:	4313      	orrs	r3, r2
 800e29a:	b21b      	sxth	r3, r3
 800e29c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800e29e:	89fb      	ldrh	r3, [r7, #14]
}
 800e2a0:	4618      	mov	r0, r3
 800e2a2:	371c      	adds	r7, #28
 800e2a4:	46bd      	mov	sp, r7
 800e2a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2aa:	4770      	bx	lr

0800e2ac <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e2ac:	b580      	push	{r7, lr}
 800e2ae:	b084      	sub	sp, #16
 800e2b0:	af00      	add	r7, sp, #0
 800e2b2:	6078      	str	r0, [r7, #4]
 800e2b4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e2b6:	2300      	movs	r3, #0
 800e2b8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e2ba:	683b      	ldr	r3, [r7, #0]
 800e2bc:	781b      	ldrb	r3, [r3, #0]
 800e2be:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e2c2:	2b40      	cmp	r3, #64	; 0x40
 800e2c4:	d005      	beq.n	800e2d2 <USBD_StdDevReq+0x26>
 800e2c6:	2b40      	cmp	r3, #64	; 0x40
 800e2c8:	d853      	bhi.n	800e372 <USBD_StdDevReq+0xc6>
 800e2ca:	2b00      	cmp	r3, #0
 800e2cc:	d00b      	beq.n	800e2e6 <USBD_StdDevReq+0x3a>
 800e2ce:	2b20      	cmp	r3, #32
 800e2d0:	d14f      	bne.n	800e372 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800e2d2:	687b      	ldr	r3, [r7, #4]
 800e2d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e2d8:	689b      	ldr	r3, [r3, #8]
 800e2da:	6839      	ldr	r1, [r7, #0]
 800e2dc:	6878      	ldr	r0, [r7, #4]
 800e2de:	4798      	blx	r3
 800e2e0:	4603      	mov	r3, r0
 800e2e2:	73fb      	strb	r3, [r7, #15]
      break;
 800e2e4:	e04a      	b.n	800e37c <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800e2e6:	683b      	ldr	r3, [r7, #0]
 800e2e8:	785b      	ldrb	r3, [r3, #1]
 800e2ea:	2b09      	cmp	r3, #9
 800e2ec:	d83b      	bhi.n	800e366 <USBD_StdDevReq+0xba>
 800e2ee:	a201      	add	r2, pc, #4	; (adr r2, 800e2f4 <USBD_StdDevReq+0x48>)
 800e2f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e2f4:	0800e349 	.word	0x0800e349
 800e2f8:	0800e35d 	.word	0x0800e35d
 800e2fc:	0800e367 	.word	0x0800e367
 800e300:	0800e353 	.word	0x0800e353
 800e304:	0800e367 	.word	0x0800e367
 800e308:	0800e327 	.word	0x0800e327
 800e30c:	0800e31d 	.word	0x0800e31d
 800e310:	0800e367 	.word	0x0800e367
 800e314:	0800e33f 	.word	0x0800e33f
 800e318:	0800e331 	.word	0x0800e331
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800e31c:	6839      	ldr	r1, [r7, #0]
 800e31e:	6878      	ldr	r0, [r7, #4]
 800e320:	f000 f9de 	bl	800e6e0 <USBD_GetDescriptor>
          break;
 800e324:	e024      	b.n	800e370 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800e326:	6839      	ldr	r1, [r7, #0]
 800e328:	6878      	ldr	r0, [r7, #4]
 800e32a:	f000 fb6d 	bl	800ea08 <USBD_SetAddress>
          break;
 800e32e:	e01f      	b.n	800e370 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800e330:	6839      	ldr	r1, [r7, #0]
 800e332:	6878      	ldr	r0, [r7, #4]
 800e334:	f000 fbac 	bl	800ea90 <USBD_SetConfig>
 800e338:	4603      	mov	r3, r0
 800e33a:	73fb      	strb	r3, [r7, #15]
          break;
 800e33c:	e018      	b.n	800e370 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800e33e:	6839      	ldr	r1, [r7, #0]
 800e340:	6878      	ldr	r0, [r7, #4]
 800e342:	f000 fc4b 	bl	800ebdc <USBD_GetConfig>
          break;
 800e346:	e013      	b.n	800e370 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800e348:	6839      	ldr	r1, [r7, #0]
 800e34a:	6878      	ldr	r0, [r7, #4]
 800e34c:	f000 fc7c 	bl	800ec48 <USBD_GetStatus>
          break;
 800e350:	e00e      	b.n	800e370 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800e352:	6839      	ldr	r1, [r7, #0]
 800e354:	6878      	ldr	r0, [r7, #4]
 800e356:	f000 fcab 	bl	800ecb0 <USBD_SetFeature>
          break;
 800e35a:	e009      	b.n	800e370 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800e35c:	6839      	ldr	r1, [r7, #0]
 800e35e:	6878      	ldr	r0, [r7, #4]
 800e360:	f000 fcba 	bl	800ecd8 <USBD_ClrFeature>
          break;
 800e364:	e004      	b.n	800e370 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800e366:	6839      	ldr	r1, [r7, #0]
 800e368:	6878      	ldr	r0, [r7, #4]
 800e36a:	f000 fd11 	bl	800ed90 <USBD_CtlError>
          break;
 800e36e:	bf00      	nop
      }
      break;
 800e370:	e004      	b.n	800e37c <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800e372:	6839      	ldr	r1, [r7, #0]
 800e374:	6878      	ldr	r0, [r7, #4]
 800e376:	f000 fd0b 	bl	800ed90 <USBD_CtlError>
      break;
 800e37a:	bf00      	nop
  }

  return ret;
 800e37c:	7bfb      	ldrb	r3, [r7, #15]
}
 800e37e:	4618      	mov	r0, r3
 800e380:	3710      	adds	r7, #16
 800e382:	46bd      	mov	sp, r7
 800e384:	bd80      	pop	{r7, pc}
 800e386:	bf00      	nop

0800e388 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e388:	b580      	push	{r7, lr}
 800e38a:	b084      	sub	sp, #16
 800e38c:	af00      	add	r7, sp, #0
 800e38e:	6078      	str	r0, [r7, #4]
 800e390:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e392:	2300      	movs	r3, #0
 800e394:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e396:	683b      	ldr	r3, [r7, #0]
 800e398:	781b      	ldrb	r3, [r3, #0]
 800e39a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e39e:	2b40      	cmp	r3, #64	; 0x40
 800e3a0:	d005      	beq.n	800e3ae <USBD_StdItfReq+0x26>
 800e3a2:	2b40      	cmp	r3, #64	; 0x40
 800e3a4:	d82f      	bhi.n	800e406 <USBD_StdItfReq+0x7e>
 800e3a6:	2b00      	cmp	r3, #0
 800e3a8:	d001      	beq.n	800e3ae <USBD_StdItfReq+0x26>
 800e3aa:	2b20      	cmp	r3, #32
 800e3ac:	d12b      	bne.n	800e406 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800e3ae:	687b      	ldr	r3, [r7, #4]
 800e3b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e3b4:	b2db      	uxtb	r3, r3
 800e3b6:	3b01      	subs	r3, #1
 800e3b8:	2b02      	cmp	r3, #2
 800e3ba:	d81d      	bhi.n	800e3f8 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800e3bc:	683b      	ldr	r3, [r7, #0]
 800e3be:	889b      	ldrh	r3, [r3, #4]
 800e3c0:	b2db      	uxtb	r3, r3
 800e3c2:	2b01      	cmp	r3, #1
 800e3c4:	d813      	bhi.n	800e3ee <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800e3c6:	687b      	ldr	r3, [r7, #4]
 800e3c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e3cc:	689b      	ldr	r3, [r3, #8]
 800e3ce:	6839      	ldr	r1, [r7, #0]
 800e3d0:	6878      	ldr	r0, [r7, #4]
 800e3d2:	4798      	blx	r3
 800e3d4:	4603      	mov	r3, r0
 800e3d6:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800e3d8:	683b      	ldr	r3, [r7, #0]
 800e3da:	88db      	ldrh	r3, [r3, #6]
 800e3dc:	2b00      	cmp	r3, #0
 800e3de:	d110      	bne.n	800e402 <USBD_StdItfReq+0x7a>
 800e3e0:	7bfb      	ldrb	r3, [r7, #15]
 800e3e2:	2b00      	cmp	r3, #0
 800e3e4:	d10d      	bne.n	800e402 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800e3e6:	6878      	ldr	r0, [r7, #4]
 800e3e8:	f000 fd9d 	bl	800ef26 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800e3ec:	e009      	b.n	800e402 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800e3ee:	6839      	ldr	r1, [r7, #0]
 800e3f0:	6878      	ldr	r0, [r7, #4]
 800e3f2:	f000 fccd 	bl	800ed90 <USBD_CtlError>
          break;
 800e3f6:	e004      	b.n	800e402 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800e3f8:	6839      	ldr	r1, [r7, #0]
 800e3fa:	6878      	ldr	r0, [r7, #4]
 800e3fc:	f000 fcc8 	bl	800ed90 <USBD_CtlError>
          break;
 800e400:	e000      	b.n	800e404 <USBD_StdItfReq+0x7c>
          break;
 800e402:	bf00      	nop
      }
      break;
 800e404:	e004      	b.n	800e410 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800e406:	6839      	ldr	r1, [r7, #0]
 800e408:	6878      	ldr	r0, [r7, #4]
 800e40a:	f000 fcc1 	bl	800ed90 <USBD_CtlError>
      break;
 800e40e:	bf00      	nop
  }

  return ret;
 800e410:	7bfb      	ldrb	r3, [r7, #15]
}
 800e412:	4618      	mov	r0, r3
 800e414:	3710      	adds	r7, #16
 800e416:	46bd      	mov	sp, r7
 800e418:	bd80      	pop	{r7, pc}

0800e41a <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e41a:	b580      	push	{r7, lr}
 800e41c:	b084      	sub	sp, #16
 800e41e:	af00      	add	r7, sp, #0
 800e420:	6078      	str	r0, [r7, #4]
 800e422:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800e424:	2300      	movs	r3, #0
 800e426:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800e428:	683b      	ldr	r3, [r7, #0]
 800e42a:	889b      	ldrh	r3, [r3, #4]
 800e42c:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e42e:	683b      	ldr	r3, [r7, #0]
 800e430:	781b      	ldrb	r3, [r3, #0]
 800e432:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e436:	2b40      	cmp	r3, #64	; 0x40
 800e438:	d007      	beq.n	800e44a <USBD_StdEPReq+0x30>
 800e43a:	2b40      	cmp	r3, #64	; 0x40
 800e43c:	f200 8145 	bhi.w	800e6ca <USBD_StdEPReq+0x2b0>
 800e440:	2b00      	cmp	r3, #0
 800e442:	d00c      	beq.n	800e45e <USBD_StdEPReq+0x44>
 800e444:	2b20      	cmp	r3, #32
 800e446:	f040 8140 	bne.w	800e6ca <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800e44a:	687b      	ldr	r3, [r7, #4]
 800e44c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e450:	689b      	ldr	r3, [r3, #8]
 800e452:	6839      	ldr	r1, [r7, #0]
 800e454:	6878      	ldr	r0, [r7, #4]
 800e456:	4798      	blx	r3
 800e458:	4603      	mov	r3, r0
 800e45a:	73fb      	strb	r3, [r7, #15]
      break;
 800e45c:	e13a      	b.n	800e6d4 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800e45e:	683b      	ldr	r3, [r7, #0]
 800e460:	785b      	ldrb	r3, [r3, #1]
 800e462:	2b03      	cmp	r3, #3
 800e464:	d007      	beq.n	800e476 <USBD_StdEPReq+0x5c>
 800e466:	2b03      	cmp	r3, #3
 800e468:	f300 8129 	bgt.w	800e6be <USBD_StdEPReq+0x2a4>
 800e46c:	2b00      	cmp	r3, #0
 800e46e:	d07f      	beq.n	800e570 <USBD_StdEPReq+0x156>
 800e470:	2b01      	cmp	r3, #1
 800e472:	d03c      	beq.n	800e4ee <USBD_StdEPReq+0xd4>
 800e474:	e123      	b.n	800e6be <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800e476:	687b      	ldr	r3, [r7, #4]
 800e478:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e47c:	b2db      	uxtb	r3, r3
 800e47e:	2b02      	cmp	r3, #2
 800e480:	d002      	beq.n	800e488 <USBD_StdEPReq+0x6e>
 800e482:	2b03      	cmp	r3, #3
 800e484:	d016      	beq.n	800e4b4 <USBD_StdEPReq+0x9a>
 800e486:	e02c      	b.n	800e4e2 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e488:	7bbb      	ldrb	r3, [r7, #14]
 800e48a:	2b00      	cmp	r3, #0
 800e48c:	d00d      	beq.n	800e4aa <USBD_StdEPReq+0x90>
 800e48e:	7bbb      	ldrb	r3, [r7, #14]
 800e490:	2b80      	cmp	r3, #128	; 0x80
 800e492:	d00a      	beq.n	800e4aa <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800e494:	7bbb      	ldrb	r3, [r7, #14]
 800e496:	4619      	mov	r1, r3
 800e498:	6878      	ldr	r0, [r7, #4]
 800e49a:	f003 f867 	bl	801156c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800e49e:	2180      	movs	r1, #128	; 0x80
 800e4a0:	6878      	ldr	r0, [r7, #4]
 800e4a2:	f003 f863 	bl	801156c <USBD_LL_StallEP>
 800e4a6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800e4a8:	e020      	b.n	800e4ec <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800e4aa:	6839      	ldr	r1, [r7, #0]
 800e4ac:	6878      	ldr	r0, [r7, #4]
 800e4ae:	f000 fc6f 	bl	800ed90 <USBD_CtlError>
              break;
 800e4b2:	e01b      	b.n	800e4ec <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800e4b4:	683b      	ldr	r3, [r7, #0]
 800e4b6:	885b      	ldrh	r3, [r3, #2]
 800e4b8:	2b00      	cmp	r3, #0
 800e4ba:	d10e      	bne.n	800e4da <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800e4bc:	7bbb      	ldrb	r3, [r7, #14]
 800e4be:	2b00      	cmp	r3, #0
 800e4c0:	d00b      	beq.n	800e4da <USBD_StdEPReq+0xc0>
 800e4c2:	7bbb      	ldrb	r3, [r7, #14]
 800e4c4:	2b80      	cmp	r3, #128	; 0x80
 800e4c6:	d008      	beq.n	800e4da <USBD_StdEPReq+0xc0>
 800e4c8:	683b      	ldr	r3, [r7, #0]
 800e4ca:	88db      	ldrh	r3, [r3, #6]
 800e4cc:	2b00      	cmp	r3, #0
 800e4ce:	d104      	bne.n	800e4da <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800e4d0:	7bbb      	ldrb	r3, [r7, #14]
 800e4d2:	4619      	mov	r1, r3
 800e4d4:	6878      	ldr	r0, [r7, #4]
 800e4d6:	f003 f849 	bl	801156c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800e4da:	6878      	ldr	r0, [r7, #4]
 800e4dc:	f000 fd23 	bl	800ef26 <USBD_CtlSendStatus>

              break;
 800e4e0:	e004      	b.n	800e4ec <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800e4e2:	6839      	ldr	r1, [r7, #0]
 800e4e4:	6878      	ldr	r0, [r7, #4]
 800e4e6:	f000 fc53 	bl	800ed90 <USBD_CtlError>
              break;
 800e4ea:	bf00      	nop
          }
          break;
 800e4ec:	e0ec      	b.n	800e6c8 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800e4ee:	687b      	ldr	r3, [r7, #4]
 800e4f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e4f4:	b2db      	uxtb	r3, r3
 800e4f6:	2b02      	cmp	r3, #2
 800e4f8:	d002      	beq.n	800e500 <USBD_StdEPReq+0xe6>
 800e4fa:	2b03      	cmp	r3, #3
 800e4fc:	d016      	beq.n	800e52c <USBD_StdEPReq+0x112>
 800e4fe:	e030      	b.n	800e562 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e500:	7bbb      	ldrb	r3, [r7, #14]
 800e502:	2b00      	cmp	r3, #0
 800e504:	d00d      	beq.n	800e522 <USBD_StdEPReq+0x108>
 800e506:	7bbb      	ldrb	r3, [r7, #14]
 800e508:	2b80      	cmp	r3, #128	; 0x80
 800e50a:	d00a      	beq.n	800e522 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800e50c:	7bbb      	ldrb	r3, [r7, #14]
 800e50e:	4619      	mov	r1, r3
 800e510:	6878      	ldr	r0, [r7, #4]
 800e512:	f003 f82b 	bl	801156c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800e516:	2180      	movs	r1, #128	; 0x80
 800e518:	6878      	ldr	r0, [r7, #4]
 800e51a:	f003 f827 	bl	801156c <USBD_LL_StallEP>
 800e51e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800e520:	e025      	b.n	800e56e <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800e522:	6839      	ldr	r1, [r7, #0]
 800e524:	6878      	ldr	r0, [r7, #4]
 800e526:	f000 fc33 	bl	800ed90 <USBD_CtlError>
              break;
 800e52a:	e020      	b.n	800e56e <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800e52c:	683b      	ldr	r3, [r7, #0]
 800e52e:	885b      	ldrh	r3, [r3, #2]
 800e530:	2b00      	cmp	r3, #0
 800e532:	d11b      	bne.n	800e56c <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800e534:	7bbb      	ldrb	r3, [r7, #14]
 800e536:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e53a:	2b00      	cmp	r3, #0
 800e53c:	d004      	beq.n	800e548 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800e53e:	7bbb      	ldrb	r3, [r7, #14]
 800e540:	4619      	mov	r1, r3
 800e542:	6878      	ldr	r0, [r7, #4]
 800e544:	f003 f831 	bl	80115aa <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800e548:	6878      	ldr	r0, [r7, #4]
 800e54a:	f000 fcec 	bl	800ef26 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800e54e:	687b      	ldr	r3, [r7, #4]
 800e550:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e554:	689b      	ldr	r3, [r3, #8]
 800e556:	6839      	ldr	r1, [r7, #0]
 800e558:	6878      	ldr	r0, [r7, #4]
 800e55a:	4798      	blx	r3
 800e55c:	4603      	mov	r3, r0
 800e55e:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800e560:	e004      	b.n	800e56c <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800e562:	6839      	ldr	r1, [r7, #0]
 800e564:	6878      	ldr	r0, [r7, #4]
 800e566:	f000 fc13 	bl	800ed90 <USBD_CtlError>
              break;
 800e56a:	e000      	b.n	800e56e <USBD_StdEPReq+0x154>
              break;
 800e56c:	bf00      	nop
          }
          break;
 800e56e:	e0ab      	b.n	800e6c8 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800e570:	687b      	ldr	r3, [r7, #4]
 800e572:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e576:	b2db      	uxtb	r3, r3
 800e578:	2b02      	cmp	r3, #2
 800e57a:	d002      	beq.n	800e582 <USBD_StdEPReq+0x168>
 800e57c:	2b03      	cmp	r3, #3
 800e57e:	d032      	beq.n	800e5e6 <USBD_StdEPReq+0x1cc>
 800e580:	e097      	b.n	800e6b2 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e582:	7bbb      	ldrb	r3, [r7, #14]
 800e584:	2b00      	cmp	r3, #0
 800e586:	d007      	beq.n	800e598 <USBD_StdEPReq+0x17e>
 800e588:	7bbb      	ldrb	r3, [r7, #14]
 800e58a:	2b80      	cmp	r3, #128	; 0x80
 800e58c:	d004      	beq.n	800e598 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800e58e:	6839      	ldr	r1, [r7, #0]
 800e590:	6878      	ldr	r0, [r7, #4]
 800e592:	f000 fbfd 	bl	800ed90 <USBD_CtlError>
                break;
 800e596:	e091      	b.n	800e6bc <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e598:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e59c:	2b00      	cmp	r3, #0
 800e59e:	da0b      	bge.n	800e5b8 <USBD_StdEPReq+0x19e>
 800e5a0:	7bbb      	ldrb	r3, [r7, #14]
 800e5a2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e5a6:	4613      	mov	r3, r2
 800e5a8:	009b      	lsls	r3, r3, #2
 800e5aa:	4413      	add	r3, r2
 800e5ac:	009b      	lsls	r3, r3, #2
 800e5ae:	3310      	adds	r3, #16
 800e5b0:	687a      	ldr	r2, [r7, #4]
 800e5b2:	4413      	add	r3, r2
 800e5b4:	3304      	adds	r3, #4
 800e5b6:	e00b      	b.n	800e5d0 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800e5b8:	7bbb      	ldrb	r3, [r7, #14]
 800e5ba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e5be:	4613      	mov	r3, r2
 800e5c0:	009b      	lsls	r3, r3, #2
 800e5c2:	4413      	add	r3, r2
 800e5c4:	009b      	lsls	r3, r3, #2
 800e5c6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800e5ca:	687a      	ldr	r2, [r7, #4]
 800e5cc:	4413      	add	r3, r2
 800e5ce:	3304      	adds	r3, #4
 800e5d0:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800e5d2:	68bb      	ldr	r3, [r7, #8]
 800e5d4:	2200      	movs	r2, #0
 800e5d6:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800e5d8:	68bb      	ldr	r3, [r7, #8]
 800e5da:	2202      	movs	r2, #2
 800e5dc:	4619      	mov	r1, r3
 800e5de:	6878      	ldr	r0, [r7, #4]
 800e5e0:	f000 fc47 	bl	800ee72 <USBD_CtlSendData>
              break;
 800e5e4:	e06a      	b.n	800e6bc <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800e5e6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e5ea:	2b00      	cmp	r3, #0
 800e5ec:	da11      	bge.n	800e612 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800e5ee:	7bbb      	ldrb	r3, [r7, #14]
 800e5f0:	f003 020f 	and.w	r2, r3, #15
 800e5f4:	6879      	ldr	r1, [r7, #4]
 800e5f6:	4613      	mov	r3, r2
 800e5f8:	009b      	lsls	r3, r3, #2
 800e5fa:	4413      	add	r3, r2
 800e5fc:	009b      	lsls	r3, r3, #2
 800e5fe:	440b      	add	r3, r1
 800e600:	3324      	adds	r3, #36	; 0x24
 800e602:	881b      	ldrh	r3, [r3, #0]
 800e604:	2b00      	cmp	r3, #0
 800e606:	d117      	bne.n	800e638 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800e608:	6839      	ldr	r1, [r7, #0]
 800e60a:	6878      	ldr	r0, [r7, #4]
 800e60c:	f000 fbc0 	bl	800ed90 <USBD_CtlError>
                  break;
 800e610:	e054      	b.n	800e6bc <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800e612:	7bbb      	ldrb	r3, [r7, #14]
 800e614:	f003 020f 	and.w	r2, r3, #15
 800e618:	6879      	ldr	r1, [r7, #4]
 800e61a:	4613      	mov	r3, r2
 800e61c:	009b      	lsls	r3, r3, #2
 800e61e:	4413      	add	r3, r2
 800e620:	009b      	lsls	r3, r3, #2
 800e622:	440b      	add	r3, r1
 800e624:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800e628:	881b      	ldrh	r3, [r3, #0]
 800e62a:	2b00      	cmp	r3, #0
 800e62c:	d104      	bne.n	800e638 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800e62e:	6839      	ldr	r1, [r7, #0]
 800e630:	6878      	ldr	r0, [r7, #4]
 800e632:	f000 fbad 	bl	800ed90 <USBD_CtlError>
                  break;
 800e636:	e041      	b.n	800e6bc <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e638:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e63c:	2b00      	cmp	r3, #0
 800e63e:	da0b      	bge.n	800e658 <USBD_StdEPReq+0x23e>
 800e640:	7bbb      	ldrb	r3, [r7, #14]
 800e642:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e646:	4613      	mov	r3, r2
 800e648:	009b      	lsls	r3, r3, #2
 800e64a:	4413      	add	r3, r2
 800e64c:	009b      	lsls	r3, r3, #2
 800e64e:	3310      	adds	r3, #16
 800e650:	687a      	ldr	r2, [r7, #4]
 800e652:	4413      	add	r3, r2
 800e654:	3304      	adds	r3, #4
 800e656:	e00b      	b.n	800e670 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800e658:	7bbb      	ldrb	r3, [r7, #14]
 800e65a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e65e:	4613      	mov	r3, r2
 800e660:	009b      	lsls	r3, r3, #2
 800e662:	4413      	add	r3, r2
 800e664:	009b      	lsls	r3, r3, #2
 800e666:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800e66a:	687a      	ldr	r2, [r7, #4]
 800e66c:	4413      	add	r3, r2
 800e66e:	3304      	adds	r3, #4
 800e670:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800e672:	7bbb      	ldrb	r3, [r7, #14]
 800e674:	2b00      	cmp	r3, #0
 800e676:	d002      	beq.n	800e67e <USBD_StdEPReq+0x264>
 800e678:	7bbb      	ldrb	r3, [r7, #14]
 800e67a:	2b80      	cmp	r3, #128	; 0x80
 800e67c:	d103      	bne.n	800e686 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800e67e:	68bb      	ldr	r3, [r7, #8]
 800e680:	2200      	movs	r2, #0
 800e682:	601a      	str	r2, [r3, #0]
 800e684:	e00e      	b.n	800e6a4 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800e686:	7bbb      	ldrb	r3, [r7, #14]
 800e688:	4619      	mov	r1, r3
 800e68a:	6878      	ldr	r0, [r7, #4]
 800e68c:	f002 ffac 	bl	80115e8 <USBD_LL_IsStallEP>
 800e690:	4603      	mov	r3, r0
 800e692:	2b00      	cmp	r3, #0
 800e694:	d003      	beq.n	800e69e <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800e696:	68bb      	ldr	r3, [r7, #8]
 800e698:	2201      	movs	r2, #1
 800e69a:	601a      	str	r2, [r3, #0]
 800e69c:	e002      	b.n	800e6a4 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800e69e:	68bb      	ldr	r3, [r7, #8]
 800e6a0:	2200      	movs	r2, #0
 800e6a2:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800e6a4:	68bb      	ldr	r3, [r7, #8]
 800e6a6:	2202      	movs	r2, #2
 800e6a8:	4619      	mov	r1, r3
 800e6aa:	6878      	ldr	r0, [r7, #4]
 800e6ac:	f000 fbe1 	bl	800ee72 <USBD_CtlSendData>
              break;
 800e6b0:	e004      	b.n	800e6bc <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800e6b2:	6839      	ldr	r1, [r7, #0]
 800e6b4:	6878      	ldr	r0, [r7, #4]
 800e6b6:	f000 fb6b 	bl	800ed90 <USBD_CtlError>
              break;
 800e6ba:	bf00      	nop
          }
          break;
 800e6bc:	e004      	b.n	800e6c8 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800e6be:	6839      	ldr	r1, [r7, #0]
 800e6c0:	6878      	ldr	r0, [r7, #4]
 800e6c2:	f000 fb65 	bl	800ed90 <USBD_CtlError>
          break;
 800e6c6:	bf00      	nop
      }
      break;
 800e6c8:	e004      	b.n	800e6d4 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800e6ca:	6839      	ldr	r1, [r7, #0]
 800e6cc:	6878      	ldr	r0, [r7, #4]
 800e6ce:	f000 fb5f 	bl	800ed90 <USBD_CtlError>
      break;
 800e6d2:	bf00      	nop
  }

  return ret;
 800e6d4:	7bfb      	ldrb	r3, [r7, #15]
}
 800e6d6:	4618      	mov	r0, r3
 800e6d8:	3710      	adds	r7, #16
 800e6da:	46bd      	mov	sp, r7
 800e6dc:	bd80      	pop	{r7, pc}
	...

0800e6e0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e6e0:	b580      	push	{r7, lr}
 800e6e2:	b084      	sub	sp, #16
 800e6e4:	af00      	add	r7, sp, #0
 800e6e6:	6078      	str	r0, [r7, #4]
 800e6e8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800e6ea:	2300      	movs	r3, #0
 800e6ec:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800e6ee:	2300      	movs	r3, #0
 800e6f0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800e6f2:	2300      	movs	r3, #0
 800e6f4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800e6f6:	683b      	ldr	r3, [r7, #0]
 800e6f8:	885b      	ldrh	r3, [r3, #2]
 800e6fa:	0a1b      	lsrs	r3, r3, #8
 800e6fc:	b29b      	uxth	r3, r3
 800e6fe:	3b01      	subs	r3, #1
 800e700:	2b0e      	cmp	r3, #14
 800e702:	f200 8152 	bhi.w	800e9aa <USBD_GetDescriptor+0x2ca>
 800e706:	a201      	add	r2, pc, #4	; (adr r2, 800e70c <USBD_GetDescriptor+0x2c>)
 800e708:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e70c:	0800e77d 	.word	0x0800e77d
 800e710:	0800e795 	.word	0x0800e795
 800e714:	0800e7d5 	.word	0x0800e7d5
 800e718:	0800e9ab 	.word	0x0800e9ab
 800e71c:	0800e9ab 	.word	0x0800e9ab
 800e720:	0800e94b 	.word	0x0800e94b
 800e724:	0800e977 	.word	0x0800e977
 800e728:	0800e9ab 	.word	0x0800e9ab
 800e72c:	0800e9ab 	.word	0x0800e9ab
 800e730:	0800e9ab 	.word	0x0800e9ab
 800e734:	0800e9ab 	.word	0x0800e9ab
 800e738:	0800e9ab 	.word	0x0800e9ab
 800e73c:	0800e9ab 	.word	0x0800e9ab
 800e740:	0800e9ab 	.word	0x0800e9ab
 800e744:	0800e749 	.word	0x0800e749
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800e748:	687b      	ldr	r3, [r7, #4]
 800e74a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e74e:	69db      	ldr	r3, [r3, #28]
 800e750:	2b00      	cmp	r3, #0
 800e752:	d00b      	beq.n	800e76c <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800e754:	687b      	ldr	r3, [r7, #4]
 800e756:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e75a:	69db      	ldr	r3, [r3, #28]
 800e75c:	687a      	ldr	r2, [r7, #4]
 800e75e:	7c12      	ldrb	r2, [r2, #16]
 800e760:	f107 0108 	add.w	r1, r7, #8
 800e764:	4610      	mov	r0, r2
 800e766:	4798      	blx	r3
 800e768:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e76a:	e126      	b.n	800e9ba <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800e76c:	6839      	ldr	r1, [r7, #0]
 800e76e:	6878      	ldr	r0, [r7, #4]
 800e770:	f000 fb0e 	bl	800ed90 <USBD_CtlError>
        err++;
 800e774:	7afb      	ldrb	r3, [r7, #11]
 800e776:	3301      	adds	r3, #1
 800e778:	72fb      	strb	r3, [r7, #11]
      break;
 800e77a:	e11e      	b.n	800e9ba <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800e77c:	687b      	ldr	r3, [r7, #4]
 800e77e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e782:	681b      	ldr	r3, [r3, #0]
 800e784:	687a      	ldr	r2, [r7, #4]
 800e786:	7c12      	ldrb	r2, [r2, #16]
 800e788:	f107 0108 	add.w	r1, r7, #8
 800e78c:	4610      	mov	r0, r2
 800e78e:	4798      	blx	r3
 800e790:	60f8      	str	r0, [r7, #12]
      break;
 800e792:	e112      	b.n	800e9ba <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e794:	687b      	ldr	r3, [r7, #4]
 800e796:	7c1b      	ldrb	r3, [r3, #16]
 800e798:	2b00      	cmp	r3, #0
 800e79a:	d10d      	bne.n	800e7b8 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800e79c:	687b      	ldr	r3, [r7, #4]
 800e79e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e7a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e7a4:	f107 0208 	add.w	r2, r7, #8
 800e7a8:	4610      	mov	r0, r2
 800e7aa:	4798      	blx	r3
 800e7ac:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800e7ae:	68fb      	ldr	r3, [r7, #12]
 800e7b0:	3301      	adds	r3, #1
 800e7b2:	2202      	movs	r2, #2
 800e7b4:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800e7b6:	e100      	b.n	800e9ba <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800e7b8:	687b      	ldr	r3, [r7, #4]
 800e7ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e7be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e7c0:	f107 0208 	add.w	r2, r7, #8
 800e7c4:	4610      	mov	r0, r2
 800e7c6:	4798      	blx	r3
 800e7c8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800e7ca:	68fb      	ldr	r3, [r7, #12]
 800e7cc:	3301      	adds	r3, #1
 800e7ce:	2202      	movs	r2, #2
 800e7d0:	701a      	strb	r2, [r3, #0]
      break;
 800e7d2:	e0f2      	b.n	800e9ba <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800e7d4:	683b      	ldr	r3, [r7, #0]
 800e7d6:	885b      	ldrh	r3, [r3, #2]
 800e7d8:	b2db      	uxtb	r3, r3
 800e7da:	2b05      	cmp	r3, #5
 800e7dc:	f200 80ac 	bhi.w	800e938 <USBD_GetDescriptor+0x258>
 800e7e0:	a201      	add	r2, pc, #4	; (adr r2, 800e7e8 <USBD_GetDescriptor+0x108>)
 800e7e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e7e6:	bf00      	nop
 800e7e8:	0800e801 	.word	0x0800e801
 800e7ec:	0800e835 	.word	0x0800e835
 800e7f0:	0800e869 	.word	0x0800e869
 800e7f4:	0800e89d 	.word	0x0800e89d
 800e7f8:	0800e8d1 	.word	0x0800e8d1
 800e7fc:	0800e905 	.word	0x0800e905
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800e800:	687b      	ldr	r3, [r7, #4]
 800e802:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e806:	685b      	ldr	r3, [r3, #4]
 800e808:	2b00      	cmp	r3, #0
 800e80a:	d00b      	beq.n	800e824 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800e80c:	687b      	ldr	r3, [r7, #4]
 800e80e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e812:	685b      	ldr	r3, [r3, #4]
 800e814:	687a      	ldr	r2, [r7, #4]
 800e816:	7c12      	ldrb	r2, [r2, #16]
 800e818:	f107 0108 	add.w	r1, r7, #8
 800e81c:	4610      	mov	r0, r2
 800e81e:	4798      	blx	r3
 800e820:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e822:	e091      	b.n	800e948 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e824:	6839      	ldr	r1, [r7, #0]
 800e826:	6878      	ldr	r0, [r7, #4]
 800e828:	f000 fab2 	bl	800ed90 <USBD_CtlError>
            err++;
 800e82c:	7afb      	ldrb	r3, [r7, #11]
 800e82e:	3301      	adds	r3, #1
 800e830:	72fb      	strb	r3, [r7, #11]
          break;
 800e832:	e089      	b.n	800e948 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800e834:	687b      	ldr	r3, [r7, #4]
 800e836:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e83a:	689b      	ldr	r3, [r3, #8]
 800e83c:	2b00      	cmp	r3, #0
 800e83e:	d00b      	beq.n	800e858 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800e840:	687b      	ldr	r3, [r7, #4]
 800e842:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e846:	689b      	ldr	r3, [r3, #8]
 800e848:	687a      	ldr	r2, [r7, #4]
 800e84a:	7c12      	ldrb	r2, [r2, #16]
 800e84c:	f107 0108 	add.w	r1, r7, #8
 800e850:	4610      	mov	r0, r2
 800e852:	4798      	blx	r3
 800e854:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e856:	e077      	b.n	800e948 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e858:	6839      	ldr	r1, [r7, #0]
 800e85a:	6878      	ldr	r0, [r7, #4]
 800e85c:	f000 fa98 	bl	800ed90 <USBD_CtlError>
            err++;
 800e860:	7afb      	ldrb	r3, [r7, #11]
 800e862:	3301      	adds	r3, #1
 800e864:	72fb      	strb	r3, [r7, #11]
          break;
 800e866:	e06f      	b.n	800e948 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800e868:	687b      	ldr	r3, [r7, #4]
 800e86a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e86e:	68db      	ldr	r3, [r3, #12]
 800e870:	2b00      	cmp	r3, #0
 800e872:	d00b      	beq.n	800e88c <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800e874:	687b      	ldr	r3, [r7, #4]
 800e876:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e87a:	68db      	ldr	r3, [r3, #12]
 800e87c:	687a      	ldr	r2, [r7, #4]
 800e87e:	7c12      	ldrb	r2, [r2, #16]
 800e880:	f107 0108 	add.w	r1, r7, #8
 800e884:	4610      	mov	r0, r2
 800e886:	4798      	blx	r3
 800e888:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e88a:	e05d      	b.n	800e948 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e88c:	6839      	ldr	r1, [r7, #0]
 800e88e:	6878      	ldr	r0, [r7, #4]
 800e890:	f000 fa7e 	bl	800ed90 <USBD_CtlError>
            err++;
 800e894:	7afb      	ldrb	r3, [r7, #11]
 800e896:	3301      	adds	r3, #1
 800e898:	72fb      	strb	r3, [r7, #11]
          break;
 800e89a:	e055      	b.n	800e948 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800e89c:	687b      	ldr	r3, [r7, #4]
 800e89e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e8a2:	691b      	ldr	r3, [r3, #16]
 800e8a4:	2b00      	cmp	r3, #0
 800e8a6:	d00b      	beq.n	800e8c0 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800e8a8:	687b      	ldr	r3, [r7, #4]
 800e8aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e8ae:	691b      	ldr	r3, [r3, #16]
 800e8b0:	687a      	ldr	r2, [r7, #4]
 800e8b2:	7c12      	ldrb	r2, [r2, #16]
 800e8b4:	f107 0108 	add.w	r1, r7, #8
 800e8b8:	4610      	mov	r0, r2
 800e8ba:	4798      	blx	r3
 800e8bc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e8be:	e043      	b.n	800e948 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e8c0:	6839      	ldr	r1, [r7, #0]
 800e8c2:	6878      	ldr	r0, [r7, #4]
 800e8c4:	f000 fa64 	bl	800ed90 <USBD_CtlError>
            err++;
 800e8c8:	7afb      	ldrb	r3, [r7, #11]
 800e8ca:	3301      	adds	r3, #1
 800e8cc:	72fb      	strb	r3, [r7, #11]
          break;
 800e8ce:	e03b      	b.n	800e948 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800e8d0:	687b      	ldr	r3, [r7, #4]
 800e8d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e8d6:	695b      	ldr	r3, [r3, #20]
 800e8d8:	2b00      	cmp	r3, #0
 800e8da:	d00b      	beq.n	800e8f4 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800e8dc:	687b      	ldr	r3, [r7, #4]
 800e8de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e8e2:	695b      	ldr	r3, [r3, #20]
 800e8e4:	687a      	ldr	r2, [r7, #4]
 800e8e6:	7c12      	ldrb	r2, [r2, #16]
 800e8e8:	f107 0108 	add.w	r1, r7, #8
 800e8ec:	4610      	mov	r0, r2
 800e8ee:	4798      	blx	r3
 800e8f0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e8f2:	e029      	b.n	800e948 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e8f4:	6839      	ldr	r1, [r7, #0]
 800e8f6:	6878      	ldr	r0, [r7, #4]
 800e8f8:	f000 fa4a 	bl	800ed90 <USBD_CtlError>
            err++;
 800e8fc:	7afb      	ldrb	r3, [r7, #11]
 800e8fe:	3301      	adds	r3, #1
 800e900:	72fb      	strb	r3, [r7, #11]
          break;
 800e902:	e021      	b.n	800e948 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800e904:	687b      	ldr	r3, [r7, #4]
 800e906:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e90a:	699b      	ldr	r3, [r3, #24]
 800e90c:	2b00      	cmp	r3, #0
 800e90e:	d00b      	beq.n	800e928 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800e910:	687b      	ldr	r3, [r7, #4]
 800e912:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e916:	699b      	ldr	r3, [r3, #24]
 800e918:	687a      	ldr	r2, [r7, #4]
 800e91a:	7c12      	ldrb	r2, [r2, #16]
 800e91c:	f107 0108 	add.w	r1, r7, #8
 800e920:	4610      	mov	r0, r2
 800e922:	4798      	blx	r3
 800e924:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e926:	e00f      	b.n	800e948 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e928:	6839      	ldr	r1, [r7, #0]
 800e92a:	6878      	ldr	r0, [r7, #4]
 800e92c:	f000 fa30 	bl	800ed90 <USBD_CtlError>
            err++;
 800e930:	7afb      	ldrb	r3, [r7, #11]
 800e932:	3301      	adds	r3, #1
 800e934:	72fb      	strb	r3, [r7, #11]
          break;
 800e936:	e007      	b.n	800e948 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800e938:	6839      	ldr	r1, [r7, #0]
 800e93a:	6878      	ldr	r0, [r7, #4]
 800e93c:	f000 fa28 	bl	800ed90 <USBD_CtlError>
          err++;
 800e940:	7afb      	ldrb	r3, [r7, #11]
 800e942:	3301      	adds	r3, #1
 800e944:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800e946:	bf00      	nop
      }
      break;
 800e948:	e037      	b.n	800e9ba <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e94a:	687b      	ldr	r3, [r7, #4]
 800e94c:	7c1b      	ldrb	r3, [r3, #16]
 800e94e:	2b00      	cmp	r3, #0
 800e950:	d109      	bne.n	800e966 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800e952:	687b      	ldr	r3, [r7, #4]
 800e954:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e958:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e95a:	f107 0208 	add.w	r2, r7, #8
 800e95e:	4610      	mov	r0, r2
 800e960:	4798      	blx	r3
 800e962:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e964:	e029      	b.n	800e9ba <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800e966:	6839      	ldr	r1, [r7, #0]
 800e968:	6878      	ldr	r0, [r7, #4]
 800e96a:	f000 fa11 	bl	800ed90 <USBD_CtlError>
        err++;
 800e96e:	7afb      	ldrb	r3, [r7, #11]
 800e970:	3301      	adds	r3, #1
 800e972:	72fb      	strb	r3, [r7, #11]
      break;
 800e974:	e021      	b.n	800e9ba <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e976:	687b      	ldr	r3, [r7, #4]
 800e978:	7c1b      	ldrb	r3, [r3, #16]
 800e97a:	2b00      	cmp	r3, #0
 800e97c:	d10d      	bne.n	800e99a <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800e97e:	687b      	ldr	r3, [r7, #4]
 800e980:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e986:	f107 0208 	add.w	r2, r7, #8
 800e98a:	4610      	mov	r0, r2
 800e98c:	4798      	blx	r3
 800e98e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800e990:	68fb      	ldr	r3, [r7, #12]
 800e992:	3301      	adds	r3, #1
 800e994:	2207      	movs	r2, #7
 800e996:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e998:	e00f      	b.n	800e9ba <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800e99a:	6839      	ldr	r1, [r7, #0]
 800e99c:	6878      	ldr	r0, [r7, #4]
 800e99e:	f000 f9f7 	bl	800ed90 <USBD_CtlError>
        err++;
 800e9a2:	7afb      	ldrb	r3, [r7, #11]
 800e9a4:	3301      	adds	r3, #1
 800e9a6:	72fb      	strb	r3, [r7, #11]
      break;
 800e9a8:	e007      	b.n	800e9ba <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800e9aa:	6839      	ldr	r1, [r7, #0]
 800e9ac:	6878      	ldr	r0, [r7, #4]
 800e9ae:	f000 f9ef 	bl	800ed90 <USBD_CtlError>
      err++;
 800e9b2:	7afb      	ldrb	r3, [r7, #11]
 800e9b4:	3301      	adds	r3, #1
 800e9b6:	72fb      	strb	r3, [r7, #11]
      break;
 800e9b8:	bf00      	nop
  }

  if (err != 0U)
 800e9ba:	7afb      	ldrb	r3, [r7, #11]
 800e9bc:	2b00      	cmp	r3, #0
 800e9be:	d11e      	bne.n	800e9fe <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800e9c0:	683b      	ldr	r3, [r7, #0]
 800e9c2:	88db      	ldrh	r3, [r3, #6]
 800e9c4:	2b00      	cmp	r3, #0
 800e9c6:	d016      	beq.n	800e9f6 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800e9c8:	893b      	ldrh	r3, [r7, #8]
 800e9ca:	2b00      	cmp	r3, #0
 800e9cc:	d00e      	beq.n	800e9ec <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800e9ce:	683b      	ldr	r3, [r7, #0]
 800e9d0:	88da      	ldrh	r2, [r3, #6]
 800e9d2:	893b      	ldrh	r3, [r7, #8]
 800e9d4:	4293      	cmp	r3, r2
 800e9d6:	bf28      	it	cs
 800e9d8:	4613      	movcs	r3, r2
 800e9da:	b29b      	uxth	r3, r3
 800e9dc:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800e9de:	893b      	ldrh	r3, [r7, #8]
 800e9e0:	461a      	mov	r2, r3
 800e9e2:	68f9      	ldr	r1, [r7, #12]
 800e9e4:	6878      	ldr	r0, [r7, #4]
 800e9e6:	f000 fa44 	bl	800ee72 <USBD_CtlSendData>
 800e9ea:	e009      	b.n	800ea00 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800e9ec:	6839      	ldr	r1, [r7, #0]
 800e9ee:	6878      	ldr	r0, [r7, #4]
 800e9f0:	f000 f9ce 	bl	800ed90 <USBD_CtlError>
 800e9f4:	e004      	b.n	800ea00 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800e9f6:	6878      	ldr	r0, [r7, #4]
 800e9f8:	f000 fa95 	bl	800ef26 <USBD_CtlSendStatus>
 800e9fc:	e000      	b.n	800ea00 <USBD_GetDescriptor+0x320>
    return;
 800e9fe:	bf00      	nop
  }
}
 800ea00:	3710      	adds	r7, #16
 800ea02:	46bd      	mov	sp, r7
 800ea04:	bd80      	pop	{r7, pc}
 800ea06:	bf00      	nop

0800ea08 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ea08:	b580      	push	{r7, lr}
 800ea0a:	b084      	sub	sp, #16
 800ea0c:	af00      	add	r7, sp, #0
 800ea0e:	6078      	str	r0, [r7, #4]
 800ea10:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800ea12:	683b      	ldr	r3, [r7, #0]
 800ea14:	889b      	ldrh	r3, [r3, #4]
 800ea16:	2b00      	cmp	r3, #0
 800ea18:	d131      	bne.n	800ea7e <USBD_SetAddress+0x76>
 800ea1a:	683b      	ldr	r3, [r7, #0]
 800ea1c:	88db      	ldrh	r3, [r3, #6]
 800ea1e:	2b00      	cmp	r3, #0
 800ea20:	d12d      	bne.n	800ea7e <USBD_SetAddress+0x76>
 800ea22:	683b      	ldr	r3, [r7, #0]
 800ea24:	885b      	ldrh	r3, [r3, #2]
 800ea26:	2b7f      	cmp	r3, #127	; 0x7f
 800ea28:	d829      	bhi.n	800ea7e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800ea2a:	683b      	ldr	r3, [r7, #0]
 800ea2c:	885b      	ldrh	r3, [r3, #2]
 800ea2e:	b2db      	uxtb	r3, r3
 800ea30:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ea34:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ea36:	687b      	ldr	r3, [r7, #4]
 800ea38:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ea3c:	b2db      	uxtb	r3, r3
 800ea3e:	2b03      	cmp	r3, #3
 800ea40:	d104      	bne.n	800ea4c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800ea42:	6839      	ldr	r1, [r7, #0]
 800ea44:	6878      	ldr	r0, [r7, #4]
 800ea46:	f000 f9a3 	bl	800ed90 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ea4a:	e01d      	b.n	800ea88 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800ea4c:	687b      	ldr	r3, [r7, #4]
 800ea4e:	7bfa      	ldrb	r2, [r7, #15]
 800ea50:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800ea54:	7bfb      	ldrb	r3, [r7, #15]
 800ea56:	4619      	mov	r1, r3
 800ea58:	6878      	ldr	r0, [r7, #4]
 800ea5a:	f002 fdf2 	bl	8011642 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800ea5e:	6878      	ldr	r0, [r7, #4]
 800ea60:	f000 fa61 	bl	800ef26 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800ea64:	7bfb      	ldrb	r3, [r7, #15]
 800ea66:	2b00      	cmp	r3, #0
 800ea68:	d004      	beq.n	800ea74 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ea6a:	687b      	ldr	r3, [r7, #4]
 800ea6c:	2202      	movs	r2, #2
 800ea6e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ea72:	e009      	b.n	800ea88 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800ea74:	687b      	ldr	r3, [r7, #4]
 800ea76:	2201      	movs	r2, #1
 800ea78:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ea7c:	e004      	b.n	800ea88 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800ea7e:	6839      	ldr	r1, [r7, #0]
 800ea80:	6878      	ldr	r0, [r7, #4]
 800ea82:	f000 f985 	bl	800ed90 <USBD_CtlError>
  }
}
 800ea86:	bf00      	nop
 800ea88:	bf00      	nop
 800ea8a:	3710      	adds	r7, #16
 800ea8c:	46bd      	mov	sp, r7
 800ea8e:	bd80      	pop	{r7, pc}

0800ea90 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ea90:	b580      	push	{r7, lr}
 800ea92:	b084      	sub	sp, #16
 800ea94:	af00      	add	r7, sp, #0
 800ea96:	6078      	str	r0, [r7, #4]
 800ea98:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ea9a:	2300      	movs	r3, #0
 800ea9c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800ea9e:	683b      	ldr	r3, [r7, #0]
 800eaa0:	885b      	ldrh	r3, [r3, #2]
 800eaa2:	b2da      	uxtb	r2, r3
 800eaa4:	4b4c      	ldr	r3, [pc, #304]	; (800ebd8 <USBD_SetConfig+0x148>)
 800eaa6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800eaa8:	4b4b      	ldr	r3, [pc, #300]	; (800ebd8 <USBD_SetConfig+0x148>)
 800eaaa:	781b      	ldrb	r3, [r3, #0]
 800eaac:	2b01      	cmp	r3, #1
 800eaae:	d905      	bls.n	800eabc <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800eab0:	6839      	ldr	r1, [r7, #0]
 800eab2:	6878      	ldr	r0, [r7, #4]
 800eab4:	f000 f96c 	bl	800ed90 <USBD_CtlError>
    return USBD_FAIL;
 800eab8:	2303      	movs	r3, #3
 800eaba:	e088      	b.n	800ebce <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800eabc:	687b      	ldr	r3, [r7, #4]
 800eabe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800eac2:	b2db      	uxtb	r3, r3
 800eac4:	2b02      	cmp	r3, #2
 800eac6:	d002      	beq.n	800eace <USBD_SetConfig+0x3e>
 800eac8:	2b03      	cmp	r3, #3
 800eaca:	d025      	beq.n	800eb18 <USBD_SetConfig+0x88>
 800eacc:	e071      	b.n	800ebb2 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800eace:	4b42      	ldr	r3, [pc, #264]	; (800ebd8 <USBD_SetConfig+0x148>)
 800ead0:	781b      	ldrb	r3, [r3, #0]
 800ead2:	2b00      	cmp	r3, #0
 800ead4:	d01c      	beq.n	800eb10 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800ead6:	4b40      	ldr	r3, [pc, #256]	; (800ebd8 <USBD_SetConfig+0x148>)
 800ead8:	781b      	ldrb	r3, [r3, #0]
 800eada:	461a      	mov	r2, r3
 800eadc:	687b      	ldr	r3, [r7, #4]
 800eade:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800eae0:	4b3d      	ldr	r3, [pc, #244]	; (800ebd8 <USBD_SetConfig+0x148>)
 800eae2:	781b      	ldrb	r3, [r3, #0]
 800eae4:	4619      	mov	r1, r3
 800eae6:	6878      	ldr	r0, [r7, #4]
 800eae8:	f7ff f992 	bl	800de10 <USBD_SetClassConfig>
 800eaec:	4603      	mov	r3, r0
 800eaee:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800eaf0:	7bfb      	ldrb	r3, [r7, #15]
 800eaf2:	2b00      	cmp	r3, #0
 800eaf4:	d004      	beq.n	800eb00 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800eaf6:	6839      	ldr	r1, [r7, #0]
 800eaf8:	6878      	ldr	r0, [r7, #4]
 800eafa:	f000 f949 	bl	800ed90 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800eafe:	e065      	b.n	800ebcc <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800eb00:	6878      	ldr	r0, [r7, #4]
 800eb02:	f000 fa10 	bl	800ef26 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800eb06:	687b      	ldr	r3, [r7, #4]
 800eb08:	2203      	movs	r2, #3
 800eb0a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800eb0e:	e05d      	b.n	800ebcc <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800eb10:	6878      	ldr	r0, [r7, #4]
 800eb12:	f000 fa08 	bl	800ef26 <USBD_CtlSendStatus>
      break;
 800eb16:	e059      	b.n	800ebcc <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800eb18:	4b2f      	ldr	r3, [pc, #188]	; (800ebd8 <USBD_SetConfig+0x148>)
 800eb1a:	781b      	ldrb	r3, [r3, #0]
 800eb1c:	2b00      	cmp	r3, #0
 800eb1e:	d112      	bne.n	800eb46 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800eb20:	687b      	ldr	r3, [r7, #4]
 800eb22:	2202      	movs	r2, #2
 800eb24:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800eb28:	4b2b      	ldr	r3, [pc, #172]	; (800ebd8 <USBD_SetConfig+0x148>)
 800eb2a:	781b      	ldrb	r3, [r3, #0]
 800eb2c:	461a      	mov	r2, r3
 800eb2e:	687b      	ldr	r3, [r7, #4]
 800eb30:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800eb32:	4b29      	ldr	r3, [pc, #164]	; (800ebd8 <USBD_SetConfig+0x148>)
 800eb34:	781b      	ldrb	r3, [r3, #0]
 800eb36:	4619      	mov	r1, r3
 800eb38:	6878      	ldr	r0, [r7, #4]
 800eb3a:	f7ff f985 	bl	800de48 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800eb3e:	6878      	ldr	r0, [r7, #4]
 800eb40:	f000 f9f1 	bl	800ef26 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800eb44:	e042      	b.n	800ebcc <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800eb46:	4b24      	ldr	r3, [pc, #144]	; (800ebd8 <USBD_SetConfig+0x148>)
 800eb48:	781b      	ldrb	r3, [r3, #0]
 800eb4a:	461a      	mov	r2, r3
 800eb4c:	687b      	ldr	r3, [r7, #4]
 800eb4e:	685b      	ldr	r3, [r3, #4]
 800eb50:	429a      	cmp	r2, r3
 800eb52:	d02a      	beq.n	800ebaa <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800eb54:	687b      	ldr	r3, [r7, #4]
 800eb56:	685b      	ldr	r3, [r3, #4]
 800eb58:	b2db      	uxtb	r3, r3
 800eb5a:	4619      	mov	r1, r3
 800eb5c:	6878      	ldr	r0, [r7, #4]
 800eb5e:	f7ff f973 	bl	800de48 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800eb62:	4b1d      	ldr	r3, [pc, #116]	; (800ebd8 <USBD_SetConfig+0x148>)
 800eb64:	781b      	ldrb	r3, [r3, #0]
 800eb66:	461a      	mov	r2, r3
 800eb68:	687b      	ldr	r3, [r7, #4]
 800eb6a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800eb6c:	4b1a      	ldr	r3, [pc, #104]	; (800ebd8 <USBD_SetConfig+0x148>)
 800eb6e:	781b      	ldrb	r3, [r3, #0]
 800eb70:	4619      	mov	r1, r3
 800eb72:	6878      	ldr	r0, [r7, #4]
 800eb74:	f7ff f94c 	bl	800de10 <USBD_SetClassConfig>
 800eb78:	4603      	mov	r3, r0
 800eb7a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800eb7c:	7bfb      	ldrb	r3, [r7, #15]
 800eb7e:	2b00      	cmp	r3, #0
 800eb80:	d00f      	beq.n	800eba2 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800eb82:	6839      	ldr	r1, [r7, #0]
 800eb84:	6878      	ldr	r0, [r7, #4]
 800eb86:	f000 f903 	bl	800ed90 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800eb8a:	687b      	ldr	r3, [r7, #4]
 800eb8c:	685b      	ldr	r3, [r3, #4]
 800eb8e:	b2db      	uxtb	r3, r3
 800eb90:	4619      	mov	r1, r3
 800eb92:	6878      	ldr	r0, [r7, #4]
 800eb94:	f7ff f958 	bl	800de48 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800eb98:	687b      	ldr	r3, [r7, #4]
 800eb9a:	2202      	movs	r2, #2
 800eb9c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800eba0:	e014      	b.n	800ebcc <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800eba2:	6878      	ldr	r0, [r7, #4]
 800eba4:	f000 f9bf 	bl	800ef26 <USBD_CtlSendStatus>
      break;
 800eba8:	e010      	b.n	800ebcc <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800ebaa:	6878      	ldr	r0, [r7, #4]
 800ebac:	f000 f9bb 	bl	800ef26 <USBD_CtlSendStatus>
      break;
 800ebb0:	e00c      	b.n	800ebcc <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800ebb2:	6839      	ldr	r1, [r7, #0]
 800ebb4:	6878      	ldr	r0, [r7, #4]
 800ebb6:	f000 f8eb 	bl	800ed90 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800ebba:	4b07      	ldr	r3, [pc, #28]	; (800ebd8 <USBD_SetConfig+0x148>)
 800ebbc:	781b      	ldrb	r3, [r3, #0]
 800ebbe:	4619      	mov	r1, r3
 800ebc0:	6878      	ldr	r0, [r7, #4]
 800ebc2:	f7ff f941 	bl	800de48 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800ebc6:	2303      	movs	r3, #3
 800ebc8:	73fb      	strb	r3, [r7, #15]
      break;
 800ebca:	bf00      	nop
  }

  return ret;
 800ebcc:	7bfb      	ldrb	r3, [r7, #15]
}
 800ebce:	4618      	mov	r0, r3
 800ebd0:	3710      	adds	r7, #16
 800ebd2:	46bd      	mov	sp, r7
 800ebd4:	bd80      	pop	{r7, pc}
 800ebd6:	bf00      	nop
 800ebd8:	20000954 	.word	0x20000954

0800ebdc <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ebdc:	b580      	push	{r7, lr}
 800ebde:	b082      	sub	sp, #8
 800ebe0:	af00      	add	r7, sp, #0
 800ebe2:	6078      	str	r0, [r7, #4]
 800ebe4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800ebe6:	683b      	ldr	r3, [r7, #0]
 800ebe8:	88db      	ldrh	r3, [r3, #6]
 800ebea:	2b01      	cmp	r3, #1
 800ebec:	d004      	beq.n	800ebf8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800ebee:	6839      	ldr	r1, [r7, #0]
 800ebf0:	6878      	ldr	r0, [r7, #4]
 800ebf2:	f000 f8cd 	bl	800ed90 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800ebf6:	e023      	b.n	800ec40 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800ebf8:	687b      	ldr	r3, [r7, #4]
 800ebfa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ebfe:	b2db      	uxtb	r3, r3
 800ec00:	2b02      	cmp	r3, #2
 800ec02:	dc02      	bgt.n	800ec0a <USBD_GetConfig+0x2e>
 800ec04:	2b00      	cmp	r3, #0
 800ec06:	dc03      	bgt.n	800ec10 <USBD_GetConfig+0x34>
 800ec08:	e015      	b.n	800ec36 <USBD_GetConfig+0x5a>
 800ec0a:	2b03      	cmp	r3, #3
 800ec0c:	d00b      	beq.n	800ec26 <USBD_GetConfig+0x4a>
 800ec0e:	e012      	b.n	800ec36 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800ec10:	687b      	ldr	r3, [r7, #4]
 800ec12:	2200      	movs	r2, #0
 800ec14:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800ec16:	687b      	ldr	r3, [r7, #4]
 800ec18:	3308      	adds	r3, #8
 800ec1a:	2201      	movs	r2, #1
 800ec1c:	4619      	mov	r1, r3
 800ec1e:	6878      	ldr	r0, [r7, #4]
 800ec20:	f000 f927 	bl	800ee72 <USBD_CtlSendData>
        break;
 800ec24:	e00c      	b.n	800ec40 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800ec26:	687b      	ldr	r3, [r7, #4]
 800ec28:	3304      	adds	r3, #4
 800ec2a:	2201      	movs	r2, #1
 800ec2c:	4619      	mov	r1, r3
 800ec2e:	6878      	ldr	r0, [r7, #4]
 800ec30:	f000 f91f 	bl	800ee72 <USBD_CtlSendData>
        break;
 800ec34:	e004      	b.n	800ec40 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800ec36:	6839      	ldr	r1, [r7, #0]
 800ec38:	6878      	ldr	r0, [r7, #4]
 800ec3a:	f000 f8a9 	bl	800ed90 <USBD_CtlError>
        break;
 800ec3e:	bf00      	nop
}
 800ec40:	bf00      	nop
 800ec42:	3708      	adds	r7, #8
 800ec44:	46bd      	mov	sp, r7
 800ec46:	bd80      	pop	{r7, pc}

0800ec48 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ec48:	b580      	push	{r7, lr}
 800ec4a:	b082      	sub	sp, #8
 800ec4c:	af00      	add	r7, sp, #0
 800ec4e:	6078      	str	r0, [r7, #4]
 800ec50:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ec52:	687b      	ldr	r3, [r7, #4]
 800ec54:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ec58:	b2db      	uxtb	r3, r3
 800ec5a:	3b01      	subs	r3, #1
 800ec5c:	2b02      	cmp	r3, #2
 800ec5e:	d81e      	bhi.n	800ec9e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800ec60:	683b      	ldr	r3, [r7, #0]
 800ec62:	88db      	ldrh	r3, [r3, #6]
 800ec64:	2b02      	cmp	r3, #2
 800ec66:	d004      	beq.n	800ec72 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800ec68:	6839      	ldr	r1, [r7, #0]
 800ec6a:	6878      	ldr	r0, [r7, #4]
 800ec6c:	f000 f890 	bl	800ed90 <USBD_CtlError>
        break;
 800ec70:	e01a      	b.n	800eca8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800ec72:	687b      	ldr	r3, [r7, #4]
 800ec74:	2201      	movs	r2, #1
 800ec76:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800ec78:	687b      	ldr	r3, [r7, #4]
 800ec7a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800ec7e:	2b00      	cmp	r3, #0
 800ec80:	d005      	beq.n	800ec8e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800ec82:	687b      	ldr	r3, [r7, #4]
 800ec84:	68db      	ldr	r3, [r3, #12]
 800ec86:	f043 0202 	orr.w	r2, r3, #2
 800ec8a:	687b      	ldr	r3, [r7, #4]
 800ec8c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800ec8e:	687b      	ldr	r3, [r7, #4]
 800ec90:	330c      	adds	r3, #12
 800ec92:	2202      	movs	r2, #2
 800ec94:	4619      	mov	r1, r3
 800ec96:	6878      	ldr	r0, [r7, #4]
 800ec98:	f000 f8eb 	bl	800ee72 <USBD_CtlSendData>
      break;
 800ec9c:	e004      	b.n	800eca8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800ec9e:	6839      	ldr	r1, [r7, #0]
 800eca0:	6878      	ldr	r0, [r7, #4]
 800eca2:	f000 f875 	bl	800ed90 <USBD_CtlError>
      break;
 800eca6:	bf00      	nop
  }
}
 800eca8:	bf00      	nop
 800ecaa:	3708      	adds	r7, #8
 800ecac:	46bd      	mov	sp, r7
 800ecae:	bd80      	pop	{r7, pc}

0800ecb0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ecb0:	b580      	push	{r7, lr}
 800ecb2:	b082      	sub	sp, #8
 800ecb4:	af00      	add	r7, sp, #0
 800ecb6:	6078      	str	r0, [r7, #4]
 800ecb8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ecba:	683b      	ldr	r3, [r7, #0]
 800ecbc:	885b      	ldrh	r3, [r3, #2]
 800ecbe:	2b01      	cmp	r3, #1
 800ecc0:	d106      	bne.n	800ecd0 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800ecc2:	687b      	ldr	r3, [r7, #4]
 800ecc4:	2201      	movs	r2, #1
 800ecc6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800ecca:	6878      	ldr	r0, [r7, #4]
 800eccc:	f000 f92b 	bl	800ef26 <USBD_CtlSendStatus>
  }
}
 800ecd0:	bf00      	nop
 800ecd2:	3708      	adds	r7, #8
 800ecd4:	46bd      	mov	sp, r7
 800ecd6:	bd80      	pop	{r7, pc}

0800ecd8 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ecd8:	b580      	push	{r7, lr}
 800ecda:	b082      	sub	sp, #8
 800ecdc:	af00      	add	r7, sp, #0
 800ecde:	6078      	str	r0, [r7, #4]
 800ece0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ece2:	687b      	ldr	r3, [r7, #4]
 800ece4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ece8:	b2db      	uxtb	r3, r3
 800ecea:	3b01      	subs	r3, #1
 800ecec:	2b02      	cmp	r3, #2
 800ecee:	d80b      	bhi.n	800ed08 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ecf0:	683b      	ldr	r3, [r7, #0]
 800ecf2:	885b      	ldrh	r3, [r3, #2]
 800ecf4:	2b01      	cmp	r3, #1
 800ecf6:	d10c      	bne.n	800ed12 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800ecf8:	687b      	ldr	r3, [r7, #4]
 800ecfa:	2200      	movs	r2, #0
 800ecfc:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800ed00:	6878      	ldr	r0, [r7, #4]
 800ed02:	f000 f910 	bl	800ef26 <USBD_CtlSendStatus>
      }
      break;
 800ed06:	e004      	b.n	800ed12 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800ed08:	6839      	ldr	r1, [r7, #0]
 800ed0a:	6878      	ldr	r0, [r7, #4]
 800ed0c:	f000 f840 	bl	800ed90 <USBD_CtlError>
      break;
 800ed10:	e000      	b.n	800ed14 <USBD_ClrFeature+0x3c>
      break;
 800ed12:	bf00      	nop
  }
}
 800ed14:	bf00      	nop
 800ed16:	3708      	adds	r7, #8
 800ed18:	46bd      	mov	sp, r7
 800ed1a:	bd80      	pop	{r7, pc}

0800ed1c <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800ed1c:	b580      	push	{r7, lr}
 800ed1e:	b084      	sub	sp, #16
 800ed20:	af00      	add	r7, sp, #0
 800ed22:	6078      	str	r0, [r7, #4]
 800ed24:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800ed26:	683b      	ldr	r3, [r7, #0]
 800ed28:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800ed2a:	68fb      	ldr	r3, [r7, #12]
 800ed2c:	781a      	ldrb	r2, [r3, #0]
 800ed2e:	687b      	ldr	r3, [r7, #4]
 800ed30:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800ed32:	68fb      	ldr	r3, [r7, #12]
 800ed34:	3301      	adds	r3, #1
 800ed36:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800ed38:	68fb      	ldr	r3, [r7, #12]
 800ed3a:	781a      	ldrb	r2, [r3, #0]
 800ed3c:	687b      	ldr	r3, [r7, #4]
 800ed3e:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800ed40:	68fb      	ldr	r3, [r7, #12]
 800ed42:	3301      	adds	r3, #1
 800ed44:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800ed46:	68f8      	ldr	r0, [r7, #12]
 800ed48:	f7ff fa92 	bl	800e270 <SWAPBYTE>
 800ed4c:	4603      	mov	r3, r0
 800ed4e:	461a      	mov	r2, r3
 800ed50:	687b      	ldr	r3, [r7, #4]
 800ed52:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800ed54:	68fb      	ldr	r3, [r7, #12]
 800ed56:	3301      	adds	r3, #1
 800ed58:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800ed5a:	68fb      	ldr	r3, [r7, #12]
 800ed5c:	3301      	adds	r3, #1
 800ed5e:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800ed60:	68f8      	ldr	r0, [r7, #12]
 800ed62:	f7ff fa85 	bl	800e270 <SWAPBYTE>
 800ed66:	4603      	mov	r3, r0
 800ed68:	461a      	mov	r2, r3
 800ed6a:	687b      	ldr	r3, [r7, #4]
 800ed6c:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800ed6e:	68fb      	ldr	r3, [r7, #12]
 800ed70:	3301      	adds	r3, #1
 800ed72:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800ed74:	68fb      	ldr	r3, [r7, #12]
 800ed76:	3301      	adds	r3, #1
 800ed78:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800ed7a:	68f8      	ldr	r0, [r7, #12]
 800ed7c:	f7ff fa78 	bl	800e270 <SWAPBYTE>
 800ed80:	4603      	mov	r3, r0
 800ed82:	461a      	mov	r2, r3
 800ed84:	687b      	ldr	r3, [r7, #4]
 800ed86:	80da      	strh	r2, [r3, #6]
}
 800ed88:	bf00      	nop
 800ed8a:	3710      	adds	r7, #16
 800ed8c:	46bd      	mov	sp, r7
 800ed8e:	bd80      	pop	{r7, pc}

0800ed90 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ed90:	b580      	push	{r7, lr}
 800ed92:	b082      	sub	sp, #8
 800ed94:	af00      	add	r7, sp, #0
 800ed96:	6078      	str	r0, [r7, #4]
 800ed98:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800ed9a:	2180      	movs	r1, #128	; 0x80
 800ed9c:	6878      	ldr	r0, [r7, #4]
 800ed9e:	f002 fbe5 	bl	801156c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800eda2:	2100      	movs	r1, #0
 800eda4:	6878      	ldr	r0, [r7, #4]
 800eda6:	f002 fbe1 	bl	801156c <USBD_LL_StallEP>
}
 800edaa:	bf00      	nop
 800edac:	3708      	adds	r7, #8
 800edae:	46bd      	mov	sp, r7
 800edb0:	bd80      	pop	{r7, pc}

0800edb2 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800edb2:	b580      	push	{r7, lr}
 800edb4:	b086      	sub	sp, #24
 800edb6:	af00      	add	r7, sp, #0
 800edb8:	60f8      	str	r0, [r7, #12]
 800edba:	60b9      	str	r1, [r7, #8]
 800edbc:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800edbe:	2300      	movs	r3, #0
 800edc0:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800edc2:	68fb      	ldr	r3, [r7, #12]
 800edc4:	2b00      	cmp	r3, #0
 800edc6:	d036      	beq.n	800ee36 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800edc8:	68fb      	ldr	r3, [r7, #12]
 800edca:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800edcc:	6938      	ldr	r0, [r7, #16]
 800edce:	f000 f836 	bl	800ee3e <USBD_GetLen>
 800edd2:	4603      	mov	r3, r0
 800edd4:	3301      	adds	r3, #1
 800edd6:	b29b      	uxth	r3, r3
 800edd8:	005b      	lsls	r3, r3, #1
 800edda:	b29a      	uxth	r2, r3
 800eddc:	687b      	ldr	r3, [r7, #4]
 800edde:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800ede0:	7dfb      	ldrb	r3, [r7, #23]
 800ede2:	68ba      	ldr	r2, [r7, #8]
 800ede4:	4413      	add	r3, r2
 800ede6:	687a      	ldr	r2, [r7, #4]
 800ede8:	7812      	ldrb	r2, [r2, #0]
 800edea:	701a      	strb	r2, [r3, #0]
  idx++;
 800edec:	7dfb      	ldrb	r3, [r7, #23]
 800edee:	3301      	adds	r3, #1
 800edf0:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800edf2:	7dfb      	ldrb	r3, [r7, #23]
 800edf4:	68ba      	ldr	r2, [r7, #8]
 800edf6:	4413      	add	r3, r2
 800edf8:	2203      	movs	r2, #3
 800edfa:	701a      	strb	r2, [r3, #0]
  idx++;
 800edfc:	7dfb      	ldrb	r3, [r7, #23]
 800edfe:	3301      	adds	r3, #1
 800ee00:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800ee02:	e013      	b.n	800ee2c <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800ee04:	7dfb      	ldrb	r3, [r7, #23]
 800ee06:	68ba      	ldr	r2, [r7, #8]
 800ee08:	4413      	add	r3, r2
 800ee0a:	693a      	ldr	r2, [r7, #16]
 800ee0c:	7812      	ldrb	r2, [r2, #0]
 800ee0e:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800ee10:	693b      	ldr	r3, [r7, #16]
 800ee12:	3301      	adds	r3, #1
 800ee14:	613b      	str	r3, [r7, #16]
    idx++;
 800ee16:	7dfb      	ldrb	r3, [r7, #23]
 800ee18:	3301      	adds	r3, #1
 800ee1a:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800ee1c:	7dfb      	ldrb	r3, [r7, #23]
 800ee1e:	68ba      	ldr	r2, [r7, #8]
 800ee20:	4413      	add	r3, r2
 800ee22:	2200      	movs	r2, #0
 800ee24:	701a      	strb	r2, [r3, #0]
    idx++;
 800ee26:	7dfb      	ldrb	r3, [r7, #23]
 800ee28:	3301      	adds	r3, #1
 800ee2a:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800ee2c:	693b      	ldr	r3, [r7, #16]
 800ee2e:	781b      	ldrb	r3, [r3, #0]
 800ee30:	2b00      	cmp	r3, #0
 800ee32:	d1e7      	bne.n	800ee04 <USBD_GetString+0x52>
 800ee34:	e000      	b.n	800ee38 <USBD_GetString+0x86>
    return;
 800ee36:	bf00      	nop
  }
}
 800ee38:	3718      	adds	r7, #24
 800ee3a:	46bd      	mov	sp, r7
 800ee3c:	bd80      	pop	{r7, pc}

0800ee3e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800ee3e:	b480      	push	{r7}
 800ee40:	b085      	sub	sp, #20
 800ee42:	af00      	add	r7, sp, #0
 800ee44:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800ee46:	2300      	movs	r3, #0
 800ee48:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800ee4a:	687b      	ldr	r3, [r7, #4]
 800ee4c:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800ee4e:	e005      	b.n	800ee5c <USBD_GetLen+0x1e>
  {
    len++;
 800ee50:	7bfb      	ldrb	r3, [r7, #15]
 800ee52:	3301      	adds	r3, #1
 800ee54:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800ee56:	68bb      	ldr	r3, [r7, #8]
 800ee58:	3301      	adds	r3, #1
 800ee5a:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800ee5c:	68bb      	ldr	r3, [r7, #8]
 800ee5e:	781b      	ldrb	r3, [r3, #0]
 800ee60:	2b00      	cmp	r3, #0
 800ee62:	d1f5      	bne.n	800ee50 <USBD_GetLen+0x12>
  }

  return len;
 800ee64:	7bfb      	ldrb	r3, [r7, #15]
}
 800ee66:	4618      	mov	r0, r3
 800ee68:	3714      	adds	r7, #20
 800ee6a:	46bd      	mov	sp, r7
 800ee6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee70:	4770      	bx	lr

0800ee72 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800ee72:	b580      	push	{r7, lr}
 800ee74:	b084      	sub	sp, #16
 800ee76:	af00      	add	r7, sp, #0
 800ee78:	60f8      	str	r0, [r7, #12]
 800ee7a:	60b9      	str	r1, [r7, #8]
 800ee7c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800ee7e:	68fb      	ldr	r3, [r7, #12]
 800ee80:	2202      	movs	r2, #2
 800ee82:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800ee86:	68fb      	ldr	r3, [r7, #12]
 800ee88:	687a      	ldr	r2, [r7, #4]
 800ee8a:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800ee8c:	68fb      	ldr	r3, [r7, #12]
 800ee8e:	687a      	ldr	r2, [r7, #4]
 800ee90:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ee92:	687b      	ldr	r3, [r7, #4]
 800ee94:	68ba      	ldr	r2, [r7, #8]
 800ee96:	2100      	movs	r1, #0
 800ee98:	68f8      	ldr	r0, [r7, #12]
 800ee9a:	f002 fbf1 	bl	8011680 <USBD_LL_Transmit>

  return USBD_OK;
 800ee9e:	2300      	movs	r3, #0
}
 800eea0:	4618      	mov	r0, r3
 800eea2:	3710      	adds	r7, #16
 800eea4:	46bd      	mov	sp, r7
 800eea6:	bd80      	pop	{r7, pc}

0800eea8 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800eea8:	b580      	push	{r7, lr}
 800eeaa:	b084      	sub	sp, #16
 800eeac:	af00      	add	r7, sp, #0
 800eeae:	60f8      	str	r0, [r7, #12]
 800eeb0:	60b9      	str	r1, [r7, #8]
 800eeb2:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800eeb4:	687b      	ldr	r3, [r7, #4]
 800eeb6:	68ba      	ldr	r2, [r7, #8]
 800eeb8:	2100      	movs	r1, #0
 800eeba:	68f8      	ldr	r0, [r7, #12]
 800eebc:	f002 fbe0 	bl	8011680 <USBD_LL_Transmit>

  return USBD_OK;
 800eec0:	2300      	movs	r3, #0
}
 800eec2:	4618      	mov	r0, r3
 800eec4:	3710      	adds	r7, #16
 800eec6:	46bd      	mov	sp, r7
 800eec8:	bd80      	pop	{r7, pc}

0800eeca <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800eeca:	b580      	push	{r7, lr}
 800eecc:	b084      	sub	sp, #16
 800eece:	af00      	add	r7, sp, #0
 800eed0:	60f8      	str	r0, [r7, #12]
 800eed2:	60b9      	str	r1, [r7, #8]
 800eed4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800eed6:	68fb      	ldr	r3, [r7, #12]
 800eed8:	2203      	movs	r2, #3
 800eeda:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800eede:	68fb      	ldr	r3, [r7, #12]
 800eee0:	687a      	ldr	r2, [r7, #4]
 800eee2:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800eee6:	68fb      	ldr	r3, [r7, #12]
 800eee8:	687a      	ldr	r2, [r7, #4]
 800eeea:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800eeee:	687b      	ldr	r3, [r7, #4]
 800eef0:	68ba      	ldr	r2, [r7, #8]
 800eef2:	2100      	movs	r1, #0
 800eef4:	68f8      	ldr	r0, [r7, #12]
 800eef6:	f002 fbe4 	bl	80116c2 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800eefa:	2300      	movs	r3, #0
}
 800eefc:	4618      	mov	r0, r3
 800eefe:	3710      	adds	r7, #16
 800ef00:	46bd      	mov	sp, r7
 800ef02:	bd80      	pop	{r7, pc}

0800ef04 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800ef04:	b580      	push	{r7, lr}
 800ef06:	b084      	sub	sp, #16
 800ef08:	af00      	add	r7, sp, #0
 800ef0a:	60f8      	str	r0, [r7, #12]
 800ef0c:	60b9      	str	r1, [r7, #8]
 800ef0e:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ef10:	687b      	ldr	r3, [r7, #4]
 800ef12:	68ba      	ldr	r2, [r7, #8]
 800ef14:	2100      	movs	r1, #0
 800ef16:	68f8      	ldr	r0, [r7, #12]
 800ef18:	f002 fbd3 	bl	80116c2 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ef1c:	2300      	movs	r3, #0
}
 800ef1e:	4618      	mov	r0, r3
 800ef20:	3710      	adds	r7, #16
 800ef22:	46bd      	mov	sp, r7
 800ef24:	bd80      	pop	{r7, pc}

0800ef26 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800ef26:	b580      	push	{r7, lr}
 800ef28:	b082      	sub	sp, #8
 800ef2a:	af00      	add	r7, sp, #0
 800ef2c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800ef2e:	687b      	ldr	r3, [r7, #4]
 800ef30:	2204      	movs	r2, #4
 800ef32:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800ef36:	2300      	movs	r3, #0
 800ef38:	2200      	movs	r2, #0
 800ef3a:	2100      	movs	r1, #0
 800ef3c:	6878      	ldr	r0, [r7, #4]
 800ef3e:	f002 fb9f 	bl	8011680 <USBD_LL_Transmit>

  return USBD_OK;
 800ef42:	2300      	movs	r3, #0
}
 800ef44:	4618      	mov	r0, r3
 800ef46:	3708      	adds	r7, #8
 800ef48:	46bd      	mov	sp, r7
 800ef4a:	bd80      	pop	{r7, pc}

0800ef4c <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800ef4c:	b580      	push	{r7, lr}
 800ef4e:	b082      	sub	sp, #8
 800ef50:	af00      	add	r7, sp, #0
 800ef52:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800ef54:	687b      	ldr	r3, [r7, #4]
 800ef56:	2205      	movs	r2, #5
 800ef58:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ef5c:	2300      	movs	r3, #0
 800ef5e:	2200      	movs	r2, #0
 800ef60:	2100      	movs	r1, #0
 800ef62:	6878      	ldr	r0, [r7, #4]
 800ef64:	f002 fbad 	bl	80116c2 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ef68:	2300      	movs	r3, #0
}
 800ef6a:	4618      	mov	r0, r3
 800ef6c:	3708      	adds	r7, #8
 800ef6e:	46bd      	mov	sp, r7
 800ef70:	bd80      	pop	{r7, pc}

0800ef72 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800ef72:	b480      	push	{r7}
 800ef74:	b083      	sub	sp, #12
 800ef76:	af00      	add	r7, sp, #0
 800ef78:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ef7a:	687b      	ldr	r3, [r7, #4]
 800ef7c:	f103 0208 	add.w	r2, r3, #8
 800ef80:	687b      	ldr	r3, [r7, #4]
 800ef82:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800ef84:	687b      	ldr	r3, [r7, #4]
 800ef86:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ef8a:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ef8c:	687b      	ldr	r3, [r7, #4]
 800ef8e:	f103 0208 	add.w	r2, r3, #8
 800ef92:	687b      	ldr	r3, [r7, #4]
 800ef94:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ef96:	687b      	ldr	r3, [r7, #4]
 800ef98:	f103 0208 	add.w	r2, r3, #8
 800ef9c:	687b      	ldr	r3, [r7, #4]
 800ef9e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800efa0:	687b      	ldr	r3, [r7, #4]
 800efa2:	2200      	movs	r2, #0
 800efa4:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800efa6:	bf00      	nop
 800efa8:	370c      	adds	r7, #12
 800efaa:	46bd      	mov	sp, r7
 800efac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efb0:	4770      	bx	lr

0800efb2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800efb2:	b480      	push	{r7}
 800efb4:	b083      	sub	sp, #12
 800efb6:	af00      	add	r7, sp, #0
 800efb8:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800efba:	687b      	ldr	r3, [r7, #4]
 800efbc:	2200      	movs	r2, #0
 800efbe:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800efc0:	bf00      	nop
 800efc2:	370c      	adds	r7, #12
 800efc4:	46bd      	mov	sp, r7
 800efc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efca:	4770      	bx	lr

0800efcc <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800efcc:	b480      	push	{r7}
 800efce:	b085      	sub	sp, #20
 800efd0:	af00      	add	r7, sp, #0
 800efd2:	6078      	str	r0, [r7, #4]
 800efd4:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800efd6:	687b      	ldr	r3, [r7, #4]
 800efd8:	685b      	ldr	r3, [r3, #4]
 800efda:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800efdc:	683b      	ldr	r3, [r7, #0]
 800efde:	68fa      	ldr	r2, [r7, #12]
 800efe0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800efe2:	68fb      	ldr	r3, [r7, #12]
 800efe4:	689a      	ldr	r2, [r3, #8]
 800efe6:	683b      	ldr	r3, [r7, #0]
 800efe8:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800efea:	68fb      	ldr	r3, [r7, #12]
 800efec:	689b      	ldr	r3, [r3, #8]
 800efee:	683a      	ldr	r2, [r7, #0]
 800eff0:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800eff2:	68fb      	ldr	r3, [r7, #12]
 800eff4:	683a      	ldr	r2, [r7, #0]
 800eff6:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800eff8:	683b      	ldr	r3, [r7, #0]
 800effa:	687a      	ldr	r2, [r7, #4]
 800effc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800effe:	687b      	ldr	r3, [r7, #4]
 800f000:	681b      	ldr	r3, [r3, #0]
 800f002:	1c5a      	adds	r2, r3, #1
 800f004:	687b      	ldr	r3, [r7, #4]
 800f006:	601a      	str	r2, [r3, #0]
}
 800f008:	bf00      	nop
 800f00a:	3714      	adds	r7, #20
 800f00c:	46bd      	mov	sp, r7
 800f00e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f012:	4770      	bx	lr

0800f014 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800f014:	b480      	push	{r7}
 800f016:	b085      	sub	sp, #20
 800f018:	af00      	add	r7, sp, #0
 800f01a:	6078      	str	r0, [r7, #4]
 800f01c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800f01e:	683b      	ldr	r3, [r7, #0]
 800f020:	681b      	ldr	r3, [r3, #0]
 800f022:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800f024:	68bb      	ldr	r3, [r7, #8]
 800f026:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f02a:	d103      	bne.n	800f034 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800f02c:	687b      	ldr	r3, [r7, #4]
 800f02e:	691b      	ldr	r3, [r3, #16]
 800f030:	60fb      	str	r3, [r7, #12]
 800f032:	e00c      	b.n	800f04e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800f034:	687b      	ldr	r3, [r7, #4]
 800f036:	3308      	adds	r3, #8
 800f038:	60fb      	str	r3, [r7, #12]
 800f03a:	e002      	b.n	800f042 <vListInsert+0x2e>
 800f03c:	68fb      	ldr	r3, [r7, #12]
 800f03e:	685b      	ldr	r3, [r3, #4]
 800f040:	60fb      	str	r3, [r7, #12]
 800f042:	68fb      	ldr	r3, [r7, #12]
 800f044:	685b      	ldr	r3, [r3, #4]
 800f046:	681b      	ldr	r3, [r3, #0]
 800f048:	68ba      	ldr	r2, [r7, #8]
 800f04a:	429a      	cmp	r2, r3
 800f04c:	d2f6      	bcs.n	800f03c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800f04e:	68fb      	ldr	r3, [r7, #12]
 800f050:	685a      	ldr	r2, [r3, #4]
 800f052:	683b      	ldr	r3, [r7, #0]
 800f054:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800f056:	683b      	ldr	r3, [r7, #0]
 800f058:	685b      	ldr	r3, [r3, #4]
 800f05a:	683a      	ldr	r2, [r7, #0]
 800f05c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800f05e:	683b      	ldr	r3, [r7, #0]
 800f060:	68fa      	ldr	r2, [r7, #12]
 800f062:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800f064:	68fb      	ldr	r3, [r7, #12]
 800f066:	683a      	ldr	r2, [r7, #0]
 800f068:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800f06a:	683b      	ldr	r3, [r7, #0]
 800f06c:	687a      	ldr	r2, [r7, #4]
 800f06e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800f070:	687b      	ldr	r3, [r7, #4]
 800f072:	681b      	ldr	r3, [r3, #0]
 800f074:	1c5a      	adds	r2, r3, #1
 800f076:	687b      	ldr	r3, [r7, #4]
 800f078:	601a      	str	r2, [r3, #0]
}
 800f07a:	bf00      	nop
 800f07c:	3714      	adds	r7, #20
 800f07e:	46bd      	mov	sp, r7
 800f080:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f084:	4770      	bx	lr

0800f086 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800f086:	b480      	push	{r7}
 800f088:	b085      	sub	sp, #20
 800f08a:	af00      	add	r7, sp, #0
 800f08c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800f08e:	687b      	ldr	r3, [r7, #4]
 800f090:	691b      	ldr	r3, [r3, #16]
 800f092:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800f094:	687b      	ldr	r3, [r7, #4]
 800f096:	685b      	ldr	r3, [r3, #4]
 800f098:	687a      	ldr	r2, [r7, #4]
 800f09a:	6892      	ldr	r2, [r2, #8]
 800f09c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800f09e:	687b      	ldr	r3, [r7, #4]
 800f0a0:	689b      	ldr	r3, [r3, #8]
 800f0a2:	687a      	ldr	r2, [r7, #4]
 800f0a4:	6852      	ldr	r2, [r2, #4]
 800f0a6:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800f0a8:	68fb      	ldr	r3, [r7, #12]
 800f0aa:	685b      	ldr	r3, [r3, #4]
 800f0ac:	687a      	ldr	r2, [r7, #4]
 800f0ae:	429a      	cmp	r2, r3
 800f0b0:	d103      	bne.n	800f0ba <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800f0b2:	687b      	ldr	r3, [r7, #4]
 800f0b4:	689a      	ldr	r2, [r3, #8]
 800f0b6:	68fb      	ldr	r3, [r7, #12]
 800f0b8:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800f0ba:	687b      	ldr	r3, [r7, #4]
 800f0bc:	2200      	movs	r2, #0
 800f0be:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800f0c0:	68fb      	ldr	r3, [r7, #12]
 800f0c2:	681b      	ldr	r3, [r3, #0]
 800f0c4:	1e5a      	subs	r2, r3, #1
 800f0c6:	68fb      	ldr	r3, [r7, #12]
 800f0c8:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800f0ca:	68fb      	ldr	r3, [r7, #12]
 800f0cc:	681b      	ldr	r3, [r3, #0]
}
 800f0ce:	4618      	mov	r0, r3
 800f0d0:	3714      	adds	r7, #20
 800f0d2:	46bd      	mov	sp, r7
 800f0d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0d8:	4770      	bx	lr
	...

0800f0dc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800f0dc:	b580      	push	{r7, lr}
 800f0de:	b084      	sub	sp, #16
 800f0e0:	af00      	add	r7, sp, #0
 800f0e2:	6078      	str	r0, [r7, #4]
 800f0e4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800f0e6:	687b      	ldr	r3, [r7, #4]
 800f0e8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800f0ea:	68fb      	ldr	r3, [r7, #12]
 800f0ec:	2b00      	cmp	r3, #0
 800f0ee:	d10a      	bne.n	800f106 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800f0f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f0f4:	f383 8811 	msr	BASEPRI, r3
 800f0f8:	f3bf 8f6f 	isb	sy
 800f0fc:	f3bf 8f4f 	dsb	sy
 800f100:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800f102:	bf00      	nop
 800f104:	e7fe      	b.n	800f104 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800f106:	f001 fc0f 	bl	8010928 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800f10a:	68fb      	ldr	r3, [r7, #12]
 800f10c:	681a      	ldr	r2, [r3, #0]
 800f10e:	68fb      	ldr	r3, [r7, #12]
 800f110:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f112:	68f9      	ldr	r1, [r7, #12]
 800f114:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800f116:	fb01 f303 	mul.w	r3, r1, r3
 800f11a:	441a      	add	r2, r3
 800f11c:	68fb      	ldr	r3, [r7, #12]
 800f11e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800f120:	68fb      	ldr	r3, [r7, #12]
 800f122:	2200      	movs	r2, #0
 800f124:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800f126:	68fb      	ldr	r3, [r7, #12]
 800f128:	681a      	ldr	r2, [r3, #0]
 800f12a:	68fb      	ldr	r3, [r7, #12]
 800f12c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800f12e:	68fb      	ldr	r3, [r7, #12]
 800f130:	681a      	ldr	r2, [r3, #0]
 800f132:	68fb      	ldr	r3, [r7, #12]
 800f134:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f136:	3b01      	subs	r3, #1
 800f138:	68f9      	ldr	r1, [r7, #12]
 800f13a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800f13c:	fb01 f303 	mul.w	r3, r1, r3
 800f140:	441a      	add	r2, r3
 800f142:	68fb      	ldr	r3, [r7, #12]
 800f144:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800f146:	68fb      	ldr	r3, [r7, #12]
 800f148:	22ff      	movs	r2, #255	; 0xff
 800f14a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800f14e:	68fb      	ldr	r3, [r7, #12]
 800f150:	22ff      	movs	r2, #255	; 0xff
 800f152:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800f156:	683b      	ldr	r3, [r7, #0]
 800f158:	2b00      	cmp	r3, #0
 800f15a:	d114      	bne.n	800f186 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f15c:	68fb      	ldr	r3, [r7, #12]
 800f15e:	691b      	ldr	r3, [r3, #16]
 800f160:	2b00      	cmp	r3, #0
 800f162:	d01a      	beq.n	800f19a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f164:	68fb      	ldr	r3, [r7, #12]
 800f166:	3310      	adds	r3, #16
 800f168:	4618      	mov	r0, r3
 800f16a:	f001 f801 	bl	8010170 <xTaskRemoveFromEventList>
 800f16e:	4603      	mov	r3, r0
 800f170:	2b00      	cmp	r3, #0
 800f172:	d012      	beq.n	800f19a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800f174:	4b0c      	ldr	r3, [pc, #48]	; (800f1a8 <xQueueGenericReset+0xcc>)
 800f176:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f17a:	601a      	str	r2, [r3, #0]
 800f17c:	f3bf 8f4f 	dsb	sy
 800f180:	f3bf 8f6f 	isb	sy
 800f184:	e009      	b.n	800f19a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800f186:	68fb      	ldr	r3, [r7, #12]
 800f188:	3310      	adds	r3, #16
 800f18a:	4618      	mov	r0, r3
 800f18c:	f7ff fef1 	bl	800ef72 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800f190:	68fb      	ldr	r3, [r7, #12]
 800f192:	3324      	adds	r3, #36	; 0x24
 800f194:	4618      	mov	r0, r3
 800f196:	f7ff feec 	bl	800ef72 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800f19a:	f001 fbf5 	bl	8010988 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800f19e:	2301      	movs	r3, #1
}
 800f1a0:	4618      	mov	r0, r3
 800f1a2:	3710      	adds	r7, #16
 800f1a4:	46bd      	mov	sp, r7
 800f1a6:	bd80      	pop	{r7, pc}
 800f1a8:	e000ed04 	.word	0xe000ed04

0800f1ac <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800f1ac:	b580      	push	{r7, lr}
 800f1ae:	b08a      	sub	sp, #40	; 0x28
 800f1b0:	af02      	add	r7, sp, #8
 800f1b2:	60f8      	str	r0, [r7, #12]
 800f1b4:	60b9      	str	r1, [r7, #8]
 800f1b6:	4613      	mov	r3, r2
 800f1b8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800f1ba:	68fb      	ldr	r3, [r7, #12]
 800f1bc:	2b00      	cmp	r3, #0
 800f1be:	d10a      	bne.n	800f1d6 <xQueueGenericCreate+0x2a>
	__asm volatile
 800f1c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f1c4:	f383 8811 	msr	BASEPRI, r3
 800f1c8:	f3bf 8f6f 	isb	sy
 800f1cc:	f3bf 8f4f 	dsb	sy
 800f1d0:	613b      	str	r3, [r7, #16]
}
 800f1d2:	bf00      	nop
 800f1d4:	e7fe      	b.n	800f1d4 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f1d6:	68fb      	ldr	r3, [r7, #12]
 800f1d8:	68ba      	ldr	r2, [r7, #8]
 800f1da:	fb02 f303 	mul.w	r3, r2, r3
 800f1de:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800f1e0:	69fb      	ldr	r3, [r7, #28]
 800f1e2:	3348      	adds	r3, #72	; 0x48
 800f1e4:	4618      	mov	r0, r3
 800f1e6:	f001 fc51 	bl	8010a8c <pvPortMalloc>
 800f1ea:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800f1ec:	69bb      	ldr	r3, [r7, #24]
 800f1ee:	2b00      	cmp	r3, #0
 800f1f0:	d00d      	beq.n	800f20e <xQueueGenericCreate+0x62>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800f1f2:	69bb      	ldr	r3, [r7, #24]
 800f1f4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800f1f6:	697b      	ldr	r3, [r7, #20]
 800f1f8:	3348      	adds	r3, #72	; 0x48
 800f1fa:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800f1fc:	79fa      	ldrb	r2, [r7, #7]
 800f1fe:	69bb      	ldr	r3, [r7, #24]
 800f200:	9300      	str	r3, [sp, #0]
 800f202:	4613      	mov	r3, r2
 800f204:	697a      	ldr	r2, [r7, #20]
 800f206:	68b9      	ldr	r1, [r7, #8]
 800f208:	68f8      	ldr	r0, [r7, #12]
 800f20a:	f000 f805 	bl	800f218 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800f20e:	69bb      	ldr	r3, [r7, #24]
	}
 800f210:	4618      	mov	r0, r3
 800f212:	3720      	adds	r7, #32
 800f214:	46bd      	mov	sp, r7
 800f216:	bd80      	pop	{r7, pc}

0800f218 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800f218:	b580      	push	{r7, lr}
 800f21a:	b084      	sub	sp, #16
 800f21c:	af00      	add	r7, sp, #0
 800f21e:	60f8      	str	r0, [r7, #12]
 800f220:	60b9      	str	r1, [r7, #8]
 800f222:	607a      	str	r2, [r7, #4]
 800f224:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800f226:	68bb      	ldr	r3, [r7, #8]
 800f228:	2b00      	cmp	r3, #0
 800f22a:	d103      	bne.n	800f234 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800f22c:	69bb      	ldr	r3, [r7, #24]
 800f22e:	69ba      	ldr	r2, [r7, #24]
 800f230:	601a      	str	r2, [r3, #0]
 800f232:	e002      	b.n	800f23a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800f234:	69bb      	ldr	r3, [r7, #24]
 800f236:	687a      	ldr	r2, [r7, #4]
 800f238:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800f23a:	69bb      	ldr	r3, [r7, #24]
 800f23c:	68fa      	ldr	r2, [r7, #12]
 800f23e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800f240:	69bb      	ldr	r3, [r7, #24]
 800f242:	68ba      	ldr	r2, [r7, #8]
 800f244:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800f246:	2101      	movs	r1, #1
 800f248:	69b8      	ldr	r0, [r7, #24]
 800f24a:	f7ff ff47 	bl	800f0dc <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800f24e:	bf00      	nop
 800f250:	3710      	adds	r7, #16
 800f252:	46bd      	mov	sp, r7
 800f254:	bd80      	pop	{r7, pc}

0800f256 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800f256:	b580      	push	{r7, lr}
 800f258:	b082      	sub	sp, #8
 800f25a:	af00      	add	r7, sp, #0
 800f25c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800f25e:	687b      	ldr	r3, [r7, #4]
 800f260:	2b00      	cmp	r3, #0
 800f262:	d00e      	beq.n	800f282 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800f264:	687b      	ldr	r3, [r7, #4]
 800f266:	2200      	movs	r2, #0
 800f268:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800f26a:	687b      	ldr	r3, [r7, #4]
 800f26c:	2200      	movs	r2, #0
 800f26e:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800f270:	687b      	ldr	r3, [r7, #4]
 800f272:	2200      	movs	r2, #0
 800f274:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800f276:	2300      	movs	r3, #0
 800f278:	2200      	movs	r2, #0
 800f27a:	2100      	movs	r1, #0
 800f27c:	6878      	ldr	r0, [r7, #4]
 800f27e:	f000 f81d 	bl	800f2bc <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800f282:	bf00      	nop
 800f284:	3708      	adds	r7, #8
 800f286:	46bd      	mov	sp, r7
 800f288:	bd80      	pop	{r7, pc}

0800f28a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800f28a:	b580      	push	{r7, lr}
 800f28c:	b086      	sub	sp, #24
 800f28e:	af00      	add	r7, sp, #0
 800f290:	4603      	mov	r3, r0
 800f292:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800f294:	2301      	movs	r3, #1
 800f296:	617b      	str	r3, [r7, #20]
 800f298:	2300      	movs	r3, #0
 800f29a:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800f29c:	79fb      	ldrb	r3, [r7, #7]
 800f29e:	461a      	mov	r2, r3
 800f2a0:	6939      	ldr	r1, [r7, #16]
 800f2a2:	6978      	ldr	r0, [r7, #20]
 800f2a4:	f7ff ff82 	bl	800f1ac <xQueueGenericCreate>
 800f2a8:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800f2aa:	68f8      	ldr	r0, [r7, #12]
 800f2ac:	f7ff ffd3 	bl	800f256 <prvInitialiseMutex>

		return xNewQueue;
 800f2b0:	68fb      	ldr	r3, [r7, #12]
	}
 800f2b2:	4618      	mov	r0, r3
 800f2b4:	3718      	adds	r7, #24
 800f2b6:	46bd      	mov	sp, r7
 800f2b8:	bd80      	pop	{r7, pc}
	...

0800f2bc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800f2bc:	b580      	push	{r7, lr}
 800f2be:	b08e      	sub	sp, #56	; 0x38
 800f2c0:	af00      	add	r7, sp, #0
 800f2c2:	60f8      	str	r0, [r7, #12]
 800f2c4:	60b9      	str	r1, [r7, #8]
 800f2c6:	607a      	str	r2, [r7, #4]
 800f2c8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800f2ca:	2300      	movs	r3, #0
 800f2cc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800f2ce:	68fb      	ldr	r3, [r7, #12]
 800f2d0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800f2d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f2d4:	2b00      	cmp	r3, #0
 800f2d6:	d10a      	bne.n	800f2ee <xQueueGenericSend+0x32>
	__asm volatile
 800f2d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f2dc:	f383 8811 	msr	BASEPRI, r3
 800f2e0:	f3bf 8f6f 	isb	sy
 800f2e4:	f3bf 8f4f 	dsb	sy
 800f2e8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800f2ea:	bf00      	nop
 800f2ec:	e7fe      	b.n	800f2ec <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f2ee:	68bb      	ldr	r3, [r7, #8]
 800f2f0:	2b00      	cmp	r3, #0
 800f2f2:	d103      	bne.n	800f2fc <xQueueGenericSend+0x40>
 800f2f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f2f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f2f8:	2b00      	cmp	r3, #0
 800f2fa:	d101      	bne.n	800f300 <xQueueGenericSend+0x44>
 800f2fc:	2301      	movs	r3, #1
 800f2fe:	e000      	b.n	800f302 <xQueueGenericSend+0x46>
 800f300:	2300      	movs	r3, #0
 800f302:	2b00      	cmp	r3, #0
 800f304:	d10a      	bne.n	800f31c <xQueueGenericSend+0x60>
	__asm volatile
 800f306:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f30a:	f383 8811 	msr	BASEPRI, r3
 800f30e:	f3bf 8f6f 	isb	sy
 800f312:	f3bf 8f4f 	dsb	sy
 800f316:	627b      	str	r3, [r7, #36]	; 0x24
}
 800f318:	bf00      	nop
 800f31a:	e7fe      	b.n	800f31a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800f31c:	683b      	ldr	r3, [r7, #0]
 800f31e:	2b02      	cmp	r3, #2
 800f320:	d103      	bne.n	800f32a <xQueueGenericSend+0x6e>
 800f322:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f324:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f326:	2b01      	cmp	r3, #1
 800f328:	d101      	bne.n	800f32e <xQueueGenericSend+0x72>
 800f32a:	2301      	movs	r3, #1
 800f32c:	e000      	b.n	800f330 <xQueueGenericSend+0x74>
 800f32e:	2300      	movs	r3, #0
 800f330:	2b00      	cmp	r3, #0
 800f332:	d10a      	bne.n	800f34a <xQueueGenericSend+0x8e>
	__asm volatile
 800f334:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f338:	f383 8811 	msr	BASEPRI, r3
 800f33c:	f3bf 8f6f 	isb	sy
 800f340:	f3bf 8f4f 	dsb	sy
 800f344:	623b      	str	r3, [r7, #32]
}
 800f346:	bf00      	nop
 800f348:	e7fe      	b.n	800f348 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f34a:	f001 f857 	bl	80103fc <xTaskGetSchedulerState>
 800f34e:	4603      	mov	r3, r0
 800f350:	2b00      	cmp	r3, #0
 800f352:	d102      	bne.n	800f35a <xQueueGenericSend+0x9e>
 800f354:	687b      	ldr	r3, [r7, #4]
 800f356:	2b00      	cmp	r3, #0
 800f358:	d101      	bne.n	800f35e <xQueueGenericSend+0xa2>
 800f35a:	2301      	movs	r3, #1
 800f35c:	e000      	b.n	800f360 <xQueueGenericSend+0xa4>
 800f35e:	2300      	movs	r3, #0
 800f360:	2b00      	cmp	r3, #0
 800f362:	d10a      	bne.n	800f37a <xQueueGenericSend+0xbe>
	__asm volatile
 800f364:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f368:	f383 8811 	msr	BASEPRI, r3
 800f36c:	f3bf 8f6f 	isb	sy
 800f370:	f3bf 8f4f 	dsb	sy
 800f374:	61fb      	str	r3, [r7, #28]
}
 800f376:	bf00      	nop
 800f378:	e7fe      	b.n	800f378 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800f37a:	f001 fad5 	bl	8010928 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800f37e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f380:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f382:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f384:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f386:	429a      	cmp	r2, r3
 800f388:	d302      	bcc.n	800f390 <xQueueGenericSend+0xd4>
 800f38a:	683b      	ldr	r3, [r7, #0]
 800f38c:	2b02      	cmp	r3, #2
 800f38e:	d129      	bne.n	800f3e4 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800f390:	683a      	ldr	r2, [r7, #0]
 800f392:	68b9      	ldr	r1, [r7, #8]
 800f394:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f396:	f000 fa93 	bl	800f8c0 <prvCopyDataToQueue>
 800f39a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f39c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f39e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f3a0:	2b00      	cmp	r3, #0
 800f3a2:	d010      	beq.n	800f3c6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f3a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3a6:	3324      	adds	r3, #36	; 0x24
 800f3a8:	4618      	mov	r0, r3
 800f3aa:	f000 fee1 	bl	8010170 <xTaskRemoveFromEventList>
 800f3ae:	4603      	mov	r3, r0
 800f3b0:	2b00      	cmp	r3, #0
 800f3b2:	d013      	beq.n	800f3dc <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800f3b4:	4b3f      	ldr	r3, [pc, #252]	; (800f4b4 <xQueueGenericSend+0x1f8>)
 800f3b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f3ba:	601a      	str	r2, [r3, #0]
 800f3bc:	f3bf 8f4f 	dsb	sy
 800f3c0:	f3bf 8f6f 	isb	sy
 800f3c4:	e00a      	b.n	800f3dc <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800f3c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3c8:	2b00      	cmp	r3, #0
 800f3ca:	d007      	beq.n	800f3dc <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800f3cc:	4b39      	ldr	r3, [pc, #228]	; (800f4b4 <xQueueGenericSend+0x1f8>)
 800f3ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f3d2:	601a      	str	r2, [r3, #0]
 800f3d4:	f3bf 8f4f 	dsb	sy
 800f3d8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800f3dc:	f001 fad4 	bl	8010988 <vPortExitCritical>
				return pdPASS;
 800f3e0:	2301      	movs	r3, #1
 800f3e2:	e063      	b.n	800f4ac <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800f3e4:	687b      	ldr	r3, [r7, #4]
 800f3e6:	2b00      	cmp	r3, #0
 800f3e8:	d103      	bne.n	800f3f2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800f3ea:	f001 facd 	bl	8010988 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800f3ee:	2300      	movs	r3, #0
 800f3f0:	e05c      	b.n	800f4ac <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800f3f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f3f4:	2b00      	cmp	r3, #0
 800f3f6:	d106      	bne.n	800f406 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800f3f8:	f107 0314 	add.w	r3, r7, #20
 800f3fc:	4618      	mov	r0, r3
 800f3fe:	f000 ff19 	bl	8010234 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800f402:	2301      	movs	r3, #1
 800f404:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800f406:	f001 fabf 	bl	8010988 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800f40a:	f000 fccf 	bl	800fdac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f40e:	f001 fa8b 	bl	8010928 <vPortEnterCritical>
 800f412:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f414:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f418:	b25b      	sxtb	r3, r3
 800f41a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f41e:	d103      	bne.n	800f428 <xQueueGenericSend+0x16c>
 800f420:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f422:	2200      	movs	r2, #0
 800f424:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f428:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f42a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f42e:	b25b      	sxtb	r3, r3
 800f430:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f434:	d103      	bne.n	800f43e <xQueueGenericSend+0x182>
 800f436:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f438:	2200      	movs	r2, #0
 800f43a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f43e:	f001 faa3 	bl	8010988 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f442:	1d3a      	adds	r2, r7, #4
 800f444:	f107 0314 	add.w	r3, r7, #20
 800f448:	4611      	mov	r1, r2
 800f44a:	4618      	mov	r0, r3
 800f44c:	f000 ff08 	bl	8010260 <xTaskCheckForTimeOut>
 800f450:	4603      	mov	r3, r0
 800f452:	2b00      	cmp	r3, #0
 800f454:	d124      	bne.n	800f4a0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800f456:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f458:	f000 fb2a 	bl	800fab0 <prvIsQueueFull>
 800f45c:	4603      	mov	r3, r0
 800f45e:	2b00      	cmp	r3, #0
 800f460:	d018      	beq.n	800f494 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800f462:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f464:	3310      	adds	r3, #16
 800f466:	687a      	ldr	r2, [r7, #4]
 800f468:	4611      	mov	r1, r2
 800f46a:	4618      	mov	r0, r3
 800f46c:	f000 fe5c 	bl	8010128 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800f470:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f472:	f000 fab5 	bl	800f9e0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800f476:	f000 fca7 	bl	800fdc8 <xTaskResumeAll>
 800f47a:	4603      	mov	r3, r0
 800f47c:	2b00      	cmp	r3, #0
 800f47e:	f47f af7c 	bne.w	800f37a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800f482:	4b0c      	ldr	r3, [pc, #48]	; (800f4b4 <xQueueGenericSend+0x1f8>)
 800f484:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f488:	601a      	str	r2, [r3, #0]
 800f48a:	f3bf 8f4f 	dsb	sy
 800f48e:	f3bf 8f6f 	isb	sy
 800f492:	e772      	b.n	800f37a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800f494:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f496:	f000 faa3 	bl	800f9e0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800f49a:	f000 fc95 	bl	800fdc8 <xTaskResumeAll>
 800f49e:	e76c      	b.n	800f37a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800f4a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f4a2:	f000 fa9d 	bl	800f9e0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f4a6:	f000 fc8f 	bl	800fdc8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800f4aa:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800f4ac:	4618      	mov	r0, r3
 800f4ae:	3738      	adds	r7, #56	; 0x38
 800f4b0:	46bd      	mov	sp, r7
 800f4b2:	bd80      	pop	{r7, pc}
 800f4b4:	e000ed04 	.word	0xe000ed04

0800f4b8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800f4b8:	b580      	push	{r7, lr}
 800f4ba:	b08c      	sub	sp, #48	; 0x30
 800f4bc:	af00      	add	r7, sp, #0
 800f4be:	60f8      	str	r0, [r7, #12]
 800f4c0:	60b9      	str	r1, [r7, #8]
 800f4c2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800f4c4:	2300      	movs	r3, #0
 800f4c6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800f4c8:	68fb      	ldr	r3, [r7, #12]
 800f4ca:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800f4cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4ce:	2b00      	cmp	r3, #0
 800f4d0:	d10a      	bne.n	800f4e8 <xQueueReceive+0x30>
	__asm volatile
 800f4d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f4d6:	f383 8811 	msr	BASEPRI, r3
 800f4da:	f3bf 8f6f 	isb	sy
 800f4de:	f3bf 8f4f 	dsb	sy
 800f4e2:	623b      	str	r3, [r7, #32]
}
 800f4e4:	bf00      	nop
 800f4e6:	e7fe      	b.n	800f4e6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f4e8:	68bb      	ldr	r3, [r7, #8]
 800f4ea:	2b00      	cmp	r3, #0
 800f4ec:	d103      	bne.n	800f4f6 <xQueueReceive+0x3e>
 800f4ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f4f2:	2b00      	cmp	r3, #0
 800f4f4:	d101      	bne.n	800f4fa <xQueueReceive+0x42>
 800f4f6:	2301      	movs	r3, #1
 800f4f8:	e000      	b.n	800f4fc <xQueueReceive+0x44>
 800f4fa:	2300      	movs	r3, #0
 800f4fc:	2b00      	cmp	r3, #0
 800f4fe:	d10a      	bne.n	800f516 <xQueueReceive+0x5e>
	__asm volatile
 800f500:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f504:	f383 8811 	msr	BASEPRI, r3
 800f508:	f3bf 8f6f 	isb	sy
 800f50c:	f3bf 8f4f 	dsb	sy
 800f510:	61fb      	str	r3, [r7, #28]
}
 800f512:	bf00      	nop
 800f514:	e7fe      	b.n	800f514 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f516:	f000 ff71 	bl	80103fc <xTaskGetSchedulerState>
 800f51a:	4603      	mov	r3, r0
 800f51c:	2b00      	cmp	r3, #0
 800f51e:	d102      	bne.n	800f526 <xQueueReceive+0x6e>
 800f520:	687b      	ldr	r3, [r7, #4]
 800f522:	2b00      	cmp	r3, #0
 800f524:	d101      	bne.n	800f52a <xQueueReceive+0x72>
 800f526:	2301      	movs	r3, #1
 800f528:	e000      	b.n	800f52c <xQueueReceive+0x74>
 800f52a:	2300      	movs	r3, #0
 800f52c:	2b00      	cmp	r3, #0
 800f52e:	d10a      	bne.n	800f546 <xQueueReceive+0x8e>
	__asm volatile
 800f530:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f534:	f383 8811 	msr	BASEPRI, r3
 800f538:	f3bf 8f6f 	isb	sy
 800f53c:	f3bf 8f4f 	dsb	sy
 800f540:	61bb      	str	r3, [r7, #24]
}
 800f542:	bf00      	nop
 800f544:	e7fe      	b.n	800f544 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800f546:	f001 f9ef 	bl	8010928 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f54a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f54c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f54e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f552:	2b00      	cmp	r3, #0
 800f554:	d01f      	beq.n	800f596 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800f556:	68b9      	ldr	r1, [r7, #8]
 800f558:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f55a:	f000 fa1b 	bl	800f994 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800f55e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f560:	1e5a      	subs	r2, r3, #1
 800f562:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f564:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f566:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f568:	691b      	ldr	r3, [r3, #16]
 800f56a:	2b00      	cmp	r3, #0
 800f56c:	d00f      	beq.n	800f58e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f56e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f570:	3310      	adds	r3, #16
 800f572:	4618      	mov	r0, r3
 800f574:	f000 fdfc 	bl	8010170 <xTaskRemoveFromEventList>
 800f578:	4603      	mov	r3, r0
 800f57a:	2b00      	cmp	r3, #0
 800f57c:	d007      	beq.n	800f58e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800f57e:	4b3d      	ldr	r3, [pc, #244]	; (800f674 <xQueueReceive+0x1bc>)
 800f580:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f584:	601a      	str	r2, [r3, #0]
 800f586:	f3bf 8f4f 	dsb	sy
 800f58a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800f58e:	f001 f9fb 	bl	8010988 <vPortExitCritical>
				return pdPASS;
 800f592:	2301      	movs	r3, #1
 800f594:	e069      	b.n	800f66a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800f596:	687b      	ldr	r3, [r7, #4]
 800f598:	2b00      	cmp	r3, #0
 800f59a:	d103      	bne.n	800f5a4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800f59c:	f001 f9f4 	bl	8010988 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800f5a0:	2300      	movs	r3, #0
 800f5a2:	e062      	b.n	800f66a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800f5a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f5a6:	2b00      	cmp	r3, #0
 800f5a8:	d106      	bne.n	800f5b8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800f5aa:	f107 0310 	add.w	r3, r7, #16
 800f5ae:	4618      	mov	r0, r3
 800f5b0:	f000 fe40 	bl	8010234 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800f5b4:	2301      	movs	r3, #1
 800f5b6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800f5b8:	f001 f9e6 	bl	8010988 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800f5bc:	f000 fbf6 	bl	800fdac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f5c0:	f001 f9b2 	bl	8010928 <vPortEnterCritical>
 800f5c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f5c6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f5ca:	b25b      	sxtb	r3, r3
 800f5cc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f5d0:	d103      	bne.n	800f5da <xQueueReceive+0x122>
 800f5d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f5d4:	2200      	movs	r2, #0
 800f5d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f5da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f5dc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f5e0:	b25b      	sxtb	r3, r3
 800f5e2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f5e6:	d103      	bne.n	800f5f0 <xQueueReceive+0x138>
 800f5e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f5ea:	2200      	movs	r2, #0
 800f5ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f5f0:	f001 f9ca 	bl	8010988 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f5f4:	1d3a      	adds	r2, r7, #4
 800f5f6:	f107 0310 	add.w	r3, r7, #16
 800f5fa:	4611      	mov	r1, r2
 800f5fc:	4618      	mov	r0, r3
 800f5fe:	f000 fe2f 	bl	8010260 <xTaskCheckForTimeOut>
 800f602:	4603      	mov	r3, r0
 800f604:	2b00      	cmp	r3, #0
 800f606:	d123      	bne.n	800f650 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f608:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f60a:	f000 fa3b 	bl	800fa84 <prvIsQueueEmpty>
 800f60e:	4603      	mov	r3, r0
 800f610:	2b00      	cmp	r3, #0
 800f612:	d017      	beq.n	800f644 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800f614:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f616:	3324      	adds	r3, #36	; 0x24
 800f618:	687a      	ldr	r2, [r7, #4]
 800f61a:	4611      	mov	r1, r2
 800f61c:	4618      	mov	r0, r3
 800f61e:	f000 fd83 	bl	8010128 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800f622:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f624:	f000 f9dc 	bl	800f9e0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800f628:	f000 fbce 	bl	800fdc8 <xTaskResumeAll>
 800f62c:	4603      	mov	r3, r0
 800f62e:	2b00      	cmp	r3, #0
 800f630:	d189      	bne.n	800f546 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800f632:	4b10      	ldr	r3, [pc, #64]	; (800f674 <xQueueReceive+0x1bc>)
 800f634:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f638:	601a      	str	r2, [r3, #0]
 800f63a:	f3bf 8f4f 	dsb	sy
 800f63e:	f3bf 8f6f 	isb	sy
 800f642:	e780      	b.n	800f546 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800f644:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f646:	f000 f9cb 	bl	800f9e0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800f64a:	f000 fbbd 	bl	800fdc8 <xTaskResumeAll>
 800f64e:	e77a      	b.n	800f546 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800f650:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f652:	f000 f9c5 	bl	800f9e0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f656:	f000 fbb7 	bl	800fdc8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f65a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f65c:	f000 fa12 	bl	800fa84 <prvIsQueueEmpty>
 800f660:	4603      	mov	r3, r0
 800f662:	2b00      	cmp	r3, #0
 800f664:	f43f af6f 	beq.w	800f546 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800f668:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800f66a:	4618      	mov	r0, r3
 800f66c:	3730      	adds	r7, #48	; 0x30
 800f66e:	46bd      	mov	sp, r7
 800f670:	bd80      	pop	{r7, pc}
 800f672:	bf00      	nop
 800f674:	e000ed04 	.word	0xe000ed04

0800f678 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800f678:	b580      	push	{r7, lr}
 800f67a:	b08e      	sub	sp, #56	; 0x38
 800f67c:	af00      	add	r7, sp, #0
 800f67e:	6078      	str	r0, [r7, #4]
 800f680:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800f682:	2300      	movs	r3, #0
 800f684:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800f686:	687b      	ldr	r3, [r7, #4]
 800f688:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800f68a:	2300      	movs	r3, #0
 800f68c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800f68e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f690:	2b00      	cmp	r3, #0
 800f692:	d10a      	bne.n	800f6aa <xQueueSemaphoreTake+0x32>
	__asm volatile
 800f694:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f698:	f383 8811 	msr	BASEPRI, r3
 800f69c:	f3bf 8f6f 	isb	sy
 800f6a0:	f3bf 8f4f 	dsb	sy
 800f6a4:	623b      	str	r3, [r7, #32]
}
 800f6a6:	bf00      	nop
 800f6a8:	e7fe      	b.n	800f6a8 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800f6aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f6ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f6ae:	2b00      	cmp	r3, #0
 800f6b0:	d00a      	beq.n	800f6c8 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800f6b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f6b6:	f383 8811 	msr	BASEPRI, r3
 800f6ba:	f3bf 8f6f 	isb	sy
 800f6be:	f3bf 8f4f 	dsb	sy
 800f6c2:	61fb      	str	r3, [r7, #28]
}
 800f6c4:	bf00      	nop
 800f6c6:	e7fe      	b.n	800f6c6 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f6c8:	f000 fe98 	bl	80103fc <xTaskGetSchedulerState>
 800f6cc:	4603      	mov	r3, r0
 800f6ce:	2b00      	cmp	r3, #0
 800f6d0:	d102      	bne.n	800f6d8 <xQueueSemaphoreTake+0x60>
 800f6d2:	683b      	ldr	r3, [r7, #0]
 800f6d4:	2b00      	cmp	r3, #0
 800f6d6:	d101      	bne.n	800f6dc <xQueueSemaphoreTake+0x64>
 800f6d8:	2301      	movs	r3, #1
 800f6da:	e000      	b.n	800f6de <xQueueSemaphoreTake+0x66>
 800f6dc:	2300      	movs	r3, #0
 800f6de:	2b00      	cmp	r3, #0
 800f6e0:	d10a      	bne.n	800f6f8 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800f6e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f6e6:	f383 8811 	msr	BASEPRI, r3
 800f6ea:	f3bf 8f6f 	isb	sy
 800f6ee:	f3bf 8f4f 	dsb	sy
 800f6f2:	61bb      	str	r3, [r7, #24]
}
 800f6f4:	bf00      	nop
 800f6f6:	e7fe      	b.n	800f6f6 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800f6f8:	f001 f916 	bl	8010928 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800f6fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f6fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f700:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800f702:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f704:	2b00      	cmp	r3, #0
 800f706:	d024      	beq.n	800f752 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800f708:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f70a:	1e5a      	subs	r2, r3, #1
 800f70c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f70e:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800f710:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f712:	681b      	ldr	r3, [r3, #0]
 800f714:	2b00      	cmp	r3, #0
 800f716:	d104      	bne.n	800f722 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800f718:	f001 f818 	bl	801074c <pvTaskIncrementMutexHeldCount>
 800f71c:	4602      	mov	r2, r0
 800f71e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f720:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f722:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f724:	691b      	ldr	r3, [r3, #16]
 800f726:	2b00      	cmp	r3, #0
 800f728:	d00f      	beq.n	800f74a <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f72a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f72c:	3310      	adds	r3, #16
 800f72e:	4618      	mov	r0, r3
 800f730:	f000 fd1e 	bl	8010170 <xTaskRemoveFromEventList>
 800f734:	4603      	mov	r3, r0
 800f736:	2b00      	cmp	r3, #0
 800f738:	d007      	beq.n	800f74a <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800f73a:	4b54      	ldr	r3, [pc, #336]	; (800f88c <xQueueSemaphoreTake+0x214>)
 800f73c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f740:	601a      	str	r2, [r3, #0]
 800f742:	f3bf 8f4f 	dsb	sy
 800f746:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800f74a:	f001 f91d 	bl	8010988 <vPortExitCritical>
				return pdPASS;
 800f74e:	2301      	movs	r3, #1
 800f750:	e097      	b.n	800f882 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800f752:	683b      	ldr	r3, [r7, #0]
 800f754:	2b00      	cmp	r3, #0
 800f756:	d111      	bne.n	800f77c <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800f758:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f75a:	2b00      	cmp	r3, #0
 800f75c:	d00a      	beq.n	800f774 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800f75e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f762:	f383 8811 	msr	BASEPRI, r3
 800f766:	f3bf 8f6f 	isb	sy
 800f76a:	f3bf 8f4f 	dsb	sy
 800f76e:	617b      	str	r3, [r7, #20]
}
 800f770:	bf00      	nop
 800f772:	e7fe      	b.n	800f772 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800f774:	f001 f908 	bl	8010988 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800f778:	2300      	movs	r3, #0
 800f77a:	e082      	b.n	800f882 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800f77c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f77e:	2b00      	cmp	r3, #0
 800f780:	d106      	bne.n	800f790 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800f782:	f107 030c 	add.w	r3, r7, #12
 800f786:	4618      	mov	r0, r3
 800f788:	f000 fd54 	bl	8010234 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800f78c:	2301      	movs	r3, #1
 800f78e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800f790:	f001 f8fa 	bl	8010988 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800f794:	f000 fb0a 	bl	800fdac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f798:	f001 f8c6 	bl	8010928 <vPortEnterCritical>
 800f79c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f79e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f7a2:	b25b      	sxtb	r3, r3
 800f7a4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f7a8:	d103      	bne.n	800f7b2 <xQueueSemaphoreTake+0x13a>
 800f7aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f7ac:	2200      	movs	r2, #0
 800f7ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f7b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f7b4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f7b8:	b25b      	sxtb	r3, r3
 800f7ba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f7be:	d103      	bne.n	800f7c8 <xQueueSemaphoreTake+0x150>
 800f7c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f7c2:	2200      	movs	r2, #0
 800f7c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f7c8:	f001 f8de 	bl	8010988 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f7cc:	463a      	mov	r2, r7
 800f7ce:	f107 030c 	add.w	r3, r7, #12
 800f7d2:	4611      	mov	r1, r2
 800f7d4:	4618      	mov	r0, r3
 800f7d6:	f000 fd43 	bl	8010260 <xTaskCheckForTimeOut>
 800f7da:	4603      	mov	r3, r0
 800f7dc:	2b00      	cmp	r3, #0
 800f7de:	d132      	bne.n	800f846 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f7e0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f7e2:	f000 f94f 	bl	800fa84 <prvIsQueueEmpty>
 800f7e6:	4603      	mov	r3, r0
 800f7e8:	2b00      	cmp	r3, #0
 800f7ea:	d026      	beq.n	800f83a <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800f7ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f7ee:	681b      	ldr	r3, [r3, #0]
 800f7f0:	2b00      	cmp	r3, #0
 800f7f2:	d109      	bne.n	800f808 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800f7f4:	f001 f898 	bl	8010928 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800f7f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f7fa:	689b      	ldr	r3, [r3, #8]
 800f7fc:	4618      	mov	r0, r3
 800f7fe:	f000 fe1b 	bl	8010438 <xTaskPriorityInherit>
 800f802:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800f804:	f001 f8c0 	bl	8010988 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800f808:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f80a:	3324      	adds	r3, #36	; 0x24
 800f80c:	683a      	ldr	r2, [r7, #0]
 800f80e:	4611      	mov	r1, r2
 800f810:	4618      	mov	r0, r3
 800f812:	f000 fc89 	bl	8010128 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800f816:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f818:	f000 f8e2 	bl	800f9e0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800f81c:	f000 fad4 	bl	800fdc8 <xTaskResumeAll>
 800f820:	4603      	mov	r3, r0
 800f822:	2b00      	cmp	r3, #0
 800f824:	f47f af68 	bne.w	800f6f8 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800f828:	4b18      	ldr	r3, [pc, #96]	; (800f88c <xQueueSemaphoreTake+0x214>)
 800f82a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f82e:	601a      	str	r2, [r3, #0]
 800f830:	f3bf 8f4f 	dsb	sy
 800f834:	f3bf 8f6f 	isb	sy
 800f838:	e75e      	b.n	800f6f8 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800f83a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f83c:	f000 f8d0 	bl	800f9e0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800f840:	f000 fac2 	bl	800fdc8 <xTaskResumeAll>
 800f844:	e758      	b.n	800f6f8 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800f846:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f848:	f000 f8ca 	bl	800f9e0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f84c:	f000 fabc 	bl	800fdc8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f850:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f852:	f000 f917 	bl	800fa84 <prvIsQueueEmpty>
 800f856:	4603      	mov	r3, r0
 800f858:	2b00      	cmp	r3, #0
 800f85a:	f43f af4d 	beq.w	800f6f8 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800f85e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f860:	2b00      	cmp	r3, #0
 800f862:	d00d      	beq.n	800f880 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800f864:	f001 f860 	bl	8010928 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800f868:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f86a:	f000 f811 	bl	800f890 <prvGetDisinheritPriorityAfterTimeout>
 800f86e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800f870:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f872:	689b      	ldr	r3, [r3, #8]
 800f874:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f876:	4618      	mov	r0, r3
 800f878:	f000 feda 	bl	8010630 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800f87c:	f001 f884 	bl	8010988 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800f880:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800f882:	4618      	mov	r0, r3
 800f884:	3738      	adds	r7, #56	; 0x38
 800f886:	46bd      	mov	sp, r7
 800f888:	bd80      	pop	{r7, pc}
 800f88a:	bf00      	nop
 800f88c:	e000ed04 	.word	0xe000ed04

0800f890 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800f890:	b480      	push	{r7}
 800f892:	b085      	sub	sp, #20
 800f894:	af00      	add	r7, sp, #0
 800f896:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800f898:	687b      	ldr	r3, [r7, #4]
 800f89a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f89c:	2b00      	cmp	r3, #0
 800f89e:	d006      	beq.n	800f8ae <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800f8a0:	687b      	ldr	r3, [r7, #4]
 800f8a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f8a4:	681b      	ldr	r3, [r3, #0]
 800f8a6:	f1c3 0307 	rsb	r3, r3, #7
 800f8aa:	60fb      	str	r3, [r7, #12]
 800f8ac:	e001      	b.n	800f8b2 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800f8ae:	2300      	movs	r3, #0
 800f8b0:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800f8b2:	68fb      	ldr	r3, [r7, #12]
	}
 800f8b4:	4618      	mov	r0, r3
 800f8b6:	3714      	adds	r7, #20
 800f8b8:	46bd      	mov	sp, r7
 800f8ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8be:	4770      	bx	lr

0800f8c0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800f8c0:	b580      	push	{r7, lr}
 800f8c2:	b086      	sub	sp, #24
 800f8c4:	af00      	add	r7, sp, #0
 800f8c6:	60f8      	str	r0, [r7, #12]
 800f8c8:	60b9      	str	r1, [r7, #8]
 800f8ca:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800f8cc:	2300      	movs	r3, #0
 800f8ce:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f8d0:	68fb      	ldr	r3, [r7, #12]
 800f8d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f8d4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800f8d6:	68fb      	ldr	r3, [r7, #12]
 800f8d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f8da:	2b00      	cmp	r3, #0
 800f8dc:	d10d      	bne.n	800f8fa <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800f8de:	68fb      	ldr	r3, [r7, #12]
 800f8e0:	681b      	ldr	r3, [r3, #0]
 800f8e2:	2b00      	cmp	r3, #0
 800f8e4:	d14d      	bne.n	800f982 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800f8e6:	68fb      	ldr	r3, [r7, #12]
 800f8e8:	689b      	ldr	r3, [r3, #8]
 800f8ea:	4618      	mov	r0, r3
 800f8ec:	f000 fe1a 	bl	8010524 <xTaskPriorityDisinherit>
 800f8f0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800f8f2:	68fb      	ldr	r3, [r7, #12]
 800f8f4:	2200      	movs	r2, #0
 800f8f6:	609a      	str	r2, [r3, #8]
 800f8f8:	e043      	b.n	800f982 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800f8fa:	687b      	ldr	r3, [r7, #4]
 800f8fc:	2b00      	cmp	r3, #0
 800f8fe:	d119      	bne.n	800f934 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800f900:	68fb      	ldr	r3, [r7, #12]
 800f902:	6858      	ldr	r0, [r3, #4]
 800f904:	68fb      	ldr	r3, [r7, #12]
 800f906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f908:	461a      	mov	r2, r3
 800f90a:	68b9      	ldr	r1, [r7, #8]
 800f90c:	f002 febc 	bl	8012688 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800f910:	68fb      	ldr	r3, [r7, #12]
 800f912:	685a      	ldr	r2, [r3, #4]
 800f914:	68fb      	ldr	r3, [r7, #12]
 800f916:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f918:	441a      	add	r2, r3
 800f91a:	68fb      	ldr	r3, [r7, #12]
 800f91c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800f91e:	68fb      	ldr	r3, [r7, #12]
 800f920:	685a      	ldr	r2, [r3, #4]
 800f922:	68fb      	ldr	r3, [r7, #12]
 800f924:	689b      	ldr	r3, [r3, #8]
 800f926:	429a      	cmp	r2, r3
 800f928:	d32b      	bcc.n	800f982 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800f92a:	68fb      	ldr	r3, [r7, #12]
 800f92c:	681a      	ldr	r2, [r3, #0]
 800f92e:	68fb      	ldr	r3, [r7, #12]
 800f930:	605a      	str	r2, [r3, #4]
 800f932:	e026      	b.n	800f982 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800f934:	68fb      	ldr	r3, [r7, #12]
 800f936:	68d8      	ldr	r0, [r3, #12]
 800f938:	68fb      	ldr	r3, [r7, #12]
 800f93a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f93c:	461a      	mov	r2, r3
 800f93e:	68b9      	ldr	r1, [r7, #8]
 800f940:	f002 fea2 	bl	8012688 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800f944:	68fb      	ldr	r3, [r7, #12]
 800f946:	68da      	ldr	r2, [r3, #12]
 800f948:	68fb      	ldr	r3, [r7, #12]
 800f94a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f94c:	425b      	negs	r3, r3
 800f94e:	441a      	add	r2, r3
 800f950:	68fb      	ldr	r3, [r7, #12]
 800f952:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800f954:	68fb      	ldr	r3, [r7, #12]
 800f956:	68da      	ldr	r2, [r3, #12]
 800f958:	68fb      	ldr	r3, [r7, #12]
 800f95a:	681b      	ldr	r3, [r3, #0]
 800f95c:	429a      	cmp	r2, r3
 800f95e:	d207      	bcs.n	800f970 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800f960:	68fb      	ldr	r3, [r7, #12]
 800f962:	689a      	ldr	r2, [r3, #8]
 800f964:	68fb      	ldr	r3, [r7, #12]
 800f966:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f968:	425b      	negs	r3, r3
 800f96a:	441a      	add	r2, r3
 800f96c:	68fb      	ldr	r3, [r7, #12]
 800f96e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800f970:	687b      	ldr	r3, [r7, #4]
 800f972:	2b02      	cmp	r3, #2
 800f974:	d105      	bne.n	800f982 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f976:	693b      	ldr	r3, [r7, #16]
 800f978:	2b00      	cmp	r3, #0
 800f97a:	d002      	beq.n	800f982 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800f97c:	693b      	ldr	r3, [r7, #16]
 800f97e:	3b01      	subs	r3, #1
 800f980:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800f982:	693b      	ldr	r3, [r7, #16]
 800f984:	1c5a      	adds	r2, r3, #1
 800f986:	68fb      	ldr	r3, [r7, #12]
 800f988:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800f98a:	697b      	ldr	r3, [r7, #20]
}
 800f98c:	4618      	mov	r0, r3
 800f98e:	3718      	adds	r7, #24
 800f990:	46bd      	mov	sp, r7
 800f992:	bd80      	pop	{r7, pc}

0800f994 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800f994:	b580      	push	{r7, lr}
 800f996:	b082      	sub	sp, #8
 800f998:	af00      	add	r7, sp, #0
 800f99a:	6078      	str	r0, [r7, #4]
 800f99c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800f99e:	687b      	ldr	r3, [r7, #4]
 800f9a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f9a2:	2b00      	cmp	r3, #0
 800f9a4:	d018      	beq.n	800f9d8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800f9a6:	687b      	ldr	r3, [r7, #4]
 800f9a8:	68da      	ldr	r2, [r3, #12]
 800f9aa:	687b      	ldr	r3, [r7, #4]
 800f9ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f9ae:	441a      	add	r2, r3
 800f9b0:	687b      	ldr	r3, [r7, #4]
 800f9b2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800f9b4:	687b      	ldr	r3, [r7, #4]
 800f9b6:	68da      	ldr	r2, [r3, #12]
 800f9b8:	687b      	ldr	r3, [r7, #4]
 800f9ba:	689b      	ldr	r3, [r3, #8]
 800f9bc:	429a      	cmp	r2, r3
 800f9be:	d303      	bcc.n	800f9c8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800f9c0:	687b      	ldr	r3, [r7, #4]
 800f9c2:	681a      	ldr	r2, [r3, #0]
 800f9c4:	687b      	ldr	r3, [r7, #4]
 800f9c6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800f9c8:	687b      	ldr	r3, [r7, #4]
 800f9ca:	68d9      	ldr	r1, [r3, #12]
 800f9cc:	687b      	ldr	r3, [r7, #4]
 800f9ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f9d0:	461a      	mov	r2, r3
 800f9d2:	6838      	ldr	r0, [r7, #0]
 800f9d4:	f002 fe58 	bl	8012688 <memcpy>
	}
}
 800f9d8:	bf00      	nop
 800f9da:	3708      	adds	r7, #8
 800f9dc:	46bd      	mov	sp, r7
 800f9de:	bd80      	pop	{r7, pc}

0800f9e0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800f9e0:	b580      	push	{r7, lr}
 800f9e2:	b084      	sub	sp, #16
 800f9e4:	af00      	add	r7, sp, #0
 800f9e6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800f9e8:	f000 ff9e 	bl	8010928 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800f9ec:	687b      	ldr	r3, [r7, #4]
 800f9ee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f9f2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800f9f4:	e011      	b.n	800fa1a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f9f6:	687b      	ldr	r3, [r7, #4]
 800f9f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f9fa:	2b00      	cmp	r3, #0
 800f9fc:	d012      	beq.n	800fa24 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f9fe:	687b      	ldr	r3, [r7, #4]
 800fa00:	3324      	adds	r3, #36	; 0x24
 800fa02:	4618      	mov	r0, r3
 800fa04:	f000 fbb4 	bl	8010170 <xTaskRemoveFromEventList>
 800fa08:	4603      	mov	r3, r0
 800fa0a:	2b00      	cmp	r3, #0
 800fa0c:	d001      	beq.n	800fa12 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800fa0e:	f000 fc89 	bl	8010324 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800fa12:	7bfb      	ldrb	r3, [r7, #15]
 800fa14:	3b01      	subs	r3, #1
 800fa16:	b2db      	uxtb	r3, r3
 800fa18:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800fa1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fa1e:	2b00      	cmp	r3, #0
 800fa20:	dce9      	bgt.n	800f9f6 <prvUnlockQueue+0x16>
 800fa22:	e000      	b.n	800fa26 <prvUnlockQueue+0x46>
					break;
 800fa24:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800fa26:	687b      	ldr	r3, [r7, #4]
 800fa28:	22ff      	movs	r2, #255	; 0xff
 800fa2a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800fa2e:	f000 ffab 	bl	8010988 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800fa32:	f000 ff79 	bl	8010928 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800fa36:	687b      	ldr	r3, [r7, #4]
 800fa38:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800fa3c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800fa3e:	e011      	b.n	800fa64 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800fa40:	687b      	ldr	r3, [r7, #4]
 800fa42:	691b      	ldr	r3, [r3, #16]
 800fa44:	2b00      	cmp	r3, #0
 800fa46:	d012      	beq.n	800fa6e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800fa48:	687b      	ldr	r3, [r7, #4]
 800fa4a:	3310      	adds	r3, #16
 800fa4c:	4618      	mov	r0, r3
 800fa4e:	f000 fb8f 	bl	8010170 <xTaskRemoveFromEventList>
 800fa52:	4603      	mov	r3, r0
 800fa54:	2b00      	cmp	r3, #0
 800fa56:	d001      	beq.n	800fa5c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800fa58:	f000 fc64 	bl	8010324 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800fa5c:	7bbb      	ldrb	r3, [r7, #14]
 800fa5e:	3b01      	subs	r3, #1
 800fa60:	b2db      	uxtb	r3, r3
 800fa62:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800fa64:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800fa68:	2b00      	cmp	r3, #0
 800fa6a:	dce9      	bgt.n	800fa40 <prvUnlockQueue+0x60>
 800fa6c:	e000      	b.n	800fa70 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800fa6e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800fa70:	687b      	ldr	r3, [r7, #4]
 800fa72:	22ff      	movs	r2, #255	; 0xff
 800fa74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800fa78:	f000 ff86 	bl	8010988 <vPortExitCritical>
}
 800fa7c:	bf00      	nop
 800fa7e:	3710      	adds	r7, #16
 800fa80:	46bd      	mov	sp, r7
 800fa82:	bd80      	pop	{r7, pc}

0800fa84 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800fa84:	b580      	push	{r7, lr}
 800fa86:	b084      	sub	sp, #16
 800fa88:	af00      	add	r7, sp, #0
 800fa8a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800fa8c:	f000 ff4c 	bl	8010928 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800fa90:	687b      	ldr	r3, [r7, #4]
 800fa92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fa94:	2b00      	cmp	r3, #0
 800fa96:	d102      	bne.n	800fa9e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800fa98:	2301      	movs	r3, #1
 800fa9a:	60fb      	str	r3, [r7, #12]
 800fa9c:	e001      	b.n	800faa2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800fa9e:	2300      	movs	r3, #0
 800faa0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800faa2:	f000 ff71 	bl	8010988 <vPortExitCritical>

	return xReturn;
 800faa6:	68fb      	ldr	r3, [r7, #12]
}
 800faa8:	4618      	mov	r0, r3
 800faaa:	3710      	adds	r7, #16
 800faac:	46bd      	mov	sp, r7
 800faae:	bd80      	pop	{r7, pc}

0800fab0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800fab0:	b580      	push	{r7, lr}
 800fab2:	b084      	sub	sp, #16
 800fab4:	af00      	add	r7, sp, #0
 800fab6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800fab8:	f000 ff36 	bl	8010928 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800fabc:	687b      	ldr	r3, [r7, #4]
 800fabe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800fac0:	687b      	ldr	r3, [r7, #4]
 800fac2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fac4:	429a      	cmp	r2, r3
 800fac6:	d102      	bne.n	800face <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800fac8:	2301      	movs	r3, #1
 800faca:	60fb      	str	r3, [r7, #12]
 800facc:	e001      	b.n	800fad2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800face:	2300      	movs	r3, #0
 800fad0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800fad2:	f000 ff59 	bl	8010988 <vPortExitCritical>

	return xReturn;
 800fad6:	68fb      	ldr	r3, [r7, #12]
}
 800fad8:	4618      	mov	r0, r3
 800fada:	3710      	adds	r7, #16
 800fadc:	46bd      	mov	sp, r7
 800fade:	bd80      	pop	{r7, pc}

0800fae0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800fae0:	b580      	push	{r7, lr}
 800fae2:	b08c      	sub	sp, #48	; 0x30
 800fae4:	af04      	add	r7, sp, #16
 800fae6:	60f8      	str	r0, [r7, #12]
 800fae8:	60b9      	str	r1, [r7, #8]
 800faea:	603b      	str	r3, [r7, #0]
 800faec:	4613      	mov	r3, r2
 800faee:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800faf0:	88fb      	ldrh	r3, [r7, #6]
 800faf2:	009b      	lsls	r3, r3, #2
 800faf4:	4618      	mov	r0, r3
 800faf6:	f000 ffc9 	bl	8010a8c <pvPortMalloc>
 800fafa:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800fafc:	697b      	ldr	r3, [r7, #20]
 800fafe:	2b00      	cmp	r3, #0
 800fb00:	d00e      	beq.n	800fb20 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800fb02:	2054      	movs	r0, #84	; 0x54
 800fb04:	f000 ffc2 	bl	8010a8c <pvPortMalloc>
 800fb08:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800fb0a:	69fb      	ldr	r3, [r7, #28]
 800fb0c:	2b00      	cmp	r3, #0
 800fb0e:	d003      	beq.n	800fb18 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800fb10:	69fb      	ldr	r3, [r7, #28]
 800fb12:	697a      	ldr	r2, [r7, #20]
 800fb14:	631a      	str	r2, [r3, #48]	; 0x30
 800fb16:	e005      	b.n	800fb24 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800fb18:	6978      	ldr	r0, [r7, #20]
 800fb1a:	f001 f883 	bl	8010c24 <vPortFree>
 800fb1e:	e001      	b.n	800fb24 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800fb20:	2300      	movs	r3, #0
 800fb22:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800fb24:	69fb      	ldr	r3, [r7, #28]
 800fb26:	2b00      	cmp	r3, #0
 800fb28:	d013      	beq.n	800fb52 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800fb2a:	88fa      	ldrh	r2, [r7, #6]
 800fb2c:	2300      	movs	r3, #0
 800fb2e:	9303      	str	r3, [sp, #12]
 800fb30:	69fb      	ldr	r3, [r7, #28]
 800fb32:	9302      	str	r3, [sp, #8]
 800fb34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb36:	9301      	str	r3, [sp, #4]
 800fb38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb3a:	9300      	str	r3, [sp, #0]
 800fb3c:	683b      	ldr	r3, [r7, #0]
 800fb3e:	68b9      	ldr	r1, [r7, #8]
 800fb40:	68f8      	ldr	r0, [r7, #12]
 800fb42:	f000 f80e 	bl	800fb62 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800fb46:	69f8      	ldr	r0, [r7, #28]
 800fb48:	f000 f892 	bl	800fc70 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800fb4c:	2301      	movs	r3, #1
 800fb4e:	61bb      	str	r3, [r7, #24]
 800fb50:	e002      	b.n	800fb58 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800fb52:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800fb56:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800fb58:	69bb      	ldr	r3, [r7, #24]
	}
 800fb5a:	4618      	mov	r0, r3
 800fb5c:	3720      	adds	r7, #32
 800fb5e:	46bd      	mov	sp, r7
 800fb60:	bd80      	pop	{r7, pc}

0800fb62 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800fb62:	b580      	push	{r7, lr}
 800fb64:	b088      	sub	sp, #32
 800fb66:	af00      	add	r7, sp, #0
 800fb68:	60f8      	str	r0, [r7, #12]
 800fb6a:	60b9      	str	r1, [r7, #8]
 800fb6c:	607a      	str	r2, [r7, #4]
 800fb6e:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800fb70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb72:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800fb74:	687b      	ldr	r3, [r7, #4]
 800fb76:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800fb7a:	3b01      	subs	r3, #1
 800fb7c:	009b      	lsls	r3, r3, #2
 800fb7e:	4413      	add	r3, r2
 800fb80:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800fb82:	69bb      	ldr	r3, [r7, #24]
 800fb84:	f023 0307 	bic.w	r3, r3, #7
 800fb88:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800fb8a:	69bb      	ldr	r3, [r7, #24]
 800fb8c:	f003 0307 	and.w	r3, r3, #7
 800fb90:	2b00      	cmp	r3, #0
 800fb92:	d00a      	beq.n	800fbaa <prvInitialiseNewTask+0x48>
	__asm volatile
 800fb94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb98:	f383 8811 	msr	BASEPRI, r3
 800fb9c:	f3bf 8f6f 	isb	sy
 800fba0:	f3bf 8f4f 	dsb	sy
 800fba4:	617b      	str	r3, [r7, #20]
}
 800fba6:	bf00      	nop
 800fba8:	e7fe      	b.n	800fba8 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800fbaa:	68bb      	ldr	r3, [r7, #8]
 800fbac:	2b00      	cmp	r3, #0
 800fbae:	d01f      	beq.n	800fbf0 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800fbb0:	2300      	movs	r3, #0
 800fbb2:	61fb      	str	r3, [r7, #28]
 800fbb4:	e012      	b.n	800fbdc <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800fbb6:	68ba      	ldr	r2, [r7, #8]
 800fbb8:	69fb      	ldr	r3, [r7, #28]
 800fbba:	4413      	add	r3, r2
 800fbbc:	7819      	ldrb	r1, [r3, #0]
 800fbbe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fbc0:	69fb      	ldr	r3, [r7, #28]
 800fbc2:	4413      	add	r3, r2
 800fbc4:	3334      	adds	r3, #52	; 0x34
 800fbc6:	460a      	mov	r2, r1
 800fbc8:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800fbca:	68ba      	ldr	r2, [r7, #8]
 800fbcc:	69fb      	ldr	r3, [r7, #28]
 800fbce:	4413      	add	r3, r2
 800fbd0:	781b      	ldrb	r3, [r3, #0]
 800fbd2:	2b00      	cmp	r3, #0
 800fbd4:	d006      	beq.n	800fbe4 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800fbd6:	69fb      	ldr	r3, [r7, #28]
 800fbd8:	3301      	adds	r3, #1
 800fbda:	61fb      	str	r3, [r7, #28]
 800fbdc:	69fb      	ldr	r3, [r7, #28]
 800fbde:	2b0f      	cmp	r3, #15
 800fbe0:	d9e9      	bls.n	800fbb6 <prvInitialiseNewTask+0x54>
 800fbe2:	e000      	b.n	800fbe6 <prvInitialiseNewTask+0x84>
			{
				break;
 800fbe4:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800fbe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fbe8:	2200      	movs	r2, #0
 800fbea:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800fbee:	e003      	b.n	800fbf8 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800fbf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fbf2:	2200      	movs	r2, #0
 800fbf4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800fbf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fbfa:	2b06      	cmp	r3, #6
 800fbfc:	d901      	bls.n	800fc02 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800fbfe:	2306      	movs	r3, #6
 800fc00:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800fc02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc04:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fc06:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800fc08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc0a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fc0c:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800fc0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc10:	2200      	movs	r2, #0
 800fc12:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800fc14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc16:	3304      	adds	r3, #4
 800fc18:	4618      	mov	r0, r3
 800fc1a:	f7ff f9ca 	bl	800efb2 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800fc1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc20:	3318      	adds	r3, #24
 800fc22:	4618      	mov	r0, r3
 800fc24:	f7ff f9c5 	bl	800efb2 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800fc28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc2a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fc2c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fc2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc30:	f1c3 0207 	rsb	r2, r3, #7
 800fc34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc36:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800fc38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc3a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fc3c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800fc3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc40:	2200      	movs	r2, #0
 800fc42:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800fc44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc46:	2200      	movs	r2, #0
 800fc48:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800fc4c:	683a      	ldr	r2, [r7, #0]
 800fc4e:	68f9      	ldr	r1, [r7, #12]
 800fc50:	69b8      	ldr	r0, [r7, #24]
 800fc52:	f000 fdf5 	bl	8010840 <pxPortInitialiseStack>
 800fc56:	4602      	mov	r2, r0
 800fc58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc5a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800fc5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc5e:	2b00      	cmp	r3, #0
 800fc60:	d002      	beq.n	800fc68 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800fc62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fc66:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800fc68:	bf00      	nop
 800fc6a:	3720      	adds	r7, #32
 800fc6c:	46bd      	mov	sp, r7
 800fc6e:	bd80      	pop	{r7, pc}

0800fc70 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800fc70:	b580      	push	{r7, lr}
 800fc72:	b082      	sub	sp, #8
 800fc74:	af00      	add	r7, sp, #0
 800fc76:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800fc78:	f000 fe56 	bl	8010928 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800fc7c:	4b2a      	ldr	r3, [pc, #168]	; (800fd28 <prvAddNewTaskToReadyList+0xb8>)
 800fc7e:	681b      	ldr	r3, [r3, #0]
 800fc80:	3301      	adds	r3, #1
 800fc82:	4a29      	ldr	r2, [pc, #164]	; (800fd28 <prvAddNewTaskToReadyList+0xb8>)
 800fc84:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800fc86:	4b29      	ldr	r3, [pc, #164]	; (800fd2c <prvAddNewTaskToReadyList+0xbc>)
 800fc88:	681b      	ldr	r3, [r3, #0]
 800fc8a:	2b00      	cmp	r3, #0
 800fc8c:	d109      	bne.n	800fca2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800fc8e:	4a27      	ldr	r2, [pc, #156]	; (800fd2c <prvAddNewTaskToReadyList+0xbc>)
 800fc90:	687b      	ldr	r3, [r7, #4]
 800fc92:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800fc94:	4b24      	ldr	r3, [pc, #144]	; (800fd28 <prvAddNewTaskToReadyList+0xb8>)
 800fc96:	681b      	ldr	r3, [r3, #0]
 800fc98:	2b01      	cmp	r3, #1
 800fc9a:	d110      	bne.n	800fcbe <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800fc9c:	f000 fb4e 	bl	801033c <prvInitialiseTaskLists>
 800fca0:	e00d      	b.n	800fcbe <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800fca2:	4b23      	ldr	r3, [pc, #140]	; (800fd30 <prvAddNewTaskToReadyList+0xc0>)
 800fca4:	681b      	ldr	r3, [r3, #0]
 800fca6:	2b00      	cmp	r3, #0
 800fca8:	d109      	bne.n	800fcbe <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800fcaa:	4b20      	ldr	r3, [pc, #128]	; (800fd2c <prvAddNewTaskToReadyList+0xbc>)
 800fcac:	681b      	ldr	r3, [r3, #0]
 800fcae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fcb0:	687b      	ldr	r3, [r7, #4]
 800fcb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fcb4:	429a      	cmp	r2, r3
 800fcb6:	d802      	bhi.n	800fcbe <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800fcb8:	4a1c      	ldr	r2, [pc, #112]	; (800fd2c <prvAddNewTaskToReadyList+0xbc>)
 800fcba:	687b      	ldr	r3, [r7, #4]
 800fcbc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800fcbe:	4b1d      	ldr	r3, [pc, #116]	; (800fd34 <prvAddNewTaskToReadyList+0xc4>)
 800fcc0:	681b      	ldr	r3, [r3, #0]
 800fcc2:	3301      	adds	r3, #1
 800fcc4:	4a1b      	ldr	r2, [pc, #108]	; (800fd34 <prvAddNewTaskToReadyList+0xc4>)
 800fcc6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800fcc8:	687b      	ldr	r3, [r7, #4]
 800fcca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fccc:	2201      	movs	r2, #1
 800fcce:	409a      	lsls	r2, r3
 800fcd0:	4b19      	ldr	r3, [pc, #100]	; (800fd38 <prvAddNewTaskToReadyList+0xc8>)
 800fcd2:	681b      	ldr	r3, [r3, #0]
 800fcd4:	4313      	orrs	r3, r2
 800fcd6:	4a18      	ldr	r2, [pc, #96]	; (800fd38 <prvAddNewTaskToReadyList+0xc8>)
 800fcd8:	6013      	str	r3, [r2, #0]
 800fcda:	687b      	ldr	r3, [r7, #4]
 800fcdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fcde:	4613      	mov	r3, r2
 800fce0:	009b      	lsls	r3, r3, #2
 800fce2:	4413      	add	r3, r2
 800fce4:	009b      	lsls	r3, r3, #2
 800fce6:	4a15      	ldr	r2, [pc, #84]	; (800fd3c <prvAddNewTaskToReadyList+0xcc>)
 800fce8:	441a      	add	r2, r3
 800fcea:	687b      	ldr	r3, [r7, #4]
 800fcec:	3304      	adds	r3, #4
 800fcee:	4619      	mov	r1, r3
 800fcf0:	4610      	mov	r0, r2
 800fcf2:	f7ff f96b 	bl	800efcc <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800fcf6:	f000 fe47 	bl	8010988 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800fcfa:	4b0d      	ldr	r3, [pc, #52]	; (800fd30 <prvAddNewTaskToReadyList+0xc0>)
 800fcfc:	681b      	ldr	r3, [r3, #0]
 800fcfe:	2b00      	cmp	r3, #0
 800fd00:	d00e      	beq.n	800fd20 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800fd02:	4b0a      	ldr	r3, [pc, #40]	; (800fd2c <prvAddNewTaskToReadyList+0xbc>)
 800fd04:	681b      	ldr	r3, [r3, #0]
 800fd06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fd08:	687b      	ldr	r3, [r7, #4]
 800fd0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fd0c:	429a      	cmp	r2, r3
 800fd0e:	d207      	bcs.n	800fd20 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800fd10:	4b0b      	ldr	r3, [pc, #44]	; (800fd40 <prvAddNewTaskToReadyList+0xd0>)
 800fd12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fd16:	601a      	str	r2, [r3, #0]
 800fd18:	f3bf 8f4f 	dsb	sy
 800fd1c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800fd20:	bf00      	nop
 800fd22:	3708      	adds	r7, #8
 800fd24:	46bd      	mov	sp, r7
 800fd26:	bd80      	pop	{r7, pc}
 800fd28:	20000a54 	.word	0x20000a54
 800fd2c:	20000958 	.word	0x20000958
 800fd30:	20000a60 	.word	0x20000a60
 800fd34:	20000a70 	.word	0x20000a70
 800fd38:	20000a5c 	.word	0x20000a5c
 800fd3c:	2000095c 	.word	0x2000095c
 800fd40:	e000ed04 	.word	0xe000ed04

0800fd44 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800fd44:	b580      	push	{r7, lr}
 800fd46:	b084      	sub	sp, #16
 800fd48:	af00      	add	r7, sp, #0
 800fd4a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800fd4c:	2300      	movs	r3, #0
 800fd4e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800fd50:	687b      	ldr	r3, [r7, #4]
 800fd52:	2b00      	cmp	r3, #0
 800fd54:	d017      	beq.n	800fd86 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800fd56:	4b13      	ldr	r3, [pc, #76]	; (800fda4 <vTaskDelay+0x60>)
 800fd58:	681b      	ldr	r3, [r3, #0]
 800fd5a:	2b00      	cmp	r3, #0
 800fd5c:	d00a      	beq.n	800fd74 <vTaskDelay+0x30>
	__asm volatile
 800fd5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd62:	f383 8811 	msr	BASEPRI, r3
 800fd66:	f3bf 8f6f 	isb	sy
 800fd6a:	f3bf 8f4f 	dsb	sy
 800fd6e:	60bb      	str	r3, [r7, #8]
}
 800fd70:	bf00      	nop
 800fd72:	e7fe      	b.n	800fd72 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800fd74:	f000 f81a 	bl	800fdac <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800fd78:	2100      	movs	r1, #0
 800fd7a:	6878      	ldr	r0, [r7, #4]
 800fd7c:	f000 fcfa 	bl	8010774 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800fd80:	f000 f822 	bl	800fdc8 <xTaskResumeAll>
 800fd84:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800fd86:	68fb      	ldr	r3, [r7, #12]
 800fd88:	2b00      	cmp	r3, #0
 800fd8a:	d107      	bne.n	800fd9c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800fd8c:	4b06      	ldr	r3, [pc, #24]	; (800fda8 <vTaskDelay+0x64>)
 800fd8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fd92:	601a      	str	r2, [r3, #0]
 800fd94:	f3bf 8f4f 	dsb	sy
 800fd98:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800fd9c:	bf00      	nop
 800fd9e:	3710      	adds	r7, #16
 800fda0:	46bd      	mov	sp, r7
 800fda2:	bd80      	pop	{r7, pc}
 800fda4:	20000a78 	.word	0x20000a78
 800fda8:	e000ed04 	.word	0xe000ed04

0800fdac <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800fdac:	b480      	push	{r7}
 800fdae:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800fdb0:	4b04      	ldr	r3, [pc, #16]	; (800fdc4 <vTaskSuspendAll+0x18>)
 800fdb2:	681b      	ldr	r3, [r3, #0]
 800fdb4:	3301      	adds	r3, #1
 800fdb6:	4a03      	ldr	r2, [pc, #12]	; (800fdc4 <vTaskSuspendAll+0x18>)
 800fdb8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800fdba:	bf00      	nop
 800fdbc:	46bd      	mov	sp, r7
 800fdbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdc2:	4770      	bx	lr
 800fdc4:	20000a78 	.word	0x20000a78

0800fdc8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800fdc8:	b580      	push	{r7, lr}
 800fdca:	b084      	sub	sp, #16
 800fdcc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800fdce:	2300      	movs	r3, #0
 800fdd0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800fdd2:	2300      	movs	r3, #0
 800fdd4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800fdd6:	4b41      	ldr	r3, [pc, #260]	; (800fedc <xTaskResumeAll+0x114>)
 800fdd8:	681b      	ldr	r3, [r3, #0]
 800fdda:	2b00      	cmp	r3, #0
 800fddc:	d10a      	bne.n	800fdf4 <xTaskResumeAll+0x2c>
	__asm volatile
 800fdde:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fde2:	f383 8811 	msr	BASEPRI, r3
 800fde6:	f3bf 8f6f 	isb	sy
 800fdea:	f3bf 8f4f 	dsb	sy
 800fdee:	603b      	str	r3, [r7, #0]
}
 800fdf0:	bf00      	nop
 800fdf2:	e7fe      	b.n	800fdf2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800fdf4:	f000 fd98 	bl	8010928 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800fdf8:	4b38      	ldr	r3, [pc, #224]	; (800fedc <xTaskResumeAll+0x114>)
 800fdfa:	681b      	ldr	r3, [r3, #0]
 800fdfc:	3b01      	subs	r3, #1
 800fdfe:	4a37      	ldr	r2, [pc, #220]	; (800fedc <xTaskResumeAll+0x114>)
 800fe00:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fe02:	4b36      	ldr	r3, [pc, #216]	; (800fedc <xTaskResumeAll+0x114>)
 800fe04:	681b      	ldr	r3, [r3, #0]
 800fe06:	2b00      	cmp	r3, #0
 800fe08:	d161      	bne.n	800fece <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800fe0a:	4b35      	ldr	r3, [pc, #212]	; (800fee0 <xTaskResumeAll+0x118>)
 800fe0c:	681b      	ldr	r3, [r3, #0]
 800fe0e:	2b00      	cmp	r3, #0
 800fe10:	d05d      	beq.n	800fece <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800fe12:	e02e      	b.n	800fe72 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fe14:	4b33      	ldr	r3, [pc, #204]	; (800fee4 <xTaskResumeAll+0x11c>)
 800fe16:	68db      	ldr	r3, [r3, #12]
 800fe18:	68db      	ldr	r3, [r3, #12]
 800fe1a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800fe1c:	68fb      	ldr	r3, [r7, #12]
 800fe1e:	3318      	adds	r3, #24
 800fe20:	4618      	mov	r0, r3
 800fe22:	f7ff f930 	bl	800f086 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800fe26:	68fb      	ldr	r3, [r7, #12]
 800fe28:	3304      	adds	r3, #4
 800fe2a:	4618      	mov	r0, r3
 800fe2c:	f7ff f92b 	bl	800f086 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800fe30:	68fb      	ldr	r3, [r7, #12]
 800fe32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fe34:	2201      	movs	r2, #1
 800fe36:	409a      	lsls	r2, r3
 800fe38:	4b2b      	ldr	r3, [pc, #172]	; (800fee8 <xTaskResumeAll+0x120>)
 800fe3a:	681b      	ldr	r3, [r3, #0]
 800fe3c:	4313      	orrs	r3, r2
 800fe3e:	4a2a      	ldr	r2, [pc, #168]	; (800fee8 <xTaskResumeAll+0x120>)
 800fe40:	6013      	str	r3, [r2, #0]
 800fe42:	68fb      	ldr	r3, [r7, #12]
 800fe44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fe46:	4613      	mov	r3, r2
 800fe48:	009b      	lsls	r3, r3, #2
 800fe4a:	4413      	add	r3, r2
 800fe4c:	009b      	lsls	r3, r3, #2
 800fe4e:	4a27      	ldr	r2, [pc, #156]	; (800feec <xTaskResumeAll+0x124>)
 800fe50:	441a      	add	r2, r3
 800fe52:	68fb      	ldr	r3, [r7, #12]
 800fe54:	3304      	adds	r3, #4
 800fe56:	4619      	mov	r1, r3
 800fe58:	4610      	mov	r0, r2
 800fe5a:	f7ff f8b7 	bl	800efcc <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800fe5e:	68fb      	ldr	r3, [r7, #12]
 800fe60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fe62:	4b23      	ldr	r3, [pc, #140]	; (800fef0 <xTaskResumeAll+0x128>)
 800fe64:	681b      	ldr	r3, [r3, #0]
 800fe66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fe68:	429a      	cmp	r2, r3
 800fe6a:	d302      	bcc.n	800fe72 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800fe6c:	4b21      	ldr	r3, [pc, #132]	; (800fef4 <xTaskResumeAll+0x12c>)
 800fe6e:	2201      	movs	r2, #1
 800fe70:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800fe72:	4b1c      	ldr	r3, [pc, #112]	; (800fee4 <xTaskResumeAll+0x11c>)
 800fe74:	681b      	ldr	r3, [r3, #0]
 800fe76:	2b00      	cmp	r3, #0
 800fe78:	d1cc      	bne.n	800fe14 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800fe7a:	68fb      	ldr	r3, [r7, #12]
 800fe7c:	2b00      	cmp	r3, #0
 800fe7e:	d001      	beq.n	800fe84 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800fe80:	f000 fa9c 	bl	80103bc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800fe84:	4b1c      	ldr	r3, [pc, #112]	; (800fef8 <xTaskResumeAll+0x130>)
 800fe86:	681b      	ldr	r3, [r3, #0]
 800fe88:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800fe8a:	687b      	ldr	r3, [r7, #4]
 800fe8c:	2b00      	cmp	r3, #0
 800fe8e:	d010      	beq.n	800feb2 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800fe90:	f000 f836 	bl	800ff00 <xTaskIncrementTick>
 800fe94:	4603      	mov	r3, r0
 800fe96:	2b00      	cmp	r3, #0
 800fe98:	d002      	beq.n	800fea0 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800fe9a:	4b16      	ldr	r3, [pc, #88]	; (800fef4 <xTaskResumeAll+0x12c>)
 800fe9c:	2201      	movs	r2, #1
 800fe9e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800fea0:	687b      	ldr	r3, [r7, #4]
 800fea2:	3b01      	subs	r3, #1
 800fea4:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800fea6:	687b      	ldr	r3, [r7, #4]
 800fea8:	2b00      	cmp	r3, #0
 800feaa:	d1f1      	bne.n	800fe90 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800feac:	4b12      	ldr	r3, [pc, #72]	; (800fef8 <xTaskResumeAll+0x130>)
 800feae:	2200      	movs	r2, #0
 800feb0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800feb2:	4b10      	ldr	r3, [pc, #64]	; (800fef4 <xTaskResumeAll+0x12c>)
 800feb4:	681b      	ldr	r3, [r3, #0]
 800feb6:	2b00      	cmp	r3, #0
 800feb8:	d009      	beq.n	800fece <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800feba:	2301      	movs	r3, #1
 800febc:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800febe:	4b0f      	ldr	r3, [pc, #60]	; (800fefc <xTaskResumeAll+0x134>)
 800fec0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fec4:	601a      	str	r2, [r3, #0]
 800fec6:	f3bf 8f4f 	dsb	sy
 800feca:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800fece:	f000 fd5b 	bl	8010988 <vPortExitCritical>

	return xAlreadyYielded;
 800fed2:	68bb      	ldr	r3, [r7, #8]
}
 800fed4:	4618      	mov	r0, r3
 800fed6:	3710      	adds	r7, #16
 800fed8:	46bd      	mov	sp, r7
 800feda:	bd80      	pop	{r7, pc}
 800fedc:	20000a78 	.word	0x20000a78
 800fee0:	20000a54 	.word	0x20000a54
 800fee4:	20000a18 	.word	0x20000a18
 800fee8:	20000a5c 	.word	0x20000a5c
 800feec:	2000095c 	.word	0x2000095c
 800fef0:	20000958 	.word	0x20000958
 800fef4:	20000a68 	.word	0x20000a68
 800fef8:	20000a64 	.word	0x20000a64
 800fefc:	e000ed04 	.word	0xe000ed04

0800ff00 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800ff00:	b580      	push	{r7, lr}
 800ff02:	b086      	sub	sp, #24
 800ff04:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800ff06:	2300      	movs	r3, #0
 800ff08:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ff0a:	4b4e      	ldr	r3, [pc, #312]	; (8010044 <xTaskIncrementTick+0x144>)
 800ff0c:	681b      	ldr	r3, [r3, #0]
 800ff0e:	2b00      	cmp	r3, #0
 800ff10:	f040 808e 	bne.w	8010030 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800ff14:	4b4c      	ldr	r3, [pc, #304]	; (8010048 <xTaskIncrementTick+0x148>)
 800ff16:	681b      	ldr	r3, [r3, #0]
 800ff18:	3301      	adds	r3, #1
 800ff1a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800ff1c:	4a4a      	ldr	r2, [pc, #296]	; (8010048 <xTaskIncrementTick+0x148>)
 800ff1e:	693b      	ldr	r3, [r7, #16]
 800ff20:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800ff22:	693b      	ldr	r3, [r7, #16]
 800ff24:	2b00      	cmp	r3, #0
 800ff26:	d120      	bne.n	800ff6a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800ff28:	4b48      	ldr	r3, [pc, #288]	; (801004c <xTaskIncrementTick+0x14c>)
 800ff2a:	681b      	ldr	r3, [r3, #0]
 800ff2c:	681b      	ldr	r3, [r3, #0]
 800ff2e:	2b00      	cmp	r3, #0
 800ff30:	d00a      	beq.n	800ff48 <xTaskIncrementTick+0x48>
	__asm volatile
 800ff32:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff36:	f383 8811 	msr	BASEPRI, r3
 800ff3a:	f3bf 8f6f 	isb	sy
 800ff3e:	f3bf 8f4f 	dsb	sy
 800ff42:	603b      	str	r3, [r7, #0]
}
 800ff44:	bf00      	nop
 800ff46:	e7fe      	b.n	800ff46 <xTaskIncrementTick+0x46>
 800ff48:	4b40      	ldr	r3, [pc, #256]	; (801004c <xTaskIncrementTick+0x14c>)
 800ff4a:	681b      	ldr	r3, [r3, #0]
 800ff4c:	60fb      	str	r3, [r7, #12]
 800ff4e:	4b40      	ldr	r3, [pc, #256]	; (8010050 <xTaskIncrementTick+0x150>)
 800ff50:	681b      	ldr	r3, [r3, #0]
 800ff52:	4a3e      	ldr	r2, [pc, #248]	; (801004c <xTaskIncrementTick+0x14c>)
 800ff54:	6013      	str	r3, [r2, #0]
 800ff56:	4a3e      	ldr	r2, [pc, #248]	; (8010050 <xTaskIncrementTick+0x150>)
 800ff58:	68fb      	ldr	r3, [r7, #12]
 800ff5a:	6013      	str	r3, [r2, #0]
 800ff5c:	4b3d      	ldr	r3, [pc, #244]	; (8010054 <xTaskIncrementTick+0x154>)
 800ff5e:	681b      	ldr	r3, [r3, #0]
 800ff60:	3301      	adds	r3, #1
 800ff62:	4a3c      	ldr	r2, [pc, #240]	; (8010054 <xTaskIncrementTick+0x154>)
 800ff64:	6013      	str	r3, [r2, #0]
 800ff66:	f000 fa29 	bl	80103bc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800ff6a:	4b3b      	ldr	r3, [pc, #236]	; (8010058 <xTaskIncrementTick+0x158>)
 800ff6c:	681b      	ldr	r3, [r3, #0]
 800ff6e:	693a      	ldr	r2, [r7, #16]
 800ff70:	429a      	cmp	r2, r3
 800ff72:	d348      	bcc.n	8010006 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ff74:	4b35      	ldr	r3, [pc, #212]	; (801004c <xTaskIncrementTick+0x14c>)
 800ff76:	681b      	ldr	r3, [r3, #0]
 800ff78:	681b      	ldr	r3, [r3, #0]
 800ff7a:	2b00      	cmp	r3, #0
 800ff7c:	d104      	bne.n	800ff88 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ff7e:	4b36      	ldr	r3, [pc, #216]	; (8010058 <xTaskIncrementTick+0x158>)
 800ff80:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ff84:	601a      	str	r2, [r3, #0]
					break;
 800ff86:	e03e      	b.n	8010006 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ff88:	4b30      	ldr	r3, [pc, #192]	; (801004c <xTaskIncrementTick+0x14c>)
 800ff8a:	681b      	ldr	r3, [r3, #0]
 800ff8c:	68db      	ldr	r3, [r3, #12]
 800ff8e:	68db      	ldr	r3, [r3, #12]
 800ff90:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800ff92:	68bb      	ldr	r3, [r7, #8]
 800ff94:	685b      	ldr	r3, [r3, #4]
 800ff96:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800ff98:	693a      	ldr	r2, [r7, #16]
 800ff9a:	687b      	ldr	r3, [r7, #4]
 800ff9c:	429a      	cmp	r2, r3
 800ff9e:	d203      	bcs.n	800ffa8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800ffa0:	4a2d      	ldr	r2, [pc, #180]	; (8010058 <xTaskIncrementTick+0x158>)
 800ffa2:	687b      	ldr	r3, [r7, #4]
 800ffa4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800ffa6:	e02e      	b.n	8010006 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ffa8:	68bb      	ldr	r3, [r7, #8]
 800ffaa:	3304      	adds	r3, #4
 800ffac:	4618      	mov	r0, r3
 800ffae:	f7ff f86a 	bl	800f086 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800ffb2:	68bb      	ldr	r3, [r7, #8]
 800ffb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ffb6:	2b00      	cmp	r3, #0
 800ffb8:	d004      	beq.n	800ffc4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ffba:	68bb      	ldr	r3, [r7, #8]
 800ffbc:	3318      	adds	r3, #24
 800ffbe:	4618      	mov	r0, r3
 800ffc0:	f7ff f861 	bl	800f086 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800ffc4:	68bb      	ldr	r3, [r7, #8]
 800ffc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ffc8:	2201      	movs	r2, #1
 800ffca:	409a      	lsls	r2, r3
 800ffcc:	4b23      	ldr	r3, [pc, #140]	; (801005c <xTaskIncrementTick+0x15c>)
 800ffce:	681b      	ldr	r3, [r3, #0]
 800ffd0:	4313      	orrs	r3, r2
 800ffd2:	4a22      	ldr	r2, [pc, #136]	; (801005c <xTaskIncrementTick+0x15c>)
 800ffd4:	6013      	str	r3, [r2, #0]
 800ffd6:	68bb      	ldr	r3, [r7, #8]
 800ffd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ffda:	4613      	mov	r3, r2
 800ffdc:	009b      	lsls	r3, r3, #2
 800ffde:	4413      	add	r3, r2
 800ffe0:	009b      	lsls	r3, r3, #2
 800ffe2:	4a1f      	ldr	r2, [pc, #124]	; (8010060 <xTaskIncrementTick+0x160>)
 800ffe4:	441a      	add	r2, r3
 800ffe6:	68bb      	ldr	r3, [r7, #8]
 800ffe8:	3304      	adds	r3, #4
 800ffea:	4619      	mov	r1, r3
 800ffec:	4610      	mov	r0, r2
 800ffee:	f7fe ffed 	bl	800efcc <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800fff2:	68bb      	ldr	r3, [r7, #8]
 800fff4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fff6:	4b1b      	ldr	r3, [pc, #108]	; (8010064 <xTaskIncrementTick+0x164>)
 800fff8:	681b      	ldr	r3, [r3, #0]
 800fffa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fffc:	429a      	cmp	r2, r3
 800fffe:	d3b9      	bcc.n	800ff74 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8010000:	2301      	movs	r3, #1
 8010002:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010004:	e7b6      	b.n	800ff74 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8010006:	4b17      	ldr	r3, [pc, #92]	; (8010064 <xTaskIncrementTick+0x164>)
 8010008:	681b      	ldr	r3, [r3, #0]
 801000a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801000c:	4914      	ldr	r1, [pc, #80]	; (8010060 <xTaskIncrementTick+0x160>)
 801000e:	4613      	mov	r3, r2
 8010010:	009b      	lsls	r3, r3, #2
 8010012:	4413      	add	r3, r2
 8010014:	009b      	lsls	r3, r3, #2
 8010016:	440b      	add	r3, r1
 8010018:	681b      	ldr	r3, [r3, #0]
 801001a:	2b01      	cmp	r3, #1
 801001c:	d901      	bls.n	8010022 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 801001e:	2301      	movs	r3, #1
 8010020:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8010022:	4b11      	ldr	r3, [pc, #68]	; (8010068 <xTaskIncrementTick+0x168>)
 8010024:	681b      	ldr	r3, [r3, #0]
 8010026:	2b00      	cmp	r3, #0
 8010028:	d007      	beq.n	801003a <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 801002a:	2301      	movs	r3, #1
 801002c:	617b      	str	r3, [r7, #20]
 801002e:	e004      	b.n	801003a <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8010030:	4b0e      	ldr	r3, [pc, #56]	; (801006c <xTaskIncrementTick+0x16c>)
 8010032:	681b      	ldr	r3, [r3, #0]
 8010034:	3301      	adds	r3, #1
 8010036:	4a0d      	ldr	r2, [pc, #52]	; (801006c <xTaskIncrementTick+0x16c>)
 8010038:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 801003a:	697b      	ldr	r3, [r7, #20]
}
 801003c:	4618      	mov	r0, r3
 801003e:	3718      	adds	r7, #24
 8010040:	46bd      	mov	sp, r7
 8010042:	bd80      	pop	{r7, pc}
 8010044:	20000a78 	.word	0x20000a78
 8010048:	20000a58 	.word	0x20000a58
 801004c:	20000a10 	.word	0x20000a10
 8010050:	20000a14 	.word	0x20000a14
 8010054:	20000a6c 	.word	0x20000a6c
 8010058:	20000a74 	.word	0x20000a74
 801005c:	20000a5c 	.word	0x20000a5c
 8010060:	2000095c 	.word	0x2000095c
 8010064:	20000958 	.word	0x20000958
 8010068:	20000a68 	.word	0x20000a68
 801006c:	20000a64 	.word	0x20000a64

08010070 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8010070:	b480      	push	{r7}
 8010072:	b087      	sub	sp, #28
 8010074:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8010076:	4b27      	ldr	r3, [pc, #156]	; (8010114 <vTaskSwitchContext+0xa4>)
 8010078:	681b      	ldr	r3, [r3, #0]
 801007a:	2b00      	cmp	r3, #0
 801007c:	d003      	beq.n	8010086 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 801007e:	4b26      	ldr	r3, [pc, #152]	; (8010118 <vTaskSwitchContext+0xa8>)
 8010080:	2201      	movs	r2, #1
 8010082:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8010084:	e03f      	b.n	8010106 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8010086:	4b24      	ldr	r3, [pc, #144]	; (8010118 <vTaskSwitchContext+0xa8>)
 8010088:	2200      	movs	r2, #0
 801008a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801008c:	4b23      	ldr	r3, [pc, #140]	; (801011c <vTaskSwitchContext+0xac>)
 801008e:	681b      	ldr	r3, [r3, #0]
 8010090:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8010092:	68fb      	ldr	r3, [r7, #12]
 8010094:	fab3 f383 	clz	r3, r3
 8010098:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 801009a:	7afb      	ldrb	r3, [r7, #11]
 801009c:	f1c3 031f 	rsb	r3, r3, #31
 80100a0:	617b      	str	r3, [r7, #20]
 80100a2:	491f      	ldr	r1, [pc, #124]	; (8010120 <vTaskSwitchContext+0xb0>)
 80100a4:	697a      	ldr	r2, [r7, #20]
 80100a6:	4613      	mov	r3, r2
 80100a8:	009b      	lsls	r3, r3, #2
 80100aa:	4413      	add	r3, r2
 80100ac:	009b      	lsls	r3, r3, #2
 80100ae:	440b      	add	r3, r1
 80100b0:	681b      	ldr	r3, [r3, #0]
 80100b2:	2b00      	cmp	r3, #0
 80100b4:	d10a      	bne.n	80100cc <vTaskSwitchContext+0x5c>
	__asm volatile
 80100b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80100ba:	f383 8811 	msr	BASEPRI, r3
 80100be:	f3bf 8f6f 	isb	sy
 80100c2:	f3bf 8f4f 	dsb	sy
 80100c6:	607b      	str	r3, [r7, #4]
}
 80100c8:	bf00      	nop
 80100ca:	e7fe      	b.n	80100ca <vTaskSwitchContext+0x5a>
 80100cc:	697a      	ldr	r2, [r7, #20]
 80100ce:	4613      	mov	r3, r2
 80100d0:	009b      	lsls	r3, r3, #2
 80100d2:	4413      	add	r3, r2
 80100d4:	009b      	lsls	r3, r3, #2
 80100d6:	4a12      	ldr	r2, [pc, #72]	; (8010120 <vTaskSwitchContext+0xb0>)
 80100d8:	4413      	add	r3, r2
 80100da:	613b      	str	r3, [r7, #16]
 80100dc:	693b      	ldr	r3, [r7, #16]
 80100de:	685b      	ldr	r3, [r3, #4]
 80100e0:	685a      	ldr	r2, [r3, #4]
 80100e2:	693b      	ldr	r3, [r7, #16]
 80100e4:	605a      	str	r2, [r3, #4]
 80100e6:	693b      	ldr	r3, [r7, #16]
 80100e8:	685a      	ldr	r2, [r3, #4]
 80100ea:	693b      	ldr	r3, [r7, #16]
 80100ec:	3308      	adds	r3, #8
 80100ee:	429a      	cmp	r2, r3
 80100f0:	d104      	bne.n	80100fc <vTaskSwitchContext+0x8c>
 80100f2:	693b      	ldr	r3, [r7, #16]
 80100f4:	685b      	ldr	r3, [r3, #4]
 80100f6:	685a      	ldr	r2, [r3, #4]
 80100f8:	693b      	ldr	r3, [r7, #16]
 80100fa:	605a      	str	r2, [r3, #4]
 80100fc:	693b      	ldr	r3, [r7, #16]
 80100fe:	685b      	ldr	r3, [r3, #4]
 8010100:	68db      	ldr	r3, [r3, #12]
 8010102:	4a08      	ldr	r2, [pc, #32]	; (8010124 <vTaskSwitchContext+0xb4>)
 8010104:	6013      	str	r3, [r2, #0]
}
 8010106:	bf00      	nop
 8010108:	371c      	adds	r7, #28
 801010a:	46bd      	mov	sp, r7
 801010c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010110:	4770      	bx	lr
 8010112:	bf00      	nop
 8010114:	20000a78 	.word	0x20000a78
 8010118:	20000a68 	.word	0x20000a68
 801011c:	20000a5c 	.word	0x20000a5c
 8010120:	2000095c 	.word	0x2000095c
 8010124:	20000958 	.word	0x20000958

08010128 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8010128:	b580      	push	{r7, lr}
 801012a:	b084      	sub	sp, #16
 801012c:	af00      	add	r7, sp, #0
 801012e:	6078      	str	r0, [r7, #4]
 8010130:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8010132:	687b      	ldr	r3, [r7, #4]
 8010134:	2b00      	cmp	r3, #0
 8010136:	d10a      	bne.n	801014e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8010138:	f04f 0350 	mov.w	r3, #80	; 0x50
 801013c:	f383 8811 	msr	BASEPRI, r3
 8010140:	f3bf 8f6f 	isb	sy
 8010144:	f3bf 8f4f 	dsb	sy
 8010148:	60fb      	str	r3, [r7, #12]
}
 801014a:	bf00      	nop
 801014c:	e7fe      	b.n	801014c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801014e:	4b07      	ldr	r3, [pc, #28]	; (801016c <vTaskPlaceOnEventList+0x44>)
 8010150:	681b      	ldr	r3, [r3, #0]
 8010152:	3318      	adds	r3, #24
 8010154:	4619      	mov	r1, r3
 8010156:	6878      	ldr	r0, [r7, #4]
 8010158:	f7fe ff5c 	bl	800f014 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 801015c:	2101      	movs	r1, #1
 801015e:	6838      	ldr	r0, [r7, #0]
 8010160:	f000 fb08 	bl	8010774 <prvAddCurrentTaskToDelayedList>
}
 8010164:	bf00      	nop
 8010166:	3710      	adds	r7, #16
 8010168:	46bd      	mov	sp, r7
 801016a:	bd80      	pop	{r7, pc}
 801016c:	20000958 	.word	0x20000958

08010170 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8010170:	b580      	push	{r7, lr}
 8010172:	b086      	sub	sp, #24
 8010174:	af00      	add	r7, sp, #0
 8010176:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010178:	687b      	ldr	r3, [r7, #4]
 801017a:	68db      	ldr	r3, [r3, #12]
 801017c:	68db      	ldr	r3, [r3, #12]
 801017e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8010180:	693b      	ldr	r3, [r7, #16]
 8010182:	2b00      	cmp	r3, #0
 8010184:	d10a      	bne.n	801019c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8010186:	f04f 0350 	mov.w	r3, #80	; 0x50
 801018a:	f383 8811 	msr	BASEPRI, r3
 801018e:	f3bf 8f6f 	isb	sy
 8010192:	f3bf 8f4f 	dsb	sy
 8010196:	60fb      	str	r3, [r7, #12]
}
 8010198:	bf00      	nop
 801019a:	e7fe      	b.n	801019a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 801019c:	693b      	ldr	r3, [r7, #16]
 801019e:	3318      	adds	r3, #24
 80101a0:	4618      	mov	r0, r3
 80101a2:	f7fe ff70 	bl	800f086 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80101a6:	4b1d      	ldr	r3, [pc, #116]	; (801021c <xTaskRemoveFromEventList+0xac>)
 80101a8:	681b      	ldr	r3, [r3, #0]
 80101aa:	2b00      	cmp	r3, #0
 80101ac:	d11c      	bne.n	80101e8 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80101ae:	693b      	ldr	r3, [r7, #16]
 80101b0:	3304      	adds	r3, #4
 80101b2:	4618      	mov	r0, r3
 80101b4:	f7fe ff67 	bl	800f086 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80101b8:	693b      	ldr	r3, [r7, #16]
 80101ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80101bc:	2201      	movs	r2, #1
 80101be:	409a      	lsls	r2, r3
 80101c0:	4b17      	ldr	r3, [pc, #92]	; (8010220 <xTaskRemoveFromEventList+0xb0>)
 80101c2:	681b      	ldr	r3, [r3, #0]
 80101c4:	4313      	orrs	r3, r2
 80101c6:	4a16      	ldr	r2, [pc, #88]	; (8010220 <xTaskRemoveFromEventList+0xb0>)
 80101c8:	6013      	str	r3, [r2, #0]
 80101ca:	693b      	ldr	r3, [r7, #16]
 80101cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80101ce:	4613      	mov	r3, r2
 80101d0:	009b      	lsls	r3, r3, #2
 80101d2:	4413      	add	r3, r2
 80101d4:	009b      	lsls	r3, r3, #2
 80101d6:	4a13      	ldr	r2, [pc, #76]	; (8010224 <xTaskRemoveFromEventList+0xb4>)
 80101d8:	441a      	add	r2, r3
 80101da:	693b      	ldr	r3, [r7, #16]
 80101dc:	3304      	adds	r3, #4
 80101de:	4619      	mov	r1, r3
 80101e0:	4610      	mov	r0, r2
 80101e2:	f7fe fef3 	bl	800efcc <vListInsertEnd>
 80101e6:	e005      	b.n	80101f4 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80101e8:	693b      	ldr	r3, [r7, #16]
 80101ea:	3318      	adds	r3, #24
 80101ec:	4619      	mov	r1, r3
 80101ee:	480e      	ldr	r0, [pc, #56]	; (8010228 <xTaskRemoveFromEventList+0xb8>)
 80101f0:	f7fe feec 	bl	800efcc <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80101f4:	693b      	ldr	r3, [r7, #16]
 80101f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80101f8:	4b0c      	ldr	r3, [pc, #48]	; (801022c <xTaskRemoveFromEventList+0xbc>)
 80101fa:	681b      	ldr	r3, [r3, #0]
 80101fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80101fe:	429a      	cmp	r2, r3
 8010200:	d905      	bls.n	801020e <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8010202:	2301      	movs	r3, #1
 8010204:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8010206:	4b0a      	ldr	r3, [pc, #40]	; (8010230 <xTaskRemoveFromEventList+0xc0>)
 8010208:	2201      	movs	r2, #1
 801020a:	601a      	str	r2, [r3, #0]
 801020c:	e001      	b.n	8010212 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 801020e:	2300      	movs	r3, #0
 8010210:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8010212:	697b      	ldr	r3, [r7, #20]
}
 8010214:	4618      	mov	r0, r3
 8010216:	3718      	adds	r7, #24
 8010218:	46bd      	mov	sp, r7
 801021a:	bd80      	pop	{r7, pc}
 801021c:	20000a78 	.word	0x20000a78
 8010220:	20000a5c 	.word	0x20000a5c
 8010224:	2000095c 	.word	0x2000095c
 8010228:	20000a18 	.word	0x20000a18
 801022c:	20000958 	.word	0x20000958
 8010230:	20000a68 	.word	0x20000a68

08010234 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8010234:	b480      	push	{r7}
 8010236:	b083      	sub	sp, #12
 8010238:	af00      	add	r7, sp, #0
 801023a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 801023c:	4b06      	ldr	r3, [pc, #24]	; (8010258 <vTaskInternalSetTimeOutState+0x24>)
 801023e:	681a      	ldr	r2, [r3, #0]
 8010240:	687b      	ldr	r3, [r7, #4]
 8010242:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8010244:	4b05      	ldr	r3, [pc, #20]	; (801025c <vTaskInternalSetTimeOutState+0x28>)
 8010246:	681a      	ldr	r2, [r3, #0]
 8010248:	687b      	ldr	r3, [r7, #4]
 801024a:	605a      	str	r2, [r3, #4]
}
 801024c:	bf00      	nop
 801024e:	370c      	adds	r7, #12
 8010250:	46bd      	mov	sp, r7
 8010252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010256:	4770      	bx	lr
 8010258:	20000a6c 	.word	0x20000a6c
 801025c:	20000a58 	.word	0x20000a58

08010260 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8010260:	b580      	push	{r7, lr}
 8010262:	b088      	sub	sp, #32
 8010264:	af00      	add	r7, sp, #0
 8010266:	6078      	str	r0, [r7, #4]
 8010268:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 801026a:	687b      	ldr	r3, [r7, #4]
 801026c:	2b00      	cmp	r3, #0
 801026e:	d10a      	bne.n	8010286 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8010270:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010274:	f383 8811 	msr	BASEPRI, r3
 8010278:	f3bf 8f6f 	isb	sy
 801027c:	f3bf 8f4f 	dsb	sy
 8010280:	613b      	str	r3, [r7, #16]
}
 8010282:	bf00      	nop
 8010284:	e7fe      	b.n	8010284 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8010286:	683b      	ldr	r3, [r7, #0]
 8010288:	2b00      	cmp	r3, #0
 801028a:	d10a      	bne.n	80102a2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 801028c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010290:	f383 8811 	msr	BASEPRI, r3
 8010294:	f3bf 8f6f 	isb	sy
 8010298:	f3bf 8f4f 	dsb	sy
 801029c:	60fb      	str	r3, [r7, #12]
}
 801029e:	bf00      	nop
 80102a0:	e7fe      	b.n	80102a0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80102a2:	f000 fb41 	bl	8010928 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80102a6:	4b1d      	ldr	r3, [pc, #116]	; (801031c <xTaskCheckForTimeOut+0xbc>)
 80102a8:	681b      	ldr	r3, [r3, #0]
 80102aa:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80102ac:	687b      	ldr	r3, [r7, #4]
 80102ae:	685b      	ldr	r3, [r3, #4]
 80102b0:	69ba      	ldr	r2, [r7, #24]
 80102b2:	1ad3      	subs	r3, r2, r3
 80102b4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80102b6:	683b      	ldr	r3, [r7, #0]
 80102b8:	681b      	ldr	r3, [r3, #0]
 80102ba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80102be:	d102      	bne.n	80102c6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80102c0:	2300      	movs	r3, #0
 80102c2:	61fb      	str	r3, [r7, #28]
 80102c4:	e023      	b.n	801030e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80102c6:	687b      	ldr	r3, [r7, #4]
 80102c8:	681a      	ldr	r2, [r3, #0]
 80102ca:	4b15      	ldr	r3, [pc, #84]	; (8010320 <xTaskCheckForTimeOut+0xc0>)
 80102cc:	681b      	ldr	r3, [r3, #0]
 80102ce:	429a      	cmp	r2, r3
 80102d0:	d007      	beq.n	80102e2 <xTaskCheckForTimeOut+0x82>
 80102d2:	687b      	ldr	r3, [r7, #4]
 80102d4:	685b      	ldr	r3, [r3, #4]
 80102d6:	69ba      	ldr	r2, [r7, #24]
 80102d8:	429a      	cmp	r2, r3
 80102da:	d302      	bcc.n	80102e2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80102dc:	2301      	movs	r3, #1
 80102de:	61fb      	str	r3, [r7, #28]
 80102e0:	e015      	b.n	801030e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80102e2:	683b      	ldr	r3, [r7, #0]
 80102e4:	681b      	ldr	r3, [r3, #0]
 80102e6:	697a      	ldr	r2, [r7, #20]
 80102e8:	429a      	cmp	r2, r3
 80102ea:	d20b      	bcs.n	8010304 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80102ec:	683b      	ldr	r3, [r7, #0]
 80102ee:	681a      	ldr	r2, [r3, #0]
 80102f0:	697b      	ldr	r3, [r7, #20]
 80102f2:	1ad2      	subs	r2, r2, r3
 80102f4:	683b      	ldr	r3, [r7, #0]
 80102f6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80102f8:	6878      	ldr	r0, [r7, #4]
 80102fa:	f7ff ff9b 	bl	8010234 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80102fe:	2300      	movs	r3, #0
 8010300:	61fb      	str	r3, [r7, #28]
 8010302:	e004      	b.n	801030e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8010304:	683b      	ldr	r3, [r7, #0]
 8010306:	2200      	movs	r2, #0
 8010308:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 801030a:	2301      	movs	r3, #1
 801030c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 801030e:	f000 fb3b 	bl	8010988 <vPortExitCritical>

	return xReturn;
 8010312:	69fb      	ldr	r3, [r7, #28]
}
 8010314:	4618      	mov	r0, r3
 8010316:	3720      	adds	r7, #32
 8010318:	46bd      	mov	sp, r7
 801031a:	bd80      	pop	{r7, pc}
 801031c:	20000a58 	.word	0x20000a58
 8010320:	20000a6c 	.word	0x20000a6c

08010324 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8010324:	b480      	push	{r7}
 8010326:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8010328:	4b03      	ldr	r3, [pc, #12]	; (8010338 <vTaskMissedYield+0x14>)
 801032a:	2201      	movs	r2, #1
 801032c:	601a      	str	r2, [r3, #0]
}
 801032e:	bf00      	nop
 8010330:	46bd      	mov	sp, r7
 8010332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010336:	4770      	bx	lr
 8010338:	20000a68 	.word	0x20000a68

0801033c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 801033c:	b580      	push	{r7, lr}
 801033e:	b082      	sub	sp, #8
 8010340:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8010342:	2300      	movs	r3, #0
 8010344:	607b      	str	r3, [r7, #4]
 8010346:	e00c      	b.n	8010362 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8010348:	687a      	ldr	r2, [r7, #4]
 801034a:	4613      	mov	r3, r2
 801034c:	009b      	lsls	r3, r3, #2
 801034e:	4413      	add	r3, r2
 8010350:	009b      	lsls	r3, r3, #2
 8010352:	4a12      	ldr	r2, [pc, #72]	; (801039c <prvInitialiseTaskLists+0x60>)
 8010354:	4413      	add	r3, r2
 8010356:	4618      	mov	r0, r3
 8010358:	f7fe fe0b 	bl	800ef72 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801035c:	687b      	ldr	r3, [r7, #4]
 801035e:	3301      	adds	r3, #1
 8010360:	607b      	str	r3, [r7, #4]
 8010362:	687b      	ldr	r3, [r7, #4]
 8010364:	2b06      	cmp	r3, #6
 8010366:	d9ef      	bls.n	8010348 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8010368:	480d      	ldr	r0, [pc, #52]	; (80103a0 <prvInitialiseTaskLists+0x64>)
 801036a:	f7fe fe02 	bl	800ef72 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 801036e:	480d      	ldr	r0, [pc, #52]	; (80103a4 <prvInitialiseTaskLists+0x68>)
 8010370:	f7fe fdff 	bl	800ef72 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8010374:	480c      	ldr	r0, [pc, #48]	; (80103a8 <prvInitialiseTaskLists+0x6c>)
 8010376:	f7fe fdfc 	bl	800ef72 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 801037a:	480c      	ldr	r0, [pc, #48]	; (80103ac <prvInitialiseTaskLists+0x70>)
 801037c:	f7fe fdf9 	bl	800ef72 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8010380:	480b      	ldr	r0, [pc, #44]	; (80103b0 <prvInitialiseTaskLists+0x74>)
 8010382:	f7fe fdf6 	bl	800ef72 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8010386:	4b0b      	ldr	r3, [pc, #44]	; (80103b4 <prvInitialiseTaskLists+0x78>)
 8010388:	4a05      	ldr	r2, [pc, #20]	; (80103a0 <prvInitialiseTaskLists+0x64>)
 801038a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 801038c:	4b0a      	ldr	r3, [pc, #40]	; (80103b8 <prvInitialiseTaskLists+0x7c>)
 801038e:	4a05      	ldr	r2, [pc, #20]	; (80103a4 <prvInitialiseTaskLists+0x68>)
 8010390:	601a      	str	r2, [r3, #0]
}
 8010392:	bf00      	nop
 8010394:	3708      	adds	r7, #8
 8010396:	46bd      	mov	sp, r7
 8010398:	bd80      	pop	{r7, pc}
 801039a:	bf00      	nop
 801039c:	2000095c 	.word	0x2000095c
 80103a0:	200009e8 	.word	0x200009e8
 80103a4:	200009fc 	.word	0x200009fc
 80103a8:	20000a18 	.word	0x20000a18
 80103ac:	20000a2c 	.word	0x20000a2c
 80103b0:	20000a40 	.word	0x20000a40
 80103b4:	20000a10 	.word	0x20000a10
 80103b8:	20000a14 	.word	0x20000a14

080103bc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80103bc:	b480      	push	{r7}
 80103be:	b083      	sub	sp, #12
 80103c0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80103c2:	4b0c      	ldr	r3, [pc, #48]	; (80103f4 <prvResetNextTaskUnblockTime+0x38>)
 80103c4:	681b      	ldr	r3, [r3, #0]
 80103c6:	681b      	ldr	r3, [r3, #0]
 80103c8:	2b00      	cmp	r3, #0
 80103ca:	d104      	bne.n	80103d6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80103cc:	4b0a      	ldr	r3, [pc, #40]	; (80103f8 <prvResetNextTaskUnblockTime+0x3c>)
 80103ce:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80103d2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80103d4:	e008      	b.n	80103e8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80103d6:	4b07      	ldr	r3, [pc, #28]	; (80103f4 <prvResetNextTaskUnblockTime+0x38>)
 80103d8:	681b      	ldr	r3, [r3, #0]
 80103da:	68db      	ldr	r3, [r3, #12]
 80103dc:	68db      	ldr	r3, [r3, #12]
 80103de:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80103e0:	687b      	ldr	r3, [r7, #4]
 80103e2:	685b      	ldr	r3, [r3, #4]
 80103e4:	4a04      	ldr	r2, [pc, #16]	; (80103f8 <prvResetNextTaskUnblockTime+0x3c>)
 80103e6:	6013      	str	r3, [r2, #0]
}
 80103e8:	bf00      	nop
 80103ea:	370c      	adds	r7, #12
 80103ec:	46bd      	mov	sp, r7
 80103ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103f2:	4770      	bx	lr
 80103f4:	20000a10 	.word	0x20000a10
 80103f8:	20000a74 	.word	0x20000a74

080103fc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80103fc:	b480      	push	{r7}
 80103fe:	b083      	sub	sp, #12
 8010400:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8010402:	4b0b      	ldr	r3, [pc, #44]	; (8010430 <xTaskGetSchedulerState+0x34>)
 8010404:	681b      	ldr	r3, [r3, #0]
 8010406:	2b00      	cmp	r3, #0
 8010408:	d102      	bne.n	8010410 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 801040a:	2301      	movs	r3, #1
 801040c:	607b      	str	r3, [r7, #4]
 801040e:	e008      	b.n	8010422 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010410:	4b08      	ldr	r3, [pc, #32]	; (8010434 <xTaskGetSchedulerState+0x38>)
 8010412:	681b      	ldr	r3, [r3, #0]
 8010414:	2b00      	cmp	r3, #0
 8010416:	d102      	bne.n	801041e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8010418:	2302      	movs	r3, #2
 801041a:	607b      	str	r3, [r7, #4]
 801041c:	e001      	b.n	8010422 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 801041e:	2300      	movs	r3, #0
 8010420:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8010422:	687b      	ldr	r3, [r7, #4]
	}
 8010424:	4618      	mov	r0, r3
 8010426:	370c      	adds	r7, #12
 8010428:	46bd      	mov	sp, r7
 801042a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801042e:	4770      	bx	lr
 8010430:	20000a60 	.word	0x20000a60
 8010434:	20000a78 	.word	0x20000a78

08010438 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8010438:	b580      	push	{r7, lr}
 801043a:	b084      	sub	sp, #16
 801043c:	af00      	add	r7, sp, #0
 801043e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8010440:	687b      	ldr	r3, [r7, #4]
 8010442:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8010444:	2300      	movs	r3, #0
 8010446:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8010448:	687b      	ldr	r3, [r7, #4]
 801044a:	2b00      	cmp	r3, #0
 801044c:	d05e      	beq.n	801050c <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 801044e:	68bb      	ldr	r3, [r7, #8]
 8010450:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010452:	4b31      	ldr	r3, [pc, #196]	; (8010518 <xTaskPriorityInherit+0xe0>)
 8010454:	681b      	ldr	r3, [r3, #0]
 8010456:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010458:	429a      	cmp	r2, r3
 801045a:	d24e      	bcs.n	80104fa <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 801045c:	68bb      	ldr	r3, [r7, #8]
 801045e:	699b      	ldr	r3, [r3, #24]
 8010460:	2b00      	cmp	r3, #0
 8010462:	db06      	blt.n	8010472 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010464:	4b2c      	ldr	r3, [pc, #176]	; (8010518 <xTaskPriorityInherit+0xe0>)
 8010466:	681b      	ldr	r3, [r3, #0]
 8010468:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801046a:	f1c3 0207 	rsb	r2, r3, #7
 801046e:	68bb      	ldr	r3, [r7, #8]
 8010470:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8010472:	68bb      	ldr	r3, [r7, #8]
 8010474:	6959      	ldr	r1, [r3, #20]
 8010476:	68bb      	ldr	r3, [r7, #8]
 8010478:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801047a:	4613      	mov	r3, r2
 801047c:	009b      	lsls	r3, r3, #2
 801047e:	4413      	add	r3, r2
 8010480:	009b      	lsls	r3, r3, #2
 8010482:	4a26      	ldr	r2, [pc, #152]	; (801051c <xTaskPriorityInherit+0xe4>)
 8010484:	4413      	add	r3, r2
 8010486:	4299      	cmp	r1, r3
 8010488:	d12f      	bne.n	80104ea <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801048a:	68bb      	ldr	r3, [r7, #8]
 801048c:	3304      	adds	r3, #4
 801048e:	4618      	mov	r0, r3
 8010490:	f7fe fdf9 	bl	800f086 <uxListRemove>
 8010494:	4603      	mov	r3, r0
 8010496:	2b00      	cmp	r3, #0
 8010498:	d10a      	bne.n	80104b0 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 801049a:	68bb      	ldr	r3, [r7, #8]
 801049c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801049e:	2201      	movs	r2, #1
 80104a0:	fa02 f303 	lsl.w	r3, r2, r3
 80104a4:	43da      	mvns	r2, r3
 80104a6:	4b1e      	ldr	r3, [pc, #120]	; (8010520 <xTaskPriorityInherit+0xe8>)
 80104a8:	681b      	ldr	r3, [r3, #0]
 80104aa:	4013      	ands	r3, r2
 80104ac:	4a1c      	ldr	r2, [pc, #112]	; (8010520 <xTaskPriorityInherit+0xe8>)
 80104ae:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80104b0:	4b19      	ldr	r3, [pc, #100]	; (8010518 <xTaskPriorityInherit+0xe0>)
 80104b2:	681b      	ldr	r3, [r3, #0]
 80104b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80104b6:	68bb      	ldr	r3, [r7, #8]
 80104b8:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80104ba:	68bb      	ldr	r3, [r7, #8]
 80104bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80104be:	2201      	movs	r2, #1
 80104c0:	409a      	lsls	r2, r3
 80104c2:	4b17      	ldr	r3, [pc, #92]	; (8010520 <xTaskPriorityInherit+0xe8>)
 80104c4:	681b      	ldr	r3, [r3, #0]
 80104c6:	4313      	orrs	r3, r2
 80104c8:	4a15      	ldr	r2, [pc, #84]	; (8010520 <xTaskPriorityInherit+0xe8>)
 80104ca:	6013      	str	r3, [r2, #0]
 80104cc:	68bb      	ldr	r3, [r7, #8]
 80104ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80104d0:	4613      	mov	r3, r2
 80104d2:	009b      	lsls	r3, r3, #2
 80104d4:	4413      	add	r3, r2
 80104d6:	009b      	lsls	r3, r3, #2
 80104d8:	4a10      	ldr	r2, [pc, #64]	; (801051c <xTaskPriorityInherit+0xe4>)
 80104da:	441a      	add	r2, r3
 80104dc:	68bb      	ldr	r3, [r7, #8]
 80104de:	3304      	adds	r3, #4
 80104e0:	4619      	mov	r1, r3
 80104e2:	4610      	mov	r0, r2
 80104e4:	f7fe fd72 	bl	800efcc <vListInsertEnd>
 80104e8:	e004      	b.n	80104f4 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80104ea:	4b0b      	ldr	r3, [pc, #44]	; (8010518 <xTaskPriorityInherit+0xe0>)
 80104ec:	681b      	ldr	r3, [r3, #0]
 80104ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80104f0:	68bb      	ldr	r3, [r7, #8]
 80104f2:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80104f4:	2301      	movs	r3, #1
 80104f6:	60fb      	str	r3, [r7, #12]
 80104f8:	e008      	b.n	801050c <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80104fa:	68bb      	ldr	r3, [r7, #8]
 80104fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80104fe:	4b06      	ldr	r3, [pc, #24]	; (8010518 <xTaskPriorityInherit+0xe0>)
 8010500:	681b      	ldr	r3, [r3, #0]
 8010502:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010504:	429a      	cmp	r2, r3
 8010506:	d201      	bcs.n	801050c <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8010508:	2301      	movs	r3, #1
 801050a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801050c:	68fb      	ldr	r3, [r7, #12]
	}
 801050e:	4618      	mov	r0, r3
 8010510:	3710      	adds	r7, #16
 8010512:	46bd      	mov	sp, r7
 8010514:	bd80      	pop	{r7, pc}
 8010516:	bf00      	nop
 8010518:	20000958 	.word	0x20000958
 801051c:	2000095c 	.word	0x2000095c
 8010520:	20000a5c 	.word	0x20000a5c

08010524 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8010524:	b580      	push	{r7, lr}
 8010526:	b086      	sub	sp, #24
 8010528:	af00      	add	r7, sp, #0
 801052a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 801052c:	687b      	ldr	r3, [r7, #4]
 801052e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8010530:	2300      	movs	r3, #0
 8010532:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8010534:	687b      	ldr	r3, [r7, #4]
 8010536:	2b00      	cmp	r3, #0
 8010538:	d06e      	beq.n	8010618 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 801053a:	4b3a      	ldr	r3, [pc, #232]	; (8010624 <xTaskPriorityDisinherit+0x100>)
 801053c:	681b      	ldr	r3, [r3, #0]
 801053e:	693a      	ldr	r2, [r7, #16]
 8010540:	429a      	cmp	r2, r3
 8010542:	d00a      	beq.n	801055a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8010544:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010548:	f383 8811 	msr	BASEPRI, r3
 801054c:	f3bf 8f6f 	isb	sy
 8010550:	f3bf 8f4f 	dsb	sy
 8010554:	60fb      	str	r3, [r7, #12]
}
 8010556:	bf00      	nop
 8010558:	e7fe      	b.n	8010558 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 801055a:	693b      	ldr	r3, [r7, #16]
 801055c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801055e:	2b00      	cmp	r3, #0
 8010560:	d10a      	bne.n	8010578 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8010562:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010566:	f383 8811 	msr	BASEPRI, r3
 801056a:	f3bf 8f6f 	isb	sy
 801056e:	f3bf 8f4f 	dsb	sy
 8010572:	60bb      	str	r3, [r7, #8]
}
 8010574:	bf00      	nop
 8010576:	e7fe      	b.n	8010576 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8010578:	693b      	ldr	r3, [r7, #16]
 801057a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801057c:	1e5a      	subs	r2, r3, #1
 801057e:	693b      	ldr	r3, [r7, #16]
 8010580:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8010582:	693b      	ldr	r3, [r7, #16]
 8010584:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010586:	693b      	ldr	r3, [r7, #16]
 8010588:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801058a:	429a      	cmp	r2, r3
 801058c:	d044      	beq.n	8010618 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 801058e:	693b      	ldr	r3, [r7, #16]
 8010590:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010592:	2b00      	cmp	r3, #0
 8010594:	d140      	bne.n	8010618 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010596:	693b      	ldr	r3, [r7, #16]
 8010598:	3304      	adds	r3, #4
 801059a:	4618      	mov	r0, r3
 801059c:	f7fe fd73 	bl	800f086 <uxListRemove>
 80105a0:	4603      	mov	r3, r0
 80105a2:	2b00      	cmp	r3, #0
 80105a4:	d115      	bne.n	80105d2 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80105a6:	693b      	ldr	r3, [r7, #16]
 80105a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80105aa:	491f      	ldr	r1, [pc, #124]	; (8010628 <xTaskPriorityDisinherit+0x104>)
 80105ac:	4613      	mov	r3, r2
 80105ae:	009b      	lsls	r3, r3, #2
 80105b0:	4413      	add	r3, r2
 80105b2:	009b      	lsls	r3, r3, #2
 80105b4:	440b      	add	r3, r1
 80105b6:	681b      	ldr	r3, [r3, #0]
 80105b8:	2b00      	cmp	r3, #0
 80105ba:	d10a      	bne.n	80105d2 <xTaskPriorityDisinherit+0xae>
 80105bc:	693b      	ldr	r3, [r7, #16]
 80105be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80105c0:	2201      	movs	r2, #1
 80105c2:	fa02 f303 	lsl.w	r3, r2, r3
 80105c6:	43da      	mvns	r2, r3
 80105c8:	4b18      	ldr	r3, [pc, #96]	; (801062c <xTaskPriorityDisinherit+0x108>)
 80105ca:	681b      	ldr	r3, [r3, #0]
 80105cc:	4013      	ands	r3, r2
 80105ce:	4a17      	ldr	r2, [pc, #92]	; (801062c <xTaskPriorityDisinherit+0x108>)
 80105d0:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80105d2:	693b      	ldr	r3, [r7, #16]
 80105d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80105d6:	693b      	ldr	r3, [r7, #16]
 80105d8:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80105da:	693b      	ldr	r3, [r7, #16]
 80105dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80105de:	f1c3 0207 	rsb	r2, r3, #7
 80105e2:	693b      	ldr	r3, [r7, #16]
 80105e4:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80105e6:	693b      	ldr	r3, [r7, #16]
 80105e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80105ea:	2201      	movs	r2, #1
 80105ec:	409a      	lsls	r2, r3
 80105ee:	4b0f      	ldr	r3, [pc, #60]	; (801062c <xTaskPriorityDisinherit+0x108>)
 80105f0:	681b      	ldr	r3, [r3, #0]
 80105f2:	4313      	orrs	r3, r2
 80105f4:	4a0d      	ldr	r2, [pc, #52]	; (801062c <xTaskPriorityDisinherit+0x108>)
 80105f6:	6013      	str	r3, [r2, #0]
 80105f8:	693b      	ldr	r3, [r7, #16]
 80105fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80105fc:	4613      	mov	r3, r2
 80105fe:	009b      	lsls	r3, r3, #2
 8010600:	4413      	add	r3, r2
 8010602:	009b      	lsls	r3, r3, #2
 8010604:	4a08      	ldr	r2, [pc, #32]	; (8010628 <xTaskPriorityDisinherit+0x104>)
 8010606:	441a      	add	r2, r3
 8010608:	693b      	ldr	r3, [r7, #16]
 801060a:	3304      	adds	r3, #4
 801060c:	4619      	mov	r1, r3
 801060e:	4610      	mov	r0, r2
 8010610:	f7fe fcdc 	bl	800efcc <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8010614:	2301      	movs	r3, #1
 8010616:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8010618:	697b      	ldr	r3, [r7, #20]
	}
 801061a:	4618      	mov	r0, r3
 801061c:	3718      	adds	r7, #24
 801061e:	46bd      	mov	sp, r7
 8010620:	bd80      	pop	{r7, pc}
 8010622:	bf00      	nop
 8010624:	20000958 	.word	0x20000958
 8010628:	2000095c 	.word	0x2000095c
 801062c:	20000a5c 	.word	0x20000a5c

08010630 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8010630:	b580      	push	{r7, lr}
 8010632:	b088      	sub	sp, #32
 8010634:	af00      	add	r7, sp, #0
 8010636:	6078      	str	r0, [r7, #4]
 8010638:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 801063a:	687b      	ldr	r3, [r7, #4]
 801063c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 801063e:	2301      	movs	r3, #1
 8010640:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8010642:	687b      	ldr	r3, [r7, #4]
 8010644:	2b00      	cmp	r3, #0
 8010646:	d077      	beq.n	8010738 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8010648:	69bb      	ldr	r3, [r7, #24]
 801064a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801064c:	2b00      	cmp	r3, #0
 801064e:	d10a      	bne.n	8010666 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8010650:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010654:	f383 8811 	msr	BASEPRI, r3
 8010658:	f3bf 8f6f 	isb	sy
 801065c:	f3bf 8f4f 	dsb	sy
 8010660:	60fb      	str	r3, [r7, #12]
}
 8010662:	bf00      	nop
 8010664:	e7fe      	b.n	8010664 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8010666:	69bb      	ldr	r3, [r7, #24]
 8010668:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801066a:	683a      	ldr	r2, [r7, #0]
 801066c:	429a      	cmp	r2, r3
 801066e:	d902      	bls.n	8010676 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8010670:	683b      	ldr	r3, [r7, #0]
 8010672:	61fb      	str	r3, [r7, #28]
 8010674:	e002      	b.n	801067c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8010676:	69bb      	ldr	r3, [r7, #24]
 8010678:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801067a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 801067c:	69bb      	ldr	r3, [r7, #24]
 801067e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010680:	69fa      	ldr	r2, [r7, #28]
 8010682:	429a      	cmp	r2, r3
 8010684:	d058      	beq.n	8010738 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8010686:	69bb      	ldr	r3, [r7, #24]
 8010688:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801068a:	697a      	ldr	r2, [r7, #20]
 801068c:	429a      	cmp	r2, r3
 801068e:	d153      	bne.n	8010738 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8010690:	4b2b      	ldr	r3, [pc, #172]	; (8010740 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 8010692:	681b      	ldr	r3, [r3, #0]
 8010694:	69ba      	ldr	r2, [r7, #24]
 8010696:	429a      	cmp	r2, r3
 8010698:	d10a      	bne.n	80106b0 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 801069a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801069e:	f383 8811 	msr	BASEPRI, r3
 80106a2:	f3bf 8f6f 	isb	sy
 80106a6:	f3bf 8f4f 	dsb	sy
 80106aa:	60bb      	str	r3, [r7, #8]
}
 80106ac:	bf00      	nop
 80106ae:	e7fe      	b.n	80106ae <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80106b0:	69bb      	ldr	r3, [r7, #24]
 80106b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80106b4:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80106b6:	69bb      	ldr	r3, [r7, #24]
 80106b8:	69fa      	ldr	r2, [r7, #28]
 80106ba:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80106bc:	69bb      	ldr	r3, [r7, #24]
 80106be:	699b      	ldr	r3, [r3, #24]
 80106c0:	2b00      	cmp	r3, #0
 80106c2:	db04      	blt.n	80106ce <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80106c4:	69fb      	ldr	r3, [r7, #28]
 80106c6:	f1c3 0207 	rsb	r2, r3, #7
 80106ca:	69bb      	ldr	r3, [r7, #24]
 80106cc:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80106ce:	69bb      	ldr	r3, [r7, #24]
 80106d0:	6959      	ldr	r1, [r3, #20]
 80106d2:	693a      	ldr	r2, [r7, #16]
 80106d4:	4613      	mov	r3, r2
 80106d6:	009b      	lsls	r3, r3, #2
 80106d8:	4413      	add	r3, r2
 80106da:	009b      	lsls	r3, r3, #2
 80106dc:	4a19      	ldr	r2, [pc, #100]	; (8010744 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 80106de:	4413      	add	r3, r2
 80106e0:	4299      	cmp	r1, r3
 80106e2:	d129      	bne.n	8010738 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80106e4:	69bb      	ldr	r3, [r7, #24]
 80106e6:	3304      	adds	r3, #4
 80106e8:	4618      	mov	r0, r3
 80106ea:	f7fe fccc 	bl	800f086 <uxListRemove>
 80106ee:	4603      	mov	r3, r0
 80106f0:	2b00      	cmp	r3, #0
 80106f2:	d10a      	bne.n	801070a <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 80106f4:	69bb      	ldr	r3, [r7, #24]
 80106f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80106f8:	2201      	movs	r2, #1
 80106fa:	fa02 f303 	lsl.w	r3, r2, r3
 80106fe:	43da      	mvns	r2, r3
 8010700:	4b11      	ldr	r3, [pc, #68]	; (8010748 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8010702:	681b      	ldr	r3, [r3, #0]
 8010704:	4013      	ands	r3, r2
 8010706:	4a10      	ldr	r2, [pc, #64]	; (8010748 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8010708:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 801070a:	69bb      	ldr	r3, [r7, #24]
 801070c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801070e:	2201      	movs	r2, #1
 8010710:	409a      	lsls	r2, r3
 8010712:	4b0d      	ldr	r3, [pc, #52]	; (8010748 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8010714:	681b      	ldr	r3, [r3, #0]
 8010716:	4313      	orrs	r3, r2
 8010718:	4a0b      	ldr	r2, [pc, #44]	; (8010748 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 801071a:	6013      	str	r3, [r2, #0]
 801071c:	69bb      	ldr	r3, [r7, #24]
 801071e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010720:	4613      	mov	r3, r2
 8010722:	009b      	lsls	r3, r3, #2
 8010724:	4413      	add	r3, r2
 8010726:	009b      	lsls	r3, r3, #2
 8010728:	4a06      	ldr	r2, [pc, #24]	; (8010744 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 801072a:	441a      	add	r2, r3
 801072c:	69bb      	ldr	r3, [r7, #24]
 801072e:	3304      	adds	r3, #4
 8010730:	4619      	mov	r1, r3
 8010732:	4610      	mov	r0, r2
 8010734:	f7fe fc4a 	bl	800efcc <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8010738:	bf00      	nop
 801073a:	3720      	adds	r7, #32
 801073c:	46bd      	mov	sp, r7
 801073e:	bd80      	pop	{r7, pc}
 8010740:	20000958 	.word	0x20000958
 8010744:	2000095c 	.word	0x2000095c
 8010748:	20000a5c 	.word	0x20000a5c

0801074c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 801074c:	b480      	push	{r7}
 801074e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8010750:	4b07      	ldr	r3, [pc, #28]	; (8010770 <pvTaskIncrementMutexHeldCount+0x24>)
 8010752:	681b      	ldr	r3, [r3, #0]
 8010754:	2b00      	cmp	r3, #0
 8010756:	d004      	beq.n	8010762 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8010758:	4b05      	ldr	r3, [pc, #20]	; (8010770 <pvTaskIncrementMutexHeldCount+0x24>)
 801075a:	681b      	ldr	r3, [r3, #0]
 801075c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 801075e:	3201      	adds	r2, #1
 8010760:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8010762:	4b03      	ldr	r3, [pc, #12]	; (8010770 <pvTaskIncrementMutexHeldCount+0x24>)
 8010764:	681b      	ldr	r3, [r3, #0]
	}
 8010766:	4618      	mov	r0, r3
 8010768:	46bd      	mov	sp, r7
 801076a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801076e:	4770      	bx	lr
 8010770:	20000958 	.word	0x20000958

08010774 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8010774:	b580      	push	{r7, lr}
 8010776:	b084      	sub	sp, #16
 8010778:	af00      	add	r7, sp, #0
 801077a:	6078      	str	r0, [r7, #4]
 801077c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 801077e:	4b29      	ldr	r3, [pc, #164]	; (8010824 <prvAddCurrentTaskToDelayedList+0xb0>)
 8010780:	681b      	ldr	r3, [r3, #0]
 8010782:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010784:	4b28      	ldr	r3, [pc, #160]	; (8010828 <prvAddCurrentTaskToDelayedList+0xb4>)
 8010786:	681b      	ldr	r3, [r3, #0]
 8010788:	3304      	adds	r3, #4
 801078a:	4618      	mov	r0, r3
 801078c:	f7fe fc7b 	bl	800f086 <uxListRemove>
 8010790:	4603      	mov	r3, r0
 8010792:	2b00      	cmp	r3, #0
 8010794:	d10b      	bne.n	80107ae <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8010796:	4b24      	ldr	r3, [pc, #144]	; (8010828 <prvAddCurrentTaskToDelayedList+0xb4>)
 8010798:	681b      	ldr	r3, [r3, #0]
 801079a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801079c:	2201      	movs	r2, #1
 801079e:	fa02 f303 	lsl.w	r3, r2, r3
 80107a2:	43da      	mvns	r2, r3
 80107a4:	4b21      	ldr	r3, [pc, #132]	; (801082c <prvAddCurrentTaskToDelayedList+0xb8>)
 80107a6:	681b      	ldr	r3, [r3, #0]
 80107a8:	4013      	ands	r3, r2
 80107aa:	4a20      	ldr	r2, [pc, #128]	; (801082c <prvAddCurrentTaskToDelayedList+0xb8>)
 80107ac:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80107ae:	687b      	ldr	r3, [r7, #4]
 80107b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80107b4:	d10a      	bne.n	80107cc <prvAddCurrentTaskToDelayedList+0x58>
 80107b6:	683b      	ldr	r3, [r7, #0]
 80107b8:	2b00      	cmp	r3, #0
 80107ba:	d007      	beq.n	80107cc <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80107bc:	4b1a      	ldr	r3, [pc, #104]	; (8010828 <prvAddCurrentTaskToDelayedList+0xb4>)
 80107be:	681b      	ldr	r3, [r3, #0]
 80107c0:	3304      	adds	r3, #4
 80107c2:	4619      	mov	r1, r3
 80107c4:	481a      	ldr	r0, [pc, #104]	; (8010830 <prvAddCurrentTaskToDelayedList+0xbc>)
 80107c6:	f7fe fc01 	bl	800efcc <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80107ca:	e026      	b.n	801081a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80107cc:	68fa      	ldr	r2, [r7, #12]
 80107ce:	687b      	ldr	r3, [r7, #4]
 80107d0:	4413      	add	r3, r2
 80107d2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80107d4:	4b14      	ldr	r3, [pc, #80]	; (8010828 <prvAddCurrentTaskToDelayedList+0xb4>)
 80107d6:	681b      	ldr	r3, [r3, #0]
 80107d8:	68ba      	ldr	r2, [r7, #8]
 80107da:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80107dc:	68ba      	ldr	r2, [r7, #8]
 80107de:	68fb      	ldr	r3, [r7, #12]
 80107e0:	429a      	cmp	r2, r3
 80107e2:	d209      	bcs.n	80107f8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80107e4:	4b13      	ldr	r3, [pc, #76]	; (8010834 <prvAddCurrentTaskToDelayedList+0xc0>)
 80107e6:	681a      	ldr	r2, [r3, #0]
 80107e8:	4b0f      	ldr	r3, [pc, #60]	; (8010828 <prvAddCurrentTaskToDelayedList+0xb4>)
 80107ea:	681b      	ldr	r3, [r3, #0]
 80107ec:	3304      	adds	r3, #4
 80107ee:	4619      	mov	r1, r3
 80107f0:	4610      	mov	r0, r2
 80107f2:	f7fe fc0f 	bl	800f014 <vListInsert>
}
 80107f6:	e010      	b.n	801081a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80107f8:	4b0f      	ldr	r3, [pc, #60]	; (8010838 <prvAddCurrentTaskToDelayedList+0xc4>)
 80107fa:	681a      	ldr	r2, [r3, #0]
 80107fc:	4b0a      	ldr	r3, [pc, #40]	; (8010828 <prvAddCurrentTaskToDelayedList+0xb4>)
 80107fe:	681b      	ldr	r3, [r3, #0]
 8010800:	3304      	adds	r3, #4
 8010802:	4619      	mov	r1, r3
 8010804:	4610      	mov	r0, r2
 8010806:	f7fe fc05 	bl	800f014 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 801080a:	4b0c      	ldr	r3, [pc, #48]	; (801083c <prvAddCurrentTaskToDelayedList+0xc8>)
 801080c:	681b      	ldr	r3, [r3, #0]
 801080e:	68ba      	ldr	r2, [r7, #8]
 8010810:	429a      	cmp	r2, r3
 8010812:	d202      	bcs.n	801081a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8010814:	4a09      	ldr	r2, [pc, #36]	; (801083c <prvAddCurrentTaskToDelayedList+0xc8>)
 8010816:	68bb      	ldr	r3, [r7, #8]
 8010818:	6013      	str	r3, [r2, #0]
}
 801081a:	bf00      	nop
 801081c:	3710      	adds	r7, #16
 801081e:	46bd      	mov	sp, r7
 8010820:	bd80      	pop	{r7, pc}
 8010822:	bf00      	nop
 8010824:	20000a58 	.word	0x20000a58
 8010828:	20000958 	.word	0x20000958
 801082c:	20000a5c 	.word	0x20000a5c
 8010830:	20000a40 	.word	0x20000a40
 8010834:	20000a14 	.word	0x20000a14
 8010838:	20000a10 	.word	0x20000a10
 801083c:	20000a74 	.word	0x20000a74

08010840 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8010840:	b480      	push	{r7}
 8010842:	b085      	sub	sp, #20
 8010844:	af00      	add	r7, sp, #0
 8010846:	60f8      	str	r0, [r7, #12]
 8010848:	60b9      	str	r1, [r7, #8]
 801084a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 801084c:	68fb      	ldr	r3, [r7, #12]
 801084e:	3b04      	subs	r3, #4
 8010850:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8010852:	68fb      	ldr	r3, [r7, #12]
 8010854:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8010858:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801085a:	68fb      	ldr	r3, [r7, #12]
 801085c:	3b04      	subs	r3, #4
 801085e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8010860:	68bb      	ldr	r3, [r7, #8]
 8010862:	f023 0201 	bic.w	r2, r3, #1
 8010866:	68fb      	ldr	r3, [r7, #12]
 8010868:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801086a:	68fb      	ldr	r3, [r7, #12]
 801086c:	3b04      	subs	r3, #4
 801086e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8010870:	4a0c      	ldr	r2, [pc, #48]	; (80108a4 <pxPortInitialiseStack+0x64>)
 8010872:	68fb      	ldr	r3, [r7, #12]
 8010874:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8010876:	68fb      	ldr	r3, [r7, #12]
 8010878:	3b14      	subs	r3, #20
 801087a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 801087c:	687a      	ldr	r2, [r7, #4]
 801087e:	68fb      	ldr	r3, [r7, #12]
 8010880:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8010882:	68fb      	ldr	r3, [r7, #12]
 8010884:	3b04      	subs	r3, #4
 8010886:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8010888:	68fb      	ldr	r3, [r7, #12]
 801088a:	f06f 0202 	mvn.w	r2, #2
 801088e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8010890:	68fb      	ldr	r3, [r7, #12]
 8010892:	3b20      	subs	r3, #32
 8010894:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8010896:	68fb      	ldr	r3, [r7, #12]
}
 8010898:	4618      	mov	r0, r3
 801089a:	3714      	adds	r7, #20
 801089c:	46bd      	mov	sp, r7
 801089e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108a2:	4770      	bx	lr
 80108a4:	080108a9 	.word	0x080108a9

080108a8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80108a8:	b480      	push	{r7}
 80108aa:	b085      	sub	sp, #20
 80108ac:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80108ae:	2300      	movs	r3, #0
 80108b0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80108b2:	4b12      	ldr	r3, [pc, #72]	; (80108fc <prvTaskExitError+0x54>)
 80108b4:	681b      	ldr	r3, [r3, #0]
 80108b6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80108ba:	d00a      	beq.n	80108d2 <prvTaskExitError+0x2a>
	__asm volatile
 80108bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80108c0:	f383 8811 	msr	BASEPRI, r3
 80108c4:	f3bf 8f6f 	isb	sy
 80108c8:	f3bf 8f4f 	dsb	sy
 80108cc:	60fb      	str	r3, [r7, #12]
}
 80108ce:	bf00      	nop
 80108d0:	e7fe      	b.n	80108d0 <prvTaskExitError+0x28>
	__asm volatile
 80108d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80108d6:	f383 8811 	msr	BASEPRI, r3
 80108da:	f3bf 8f6f 	isb	sy
 80108de:	f3bf 8f4f 	dsb	sy
 80108e2:	60bb      	str	r3, [r7, #8]
}
 80108e4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80108e6:	bf00      	nop
 80108e8:	687b      	ldr	r3, [r7, #4]
 80108ea:	2b00      	cmp	r3, #0
 80108ec:	d0fc      	beq.n	80108e8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80108ee:	bf00      	nop
 80108f0:	bf00      	nop
 80108f2:	3714      	adds	r7, #20
 80108f4:	46bd      	mov	sp, r7
 80108f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108fa:	4770      	bx	lr
 80108fc:	2000011c 	.word	0x2000011c

08010900 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8010900:	4b07      	ldr	r3, [pc, #28]	; (8010920 <pxCurrentTCBConst2>)
 8010902:	6819      	ldr	r1, [r3, #0]
 8010904:	6808      	ldr	r0, [r1, #0]
 8010906:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801090a:	f380 8809 	msr	PSP, r0
 801090e:	f3bf 8f6f 	isb	sy
 8010912:	f04f 0000 	mov.w	r0, #0
 8010916:	f380 8811 	msr	BASEPRI, r0
 801091a:	4770      	bx	lr
 801091c:	f3af 8000 	nop.w

08010920 <pxCurrentTCBConst2>:
 8010920:	20000958 	.word	0x20000958
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8010924:	bf00      	nop
 8010926:	bf00      	nop

08010928 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8010928:	b480      	push	{r7}
 801092a:	b083      	sub	sp, #12
 801092c:	af00      	add	r7, sp, #0
	__asm volatile
 801092e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010932:	f383 8811 	msr	BASEPRI, r3
 8010936:	f3bf 8f6f 	isb	sy
 801093a:	f3bf 8f4f 	dsb	sy
 801093e:	607b      	str	r3, [r7, #4]
}
 8010940:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8010942:	4b0f      	ldr	r3, [pc, #60]	; (8010980 <vPortEnterCritical+0x58>)
 8010944:	681b      	ldr	r3, [r3, #0]
 8010946:	3301      	adds	r3, #1
 8010948:	4a0d      	ldr	r2, [pc, #52]	; (8010980 <vPortEnterCritical+0x58>)
 801094a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 801094c:	4b0c      	ldr	r3, [pc, #48]	; (8010980 <vPortEnterCritical+0x58>)
 801094e:	681b      	ldr	r3, [r3, #0]
 8010950:	2b01      	cmp	r3, #1
 8010952:	d10f      	bne.n	8010974 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8010954:	4b0b      	ldr	r3, [pc, #44]	; (8010984 <vPortEnterCritical+0x5c>)
 8010956:	681b      	ldr	r3, [r3, #0]
 8010958:	b2db      	uxtb	r3, r3
 801095a:	2b00      	cmp	r3, #0
 801095c:	d00a      	beq.n	8010974 <vPortEnterCritical+0x4c>
	__asm volatile
 801095e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010962:	f383 8811 	msr	BASEPRI, r3
 8010966:	f3bf 8f6f 	isb	sy
 801096a:	f3bf 8f4f 	dsb	sy
 801096e:	603b      	str	r3, [r7, #0]
}
 8010970:	bf00      	nop
 8010972:	e7fe      	b.n	8010972 <vPortEnterCritical+0x4a>
	}
}
 8010974:	bf00      	nop
 8010976:	370c      	adds	r7, #12
 8010978:	46bd      	mov	sp, r7
 801097a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801097e:	4770      	bx	lr
 8010980:	2000011c 	.word	0x2000011c
 8010984:	e000ed04 	.word	0xe000ed04

08010988 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8010988:	b480      	push	{r7}
 801098a:	b083      	sub	sp, #12
 801098c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801098e:	4b12      	ldr	r3, [pc, #72]	; (80109d8 <vPortExitCritical+0x50>)
 8010990:	681b      	ldr	r3, [r3, #0]
 8010992:	2b00      	cmp	r3, #0
 8010994:	d10a      	bne.n	80109ac <vPortExitCritical+0x24>
	__asm volatile
 8010996:	f04f 0350 	mov.w	r3, #80	; 0x50
 801099a:	f383 8811 	msr	BASEPRI, r3
 801099e:	f3bf 8f6f 	isb	sy
 80109a2:	f3bf 8f4f 	dsb	sy
 80109a6:	607b      	str	r3, [r7, #4]
}
 80109a8:	bf00      	nop
 80109aa:	e7fe      	b.n	80109aa <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80109ac:	4b0a      	ldr	r3, [pc, #40]	; (80109d8 <vPortExitCritical+0x50>)
 80109ae:	681b      	ldr	r3, [r3, #0]
 80109b0:	3b01      	subs	r3, #1
 80109b2:	4a09      	ldr	r2, [pc, #36]	; (80109d8 <vPortExitCritical+0x50>)
 80109b4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80109b6:	4b08      	ldr	r3, [pc, #32]	; (80109d8 <vPortExitCritical+0x50>)
 80109b8:	681b      	ldr	r3, [r3, #0]
 80109ba:	2b00      	cmp	r3, #0
 80109bc:	d105      	bne.n	80109ca <vPortExitCritical+0x42>
 80109be:	2300      	movs	r3, #0
 80109c0:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80109c2:	683b      	ldr	r3, [r7, #0]
 80109c4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80109c8:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80109ca:	bf00      	nop
 80109cc:	370c      	adds	r7, #12
 80109ce:	46bd      	mov	sp, r7
 80109d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109d4:	4770      	bx	lr
 80109d6:	bf00      	nop
 80109d8:	2000011c 	.word	0x2000011c
 80109dc:	00000000 	.word	0x00000000

080109e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80109e0:	f3ef 8009 	mrs	r0, PSP
 80109e4:	f3bf 8f6f 	isb	sy
 80109e8:	4b15      	ldr	r3, [pc, #84]	; (8010a40 <pxCurrentTCBConst>)
 80109ea:	681a      	ldr	r2, [r3, #0]
 80109ec:	f01e 0f10 	tst.w	lr, #16
 80109f0:	bf08      	it	eq
 80109f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80109f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80109fa:	6010      	str	r0, [r2, #0]
 80109fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8010a00:	f04f 0050 	mov.w	r0, #80	; 0x50
 8010a04:	f380 8811 	msr	BASEPRI, r0
 8010a08:	f3bf 8f4f 	dsb	sy
 8010a0c:	f3bf 8f6f 	isb	sy
 8010a10:	f7ff fb2e 	bl	8010070 <vTaskSwitchContext>
 8010a14:	f04f 0000 	mov.w	r0, #0
 8010a18:	f380 8811 	msr	BASEPRI, r0
 8010a1c:	bc09      	pop	{r0, r3}
 8010a1e:	6819      	ldr	r1, [r3, #0]
 8010a20:	6808      	ldr	r0, [r1, #0]
 8010a22:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010a26:	f01e 0f10 	tst.w	lr, #16
 8010a2a:	bf08      	it	eq
 8010a2c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8010a30:	f380 8809 	msr	PSP, r0
 8010a34:	f3bf 8f6f 	isb	sy
 8010a38:	4770      	bx	lr
 8010a3a:	bf00      	nop
 8010a3c:	f3af 8000 	nop.w

08010a40 <pxCurrentTCBConst>:
 8010a40:	20000958 	.word	0x20000958
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8010a44:	bf00      	nop
 8010a46:	bf00      	nop

08010a48 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8010a48:	b580      	push	{r7, lr}
 8010a4a:	b082      	sub	sp, #8
 8010a4c:	af00      	add	r7, sp, #0
	__asm volatile
 8010a4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a52:	f383 8811 	msr	BASEPRI, r3
 8010a56:	f3bf 8f6f 	isb	sy
 8010a5a:	f3bf 8f4f 	dsb	sy
 8010a5e:	607b      	str	r3, [r7, #4]
}
 8010a60:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8010a62:	f7ff fa4d 	bl	800ff00 <xTaskIncrementTick>
 8010a66:	4603      	mov	r3, r0
 8010a68:	2b00      	cmp	r3, #0
 8010a6a:	d003      	beq.n	8010a74 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8010a6c:	4b06      	ldr	r3, [pc, #24]	; (8010a88 <SysTick_Handler+0x40>)
 8010a6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010a72:	601a      	str	r2, [r3, #0]
 8010a74:	2300      	movs	r3, #0
 8010a76:	603b      	str	r3, [r7, #0]
	__asm volatile
 8010a78:	683b      	ldr	r3, [r7, #0]
 8010a7a:	f383 8811 	msr	BASEPRI, r3
}
 8010a7e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8010a80:	bf00      	nop
 8010a82:	3708      	adds	r7, #8
 8010a84:	46bd      	mov	sp, r7
 8010a86:	bd80      	pop	{r7, pc}
 8010a88:	e000ed04 	.word	0xe000ed04

08010a8c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8010a8c:	b580      	push	{r7, lr}
 8010a8e:	b08a      	sub	sp, #40	; 0x28
 8010a90:	af00      	add	r7, sp, #0
 8010a92:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8010a94:	2300      	movs	r3, #0
 8010a96:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8010a98:	f7ff f988 	bl	800fdac <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8010a9c:	4b5b      	ldr	r3, [pc, #364]	; (8010c0c <pvPortMalloc+0x180>)
 8010a9e:	681b      	ldr	r3, [r3, #0]
 8010aa0:	2b00      	cmp	r3, #0
 8010aa2:	d101      	bne.n	8010aa8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8010aa4:	f000 f920 	bl	8010ce8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8010aa8:	4b59      	ldr	r3, [pc, #356]	; (8010c10 <pvPortMalloc+0x184>)
 8010aaa:	681a      	ldr	r2, [r3, #0]
 8010aac:	687b      	ldr	r3, [r7, #4]
 8010aae:	4013      	ands	r3, r2
 8010ab0:	2b00      	cmp	r3, #0
 8010ab2:	f040 8093 	bne.w	8010bdc <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8010ab6:	687b      	ldr	r3, [r7, #4]
 8010ab8:	2b00      	cmp	r3, #0
 8010aba:	d01d      	beq.n	8010af8 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8010abc:	2208      	movs	r2, #8
 8010abe:	687b      	ldr	r3, [r7, #4]
 8010ac0:	4413      	add	r3, r2
 8010ac2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8010ac4:	687b      	ldr	r3, [r7, #4]
 8010ac6:	f003 0307 	and.w	r3, r3, #7
 8010aca:	2b00      	cmp	r3, #0
 8010acc:	d014      	beq.n	8010af8 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8010ace:	687b      	ldr	r3, [r7, #4]
 8010ad0:	f023 0307 	bic.w	r3, r3, #7
 8010ad4:	3308      	adds	r3, #8
 8010ad6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010ad8:	687b      	ldr	r3, [r7, #4]
 8010ada:	f003 0307 	and.w	r3, r3, #7
 8010ade:	2b00      	cmp	r3, #0
 8010ae0:	d00a      	beq.n	8010af8 <pvPortMalloc+0x6c>
	__asm volatile
 8010ae2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ae6:	f383 8811 	msr	BASEPRI, r3
 8010aea:	f3bf 8f6f 	isb	sy
 8010aee:	f3bf 8f4f 	dsb	sy
 8010af2:	617b      	str	r3, [r7, #20]
}
 8010af4:	bf00      	nop
 8010af6:	e7fe      	b.n	8010af6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8010af8:	687b      	ldr	r3, [r7, #4]
 8010afa:	2b00      	cmp	r3, #0
 8010afc:	d06e      	beq.n	8010bdc <pvPortMalloc+0x150>
 8010afe:	4b45      	ldr	r3, [pc, #276]	; (8010c14 <pvPortMalloc+0x188>)
 8010b00:	681b      	ldr	r3, [r3, #0]
 8010b02:	687a      	ldr	r2, [r7, #4]
 8010b04:	429a      	cmp	r2, r3
 8010b06:	d869      	bhi.n	8010bdc <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8010b08:	4b43      	ldr	r3, [pc, #268]	; (8010c18 <pvPortMalloc+0x18c>)
 8010b0a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8010b0c:	4b42      	ldr	r3, [pc, #264]	; (8010c18 <pvPortMalloc+0x18c>)
 8010b0e:	681b      	ldr	r3, [r3, #0]
 8010b10:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8010b12:	e004      	b.n	8010b1e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8010b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b16:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8010b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b1a:	681b      	ldr	r3, [r3, #0]
 8010b1c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8010b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b20:	685b      	ldr	r3, [r3, #4]
 8010b22:	687a      	ldr	r2, [r7, #4]
 8010b24:	429a      	cmp	r2, r3
 8010b26:	d903      	bls.n	8010b30 <pvPortMalloc+0xa4>
 8010b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b2a:	681b      	ldr	r3, [r3, #0]
 8010b2c:	2b00      	cmp	r3, #0
 8010b2e:	d1f1      	bne.n	8010b14 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8010b30:	4b36      	ldr	r3, [pc, #216]	; (8010c0c <pvPortMalloc+0x180>)
 8010b32:	681b      	ldr	r3, [r3, #0]
 8010b34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010b36:	429a      	cmp	r2, r3
 8010b38:	d050      	beq.n	8010bdc <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8010b3a:	6a3b      	ldr	r3, [r7, #32]
 8010b3c:	681b      	ldr	r3, [r3, #0]
 8010b3e:	2208      	movs	r2, #8
 8010b40:	4413      	add	r3, r2
 8010b42:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8010b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b46:	681a      	ldr	r2, [r3, #0]
 8010b48:	6a3b      	ldr	r3, [r7, #32]
 8010b4a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8010b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b4e:	685a      	ldr	r2, [r3, #4]
 8010b50:	687b      	ldr	r3, [r7, #4]
 8010b52:	1ad2      	subs	r2, r2, r3
 8010b54:	2308      	movs	r3, #8
 8010b56:	005b      	lsls	r3, r3, #1
 8010b58:	429a      	cmp	r2, r3
 8010b5a:	d91f      	bls.n	8010b9c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8010b5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010b5e:	687b      	ldr	r3, [r7, #4]
 8010b60:	4413      	add	r3, r2
 8010b62:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010b64:	69bb      	ldr	r3, [r7, #24]
 8010b66:	f003 0307 	and.w	r3, r3, #7
 8010b6a:	2b00      	cmp	r3, #0
 8010b6c:	d00a      	beq.n	8010b84 <pvPortMalloc+0xf8>
	__asm volatile
 8010b6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b72:	f383 8811 	msr	BASEPRI, r3
 8010b76:	f3bf 8f6f 	isb	sy
 8010b7a:	f3bf 8f4f 	dsb	sy
 8010b7e:	613b      	str	r3, [r7, #16]
}
 8010b80:	bf00      	nop
 8010b82:	e7fe      	b.n	8010b82 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8010b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b86:	685a      	ldr	r2, [r3, #4]
 8010b88:	687b      	ldr	r3, [r7, #4]
 8010b8a:	1ad2      	subs	r2, r2, r3
 8010b8c:	69bb      	ldr	r3, [r7, #24]
 8010b8e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8010b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b92:	687a      	ldr	r2, [r7, #4]
 8010b94:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8010b96:	69b8      	ldr	r0, [r7, #24]
 8010b98:	f000 f908 	bl	8010dac <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8010b9c:	4b1d      	ldr	r3, [pc, #116]	; (8010c14 <pvPortMalloc+0x188>)
 8010b9e:	681a      	ldr	r2, [r3, #0]
 8010ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ba2:	685b      	ldr	r3, [r3, #4]
 8010ba4:	1ad3      	subs	r3, r2, r3
 8010ba6:	4a1b      	ldr	r2, [pc, #108]	; (8010c14 <pvPortMalloc+0x188>)
 8010ba8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8010baa:	4b1a      	ldr	r3, [pc, #104]	; (8010c14 <pvPortMalloc+0x188>)
 8010bac:	681a      	ldr	r2, [r3, #0]
 8010bae:	4b1b      	ldr	r3, [pc, #108]	; (8010c1c <pvPortMalloc+0x190>)
 8010bb0:	681b      	ldr	r3, [r3, #0]
 8010bb2:	429a      	cmp	r2, r3
 8010bb4:	d203      	bcs.n	8010bbe <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8010bb6:	4b17      	ldr	r3, [pc, #92]	; (8010c14 <pvPortMalloc+0x188>)
 8010bb8:	681b      	ldr	r3, [r3, #0]
 8010bba:	4a18      	ldr	r2, [pc, #96]	; (8010c1c <pvPortMalloc+0x190>)
 8010bbc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8010bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010bc0:	685a      	ldr	r2, [r3, #4]
 8010bc2:	4b13      	ldr	r3, [pc, #76]	; (8010c10 <pvPortMalloc+0x184>)
 8010bc4:	681b      	ldr	r3, [r3, #0]
 8010bc6:	431a      	orrs	r2, r3
 8010bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010bca:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8010bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010bce:	2200      	movs	r2, #0
 8010bd0:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8010bd2:	4b13      	ldr	r3, [pc, #76]	; (8010c20 <pvPortMalloc+0x194>)
 8010bd4:	681b      	ldr	r3, [r3, #0]
 8010bd6:	3301      	adds	r3, #1
 8010bd8:	4a11      	ldr	r2, [pc, #68]	; (8010c20 <pvPortMalloc+0x194>)
 8010bda:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8010bdc:	f7ff f8f4 	bl	800fdc8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8010be0:	69fb      	ldr	r3, [r7, #28]
 8010be2:	f003 0307 	and.w	r3, r3, #7
 8010be6:	2b00      	cmp	r3, #0
 8010be8:	d00a      	beq.n	8010c00 <pvPortMalloc+0x174>
	__asm volatile
 8010bea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010bee:	f383 8811 	msr	BASEPRI, r3
 8010bf2:	f3bf 8f6f 	isb	sy
 8010bf6:	f3bf 8f4f 	dsb	sy
 8010bfa:	60fb      	str	r3, [r7, #12]
}
 8010bfc:	bf00      	nop
 8010bfe:	e7fe      	b.n	8010bfe <pvPortMalloc+0x172>
	return pvReturn;
 8010c00:	69fb      	ldr	r3, [r7, #28]
}
 8010c02:	4618      	mov	r0, r3
 8010c04:	3728      	adds	r7, #40	; 0x28
 8010c06:	46bd      	mov	sp, r7
 8010c08:	bd80      	pop	{r7, pc}
 8010c0a:	bf00      	nop
 8010c0c:	20001a84 	.word	0x20001a84
 8010c10:	20001a98 	.word	0x20001a98
 8010c14:	20001a88 	.word	0x20001a88
 8010c18:	20001a7c 	.word	0x20001a7c
 8010c1c:	20001a8c 	.word	0x20001a8c
 8010c20:	20001a90 	.word	0x20001a90

08010c24 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8010c24:	b580      	push	{r7, lr}
 8010c26:	b086      	sub	sp, #24
 8010c28:	af00      	add	r7, sp, #0
 8010c2a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8010c2c:	687b      	ldr	r3, [r7, #4]
 8010c2e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8010c30:	687b      	ldr	r3, [r7, #4]
 8010c32:	2b00      	cmp	r3, #0
 8010c34:	d04d      	beq.n	8010cd2 <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8010c36:	2308      	movs	r3, #8
 8010c38:	425b      	negs	r3, r3
 8010c3a:	697a      	ldr	r2, [r7, #20]
 8010c3c:	4413      	add	r3, r2
 8010c3e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8010c40:	697b      	ldr	r3, [r7, #20]
 8010c42:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8010c44:	693b      	ldr	r3, [r7, #16]
 8010c46:	685a      	ldr	r2, [r3, #4]
 8010c48:	4b24      	ldr	r3, [pc, #144]	; (8010cdc <vPortFree+0xb8>)
 8010c4a:	681b      	ldr	r3, [r3, #0]
 8010c4c:	4013      	ands	r3, r2
 8010c4e:	2b00      	cmp	r3, #0
 8010c50:	d10a      	bne.n	8010c68 <vPortFree+0x44>
	__asm volatile
 8010c52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c56:	f383 8811 	msr	BASEPRI, r3
 8010c5a:	f3bf 8f6f 	isb	sy
 8010c5e:	f3bf 8f4f 	dsb	sy
 8010c62:	60fb      	str	r3, [r7, #12]
}
 8010c64:	bf00      	nop
 8010c66:	e7fe      	b.n	8010c66 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8010c68:	693b      	ldr	r3, [r7, #16]
 8010c6a:	681b      	ldr	r3, [r3, #0]
 8010c6c:	2b00      	cmp	r3, #0
 8010c6e:	d00a      	beq.n	8010c86 <vPortFree+0x62>
	__asm volatile
 8010c70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c74:	f383 8811 	msr	BASEPRI, r3
 8010c78:	f3bf 8f6f 	isb	sy
 8010c7c:	f3bf 8f4f 	dsb	sy
 8010c80:	60bb      	str	r3, [r7, #8]
}
 8010c82:	bf00      	nop
 8010c84:	e7fe      	b.n	8010c84 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8010c86:	693b      	ldr	r3, [r7, #16]
 8010c88:	685a      	ldr	r2, [r3, #4]
 8010c8a:	4b14      	ldr	r3, [pc, #80]	; (8010cdc <vPortFree+0xb8>)
 8010c8c:	681b      	ldr	r3, [r3, #0]
 8010c8e:	4013      	ands	r3, r2
 8010c90:	2b00      	cmp	r3, #0
 8010c92:	d01e      	beq.n	8010cd2 <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8010c94:	693b      	ldr	r3, [r7, #16]
 8010c96:	681b      	ldr	r3, [r3, #0]
 8010c98:	2b00      	cmp	r3, #0
 8010c9a:	d11a      	bne.n	8010cd2 <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8010c9c:	693b      	ldr	r3, [r7, #16]
 8010c9e:	685a      	ldr	r2, [r3, #4]
 8010ca0:	4b0e      	ldr	r3, [pc, #56]	; (8010cdc <vPortFree+0xb8>)
 8010ca2:	681b      	ldr	r3, [r3, #0]
 8010ca4:	43db      	mvns	r3, r3
 8010ca6:	401a      	ands	r2, r3
 8010ca8:	693b      	ldr	r3, [r7, #16]
 8010caa:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8010cac:	f7ff f87e 	bl	800fdac <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8010cb0:	693b      	ldr	r3, [r7, #16]
 8010cb2:	685a      	ldr	r2, [r3, #4]
 8010cb4:	4b0a      	ldr	r3, [pc, #40]	; (8010ce0 <vPortFree+0xbc>)
 8010cb6:	681b      	ldr	r3, [r3, #0]
 8010cb8:	4413      	add	r3, r2
 8010cba:	4a09      	ldr	r2, [pc, #36]	; (8010ce0 <vPortFree+0xbc>)
 8010cbc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8010cbe:	6938      	ldr	r0, [r7, #16]
 8010cc0:	f000 f874 	bl	8010dac <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8010cc4:	4b07      	ldr	r3, [pc, #28]	; (8010ce4 <vPortFree+0xc0>)
 8010cc6:	681b      	ldr	r3, [r3, #0]
 8010cc8:	3301      	adds	r3, #1
 8010cca:	4a06      	ldr	r2, [pc, #24]	; (8010ce4 <vPortFree+0xc0>)
 8010ccc:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8010cce:	f7ff f87b 	bl	800fdc8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8010cd2:	bf00      	nop
 8010cd4:	3718      	adds	r7, #24
 8010cd6:	46bd      	mov	sp, r7
 8010cd8:	bd80      	pop	{r7, pc}
 8010cda:	bf00      	nop
 8010cdc:	20001a98 	.word	0x20001a98
 8010ce0:	20001a88 	.word	0x20001a88
 8010ce4:	20001a94 	.word	0x20001a94

08010ce8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8010ce8:	b480      	push	{r7}
 8010cea:	b085      	sub	sp, #20
 8010cec:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8010cee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010cf2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8010cf4:	4b27      	ldr	r3, [pc, #156]	; (8010d94 <prvHeapInit+0xac>)
 8010cf6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8010cf8:	68fb      	ldr	r3, [r7, #12]
 8010cfa:	f003 0307 	and.w	r3, r3, #7
 8010cfe:	2b00      	cmp	r3, #0
 8010d00:	d00c      	beq.n	8010d1c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8010d02:	68fb      	ldr	r3, [r7, #12]
 8010d04:	3307      	adds	r3, #7
 8010d06:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010d08:	68fb      	ldr	r3, [r7, #12]
 8010d0a:	f023 0307 	bic.w	r3, r3, #7
 8010d0e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8010d10:	68ba      	ldr	r2, [r7, #8]
 8010d12:	68fb      	ldr	r3, [r7, #12]
 8010d14:	1ad3      	subs	r3, r2, r3
 8010d16:	4a1f      	ldr	r2, [pc, #124]	; (8010d94 <prvHeapInit+0xac>)
 8010d18:	4413      	add	r3, r2
 8010d1a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8010d1c:	68fb      	ldr	r3, [r7, #12]
 8010d1e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8010d20:	4a1d      	ldr	r2, [pc, #116]	; (8010d98 <prvHeapInit+0xb0>)
 8010d22:	687b      	ldr	r3, [r7, #4]
 8010d24:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8010d26:	4b1c      	ldr	r3, [pc, #112]	; (8010d98 <prvHeapInit+0xb0>)
 8010d28:	2200      	movs	r2, #0
 8010d2a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8010d2c:	687b      	ldr	r3, [r7, #4]
 8010d2e:	68ba      	ldr	r2, [r7, #8]
 8010d30:	4413      	add	r3, r2
 8010d32:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8010d34:	2208      	movs	r2, #8
 8010d36:	68fb      	ldr	r3, [r7, #12]
 8010d38:	1a9b      	subs	r3, r3, r2
 8010d3a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010d3c:	68fb      	ldr	r3, [r7, #12]
 8010d3e:	f023 0307 	bic.w	r3, r3, #7
 8010d42:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8010d44:	68fb      	ldr	r3, [r7, #12]
 8010d46:	4a15      	ldr	r2, [pc, #84]	; (8010d9c <prvHeapInit+0xb4>)
 8010d48:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8010d4a:	4b14      	ldr	r3, [pc, #80]	; (8010d9c <prvHeapInit+0xb4>)
 8010d4c:	681b      	ldr	r3, [r3, #0]
 8010d4e:	2200      	movs	r2, #0
 8010d50:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8010d52:	4b12      	ldr	r3, [pc, #72]	; (8010d9c <prvHeapInit+0xb4>)
 8010d54:	681b      	ldr	r3, [r3, #0]
 8010d56:	2200      	movs	r2, #0
 8010d58:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8010d5a:	687b      	ldr	r3, [r7, #4]
 8010d5c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8010d5e:	683b      	ldr	r3, [r7, #0]
 8010d60:	68fa      	ldr	r2, [r7, #12]
 8010d62:	1ad2      	subs	r2, r2, r3
 8010d64:	683b      	ldr	r3, [r7, #0]
 8010d66:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8010d68:	4b0c      	ldr	r3, [pc, #48]	; (8010d9c <prvHeapInit+0xb4>)
 8010d6a:	681a      	ldr	r2, [r3, #0]
 8010d6c:	683b      	ldr	r3, [r7, #0]
 8010d6e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8010d70:	683b      	ldr	r3, [r7, #0]
 8010d72:	685b      	ldr	r3, [r3, #4]
 8010d74:	4a0a      	ldr	r2, [pc, #40]	; (8010da0 <prvHeapInit+0xb8>)
 8010d76:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8010d78:	683b      	ldr	r3, [r7, #0]
 8010d7a:	685b      	ldr	r3, [r3, #4]
 8010d7c:	4a09      	ldr	r2, [pc, #36]	; (8010da4 <prvHeapInit+0xbc>)
 8010d7e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8010d80:	4b09      	ldr	r3, [pc, #36]	; (8010da8 <prvHeapInit+0xc0>)
 8010d82:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8010d86:	601a      	str	r2, [r3, #0]
}
 8010d88:	bf00      	nop
 8010d8a:	3714      	adds	r7, #20
 8010d8c:	46bd      	mov	sp, r7
 8010d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d92:	4770      	bx	lr
 8010d94:	20000a7c 	.word	0x20000a7c
 8010d98:	20001a7c 	.word	0x20001a7c
 8010d9c:	20001a84 	.word	0x20001a84
 8010da0:	20001a8c 	.word	0x20001a8c
 8010da4:	20001a88 	.word	0x20001a88
 8010da8:	20001a98 	.word	0x20001a98

08010dac <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8010dac:	b480      	push	{r7}
 8010dae:	b085      	sub	sp, #20
 8010db0:	af00      	add	r7, sp, #0
 8010db2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8010db4:	4b28      	ldr	r3, [pc, #160]	; (8010e58 <prvInsertBlockIntoFreeList+0xac>)
 8010db6:	60fb      	str	r3, [r7, #12]
 8010db8:	e002      	b.n	8010dc0 <prvInsertBlockIntoFreeList+0x14>
 8010dba:	68fb      	ldr	r3, [r7, #12]
 8010dbc:	681b      	ldr	r3, [r3, #0]
 8010dbe:	60fb      	str	r3, [r7, #12]
 8010dc0:	68fb      	ldr	r3, [r7, #12]
 8010dc2:	681b      	ldr	r3, [r3, #0]
 8010dc4:	687a      	ldr	r2, [r7, #4]
 8010dc6:	429a      	cmp	r2, r3
 8010dc8:	d8f7      	bhi.n	8010dba <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8010dca:	68fb      	ldr	r3, [r7, #12]
 8010dcc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8010dce:	68fb      	ldr	r3, [r7, #12]
 8010dd0:	685b      	ldr	r3, [r3, #4]
 8010dd2:	68ba      	ldr	r2, [r7, #8]
 8010dd4:	4413      	add	r3, r2
 8010dd6:	687a      	ldr	r2, [r7, #4]
 8010dd8:	429a      	cmp	r2, r3
 8010dda:	d108      	bne.n	8010dee <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8010ddc:	68fb      	ldr	r3, [r7, #12]
 8010dde:	685a      	ldr	r2, [r3, #4]
 8010de0:	687b      	ldr	r3, [r7, #4]
 8010de2:	685b      	ldr	r3, [r3, #4]
 8010de4:	441a      	add	r2, r3
 8010de6:	68fb      	ldr	r3, [r7, #12]
 8010de8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8010dea:	68fb      	ldr	r3, [r7, #12]
 8010dec:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8010dee:	687b      	ldr	r3, [r7, #4]
 8010df0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8010df2:	687b      	ldr	r3, [r7, #4]
 8010df4:	685b      	ldr	r3, [r3, #4]
 8010df6:	68ba      	ldr	r2, [r7, #8]
 8010df8:	441a      	add	r2, r3
 8010dfa:	68fb      	ldr	r3, [r7, #12]
 8010dfc:	681b      	ldr	r3, [r3, #0]
 8010dfe:	429a      	cmp	r2, r3
 8010e00:	d118      	bne.n	8010e34 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8010e02:	68fb      	ldr	r3, [r7, #12]
 8010e04:	681a      	ldr	r2, [r3, #0]
 8010e06:	4b15      	ldr	r3, [pc, #84]	; (8010e5c <prvInsertBlockIntoFreeList+0xb0>)
 8010e08:	681b      	ldr	r3, [r3, #0]
 8010e0a:	429a      	cmp	r2, r3
 8010e0c:	d00d      	beq.n	8010e2a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8010e0e:	687b      	ldr	r3, [r7, #4]
 8010e10:	685a      	ldr	r2, [r3, #4]
 8010e12:	68fb      	ldr	r3, [r7, #12]
 8010e14:	681b      	ldr	r3, [r3, #0]
 8010e16:	685b      	ldr	r3, [r3, #4]
 8010e18:	441a      	add	r2, r3
 8010e1a:	687b      	ldr	r3, [r7, #4]
 8010e1c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8010e1e:	68fb      	ldr	r3, [r7, #12]
 8010e20:	681b      	ldr	r3, [r3, #0]
 8010e22:	681a      	ldr	r2, [r3, #0]
 8010e24:	687b      	ldr	r3, [r7, #4]
 8010e26:	601a      	str	r2, [r3, #0]
 8010e28:	e008      	b.n	8010e3c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8010e2a:	4b0c      	ldr	r3, [pc, #48]	; (8010e5c <prvInsertBlockIntoFreeList+0xb0>)
 8010e2c:	681a      	ldr	r2, [r3, #0]
 8010e2e:	687b      	ldr	r3, [r7, #4]
 8010e30:	601a      	str	r2, [r3, #0]
 8010e32:	e003      	b.n	8010e3c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8010e34:	68fb      	ldr	r3, [r7, #12]
 8010e36:	681a      	ldr	r2, [r3, #0]
 8010e38:	687b      	ldr	r3, [r7, #4]
 8010e3a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8010e3c:	68fa      	ldr	r2, [r7, #12]
 8010e3e:	687b      	ldr	r3, [r7, #4]
 8010e40:	429a      	cmp	r2, r3
 8010e42:	d002      	beq.n	8010e4a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8010e44:	68fb      	ldr	r3, [r7, #12]
 8010e46:	687a      	ldr	r2, [r7, #4]
 8010e48:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010e4a:	bf00      	nop
 8010e4c:	3714      	adds	r7, #20
 8010e4e:	46bd      	mov	sp, r7
 8010e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e54:	4770      	bx	lr
 8010e56:	bf00      	nop
 8010e58:	20001a7c 	.word	0x20001a7c
 8010e5c:	20001a84 	.word	0x20001a84

08010e60 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 8010e60:	b580      	push	{r7, lr}
 8010e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 8010e64:	2200      	movs	r2, #0
 8010e66:	4912      	ldr	r1, [pc, #72]	; (8010eb0 <MX_USB_Device_Init+0x50>)
 8010e68:	4812      	ldr	r0, [pc, #72]	; (8010eb4 <MX_USB_Device_Init+0x54>)
 8010e6a:	f7fc ff63 	bl	800dd34 <USBD_Init>
 8010e6e:	4603      	mov	r3, r0
 8010e70:	2b00      	cmp	r3, #0
 8010e72:	d001      	beq.n	8010e78 <MX_USB_Device_Init+0x18>
    Error_Handler();
 8010e74:	f7f0 feac 	bl	8001bd0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 8010e78:	490f      	ldr	r1, [pc, #60]	; (8010eb8 <MX_USB_Device_Init+0x58>)
 8010e7a:	480e      	ldr	r0, [pc, #56]	; (8010eb4 <MX_USB_Device_Init+0x54>)
 8010e7c:	f7fc ff8a 	bl	800dd94 <USBD_RegisterClass>
 8010e80:	4603      	mov	r3, r0
 8010e82:	2b00      	cmp	r3, #0
 8010e84:	d001      	beq.n	8010e8a <MX_USB_Device_Init+0x2a>
    Error_Handler();
 8010e86:	f7f0 fea3 	bl	8001bd0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 8010e8a:	490c      	ldr	r1, [pc, #48]	; (8010ebc <MX_USB_Device_Init+0x5c>)
 8010e8c:	4809      	ldr	r0, [pc, #36]	; (8010eb4 <MX_USB_Device_Init+0x54>)
 8010e8e:	f7fc fedb 	bl	800dc48 <USBD_CDC_RegisterInterface>
 8010e92:	4603      	mov	r3, r0
 8010e94:	2b00      	cmp	r3, #0
 8010e96:	d001      	beq.n	8010e9c <MX_USB_Device_Init+0x3c>
    Error_Handler();
 8010e98:	f7f0 fe9a 	bl	8001bd0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 8010e9c:	4805      	ldr	r0, [pc, #20]	; (8010eb4 <MX_USB_Device_Init+0x54>)
 8010e9e:	f7fc ffa0 	bl	800dde2 <USBD_Start>
 8010ea2:	4603      	mov	r3, r0
 8010ea4:	2b00      	cmp	r3, #0
 8010ea6:	d001      	beq.n	8010eac <MX_USB_Device_Init+0x4c>
    Error_Handler();
 8010ea8:	f7f0 fe92 	bl	8001bd0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 8010eac:	bf00      	nop
 8010eae:	bd80      	pop	{r7, pc}
 8010eb0:	20000134 	.word	0x20000134
 8010eb4:	20001a9c 	.word	0x20001a9c
 8010eb8:	20000018 	.word	0x20000018
 8010ebc:	20000120 	.word	0x20000120

08010ec0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8010ec0:	b580      	push	{r7, lr}
 8010ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8010ec4:	2200      	movs	r2, #0
 8010ec6:	4905      	ldr	r1, [pc, #20]	; (8010edc <CDC_Init_FS+0x1c>)
 8010ec8:	4805      	ldr	r0, [pc, #20]	; (8010ee0 <CDC_Init_FS+0x20>)
 8010eca:	f7fc fed2 	bl	800dc72 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8010ece:	4905      	ldr	r1, [pc, #20]	; (8010ee4 <CDC_Init_FS+0x24>)
 8010ed0:	4803      	ldr	r0, [pc, #12]	; (8010ee0 <CDC_Init_FS+0x20>)
 8010ed2:	f7fc feec 	bl	800dcae <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8010ed6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8010ed8:	4618      	mov	r0, r3
 8010eda:	bd80      	pop	{r7, pc}
 8010edc:	2000256c 	.word	0x2000256c
 8010ee0:	20001a9c 	.word	0x20001a9c
 8010ee4:	20001d6c 	.word	0x20001d6c

08010ee8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8010ee8:	b480      	push	{r7}
 8010eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8010eec:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8010eee:	4618      	mov	r0, r3
 8010ef0:	46bd      	mov	sp, r7
 8010ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ef6:	4770      	bx	lr

08010ef8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8010ef8:	b480      	push	{r7}
 8010efa:	b083      	sub	sp, #12
 8010efc:	af00      	add	r7, sp, #0
 8010efe:	4603      	mov	r3, r0
 8010f00:	6039      	str	r1, [r7, #0]
 8010f02:	71fb      	strb	r3, [r7, #7]
 8010f04:	4613      	mov	r3, r2
 8010f06:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8010f08:	79fb      	ldrb	r3, [r7, #7]
 8010f0a:	2b23      	cmp	r3, #35	; 0x23
 8010f0c:	d84a      	bhi.n	8010fa4 <CDC_Control_FS+0xac>
 8010f0e:	a201      	add	r2, pc, #4	; (adr r2, 8010f14 <CDC_Control_FS+0x1c>)
 8010f10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010f14:	08010fa5 	.word	0x08010fa5
 8010f18:	08010fa5 	.word	0x08010fa5
 8010f1c:	08010fa5 	.word	0x08010fa5
 8010f20:	08010fa5 	.word	0x08010fa5
 8010f24:	08010fa5 	.word	0x08010fa5
 8010f28:	08010fa5 	.word	0x08010fa5
 8010f2c:	08010fa5 	.word	0x08010fa5
 8010f30:	08010fa5 	.word	0x08010fa5
 8010f34:	08010fa5 	.word	0x08010fa5
 8010f38:	08010fa5 	.word	0x08010fa5
 8010f3c:	08010fa5 	.word	0x08010fa5
 8010f40:	08010fa5 	.word	0x08010fa5
 8010f44:	08010fa5 	.word	0x08010fa5
 8010f48:	08010fa5 	.word	0x08010fa5
 8010f4c:	08010fa5 	.word	0x08010fa5
 8010f50:	08010fa5 	.word	0x08010fa5
 8010f54:	08010fa5 	.word	0x08010fa5
 8010f58:	08010fa5 	.word	0x08010fa5
 8010f5c:	08010fa5 	.word	0x08010fa5
 8010f60:	08010fa5 	.word	0x08010fa5
 8010f64:	08010fa5 	.word	0x08010fa5
 8010f68:	08010fa5 	.word	0x08010fa5
 8010f6c:	08010fa5 	.word	0x08010fa5
 8010f70:	08010fa5 	.word	0x08010fa5
 8010f74:	08010fa5 	.word	0x08010fa5
 8010f78:	08010fa5 	.word	0x08010fa5
 8010f7c:	08010fa5 	.word	0x08010fa5
 8010f80:	08010fa5 	.word	0x08010fa5
 8010f84:	08010fa5 	.word	0x08010fa5
 8010f88:	08010fa5 	.word	0x08010fa5
 8010f8c:	08010fa5 	.word	0x08010fa5
 8010f90:	08010fa5 	.word	0x08010fa5
 8010f94:	08010fa5 	.word	0x08010fa5
 8010f98:	08010fa5 	.word	0x08010fa5
 8010f9c:	08010fa5 	.word	0x08010fa5
 8010fa0:	08010fa5 	.word	0x08010fa5
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8010fa4:	bf00      	nop
  }

  return (USBD_OK);
 8010fa6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8010fa8:	4618      	mov	r0, r3
 8010faa:	370c      	adds	r7, #12
 8010fac:	46bd      	mov	sp, r7
 8010fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fb2:	4770      	bx	lr

08010fb4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8010fb4:	b580      	push	{r7, lr}
 8010fb6:	b082      	sub	sp, #8
 8010fb8:	af00      	add	r7, sp, #0
 8010fba:	6078      	str	r0, [r7, #4]
 8010fbc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8010fbe:	6879      	ldr	r1, [r7, #4]
 8010fc0:	4805      	ldr	r0, [pc, #20]	; (8010fd8 <CDC_Receive_FS+0x24>)
 8010fc2:	f7fc fe74 	bl	800dcae <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8010fc6:	4804      	ldr	r0, [pc, #16]	; (8010fd8 <CDC_Receive_FS+0x24>)
 8010fc8:	f7fc fe8a 	bl	800dce0 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8010fcc:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8010fce:	4618      	mov	r0, r3
 8010fd0:	3708      	adds	r7, #8
 8010fd2:	46bd      	mov	sp, r7
 8010fd4:	bd80      	pop	{r7, pc}
 8010fd6:	bf00      	nop
 8010fd8:	20001a9c 	.word	0x20001a9c

08010fdc <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8010fdc:	b480      	push	{r7}
 8010fde:	b087      	sub	sp, #28
 8010fe0:	af00      	add	r7, sp, #0
 8010fe2:	60f8      	str	r0, [r7, #12]
 8010fe4:	60b9      	str	r1, [r7, #8]
 8010fe6:	4613      	mov	r3, r2
 8010fe8:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8010fea:	2300      	movs	r3, #0
 8010fec:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8010fee:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8010ff2:	4618      	mov	r0, r3
 8010ff4:	371c      	adds	r7, #28
 8010ff6:	46bd      	mov	sp, r7
 8010ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ffc:	4770      	bx	lr
	...

08011000 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011000:	b480      	push	{r7}
 8011002:	b083      	sub	sp, #12
 8011004:	af00      	add	r7, sp, #0
 8011006:	4603      	mov	r3, r0
 8011008:	6039      	str	r1, [r7, #0]
 801100a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 801100c:	683b      	ldr	r3, [r7, #0]
 801100e:	2212      	movs	r2, #18
 8011010:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 8011012:	4b03      	ldr	r3, [pc, #12]	; (8011020 <USBD_CDC_DeviceDescriptor+0x20>)
}
 8011014:	4618      	mov	r0, r3
 8011016:	370c      	adds	r7, #12
 8011018:	46bd      	mov	sp, r7
 801101a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801101e:	4770      	bx	lr
 8011020:	20000154 	.word	0x20000154

08011024 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011024:	b480      	push	{r7}
 8011026:	b083      	sub	sp, #12
 8011028:	af00      	add	r7, sp, #0
 801102a:	4603      	mov	r3, r0
 801102c:	6039      	str	r1, [r7, #0]
 801102e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8011030:	683b      	ldr	r3, [r7, #0]
 8011032:	2204      	movs	r2, #4
 8011034:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8011036:	4b03      	ldr	r3, [pc, #12]	; (8011044 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 8011038:	4618      	mov	r0, r3
 801103a:	370c      	adds	r7, #12
 801103c:	46bd      	mov	sp, r7
 801103e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011042:	4770      	bx	lr
 8011044:	20000168 	.word	0x20000168

08011048 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011048:	b580      	push	{r7, lr}
 801104a:	b082      	sub	sp, #8
 801104c:	af00      	add	r7, sp, #0
 801104e:	4603      	mov	r3, r0
 8011050:	6039      	str	r1, [r7, #0]
 8011052:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8011054:	79fb      	ldrb	r3, [r7, #7]
 8011056:	2b00      	cmp	r3, #0
 8011058:	d105      	bne.n	8011066 <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 801105a:	683a      	ldr	r2, [r7, #0]
 801105c:	4907      	ldr	r1, [pc, #28]	; (801107c <USBD_CDC_ProductStrDescriptor+0x34>)
 801105e:	4808      	ldr	r0, [pc, #32]	; (8011080 <USBD_CDC_ProductStrDescriptor+0x38>)
 8011060:	f7fd fea7 	bl	800edb2 <USBD_GetString>
 8011064:	e004      	b.n	8011070 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8011066:	683a      	ldr	r2, [r7, #0]
 8011068:	4904      	ldr	r1, [pc, #16]	; (801107c <USBD_CDC_ProductStrDescriptor+0x34>)
 801106a:	4805      	ldr	r0, [pc, #20]	; (8011080 <USBD_CDC_ProductStrDescriptor+0x38>)
 801106c:	f7fd fea1 	bl	800edb2 <USBD_GetString>
  }
  return USBD_StrDesc;
 8011070:	4b02      	ldr	r3, [pc, #8]	; (801107c <USBD_CDC_ProductStrDescriptor+0x34>)
}
 8011072:	4618      	mov	r0, r3
 8011074:	3708      	adds	r7, #8
 8011076:	46bd      	mov	sp, r7
 8011078:	bd80      	pop	{r7, pc}
 801107a:	bf00      	nop
 801107c:	20002d6c 	.word	0x20002d6c
 8011080:	08014a38 	.word	0x08014a38

08011084 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011084:	b580      	push	{r7, lr}
 8011086:	b082      	sub	sp, #8
 8011088:	af00      	add	r7, sp, #0
 801108a:	4603      	mov	r3, r0
 801108c:	6039      	str	r1, [r7, #0]
 801108e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8011090:	683a      	ldr	r2, [r7, #0]
 8011092:	4904      	ldr	r1, [pc, #16]	; (80110a4 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 8011094:	4804      	ldr	r0, [pc, #16]	; (80110a8 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 8011096:	f7fd fe8c 	bl	800edb2 <USBD_GetString>
  return USBD_StrDesc;
 801109a:	4b02      	ldr	r3, [pc, #8]	; (80110a4 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 801109c:	4618      	mov	r0, r3
 801109e:	3708      	adds	r7, #8
 80110a0:	46bd      	mov	sp, r7
 80110a2:	bd80      	pop	{r7, pc}
 80110a4:	20002d6c 	.word	0x20002d6c
 80110a8:	08014a50 	.word	0x08014a50

080110ac <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80110ac:	b580      	push	{r7, lr}
 80110ae:	b082      	sub	sp, #8
 80110b0:	af00      	add	r7, sp, #0
 80110b2:	4603      	mov	r3, r0
 80110b4:	6039      	str	r1, [r7, #0]
 80110b6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80110b8:	683b      	ldr	r3, [r7, #0]
 80110ba:	221a      	movs	r2, #26
 80110bc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80110be:	f000 f843 	bl	8011148 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 80110c2:	4b02      	ldr	r3, [pc, #8]	; (80110cc <USBD_CDC_SerialStrDescriptor+0x20>)
}
 80110c4:	4618      	mov	r0, r3
 80110c6:	3708      	adds	r7, #8
 80110c8:	46bd      	mov	sp, r7
 80110ca:	bd80      	pop	{r7, pc}
 80110cc:	2000016c 	.word	0x2000016c

080110d0 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80110d0:	b580      	push	{r7, lr}
 80110d2:	b082      	sub	sp, #8
 80110d4:	af00      	add	r7, sp, #0
 80110d6:	4603      	mov	r3, r0
 80110d8:	6039      	str	r1, [r7, #0]
 80110da:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80110dc:	79fb      	ldrb	r3, [r7, #7]
 80110de:	2b00      	cmp	r3, #0
 80110e0:	d105      	bne.n	80110ee <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 80110e2:	683a      	ldr	r2, [r7, #0]
 80110e4:	4907      	ldr	r1, [pc, #28]	; (8011104 <USBD_CDC_ConfigStrDescriptor+0x34>)
 80110e6:	4808      	ldr	r0, [pc, #32]	; (8011108 <USBD_CDC_ConfigStrDescriptor+0x38>)
 80110e8:	f7fd fe63 	bl	800edb2 <USBD_GetString>
 80110ec:	e004      	b.n	80110f8 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 80110ee:	683a      	ldr	r2, [r7, #0]
 80110f0:	4904      	ldr	r1, [pc, #16]	; (8011104 <USBD_CDC_ConfigStrDescriptor+0x34>)
 80110f2:	4805      	ldr	r0, [pc, #20]	; (8011108 <USBD_CDC_ConfigStrDescriptor+0x38>)
 80110f4:	f7fd fe5d 	bl	800edb2 <USBD_GetString>
  }
  return USBD_StrDesc;
 80110f8:	4b02      	ldr	r3, [pc, #8]	; (8011104 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 80110fa:	4618      	mov	r0, r3
 80110fc:	3708      	adds	r7, #8
 80110fe:	46bd      	mov	sp, r7
 8011100:	bd80      	pop	{r7, pc}
 8011102:	bf00      	nop
 8011104:	20002d6c 	.word	0x20002d6c
 8011108:	08014a64 	.word	0x08014a64

0801110c <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801110c:	b580      	push	{r7, lr}
 801110e:	b082      	sub	sp, #8
 8011110:	af00      	add	r7, sp, #0
 8011112:	4603      	mov	r3, r0
 8011114:	6039      	str	r1, [r7, #0]
 8011116:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8011118:	79fb      	ldrb	r3, [r7, #7]
 801111a:	2b00      	cmp	r3, #0
 801111c:	d105      	bne.n	801112a <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 801111e:	683a      	ldr	r2, [r7, #0]
 8011120:	4907      	ldr	r1, [pc, #28]	; (8011140 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8011122:	4808      	ldr	r0, [pc, #32]	; (8011144 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8011124:	f7fd fe45 	bl	800edb2 <USBD_GetString>
 8011128:	e004      	b.n	8011134 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 801112a:	683a      	ldr	r2, [r7, #0]
 801112c:	4904      	ldr	r1, [pc, #16]	; (8011140 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 801112e:	4805      	ldr	r0, [pc, #20]	; (8011144 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8011130:	f7fd fe3f 	bl	800edb2 <USBD_GetString>
  }
  return USBD_StrDesc;
 8011134:	4b02      	ldr	r3, [pc, #8]	; (8011140 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 8011136:	4618      	mov	r0, r3
 8011138:	3708      	adds	r7, #8
 801113a:	46bd      	mov	sp, r7
 801113c:	bd80      	pop	{r7, pc}
 801113e:	bf00      	nop
 8011140:	20002d6c 	.word	0x20002d6c
 8011144:	08014a70 	.word	0x08014a70

08011148 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8011148:	b580      	push	{r7, lr}
 801114a:	b084      	sub	sp, #16
 801114c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801114e:	4b0f      	ldr	r3, [pc, #60]	; (801118c <Get_SerialNum+0x44>)
 8011150:	681b      	ldr	r3, [r3, #0]
 8011152:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8011154:	4b0e      	ldr	r3, [pc, #56]	; (8011190 <Get_SerialNum+0x48>)
 8011156:	681b      	ldr	r3, [r3, #0]
 8011158:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801115a:	4b0e      	ldr	r3, [pc, #56]	; (8011194 <Get_SerialNum+0x4c>)
 801115c:	681b      	ldr	r3, [r3, #0]
 801115e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8011160:	68fa      	ldr	r2, [r7, #12]
 8011162:	687b      	ldr	r3, [r7, #4]
 8011164:	4413      	add	r3, r2
 8011166:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8011168:	68fb      	ldr	r3, [r7, #12]
 801116a:	2b00      	cmp	r3, #0
 801116c:	d009      	beq.n	8011182 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801116e:	2208      	movs	r2, #8
 8011170:	4909      	ldr	r1, [pc, #36]	; (8011198 <Get_SerialNum+0x50>)
 8011172:	68f8      	ldr	r0, [r7, #12]
 8011174:	f000 f814 	bl	80111a0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8011178:	2204      	movs	r2, #4
 801117a:	4908      	ldr	r1, [pc, #32]	; (801119c <Get_SerialNum+0x54>)
 801117c:	68b8      	ldr	r0, [r7, #8]
 801117e:	f000 f80f 	bl	80111a0 <IntToUnicode>
  }
}
 8011182:	bf00      	nop
 8011184:	3710      	adds	r7, #16
 8011186:	46bd      	mov	sp, r7
 8011188:	bd80      	pop	{r7, pc}
 801118a:	bf00      	nop
 801118c:	1fff7590 	.word	0x1fff7590
 8011190:	1fff7594 	.word	0x1fff7594
 8011194:	1fff7598 	.word	0x1fff7598
 8011198:	2000016e 	.word	0x2000016e
 801119c:	2000017e 	.word	0x2000017e

080111a0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80111a0:	b480      	push	{r7}
 80111a2:	b087      	sub	sp, #28
 80111a4:	af00      	add	r7, sp, #0
 80111a6:	60f8      	str	r0, [r7, #12]
 80111a8:	60b9      	str	r1, [r7, #8]
 80111aa:	4613      	mov	r3, r2
 80111ac:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80111ae:	2300      	movs	r3, #0
 80111b0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80111b2:	2300      	movs	r3, #0
 80111b4:	75fb      	strb	r3, [r7, #23]
 80111b6:	e027      	b.n	8011208 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80111b8:	68fb      	ldr	r3, [r7, #12]
 80111ba:	0f1b      	lsrs	r3, r3, #28
 80111bc:	2b09      	cmp	r3, #9
 80111be:	d80b      	bhi.n	80111d8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80111c0:	68fb      	ldr	r3, [r7, #12]
 80111c2:	0f1b      	lsrs	r3, r3, #28
 80111c4:	b2da      	uxtb	r2, r3
 80111c6:	7dfb      	ldrb	r3, [r7, #23]
 80111c8:	005b      	lsls	r3, r3, #1
 80111ca:	4619      	mov	r1, r3
 80111cc:	68bb      	ldr	r3, [r7, #8]
 80111ce:	440b      	add	r3, r1
 80111d0:	3230      	adds	r2, #48	; 0x30
 80111d2:	b2d2      	uxtb	r2, r2
 80111d4:	701a      	strb	r2, [r3, #0]
 80111d6:	e00a      	b.n	80111ee <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80111d8:	68fb      	ldr	r3, [r7, #12]
 80111da:	0f1b      	lsrs	r3, r3, #28
 80111dc:	b2da      	uxtb	r2, r3
 80111de:	7dfb      	ldrb	r3, [r7, #23]
 80111e0:	005b      	lsls	r3, r3, #1
 80111e2:	4619      	mov	r1, r3
 80111e4:	68bb      	ldr	r3, [r7, #8]
 80111e6:	440b      	add	r3, r1
 80111e8:	3237      	adds	r2, #55	; 0x37
 80111ea:	b2d2      	uxtb	r2, r2
 80111ec:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80111ee:	68fb      	ldr	r3, [r7, #12]
 80111f0:	011b      	lsls	r3, r3, #4
 80111f2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80111f4:	7dfb      	ldrb	r3, [r7, #23]
 80111f6:	005b      	lsls	r3, r3, #1
 80111f8:	3301      	adds	r3, #1
 80111fa:	68ba      	ldr	r2, [r7, #8]
 80111fc:	4413      	add	r3, r2
 80111fe:	2200      	movs	r2, #0
 8011200:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8011202:	7dfb      	ldrb	r3, [r7, #23]
 8011204:	3301      	adds	r3, #1
 8011206:	75fb      	strb	r3, [r7, #23]
 8011208:	7dfa      	ldrb	r2, [r7, #23]
 801120a:	79fb      	ldrb	r3, [r7, #7]
 801120c:	429a      	cmp	r2, r3
 801120e:	d3d3      	bcc.n	80111b8 <IntToUnicode+0x18>
  }
}
 8011210:	bf00      	nop
 8011212:	bf00      	nop
 8011214:	371c      	adds	r7, #28
 8011216:	46bd      	mov	sp, r7
 8011218:	f85d 7b04 	ldr.w	r7, [sp], #4
 801121c:	4770      	bx	lr
	...

08011220 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011220:	b580      	push	{r7, lr}
 8011222:	b098      	sub	sp, #96	; 0x60
 8011224:	af00      	add	r7, sp, #0
 8011226:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8011228:	f107 030c 	add.w	r3, r7, #12
 801122c:	2254      	movs	r2, #84	; 0x54
 801122e:	2100      	movs	r1, #0
 8011230:	4618      	mov	r0, r3
 8011232:	f001 f9ab 	bl	801258c <memset>
  if(pcdHandle->Instance==USB)
 8011236:	687b      	ldr	r3, [r7, #4]
 8011238:	681b      	ldr	r3, [r3, #0]
 801123a:	4a15      	ldr	r2, [pc, #84]	; (8011290 <HAL_PCD_MspInit+0x70>)
 801123c:	4293      	cmp	r3, r2
 801123e:	d122      	bne.n	8011286 <HAL_PCD_MspInit+0x66>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8011240:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8011244:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8011246:	2300      	movs	r3, #0
 8011248:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 801124a:	f107 030c 	add.w	r3, r7, #12
 801124e:	4618      	mov	r0, r3
 8011250:	f7f6 fe76 	bl	8007f40 <HAL_RCCEx_PeriphCLKConfig>
 8011254:	4603      	mov	r3, r0
 8011256:	2b00      	cmp	r3, #0
 8011258:	d001      	beq.n	801125e <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 801125a:	f7f0 fcb9 	bl	8001bd0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 801125e:	4b0d      	ldr	r3, [pc, #52]	; (8011294 <HAL_PCD_MspInit+0x74>)
 8011260:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011262:	4a0c      	ldr	r2, [pc, #48]	; (8011294 <HAL_PCD_MspInit+0x74>)
 8011264:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8011268:	6593      	str	r3, [r2, #88]	; 0x58
 801126a:	4b0a      	ldr	r3, [pc, #40]	; (8011294 <HAL_PCD_MspInit+0x74>)
 801126c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801126e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8011272:	60bb      	str	r3, [r7, #8]
 8011274:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 5, 0);
 8011276:	2200      	movs	r2, #0
 8011278:	2105      	movs	r1, #5
 801127a:	2014      	movs	r0, #20
 801127c:	f7f3 fb00 	bl	8004880 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 8011280:	2014      	movs	r0, #20
 8011282:	f7f3 fb17 	bl	80048b4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8011286:	bf00      	nop
 8011288:	3760      	adds	r7, #96	; 0x60
 801128a:	46bd      	mov	sp, r7
 801128c:	bd80      	pop	{r7, pc}
 801128e:	bf00      	nop
 8011290:	40005c00 	.word	0x40005c00
 8011294:	40021000 	.word	0x40021000

08011298 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011298:	b580      	push	{r7, lr}
 801129a:	b082      	sub	sp, #8
 801129c:	af00      	add	r7, sp, #0
 801129e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80112a0:	687b      	ldr	r3, [r7, #4]
 80112a2:	f8d3 22f0 	ldr.w	r2, [r3, #752]	; 0x2f0
 80112a6:	687b      	ldr	r3, [r7, #4]
 80112a8:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 80112ac:	4619      	mov	r1, r3
 80112ae:	4610      	mov	r0, r2
 80112b0:	f7fc fde2 	bl	800de78 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 80112b4:	bf00      	nop
 80112b6:	3708      	adds	r7, #8
 80112b8:	46bd      	mov	sp, r7
 80112ba:	bd80      	pop	{r7, pc}

080112bc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80112bc:	b580      	push	{r7, lr}
 80112be:	b082      	sub	sp, #8
 80112c0:	af00      	add	r7, sp, #0
 80112c2:	6078      	str	r0, [r7, #4]
 80112c4:	460b      	mov	r3, r1
 80112c6:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80112c8:	687b      	ldr	r3, [r7, #4]
 80112ca:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 80112ce:	78fa      	ldrb	r2, [r7, #3]
 80112d0:	6879      	ldr	r1, [r7, #4]
 80112d2:	4613      	mov	r3, r2
 80112d4:	009b      	lsls	r3, r3, #2
 80112d6:	4413      	add	r3, r2
 80112d8:	00db      	lsls	r3, r3, #3
 80112da:	440b      	add	r3, r1
 80112dc:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80112e0:	681a      	ldr	r2, [r3, #0]
 80112e2:	78fb      	ldrb	r3, [r7, #3]
 80112e4:	4619      	mov	r1, r3
 80112e6:	f7fc fe1c 	bl	800df22 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 80112ea:	bf00      	nop
 80112ec:	3708      	adds	r7, #8
 80112ee:	46bd      	mov	sp, r7
 80112f0:	bd80      	pop	{r7, pc}

080112f2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80112f2:	b580      	push	{r7, lr}
 80112f4:	b082      	sub	sp, #8
 80112f6:	af00      	add	r7, sp, #0
 80112f8:	6078      	str	r0, [r7, #4]
 80112fa:	460b      	mov	r3, r1
 80112fc:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80112fe:	687b      	ldr	r3, [r7, #4]
 8011300:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 8011304:	78fa      	ldrb	r2, [r7, #3]
 8011306:	6879      	ldr	r1, [r7, #4]
 8011308:	4613      	mov	r3, r2
 801130a:	009b      	lsls	r3, r3, #2
 801130c:	4413      	add	r3, r2
 801130e:	00db      	lsls	r3, r3, #3
 8011310:	440b      	add	r3, r1
 8011312:	333c      	adds	r3, #60	; 0x3c
 8011314:	681a      	ldr	r2, [r3, #0]
 8011316:	78fb      	ldrb	r3, [r7, #3]
 8011318:	4619      	mov	r1, r3
 801131a:	f7fc fe65 	bl	800dfe8 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 801131e:	bf00      	nop
 8011320:	3708      	adds	r7, #8
 8011322:	46bd      	mov	sp, r7
 8011324:	bd80      	pop	{r7, pc}

08011326 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011326:	b580      	push	{r7, lr}
 8011328:	b082      	sub	sp, #8
 801132a:	af00      	add	r7, sp, #0
 801132c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801132e:	687b      	ldr	r3, [r7, #4]
 8011330:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8011334:	4618      	mov	r0, r3
 8011336:	f7fc ff79 	bl	800e22c <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 801133a:	bf00      	nop
 801133c:	3708      	adds	r7, #8
 801133e:	46bd      	mov	sp, r7
 8011340:	bd80      	pop	{r7, pc}

08011342 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011342:	b580      	push	{r7, lr}
 8011344:	b084      	sub	sp, #16
 8011346:	af00      	add	r7, sp, #0
 8011348:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801134a:	2301      	movs	r3, #1
 801134c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 801134e:	687b      	ldr	r3, [r7, #4]
 8011350:	689b      	ldr	r3, [r3, #8]
 8011352:	2b02      	cmp	r3, #2
 8011354:	d001      	beq.n	801135a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8011356:	f7f0 fc3b 	bl	8001bd0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801135a:	687b      	ldr	r3, [r7, #4]
 801135c:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8011360:	7bfa      	ldrb	r2, [r7, #15]
 8011362:	4611      	mov	r1, r2
 8011364:	4618      	mov	r0, r3
 8011366:	f7fc ff23 	bl	800e1b0 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801136a:	687b      	ldr	r3, [r7, #4]
 801136c:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8011370:	4618      	mov	r0, r3
 8011372:	f7fc fecf 	bl	800e114 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 8011376:	bf00      	nop
 8011378:	3710      	adds	r7, #16
 801137a:	46bd      	mov	sp, r7
 801137c:	bd80      	pop	{r7, pc}
	...

08011380 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011380:	b580      	push	{r7, lr}
 8011382:	b082      	sub	sp, #8
 8011384:	af00      	add	r7, sp, #0
 8011386:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8011388:	687b      	ldr	r3, [r7, #4]
 801138a:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 801138e:	4618      	mov	r0, r3
 8011390:	f7fc ff1e 	bl	800e1d0 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8011394:	687b      	ldr	r3, [r7, #4]
 8011396:	699b      	ldr	r3, [r3, #24]
 8011398:	2b00      	cmp	r3, #0
 801139a:	d005      	beq.n	80113a8 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801139c:	4b04      	ldr	r3, [pc, #16]	; (80113b0 <HAL_PCD_SuspendCallback+0x30>)
 801139e:	691b      	ldr	r3, [r3, #16]
 80113a0:	4a03      	ldr	r2, [pc, #12]	; (80113b0 <HAL_PCD_SuspendCallback+0x30>)
 80113a2:	f043 0306 	orr.w	r3, r3, #6
 80113a6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 80113a8:	bf00      	nop
 80113aa:	3708      	adds	r7, #8
 80113ac:	46bd      	mov	sp, r7
 80113ae:	bd80      	pop	{r7, pc}
 80113b0:	e000ed00 	.word	0xe000ed00

080113b4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80113b4:	b580      	push	{r7, lr}
 80113b6:	b082      	sub	sp, #8
 80113b8:	af00      	add	r7, sp, #0
 80113ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 80113bc:	687b      	ldr	r3, [r7, #4]
 80113be:	699b      	ldr	r3, [r3, #24]
 80113c0:	2b00      	cmp	r3, #0
 80113c2:	d007      	beq.n	80113d4 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80113c4:	4b08      	ldr	r3, [pc, #32]	; (80113e8 <HAL_PCD_ResumeCallback+0x34>)
 80113c6:	691b      	ldr	r3, [r3, #16]
 80113c8:	4a07      	ldr	r2, [pc, #28]	; (80113e8 <HAL_PCD_ResumeCallback+0x34>)
 80113ca:	f023 0306 	bic.w	r3, r3, #6
 80113ce:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 80113d0:	f000 f9fa 	bl	80117c8 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80113d4:	687b      	ldr	r3, [r7, #4]
 80113d6:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 80113da:	4618      	mov	r0, r3
 80113dc:	f7fc ff0e 	bl	800e1fc <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 80113e0:	bf00      	nop
 80113e2:	3708      	adds	r7, #8
 80113e4:	46bd      	mov	sp, r7
 80113e6:	bd80      	pop	{r7, pc}
 80113e8:	e000ed00 	.word	0xe000ed00

080113ec <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80113ec:	b580      	push	{r7, lr}
 80113ee:	b082      	sub	sp, #8
 80113f0:	af00      	add	r7, sp, #0
 80113f2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 80113f4:	4a2b      	ldr	r2, [pc, #172]	; (80114a4 <USBD_LL_Init+0xb8>)
 80113f6:	687b      	ldr	r3, [r7, #4]
 80113f8:	f8c2 32f0 	str.w	r3, [r2, #752]	; 0x2f0
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 80113fc:	687b      	ldr	r3, [r7, #4]
 80113fe:	4a29      	ldr	r2, [pc, #164]	; (80114a4 <USBD_LL_Init+0xb8>)
 8011400:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_FS.Instance = USB;
 8011404:	4b27      	ldr	r3, [pc, #156]	; (80114a4 <USBD_LL_Init+0xb8>)
 8011406:	4a28      	ldr	r2, [pc, #160]	; (80114a8 <USBD_LL_Init+0xbc>)
 8011408:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 801140a:	4b26      	ldr	r3, [pc, #152]	; (80114a4 <USBD_LL_Init+0xb8>)
 801140c:	2208      	movs	r2, #8
 801140e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8011410:	4b24      	ldr	r3, [pc, #144]	; (80114a4 <USBD_LL_Init+0xb8>)
 8011412:	2202      	movs	r2, #2
 8011414:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8011416:	4b23      	ldr	r3, [pc, #140]	; (80114a4 <USBD_LL_Init+0xb8>)
 8011418:	2202      	movs	r2, #2
 801141a:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 801141c:	4b21      	ldr	r3, [pc, #132]	; (80114a4 <USBD_LL_Init+0xb8>)
 801141e:	2200      	movs	r2, #0
 8011420:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8011422:	4b20      	ldr	r3, [pc, #128]	; (80114a4 <USBD_LL_Init+0xb8>)
 8011424:	2200      	movs	r2, #0
 8011426:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8011428:	4b1e      	ldr	r3, [pc, #120]	; (80114a4 <USBD_LL_Init+0xb8>)
 801142a:	2200      	movs	r2, #0
 801142c:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 801142e:	4b1d      	ldr	r3, [pc, #116]	; (80114a4 <USBD_LL_Init+0xb8>)
 8011430:	2200      	movs	r2, #0
 8011432:	621a      	str	r2, [r3, #32]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8011434:	481b      	ldr	r0, [pc, #108]	; (80114a4 <USBD_LL_Init+0xb8>)
 8011436:	f7f4 fa4a 	bl	80058ce <HAL_PCD_Init>
 801143a:	4603      	mov	r3, r0
 801143c:	2b00      	cmp	r3, #0
 801143e:	d001      	beq.n	8011444 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 8011440:	f7f0 fbc6 	bl	8001bd0 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8011444:	687b      	ldr	r3, [r7, #4]
 8011446:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 801144a:	2318      	movs	r3, #24
 801144c:	2200      	movs	r2, #0
 801144e:	2100      	movs	r1, #0
 8011450:	f7f5 ff03 	bl	800725a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8011454:	687b      	ldr	r3, [r7, #4]
 8011456:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 801145a:	2358      	movs	r3, #88	; 0x58
 801145c:	2200      	movs	r2, #0
 801145e:	2180      	movs	r1, #128	; 0x80
 8011460:	f7f5 fefb 	bl	800725a <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8011464:	687b      	ldr	r3, [r7, #4]
 8011466:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 801146a:	23c0      	movs	r3, #192	; 0xc0
 801146c:	2200      	movs	r2, #0
 801146e:	2181      	movs	r1, #129	; 0x81
 8011470:	f7f5 fef3 	bl	800725a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8011474:	687b      	ldr	r3, [r7, #4]
 8011476:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 801147a:	f44f 7388 	mov.w	r3, #272	; 0x110
 801147e:	2200      	movs	r2, #0
 8011480:	2101      	movs	r1, #1
 8011482:	f7f5 feea 	bl	800725a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8011486:	687b      	ldr	r3, [r7, #4]
 8011488:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 801148c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011490:	2200      	movs	r2, #0
 8011492:	2182      	movs	r1, #130	; 0x82
 8011494:	f7f5 fee1 	bl	800725a <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8011498:	2300      	movs	r3, #0
}
 801149a:	4618      	mov	r0, r3
 801149c:	3708      	adds	r7, #8
 801149e:	46bd      	mov	sp, r7
 80114a0:	bd80      	pop	{r7, pc}
 80114a2:	bf00      	nop
 80114a4:	20002f6c 	.word	0x20002f6c
 80114a8:	40005c00 	.word	0x40005c00

080114ac <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80114ac:	b580      	push	{r7, lr}
 80114ae:	b084      	sub	sp, #16
 80114b0:	af00      	add	r7, sp, #0
 80114b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80114b4:	2300      	movs	r3, #0
 80114b6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80114b8:	2300      	movs	r3, #0
 80114ba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80114bc:	687b      	ldr	r3, [r7, #4]
 80114be:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80114c2:	4618      	mov	r0, r3
 80114c4:	f7f4 fae8 	bl	8005a98 <HAL_PCD_Start>
 80114c8:	4603      	mov	r3, r0
 80114ca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80114cc:	7bfb      	ldrb	r3, [r7, #15]
 80114ce:	4618      	mov	r0, r3
 80114d0:	f000 f980 	bl	80117d4 <USBD_Get_USB_Status>
 80114d4:	4603      	mov	r3, r0
 80114d6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80114d8:	7bbb      	ldrb	r3, [r7, #14]
}
 80114da:	4618      	mov	r0, r3
 80114dc:	3710      	adds	r7, #16
 80114de:	46bd      	mov	sp, r7
 80114e0:	bd80      	pop	{r7, pc}

080114e2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80114e2:	b580      	push	{r7, lr}
 80114e4:	b084      	sub	sp, #16
 80114e6:	af00      	add	r7, sp, #0
 80114e8:	6078      	str	r0, [r7, #4]
 80114ea:	4608      	mov	r0, r1
 80114ec:	4611      	mov	r1, r2
 80114ee:	461a      	mov	r2, r3
 80114f0:	4603      	mov	r3, r0
 80114f2:	70fb      	strb	r3, [r7, #3]
 80114f4:	460b      	mov	r3, r1
 80114f6:	70bb      	strb	r3, [r7, #2]
 80114f8:	4613      	mov	r3, r2
 80114fa:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80114fc:	2300      	movs	r3, #0
 80114fe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011500:	2300      	movs	r3, #0
 8011502:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8011504:	687b      	ldr	r3, [r7, #4]
 8011506:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 801150a:	78bb      	ldrb	r3, [r7, #2]
 801150c:	883a      	ldrh	r2, [r7, #0]
 801150e:	78f9      	ldrb	r1, [r7, #3]
 8011510:	f7f4 fc30 	bl	8005d74 <HAL_PCD_EP_Open>
 8011514:	4603      	mov	r3, r0
 8011516:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011518:	7bfb      	ldrb	r3, [r7, #15]
 801151a:	4618      	mov	r0, r3
 801151c:	f000 f95a 	bl	80117d4 <USBD_Get_USB_Status>
 8011520:	4603      	mov	r3, r0
 8011522:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011524:	7bbb      	ldrb	r3, [r7, #14]
}
 8011526:	4618      	mov	r0, r3
 8011528:	3710      	adds	r7, #16
 801152a:	46bd      	mov	sp, r7
 801152c:	bd80      	pop	{r7, pc}

0801152e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801152e:	b580      	push	{r7, lr}
 8011530:	b084      	sub	sp, #16
 8011532:	af00      	add	r7, sp, #0
 8011534:	6078      	str	r0, [r7, #4]
 8011536:	460b      	mov	r3, r1
 8011538:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801153a:	2300      	movs	r3, #0
 801153c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801153e:	2300      	movs	r3, #0
 8011540:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8011542:	687b      	ldr	r3, [r7, #4]
 8011544:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8011548:	78fa      	ldrb	r2, [r7, #3]
 801154a:	4611      	mov	r1, r2
 801154c:	4618      	mov	r0, r3
 801154e:	f7f4 fc77 	bl	8005e40 <HAL_PCD_EP_Close>
 8011552:	4603      	mov	r3, r0
 8011554:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011556:	7bfb      	ldrb	r3, [r7, #15]
 8011558:	4618      	mov	r0, r3
 801155a:	f000 f93b 	bl	80117d4 <USBD_Get_USB_Status>
 801155e:	4603      	mov	r3, r0
 8011560:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011562:	7bbb      	ldrb	r3, [r7, #14]
}
 8011564:	4618      	mov	r0, r3
 8011566:	3710      	adds	r7, #16
 8011568:	46bd      	mov	sp, r7
 801156a:	bd80      	pop	{r7, pc}

0801156c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801156c:	b580      	push	{r7, lr}
 801156e:	b084      	sub	sp, #16
 8011570:	af00      	add	r7, sp, #0
 8011572:	6078      	str	r0, [r7, #4]
 8011574:	460b      	mov	r3, r1
 8011576:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011578:	2300      	movs	r3, #0
 801157a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801157c:	2300      	movs	r3, #0
 801157e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8011580:	687b      	ldr	r3, [r7, #4]
 8011582:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8011586:	78fa      	ldrb	r2, [r7, #3]
 8011588:	4611      	mov	r1, r2
 801158a:	4618      	mov	r0, r3
 801158c:	f7f4 fd38 	bl	8006000 <HAL_PCD_EP_SetStall>
 8011590:	4603      	mov	r3, r0
 8011592:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011594:	7bfb      	ldrb	r3, [r7, #15]
 8011596:	4618      	mov	r0, r3
 8011598:	f000 f91c 	bl	80117d4 <USBD_Get_USB_Status>
 801159c:	4603      	mov	r3, r0
 801159e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80115a0:	7bbb      	ldrb	r3, [r7, #14]
}
 80115a2:	4618      	mov	r0, r3
 80115a4:	3710      	adds	r7, #16
 80115a6:	46bd      	mov	sp, r7
 80115a8:	bd80      	pop	{r7, pc}

080115aa <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80115aa:	b580      	push	{r7, lr}
 80115ac:	b084      	sub	sp, #16
 80115ae:	af00      	add	r7, sp, #0
 80115b0:	6078      	str	r0, [r7, #4]
 80115b2:	460b      	mov	r3, r1
 80115b4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80115b6:	2300      	movs	r3, #0
 80115b8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80115ba:	2300      	movs	r3, #0
 80115bc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80115be:	687b      	ldr	r3, [r7, #4]
 80115c0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80115c4:	78fa      	ldrb	r2, [r7, #3]
 80115c6:	4611      	mov	r1, r2
 80115c8:	4618      	mov	r0, r3
 80115ca:	f7f4 fd6b 	bl	80060a4 <HAL_PCD_EP_ClrStall>
 80115ce:	4603      	mov	r3, r0
 80115d0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80115d2:	7bfb      	ldrb	r3, [r7, #15]
 80115d4:	4618      	mov	r0, r3
 80115d6:	f000 f8fd 	bl	80117d4 <USBD_Get_USB_Status>
 80115da:	4603      	mov	r3, r0
 80115dc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80115de:	7bbb      	ldrb	r3, [r7, #14]
}
 80115e0:	4618      	mov	r0, r3
 80115e2:	3710      	adds	r7, #16
 80115e4:	46bd      	mov	sp, r7
 80115e6:	bd80      	pop	{r7, pc}

080115e8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80115e8:	b480      	push	{r7}
 80115ea:	b085      	sub	sp, #20
 80115ec:	af00      	add	r7, sp, #0
 80115ee:	6078      	str	r0, [r7, #4]
 80115f0:	460b      	mov	r3, r1
 80115f2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80115f4:	687b      	ldr	r3, [r7, #4]
 80115f6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80115fa:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80115fc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8011600:	2b00      	cmp	r3, #0
 8011602:	da0c      	bge.n	801161e <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8011604:	78fb      	ldrb	r3, [r7, #3]
 8011606:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801160a:	68f9      	ldr	r1, [r7, #12]
 801160c:	1c5a      	adds	r2, r3, #1
 801160e:	4613      	mov	r3, r2
 8011610:	009b      	lsls	r3, r3, #2
 8011612:	4413      	add	r3, r2
 8011614:	00db      	lsls	r3, r3, #3
 8011616:	440b      	add	r3, r1
 8011618:	3302      	adds	r3, #2
 801161a:	781b      	ldrb	r3, [r3, #0]
 801161c:	e00b      	b.n	8011636 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 801161e:	78fb      	ldrb	r3, [r7, #3]
 8011620:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8011624:	68f9      	ldr	r1, [r7, #12]
 8011626:	4613      	mov	r3, r2
 8011628:	009b      	lsls	r3, r3, #2
 801162a:	4413      	add	r3, r2
 801162c:	00db      	lsls	r3, r3, #3
 801162e:	440b      	add	r3, r1
 8011630:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8011634:	781b      	ldrb	r3, [r3, #0]
  }
}
 8011636:	4618      	mov	r0, r3
 8011638:	3714      	adds	r7, #20
 801163a:	46bd      	mov	sp, r7
 801163c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011640:	4770      	bx	lr

08011642 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8011642:	b580      	push	{r7, lr}
 8011644:	b084      	sub	sp, #16
 8011646:	af00      	add	r7, sp, #0
 8011648:	6078      	str	r0, [r7, #4]
 801164a:	460b      	mov	r3, r1
 801164c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801164e:	2300      	movs	r3, #0
 8011650:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011652:	2300      	movs	r3, #0
 8011654:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8011656:	687b      	ldr	r3, [r7, #4]
 8011658:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801165c:	78fa      	ldrb	r2, [r7, #3]
 801165e:	4611      	mov	r1, r2
 8011660:	4618      	mov	r0, r3
 8011662:	f7f4 fb62 	bl	8005d2a <HAL_PCD_SetAddress>
 8011666:	4603      	mov	r3, r0
 8011668:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801166a:	7bfb      	ldrb	r3, [r7, #15]
 801166c:	4618      	mov	r0, r3
 801166e:	f000 f8b1 	bl	80117d4 <USBD_Get_USB_Status>
 8011672:	4603      	mov	r3, r0
 8011674:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011676:	7bbb      	ldrb	r3, [r7, #14]
}
 8011678:	4618      	mov	r0, r3
 801167a:	3710      	adds	r7, #16
 801167c:	46bd      	mov	sp, r7
 801167e:	bd80      	pop	{r7, pc}

08011680 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8011680:	b580      	push	{r7, lr}
 8011682:	b086      	sub	sp, #24
 8011684:	af00      	add	r7, sp, #0
 8011686:	60f8      	str	r0, [r7, #12]
 8011688:	607a      	str	r2, [r7, #4]
 801168a:	603b      	str	r3, [r7, #0]
 801168c:	460b      	mov	r3, r1
 801168e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011690:	2300      	movs	r3, #0
 8011692:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011694:	2300      	movs	r3, #0
 8011696:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8011698:	68fb      	ldr	r3, [r7, #12]
 801169a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 801169e:	7af9      	ldrb	r1, [r7, #11]
 80116a0:	683b      	ldr	r3, [r7, #0]
 80116a2:	687a      	ldr	r2, [r7, #4]
 80116a4:	f7f4 fc69 	bl	8005f7a <HAL_PCD_EP_Transmit>
 80116a8:	4603      	mov	r3, r0
 80116aa:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80116ac:	7dfb      	ldrb	r3, [r7, #23]
 80116ae:	4618      	mov	r0, r3
 80116b0:	f000 f890 	bl	80117d4 <USBD_Get_USB_Status>
 80116b4:	4603      	mov	r3, r0
 80116b6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80116b8:	7dbb      	ldrb	r3, [r7, #22]
}
 80116ba:	4618      	mov	r0, r3
 80116bc:	3718      	adds	r7, #24
 80116be:	46bd      	mov	sp, r7
 80116c0:	bd80      	pop	{r7, pc}

080116c2 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80116c2:	b580      	push	{r7, lr}
 80116c4:	b086      	sub	sp, #24
 80116c6:	af00      	add	r7, sp, #0
 80116c8:	60f8      	str	r0, [r7, #12]
 80116ca:	607a      	str	r2, [r7, #4]
 80116cc:	603b      	str	r3, [r7, #0]
 80116ce:	460b      	mov	r3, r1
 80116d0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80116d2:	2300      	movs	r3, #0
 80116d4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80116d6:	2300      	movs	r3, #0
 80116d8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80116da:	68fb      	ldr	r3, [r7, #12]
 80116dc:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80116e0:	7af9      	ldrb	r1, [r7, #11]
 80116e2:	683b      	ldr	r3, [r7, #0]
 80116e4:	687a      	ldr	r2, [r7, #4]
 80116e6:	f7f4 fbf3 	bl	8005ed0 <HAL_PCD_EP_Receive>
 80116ea:	4603      	mov	r3, r0
 80116ec:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80116ee:	7dfb      	ldrb	r3, [r7, #23]
 80116f0:	4618      	mov	r0, r3
 80116f2:	f000 f86f 	bl	80117d4 <USBD_Get_USB_Status>
 80116f6:	4603      	mov	r3, r0
 80116f8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80116fa:	7dbb      	ldrb	r3, [r7, #22]
}
 80116fc:	4618      	mov	r0, r3
 80116fe:	3718      	adds	r7, #24
 8011700:	46bd      	mov	sp, r7
 8011702:	bd80      	pop	{r7, pc}

08011704 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011704:	b580      	push	{r7, lr}
 8011706:	b082      	sub	sp, #8
 8011708:	af00      	add	r7, sp, #0
 801170a:	6078      	str	r0, [r7, #4]
 801170c:	460b      	mov	r3, r1
 801170e:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8011710:	687b      	ldr	r3, [r7, #4]
 8011712:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8011716:	78fa      	ldrb	r2, [r7, #3]
 8011718:	4611      	mov	r1, r2
 801171a:	4618      	mov	r0, r3
 801171c:	f7f4 fc15 	bl	8005f4a <HAL_PCD_EP_GetRxCount>
 8011720:	4603      	mov	r3, r0
}
 8011722:	4618      	mov	r0, r3
 8011724:	3708      	adds	r7, #8
 8011726:	46bd      	mov	sp, r7
 8011728:	bd80      	pop	{r7, pc}
	...

0801172c <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801172c:	b580      	push	{r7, lr}
 801172e:	b082      	sub	sp, #8
 8011730:	af00      	add	r7, sp, #0
 8011732:	6078      	str	r0, [r7, #4]
 8011734:	460b      	mov	r3, r1
 8011736:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 8011738:	78fb      	ldrb	r3, [r7, #3]
 801173a:	2b00      	cmp	r3, #0
 801173c:	d002      	beq.n	8011744 <HAL_PCDEx_LPM_Callback+0x18>
 801173e:	2b01      	cmp	r3, #1
 8011740:	d013      	beq.n	801176a <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 8011742:	e023      	b.n	801178c <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 8011744:	687b      	ldr	r3, [r7, #4]
 8011746:	699b      	ldr	r3, [r3, #24]
 8011748:	2b00      	cmp	r3, #0
 801174a:	d007      	beq.n	801175c <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 801174c:	f000 f83c 	bl	80117c8 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8011750:	4b10      	ldr	r3, [pc, #64]	; (8011794 <HAL_PCDEx_LPM_Callback+0x68>)
 8011752:	691b      	ldr	r3, [r3, #16]
 8011754:	4a0f      	ldr	r2, [pc, #60]	; (8011794 <HAL_PCDEx_LPM_Callback+0x68>)
 8011756:	f023 0306 	bic.w	r3, r3, #6
 801175a:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 801175c:	687b      	ldr	r3, [r7, #4]
 801175e:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8011762:	4618      	mov	r0, r3
 8011764:	f7fc fd4a 	bl	800e1fc <USBD_LL_Resume>
    break;
 8011768:	e010      	b.n	801178c <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 801176a:	687b      	ldr	r3, [r7, #4]
 801176c:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8011770:	4618      	mov	r0, r3
 8011772:	f7fc fd2d 	bl	800e1d0 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8011776:	687b      	ldr	r3, [r7, #4]
 8011778:	699b      	ldr	r3, [r3, #24]
 801177a:	2b00      	cmp	r3, #0
 801177c:	d005      	beq.n	801178a <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801177e:	4b05      	ldr	r3, [pc, #20]	; (8011794 <HAL_PCDEx_LPM_Callback+0x68>)
 8011780:	691b      	ldr	r3, [r3, #16]
 8011782:	4a04      	ldr	r2, [pc, #16]	; (8011794 <HAL_PCDEx_LPM_Callback+0x68>)
 8011784:	f043 0306 	orr.w	r3, r3, #6
 8011788:	6113      	str	r3, [r2, #16]
    break;
 801178a:	bf00      	nop
}
 801178c:	bf00      	nop
 801178e:	3708      	adds	r7, #8
 8011790:	46bd      	mov	sp, r7
 8011792:	bd80      	pop	{r7, pc}
 8011794:	e000ed00 	.word	0xe000ed00

08011798 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8011798:	b480      	push	{r7}
 801179a:	b083      	sub	sp, #12
 801179c:	af00      	add	r7, sp, #0
 801179e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80117a0:	4b03      	ldr	r3, [pc, #12]	; (80117b0 <USBD_static_malloc+0x18>)
}
 80117a2:	4618      	mov	r0, r3
 80117a4:	370c      	adds	r7, #12
 80117a6:	46bd      	mov	sp, r7
 80117a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117ac:	4770      	bx	lr
 80117ae:	bf00      	nop
 80117b0:	20003260 	.word	0x20003260

080117b4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80117b4:	b480      	push	{r7}
 80117b6:	b083      	sub	sp, #12
 80117b8:	af00      	add	r7, sp, #0
 80117ba:	6078      	str	r0, [r7, #4]

}
 80117bc:	bf00      	nop
 80117be:	370c      	adds	r7, #12
 80117c0:	46bd      	mov	sp, r7
 80117c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117c6:	4770      	bx	lr

080117c8 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 80117c8:	b580      	push	{r7, lr}
 80117ca:	af00      	add	r7, sp, #0
  SystemClock_Config();
 80117cc:	f7f0 f990 	bl	8001af0 <SystemClock_Config>
}
 80117d0:	bf00      	nop
 80117d2:	bd80      	pop	{r7, pc}

080117d4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80117d4:	b480      	push	{r7}
 80117d6:	b085      	sub	sp, #20
 80117d8:	af00      	add	r7, sp, #0
 80117da:	4603      	mov	r3, r0
 80117dc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80117de:	2300      	movs	r3, #0
 80117e0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80117e2:	79fb      	ldrb	r3, [r7, #7]
 80117e4:	2b03      	cmp	r3, #3
 80117e6:	d817      	bhi.n	8011818 <USBD_Get_USB_Status+0x44>
 80117e8:	a201      	add	r2, pc, #4	; (adr r2, 80117f0 <USBD_Get_USB_Status+0x1c>)
 80117ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80117ee:	bf00      	nop
 80117f0:	08011801 	.word	0x08011801
 80117f4:	08011807 	.word	0x08011807
 80117f8:	0801180d 	.word	0x0801180d
 80117fc:	08011813 	.word	0x08011813
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8011800:	2300      	movs	r3, #0
 8011802:	73fb      	strb	r3, [r7, #15]
    break;
 8011804:	e00b      	b.n	801181e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8011806:	2303      	movs	r3, #3
 8011808:	73fb      	strb	r3, [r7, #15]
    break;
 801180a:	e008      	b.n	801181e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801180c:	2301      	movs	r3, #1
 801180e:	73fb      	strb	r3, [r7, #15]
    break;
 8011810:	e005      	b.n	801181e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8011812:	2303      	movs	r3, #3
 8011814:	73fb      	strb	r3, [r7, #15]
    break;
 8011816:	e002      	b.n	801181e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8011818:	2303      	movs	r3, #3
 801181a:	73fb      	strb	r3, [r7, #15]
    break;
 801181c:	bf00      	nop
  }
  return usb_status;
 801181e:	7bfb      	ldrb	r3, [r7, #15]
}
 8011820:	4618      	mov	r0, r3
 8011822:	3714      	adds	r7, #20
 8011824:	46bd      	mov	sp, r7
 8011826:	f85d 7b04 	ldr.w	r7, [sp], #4
 801182a:	4770      	bx	lr

0801182c <__cvt>:
 801182c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011830:	ec55 4b10 	vmov	r4, r5, d0
 8011834:	2d00      	cmp	r5, #0
 8011836:	460e      	mov	r6, r1
 8011838:	4619      	mov	r1, r3
 801183a:	462b      	mov	r3, r5
 801183c:	bfbb      	ittet	lt
 801183e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8011842:	461d      	movlt	r5, r3
 8011844:	2300      	movge	r3, #0
 8011846:	232d      	movlt	r3, #45	; 0x2d
 8011848:	700b      	strb	r3, [r1, #0]
 801184a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801184c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8011850:	4691      	mov	r9, r2
 8011852:	f023 0820 	bic.w	r8, r3, #32
 8011856:	bfbc      	itt	lt
 8011858:	4622      	movlt	r2, r4
 801185a:	4614      	movlt	r4, r2
 801185c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8011860:	d005      	beq.n	801186e <__cvt+0x42>
 8011862:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8011866:	d100      	bne.n	801186a <__cvt+0x3e>
 8011868:	3601      	adds	r6, #1
 801186a:	2102      	movs	r1, #2
 801186c:	e000      	b.n	8011870 <__cvt+0x44>
 801186e:	2103      	movs	r1, #3
 8011870:	ab03      	add	r3, sp, #12
 8011872:	9301      	str	r3, [sp, #4]
 8011874:	ab02      	add	r3, sp, #8
 8011876:	9300      	str	r3, [sp, #0]
 8011878:	ec45 4b10 	vmov	d0, r4, r5
 801187c:	4653      	mov	r3, sl
 801187e:	4632      	mov	r2, r6
 8011880:	f000 ff9a 	bl	80127b8 <_dtoa_r>
 8011884:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8011888:	4607      	mov	r7, r0
 801188a:	d102      	bne.n	8011892 <__cvt+0x66>
 801188c:	f019 0f01 	tst.w	r9, #1
 8011890:	d022      	beq.n	80118d8 <__cvt+0xac>
 8011892:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8011896:	eb07 0906 	add.w	r9, r7, r6
 801189a:	d110      	bne.n	80118be <__cvt+0x92>
 801189c:	783b      	ldrb	r3, [r7, #0]
 801189e:	2b30      	cmp	r3, #48	; 0x30
 80118a0:	d10a      	bne.n	80118b8 <__cvt+0x8c>
 80118a2:	2200      	movs	r2, #0
 80118a4:	2300      	movs	r3, #0
 80118a6:	4620      	mov	r0, r4
 80118a8:	4629      	mov	r1, r5
 80118aa:	f7ef f935 	bl	8000b18 <__aeabi_dcmpeq>
 80118ae:	b918      	cbnz	r0, 80118b8 <__cvt+0x8c>
 80118b0:	f1c6 0601 	rsb	r6, r6, #1
 80118b4:	f8ca 6000 	str.w	r6, [sl]
 80118b8:	f8da 3000 	ldr.w	r3, [sl]
 80118bc:	4499      	add	r9, r3
 80118be:	2200      	movs	r2, #0
 80118c0:	2300      	movs	r3, #0
 80118c2:	4620      	mov	r0, r4
 80118c4:	4629      	mov	r1, r5
 80118c6:	f7ef f927 	bl	8000b18 <__aeabi_dcmpeq>
 80118ca:	b108      	cbz	r0, 80118d0 <__cvt+0xa4>
 80118cc:	f8cd 900c 	str.w	r9, [sp, #12]
 80118d0:	2230      	movs	r2, #48	; 0x30
 80118d2:	9b03      	ldr	r3, [sp, #12]
 80118d4:	454b      	cmp	r3, r9
 80118d6:	d307      	bcc.n	80118e8 <__cvt+0xbc>
 80118d8:	9b03      	ldr	r3, [sp, #12]
 80118da:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80118dc:	1bdb      	subs	r3, r3, r7
 80118de:	4638      	mov	r0, r7
 80118e0:	6013      	str	r3, [r2, #0]
 80118e2:	b004      	add	sp, #16
 80118e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80118e8:	1c59      	adds	r1, r3, #1
 80118ea:	9103      	str	r1, [sp, #12]
 80118ec:	701a      	strb	r2, [r3, #0]
 80118ee:	e7f0      	b.n	80118d2 <__cvt+0xa6>

080118f0 <__exponent>:
 80118f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80118f2:	4603      	mov	r3, r0
 80118f4:	2900      	cmp	r1, #0
 80118f6:	bfb8      	it	lt
 80118f8:	4249      	neglt	r1, r1
 80118fa:	f803 2b02 	strb.w	r2, [r3], #2
 80118fe:	bfb4      	ite	lt
 8011900:	222d      	movlt	r2, #45	; 0x2d
 8011902:	222b      	movge	r2, #43	; 0x2b
 8011904:	2909      	cmp	r1, #9
 8011906:	7042      	strb	r2, [r0, #1]
 8011908:	dd2a      	ble.n	8011960 <__exponent+0x70>
 801190a:	f10d 0207 	add.w	r2, sp, #7
 801190e:	4617      	mov	r7, r2
 8011910:	260a      	movs	r6, #10
 8011912:	4694      	mov	ip, r2
 8011914:	fb91 f5f6 	sdiv	r5, r1, r6
 8011918:	fb06 1415 	mls	r4, r6, r5, r1
 801191c:	3430      	adds	r4, #48	; 0x30
 801191e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8011922:	460c      	mov	r4, r1
 8011924:	2c63      	cmp	r4, #99	; 0x63
 8011926:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 801192a:	4629      	mov	r1, r5
 801192c:	dcf1      	bgt.n	8011912 <__exponent+0x22>
 801192e:	3130      	adds	r1, #48	; 0x30
 8011930:	f1ac 0402 	sub.w	r4, ip, #2
 8011934:	f802 1c01 	strb.w	r1, [r2, #-1]
 8011938:	1c41      	adds	r1, r0, #1
 801193a:	4622      	mov	r2, r4
 801193c:	42ba      	cmp	r2, r7
 801193e:	d30a      	bcc.n	8011956 <__exponent+0x66>
 8011940:	f10d 0209 	add.w	r2, sp, #9
 8011944:	eba2 020c 	sub.w	r2, r2, ip
 8011948:	42bc      	cmp	r4, r7
 801194a:	bf88      	it	hi
 801194c:	2200      	movhi	r2, #0
 801194e:	4413      	add	r3, r2
 8011950:	1a18      	subs	r0, r3, r0
 8011952:	b003      	add	sp, #12
 8011954:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011956:	f812 5b01 	ldrb.w	r5, [r2], #1
 801195a:	f801 5f01 	strb.w	r5, [r1, #1]!
 801195e:	e7ed      	b.n	801193c <__exponent+0x4c>
 8011960:	2330      	movs	r3, #48	; 0x30
 8011962:	3130      	adds	r1, #48	; 0x30
 8011964:	7083      	strb	r3, [r0, #2]
 8011966:	70c1      	strb	r1, [r0, #3]
 8011968:	1d03      	adds	r3, r0, #4
 801196a:	e7f1      	b.n	8011950 <__exponent+0x60>

0801196c <_printf_float>:
 801196c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011970:	ed2d 8b02 	vpush	{d8}
 8011974:	b08d      	sub	sp, #52	; 0x34
 8011976:	460c      	mov	r4, r1
 8011978:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 801197c:	4616      	mov	r6, r2
 801197e:	461f      	mov	r7, r3
 8011980:	4605      	mov	r5, r0
 8011982:	f000 fe0b 	bl	801259c <_localeconv_r>
 8011986:	f8d0 a000 	ldr.w	sl, [r0]
 801198a:	4650      	mov	r0, sl
 801198c:	f7ee fc98 	bl	80002c0 <strlen>
 8011990:	2300      	movs	r3, #0
 8011992:	930a      	str	r3, [sp, #40]	; 0x28
 8011994:	6823      	ldr	r3, [r4, #0]
 8011996:	9305      	str	r3, [sp, #20]
 8011998:	f8d8 3000 	ldr.w	r3, [r8]
 801199c:	f894 b018 	ldrb.w	fp, [r4, #24]
 80119a0:	3307      	adds	r3, #7
 80119a2:	f023 0307 	bic.w	r3, r3, #7
 80119a6:	f103 0208 	add.w	r2, r3, #8
 80119aa:	f8c8 2000 	str.w	r2, [r8]
 80119ae:	e9d3 8900 	ldrd	r8, r9, [r3]
 80119b2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80119b6:	9307      	str	r3, [sp, #28]
 80119b8:	f8cd 8018 	str.w	r8, [sp, #24]
 80119bc:	ee08 0a10 	vmov	s16, r0
 80119c0:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 80119c4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80119c8:	4b9e      	ldr	r3, [pc, #632]	; (8011c44 <_printf_float+0x2d8>)
 80119ca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80119ce:	f7ef f8d5 	bl	8000b7c <__aeabi_dcmpun>
 80119d2:	bb88      	cbnz	r0, 8011a38 <_printf_float+0xcc>
 80119d4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80119d8:	4b9a      	ldr	r3, [pc, #616]	; (8011c44 <_printf_float+0x2d8>)
 80119da:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80119de:	f7ef f8af 	bl	8000b40 <__aeabi_dcmple>
 80119e2:	bb48      	cbnz	r0, 8011a38 <_printf_float+0xcc>
 80119e4:	2200      	movs	r2, #0
 80119e6:	2300      	movs	r3, #0
 80119e8:	4640      	mov	r0, r8
 80119ea:	4649      	mov	r1, r9
 80119ec:	f7ef f89e 	bl	8000b2c <__aeabi_dcmplt>
 80119f0:	b110      	cbz	r0, 80119f8 <_printf_float+0x8c>
 80119f2:	232d      	movs	r3, #45	; 0x2d
 80119f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80119f8:	4a93      	ldr	r2, [pc, #588]	; (8011c48 <_printf_float+0x2dc>)
 80119fa:	4b94      	ldr	r3, [pc, #592]	; (8011c4c <_printf_float+0x2e0>)
 80119fc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8011a00:	bf94      	ite	ls
 8011a02:	4690      	movls	r8, r2
 8011a04:	4698      	movhi	r8, r3
 8011a06:	2303      	movs	r3, #3
 8011a08:	6123      	str	r3, [r4, #16]
 8011a0a:	9b05      	ldr	r3, [sp, #20]
 8011a0c:	f023 0304 	bic.w	r3, r3, #4
 8011a10:	6023      	str	r3, [r4, #0]
 8011a12:	f04f 0900 	mov.w	r9, #0
 8011a16:	9700      	str	r7, [sp, #0]
 8011a18:	4633      	mov	r3, r6
 8011a1a:	aa0b      	add	r2, sp, #44	; 0x2c
 8011a1c:	4621      	mov	r1, r4
 8011a1e:	4628      	mov	r0, r5
 8011a20:	f000 f9da 	bl	8011dd8 <_printf_common>
 8011a24:	3001      	adds	r0, #1
 8011a26:	f040 8090 	bne.w	8011b4a <_printf_float+0x1de>
 8011a2a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011a2e:	b00d      	add	sp, #52	; 0x34
 8011a30:	ecbd 8b02 	vpop	{d8}
 8011a34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011a38:	4642      	mov	r2, r8
 8011a3a:	464b      	mov	r3, r9
 8011a3c:	4640      	mov	r0, r8
 8011a3e:	4649      	mov	r1, r9
 8011a40:	f7ef f89c 	bl	8000b7c <__aeabi_dcmpun>
 8011a44:	b140      	cbz	r0, 8011a58 <_printf_float+0xec>
 8011a46:	464b      	mov	r3, r9
 8011a48:	2b00      	cmp	r3, #0
 8011a4a:	bfbc      	itt	lt
 8011a4c:	232d      	movlt	r3, #45	; 0x2d
 8011a4e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8011a52:	4a7f      	ldr	r2, [pc, #508]	; (8011c50 <_printf_float+0x2e4>)
 8011a54:	4b7f      	ldr	r3, [pc, #508]	; (8011c54 <_printf_float+0x2e8>)
 8011a56:	e7d1      	b.n	80119fc <_printf_float+0x90>
 8011a58:	6863      	ldr	r3, [r4, #4]
 8011a5a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8011a5e:	9206      	str	r2, [sp, #24]
 8011a60:	1c5a      	adds	r2, r3, #1
 8011a62:	d13f      	bne.n	8011ae4 <_printf_float+0x178>
 8011a64:	2306      	movs	r3, #6
 8011a66:	6063      	str	r3, [r4, #4]
 8011a68:	9b05      	ldr	r3, [sp, #20]
 8011a6a:	6861      	ldr	r1, [r4, #4]
 8011a6c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8011a70:	2300      	movs	r3, #0
 8011a72:	9303      	str	r3, [sp, #12]
 8011a74:	ab0a      	add	r3, sp, #40	; 0x28
 8011a76:	e9cd b301 	strd	fp, r3, [sp, #4]
 8011a7a:	ab09      	add	r3, sp, #36	; 0x24
 8011a7c:	ec49 8b10 	vmov	d0, r8, r9
 8011a80:	9300      	str	r3, [sp, #0]
 8011a82:	6022      	str	r2, [r4, #0]
 8011a84:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8011a88:	4628      	mov	r0, r5
 8011a8a:	f7ff fecf 	bl	801182c <__cvt>
 8011a8e:	9b06      	ldr	r3, [sp, #24]
 8011a90:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011a92:	2b47      	cmp	r3, #71	; 0x47
 8011a94:	4680      	mov	r8, r0
 8011a96:	d108      	bne.n	8011aaa <_printf_float+0x13e>
 8011a98:	1cc8      	adds	r0, r1, #3
 8011a9a:	db02      	blt.n	8011aa2 <_printf_float+0x136>
 8011a9c:	6863      	ldr	r3, [r4, #4]
 8011a9e:	4299      	cmp	r1, r3
 8011aa0:	dd41      	ble.n	8011b26 <_printf_float+0x1ba>
 8011aa2:	f1ab 0302 	sub.w	r3, fp, #2
 8011aa6:	fa5f fb83 	uxtb.w	fp, r3
 8011aaa:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8011aae:	d820      	bhi.n	8011af2 <_printf_float+0x186>
 8011ab0:	3901      	subs	r1, #1
 8011ab2:	465a      	mov	r2, fp
 8011ab4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8011ab8:	9109      	str	r1, [sp, #36]	; 0x24
 8011aba:	f7ff ff19 	bl	80118f0 <__exponent>
 8011abe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011ac0:	1813      	adds	r3, r2, r0
 8011ac2:	2a01      	cmp	r2, #1
 8011ac4:	4681      	mov	r9, r0
 8011ac6:	6123      	str	r3, [r4, #16]
 8011ac8:	dc02      	bgt.n	8011ad0 <_printf_float+0x164>
 8011aca:	6822      	ldr	r2, [r4, #0]
 8011acc:	07d2      	lsls	r2, r2, #31
 8011ace:	d501      	bpl.n	8011ad4 <_printf_float+0x168>
 8011ad0:	3301      	adds	r3, #1
 8011ad2:	6123      	str	r3, [r4, #16]
 8011ad4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8011ad8:	2b00      	cmp	r3, #0
 8011ada:	d09c      	beq.n	8011a16 <_printf_float+0xaa>
 8011adc:	232d      	movs	r3, #45	; 0x2d
 8011ade:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011ae2:	e798      	b.n	8011a16 <_printf_float+0xaa>
 8011ae4:	9a06      	ldr	r2, [sp, #24]
 8011ae6:	2a47      	cmp	r2, #71	; 0x47
 8011ae8:	d1be      	bne.n	8011a68 <_printf_float+0xfc>
 8011aea:	2b00      	cmp	r3, #0
 8011aec:	d1bc      	bne.n	8011a68 <_printf_float+0xfc>
 8011aee:	2301      	movs	r3, #1
 8011af0:	e7b9      	b.n	8011a66 <_printf_float+0xfa>
 8011af2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8011af6:	d118      	bne.n	8011b2a <_printf_float+0x1be>
 8011af8:	2900      	cmp	r1, #0
 8011afa:	6863      	ldr	r3, [r4, #4]
 8011afc:	dd0b      	ble.n	8011b16 <_printf_float+0x1aa>
 8011afe:	6121      	str	r1, [r4, #16]
 8011b00:	b913      	cbnz	r3, 8011b08 <_printf_float+0x19c>
 8011b02:	6822      	ldr	r2, [r4, #0]
 8011b04:	07d0      	lsls	r0, r2, #31
 8011b06:	d502      	bpl.n	8011b0e <_printf_float+0x1a2>
 8011b08:	3301      	adds	r3, #1
 8011b0a:	440b      	add	r3, r1
 8011b0c:	6123      	str	r3, [r4, #16]
 8011b0e:	65a1      	str	r1, [r4, #88]	; 0x58
 8011b10:	f04f 0900 	mov.w	r9, #0
 8011b14:	e7de      	b.n	8011ad4 <_printf_float+0x168>
 8011b16:	b913      	cbnz	r3, 8011b1e <_printf_float+0x1b2>
 8011b18:	6822      	ldr	r2, [r4, #0]
 8011b1a:	07d2      	lsls	r2, r2, #31
 8011b1c:	d501      	bpl.n	8011b22 <_printf_float+0x1b6>
 8011b1e:	3302      	adds	r3, #2
 8011b20:	e7f4      	b.n	8011b0c <_printf_float+0x1a0>
 8011b22:	2301      	movs	r3, #1
 8011b24:	e7f2      	b.n	8011b0c <_printf_float+0x1a0>
 8011b26:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8011b2a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011b2c:	4299      	cmp	r1, r3
 8011b2e:	db05      	blt.n	8011b3c <_printf_float+0x1d0>
 8011b30:	6823      	ldr	r3, [r4, #0]
 8011b32:	6121      	str	r1, [r4, #16]
 8011b34:	07d8      	lsls	r0, r3, #31
 8011b36:	d5ea      	bpl.n	8011b0e <_printf_float+0x1a2>
 8011b38:	1c4b      	adds	r3, r1, #1
 8011b3a:	e7e7      	b.n	8011b0c <_printf_float+0x1a0>
 8011b3c:	2900      	cmp	r1, #0
 8011b3e:	bfd4      	ite	le
 8011b40:	f1c1 0202 	rsble	r2, r1, #2
 8011b44:	2201      	movgt	r2, #1
 8011b46:	4413      	add	r3, r2
 8011b48:	e7e0      	b.n	8011b0c <_printf_float+0x1a0>
 8011b4a:	6823      	ldr	r3, [r4, #0]
 8011b4c:	055a      	lsls	r2, r3, #21
 8011b4e:	d407      	bmi.n	8011b60 <_printf_float+0x1f4>
 8011b50:	6923      	ldr	r3, [r4, #16]
 8011b52:	4642      	mov	r2, r8
 8011b54:	4631      	mov	r1, r6
 8011b56:	4628      	mov	r0, r5
 8011b58:	47b8      	blx	r7
 8011b5a:	3001      	adds	r0, #1
 8011b5c:	d12c      	bne.n	8011bb8 <_printf_float+0x24c>
 8011b5e:	e764      	b.n	8011a2a <_printf_float+0xbe>
 8011b60:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8011b64:	f240 80e0 	bls.w	8011d28 <_printf_float+0x3bc>
 8011b68:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8011b6c:	2200      	movs	r2, #0
 8011b6e:	2300      	movs	r3, #0
 8011b70:	f7ee ffd2 	bl	8000b18 <__aeabi_dcmpeq>
 8011b74:	2800      	cmp	r0, #0
 8011b76:	d034      	beq.n	8011be2 <_printf_float+0x276>
 8011b78:	4a37      	ldr	r2, [pc, #220]	; (8011c58 <_printf_float+0x2ec>)
 8011b7a:	2301      	movs	r3, #1
 8011b7c:	4631      	mov	r1, r6
 8011b7e:	4628      	mov	r0, r5
 8011b80:	47b8      	blx	r7
 8011b82:	3001      	adds	r0, #1
 8011b84:	f43f af51 	beq.w	8011a2a <_printf_float+0xbe>
 8011b88:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8011b8c:	429a      	cmp	r2, r3
 8011b8e:	db02      	blt.n	8011b96 <_printf_float+0x22a>
 8011b90:	6823      	ldr	r3, [r4, #0]
 8011b92:	07d8      	lsls	r0, r3, #31
 8011b94:	d510      	bpl.n	8011bb8 <_printf_float+0x24c>
 8011b96:	ee18 3a10 	vmov	r3, s16
 8011b9a:	4652      	mov	r2, sl
 8011b9c:	4631      	mov	r1, r6
 8011b9e:	4628      	mov	r0, r5
 8011ba0:	47b8      	blx	r7
 8011ba2:	3001      	adds	r0, #1
 8011ba4:	f43f af41 	beq.w	8011a2a <_printf_float+0xbe>
 8011ba8:	f04f 0800 	mov.w	r8, #0
 8011bac:	f104 091a 	add.w	r9, r4, #26
 8011bb0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011bb2:	3b01      	subs	r3, #1
 8011bb4:	4543      	cmp	r3, r8
 8011bb6:	dc09      	bgt.n	8011bcc <_printf_float+0x260>
 8011bb8:	6823      	ldr	r3, [r4, #0]
 8011bba:	079b      	lsls	r3, r3, #30
 8011bbc:	f100 8107 	bmi.w	8011dce <_printf_float+0x462>
 8011bc0:	68e0      	ldr	r0, [r4, #12]
 8011bc2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011bc4:	4298      	cmp	r0, r3
 8011bc6:	bfb8      	it	lt
 8011bc8:	4618      	movlt	r0, r3
 8011bca:	e730      	b.n	8011a2e <_printf_float+0xc2>
 8011bcc:	2301      	movs	r3, #1
 8011bce:	464a      	mov	r2, r9
 8011bd0:	4631      	mov	r1, r6
 8011bd2:	4628      	mov	r0, r5
 8011bd4:	47b8      	blx	r7
 8011bd6:	3001      	adds	r0, #1
 8011bd8:	f43f af27 	beq.w	8011a2a <_printf_float+0xbe>
 8011bdc:	f108 0801 	add.w	r8, r8, #1
 8011be0:	e7e6      	b.n	8011bb0 <_printf_float+0x244>
 8011be2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011be4:	2b00      	cmp	r3, #0
 8011be6:	dc39      	bgt.n	8011c5c <_printf_float+0x2f0>
 8011be8:	4a1b      	ldr	r2, [pc, #108]	; (8011c58 <_printf_float+0x2ec>)
 8011bea:	2301      	movs	r3, #1
 8011bec:	4631      	mov	r1, r6
 8011bee:	4628      	mov	r0, r5
 8011bf0:	47b8      	blx	r7
 8011bf2:	3001      	adds	r0, #1
 8011bf4:	f43f af19 	beq.w	8011a2a <_printf_float+0xbe>
 8011bf8:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8011bfc:	4313      	orrs	r3, r2
 8011bfe:	d102      	bne.n	8011c06 <_printf_float+0x29a>
 8011c00:	6823      	ldr	r3, [r4, #0]
 8011c02:	07d9      	lsls	r1, r3, #31
 8011c04:	d5d8      	bpl.n	8011bb8 <_printf_float+0x24c>
 8011c06:	ee18 3a10 	vmov	r3, s16
 8011c0a:	4652      	mov	r2, sl
 8011c0c:	4631      	mov	r1, r6
 8011c0e:	4628      	mov	r0, r5
 8011c10:	47b8      	blx	r7
 8011c12:	3001      	adds	r0, #1
 8011c14:	f43f af09 	beq.w	8011a2a <_printf_float+0xbe>
 8011c18:	f04f 0900 	mov.w	r9, #0
 8011c1c:	f104 0a1a 	add.w	sl, r4, #26
 8011c20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011c22:	425b      	negs	r3, r3
 8011c24:	454b      	cmp	r3, r9
 8011c26:	dc01      	bgt.n	8011c2c <_printf_float+0x2c0>
 8011c28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011c2a:	e792      	b.n	8011b52 <_printf_float+0x1e6>
 8011c2c:	2301      	movs	r3, #1
 8011c2e:	4652      	mov	r2, sl
 8011c30:	4631      	mov	r1, r6
 8011c32:	4628      	mov	r0, r5
 8011c34:	47b8      	blx	r7
 8011c36:	3001      	adds	r0, #1
 8011c38:	f43f aef7 	beq.w	8011a2a <_printf_float+0xbe>
 8011c3c:	f109 0901 	add.w	r9, r9, #1
 8011c40:	e7ee      	b.n	8011c20 <_printf_float+0x2b4>
 8011c42:	bf00      	nop
 8011c44:	7fefffff 	.word	0x7fefffff
 8011c48:	08014ac4 	.word	0x08014ac4
 8011c4c:	08014ac8 	.word	0x08014ac8
 8011c50:	08014acc 	.word	0x08014acc
 8011c54:	08014ad0 	.word	0x08014ad0
 8011c58:	08014ad4 	.word	0x08014ad4
 8011c5c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011c5e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8011c60:	429a      	cmp	r2, r3
 8011c62:	bfa8      	it	ge
 8011c64:	461a      	movge	r2, r3
 8011c66:	2a00      	cmp	r2, #0
 8011c68:	4691      	mov	r9, r2
 8011c6a:	dc37      	bgt.n	8011cdc <_printf_float+0x370>
 8011c6c:	f04f 0b00 	mov.w	fp, #0
 8011c70:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8011c74:	f104 021a 	add.w	r2, r4, #26
 8011c78:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8011c7a:	9305      	str	r3, [sp, #20]
 8011c7c:	eba3 0309 	sub.w	r3, r3, r9
 8011c80:	455b      	cmp	r3, fp
 8011c82:	dc33      	bgt.n	8011cec <_printf_float+0x380>
 8011c84:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8011c88:	429a      	cmp	r2, r3
 8011c8a:	db3b      	blt.n	8011d04 <_printf_float+0x398>
 8011c8c:	6823      	ldr	r3, [r4, #0]
 8011c8e:	07da      	lsls	r2, r3, #31
 8011c90:	d438      	bmi.n	8011d04 <_printf_float+0x398>
 8011c92:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8011c96:	eba2 0903 	sub.w	r9, r2, r3
 8011c9a:	9b05      	ldr	r3, [sp, #20]
 8011c9c:	1ad2      	subs	r2, r2, r3
 8011c9e:	4591      	cmp	r9, r2
 8011ca0:	bfa8      	it	ge
 8011ca2:	4691      	movge	r9, r2
 8011ca4:	f1b9 0f00 	cmp.w	r9, #0
 8011ca8:	dc35      	bgt.n	8011d16 <_printf_float+0x3aa>
 8011caa:	f04f 0800 	mov.w	r8, #0
 8011cae:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8011cb2:	f104 0a1a 	add.w	sl, r4, #26
 8011cb6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8011cba:	1a9b      	subs	r3, r3, r2
 8011cbc:	eba3 0309 	sub.w	r3, r3, r9
 8011cc0:	4543      	cmp	r3, r8
 8011cc2:	f77f af79 	ble.w	8011bb8 <_printf_float+0x24c>
 8011cc6:	2301      	movs	r3, #1
 8011cc8:	4652      	mov	r2, sl
 8011cca:	4631      	mov	r1, r6
 8011ccc:	4628      	mov	r0, r5
 8011cce:	47b8      	blx	r7
 8011cd0:	3001      	adds	r0, #1
 8011cd2:	f43f aeaa 	beq.w	8011a2a <_printf_float+0xbe>
 8011cd6:	f108 0801 	add.w	r8, r8, #1
 8011cda:	e7ec      	b.n	8011cb6 <_printf_float+0x34a>
 8011cdc:	4613      	mov	r3, r2
 8011cde:	4631      	mov	r1, r6
 8011ce0:	4642      	mov	r2, r8
 8011ce2:	4628      	mov	r0, r5
 8011ce4:	47b8      	blx	r7
 8011ce6:	3001      	adds	r0, #1
 8011ce8:	d1c0      	bne.n	8011c6c <_printf_float+0x300>
 8011cea:	e69e      	b.n	8011a2a <_printf_float+0xbe>
 8011cec:	2301      	movs	r3, #1
 8011cee:	4631      	mov	r1, r6
 8011cf0:	4628      	mov	r0, r5
 8011cf2:	9205      	str	r2, [sp, #20]
 8011cf4:	47b8      	blx	r7
 8011cf6:	3001      	adds	r0, #1
 8011cf8:	f43f ae97 	beq.w	8011a2a <_printf_float+0xbe>
 8011cfc:	9a05      	ldr	r2, [sp, #20]
 8011cfe:	f10b 0b01 	add.w	fp, fp, #1
 8011d02:	e7b9      	b.n	8011c78 <_printf_float+0x30c>
 8011d04:	ee18 3a10 	vmov	r3, s16
 8011d08:	4652      	mov	r2, sl
 8011d0a:	4631      	mov	r1, r6
 8011d0c:	4628      	mov	r0, r5
 8011d0e:	47b8      	blx	r7
 8011d10:	3001      	adds	r0, #1
 8011d12:	d1be      	bne.n	8011c92 <_printf_float+0x326>
 8011d14:	e689      	b.n	8011a2a <_printf_float+0xbe>
 8011d16:	9a05      	ldr	r2, [sp, #20]
 8011d18:	464b      	mov	r3, r9
 8011d1a:	4442      	add	r2, r8
 8011d1c:	4631      	mov	r1, r6
 8011d1e:	4628      	mov	r0, r5
 8011d20:	47b8      	blx	r7
 8011d22:	3001      	adds	r0, #1
 8011d24:	d1c1      	bne.n	8011caa <_printf_float+0x33e>
 8011d26:	e680      	b.n	8011a2a <_printf_float+0xbe>
 8011d28:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011d2a:	2a01      	cmp	r2, #1
 8011d2c:	dc01      	bgt.n	8011d32 <_printf_float+0x3c6>
 8011d2e:	07db      	lsls	r3, r3, #31
 8011d30:	d53a      	bpl.n	8011da8 <_printf_float+0x43c>
 8011d32:	2301      	movs	r3, #1
 8011d34:	4642      	mov	r2, r8
 8011d36:	4631      	mov	r1, r6
 8011d38:	4628      	mov	r0, r5
 8011d3a:	47b8      	blx	r7
 8011d3c:	3001      	adds	r0, #1
 8011d3e:	f43f ae74 	beq.w	8011a2a <_printf_float+0xbe>
 8011d42:	ee18 3a10 	vmov	r3, s16
 8011d46:	4652      	mov	r2, sl
 8011d48:	4631      	mov	r1, r6
 8011d4a:	4628      	mov	r0, r5
 8011d4c:	47b8      	blx	r7
 8011d4e:	3001      	adds	r0, #1
 8011d50:	f43f ae6b 	beq.w	8011a2a <_printf_float+0xbe>
 8011d54:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8011d58:	2200      	movs	r2, #0
 8011d5a:	2300      	movs	r3, #0
 8011d5c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8011d60:	f7ee feda 	bl	8000b18 <__aeabi_dcmpeq>
 8011d64:	b9d8      	cbnz	r0, 8011d9e <_printf_float+0x432>
 8011d66:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8011d6a:	f108 0201 	add.w	r2, r8, #1
 8011d6e:	4631      	mov	r1, r6
 8011d70:	4628      	mov	r0, r5
 8011d72:	47b8      	blx	r7
 8011d74:	3001      	adds	r0, #1
 8011d76:	d10e      	bne.n	8011d96 <_printf_float+0x42a>
 8011d78:	e657      	b.n	8011a2a <_printf_float+0xbe>
 8011d7a:	2301      	movs	r3, #1
 8011d7c:	4652      	mov	r2, sl
 8011d7e:	4631      	mov	r1, r6
 8011d80:	4628      	mov	r0, r5
 8011d82:	47b8      	blx	r7
 8011d84:	3001      	adds	r0, #1
 8011d86:	f43f ae50 	beq.w	8011a2a <_printf_float+0xbe>
 8011d8a:	f108 0801 	add.w	r8, r8, #1
 8011d8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011d90:	3b01      	subs	r3, #1
 8011d92:	4543      	cmp	r3, r8
 8011d94:	dcf1      	bgt.n	8011d7a <_printf_float+0x40e>
 8011d96:	464b      	mov	r3, r9
 8011d98:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8011d9c:	e6da      	b.n	8011b54 <_printf_float+0x1e8>
 8011d9e:	f04f 0800 	mov.w	r8, #0
 8011da2:	f104 0a1a 	add.w	sl, r4, #26
 8011da6:	e7f2      	b.n	8011d8e <_printf_float+0x422>
 8011da8:	2301      	movs	r3, #1
 8011daa:	4642      	mov	r2, r8
 8011dac:	e7df      	b.n	8011d6e <_printf_float+0x402>
 8011dae:	2301      	movs	r3, #1
 8011db0:	464a      	mov	r2, r9
 8011db2:	4631      	mov	r1, r6
 8011db4:	4628      	mov	r0, r5
 8011db6:	47b8      	blx	r7
 8011db8:	3001      	adds	r0, #1
 8011dba:	f43f ae36 	beq.w	8011a2a <_printf_float+0xbe>
 8011dbe:	f108 0801 	add.w	r8, r8, #1
 8011dc2:	68e3      	ldr	r3, [r4, #12]
 8011dc4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8011dc6:	1a5b      	subs	r3, r3, r1
 8011dc8:	4543      	cmp	r3, r8
 8011dca:	dcf0      	bgt.n	8011dae <_printf_float+0x442>
 8011dcc:	e6f8      	b.n	8011bc0 <_printf_float+0x254>
 8011dce:	f04f 0800 	mov.w	r8, #0
 8011dd2:	f104 0919 	add.w	r9, r4, #25
 8011dd6:	e7f4      	b.n	8011dc2 <_printf_float+0x456>

08011dd8 <_printf_common>:
 8011dd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011ddc:	4616      	mov	r6, r2
 8011dde:	4699      	mov	r9, r3
 8011de0:	688a      	ldr	r2, [r1, #8]
 8011de2:	690b      	ldr	r3, [r1, #16]
 8011de4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8011de8:	4293      	cmp	r3, r2
 8011dea:	bfb8      	it	lt
 8011dec:	4613      	movlt	r3, r2
 8011dee:	6033      	str	r3, [r6, #0]
 8011df0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8011df4:	4607      	mov	r7, r0
 8011df6:	460c      	mov	r4, r1
 8011df8:	b10a      	cbz	r2, 8011dfe <_printf_common+0x26>
 8011dfa:	3301      	adds	r3, #1
 8011dfc:	6033      	str	r3, [r6, #0]
 8011dfe:	6823      	ldr	r3, [r4, #0]
 8011e00:	0699      	lsls	r1, r3, #26
 8011e02:	bf42      	ittt	mi
 8011e04:	6833      	ldrmi	r3, [r6, #0]
 8011e06:	3302      	addmi	r3, #2
 8011e08:	6033      	strmi	r3, [r6, #0]
 8011e0a:	6825      	ldr	r5, [r4, #0]
 8011e0c:	f015 0506 	ands.w	r5, r5, #6
 8011e10:	d106      	bne.n	8011e20 <_printf_common+0x48>
 8011e12:	f104 0a19 	add.w	sl, r4, #25
 8011e16:	68e3      	ldr	r3, [r4, #12]
 8011e18:	6832      	ldr	r2, [r6, #0]
 8011e1a:	1a9b      	subs	r3, r3, r2
 8011e1c:	42ab      	cmp	r3, r5
 8011e1e:	dc26      	bgt.n	8011e6e <_printf_common+0x96>
 8011e20:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8011e24:	1e13      	subs	r3, r2, #0
 8011e26:	6822      	ldr	r2, [r4, #0]
 8011e28:	bf18      	it	ne
 8011e2a:	2301      	movne	r3, #1
 8011e2c:	0692      	lsls	r2, r2, #26
 8011e2e:	d42b      	bmi.n	8011e88 <_printf_common+0xb0>
 8011e30:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8011e34:	4649      	mov	r1, r9
 8011e36:	4638      	mov	r0, r7
 8011e38:	47c0      	blx	r8
 8011e3a:	3001      	adds	r0, #1
 8011e3c:	d01e      	beq.n	8011e7c <_printf_common+0xa4>
 8011e3e:	6823      	ldr	r3, [r4, #0]
 8011e40:	6922      	ldr	r2, [r4, #16]
 8011e42:	f003 0306 	and.w	r3, r3, #6
 8011e46:	2b04      	cmp	r3, #4
 8011e48:	bf02      	ittt	eq
 8011e4a:	68e5      	ldreq	r5, [r4, #12]
 8011e4c:	6833      	ldreq	r3, [r6, #0]
 8011e4e:	1aed      	subeq	r5, r5, r3
 8011e50:	68a3      	ldr	r3, [r4, #8]
 8011e52:	bf0c      	ite	eq
 8011e54:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011e58:	2500      	movne	r5, #0
 8011e5a:	4293      	cmp	r3, r2
 8011e5c:	bfc4      	itt	gt
 8011e5e:	1a9b      	subgt	r3, r3, r2
 8011e60:	18ed      	addgt	r5, r5, r3
 8011e62:	2600      	movs	r6, #0
 8011e64:	341a      	adds	r4, #26
 8011e66:	42b5      	cmp	r5, r6
 8011e68:	d11a      	bne.n	8011ea0 <_printf_common+0xc8>
 8011e6a:	2000      	movs	r0, #0
 8011e6c:	e008      	b.n	8011e80 <_printf_common+0xa8>
 8011e6e:	2301      	movs	r3, #1
 8011e70:	4652      	mov	r2, sl
 8011e72:	4649      	mov	r1, r9
 8011e74:	4638      	mov	r0, r7
 8011e76:	47c0      	blx	r8
 8011e78:	3001      	adds	r0, #1
 8011e7a:	d103      	bne.n	8011e84 <_printf_common+0xac>
 8011e7c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011e80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011e84:	3501      	adds	r5, #1
 8011e86:	e7c6      	b.n	8011e16 <_printf_common+0x3e>
 8011e88:	18e1      	adds	r1, r4, r3
 8011e8a:	1c5a      	adds	r2, r3, #1
 8011e8c:	2030      	movs	r0, #48	; 0x30
 8011e8e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8011e92:	4422      	add	r2, r4
 8011e94:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8011e98:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8011e9c:	3302      	adds	r3, #2
 8011e9e:	e7c7      	b.n	8011e30 <_printf_common+0x58>
 8011ea0:	2301      	movs	r3, #1
 8011ea2:	4622      	mov	r2, r4
 8011ea4:	4649      	mov	r1, r9
 8011ea6:	4638      	mov	r0, r7
 8011ea8:	47c0      	blx	r8
 8011eaa:	3001      	adds	r0, #1
 8011eac:	d0e6      	beq.n	8011e7c <_printf_common+0xa4>
 8011eae:	3601      	adds	r6, #1
 8011eb0:	e7d9      	b.n	8011e66 <_printf_common+0x8e>
	...

08011eb4 <_printf_i>:
 8011eb4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011eb8:	7e0f      	ldrb	r7, [r1, #24]
 8011eba:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8011ebc:	2f78      	cmp	r7, #120	; 0x78
 8011ebe:	4691      	mov	r9, r2
 8011ec0:	4680      	mov	r8, r0
 8011ec2:	460c      	mov	r4, r1
 8011ec4:	469a      	mov	sl, r3
 8011ec6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8011eca:	d807      	bhi.n	8011edc <_printf_i+0x28>
 8011ecc:	2f62      	cmp	r7, #98	; 0x62
 8011ece:	d80a      	bhi.n	8011ee6 <_printf_i+0x32>
 8011ed0:	2f00      	cmp	r7, #0
 8011ed2:	f000 80d4 	beq.w	801207e <_printf_i+0x1ca>
 8011ed6:	2f58      	cmp	r7, #88	; 0x58
 8011ed8:	f000 80c0 	beq.w	801205c <_printf_i+0x1a8>
 8011edc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011ee0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8011ee4:	e03a      	b.n	8011f5c <_printf_i+0xa8>
 8011ee6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8011eea:	2b15      	cmp	r3, #21
 8011eec:	d8f6      	bhi.n	8011edc <_printf_i+0x28>
 8011eee:	a101      	add	r1, pc, #4	; (adr r1, 8011ef4 <_printf_i+0x40>)
 8011ef0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8011ef4:	08011f4d 	.word	0x08011f4d
 8011ef8:	08011f61 	.word	0x08011f61
 8011efc:	08011edd 	.word	0x08011edd
 8011f00:	08011edd 	.word	0x08011edd
 8011f04:	08011edd 	.word	0x08011edd
 8011f08:	08011edd 	.word	0x08011edd
 8011f0c:	08011f61 	.word	0x08011f61
 8011f10:	08011edd 	.word	0x08011edd
 8011f14:	08011edd 	.word	0x08011edd
 8011f18:	08011edd 	.word	0x08011edd
 8011f1c:	08011edd 	.word	0x08011edd
 8011f20:	08012065 	.word	0x08012065
 8011f24:	08011f8d 	.word	0x08011f8d
 8011f28:	0801201f 	.word	0x0801201f
 8011f2c:	08011edd 	.word	0x08011edd
 8011f30:	08011edd 	.word	0x08011edd
 8011f34:	08012087 	.word	0x08012087
 8011f38:	08011edd 	.word	0x08011edd
 8011f3c:	08011f8d 	.word	0x08011f8d
 8011f40:	08011edd 	.word	0x08011edd
 8011f44:	08011edd 	.word	0x08011edd
 8011f48:	08012027 	.word	0x08012027
 8011f4c:	682b      	ldr	r3, [r5, #0]
 8011f4e:	1d1a      	adds	r2, r3, #4
 8011f50:	681b      	ldr	r3, [r3, #0]
 8011f52:	602a      	str	r2, [r5, #0]
 8011f54:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011f58:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8011f5c:	2301      	movs	r3, #1
 8011f5e:	e09f      	b.n	80120a0 <_printf_i+0x1ec>
 8011f60:	6820      	ldr	r0, [r4, #0]
 8011f62:	682b      	ldr	r3, [r5, #0]
 8011f64:	0607      	lsls	r7, r0, #24
 8011f66:	f103 0104 	add.w	r1, r3, #4
 8011f6a:	6029      	str	r1, [r5, #0]
 8011f6c:	d501      	bpl.n	8011f72 <_printf_i+0xbe>
 8011f6e:	681e      	ldr	r6, [r3, #0]
 8011f70:	e003      	b.n	8011f7a <_printf_i+0xc6>
 8011f72:	0646      	lsls	r6, r0, #25
 8011f74:	d5fb      	bpl.n	8011f6e <_printf_i+0xba>
 8011f76:	f9b3 6000 	ldrsh.w	r6, [r3]
 8011f7a:	2e00      	cmp	r6, #0
 8011f7c:	da03      	bge.n	8011f86 <_printf_i+0xd2>
 8011f7e:	232d      	movs	r3, #45	; 0x2d
 8011f80:	4276      	negs	r6, r6
 8011f82:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011f86:	485a      	ldr	r0, [pc, #360]	; (80120f0 <_printf_i+0x23c>)
 8011f88:	230a      	movs	r3, #10
 8011f8a:	e012      	b.n	8011fb2 <_printf_i+0xfe>
 8011f8c:	682b      	ldr	r3, [r5, #0]
 8011f8e:	6820      	ldr	r0, [r4, #0]
 8011f90:	1d19      	adds	r1, r3, #4
 8011f92:	6029      	str	r1, [r5, #0]
 8011f94:	0605      	lsls	r5, r0, #24
 8011f96:	d501      	bpl.n	8011f9c <_printf_i+0xe8>
 8011f98:	681e      	ldr	r6, [r3, #0]
 8011f9a:	e002      	b.n	8011fa2 <_printf_i+0xee>
 8011f9c:	0641      	lsls	r1, r0, #25
 8011f9e:	d5fb      	bpl.n	8011f98 <_printf_i+0xe4>
 8011fa0:	881e      	ldrh	r6, [r3, #0]
 8011fa2:	4853      	ldr	r0, [pc, #332]	; (80120f0 <_printf_i+0x23c>)
 8011fa4:	2f6f      	cmp	r7, #111	; 0x6f
 8011fa6:	bf0c      	ite	eq
 8011fa8:	2308      	moveq	r3, #8
 8011faa:	230a      	movne	r3, #10
 8011fac:	2100      	movs	r1, #0
 8011fae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8011fb2:	6865      	ldr	r5, [r4, #4]
 8011fb4:	60a5      	str	r5, [r4, #8]
 8011fb6:	2d00      	cmp	r5, #0
 8011fb8:	bfa2      	ittt	ge
 8011fba:	6821      	ldrge	r1, [r4, #0]
 8011fbc:	f021 0104 	bicge.w	r1, r1, #4
 8011fc0:	6021      	strge	r1, [r4, #0]
 8011fc2:	b90e      	cbnz	r6, 8011fc8 <_printf_i+0x114>
 8011fc4:	2d00      	cmp	r5, #0
 8011fc6:	d04b      	beq.n	8012060 <_printf_i+0x1ac>
 8011fc8:	4615      	mov	r5, r2
 8011fca:	fbb6 f1f3 	udiv	r1, r6, r3
 8011fce:	fb03 6711 	mls	r7, r3, r1, r6
 8011fd2:	5dc7      	ldrb	r7, [r0, r7]
 8011fd4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8011fd8:	4637      	mov	r7, r6
 8011fda:	42bb      	cmp	r3, r7
 8011fdc:	460e      	mov	r6, r1
 8011fde:	d9f4      	bls.n	8011fca <_printf_i+0x116>
 8011fe0:	2b08      	cmp	r3, #8
 8011fe2:	d10b      	bne.n	8011ffc <_printf_i+0x148>
 8011fe4:	6823      	ldr	r3, [r4, #0]
 8011fe6:	07de      	lsls	r6, r3, #31
 8011fe8:	d508      	bpl.n	8011ffc <_printf_i+0x148>
 8011fea:	6923      	ldr	r3, [r4, #16]
 8011fec:	6861      	ldr	r1, [r4, #4]
 8011fee:	4299      	cmp	r1, r3
 8011ff0:	bfde      	ittt	le
 8011ff2:	2330      	movle	r3, #48	; 0x30
 8011ff4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8011ff8:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8011ffc:	1b52      	subs	r2, r2, r5
 8011ffe:	6122      	str	r2, [r4, #16]
 8012000:	f8cd a000 	str.w	sl, [sp]
 8012004:	464b      	mov	r3, r9
 8012006:	aa03      	add	r2, sp, #12
 8012008:	4621      	mov	r1, r4
 801200a:	4640      	mov	r0, r8
 801200c:	f7ff fee4 	bl	8011dd8 <_printf_common>
 8012010:	3001      	adds	r0, #1
 8012012:	d14a      	bne.n	80120aa <_printf_i+0x1f6>
 8012014:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012018:	b004      	add	sp, #16
 801201a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801201e:	6823      	ldr	r3, [r4, #0]
 8012020:	f043 0320 	orr.w	r3, r3, #32
 8012024:	6023      	str	r3, [r4, #0]
 8012026:	4833      	ldr	r0, [pc, #204]	; (80120f4 <_printf_i+0x240>)
 8012028:	2778      	movs	r7, #120	; 0x78
 801202a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801202e:	6823      	ldr	r3, [r4, #0]
 8012030:	6829      	ldr	r1, [r5, #0]
 8012032:	061f      	lsls	r7, r3, #24
 8012034:	f851 6b04 	ldr.w	r6, [r1], #4
 8012038:	d402      	bmi.n	8012040 <_printf_i+0x18c>
 801203a:	065f      	lsls	r7, r3, #25
 801203c:	bf48      	it	mi
 801203e:	b2b6      	uxthmi	r6, r6
 8012040:	07df      	lsls	r7, r3, #31
 8012042:	bf48      	it	mi
 8012044:	f043 0320 	orrmi.w	r3, r3, #32
 8012048:	6029      	str	r1, [r5, #0]
 801204a:	bf48      	it	mi
 801204c:	6023      	strmi	r3, [r4, #0]
 801204e:	b91e      	cbnz	r6, 8012058 <_printf_i+0x1a4>
 8012050:	6823      	ldr	r3, [r4, #0]
 8012052:	f023 0320 	bic.w	r3, r3, #32
 8012056:	6023      	str	r3, [r4, #0]
 8012058:	2310      	movs	r3, #16
 801205a:	e7a7      	b.n	8011fac <_printf_i+0xf8>
 801205c:	4824      	ldr	r0, [pc, #144]	; (80120f0 <_printf_i+0x23c>)
 801205e:	e7e4      	b.n	801202a <_printf_i+0x176>
 8012060:	4615      	mov	r5, r2
 8012062:	e7bd      	b.n	8011fe0 <_printf_i+0x12c>
 8012064:	682b      	ldr	r3, [r5, #0]
 8012066:	6826      	ldr	r6, [r4, #0]
 8012068:	6961      	ldr	r1, [r4, #20]
 801206a:	1d18      	adds	r0, r3, #4
 801206c:	6028      	str	r0, [r5, #0]
 801206e:	0635      	lsls	r5, r6, #24
 8012070:	681b      	ldr	r3, [r3, #0]
 8012072:	d501      	bpl.n	8012078 <_printf_i+0x1c4>
 8012074:	6019      	str	r1, [r3, #0]
 8012076:	e002      	b.n	801207e <_printf_i+0x1ca>
 8012078:	0670      	lsls	r0, r6, #25
 801207a:	d5fb      	bpl.n	8012074 <_printf_i+0x1c0>
 801207c:	8019      	strh	r1, [r3, #0]
 801207e:	2300      	movs	r3, #0
 8012080:	6123      	str	r3, [r4, #16]
 8012082:	4615      	mov	r5, r2
 8012084:	e7bc      	b.n	8012000 <_printf_i+0x14c>
 8012086:	682b      	ldr	r3, [r5, #0]
 8012088:	1d1a      	adds	r2, r3, #4
 801208a:	602a      	str	r2, [r5, #0]
 801208c:	681d      	ldr	r5, [r3, #0]
 801208e:	6862      	ldr	r2, [r4, #4]
 8012090:	2100      	movs	r1, #0
 8012092:	4628      	mov	r0, r5
 8012094:	f7ee f8c4 	bl	8000220 <memchr>
 8012098:	b108      	cbz	r0, 801209e <_printf_i+0x1ea>
 801209a:	1b40      	subs	r0, r0, r5
 801209c:	6060      	str	r0, [r4, #4]
 801209e:	6863      	ldr	r3, [r4, #4]
 80120a0:	6123      	str	r3, [r4, #16]
 80120a2:	2300      	movs	r3, #0
 80120a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80120a8:	e7aa      	b.n	8012000 <_printf_i+0x14c>
 80120aa:	6923      	ldr	r3, [r4, #16]
 80120ac:	462a      	mov	r2, r5
 80120ae:	4649      	mov	r1, r9
 80120b0:	4640      	mov	r0, r8
 80120b2:	47d0      	blx	sl
 80120b4:	3001      	adds	r0, #1
 80120b6:	d0ad      	beq.n	8012014 <_printf_i+0x160>
 80120b8:	6823      	ldr	r3, [r4, #0]
 80120ba:	079b      	lsls	r3, r3, #30
 80120bc:	d413      	bmi.n	80120e6 <_printf_i+0x232>
 80120be:	68e0      	ldr	r0, [r4, #12]
 80120c0:	9b03      	ldr	r3, [sp, #12]
 80120c2:	4298      	cmp	r0, r3
 80120c4:	bfb8      	it	lt
 80120c6:	4618      	movlt	r0, r3
 80120c8:	e7a6      	b.n	8012018 <_printf_i+0x164>
 80120ca:	2301      	movs	r3, #1
 80120cc:	4632      	mov	r2, r6
 80120ce:	4649      	mov	r1, r9
 80120d0:	4640      	mov	r0, r8
 80120d2:	47d0      	blx	sl
 80120d4:	3001      	adds	r0, #1
 80120d6:	d09d      	beq.n	8012014 <_printf_i+0x160>
 80120d8:	3501      	adds	r5, #1
 80120da:	68e3      	ldr	r3, [r4, #12]
 80120dc:	9903      	ldr	r1, [sp, #12]
 80120de:	1a5b      	subs	r3, r3, r1
 80120e0:	42ab      	cmp	r3, r5
 80120e2:	dcf2      	bgt.n	80120ca <_printf_i+0x216>
 80120e4:	e7eb      	b.n	80120be <_printf_i+0x20a>
 80120e6:	2500      	movs	r5, #0
 80120e8:	f104 0619 	add.w	r6, r4, #25
 80120ec:	e7f5      	b.n	80120da <_printf_i+0x226>
 80120ee:	bf00      	nop
 80120f0:	08014ad6 	.word	0x08014ad6
 80120f4:	08014ae7 	.word	0x08014ae7

080120f8 <std>:
 80120f8:	2300      	movs	r3, #0
 80120fa:	b510      	push	{r4, lr}
 80120fc:	4604      	mov	r4, r0
 80120fe:	e9c0 3300 	strd	r3, r3, [r0]
 8012102:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8012106:	6083      	str	r3, [r0, #8]
 8012108:	8181      	strh	r1, [r0, #12]
 801210a:	6643      	str	r3, [r0, #100]	; 0x64
 801210c:	81c2      	strh	r2, [r0, #14]
 801210e:	6183      	str	r3, [r0, #24]
 8012110:	4619      	mov	r1, r3
 8012112:	2208      	movs	r2, #8
 8012114:	305c      	adds	r0, #92	; 0x5c
 8012116:	f000 fa39 	bl	801258c <memset>
 801211a:	4b05      	ldr	r3, [pc, #20]	; (8012130 <std+0x38>)
 801211c:	6263      	str	r3, [r4, #36]	; 0x24
 801211e:	4b05      	ldr	r3, [pc, #20]	; (8012134 <std+0x3c>)
 8012120:	62a3      	str	r3, [r4, #40]	; 0x28
 8012122:	4b05      	ldr	r3, [pc, #20]	; (8012138 <std+0x40>)
 8012124:	62e3      	str	r3, [r4, #44]	; 0x2c
 8012126:	4b05      	ldr	r3, [pc, #20]	; (801213c <std+0x44>)
 8012128:	6224      	str	r4, [r4, #32]
 801212a:	6323      	str	r3, [r4, #48]	; 0x30
 801212c:	bd10      	pop	{r4, pc}
 801212e:	bf00      	nop
 8012130:	080123dd 	.word	0x080123dd
 8012134:	080123ff 	.word	0x080123ff
 8012138:	08012437 	.word	0x08012437
 801213c:	0801245b 	.word	0x0801245b

08012140 <stdio_exit_handler>:
 8012140:	4a02      	ldr	r2, [pc, #8]	; (801214c <stdio_exit_handler+0xc>)
 8012142:	4903      	ldr	r1, [pc, #12]	; (8012150 <stdio_exit_handler+0x10>)
 8012144:	4803      	ldr	r0, [pc, #12]	; (8012154 <stdio_exit_handler+0x14>)
 8012146:	f000 b869 	b.w	801221c <_fwalk_sglue>
 801214a:	bf00      	nop
 801214c:	20000188 	.word	0x20000188
 8012150:	080142d9 	.word	0x080142d9
 8012154:	20000194 	.word	0x20000194

08012158 <cleanup_stdio>:
 8012158:	6841      	ldr	r1, [r0, #4]
 801215a:	4b0c      	ldr	r3, [pc, #48]	; (801218c <cleanup_stdio+0x34>)
 801215c:	4299      	cmp	r1, r3
 801215e:	b510      	push	{r4, lr}
 8012160:	4604      	mov	r4, r0
 8012162:	d001      	beq.n	8012168 <cleanup_stdio+0x10>
 8012164:	f002 f8b8 	bl	80142d8 <_fflush_r>
 8012168:	68a1      	ldr	r1, [r4, #8]
 801216a:	4b09      	ldr	r3, [pc, #36]	; (8012190 <cleanup_stdio+0x38>)
 801216c:	4299      	cmp	r1, r3
 801216e:	d002      	beq.n	8012176 <cleanup_stdio+0x1e>
 8012170:	4620      	mov	r0, r4
 8012172:	f002 f8b1 	bl	80142d8 <_fflush_r>
 8012176:	68e1      	ldr	r1, [r4, #12]
 8012178:	4b06      	ldr	r3, [pc, #24]	; (8012194 <cleanup_stdio+0x3c>)
 801217a:	4299      	cmp	r1, r3
 801217c:	d004      	beq.n	8012188 <cleanup_stdio+0x30>
 801217e:	4620      	mov	r0, r4
 8012180:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012184:	f002 b8a8 	b.w	80142d8 <_fflush_r>
 8012188:	bd10      	pop	{r4, pc}
 801218a:	bf00      	nop
 801218c:	20003480 	.word	0x20003480
 8012190:	200034e8 	.word	0x200034e8
 8012194:	20003550 	.word	0x20003550

08012198 <global_stdio_init.part.0>:
 8012198:	b510      	push	{r4, lr}
 801219a:	4b0b      	ldr	r3, [pc, #44]	; (80121c8 <global_stdio_init.part.0+0x30>)
 801219c:	4c0b      	ldr	r4, [pc, #44]	; (80121cc <global_stdio_init.part.0+0x34>)
 801219e:	4a0c      	ldr	r2, [pc, #48]	; (80121d0 <global_stdio_init.part.0+0x38>)
 80121a0:	601a      	str	r2, [r3, #0]
 80121a2:	4620      	mov	r0, r4
 80121a4:	2200      	movs	r2, #0
 80121a6:	2104      	movs	r1, #4
 80121a8:	f7ff ffa6 	bl	80120f8 <std>
 80121ac:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80121b0:	2201      	movs	r2, #1
 80121b2:	2109      	movs	r1, #9
 80121b4:	f7ff ffa0 	bl	80120f8 <std>
 80121b8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80121bc:	2202      	movs	r2, #2
 80121be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80121c2:	2112      	movs	r1, #18
 80121c4:	f7ff bf98 	b.w	80120f8 <std>
 80121c8:	200035b8 	.word	0x200035b8
 80121cc:	20003480 	.word	0x20003480
 80121d0:	08012141 	.word	0x08012141

080121d4 <__sfp_lock_acquire>:
 80121d4:	4801      	ldr	r0, [pc, #4]	; (80121dc <__sfp_lock_acquire+0x8>)
 80121d6:	f000 ba55 	b.w	8012684 <__retarget_lock_acquire_recursive>
 80121da:	bf00      	nop
 80121dc:	200035c1 	.word	0x200035c1

080121e0 <__sfp_lock_release>:
 80121e0:	4801      	ldr	r0, [pc, #4]	; (80121e8 <__sfp_lock_release+0x8>)
 80121e2:	f000 ba50 	b.w	8012686 <__retarget_lock_release_recursive>
 80121e6:	bf00      	nop
 80121e8:	200035c1 	.word	0x200035c1

080121ec <__sinit>:
 80121ec:	b510      	push	{r4, lr}
 80121ee:	4604      	mov	r4, r0
 80121f0:	f7ff fff0 	bl	80121d4 <__sfp_lock_acquire>
 80121f4:	6a23      	ldr	r3, [r4, #32]
 80121f6:	b11b      	cbz	r3, 8012200 <__sinit+0x14>
 80121f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80121fc:	f7ff bff0 	b.w	80121e0 <__sfp_lock_release>
 8012200:	4b04      	ldr	r3, [pc, #16]	; (8012214 <__sinit+0x28>)
 8012202:	6223      	str	r3, [r4, #32]
 8012204:	4b04      	ldr	r3, [pc, #16]	; (8012218 <__sinit+0x2c>)
 8012206:	681b      	ldr	r3, [r3, #0]
 8012208:	2b00      	cmp	r3, #0
 801220a:	d1f5      	bne.n	80121f8 <__sinit+0xc>
 801220c:	f7ff ffc4 	bl	8012198 <global_stdio_init.part.0>
 8012210:	e7f2      	b.n	80121f8 <__sinit+0xc>
 8012212:	bf00      	nop
 8012214:	08012159 	.word	0x08012159
 8012218:	200035b8 	.word	0x200035b8

0801221c <_fwalk_sglue>:
 801221c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012220:	4607      	mov	r7, r0
 8012222:	4688      	mov	r8, r1
 8012224:	4614      	mov	r4, r2
 8012226:	2600      	movs	r6, #0
 8012228:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801222c:	f1b9 0901 	subs.w	r9, r9, #1
 8012230:	d505      	bpl.n	801223e <_fwalk_sglue+0x22>
 8012232:	6824      	ldr	r4, [r4, #0]
 8012234:	2c00      	cmp	r4, #0
 8012236:	d1f7      	bne.n	8012228 <_fwalk_sglue+0xc>
 8012238:	4630      	mov	r0, r6
 801223a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801223e:	89ab      	ldrh	r3, [r5, #12]
 8012240:	2b01      	cmp	r3, #1
 8012242:	d907      	bls.n	8012254 <_fwalk_sglue+0x38>
 8012244:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8012248:	3301      	adds	r3, #1
 801224a:	d003      	beq.n	8012254 <_fwalk_sglue+0x38>
 801224c:	4629      	mov	r1, r5
 801224e:	4638      	mov	r0, r7
 8012250:	47c0      	blx	r8
 8012252:	4306      	orrs	r6, r0
 8012254:	3568      	adds	r5, #104	; 0x68
 8012256:	e7e9      	b.n	801222c <_fwalk_sglue+0x10>

08012258 <iprintf>:
 8012258:	b40f      	push	{r0, r1, r2, r3}
 801225a:	b507      	push	{r0, r1, r2, lr}
 801225c:	4906      	ldr	r1, [pc, #24]	; (8012278 <iprintf+0x20>)
 801225e:	ab04      	add	r3, sp, #16
 8012260:	6808      	ldr	r0, [r1, #0]
 8012262:	f853 2b04 	ldr.w	r2, [r3], #4
 8012266:	6881      	ldr	r1, [r0, #8]
 8012268:	9301      	str	r3, [sp, #4]
 801226a:	f001 fe95 	bl	8013f98 <_vfiprintf_r>
 801226e:	b003      	add	sp, #12
 8012270:	f85d eb04 	ldr.w	lr, [sp], #4
 8012274:	b004      	add	sp, #16
 8012276:	4770      	bx	lr
 8012278:	200001e0 	.word	0x200001e0

0801227c <_puts_r>:
 801227c:	6a03      	ldr	r3, [r0, #32]
 801227e:	b570      	push	{r4, r5, r6, lr}
 8012280:	6884      	ldr	r4, [r0, #8]
 8012282:	4605      	mov	r5, r0
 8012284:	460e      	mov	r6, r1
 8012286:	b90b      	cbnz	r3, 801228c <_puts_r+0x10>
 8012288:	f7ff ffb0 	bl	80121ec <__sinit>
 801228c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801228e:	07db      	lsls	r3, r3, #31
 8012290:	d405      	bmi.n	801229e <_puts_r+0x22>
 8012292:	89a3      	ldrh	r3, [r4, #12]
 8012294:	0598      	lsls	r0, r3, #22
 8012296:	d402      	bmi.n	801229e <_puts_r+0x22>
 8012298:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801229a:	f000 f9f3 	bl	8012684 <__retarget_lock_acquire_recursive>
 801229e:	89a3      	ldrh	r3, [r4, #12]
 80122a0:	0719      	lsls	r1, r3, #28
 80122a2:	d513      	bpl.n	80122cc <_puts_r+0x50>
 80122a4:	6923      	ldr	r3, [r4, #16]
 80122a6:	b18b      	cbz	r3, 80122cc <_puts_r+0x50>
 80122a8:	3e01      	subs	r6, #1
 80122aa:	68a3      	ldr	r3, [r4, #8]
 80122ac:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80122b0:	3b01      	subs	r3, #1
 80122b2:	60a3      	str	r3, [r4, #8]
 80122b4:	b9e9      	cbnz	r1, 80122f2 <_puts_r+0x76>
 80122b6:	2b00      	cmp	r3, #0
 80122b8:	da2e      	bge.n	8012318 <_puts_r+0x9c>
 80122ba:	4622      	mov	r2, r4
 80122bc:	210a      	movs	r1, #10
 80122be:	4628      	mov	r0, r5
 80122c0:	f000 f8cf 	bl	8012462 <__swbuf_r>
 80122c4:	3001      	adds	r0, #1
 80122c6:	d007      	beq.n	80122d8 <_puts_r+0x5c>
 80122c8:	250a      	movs	r5, #10
 80122ca:	e007      	b.n	80122dc <_puts_r+0x60>
 80122cc:	4621      	mov	r1, r4
 80122ce:	4628      	mov	r0, r5
 80122d0:	f000 f904 	bl	80124dc <__swsetup_r>
 80122d4:	2800      	cmp	r0, #0
 80122d6:	d0e7      	beq.n	80122a8 <_puts_r+0x2c>
 80122d8:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80122dc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80122de:	07da      	lsls	r2, r3, #31
 80122e0:	d405      	bmi.n	80122ee <_puts_r+0x72>
 80122e2:	89a3      	ldrh	r3, [r4, #12]
 80122e4:	059b      	lsls	r3, r3, #22
 80122e6:	d402      	bmi.n	80122ee <_puts_r+0x72>
 80122e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80122ea:	f000 f9cc 	bl	8012686 <__retarget_lock_release_recursive>
 80122ee:	4628      	mov	r0, r5
 80122f0:	bd70      	pop	{r4, r5, r6, pc}
 80122f2:	2b00      	cmp	r3, #0
 80122f4:	da04      	bge.n	8012300 <_puts_r+0x84>
 80122f6:	69a2      	ldr	r2, [r4, #24]
 80122f8:	429a      	cmp	r2, r3
 80122fa:	dc06      	bgt.n	801230a <_puts_r+0x8e>
 80122fc:	290a      	cmp	r1, #10
 80122fe:	d004      	beq.n	801230a <_puts_r+0x8e>
 8012300:	6823      	ldr	r3, [r4, #0]
 8012302:	1c5a      	adds	r2, r3, #1
 8012304:	6022      	str	r2, [r4, #0]
 8012306:	7019      	strb	r1, [r3, #0]
 8012308:	e7cf      	b.n	80122aa <_puts_r+0x2e>
 801230a:	4622      	mov	r2, r4
 801230c:	4628      	mov	r0, r5
 801230e:	f000 f8a8 	bl	8012462 <__swbuf_r>
 8012312:	3001      	adds	r0, #1
 8012314:	d1c9      	bne.n	80122aa <_puts_r+0x2e>
 8012316:	e7df      	b.n	80122d8 <_puts_r+0x5c>
 8012318:	6823      	ldr	r3, [r4, #0]
 801231a:	250a      	movs	r5, #10
 801231c:	1c5a      	adds	r2, r3, #1
 801231e:	6022      	str	r2, [r4, #0]
 8012320:	701d      	strb	r5, [r3, #0]
 8012322:	e7db      	b.n	80122dc <_puts_r+0x60>

08012324 <puts>:
 8012324:	4b02      	ldr	r3, [pc, #8]	; (8012330 <puts+0xc>)
 8012326:	4601      	mov	r1, r0
 8012328:	6818      	ldr	r0, [r3, #0]
 801232a:	f7ff bfa7 	b.w	801227c <_puts_r>
 801232e:	bf00      	nop
 8012330:	200001e0 	.word	0x200001e0

08012334 <sniprintf>:
 8012334:	b40c      	push	{r2, r3}
 8012336:	b530      	push	{r4, r5, lr}
 8012338:	4b17      	ldr	r3, [pc, #92]	; (8012398 <sniprintf+0x64>)
 801233a:	1e0c      	subs	r4, r1, #0
 801233c:	681d      	ldr	r5, [r3, #0]
 801233e:	b09d      	sub	sp, #116	; 0x74
 8012340:	da08      	bge.n	8012354 <sniprintf+0x20>
 8012342:	238b      	movs	r3, #139	; 0x8b
 8012344:	602b      	str	r3, [r5, #0]
 8012346:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801234a:	b01d      	add	sp, #116	; 0x74
 801234c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012350:	b002      	add	sp, #8
 8012352:	4770      	bx	lr
 8012354:	f44f 7302 	mov.w	r3, #520	; 0x208
 8012358:	f8ad 3014 	strh.w	r3, [sp, #20]
 801235c:	bf14      	ite	ne
 801235e:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8012362:	4623      	moveq	r3, r4
 8012364:	9304      	str	r3, [sp, #16]
 8012366:	9307      	str	r3, [sp, #28]
 8012368:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801236c:	9002      	str	r0, [sp, #8]
 801236e:	9006      	str	r0, [sp, #24]
 8012370:	f8ad 3016 	strh.w	r3, [sp, #22]
 8012374:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8012376:	ab21      	add	r3, sp, #132	; 0x84
 8012378:	a902      	add	r1, sp, #8
 801237a:	4628      	mov	r0, r5
 801237c:	9301      	str	r3, [sp, #4]
 801237e:	f001 fce3 	bl	8013d48 <_svfiprintf_r>
 8012382:	1c43      	adds	r3, r0, #1
 8012384:	bfbc      	itt	lt
 8012386:	238b      	movlt	r3, #139	; 0x8b
 8012388:	602b      	strlt	r3, [r5, #0]
 801238a:	2c00      	cmp	r4, #0
 801238c:	d0dd      	beq.n	801234a <sniprintf+0x16>
 801238e:	9b02      	ldr	r3, [sp, #8]
 8012390:	2200      	movs	r2, #0
 8012392:	701a      	strb	r2, [r3, #0]
 8012394:	e7d9      	b.n	801234a <sniprintf+0x16>
 8012396:	bf00      	nop
 8012398:	200001e0 	.word	0x200001e0

0801239c <siprintf>:
 801239c:	b40e      	push	{r1, r2, r3}
 801239e:	b500      	push	{lr}
 80123a0:	b09c      	sub	sp, #112	; 0x70
 80123a2:	ab1d      	add	r3, sp, #116	; 0x74
 80123a4:	9002      	str	r0, [sp, #8]
 80123a6:	9006      	str	r0, [sp, #24]
 80123a8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80123ac:	4809      	ldr	r0, [pc, #36]	; (80123d4 <siprintf+0x38>)
 80123ae:	9107      	str	r1, [sp, #28]
 80123b0:	9104      	str	r1, [sp, #16]
 80123b2:	4909      	ldr	r1, [pc, #36]	; (80123d8 <siprintf+0x3c>)
 80123b4:	f853 2b04 	ldr.w	r2, [r3], #4
 80123b8:	9105      	str	r1, [sp, #20]
 80123ba:	6800      	ldr	r0, [r0, #0]
 80123bc:	9301      	str	r3, [sp, #4]
 80123be:	a902      	add	r1, sp, #8
 80123c0:	f001 fcc2 	bl	8013d48 <_svfiprintf_r>
 80123c4:	9b02      	ldr	r3, [sp, #8]
 80123c6:	2200      	movs	r2, #0
 80123c8:	701a      	strb	r2, [r3, #0]
 80123ca:	b01c      	add	sp, #112	; 0x70
 80123cc:	f85d eb04 	ldr.w	lr, [sp], #4
 80123d0:	b003      	add	sp, #12
 80123d2:	4770      	bx	lr
 80123d4:	200001e0 	.word	0x200001e0
 80123d8:	ffff0208 	.word	0xffff0208

080123dc <__sread>:
 80123dc:	b510      	push	{r4, lr}
 80123de:	460c      	mov	r4, r1
 80123e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80123e4:	f000 f900 	bl	80125e8 <_read_r>
 80123e8:	2800      	cmp	r0, #0
 80123ea:	bfab      	itete	ge
 80123ec:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80123ee:	89a3      	ldrhlt	r3, [r4, #12]
 80123f0:	181b      	addge	r3, r3, r0
 80123f2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80123f6:	bfac      	ite	ge
 80123f8:	6563      	strge	r3, [r4, #84]	; 0x54
 80123fa:	81a3      	strhlt	r3, [r4, #12]
 80123fc:	bd10      	pop	{r4, pc}

080123fe <__swrite>:
 80123fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012402:	461f      	mov	r7, r3
 8012404:	898b      	ldrh	r3, [r1, #12]
 8012406:	05db      	lsls	r3, r3, #23
 8012408:	4605      	mov	r5, r0
 801240a:	460c      	mov	r4, r1
 801240c:	4616      	mov	r6, r2
 801240e:	d505      	bpl.n	801241c <__swrite+0x1e>
 8012410:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012414:	2302      	movs	r3, #2
 8012416:	2200      	movs	r2, #0
 8012418:	f000 f8d4 	bl	80125c4 <_lseek_r>
 801241c:	89a3      	ldrh	r3, [r4, #12]
 801241e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012422:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8012426:	81a3      	strh	r3, [r4, #12]
 8012428:	4632      	mov	r2, r6
 801242a:	463b      	mov	r3, r7
 801242c:	4628      	mov	r0, r5
 801242e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012432:	f000 b8eb 	b.w	801260c <_write_r>

08012436 <__sseek>:
 8012436:	b510      	push	{r4, lr}
 8012438:	460c      	mov	r4, r1
 801243a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801243e:	f000 f8c1 	bl	80125c4 <_lseek_r>
 8012442:	1c43      	adds	r3, r0, #1
 8012444:	89a3      	ldrh	r3, [r4, #12]
 8012446:	bf15      	itete	ne
 8012448:	6560      	strne	r0, [r4, #84]	; 0x54
 801244a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801244e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8012452:	81a3      	strheq	r3, [r4, #12]
 8012454:	bf18      	it	ne
 8012456:	81a3      	strhne	r3, [r4, #12]
 8012458:	bd10      	pop	{r4, pc}

0801245a <__sclose>:
 801245a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801245e:	f000 b8a1 	b.w	80125a4 <_close_r>

08012462 <__swbuf_r>:
 8012462:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012464:	460e      	mov	r6, r1
 8012466:	4614      	mov	r4, r2
 8012468:	4605      	mov	r5, r0
 801246a:	b118      	cbz	r0, 8012474 <__swbuf_r+0x12>
 801246c:	6a03      	ldr	r3, [r0, #32]
 801246e:	b90b      	cbnz	r3, 8012474 <__swbuf_r+0x12>
 8012470:	f7ff febc 	bl	80121ec <__sinit>
 8012474:	69a3      	ldr	r3, [r4, #24]
 8012476:	60a3      	str	r3, [r4, #8]
 8012478:	89a3      	ldrh	r3, [r4, #12]
 801247a:	071a      	lsls	r2, r3, #28
 801247c:	d525      	bpl.n	80124ca <__swbuf_r+0x68>
 801247e:	6923      	ldr	r3, [r4, #16]
 8012480:	b31b      	cbz	r3, 80124ca <__swbuf_r+0x68>
 8012482:	6823      	ldr	r3, [r4, #0]
 8012484:	6922      	ldr	r2, [r4, #16]
 8012486:	1a98      	subs	r0, r3, r2
 8012488:	6963      	ldr	r3, [r4, #20]
 801248a:	b2f6      	uxtb	r6, r6
 801248c:	4283      	cmp	r3, r0
 801248e:	4637      	mov	r7, r6
 8012490:	dc04      	bgt.n	801249c <__swbuf_r+0x3a>
 8012492:	4621      	mov	r1, r4
 8012494:	4628      	mov	r0, r5
 8012496:	f001 ff1f 	bl	80142d8 <_fflush_r>
 801249a:	b9e0      	cbnz	r0, 80124d6 <__swbuf_r+0x74>
 801249c:	68a3      	ldr	r3, [r4, #8]
 801249e:	3b01      	subs	r3, #1
 80124a0:	60a3      	str	r3, [r4, #8]
 80124a2:	6823      	ldr	r3, [r4, #0]
 80124a4:	1c5a      	adds	r2, r3, #1
 80124a6:	6022      	str	r2, [r4, #0]
 80124a8:	701e      	strb	r6, [r3, #0]
 80124aa:	6962      	ldr	r2, [r4, #20]
 80124ac:	1c43      	adds	r3, r0, #1
 80124ae:	429a      	cmp	r2, r3
 80124b0:	d004      	beq.n	80124bc <__swbuf_r+0x5a>
 80124b2:	89a3      	ldrh	r3, [r4, #12]
 80124b4:	07db      	lsls	r3, r3, #31
 80124b6:	d506      	bpl.n	80124c6 <__swbuf_r+0x64>
 80124b8:	2e0a      	cmp	r6, #10
 80124ba:	d104      	bne.n	80124c6 <__swbuf_r+0x64>
 80124bc:	4621      	mov	r1, r4
 80124be:	4628      	mov	r0, r5
 80124c0:	f001 ff0a 	bl	80142d8 <_fflush_r>
 80124c4:	b938      	cbnz	r0, 80124d6 <__swbuf_r+0x74>
 80124c6:	4638      	mov	r0, r7
 80124c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80124ca:	4621      	mov	r1, r4
 80124cc:	4628      	mov	r0, r5
 80124ce:	f000 f805 	bl	80124dc <__swsetup_r>
 80124d2:	2800      	cmp	r0, #0
 80124d4:	d0d5      	beq.n	8012482 <__swbuf_r+0x20>
 80124d6:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80124da:	e7f4      	b.n	80124c6 <__swbuf_r+0x64>

080124dc <__swsetup_r>:
 80124dc:	b538      	push	{r3, r4, r5, lr}
 80124de:	4b2a      	ldr	r3, [pc, #168]	; (8012588 <__swsetup_r+0xac>)
 80124e0:	4605      	mov	r5, r0
 80124e2:	6818      	ldr	r0, [r3, #0]
 80124e4:	460c      	mov	r4, r1
 80124e6:	b118      	cbz	r0, 80124f0 <__swsetup_r+0x14>
 80124e8:	6a03      	ldr	r3, [r0, #32]
 80124ea:	b90b      	cbnz	r3, 80124f0 <__swsetup_r+0x14>
 80124ec:	f7ff fe7e 	bl	80121ec <__sinit>
 80124f0:	89a3      	ldrh	r3, [r4, #12]
 80124f2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80124f6:	0718      	lsls	r0, r3, #28
 80124f8:	d422      	bmi.n	8012540 <__swsetup_r+0x64>
 80124fa:	06d9      	lsls	r1, r3, #27
 80124fc:	d407      	bmi.n	801250e <__swsetup_r+0x32>
 80124fe:	2309      	movs	r3, #9
 8012500:	602b      	str	r3, [r5, #0]
 8012502:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8012506:	81a3      	strh	r3, [r4, #12]
 8012508:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801250c:	e034      	b.n	8012578 <__swsetup_r+0x9c>
 801250e:	0758      	lsls	r0, r3, #29
 8012510:	d512      	bpl.n	8012538 <__swsetup_r+0x5c>
 8012512:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012514:	b141      	cbz	r1, 8012528 <__swsetup_r+0x4c>
 8012516:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801251a:	4299      	cmp	r1, r3
 801251c:	d002      	beq.n	8012524 <__swsetup_r+0x48>
 801251e:	4628      	mov	r0, r5
 8012520:	f000 ff3c 	bl	801339c <_free_r>
 8012524:	2300      	movs	r3, #0
 8012526:	6363      	str	r3, [r4, #52]	; 0x34
 8012528:	89a3      	ldrh	r3, [r4, #12]
 801252a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801252e:	81a3      	strh	r3, [r4, #12]
 8012530:	2300      	movs	r3, #0
 8012532:	6063      	str	r3, [r4, #4]
 8012534:	6923      	ldr	r3, [r4, #16]
 8012536:	6023      	str	r3, [r4, #0]
 8012538:	89a3      	ldrh	r3, [r4, #12]
 801253a:	f043 0308 	orr.w	r3, r3, #8
 801253e:	81a3      	strh	r3, [r4, #12]
 8012540:	6923      	ldr	r3, [r4, #16]
 8012542:	b94b      	cbnz	r3, 8012558 <__swsetup_r+0x7c>
 8012544:	89a3      	ldrh	r3, [r4, #12]
 8012546:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801254a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801254e:	d003      	beq.n	8012558 <__swsetup_r+0x7c>
 8012550:	4621      	mov	r1, r4
 8012552:	4628      	mov	r0, r5
 8012554:	f001 ff0e 	bl	8014374 <__smakebuf_r>
 8012558:	89a0      	ldrh	r0, [r4, #12]
 801255a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801255e:	f010 0301 	ands.w	r3, r0, #1
 8012562:	d00a      	beq.n	801257a <__swsetup_r+0x9e>
 8012564:	2300      	movs	r3, #0
 8012566:	60a3      	str	r3, [r4, #8]
 8012568:	6963      	ldr	r3, [r4, #20]
 801256a:	425b      	negs	r3, r3
 801256c:	61a3      	str	r3, [r4, #24]
 801256e:	6923      	ldr	r3, [r4, #16]
 8012570:	b943      	cbnz	r3, 8012584 <__swsetup_r+0xa8>
 8012572:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8012576:	d1c4      	bne.n	8012502 <__swsetup_r+0x26>
 8012578:	bd38      	pop	{r3, r4, r5, pc}
 801257a:	0781      	lsls	r1, r0, #30
 801257c:	bf58      	it	pl
 801257e:	6963      	ldrpl	r3, [r4, #20]
 8012580:	60a3      	str	r3, [r4, #8]
 8012582:	e7f4      	b.n	801256e <__swsetup_r+0x92>
 8012584:	2000      	movs	r0, #0
 8012586:	e7f7      	b.n	8012578 <__swsetup_r+0x9c>
 8012588:	200001e0 	.word	0x200001e0

0801258c <memset>:
 801258c:	4402      	add	r2, r0
 801258e:	4603      	mov	r3, r0
 8012590:	4293      	cmp	r3, r2
 8012592:	d100      	bne.n	8012596 <memset+0xa>
 8012594:	4770      	bx	lr
 8012596:	f803 1b01 	strb.w	r1, [r3], #1
 801259a:	e7f9      	b.n	8012590 <memset+0x4>

0801259c <_localeconv_r>:
 801259c:	4800      	ldr	r0, [pc, #0]	; (80125a0 <_localeconv_r+0x4>)
 801259e:	4770      	bx	lr
 80125a0:	200002d4 	.word	0x200002d4

080125a4 <_close_r>:
 80125a4:	b538      	push	{r3, r4, r5, lr}
 80125a6:	4d06      	ldr	r5, [pc, #24]	; (80125c0 <_close_r+0x1c>)
 80125a8:	2300      	movs	r3, #0
 80125aa:	4604      	mov	r4, r0
 80125ac:	4608      	mov	r0, r1
 80125ae:	602b      	str	r3, [r5, #0]
 80125b0:	f7ef fc37 	bl	8001e22 <_close>
 80125b4:	1c43      	adds	r3, r0, #1
 80125b6:	d102      	bne.n	80125be <_close_r+0x1a>
 80125b8:	682b      	ldr	r3, [r5, #0]
 80125ba:	b103      	cbz	r3, 80125be <_close_r+0x1a>
 80125bc:	6023      	str	r3, [r4, #0]
 80125be:	bd38      	pop	{r3, r4, r5, pc}
 80125c0:	200035bc 	.word	0x200035bc

080125c4 <_lseek_r>:
 80125c4:	b538      	push	{r3, r4, r5, lr}
 80125c6:	4d07      	ldr	r5, [pc, #28]	; (80125e4 <_lseek_r+0x20>)
 80125c8:	4604      	mov	r4, r0
 80125ca:	4608      	mov	r0, r1
 80125cc:	4611      	mov	r1, r2
 80125ce:	2200      	movs	r2, #0
 80125d0:	602a      	str	r2, [r5, #0]
 80125d2:	461a      	mov	r2, r3
 80125d4:	f7ef fc4c 	bl	8001e70 <_lseek>
 80125d8:	1c43      	adds	r3, r0, #1
 80125da:	d102      	bne.n	80125e2 <_lseek_r+0x1e>
 80125dc:	682b      	ldr	r3, [r5, #0]
 80125de:	b103      	cbz	r3, 80125e2 <_lseek_r+0x1e>
 80125e0:	6023      	str	r3, [r4, #0]
 80125e2:	bd38      	pop	{r3, r4, r5, pc}
 80125e4:	200035bc 	.word	0x200035bc

080125e8 <_read_r>:
 80125e8:	b538      	push	{r3, r4, r5, lr}
 80125ea:	4d07      	ldr	r5, [pc, #28]	; (8012608 <_read_r+0x20>)
 80125ec:	4604      	mov	r4, r0
 80125ee:	4608      	mov	r0, r1
 80125f0:	4611      	mov	r1, r2
 80125f2:	2200      	movs	r2, #0
 80125f4:	602a      	str	r2, [r5, #0]
 80125f6:	461a      	mov	r2, r3
 80125f8:	f7ef fbda 	bl	8001db0 <_read>
 80125fc:	1c43      	adds	r3, r0, #1
 80125fe:	d102      	bne.n	8012606 <_read_r+0x1e>
 8012600:	682b      	ldr	r3, [r5, #0]
 8012602:	b103      	cbz	r3, 8012606 <_read_r+0x1e>
 8012604:	6023      	str	r3, [r4, #0]
 8012606:	bd38      	pop	{r3, r4, r5, pc}
 8012608:	200035bc 	.word	0x200035bc

0801260c <_write_r>:
 801260c:	b538      	push	{r3, r4, r5, lr}
 801260e:	4d07      	ldr	r5, [pc, #28]	; (801262c <_write_r+0x20>)
 8012610:	4604      	mov	r4, r0
 8012612:	4608      	mov	r0, r1
 8012614:	4611      	mov	r1, r2
 8012616:	2200      	movs	r2, #0
 8012618:	602a      	str	r2, [r5, #0]
 801261a:	461a      	mov	r2, r3
 801261c:	f7ef fbe5 	bl	8001dea <_write>
 8012620:	1c43      	adds	r3, r0, #1
 8012622:	d102      	bne.n	801262a <_write_r+0x1e>
 8012624:	682b      	ldr	r3, [r5, #0]
 8012626:	b103      	cbz	r3, 801262a <_write_r+0x1e>
 8012628:	6023      	str	r3, [r4, #0]
 801262a:	bd38      	pop	{r3, r4, r5, pc}
 801262c:	200035bc 	.word	0x200035bc

08012630 <__errno>:
 8012630:	4b01      	ldr	r3, [pc, #4]	; (8012638 <__errno+0x8>)
 8012632:	6818      	ldr	r0, [r3, #0]
 8012634:	4770      	bx	lr
 8012636:	bf00      	nop
 8012638:	200001e0 	.word	0x200001e0

0801263c <__libc_init_array>:
 801263c:	b570      	push	{r4, r5, r6, lr}
 801263e:	4d0d      	ldr	r5, [pc, #52]	; (8012674 <__libc_init_array+0x38>)
 8012640:	4c0d      	ldr	r4, [pc, #52]	; (8012678 <__libc_init_array+0x3c>)
 8012642:	1b64      	subs	r4, r4, r5
 8012644:	10a4      	asrs	r4, r4, #2
 8012646:	2600      	movs	r6, #0
 8012648:	42a6      	cmp	r6, r4
 801264a:	d109      	bne.n	8012660 <__libc_init_array+0x24>
 801264c:	4d0b      	ldr	r5, [pc, #44]	; (801267c <__libc_init_array+0x40>)
 801264e:	4c0c      	ldr	r4, [pc, #48]	; (8012680 <__libc_init_array+0x44>)
 8012650:	f002 f800 	bl	8014654 <_init>
 8012654:	1b64      	subs	r4, r4, r5
 8012656:	10a4      	asrs	r4, r4, #2
 8012658:	2600      	movs	r6, #0
 801265a:	42a6      	cmp	r6, r4
 801265c:	d105      	bne.n	801266a <__libc_init_array+0x2e>
 801265e:	bd70      	pop	{r4, r5, r6, pc}
 8012660:	f855 3b04 	ldr.w	r3, [r5], #4
 8012664:	4798      	blx	r3
 8012666:	3601      	adds	r6, #1
 8012668:	e7ee      	b.n	8012648 <__libc_init_array+0xc>
 801266a:	f855 3b04 	ldr.w	r3, [r5], #4
 801266e:	4798      	blx	r3
 8012670:	3601      	adds	r6, #1
 8012672:	e7f2      	b.n	801265a <__libc_init_array+0x1e>
 8012674:	08014e3c 	.word	0x08014e3c
 8012678:	08014e3c 	.word	0x08014e3c
 801267c:	08014e3c 	.word	0x08014e3c
 8012680:	08014e40 	.word	0x08014e40

08012684 <__retarget_lock_acquire_recursive>:
 8012684:	4770      	bx	lr

08012686 <__retarget_lock_release_recursive>:
 8012686:	4770      	bx	lr

08012688 <memcpy>:
 8012688:	440a      	add	r2, r1
 801268a:	4291      	cmp	r1, r2
 801268c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8012690:	d100      	bne.n	8012694 <memcpy+0xc>
 8012692:	4770      	bx	lr
 8012694:	b510      	push	{r4, lr}
 8012696:	f811 4b01 	ldrb.w	r4, [r1], #1
 801269a:	f803 4f01 	strb.w	r4, [r3, #1]!
 801269e:	4291      	cmp	r1, r2
 80126a0:	d1f9      	bne.n	8012696 <memcpy+0xe>
 80126a2:	bd10      	pop	{r4, pc}

080126a4 <quorem>:
 80126a4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80126a8:	6903      	ldr	r3, [r0, #16]
 80126aa:	690c      	ldr	r4, [r1, #16]
 80126ac:	42a3      	cmp	r3, r4
 80126ae:	4607      	mov	r7, r0
 80126b0:	db7e      	blt.n	80127b0 <quorem+0x10c>
 80126b2:	3c01      	subs	r4, #1
 80126b4:	f101 0814 	add.w	r8, r1, #20
 80126b8:	f100 0514 	add.w	r5, r0, #20
 80126bc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80126c0:	9301      	str	r3, [sp, #4]
 80126c2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80126c6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80126ca:	3301      	adds	r3, #1
 80126cc:	429a      	cmp	r2, r3
 80126ce:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80126d2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80126d6:	fbb2 f6f3 	udiv	r6, r2, r3
 80126da:	d331      	bcc.n	8012740 <quorem+0x9c>
 80126dc:	f04f 0e00 	mov.w	lr, #0
 80126e0:	4640      	mov	r0, r8
 80126e2:	46ac      	mov	ip, r5
 80126e4:	46f2      	mov	sl, lr
 80126e6:	f850 2b04 	ldr.w	r2, [r0], #4
 80126ea:	b293      	uxth	r3, r2
 80126ec:	fb06 e303 	mla	r3, r6, r3, lr
 80126f0:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80126f4:	0c1a      	lsrs	r2, r3, #16
 80126f6:	b29b      	uxth	r3, r3
 80126f8:	ebaa 0303 	sub.w	r3, sl, r3
 80126fc:	f8dc a000 	ldr.w	sl, [ip]
 8012700:	fa13 f38a 	uxtah	r3, r3, sl
 8012704:	fb06 220e 	mla	r2, r6, lr, r2
 8012708:	9300      	str	r3, [sp, #0]
 801270a:	9b00      	ldr	r3, [sp, #0]
 801270c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8012710:	b292      	uxth	r2, r2
 8012712:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8012716:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801271a:	f8bd 3000 	ldrh.w	r3, [sp]
 801271e:	4581      	cmp	r9, r0
 8012720:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8012724:	f84c 3b04 	str.w	r3, [ip], #4
 8012728:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801272c:	d2db      	bcs.n	80126e6 <quorem+0x42>
 801272e:	f855 300b 	ldr.w	r3, [r5, fp]
 8012732:	b92b      	cbnz	r3, 8012740 <quorem+0x9c>
 8012734:	9b01      	ldr	r3, [sp, #4]
 8012736:	3b04      	subs	r3, #4
 8012738:	429d      	cmp	r5, r3
 801273a:	461a      	mov	r2, r3
 801273c:	d32c      	bcc.n	8012798 <quorem+0xf4>
 801273e:	613c      	str	r4, [r7, #16]
 8012740:	4638      	mov	r0, r7
 8012742:	f001 f9a7 	bl	8013a94 <__mcmp>
 8012746:	2800      	cmp	r0, #0
 8012748:	db22      	blt.n	8012790 <quorem+0xec>
 801274a:	3601      	adds	r6, #1
 801274c:	4629      	mov	r1, r5
 801274e:	2000      	movs	r0, #0
 8012750:	f858 2b04 	ldr.w	r2, [r8], #4
 8012754:	f8d1 c000 	ldr.w	ip, [r1]
 8012758:	b293      	uxth	r3, r2
 801275a:	1ac3      	subs	r3, r0, r3
 801275c:	0c12      	lsrs	r2, r2, #16
 801275e:	fa13 f38c 	uxtah	r3, r3, ip
 8012762:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8012766:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801276a:	b29b      	uxth	r3, r3
 801276c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8012770:	45c1      	cmp	r9, r8
 8012772:	f841 3b04 	str.w	r3, [r1], #4
 8012776:	ea4f 4022 	mov.w	r0, r2, asr #16
 801277a:	d2e9      	bcs.n	8012750 <quorem+0xac>
 801277c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8012780:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8012784:	b922      	cbnz	r2, 8012790 <quorem+0xec>
 8012786:	3b04      	subs	r3, #4
 8012788:	429d      	cmp	r5, r3
 801278a:	461a      	mov	r2, r3
 801278c:	d30a      	bcc.n	80127a4 <quorem+0x100>
 801278e:	613c      	str	r4, [r7, #16]
 8012790:	4630      	mov	r0, r6
 8012792:	b003      	add	sp, #12
 8012794:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012798:	6812      	ldr	r2, [r2, #0]
 801279a:	3b04      	subs	r3, #4
 801279c:	2a00      	cmp	r2, #0
 801279e:	d1ce      	bne.n	801273e <quorem+0x9a>
 80127a0:	3c01      	subs	r4, #1
 80127a2:	e7c9      	b.n	8012738 <quorem+0x94>
 80127a4:	6812      	ldr	r2, [r2, #0]
 80127a6:	3b04      	subs	r3, #4
 80127a8:	2a00      	cmp	r2, #0
 80127aa:	d1f0      	bne.n	801278e <quorem+0xea>
 80127ac:	3c01      	subs	r4, #1
 80127ae:	e7eb      	b.n	8012788 <quorem+0xe4>
 80127b0:	2000      	movs	r0, #0
 80127b2:	e7ee      	b.n	8012792 <quorem+0xee>
 80127b4:	0000      	movs	r0, r0
	...

080127b8 <_dtoa_r>:
 80127b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80127bc:	ed2d 8b04 	vpush	{d8-d9}
 80127c0:	69c5      	ldr	r5, [r0, #28]
 80127c2:	b093      	sub	sp, #76	; 0x4c
 80127c4:	ed8d 0b02 	vstr	d0, [sp, #8]
 80127c8:	ec57 6b10 	vmov	r6, r7, d0
 80127cc:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80127d0:	9107      	str	r1, [sp, #28]
 80127d2:	4604      	mov	r4, r0
 80127d4:	920a      	str	r2, [sp, #40]	; 0x28
 80127d6:	930d      	str	r3, [sp, #52]	; 0x34
 80127d8:	b975      	cbnz	r5, 80127f8 <_dtoa_r+0x40>
 80127da:	2010      	movs	r0, #16
 80127dc:	f000 fe2a 	bl	8013434 <malloc>
 80127e0:	4602      	mov	r2, r0
 80127e2:	61e0      	str	r0, [r4, #28]
 80127e4:	b920      	cbnz	r0, 80127f0 <_dtoa_r+0x38>
 80127e6:	4bae      	ldr	r3, [pc, #696]	; (8012aa0 <_dtoa_r+0x2e8>)
 80127e8:	21ef      	movs	r1, #239	; 0xef
 80127ea:	48ae      	ldr	r0, [pc, #696]	; (8012aa4 <_dtoa_r+0x2ec>)
 80127ec:	f001 fe4a 	bl	8014484 <__assert_func>
 80127f0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80127f4:	6005      	str	r5, [r0, #0]
 80127f6:	60c5      	str	r5, [r0, #12]
 80127f8:	69e3      	ldr	r3, [r4, #28]
 80127fa:	6819      	ldr	r1, [r3, #0]
 80127fc:	b151      	cbz	r1, 8012814 <_dtoa_r+0x5c>
 80127fe:	685a      	ldr	r2, [r3, #4]
 8012800:	604a      	str	r2, [r1, #4]
 8012802:	2301      	movs	r3, #1
 8012804:	4093      	lsls	r3, r2
 8012806:	608b      	str	r3, [r1, #8]
 8012808:	4620      	mov	r0, r4
 801280a:	f000 ff07 	bl	801361c <_Bfree>
 801280e:	69e3      	ldr	r3, [r4, #28]
 8012810:	2200      	movs	r2, #0
 8012812:	601a      	str	r2, [r3, #0]
 8012814:	1e3b      	subs	r3, r7, #0
 8012816:	bfbb      	ittet	lt
 8012818:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801281c:	9303      	strlt	r3, [sp, #12]
 801281e:	2300      	movge	r3, #0
 8012820:	2201      	movlt	r2, #1
 8012822:	bfac      	ite	ge
 8012824:	f8c8 3000 	strge.w	r3, [r8]
 8012828:	f8c8 2000 	strlt.w	r2, [r8]
 801282c:	4b9e      	ldr	r3, [pc, #632]	; (8012aa8 <_dtoa_r+0x2f0>)
 801282e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8012832:	ea33 0308 	bics.w	r3, r3, r8
 8012836:	d11b      	bne.n	8012870 <_dtoa_r+0xb8>
 8012838:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801283a:	f242 730f 	movw	r3, #9999	; 0x270f
 801283e:	6013      	str	r3, [r2, #0]
 8012840:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8012844:	4333      	orrs	r3, r6
 8012846:	f000 8593 	beq.w	8013370 <_dtoa_r+0xbb8>
 801284a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801284c:	b963      	cbnz	r3, 8012868 <_dtoa_r+0xb0>
 801284e:	4b97      	ldr	r3, [pc, #604]	; (8012aac <_dtoa_r+0x2f4>)
 8012850:	e027      	b.n	80128a2 <_dtoa_r+0xea>
 8012852:	4b97      	ldr	r3, [pc, #604]	; (8012ab0 <_dtoa_r+0x2f8>)
 8012854:	9300      	str	r3, [sp, #0]
 8012856:	3308      	adds	r3, #8
 8012858:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801285a:	6013      	str	r3, [r2, #0]
 801285c:	9800      	ldr	r0, [sp, #0]
 801285e:	b013      	add	sp, #76	; 0x4c
 8012860:	ecbd 8b04 	vpop	{d8-d9}
 8012864:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012868:	4b90      	ldr	r3, [pc, #576]	; (8012aac <_dtoa_r+0x2f4>)
 801286a:	9300      	str	r3, [sp, #0]
 801286c:	3303      	adds	r3, #3
 801286e:	e7f3      	b.n	8012858 <_dtoa_r+0xa0>
 8012870:	ed9d 7b02 	vldr	d7, [sp, #8]
 8012874:	2200      	movs	r2, #0
 8012876:	ec51 0b17 	vmov	r0, r1, d7
 801287a:	eeb0 8a47 	vmov.f32	s16, s14
 801287e:	eef0 8a67 	vmov.f32	s17, s15
 8012882:	2300      	movs	r3, #0
 8012884:	f7ee f948 	bl	8000b18 <__aeabi_dcmpeq>
 8012888:	4681      	mov	r9, r0
 801288a:	b160      	cbz	r0, 80128a6 <_dtoa_r+0xee>
 801288c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801288e:	2301      	movs	r3, #1
 8012890:	6013      	str	r3, [r2, #0]
 8012892:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012894:	2b00      	cmp	r3, #0
 8012896:	f000 8568 	beq.w	801336a <_dtoa_r+0xbb2>
 801289a:	4b86      	ldr	r3, [pc, #536]	; (8012ab4 <_dtoa_r+0x2fc>)
 801289c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801289e:	6013      	str	r3, [r2, #0]
 80128a0:	3b01      	subs	r3, #1
 80128a2:	9300      	str	r3, [sp, #0]
 80128a4:	e7da      	b.n	801285c <_dtoa_r+0xa4>
 80128a6:	aa10      	add	r2, sp, #64	; 0x40
 80128a8:	a911      	add	r1, sp, #68	; 0x44
 80128aa:	4620      	mov	r0, r4
 80128ac:	eeb0 0a48 	vmov.f32	s0, s16
 80128b0:	eef0 0a68 	vmov.f32	s1, s17
 80128b4:	f001 f994 	bl	8013be0 <__d2b>
 80128b8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80128bc:	4682      	mov	sl, r0
 80128be:	2d00      	cmp	r5, #0
 80128c0:	d07f      	beq.n	80129c2 <_dtoa_r+0x20a>
 80128c2:	ee18 3a90 	vmov	r3, s17
 80128c6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80128ca:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80128ce:	ec51 0b18 	vmov	r0, r1, d8
 80128d2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80128d6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80128da:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 80128de:	4619      	mov	r1, r3
 80128e0:	2200      	movs	r2, #0
 80128e2:	4b75      	ldr	r3, [pc, #468]	; (8012ab8 <_dtoa_r+0x300>)
 80128e4:	f7ed fcf8 	bl	80002d8 <__aeabi_dsub>
 80128e8:	a367      	add	r3, pc, #412	; (adr r3, 8012a88 <_dtoa_r+0x2d0>)
 80128ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80128ee:	f7ed feab 	bl	8000648 <__aeabi_dmul>
 80128f2:	a367      	add	r3, pc, #412	; (adr r3, 8012a90 <_dtoa_r+0x2d8>)
 80128f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80128f8:	f7ed fcf0 	bl	80002dc <__adddf3>
 80128fc:	4606      	mov	r6, r0
 80128fe:	4628      	mov	r0, r5
 8012900:	460f      	mov	r7, r1
 8012902:	f7ed fe37 	bl	8000574 <__aeabi_i2d>
 8012906:	a364      	add	r3, pc, #400	; (adr r3, 8012a98 <_dtoa_r+0x2e0>)
 8012908:	e9d3 2300 	ldrd	r2, r3, [r3]
 801290c:	f7ed fe9c 	bl	8000648 <__aeabi_dmul>
 8012910:	4602      	mov	r2, r0
 8012912:	460b      	mov	r3, r1
 8012914:	4630      	mov	r0, r6
 8012916:	4639      	mov	r1, r7
 8012918:	f7ed fce0 	bl	80002dc <__adddf3>
 801291c:	4606      	mov	r6, r0
 801291e:	460f      	mov	r7, r1
 8012920:	f7ee f942 	bl	8000ba8 <__aeabi_d2iz>
 8012924:	2200      	movs	r2, #0
 8012926:	4683      	mov	fp, r0
 8012928:	2300      	movs	r3, #0
 801292a:	4630      	mov	r0, r6
 801292c:	4639      	mov	r1, r7
 801292e:	f7ee f8fd 	bl	8000b2c <__aeabi_dcmplt>
 8012932:	b148      	cbz	r0, 8012948 <_dtoa_r+0x190>
 8012934:	4658      	mov	r0, fp
 8012936:	f7ed fe1d 	bl	8000574 <__aeabi_i2d>
 801293a:	4632      	mov	r2, r6
 801293c:	463b      	mov	r3, r7
 801293e:	f7ee f8eb 	bl	8000b18 <__aeabi_dcmpeq>
 8012942:	b908      	cbnz	r0, 8012948 <_dtoa_r+0x190>
 8012944:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8012948:	f1bb 0f16 	cmp.w	fp, #22
 801294c:	d857      	bhi.n	80129fe <_dtoa_r+0x246>
 801294e:	4b5b      	ldr	r3, [pc, #364]	; (8012abc <_dtoa_r+0x304>)
 8012950:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8012954:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012958:	ec51 0b18 	vmov	r0, r1, d8
 801295c:	f7ee f8e6 	bl	8000b2c <__aeabi_dcmplt>
 8012960:	2800      	cmp	r0, #0
 8012962:	d04e      	beq.n	8012a02 <_dtoa_r+0x24a>
 8012964:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8012968:	2300      	movs	r3, #0
 801296a:	930c      	str	r3, [sp, #48]	; 0x30
 801296c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801296e:	1b5b      	subs	r3, r3, r5
 8012970:	1e5a      	subs	r2, r3, #1
 8012972:	bf45      	ittet	mi
 8012974:	f1c3 0301 	rsbmi	r3, r3, #1
 8012978:	9305      	strmi	r3, [sp, #20]
 801297a:	2300      	movpl	r3, #0
 801297c:	2300      	movmi	r3, #0
 801297e:	9206      	str	r2, [sp, #24]
 8012980:	bf54      	ite	pl
 8012982:	9305      	strpl	r3, [sp, #20]
 8012984:	9306      	strmi	r3, [sp, #24]
 8012986:	f1bb 0f00 	cmp.w	fp, #0
 801298a:	db3c      	blt.n	8012a06 <_dtoa_r+0x24e>
 801298c:	9b06      	ldr	r3, [sp, #24]
 801298e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8012992:	445b      	add	r3, fp
 8012994:	9306      	str	r3, [sp, #24]
 8012996:	2300      	movs	r3, #0
 8012998:	9308      	str	r3, [sp, #32]
 801299a:	9b07      	ldr	r3, [sp, #28]
 801299c:	2b09      	cmp	r3, #9
 801299e:	d868      	bhi.n	8012a72 <_dtoa_r+0x2ba>
 80129a0:	2b05      	cmp	r3, #5
 80129a2:	bfc4      	itt	gt
 80129a4:	3b04      	subgt	r3, #4
 80129a6:	9307      	strgt	r3, [sp, #28]
 80129a8:	9b07      	ldr	r3, [sp, #28]
 80129aa:	f1a3 0302 	sub.w	r3, r3, #2
 80129ae:	bfcc      	ite	gt
 80129b0:	2500      	movgt	r5, #0
 80129b2:	2501      	movle	r5, #1
 80129b4:	2b03      	cmp	r3, #3
 80129b6:	f200 8085 	bhi.w	8012ac4 <_dtoa_r+0x30c>
 80129ba:	e8df f003 	tbb	[pc, r3]
 80129be:	3b2e      	.short	0x3b2e
 80129c0:	5839      	.short	0x5839
 80129c2:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80129c6:	441d      	add	r5, r3
 80129c8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80129cc:	2b20      	cmp	r3, #32
 80129ce:	bfc1      	itttt	gt
 80129d0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80129d4:	fa08 f803 	lslgt.w	r8, r8, r3
 80129d8:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 80129dc:	fa26 f303 	lsrgt.w	r3, r6, r3
 80129e0:	bfd6      	itet	le
 80129e2:	f1c3 0320 	rsble	r3, r3, #32
 80129e6:	ea48 0003 	orrgt.w	r0, r8, r3
 80129ea:	fa06 f003 	lslle.w	r0, r6, r3
 80129ee:	f7ed fdb1 	bl	8000554 <__aeabi_ui2d>
 80129f2:	2201      	movs	r2, #1
 80129f4:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 80129f8:	3d01      	subs	r5, #1
 80129fa:	920e      	str	r2, [sp, #56]	; 0x38
 80129fc:	e76f      	b.n	80128de <_dtoa_r+0x126>
 80129fe:	2301      	movs	r3, #1
 8012a00:	e7b3      	b.n	801296a <_dtoa_r+0x1b2>
 8012a02:	900c      	str	r0, [sp, #48]	; 0x30
 8012a04:	e7b2      	b.n	801296c <_dtoa_r+0x1b4>
 8012a06:	9b05      	ldr	r3, [sp, #20]
 8012a08:	eba3 030b 	sub.w	r3, r3, fp
 8012a0c:	9305      	str	r3, [sp, #20]
 8012a0e:	f1cb 0300 	rsb	r3, fp, #0
 8012a12:	9308      	str	r3, [sp, #32]
 8012a14:	2300      	movs	r3, #0
 8012a16:	930b      	str	r3, [sp, #44]	; 0x2c
 8012a18:	e7bf      	b.n	801299a <_dtoa_r+0x1e2>
 8012a1a:	2300      	movs	r3, #0
 8012a1c:	9309      	str	r3, [sp, #36]	; 0x24
 8012a1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012a20:	2b00      	cmp	r3, #0
 8012a22:	dc52      	bgt.n	8012aca <_dtoa_r+0x312>
 8012a24:	2301      	movs	r3, #1
 8012a26:	9301      	str	r3, [sp, #4]
 8012a28:	9304      	str	r3, [sp, #16]
 8012a2a:	461a      	mov	r2, r3
 8012a2c:	920a      	str	r2, [sp, #40]	; 0x28
 8012a2e:	e00b      	b.n	8012a48 <_dtoa_r+0x290>
 8012a30:	2301      	movs	r3, #1
 8012a32:	e7f3      	b.n	8012a1c <_dtoa_r+0x264>
 8012a34:	2300      	movs	r3, #0
 8012a36:	9309      	str	r3, [sp, #36]	; 0x24
 8012a38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012a3a:	445b      	add	r3, fp
 8012a3c:	9301      	str	r3, [sp, #4]
 8012a3e:	3301      	adds	r3, #1
 8012a40:	2b01      	cmp	r3, #1
 8012a42:	9304      	str	r3, [sp, #16]
 8012a44:	bfb8      	it	lt
 8012a46:	2301      	movlt	r3, #1
 8012a48:	69e0      	ldr	r0, [r4, #28]
 8012a4a:	2100      	movs	r1, #0
 8012a4c:	2204      	movs	r2, #4
 8012a4e:	f102 0614 	add.w	r6, r2, #20
 8012a52:	429e      	cmp	r6, r3
 8012a54:	d93d      	bls.n	8012ad2 <_dtoa_r+0x31a>
 8012a56:	6041      	str	r1, [r0, #4]
 8012a58:	4620      	mov	r0, r4
 8012a5a:	f000 fd9f 	bl	801359c <_Balloc>
 8012a5e:	9000      	str	r0, [sp, #0]
 8012a60:	2800      	cmp	r0, #0
 8012a62:	d139      	bne.n	8012ad8 <_dtoa_r+0x320>
 8012a64:	4b16      	ldr	r3, [pc, #88]	; (8012ac0 <_dtoa_r+0x308>)
 8012a66:	4602      	mov	r2, r0
 8012a68:	f240 11af 	movw	r1, #431	; 0x1af
 8012a6c:	e6bd      	b.n	80127ea <_dtoa_r+0x32>
 8012a6e:	2301      	movs	r3, #1
 8012a70:	e7e1      	b.n	8012a36 <_dtoa_r+0x27e>
 8012a72:	2501      	movs	r5, #1
 8012a74:	2300      	movs	r3, #0
 8012a76:	9307      	str	r3, [sp, #28]
 8012a78:	9509      	str	r5, [sp, #36]	; 0x24
 8012a7a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012a7e:	9301      	str	r3, [sp, #4]
 8012a80:	9304      	str	r3, [sp, #16]
 8012a82:	2200      	movs	r2, #0
 8012a84:	2312      	movs	r3, #18
 8012a86:	e7d1      	b.n	8012a2c <_dtoa_r+0x274>
 8012a88:	636f4361 	.word	0x636f4361
 8012a8c:	3fd287a7 	.word	0x3fd287a7
 8012a90:	8b60c8b3 	.word	0x8b60c8b3
 8012a94:	3fc68a28 	.word	0x3fc68a28
 8012a98:	509f79fb 	.word	0x509f79fb
 8012a9c:	3fd34413 	.word	0x3fd34413
 8012aa0:	08014b05 	.word	0x08014b05
 8012aa4:	08014b1c 	.word	0x08014b1c
 8012aa8:	7ff00000 	.word	0x7ff00000
 8012aac:	08014b01 	.word	0x08014b01
 8012ab0:	08014af8 	.word	0x08014af8
 8012ab4:	08014ad5 	.word	0x08014ad5
 8012ab8:	3ff80000 	.word	0x3ff80000
 8012abc:	08014c08 	.word	0x08014c08
 8012ac0:	08014b74 	.word	0x08014b74
 8012ac4:	2301      	movs	r3, #1
 8012ac6:	9309      	str	r3, [sp, #36]	; 0x24
 8012ac8:	e7d7      	b.n	8012a7a <_dtoa_r+0x2c2>
 8012aca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012acc:	9301      	str	r3, [sp, #4]
 8012ace:	9304      	str	r3, [sp, #16]
 8012ad0:	e7ba      	b.n	8012a48 <_dtoa_r+0x290>
 8012ad2:	3101      	adds	r1, #1
 8012ad4:	0052      	lsls	r2, r2, #1
 8012ad6:	e7ba      	b.n	8012a4e <_dtoa_r+0x296>
 8012ad8:	69e3      	ldr	r3, [r4, #28]
 8012ada:	9a00      	ldr	r2, [sp, #0]
 8012adc:	601a      	str	r2, [r3, #0]
 8012ade:	9b04      	ldr	r3, [sp, #16]
 8012ae0:	2b0e      	cmp	r3, #14
 8012ae2:	f200 80a8 	bhi.w	8012c36 <_dtoa_r+0x47e>
 8012ae6:	2d00      	cmp	r5, #0
 8012ae8:	f000 80a5 	beq.w	8012c36 <_dtoa_r+0x47e>
 8012aec:	f1bb 0f00 	cmp.w	fp, #0
 8012af0:	dd38      	ble.n	8012b64 <_dtoa_r+0x3ac>
 8012af2:	4bc0      	ldr	r3, [pc, #768]	; (8012df4 <_dtoa_r+0x63c>)
 8012af4:	f00b 020f 	and.w	r2, fp, #15
 8012af8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8012afc:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8012b00:	e9d3 6700 	ldrd	r6, r7, [r3]
 8012b04:	ea4f 182b 	mov.w	r8, fp, asr #4
 8012b08:	d019      	beq.n	8012b3e <_dtoa_r+0x386>
 8012b0a:	4bbb      	ldr	r3, [pc, #748]	; (8012df8 <_dtoa_r+0x640>)
 8012b0c:	ec51 0b18 	vmov	r0, r1, d8
 8012b10:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8012b14:	f7ed fec2 	bl	800089c <__aeabi_ddiv>
 8012b18:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012b1c:	f008 080f 	and.w	r8, r8, #15
 8012b20:	2503      	movs	r5, #3
 8012b22:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8012df8 <_dtoa_r+0x640>
 8012b26:	f1b8 0f00 	cmp.w	r8, #0
 8012b2a:	d10a      	bne.n	8012b42 <_dtoa_r+0x38a>
 8012b2c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012b30:	4632      	mov	r2, r6
 8012b32:	463b      	mov	r3, r7
 8012b34:	f7ed feb2 	bl	800089c <__aeabi_ddiv>
 8012b38:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012b3c:	e02b      	b.n	8012b96 <_dtoa_r+0x3de>
 8012b3e:	2502      	movs	r5, #2
 8012b40:	e7ef      	b.n	8012b22 <_dtoa_r+0x36a>
 8012b42:	f018 0f01 	tst.w	r8, #1
 8012b46:	d008      	beq.n	8012b5a <_dtoa_r+0x3a2>
 8012b48:	4630      	mov	r0, r6
 8012b4a:	4639      	mov	r1, r7
 8012b4c:	e9d9 2300 	ldrd	r2, r3, [r9]
 8012b50:	f7ed fd7a 	bl	8000648 <__aeabi_dmul>
 8012b54:	3501      	adds	r5, #1
 8012b56:	4606      	mov	r6, r0
 8012b58:	460f      	mov	r7, r1
 8012b5a:	ea4f 0868 	mov.w	r8, r8, asr #1
 8012b5e:	f109 0908 	add.w	r9, r9, #8
 8012b62:	e7e0      	b.n	8012b26 <_dtoa_r+0x36e>
 8012b64:	f000 809f 	beq.w	8012ca6 <_dtoa_r+0x4ee>
 8012b68:	f1cb 0600 	rsb	r6, fp, #0
 8012b6c:	4ba1      	ldr	r3, [pc, #644]	; (8012df4 <_dtoa_r+0x63c>)
 8012b6e:	4fa2      	ldr	r7, [pc, #648]	; (8012df8 <_dtoa_r+0x640>)
 8012b70:	f006 020f 	and.w	r2, r6, #15
 8012b74:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8012b78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b7c:	ec51 0b18 	vmov	r0, r1, d8
 8012b80:	f7ed fd62 	bl	8000648 <__aeabi_dmul>
 8012b84:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012b88:	1136      	asrs	r6, r6, #4
 8012b8a:	2300      	movs	r3, #0
 8012b8c:	2502      	movs	r5, #2
 8012b8e:	2e00      	cmp	r6, #0
 8012b90:	d17e      	bne.n	8012c90 <_dtoa_r+0x4d8>
 8012b92:	2b00      	cmp	r3, #0
 8012b94:	d1d0      	bne.n	8012b38 <_dtoa_r+0x380>
 8012b96:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012b98:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8012b9c:	2b00      	cmp	r3, #0
 8012b9e:	f000 8084 	beq.w	8012caa <_dtoa_r+0x4f2>
 8012ba2:	4b96      	ldr	r3, [pc, #600]	; (8012dfc <_dtoa_r+0x644>)
 8012ba4:	2200      	movs	r2, #0
 8012ba6:	4640      	mov	r0, r8
 8012ba8:	4649      	mov	r1, r9
 8012baa:	f7ed ffbf 	bl	8000b2c <__aeabi_dcmplt>
 8012bae:	2800      	cmp	r0, #0
 8012bb0:	d07b      	beq.n	8012caa <_dtoa_r+0x4f2>
 8012bb2:	9b04      	ldr	r3, [sp, #16]
 8012bb4:	2b00      	cmp	r3, #0
 8012bb6:	d078      	beq.n	8012caa <_dtoa_r+0x4f2>
 8012bb8:	9b01      	ldr	r3, [sp, #4]
 8012bba:	2b00      	cmp	r3, #0
 8012bbc:	dd39      	ble.n	8012c32 <_dtoa_r+0x47a>
 8012bbe:	4b90      	ldr	r3, [pc, #576]	; (8012e00 <_dtoa_r+0x648>)
 8012bc0:	2200      	movs	r2, #0
 8012bc2:	4640      	mov	r0, r8
 8012bc4:	4649      	mov	r1, r9
 8012bc6:	f7ed fd3f 	bl	8000648 <__aeabi_dmul>
 8012bca:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012bce:	9e01      	ldr	r6, [sp, #4]
 8012bd0:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 8012bd4:	3501      	adds	r5, #1
 8012bd6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8012bda:	4628      	mov	r0, r5
 8012bdc:	f7ed fcca 	bl	8000574 <__aeabi_i2d>
 8012be0:	4642      	mov	r2, r8
 8012be2:	464b      	mov	r3, r9
 8012be4:	f7ed fd30 	bl	8000648 <__aeabi_dmul>
 8012be8:	4b86      	ldr	r3, [pc, #536]	; (8012e04 <_dtoa_r+0x64c>)
 8012bea:	2200      	movs	r2, #0
 8012bec:	f7ed fb76 	bl	80002dc <__adddf3>
 8012bf0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8012bf4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012bf8:	9303      	str	r3, [sp, #12]
 8012bfa:	2e00      	cmp	r6, #0
 8012bfc:	d158      	bne.n	8012cb0 <_dtoa_r+0x4f8>
 8012bfe:	4b82      	ldr	r3, [pc, #520]	; (8012e08 <_dtoa_r+0x650>)
 8012c00:	2200      	movs	r2, #0
 8012c02:	4640      	mov	r0, r8
 8012c04:	4649      	mov	r1, r9
 8012c06:	f7ed fb67 	bl	80002d8 <__aeabi_dsub>
 8012c0a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8012c0e:	4680      	mov	r8, r0
 8012c10:	4689      	mov	r9, r1
 8012c12:	f7ed ffa9 	bl	8000b68 <__aeabi_dcmpgt>
 8012c16:	2800      	cmp	r0, #0
 8012c18:	f040 8296 	bne.w	8013148 <_dtoa_r+0x990>
 8012c1c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8012c20:	4640      	mov	r0, r8
 8012c22:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012c26:	4649      	mov	r1, r9
 8012c28:	f7ed ff80 	bl	8000b2c <__aeabi_dcmplt>
 8012c2c:	2800      	cmp	r0, #0
 8012c2e:	f040 8289 	bne.w	8013144 <_dtoa_r+0x98c>
 8012c32:	ed8d 8b02 	vstr	d8, [sp, #8]
 8012c36:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8012c38:	2b00      	cmp	r3, #0
 8012c3a:	f2c0 814e 	blt.w	8012eda <_dtoa_r+0x722>
 8012c3e:	f1bb 0f0e 	cmp.w	fp, #14
 8012c42:	f300 814a 	bgt.w	8012eda <_dtoa_r+0x722>
 8012c46:	4b6b      	ldr	r3, [pc, #428]	; (8012df4 <_dtoa_r+0x63c>)
 8012c48:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8012c4c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8012c50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012c52:	2b00      	cmp	r3, #0
 8012c54:	f280 80dc 	bge.w	8012e10 <_dtoa_r+0x658>
 8012c58:	9b04      	ldr	r3, [sp, #16]
 8012c5a:	2b00      	cmp	r3, #0
 8012c5c:	f300 80d8 	bgt.w	8012e10 <_dtoa_r+0x658>
 8012c60:	f040 826f 	bne.w	8013142 <_dtoa_r+0x98a>
 8012c64:	4b68      	ldr	r3, [pc, #416]	; (8012e08 <_dtoa_r+0x650>)
 8012c66:	2200      	movs	r2, #0
 8012c68:	4640      	mov	r0, r8
 8012c6a:	4649      	mov	r1, r9
 8012c6c:	f7ed fcec 	bl	8000648 <__aeabi_dmul>
 8012c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8012c74:	f7ed ff6e 	bl	8000b54 <__aeabi_dcmpge>
 8012c78:	9e04      	ldr	r6, [sp, #16]
 8012c7a:	4637      	mov	r7, r6
 8012c7c:	2800      	cmp	r0, #0
 8012c7e:	f040 8245 	bne.w	801310c <_dtoa_r+0x954>
 8012c82:	9d00      	ldr	r5, [sp, #0]
 8012c84:	2331      	movs	r3, #49	; 0x31
 8012c86:	f805 3b01 	strb.w	r3, [r5], #1
 8012c8a:	f10b 0b01 	add.w	fp, fp, #1
 8012c8e:	e241      	b.n	8013114 <_dtoa_r+0x95c>
 8012c90:	07f2      	lsls	r2, r6, #31
 8012c92:	d505      	bpl.n	8012ca0 <_dtoa_r+0x4e8>
 8012c94:	e9d7 2300 	ldrd	r2, r3, [r7]
 8012c98:	f7ed fcd6 	bl	8000648 <__aeabi_dmul>
 8012c9c:	3501      	adds	r5, #1
 8012c9e:	2301      	movs	r3, #1
 8012ca0:	1076      	asrs	r6, r6, #1
 8012ca2:	3708      	adds	r7, #8
 8012ca4:	e773      	b.n	8012b8e <_dtoa_r+0x3d6>
 8012ca6:	2502      	movs	r5, #2
 8012ca8:	e775      	b.n	8012b96 <_dtoa_r+0x3de>
 8012caa:	9e04      	ldr	r6, [sp, #16]
 8012cac:	465f      	mov	r7, fp
 8012cae:	e792      	b.n	8012bd6 <_dtoa_r+0x41e>
 8012cb0:	9900      	ldr	r1, [sp, #0]
 8012cb2:	4b50      	ldr	r3, [pc, #320]	; (8012df4 <_dtoa_r+0x63c>)
 8012cb4:	ed9d 7b02 	vldr	d7, [sp, #8]
 8012cb8:	4431      	add	r1, r6
 8012cba:	9102      	str	r1, [sp, #8]
 8012cbc:	9909      	ldr	r1, [sp, #36]	; 0x24
 8012cbe:	eeb0 9a47 	vmov.f32	s18, s14
 8012cc2:	eef0 9a67 	vmov.f32	s19, s15
 8012cc6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8012cca:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8012cce:	2900      	cmp	r1, #0
 8012cd0:	d044      	beq.n	8012d5c <_dtoa_r+0x5a4>
 8012cd2:	494e      	ldr	r1, [pc, #312]	; (8012e0c <_dtoa_r+0x654>)
 8012cd4:	2000      	movs	r0, #0
 8012cd6:	f7ed fde1 	bl	800089c <__aeabi_ddiv>
 8012cda:	ec53 2b19 	vmov	r2, r3, d9
 8012cde:	f7ed fafb 	bl	80002d8 <__aeabi_dsub>
 8012ce2:	9d00      	ldr	r5, [sp, #0]
 8012ce4:	ec41 0b19 	vmov	d9, r0, r1
 8012ce8:	4649      	mov	r1, r9
 8012cea:	4640      	mov	r0, r8
 8012cec:	f7ed ff5c 	bl	8000ba8 <__aeabi_d2iz>
 8012cf0:	4606      	mov	r6, r0
 8012cf2:	f7ed fc3f 	bl	8000574 <__aeabi_i2d>
 8012cf6:	4602      	mov	r2, r0
 8012cf8:	460b      	mov	r3, r1
 8012cfa:	4640      	mov	r0, r8
 8012cfc:	4649      	mov	r1, r9
 8012cfe:	f7ed faeb 	bl	80002d8 <__aeabi_dsub>
 8012d02:	3630      	adds	r6, #48	; 0x30
 8012d04:	f805 6b01 	strb.w	r6, [r5], #1
 8012d08:	ec53 2b19 	vmov	r2, r3, d9
 8012d0c:	4680      	mov	r8, r0
 8012d0e:	4689      	mov	r9, r1
 8012d10:	f7ed ff0c 	bl	8000b2c <__aeabi_dcmplt>
 8012d14:	2800      	cmp	r0, #0
 8012d16:	d164      	bne.n	8012de2 <_dtoa_r+0x62a>
 8012d18:	4642      	mov	r2, r8
 8012d1a:	464b      	mov	r3, r9
 8012d1c:	4937      	ldr	r1, [pc, #220]	; (8012dfc <_dtoa_r+0x644>)
 8012d1e:	2000      	movs	r0, #0
 8012d20:	f7ed fada 	bl	80002d8 <__aeabi_dsub>
 8012d24:	ec53 2b19 	vmov	r2, r3, d9
 8012d28:	f7ed ff00 	bl	8000b2c <__aeabi_dcmplt>
 8012d2c:	2800      	cmp	r0, #0
 8012d2e:	f040 80b6 	bne.w	8012e9e <_dtoa_r+0x6e6>
 8012d32:	9b02      	ldr	r3, [sp, #8]
 8012d34:	429d      	cmp	r5, r3
 8012d36:	f43f af7c 	beq.w	8012c32 <_dtoa_r+0x47a>
 8012d3a:	4b31      	ldr	r3, [pc, #196]	; (8012e00 <_dtoa_r+0x648>)
 8012d3c:	ec51 0b19 	vmov	r0, r1, d9
 8012d40:	2200      	movs	r2, #0
 8012d42:	f7ed fc81 	bl	8000648 <__aeabi_dmul>
 8012d46:	4b2e      	ldr	r3, [pc, #184]	; (8012e00 <_dtoa_r+0x648>)
 8012d48:	ec41 0b19 	vmov	d9, r0, r1
 8012d4c:	2200      	movs	r2, #0
 8012d4e:	4640      	mov	r0, r8
 8012d50:	4649      	mov	r1, r9
 8012d52:	f7ed fc79 	bl	8000648 <__aeabi_dmul>
 8012d56:	4680      	mov	r8, r0
 8012d58:	4689      	mov	r9, r1
 8012d5a:	e7c5      	b.n	8012ce8 <_dtoa_r+0x530>
 8012d5c:	ec51 0b17 	vmov	r0, r1, d7
 8012d60:	f7ed fc72 	bl	8000648 <__aeabi_dmul>
 8012d64:	9b02      	ldr	r3, [sp, #8]
 8012d66:	9d00      	ldr	r5, [sp, #0]
 8012d68:	930f      	str	r3, [sp, #60]	; 0x3c
 8012d6a:	ec41 0b19 	vmov	d9, r0, r1
 8012d6e:	4649      	mov	r1, r9
 8012d70:	4640      	mov	r0, r8
 8012d72:	f7ed ff19 	bl	8000ba8 <__aeabi_d2iz>
 8012d76:	4606      	mov	r6, r0
 8012d78:	f7ed fbfc 	bl	8000574 <__aeabi_i2d>
 8012d7c:	3630      	adds	r6, #48	; 0x30
 8012d7e:	4602      	mov	r2, r0
 8012d80:	460b      	mov	r3, r1
 8012d82:	4640      	mov	r0, r8
 8012d84:	4649      	mov	r1, r9
 8012d86:	f7ed faa7 	bl	80002d8 <__aeabi_dsub>
 8012d8a:	f805 6b01 	strb.w	r6, [r5], #1
 8012d8e:	9b02      	ldr	r3, [sp, #8]
 8012d90:	429d      	cmp	r5, r3
 8012d92:	4680      	mov	r8, r0
 8012d94:	4689      	mov	r9, r1
 8012d96:	f04f 0200 	mov.w	r2, #0
 8012d9a:	d124      	bne.n	8012de6 <_dtoa_r+0x62e>
 8012d9c:	4b1b      	ldr	r3, [pc, #108]	; (8012e0c <_dtoa_r+0x654>)
 8012d9e:	ec51 0b19 	vmov	r0, r1, d9
 8012da2:	f7ed fa9b 	bl	80002dc <__adddf3>
 8012da6:	4602      	mov	r2, r0
 8012da8:	460b      	mov	r3, r1
 8012daa:	4640      	mov	r0, r8
 8012dac:	4649      	mov	r1, r9
 8012dae:	f7ed fedb 	bl	8000b68 <__aeabi_dcmpgt>
 8012db2:	2800      	cmp	r0, #0
 8012db4:	d173      	bne.n	8012e9e <_dtoa_r+0x6e6>
 8012db6:	ec53 2b19 	vmov	r2, r3, d9
 8012dba:	4914      	ldr	r1, [pc, #80]	; (8012e0c <_dtoa_r+0x654>)
 8012dbc:	2000      	movs	r0, #0
 8012dbe:	f7ed fa8b 	bl	80002d8 <__aeabi_dsub>
 8012dc2:	4602      	mov	r2, r0
 8012dc4:	460b      	mov	r3, r1
 8012dc6:	4640      	mov	r0, r8
 8012dc8:	4649      	mov	r1, r9
 8012dca:	f7ed feaf 	bl	8000b2c <__aeabi_dcmplt>
 8012dce:	2800      	cmp	r0, #0
 8012dd0:	f43f af2f 	beq.w	8012c32 <_dtoa_r+0x47a>
 8012dd4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8012dd6:	1e6b      	subs	r3, r5, #1
 8012dd8:	930f      	str	r3, [sp, #60]	; 0x3c
 8012dda:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8012dde:	2b30      	cmp	r3, #48	; 0x30
 8012de0:	d0f8      	beq.n	8012dd4 <_dtoa_r+0x61c>
 8012de2:	46bb      	mov	fp, r7
 8012de4:	e04a      	b.n	8012e7c <_dtoa_r+0x6c4>
 8012de6:	4b06      	ldr	r3, [pc, #24]	; (8012e00 <_dtoa_r+0x648>)
 8012de8:	f7ed fc2e 	bl	8000648 <__aeabi_dmul>
 8012dec:	4680      	mov	r8, r0
 8012dee:	4689      	mov	r9, r1
 8012df0:	e7bd      	b.n	8012d6e <_dtoa_r+0x5b6>
 8012df2:	bf00      	nop
 8012df4:	08014c08 	.word	0x08014c08
 8012df8:	08014be0 	.word	0x08014be0
 8012dfc:	3ff00000 	.word	0x3ff00000
 8012e00:	40240000 	.word	0x40240000
 8012e04:	401c0000 	.word	0x401c0000
 8012e08:	40140000 	.word	0x40140000
 8012e0c:	3fe00000 	.word	0x3fe00000
 8012e10:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8012e14:	9d00      	ldr	r5, [sp, #0]
 8012e16:	4642      	mov	r2, r8
 8012e18:	464b      	mov	r3, r9
 8012e1a:	4630      	mov	r0, r6
 8012e1c:	4639      	mov	r1, r7
 8012e1e:	f7ed fd3d 	bl	800089c <__aeabi_ddiv>
 8012e22:	f7ed fec1 	bl	8000ba8 <__aeabi_d2iz>
 8012e26:	9001      	str	r0, [sp, #4]
 8012e28:	f7ed fba4 	bl	8000574 <__aeabi_i2d>
 8012e2c:	4642      	mov	r2, r8
 8012e2e:	464b      	mov	r3, r9
 8012e30:	f7ed fc0a 	bl	8000648 <__aeabi_dmul>
 8012e34:	4602      	mov	r2, r0
 8012e36:	460b      	mov	r3, r1
 8012e38:	4630      	mov	r0, r6
 8012e3a:	4639      	mov	r1, r7
 8012e3c:	f7ed fa4c 	bl	80002d8 <__aeabi_dsub>
 8012e40:	9e01      	ldr	r6, [sp, #4]
 8012e42:	9f04      	ldr	r7, [sp, #16]
 8012e44:	3630      	adds	r6, #48	; 0x30
 8012e46:	f805 6b01 	strb.w	r6, [r5], #1
 8012e4a:	9e00      	ldr	r6, [sp, #0]
 8012e4c:	1bae      	subs	r6, r5, r6
 8012e4e:	42b7      	cmp	r7, r6
 8012e50:	4602      	mov	r2, r0
 8012e52:	460b      	mov	r3, r1
 8012e54:	d134      	bne.n	8012ec0 <_dtoa_r+0x708>
 8012e56:	f7ed fa41 	bl	80002dc <__adddf3>
 8012e5a:	4642      	mov	r2, r8
 8012e5c:	464b      	mov	r3, r9
 8012e5e:	4606      	mov	r6, r0
 8012e60:	460f      	mov	r7, r1
 8012e62:	f7ed fe81 	bl	8000b68 <__aeabi_dcmpgt>
 8012e66:	b9c8      	cbnz	r0, 8012e9c <_dtoa_r+0x6e4>
 8012e68:	4642      	mov	r2, r8
 8012e6a:	464b      	mov	r3, r9
 8012e6c:	4630      	mov	r0, r6
 8012e6e:	4639      	mov	r1, r7
 8012e70:	f7ed fe52 	bl	8000b18 <__aeabi_dcmpeq>
 8012e74:	b110      	cbz	r0, 8012e7c <_dtoa_r+0x6c4>
 8012e76:	9b01      	ldr	r3, [sp, #4]
 8012e78:	07db      	lsls	r3, r3, #31
 8012e7a:	d40f      	bmi.n	8012e9c <_dtoa_r+0x6e4>
 8012e7c:	4651      	mov	r1, sl
 8012e7e:	4620      	mov	r0, r4
 8012e80:	f000 fbcc 	bl	801361c <_Bfree>
 8012e84:	2300      	movs	r3, #0
 8012e86:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8012e88:	702b      	strb	r3, [r5, #0]
 8012e8a:	f10b 0301 	add.w	r3, fp, #1
 8012e8e:	6013      	str	r3, [r2, #0]
 8012e90:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012e92:	2b00      	cmp	r3, #0
 8012e94:	f43f ace2 	beq.w	801285c <_dtoa_r+0xa4>
 8012e98:	601d      	str	r5, [r3, #0]
 8012e9a:	e4df      	b.n	801285c <_dtoa_r+0xa4>
 8012e9c:	465f      	mov	r7, fp
 8012e9e:	462b      	mov	r3, r5
 8012ea0:	461d      	mov	r5, r3
 8012ea2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8012ea6:	2a39      	cmp	r2, #57	; 0x39
 8012ea8:	d106      	bne.n	8012eb8 <_dtoa_r+0x700>
 8012eaa:	9a00      	ldr	r2, [sp, #0]
 8012eac:	429a      	cmp	r2, r3
 8012eae:	d1f7      	bne.n	8012ea0 <_dtoa_r+0x6e8>
 8012eb0:	9900      	ldr	r1, [sp, #0]
 8012eb2:	2230      	movs	r2, #48	; 0x30
 8012eb4:	3701      	adds	r7, #1
 8012eb6:	700a      	strb	r2, [r1, #0]
 8012eb8:	781a      	ldrb	r2, [r3, #0]
 8012eba:	3201      	adds	r2, #1
 8012ebc:	701a      	strb	r2, [r3, #0]
 8012ebe:	e790      	b.n	8012de2 <_dtoa_r+0x62a>
 8012ec0:	4ba3      	ldr	r3, [pc, #652]	; (8013150 <_dtoa_r+0x998>)
 8012ec2:	2200      	movs	r2, #0
 8012ec4:	f7ed fbc0 	bl	8000648 <__aeabi_dmul>
 8012ec8:	2200      	movs	r2, #0
 8012eca:	2300      	movs	r3, #0
 8012ecc:	4606      	mov	r6, r0
 8012ece:	460f      	mov	r7, r1
 8012ed0:	f7ed fe22 	bl	8000b18 <__aeabi_dcmpeq>
 8012ed4:	2800      	cmp	r0, #0
 8012ed6:	d09e      	beq.n	8012e16 <_dtoa_r+0x65e>
 8012ed8:	e7d0      	b.n	8012e7c <_dtoa_r+0x6c4>
 8012eda:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012edc:	2a00      	cmp	r2, #0
 8012ede:	f000 80ca 	beq.w	8013076 <_dtoa_r+0x8be>
 8012ee2:	9a07      	ldr	r2, [sp, #28]
 8012ee4:	2a01      	cmp	r2, #1
 8012ee6:	f300 80ad 	bgt.w	8013044 <_dtoa_r+0x88c>
 8012eea:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8012eec:	2a00      	cmp	r2, #0
 8012eee:	f000 80a5 	beq.w	801303c <_dtoa_r+0x884>
 8012ef2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8012ef6:	9e08      	ldr	r6, [sp, #32]
 8012ef8:	9d05      	ldr	r5, [sp, #20]
 8012efa:	9a05      	ldr	r2, [sp, #20]
 8012efc:	441a      	add	r2, r3
 8012efe:	9205      	str	r2, [sp, #20]
 8012f00:	9a06      	ldr	r2, [sp, #24]
 8012f02:	2101      	movs	r1, #1
 8012f04:	441a      	add	r2, r3
 8012f06:	4620      	mov	r0, r4
 8012f08:	9206      	str	r2, [sp, #24]
 8012f0a:	f000 fc3d 	bl	8013788 <__i2b>
 8012f0e:	4607      	mov	r7, r0
 8012f10:	b165      	cbz	r5, 8012f2c <_dtoa_r+0x774>
 8012f12:	9b06      	ldr	r3, [sp, #24]
 8012f14:	2b00      	cmp	r3, #0
 8012f16:	dd09      	ble.n	8012f2c <_dtoa_r+0x774>
 8012f18:	42ab      	cmp	r3, r5
 8012f1a:	9a05      	ldr	r2, [sp, #20]
 8012f1c:	bfa8      	it	ge
 8012f1e:	462b      	movge	r3, r5
 8012f20:	1ad2      	subs	r2, r2, r3
 8012f22:	9205      	str	r2, [sp, #20]
 8012f24:	9a06      	ldr	r2, [sp, #24]
 8012f26:	1aed      	subs	r5, r5, r3
 8012f28:	1ad3      	subs	r3, r2, r3
 8012f2a:	9306      	str	r3, [sp, #24]
 8012f2c:	9b08      	ldr	r3, [sp, #32]
 8012f2e:	b1f3      	cbz	r3, 8012f6e <_dtoa_r+0x7b6>
 8012f30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012f32:	2b00      	cmp	r3, #0
 8012f34:	f000 80a3 	beq.w	801307e <_dtoa_r+0x8c6>
 8012f38:	2e00      	cmp	r6, #0
 8012f3a:	dd10      	ble.n	8012f5e <_dtoa_r+0x7a6>
 8012f3c:	4639      	mov	r1, r7
 8012f3e:	4632      	mov	r2, r6
 8012f40:	4620      	mov	r0, r4
 8012f42:	f000 fce1 	bl	8013908 <__pow5mult>
 8012f46:	4652      	mov	r2, sl
 8012f48:	4601      	mov	r1, r0
 8012f4a:	4607      	mov	r7, r0
 8012f4c:	4620      	mov	r0, r4
 8012f4e:	f000 fc31 	bl	80137b4 <__multiply>
 8012f52:	4651      	mov	r1, sl
 8012f54:	4680      	mov	r8, r0
 8012f56:	4620      	mov	r0, r4
 8012f58:	f000 fb60 	bl	801361c <_Bfree>
 8012f5c:	46c2      	mov	sl, r8
 8012f5e:	9b08      	ldr	r3, [sp, #32]
 8012f60:	1b9a      	subs	r2, r3, r6
 8012f62:	d004      	beq.n	8012f6e <_dtoa_r+0x7b6>
 8012f64:	4651      	mov	r1, sl
 8012f66:	4620      	mov	r0, r4
 8012f68:	f000 fcce 	bl	8013908 <__pow5mult>
 8012f6c:	4682      	mov	sl, r0
 8012f6e:	2101      	movs	r1, #1
 8012f70:	4620      	mov	r0, r4
 8012f72:	f000 fc09 	bl	8013788 <__i2b>
 8012f76:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012f78:	2b00      	cmp	r3, #0
 8012f7a:	4606      	mov	r6, r0
 8012f7c:	f340 8081 	ble.w	8013082 <_dtoa_r+0x8ca>
 8012f80:	461a      	mov	r2, r3
 8012f82:	4601      	mov	r1, r0
 8012f84:	4620      	mov	r0, r4
 8012f86:	f000 fcbf 	bl	8013908 <__pow5mult>
 8012f8a:	9b07      	ldr	r3, [sp, #28]
 8012f8c:	2b01      	cmp	r3, #1
 8012f8e:	4606      	mov	r6, r0
 8012f90:	dd7a      	ble.n	8013088 <_dtoa_r+0x8d0>
 8012f92:	f04f 0800 	mov.w	r8, #0
 8012f96:	6933      	ldr	r3, [r6, #16]
 8012f98:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8012f9c:	6918      	ldr	r0, [r3, #16]
 8012f9e:	f000 fba5 	bl	80136ec <__hi0bits>
 8012fa2:	f1c0 0020 	rsb	r0, r0, #32
 8012fa6:	9b06      	ldr	r3, [sp, #24]
 8012fa8:	4418      	add	r0, r3
 8012faa:	f010 001f 	ands.w	r0, r0, #31
 8012fae:	f000 8094 	beq.w	80130da <_dtoa_r+0x922>
 8012fb2:	f1c0 0320 	rsb	r3, r0, #32
 8012fb6:	2b04      	cmp	r3, #4
 8012fb8:	f340 8085 	ble.w	80130c6 <_dtoa_r+0x90e>
 8012fbc:	9b05      	ldr	r3, [sp, #20]
 8012fbe:	f1c0 001c 	rsb	r0, r0, #28
 8012fc2:	4403      	add	r3, r0
 8012fc4:	9305      	str	r3, [sp, #20]
 8012fc6:	9b06      	ldr	r3, [sp, #24]
 8012fc8:	4403      	add	r3, r0
 8012fca:	4405      	add	r5, r0
 8012fcc:	9306      	str	r3, [sp, #24]
 8012fce:	9b05      	ldr	r3, [sp, #20]
 8012fd0:	2b00      	cmp	r3, #0
 8012fd2:	dd05      	ble.n	8012fe0 <_dtoa_r+0x828>
 8012fd4:	4651      	mov	r1, sl
 8012fd6:	461a      	mov	r2, r3
 8012fd8:	4620      	mov	r0, r4
 8012fda:	f000 fcef 	bl	80139bc <__lshift>
 8012fde:	4682      	mov	sl, r0
 8012fe0:	9b06      	ldr	r3, [sp, #24]
 8012fe2:	2b00      	cmp	r3, #0
 8012fe4:	dd05      	ble.n	8012ff2 <_dtoa_r+0x83a>
 8012fe6:	4631      	mov	r1, r6
 8012fe8:	461a      	mov	r2, r3
 8012fea:	4620      	mov	r0, r4
 8012fec:	f000 fce6 	bl	80139bc <__lshift>
 8012ff0:	4606      	mov	r6, r0
 8012ff2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012ff4:	2b00      	cmp	r3, #0
 8012ff6:	d072      	beq.n	80130de <_dtoa_r+0x926>
 8012ff8:	4631      	mov	r1, r6
 8012ffa:	4650      	mov	r0, sl
 8012ffc:	f000 fd4a 	bl	8013a94 <__mcmp>
 8013000:	2800      	cmp	r0, #0
 8013002:	da6c      	bge.n	80130de <_dtoa_r+0x926>
 8013004:	2300      	movs	r3, #0
 8013006:	4651      	mov	r1, sl
 8013008:	220a      	movs	r2, #10
 801300a:	4620      	mov	r0, r4
 801300c:	f000 fb28 	bl	8013660 <__multadd>
 8013010:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013012:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8013016:	4682      	mov	sl, r0
 8013018:	2b00      	cmp	r3, #0
 801301a:	f000 81b0 	beq.w	801337e <_dtoa_r+0xbc6>
 801301e:	2300      	movs	r3, #0
 8013020:	4639      	mov	r1, r7
 8013022:	220a      	movs	r2, #10
 8013024:	4620      	mov	r0, r4
 8013026:	f000 fb1b 	bl	8013660 <__multadd>
 801302a:	9b01      	ldr	r3, [sp, #4]
 801302c:	2b00      	cmp	r3, #0
 801302e:	4607      	mov	r7, r0
 8013030:	f300 8096 	bgt.w	8013160 <_dtoa_r+0x9a8>
 8013034:	9b07      	ldr	r3, [sp, #28]
 8013036:	2b02      	cmp	r3, #2
 8013038:	dc59      	bgt.n	80130ee <_dtoa_r+0x936>
 801303a:	e091      	b.n	8013160 <_dtoa_r+0x9a8>
 801303c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801303e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8013042:	e758      	b.n	8012ef6 <_dtoa_r+0x73e>
 8013044:	9b04      	ldr	r3, [sp, #16]
 8013046:	1e5e      	subs	r6, r3, #1
 8013048:	9b08      	ldr	r3, [sp, #32]
 801304a:	42b3      	cmp	r3, r6
 801304c:	bfbf      	itttt	lt
 801304e:	9b08      	ldrlt	r3, [sp, #32]
 8013050:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8013052:	9608      	strlt	r6, [sp, #32]
 8013054:	1af3      	sublt	r3, r6, r3
 8013056:	bfb4      	ite	lt
 8013058:	18d2      	addlt	r2, r2, r3
 801305a:	1b9e      	subge	r6, r3, r6
 801305c:	9b04      	ldr	r3, [sp, #16]
 801305e:	bfbc      	itt	lt
 8013060:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8013062:	2600      	movlt	r6, #0
 8013064:	2b00      	cmp	r3, #0
 8013066:	bfb7      	itett	lt
 8013068:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 801306c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8013070:	1a9d      	sublt	r5, r3, r2
 8013072:	2300      	movlt	r3, #0
 8013074:	e741      	b.n	8012efa <_dtoa_r+0x742>
 8013076:	9e08      	ldr	r6, [sp, #32]
 8013078:	9d05      	ldr	r5, [sp, #20]
 801307a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801307c:	e748      	b.n	8012f10 <_dtoa_r+0x758>
 801307e:	9a08      	ldr	r2, [sp, #32]
 8013080:	e770      	b.n	8012f64 <_dtoa_r+0x7ac>
 8013082:	9b07      	ldr	r3, [sp, #28]
 8013084:	2b01      	cmp	r3, #1
 8013086:	dc19      	bgt.n	80130bc <_dtoa_r+0x904>
 8013088:	9b02      	ldr	r3, [sp, #8]
 801308a:	b9bb      	cbnz	r3, 80130bc <_dtoa_r+0x904>
 801308c:	9b03      	ldr	r3, [sp, #12]
 801308e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8013092:	b99b      	cbnz	r3, 80130bc <_dtoa_r+0x904>
 8013094:	9b03      	ldr	r3, [sp, #12]
 8013096:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801309a:	0d1b      	lsrs	r3, r3, #20
 801309c:	051b      	lsls	r3, r3, #20
 801309e:	b183      	cbz	r3, 80130c2 <_dtoa_r+0x90a>
 80130a0:	9b05      	ldr	r3, [sp, #20]
 80130a2:	3301      	adds	r3, #1
 80130a4:	9305      	str	r3, [sp, #20]
 80130a6:	9b06      	ldr	r3, [sp, #24]
 80130a8:	3301      	adds	r3, #1
 80130aa:	9306      	str	r3, [sp, #24]
 80130ac:	f04f 0801 	mov.w	r8, #1
 80130b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80130b2:	2b00      	cmp	r3, #0
 80130b4:	f47f af6f 	bne.w	8012f96 <_dtoa_r+0x7de>
 80130b8:	2001      	movs	r0, #1
 80130ba:	e774      	b.n	8012fa6 <_dtoa_r+0x7ee>
 80130bc:	f04f 0800 	mov.w	r8, #0
 80130c0:	e7f6      	b.n	80130b0 <_dtoa_r+0x8f8>
 80130c2:	4698      	mov	r8, r3
 80130c4:	e7f4      	b.n	80130b0 <_dtoa_r+0x8f8>
 80130c6:	d082      	beq.n	8012fce <_dtoa_r+0x816>
 80130c8:	9a05      	ldr	r2, [sp, #20]
 80130ca:	331c      	adds	r3, #28
 80130cc:	441a      	add	r2, r3
 80130ce:	9205      	str	r2, [sp, #20]
 80130d0:	9a06      	ldr	r2, [sp, #24]
 80130d2:	441a      	add	r2, r3
 80130d4:	441d      	add	r5, r3
 80130d6:	9206      	str	r2, [sp, #24]
 80130d8:	e779      	b.n	8012fce <_dtoa_r+0x816>
 80130da:	4603      	mov	r3, r0
 80130dc:	e7f4      	b.n	80130c8 <_dtoa_r+0x910>
 80130de:	9b04      	ldr	r3, [sp, #16]
 80130e0:	2b00      	cmp	r3, #0
 80130e2:	dc37      	bgt.n	8013154 <_dtoa_r+0x99c>
 80130e4:	9b07      	ldr	r3, [sp, #28]
 80130e6:	2b02      	cmp	r3, #2
 80130e8:	dd34      	ble.n	8013154 <_dtoa_r+0x99c>
 80130ea:	9b04      	ldr	r3, [sp, #16]
 80130ec:	9301      	str	r3, [sp, #4]
 80130ee:	9b01      	ldr	r3, [sp, #4]
 80130f0:	b963      	cbnz	r3, 801310c <_dtoa_r+0x954>
 80130f2:	4631      	mov	r1, r6
 80130f4:	2205      	movs	r2, #5
 80130f6:	4620      	mov	r0, r4
 80130f8:	f000 fab2 	bl	8013660 <__multadd>
 80130fc:	4601      	mov	r1, r0
 80130fe:	4606      	mov	r6, r0
 8013100:	4650      	mov	r0, sl
 8013102:	f000 fcc7 	bl	8013a94 <__mcmp>
 8013106:	2800      	cmp	r0, #0
 8013108:	f73f adbb 	bgt.w	8012c82 <_dtoa_r+0x4ca>
 801310c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801310e:	9d00      	ldr	r5, [sp, #0]
 8013110:	ea6f 0b03 	mvn.w	fp, r3
 8013114:	f04f 0800 	mov.w	r8, #0
 8013118:	4631      	mov	r1, r6
 801311a:	4620      	mov	r0, r4
 801311c:	f000 fa7e 	bl	801361c <_Bfree>
 8013120:	2f00      	cmp	r7, #0
 8013122:	f43f aeab 	beq.w	8012e7c <_dtoa_r+0x6c4>
 8013126:	f1b8 0f00 	cmp.w	r8, #0
 801312a:	d005      	beq.n	8013138 <_dtoa_r+0x980>
 801312c:	45b8      	cmp	r8, r7
 801312e:	d003      	beq.n	8013138 <_dtoa_r+0x980>
 8013130:	4641      	mov	r1, r8
 8013132:	4620      	mov	r0, r4
 8013134:	f000 fa72 	bl	801361c <_Bfree>
 8013138:	4639      	mov	r1, r7
 801313a:	4620      	mov	r0, r4
 801313c:	f000 fa6e 	bl	801361c <_Bfree>
 8013140:	e69c      	b.n	8012e7c <_dtoa_r+0x6c4>
 8013142:	2600      	movs	r6, #0
 8013144:	4637      	mov	r7, r6
 8013146:	e7e1      	b.n	801310c <_dtoa_r+0x954>
 8013148:	46bb      	mov	fp, r7
 801314a:	4637      	mov	r7, r6
 801314c:	e599      	b.n	8012c82 <_dtoa_r+0x4ca>
 801314e:	bf00      	nop
 8013150:	40240000 	.word	0x40240000
 8013154:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013156:	2b00      	cmp	r3, #0
 8013158:	f000 80c8 	beq.w	80132ec <_dtoa_r+0xb34>
 801315c:	9b04      	ldr	r3, [sp, #16]
 801315e:	9301      	str	r3, [sp, #4]
 8013160:	2d00      	cmp	r5, #0
 8013162:	dd05      	ble.n	8013170 <_dtoa_r+0x9b8>
 8013164:	4639      	mov	r1, r7
 8013166:	462a      	mov	r2, r5
 8013168:	4620      	mov	r0, r4
 801316a:	f000 fc27 	bl	80139bc <__lshift>
 801316e:	4607      	mov	r7, r0
 8013170:	f1b8 0f00 	cmp.w	r8, #0
 8013174:	d05b      	beq.n	801322e <_dtoa_r+0xa76>
 8013176:	6879      	ldr	r1, [r7, #4]
 8013178:	4620      	mov	r0, r4
 801317a:	f000 fa0f 	bl	801359c <_Balloc>
 801317e:	4605      	mov	r5, r0
 8013180:	b928      	cbnz	r0, 801318e <_dtoa_r+0x9d6>
 8013182:	4b83      	ldr	r3, [pc, #524]	; (8013390 <_dtoa_r+0xbd8>)
 8013184:	4602      	mov	r2, r0
 8013186:	f240 21ef 	movw	r1, #751	; 0x2ef
 801318a:	f7ff bb2e 	b.w	80127ea <_dtoa_r+0x32>
 801318e:	693a      	ldr	r2, [r7, #16]
 8013190:	3202      	adds	r2, #2
 8013192:	0092      	lsls	r2, r2, #2
 8013194:	f107 010c 	add.w	r1, r7, #12
 8013198:	300c      	adds	r0, #12
 801319a:	f7ff fa75 	bl	8012688 <memcpy>
 801319e:	2201      	movs	r2, #1
 80131a0:	4629      	mov	r1, r5
 80131a2:	4620      	mov	r0, r4
 80131a4:	f000 fc0a 	bl	80139bc <__lshift>
 80131a8:	9b00      	ldr	r3, [sp, #0]
 80131aa:	3301      	adds	r3, #1
 80131ac:	9304      	str	r3, [sp, #16]
 80131ae:	e9dd 2300 	ldrd	r2, r3, [sp]
 80131b2:	4413      	add	r3, r2
 80131b4:	9308      	str	r3, [sp, #32]
 80131b6:	9b02      	ldr	r3, [sp, #8]
 80131b8:	f003 0301 	and.w	r3, r3, #1
 80131bc:	46b8      	mov	r8, r7
 80131be:	9306      	str	r3, [sp, #24]
 80131c0:	4607      	mov	r7, r0
 80131c2:	9b04      	ldr	r3, [sp, #16]
 80131c4:	4631      	mov	r1, r6
 80131c6:	3b01      	subs	r3, #1
 80131c8:	4650      	mov	r0, sl
 80131ca:	9301      	str	r3, [sp, #4]
 80131cc:	f7ff fa6a 	bl	80126a4 <quorem>
 80131d0:	4641      	mov	r1, r8
 80131d2:	9002      	str	r0, [sp, #8]
 80131d4:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80131d8:	4650      	mov	r0, sl
 80131da:	f000 fc5b 	bl	8013a94 <__mcmp>
 80131de:	463a      	mov	r2, r7
 80131e0:	9005      	str	r0, [sp, #20]
 80131e2:	4631      	mov	r1, r6
 80131e4:	4620      	mov	r0, r4
 80131e6:	f000 fc71 	bl	8013acc <__mdiff>
 80131ea:	68c2      	ldr	r2, [r0, #12]
 80131ec:	4605      	mov	r5, r0
 80131ee:	bb02      	cbnz	r2, 8013232 <_dtoa_r+0xa7a>
 80131f0:	4601      	mov	r1, r0
 80131f2:	4650      	mov	r0, sl
 80131f4:	f000 fc4e 	bl	8013a94 <__mcmp>
 80131f8:	4602      	mov	r2, r0
 80131fa:	4629      	mov	r1, r5
 80131fc:	4620      	mov	r0, r4
 80131fe:	9209      	str	r2, [sp, #36]	; 0x24
 8013200:	f000 fa0c 	bl	801361c <_Bfree>
 8013204:	9b07      	ldr	r3, [sp, #28]
 8013206:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013208:	9d04      	ldr	r5, [sp, #16]
 801320a:	ea43 0102 	orr.w	r1, r3, r2
 801320e:	9b06      	ldr	r3, [sp, #24]
 8013210:	4319      	orrs	r1, r3
 8013212:	d110      	bne.n	8013236 <_dtoa_r+0xa7e>
 8013214:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8013218:	d029      	beq.n	801326e <_dtoa_r+0xab6>
 801321a:	9b05      	ldr	r3, [sp, #20]
 801321c:	2b00      	cmp	r3, #0
 801321e:	dd02      	ble.n	8013226 <_dtoa_r+0xa6e>
 8013220:	9b02      	ldr	r3, [sp, #8]
 8013222:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8013226:	9b01      	ldr	r3, [sp, #4]
 8013228:	f883 9000 	strb.w	r9, [r3]
 801322c:	e774      	b.n	8013118 <_dtoa_r+0x960>
 801322e:	4638      	mov	r0, r7
 8013230:	e7ba      	b.n	80131a8 <_dtoa_r+0x9f0>
 8013232:	2201      	movs	r2, #1
 8013234:	e7e1      	b.n	80131fa <_dtoa_r+0xa42>
 8013236:	9b05      	ldr	r3, [sp, #20]
 8013238:	2b00      	cmp	r3, #0
 801323a:	db04      	blt.n	8013246 <_dtoa_r+0xa8e>
 801323c:	9907      	ldr	r1, [sp, #28]
 801323e:	430b      	orrs	r3, r1
 8013240:	9906      	ldr	r1, [sp, #24]
 8013242:	430b      	orrs	r3, r1
 8013244:	d120      	bne.n	8013288 <_dtoa_r+0xad0>
 8013246:	2a00      	cmp	r2, #0
 8013248:	dded      	ble.n	8013226 <_dtoa_r+0xa6e>
 801324a:	4651      	mov	r1, sl
 801324c:	2201      	movs	r2, #1
 801324e:	4620      	mov	r0, r4
 8013250:	f000 fbb4 	bl	80139bc <__lshift>
 8013254:	4631      	mov	r1, r6
 8013256:	4682      	mov	sl, r0
 8013258:	f000 fc1c 	bl	8013a94 <__mcmp>
 801325c:	2800      	cmp	r0, #0
 801325e:	dc03      	bgt.n	8013268 <_dtoa_r+0xab0>
 8013260:	d1e1      	bne.n	8013226 <_dtoa_r+0xa6e>
 8013262:	f019 0f01 	tst.w	r9, #1
 8013266:	d0de      	beq.n	8013226 <_dtoa_r+0xa6e>
 8013268:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 801326c:	d1d8      	bne.n	8013220 <_dtoa_r+0xa68>
 801326e:	9a01      	ldr	r2, [sp, #4]
 8013270:	2339      	movs	r3, #57	; 0x39
 8013272:	7013      	strb	r3, [r2, #0]
 8013274:	462b      	mov	r3, r5
 8013276:	461d      	mov	r5, r3
 8013278:	3b01      	subs	r3, #1
 801327a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801327e:	2a39      	cmp	r2, #57	; 0x39
 8013280:	d06c      	beq.n	801335c <_dtoa_r+0xba4>
 8013282:	3201      	adds	r2, #1
 8013284:	701a      	strb	r2, [r3, #0]
 8013286:	e747      	b.n	8013118 <_dtoa_r+0x960>
 8013288:	2a00      	cmp	r2, #0
 801328a:	dd07      	ble.n	801329c <_dtoa_r+0xae4>
 801328c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8013290:	d0ed      	beq.n	801326e <_dtoa_r+0xab6>
 8013292:	9a01      	ldr	r2, [sp, #4]
 8013294:	f109 0301 	add.w	r3, r9, #1
 8013298:	7013      	strb	r3, [r2, #0]
 801329a:	e73d      	b.n	8013118 <_dtoa_r+0x960>
 801329c:	9b04      	ldr	r3, [sp, #16]
 801329e:	9a08      	ldr	r2, [sp, #32]
 80132a0:	f803 9c01 	strb.w	r9, [r3, #-1]
 80132a4:	4293      	cmp	r3, r2
 80132a6:	d043      	beq.n	8013330 <_dtoa_r+0xb78>
 80132a8:	4651      	mov	r1, sl
 80132aa:	2300      	movs	r3, #0
 80132ac:	220a      	movs	r2, #10
 80132ae:	4620      	mov	r0, r4
 80132b0:	f000 f9d6 	bl	8013660 <__multadd>
 80132b4:	45b8      	cmp	r8, r7
 80132b6:	4682      	mov	sl, r0
 80132b8:	f04f 0300 	mov.w	r3, #0
 80132bc:	f04f 020a 	mov.w	r2, #10
 80132c0:	4641      	mov	r1, r8
 80132c2:	4620      	mov	r0, r4
 80132c4:	d107      	bne.n	80132d6 <_dtoa_r+0xb1e>
 80132c6:	f000 f9cb 	bl	8013660 <__multadd>
 80132ca:	4680      	mov	r8, r0
 80132cc:	4607      	mov	r7, r0
 80132ce:	9b04      	ldr	r3, [sp, #16]
 80132d0:	3301      	adds	r3, #1
 80132d2:	9304      	str	r3, [sp, #16]
 80132d4:	e775      	b.n	80131c2 <_dtoa_r+0xa0a>
 80132d6:	f000 f9c3 	bl	8013660 <__multadd>
 80132da:	4639      	mov	r1, r7
 80132dc:	4680      	mov	r8, r0
 80132de:	2300      	movs	r3, #0
 80132e0:	220a      	movs	r2, #10
 80132e2:	4620      	mov	r0, r4
 80132e4:	f000 f9bc 	bl	8013660 <__multadd>
 80132e8:	4607      	mov	r7, r0
 80132ea:	e7f0      	b.n	80132ce <_dtoa_r+0xb16>
 80132ec:	9b04      	ldr	r3, [sp, #16]
 80132ee:	9301      	str	r3, [sp, #4]
 80132f0:	9d00      	ldr	r5, [sp, #0]
 80132f2:	4631      	mov	r1, r6
 80132f4:	4650      	mov	r0, sl
 80132f6:	f7ff f9d5 	bl	80126a4 <quorem>
 80132fa:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80132fe:	9b00      	ldr	r3, [sp, #0]
 8013300:	f805 9b01 	strb.w	r9, [r5], #1
 8013304:	1aea      	subs	r2, r5, r3
 8013306:	9b01      	ldr	r3, [sp, #4]
 8013308:	4293      	cmp	r3, r2
 801330a:	dd07      	ble.n	801331c <_dtoa_r+0xb64>
 801330c:	4651      	mov	r1, sl
 801330e:	2300      	movs	r3, #0
 8013310:	220a      	movs	r2, #10
 8013312:	4620      	mov	r0, r4
 8013314:	f000 f9a4 	bl	8013660 <__multadd>
 8013318:	4682      	mov	sl, r0
 801331a:	e7ea      	b.n	80132f2 <_dtoa_r+0xb3a>
 801331c:	9b01      	ldr	r3, [sp, #4]
 801331e:	2b00      	cmp	r3, #0
 8013320:	bfc8      	it	gt
 8013322:	461d      	movgt	r5, r3
 8013324:	9b00      	ldr	r3, [sp, #0]
 8013326:	bfd8      	it	le
 8013328:	2501      	movle	r5, #1
 801332a:	441d      	add	r5, r3
 801332c:	f04f 0800 	mov.w	r8, #0
 8013330:	4651      	mov	r1, sl
 8013332:	2201      	movs	r2, #1
 8013334:	4620      	mov	r0, r4
 8013336:	f000 fb41 	bl	80139bc <__lshift>
 801333a:	4631      	mov	r1, r6
 801333c:	4682      	mov	sl, r0
 801333e:	f000 fba9 	bl	8013a94 <__mcmp>
 8013342:	2800      	cmp	r0, #0
 8013344:	dc96      	bgt.n	8013274 <_dtoa_r+0xabc>
 8013346:	d102      	bne.n	801334e <_dtoa_r+0xb96>
 8013348:	f019 0f01 	tst.w	r9, #1
 801334c:	d192      	bne.n	8013274 <_dtoa_r+0xabc>
 801334e:	462b      	mov	r3, r5
 8013350:	461d      	mov	r5, r3
 8013352:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8013356:	2a30      	cmp	r2, #48	; 0x30
 8013358:	d0fa      	beq.n	8013350 <_dtoa_r+0xb98>
 801335a:	e6dd      	b.n	8013118 <_dtoa_r+0x960>
 801335c:	9a00      	ldr	r2, [sp, #0]
 801335e:	429a      	cmp	r2, r3
 8013360:	d189      	bne.n	8013276 <_dtoa_r+0xabe>
 8013362:	f10b 0b01 	add.w	fp, fp, #1
 8013366:	2331      	movs	r3, #49	; 0x31
 8013368:	e796      	b.n	8013298 <_dtoa_r+0xae0>
 801336a:	4b0a      	ldr	r3, [pc, #40]	; (8013394 <_dtoa_r+0xbdc>)
 801336c:	f7ff ba99 	b.w	80128a2 <_dtoa_r+0xea>
 8013370:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013372:	2b00      	cmp	r3, #0
 8013374:	f47f aa6d 	bne.w	8012852 <_dtoa_r+0x9a>
 8013378:	4b07      	ldr	r3, [pc, #28]	; (8013398 <_dtoa_r+0xbe0>)
 801337a:	f7ff ba92 	b.w	80128a2 <_dtoa_r+0xea>
 801337e:	9b01      	ldr	r3, [sp, #4]
 8013380:	2b00      	cmp	r3, #0
 8013382:	dcb5      	bgt.n	80132f0 <_dtoa_r+0xb38>
 8013384:	9b07      	ldr	r3, [sp, #28]
 8013386:	2b02      	cmp	r3, #2
 8013388:	f73f aeb1 	bgt.w	80130ee <_dtoa_r+0x936>
 801338c:	e7b0      	b.n	80132f0 <_dtoa_r+0xb38>
 801338e:	bf00      	nop
 8013390:	08014b74 	.word	0x08014b74
 8013394:	08014ad4 	.word	0x08014ad4
 8013398:	08014af8 	.word	0x08014af8

0801339c <_free_r>:
 801339c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801339e:	2900      	cmp	r1, #0
 80133a0:	d044      	beq.n	801342c <_free_r+0x90>
 80133a2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80133a6:	9001      	str	r0, [sp, #4]
 80133a8:	2b00      	cmp	r3, #0
 80133aa:	f1a1 0404 	sub.w	r4, r1, #4
 80133ae:	bfb8      	it	lt
 80133b0:	18e4      	addlt	r4, r4, r3
 80133b2:	f000 f8e7 	bl	8013584 <__malloc_lock>
 80133b6:	4a1e      	ldr	r2, [pc, #120]	; (8013430 <_free_r+0x94>)
 80133b8:	9801      	ldr	r0, [sp, #4]
 80133ba:	6813      	ldr	r3, [r2, #0]
 80133bc:	b933      	cbnz	r3, 80133cc <_free_r+0x30>
 80133be:	6063      	str	r3, [r4, #4]
 80133c0:	6014      	str	r4, [r2, #0]
 80133c2:	b003      	add	sp, #12
 80133c4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80133c8:	f000 b8e2 	b.w	8013590 <__malloc_unlock>
 80133cc:	42a3      	cmp	r3, r4
 80133ce:	d908      	bls.n	80133e2 <_free_r+0x46>
 80133d0:	6825      	ldr	r5, [r4, #0]
 80133d2:	1961      	adds	r1, r4, r5
 80133d4:	428b      	cmp	r3, r1
 80133d6:	bf01      	itttt	eq
 80133d8:	6819      	ldreq	r1, [r3, #0]
 80133da:	685b      	ldreq	r3, [r3, #4]
 80133dc:	1949      	addeq	r1, r1, r5
 80133de:	6021      	streq	r1, [r4, #0]
 80133e0:	e7ed      	b.n	80133be <_free_r+0x22>
 80133e2:	461a      	mov	r2, r3
 80133e4:	685b      	ldr	r3, [r3, #4]
 80133e6:	b10b      	cbz	r3, 80133ec <_free_r+0x50>
 80133e8:	42a3      	cmp	r3, r4
 80133ea:	d9fa      	bls.n	80133e2 <_free_r+0x46>
 80133ec:	6811      	ldr	r1, [r2, #0]
 80133ee:	1855      	adds	r5, r2, r1
 80133f0:	42a5      	cmp	r5, r4
 80133f2:	d10b      	bne.n	801340c <_free_r+0x70>
 80133f4:	6824      	ldr	r4, [r4, #0]
 80133f6:	4421      	add	r1, r4
 80133f8:	1854      	adds	r4, r2, r1
 80133fa:	42a3      	cmp	r3, r4
 80133fc:	6011      	str	r1, [r2, #0]
 80133fe:	d1e0      	bne.n	80133c2 <_free_r+0x26>
 8013400:	681c      	ldr	r4, [r3, #0]
 8013402:	685b      	ldr	r3, [r3, #4]
 8013404:	6053      	str	r3, [r2, #4]
 8013406:	440c      	add	r4, r1
 8013408:	6014      	str	r4, [r2, #0]
 801340a:	e7da      	b.n	80133c2 <_free_r+0x26>
 801340c:	d902      	bls.n	8013414 <_free_r+0x78>
 801340e:	230c      	movs	r3, #12
 8013410:	6003      	str	r3, [r0, #0]
 8013412:	e7d6      	b.n	80133c2 <_free_r+0x26>
 8013414:	6825      	ldr	r5, [r4, #0]
 8013416:	1961      	adds	r1, r4, r5
 8013418:	428b      	cmp	r3, r1
 801341a:	bf04      	itt	eq
 801341c:	6819      	ldreq	r1, [r3, #0]
 801341e:	685b      	ldreq	r3, [r3, #4]
 8013420:	6063      	str	r3, [r4, #4]
 8013422:	bf04      	itt	eq
 8013424:	1949      	addeq	r1, r1, r5
 8013426:	6021      	streq	r1, [r4, #0]
 8013428:	6054      	str	r4, [r2, #4]
 801342a:	e7ca      	b.n	80133c2 <_free_r+0x26>
 801342c:	b003      	add	sp, #12
 801342e:	bd30      	pop	{r4, r5, pc}
 8013430:	200035c4 	.word	0x200035c4

08013434 <malloc>:
 8013434:	4b02      	ldr	r3, [pc, #8]	; (8013440 <malloc+0xc>)
 8013436:	4601      	mov	r1, r0
 8013438:	6818      	ldr	r0, [r3, #0]
 801343a:	f000 b823 	b.w	8013484 <_malloc_r>
 801343e:	bf00      	nop
 8013440:	200001e0 	.word	0x200001e0

08013444 <sbrk_aligned>:
 8013444:	b570      	push	{r4, r5, r6, lr}
 8013446:	4e0e      	ldr	r6, [pc, #56]	; (8013480 <sbrk_aligned+0x3c>)
 8013448:	460c      	mov	r4, r1
 801344a:	6831      	ldr	r1, [r6, #0]
 801344c:	4605      	mov	r5, r0
 801344e:	b911      	cbnz	r1, 8013456 <sbrk_aligned+0x12>
 8013450:	f001 f808 	bl	8014464 <_sbrk_r>
 8013454:	6030      	str	r0, [r6, #0]
 8013456:	4621      	mov	r1, r4
 8013458:	4628      	mov	r0, r5
 801345a:	f001 f803 	bl	8014464 <_sbrk_r>
 801345e:	1c43      	adds	r3, r0, #1
 8013460:	d00a      	beq.n	8013478 <sbrk_aligned+0x34>
 8013462:	1cc4      	adds	r4, r0, #3
 8013464:	f024 0403 	bic.w	r4, r4, #3
 8013468:	42a0      	cmp	r0, r4
 801346a:	d007      	beq.n	801347c <sbrk_aligned+0x38>
 801346c:	1a21      	subs	r1, r4, r0
 801346e:	4628      	mov	r0, r5
 8013470:	f000 fff8 	bl	8014464 <_sbrk_r>
 8013474:	3001      	adds	r0, #1
 8013476:	d101      	bne.n	801347c <sbrk_aligned+0x38>
 8013478:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 801347c:	4620      	mov	r0, r4
 801347e:	bd70      	pop	{r4, r5, r6, pc}
 8013480:	200035c8 	.word	0x200035c8

08013484 <_malloc_r>:
 8013484:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013488:	1ccd      	adds	r5, r1, #3
 801348a:	f025 0503 	bic.w	r5, r5, #3
 801348e:	3508      	adds	r5, #8
 8013490:	2d0c      	cmp	r5, #12
 8013492:	bf38      	it	cc
 8013494:	250c      	movcc	r5, #12
 8013496:	2d00      	cmp	r5, #0
 8013498:	4607      	mov	r7, r0
 801349a:	db01      	blt.n	80134a0 <_malloc_r+0x1c>
 801349c:	42a9      	cmp	r1, r5
 801349e:	d905      	bls.n	80134ac <_malloc_r+0x28>
 80134a0:	230c      	movs	r3, #12
 80134a2:	603b      	str	r3, [r7, #0]
 80134a4:	2600      	movs	r6, #0
 80134a6:	4630      	mov	r0, r6
 80134a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80134ac:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8013580 <_malloc_r+0xfc>
 80134b0:	f000 f868 	bl	8013584 <__malloc_lock>
 80134b4:	f8d8 3000 	ldr.w	r3, [r8]
 80134b8:	461c      	mov	r4, r3
 80134ba:	bb5c      	cbnz	r4, 8013514 <_malloc_r+0x90>
 80134bc:	4629      	mov	r1, r5
 80134be:	4638      	mov	r0, r7
 80134c0:	f7ff ffc0 	bl	8013444 <sbrk_aligned>
 80134c4:	1c43      	adds	r3, r0, #1
 80134c6:	4604      	mov	r4, r0
 80134c8:	d155      	bne.n	8013576 <_malloc_r+0xf2>
 80134ca:	f8d8 4000 	ldr.w	r4, [r8]
 80134ce:	4626      	mov	r6, r4
 80134d0:	2e00      	cmp	r6, #0
 80134d2:	d145      	bne.n	8013560 <_malloc_r+0xdc>
 80134d4:	2c00      	cmp	r4, #0
 80134d6:	d048      	beq.n	801356a <_malloc_r+0xe6>
 80134d8:	6823      	ldr	r3, [r4, #0]
 80134da:	4631      	mov	r1, r6
 80134dc:	4638      	mov	r0, r7
 80134de:	eb04 0903 	add.w	r9, r4, r3
 80134e2:	f000 ffbf 	bl	8014464 <_sbrk_r>
 80134e6:	4581      	cmp	r9, r0
 80134e8:	d13f      	bne.n	801356a <_malloc_r+0xe6>
 80134ea:	6821      	ldr	r1, [r4, #0]
 80134ec:	1a6d      	subs	r5, r5, r1
 80134ee:	4629      	mov	r1, r5
 80134f0:	4638      	mov	r0, r7
 80134f2:	f7ff ffa7 	bl	8013444 <sbrk_aligned>
 80134f6:	3001      	adds	r0, #1
 80134f8:	d037      	beq.n	801356a <_malloc_r+0xe6>
 80134fa:	6823      	ldr	r3, [r4, #0]
 80134fc:	442b      	add	r3, r5
 80134fe:	6023      	str	r3, [r4, #0]
 8013500:	f8d8 3000 	ldr.w	r3, [r8]
 8013504:	2b00      	cmp	r3, #0
 8013506:	d038      	beq.n	801357a <_malloc_r+0xf6>
 8013508:	685a      	ldr	r2, [r3, #4]
 801350a:	42a2      	cmp	r2, r4
 801350c:	d12b      	bne.n	8013566 <_malloc_r+0xe2>
 801350e:	2200      	movs	r2, #0
 8013510:	605a      	str	r2, [r3, #4]
 8013512:	e00f      	b.n	8013534 <_malloc_r+0xb0>
 8013514:	6822      	ldr	r2, [r4, #0]
 8013516:	1b52      	subs	r2, r2, r5
 8013518:	d41f      	bmi.n	801355a <_malloc_r+0xd6>
 801351a:	2a0b      	cmp	r2, #11
 801351c:	d917      	bls.n	801354e <_malloc_r+0xca>
 801351e:	1961      	adds	r1, r4, r5
 8013520:	42a3      	cmp	r3, r4
 8013522:	6025      	str	r5, [r4, #0]
 8013524:	bf18      	it	ne
 8013526:	6059      	strne	r1, [r3, #4]
 8013528:	6863      	ldr	r3, [r4, #4]
 801352a:	bf08      	it	eq
 801352c:	f8c8 1000 	streq.w	r1, [r8]
 8013530:	5162      	str	r2, [r4, r5]
 8013532:	604b      	str	r3, [r1, #4]
 8013534:	4638      	mov	r0, r7
 8013536:	f104 060b 	add.w	r6, r4, #11
 801353a:	f000 f829 	bl	8013590 <__malloc_unlock>
 801353e:	f026 0607 	bic.w	r6, r6, #7
 8013542:	1d23      	adds	r3, r4, #4
 8013544:	1af2      	subs	r2, r6, r3
 8013546:	d0ae      	beq.n	80134a6 <_malloc_r+0x22>
 8013548:	1b9b      	subs	r3, r3, r6
 801354a:	50a3      	str	r3, [r4, r2]
 801354c:	e7ab      	b.n	80134a6 <_malloc_r+0x22>
 801354e:	42a3      	cmp	r3, r4
 8013550:	6862      	ldr	r2, [r4, #4]
 8013552:	d1dd      	bne.n	8013510 <_malloc_r+0x8c>
 8013554:	f8c8 2000 	str.w	r2, [r8]
 8013558:	e7ec      	b.n	8013534 <_malloc_r+0xb0>
 801355a:	4623      	mov	r3, r4
 801355c:	6864      	ldr	r4, [r4, #4]
 801355e:	e7ac      	b.n	80134ba <_malloc_r+0x36>
 8013560:	4634      	mov	r4, r6
 8013562:	6876      	ldr	r6, [r6, #4]
 8013564:	e7b4      	b.n	80134d0 <_malloc_r+0x4c>
 8013566:	4613      	mov	r3, r2
 8013568:	e7cc      	b.n	8013504 <_malloc_r+0x80>
 801356a:	230c      	movs	r3, #12
 801356c:	603b      	str	r3, [r7, #0]
 801356e:	4638      	mov	r0, r7
 8013570:	f000 f80e 	bl	8013590 <__malloc_unlock>
 8013574:	e797      	b.n	80134a6 <_malloc_r+0x22>
 8013576:	6025      	str	r5, [r4, #0]
 8013578:	e7dc      	b.n	8013534 <_malloc_r+0xb0>
 801357a:	605b      	str	r3, [r3, #4]
 801357c:	deff      	udf	#255	; 0xff
 801357e:	bf00      	nop
 8013580:	200035c4 	.word	0x200035c4

08013584 <__malloc_lock>:
 8013584:	4801      	ldr	r0, [pc, #4]	; (801358c <__malloc_lock+0x8>)
 8013586:	f7ff b87d 	b.w	8012684 <__retarget_lock_acquire_recursive>
 801358a:	bf00      	nop
 801358c:	200035c0 	.word	0x200035c0

08013590 <__malloc_unlock>:
 8013590:	4801      	ldr	r0, [pc, #4]	; (8013598 <__malloc_unlock+0x8>)
 8013592:	f7ff b878 	b.w	8012686 <__retarget_lock_release_recursive>
 8013596:	bf00      	nop
 8013598:	200035c0 	.word	0x200035c0

0801359c <_Balloc>:
 801359c:	b570      	push	{r4, r5, r6, lr}
 801359e:	69c6      	ldr	r6, [r0, #28]
 80135a0:	4604      	mov	r4, r0
 80135a2:	460d      	mov	r5, r1
 80135a4:	b976      	cbnz	r6, 80135c4 <_Balloc+0x28>
 80135a6:	2010      	movs	r0, #16
 80135a8:	f7ff ff44 	bl	8013434 <malloc>
 80135ac:	4602      	mov	r2, r0
 80135ae:	61e0      	str	r0, [r4, #28]
 80135b0:	b920      	cbnz	r0, 80135bc <_Balloc+0x20>
 80135b2:	4b18      	ldr	r3, [pc, #96]	; (8013614 <_Balloc+0x78>)
 80135b4:	4818      	ldr	r0, [pc, #96]	; (8013618 <_Balloc+0x7c>)
 80135b6:	216b      	movs	r1, #107	; 0x6b
 80135b8:	f000 ff64 	bl	8014484 <__assert_func>
 80135bc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80135c0:	6006      	str	r6, [r0, #0]
 80135c2:	60c6      	str	r6, [r0, #12]
 80135c4:	69e6      	ldr	r6, [r4, #28]
 80135c6:	68f3      	ldr	r3, [r6, #12]
 80135c8:	b183      	cbz	r3, 80135ec <_Balloc+0x50>
 80135ca:	69e3      	ldr	r3, [r4, #28]
 80135cc:	68db      	ldr	r3, [r3, #12]
 80135ce:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80135d2:	b9b8      	cbnz	r0, 8013604 <_Balloc+0x68>
 80135d4:	2101      	movs	r1, #1
 80135d6:	fa01 f605 	lsl.w	r6, r1, r5
 80135da:	1d72      	adds	r2, r6, #5
 80135dc:	0092      	lsls	r2, r2, #2
 80135de:	4620      	mov	r0, r4
 80135e0:	f000 ff6e 	bl	80144c0 <_calloc_r>
 80135e4:	b160      	cbz	r0, 8013600 <_Balloc+0x64>
 80135e6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80135ea:	e00e      	b.n	801360a <_Balloc+0x6e>
 80135ec:	2221      	movs	r2, #33	; 0x21
 80135ee:	2104      	movs	r1, #4
 80135f0:	4620      	mov	r0, r4
 80135f2:	f000 ff65 	bl	80144c0 <_calloc_r>
 80135f6:	69e3      	ldr	r3, [r4, #28]
 80135f8:	60f0      	str	r0, [r6, #12]
 80135fa:	68db      	ldr	r3, [r3, #12]
 80135fc:	2b00      	cmp	r3, #0
 80135fe:	d1e4      	bne.n	80135ca <_Balloc+0x2e>
 8013600:	2000      	movs	r0, #0
 8013602:	bd70      	pop	{r4, r5, r6, pc}
 8013604:	6802      	ldr	r2, [r0, #0]
 8013606:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801360a:	2300      	movs	r3, #0
 801360c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8013610:	e7f7      	b.n	8013602 <_Balloc+0x66>
 8013612:	bf00      	nop
 8013614:	08014b05 	.word	0x08014b05
 8013618:	08014b85 	.word	0x08014b85

0801361c <_Bfree>:
 801361c:	b570      	push	{r4, r5, r6, lr}
 801361e:	69c6      	ldr	r6, [r0, #28]
 8013620:	4605      	mov	r5, r0
 8013622:	460c      	mov	r4, r1
 8013624:	b976      	cbnz	r6, 8013644 <_Bfree+0x28>
 8013626:	2010      	movs	r0, #16
 8013628:	f7ff ff04 	bl	8013434 <malloc>
 801362c:	4602      	mov	r2, r0
 801362e:	61e8      	str	r0, [r5, #28]
 8013630:	b920      	cbnz	r0, 801363c <_Bfree+0x20>
 8013632:	4b09      	ldr	r3, [pc, #36]	; (8013658 <_Bfree+0x3c>)
 8013634:	4809      	ldr	r0, [pc, #36]	; (801365c <_Bfree+0x40>)
 8013636:	218f      	movs	r1, #143	; 0x8f
 8013638:	f000 ff24 	bl	8014484 <__assert_func>
 801363c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8013640:	6006      	str	r6, [r0, #0]
 8013642:	60c6      	str	r6, [r0, #12]
 8013644:	b13c      	cbz	r4, 8013656 <_Bfree+0x3a>
 8013646:	69eb      	ldr	r3, [r5, #28]
 8013648:	6862      	ldr	r2, [r4, #4]
 801364a:	68db      	ldr	r3, [r3, #12]
 801364c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8013650:	6021      	str	r1, [r4, #0]
 8013652:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8013656:	bd70      	pop	{r4, r5, r6, pc}
 8013658:	08014b05 	.word	0x08014b05
 801365c:	08014b85 	.word	0x08014b85

08013660 <__multadd>:
 8013660:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013664:	690d      	ldr	r5, [r1, #16]
 8013666:	4607      	mov	r7, r0
 8013668:	460c      	mov	r4, r1
 801366a:	461e      	mov	r6, r3
 801366c:	f101 0c14 	add.w	ip, r1, #20
 8013670:	2000      	movs	r0, #0
 8013672:	f8dc 3000 	ldr.w	r3, [ip]
 8013676:	b299      	uxth	r1, r3
 8013678:	fb02 6101 	mla	r1, r2, r1, r6
 801367c:	0c1e      	lsrs	r6, r3, #16
 801367e:	0c0b      	lsrs	r3, r1, #16
 8013680:	fb02 3306 	mla	r3, r2, r6, r3
 8013684:	b289      	uxth	r1, r1
 8013686:	3001      	adds	r0, #1
 8013688:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801368c:	4285      	cmp	r5, r0
 801368e:	f84c 1b04 	str.w	r1, [ip], #4
 8013692:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8013696:	dcec      	bgt.n	8013672 <__multadd+0x12>
 8013698:	b30e      	cbz	r6, 80136de <__multadd+0x7e>
 801369a:	68a3      	ldr	r3, [r4, #8]
 801369c:	42ab      	cmp	r3, r5
 801369e:	dc19      	bgt.n	80136d4 <__multadd+0x74>
 80136a0:	6861      	ldr	r1, [r4, #4]
 80136a2:	4638      	mov	r0, r7
 80136a4:	3101      	adds	r1, #1
 80136a6:	f7ff ff79 	bl	801359c <_Balloc>
 80136aa:	4680      	mov	r8, r0
 80136ac:	b928      	cbnz	r0, 80136ba <__multadd+0x5a>
 80136ae:	4602      	mov	r2, r0
 80136b0:	4b0c      	ldr	r3, [pc, #48]	; (80136e4 <__multadd+0x84>)
 80136b2:	480d      	ldr	r0, [pc, #52]	; (80136e8 <__multadd+0x88>)
 80136b4:	21ba      	movs	r1, #186	; 0xba
 80136b6:	f000 fee5 	bl	8014484 <__assert_func>
 80136ba:	6922      	ldr	r2, [r4, #16]
 80136bc:	3202      	adds	r2, #2
 80136be:	f104 010c 	add.w	r1, r4, #12
 80136c2:	0092      	lsls	r2, r2, #2
 80136c4:	300c      	adds	r0, #12
 80136c6:	f7fe ffdf 	bl	8012688 <memcpy>
 80136ca:	4621      	mov	r1, r4
 80136cc:	4638      	mov	r0, r7
 80136ce:	f7ff ffa5 	bl	801361c <_Bfree>
 80136d2:	4644      	mov	r4, r8
 80136d4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80136d8:	3501      	adds	r5, #1
 80136da:	615e      	str	r6, [r3, #20]
 80136dc:	6125      	str	r5, [r4, #16]
 80136de:	4620      	mov	r0, r4
 80136e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80136e4:	08014b74 	.word	0x08014b74
 80136e8:	08014b85 	.word	0x08014b85

080136ec <__hi0bits>:
 80136ec:	0c03      	lsrs	r3, r0, #16
 80136ee:	041b      	lsls	r3, r3, #16
 80136f0:	b9d3      	cbnz	r3, 8013728 <__hi0bits+0x3c>
 80136f2:	0400      	lsls	r0, r0, #16
 80136f4:	2310      	movs	r3, #16
 80136f6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80136fa:	bf04      	itt	eq
 80136fc:	0200      	lsleq	r0, r0, #8
 80136fe:	3308      	addeq	r3, #8
 8013700:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8013704:	bf04      	itt	eq
 8013706:	0100      	lsleq	r0, r0, #4
 8013708:	3304      	addeq	r3, #4
 801370a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801370e:	bf04      	itt	eq
 8013710:	0080      	lsleq	r0, r0, #2
 8013712:	3302      	addeq	r3, #2
 8013714:	2800      	cmp	r0, #0
 8013716:	db05      	blt.n	8013724 <__hi0bits+0x38>
 8013718:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801371c:	f103 0301 	add.w	r3, r3, #1
 8013720:	bf08      	it	eq
 8013722:	2320      	moveq	r3, #32
 8013724:	4618      	mov	r0, r3
 8013726:	4770      	bx	lr
 8013728:	2300      	movs	r3, #0
 801372a:	e7e4      	b.n	80136f6 <__hi0bits+0xa>

0801372c <__lo0bits>:
 801372c:	6803      	ldr	r3, [r0, #0]
 801372e:	f013 0207 	ands.w	r2, r3, #7
 8013732:	d00c      	beq.n	801374e <__lo0bits+0x22>
 8013734:	07d9      	lsls	r1, r3, #31
 8013736:	d422      	bmi.n	801377e <__lo0bits+0x52>
 8013738:	079a      	lsls	r2, r3, #30
 801373a:	bf49      	itett	mi
 801373c:	085b      	lsrmi	r3, r3, #1
 801373e:	089b      	lsrpl	r3, r3, #2
 8013740:	6003      	strmi	r3, [r0, #0]
 8013742:	2201      	movmi	r2, #1
 8013744:	bf5c      	itt	pl
 8013746:	6003      	strpl	r3, [r0, #0]
 8013748:	2202      	movpl	r2, #2
 801374a:	4610      	mov	r0, r2
 801374c:	4770      	bx	lr
 801374e:	b299      	uxth	r1, r3
 8013750:	b909      	cbnz	r1, 8013756 <__lo0bits+0x2a>
 8013752:	0c1b      	lsrs	r3, r3, #16
 8013754:	2210      	movs	r2, #16
 8013756:	b2d9      	uxtb	r1, r3
 8013758:	b909      	cbnz	r1, 801375e <__lo0bits+0x32>
 801375a:	3208      	adds	r2, #8
 801375c:	0a1b      	lsrs	r3, r3, #8
 801375e:	0719      	lsls	r1, r3, #28
 8013760:	bf04      	itt	eq
 8013762:	091b      	lsreq	r3, r3, #4
 8013764:	3204      	addeq	r2, #4
 8013766:	0799      	lsls	r1, r3, #30
 8013768:	bf04      	itt	eq
 801376a:	089b      	lsreq	r3, r3, #2
 801376c:	3202      	addeq	r2, #2
 801376e:	07d9      	lsls	r1, r3, #31
 8013770:	d403      	bmi.n	801377a <__lo0bits+0x4e>
 8013772:	085b      	lsrs	r3, r3, #1
 8013774:	f102 0201 	add.w	r2, r2, #1
 8013778:	d003      	beq.n	8013782 <__lo0bits+0x56>
 801377a:	6003      	str	r3, [r0, #0]
 801377c:	e7e5      	b.n	801374a <__lo0bits+0x1e>
 801377e:	2200      	movs	r2, #0
 8013780:	e7e3      	b.n	801374a <__lo0bits+0x1e>
 8013782:	2220      	movs	r2, #32
 8013784:	e7e1      	b.n	801374a <__lo0bits+0x1e>
	...

08013788 <__i2b>:
 8013788:	b510      	push	{r4, lr}
 801378a:	460c      	mov	r4, r1
 801378c:	2101      	movs	r1, #1
 801378e:	f7ff ff05 	bl	801359c <_Balloc>
 8013792:	4602      	mov	r2, r0
 8013794:	b928      	cbnz	r0, 80137a2 <__i2b+0x1a>
 8013796:	4b05      	ldr	r3, [pc, #20]	; (80137ac <__i2b+0x24>)
 8013798:	4805      	ldr	r0, [pc, #20]	; (80137b0 <__i2b+0x28>)
 801379a:	f240 1145 	movw	r1, #325	; 0x145
 801379e:	f000 fe71 	bl	8014484 <__assert_func>
 80137a2:	2301      	movs	r3, #1
 80137a4:	6144      	str	r4, [r0, #20]
 80137a6:	6103      	str	r3, [r0, #16]
 80137a8:	bd10      	pop	{r4, pc}
 80137aa:	bf00      	nop
 80137ac:	08014b74 	.word	0x08014b74
 80137b0:	08014b85 	.word	0x08014b85

080137b4 <__multiply>:
 80137b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80137b8:	4691      	mov	r9, r2
 80137ba:	690a      	ldr	r2, [r1, #16]
 80137bc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80137c0:	429a      	cmp	r2, r3
 80137c2:	bfb8      	it	lt
 80137c4:	460b      	movlt	r3, r1
 80137c6:	460c      	mov	r4, r1
 80137c8:	bfbc      	itt	lt
 80137ca:	464c      	movlt	r4, r9
 80137cc:	4699      	movlt	r9, r3
 80137ce:	6927      	ldr	r7, [r4, #16]
 80137d0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80137d4:	68a3      	ldr	r3, [r4, #8]
 80137d6:	6861      	ldr	r1, [r4, #4]
 80137d8:	eb07 060a 	add.w	r6, r7, sl
 80137dc:	42b3      	cmp	r3, r6
 80137de:	b085      	sub	sp, #20
 80137e0:	bfb8      	it	lt
 80137e2:	3101      	addlt	r1, #1
 80137e4:	f7ff feda 	bl	801359c <_Balloc>
 80137e8:	b930      	cbnz	r0, 80137f8 <__multiply+0x44>
 80137ea:	4602      	mov	r2, r0
 80137ec:	4b44      	ldr	r3, [pc, #272]	; (8013900 <__multiply+0x14c>)
 80137ee:	4845      	ldr	r0, [pc, #276]	; (8013904 <__multiply+0x150>)
 80137f0:	f44f 71b1 	mov.w	r1, #354	; 0x162
 80137f4:	f000 fe46 	bl	8014484 <__assert_func>
 80137f8:	f100 0514 	add.w	r5, r0, #20
 80137fc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8013800:	462b      	mov	r3, r5
 8013802:	2200      	movs	r2, #0
 8013804:	4543      	cmp	r3, r8
 8013806:	d321      	bcc.n	801384c <__multiply+0x98>
 8013808:	f104 0314 	add.w	r3, r4, #20
 801380c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8013810:	f109 0314 	add.w	r3, r9, #20
 8013814:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8013818:	9202      	str	r2, [sp, #8]
 801381a:	1b3a      	subs	r2, r7, r4
 801381c:	3a15      	subs	r2, #21
 801381e:	f022 0203 	bic.w	r2, r2, #3
 8013822:	3204      	adds	r2, #4
 8013824:	f104 0115 	add.w	r1, r4, #21
 8013828:	428f      	cmp	r7, r1
 801382a:	bf38      	it	cc
 801382c:	2204      	movcc	r2, #4
 801382e:	9201      	str	r2, [sp, #4]
 8013830:	9a02      	ldr	r2, [sp, #8]
 8013832:	9303      	str	r3, [sp, #12]
 8013834:	429a      	cmp	r2, r3
 8013836:	d80c      	bhi.n	8013852 <__multiply+0x9e>
 8013838:	2e00      	cmp	r6, #0
 801383a:	dd03      	ble.n	8013844 <__multiply+0x90>
 801383c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8013840:	2b00      	cmp	r3, #0
 8013842:	d05b      	beq.n	80138fc <__multiply+0x148>
 8013844:	6106      	str	r6, [r0, #16]
 8013846:	b005      	add	sp, #20
 8013848:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801384c:	f843 2b04 	str.w	r2, [r3], #4
 8013850:	e7d8      	b.n	8013804 <__multiply+0x50>
 8013852:	f8b3 a000 	ldrh.w	sl, [r3]
 8013856:	f1ba 0f00 	cmp.w	sl, #0
 801385a:	d024      	beq.n	80138a6 <__multiply+0xf2>
 801385c:	f104 0e14 	add.w	lr, r4, #20
 8013860:	46a9      	mov	r9, r5
 8013862:	f04f 0c00 	mov.w	ip, #0
 8013866:	f85e 2b04 	ldr.w	r2, [lr], #4
 801386a:	f8d9 1000 	ldr.w	r1, [r9]
 801386e:	fa1f fb82 	uxth.w	fp, r2
 8013872:	b289      	uxth	r1, r1
 8013874:	fb0a 110b 	mla	r1, sl, fp, r1
 8013878:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 801387c:	f8d9 2000 	ldr.w	r2, [r9]
 8013880:	4461      	add	r1, ip
 8013882:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8013886:	fb0a c20b 	mla	r2, sl, fp, ip
 801388a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801388e:	b289      	uxth	r1, r1
 8013890:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8013894:	4577      	cmp	r7, lr
 8013896:	f849 1b04 	str.w	r1, [r9], #4
 801389a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801389e:	d8e2      	bhi.n	8013866 <__multiply+0xb2>
 80138a0:	9a01      	ldr	r2, [sp, #4]
 80138a2:	f845 c002 	str.w	ip, [r5, r2]
 80138a6:	9a03      	ldr	r2, [sp, #12]
 80138a8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80138ac:	3304      	adds	r3, #4
 80138ae:	f1b9 0f00 	cmp.w	r9, #0
 80138b2:	d021      	beq.n	80138f8 <__multiply+0x144>
 80138b4:	6829      	ldr	r1, [r5, #0]
 80138b6:	f104 0c14 	add.w	ip, r4, #20
 80138ba:	46ae      	mov	lr, r5
 80138bc:	f04f 0a00 	mov.w	sl, #0
 80138c0:	f8bc b000 	ldrh.w	fp, [ip]
 80138c4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80138c8:	fb09 220b 	mla	r2, r9, fp, r2
 80138cc:	4452      	add	r2, sl
 80138ce:	b289      	uxth	r1, r1
 80138d0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80138d4:	f84e 1b04 	str.w	r1, [lr], #4
 80138d8:	f85c 1b04 	ldr.w	r1, [ip], #4
 80138dc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80138e0:	f8be 1000 	ldrh.w	r1, [lr]
 80138e4:	fb09 110a 	mla	r1, r9, sl, r1
 80138e8:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 80138ec:	4567      	cmp	r7, ip
 80138ee:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80138f2:	d8e5      	bhi.n	80138c0 <__multiply+0x10c>
 80138f4:	9a01      	ldr	r2, [sp, #4]
 80138f6:	50a9      	str	r1, [r5, r2]
 80138f8:	3504      	adds	r5, #4
 80138fa:	e799      	b.n	8013830 <__multiply+0x7c>
 80138fc:	3e01      	subs	r6, #1
 80138fe:	e79b      	b.n	8013838 <__multiply+0x84>
 8013900:	08014b74 	.word	0x08014b74
 8013904:	08014b85 	.word	0x08014b85

08013908 <__pow5mult>:
 8013908:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801390c:	4615      	mov	r5, r2
 801390e:	f012 0203 	ands.w	r2, r2, #3
 8013912:	4606      	mov	r6, r0
 8013914:	460f      	mov	r7, r1
 8013916:	d007      	beq.n	8013928 <__pow5mult+0x20>
 8013918:	4c25      	ldr	r4, [pc, #148]	; (80139b0 <__pow5mult+0xa8>)
 801391a:	3a01      	subs	r2, #1
 801391c:	2300      	movs	r3, #0
 801391e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8013922:	f7ff fe9d 	bl	8013660 <__multadd>
 8013926:	4607      	mov	r7, r0
 8013928:	10ad      	asrs	r5, r5, #2
 801392a:	d03d      	beq.n	80139a8 <__pow5mult+0xa0>
 801392c:	69f4      	ldr	r4, [r6, #28]
 801392e:	b97c      	cbnz	r4, 8013950 <__pow5mult+0x48>
 8013930:	2010      	movs	r0, #16
 8013932:	f7ff fd7f 	bl	8013434 <malloc>
 8013936:	4602      	mov	r2, r0
 8013938:	61f0      	str	r0, [r6, #28]
 801393a:	b928      	cbnz	r0, 8013948 <__pow5mult+0x40>
 801393c:	4b1d      	ldr	r3, [pc, #116]	; (80139b4 <__pow5mult+0xac>)
 801393e:	481e      	ldr	r0, [pc, #120]	; (80139b8 <__pow5mult+0xb0>)
 8013940:	f240 11b3 	movw	r1, #435	; 0x1b3
 8013944:	f000 fd9e 	bl	8014484 <__assert_func>
 8013948:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801394c:	6004      	str	r4, [r0, #0]
 801394e:	60c4      	str	r4, [r0, #12]
 8013950:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8013954:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8013958:	b94c      	cbnz	r4, 801396e <__pow5mult+0x66>
 801395a:	f240 2171 	movw	r1, #625	; 0x271
 801395e:	4630      	mov	r0, r6
 8013960:	f7ff ff12 	bl	8013788 <__i2b>
 8013964:	2300      	movs	r3, #0
 8013966:	f8c8 0008 	str.w	r0, [r8, #8]
 801396a:	4604      	mov	r4, r0
 801396c:	6003      	str	r3, [r0, #0]
 801396e:	f04f 0900 	mov.w	r9, #0
 8013972:	07eb      	lsls	r3, r5, #31
 8013974:	d50a      	bpl.n	801398c <__pow5mult+0x84>
 8013976:	4639      	mov	r1, r7
 8013978:	4622      	mov	r2, r4
 801397a:	4630      	mov	r0, r6
 801397c:	f7ff ff1a 	bl	80137b4 <__multiply>
 8013980:	4639      	mov	r1, r7
 8013982:	4680      	mov	r8, r0
 8013984:	4630      	mov	r0, r6
 8013986:	f7ff fe49 	bl	801361c <_Bfree>
 801398a:	4647      	mov	r7, r8
 801398c:	106d      	asrs	r5, r5, #1
 801398e:	d00b      	beq.n	80139a8 <__pow5mult+0xa0>
 8013990:	6820      	ldr	r0, [r4, #0]
 8013992:	b938      	cbnz	r0, 80139a4 <__pow5mult+0x9c>
 8013994:	4622      	mov	r2, r4
 8013996:	4621      	mov	r1, r4
 8013998:	4630      	mov	r0, r6
 801399a:	f7ff ff0b 	bl	80137b4 <__multiply>
 801399e:	6020      	str	r0, [r4, #0]
 80139a0:	f8c0 9000 	str.w	r9, [r0]
 80139a4:	4604      	mov	r4, r0
 80139a6:	e7e4      	b.n	8013972 <__pow5mult+0x6a>
 80139a8:	4638      	mov	r0, r7
 80139aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80139ae:	bf00      	nop
 80139b0:	08014cd0 	.word	0x08014cd0
 80139b4:	08014b05 	.word	0x08014b05
 80139b8:	08014b85 	.word	0x08014b85

080139bc <__lshift>:
 80139bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80139c0:	460c      	mov	r4, r1
 80139c2:	6849      	ldr	r1, [r1, #4]
 80139c4:	6923      	ldr	r3, [r4, #16]
 80139c6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80139ca:	68a3      	ldr	r3, [r4, #8]
 80139cc:	4607      	mov	r7, r0
 80139ce:	4691      	mov	r9, r2
 80139d0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80139d4:	f108 0601 	add.w	r6, r8, #1
 80139d8:	42b3      	cmp	r3, r6
 80139da:	db0b      	blt.n	80139f4 <__lshift+0x38>
 80139dc:	4638      	mov	r0, r7
 80139de:	f7ff fddd 	bl	801359c <_Balloc>
 80139e2:	4605      	mov	r5, r0
 80139e4:	b948      	cbnz	r0, 80139fa <__lshift+0x3e>
 80139e6:	4602      	mov	r2, r0
 80139e8:	4b28      	ldr	r3, [pc, #160]	; (8013a8c <__lshift+0xd0>)
 80139ea:	4829      	ldr	r0, [pc, #164]	; (8013a90 <__lshift+0xd4>)
 80139ec:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 80139f0:	f000 fd48 	bl	8014484 <__assert_func>
 80139f4:	3101      	adds	r1, #1
 80139f6:	005b      	lsls	r3, r3, #1
 80139f8:	e7ee      	b.n	80139d8 <__lshift+0x1c>
 80139fa:	2300      	movs	r3, #0
 80139fc:	f100 0114 	add.w	r1, r0, #20
 8013a00:	f100 0210 	add.w	r2, r0, #16
 8013a04:	4618      	mov	r0, r3
 8013a06:	4553      	cmp	r3, sl
 8013a08:	db33      	blt.n	8013a72 <__lshift+0xb6>
 8013a0a:	6920      	ldr	r0, [r4, #16]
 8013a0c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8013a10:	f104 0314 	add.w	r3, r4, #20
 8013a14:	f019 091f 	ands.w	r9, r9, #31
 8013a18:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8013a1c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8013a20:	d02b      	beq.n	8013a7a <__lshift+0xbe>
 8013a22:	f1c9 0e20 	rsb	lr, r9, #32
 8013a26:	468a      	mov	sl, r1
 8013a28:	2200      	movs	r2, #0
 8013a2a:	6818      	ldr	r0, [r3, #0]
 8013a2c:	fa00 f009 	lsl.w	r0, r0, r9
 8013a30:	4310      	orrs	r0, r2
 8013a32:	f84a 0b04 	str.w	r0, [sl], #4
 8013a36:	f853 2b04 	ldr.w	r2, [r3], #4
 8013a3a:	459c      	cmp	ip, r3
 8013a3c:	fa22 f20e 	lsr.w	r2, r2, lr
 8013a40:	d8f3      	bhi.n	8013a2a <__lshift+0x6e>
 8013a42:	ebac 0304 	sub.w	r3, ip, r4
 8013a46:	3b15      	subs	r3, #21
 8013a48:	f023 0303 	bic.w	r3, r3, #3
 8013a4c:	3304      	adds	r3, #4
 8013a4e:	f104 0015 	add.w	r0, r4, #21
 8013a52:	4584      	cmp	ip, r0
 8013a54:	bf38      	it	cc
 8013a56:	2304      	movcc	r3, #4
 8013a58:	50ca      	str	r2, [r1, r3]
 8013a5a:	b10a      	cbz	r2, 8013a60 <__lshift+0xa4>
 8013a5c:	f108 0602 	add.w	r6, r8, #2
 8013a60:	3e01      	subs	r6, #1
 8013a62:	4638      	mov	r0, r7
 8013a64:	612e      	str	r6, [r5, #16]
 8013a66:	4621      	mov	r1, r4
 8013a68:	f7ff fdd8 	bl	801361c <_Bfree>
 8013a6c:	4628      	mov	r0, r5
 8013a6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013a72:	f842 0f04 	str.w	r0, [r2, #4]!
 8013a76:	3301      	adds	r3, #1
 8013a78:	e7c5      	b.n	8013a06 <__lshift+0x4a>
 8013a7a:	3904      	subs	r1, #4
 8013a7c:	f853 2b04 	ldr.w	r2, [r3], #4
 8013a80:	f841 2f04 	str.w	r2, [r1, #4]!
 8013a84:	459c      	cmp	ip, r3
 8013a86:	d8f9      	bhi.n	8013a7c <__lshift+0xc0>
 8013a88:	e7ea      	b.n	8013a60 <__lshift+0xa4>
 8013a8a:	bf00      	nop
 8013a8c:	08014b74 	.word	0x08014b74
 8013a90:	08014b85 	.word	0x08014b85

08013a94 <__mcmp>:
 8013a94:	b530      	push	{r4, r5, lr}
 8013a96:	6902      	ldr	r2, [r0, #16]
 8013a98:	690c      	ldr	r4, [r1, #16]
 8013a9a:	1b12      	subs	r2, r2, r4
 8013a9c:	d10e      	bne.n	8013abc <__mcmp+0x28>
 8013a9e:	f100 0314 	add.w	r3, r0, #20
 8013aa2:	3114      	adds	r1, #20
 8013aa4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8013aa8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8013aac:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8013ab0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8013ab4:	42a5      	cmp	r5, r4
 8013ab6:	d003      	beq.n	8013ac0 <__mcmp+0x2c>
 8013ab8:	d305      	bcc.n	8013ac6 <__mcmp+0x32>
 8013aba:	2201      	movs	r2, #1
 8013abc:	4610      	mov	r0, r2
 8013abe:	bd30      	pop	{r4, r5, pc}
 8013ac0:	4283      	cmp	r3, r0
 8013ac2:	d3f3      	bcc.n	8013aac <__mcmp+0x18>
 8013ac4:	e7fa      	b.n	8013abc <__mcmp+0x28>
 8013ac6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8013aca:	e7f7      	b.n	8013abc <__mcmp+0x28>

08013acc <__mdiff>:
 8013acc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013ad0:	460c      	mov	r4, r1
 8013ad2:	4606      	mov	r6, r0
 8013ad4:	4611      	mov	r1, r2
 8013ad6:	4620      	mov	r0, r4
 8013ad8:	4690      	mov	r8, r2
 8013ada:	f7ff ffdb 	bl	8013a94 <__mcmp>
 8013ade:	1e05      	subs	r5, r0, #0
 8013ae0:	d110      	bne.n	8013b04 <__mdiff+0x38>
 8013ae2:	4629      	mov	r1, r5
 8013ae4:	4630      	mov	r0, r6
 8013ae6:	f7ff fd59 	bl	801359c <_Balloc>
 8013aea:	b930      	cbnz	r0, 8013afa <__mdiff+0x2e>
 8013aec:	4b3a      	ldr	r3, [pc, #232]	; (8013bd8 <__mdiff+0x10c>)
 8013aee:	4602      	mov	r2, r0
 8013af0:	f240 2137 	movw	r1, #567	; 0x237
 8013af4:	4839      	ldr	r0, [pc, #228]	; (8013bdc <__mdiff+0x110>)
 8013af6:	f000 fcc5 	bl	8014484 <__assert_func>
 8013afa:	2301      	movs	r3, #1
 8013afc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8013b00:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013b04:	bfa4      	itt	ge
 8013b06:	4643      	movge	r3, r8
 8013b08:	46a0      	movge	r8, r4
 8013b0a:	4630      	mov	r0, r6
 8013b0c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8013b10:	bfa6      	itte	ge
 8013b12:	461c      	movge	r4, r3
 8013b14:	2500      	movge	r5, #0
 8013b16:	2501      	movlt	r5, #1
 8013b18:	f7ff fd40 	bl	801359c <_Balloc>
 8013b1c:	b920      	cbnz	r0, 8013b28 <__mdiff+0x5c>
 8013b1e:	4b2e      	ldr	r3, [pc, #184]	; (8013bd8 <__mdiff+0x10c>)
 8013b20:	4602      	mov	r2, r0
 8013b22:	f240 2145 	movw	r1, #581	; 0x245
 8013b26:	e7e5      	b.n	8013af4 <__mdiff+0x28>
 8013b28:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8013b2c:	6926      	ldr	r6, [r4, #16]
 8013b2e:	60c5      	str	r5, [r0, #12]
 8013b30:	f104 0914 	add.w	r9, r4, #20
 8013b34:	f108 0514 	add.w	r5, r8, #20
 8013b38:	f100 0e14 	add.w	lr, r0, #20
 8013b3c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8013b40:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8013b44:	f108 0210 	add.w	r2, r8, #16
 8013b48:	46f2      	mov	sl, lr
 8013b4a:	2100      	movs	r1, #0
 8013b4c:	f859 3b04 	ldr.w	r3, [r9], #4
 8013b50:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8013b54:	fa11 f88b 	uxtah	r8, r1, fp
 8013b58:	b299      	uxth	r1, r3
 8013b5a:	0c1b      	lsrs	r3, r3, #16
 8013b5c:	eba8 0801 	sub.w	r8, r8, r1
 8013b60:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8013b64:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8013b68:	fa1f f888 	uxth.w	r8, r8
 8013b6c:	1419      	asrs	r1, r3, #16
 8013b6e:	454e      	cmp	r6, r9
 8013b70:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8013b74:	f84a 3b04 	str.w	r3, [sl], #4
 8013b78:	d8e8      	bhi.n	8013b4c <__mdiff+0x80>
 8013b7a:	1b33      	subs	r3, r6, r4
 8013b7c:	3b15      	subs	r3, #21
 8013b7e:	f023 0303 	bic.w	r3, r3, #3
 8013b82:	3304      	adds	r3, #4
 8013b84:	3415      	adds	r4, #21
 8013b86:	42a6      	cmp	r6, r4
 8013b88:	bf38      	it	cc
 8013b8a:	2304      	movcc	r3, #4
 8013b8c:	441d      	add	r5, r3
 8013b8e:	4473      	add	r3, lr
 8013b90:	469e      	mov	lr, r3
 8013b92:	462e      	mov	r6, r5
 8013b94:	4566      	cmp	r6, ip
 8013b96:	d30e      	bcc.n	8013bb6 <__mdiff+0xea>
 8013b98:	f10c 0203 	add.w	r2, ip, #3
 8013b9c:	1b52      	subs	r2, r2, r5
 8013b9e:	f022 0203 	bic.w	r2, r2, #3
 8013ba2:	3d03      	subs	r5, #3
 8013ba4:	45ac      	cmp	ip, r5
 8013ba6:	bf38      	it	cc
 8013ba8:	2200      	movcc	r2, #0
 8013baa:	4413      	add	r3, r2
 8013bac:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8013bb0:	b17a      	cbz	r2, 8013bd2 <__mdiff+0x106>
 8013bb2:	6107      	str	r7, [r0, #16]
 8013bb4:	e7a4      	b.n	8013b00 <__mdiff+0x34>
 8013bb6:	f856 8b04 	ldr.w	r8, [r6], #4
 8013bba:	fa11 f288 	uxtah	r2, r1, r8
 8013bbe:	1414      	asrs	r4, r2, #16
 8013bc0:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8013bc4:	b292      	uxth	r2, r2
 8013bc6:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8013bca:	f84e 2b04 	str.w	r2, [lr], #4
 8013bce:	1421      	asrs	r1, r4, #16
 8013bd0:	e7e0      	b.n	8013b94 <__mdiff+0xc8>
 8013bd2:	3f01      	subs	r7, #1
 8013bd4:	e7ea      	b.n	8013bac <__mdiff+0xe0>
 8013bd6:	bf00      	nop
 8013bd8:	08014b74 	.word	0x08014b74
 8013bdc:	08014b85 	.word	0x08014b85

08013be0 <__d2b>:
 8013be0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8013be4:	460f      	mov	r7, r1
 8013be6:	2101      	movs	r1, #1
 8013be8:	ec59 8b10 	vmov	r8, r9, d0
 8013bec:	4616      	mov	r6, r2
 8013bee:	f7ff fcd5 	bl	801359c <_Balloc>
 8013bf2:	4604      	mov	r4, r0
 8013bf4:	b930      	cbnz	r0, 8013c04 <__d2b+0x24>
 8013bf6:	4602      	mov	r2, r0
 8013bf8:	4b24      	ldr	r3, [pc, #144]	; (8013c8c <__d2b+0xac>)
 8013bfa:	4825      	ldr	r0, [pc, #148]	; (8013c90 <__d2b+0xb0>)
 8013bfc:	f240 310f 	movw	r1, #783	; 0x30f
 8013c00:	f000 fc40 	bl	8014484 <__assert_func>
 8013c04:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8013c08:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8013c0c:	bb2d      	cbnz	r5, 8013c5a <__d2b+0x7a>
 8013c0e:	9301      	str	r3, [sp, #4]
 8013c10:	f1b8 0300 	subs.w	r3, r8, #0
 8013c14:	d026      	beq.n	8013c64 <__d2b+0x84>
 8013c16:	4668      	mov	r0, sp
 8013c18:	9300      	str	r3, [sp, #0]
 8013c1a:	f7ff fd87 	bl	801372c <__lo0bits>
 8013c1e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8013c22:	b1e8      	cbz	r0, 8013c60 <__d2b+0x80>
 8013c24:	f1c0 0320 	rsb	r3, r0, #32
 8013c28:	fa02 f303 	lsl.w	r3, r2, r3
 8013c2c:	430b      	orrs	r3, r1
 8013c2e:	40c2      	lsrs	r2, r0
 8013c30:	6163      	str	r3, [r4, #20]
 8013c32:	9201      	str	r2, [sp, #4]
 8013c34:	9b01      	ldr	r3, [sp, #4]
 8013c36:	61a3      	str	r3, [r4, #24]
 8013c38:	2b00      	cmp	r3, #0
 8013c3a:	bf14      	ite	ne
 8013c3c:	2202      	movne	r2, #2
 8013c3e:	2201      	moveq	r2, #1
 8013c40:	6122      	str	r2, [r4, #16]
 8013c42:	b1bd      	cbz	r5, 8013c74 <__d2b+0x94>
 8013c44:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8013c48:	4405      	add	r5, r0
 8013c4a:	603d      	str	r5, [r7, #0]
 8013c4c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8013c50:	6030      	str	r0, [r6, #0]
 8013c52:	4620      	mov	r0, r4
 8013c54:	b003      	add	sp, #12
 8013c56:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013c5a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8013c5e:	e7d6      	b.n	8013c0e <__d2b+0x2e>
 8013c60:	6161      	str	r1, [r4, #20]
 8013c62:	e7e7      	b.n	8013c34 <__d2b+0x54>
 8013c64:	a801      	add	r0, sp, #4
 8013c66:	f7ff fd61 	bl	801372c <__lo0bits>
 8013c6a:	9b01      	ldr	r3, [sp, #4]
 8013c6c:	6163      	str	r3, [r4, #20]
 8013c6e:	3020      	adds	r0, #32
 8013c70:	2201      	movs	r2, #1
 8013c72:	e7e5      	b.n	8013c40 <__d2b+0x60>
 8013c74:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8013c78:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8013c7c:	6038      	str	r0, [r7, #0]
 8013c7e:	6918      	ldr	r0, [r3, #16]
 8013c80:	f7ff fd34 	bl	80136ec <__hi0bits>
 8013c84:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8013c88:	e7e2      	b.n	8013c50 <__d2b+0x70>
 8013c8a:	bf00      	nop
 8013c8c:	08014b74 	.word	0x08014b74
 8013c90:	08014b85 	.word	0x08014b85

08013c94 <__ssputs_r>:
 8013c94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013c98:	688e      	ldr	r6, [r1, #8]
 8013c9a:	461f      	mov	r7, r3
 8013c9c:	42be      	cmp	r6, r7
 8013c9e:	680b      	ldr	r3, [r1, #0]
 8013ca0:	4682      	mov	sl, r0
 8013ca2:	460c      	mov	r4, r1
 8013ca4:	4690      	mov	r8, r2
 8013ca6:	d82c      	bhi.n	8013d02 <__ssputs_r+0x6e>
 8013ca8:	898a      	ldrh	r2, [r1, #12]
 8013caa:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8013cae:	d026      	beq.n	8013cfe <__ssputs_r+0x6a>
 8013cb0:	6965      	ldr	r5, [r4, #20]
 8013cb2:	6909      	ldr	r1, [r1, #16]
 8013cb4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8013cb8:	eba3 0901 	sub.w	r9, r3, r1
 8013cbc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8013cc0:	1c7b      	adds	r3, r7, #1
 8013cc2:	444b      	add	r3, r9
 8013cc4:	106d      	asrs	r5, r5, #1
 8013cc6:	429d      	cmp	r5, r3
 8013cc8:	bf38      	it	cc
 8013cca:	461d      	movcc	r5, r3
 8013ccc:	0553      	lsls	r3, r2, #21
 8013cce:	d527      	bpl.n	8013d20 <__ssputs_r+0x8c>
 8013cd0:	4629      	mov	r1, r5
 8013cd2:	f7ff fbd7 	bl	8013484 <_malloc_r>
 8013cd6:	4606      	mov	r6, r0
 8013cd8:	b360      	cbz	r0, 8013d34 <__ssputs_r+0xa0>
 8013cda:	6921      	ldr	r1, [r4, #16]
 8013cdc:	464a      	mov	r2, r9
 8013cde:	f7fe fcd3 	bl	8012688 <memcpy>
 8013ce2:	89a3      	ldrh	r3, [r4, #12]
 8013ce4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8013ce8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013cec:	81a3      	strh	r3, [r4, #12]
 8013cee:	6126      	str	r6, [r4, #16]
 8013cf0:	6165      	str	r5, [r4, #20]
 8013cf2:	444e      	add	r6, r9
 8013cf4:	eba5 0509 	sub.w	r5, r5, r9
 8013cf8:	6026      	str	r6, [r4, #0]
 8013cfa:	60a5      	str	r5, [r4, #8]
 8013cfc:	463e      	mov	r6, r7
 8013cfe:	42be      	cmp	r6, r7
 8013d00:	d900      	bls.n	8013d04 <__ssputs_r+0x70>
 8013d02:	463e      	mov	r6, r7
 8013d04:	6820      	ldr	r0, [r4, #0]
 8013d06:	4632      	mov	r2, r6
 8013d08:	4641      	mov	r1, r8
 8013d0a:	f000 fb6f 	bl	80143ec <memmove>
 8013d0e:	68a3      	ldr	r3, [r4, #8]
 8013d10:	1b9b      	subs	r3, r3, r6
 8013d12:	60a3      	str	r3, [r4, #8]
 8013d14:	6823      	ldr	r3, [r4, #0]
 8013d16:	4433      	add	r3, r6
 8013d18:	6023      	str	r3, [r4, #0]
 8013d1a:	2000      	movs	r0, #0
 8013d1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013d20:	462a      	mov	r2, r5
 8013d22:	f000 fbf5 	bl	8014510 <_realloc_r>
 8013d26:	4606      	mov	r6, r0
 8013d28:	2800      	cmp	r0, #0
 8013d2a:	d1e0      	bne.n	8013cee <__ssputs_r+0x5a>
 8013d2c:	6921      	ldr	r1, [r4, #16]
 8013d2e:	4650      	mov	r0, sl
 8013d30:	f7ff fb34 	bl	801339c <_free_r>
 8013d34:	230c      	movs	r3, #12
 8013d36:	f8ca 3000 	str.w	r3, [sl]
 8013d3a:	89a3      	ldrh	r3, [r4, #12]
 8013d3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013d40:	81a3      	strh	r3, [r4, #12]
 8013d42:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013d46:	e7e9      	b.n	8013d1c <__ssputs_r+0x88>

08013d48 <_svfiprintf_r>:
 8013d48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013d4c:	4698      	mov	r8, r3
 8013d4e:	898b      	ldrh	r3, [r1, #12]
 8013d50:	061b      	lsls	r3, r3, #24
 8013d52:	b09d      	sub	sp, #116	; 0x74
 8013d54:	4607      	mov	r7, r0
 8013d56:	460d      	mov	r5, r1
 8013d58:	4614      	mov	r4, r2
 8013d5a:	d50e      	bpl.n	8013d7a <_svfiprintf_r+0x32>
 8013d5c:	690b      	ldr	r3, [r1, #16]
 8013d5e:	b963      	cbnz	r3, 8013d7a <_svfiprintf_r+0x32>
 8013d60:	2140      	movs	r1, #64	; 0x40
 8013d62:	f7ff fb8f 	bl	8013484 <_malloc_r>
 8013d66:	6028      	str	r0, [r5, #0]
 8013d68:	6128      	str	r0, [r5, #16]
 8013d6a:	b920      	cbnz	r0, 8013d76 <_svfiprintf_r+0x2e>
 8013d6c:	230c      	movs	r3, #12
 8013d6e:	603b      	str	r3, [r7, #0]
 8013d70:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013d74:	e0d0      	b.n	8013f18 <_svfiprintf_r+0x1d0>
 8013d76:	2340      	movs	r3, #64	; 0x40
 8013d78:	616b      	str	r3, [r5, #20]
 8013d7a:	2300      	movs	r3, #0
 8013d7c:	9309      	str	r3, [sp, #36]	; 0x24
 8013d7e:	2320      	movs	r3, #32
 8013d80:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8013d84:	f8cd 800c 	str.w	r8, [sp, #12]
 8013d88:	2330      	movs	r3, #48	; 0x30
 8013d8a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8013f30 <_svfiprintf_r+0x1e8>
 8013d8e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8013d92:	f04f 0901 	mov.w	r9, #1
 8013d96:	4623      	mov	r3, r4
 8013d98:	469a      	mov	sl, r3
 8013d9a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013d9e:	b10a      	cbz	r2, 8013da4 <_svfiprintf_r+0x5c>
 8013da0:	2a25      	cmp	r2, #37	; 0x25
 8013da2:	d1f9      	bne.n	8013d98 <_svfiprintf_r+0x50>
 8013da4:	ebba 0b04 	subs.w	fp, sl, r4
 8013da8:	d00b      	beq.n	8013dc2 <_svfiprintf_r+0x7a>
 8013daa:	465b      	mov	r3, fp
 8013dac:	4622      	mov	r2, r4
 8013dae:	4629      	mov	r1, r5
 8013db0:	4638      	mov	r0, r7
 8013db2:	f7ff ff6f 	bl	8013c94 <__ssputs_r>
 8013db6:	3001      	adds	r0, #1
 8013db8:	f000 80a9 	beq.w	8013f0e <_svfiprintf_r+0x1c6>
 8013dbc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013dbe:	445a      	add	r2, fp
 8013dc0:	9209      	str	r2, [sp, #36]	; 0x24
 8013dc2:	f89a 3000 	ldrb.w	r3, [sl]
 8013dc6:	2b00      	cmp	r3, #0
 8013dc8:	f000 80a1 	beq.w	8013f0e <_svfiprintf_r+0x1c6>
 8013dcc:	2300      	movs	r3, #0
 8013dce:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8013dd2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013dd6:	f10a 0a01 	add.w	sl, sl, #1
 8013dda:	9304      	str	r3, [sp, #16]
 8013ddc:	9307      	str	r3, [sp, #28]
 8013dde:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8013de2:	931a      	str	r3, [sp, #104]	; 0x68
 8013de4:	4654      	mov	r4, sl
 8013de6:	2205      	movs	r2, #5
 8013de8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013dec:	4850      	ldr	r0, [pc, #320]	; (8013f30 <_svfiprintf_r+0x1e8>)
 8013dee:	f7ec fa17 	bl	8000220 <memchr>
 8013df2:	9a04      	ldr	r2, [sp, #16]
 8013df4:	b9d8      	cbnz	r0, 8013e2e <_svfiprintf_r+0xe6>
 8013df6:	06d0      	lsls	r0, r2, #27
 8013df8:	bf44      	itt	mi
 8013dfa:	2320      	movmi	r3, #32
 8013dfc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013e00:	0711      	lsls	r1, r2, #28
 8013e02:	bf44      	itt	mi
 8013e04:	232b      	movmi	r3, #43	; 0x2b
 8013e06:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013e0a:	f89a 3000 	ldrb.w	r3, [sl]
 8013e0e:	2b2a      	cmp	r3, #42	; 0x2a
 8013e10:	d015      	beq.n	8013e3e <_svfiprintf_r+0xf6>
 8013e12:	9a07      	ldr	r2, [sp, #28]
 8013e14:	4654      	mov	r4, sl
 8013e16:	2000      	movs	r0, #0
 8013e18:	f04f 0c0a 	mov.w	ip, #10
 8013e1c:	4621      	mov	r1, r4
 8013e1e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013e22:	3b30      	subs	r3, #48	; 0x30
 8013e24:	2b09      	cmp	r3, #9
 8013e26:	d94d      	bls.n	8013ec4 <_svfiprintf_r+0x17c>
 8013e28:	b1b0      	cbz	r0, 8013e58 <_svfiprintf_r+0x110>
 8013e2a:	9207      	str	r2, [sp, #28]
 8013e2c:	e014      	b.n	8013e58 <_svfiprintf_r+0x110>
 8013e2e:	eba0 0308 	sub.w	r3, r0, r8
 8013e32:	fa09 f303 	lsl.w	r3, r9, r3
 8013e36:	4313      	orrs	r3, r2
 8013e38:	9304      	str	r3, [sp, #16]
 8013e3a:	46a2      	mov	sl, r4
 8013e3c:	e7d2      	b.n	8013de4 <_svfiprintf_r+0x9c>
 8013e3e:	9b03      	ldr	r3, [sp, #12]
 8013e40:	1d19      	adds	r1, r3, #4
 8013e42:	681b      	ldr	r3, [r3, #0]
 8013e44:	9103      	str	r1, [sp, #12]
 8013e46:	2b00      	cmp	r3, #0
 8013e48:	bfbb      	ittet	lt
 8013e4a:	425b      	neglt	r3, r3
 8013e4c:	f042 0202 	orrlt.w	r2, r2, #2
 8013e50:	9307      	strge	r3, [sp, #28]
 8013e52:	9307      	strlt	r3, [sp, #28]
 8013e54:	bfb8      	it	lt
 8013e56:	9204      	strlt	r2, [sp, #16]
 8013e58:	7823      	ldrb	r3, [r4, #0]
 8013e5a:	2b2e      	cmp	r3, #46	; 0x2e
 8013e5c:	d10c      	bne.n	8013e78 <_svfiprintf_r+0x130>
 8013e5e:	7863      	ldrb	r3, [r4, #1]
 8013e60:	2b2a      	cmp	r3, #42	; 0x2a
 8013e62:	d134      	bne.n	8013ece <_svfiprintf_r+0x186>
 8013e64:	9b03      	ldr	r3, [sp, #12]
 8013e66:	1d1a      	adds	r2, r3, #4
 8013e68:	681b      	ldr	r3, [r3, #0]
 8013e6a:	9203      	str	r2, [sp, #12]
 8013e6c:	2b00      	cmp	r3, #0
 8013e6e:	bfb8      	it	lt
 8013e70:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8013e74:	3402      	adds	r4, #2
 8013e76:	9305      	str	r3, [sp, #20]
 8013e78:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8013f40 <_svfiprintf_r+0x1f8>
 8013e7c:	7821      	ldrb	r1, [r4, #0]
 8013e7e:	2203      	movs	r2, #3
 8013e80:	4650      	mov	r0, sl
 8013e82:	f7ec f9cd 	bl	8000220 <memchr>
 8013e86:	b138      	cbz	r0, 8013e98 <_svfiprintf_r+0x150>
 8013e88:	9b04      	ldr	r3, [sp, #16]
 8013e8a:	eba0 000a 	sub.w	r0, r0, sl
 8013e8e:	2240      	movs	r2, #64	; 0x40
 8013e90:	4082      	lsls	r2, r0
 8013e92:	4313      	orrs	r3, r2
 8013e94:	3401      	adds	r4, #1
 8013e96:	9304      	str	r3, [sp, #16]
 8013e98:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013e9c:	4825      	ldr	r0, [pc, #148]	; (8013f34 <_svfiprintf_r+0x1ec>)
 8013e9e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8013ea2:	2206      	movs	r2, #6
 8013ea4:	f7ec f9bc 	bl	8000220 <memchr>
 8013ea8:	2800      	cmp	r0, #0
 8013eaa:	d038      	beq.n	8013f1e <_svfiprintf_r+0x1d6>
 8013eac:	4b22      	ldr	r3, [pc, #136]	; (8013f38 <_svfiprintf_r+0x1f0>)
 8013eae:	bb1b      	cbnz	r3, 8013ef8 <_svfiprintf_r+0x1b0>
 8013eb0:	9b03      	ldr	r3, [sp, #12]
 8013eb2:	3307      	adds	r3, #7
 8013eb4:	f023 0307 	bic.w	r3, r3, #7
 8013eb8:	3308      	adds	r3, #8
 8013eba:	9303      	str	r3, [sp, #12]
 8013ebc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013ebe:	4433      	add	r3, r6
 8013ec0:	9309      	str	r3, [sp, #36]	; 0x24
 8013ec2:	e768      	b.n	8013d96 <_svfiprintf_r+0x4e>
 8013ec4:	fb0c 3202 	mla	r2, ip, r2, r3
 8013ec8:	460c      	mov	r4, r1
 8013eca:	2001      	movs	r0, #1
 8013ecc:	e7a6      	b.n	8013e1c <_svfiprintf_r+0xd4>
 8013ece:	2300      	movs	r3, #0
 8013ed0:	3401      	adds	r4, #1
 8013ed2:	9305      	str	r3, [sp, #20]
 8013ed4:	4619      	mov	r1, r3
 8013ed6:	f04f 0c0a 	mov.w	ip, #10
 8013eda:	4620      	mov	r0, r4
 8013edc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013ee0:	3a30      	subs	r2, #48	; 0x30
 8013ee2:	2a09      	cmp	r2, #9
 8013ee4:	d903      	bls.n	8013eee <_svfiprintf_r+0x1a6>
 8013ee6:	2b00      	cmp	r3, #0
 8013ee8:	d0c6      	beq.n	8013e78 <_svfiprintf_r+0x130>
 8013eea:	9105      	str	r1, [sp, #20]
 8013eec:	e7c4      	b.n	8013e78 <_svfiprintf_r+0x130>
 8013eee:	fb0c 2101 	mla	r1, ip, r1, r2
 8013ef2:	4604      	mov	r4, r0
 8013ef4:	2301      	movs	r3, #1
 8013ef6:	e7f0      	b.n	8013eda <_svfiprintf_r+0x192>
 8013ef8:	ab03      	add	r3, sp, #12
 8013efa:	9300      	str	r3, [sp, #0]
 8013efc:	462a      	mov	r2, r5
 8013efe:	4b0f      	ldr	r3, [pc, #60]	; (8013f3c <_svfiprintf_r+0x1f4>)
 8013f00:	a904      	add	r1, sp, #16
 8013f02:	4638      	mov	r0, r7
 8013f04:	f7fd fd32 	bl	801196c <_printf_float>
 8013f08:	1c42      	adds	r2, r0, #1
 8013f0a:	4606      	mov	r6, r0
 8013f0c:	d1d6      	bne.n	8013ebc <_svfiprintf_r+0x174>
 8013f0e:	89ab      	ldrh	r3, [r5, #12]
 8013f10:	065b      	lsls	r3, r3, #25
 8013f12:	f53f af2d 	bmi.w	8013d70 <_svfiprintf_r+0x28>
 8013f16:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013f18:	b01d      	add	sp, #116	; 0x74
 8013f1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013f1e:	ab03      	add	r3, sp, #12
 8013f20:	9300      	str	r3, [sp, #0]
 8013f22:	462a      	mov	r2, r5
 8013f24:	4b05      	ldr	r3, [pc, #20]	; (8013f3c <_svfiprintf_r+0x1f4>)
 8013f26:	a904      	add	r1, sp, #16
 8013f28:	4638      	mov	r0, r7
 8013f2a:	f7fd ffc3 	bl	8011eb4 <_printf_i>
 8013f2e:	e7eb      	b.n	8013f08 <_svfiprintf_r+0x1c0>
 8013f30:	08014cdc 	.word	0x08014cdc
 8013f34:	08014ce6 	.word	0x08014ce6
 8013f38:	0801196d 	.word	0x0801196d
 8013f3c:	08013c95 	.word	0x08013c95
 8013f40:	08014ce2 	.word	0x08014ce2

08013f44 <__sfputc_r>:
 8013f44:	6893      	ldr	r3, [r2, #8]
 8013f46:	3b01      	subs	r3, #1
 8013f48:	2b00      	cmp	r3, #0
 8013f4a:	b410      	push	{r4}
 8013f4c:	6093      	str	r3, [r2, #8]
 8013f4e:	da08      	bge.n	8013f62 <__sfputc_r+0x1e>
 8013f50:	6994      	ldr	r4, [r2, #24]
 8013f52:	42a3      	cmp	r3, r4
 8013f54:	db01      	blt.n	8013f5a <__sfputc_r+0x16>
 8013f56:	290a      	cmp	r1, #10
 8013f58:	d103      	bne.n	8013f62 <__sfputc_r+0x1e>
 8013f5a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013f5e:	f7fe ba80 	b.w	8012462 <__swbuf_r>
 8013f62:	6813      	ldr	r3, [r2, #0]
 8013f64:	1c58      	adds	r0, r3, #1
 8013f66:	6010      	str	r0, [r2, #0]
 8013f68:	7019      	strb	r1, [r3, #0]
 8013f6a:	4608      	mov	r0, r1
 8013f6c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013f70:	4770      	bx	lr

08013f72 <__sfputs_r>:
 8013f72:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013f74:	4606      	mov	r6, r0
 8013f76:	460f      	mov	r7, r1
 8013f78:	4614      	mov	r4, r2
 8013f7a:	18d5      	adds	r5, r2, r3
 8013f7c:	42ac      	cmp	r4, r5
 8013f7e:	d101      	bne.n	8013f84 <__sfputs_r+0x12>
 8013f80:	2000      	movs	r0, #0
 8013f82:	e007      	b.n	8013f94 <__sfputs_r+0x22>
 8013f84:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013f88:	463a      	mov	r2, r7
 8013f8a:	4630      	mov	r0, r6
 8013f8c:	f7ff ffda 	bl	8013f44 <__sfputc_r>
 8013f90:	1c43      	adds	r3, r0, #1
 8013f92:	d1f3      	bne.n	8013f7c <__sfputs_r+0xa>
 8013f94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08013f98 <_vfiprintf_r>:
 8013f98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013f9c:	460d      	mov	r5, r1
 8013f9e:	b09d      	sub	sp, #116	; 0x74
 8013fa0:	4614      	mov	r4, r2
 8013fa2:	4698      	mov	r8, r3
 8013fa4:	4606      	mov	r6, r0
 8013fa6:	b118      	cbz	r0, 8013fb0 <_vfiprintf_r+0x18>
 8013fa8:	6a03      	ldr	r3, [r0, #32]
 8013faa:	b90b      	cbnz	r3, 8013fb0 <_vfiprintf_r+0x18>
 8013fac:	f7fe f91e 	bl	80121ec <__sinit>
 8013fb0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013fb2:	07d9      	lsls	r1, r3, #31
 8013fb4:	d405      	bmi.n	8013fc2 <_vfiprintf_r+0x2a>
 8013fb6:	89ab      	ldrh	r3, [r5, #12]
 8013fb8:	059a      	lsls	r2, r3, #22
 8013fba:	d402      	bmi.n	8013fc2 <_vfiprintf_r+0x2a>
 8013fbc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013fbe:	f7fe fb61 	bl	8012684 <__retarget_lock_acquire_recursive>
 8013fc2:	89ab      	ldrh	r3, [r5, #12]
 8013fc4:	071b      	lsls	r3, r3, #28
 8013fc6:	d501      	bpl.n	8013fcc <_vfiprintf_r+0x34>
 8013fc8:	692b      	ldr	r3, [r5, #16]
 8013fca:	b99b      	cbnz	r3, 8013ff4 <_vfiprintf_r+0x5c>
 8013fcc:	4629      	mov	r1, r5
 8013fce:	4630      	mov	r0, r6
 8013fd0:	f7fe fa84 	bl	80124dc <__swsetup_r>
 8013fd4:	b170      	cbz	r0, 8013ff4 <_vfiprintf_r+0x5c>
 8013fd6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013fd8:	07dc      	lsls	r4, r3, #31
 8013fda:	d504      	bpl.n	8013fe6 <_vfiprintf_r+0x4e>
 8013fdc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013fe0:	b01d      	add	sp, #116	; 0x74
 8013fe2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013fe6:	89ab      	ldrh	r3, [r5, #12]
 8013fe8:	0598      	lsls	r0, r3, #22
 8013fea:	d4f7      	bmi.n	8013fdc <_vfiprintf_r+0x44>
 8013fec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013fee:	f7fe fb4a 	bl	8012686 <__retarget_lock_release_recursive>
 8013ff2:	e7f3      	b.n	8013fdc <_vfiprintf_r+0x44>
 8013ff4:	2300      	movs	r3, #0
 8013ff6:	9309      	str	r3, [sp, #36]	; 0x24
 8013ff8:	2320      	movs	r3, #32
 8013ffa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8013ffe:	f8cd 800c 	str.w	r8, [sp, #12]
 8014002:	2330      	movs	r3, #48	; 0x30
 8014004:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80141b8 <_vfiprintf_r+0x220>
 8014008:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801400c:	f04f 0901 	mov.w	r9, #1
 8014010:	4623      	mov	r3, r4
 8014012:	469a      	mov	sl, r3
 8014014:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014018:	b10a      	cbz	r2, 801401e <_vfiprintf_r+0x86>
 801401a:	2a25      	cmp	r2, #37	; 0x25
 801401c:	d1f9      	bne.n	8014012 <_vfiprintf_r+0x7a>
 801401e:	ebba 0b04 	subs.w	fp, sl, r4
 8014022:	d00b      	beq.n	801403c <_vfiprintf_r+0xa4>
 8014024:	465b      	mov	r3, fp
 8014026:	4622      	mov	r2, r4
 8014028:	4629      	mov	r1, r5
 801402a:	4630      	mov	r0, r6
 801402c:	f7ff ffa1 	bl	8013f72 <__sfputs_r>
 8014030:	3001      	adds	r0, #1
 8014032:	f000 80a9 	beq.w	8014188 <_vfiprintf_r+0x1f0>
 8014036:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014038:	445a      	add	r2, fp
 801403a:	9209      	str	r2, [sp, #36]	; 0x24
 801403c:	f89a 3000 	ldrb.w	r3, [sl]
 8014040:	2b00      	cmp	r3, #0
 8014042:	f000 80a1 	beq.w	8014188 <_vfiprintf_r+0x1f0>
 8014046:	2300      	movs	r3, #0
 8014048:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801404c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014050:	f10a 0a01 	add.w	sl, sl, #1
 8014054:	9304      	str	r3, [sp, #16]
 8014056:	9307      	str	r3, [sp, #28]
 8014058:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801405c:	931a      	str	r3, [sp, #104]	; 0x68
 801405e:	4654      	mov	r4, sl
 8014060:	2205      	movs	r2, #5
 8014062:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014066:	4854      	ldr	r0, [pc, #336]	; (80141b8 <_vfiprintf_r+0x220>)
 8014068:	f7ec f8da 	bl	8000220 <memchr>
 801406c:	9a04      	ldr	r2, [sp, #16]
 801406e:	b9d8      	cbnz	r0, 80140a8 <_vfiprintf_r+0x110>
 8014070:	06d1      	lsls	r1, r2, #27
 8014072:	bf44      	itt	mi
 8014074:	2320      	movmi	r3, #32
 8014076:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801407a:	0713      	lsls	r3, r2, #28
 801407c:	bf44      	itt	mi
 801407e:	232b      	movmi	r3, #43	; 0x2b
 8014080:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014084:	f89a 3000 	ldrb.w	r3, [sl]
 8014088:	2b2a      	cmp	r3, #42	; 0x2a
 801408a:	d015      	beq.n	80140b8 <_vfiprintf_r+0x120>
 801408c:	9a07      	ldr	r2, [sp, #28]
 801408e:	4654      	mov	r4, sl
 8014090:	2000      	movs	r0, #0
 8014092:	f04f 0c0a 	mov.w	ip, #10
 8014096:	4621      	mov	r1, r4
 8014098:	f811 3b01 	ldrb.w	r3, [r1], #1
 801409c:	3b30      	subs	r3, #48	; 0x30
 801409e:	2b09      	cmp	r3, #9
 80140a0:	d94d      	bls.n	801413e <_vfiprintf_r+0x1a6>
 80140a2:	b1b0      	cbz	r0, 80140d2 <_vfiprintf_r+0x13a>
 80140a4:	9207      	str	r2, [sp, #28]
 80140a6:	e014      	b.n	80140d2 <_vfiprintf_r+0x13a>
 80140a8:	eba0 0308 	sub.w	r3, r0, r8
 80140ac:	fa09 f303 	lsl.w	r3, r9, r3
 80140b0:	4313      	orrs	r3, r2
 80140b2:	9304      	str	r3, [sp, #16]
 80140b4:	46a2      	mov	sl, r4
 80140b6:	e7d2      	b.n	801405e <_vfiprintf_r+0xc6>
 80140b8:	9b03      	ldr	r3, [sp, #12]
 80140ba:	1d19      	adds	r1, r3, #4
 80140bc:	681b      	ldr	r3, [r3, #0]
 80140be:	9103      	str	r1, [sp, #12]
 80140c0:	2b00      	cmp	r3, #0
 80140c2:	bfbb      	ittet	lt
 80140c4:	425b      	neglt	r3, r3
 80140c6:	f042 0202 	orrlt.w	r2, r2, #2
 80140ca:	9307      	strge	r3, [sp, #28]
 80140cc:	9307      	strlt	r3, [sp, #28]
 80140ce:	bfb8      	it	lt
 80140d0:	9204      	strlt	r2, [sp, #16]
 80140d2:	7823      	ldrb	r3, [r4, #0]
 80140d4:	2b2e      	cmp	r3, #46	; 0x2e
 80140d6:	d10c      	bne.n	80140f2 <_vfiprintf_r+0x15a>
 80140d8:	7863      	ldrb	r3, [r4, #1]
 80140da:	2b2a      	cmp	r3, #42	; 0x2a
 80140dc:	d134      	bne.n	8014148 <_vfiprintf_r+0x1b0>
 80140de:	9b03      	ldr	r3, [sp, #12]
 80140e0:	1d1a      	adds	r2, r3, #4
 80140e2:	681b      	ldr	r3, [r3, #0]
 80140e4:	9203      	str	r2, [sp, #12]
 80140e6:	2b00      	cmp	r3, #0
 80140e8:	bfb8      	it	lt
 80140ea:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80140ee:	3402      	adds	r4, #2
 80140f0:	9305      	str	r3, [sp, #20]
 80140f2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80141c8 <_vfiprintf_r+0x230>
 80140f6:	7821      	ldrb	r1, [r4, #0]
 80140f8:	2203      	movs	r2, #3
 80140fa:	4650      	mov	r0, sl
 80140fc:	f7ec f890 	bl	8000220 <memchr>
 8014100:	b138      	cbz	r0, 8014112 <_vfiprintf_r+0x17a>
 8014102:	9b04      	ldr	r3, [sp, #16]
 8014104:	eba0 000a 	sub.w	r0, r0, sl
 8014108:	2240      	movs	r2, #64	; 0x40
 801410a:	4082      	lsls	r2, r0
 801410c:	4313      	orrs	r3, r2
 801410e:	3401      	adds	r4, #1
 8014110:	9304      	str	r3, [sp, #16]
 8014112:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014116:	4829      	ldr	r0, [pc, #164]	; (80141bc <_vfiprintf_r+0x224>)
 8014118:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801411c:	2206      	movs	r2, #6
 801411e:	f7ec f87f 	bl	8000220 <memchr>
 8014122:	2800      	cmp	r0, #0
 8014124:	d03f      	beq.n	80141a6 <_vfiprintf_r+0x20e>
 8014126:	4b26      	ldr	r3, [pc, #152]	; (80141c0 <_vfiprintf_r+0x228>)
 8014128:	bb1b      	cbnz	r3, 8014172 <_vfiprintf_r+0x1da>
 801412a:	9b03      	ldr	r3, [sp, #12]
 801412c:	3307      	adds	r3, #7
 801412e:	f023 0307 	bic.w	r3, r3, #7
 8014132:	3308      	adds	r3, #8
 8014134:	9303      	str	r3, [sp, #12]
 8014136:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014138:	443b      	add	r3, r7
 801413a:	9309      	str	r3, [sp, #36]	; 0x24
 801413c:	e768      	b.n	8014010 <_vfiprintf_r+0x78>
 801413e:	fb0c 3202 	mla	r2, ip, r2, r3
 8014142:	460c      	mov	r4, r1
 8014144:	2001      	movs	r0, #1
 8014146:	e7a6      	b.n	8014096 <_vfiprintf_r+0xfe>
 8014148:	2300      	movs	r3, #0
 801414a:	3401      	adds	r4, #1
 801414c:	9305      	str	r3, [sp, #20]
 801414e:	4619      	mov	r1, r3
 8014150:	f04f 0c0a 	mov.w	ip, #10
 8014154:	4620      	mov	r0, r4
 8014156:	f810 2b01 	ldrb.w	r2, [r0], #1
 801415a:	3a30      	subs	r2, #48	; 0x30
 801415c:	2a09      	cmp	r2, #9
 801415e:	d903      	bls.n	8014168 <_vfiprintf_r+0x1d0>
 8014160:	2b00      	cmp	r3, #0
 8014162:	d0c6      	beq.n	80140f2 <_vfiprintf_r+0x15a>
 8014164:	9105      	str	r1, [sp, #20]
 8014166:	e7c4      	b.n	80140f2 <_vfiprintf_r+0x15a>
 8014168:	fb0c 2101 	mla	r1, ip, r1, r2
 801416c:	4604      	mov	r4, r0
 801416e:	2301      	movs	r3, #1
 8014170:	e7f0      	b.n	8014154 <_vfiprintf_r+0x1bc>
 8014172:	ab03      	add	r3, sp, #12
 8014174:	9300      	str	r3, [sp, #0]
 8014176:	462a      	mov	r2, r5
 8014178:	4b12      	ldr	r3, [pc, #72]	; (80141c4 <_vfiprintf_r+0x22c>)
 801417a:	a904      	add	r1, sp, #16
 801417c:	4630      	mov	r0, r6
 801417e:	f7fd fbf5 	bl	801196c <_printf_float>
 8014182:	4607      	mov	r7, r0
 8014184:	1c78      	adds	r0, r7, #1
 8014186:	d1d6      	bne.n	8014136 <_vfiprintf_r+0x19e>
 8014188:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801418a:	07d9      	lsls	r1, r3, #31
 801418c:	d405      	bmi.n	801419a <_vfiprintf_r+0x202>
 801418e:	89ab      	ldrh	r3, [r5, #12]
 8014190:	059a      	lsls	r2, r3, #22
 8014192:	d402      	bmi.n	801419a <_vfiprintf_r+0x202>
 8014194:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014196:	f7fe fa76 	bl	8012686 <__retarget_lock_release_recursive>
 801419a:	89ab      	ldrh	r3, [r5, #12]
 801419c:	065b      	lsls	r3, r3, #25
 801419e:	f53f af1d 	bmi.w	8013fdc <_vfiprintf_r+0x44>
 80141a2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80141a4:	e71c      	b.n	8013fe0 <_vfiprintf_r+0x48>
 80141a6:	ab03      	add	r3, sp, #12
 80141a8:	9300      	str	r3, [sp, #0]
 80141aa:	462a      	mov	r2, r5
 80141ac:	4b05      	ldr	r3, [pc, #20]	; (80141c4 <_vfiprintf_r+0x22c>)
 80141ae:	a904      	add	r1, sp, #16
 80141b0:	4630      	mov	r0, r6
 80141b2:	f7fd fe7f 	bl	8011eb4 <_printf_i>
 80141b6:	e7e4      	b.n	8014182 <_vfiprintf_r+0x1ea>
 80141b8:	08014cdc 	.word	0x08014cdc
 80141bc:	08014ce6 	.word	0x08014ce6
 80141c0:	0801196d 	.word	0x0801196d
 80141c4:	08013f73 	.word	0x08013f73
 80141c8:	08014ce2 	.word	0x08014ce2

080141cc <__sflush_r>:
 80141cc:	898a      	ldrh	r2, [r1, #12]
 80141ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80141d2:	4605      	mov	r5, r0
 80141d4:	0710      	lsls	r0, r2, #28
 80141d6:	460c      	mov	r4, r1
 80141d8:	d458      	bmi.n	801428c <__sflush_r+0xc0>
 80141da:	684b      	ldr	r3, [r1, #4]
 80141dc:	2b00      	cmp	r3, #0
 80141de:	dc05      	bgt.n	80141ec <__sflush_r+0x20>
 80141e0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80141e2:	2b00      	cmp	r3, #0
 80141e4:	dc02      	bgt.n	80141ec <__sflush_r+0x20>
 80141e6:	2000      	movs	r0, #0
 80141e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80141ec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80141ee:	2e00      	cmp	r6, #0
 80141f0:	d0f9      	beq.n	80141e6 <__sflush_r+0x1a>
 80141f2:	2300      	movs	r3, #0
 80141f4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80141f8:	682f      	ldr	r7, [r5, #0]
 80141fa:	6a21      	ldr	r1, [r4, #32]
 80141fc:	602b      	str	r3, [r5, #0]
 80141fe:	d032      	beq.n	8014266 <__sflush_r+0x9a>
 8014200:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8014202:	89a3      	ldrh	r3, [r4, #12]
 8014204:	075a      	lsls	r2, r3, #29
 8014206:	d505      	bpl.n	8014214 <__sflush_r+0x48>
 8014208:	6863      	ldr	r3, [r4, #4]
 801420a:	1ac0      	subs	r0, r0, r3
 801420c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801420e:	b10b      	cbz	r3, 8014214 <__sflush_r+0x48>
 8014210:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8014212:	1ac0      	subs	r0, r0, r3
 8014214:	2300      	movs	r3, #0
 8014216:	4602      	mov	r2, r0
 8014218:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801421a:	6a21      	ldr	r1, [r4, #32]
 801421c:	4628      	mov	r0, r5
 801421e:	47b0      	blx	r6
 8014220:	1c43      	adds	r3, r0, #1
 8014222:	89a3      	ldrh	r3, [r4, #12]
 8014224:	d106      	bne.n	8014234 <__sflush_r+0x68>
 8014226:	6829      	ldr	r1, [r5, #0]
 8014228:	291d      	cmp	r1, #29
 801422a:	d82b      	bhi.n	8014284 <__sflush_r+0xb8>
 801422c:	4a29      	ldr	r2, [pc, #164]	; (80142d4 <__sflush_r+0x108>)
 801422e:	410a      	asrs	r2, r1
 8014230:	07d6      	lsls	r6, r2, #31
 8014232:	d427      	bmi.n	8014284 <__sflush_r+0xb8>
 8014234:	2200      	movs	r2, #0
 8014236:	6062      	str	r2, [r4, #4]
 8014238:	04d9      	lsls	r1, r3, #19
 801423a:	6922      	ldr	r2, [r4, #16]
 801423c:	6022      	str	r2, [r4, #0]
 801423e:	d504      	bpl.n	801424a <__sflush_r+0x7e>
 8014240:	1c42      	adds	r2, r0, #1
 8014242:	d101      	bne.n	8014248 <__sflush_r+0x7c>
 8014244:	682b      	ldr	r3, [r5, #0]
 8014246:	b903      	cbnz	r3, 801424a <__sflush_r+0x7e>
 8014248:	6560      	str	r0, [r4, #84]	; 0x54
 801424a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801424c:	602f      	str	r7, [r5, #0]
 801424e:	2900      	cmp	r1, #0
 8014250:	d0c9      	beq.n	80141e6 <__sflush_r+0x1a>
 8014252:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014256:	4299      	cmp	r1, r3
 8014258:	d002      	beq.n	8014260 <__sflush_r+0x94>
 801425a:	4628      	mov	r0, r5
 801425c:	f7ff f89e 	bl	801339c <_free_r>
 8014260:	2000      	movs	r0, #0
 8014262:	6360      	str	r0, [r4, #52]	; 0x34
 8014264:	e7c0      	b.n	80141e8 <__sflush_r+0x1c>
 8014266:	2301      	movs	r3, #1
 8014268:	4628      	mov	r0, r5
 801426a:	47b0      	blx	r6
 801426c:	1c41      	adds	r1, r0, #1
 801426e:	d1c8      	bne.n	8014202 <__sflush_r+0x36>
 8014270:	682b      	ldr	r3, [r5, #0]
 8014272:	2b00      	cmp	r3, #0
 8014274:	d0c5      	beq.n	8014202 <__sflush_r+0x36>
 8014276:	2b1d      	cmp	r3, #29
 8014278:	d001      	beq.n	801427e <__sflush_r+0xb2>
 801427a:	2b16      	cmp	r3, #22
 801427c:	d101      	bne.n	8014282 <__sflush_r+0xb6>
 801427e:	602f      	str	r7, [r5, #0]
 8014280:	e7b1      	b.n	80141e6 <__sflush_r+0x1a>
 8014282:	89a3      	ldrh	r3, [r4, #12]
 8014284:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014288:	81a3      	strh	r3, [r4, #12]
 801428a:	e7ad      	b.n	80141e8 <__sflush_r+0x1c>
 801428c:	690f      	ldr	r7, [r1, #16]
 801428e:	2f00      	cmp	r7, #0
 8014290:	d0a9      	beq.n	80141e6 <__sflush_r+0x1a>
 8014292:	0793      	lsls	r3, r2, #30
 8014294:	680e      	ldr	r6, [r1, #0]
 8014296:	bf08      	it	eq
 8014298:	694b      	ldreq	r3, [r1, #20]
 801429a:	600f      	str	r7, [r1, #0]
 801429c:	bf18      	it	ne
 801429e:	2300      	movne	r3, #0
 80142a0:	eba6 0807 	sub.w	r8, r6, r7
 80142a4:	608b      	str	r3, [r1, #8]
 80142a6:	f1b8 0f00 	cmp.w	r8, #0
 80142aa:	dd9c      	ble.n	80141e6 <__sflush_r+0x1a>
 80142ac:	6a21      	ldr	r1, [r4, #32]
 80142ae:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80142b0:	4643      	mov	r3, r8
 80142b2:	463a      	mov	r2, r7
 80142b4:	4628      	mov	r0, r5
 80142b6:	47b0      	blx	r6
 80142b8:	2800      	cmp	r0, #0
 80142ba:	dc06      	bgt.n	80142ca <__sflush_r+0xfe>
 80142bc:	89a3      	ldrh	r3, [r4, #12]
 80142be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80142c2:	81a3      	strh	r3, [r4, #12]
 80142c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80142c8:	e78e      	b.n	80141e8 <__sflush_r+0x1c>
 80142ca:	4407      	add	r7, r0
 80142cc:	eba8 0800 	sub.w	r8, r8, r0
 80142d0:	e7e9      	b.n	80142a6 <__sflush_r+0xda>
 80142d2:	bf00      	nop
 80142d4:	dfbffffe 	.word	0xdfbffffe

080142d8 <_fflush_r>:
 80142d8:	b538      	push	{r3, r4, r5, lr}
 80142da:	690b      	ldr	r3, [r1, #16]
 80142dc:	4605      	mov	r5, r0
 80142de:	460c      	mov	r4, r1
 80142e0:	b913      	cbnz	r3, 80142e8 <_fflush_r+0x10>
 80142e2:	2500      	movs	r5, #0
 80142e4:	4628      	mov	r0, r5
 80142e6:	bd38      	pop	{r3, r4, r5, pc}
 80142e8:	b118      	cbz	r0, 80142f2 <_fflush_r+0x1a>
 80142ea:	6a03      	ldr	r3, [r0, #32]
 80142ec:	b90b      	cbnz	r3, 80142f2 <_fflush_r+0x1a>
 80142ee:	f7fd ff7d 	bl	80121ec <__sinit>
 80142f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80142f6:	2b00      	cmp	r3, #0
 80142f8:	d0f3      	beq.n	80142e2 <_fflush_r+0xa>
 80142fa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80142fc:	07d0      	lsls	r0, r2, #31
 80142fe:	d404      	bmi.n	801430a <_fflush_r+0x32>
 8014300:	0599      	lsls	r1, r3, #22
 8014302:	d402      	bmi.n	801430a <_fflush_r+0x32>
 8014304:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014306:	f7fe f9bd 	bl	8012684 <__retarget_lock_acquire_recursive>
 801430a:	4628      	mov	r0, r5
 801430c:	4621      	mov	r1, r4
 801430e:	f7ff ff5d 	bl	80141cc <__sflush_r>
 8014312:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8014314:	07da      	lsls	r2, r3, #31
 8014316:	4605      	mov	r5, r0
 8014318:	d4e4      	bmi.n	80142e4 <_fflush_r+0xc>
 801431a:	89a3      	ldrh	r3, [r4, #12]
 801431c:	059b      	lsls	r3, r3, #22
 801431e:	d4e1      	bmi.n	80142e4 <_fflush_r+0xc>
 8014320:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014322:	f7fe f9b0 	bl	8012686 <__retarget_lock_release_recursive>
 8014326:	e7dd      	b.n	80142e4 <_fflush_r+0xc>

08014328 <__swhatbuf_r>:
 8014328:	b570      	push	{r4, r5, r6, lr}
 801432a:	460c      	mov	r4, r1
 801432c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014330:	2900      	cmp	r1, #0
 8014332:	b096      	sub	sp, #88	; 0x58
 8014334:	4615      	mov	r5, r2
 8014336:	461e      	mov	r6, r3
 8014338:	da0d      	bge.n	8014356 <__swhatbuf_r+0x2e>
 801433a:	89a3      	ldrh	r3, [r4, #12]
 801433c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8014340:	f04f 0100 	mov.w	r1, #0
 8014344:	bf0c      	ite	eq
 8014346:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 801434a:	2340      	movne	r3, #64	; 0x40
 801434c:	2000      	movs	r0, #0
 801434e:	6031      	str	r1, [r6, #0]
 8014350:	602b      	str	r3, [r5, #0]
 8014352:	b016      	add	sp, #88	; 0x58
 8014354:	bd70      	pop	{r4, r5, r6, pc}
 8014356:	466a      	mov	r2, sp
 8014358:	f000 f862 	bl	8014420 <_fstat_r>
 801435c:	2800      	cmp	r0, #0
 801435e:	dbec      	blt.n	801433a <__swhatbuf_r+0x12>
 8014360:	9901      	ldr	r1, [sp, #4]
 8014362:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8014366:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 801436a:	4259      	negs	r1, r3
 801436c:	4159      	adcs	r1, r3
 801436e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8014372:	e7eb      	b.n	801434c <__swhatbuf_r+0x24>

08014374 <__smakebuf_r>:
 8014374:	898b      	ldrh	r3, [r1, #12]
 8014376:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8014378:	079d      	lsls	r5, r3, #30
 801437a:	4606      	mov	r6, r0
 801437c:	460c      	mov	r4, r1
 801437e:	d507      	bpl.n	8014390 <__smakebuf_r+0x1c>
 8014380:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8014384:	6023      	str	r3, [r4, #0]
 8014386:	6123      	str	r3, [r4, #16]
 8014388:	2301      	movs	r3, #1
 801438a:	6163      	str	r3, [r4, #20]
 801438c:	b002      	add	sp, #8
 801438e:	bd70      	pop	{r4, r5, r6, pc}
 8014390:	ab01      	add	r3, sp, #4
 8014392:	466a      	mov	r2, sp
 8014394:	f7ff ffc8 	bl	8014328 <__swhatbuf_r>
 8014398:	9900      	ldr	r1, [sp, #0]
 801439a:	4605      	mov	r5, r0
 801439c:	4630      	mov	r0, r6
 801439e:	f7ff f871 	bl	8013484 <_malloc_r>
 80143a2:	b948      	cbnz	r0, 80143b8 <__smakebuf_r+0x44>
 80143a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80143a8:	059a      	lsls	r2, r3, #22
 80143aa:	d4ef      	bmi.n	801438c <__smakebuf_r+0x18>
 80143ac:	f023 0303 	bic.w	r3, r3, #3
 80143b0:	f043 0302 	orr.w	r3, r3, #2
 80143b4:	81a3      	strh	r3, [r4, #12]
 80143b6:	e7e3      	b.n	8014380 <__smakebuf_r+0xc>
 80143b8:	89a3      	ldrh	r3, [r4, #12]
 80143ba:	6020      	str	r0, [r4, #0]
 80143bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80143c0:	81a3      	strh	r3, [r4, #12]
 80143c2:	9b00      	ldr	r3, [sp, #0]
 80143c4:	6163      	str	r3, [r4, #20]
 80143c6:	9b01      	ldr	r3, [sp, #4]
 80143c8:	6120      	str	r0, [r4, #16]
 80143ca:	b15b      	cbz	r3, 80143e4 <__smakebuf_r+0x70>
 80143cc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80143d0:	4630      	mov	r0, r6
 80143d2:	f000 f837 	bl	8014444 <_isatty_r>
 80143d6:	b128      	cbz	r0, 80143e4 <__smakebuf_r+0x70>
 80143d8:	89a3      	ldrh	r3, [r4, #12]
 80143da:	f023 0303 	bic.w	r3, r3, #3
 80143de:	f043 0301 	orr.w	r3, r3, #1
 80143e2:	81a3      	strh	r3, [r4, #12]
 80143e4:	89a3      	ldrh	r3, [r4, #12]
 80143e6:	431d      	orrs	r5, r3
 80143e8:	81a5      	strh	r5, [r4, #12]
 80143ea:	e7cf      	b.n	801438c <__smakebuf_r+0x18>

080143ec <memmove>:
 80143ec:	4288      	cmp	r0, r1
 80143ee:	b510      	push	{r4, lr}
 80143f0:	eb01 0402 	add.w	r4, r1, r2
 80143f4:	d902      	bls.n	80143fc <memmove+0x10>
 80143f6:	4284      	cmp	r4, r0
 80143f8:	4623      	mov	r3, r4
 80143fa:	d807      	bhi.n	801440c <memmove+0x20>
 80143fc:	1e43      	subs	r3, r0, #1
 80143fe:	42a1      	cmp	r1, r4
 8014400:	d008      	beq.n	8014414 <memmove+0x28>
 8014402:	f811 2b01 	ldrb.w	r2, [r1], #1
 8014406:	f803 2f01 	strb.w	r2, [r3, #1]!
 801440a:	e7f8      	b.n	80143fe <memmove+0x12>
 801440c:	4402      	add	r2, r0
 801440e:	4601      	mov	r1, r0
 8014410:	428a      	cmp	r2, r1
 8014412:	d100      	bne.n	8014416 <memmove+0x2a>
 8014414:	bd10      	pop	{r4, pc}
 8014416:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801441a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801441e:	e7f7      	b.n	8014410 <memmove+0x24>

08014420 <_fstat_r>:
 8014420:	b538      	push	{r3, r4, r5, lr}
 8014422:	4d07      	ldr	r5, [pc, #28]	; (8014440 <_fstat_r+0x20>)
 8014424:	2300      	movs	r3, #0
 8014426:	4604      	mov	r4, r0
 8014428:	4608      	mov	r0, r1
 801442a:	4611      	mov	r1, r2
 801442c:	602b      	str	r3, [r5, #0]
 801442e:	f7ed fd04 	bl	8001e3a <_fstat>
 8014432:	1c43      	adds	r3, r0, #1
 8014434:	d102      	bne.n	801443c <_fstat_r+0x1c>
 8014436:	682b      	ldr	r3, [r5, #0]
 8014438:	b103      	cbz	r3, 801443c <_fstat_r+0x1c>
 801443a:	6023      	str	r3, [r4, #0]
 801443c:	bd38      	pop	{r3, r4, r5, pc}
 801443e:	bf00      	nop
 8014440:	200035bc 	.word	0x200035bc

08014444 <_isatty_r>:
 8014444:	b538      	push	{r3, r4, r5, lr}
 8014446:	4d06      	ldr	r5, [pc, #24]	; (8014460 <_isatty_r+0x1c>)
 8014448:	2300      	movs	r3, #0
 801444a:	4604      	mov	r4, r0
 801444c:	4608      	mov	r0, r1
 801444e:	602b      	str	r3, [r5, #0]
 8014450:	f7ed fd03 	bl	8001e5a <_isatty>
 8014454:	1c43      	adds	r3, r0, #1
 8014456:	d102      	bne.n	801445e <_isatty_r+0x1a>
 8014458:	682b      	ldr	r3, [r5, #0]
 801445a:	b103      	cbz	r3, 801445e <_isatty_r+0x1a>
 801445c:	6023      	str	r3, [r4, #0]
 801445e:	bd38      	pop	{r3, r4, r5, pc}
 8014460:	200035bc 	.word	0x200035bc

08014464 <_sbrk_r>:
 8014464:	b538      	push	{r3, r4, r5, lr}
 8014466:	4d06      	ldr	r5, [pc, #24]	; (8014480 <_sbrk_r+0x1c>)
 8014468:	2300      	movs	r3, #0
 801446a:	4604      	mov	r4, r0
 801446c:	4608      	mov	r0, r1
 801446e:	602b      	str	r3, [r5, #0]
 8014470:	f7ed fd0c 	bl	8001e8c <_sbrk>
 8014474:	1c43      	adds	r3, r0, #1
 8014476:	d102      	bne.n	801447e <_sbrk_r+0x1a>
 8014478:	682b      	ldr	r3, [r5, #0]
 801447a:	b103      	cbz	r3, 801447e <_sbrk_r+0x1a>
 801447c:	6023      	str	r3, [r4, #0]
 801447e:	bd38      	pop	{r3, r4, r5, pc}
 8014480:	200035bc 	.word	0x200035bc

08014484 <__assert_func>:
 8014484:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8014486:	4614      	mov	r4, r2
 8014488:	461a      	mov	r2, r3
 801448a:	4b09      	ldr	r3, [pc, #36]	; (80144b0 <__assert_func+0x2c>)
 801448c:	681b      	ldr	r3, [r3, #0]
 801448e:	4605      	mov	r5, r0
 8014490:	68d8      	ldr	r0, [r3, #12]
 8014492:	b14c      	cbz	r4, 80144a8 <__assert_func+0x24>
 8014494:	4b07      	ldr	r3, [pc, #28]	; (80144b4 <__assert_func+0x30>)
 8014496:	9100      	str	r1, [sp, #0]
 8014498:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801449c:	4906      	ldr	r1, [pc, #24]	; (80144b8 <__assert_func+0x34>)
 801449e:	462b      	mov	r3, r5
 80144a0:	f000 f872 	bl	8014588 <fiprintf>
 80144a4:	f000 f882 	bl	80145ac <abort>
 80144a8:	4b04      	ldr	r3, [pc, #16]	; (80144bc <__assert_func+0x38>)
 80144aa:	461c      	mov	r4, r3
 80144ac:	e7f3      	b.n	8014496 <__assert_func+0x12>
 80144ae:	bf00      	nop
 80144b0:	200001e0 	.word	0x200001e0
 80144b4:	08014cf7 	.word	0x08014cf7
 80144b8:	08014d04 	.word	0x08014d04
 80144bc:	08014d32 	.word	0x08014d32

080144c0 <_calloc_r>:
 80144c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80144c2:	fba1 2402 	umull	r2, r4, r1, r2
 80144c6:	b94c      	cbnz	r4, 80144dc <_calloc_r+0x1c>
 80144c8:	4611      	mov	r1, r2
 80144ca:	9201      	str	r2, [sp, #4]
 80144cc:	f7fe ffda 	bl	8013484 <_malloc_r>
 80144d0:	9a01      	ldr	r2, [sp, #4]
 80144d2:	4605      	mov	r5, r0
 80144d4:	b930      	cbnz	r0, 80144e4 <_calloc_r+0x24>
 80144d6:	4628      	mov	r0, r5
 80144d8:	b003      	add	sp, #12
 80144da:	bd30      	pop	{r4, r5, pc}
 80144dc:	220c      	movs	r2, #12
 80144de:	6002      	str	r2, [r0, #0]
 80144e0:	2500      	movs	r5, #0
 80144e2:	e7f8      	b.n	80144d6 <_calloc_r+0x16>
 80144e4:	4621      	mov	r1, r4
 80144e6:	f7fe f851 	bl	801258c <memset>
 80144ea:	e7f4      	b.n	80144d6 <_calloc_r+0x16>

080144ec <__ascii_mbtowc>:
 80144ec:	b082      	sub	sp, #8
 80144ee:	b901      	cbnz	r1, 80144f2 <__ascii_mbtowc+0x6>
 80144f0:	a901      	add	r1, sp, #4
 80144f2:	b142      	cbz	r2, 8014506 <__ascii_mbtowc+0x1a>
 80144f4:	b14b      	cbz	r3, 801450a <__ascii_mbtowc+0x1e>
 80144f6:	7813      	ldrb	r3, [r2, #0]
 80144f8:	600b      	str	r3, [r1, #0]
 80144fa:	7812      	ldrb	r2, [r2, #0]
 80144fc:	1e10      	subs	r0, r2, #0
 80144fe:	bf18      	it	ne
 8014500:	2001      	movne	r0, #1
 8014502:	b002      	add	sp, #8
 8014504:	4770      	bx	lr
 8014506:	4610      	mov	r0, r2
 8014508:	e7fb      	b.n	8014502 <__ascii_mbtowc+0x16>
 801450a:	f06f 0001 	mvn.w	r0, #1
 801450e:	e7f8      	b.n	8014502 <__ascii_mbtowc+0x16>

08014510 <_realloc_r>:
 8014510:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014514:	4680      	mov	r8, r0
 8014516:	4614      	mov	r4, r2
 8014518:	460e      	mov	r6, r1
 801451a:	b921      	cbnz	r1, 8014526 <_realloc_r+0x16>
 801451c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014520:	4611      	mov	r1, r2
 8014522:	f7fe bfaf 	b.w	8013484 <_malloc_r>
 8014526:	b92a      	cbnz	r2, 8014534 <_realloc_r+0x24>
 8014528:	f7fe ff38 	bl	801339c <_free_r>
 801452c:	4625      	mov	r5, r4
 801452e:	4628      	mov	r0, r5
 8014530:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014534:	f000 f841 	bl	80145ba <_malloc_usable_size_r>
 8014538:	4284      	cmp	r4, r0
 801453a:	4607      	mov	r7, r0
 801453c:	d802      	bhi.n	8014544 <_realloc_r+0x34>
 801453e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8014542:	d812      	bhi.n	801456a <_realloc_r+0x5a>
 8014544:	4621      	mov	r1, r4
 8014546:	4640      	mov	r0, r8
 8014548:	f7fe ff9c 	bl	8013484 <_malloc_r>
 801454c:	4605      	mov	r5, r0
 801454e:	2800      	cmp	r0, #0
 8014550:	d0ed      	beq.n	801452e <_realloc_r+0x1e>
 8014552:	42bc      	cmp	r4, r7
 8014554:	4622      	mov	r2, r4
 8014556:	4631      	mov	r1, r6
 8014558:	bf28      	it	cs
 801455a:	463a      	movcs	r2, r7
 801455c:	f7fe f894 	bl	8012688 <memcpy>
 8014560:	4631      	mov	r1, r6
 8014562:	4640      	mov	r0, r8
 8014564:	f7fe ff1a 	bl	801339c <_free_r>
 8014568:	e7e1      	b.n	801452e <_realloc_r+0x1e>
 801456a:	4635      	mov	r5, r6
 801456c:	e7df      	b.n	801452e <_realloc_r+0x1e>

0801456e <__ascii_wctomb>:
 801456e:	b149      	cbz	r1, 8014584 <__ascii_wctomb+0x16>
 8014570:	2aff      	cmp	r2, #255	; 0xff
 8014572:	bf85      	ittet	hi
 8014574:	238a      	movhi	r3, #138	; 0x8a
 8014576:	6003      	strhi	r3, [r0, #0]
 8014578:	700a      	strbls	r2, [r1, #0]
 801457a:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 801457e:	bf98      	it	ls
 8014580:	2001      	movls	r0, #1
 8014582:	4770      	bx	lr
 8014584:	4608      	mov	r0, r1
 8014586:	4770      	bx	lr

08014588 <fiprintf>:
 8014588:	b40e      	push	{r1, r2, r3}
 801458a:	b503      	push	{r0, r1, lr}
 801458c:	4601      	mov	r1, r0
 801458e:	ab03      	add	r3, sp, #12
 8014590:	4805      	ldr	r0, [pc, #20]	; (80145a8 <fiprintf+0x20>)
 8014592:	f853 2b04 	ldr.w	r2, [r3], #4
 8014596:	6800      	ldr	r0, [r0, #0]
 8014598:	9301      	str	r3, [sp, #4]
 801459a:	f7ff fcfd 	bl	8013f98 <_vfiprintf_r>
 801459e:	b002      	add	sp, #8
 80145a0:	f85d eb04 	ldr.w	lr, [sp], #4
 80145a4:	b003      	add	sp, #12
 80145a6:	4770      	bx	lr
 80145a8:	200001e0 	.word	0x200001e0

080145ac <abort>:
 80145ac:	b508      	push	{r3, lr}
 80145ae:	2006      	movs	r0, #6
 80145b0:	f000 f834 	bl	801461c <raise>
 80145b4:	2001      	movs	r0, #1
 80145b6:	f7ed fbf1 	bl	8001d9c <_exit>

080145ba <_malloc_usable_size_r>:
 80145ba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80145be:	1f18      	subs	r0, r3, #4
 80145c0:	2b00      	cmp	r3, #0
 80145c2:	bfbc      	itt	lt
 80145c4:	580b      	ldrlt	r3, [r1, r0]
 80145c6:	18c0      	addlt	r0, r0, r3
 80145c8:	4770      	bx	lr

080145ca <_raise_r>:
 80145ca:	291f      	cmp	r1, #31
 80145cc:	b538      	push	{r3, r4, r5, lr}
 80145ce:	4604      	mov	r4, r0
 80145d0:	460d      	mov	r5, r1
 80145d2:	d904      	bls.n	80145de <_raise_r+0x14>
 80145d4:	2316      	movs	r3, #22
 80145d6:	6003      	str	r3, [r0, #0]
 80145d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80145dc:	bd38      	pop	{r3, r4, r5, pc}
 80145de:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80145e0:	b112      	cbz	r2, 80145e8 <_raise_r+0x1e>
 80145e2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80145e6:	b94b      	cbnz	r3, 80145fc <_raise_r+0x32>
 80145e8:	4620      	mov	r0, r4
 80145ea:	f000 f831 	bl	8014650 <_getpid_r>
 80145ee:	462a      	mov	r2, r5
 80145f0:	4601      	mov	r1, r0
 80145f2:	4620      	mov	r0, r4
 80145f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80145f8:	f000 b818 	b.w	801462c <_kill_r>
 80145fc:	2b01      	cmp	r3, #1
 80145fe:	d00a      	beq.n	8014616 <_raise_r+0x4c>
 8014600:	1c59      	adds	r1, r3, #1
 8014602:	d103      	bne.n	801460c <_raise_r+0x42>
 8014604:	2316      	movs	r3, #22
 8014606:	6003      	str	r3, [r0, #0]
 8014608:	2001      	movs	r0, #1
 801460a:	e7e7      	b.n	80145dc <_raise_r+0x12>
 801460c:	2400      	movs	r4, #0
 801460e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8014612:	4628      	mov	r0, r5
 8014614:	4798      	blx	r3
 8014616:	2000      	movs	r0, #0
 8014618:	e7e0      	b.n	80145dc <_raise_r+0x12>
	...

0801461c <raise>:
 801461c:	4b02      	ldr	r3, [pc, #8]	; (8014628 <raise+0xc>)
 801461e:	4601      	mov	r1, r0
 8014620:	6818      	ldr	r0, [r3, #0]
 8014622:	f7ff bfd2 	b.w	80145ca <_raise_r>
 8014626:	bf00      	nop
 8014628:	200001e0 	.word	0x200001e0

0801462c <_kill_r>:
 801462c:	b538      	push	{r3, r4, r5, lr}
 801462e:	4d07      	ldr	r5, [pc, #28]	; (801464c <_kill_r+0x20>)
 8014630:	2300      	movs	r3, #0
 8014632:	4604      	mov	r4, r0
 8014634:	4608      	mov	r0, r1
 8014636:	4611      	mov	r1, r2
 8014638:	602b      	str	r3, [r5, #0]
 801463a:	f7ed fb9f 	bl	8001d7c <_kill>
 801463e:	1c43      	adds	r3, r0, #1
 8014640:	d102      	bne.n	8014648 <_kill_r+0x1c>
 8014642:	682b      	ldr	r3, [r5, #0]
 8014644:	b103      	cbz	r3, 8014648 <_kill_r+0x1c>
 8014646:	6023      	str	r3, [r4, #0]
 8014648:	bd38      	pop	{r3, r4, r5, pc}
 801464a:	bf00      	nop
 801464c:	200035bc 	.word	0x200035bc

08014650 <_getpid_r>:
 8014650:	f7ed bb8c 	b.w	8001d6c <_getpid>

08014654 <_init>:
 8014654:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014656:	bf00      	nop
 8014658:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801465a:	bc08      	pop	{r3}
 801465c:	469e      	mov	lr, r3
 801465e:	4770      	bx	lr

08014660 <_fini>:
 8014660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014662:	bf00      	nop
 8014664:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014666:	bc08      	pop	{r3}
 8014668:	469e      	mov	lr, r3
 801466a:	4770      	bx	lr
