
STM32G474RET6_SecurityCode.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001421c  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000774  08014400  08014400  00024400  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08014b74  08014b74  00030350  2**0
                  CONTENTS
  4 .ARM          00000008  08014b74  08014b74  00024b74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08014b7c  08014b7c  00030350  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08014b7c  08014b7c  00024b7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08014b80  08014b80  00024b80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000350  20000000  08014b84  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006460  20000350  08014ed4  00030350  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200067b0  08014ed4  000367b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030350  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00030380  2**0
                  CONTENTS, READONLY
 13 .debug_info   00030e31  00000000  00000000  000303c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000073b0  00000000  00000000  000611f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002768  00000000  00000000  000685a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001e32  00000000  00000000  0006ad10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00031a11  00000000  00000000  0006cb42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000328f0  00000000  00000000  0009e553  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00128acf  00000000  00000000  000d0e43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000b4e8  00000000  00000000  001f9914  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000077  00000000  00000000  00204dfc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000350 	.word	0x20000350
 80001fc:	00000000 	.word	0x00000000
 8000200:	080143e4 	.word	0x080143e4

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000354 	.word	0x20000354
 800021c:	080143e4 	.word	0x080143e4

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000cac:	f000 b970 	b.w	8000f90 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f806 	bl	8000cc8 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9e08      	ldr	r6, [sp, #32]
 8000cce:	460d      	mov	r5, r1
 8000cd0:	4604      	mov	r4, r0
 8000cd2:	460f      	mov	r7, r1
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d14a      	bne.n	8000d6e <__udivmoddi4+0xa6>
 8000cd8:	428a      	cmp	r2, r1
 8000cda:	4694      	mov	ip, r2
 8000cdc:	d965      	bls.n	8000daa <__udivmoddi4+0xe2>
 8000cde:	fab2 f382 	clz	r3, r2
 8000ce2:	b143      	cbz	r3, 8000cf6 <__udivmoddi4+0x2e>
 8000ce4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ce8:	f1c3 0220 	rsb	r2, r3, #32
 8000cec:	409f      	lsls	r7, r3
 8000cee:	fa20 f202 	lsr.w	r2, r0, r2
 8000cf2:	4317      	orrs	r7, r2
 8000cf4:	409c      	lsls	r4, r3
 8000cf6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000cfa:	fa1f f58c 	uxth.w	r5, ip
 8000cfe:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d02:	0c22      	lsrs	r2, r4, #16
 8000d04:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d08:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d0c:	fb01 f005 	mul.w	r0, r1, r5
 8000d10:	4290      	cmp	r0, r2
 8000d12:	d90a      	bls.n	8000d2a <__udivmoddi4+0x62>
 8000d14:	eb1c 0202 	adds.w	r2, ip, r2
 8000d18:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000d1c:	f080 811c 	bcs.w	8000f58 <__udivmoddi4+0x290>
 8000d20:	4290      	cmp	r0, r2
 8000d22:	f240 8119 	bls.w	8000f58 <__udivmoddi4+0x290>
 8000d26:	3902      	subs	r1, #2
 8000d28:	4462      	add	r2, ip
 8000d2a:	1a12      	subs	r2, r2, r0
 8000d2c:	b2a4      	uxth	r4, r4
 8000d2e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d32:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d36:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d3a:	fb00 f505 	mul.w	r5, r0, r5
 8000d3e:	42a5      	cmp	r5, r4
 8000d40:	d90a      	bls.n	8000d58 <__udivmoddi4+0x90>
 8000d42:	eb1c 0404 	adds.w	r4, ip, r4
 8000d46:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000d4a:	f080 8107 	bcs.w	8000f5c <__udivmoddi4+0x294>
 8000d4e:	42a5      	cmp	r5, r4
 8000d50:	f240 8104 	bls.w	8000f5c <__udivmoddi4+0x294>
 8000d54:	4464      	add	r4, ip
 8000d56:	3802      	subs	r0, #2
 8000d58:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d5c:	1b64      	subs	r4, r4, r5
 8000d5e:	2100      	movs	r1, #0
 8000d60:	b11e      	cbz	r6, 8000d6a <__udivmoddi4+0xa2>
 8000d62:	40dc      	lsrs	r4, r3
 8000d64:	2300      	movs	r3, #0
 8000d66:	e9c6 4300 	strd	r4, r3, [r6]
 8000d6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d6e:	428b      	cmp	r3, r1
 8000d70:	d908      	bls.n	8000d84 <__udivmoddi4+0xbc>
 8000d72:	2e00      	cmp	r6, #0
 8000d74:	f000 80ed 	beq.w	8000f52 <__udivmoddi4+0x28a>
 8000d78:	2100      	movs	r1, #0
 8000d7a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d7e:	4608      	mov	r0, r1
 8000d80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d84:	fab3 f183 	clz	r1, r3
 8000d88:	2900      	cmp	r1, #0
 8000d8a:	d149      	bne.n	8000e20 <__udivmoddi4+0x158>
 8000d8c:	42ab      	cmp	r3, r5
 8000d8e:	d302      	bcc.n	8000d96 <__udivmoddi4+0xce>
 8000d90:	4282      	cmp	r2, r0
 8000d92:	f200 80f8 	bhi.w	8000f86 <__udivmoddi4+0x2be>
 8000d96:	1a84      	subs	r4, r0, r2
 8000d98:	eb65 0203 	sbc.w	r2, r5, r3
 8000d9c:	2001      	movs	r0, #1
 8000d9e:	4617      	mov	r7, r2
 8000da0:	2e00      	cmp	r6, #0
 8000da2:	d0e2      	beq.n	8000d6a <__udivmoddi4+0xa2>
 8000da4:	e9c6 4700 	strd	r4, r7, [r6]
 8000da8:	e7df      	b.n	8000d6a <__udivmoddi4+0xa2>
 8000daa:	b902      	cbnz	r2, 8000dae <__udivmoddi4+0xe6>
 8000dac:	deff      	udf	#255	; 0xff
 8000dae:	fab2 f382 	clz	r3, r2
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	f040 8090 	bne.w	8000ed8 <__udivmoddi4+0x210>
 8000db8:	1a8a      	subs	r2, r1, r2
 8000dba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dbe:	fa1f fe8c 	uxth.w	lr, ip
 8000dc2:	2101      	movs	r1, #1
 8000dc4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000dc8:	fb07 2015 	mls	r0, r7, r5, r2
 8000dcc:	0c22      	lsrs	r2, r4, #16
 8000dce:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000dd2:	fb0e f005 	mul.w	r0, lr, r5
 8000dd6:	4290      	cmp	r0, r2
 8000dd8:	d908      	bls.n	8000dec <__udivmoddi4+0x124>
 8000dda:	eb1c 0202 	adds.w	r2, ip, r2
 8000dde:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000de2:	d202      	bcs.n	8000dea <__udivmoddi4+0x122>
 8000de4:	4290      	cmp	r0, r2
 8000de6:	f200 80cb 	bhi.w	8000f80 <__udivmoddi4+0x2b8>
 8000dea:	4645      	mov	r5, r8
 8000dec:	1a12      	subs	r2, r2, r0
 8000dee:	b2a4      	uxth	r4, r4
 8000df0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000df4:	fb07 2210 	mls	r2, r7, r0, r2
 8000df8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dfc:	fb0e fe00 	mul.w	lr, lr, r0
 8000e00:	45a6      	cmp	lr, r4
 8000e02:	d908      	bls.n	8000e16 <__udivmoddi4+0x14e>
 8000e04:	eb1c 0404 	adds.w	r4, ip, r4
 8000e08:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000e0c:	d202      	bcs.n	8000e14 <__udivmoddi4+0x14c>
 8000e0e:	45a6      	cmp	lr, r4
 8000e10:	f200 80bb 	bhi.w	8000f8a <__udivmoddi4+0x2c2>
 8000e14:	4610      	mov	r0, r2
 8000e16:	eba4 040e 	sub.w	r4, r4, lr
 8000e1a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e1e:	e79f      	b.n	8000d60 <__udivmoddi4+0x98>
 8000e20:	f1c1 0720 	rsb	r7, r1, #32
 8000e24:	408b      	lsls	r3, r1
 8000e26:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e2a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e2e:	fa05 f401 	lsl.w	r4, r5, r1
 8000e32:	fa20 f307 	lsr.w	r3, r0, r7
 8000e36:	40fd      	lsrs	r5, r7
 8000e38:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e3c:	4323      	orrs	r3, r4
 8000e3e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e42:	fa1f fe8c 	uxth.w	lr, ip
 8000e46:	fb09 5518 	mls	r5, r9, r8, r5
 8000e4a:	0c1c      	lsrs	r4, r3, #16
 8000e4c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e50:	fb08 f50e 	mul.w	r5, r8, lr
 8000e54:	42a5      	cmp	r5, r4
 8000e56:	fa02 f201 	lsl.w	r2, r2, r1
 8000e5a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e5e:	d90b      	bls.n	8000e78 <__udivmoddi4+0x1b0>
 8000e60:	eb1c 0404 	adds.w	r4, ip, r4
 8000e64:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000e68:	f080 8088 	bcs.w	8000f7c <__udivmoddi4+0x2b4>
 8000e6c:	42a5      	cmp	r5, r4
 8000e6e:	f240 8085 	bls.w	8000f7c <__udivmoddi4+0x2b4>
 8000e72:	f1a8 0802 	sub.w	r8, r8, #2
 8000e76:	4464      	add	r4, ip
 8000e78:	1b64      	subs	r4, r4, r5
 8000e7a:	b29d      	uxth	r5, r3
 8000e7c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e80:	fb09 4413 	mls	r4, r9, r3, r4
 8000e84:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e88:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e8c:	45a6      	cmp	lr, r4
 8000e8e:	d908      	bls.n	8000ea2 <__udivmoddi4+0x1da>
 8000e90:	eb1c 0404 	adds.w	r4, ip, r4
 8000e94:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000e98:	d26c      	bcs.n	8000f74 <__udivmoddi4+0x2ac>
 8000e9a:	45a6      	cmp	lr, r4
 8000e9c:	d96a      	bls.n	8000f74 <__udivmoddi4+0x2ac>
 8000e9e:	3b02      	subs	r3, #2
 8000ea0:	4464      	add	r4, ip
 8000ea2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ea6:	fba3 9502 	umull	r9, r5, r3, r2
 8000eaa:	eba4 040e 	sub.w	r4, r4, lr
 8000eae:	42ac      	cmp	r4, r5
 8000eb0:	46c8      	mov	r8, r9
 8000eb2:	46ae      	mov	lr, r5
 8000eb4:	d356      	bcc.n	8000f64 <__udivmoddi4+0x29c>
 8000eb6:	d053      	beq.n	8000f60 <__udivmoddi4+0x298>
 8000eb8:	b156      	cbz	r6, 8000ed0 <__udivmoddi4+0x208>
 8000eba:	ebb0 0208 	subs.w	r2, r0, r8
 8000ebe:	eb64 040e 	sbc.w	r4, r4, lr
 8000ec2:	fa04 f707 	lsl.w	r7, r4, r7
 8000ec6:	40ca      	lsrs	r2, r1
 8000ec8:	40cc      	lsrs	r4, r1
 8000eca:	4317      	orrs	r7, r2
 8000ecc:	e9c6 7400 	strd	r7, r4, [r6]
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	2100      	movs	r1, #0
 8000ed4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ed8:	f1c3 0120 	rsb	r1, r3, #32
 8000edc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ee0:	fa20 f201 	lsr.w	r2, r0, r1
 8000ee4:	fa25 f101 	lsr.w	r1, r5, r1
 8000ee8:	409d      	lsls	r5, r3
 8000eea:	432a      	orrs	r2, r5
 8000eec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ef0:	fa1f fe8c 	uxth.w	lr, ip
 8000ef4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ef8:	fb07 1510 	mls	r5, r7, r0, r1
 8000efc:	0c11      	lsrs	r1, r2, #16
 8000efe:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f02:	fb00 f50e 	mul.w	r5, r0, lr
 8000f06:	428d      	cmp	r5, r1
 8000f08:	fa04 f403 	lsl.w	r4, r4, r3
 8000f0c:	d908      	bls.n	8000f20 <__udivmoddi4+0x258>
 8000f0e:	eb1c 0101 	adds.w	r1, ip, r1
 8000f12:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000f16:	d22f      	bcs.n	8000f78 <__udivmoddi4+0x2b0>
 8000f18:	428d      	cmp	r5, r1
 8000f1a:	d92d      	bls.n	8000f78 <__udivmoddi4+0x2b0>
 8000f1c:	3802      	subs	r0, #2
 8000f1e:	4461      	add	r1, ip
 8000f20:	1b49      	subs	r1, r1, r5
 8000f22:	b292      	uxth	r2, r2
 8000f24:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f28:	fb07 1115 	mls	r1, r7, r5, r1
 8000f2c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f30:	fb05 f10e 	mul.w	r1, r5, lr
 8000f34:	4291      	cmp	r1, r2
 8000f36:	d908      	bls.n	8000f4a <__udivmoddi4+0x282>
 8000f38:	eb1c 0202 	adds.w	r2, ip, r2
 8000f3c:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000f40:	d216      	bcs.n	8000f70 <__udivmoddi4+0x2a8>
 8000f42:	4291      	cmp	r1, r2
 8000f44:	d914      	bls.n	8000f70 <__udivmoddi4+0x2a8>
 8000f46:	3d02      	subs	r5, #2
 8000f48:	4462      	add	r2, ip
 8000f4a:	1a52      	subs	r2, r2, r1
 8000f4c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f50:	e738      	b.n	8000dc4 <__udivmoddi4+0xfc>
 8000f52:	4631      	mov	r1, r6
 8000f54:	4630      	mov	r0, r6
 8000f56:	e708      	b.n	8000d6a <__udivmoddi4+0xa2>
 8000f58:	4639      	mov	r1, r7
 8000f5a:	e6e6      	b.n	8000d2a <__udivmoddi4+0x62>
 8000f5c:	4610      	mov	r0, r2
 8000f5e:	e6fb      	b.n	8000d58 <__udivmoddi4+0x90>
 8000f60:	4548      	cmp	r0, r9
 8000f62:	d2a9      	bcs.n	8000eb8 <__udivmoddi4+0x1f0>
 8000f64:	ebb9 0802 	subs.w	r8, r9, r2
 8000f68:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f6c:	3b01      	subs	r3, #1
 8000f6e:	e7a3      	b.n	8000eb8 <__udivmoddi4+0x1f0>
 8000f70:	4645      	mov	r5, r8
 8000f72:	e7ea      	b.n	8000f4a <__udivmoddi4+0x282>
 8000f74:	462b      	mov	r3, r5
 8000f76:	e794      	b.n	8000ea2 <__udivmoddi4+0x1da>
 8000f78:	4640      	mov	r0, r8
 8000f7a:	e7d1      	b.n	8000f20 <__udivmoddi4+0x258>
 8000f7c:	46d0      	mov	r8, sl
 8000f7e:	e77b      	b.n	8000e78 <__udivmoddi4+0x1b0>
 8000f80:	3d02      	subs	r5, #2
 8000f82:	4462      	add	r2, ip
 8000f84:	e732      	b.n	8000dec <__udivmoddi4+0x124>
 8000f86:	4608      	mov	r0, r1
 8000f88:	e70a      	b.n	8000da0 <__udivmoddi4+0xd8>
 8000f8a:	4464      	add	r4, ip
 8000f8c:	3802      	subs	r0, #2
 8000f8e:	e742      	b.n	8000e16 <__udivmoddi4+0x14e>

08000f90 <__aeabi_idiv0>:
 8000f90:	4770      	bx	lr
 8000f92:	bf00      	nop

08000f94 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc3;
ADC_HandleTypeDef hadc4;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b08c      	sub	sp, #48	; 0x30
 8000f98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000f9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	601a      	str	r2, [r3, #0]
 8000fa2:	605a      	str	r2, [r3, #4]
 8000fa4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000fa6:	1d3b      	adds	r3, r7, #4
 8000fa8:	2220      	movs	r2, #32
 8000faa:	2100      	movs	r1, #0
 8000fac:	4618      	mov	r0, r3
 8000fae:	f011 fb07 	bl	80125c0 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000fb2:	4b32      	ldr	r3, [pc, #200]	; (800107c <MX_ADC1_Init+0xe8>)
 8000fb4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000fb8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000fba:	4b30      	ldr	r3, [pc, #192]	; (800107c <MX_ADC1_Init+0xe8>)
 8000fbc:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000fc0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000fc2:	4b2e      	ldr	r3, [pc, #184]	; (800107c <MX_ADC1_Init+0xe8>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000fc8:	4b2c      	ldr	r3, [pc, #176]	; (800107c <MX_ADC1_Init+0xe8>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000fce:	4b2b      	ldr	r3, [pc, #172]	; (800107c <MX_ADC1_Init+0xe8>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000fd4:	4b29      	ldr	r3, [pc, #164]	; (800107c <MX_ADC1_Init+0xe8>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000fda:	4b28      	ldr	r3, [pc, #160]	; (800107c <MX_ADC1_Init+0xe8>)
 8000fdc:	2204      	movs	r2, #4
 8000fde:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000fe0:	4b26      	ldr	r3, [pc, #152]	; (800107c <MX_ADC1_Init+0xe8>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000fe6:	4b25      	ldr	r3, [pc, #148]	; (800107c <MX_ADC1_Init+0xe8>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000fec:	4b23      	ldr	r3, [pc, #140]	; (800107c <MX_ADC1_Init+0xe8>)
 8000fee:	2201      	movs	r2, #1
 8000ff0:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000ff2:	4b22      	ldr	r3, [pc, #136]	; (800107c <MX_ADC1_Init+0xe8>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ffa:	4b20      	ldr	r3, [pc, #128]	; (800107c <MX_ADC1_Init+0xe8>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001000:	4b1e      	ldr	r3, [pc, #120]	; (800107c <MX_ADC1_Init+0xe8>)
 8001002:	2200      	movs	r2, #0
 8001004:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001006:	4b1d      	ldr	r3, [pc, #116]	; (800107c <MX_ADC1_Init+0xe8>)
 8001008:	2200      	movs	r2, #0
 800100a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800100e:	4b1b      	ldr	r3, [pc, #108]	; (800107c <MX_ADC1_Init+0xe8>)
 8001010:	2200      	movs	r2, #0
 8001012:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8001014:	4b19      	ldr	r3, [pc, #100]	; (800107c <MX_ADC1_Init+0xe8>)
 8001016:	2200      	movs	r2, #0
 8001018:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800101c:	4817      	ldr	r0, [pc, #92]	; (800107c <MX_ADC1_Init+0xe8>)
 800101e:	f002 fb7f 	bl	8003720 <HAL_ADC_Init>
 8001022:	4603      	mov	r3, r0
 8001024:	2b00      	cmp	r3, #0
 8001026:	d001      	beq.n	800102c <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8001028:	f000 fe72 	bl	8001d10 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800102c:	2300      	movs	r3, #0
 800102e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001030:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001034:	4619      	mov	r1, r3
 8001036:	4811      	ldr	r0, [pc, #68]	; (800107c <MX_ADC1_Init+0xe8>)
 8001038:	f003 fbf4 	bl	8004824 <HAL_ADCEx_MultiModeConfigChannel>
 800103c:	4603      	mov	r3, r0
 800103e:	2b00      	cmp	r3, #0
 8001040:	d001      	beq.n	8001046 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8001042:	f000 fe65 	bl	8001d10 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001046:	4b0e      	ldr	r3, [pc, #56]	; (8001080 <MX_ADC1_Init+0xec>)
 8001048:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800104a:	2306      	movs	r3, #6
 800104c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800104e:	2300      	movs	r3, #0
 8001050:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001052:	237f      	movs	r3, #127	; 0x7f
 8001054:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001056:	2304      	movs	r3, #4
 8001058:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800105a:	2300      	movs	r3, #0
 800105c:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800105e:	1d3b      	adds	r3, r7, #4
 8001060:	4619      	mov	r1, r3
 8001062:	4806      	ldr	r0, [pc, #24]	; (800107c <MX_ADC1_Init+0xe8>)
 8001064:	f002 ff16 	bl	8003e94 <HAL_ADC_ConfigChannel>
 8001068:	4603      	mov	r3, r0
 800106a:	2b00      	cmp	r3, #0
 800106c:	d001      	beq.n	8001072 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 800106e:	f000 fe4f 	bl	8001d10 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001072:	bf00      	nop
 8001074:	3730      	adds	r7, #48	; 0x30
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	2000036c 	.word	0x2000036c
 8001080:	04300002 	.word	0x04300002

08001084 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b088      	sub	sp, #32
 8001088:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800108a:	463b      	mov	r3, r7
 800108c:	2220      	movs	r2, #32
 800108e:	2100      	movs	r1, #0
 8001090:	4618      	mov	r0, r3
 8001092:	f011 fa95 	bl	80125c0 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8001096:	4b2b      	ldr	r3, [pc, #172]	; (8001144 <MX_ADC2_Init+0xc0>)
 8001098:	4a2b      	ldr	r2, [pc, #172]	; (8001148 <MX_ADC2_Init+0xc4>)
 800109a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800109c:	4b29      	ldr	r3, [pc, #164]	; (8001144 <MX_ADC2_Init+0xc0>)
 800109e:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80010a2:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80010a4:	4b27      	ldr	r3, [pc, #156]	; (8001144 <MX_ADC2_Init+0xc0>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80010aa:	4b26      	ldr	r3, [pc, #152]	; (8001144 <MX_ADC2_Init+0xc0>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 80010b0:	4b24      	ldr	r3, [pc, #144]	; (8001144 <MX_ADC2_Init+0xc0>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80010b6:	4b23      	ldr	r3, [pc, #140]	; (8001144 <MX_ADC2_Init+0xc0>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80010bc:	4b21      	ldr	r3, [pc, #132]	; (8001144 <MX_ADC2_Init+0xc0>)
 80010be:	2204      	movs	r2, #4
 80010c0:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80010c2:	4b20      	ldr	r3, [pc, #128]	; (8001144 <MX_ADC2_Init+0xc0>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80010c8:	4b1e      	ldr	r3, [pc, #120]	; (8001144 <MX_ADC2_Init+0xc0>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 80010ce:	4b1d      	ldr	r3, [pc, #116]	; (8001144 <MX_ADC2_Init+0xc0>)
 80010d0:	2201      	movs	r2, #1
 80010d2:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80010d4:	4b1b      	ldr	r3, [pc, #108]	; (8001144 <MX_ADC2_Init+0xc0>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010dc:	4b19      	ldr	r3, [pc, #100]	; (8001144 <MX_ADC2_Init+0xc0>)
 80010de:	2200      	movs	r2, #0
 80010e0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80010e2:	4b18      	ldr	r3, [pc, #96]	; (8001144 <MX_ADC2_Init+0xc0>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80010e8:	4b16      	ldr	r3, [pc, #88]	; (8001144 <MX_ADC2_Init+0xc0>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80010f0:	4b14      	ldr	r3, [pc, #80]	; (8001144 <MX_ADC2_Init+0xc0>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 80010f6:	4b13      	ldr	r3, [pc, #76]	; (8001144 <MX_ADC2_Init+0xc0>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80010fe:	4811      	ldr	r0, [pc, #68]	; (8001144 <MX_ADC2_Init+0xc0>)
 8001100:	f002 fb0e 	bl	8003720 <HAL_ADC_Init>
 8001104:	4603      	mov	r3, r0
 8001106:	2b00      	cmp	r3, #0
 8001108:	d001      	beq.n	800110e <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 800110a:	f000 fe01 	bl	8001d10 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800110e:	4b0f      	ldr	r3, [pc, #60]	; (800114c <MX_ADC2_Init+0xc8>)
 8001110:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001112:	2306      	movs	r3, #6
 8001114:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001116:	2300      	movs	r3, #0
 8001118:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800111a:	237f      	movs	r3, #127	; 0x7f
 800111c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800111e:	2304      	movs	r3, #4
 8001120:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001122:	2300      	movs	r3, #0
 8001124:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001126:	463b      	mov	r3, r7
 8001128:	4619      	mov	r1, r3
 800112a:	4806      	ldr	r0, [pc, #24]	; (8001144 <MX_ADC2_Init+0xc0>)
 800112c:	f002 feb2 	bl	8003e94 <HAL_ADC_ConfigChannel>
 8001130:	4603      	mov	r3, r0
 8001132:	2b00      	cmp	r3, #0
 8001134:	d001      	beq.n	800113a <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 8001136:	f000 fdeb 	bl	8001d10 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800113a:	bf00      	nop
 800113c:	3720      	adds	r7, #32
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	200003d8 	.word	0x200003d8
 8001148:	50000100 	.word	0x50000100
 800114c:	25b00200 	.word	0x25b00200

08001150 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b08c      	sub	sp, #48	; 0x30
 8001154:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001156:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800115a:	2200      	movs	r2, #0
 800115c:	601a      	str	r2, [r3, #0]
 800115e:	605a      	str	r2, [r3, #4]
 8001160:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001162:	1d3b      	adds	r3, r7, #4
 8001164:	2220      	movs	r2, #32
 8001166:	2100      	movs	r1, #0
 8001168:	4618      	mov	r0, r3
 800116a:	f011 fa29 	bl	80125c0 <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 800116e:	4b31      	ldr	r3, [pc, #196]	; (8001234 <MX_ADC3_Init+0xe4>)
 8001170:	4a31      	ldr	r2, [pc, #196]	; (8001238 <MX_ADC3_Init+0xe8>)
 8001172:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001174:	4b2f      	ldr	r3, [pc, #188]	; (8001234 <MX_ADC3_Init+0xe4>)
 8001176:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800117a:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 800117c:	4b2d      	ldr	r3, [pc, #180]	; (8001234 <MX_ADC3_Init+0xe4>)
 800117e:	2200      	movs	r2, #0
 8001180:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001182:	4b2c      	ldr	r3, [pc, #176]	; (8001234 <MX_ADC3_Init+0xe4>)
 8001184:	2200      	movs	r2, #0
 8001186:	60da      	str	r2, [r3, #12]
  hadc3.Init.GainCompensation = 0;
 8001188:	4b2a      	ldr	r3, [pc, #168]	; (8001234 <MX_ADC3_Init+0xe4>)
 800118a:	2200      	movs	r2, #0
 800118c:	611a      	str	r2, [r3, #16]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800118e:	4b29      	ldr	r3, [pc, #164]	; (8001234 <MX_ADC3_Init+0xe4>)
 8001190:	2200      	movs	r2, #0
 8001192:	615a      	str	r2, [r3, #20]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001194:	4b27      	ldr	r3, [pc, #156]	; (8001234 <MX_ADC3_Init+0xe4>)
 8001196:	2204      	movs	r2, #4
 8001198:	619a      	str	r2, [r3, #24]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 800119a:	4b26      	ldr	r3, [pc, #152]	; (8001234 <MX_ADC3_Init+0xe4>)
 800119c:	2200      	movs	r2, #0
 800119e:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80011a0:	4b24      	ldr	r3, [pc, #144]	; (8001234 <MX_ADC3_Init+0xe4>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	775a      	strb	r2, [r3, #29]
  hadc3.Init.NbrOfConversion = 1;
 80011a6:	4b23      	ldr	r3, [pc, #140]	; (8001234 <MX_ADC3_Init+0xe4>)
 80011a8:	2201      	movs	r2, #1
 80011aa:	621a      	str	r2, [r3, #32]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80011ac:	4b21      	ldr	r3, [pc, #132]	; (8001234 <MX_ADC3_Init+0xe4>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80011b4:	4b1f      	ldr	r3, [pc, #124]	; (8001234 <MX_ADC3_Init+0xe4>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80011ba:	4b1e      	ldr	r3, [pc, #120]	; (8001234 <MX_ADC3_Init+0xe4>)
 80011bc:	2200      	movs	r2, #0
 80011be:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.DMAContinuousRequests = DISABLE;
 80011c0:	4b1c      	ldr	r3, [pc, #112]	; (8001234 <MX_ADC3_Init+0xe4>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80011c8:	4b1a      	ldr	r3, [pc, #104]	; (8001234 <MX_ADC3_Init+0xe4>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc3.Init.OversamplingMode = DISABLE;
 80011ce:	4b19      	ldr	r3, [pc, #100]	; (8001234 <MX_ADC3_Init+0xe4>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80011d6:	4817      	ldr	r0, [pc, #92]	; (8001234 <MX_ADC3_Init+0xe4>)
 80011d8:	f002 faa2 	bl	8003720 <HAL_ADC_Init>
 80011dc:	4603      	mov	r3, r0
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d001      	beq.n	80011e6 <MX_ADC3_Init+0x96>
  {
    Error_Handler();
 80011e2:	f000 fd95 	bl	8001d10 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80011e6:	2300      	movs	r3, #0
 80011e8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 80011ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011ee:	4619      	mov	r1, r3
 80011f0:	4810      	ldr	r0, [pc, #64]	; (8001234 <MX_ADC3_Init+0xe4>)
 80011f2:	f003 fb17 	bl	8004824 <HAL_ADCEx_MultiModeConfigChannel>
 80011f6:	4603      	mov	r3, r0
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d001      	beq.n	8001200 <MX_ADC3_Init+0xb0>
  {
    Error_Handler();
 80011fc:	f000 fd88 	bl	8001d10 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001200:	4b0e      	ldr	r3, [pc, #56]	; (800123c <MX_ADC3_Init+0xec>)
 8001202:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001204:	2306      	movs	r3, #6
 8001206:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001208:	2300      	movs	r3, #0
 800120a:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800120c:	237f      	movs	r3, #127	; 0x7f
 800120e:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001210:	2304      	movs	r3, #4
 8001212:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001214:	2300      	movs	r3, #0
 8001216:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001218:	1d3b      	adds	r3, r7, #4
 800121a:	4619      	mov	r1, r3
 800121c:	4805      	ldr	r0, [pc, #20]	; (8001234 <MX_ADC3_Init+0xe4>)
 800121e:	f002 fe39 	bl	8003e94 <HAL_ADC_ConfigChannel>
 8001222:	4603      	mov	r3, r0
 8001224:	2b00      	cmp	r3, #0
 8001226:	d001      	beq.n	800122c <MX_ADC3_Init+0xdc>
  {
    Error_Handler();
 8001228:	f000 fd72 	bl	8001d10 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 800122c:	bf00      	nop
 800122e:	3730      	adds	r7, #48	; 0x30
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}
 8001234:	20000444 	.word	0x20000444
 8001238:	50000400 	.word	0x50000400
 800123c:	04300002 	.word	0x04300002

08001240 <MX_ADC4_Init>:
/* ADC4 init function */
void MX_ADC4_Init(void)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b088      	sub	sp, #32
 8001244:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC4_Init 0 */

  /* USER CODE END ADC4_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001246:	463b      	mov	r3, r7
 8001248:	2220      	movs	r2, #32
 800124a:	2100      	movs	r1, #0
 800124c:	4618      	mov	r0, r3
 800124e:	f011 f9b7 	bl	80125c0 <memset>

  /* USER CODE END ADC4_Init 1 */

  /** Common config
  */
  hadc4.Instance = ADC4;
 8001252:	4b2b      	ldr	r3, [pc, #172]	; (8001300 <MX_ADC4_Init+0xc0>)
 8001254:	4a2b      	ldr	r2, [pc, #172]	; (8001304 <MX_ADC4_Init+0xc4>)
 8001256:	601a      	str	r2, [r3, #0]
  hadc4.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001258:	4b29      	ldr	r3, [pc, #164]	; (8001300 <MX_ADC4_Init+0xc0>)
 800125a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800125e:	605a      	str	r2, [r3, #4]
  hadc4.Init.Resolution = ADC_RESOLUTION_12B;
 8001260:	4b27      	ldr	r3, [pc, #156]	; (8001300 <MX_ADC4_Init+0xc0>)
 8001262:	2200      	movs	r2, #0
 8001264:	609a      	str	r2, [r3, #8]
  hadc4.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001266:	4b26      	ldr	r3, [pc, #152]	; (8001300 <MX_ADC4_Init+0xc0>)
 8001268:	2200      	movs	r2, #0
 800126a:	60da      	str	r2, [r3, #12]
  hadc4.Init.GainCompensation = 0;
 800126c:	4b24      	ldr	r3, [pc, #144]	; (8001300 <MX_ADC4_Init+0xc0>)
 800126e:	2200      	movs	r2, #0
 8001270:	611a      	str	r2, [r3, #16]
  hadc4.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001272:	4b23      	ldr	r3, [pc, #140]	; (8001300 <MX_ADC4_Init+0xc0>)
 8001274:	2200      	movs	r2, #0
 8001276:	615a      	str	r2, [r3, #20]
  hadc4.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001278:	4b21      	ldr	r3, [pc, #132]	; (8001300 <MX_ADC4_Init+0xc0>)
 800127a:	2204      	movs	r2, #4
 800127c:	619a      	str	r2, [r3, #24]
  hadc4.Init.LowPowerAutoWait = DISABLE;
 800127e:	4b20      	ldr	r3, [pc, #128]	; (8001300 <MX_ADC4_Init+0xc0>)
 8001280:	2200      	movs	r2, #0
 8001282:	771a      	strb	r2, [r3, #28]
  hadc4.Init.ContinuousConvMode = DISABLE;
 8001284:	4b1e      	ldr	r3, [pc, #120]	; (8001300 <MX_ADC4_Init+0xc0>)
 8001286:	2200      	movs	r2, #0
 8001288:	775a      	strb	r2, [r3, #29]
  hadc4.Init.NbrOfConversion = 1;
 800128a:	4b1d      	ldr	r3, [pc, #116]	; (8001300 <MX_ADC4_Init+0xc0>)
 800128c:	2201      	movs	r2, #1
 800128e:	621a      	str	r2, [r3, #32]
  hadc4.Init.DiscontinuousConvMode = DISABLE;
 8001290:	4b1b      	ldr	r3, [pc, #108]	; (8001300 <MX_ADC4_Init+0xc0>)
 8001292:	2200      	movs	r2, #0
 8001294:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc4.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001298:	4b19      	ldr	r3, [pc, #100]	; (8001300 <MX_ADC4_Init+0xc0>)
 800129a:	2200      	movs	r2, #0
 800129c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc4.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800129e:	4b18      	ldr	r3, [pc, #96]	; (8001300 <MX_ADC4_Init+0xc0>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	631a      	str	r2, [r3, #48]	; 0x30
  hadc4.Init.DMAContinuousRequests = DISABLE;
 80012a4:	4b16      	ldr	r3, [pc, #88]	; (8001300 <MX_ADC4_Init+0xc0>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc4.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80012ac:	4b14      	ldr	r3, [pc, #80]	; (8001300 <MX_ADC4_Init+0xc0>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc4.Init.OversamplingMode = DISABLE;
 80012b2:	4b13      	ldr	r3, [pc, #76]	; (8001300 <MX_ADC4_Init+0xc0>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc4) != HAL_OK)
 80012ba:	4811      	ldr	r0, [pc, #68]	; (8001300 <MX_ADC4_Init+0xc0>)
 80012bc:	f002 fa30 	bl	8003720 <HAL_ADC_Init>
 80012c0:	4603      	mov	r3, r0
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d001      	beq.n	80012ca <MX_ADC4_Init+0x8a>
  {
    Error_Handler();
 80012c6:	f000 fd23 	bl	8001d10 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80012ca:	4b0f      	ldr	r3, [pc, #60]	; (8001308 <MX_ADC4_Init+0xc8>)
 80012cc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80012ce:	2306      	movs	r3, #6
 80012d0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_47CYCLES_5;
 80012d2:	2304      	movs	r3, #4
 80012d4:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80012d6:	237f      	movs	r3, #127	; 0x7f
 80012d8:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80012da:	2304      	movs	r3, #4
 80012dc:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80012de:	2300      	movs	r3, #0
 80012e0:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 80012e2:	463b      	mov	r3, r7
 80012e4:	4619      	mov	r1, r3
 80012e6:	4806      	ldr	r0, [pc, #24]	; (8001300 <MX_ADC4_Init+0xc0>)
 80012e8:	f002 fdd4 	bl	8003e94 <HAL_ADC_ConfigChannel>
 80012ec:	4603      	mov	r3, r0
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d001      	beq.n	80012f6 <MX_ADC4_Init+0xb6>
  {
    Error_Handler();
 80012f2:	f000 fd0d 	bl	8001d10 <Error_Handler>
  }
  /* USER CODE BEGIN ADC4_Init 2 */

  /* USER CODE END ADC4_Init 2 */

}
 80012f6:	bf00      	nop
 80012f8:	3720      	adds	r7, #32
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	200004b0 	.word	0x200004b0
 8001304:	50000500 	.word	0x50000500
 8001308:	0c900008 	.word	0x0c900008

0800130c <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;
static uint32_t HAL_RCC_ADC345_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b0a6      	sub	sp, #152	; 0x98
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001314:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001318:	2200      	movs	r2, #0
 800131a:	601a      	str	r2, [r3, #0]
 800131c:	605a      	str	r2, [r3, #4]
 800131e:	609a      	str	r2, [r3, #8]
 8001320:	60da      	str	r2, [r3, #12]
 8001322:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001324:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001328:	2254      	movs	r2, #84	; 0x54
 800132a:	2100      	movs	r1, #0
 800132c:	4618      	mov	r0, r3
 800132e:	f011 f947 	bl	80125c0 <memset>
  if(adcHandle->Instance==ADC1)
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800133a:	d141      	bne.n	80013c0 <HAL_ADC_MspInit+0xb4>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 800133c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001340:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001342:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001346:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001348:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800134c:	4618      	mov	r0, r3
 800134e:	f006 fb7b 	bl	8007a48 <HAL_RCCEx_PeriphCLKConfig>
 8001352:	4603      	mov	r3, r0
 8001354:	2b00      	cmp	r3, #0
 8001356:	d001      	beq.n	800135c <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8001358:	f000 fcda 	bl	8001d10 <Error_Handler>
    }

    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 800135c:	4b91      	ldr	r3, [pc, #580]	; (80015a4 <HAL_ADC_MspInit+0x298>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	3301      	adds	r3, #1
 8001362:	4a90      	ldr	r2, [pc, #576]	; (80015a4 <HAL_ADC_MspInit+0x298>)
 8001364:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001366:	4b8f      	ldr	r3, [pc, #572]	; (80015a4 <HAL_ADC_MspInit+0x298>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	2b01      	cmp	r3, #1
 800136c:	d10b      	bne.n	8001386 <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800136e:	4b8e      	ldr	r3, [pc, #568]	; (80015a8 <HAL_ADC_MspInit+0x29c>)
 8001370:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001372:	4a8d      	ldr	r2, [pc, #564]	; (80015a8 <HAL_ADC_MspInit+0x29c>)
 8001374:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001378:	64d3      	str	r3, [r2, #76]	; 0x4c
 800137a:	4b8b      	ldr	r3, [pc, #556]	; (80015a8 <HAL_ADC_MspInit+0x29c>)
 800137c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800137e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001382:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001384:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001386:	4b88      	ldr	r3, [pc, #544]	; (80015a8 <HAL_ADC_MspInit+0x29c>)
 8001388:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800138a:	4a87      	ldr	r2, [pc, #540]	; (80015a8 <HAL_ADC_MspInit+0x29c>)
 800138c:	f043 0301 	orr.w	r3, r3, #1
 8001390:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001392:	4b85      	ldr	r3, [pc, #532]	; (80015a8 <HAL_ADC_MspInit+0x29c>)
 8001394:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001396:	f003 0301 	and.w	r3, r3, #1
 800139a:	62bb      	str	r3, [r7, #40]	; 0x28
 800139c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800139e:	2303      	movs	r3, #3
 80013a0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013a4:	2303      	movs	r3, #3
 80013a6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013aa:	2300      	movs	r3, #0
 80013ac:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013b0:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80013b4:	4619      	mov	r1, r3
 80013b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013ba:	f003 fcf9 	bl	8004db0 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC4_MspInit 1 */

  /* USER CODE END ADC4_MspInit 1 */
  }
}
 80013be:	e0ed      	b.n	800159c <HAL_ADC_MspInit+0x290>
  else if(adcHandle->Instance==ADC2)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	4a79      	ldr	r2, [pc, #484]	; (80015ac <HAL_ADC_MspInit+0x2a0>)
 80013c6:	4293      	cmp	r3, r2
 80013c8:	d15b      	bne.n	8001482 <HAL_ADC_MspInit+0x176>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80013ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80013ce:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80013d0:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80013d4:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013d6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80013da:	4618      	mov	r0, r3
 80013dc:	f006 fb34 	bl	8007a48 <HAL_RCCEx_PeriphCLKConfig>
 80013e0:	4603      	mov	r3, r0
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d001      	beq.n	80013ea <HAL_ADC_MspInit+0xde>
      Error_Handler();
 80013e6:	f000 fc93 	bl	8001d10 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 80013ea:	4b6e      	ldr	r3, [pc, #440]	; (80015a4 <HAL_ADC_MspInit+0x298>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	3301      	adds	r3, #1
 80013f0:	4a6c      	ldr	r2, [pc, #432]	; (80015a4 <HAL_ADC_MspInit+0x298>)
 80013f2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80013f4:	4b6b      	ldr	r3, [pc, #428]	; (80015a4 <HAL_ADC_MspInit+0x298>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	2b01      	cmp	r3, #1
 80013fa:	d10b      	bne.n	8001414 <HAL_ADC_MspInit+0x108>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80013fc:	4b6a      	ldr	r3, [pc, #424]	; (80015a8 <HAL_ADC_MspInit+0x29c>)
 80013fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001400:	4a69      	ldr	r2, [pc, #420]	; (80015a8 <HAL_ADC_MspInit+0x29c>)
 8001402:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001406:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001408:	4b67      	ldr	r3, [pc, #412]	; (80015a8 <HAL_ADC_MspInit+0x29c>)
 800140a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800140c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001410:	627b      	str	r3, [r7, #36]	; 0x24
 8001412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001414:	4b64      	ldr	r3, [pc, #400]	; (80015a8 <HAL_ADC_MspInit+0x29c>)
 8001416:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001418:	4a63      	ldr	r2, [pc, #396]	; (80015a8 <HAL_ADC_MspInit+0x29c>)
 800141a:	f043 0304 	orr.w	r3, r3, #4
 800141e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001420:	4b61      	ldr	r3, [pc, #388]	; (80015a8 <HAL_ADC_MspInit+0x29c>)
 8001422:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001424:	f003 0304 	and.w	r3, r3, #4
 8001428:	623b      	str	r3, [r7, #32]
 800142a:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800142c:	4b5e      	ldr	r3, [pc, #376]	; (80015a8 <HAL_ADC_MspInit+0x29c>)
 800142e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001430:	4a5d      	ldr	r2, [pc, #372]	; (80015a8 <HAL_ADC_MspInit+0x29c>)
 8001432:	f043 0302 	orr.w	r3, r3, #2
 8001436:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001438:	4b5b      	ldr	r3, [pc, #364]	; (80015a8 <HAL_ADC_MspInit+0x29c>)
 800143a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800143c:	f003 0302 	and.w	r3, r3, #2
 8001440:	61fb      	str	r3, [r7, #28]
 8001442:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001444:	2308      	movs	r3, #8
 8001446:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800144a:	2303      	movs	r3, #3
 800144c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001450:	2300      	movs	r3, #0
 8001452:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001456:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800145a:	4619      	mov	r1, r3
 800145c:	4854      	ldr	r0, [pc, #336]	; (80015b0 <HAL_ADC_MspInit+0x2a4>)
 800145e:	f003 fca7 	bl	8004db0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001462:	2304      	movs	r3, #4
 8001464:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001468:	2303      	movs	r3, #3
 800146a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800146e:	2300      	movs	r3, #0
 8001470:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001474:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001478:	4619      	mov	r1, r3
 800147a:	484e      	ldr	r0, [pc, #312]	; (80015b4 <HAL_ADC_MspInit+0x2a8>)
 800147c:	f003 fc98 	bl	8004db0 <HAL_GPIO_Init>
}
 8001480:	e08c      	b.n	800159c <HAL_ADC_MspInit+0x290>
  else if(adcHandle->Instance==ADC3)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	4a4c      	ldr	r2, [pc, #304]	; (80015b8 <HAL_ADC_MspInit+0x2ac>)
 8001488:	4293      	cmp	r3, r2
 800148a:	d141      	bne.n	8001510 <HAL_ADC_MspInit+0x204>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 800148c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001490:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 8001492:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8001496:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001498:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800149c:	4618      	mov	r0, r3
 800149e:	f006 fad3 	bl	8007a48 <HAL_RCCEx_PeriphCLKConfig>
 80014a2:	4603      	mov	r3, r0
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d001      	beq.n	80014ac <HAL_ADC_MspInit+0x1a0>
      Error_Handler();
 80014a8:	f000 fc32 	bl	8001d10 <Error_Handler>
    HAL_RCC_ADC345_CLK_ENABLED++;
 80014ac:	4b43      	ldr	r3, [pc, #268]	; (80015bc <HAL_ADC_MspInit+0x2b0>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	3301      	adds	r3, #1
 80014b2:	4a42      	ldr	r2, [pc, #264]	; (80015bc <HAL_ADC_MspInit+0x2b0>)
 80014b4:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 80014b6:	4b41      	ldr	r3, [pc, #260]	; (80015bc <HAL_ADC_MspInit+0x2b0>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	2b01      	cmp	r3, #1
 80014bc:	d10b      	bne.n	80014d6 <HAL_ADC_MspInit+0x1ca>
      __HAL_RCC_ADC345_CLK_ENABLE();
 80014be:	4b3a      	ldr	r3, [pc, #232]	; (80015a8 <HAL_ADC_MspInit+0x29c>)
 80014c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014c2:	4a39      	ldr	r2, [pc, #228]	; (80015a8 <HAL_ADC_MspInit+0x29c>)
 80014c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014ca:	4b37      	ldr	r3, [pc, #220]	; (80015a8 <HAL_ADC_MspInit+0x29c>)
 80014cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014d2:	61bb      	str	r3, [r7, #24]
 80014d4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014d6:	4b34      	ldr	r3, [pc, #208]	; (80015a8 <HAL_ADC_MspInit+0x29c>)
 80014d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014da:	4a33      	ldr	r2, [pc, #204]	; (80015a8 <HAL_ADC_MspInit+0x29c>)
 80014dc:	f043 0302 	orr.w	r3, r3, #2
 80014e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014e2:	4b31      	ldr	r3, [pc, #196]	; (80015a8 <HAL_ADC_MspInit+0x29c>)
 80014e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014e6:	f003 0302 	and.w	r3, r3, #2
 80014ea:	617b      	str	r3, [r7, #20]
 80014ec:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_13;
 80014ee:	f242 0302 	movw	r3, #8194	; 0x2002
 80014f2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014f6:	2303      	movs	r3, #3
 80014f8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014fc:	2300      	movs	r3, #0
 80014fe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001502:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001506:	4619      	mov	r1, r3
 8001508:	482a      	ldr	r0, [pc, #168]	; (80015b4 <HAL_ADC_MspInit+0x2a8>)
 800150a:	f003 fc51 	bl	8004db0 <HAL_GPIO_Init>
}
 800150e:	e045      	b.n	800159c <HAL_ADC_MspInit+0x290>
  else if(adcHandle->Instance==ADC4)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	4a2a      	ldr	r2, [pc, #168]	; (80015c0 <HAL_ADC_MspInit+0x2b4>)
 8001516:	4293      	cmp	r3, r2
 8001518:	d140      	bne.n	800159c <HAL_ADC_MspInit+0x290>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 800151a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800151e:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 8001520:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8001524:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001526:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800152a:	4618      	mov	r0, r3
 800152c:	f006 fa8c 	bl	8007a48 <HAL_RCCEx_PeriphCLKConfig>
 8001530:	4603      	mov	r3, r0
 8001532:	2b00      	cmp	r3, #0
 8001534:	d001      	beq.n	800153a <HAL_ADC_MspInit+0x22e>
      Error_Handler();
 8001536:	f000 fbeb 	bl	8001d10 <Error_Handler>
    HAL_RCC_ADC345_CLK_ENABLED++;
 800153a:	4b20      	ldr	r3, [pc, #128]	; (80015bc <HAL_ADC_MspInit+0x2b0>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	3301      	adds	r3, #1
 8001540:	4a1e      	ldr	r2, [pc, #120]	; (80015bc <HAL_ADC_MspInit+0x2b0>)
 8001542:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 8001544:	4b1d      	ldr	r3, [pc, #116]	; (80015bc <HAL_ADC_MspInit+0x2b0>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	2b01      	cmp	r3, #1
 800154a:	d10b      	bne.n	8001564 <HAL_ADC_MspInit+0x258>
      __HAL_RCC_ADC345_CLK_ENABLE();
 800154c:	4b16      	ldr	r3, [pc, #88]	; (80015a8 <HAL_ADC_MspInit+0x29c>)
 800154e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001550:	4a15      	ldr	r2, [pc, #84]	; (80015a8 <HAL_ADC_MspInit+0x29c>)
 8001552:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001556:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001558:	4b13      	ldr	r3, [pc, #76]	; (80015a8 <HAL_ADC_MspInit+0x29c>)
 800155a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800155c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001560:	613b      	str	r3, [r7, #16]
 8001562:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001564:	4b10      	ldr	r3, [pc, #64]	; (80015a8 <HAL_ADC_MspInit+0x29c>)
 8001566:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001568:	4a0f      	ldr	r2, [pc, #60]	; (80015a8 <HAL_ADC_MspInit+0x29c>)
 800156a:	f043 0302 	orr.w	r3, r3, #2
 800156e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001570:	4b0d      	ldr	r3, [pc, #52]	; (80015a8 <HAL_ADC_MspInit+0x29c>)
 8001572:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001574:	f003 0302 	and.w	r3, r3, #2
 8001578:	60fb      	str	r3, [r7, #12]
 800157a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14;
 800157c:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 8001580:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001584:	2303      	movs	r3, #3
 8001586:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800158a:	2300      	movs	r3, #0
 800158c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001590:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001594:	4619      	mov	r1, r3
 8001596:	4807      	ldr	r0, [pc, #28]	; (80015b4 <HAL_ADC_MspInit+0x2a8>)
 8001598:	f003 fc0a 	bl	8004db0 <HAL_GPIO_Init>
}
 800159c:	bf00      	nop
 800159e:	3798      	adds	r7, #152	; 0x98
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd80      	pop	{r7, pc}
 80015a4:	2000051c 	.word	0x2000051c
 80015a8:	40021000 	.word	0x40021000
 80015ac:	50000100 	.word	0x50000100
 80015b0:	48000800 	.word	0x48000800
 80015b4:	48000400 	.word	0x48000400
 80015b8:	50000400 	.word	0x50000400
 80015bc:	20000520 	.word	0x20000520
 80015c0:	50000500 	.word	0x50000500

080015c4 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80015c4:	b5b0      	push	{r4, r5, r7, lr}
 80015c6:	b086      	sub	sp, #24
 80015c8:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80015ca:	4b09      	ldr	r3, [pc, #36]	; (80015f0 <MX_FREERTOS_Init+0x2c>)
 80015cc:	1d3c      	adds	r4, r7, #4
 80015ce:	461d      	mov	r5, r3
 80015d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80015d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80015d4:	682b      	ldr	r3, [r5, #0]
 80015d6:	6023      	str	r3, [r4, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80015d8:	1d3b      	adds	r3, r7, #4
 80015da:	2100      	movs	r1, #0
 80015dc:	4618      	mov	r0, r3
 80015de:	f00d fa6b 	bl	800eab8 <osThreadCreate>
 80015e2:	4603      	mov	r3, r0
 80015e4:	4a03      	ldr	r2, [pc, #12]	; (80015f4 <MX_FREERTOS_Init+0x30>)
 80015e6:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 80015e8:	bf00      	nop
 80015ea:	3718      	adds	r7, #24
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bdb0      	pop	{r4, r5, r7, pc}
 80015f0:	0801440c 	.word	0x0801440c
 80015f4:	20000524 	.word	0x20000524

080015f8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b082      	sub	sp, #8
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001600:	2001      	movs	r0, #1
 8001602:	f00d fa80 	bl	800eb06 <osDelay>
 8001606:	e7fb      	b.n	8001600 <StartDefaultTask+0x8>

08001608 <MX_CORDIC_Init>:

CORDIC_HandleTypeDef hcordic;

/* CORDIC init function */
void MX_CORDIC_Init(void)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	af00      	add	r7, sp, #0
  /* USER CODE END CORDIC_Init 0 */

  /* USER CODE BEGIN CORDIC_Init 1 */

  /* USER CODE END CORDIC_Init 1 */
  hcordic.Instance = CORDIC;
 800160c:	4b06      	ldr	r3, [pc, #24]	; (8001628 <MX_CORDIC_Init+0x20>)
 800160e:	4a07      	ldr	r2, [pc, #28]	; (800162c <MX_CORDIC_Init+0x24>)
 8001610:	601a      	str	r2, [r3, #0]
  if (HAL_CORDIC_Init(&hcordic) != HAL_OK)
 8001612:	4805      	ldr	r0, [pc, #20]	; (8001628 <MX_CORDIC_Init+0x20>)
 8001614:	f003 fa0e 	bl	8004a34 <HAL_CORDIC_Init>
 8001618:	4603      	mov	r3, r0
 800161a:	2b00      	cmp	r3, #0
 800161c:	d001      	beq.n	8001622 <MX_CORDIC_Init+0x1a>
  {
    Error_Handler();
 800161e:	f000 fb77 	bl	8001d10 <Error_Handler>
  }
  /* USER CODE BEGIN CORDIC_Init 2 */

  /* USER CODE END CORDIC_Init 2 */

}
 8001622:	bf00      	nop
 8001624:	bd80      	pop	{r7, pc}
 8001626:	bf00      	nop
 8001628:	20000528 	.word	0x20000528
 800162c:	40020c00 	.word	0x40020c00

08001630 <HAL_CORDIC_MspInit>:

void HAL_CORDIC_MspInit(CORDIC_HandleTypeDef* cordicHandle)
{
 8001630:	b480      	push	{r7}
 8001632:	b085      	sub	sp, #20
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]

  if(cordicHandle->Instance==CORDIC)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	4a0a      	ldr	r2, [pc, #40]	; (8001668 <HAL_CORDIC_MspInit+0x38>)
 800163e:	4293      	cmp	r3, r2
 8001640:	d10b      	bne.n	800165a <HAL_CORDIC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CORDIC_MspInit 0 */

  /* USER CODE END CORDIC_MspInit 0 */
    /* CORDIC clock enable */
    __HAL_RCC_CORDIC_CLK_ENABLE();
 8001642:	4b0a      	ldr	r3, [pc, #40]	; (800166c <HAL_CORDIC_MspInit+0x3c>)
 8001644:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001646:	4a09      	ldr	r2, [pc, #36]	; (800166c <HAL_CORDIC_MspInit+0x3c>)
 8001648:	f043 0308 	orr.w	r3, r3, #8
 800164c:	6493      	str	r3, [r2, #72]	; 0x48
 800164e:	4b07      	ldr	r3, [pc, #28]	; (800166c <HAL_CORDIC_MspInit+0x3c>)
 8001650:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001652:	f003 0308 	and.w	r3, r3, #8
 8001656:	60fb      	str	r3, [r7, #12]
 8001658:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CORDIC_MspInit 1 */

  /* USER CODE END CORDIC_MspInit 1 */
  }
}
 800165a:	bf00      	nop
 800165c:	3714      	adds	r7, #20
 800165e:	46bd      	mov	sp, r7
 8001660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001664:	4770      	bx	lr
 8001666:	bf00      	nop
 8001668:	40020c00 	.word	0x40020c00
 800166c:	40021000 	.word	0x40021000

08001670 <MX_FMAC_Init>:

FMAC_HandleTypeDef hfmac;

/* FMAC init function */
void MX_FMAC_Init(void)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	af00      	add	r7, sp, #0
  /* USER CODE END FMAC_Init 0 */

  /* USER CODE BEGIN FMAC_Init 1 */

  /* USER CODE END FMAC_Init 1 */
  hfmac.Instance = FMAC;
 8001674:	4b06      	ldr	r3, [pc, #24]	; (8001690 <MX_FMAC_Init+0x20>)
 8001676:	4a07      	ldr	r2, [pc, #28]	; (8001694 <MX_FMAC_Init+0x24>)
 8001678:	601a      	str	r2, [r3, #0]
  if (HAL_FMAC_Init(&hfmac) != HAL_OK)
 800167a:	4805      	ldr	r0, [pc, #20]	; (8001690 <MX_FMAC_Init+0x20>)
 800167c:	f003 faec 	bl	8004c58 <HAL_FMAC_Init>
 8001680:	4603      	mov	r3, r0
 8001682:	2b00      	cmp	r3, #0
 8001684:	d001      	beq.n	800168a <MX_FMAC_Init+0x1a>
  {
    Error_Handler();
 8001686:	f000 fb43 	bl	8001d10 <Error_Handler>
  }
  /* USER CODE BEGIN FMAC_Init 2 */

  /* USER CODE END FMAC_Init 2 */

}
 800168a:	bf00      	nop
 800168c:	bd80      	pop	{r7, pc}
 800168e:	bf00      	nop
 8001690:	20000550 	.word	0x20000550
 8001694:	40021400 	.word	0x40021400

08001698 <HAL_FMAC_MspInit>:

void HAL_FMAC_MspInit(FMAC_HandleTypeDef* fmacHandle)
{
 8001698:	b480      	push	{r7}
 800169a:	b085      	sub	sp, #20
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]

  if(fmacHandle->Instance==FMAC)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	4a0a      	ldr	r2, [pc, #40]	; (80016d0 <HAL_FMAC_MspInit+0x38>)
 80016a6:	4293      	cmp	r3, r2
 80016a8:	d10b      	bne.n	80016c2 <HAL_FMAC_MspInit+0x2a>
  {
  /* USER CODE BEGIN FMAC_MspInit 0 */

  /* USER CODE END FMAC_MspInit 0 */
    /* FMAC clock enable */
    __HAL_RCC_FMAC_CLK_ENABLE();
 80016aa:	4b0a      	ldr	r3, [pc, #40]	; (80016d4 <HAL_FMAC_MspInit+0x3c>)
 80016ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016ae:	4a09      	ldr	r2, [pc, #36]	; (80016d4 <HAL_FMAC_MspInit+0x3c>)
 80016b0:	f043 0310 	orr.w	r3, r3, #16
 80016b4:	6493      	str	r3, [r2, #72]	; 0x48
 80016b6:	4b07      	ldr	r3, [pc, #28]	; (80016d4 <HAL_FMAC_MspInit+0x3c>)
 80016b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016ba:	f003 0310 	and.w	r3, r3, #16
 80016be:	60fb      	str	r3, [r7, #12]
 80016c0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN FMAC_MspInit 1 */

  /* USER CODE END FMAC_MspInit 1 */
  }
}
 80016c2:	bf00      	nop
 80016c4:	3714      	adds	r7, #20
 80016c6:	46bd      	mov	sp, r7
 80016c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016cc:	4770      	bx	lr
 80016ce:	bf00      	nop
 80016d0:	40021400 	.word	0x40021400
 80016d4:	40021000 	.word	0x40021000

080016d8 <HAL_GPIO_EXTI_Callback>:
extern TaskHandle_t xHandle_Button;
extern QueueHandle_t xExtIQueue;


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b086      	sub	sp, #24
 80016dc:	af00      	add	r7, sp, #0
 80016de:	4603      	mov	r3, r0
 80016e0:	80fb      	strh	r3, [r7, #6]
	Button_HandleTypeDef button;
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 80016e2:	2300      	movs	r3, #0
 80016e4:	60fb      	str	r3, [r7, #12]
	switch(GPIO_Pin){
 80016e6:	88fb      	ldrh	r3, [r7, #6]
 80016e8:	2b80      	cmp	r3, #128	; 0x80
 80016ea:	d01f      	beq.n	800172c <HAL_GPIO_EXTI_Callback+0x54>
 80016ec:	2b80      	cmp	r3, #128	; 0x80
 80016ee:	dc28      	bgt.n	8001742 <HAL_GPIO_EXTI_Callback+0x6a>
 80016f0:	2b40      	cmp	r3, #64	; 0x40
 80016f2:	d015      	beq.n	8001720 <HAL_GPIO_EXTI_Callback+0x48>
 80016f4:	2b40      	cmp	r3, #64	; 0x40
 80016f6:	dc24      	bgt.n	8001742 <HAL_GPIO_EXTI_Callback+0x6a>
 80016f8:	2b20      	cmp	r3, #32
 80016fa:	d01c      	beq.n	8001736 <HAL_GPIO_EXTI_Callback+0x5e>
 80016fc:	2b20      	cmp	r3, #32
 80016fe:	dc20      	bgt.n	8001742 <HAL_GPIO_EXTI_Callback+0x6a>
 8001700:	2b04      	cmp	r3, #4
 8001702:	d002      	beq.n	800170a <HAL_GPIO_EXTI_Callback+0x32>
 8001704:	2b10      	cmp	r3, #16
 8001706:	d005      	beq.n	8001714 <HAL_GPIO_EXTI_Callback+0x3c>
	case ENC_BTN_Pin:	//0x0020 PA5
		button.port = ENC_BTN_GPIO_Port;
		button.pin = ENC_BTN_Pin;
		break;
	default:
		break;
 8001708:	e01b      	b.n	8001742 <HAL_GPIO_EXTI_Callback+0x6a>
		button.port = USR_BTN_1_GPIO_Port;
 800170a:	4b1c      	ldr	r3, [pc, #112]	; (800177c <HAL_GPIO_EXTI_Callback+0xa4>)
 800170c:	613b      	str	r3, [r7, #16]
		button.pin = USR_BTN_1_Pin;
 800170e:	2304      	movs	r3, #4
 8001710:	82bb      	strh	r3, [r7, #20]
		break;
 8001712:	e017      	b.n	8001744 <HAL_GPIO_EXTI_Callback+0x6c>
		button.port = USR_BTN_2_GPIO_Port;
 8001714:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001718:	613b      	str	r3, [r7, #16]
		button.pin = USR_BTN_2_Pin;
 800171a:	2310      	movs	r3, #16
 800171c:	82bb      	strh	r3, [r7, #20]
		break;
 800171e:	e011      	b.n	8001744 <HAL_GPIO_EXTI_Callback+0x6c>
		button.port = USR_BTN_2_GPIO_Port;
 8001720:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001724:	613b      	str	r3, [r7, #16]
		button.pin = USR_BTN_2_Pin;
 8001726:	2310      	movs	r3, #16
 8001728:	82bb      	strh	r3, [r7, #20]
		break;
 800172a:	e00b      	b.n	8001744 <HAL_GPIO_EXTI_Callback+0x6c>
		button.port = Soft_NRST_GPIO_Port;
 800172c:	4b14      	ldr	r3, [pc, #80]	; (8001780 <HAL_GPIO_EXTI_Callback+0xa8>)
 800172e:	613b      	str	r3, [r7, #16]
		button.pin = Soft_NRST_Pin;
 8001730:	2380      	movs	r3, #128	; 0x80
 8001732:	82bb      	strh	r3, [r7, #20]
		break;
 8001734:	e006      	b.n	8001744 <HAL_GPIO_EXTI_Callback+0x6c>
		button.port = ENC_BTN_GPIO_Port;
 8001736:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800173a:	613b      	str	r3, [r7, #16]
		button.pin = ENC_BTN_Pin;
 800173c:	2320      	movs	r3, #32
 800173e:	82bb      	strh	r3, [r7, #20]
		break;
 8001740:	e000      	b.n	8001744 <HAL_GPIO_EXTI_Callback+0x6c>
		break;
 8001742:	bf00      	nop
	}
//	vTaskNotifyGiveFromISR(xHandle_Button, &higher_priority_task_woken);
    xQueueSendFromISR(xExtIQueue, &button, &xHigherPriorityTaskWoken);
 8001744:	4b0f      	ldr	r3, [pc, #60]	; (8001784 <HAL_GPIO_EXTI_Callback+0xac>)
 8001746:	6818      	ldr	r0, [r3, #0]
 8001748:	f107 020c 	add.w	r2, r7, #12
 800174c:	f107 0110 	add.w	r1, r7, #16
 8001750:	2300      	movs	r3, #0
 8001752:	f00d fc8f 	bl	800f074 <xQueueGenericSendFromISR>
    if(xHigherPriorityTaskWoken) portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	2b00      	cmp	r3, #0
 800175a:	d00a      	beq.n	8001772 <HAL_GPIO_EXTI_Callback+0x9a>
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	2b00      	cmp	r3, #0
 8001760:	d007      	beq.n	8001772 <HAL_GPIO_EXTI_Callback+0x9a>
 8001762:	4b09      	ldr	r3, [pc, #36]	; (8001788 <HAL_GPIO_EXTI_Callback+0xb0>)
 8001764:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001768:	601a      	str	r2, [r3, #0]
 800176a:	f3bf 8f4f 	dsb	sy
 800176e:	f3bf 8f6f 	isb	sy
}
 8001772:	bf00      	nop
 8001774:	3718      	adds	r7, #24
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	48000c00 	.word	0x48000c00
 8001780:	48000400 	.word	0x48000400
 8001784:	200005e0 	.word	0x200005e0
 8001788:	e000ed04 	.word	0xe000ed04

0800178c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b08c      	sub	sp, #48	; 0x30
 8001790:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001792:	f107 031c 	add.w	r3, r7, #28
 8001796:	2200      	movs	r2, #0
 8001798:	601a      	str	r2, [r3, #0]
 800179a:	605a      	str	r2, [r3, #4]
 800179c:	609a      	str	r2, [r3, #8]
 800179e:	60da      	str	r2, [r3, #12]
 80017a0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017a2:	4b74      	ldr	r3, [pc, #464]	; (8001974 <MX_GPIO_Init+0x1e8>)
 80017a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017a6:	4a73      	ldr	r2, [pc, #460]	; (8001974 <MX_GPIO_Init+0x1e8>)
 80017a8:	f043 0304 	orr.w	r3, r3, #4
 80017ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017ae:	4b71      	ldr	r3, [pc, #452]	; (8001974 <MX_GPIO_Init+0x1e8>)
 80017b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017b2:	f003 0304 	and.w	r3, r3, #4
 80017b6:	61bb      	str	r3, [r7, #24]
 80017b8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80017ba:	4b6e      	ldr	r3, [pc, #440]	; (8001974 <MX_GPIO_Init+0x1e8>)
 80017bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017be:	4a6d      	ldr	r2, [pc, #436]	; (8001974 <MX_GPIO_Init+0x1e8>)
 80017c0:	f043 0320 	orr.w	r3, r3, #32
 80017c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017c6:	4b6b      	ldr	r3, [pc, #428]	; (8001974 <MX_GPIO_Init+0x1e8>)
 80017c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017ca:	f003 0320 	and.w	r3, r3, #32
 80017ce:	617b      	str	r3, [r7, #20]
 80017d0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80017d2:	4b68      	ldr	r3, [pc, #416]	; (8001974 <MX_GPIO_Init+0x1e8>)
 80017d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017d6:	4a67      	ldr	r2, [pc, #412]	; (8001974 <MX_GPIO_Init+0x1e8>)
 80017d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80017dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017de:	4b65      	ldr	r3, [pc, #404]	; (8001974 <MX_GPIO_Init+0x1e8>)
 80017e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80017e6:	613b      	str	r3, [r7, #16]
 80017e8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017ea:	4b62      	ldr	r3, [pc, #392]	; (8001974 <MX_GPIO_Init+0x1e8>)
 80017ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017ee:	4a61      	ldr	r2, [pc, #388]	; (8001974 <MX_GPIO_Init+0x1e8>)
 80017f0:	f043 0301 	orr.w	r3, r3, #1
 80017f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017f6:	4b5f      	ldr	r3, [pc, #380]	; (8001974 <MX_GPIO_Init+0x1e8>)
 80017f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017fa:	f003 0301 	and.w	r3, r3, #1
 80017fe:	60fb      	str	r3, [r7, #12]
 8001800:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001802:	4b5c      	ldr	r3, [pc, #368]	; (8001974 <MX_GPIO_Init+0x1e8>)
 8001804:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001806:	4a5b      	ldr	r2, [pc, #364]	; (8001974 <MX_GPIO_Init+0x1e8>)
 8001808:	f043 0302 	orr.w	r3, r3, #2
 800180c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800180e:	4b59      	ldr	r3, [pc, #356]	; (8001974 <MX_GPIO_Init+0x1e8>)
 8001810:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001812:	f003 0302 	and.w	r3, r3, #2
 8001816:	60bb      	str	r3, [r7, #8]
 8001818:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800181a:	4b56      	ldr	r3, [pc, #344]	; (8001974 <MX_GPIO_Init+0x1e8>)
 800181c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800181e:	4a55      	ldr	r2, [pc, #340]	; (8001974 <MX_GPIO_Init+0x1e8>)
 8001820:	f043 0308 	orr.w	r3, r3, #8
 8001824:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001826:	4b53      	ldr	r3, [pc, #332]	; (8001974 <MX_GPIO_Init+0x1e8>)
 8001828:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800182a:	f003 0308 	and.w	r3, r3, #8
 800182e:	607b      	str	r3, [r7, #4]
 8001830:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Pwr_Enable_U_Pin|Pwr_Enable_V_Pin|Pwr_Enable_W_Pin|USR_LED_3_Pin
 8001832:	2200      	movs	r2, #0
 8001834:	f44f 417c 	mov.w	r1, #64512	; 0xfc00
 8001838:	484f      	ldr	r0, [pc, #316]	; (8001978 <MX_GPIO_Init+0x1ec>)
 800183a:	f003 fc3b 	bl	80050b4 <HAL_GPIO_WritePin>
                          |USR_LED_2_Pin|USR_LED_1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USR_LED_4_GPIO_Port, USR_LED_4_Pin, GPIO_PIN_RESET);
 800183e:	2200      	movs	r2, #0
 8001840:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001844:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001848:	f003 fc34 	bl	80050b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin */
  GPIO_InitStruct.Pin = Pwr_Enable_U_Pin|Pwr_Enable_V_Pin|Pwr_Enable_W_Pin|USR_LED_3_Pin
 800184c:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8001850:	61fb      	str	r3, [r7, #28]
                          |USR_LED_2_Pin|USR_LED_1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001852:	2301      	movs	r3, #1
 8001854:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001856:	2300      	movs	r3, #0
 8001858:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800185a:	2300      	movs	r3, #0
 800185c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800185e:	f107 031c 	add.w	r3, r7, #28
 8001862:	4619      	mov	r1, r3
 8001864:	4844      	ldr	r0, [pc, #272]	; (8001978 <MX_GPIO_Init+0x1ec>)
 8001866:	f003 faa3 	bl	8004db0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NRST_Pin;
 800186a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800186e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001870:	2300      	movs	r3, #0
 8001872:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001874:	2301      	movs	r3, #1
 8001876:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(NRST_GPIO_Port, &GPIO_InitStruct);
 8001878:	f107 031c 	add.w	r3, r7, #28
 800187c:	4619      	mov	r1, r3
 800187e:	483f      	ldr	r0, [pc, #252]	; (800197c <MX_GPIO_Init+0x1f0>)
 8001880:	f003 fa96 	bl	8004db0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USR_BTN_2_Pin;
 8001884:	2310      	movs	r3, #16
 8001886:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001888:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800188c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800188e:	2301      	movs	r3, #1
 8001890:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USR_BTN_2_GPIO_Port, &GPIO_InitStruct);
 8001892:	f107 031c 	add.w	r3, r7, #28
 8001896:	4619      	mov	r1, r3
 8001898:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800189c:	f003 fa88 	bl	8004db0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENC_BTN_Pin;
 80018a0:	2320      	movs	r3, #32
 80018a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80018a4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80018a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018aa:	2300      	movs	r3, #0
 80018ac:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ENC_BTN_GPIO_Port, &GPIO_InitStruct);
 80018ae:	f107 031c 	add.w	r3, r7, #28
 80018b2:	4619      	mov	r1, r3
 80018b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018b8:	f003 fa7a 	bl	8004db0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Nucleo_NRST_Pin;
 80018bc:	2301      	movs	r3, #1
 80018be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80018c0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80018c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c6:	2300      	movs	r3, #0
 80018c8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Nucleo_NRST_GPIO_Port, &GPIO_InitStruct);
 80018ca:	f107 031c 	add.w	r3, r7, #28
 80018ce:	4619      	mov	r1, r3
 80018d0:	482b      	ldr	r0, [pc, #172]	; (8001980 <MX_GPIO_Init+0x1f4>)
 80018d2:	f003 fa6d 	bl	8004db0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USR_LED_4_Pin;
 80018d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80018da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018dc:	2301      	movs	r3, #1
 80018de:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e0:	2300      	movs	r3, #0
 80018e2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018e4:	2300      	movs	r3, #0
 80018e6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USR_LED_4_GPIO_Port, &GPIO_InitStruct);
 80018e8:	f107 031c 	add.w	r3, r7, #28
 80018ec:	4619      	mov	r1, r3
 80018ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018f2:	f003 fa5d 	bl	8004db0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USR_BTN_1_Pin;
 80018f6:	2304      	movs	r3, #4
 80018f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80018fa:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80018fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001900:	2301      	movs	r3, #1
 8001902:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USR_BTN_1_GPIO_Port, &GPIO_InitStruct);
 8001904:	f107 031c 	add.w	r3, r7, #28
 8001908:	4619      	mov	r1, r3
 800190a:	481e      	ldr	r0, [pc, #120]	; (8001984 <MX_GPIO_Init+0x1f8>)
 800190c:	f003 fa50 	bl	8004db0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = USR_BTN_3_Pin|Soft_NRST_Pin;
 8001910:	23c0      	movs	r3, #192	; 0xc0
 8001912:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001914:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001918:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800191a:	2301      	movs	r3, #1
 800191c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800191e:	f107 031c 	add.w	r3, r7, #28
 8001922:	4619      	mov	r1, r3
 8001924:	4816      	ldr	r0, [pc, #88]	; (8001980 <MX_GPIO_Init+0x1f4>)
 8001926:	f003 fa43 	bl	8004db0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 800192a:	2200      	movs	r2, #0
 800192c:	2105      	movs	r1, #5
 800192e:	2006      	movs	r0, #6
 8001930:	f003 f96a 	bl	8004c08 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001934:	2006      	movs	r0, #6
 8001936:	f003 f981 	bl	8004c3c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 800193a:	2200      	movs	r2, #0
 800193c:	2105      	movs	r1, #5
 800193e:	2008      	movs	r0, #8
 8001940:	f003 f962 	bl	8004c08 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001944:	2008      	movs	r0, #8
 8001946:	f003 f979 	bl	8004c3c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 800194a:	2200      	movs	r2, #0
 800194c:	2105      	movs	r1, #5
 800194e:	200a      	movs	r0, #10
 8001950:	f003 f95a 	bl	8004c08 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001954:	200a      	movs	r0, #10
 8001956:	f003 f971 	bl	8004c3c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 800195a:	2200      	movs	r2, #0
 800195c:	2105      	movs	r1, #5
 800195e:	2017      	movs	r0, #23
 8001960:	f003 f952 	bl	8004c08 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001964:	2017      	movs	r0, #23
 8001966:	f003 f969 	bl	8004c3c <HAL_NVIC_EnableIRQ>

}
 800196a:	bf00      	nop
 800196c:	3730      	adds	r7, #48	; 0x30
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}
 8001972:	bf00      	nop
 8001974:	40021000 	.word	0x40021000
 8001978:	48000800 	.word	0x48000800
 800197c:	48001800 	.word	0x48001800
 8001980:	48000400 	.word	0x48000400
 8001984:	48000c00 	.word	0x48000c00

08001988 <I2C_Scan>:
  /* USER CODE END I2C2_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void I2C_Scan(I2C_HandleTypeDef* i2cHandle){
 8001988:	b580      	push	{r7, lr}
 800198a:	b084      	sub	sp, #16
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
	uint8_t i2c_Number = 0;
 8001990:	2300      	movs	r3, #0
 8001992:	73fb      	strb	r3, [r7, #15]
	if(i2cHandle->Instance==I2C1) i2c_Number = 1;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	4a23      	ldr	r2, [pc, #140]	; (8001a28 <I2C_Scan+0xa0>)
 800199a:	4293      	cmp	r3, r2
 800199c:	d101      	bne.n	80019a2 <I2C_Scan+0x1a>
 800199e:	2301      	movs	r3, #1
 80019a0:	73fb      	strb	r3, [r7, #15]
	if(i2cHandle->Instance==I2C2) i2c_Number = 2;
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	4a21      	ldr	r2, [pc, #132]	; (8001a2c <I2C_Scan+0xa4>)
 80019a8:	4293      	cmp	r3, r2
 80019aa:	d101      	bne.n	80019b0 <I2C_Scan+0x28>
 80019ac:	2302      	movs	r3, #2
 80019ae:	73fb      	strb	r3, [r7, #15]
	if(i2cHandle->Instance==I2C3) i2c_Number = 3;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4a1e      	ldr	r2, [pc, #120]	; (8001a30 <I2C_Scan+0xa8>)
 80019b6:	4293      	cmp	r3, r2
 80019b8:	d101      	bne.n	80019be <I2C_Scan+0x36>
 80019ba:	2303      	movs	r3, #3
 80019bc:	73fb      	strb	r3, [r7, #15]
	printf("### Scanning I2C bus number %d ###\r\n", i2c_Number);
 80019be:	7bfb      	ldrb	r3, [r7, #15]
 80019c0:	4619      	mov	r1, r3
 80019c2:	481c      	ldr	r0, [pc, #112]	; (8001a34 <I2C_Scan+0xac>)
 80019c4:	f010 fcb6 	bl	8012334 <iprintf>
	for(uint16_t addr = 0x00; addr < 0x80; addr++){
 80019c8:	2300      	movs	r3, #0
 80019ca:	81bb      	strh	r3, [r7, #12]
 80019cc:	e022      	b.n	8001a14 <I2C_Scan+0x8c>
		if(HAL_I2C_IsDeviceReady(i2cHandle, addr<<1, 1, 10) == HAL_OK){
 80019ce:	89bb      	ldrh	r3, [r7, #12]
 80019d0:	005b      	lsls	r3, r3, #1
 80019d2:	b299      	uxth	r1, r3
 80019d4:	230a      	movs	r3, #10
 80019d6:	2201      	movs	r2, #1
 80019d8:	6878      	ldr	r0, [r7, #4]
 80019da:	f003 fbb5 	bl	8005148 <HAL_I2C_IsDeviceReady>
 80019de:	4603      	mov	r3, r0
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d105      	bne.n	80019f0 <I2C_Scan+0x68>
			printf("0x%2x ", addr);
 80019e4:	89bb      	ldrh	r3, [r7, #12]
 80019e6:	4619      	mov	r1, r3
 80019e8:	4813      	ldr	r0, [pc, #76]	; (8001a38 <I2C_Scan+0xb0>)
 80019ea:	f010 fca3 	bl	8012334 <iprintf>
 80019ee:	e002      	b.n	80019f6 <I2C_Scan+0x6e>
		}
		else{
			printf(" --  ");
 80019f0:	4812      	ldr	r0, [pc, #72]	; (8001a3c <I2C_Scan+0xb4>)
 80019f2:	f010 fc9f 	bl	8012334 <iprintf>
		}
		if((addr+1)%8 == 0){
 80019f6:	89bb      	ldrh	r3, [r7, #12]
 80019f8:	3301      	adds	r3, #1
 80019fa:	f003 0307 	and.w	r3, r3, #7
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d102      	bne.n	8001a08 <I2C_Scan+0x80>
			printf("\r\n");
 8001a02:	480f      	ldr	r0, [pc, #60]	; (8001a40 <I2C_Scan+0xb8>)
 8001a04:	f010 fcfc 	bl	8012400 <puts>
		}
		HAL_Delay(1);
 8001a08:	2001      	movs	r0, #1
 8001a0a:	f001 fc37 	bl	800327c <HAL_Delay>
	for(uint16_t addr = 0x00; addr < 0x80; addr++){
 8001a0e:	89bb      	ldrh	r3, [r7, #12]
 8001a10:	3301      	adds	r3, #1
 8001a12:	81bb      	strh	r3, [r7, #12]
 8001a14:	89bb      	ldrh	r3, [r7, #12]
 8001a16:	2b7f      	cmp	r3, #127	; 0x7f
 8001a18:	d9d9      	bls.n	80019ce <I2C_Scan+0x46>
	}
	printf("\r\n");
 8001a1a:	4809      	ldr	r0, [pc, #36]	; (8001a40 <I2C_Scan+0xb8>)
 8001a1c:	f010 fcf0 	bl	8012400 <puts>
}
 8001a20:	bf00      	nop
 8001a22:	3710      	adds	r7, #16
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bd80      	pop	{r7, pc}
 8001a28:	40005400 	.word	0x40005400
 8001a2c:	40005800 	.word	0x40005800
 8001a30:	40007800 	.word	0x40007800
 8001a34:	08014420 	.word	0x08014420
 8001a38:	08014448 	.word	0x08014448
 8001a3c:	08014450 	.word	0x08014450
 8001a40:	08014458 	.word	0x08014458

08001a44 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b082      	sub	sp, #8
 8001a48:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a4a:	f001 fbe0 	bl	800320e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a4e:	f000 f8ef 	bl	8001c30 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a52:	f7ff fe9b 	bl	800178c <MX_GPIO_Init>
  MX_ADC1_Init();
 8001a56:	f7ff fa9d 	bl	8000f94 <MX_ADC1_Init>
  MX_ADC2_Init();
 8001a5a:	f7ff fb13 	bl	8001084 <MX_ADC2_Init>
  MX_ADC3_Init();
 8001a5e:	f7ff fb77 	bl	8001150 <MX_ADC3_Init>
  MX_ADC4_Init();
 8001a62:	f7ff fbed 	bl	8001240 <MX_ADC4_Init>
  MX_CORDIC_Init();
 8001a66:	f7ff fdcf 	bl	8001608 <MX_CORDIC_Init>
  MX_FMAC_Init();
 8001a6a:	f7ff fe01 	bl	8001670 <MX_FMAC_Init>
//  MX_I2C2_Init();
  MX_TIM8_Init();
 8001a6e:	f000 fbd3 	bl	8002218 <MX_TIM8_Init>
  MX_TIM15_Init();
 8001a72:	f000 fc69 	bl	8002348 <MX_TIM15_Init>
  MX_TIM17_Init();
 8001a76:	f000 fd61 	bl	800253c <MX_TIM17_Init>
  MX_USART1_UART_Init();
 8001a7a:	f000 ff43 	bl	8002904 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8001a7e:	f000 ff8d 	bl	800299c <MX_USART3_UART_Init>
  MX_TIM16_Init();
 8001a82:	f000 fce1 	bl	8002448 <MX_TIM16_Init>
  MX_TIM1_Init();
 8001a86:	f000 fb03 	bl	8002090 <MX_TIM1_Init>
  MX_USB_Device_Init();
 8001a8a:	f00f fa57 	bl	8010f3c <MX_USB_Device_Init>
  MX_TIM3_Init();
 8001a8e:	f000 fb6d 	bl	800216c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

	printf(	"*****************************************\r\n"
 8001a92:	4849      	ldr	r0, [pc, #292]	; (8001bb8 <main+0x174>)
 8001a94:	f010 fcb4 	bl	8012400 <puts>
			"* ENSEA INVERTER PROJECT                *\r\n"
			"* Firmware revision 1.1                 *\r\n"
			"* By Nicolas Papazoglou & Alexis Martin *\r\n"
			"*****************************************\r\n");
	I2C_Scan(&hi2c2);
 8001a98:	4848      	ldr	r0, [pc, #288]	; (8001bbc <main+0x178>)
 8001a9a:	f7ff ff75 	bl	8001988 <I2C_Scan>
	xUartMutex = xSemaphoreCreateMutex();
 8001a9e:	2001      	movs	r0, #1
 8001aa0:	f00d f9d1 	bl	800ee46 <xQueueCreateMutex>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	4a46      	ldr	r2, [pc, #280]	; (8001bc0 <main+0x17c>)
 8001aa8:	6013      	str	r3, [r2, #0]
	xI2CMutex = xSemaphoreCreateMutex();
 8001aaa:	2001      	movs	r0, #1
 8001aac:	f00d f9cb 	bl	800ee46 <xQueueCreateMutex>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	4a44      	ldr	r2, [pc, #272]	; (8001bc4 <main+0x180>)
 8001ab4:	6013      	str	r3, [r2, #0]
	xTemperatureQueue = xQueueCreate(1, sizeof(float));
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	2104      	movs	r1, #4
 8001aba:	2001      	movs	r0, #1
 8001abc:	f00d f954 	bl	800ed68 <xQueueGenericCreate>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	4a41      	ldr	r2, [pc, #260]	; (8001bc8 <main+0x184>)
 8001ac4:	6013      	str	r3, [r2, #0]
	xExtIQueue = xQueueCreate(1, sizeof(Button_HandleTypeDef));
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	2108      	movs	r1, #8
 8001aca:	2001      	movs	r0, #1
 8001acc:	f00d f94c 	bl	800ed68 <xQueueGenericCreate>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	4a3e      	ldr	r2, [pc, #248]	; (8001bcc <main+0x188>)
 8001ad4:	6013      	str	r3, [r2, #0]

	HAL_GPIO_WritePin(Pwr_Enable_U_GPIO_Port, Pwr_Enable_U_Pin, RESET);
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001adc:	483c      	ldr	r0, [pc, #240]	; (8001bd0 <main+0x18c>)
 8001ade:	f003 fae9 	bl	80050b4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Pwr_Enable_V_GPIO_Port, Pwr_Enable_V_Pin, RESET);
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001ae8:	4839      	ldr	r0, [pc, #228]	; (8001bd0 <main+0x18c>)
 8001aea:	f003 fae3 	bl	80050b4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Pwr_Enable_W_GPIO_Port, Pwr_Enable_W_Pin, RESET);
 8001aee:	2200      	movs	r2, #0
 8001af0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001af4:	4836      	ldr	r0, [pc, #216]	; (8001bd0 <main+0x18c>)
 8001af6:	f003 fadd 	bl	80050b4 <HAL_GPIO_WritePin>

	if(pdPASS==xTaskCreate(vTask_Break, "Break_Task", STACK_SIZE, (void *) &htim17, Break_Task_Priority, &xHandle_Break)){
 8001afa:	4b36      	ldr	r3, [pc, #216]	; (8001bd4 <main+0x190>)
 8001afc:	9301      	str	r3, [sp, #4]
 8001afe:	2306      	movs	r3, #6
 8001b00:	9300      	str	r3, [sp, #0]
 8001b02:	4b35      	ldr	r3, [pc, #212]	; (8001bd8 <main+0x194>)
 8001b04:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b08:	4934      	ldr	r1, [pc, #208]	; (8001bdc <main+0x198>)
 8001b0a:	4835      	ldr	r0, [pc, #212]	; (8001be0 <main+0x19c>)
 8001b0c:	f00d fe62 	bl	800f7d4 <xTaskCreate>
 8001b10:	4603      	mov	r3, r0
 8001b12:	2b01      	cmp	r3, #1
 8001b14:	d103      	bne.n	8001b1e <main+0xda>
		printf("Break_Task successfully created\r\n");
 8001b16:	4833      	ldr	r0, [pc, #204]	; (8001be4 <main+0x1a0>)
 8001b18:	f010 fc72 	bl	8012400 <puts>
 8001b1c:	e002      	b.n	8001b24 <main+0xe0>
	}
	else{
		printf("Break_Task creation error\r\n");
 8001b1e:	4832      	ldr	r0, [pc, #200]	; (8001be8 <main+0x1a4>)
 8001b20:	f010 fc6e 	bl	8012400 <puts>
	}

	if(pdPASS==xTaskCreate(vTask_Button, "Button_Task", STACK_SIZE, (void *) NULL, Button_Task_Priority, &xHandle_Button)){
 8001b24:	4b31      	ldr	r3, [pc, #196]	; (8001bec <main+0x1a8>)
 8001b26:	9301      	str	r3, [sp, #4]
 8001b28:	2305      	movs	r3, #5
 8001b2a:	9300      	str	r3, [sp, #0]
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b32:	492f      	ldr	r1, [pc, #188]	; (8001bf0 <main+0x1ac>)
 8001b34:	482f      	ldr	r0, [pc, #188]	; (8001bf4 <main+0x1b0>)
 8001b36:	f00d fe4d 	bl	800f7d4 <xTaskCreate>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	2b01      	cmp	r3, #1
 8001b3e:	d103      	bne.n	8001b48 <main+0x104>
		printf("Button_Task successfully created\r\n");
 8001b40:	482d      	ldr	r0, [pc, #180]	; (8001bf8 <main+0x1b4>)
 8001b42:	f010 fc5d 	bl	8012400 <puts>
 8001b46:	e002      	b.n	8001b4e <main+0x10a>
	}
	else{
		printf("Button_Task creation error\r\n");
 8001b48:	482c      	ldr	r0, [pc, #176]	; (8001bfc <main+0x1b8>)
 8001b4a:	f010 fc59 	bl	8012400 <puts>
//	}
//	else{
//		printf("LCD_Task creation error\r\n");
//	}

	if(pdPASS==xTaskCreate(vTask_RotaryEnc, "RotEncorder_Task", STACK_SIZE, (void *) &htim3, RotaryEnc_Task_Priority, &xHandle_Rotary)){
 8001b4e:	4b2c      	ldr	r3, [pc, #176]	; (8001c00 <main+0x1bc>)
 8001b50:	9301      	str	r3, [sp, #4]
 8001b52:	2304      	movs	r3, #4
 8001b54:	9300      	str	r3, [sp, #0]
 8001b56:	4b2b      	ldr	r3, [pc, #172]	; (8001c04 <main+0x1c0>)
 8001b58:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b5c:	492a      	ldr	r1, [pc, #168]	; (8001c08 <main+0x1c4>)
 8001b5e:	482b      	ldr	r0, [pc, #172]	; (8001c0c <main+0x1c8>)
 8001b60:	f00d fe38 	bl	800f7d4 <xTaskCreate>
 8001b64:	4603      	mov	r3, r0
 8001b66:	2b01      	cmp	r3, #1
 8001b68:	d103      	bne.n	8001b72 <main+0x12e>
		printf("RotEncorder_Task successfully created\r\n");
 8001b6a:	4829      	ldr	r0, [pc, #164]	; (8001c10 <main+0x1cc>)
 8001b6c:	f010 fc48 	bl	8012400 <puts>
 8001b70:	e002      	b.n	8001b78 <main+0x134>
	}
	else{
		printf("RotEncorder_Task creation error\r\n");
 8001b72:	4828      	ldr	r0, [pc, #160]	; (8001c14 <main+0x1d0>)
 8001b74:	f010 fc44 	bl	8012400 <puts>
	}

	if(pdPASS==xTaskCreate(vTask_LED, "LED_Task", STACK_SIZE, (void *) NULL, LED_Task_Priority, &xHandle_LED)){
 8001b78:	4b27      	ldr	r3, [pc, #156]	; (8001c18 <main+0x1d4>)
 8001b7a:	9301      	str	r3, [sp, #4]
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	9300      	str	r3, [sp, #0]
 8001b80:	2300      	movs	r3, #0
 8001b82:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b86:	4925      	ldr	r1, [pc, #148]	; (8001c1c <main+0x1d8>)
 8001b88:	4825      	ldr	r0, [pc, #148]	; (8001c20 <main+0x1dc>)
 8001b8a:	f00d fe23 	bl	800f7d4 <xTaskCreate>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	2b01      	cmp	r3, #1
 8001b92:	d103      	bne.n	8001b9c <main+0x158>
		printf("LED_Task successfully created\r\n");
 8001b94:	4823      	ldr	r0, [pc, #140]	; (8001c24 <main+0x1e0>)
 8001b96:	f010 fc33 	bl	8012400 <puts>
 8001b9a:	e002      	b.n	8001ba2 <main+0x15e>
	}
	else{
		printf("LED_Task creation error\r\n");
 8001b9c:	4822      	ldr	r0, [pc, #136]	; (8001c28 <main+0x1e4>)
 8001b9e:	f010 fc2f 	bl	8012400 <puts>
//		printf("Fan_Task creation error\r\n");
//	}



	printf("Starting Scheduler... \r\n");
 8001ba2:	4822      	ldr	r0, [pc, #136]	; (8001c2c <main+0x1e8>)
 8001ba4:	f010 fc2c 	bl	8012400 <puts>
	vTaskStartScheduler();
 8001ba8:	f00d ff92 	bl	800fad0 <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8001bac:	f7ff fd0a 	bl	80015c4 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001bb0:	f00c ff7b 	bl	800eaaa <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

	while (1)
 8001bb4:	e7fe      	b.n	8001bb4 <main+0x170>
 8001bb6:	bf00      	nop
 8001bb8:	0801445c 	.word	0x0801445c
 8001bbc:	20000588 	.word	0x20000588
 8001bc0:	200005d4 	.word	0x200005d4
 8001bc4:	200005d8 	.word	0x200005d8
 8001bc8:	200005dc 	.word	0x200005dc
 8001bcc:	200005e0 	.word	0x200005e0
 8001bd0:	48000800 	.word	0x48000800
 8001bd4:	200005e4 	.word	0x200005e4
 8001bd8:	200007c0 	.word	0x200007c0
 8001bdc:	08014534 	.word	0x08014534
 8001be0:	08002b69 	.word	0x08002b69
 8001be4:	08014540 	.word	0x08014540
 8001be8:	08014564 	.word	0x08014564
 8001bec:	200005e8 	.word	0x200005e8
 8001bf0:	08014580 	.word	0x08014580
 8001bf4:	08002dfd 	.word	0x08002dfd
 8001bf8:	0801458c 	.word	0x0801458c
 8001bfc:	080145b0 	.word	0x080145b0
 8001c00:	200005ec 	.word	0x200005ec
 8001c04:	20000690 	.word	0x20000690
 8001c08:	080145cc 	.word	0x080145cc
 8001c0c:	08003129 	.word	0x08003129
 8001c10:	080145e0 	.word	0x080145e0
 8001c14:	08014608 	.word	0x08014608
 8001c18:	200005f0 	.word	0x200005f0
 8001c1c:	0801462c 	.word	0x0801462c
 8001c20:	08003039 	.word	0x08003039
 8001c24:	08014638 	.word	0x08014638
 8001c28:	08014658 	.word	0x08014658
 8001c2c:	08014674 	.word	0x08014674

08001c30 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b094      	sub	sp, #80	; 0x50
 8001c34:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c36:	f107 0318 	add.w	r3, r7, #24
 8001c3a:	2238      	movs	r2, #56	; 0x38
 8001c3c:	2100      	movs	r1, #0
 8001c3e:	4618      	mov	r0, r3
 8001c40:	f010 fcbe 	bl	80125c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c44:	1d3b      	adds	r3, r7, #4
 8001c46:	2200      	movs	r2, #0
 8001c48:	601a      	str	r2, [r3, #0]
 8001c4a:	605a      	str	r2, [r3, #4]
 8001c4c:	609a      	str	r2, [r3, #8]
 8001c4e:	60da      	str	r2, [r3, #12]
 8001c50:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001c52:	2000      	movs	r0, #0
 8001c54:	f005 f8f2 	bl	8006e3c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8001c58:	2321      	movs	r3, #33	; 0x21
 8001c5a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001c5c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001c60:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001c62:	2301      	movs	r3, #1
 8001c64:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c66:	2302      	movs	r3, #2
 8001c68:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001c6a:	2303      	movs	r3, #3
 8001c6c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8001c6e:	2304      	movs	r3, #4
 8001c70:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8001c72:	2355      	movs	r3, #85	; 0x55
 8001c74:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001c76:	2302      	movs	r3, #2
 8001c78:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 8001c7a:	2304      	movs	r3, #4
 8001c7c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001c7e:	2302      	movs	r3, #2
 8001c80:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c82:	f107 0318 	add.w	r3, r7, #24
 8001c86:	4618      	mov	r0, r3
 8001c88:	f005 f97c 	bl	8006f84 <HAL_RCC_OscConfig>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d001      	beq.n	8001c96 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001c92:	f000 f83d 	bl	8001d10 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c96:	230f      	movs	r3, #15
 8001c98:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c9a:	2303      	movs	r3, #3
 8001c9c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001caa:	1d3b      	adds	r3, r7, #4
 8001cac:	2104      	movs	r1, #4
 8001cae:	4618      	mov	r0, r3
 8001cb0:	f005 fc80 	bl	80075b4 <HAL_RCC_ClockConfig>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d001      	beq.n	8001cbe <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8001cba:	f000 f829 	bl	8001d10 <Error_Handler>
  }
}
 8001cbe:	bf00      	nop
 8001cc0:	3750      	adds	r7, #80	; 0x50
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}
	...

08001cc8 <__io_putchar>:

/* USER CODE BEGIN 4 */
PUTCHAR_PROTOTYPE
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b082      	sub	sp, #8
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
	/* Place your implementation of fputc here */
	/* e.g. write a character to the USART1 and Loop until the end of transmission */
	HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 0xFFFF);
 8001cd0:	1d39      	adds	r1, r7, #4
 8001cd2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001cd6:	2201      	movs	r2, #1
 8001cd8:	4803      	ldr	r0, [pc, #12]	; (8001ce8 <__io_putchar+0x20>)
 8001cda:	f008 f99d 	bl	800a018 <HAL_UART_Transmit>

	return ch;
 8001cde:	687b      	ldr	r3, [r7, #4]
}
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	3708      	adds	r7, #8
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bd80      	pop	{r7, pc}
 8001ce8:	2000089c 	.word	0x2000089c

08001cec <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b082      	sub	sp, #8
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4a04      	ldr	r2, [pc, #16]	; (8001d0c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	d101      	bne.n	8001d02 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001cfe:	f001 fa9f 	bl	8003240 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001d02:	bf00      	nop
 8001d04:	3708      	adds	r7, #8
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}
 8001d0a:	bf00      	nop
 8001d0c:	40001000 	.word	0x40001000

08001d10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d10:	b480      	push	{r7}
 8001d12:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d14:	b672      	cpsid	i
}
 8001d16:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001d18:	e7fe      	b.n	8001d18 <Error_Handler+0x8>
	...

08001d1c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b082      	sub	sp, #8
 8001d20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d22:	4b11      	ldr	r3, [pc, #68]	; (8001d68 <HAL_MspInit+0x4c>)
 8001d24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d26:	4a10      	ldr	r2, [pc, #64]	; (8001d68 <HAL_MspInit+0x4c>)
 8001d28:	f043 0301 	orr.w	r3, r3, #1
 8001d2c:	6613      	str	r3, [r2, #96]	; 0x60
 8001d2e:	4b0e      	ldr	r3, [pc, #56]	; (8001d68 <HAL_MspInit+0x4c>)
 8001d30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d32:	f003 0301 	and.w	r3, r3, #1
 8001d36:	607b      	str	r3, [r7, #4]
 8001d38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d3a:	4b0b      	ldr	r3, [pc, #44]	; (8001d68 <HAL_MspInit+0x4c>)
 8001d3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d3e:	4a0a      	ldr	r2, [pc, #40]	; (8001d68 <HAL_MspInit+0x4c>)
 8001d40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d44:	6593      	str	r3, [r2, #88]	; 0x58
 8001d46:	4b08      	ldr	r3, [pc, #32]	; (8001d68 <HAL_MspInit+0x4c>)
 8001d48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d4e:	603b      	str	r3, [r7, #0]
 8001d50:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001d52:	2200      	movs	r2, #0
 8001d54:	210f      	movs	r1, #15
 8001d56:	f06f 0001 	mvn.w	r0, #1
 8001d5a:	f002 ff55 	bl	8004c08 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d5e:	bf00      	nop
 8001d60:	3708      	adds	r7, #8
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}
 8001d66:	bf00      	nop
 8001d68:	40021000 	.word	0x40021000

08001d6c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b08c      	sub	sp, #48	; 0x30
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001d74:	2300      	movs	r3, #0
 8001d76:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              uwPrescalerValue = 0;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001d7c:	4b2c      	ldr	r3, [pc, #176]	; (8001e30 <HAL_InitTick+0xc4>)
 8001d7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d80:	4a2b      	ldr	r2, [pc, #172]	; (8001e30 <HAL_InitTick+0xc4>)
 8001d82:	f043 0310 	orr.w	r3, r3, #16
 8001d86:	6593      	str	r3, [r2, #88]	; 0x58
 8001d88:	4b29      	ldr	r3, [pc, #164]	; (8001e30 <HAL_InitTick+0xc4>)
 8001d8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d8c:	f003 0310 	and.w	r3, r3, #16
 8001d90:	60bb      	str	r3, [r7, #8]
 8001d92:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001d94:	f107 020c 	add.w	r2, r7, #12
 8001d98:	f107 0310 	add.w	r3, r7, #16
 8001d9c:	4611      	mov	r1, r2
 8001d9e:	4618      	mov	r0, r3
 8001da0:	f005 fddc 	bl	800795c <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001da4:	f005 fdae 	bl	8007904 <HAL_RCC_GetPCLK1Freq>
 8001da8:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001daa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dac:	4a21      	ldr	r2, [pc, #132]	; (8001e34 <HAL_InitTick+0xc8>)
 8001dae:	fba2 2303 	umull	r2, r3, r2, r3
 8001db2:	0c9b      	lsrs	r3, r3, #18
 8001db4:	3b01      	subs	r3, #1
 8001db6:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001db8:	4b1f      	ldr	r3, [pc, #124]	; (8001e38 <HAL_InitTick+0xcc>)
 8001dba:	4a20      	ldr	r2, [pc, #128]	; (8001e3c <HAL_InitTick+0xd0>)
 8001dbc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001dbe:	4b1e      	ldr	r3, [pc, #120]	; (8001e38 <HAL_InitTick+0xcc>)
 8001dc0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001dc4:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001dc6:	4a1c      	ldr	r2, [pc, #112]	; (8001e38 <HAL_InitTick+0xcc>)
 8001dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dca:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001dcc:	4b1a      	ldr	r3, [pc, #104]	; (8001e38 <HAL_InitTick+0xcc>)
 8001dce:	2200      	movs	r2, #0
 8001dd0:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001dd2:	4b19      	ldr	r3, [pc, #100]	; (8001e38 <HAL_InitTick+0xcc>)
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 8001dd8:	4817      	ldr	r0, [pc, #92]	; (8001e38 <HAL_InitTick+0xcc>)
 8001dda:	f006 f883 	bl	8007ee4 <HAL_TIM_Base_Init>
 8001dde:	4603      	mov	r3, r0
 8001de0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8001de4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d11b      	bne.n	8001e24 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001dec:	4812      	ldr	r0, [pc, #72]	; (8001e38 <HAL_InitTick+0xcc>)
 8001dee:	f006 f8d1 	bl	8007f94 <HAL_TIM_Base_Start_IT>
 8001df2:	4603      	mov	r3, r0
 8001df4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8001df8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d111      	bne.n	8001e24 <HAL_InitTick+0xb8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001e00:	2036      	movs	r0, #54	; 0x36
 8001e02:	f002 ff1b 	bl	8004c3c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	2b0f      	cmp	r3, #15
 8001e0a:	d808      	bhi.n	8001e1e <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	6879      	ldr	r1, [r7, #4]
 8001e10:	2036      	movs	r0, #54	; 0x36
 8001e12:	f002 fef9 	bl	8004c08 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001e16:	4a0a      	ldr	r2, [pc, #40]	; (8001e40 <HAL_InitTick+0xd4>)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6013      	str	r3, [r2, #0]
 8001e1c:	e002      	b.n	8001e24 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 8001e1e:	2301      	movs	r3, #1
 8001e20:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001e24:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8001e28:	4618      	mov	r0, r3
 8001e2a:	3730      	adds	r7, #48	; 0x30
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bd80      	pop	{r7, pc}
 8001e30:	40021000 	.word	0x40021000
 8001e34:	431bde83 	.word	0x431bde83
 8001e38:	200005f4 	.word	0x200005f4
 8001e3c:	40001000 	.word	0x40001000
 8001e40:	20000004 	.word	0x20000004

08001e44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e44:	b480      	push	{r7}
 8001e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001e48:	e7fe      	b.n	8001e48 <NMI_Handler+0x4>

08001e4a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e4a:	b480      	push	{r7}
 8001e4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e4e:	e7fe      	b.n	8001e4e <HardFault_Handler+0x4>

08001e50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e50:	b480      	push	{r7}
 8001e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e54:	e7fe      	b.n	8001e54 <MemManage_Handler+0x4>

08001e56 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e56:	b480      	push	{r7}
 8001e58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e5a:	e7fe      	b.n	8001e5a <BusFault_Handler+0x4>

08001e5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e60:	e7fe      	b.n	8001e60 <UsageFault_Handler+0x4>

08001e62 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e62:	b480      	push	{r7}
 8001e64:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e66:	bf00      	nop
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6e:	4770      	bx	lr

08001e70 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Nucleo_NRST_Pin);
 8001e74:	2001      	movs	r0, #1
 8001e76:	f003 f94f 	bl	8005118 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001e7a:	bf00      	nop
 8001e7c:	bd80      	pop	{r7, pc}

08001e7e <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8001e7e:	b580      	push	{r7, lr}
 8001e80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USR_BTN_1_Pin);
 8001e82:	2004      	movs	r0, #4
 8001e84:	f003 f948 	bl	8005118 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8001e88:	bf00      	nop
 8001e8a:	bd80      	pop	{r7, pc}

08001e8c <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USR_BTN_2_Pin);
 8001e90:	2010      	movs	r0, #16
 8001e92:	f003 f941 	bl	8005118 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001e96:	bf00      	nop
 8001e98:	bd80      	pop	{r7, pc}
	...

08001e9c <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001ea0:	4802      	ldr	r0, [pc, #8]	; (8001eac <USB_LP_IRQHandler+0x10>)
 8001ea2:	f003 fb9f 	bl	80055e4 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8001ea6:	bf00      	nop
 8001ea8:	bd80      	pop	{r7, pc}
 8001eaa:	bf00      	nop
 8001eac:	20006150 	.word	0x20006150

08001eb0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ENC_BTN_Pin);
 8001eb4:	2020      	movs	r0, #32
 8001eb6:	f003 f92f 	bl	8005118 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ENC_BTN_A_Pin);
 8001eba:	2040      	movs	r0, #64	; 0x40
 8001ebc:	f003 f92c 	bl	8005118 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ENC_BTN_B_Pin);
 8001ec0:	2080      	movs	r0, #128	; 0x80
 8001ec2:	f003 f929 	bl	8005118 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001ec6:	bf00      	nop
 8001ec8:	bd80      	pop	{r7, pc}
	...

08001ecc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001ed0:	4802      	ldr	r0, [pc, #8]	; (8001edc <TIM6_DAC_IRQHandler+0x10>)
 8001ed2:	f006 fbe0 	bl	8008696 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001ed6:	bf00      	nop
 8001ed8:	bd80      	pop	{r7, pc}
 8001eda:	bf00      	nop
 8001edc:	200005f4 	.word	0x200005f4

08001ee0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	af00      	add	r7, sp, #0
	return 1;
 8001ee4:	2301      	movs	r3, #1
}
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eee:	4770      	bx	lr

08001ef0 <_kill>:

int _kill(int pid, int sig)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b082      	sub	sp, #8
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
 8001ef8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001efa:	f010 fc09 	bl	8012710 <__errno>
 8001efe:	4603      	mov	r3, r0
 8001f00:	2216      	movs	r2, #22
 8001f02:	601a      	str	r2, [r3, #0]
	return -1;
 8001f04:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001f08:	4618      	mov	r0, r3
 8001f0a:	3708      	adds	r7, #8
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bd80      	pop	{r7, pc}

08001f10 <_exit>:

void _exit (int status)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b082      	sub	sp, #8
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001f18:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001f1c:	6878      	ldr	r0, [r7, #4]
 8001f1e:	f7ff ffe7 	bl	8001ef0 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001f22:	e7fe      	b.n	8001f22 <_exit+0x12>

08001f24 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b086      	sub	sp, #24
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	60f8      	str	r0, [r7, #12]
 8001f2c:	60b9      	str	r1, [r7, #8]
 8001f2e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f30:	2300      	movs	r3, #0
 8001f32:	617b      	str	r3, [r7, #20]
 8001f34:	e00a      	b.n	8001f4c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001f36:	f3af 8000 	nop.w
 8001f3a:	4601      	mov	r1, r0
 8001f3c:	68bb      	ldr	r3, [r7, #8]
 8001f3e:	1c5a      	adds	r2, r3, #1
 8001f40:	60ba      	str	r2, [r7, #8]
 8001f42:	b2ca      	uxtb	r2, r1
 8001f44:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f46:	697b      	ldr	r3, [r7, #20]
 8001f48:	3301      	adds	r3, #1
 8001f4a:	617b      	str	r3, [r7, #20]
 8001f4c:	697a      	ldr	r2, [r7, #20]
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	429a      	cmp	r2, r3
 8001f52:	dbf0      	blt.n	8001f36 <_read+0x12>
	}

return len;
 8001f54:	687b      	ldr	r3, [r7, #4]
}
 8001f56:	4618      	mov	r0, r3
 8001f58:	3718      	adds	r7, #24
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}

08001f5e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001f5e:	b580      	push	{r7, lr}
 8001f60:	b086      	sub	sp, #24
 8001f62:	af00      	add	r7, sp, #0
 8001f64:	60f8      	str	r0, [r7, #12]
 8001f66:	60b9      	str	r1, [r7, #8]
 8001f68:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	617b      	str	r3, [r7, #20]
 8001f6e:	e009      	b.n	8001f84 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001f70:	68bb      	ldr	r3, [r7, #8]
 8001f72:	1c5a      	adds	r2, r3, #1
 8001f74:	60ba      	str	r2, [r7, #8]
 8001f76:	781b      	ldrb	r3, [r3, #0]
 8001f78:	4618      	mov	r0, r3
 8001f7a:	f7ff fea5 	bl	8001cc8 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f7e:	697b      	ldr	r3, [r7, #20]
 8001f80:	3301      	adds	r3, #1
 8001f82:	617b      	str	r3, [r7, #20]
 8001f84:	697a      	ldr	r2, [r7, #20]
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	429a      	cmp	r2, r3
 8001f8a:	dbf1      	blt.n	8001f70 <_write+0x12>
	}
	return len;
 8001f8c:	687b      	ldr	r3, [r7, #4]
}
 8001f8e:	4618      	mov	r0, r3
 8001f90:	3718      	adds	r7, #24
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}

08001f96 <_close>:

int _close(int file)
{
 8001f96:	b480      	push	{r7}
 8001f98:	b083      	sub	sp, #12
 8001f9a:	af00      	add	r7, sp, #0
 8001f9c:	6078      	str	r0, [r7, #4]
	return -1;
 8001f9e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	370c      	adds	r7, #12
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fac:	4770      	bx	lr

08001fae <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001fae:	b480      	push	{r7}
 8001fb0:	b083      	sub	sp, #12
 8001fb2:	af00      	add	r7, sp, #0
 8001fb4:	6078      	str	r0, [r7, #4]
 8001fb6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001fbe:	605a      	str	r2, [r3, #4]
	return 0;
 8001fc0:	2300      	movs	r3, #0
}
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	370c      	adds	r7, #12
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fcc:	4770      	bx	lr

08001fce <_isatty>:

int _isatty(int file)
{
 8001fce:	b480      	push	{r7}
 8001fd0:	b083      	sub	sp, #12
 8001fd2:	af00      	add	r7, sp, #0
 8001fd4:	6078      	str	r0, [r7, #4]
	return 1;
 8001fd6:	2301      	movs	r3, #1
}
 8001fd8:	4618      	mov	r0, r3
 8001fda:	370c      	adds	r7, #12
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe2:	4770      	bx	lr

08001fe4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	b085      	sub	sp, #20
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	60f8      	str	r0, [r7, #12]
 8001fec:	60b9      	str	r1, [r7, #8]
 8001fee:	607a      	str	r2, [r7, #4]
	return 0;
 8001ff0:	2300      	movs	r3, #0
}
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	3714      	adds	r7, #20
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffc:	4770      	bx	lr
	...

08002000 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b086      	sub	sp, #24
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002008:	4a14      	ldr	r2, [pc, #80]	; (800205c <_sbrk+0x5c>)
 800200a:	4b15      	ldr	r3, [pc, #84]	; (8002060 <_sbrk+0x60>)
 800200c:	1ad3      	subs	r3, r2, r3
 800200e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002010:	697b      	ldr	r3, [r7, #20]
 8002012:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002014:	4b13      	ldr	r3, [pc, #76]	; (8002064 <_sbrk+0x64>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	2b00      	cmp	r3, #0
 800201a:	d102      	bne.n	8002022 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800201c:	4b11      	ldr	r3, [pc, #68]	; (8002064 <_sbrk+0x64>)
 800201e:	4a12      	ldr	r2, [pc, #72]	; (8002068 <_sbrk+0x68>)
 8002020:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002022:	4b10      	ldr	r3, [pc, #64]	; (8002064 <_sbrk+0x64>)
 8002024:	681a      	ldr	r2, [r3, #0]
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	4413      	add	r3, r2
 800202a:	693a      	ldr	r2, [r7, #16]
 800202c:	429a      	cmp	r2, r3
 800202e:	d207      	bcs.n	8002040 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002030:	f010 fb6e 	bl	8012710 <__errno>
 8002034:	4603      	mov	r3, r0
 8002036:	220c      	movs	r2, #12
 8002038:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800203a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800203e:	e009      	b.n	8002054 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002040:	4b08      	ldr	r3, [pc, #32]	; (8002064 <_sbrk+0x64>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002046:	4b07      	ldr	r3, [pc, #28]	; (8002064 <_sbrk+0x64>)
 8002048:	681a      	ldr	r2, [r3, #0]
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	4413      	add	r3, r2
 800204e:	4a05      	ldr	r2, [pc, #20]	; (8002064 <_sbrk+0x64>)
 8002050:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002052:	68fb      	ldr	r3, [r7, #12]
}
 8002054:	4618      	mov	r0, r3
 8002056:	3718      	adds	r7, #24
 8002058:	46bd      	mov	sp, r7
 800205a:	bd80      	pop	{r7, pc}
 800205c:	20020000 	.word	0x20020000
 8002060:	00000400 	.word	0x00000400
 8002064:	20000640 	.word	0x20000640
 8002068:	200067b0 	.word	0x200067b0

0800206c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800206c:	b480      	push	{r7}
 800206e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002070:	4b06      	ldr	r3, [pc, #24]	; (800208c <SystemInit+0x20>)
 8002072:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002076:	4a05      	ldr	r2, [pc, #20]	; (800208c <SystemInit+0x20>)
 8002078:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800207c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002080:	bf00      	nop
 8002082:	46bd      	mov	sp, r7
 8002084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002088:	4770      	bx	lr
 800208a:	bf00      	nop
 800208c:	e000ed00 	.word	0xe000ed00

08002090 <MX_TIM1_Init>:
TIM_HandleTypeDef htim16;
TIM_HandleTypeDef htim17;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b08c      	sub	sp, #48	; 0x30
 8002094:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002096:	f107 0320 	add.w	r3, r7, #32
 800209a:	2200      	movs	r2, #0
 800209c:	601a      	str	r2, [r3, #0]
 800209e:	605a      	str	r2, [r3, #4]
 80020a0:	609a      	str	r2, [r3, #8]
 80020a2:	60da      	str	r2, [r3, #12]
  TIM_HallSensor_InitTypeDef sConfig = {0};
 80020a4:	f107 0310 	add.w	r3, r7, #16
 80020a8:	2200      	movs	r2, #0
 80020aa:	601a      	str	r2, [r3, #0]
 80020ac:	605a      	str	r2, [r3, #4]
 80020ae:	609a      	str	r2, [r3, #8]
 80020b0:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020b2:	1d3b      	adds	r3, r7, #4
 80020b4:	2200      	movs	r2, #0
 80020b6:	601a      	str	r2, [r3, #0]
 80020b8:	605a      	str	r2, [r3, #4]
 80020ba:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80020bc:	4b29      	ldr	r3, [pc, #164]	; (8002164 <MX_TIM1_Init+0xd4>)
 80020be:	4a2a      	ldr	r2, [pc, #168]	; (8002168 <MX_TIM1_Init+0xd8>)
 80020c0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80020c2:	4b28      	ldr	r3, [pc, #160]	; (8002164 <MX_TIM1_Init+0xd4>)
 80020c4:	2200      	movs	r2, #0
 80020c6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020c8:	4b26      	ldr	r3, [pc, #152]	; (8002164 <MX_TIM1_Init+0xd4>)
 80020ca:	2200      	movs	r2, #0
 80020cc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80020ce:	4b25      	ldr	r3, [pc, #148]	; (8002164 <MX_TIM1_Init+0xd4>)
 80020d0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80020d4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020d6:	4b23      	ldr	r3, [pc, #140]	; (8002164 <MX_TIM1_Init+0xd4>)
 80020d8:	2200      	movs	r2, #0
 80020da:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80020dc:	4b21      	ldr	r3, [pc, #132]	; (8002164 <MX_TIM1_Init+0xd4>)
 80020de:	2200      	movs	r2, #0
 80020e0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020e2:	4b20      	ldr	r3, [pc, #128]	; (8002164 <MX_TIM1_Init+0xd4>)
 80020e4:	2200      	movs	r2, #0
 80020e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80020e8:	481e      	ldr	r0, [pc, #120]	; (8002164 <MX_TIM1_Init+0xd4>)
 80020ea:	f005 fefb 	bl	8007ee4 <HAL_TIM_Base_Init>
 80020ee:	4603      	mov	r3, r0
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d001      	beq.n	80020f8 <MX_TIM1_Init+0x68>
  {
    Error_Handler();
 80020f4:	f7ff fe0c 	bl	8001d10 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80020f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80020fc:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80020fe:	f107 0320 	add.w	r3, r7, #32
 8002102:	4619      	mov	r1, r3
 8002104:	4817      	ldr	r0, [pc, #92]	; (8002164 <MX_TIM1_Init+0xd4>)
 8002106:	f006 fdf5 	bl	8008cf4 <HAL_TIM_ConfigClockSource>
 800210a:	4603      	mov	r3, r0
 800210c:	2b00      	cmp	r3, #0
 800210e:	d001      	beq.n	8002114 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 8002110:	f7ff fdfe 	bl	8001d10 <Error_Handler>
  }
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002114:	2300      	movs	r3, #0
 8002116:	613b      	str	r3, [r7, #16]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002118:	2300      	movs	r3, #0
 800211a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Filter = 0;
 800211c:	2300      	movs	r3, #0
 800211e:	61bb      	str	r3, [r7, #24]
  sConfig.Commutation_Delay = 0;
 8002120:	2300      	movs	r3, #0
 8002122:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_HallSensor_Init(&htim1, &sConfig) != HAL_OK)
 8002124:	f107 0310 	add.w	r3, r7, #16
 8002128:	4619      	mov	r1, r3
 800212a:	480e      	ldr	r0, [pc, #56]	; (8002164 <MX_TIM1_Init+0xd4>)
 800212c:	f007 fcdd 	bl	8009aea <HAL_TIMEx_HallSensor_Init>
 8002130:	4603      	mov	r3, r0
 8002132:	2b00      	cmp	r3, #0
 8002134:	d001      	beq.n	800213a <MX_TIM1_Init+0xaa>
  {
    Error_Handler();
 8002136:	f7ff fdeb 	bl	8001d10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC2REF;
 800213a:	2350      	movs	r3, #80	; 0x50
 800213c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800213e:	2300      	movs	r3, #0
 8002140:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002142:	2300      	movs	r3, #0
 8002144:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002146:	1d3b      	adds	r3, r7, #4
 8002148:	4619      	mov	r1, r3
 800214a:	4806      	ldr	r0, [pc, #24]	; (8002164 <MX_TIM1_Init+0xd4>)
 800214c:	f007 fd86 	bl	8009c5c <HAL_TIMEx_MasterConfigSynchronization>
 8002150:	4603      	mov	r3, r0
 8002152:	2b00      	cmp	r3, #0
 8002154:	d001      	beq.n	800215a <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8002156:	f7ff fddb 	bl	8001d10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800215a:	bf00      	nop
 800215c:	3730      	adds	r7, #48	; 0x30
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}
 8002162:	bf00      	nop
 8002164:	20000644 	.word	0x20000644
 8002168:	40012c00 	.word	0x40012c00

0800216c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b08c      	sub	sp, #48	; 0x30
 8002170:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002172:	f107 030c 	add.w	r3, r7, #12
 8002176:	2224      	movs	r2, #36	; 0x24
 8002178:	2100      	movs	r1, #0
 800217a:	4618      	mov	r0, r3
 800217c:	f010 fa20 	bl	80125c0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002180:	463b      	mov	r3, r7
 8002182:	2200      	movs	r2, #0
 8002184:	601a      	str	r2, [r3, #0]
 8002186:	605a      	str	r2, [r3, #4]
 8002188:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800218a:	4b21      	ldr	r3, [pc, #132]	; (8002210 <MX_TIM3_Init+0xa4>)
 800218c:	4a21      	ldr	r2, [pc, #132]	; (8002214 <MX_TIM3_Init+0xa8>)
 800218e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002190:	4b1f      	ldr	r3, [pc, #124]	; (8002210 <MX_TIM3_Init+0xa4>)
 8002192:	2200      	movs	r2, #0
 8002194:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002196:	4b1e      	ldr	r3, [pc, #120]	; (8002210 <MX_TIM3_Init+0xa4>)
 8002198:	2200      	movs	r2, #0
 800219a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800219c:	4b1c      	ldr	r3, [pc, #112]	; (8002210 <MX_TIM3_Init+0xa4>)
 800219e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80021a2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021a4:	4b1a      	ldr	r3, [pc, #104]	; (8002210 <MX_TIM3_Init+0xa4>)
 80021a6:	2200      	movs	r2, #0
 80021a8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021aa:	4b19      	ldr	r3, [pc, #100]	; (8002210 <MX_TIM3_Init+0xa4>)
 80021ac:	2200      	movs	r2, #0
 80021ae:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80021b0:	2303      	movs	r3, #3
 80021b2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80021b4:	2300      	movs	r3, #0
 80021b6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80021b8:	2301      	movs	r3, #1
 80021ba:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80021bc:	2300      	movs	r3, #0
 80021be:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80021c0:	2300      	movs	r3, #0
 80021c2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80021c4:	2300      	movs	r3, #0
 80021c6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80021c8:	2301      	movs	r3, #1
 80021ca:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80021cc:	2300      	movs	r3, #0
 80021ce:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80021d0:	2300      	movs	r3, #0
 80021d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80021d4:	f107 030c 	add.w	r3, r7, #12
 80021d8:	4619      	mov	r1, r3
 80021da:	480d      	ldr	r0, [pc, #52]	; (8002210 <MX_TIM3_Init+0xa4>)
 80021dc:	f006 f927 	bl	800842e <HAL_TIM_Encoder_Init>
 80021e0:	4603      	mov	r3, r0
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d001      	beq.n	80021ea <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 80021e6:	f7ff fd93 	bl	8001d10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021ea:	2300      	movs	r3, #0
 80021ec:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021ee:	2300      	movs	r3, #0
 80021f0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80021f2:	463b      	mov	r3, r7
 80021f4:	4619      	mov	r1, r3
 80021f6:	4806      	ldr	r0, [pc, #24]	; (8002210 <MX_TIM3_Init+0xa4>)
 80021f8:	f007 fd30 	bl	8009c5c <HAL_TIMEx_MasterConfigSynchronization>
 80021fc:	4603      	mov	r3, r0
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d001      	beq.n	8002206 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8002202:	f7ff fd85 	bl	8001d10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002206:	bf00      	nop
 8002208:	3730      	adds	r7, #48	; 0x30
 800220a:	46bd      	mov	sp, r7
 800220c:	bd80      	pop	{r7, pc}
 800220e:	bf00      	nop
 8002210:	20000690 	.word	0x20000690
 8002214:	40000400 	.word	0x40000400

08002218 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b08c      	sub	sp, #48	; 0x30
 800221c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800221e:	f107 0320 	add.w	r3, r7, #32
 8002222:	2200      	movs	r2, #0
 8002224:	601a      	str	r2, [r3, #0]
 8002226:	605a      	str	r2, [r3, #4]
 8002228:	609a      	str	r2, [r3, #8]
 800222a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800222c:	f107 0314 	add.w	r3, r7, #20
 8002230:	2200      	movs	r2, #0
 8002232:	601a      	str	r2, [r3, #0]
 8002234:	605a      	str	r2, [r3, #4]
 8002236:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002238:	1d3b      	adds	r3, r7, #4
 800223a:	2200      	movs	r2, #0
 800223c:	601a      	str	r2, [r3, #0]
 800223e:	605a      	str	r2, [r3, #4]
 8002240:	609a      	str	r2, [r3, #8]
 8002242:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8002244:	4b3e      	ldr	r3, [pc, #248]	; (8002340 <MX_TIM8_Init+0x128>)
 8002246:	4a3f      	ldr	r2, [pc, #252]	; (8002344 <MX_TIM8_Init+0x12c>)
 8002248:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 800224a:	4b3d      	ldr	r3, [pc, #244]	; (8002340 <MX_TIM8_Init+0x128>)
 800224c:	2200      	movs	r2, #0
 800224e:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002250:	4b3b      	ldr	r3, [pc, #236]	; (8002340 <MX_TIM8_Init+0x128>)
 8002252:	2200      	movs	r2, #0
 8002254:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8002256:	4b3a      	ldr	r3, [pc, #232]	; (8002340 <MX_TIM8_Init+0x128>)
 8002258:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800225c:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800225e:	4b38      	ldr	r3, [pc, #224]	; (8002340 <MX_TIM8_Init+0x128>)
 8002260:	2200      	movs	r2, #0
 8002262:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8002264:	4b36      	ldr	r3, [pc, #216]	; (8002340 <MX_TIM8_Init+0x128>)
 8002266:	2200      	movs	r2, #0
 8002268:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800226a:	4b35      	ldr	r3, [pc, #212]	; (8002340 <MX_TIM8_Init+0x128>)
 800226c:	2200      	movs	r2, #0
 800226e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8002270:	4833      	ldr	r0, [pc, #204]	; (8002340 <MX_TIM8_Init+0x128>)
 8002272:	f005 fe37 	bl	8007ee4 <HAL_TIM_Base_Init>
 8002276:	4603      	mov	r3, r0
 8002278:	2b00      	cmp	r3, #0
 800227a:	d001      	beq.n	8002280 <MX_TIM8_Init+0x68>
  {
    Error_Handler();
 800227c:	f7ff fd48 	bl	8001d10 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002280:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002284:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8002286:	f107 0320 	add.w	r3, r7, #32
 800228a:	4619      	mov	r1, r3
 800228c:	482c      	ldr	r0, [pc, #176]	; (8002340 <MX_TIM8_Init+0x128>)
 800228e:	f006 fd31 	bl	8008cf4 <HAL_TIM_ConfigClockSource>
 8002292:	4603      	mov	r3, r0
 8002294:	2b00      	cmp	r3, #0
 8002296:	d001      	beq.n	800229c <MX_TIM8_Init+0x84>
  {
    Error_Handler();
 8002298:	f7ff fd3a 	bl	8001d10 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim8) != HAL_OK)
 800229c:	4828      	ldr	r0, [pc, #160]	; (8002340 <MX_TIM8_Init+0x128>)
 800229e:	f006 f865 	bl	800836c <HAL_TIM_IC_Init>
 80022a2:	4603      	mov	r3, r0
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d001      	beq.n	80022ac <MX_TIM8_Init+0x94>
  {
    Error_Handler();
 80022a8:	f7ff fd32 	bl	8001d10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80022ac:	2300      	movs	r3, #0
 80022ae:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80022b0:	2300      	movs	r3, #0
 80022b2:	61bb      	str	r3, [r7, #24]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022b4:	2300      	movs	r3, #0
 80022b6:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80022b8:	f107 0314 	add.w	r3, r7, #20
 80022bc:	4619      	mov	r1, r3
 80022be:	4820      	ldr	r0, [pc, #128]	; (8002340 <MX_TIM8_Init+0x128>)
 80022c0:	f007 fccc 	bl	8009c5c <HAL_TIMEx_MasterConfigSynchronization>
 80022c4:	4603      	mov	r3, r0
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d001      	beq.n	80022ce <MX_TIM8_Init+0xb6>
  {
    Error_Handler();
 80022ca:	f7ff fd21 	bl	8001d10 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80022ce:	2300      	movs	r3, #0
 80022d0:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80022d2:	2301      	movs	r3, #1
 80022d4:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80022d6:	2300      	movs	r3, #0
 80022d8:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 80022da:	2300      	movs	r3, #0
 80022dc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim8, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80022de:	1d3b      	adds	r3, r7, #4
 80022e0:	2200      	movs	r2, #0
 80022e2:	4619      	mov	r1, r3
 80022e4:	4816      	ldr	r0, [pc, #88]	; (8002340 <MX_TIM8_Init+0x128>)
 80022e6:	f006 fb55 	bl	8008994 <HAL_TIM_IC_ConfigChannel>
 80022ea:	4603      	mov	r3, r0
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d001      	beq.n	80022f4 <MX_TIM8_Init+0xdc>
  {
    Error_Handler();
 80022f0:	f7ff fd0e 	bl	8001d10 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim8, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80022f4:	1d3b      	adds	r3, r7, #4
 80022f6:	2204      	movs	r2, #4
 80022f8:	4619      	mov	r1, r3
 80022fa:	4811      	ldr	r0, [pc, #68]	; (8002340 <MX_TIM8_Init+0x128>)
 80022fc:	f006 fb4a 	bl	8008994 <HAL_TIM_IC_ConfigChannel>
 8002300:	4603      	mov	r3, r0
 8002302:	2b00      	cmp	r3, #0
 8002304:	d001      	beq.n	800230a <MX_TIM8_Init+0xf2>
  {
    Error_Handler();
 8002306:	f7ff fd03 	bl	8001d10 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim8, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 800230a:	1d3b      	adds	r3, r7, #4
 800230c:	2208      	movs	r2, #8
 800230e:	4619      	mov	r1, r3
 8002310:	480b      	ldr	r0, [pc, #44]	; (8002340 <MX_TIM8_Init+0x128>)
 8002312:	f006 fb3f 	bl	8008994 <HAL_TIM_IC_ConfigChannel>
 8002316:	4603      	mov	r3, r0
 8002318:	2b00      	cmp	r3, #0
 800231a:	d001      	beq.n	8002320 <MX_TIM8_Init+0x108>
  {
    Error_Handler();
 800231c:	f7ff fcf8 	bl	8001d10 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim8, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8002320:	1d3b      	adds	r3, r7, #4
 8002322:	220c      	movs	r2, #12
 8002324:	4619      	mov	r1, r3
 8002326:	4806      	ldr	r0, [pc, #24]	; (8002340 <MX_TIM8_Init+0x128>)
 8002328:	f006 fb34 	bl	8008994 <HAL_TIM_IC_ConfigChannel>
 800232c:	4603      	mov	r3, r0
 800232e:	2b00      	cmp	r3, #0
 8002330:	d001      	beq.n	8002336 <MX_TIM8_Init+0x11e>
  {
    Error_Handler();
 8002332:	f7ff fced 	bl	8001d10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8002336:	bf00      	nop
 8002338:	3730      	adds	r7, #48	; 0x30
 800233a:	46bd      	mov	sp, r7
 800233c:	bd80      	pop	{r7, pc}
 800233e:	bf00      	nop
 8002340:	200006dc 	.word	0x200006dc
 8002344:	40013400 	.word	0x40013400

08002348 <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b08c      	sub	sp, #48	; 0x30
 800234c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800234e:	f107 0320 	add.w	r3, r7, #32
 8002352:	2200      	movs	r2, #0
 8002354:	601a      	str	r2, [r3, #0]
 8002356:	605a      	str	r2, [r3, #4]
 8002358:	609a      	str	r2, [r3, #8]
 800235a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800235c:	f107 0314 	add.w	r3, r7, #20
 8002360:	2200      	movs	r2, #0
 8002362:	601a      	str	r2, [r3, #0]
 8002364:	605a      	str	r2, [r3, #4]
 8002366:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002368:	1d3b      	adds	r3, r7, #4
 800236a:	2200      	movs	r2, #0
 800236c:	601a      	str	r2, [r3, #0]
 800236e:	605a      	str	r2, [r3, #4]
 8002370:	609a      	str	r2, [r3, #8]
 8002372:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8002374:	4b32      	ldr	r3, [pc, #200]	; (8002440 <MX_TIM15_Init+0xf8>)
 8002376:	4a33      	ldr	r2, [pc, #204]	; (8002444 <MX_TIM15_Init+0xfc>)
 8002378:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 800237a:	4b31      	ldr	r3, [pc, #196]	; (8002440 <MX_TIM15_Init+0xf8>)
 800237c:	2200      	movs	r2, #0
 800237e:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002380:	4b2f      	ldr	r3, [pc, #188]	; (8002440 <MX_TIM15_Init+0xf8>)
 8002382:	2200      	movs	r2, #0
 8002384:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 8002386:	4b2e      	ldr	r3, [pc, #184]	; (8002440 <MX_TIM15_Init+0xf8>)
 8002388:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800238c:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800238e:	4b2c      	ldr	r3, [pc, #176]	; (8002440 <MX_TIM15_Init+0xf8>)
 8002390:	2200      	movs	r2, #0
 8002392:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8002394:	4b2a      	ldr	r3, [pc, #168]	; (8002440 <MX_TIM15_Init+0xf8>)
 8002396:	2200      	movs	r2, #0
 8002398:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800239a:	4b29      	ldr	r3, [pc, #164]	; (8002440 <MX_TIM15_Init+0xf8>)
 800239c:	2200      	movs	r2, #0
 800239e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 80023a0:	4827      	ldr	r0, [pc, #156]	; (8002440 <MX_TIM15_Init+0xf8>)
 80023a2:	f005 fd9f 	bl	8007ee4 <HAL_TIM_Base_Init>
 80023a6:	4603      	mov	r3, r0
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d001      	beq.n	80023b0 <MX_TIM15_Init+0x68>
  {
    Error_Handler();
 80023ac:	f7ff fcb0 	bl	8001d10 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80023b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80023b4:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 80023b6:	f107 0320 	add.w	r3, r7, #32
 80023ba:	4619      	mov	r1, r3
 80023bc:	4820      	ldr	r0, [pc, #128]	; (8002440 <MX_TIM15_Init+0xf8>)
 80023be:	f006 fc99 	bl	8008cf4 <HAL_TIM_ConfigClockSource>
 80023c2:	4603      	mov	r3, r0
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d001      	beq.n	80023cc <MX_TIM15_Init+0x84>
  {
    Error_Handler();
 80023c8:	f7ff fca2 	bl	8001d10 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim15) != HAL_OK)
 80023cc:	481c      	ldr	r0, [pc, #112]	; (8002440 <MX_TIM15_Init+0xf8>)
 80023ce:	f005 ffcd 	bl	800836c <HAL_TIM_IC_Init>
 80023d2:	4603      	mov	r3, r0
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d001      	beq.n	80023dc <MX_TIM15_Init+0x94>
  {
    Error_Handler();
 80023d8:	f7ff fc9a 	bl	8001d10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80023dc:	2300      	movs	r3, #0
 80023de:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80023e0:	2300      	movs	r3, #0
 80023e2:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 80023e4:	f107 0314 	add.w	r3, r7, #20
 80023e8:	4619      	mov	r1, r3
 80023ea:	4815      	ldr	r0, [pc, #84]	; (8002440 <MX_TIM15_Init+0xf8>)
 80023ec:	f007 fc36 	bl	8009c5c <HAL_TIMEx_MasterConfigSynchronization>
 80023f0:	4603      	mov	r3, r0
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d001      	beq.n	80023fa <MX_TIM15_Init+0xb2>
  {
    Error_Handler();
 80023f6:	f7ff fc8b 	bl	8001d10 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80023fa:	2300      	movs	r3, #0
 80023fc:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80023fe:	2301      	movs	r3, #1
 8002400:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002402:	2300      	movs	r3, #0
 8002404:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8002406:	2300      	movs	r3, #0
 8002408:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim15, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800240a:	1d3b      	adds	r3, r7, #4
 800240c:	2200      	movs	r2, #0
 800240e:	4619      	mov	r1, r3
 8002410:	480b      	ldr	r0, [pc, #44]	; (8002440 <MX_TIM15_Init+0xf8>)
 8002412:	f006 fabf 	bl	8008994 <HAL_TIM_IC_ConfigChannel>
 8002416:	4603      	mov	r3, r0
 8002418:	2b00      	cmp	r3, #0
 800241a:	d001      	beq.n	8002420 <MX_TIM15_Init+0xd8>
  {
    Error_Handler();
 800241c:	f7ff fc78 	bl	8001d10 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim15, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8002420:	1d3b      	adds	r3, r7, #4
 8002422:	2204      	movs	r2, #4
 8002424:	4619      	mov	r1, r3
 8002426:	4806      	ldr	r0, [pc, #24]	; (8002440 <MX_TIM15_Init+0xf8>)
 8002428:	f006 fab4 	bl	8008994 <HAL_TIM_IC_ConfigChannel>
 800242c:	4603      	mov	r3, r0
 800242e:	2b00      	cmp	r3, #0
 8002430:	d001      	beq.n	8002436 <MX_TIM15_Init+0xee>
  {
    Error_Handler();
 8002432:	f7ff fc6d 	bl	8001d10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 8002436:	bf00      	nop
 8002438:	3730      	adds	r7, #48	; 0x30
 800243a:	46bd      	mov	sp, r7
 800243c:	bd80      	pop	{r7, pc}
 800243e:	bf00      	nop
 8002440:	20000728 	.word	0x20000728
 8002444:	40014000 	.word	0x40014000

08002448 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b094      	sub	sp, #80	; 0x50
 800244c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800244e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002452:	2200      	movs	r2, #0
 8002454:	601a      	str	r2, [r3, #0]
 8002456:	605a      	str	r2, [r3, #4]
 8002458:	609a      	str	r2, [r3, #8]
 800245a:	60da      	str	r2, [r3, #12]
 800245c:	611a      	str	r2, [r3, #16]
 800245e:	615a      	str	r2, [r3, #20]
 8002460:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002462:	463b      	mov	r3, r7
 8002464:	2234      	movs	r2, #52	; 0x34
 8002466:	2100      	movs	r1, #0
 8002468:	4618      	mov	r0, r3
 800246a:	f010 f8a9 	bl	80125c0 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 800246e:	4b31      	ldr	r3, [pc, #196]	; (8002534 <MX_TIM16_Init+0xec>)
 8002470:	4a31      	ldr	r2, [pc, #196]	; (8002538 <MX_TIM16_Init+0xf0>)
 8002472:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 8002474:	4b2f      	ldr	r3, [pc, #188]	; (8002534 <MX_TIM16_Init+0xec>)
 8002476:	2200      	movs	r2, #0
 8002478:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800247a:	4b2e      	ldr	r3, [pc, #184]	; (8002534 <MX_TIM16_Init+0xec>)
 800247c:	2200      	movs	r2, #0
 800247e:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 8500;
 8002480:	4b2c      	ldr	r3, [pc, #176]	; (8002534 <MX_TIM16_Init+0xec>)
 8002482:	f242 1234 	movw	r2, #8500	; 0x2134
 8002486:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002488:	4b2a      	ldr	r3, [pc, #168]	; (8002534 <MX_TIM16_Init+0xec>)
 800248a:	2200      	movs	r2, #0
 800248c:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800248e:	4b29      	ldr	r3, [pc, #164]	; (8002534 <MX_TIM16_Init+0xec>)
 8002490:	2200      	movs	r2, #0
 8002492:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002494:	4b27      	ldr	r3, [pc, #156]	; (8002534 <MX_TIM16_Init+0xec>)
 8002496:	2280      	movs	r2, #128	; 0x80
 8002498:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800249a:	4826      	ldr	r0, [pc, #152]	; (8002534 <MX_TIM16_Init+0xec>)
 800249c:	f005 fd22 	bl	8007ee4 <HAL_TIM_Base_Init>
 80024a0:	4603      	mov	r3, r0
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d001      	beq.n	80024aa <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 80024a6:	f7ff fc33 	bl	8001d10 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 80024aa:	4822      	ldr	r0, [pc, #136]	; (8002534 <MX_TIM16_Init+0xec>)
 80024ac:	f005 fdea 	bl	8008084 <HAL_TIM_PWM_Init>
 80024b0:	4603      	mov	r3, r0
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d001      	beq.n	80024ba <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 80024b6:	f7ff fc2b 	bl	8001d10 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80024ba:	2360      	movs	r3, #96	; 0x60
 80024bc:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 0;
 80024be:	2300      	movs	r3, #0
 80024c0:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80024c2:	2300      	movs	r3, #0
 80024c4:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80024c6:	2300      	movs	r3, #0
 80024c8:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80024ca:	2300      	movs	r3, #0
 80024cc:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80024ce:	2300      	movs	r3, #0
 80024d0:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80024d2:	2300      	movs	r3, #0
 80024d4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80024d6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80024da:	2200      	movs	r2, #0
 80024dc:	4619      	mov	r1, r3
 80024de:	4815      	ldr	r0, [pc, #84]	; (8002534 <MX_TIM16_Init+0xec>)
 80024e0:	f006 faf4 	bl	8008acc <HAL_TIM_PWM_ConfigChannel>
 80024e4:	4603      	mov	r3, r0
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d001      	beq.n	80024ee <MX_TIM16_Init+0xa6>
  {
    Error_Handler();
 80024ea:	f7ff fc11 	bl	8001d10 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80024ee:	2300      	movs	r3, #0
 80024f0:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80024f2:	2300      	movs	r3, #0
 80024f4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80024f6:	2300      	movs	r3, #0
 80024f8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80024fa:	2300      	movs	r3, #0
 80024fc:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80024fe:	2300      	movs	r3, #0
 8002500:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002502:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002506:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002508:	2300      	movs	r3, #0
 800250a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800250c:	2300      	movs	r3, #0
 800250e:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8002510:	463b      	mov	r3, r7
 8002512:	4619      	mov	r1, r3
 8002514:	4807      	ldr	r0, [pc, #28]	; (8002534 <MX_TIM16_Init+0xec>)
 8002516:	f007 fc37 	bl	8009d88 <HAL_TIMEx_ConfigBreakDeadTime>
 800251a:	4603      	mov	r3, r0
 800251c:	2b00      	cmp	r3, #0
 800251e:	d001      	beq.n	8002524 <MX_TIM16_Init+0xdc>
  {
    Error_Handler();
 8002520:	f7ff fbf6 	bl	8001d10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 8002524:	4803      	ldr	r0, [pc, #12]	; (8002534 <MX_TIM16_Init+0xec>)
 8002526:	f000 f991 	bl	800284c <HAL_TIM_MspPostInit>

}
 800252a:	bf00      	nop
 800252c:	3750      	adds	r7, #80	; 0x50
 800252e:	46bd      	mov	sp, r7
 8002530:	bd80      	pop	{r7, pc}
 8002532:	bf00      	nop
 8002534:	20000774 	.word	0x20000774
 8002538:	40014400 	.word	0x40014400

0800253c <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b094      	sub	sp, #80	; 0x50
 8002540:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8002542:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002546:	2200      	movs	r2, #0
 8002548:	601a      	str	r2, [r3, #0]
 800254a:	605a      	str	r2, [r3, #4]
 800254c:	609a      	str	r2, [r3, #8]
 800254e:	60da      	str	r2, [r3, #12]
 8002550:	611a      	str	r2, [r3, #16]
 8002552:	615a      	str	r2, [r3, #20]
 8002554:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002556:	463b      	mov	r3, r7
 8002558:	2234      	movs	r2, #52	; 0x34
 800255a:	2100      	movs	r1, #0
 800255c:	4618      	mov	r0, r3
 800255e:	f010 f82f 	bl	80125c0 <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8002562:	4b30      	ldr	r3, [pc, #192]	; (8002624 <MX_TIM17_Init+0xe8>)
 8002564:	4a30      	ldr	r2, [pc, #192]	; (8002628 <MX_TIM17_Init+0xec>)
 8002566:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 33-1;
 8002568:	4b2e      	ldr	r3, [pc, #184]	; (8002624 <MX_TIM17_Init+0xe8>)
 800256a:	2220      	movs	r2, #32
 800256c:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 800256e:	4b2d      	ldr	r3, [pc, #180]	; (8002624 <MX_TIM17_Init+0xe8>)
 8002570:	2200      	movs	r2, #0
 8002572:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 255;
 8002574:	4b2b      	ldr	r3, [pc, #172]	; (8002624 <MX_TIM17_Init+0xe8>)
 8002576:	22ff      	movs	r2, #255	; 0xff
 8002578:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800257a:	4b2a      	ldr	r3, [pc, #168]	; (8002624 <MX_TIM17_Init+0xe8>)
 800257c:	2200      	movs	r2, #0
 800257e:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8002580:	4b28      	ldr	r3, [pc, #160]	; (8002624 <MX_TIM17_Init+0xe8>)
 8002582:	2200      	movs	r2, #0
 8002584:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002586:	4b27      	ldr	r3, [pc, #156]	; (8002624 <MX_TIM17_Init+0xe8>)
 8002588:	2200      	movs	r2, #0
 800258a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 800258c:	4825      	ldr	r0, [pc, #148]	; (8002624 <MX_TIM17_Init+0xe8>)
 800258e:	f005 fca9 	bl	8007ee4 <HAL_TIM_Base_Init>
 8002592:	4603      	mov	r3, r0
 8002594:	2b00      	cmp	r3, #0
 8002596:	d001      	beq.n	800259c <MX_TIM17_Init+0x60>
  {
    Error_Handler();
 8002598:	f7ff fbba 	bl	8001d10 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 800259c:	4821      	ldr	r0, [pc, #132]	; (8002624 <MX_TIM17_Init+0xe8>)
 800259e:	f005 fd71 	bl	8008084 <HAL_TIM_PWM_Init>
 80025a2:	4603      	mov	r3, r0
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d001      	beq.n	80025ac <MX_TIM17_Init+0x70>
  {
    Error_Handler();
 80025a8:	f7ff fbb2 	bl	8001d10 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80025ac:	2360      	movs	r3, #96	; 0x60
 80025ae:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 0;
 80025b0:	2300      	movs	r3, #0
 80025b2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80025b4:	2300      	movs	r3, #0
 80025b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80025b8:	2300      	movs	r3, #0
 80025ba:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80025bc:	2300      	movs	r3, #0
 80025be:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80025c0:	2300      	movs	r3, #0
 80025c2:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80025c4:	2300      	movs	r3, #0
 80025c6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80025c8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80025cc:	2200      	movs	r2, #0
 80025ce:	4619      	mov	r1, r3
 80025d0:	4814      	ldr	r0, [pc, #80]	; (8002624 <MX_TIM17_Init+0xe8>)
 80025d2:	f006 fa7b 	bl	8008acc <HAL_TIM_PWM_ConfigChannel>
 80025d6:	4603      	mov	r3, r0
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d001      	beq.n	80025e0 <MX_TIM17_Init+0xa4>
  {
    Error_Handler();
 80025dc:	f7ff fb98 	bl	8001d10 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80025e0:	2300      	movs	r3, #0
 80025e2:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80025e4:	2300      	movs	r3, #0
 80025e6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80025e8:	2300      	movs	r3, #0
 80025ea:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80025ec:	2300      	movs	r3, #0
 80025ee:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80025f0:	2300      	movs	r3, #0
 80025f2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80025f4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80025f8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80025fa:	2300      	movs	r3, #0
 80025fc:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80025fe:	2300      	movs	r3, #0
 8002600:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8002602:	463b      	mov	r3, r7
 8002604:	4619      	mov	r1, r3
 8002606:	4807      	ldr	r0, [pc, #28]	; (8002624 <MX_TIM17_Init+0xe8>)
 8002608:	f007 fbbe 	bl	8009d88 <HAL_TIMEx_ConfigBreakDeadTime>
 800260c:	4603      	mov	r3, r0
 800260e:	2b00      	cmp	r3, #0
 8002610:	d001      	beq.n	8002616 <MX_TIM17_Init+0xda>
  {
    Error_Handler();
 8002612:	f7ff fb7d 	bl	8001d10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 8002616:	4803      	ldr	r0, [pc, #12]	; (8002624 <MX_TIM17_Init+0xe8>)
 8002618:	f000 f918 	bl	800284c <HAL_TIM_MspPostInit>

}
 800261c:	bf00      	nop
 800261e:	3750      	adds	r7, #80	; 0x50
 8002620:	46bd      	mov	sp, r7
 8002622:	bd80      	pop	{r7, pc}
 8002624:	200007c0 	.word	0x200007c0
 8002628:	40014800 	.word	0x40014800

0800262c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b090      	sub	sp, #64	; 0x40
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002634:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002638:	2200      	movs	r2, #0
 800263a:	601a      	str	r2, [r3, #0]
 800263c:	605a      	str	r2, [r3, #4]
 800263e:	609a      	str	r2, [r3, #8]
 8002640:	60da      	str	r2, [r3, #12]
 8002642:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	4a58      	ldr	r2, [pc, #352]	; (80027ac <HAL_TIM_Base_MspInit+0x180>)
 800264a:	4293      	cmp	r3, r2
 800264c:	d128      	bne.n	80026a0 <HAL_TIM_Base_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800264e:	4b58      	ldr	r3, [pc, #352]	; (80027b0 <HAL_TIM_Base_MspInit+0x184>)
 8002650:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002652:	4a57      	ldr	r2, [pc, #348]	; (80027b0 <HAL_TIM_Base_MspInit+0x184>)
 8002654:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002658:	6613      	str	r3, [r2, #96]	; 0x60
 800265a:	4b55      	ldr	r3, [pc, #340]	; (80027b0 <HAL_TIM_Base_MspInit+0x184>)
 800265c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800265e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002662:	62bb      	str	r3, [r7, #40]	; 0x28
 8002664:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002666:	4b52      	ldr	r3, [pc, #328]	; (80027b0 <HAL_TIM_Base_MspInit+0x184>)
 8002668:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800266a:	4a51      	ldr	r2, [pc, #324]	; (80027b0 <HAL_TIM_Base_MspInit+0x184>)
 800266c:	f043 0304 	orr.w	r3, r3, #4
 8002670:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002672:	4b4f      	ldr	r3, [pc, #316]	; (80027b0 <HAL_TIM_Base_MspInit+0x184>)
 8002674:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002676:	f003 0304 	and.w	r3, r3, #4
 800267a:	627b      	str	r3, [r7, #36]	; 0x24
 800267c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2
    PC2     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 800267e:	2307      	movs	r3, #7
 8002680:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002682:	2302      	movs	r3, #2
 8002684:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002686:	2300      	movs	r3, #0
 8002688:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800268a:	2300      	movs	r3, #0
 800268c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 800268e:	2302      	movs	r3, #2
 8002690:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002692:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002696:	4619      	mov	r1, r3
 8002698:	4846      	ldr	r0, [pc, #280]	; (80027b4 <HAL_TIM_Base_MspInit+0x188>)
 800269a:	f002 fb89 	bl	8004db0 <HAL_GPIO_Init>
    __HAL_RCC_TIM17_CLK_ENABLE();
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 800269e:	e080      	b.n	80027a2 <HAL_TIM_Base_MspInit+0x176>
  else if(tim_baseHandle->Instance==TIM8)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4a44      	ldr	r2, [pc, #272]	; (80027b8 <HAL_TIM_Base_MspInit+0x18c>)
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d129      	bne.n	80026fe <HAL_TIM_Base_MspInit+0xd2>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80026aa:	4b41      	ldr	r3, [pc, #260]	; (80027b0 <HAL_TIM_Base_MspInit+0x184>)
 80026ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026ae:	4a40      	ldr	r2, [pc, #256]	; (80027b0 <HAL_TIM_Base_MspInit+0x184>)
 80026b0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80026b4:	6613      	str	r3, [r2, #96]	; 0x60
 80026b6:	4b3e      	ldr	r3, [pc, #248]	; (80027b0 <HAL_TIM_Base_MspInit+0x184>)
 80026b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026ba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80026be:	623b      	str	r3, [r7, #32]
 80026c0:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80026c2:	4b3b      	ldr	r3, [pc, #236]	; (80027b0 <HAL_TIM_Base_MspInit+0x184>)
 80026c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026c6:	4a3a      	ldr	r2, [pc, #232]	; (80027b0 <HAL_TIM_Base_MspInit+0x184>)
 80026c8:	f043 0304 	orr.w	r3, r3, #4
 80026cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80026ce:	4b38      	ldr	r3, [pc, #224]	; (80027b0 <HAL_TIM_Base_MspInit+0x184>)
 80026d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026d2:	f003 0304 	and.w	r3, r3, #4
 80026d6:	61fb      	str	r3, [r7, #28]
 80026d8:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 80026da:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80026de:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026e0:	2302      	movs	r3, #2
 80026e2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026e4:	2300      	movs	r3, #0
 80026e6:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026e8:	2300      	movs	r3, #0
 80026ea:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 80026ec:	2304      	movs	r3, #4
 80026ee:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80026f0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80026f4:	4619      	mov	r1, r3
 80026f6:	482f      	ldr	r0, [pc, #188]	; (80027b4 <HAL_TIM_Base_MspInit+0x188>)
 80026f8:	f002 fb5a 	bl	8004db0 <HAL_GPIO_Init>
}
 80026fc:	e051      	b.n	80027a2 <HAL_TIM_Base_MspInit+0x176>
  else if(tim_baseHandle->Instance==TIM15)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4a2e      	ldr	r2, [pc, #184]	; (80027bc <HAL_TIM_Base_MspInit+0x190>)
 8002704:	4293      	cmp	r3, r2
 8002706:	d129      	bne.n	800275c <HAL_TIM_Base_MspInit+0x130>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8002708:	4b29      	ldr	r3, [pc, #164]	; (80027b0 <HAL_TIM_Base_MspInit+0x184>)
 800270a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800270c:	4a28      	ldr	r2, [pc, #160]	; (80027b0 <HAL_TIM_Base_MspInit+0x184>)
 800270e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002712:	6613      	str	r3, [r2, #96]	; 0x60
 8002714:	4b26      	ldr	r3, [pc, #152]	; (80027b0 <HAL_TIM_Base_MspInit+0x184>)
 8002716:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002718:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800271c:	61bb      	str	r3, [r7, #24]
 800271e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002720:	4b23      	ldr	r3, [pc, #140]	; (80027b0 <HAL_TIM_Base_MspInit+0x184>)
 8002722:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002724:	4a22      	ldr	r2, [pc, #136]	; (80027b0 <HAL_TIM_Base_MspInit+0x184>)
 8002726:	f043 0301 	orr.w	r3, r3, #1
 800272a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800272c:	4b20      	ldr	r3, [pc, #128]	; (80027b0 <HAL_TIM_Base_MspInit+0x184>)
 800272e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002730:	f003 0301 	and.w	r3, r3, #1
 8002734:	617b      	str	r3, [r7, #20]
 8002736:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002738:	230c      	movs	r3, #12
 800273a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800273c:	2302      	movs	r3, #2
 800273e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002740:	2300      	movs	r3, #0
 8002742:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002744:	2300      	movs	r3, #0
 8002746:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM15;
 8002748:	2309      	movs	r3, #9
 800274a:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800274c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002750:	4619      	mov	r1, r3
 8002752:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002756:	f002 fb2b 	bl	8004db0 <HAL_GPIO_Init>
}
 800275a:	e022      	b.n	80027a2 <HAL_TIM_Base_MspInit+0x176>
  else if(tim_baseHandle->Instance==TIM16)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4a17      	ldr	r2, [pc, #92]	; (80027c0 <HAL_TIM_Base_MspInit+0x194>)
 8002762:	4293      	cmp	r3, r2
 8002764:	d10c      	bne.n	8002780 <HAL_TIM_Base_MspInit+0x154>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8002766:	4b12      	ldr	r3, [pc, #72]	; (80027b0 <HAL_TIM_Base_MspInit+0x184>)
 8002768:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800276a:	4a11      	ldr	r2, [pc, #68]	; (80027b0 <HAL_TIM_Base_MspInit+0x184>)
 800276c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002770:	6613      	str	r3, [r2, #96]	; 0x60
 8002772:	4b0f      	ldr	r3, [pc, #60]	; (80027b0 <HAL_TIM_Base_MspInit+0x184>)
 8002774:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002776:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800277a:	613b      	str	r3, [r7, #16]
 800277c:	693b      	ldr	r3, [r7, #16]
}
 800277e:	e010      	b.n	80027a2 <HAL_TIM_Base_MspInit+0x176>
  else if(tim_baseHandle->Instance==TIM17)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4a0f      	ldr	r2, [pc, #60]	; (80027c4 <HAL_TIM_Base_MspInit+0x198>)
 8002786:	4293      	cmp	r3, r2
 8002788:	d10b      	bne.n	80027a2 <HAL_TIM_Base_MspInit+0x176>
    __HAL_RCC_TIM17_CLK_ENABLE();
 800278a:	4b09      	ldr	r3, [pc, #36]	; (80027b0 <HAL_TIM_Base_MspInit+0x184>)
 800278c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800278e:	4a08      	ldr	r2, [pc, #32]	; (80027b0 <HAL_TIM_Base_MspInit+0x184>)
 8002790:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002794:	6613      	str	r3, [r2, #96]	; 0x60
 8002796:	4b06      	ldr	r3, [pc, #24]	; (80027b0 <HAL_TIM_Base_MspInit+0x184>)
 8002798:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800279a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800279e:	60fb      	str	r3, [r7, #12]
 80027a0:	68fb      	ldr	r3, [r7, #12]
}
 80027a2:	bf00      	nop
 80027a4:	3740      	adds	r7, #64	; 0x40
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bd80      	pop	{r7, pc}
 80027aa:	bf00      	nop
 80027ac:	40012c00 	.word	0x40012c00
 80027b0:	40021000 	.word	0x40021000
 80027b4:	48000800 	.word	0x48000800
 80027b8:	40013400 	.word	0x40013400
 80027bc:	40014000 	.word	0x40014000
 80027c0:	40014400 	.word	0x40014400
 80027c4:	40014800 	.word	0x40014800

080027c8 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b08a      	sub	sp, #40	; 0x28
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027d0:	f107 0314 	add.w	r3, r7, #20
 80027d4:	2200      	movs	r2, #0
 80027d6:	601a      	str	r2, [r3, #0]
 80027d8:	605a      	str	r2, [r3, #4]
 80027da:	609a      	str	r2, [r3, #8]
 80027dc:	60da      	str	r2, [r3, #12]
 80027de:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4a17      	ldr	r2, [pc, #92]	; (8002844 <HAL_TIM_Encoder_MspInit+0x7c>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d128      	bne.n	800283c <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80027ea:	4b17      	ldr	r3, [pc, #92]	; (8002848 <HAL_TIM_Encoder_MspInit+0x80>)
 80027ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027ee:	4a16      	ldr	r2, [pc, #88]	; (8002848 <HAL_TIM_Encoder_MspInit+0x80>)
 80027f0:	f043 0302 	orr.w	r3, r3, #2
 80027f4:	6593      	str	r3, [r2, #88]	; 0x58
 80027f6:	4b14      	ldr	r3, [pc, #80]	; (8002848 <HAL_TIM_Encoder_MspInit+0x80>)
 80027f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027fa:	f003 0302 	and.w	r3, r3, #2
 80027fe:	613b      	str	r3, [r7, #16]
 8002800:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002802:	4b11      	ldr	r3, [pc, #68]	; (8002848 <HAL_TIM_Encoder_MspInit+0x80>)
 8002804:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002806:	4a10      	ldr	r2, [pc, #64]	; (8002848 <HAL_TIM_Encoder_MspInit+0x80>)
 8002808:	f043 0301 	orr.w	r3, r3, #1
 800280c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800280e:	4b0e      	ldr	r3, [pc, #56]	; (8002848 <HAL_TIM_Encoder_MspInit+0x80>)
 8002810:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002812:	f003 0301 	and.w	r3, r3, #1
 8002816:	60fb      	str	r3, [r7, #12]
 8002818:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = ENC_BTN_A_Pin|ENC_BTN_B_Pin;
 800281a:	23c0      	movs	r3, #192	; 0xc0
 800281c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800281e:	2302      	movs	r3, #2
 8002820:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002822:	2300      	movs	r3, #0
 8002824:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002826:	2300      	movs	r3, #0
 8002828:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800282a:	2302      	movs	r3, #2
 800282c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800282e:	f107 0314 	add.w	r3, r7, #20
 8002832:	4619      	mov	r1, r3
 8002834:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002838:	f002 faba 	bl	8004db0 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800283c:	bf00      	nop
 800283e:	3728      	adds	r7, #40	; 0x28
 8002840:	46bd      	mov	sp, r7
 8002842:	bd80      	pop	{r7, pc}
 8002844:	40000400 	.word	0x40000400
 8002848:	40021000 	.word	0x40021000

0800284c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b08a      	sub	sp, #40	; 0x28
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002854:	f107 0314 	add.w	r3, r7, #20
 8002858:	2200      	movs	r2, #0
 800285a:	601a      	str	r2, [r3, #0]
 800285c:	605a      	str	r2, [r3, #4]
 800285e:	609a      	str	r2, [r3, #8]
 8002860:	60da      	str	r2, [r3, #12]
 8002862:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM16)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4a22      	ldr	r2, [pc, #136]	; (80028f4 <HAL_TIM_MspPostInit+0xa8>)
 800286a:	4293      	cmp	r3, r2
 800286c:	d11c      	bne.n	80028a8 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM16_MspPostInit 0 */

  /* USER CODE END TIM16_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800286e:	4b22      	ldr	r3, [pc, #136]	; (80028f8 <HAL_TIM_MspPostInit+0xac>)
 8002870:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002872:	4a21      	ldr	r2, [pc, #132]	; (80028f8 <HAL_TIM_MspPostInit+0xac>)
 8002874:	f043 0302 	orr.w	r3, r3, #2
 8002878:	64d3      	str	r3, [r2, #76]	; 0x4c
 800287a:	4b1f      	ldr	r3, [pc, #124]	; (80028f8 <HAL_TIM_MspPostInit+0xac>)
 800287c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800287e:	f003 0302 	and.w	r3, r3, #2
 8002882:	613b      	str	r3, [r7, #16]
 8002884:	693b      	ldr	r3, [r7, #16]
    /**TIM16 GPIO Configuration
    PB4     ------> TIM16_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002886:	2310      	movs	r3, #16
 8002888:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800288a:	2302      	movs	r3, #2
 800288c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800288e:	2300      	movs	r3, #0
 8002890:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002892:	2300      	movs	r3, #0
 8002894:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 8002896:	2301      	movs	r3, #1
 8002898:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800289a:	f107 0314 	add.w	r3, r7, #20
 800289e:	4619      	mov	r1, r3
 80028a0:	4816      	ldr	r0, [pc, #88]	; (80028fc <HAL_TIM_MspPostInit+0xb0>)
 80028a2:	f002 fa85 	bl	8004db0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 80028a6:	e020      	b.n	80028ea <HAL_TIM_MspPostInit+0x9e>
  else if(timHandle->Instance==TIM17)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4a14      	ldr	r2, [pc, #80]	; (8002900 <HAL_TIM_MspPostInit+0xb4>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d11b      	bne.n	80028ea <HAL_TIM_MspPostInit+0x9e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028b2:	4b11      	ldr	r3, [pc, #68]	; (80028f8 <HAL_TIM_MspPostInit+0xac>)
 80028b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028b6:	4a10      	ldr	r2, [pc, #64]	; (80028f8 <HAL_TIM_MspPostInit+0xac>)
 80028b8:	f043 0302 	orr.w	r3, r3, #2
 80028bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80028be:	4b0e      	ldr	r3, [pc, #56]	; (80028f8 <HAL_TIM_MspPostInit+0xac>)
 80028c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028c2:	f003 0302 	and.w	r3, r3, #2
 80028c6:	60fb      	str	r3, [r7, #12]
 80028c8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ISO_PWM_BREAK_Pin;
 80028ca:	2320      	movs	r3, #32
 80028cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028ce:	2302      	movs	r3, #2
 80028d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028d2:	2300      	movs	r3, #0
 80028d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028d6:	2300      	movs	r3, #0
 80028d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM17;
 80028da:	230a      	movs	r3, #10
 80028dc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ISO_PWM_BREAK_GPIO_Port, &GPIO_InitStruct);
 80028de:	f107 0314 	add.w	r3, r7, #20
 80028e2:	4619      	mov	r1, r3
 80028e4:	4805      	ldr	r0, [pc, #20]	; (80028fc <HAL_TIM_MspPostInit+0xb0>)
 80028e6:	f002 fa63 	bl	8004db0 <HAL_GPIO_Init>
}
 80028ea:	bf00      	nop
 80028ec:	3728      	adds	r7, #40	; 0x28
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bd80      	pop	{r7, pc}
 80028f2:	bf00      	nop
 80028f4:	40014400 	.word	0x40014400
 80028f8:	40021000 	.word	0x40021000
 80028fc:	48000400 	.word	0x48000400
 8002900:	40014800 	.word	0x40014800

08002904 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002908:	4b22      	ldr	r3, [pc, #136]	; (8002994 <MX_USART1_UART_Init+0x90>)
 800290a:	4a23      	ldr	r2, [pc, #140]	; (8002998 <MX_USART1_UART_Init+0x94>)
 800290c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800290e:	4b21      	ldr	r3, [pc, #132]	; (8002994 <MX_USART1_UART_Init+0x90>)
 8002910:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002914:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002916:	4b1f      	ldr	r3, [pc, #124]	; (8002994 <MX_USART1_UART_Init+0x90>)
 8002918:	2200      	movs	r2, #0
 800291a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800291c:	4b1d      	ldr	r3, [pc, #116]	; (8002994 <MX_USART1_UART_Init+0x90>)
 800291e:	2200      	movs	r2, #0
 8002920:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002922:	4b1c      	ldr	r3, [pc, #112]	; (8002994 <MX_USART1_UART_Init+0x90>)
 8002924:	2200      	movs	r2, #0
 8002926:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002928:	4b1a      	ldr	r3, [pc, #104]	; (8002994 <MX_USART1_UART_Init+0x90>)
 800292a:	220c      	movs	r2, #12
 800292c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800292e:	4b19      	ldr	r3, [pc, #100]	; (8002994 <MX_USART1_UART_Init+0x90>)
 8002930:	2200      	movs	r2, #0
 8002932:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002934:	4b17      	ldr	r3, [pc, #92]	; (8002994 <MX_USART1_UART_Init+0x90>)
 8002936:	2200      	movs	r2, #0
 8002938:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800293a:	4b16      	ldr	r3, [pc, #88]	; (8002994 <MX_USART1_UART_Init+0x90>)
 800293c:	2200      	movs	r2, #0
 800293e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002940:	4b14      	ldr	r3, [pc, #80]	; (8002994 <MX_USART1_UART_Init+0x90>)
 8002942:	2200      	movs	r2, #0
 8002944:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002946:	4b13      	ldr	r3, [pc, #76]	; (8002994 <MX_USART1_UART_Init+0x90>)
 8002948:	2200      	movs	r2, #0
 800294a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800294c:	4811      	ldr	r0, [pc, #68]	; (8002994 <MX_USART1_UART_Init+0x90>)
 800294e:	f007 fb13 	bl	8009f78 <HAL_UART_Init>
 8002952:	4603      	mov	r3, r0
 8002954:	2b00      	cmp	r3, #0
 8002956:	d001      	beq.n	800295c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8002958:	f7ff f9da 	bl	8001d10 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800295c:	2100      	movs	r1, #0
 800295e:	480d      	ldr	r0, [pc, #52]	; (8002994 <MX_USART1_UART_Init+0x90>)
 8002960:	f008 f8da 	bl	800ab18 <HAL_UARTEx_SetTxFifoThreshold>
 8002964:	4603      	mov	r3, r0
 8002966:	2b00      	cmp	r3, #0
 8002968:	d001      	beq.n	800296e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800296a:	f7ff f9d1 	bl	8001d10 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800296e:	2100      	movs	r1, #0
 8002970:	4808      	ldr	r0, [pc, #32]	; (8002994 <MX_USART1_UART_Init+0x90>)
 8002972:	f008 f90f 	bl	800ab94 <HAL_UARTEx_SetRxFifoThreshold>
 8002976:	4603      	mov	r3, r0
 8002978:	2b00      	cmp	r3, #0
 800297a:	d001      	beq.n	8002980 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 800297c:	f7ff f9c8 	bl	8001d10 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002980:	4804      	ldr	r0, [pc, #16]	; (8002994 <MX_USART1_UART_Init+0x90>)
 8002982:	f008 f890 	bl	800aaa6 <HAL_UARTEx_DisableFifoMode>
 8002986:	4603      	mov	r3, r0
 8002988:	2b00      	cmp	r3, #0
 800298a:	d001      	beq.n	8002990 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 800298c:	f7ff f9c0 	bl	8001d10 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002990:	bf00      	nop
 8002992:	bd80      	pop	{r7, pc}
 8002994:	2000080c 	.word	0x2000080c
 8002998:	40013800 	.word	0x40013800

0800299c <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80029a0:	4b22      	ldr	r3, [pc, #136]	; (8002a2c <MX_USART3_UART_Init+0x90>)
 80029a2:	4a23      	ldr	r2, [pc, #140]	; (8002a30 <MX_USART3_UART_Init+0x94>)
 80029a4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80029a6:	4b21      	ldr	r3, [pc, #132]	; (8002a2c <MX_USART3_UART_Init+0x90>)
 80029a8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80029ac:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80029ae:	4b1f      	ldr	r3, [pc, #124]	; (8002a2c <MX_USART3_UART_Init+0x90>)
 80029b0:	2200      	movs	r2, #0
 80029b2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80029b4:	4b1d      	ldr	r3, [pc, #116]	; (8002a2c <MX_USART3_UART_Init+0x90>)
 80029b6:	2200      	movs	r2, #0
 80029b8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80029ba:	4b1c      	ldr	r3, [pc, #112]	; (8002a2c <MX_USART3_UART_Init+0x90>)
 80029bc:	2200      	movs	r2, #0
 80029be:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80029c0:	4b1a      	ldr	r3, [pc, #104]	; (8002a2c <MX_USART3_UART_Init+0x90>)
 80029c2:	220c      	movs	r2, #12
 80029c4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80029c6:	4b19      	ldr	r3, [pc, #100]	; (8002a2c <MX_USART3_UART_Init+0x90>)
 80029c8:	2200      	movs	r2, #0
 80029ca:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80029cc:	4b17      	ldr	r3, [pc, #92]	; (8002a2c <MX_USART3_UART_Init+0x90>)
 80029ce:	2200      	movs	r2, #0
 80029d0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80029d2:	4b16      	ldr	r3, [pc, #88]	; (8002a2c <MX_USART3_UART_Init+0x90>)
 80029d4:	2200      	movs	r2, #0
 80029d6:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80029d8:	4b14      	ldr	r3, [pc, #80]	; (8002a2c <MX_USART3_UART_Init+0x90>)
 80029da:	2200      	movs	r2, #0
 80029dc:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80029de:	4b13      	ldr	r3, [pc, #76]	; (8002a2c <MX_USART3_UART_Init+0x90>)
 80029e0:	2200      	movs	r2, #0
 80029e2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80029e4:	4811      	ldr	r0, [pc, #68]	; (8002a2c <MX_USART3_UART_Init+0x90>)
 80029e6:	f007 fac7 	bl	8009f78 <HAL_UART_Init>
 80029ea:	4603      	mov	r3, r0
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d001      	beq.n	80029f4 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80029f0:	f7ff f98e 	bl	8001d10 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80029f4:	2100      	movs	r1, #0
 80029f6:	480d      	ldr	r0, [pc, #52]	; (8002a2c <MX_USART3_UART_Init+0x90>)
 80029f8:	f008 f88e 	bl	800ab18 <HAL_UARTEx_SetTxFifoThreshold>
 80029fc:	4603      	mov	r3, r0
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d001      	beq.n	8002a06 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8002a02:	f7ff f985 	bl	8001d10 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002a06:	2100      	movs	r1, #0
 8002a08:	4808      	ldr	r0, [pc, #32]	; (8002a2c <MX_USART3_UART_Init+0x90>)
 8002a0a:	f008 f8c3 	bl	800ab94 <HAL_UARTEx_SetRxFifoThreshold>
 8002a0e:	4603      	mov	r3, r0
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d001      	beq.n	8002a18 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8002a14:	f7ff f97c 	bl	8001d10 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8002a18:	4804      	ldr	r0, [pc, #16]	; (8002a2c <MX_USART3_UART_Init+0x90>)
 8002a1a:	f008 f844 	bl	800aaa6 <HAL_UARTEx_DisableFifoMode>
 8002a1e:	4603      	mov	r3, r0
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d001      	beq.n	8002a28 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8002a24:	f7ff f974 	bl	8001d10 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002a28:	bf00      	nop
 8002a2a:	bd80      	pop	{r7, pc}
 8002a2c:	2000089c 	.word	0x2000089c
 8002a30:	40004800 	.word	0x40004800

08002a34 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b0a0      	sub	sp, #128	; 0x80
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a3c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002a40:	2200      	movs	r2, #0
 8002a42:	601a      	str	r2, [r3, #0]
 8002a44:	605a      	str	r2, [r3, #4]
 8002a46:	609a      	str	r2, [r3, #8]
 8002a48:	60da      	str	r2, [r3, #12]
 8002a4a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002a4c:	f107 0318 	add.w	r3, r7, #24
 8002a50:	2254      	movs	r2, #84	; 0x54
 8002a52:	2100      	movs	r1, #0
 8002a54:	4618      	mov	r0, r3
 8002a56:	f00f fdb3 	bl	80125c0 <memset>
  if(uartHandle->Instance==USART1)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4a3d      	ldr	r2, [pc, #244]	; (8002b54 <HAL_UART_MspInit+0x120>)
 8002a60:	4293      	cmp	r3, r2
 8002a62:	d136      	bne.n	8002ad2 <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002a64:	2301      	movs	r3, #1
 8002a66:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002a68:	2300      	movs	r3, #0
 8002a6a:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002a6c:	f107 0318 	add.w	r3, r7, #24
 8002a70:	4618      	mov	r0, r3
 8002a72:	f004 ffe9 	bl	8007a48 <HAL_RCCEx_PeriphCLKConfig>
 8002a76:	4603      	mov	r3, r0
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d001      	beq.n	8002a80 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002a7c:	f7ff f948 	bl	8001d10 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002a80:	4b35      	ldr	r3, [pc, #212]	; (8002b58 <HAL_UART_MspInit+0x124>)
 8002a82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a84:	4a34      	ldr	r2, [pc, #208]	; (8002b58 <HAL_UART_MspInit+0x124>)
 8002a86:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a8a:	6613      	str	r3, [r2, #96]	; 0x60
 8002a8c:	4b32      	ldr	r3, [pc, #200]	; (8002b58 <HAL_UART_MspInit+0x124>)
 8002a8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a90:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a94:	617b      	str	r3, [r7, #20]
 8002a96:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a98:	4b2f      	ldr	r3, [pc, #188]	; (8002b58 <HAL_UART_MspInit+0x124>)
 8002a9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a9c:	4a2e      	ldr	r2, [pc, #184]	; (8002b58 <HAL_UART_MspInit+0x124>)
 8002a9e:	f043 0304 	orr.w	r3, r3, #4
 8002aa2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002aa4:	4b2c      	ldr	r3, [pc, #176]	; (8002b58 <HAL_UART_MspInit+0x124>)
 8002aa6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002aa8:	f003 0304 	and.w	r3, r3, #4
 8002aac:	613b      	str	r3, [r7, #16]
 8002aae:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002ab0:	2330      	movs	r3, #48	; 0x30
 8002ab2:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ab4:	2302      	movs	r3, #2
 8002ab6:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ab8:	2300      	movs	r3, #0
 8002aba:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002abc:	2300      	movs	r3, #0
 8002abe:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002ac0:	2307      	movs	r3, #7
 8002ac2:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002ac4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002ac8:	4619      	mov	r1, r3
 8002aca:	4824      	ldr	r0, [pc, #144]	; (8002b5c <HAL_UART_MspInit+0x128>)
 8002acc:	f002 f970 	bl	8004db0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8002ad0:	e03b      	b.n	8002b4a <HAL_UART_MspInit+0x116>
  else if(uartHandle->Instance==USART3)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4a22      	ldr	r2, [pc, #136]	; (8002b60 <HAL_UART_MspInit+0x12c>)
 8002ad8:	4293      	cmp	r3, r2
 8002ada:	d136      	bne.n	8002b4a <HAL_UART_MspInit+0x116>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002adc:	2304      	movs	r3, #4
 8002ade:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002ae4:	f107 0318 	add.w	r3, r7, #24
 8002ae8:	4618      	mov	r0, r3
 8002aea:	f004 ffad 	bl	8007a48 <HAL_RCCEx_PeriphCLKConfig>
 8002aee:	4603      	mov	r3, r0
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d001      	beq.n	8002af8 <HAL_UART_MspInit+0xc4>
      Error_Handler();
 8002af4:	f7ff f90c 	bl	8001d10 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002af8:	4b17      	ldr	r3, [pc, #92]	; (8002b58 <HAL_UART_MspInit+0x124>)
 8002afa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002afc:	4a16      	ldr	r2, [pc, #88]	; (8002b58 <HAL_UART_MspInit+0x124>)
 8002afe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b02:	6593      	str	r3, [r2, #88]	; 0x58
 8002b04:	4b14      	ldr	r3, [pc, #80]	; (8002b58 <HAL_UART_MspInit+0x124>)
 8002b06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b08:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b0c:	60fb      	str	r3, [r7, #12]
 8002b0e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b10:	4b11      	ldr	r3, [pc, #68]	; (8002b58 <HAL_UART_MspInit+0x124>)
 8002b12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b14:	4a10      	ldr	r2, [pc, #64]	; (8002b58 <HAL_UART_MspInit+0x124>)
 8002b16:	f043 0302 	orr.w	r3, r3, #2
 8002b1a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002b1c:	4b0e      	ldr	r3, [pc, #56]	; (8002b58 <HAL_UART_MspInit+0x124>)
 8002b1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b20:	f003 0302 	and.w	r3, r3, #2
 8002b24:	60bb      	str	r3, [r7, #8]
 8002b26:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002b28:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002b2c:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b2e:	2302      	movs	r3, #2
 8002b30:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b32:	2300      	movs	r3, #0
 8002b34:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b36:	2300      	movs	r3, #0
 8002b38:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002b3a:	2307      	movs	r3, #7
 8002b3c:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b3e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002b42:	4619      	mov	r1, r3
 8002b44:	4807      	ldr	r0, [pc, #28]	; (8002b64 <HAL_UART_MspInit+0x130>)
 8002b46:	f002 f933 	bl	8004db0 <HAL_GPIO_Init>
}
 8002b4a:	bf00      	nop
 8002b4c:	3780      	adds	r7, #128	; 0x80
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bd80      	pop	{r7, pc}
 8002b52:	bf00      	nop
 8002b54:	40013800 	.word	0x40013800
 8002b58:	40021000 	.word	0x40021000
 8002b5c:	48000800 	.word	0x48000800
 8002b60:	40004800 	.word	0x40004800
 8002b64:	48000400 	.word	0x48000400

08002b68 <vTask_Break>:
#include "semphr.h"
#include "adc.h"

extern SemaphoreHandle_t xUartMutex;

void vTask_Break(void *pvParameters){
 8002b68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b6a:	b08b      	sub	sp, #44	; 0x2c
 8002b6c:	af02      	add	r7, sp, #8
 8002b6e:	6078      	str	r0, [r7, #4]
	BREAK_HandleTypeDef hbreak1;
	uint16_t VBus_raw;
	float Vin, VBus;
	if(xSemaphoreTake(xUartMutex, portMAX_DELAY) == pdTRUE){
 8002b70:	4b57      	ldr	r3, [pc, #348]	; (8002cd0 <vTask_Break+0x168>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002b78:	4618      	mov	r0, r3
 8002b7a:	f00c fbf7 	bl	800f36c <xQueueSemaphoreTake>
 8002b7e:	4603      	mov	r3, r0
 8002b80:	2b01      	cmp	r3, #1
 8002b82:	d109      	bne.n	8002b98 <vTask_Break+0x30>
		printf("Init Break...         ");
 8002b84:	4853      	ldr	r0, [pc, #332]	; (8002cd4 <vTask_Break+0x16c>)
 8002b86:	f00f fbd5 	bl	8012334 <iprintf>
		xSemaphoreGive(xUartMutex);
 8002b8a:	4b51      	ldr	r3, [pc, #324]	; (8002cd0 <vTask_Break+0x168>)
 8002b8c:	6818      	ldr	r0, [r3, #0]
 8002b8e:	2300      	movs	r3, #0
 8002b90:	2200      	movs	r2, #0
 8002b92:	2100      	movs	r1, #0
 8002b94:	f00c f970 	bl	800ee78 <xQueueGenericSend>
	}
	Break_Init(&hbreak1, (TIM_HandleTypeDef*)pvParameters);
 8002b98:	f107 0308 	add.w	r3, r7, #8
 8002b9c:	6879      	ldr	r1, [r7, #4]
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	f000 f8a4 	bl	8002cec <Break_Init>
	if(xSemaphoreTake(xUartMutex, portMAX_DELAY) == pdTRUE){
 8002ba4:	4b4a      	ldr	r3, [pc, #296]	; (8002cd0 <vTask_Break+0x168>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002bac:	4618      	mov	r0, r3
 8002bae:	f00c fbdd 	bl	800f36c <xQueueSemaphoreTake>
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	2b01      	cmp	r3, #1
 8002bb6:	d109      	bne.n	8002bcc <vTask_Break+0x64>
		printf(" Done\r\n");
 8002bb8:	4847      	ldr	r0, [pc, #284]	; (8002cd8 <vTask_Break+0x170>)
 8002bba:	f00f fc21 	bl	8012400 <puts>
		xSemaphoreGive(xUartMutex);
 8002bbe:	4b44      	ldr	r3, [pc, #272]	; (8002cd0 <vTask_Break+0x168>)
 8002bc0:	6818      	ldr	r0, [r3, #0]
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	2100      	movs	r1, #0
 8002bc8:	f00c f956 	bl	800ee78 <xQueueGenericSend>
	}

	for(;;){
		HAL_ADC_Start(&hadc4);
 8002bcc:	4843      	ldr	r0, [pc, #268]	; (8002cdc <vTask_Break+0x174>)
 8002bce:	f000 ff69 	bl	8003aa4 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc4, HAL_MAX_DELAY);
 8002bd2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002bd6:	4841      	ldr	r0, [pc, #260]	; (8002cdc <vTask_Break+0x174>)
 8002bd8:	f001 f848 	bl	8003c6c <HAL_ADC_PollForConversion>
		VBus_raw = HAL_ADC_GetValue(&hadc4);
 8002bdc:	483f      	ldr	r0, [pc, #252]	; (8002cdc <vTask_Break+0x174>)
 8002bde:	f001 f94b 	bl	8003e78 <HAL_ADC_GetValue>
 8002be2:	4603      	mov	r3, r0
 8002be4:	83fb      	strh	r3, [r7, #30]
		Vin = ((float)VBus_raw)*3.3/4096;
 8002be6:	8bfb      	ldrh	r3, [r7, #30]
 8002be8:	ee07 3a90 	vmov	s15, r3
 8002bec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002bf0:	ee17 0a90 	vmov	r0, s15
 8002bf4:	f7fd fcd0 	bl	8000598 <__aeabi_f2d>
 8002bf8:	a32f      	add	r3, pc, #188	; (adr r3, 8002cb8 <vTask_Break+0x150>)
 8002bfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bfe:	f7fd fd23 	bl	8000648 <__aeabi_dmul>
 8002c02:	4602      	mov	r2, r0
 8002c04:	460b      	mov	r3, r1
 8002c06:	4610      	mov	r0, r2
 8002c08:	4619      	mov	r1, r3
 8002c0a:	f04f 0200 	mov.w	r2, #0
 8002c0e:	4b34      	ldr	r3, [pc, #208]	; (8002ce0 <vTask_Break+0x178>)
 8002c10:	f7fd fe44 	bl	800089c <__aeabi_ddiv>
 8002c14:	4602      	mov	r2, r0
 8002c16:	460b      	mov	r3, r1
 8002c18:	4610      	mov	r0, r2
 8002c1a:	4619      	mov	r1, r3
 8002c1c:	f7fd ffec 	bl	8000bf8 <__aeabi_d2f>
 8002c20:	4603      	mov	r3, r0
 8002c22:	61bb      	str	r3, [r7, #24]
		VBus = (Vin-2.56)/4*471;
 8002c24:	69b8      	ldr	r0, [r7, #24]
 8002c26:	f7fd fcb7 	bl	8000598 <__aeabi_f2d>
 8002c2a:	a325      	add	r3, pc, #148	; (adr r3, 8002cc0 <vTask_Break+0x158>)
 8002c2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c30:	f7fd fb52 	bl	80002d8 <__aeabi_dsub>
 8002c34:	4602      	mov	r2, r0
 8002c36:	460b      	mov	r3, r1
 8002c38:	4610      	mov	r0, r2
 8002c3a:	4619      	mov	r1, r3
 8002c3c:	f04f 0200 	mov.w	r2, #0
 8002c40:	4b28      	ldr	r3, [pc, #160]	; (8002ce4 <vTask_Break+0x17c>)
 8002c42:	f7fd fe2b 	bl	800089c <__aeabi_ddiv>
 8002c46:	4602      	mov	r2, r0
 8002c48:	460b      	mov	r3, r1
 8002c4a:	4610      	mov	r0, r2
 8002c4c:	4619      	mov	r1, r3
 8002c4e:	a31e      	add	r3, pc, #120	; (adr r3, 8002cc8 <vTask_Break+0x160>)
 8002c50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c54:	f7fd fcf8 	bl	8000648 <__aeabi_dmul>
 8002c58:	4602      	mov	r2, r0
 8002c5a:	460b      	mov	r3, r1
 8002c5c:	4610      	mov	r0, r2
 8002c5e:	4619      	mov	r1, r3
 8002c60:	f7fd ffca 	bl	8000bf8 <__aeabi_d2f>
 8002c64:	4603      	mov	r3, r0
 8002c66:	617b      	str	r3, [r7, #20]
		if(xSemaphoreTake(xUartMutex, portMAX_DELAY) == pdTRUE){
 8002c68:	4b19      	ldr	r3, [pc, #100]	; (8002cd0 <vTask_Break+0x168>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002c70:	4618      	mov	r0, r3
 8002c72:	f00c fb7b 	bl	800f36c <xQueueSemaphoreTake>
 8002c76:	4603      	mov	r3, r0
 8002c78:	2b01      	cmp	r3, #1
 8002c7a:	d119      	bne.n	8002cb0 <vTask_Break+0x148>
			printf("Vbus 0x%4d; Vin %1.3f; VBus = %2.2f V\r\n", VBus_raw, Vin, VBus);
 8002c7c:	8bfe      	ldrh	r6, [r7, #30]
 8002c7e:	69b8      	ldr	r0, [r7, #24]
 8002c80:	f7fd fc8a 	bl	8000598 <__aeabi_f2d>
 8002c84:	4604      	mov	r4, r0
 8002c86:	460d      	mov	r5, r1
 8002c88:	6978      	ldr	r0, [r7, #20]
 8002c8a:	f7fd fc85 	bl	8000598 <__aeabi_f2d>
 8002c8e:	4602      	mov	r2, r0
 8002c90:	460b      	mov	r3, r1
 8002c92:	e9cd 2300 	strd	r2, r3, [sp]
 8002c96:	4622      	mov	r2, r4
 8002c98:	462b      	mov	r3, r5
 8002c9a:	4631      	mov	r1, r6
 8002c9c:	4812      	ldr	r0, [pc, #72]	; (8002ce8 <vTask_Break+0x180>)
 8002c9e:	f00f fb49 	bl	8012334 <iprintf>
			xSemaphoreGive(xUartMutex);
 8002ca2:	4b0b      	ldr	r3, [pc, #44]	; (8002cd0 <vTask_Break+0x168>)
 8002ca4:	6818      	ldr	r0, [r3, #0]
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	2200      	movs	r2, #0
 8002caa:	2100      	movs	r1, #0
 8002cac:	f00c f8e4 	bl	800ee78 <xQueueGenericSend>
		}
		vTaskDelay(100);
 8002cb0:	2064      	movs	r0, #100	; 0x64
 8002cb2:	f00c fed9 	bl	800fa68 <vTaskDelay>
		HAL_ADC_Start(&hadc4);
 8002cb6:	e789      	b.n	8002bcc <vTask_Break+0x64>
 8002cb8:	66666666 	.word	0x66666666
 8002cbc:	400a6666 	.word	0x400a6666
 8002cc0:	47ae147b 	.word	0x47ae147b
 8002cc4:	40047ae1 	.word	0x40047ae1
 8002cc8:	00000000 	.word	0x00000000
 8002ccc:	407d7000 	.word	0x407d7000
 8002cd0:	200005d4 	.word	0x200005d4
 8002cd4:	0801468c 	.word	0x0801468c
 8002cd8:	080146a4 	.word	0x080146a4
 8002cdc:	200004b0 	.word	0x200004b0
 8002ce0:	40b00000 	.word	0x40b00000
 8002ce4:	40100000 	.word	0x40100000
 8002ce8:	080146ac 	.word	0x080146ac

08002cec <Break_Init>:
	}
}

void Break_Init(BREAK_HandleTypeDef* hbreak, TIM_HandleTypeDef* htim){
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b082      	sub	sp, #8
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
 8002cf4:	6039      	str	r1, [r7, #0]
	hbreak->htim = htim;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	683a      	ldr	r2, [r7, #0]
 8002cfa:	601a      	str	r2, [r3, #0]
	hbreak->Max_Pwm = __HAL_TIM_GET_AUTORELOAD(htim);
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d02:	b29a      	uxth	r2, r3
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	809a      	strh	r2, [r3, #4]
	hbreak->Pwm = 0;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	80da      	strh	r2, [r3, #6]
	hbreak->Channel = BREAK_CHANNEL;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2200      	movs	r2, #0
 8002d12:	721a      	strb	r2, [r3, #8]
	Break_Set_DutyCycle(hbreak, 0);
 8002d14:	ed9f 0a08 	vldr	s0, [pc, #32]	; 8002d38 <Break_Init+0x4c>
 8002d18:	6878      	ldr	r0, [r7, #4]
 8002d1a:	f000 f80f 	bl	8002d3c <Break_Set_DutyCycle>
	HAL_TIM_PWM_Start(hbreak->htim, hbreak->Channel);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681a      	ldr	r2, [r3, #0]
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	7a1b      	ldrb	r3, [r3, #8]
 8002d26:	4619      	mov	r1, r3
 8002d28:	4610      	mov	r0, r2
 8002d2a:	f005 fa0d 	bl	8008148 <HAL_TIM_PWM_Start>
}
 8002d2e:	bf00      	nop
 8002d30:	3708      	adds	r7, #8
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bd80      	pop	{r7, pc}
 8002d36:	bf00      	nop
 8002d38:	00000000 	.word	0x00000000

08002d3c <Break_Set_DutyCycle>:

void Break_Set_DutyCycle(BREAK_HandleTypeDef* hbreak, float dutyCycle){
 8002d3c:	b480      	push	{r7}
 8002d3e:	b083      	sub	sp, #12
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
 8002d44:	ed87 0a00 	vstr	s0, [r7]
	hbreak->Pwm = (uint16_t)(dutyCycle*((float)hbreak->Max_Pwm));
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	889b      	ldrh	r3, [r3, #4]
 8002d4c:	ee07 3a90 	vmov	s15, r3
 8002d50:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002d54:	edd7 7a00 	vldr	s15, [r7]
 8002d58:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d5c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002d60:	ee17 3a90 	vmov	r3, s15
 8002d64:	b29a      	uxth	r2, r3
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	80da      	strh	r2, [r3, #6]
	__HAL_TIM_SET_COMPARE(hbreak->htim, hbreak->Channel, hbreak->Pwm);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	7a1b      	ldrb	r3, [r3, #8]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d106      	bne.n	8002d80 <Break_Set_DutyCycle+0x44>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	88da      	ldrh	r2, [r3, #6]
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	635a      	str	r2, [r3, #52]	; 0x34
}
 8002d7e:	e036      	b.n	8002dee <Break_Set_DutyCycle+0xb2>
	__HAL_TIM_SET_COMPARE(hbreak->htim, hbreak->Channel, hbreak->Pwm);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	7a1b      	ldrb	r3, [r3, #8]
 8002d84:	2b04      	cmp	r3, #4
 8002d86:	d107      	bne.n	8002d98 <Break_Set_DutyCycle+0x5c>
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	88d9      	ldrh	r1, [r3, #6]
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	681a      	ldr	r2, [r3, #0]
 8002d92:	460b      	mov	r3, r1
 8002d94:	6393      	str	r3, [r2, #56]	; 0x38
}
 8002d96:	e02a      	b.n	8002dee <Break_Set_DutyCycle+0xb2>
	__HAL_TIM_SET_COMPARE(hbreak->htim, hbreak->Channel, hbreak->Pwm);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	7a1b      	ldrb	r3, [r3, #8]
 8002d9c:	2b08      	cmp	r3, #8
 8002d9e:	d107      	bne.n	8002db0 <Break_Set_DutyCycle+0x74>
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	88d9      	ldrh	r1, [r3, #6]
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	681a      	ldr	r2, [r3, #0]
 8002daa:	460b      	mov	r3, r1
 8002dac:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8002dae:	e01e      	b.n	8002dee <Break_Set_DutyCycle+0xb2>
	__HAL_TIM_SET_COMPARE(hbreak->htim, hbreak->Channel, hbreak->Pwm);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	7a1b      	ldrb	r3, [r3, #8]
 8002db4:	2b0c      	cmp	r3, #12
 8002db6:	d107      	bne.n	8002dc8 <Break_Set_DutyCycle+0x8c>
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	88d9      	ldrh	r1, [r3, #6]
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	681a      	ldr	r2, [r3, #0]
 8002dc2:	460b      	mov	r3, r1
 8002dc4:	6413      	str	r3, [r2, #64]	; 0x40
}
 8002dc6:	e012      	b.n	8002dee <Break_Set_DutyCycle+0xb2>
	__HAL_TIM_SET_COMPARE(hbreak->htim, hbreak->Channel, hbreak->Pwm);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	7a1b      	ldrb	r3, [r3, #8]
 8002dcc:	2b10      	cmp	r3, #16
 8002dce:	d107      	bne.n	8002de0 <Break_Set_DutyCycle+0xa4>
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	88d9      	ldrh	r1, [r3, #6]
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	681a      	ldr	r2, [r3, #0]
 8002dda:	460b      	mov	r3, r1
 8002ddc:	6493      	str	r3, [r2, #72]	; 0x48
}
 8002dde:	e006      	b.n	8002dee <Break_Set_DutyCycle+0xb2>
	__HAL_TIM_SET_COMPARE(hbreak->htim, hbreak->Channel, hbreak->Pwm);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	88d9      	ldrh	r1, [r3, #6]
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	681a      	ldr	r2, [r3, #0]
 8002dea:	460b      	mov	r3, r1
 8002dec:	64d3      	str	r3, [r2, #76]	; 0x4c
}
 8002dee:	bf00      	nop
 8002df0:	370c      	adds	r7, #12
 8002df2:	46bd      	mov	sp, r7
 8002df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df8:	4770      	bx	lr
	...

08002dfc <vTask_Button>:
extern TaskHandle_t xHandle_Button;
extern QueueHandle_t xExtIQueue;
extern TIM_HandleTypeDef htim17;
uint8_t break_state = 0;

void vTask_Button(void *pvParameters){
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b084      	sub	sp, #16
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
	Button_HandleTypeDef button;

	if(xSemaphoreTake(xUartMutex, portMAX_DELAY) == pdTRUE){
 8002e04:	4b74      	ldr	r3, [pc, #464]	; (8002fd8 <vTask_Button+0x1dc>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	f00c faad 	bl	800f36c <xQueueSemaphoreTake>
 8002e12:	4603      	mov	r3, r0
 8002e14:	2b01      	cmp	r3, #1
 8002e16:	d109      	bne.n	8002e2c <vTask_Button+0x30>
		printf("Init Button...         ");
 8002e18:	4870      	ldr	r0, [pc, #448]	; (8002fdc <vTask_Button+0x1e0>)
 8002e1a:	f00f fa8b 	bl	8012334 <iprintf>
		xSemaphoreGive(xUartMutex);
 8002e1e:	4b6e      	ldr	r3, [pc, #440]	; (8002fd8 <vTask_Button+0x1dc>)
 8002e20:	6818      	ldr	r0, [r3, #0]
 8002e22:	2300      	movs	r3, #0
 8002e24:	2200      	movs	r2, #0
 8002e26:	2100      	movs	r1, #0
 8002e28:	f00c f826 	bl	800ee78 <xQueueGenericSend>
	}
	Button_Init();
 8002e2c:	f000 f8ec 	bl	8003008 <Button_Init>
	if(xSemaphoreTake(xUartMutex, portMAX_DELAY) == pdTRUE){
 8002e30:	4b69      	ldr	r3, [pc, #420]	; (8002fd8 <vTask_Button+0x1dc>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002e38:	4618      	mov	r0, r3
 8002e3a:	f00c fa97 	bl	800f36c <xQueueSemaphoreTake>
 8002e3e:	4603      	mov	r3, r0
 8002e40:	2b01      	cmp	r3, #1
 8002e42:	d109      	bne.n	8002e58 <vTask_Button+0x5c>
		printf("Done\r\n");
 8002e44:	4866      	ldr	r0, [pc, #408]	; (8002fe0 <vTask_Button+0x1e4>)
 8002e46:	f00f fadb 	bl	8012400 <puts>
		xSemaphoreGive(xUartMutex);
 8002e4a:	4b63      	ldr	r3, [pc, #396]	; (8002fd8 <vTask_Button+0x1dc>)
 8002e4c:	6818      	ldr	r0, [r3, #0]
 8002e4e:	2300      	movs	r3, #0
 8002e50:	2200      	movs	r2, #0
 8002e52:	2100      	movs	r1, #0
 8002e54:	f00c f810 	bl	800ee78 <xQueueGenericSend>
	}

	for(;;){
		if(pdPASS == xQueueReceive(xExtIQueue, &button, portMAX_DELAY)){
 8002e58:	4b62      	ldr	r3, [pc, #392]	; (8002fe4 <vTask_Button+0x1e8>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f107 0108 	add.w	r1, r7, #8
 8002e60:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002e64:	4618      	mov	r0, r3
 8002e66:	f00c f9a1 	bl	800f1ac <xQueueReceive>
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	2b01      	cmp	r3, #1
 8002e6e:	f040 80ad 	bne.w	8002fcc <vTask_Button+0x1d0>
			switch(button.pin){
 8002e72:	89bb      	ldrh	r3, [r7, #12]
 8002e74:	2b80      	cmp	r3, #128	; 0x80
 8002e76:	d074      	beq.n	8002f62 <vTask_Button+0x166>
 8002e78:	2b80      	cmp	r3, #128	; 0x80
 8002e7a:	f300 809c 	bgt.w	8002fb6 <vTask_Button+0x1ba>
 8002e7e:	2b40      	cmp	r3, #64	; 0x40
 8002e80:	d05a      	beq.n	8002f38 <vTask_Button+0x13c>
 8002e82:	2b40      	cmp	r3, #64	; 0x40
 8002e84:	f300 8097 	bgt.w	8002fb6 <vTask_Button+0x1ba>
 8002e88:	2b20      	cmp	r3, #32
 8002e8a:	d07f      	beq.n	8002f8c <vTask_Button+0x190>
 8002e8c:	2b20      	cmp	r3, #32
 8002e8e:	f300 8092 	bgt.w	8002fb6 <vTask_Button+0x1ba>
 8002e92:	2b04      	cmp	r3, #4
 8002e94:	d002      	beq.n	8002e9c <vTask_Button+0xa0>
 8002e96:	2b10      	cmp	r3, #16
 8002e98:	d024      	beq.n	8002ee4 <vTask_Button+0xe8>
					printf("BTN_ENC\r\n");
					xSemaphoreGive(xUartMutex);
				}
				break;
			default:
				break;
 8002e9a:	e08c      	b.n	8002fb6 <vTask_Button+0x1ba>
				HAL_GPIO_TogglePin(Pwr_Enable_U_GPIO_Port, Pwr_Enable_U_Pin);
 8002e9c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002ea0:	4851      	ldr	r0, [pc, #324]	; (8002fe8 <vTask_Button+0x1ec>)
 8002ea2:	f002 f91f 	bl	80050e4 <HAL_GPIO_TogglePin>
				HAL_GPIO_TogglePin(Pwr_Enable_V_GPIO_Port, Pwr_Enable_V_Pin);
 8002ea6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002eaa:	484f      	ldr	r0, [pc, #316]	; (8002fe8 <vTask_Button+0x1ec>)
 8002eac:	f002 f91a 	bl	80050e4 <HAL_GPIO_TogglePin>
				HAL_GPIO_TogglePin(Pwr_Enable_W_GPIO_Port, Pwr_Enable_W_Pin);
 8002eb0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002eb4:	484c      	ldr	r0, [pc, #304]	; (8002fe8 <vTask_Button+0x1ec>)
 8002eb6:	f002 f915 	bl	80050e4 <HAL_GPIO_TogglePin>
				if(xSemaphoreTake(xUartMutex, portMAX_DELAY) == pdTRUE){
 8002eba:	4b47      	ldr	r3, [pc, #284]	; (8002fd8 <vTask_Button+0x1dc>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	f00c fa52 	bl	800f36c <xQueueSemaphoreTake>
 8002ec8:	4603      	mov	r3, r0
 8002eca:	2b01      	cmp	r3, #1
 8002ecc:	d175      	bne.n	8002fba <vTask_Button+0x1be>
					printf("BTN1\r\n");
 8002ece:	4847      	ldr	r0, [pc, #284]	; (8002fec <vTask_Button+0x1f0>)
 8002ed0:	f00f fa96 	bl	8012400 <puts>
					xSemaphoreGive(xUartMutex);
 8002ed4:	4b40      	ldr	r3, [pc, #256]	; (8002fd8 <vTask_Button+0x1dc>)
 8002ed6:	6818      	ldr	r0, [r3, #0]
 8002ed8:	2300      	movs	r3, #0
 8002eda:	2200      	movs	r2, #0
 8002edc:	2100      	movs	r1, #0
 8002ede:	f00b ffcb 	bl	800ee78 <xQueueGenericSend>
				break;
 8002ee2:	e06a      	b.n	8002fba <vTask_Button+0x1be>
				break_state = 1 - break_state;
 8002ee4:	4b42      	ldr	r3, [pc, #264]	; (8002ff0 <vTask_Button+0x1f4>)
 8002ee6:	781b      	ldrb	r3, [r3, #0]
 8002ee8:	f1c3 0301 	rsb	r3, r3, #1
 8002eec:	b2da      	uxtb	r2, r3
 8002eee:	4b40      	ldr	r3, [pc, #256]	; (8002ff0 <vTask_Button+0x1f4>)
 8002ef0:	701a      	strb	r2, [r3, #0]
				if(break_state){
 8002ef2:	4b3f      	ldr	r3, [pc, #252]	; (8002ff0 <vTask_Button+0x1f4>)
 8002ef4:	781b      	ldrb	r3, [r3, #0]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d005      	beq.n	8002f06 <vTask_Button+0x10a>
					__HAL_TIM_SET_COMPARE(&htim17, TIM_CHANNEL_1, 256);
 8002efa:	4b3e      	ldr	r3, [pc, #248]	; (8002ff4 <vTask_Button+0x1f8>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002f02:	635a      	str	r2, [r3, #52]	; 0x34
 8002f04:	e003      	b.n	8002f0e <vTask_Button+0x112>
					__HAL_TIM_SET_COMPARE(&htim17, TIM_CHANNEL_1, 0);
 8002f06:	4b3b      	ldr	r3, [pc, #236]	; (8002ff4 <vTask_Button+0x1f8>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	635a      	str	r2, [r3, #52]	; 0x34
				if(xSemaphoreTake(xUartMutex, portMAX_DELAY) == pdTRUE){
 8002f0e:	4b32      	ldr	r3, [pc, #200]	; (8002fd8 <vTask_Button+0x1dc>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002f16:	4618      	mov	r0, r3
 8002f18:	f00c fa28 	bl	800f36c <xQueueSemaphoreTake>
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	2b01      	cmp	r3, #1
 8002f20:	d14d      	bne.n	8002fbe <vTask_Button+0x1c2>
					printf("BTN2\r\n");
 8002f22:	4835      	ldr	r0, [pc, #212]	; (8002ff8 <vTask_Button+0x1fc>)
 8002f24:	f00f fa6c 	bl	8012400 <puts>
					xSemaphoreGive(xUartMutex);
 8002f28:	4b2b      	ldr	r3, [pc, #172]	; (8002fd8 <vTask_Button+0x1dc>)
 8002f2a:	6818      	ldr	r0, [r3, #0]
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	2200      	movs	r2, #0
 8002f30:	2100      	movs	r1, #0
 8002f32:	f00b ffa1 	bl	800ee78 <xQueueGenericSend>
				break;
 8002f36:	e042      	b.n	8002fbe <vTask_Button+0x1c2>
				if(xSemaphoreTake(xUartMutex, portMAX_DELAY) == pdTRUE){
 8002f38:	4b27      	ldr	r3, [pc, #156]	; (8002fd8 <vTask_Button+0x1dc>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002f40:	4618      	mov	r0, r3
 8002f42:	f00c fa13 	bl	800f36c <xQueueSemaphoreTake>
 8002f46:	4603      	mov	r3, r0
 8002f48:	2b01      	cmp	r3, #1
 8002f4a:	d13a      	bne.n	8002fc2 <vTask_Button+0x1c6>
					printf("BTN3\r\n");
 8002f4c:	482b      	ldr	r0, [pc, #172]	; (8002ffc <vTask_Button+0x200>)
 8002f4e:	f00f fa57 	bl	8012400 <puts>
					xSemaphoreGive(xUartMutex);
 8002f52:	4b21      	ldr	r3, [pc, #132]	; (8002fd8 <vTask_Button+0x1dc>)
 8002f54:	6818      	ldr	r0, [r3, #0]
 8002f56:	2300      	movs	r3, #0
 8002f58:	2200      	movs	r2, #0
 8002f5a:	2100      	movs	r1, #0
 8002f5c:	f00b ff8c 	bl	800ee78 <xQueueGenericSend>
				break;
 8002f60:	e02f      	b.n	8002fc2 <vTask_Button+0x1c6>
				if(xSemaphoreTake(xUartMutex, portMAX_DELAY) == pdTRUE){
 8002f62:	4b1d      	ldr	r3, [pc, #116]	; (8002fd8 <vTask_Button+0x1dc>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	f00c f9fe 	bl	800f36c <xQueueSemaphoreTake>
 8002f70:	4603      	mov	r3, r0
 8002f72:	2b01      	cmp	r3, #1
 8002f74:	d127      	bne.n	8002fc6 <vTask_Button+0x1ca>
					printf("BTN4\r\n");
 8002f76:	4822      	ldr	r0, [pc, #136]	; (8003000 <vTask_Button+0x204>)
 8002f78:	f00f fa42 	bl	8012400 <puts>
					xSemaphoreGive(xUartMutex);
 8002f7c:	4b16      	ldr	r3, [pc, #88]	; (8002fd8 <vTask_Button+0x1dc>)
 8002f7e:	6818      	ldr	r0, [r3, #0]
 8002f80:	2300      	movs	r3, #0
 8002f82:	2200      	movs	r2, #0
 8002f84:	2100      	movs	r1, #0
 8002f86:	f00b ff77 	bl	800ee78 <xQueueGenericSend>
				break;
 8002f8a:	e01c      	b.n	8002fc6 <vTask_Button+0x1ca>
				if(xSemaphoreTake(xUartMutex, portMAX_DELAY) == pdTRUE){
 8002f8c:	4b12      	ldr	r3, [pc, #72]	; (8002fd8 <vTask_Button+0x1dc>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002f94:	4618      	mov	r0, r3
 8002f96:	f00c f9e9 	bl	800f36c <xQueueSemaphoreTake>
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	2b01      	cmp	r3, #1
 8002f9e:	d114      	bne.n	8002fca <vTask_Button+0x1ce>
					printf("BTN_ENC\r\n");
 8002fa0:	4818      	ldr	r0, [pc, #96]	; (8003004 <vTask_Button+0x208>)
 8002fa2:	f00f fa2d 	bl	8012400 <puts>
					xSemaphoreGive(xUartMutex);
 8002fa6:	4b0c      	ldr	r3, [pc, #48]	; (8002fd8 <vTask_Button+0x1dc>)
 8002fa8:	6818      	ldr	r0, [r3, #0]
 8002faa:	2300      	movs	r3, #0
 8002fac:	2200      	movs	r2, #0
 8002fae:	2100      	movs	r1, #0
 8002fb0:	f00b ff62 	bl	800ee78 <xQueueGenericSend>
				break;
 8002fb4:	e009      	b.n	8002fca <vTask_Button+0x1ce>
				break;
 8002fb6:	bf00      	nop
 8002fb8:	e008      	b.n	8002fcc <vTask_Button+0x1d0>
				break;
 8002fba:	bf00      	nop
 8002fbc:	e006      	b.n	8002fcc <vTask_Button+0x1d0>
				break;
 8002fbe:	bf00      	nop
 8002fc0:	e004      	b.n	8002fcc <vTask_Button+0x1d0>
				break;
 8002fc2:	bf00      	nop
 8002fc4:	e002      	b.n	8002fcc <vTask_Button+0x1d0>
				break;
 8002fc6:	bf00      	nop
 8002fc8:	e000      	b.n	8002fcc <vTask_Button+0x1d0>
				break;
 8002fca:	bf00      	nop
			}
		}

		vTaskDelay(1000);
 8002fcc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002fd0:	f00c fd4a 	bl	800fa68 <vTaskDelay>
		if(pdPASS == xQueueReceive(xExtIQueue, &button, portMAX_DELAY)){
 8002fd4:	e740      	b.n	8002e58 <vTask_Button+0x5c>
 8002fd6:	bf00      	nop
 8002fd8:	200005d4 	.word	0x200005d4
 8002fdc:	080146d4 	.word	0x080146d4
 8002fe0:	080146ec 	.word	0x080146ec
 8002fe4:	200005e0 	.word	0x200005e0
 8002fe8:	48000800 	.word	0x48000800
 8002fec:	080146f4 	.word	0x080146f4
 8002ff0:	2000092c 	.word	0x2000092c
 8002ff4:	200007c0 	.word	0x200007c0
 8002ff8:	080146fc 	.word	0x080146fc
 8002ffc:	08014704 	.word	0x08014704
 8003000:	0801470c 	.word	0x0801470c
 8003004:	08014714 	.word	0x08014714

08003008 <Button_Init>:
	}
}

void Button_Init(){
 8003008:	b580      	push	{r7, lr}
 800300a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Pwr_Enable_U_GPIO_Port, Pwr_Enable_U_Pin, RESET);
 800300c:	2200      	movs	r2, #0
 800300e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003012:	4808      	ldr	r0, [pc, #32]	; (8003034 <Button_Init+0x2c>)
 8003014:	f002 f84e 	bl	80050b4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Pwr_Enable_V_GPIO_Port, Pwr_Enable_V_Pin, RESET);
 8003018:	2200      	movs	r2, #0
 800301a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800301e:	4805      	ldr	r0, [pc, #20]	; (8003034 <Button_Init+0x2c>)
 8003020:	f002 f848 	bl	80050b4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Pwr_Enable_W_GPIO_Port, Pwr_Enable_W_Pin, RESET);
 8003024:	2200      	movs	r2, #0
 8003026:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800302a:	4802      	ldr	r0, [pc, #8]	; (8003034 <Button_Init+0x2c>)
 800302c:	f002 f842 	bl	80050b4 <HAL_GPIO_WritePin>
}
 8003030:	bf00      	nop
 8003032:	bd80      	pop	{r7, pc}
 8003034:	48000800 	.word	0x48000800

08003038 <vTask_LED>:
 *  Created on: Aug 1, 2023
 *      Author: nicolas
 */
#include "mylibs/led.h"

void vTask_LED(void *pvParameters){
 8003038:	b580      	push	{r7, lr}
 800303a:	b084      	sub	sp, #16
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
	uint8_t led = 0;
 8003040:	2300      	movs	r3, #0
 8003042:	73fb      	strb	r3, [r7, #15]
	uint8_t dir = 1;
 8003044:	2301      	movs	r3, #1
 8003046:	73bb      	strb	r3, [r7, #14]
	printf("Init LED...           ");
 8003048:	4814      	ldr	r0, [pc, #80]	; (800309c <vTask_LED+0x64>)
 800304a:	f00f f973 	bl	8012334 <iprintf>
	LED_Init();
 800304e:	f000 f829 	bl	80030a4 <LED_Init>
	printf(" Done\r\n");
 8003052:	4813      	ldr	r0, [pc, #76]	; (80030a0 <vTask_LED+0x68>)
 8003054:	f00f f9d4 	bl	8012400 <puts>
	for(;;){
		LED_Write(led);
 8003058:	7bfb      	ldrb	r3, [r7, #15]
 800305a:	4618      	mov	r0, r3
 800305c:	f000 f82a 	bl	80030b4 <LED_Write>
		if(dir){
 8003060:	7bbb      	ldrb	r3, [r7, #14]
 8003062:	2b00      	cmp	r3, #0
 8003064:	d00a      	beq.n	800307c <vTask_LED+0x44>
			led = 2*led+1;
 8003066:	7bfb      	ldrb	r3, [r7, #15]
 8003068:	005b      	lsls	r3, r3, #1
 800306a:	b2db      	uxtb	r3, r3
 800306c:	3301      	adds	r3, #1
 800306e:	73fb      	strb	r3, [r7, #15]
			if(led==0x0F) dir = 0;
 8003070:	7bfb      	ldrb	r3, [r7, #15]
 8003072:	2b0f      	cmp	r3, #15
 8003074:	d10d      	bne.n	8003092 <vTask_LED+0x5a>
 8003076:	2300      	movs	r3, #0
 8003078:	73bb      	strb	r3, [r7, #14]
 800307a:	e00a      	b.n	8003092 <vTask_LED+0x5a>
		}
		else{
			led = (led-1)/2;
 800307c:	7bfb      	ldrb	r3, [r7, #15]
 800307e:	3b01      	subs	r3, #1
 8003080:	0fda      	lsrs	r2, r3, #31
 8003082:	4413      	add	r3, r2
 8003084:	105b      	asrs	r3, r3, #1
 8003086:	73fb      	strb	r3, [r7, #15]
			if(led==0x00) dir = 1;
 8003088:	7bfb      	ldrb	r3, [r7, #15]
 800308a:	2b00      	cmp	r3, #0
 800308c:	d101      	bne.n	8003092 <vTask_LED+0x5a>
 800308e:	2301      	movs	r3, #1
 8003090:	73bb      	strb	r3, [r7, #14]
		}
		vTaskDelay(1000);
 8003092:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003096:	f00c fce7 	bl	800fa68 <vTaskDelay>
	for(;;){
 800309a:	e7dd      	b.n	8003058 <vTask_LED+0x20>
 800309c:	08014720 	.word	0x08014720
 80030a0:	08014738 	.word	0x08014738

080030a4 <LED_Init>:
	}
}

void LED_Init(){
 80030a4:	b480      	push	{r7}
 80030a6:	af00      	add	r7, sp, #0

}
 80030a8:	bf00      	nop
 80030aa:	46bd      	mov	sp, r7
 80030ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b0:	4770      	bx	lr
	...

080030b4 <LED_Write>:

void LED_Write(uint8_t leds){
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b082      	sub	sp, #8
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	4603      	mov	r3, r0
 80030bc:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(USR_LED_1_GPIO_Port, USR_LED_1_Pin, (leds>>0)&1);
 80030be:	79fb      	ldrb	r3, [r7, #7]
 80030c0:	f003 0301 	and.w	r3, r3, #1
 80030c4:	b2db      	uxtb	r3, r3
 80030c6:	461a      	mov	r2, r3
 80030c8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80030cc:	4815      	ldr	r0, [pc, #84]	; (8003124 <LED_Write+0x70>)
 80030ce:	f001 fff1 	bl	80050b4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(USR_LED_2_GPIO_Port, USR_LED_2_Pin, (leds>>1)&1);
 80030d2:	79fb      	ldrb	r3, [r7, #7]
 80030d4:	085b      	lsrs	r3, r3, #1
 80030d6:	b2db      	uxtb	r3, r3
 80030d8:	f003 0301 	and.w	r3, r3, #1
 80030dc:	b2db      	uxtb	r3, r3
 80030de:	461a      	mov	r2, r3
 80030e0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80030e4:	480f      	ldr	r0, [pc, #60]	; (8003124 <LED_Write+0x70>)
 80030e6:	f001 ffe5 	bl	80050b4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(USR_LED_3_GPIO_Port, USR_LED_3_Pin, (leds>>2)&1);
 80030ea:	79fb      	ldrb	r3, [r7, #7]
 80030ec:	089b      	lsrs	r3, r3, #2
 80030ee:	b2db      	uxtb	r3, r3
 80030f0:	f003 0301 	and.w	r3, r3, #1
 80030f4:	b2db      	uxtb	r3, r3
 80030f6:	461a      	mov	r2, r3
 80030f8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80030fc:	4809      	ldr	r0, [pc, #36]	; (8003124 <LED_Write+0x70>)
 80030fe:	f001 ffd9 	bl	80050b4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(USR_LED_4_GPIO_Port, USR_LED_4_Pin, (leds>>3)&1);
 8003102:	79fb      	ldrb	r3, [r7, #7]
 8003104:	08db      	lsrs	r3, r3, #3
 8003106:	b2db      	uxtb	r3, r3
 8003108:	f003 0301 	and.w	r3, r3, #1
 800310c:	b2db      	uxtb	r3, r3
 800310e:	461a      	mov	r2, r3
 8003110:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003114:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003118:	f001 ffcc 	bl	80050b4 <HAL_GPIO_WritePin>
}
 800311c:	bf00      	nop
 800311e:	3708      	adds	r7, #8
 8003120:	46bd      	mov	sp, r7
 8003122:	bd80      	pop	{r7, pc}
 8003124:	48000800 	.word	0x48000800

08003128 <vTask_RotaryEnc>:
extern SemaphoreHandle_t xUartMutex;

uint8_t value;
uint32_t last_Tick = 0;

void vTask_RotaryEnc(void *pvParameters){
 8003128:	b580      	push	{r7, lr}
 800312a:	b086      	sub	sp, #24
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
	TIM_HandleTypeDef* htim = (TIM_HandleTypeDef*) pvParameters;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	613b      	str	r3, [r7, #16]
	uint32_t RotaryEnc_Previous_Value = 0;
 8003134:	2300      	movs	r3, #0
 8003136:	617b      	str	r3, [r7, #20]
	uint32_t RotaryEnc_Value = 0;
 8003138:	2300      	movs	r3, #0
 800313a:	60fb      	str	r3, [r7, #12]
	printf("Init Rotary Encoder...");
 800313c:	4815      	ldr	r0, [pc, #84]	; (8003194 <vTask_RotaryEnc+0x6c>)
 800313e:	f00f f8f9 	bl	8012334 <iprintf>
	RotaryEnc_Init(htim);
 8003142:	6938      	ldr	r0, [r7, #16]
 8003144:	f000 f82e 	bl	80031a4 <RotaryEnc_Init>
	printf(" Done\r\n");
 8003148:	4813      	ldr	r0, [pc, #76]	; (8003198 <vTask_RotaryEnc+0x70>)
 800314a:	f00f f959 	bl	8012400 <puts>
	for(;;){
		RotaryEnc_Value = __HAL_TIM_GET_COUNTER(htim);
 800314e:	693b      	ldr	r3, [r7, #16]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003154:	60fb      	str	r3, [r7, #12]

		if(RotaryEnc_Previous_Value != RotaryEnc_Value){
 8003156:	697a      	ldr	r2, [r7, #20]
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	429a      	cmp	r2, r3
 800315c:	d016      	beq.n	800318c <vTask_RotaryEnc+0x64>
			if(xSemaphoreTake(xUartMutex, portMAX_DELAY) == pdTRUE){
 800315e:	4b0f      	ldr	r3, [pc, #60]	; (800319c <vTask_RotaryEnc+0x74>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003166:	4618      	mov	r0, r3
 8003168:	f00c f900 	bl	800f36c <xQueueSemaphoreTake>
 800316c:	4603      	mov	r3, r0
 800316e:	2b01      	cmp	r3, #1
 8003170:	d10a      	bne.n	8003188 <vTask_RotaryEnc+0x60>
				printf("Rot_Enc : %6d\r\n", RotaryEnc_Value);
 8003172:	68f9      	ldr	r1, [r7, #12]
 8003174:	480a      	ldr	r0, [pc, #40]	; (80031a0 <vTask_RotaryEnc+0x78>)
 8003176:	f00f f8dd 	bl	8012334 <iprintf>
				xSemaphoreGive(xUartMutex);
 800317a:	4b08      	ldr	r3, [pc, #32]	; (800319c <vTask_RotaryEnc+0x74>)
 800317c:	6818      	ldr	r0, [r3, #0]
 800317e:	2300      	movs	r3, #0
 8003180:	2200      	movs	r2, #0
 8003182:	2100      	movs	r1, #0
 8003184:	f00b fe78 	bl	800ee78 <xQueueGenericSend>
			}
			RotaryEnc_Previous_Value = RotaryEnc_Value;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	617b      	str	r3, [r7, #20]
		}
		vTaskDelay(100);
 800318c:	2064      	movs	r0, #100	; 0x64
 800318e:	f00c fc6b 	bl	800fa68 <vTaskDelay>
		RotaryEnc_Value = __HAL_TIM_GET_COUNTER(htim);
 8003192:	e7dc      	b.n	800314e <vTask_RotaryEnc+0x26>
 8003194:	08014740 	.word	0x08014740
 8003198:	08014758 	.word	0x08014758
 800319c:	200005d4 	.word	0x200005d4
 80031a0:	08014760 	.word	0x08014760

080031a4 <RotaryEnc_Init>:
	}
}

void RotaryEnc_Init(TIM_HandleTypeDef* htim){
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b082      	sub	sp, #8
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
	HAL_TIM_Encoder_Start(htim, TIM_CHANNEL_1);
 80031ac:	2100      	movs	r1, #0
 80031ae:	6878      	ldr	r0, [r7, #4]
 80031b0:	f005 f9e3 	bl	800857a <HAL_TIM_Encoder_Start>
}
 80031b4:	bf00      	nop
 80031b6:	3708      	adds	r7, #8
 80031b8:	46bd      	mov	sp, r7
 80031ba:	bd80      	pop	{r7, pc}

080031bc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80031bc:	480d      	ldr	r0, [pc, #52]	; (80031f4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80031be:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80031c0:	480d      	ldr	r0, [pc, #52]	; (80031f8 <LoopForever+0x6>)
  ldr r1, =_edata
 80031c2:	490e      	ldr	r1, [pc, #56]	; (80031fc <LoopForever+0xa>)
  ldr r2, =_sidata
 80031c4:	4a0e      	ldr	r2, [pc, #56]	; (8003200 <LoopForever+0xe>)
  movs r3, #0
 80031c6:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80031c8:	e002      	b.n	80031d0 <LoopCopyDataInit>

080031ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80031ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80031cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80031ce:	3304      	adds	r3, #4

080031d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80031d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80031d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80031d4:	d3f9      	bcc.n	80031ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80031d6:	4a0b      	ldr	r2, [pc, #44]	; (8003204 <LoopForever+0x12>)
  ldr r4, =_ebss
 80031d8:	4c0b      	ldr	r4, [pc, #44]	; (8003208 <LoopForever+0x16>)
  movs r3, #0
 80031da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80031dc:	e001      	b.n	80031e2 <LoopFillZerobss>

080031de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80031de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80031e0:	3204      	adds	r2, #4

080031e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80031e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80031e4:	d3fb      	bcc.n	80031de <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80031e6:	f7fe ff41 	bl	800206c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80031ea:	f00f fa97 	bl	801271c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80031ee:	f7fe fc29 	bl	8001a44 <main>

080031f2 <LoopForever>:

LoopForever:
    b LoopForever
 80031f2:	e7fe      	b.n	80031f2 <LoopForever>
  ldr   r0, =_estack
 80031f4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80031f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80031fc:	20000350 	.word	0x20000350
  ldr r2, =_sidata
 8003200:	08014b84 	.word	0x08014b84
  ldr r2, =_sbss
 8003204:	20000350 	.word	0x20000350
  ldr r4, =_ebss
 8003208:	200067b0 	.word	0x200067b0

0800320c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800320c:	e7fe      	b.n	800320c <ADC1_2_IRQHandler>

0800320e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800320e:	b580      	push	{r7, lr}
 8003210:	b082      	sub	sp, #8
 8003212:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003214:	2300      	movs	r3, #0
 8003216:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003218:	2003      	movs	r0, #3
 800321a:	f001 fcea 	bl	8004bf2 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800321e:	200f      	movs	r0, #15
 8003220:	f7fe fda4 	bl	8001d6c <HAL_InitTick>
 8003224:	4603      	mov	r3, r0
 8003226:	2b00      	cmp	r3, #0
 8003228:	d002      	beq.n	8003230 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800322a:	2301      	movs	r3, #1
 800322c:	71fb      	strb	r3, [r7, #7]
 800322e:	e001      	b.n	8003234 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003230:	f7fe fd74 	bl	8001d1c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003234:	79fb      	ldrb	r3, [r7, #7]

}
 8003236:	4618      	mov	r0, r3
 8003238:	3708      	adds	r7, #8
 800323a:	46bd      	mov	sp, r7
 800323c:	bd80      	pop	{r7, pc}
	...

08003240 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003240:	b480      	push	{r7}
 8003242:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003244:	4b05      	ldr	r3, [pc, #20]	; (800325c <HAL_IncTick+0x1c>)
 8003246:	681a      	ldr	r2, [r3, #0]
 8003248:	4b05      	ldr	r3, [pc, #20]	; (8003260 <HAL_IncTick+0x20>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4413      	add	r3, r2
 800324e:	4a03      	ldr	r2, [pc, #12]	; (800325c <HAL_IncTick+0x1c>)
 8003250:	6013      	str	r3, [r2, #0]
}
 8003252:	bf00      	nop
 8003254:	46bd      	mov	sp, r7
 8003256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325a:	4770      	bx	lr
 800325c:	20000930 	.word	0x20000930
 8003260:	20000008 	.word	0x20000008

08003264 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003264:	b480      	push	{r7}
 8003266:	af00      	add	r7, sp, #0
  return uwTick;
 8003268:	4b03      	ldr	r3, [pc, #12]	; (8003278 <HAL_GetTick+0x14>)
 800326a:	681b      	ldr	r3, [r3, #0]
}
 800326c:	4618      	mov	r0, r3
 800326e:	46bd      	mov	sp, r7
 8003270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003274:	4770      	bx	lr
 8003276:	bf00      	nop
 8003278:	20000930 	.word	0x20000930

0800327c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b084      	sub	sp, #16
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003284:	f7ff ffee 	bl	8003264 <HAL_GetTick>
 8003288:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003294:	d004      	beq.n	80032a0 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8003296:	4b09      	ldr	r3, [pc, #36]	; (80032bc <HAL_Delay+0x40>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	68fa      	ldr	r2, [r7, #12]
 800329c:	4413      	add	r3, r2
 800329e:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80032a0:	bf00      	nop
 80032a2:	f7ff ffdf 	bl	8003264 <HAL_GetTick>
 80032a6:	4602      	mov	r2, r0
 80032a8:	68bb      	ldr	r3, [r7, #8]
 80032aa:	1ad3      	subs	r3, r2, r3
 80032ac:	68fa      	ldr	r2, [r7, #12]
 80032ae:	429a      	cmp	r2, r3
 80032b0:	d8f7      	bhi.n	80032a2 <HAL_Delay+0x26>
  {
  }
}
 80032b2:	bf00      	nop
 80032b4:	bf00      	nop
 80032b6:	3710      	adds	r7, #16
 80032b8:	46bd      	mov	sp, r7
 80032ba:	bd80      	pop	{r7, pc}
 80032bc:	20000008 	.word	0x20000008

080032c0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80032c0:	b480      	push	{r7}
 80032c2:	b083      	sub	sp, #12
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
 80032c8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	689b      	ldr	r3, [r3, #8]
 80032ce:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	431a      	orrs	r2, r3
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	609a      	str	r2, [r3, #8]
}
 80032da:	bf00      	nop
 80032dc:	370c      	adds	r7, #12
 80032de:	46bd      	mov	sp, r7
 80032e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e4:	4770      	bx	lr

080032e6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80032e6:	b480      	push	{r7}
 80032e8:	b083      	sub	sp, #12
 80032ea:	af00      	add	r7, sp, #0
 80032ec:	6078      	str	r0, [r7, #4]
 80032ee:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	689b      	ldr	r3, [r3, #8]
 80032f4:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	431a      	orrs	r2, r3
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	609a      	str	r2, [r3, #8]
}
 8003300:	bf00      	nop
 8003302:	370c      	adds	r7, #12
 8003304:	46bd      	mov	sp, r7
 8003306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330a:	4770      	bx	lr

0800330c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800330c:	b480      	push	{r7}
 800330e:	b083      	sub	sp, #12
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	689b      	ldr	r3, [r3, #8]
 8003318:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800331c:	4618      	mov	r0, r3
 800331e:	370c      	adds	r7, #12
 8003320:	46bd      	mov	sp, r7
 8003322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003326:	4770      	bx	lr

08003328 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003328:	b480      	push	{r7}
 800332a:	b087      	sub	sp, #28
 800332c:	af00      	add	r7, sp, #0
 800332e:	60f8      	str	r0, [r7, #12]
 8003330:	60b9      	str	r1, [r7, #8]
 8003332:	607a      	str	r2, [r7, #4]
 8003334:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	3360      	adds	r3, #96	; 0x60
 800333a:	461a      	mov	r2, r3
 800333c:	68bb      	ldr	r3, [r7, #8]
 800333e:	009b      	lsls	r3, r3, #2
 8003340:	4413      	add	r3, r2
 8003342:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003344:	697b      	ldr	r3, [r7, #20]
 8003346:	681a      	ldr	r2, [r3, #0]
 8003348:	4b08      	ldr	r3, [pc, #32]	; (800336c <LL_ADC_SetOffset+0x44>)
 800334a:	4013      	ands	r3, r2
 800334c:	687a      	ldr	r2, [r7, #4]
 800334e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8003352:	683a      	ldr	r2, [r7, #0]
 8003354:	430a      	orrs	r2, r1
 8003356:	4313      	orrs	r3, r2
 8003358:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800335c:	697b      	ldr	r3, [r7, #20]
 800335e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8003360:	bf00      	nop
 8003362:	371c      	adds	r7, #28
 8003364:	46bd      	mov	sp, r7
 8003366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336a:	4770      	bx	lr
 800336c:	03fff000 	.word	0x03fff000

08003370 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8003370:	b480      	push	{r7}
 8003372:	b085      	sub	sp, #20
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
 8003378:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	3360      	adds	r3, #96	; 0x60
 800337e:	461a      	mov	r2, r3
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	009b      	lsls	r3, r3, #2
 8003384:	4413      	add	r3, r2
 8003386:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8003390:	4618      	mov	r0, r3
 8003392:	3714      	adds	r7, #20
 8003394:	46bd      	mov	sp, r7
 8003396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339a:	4770      	bx	lr

0800339c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800339c:	b480      	push	{r7}
 800339e:	b087      	sub	sp, #28
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	60f8      	str	r0, [r7, #12]
 80033a4:	60b9      	str	r1, [r7, #8]
 80033a6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	3360      	adds	r3, #96	; 0x60
 80033ac:	461a      	mov	r2, r3
 80033ae:	68bb      	ldr	r3, [r7, #8]
 80033b0:	009b      	lsls	r3, r3, #2
 80033b2:	4413      	add	r3, r2
 80033b4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80033b6:	697b      	ldr	r3, [r7, #20]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	431a      	orrs	r2, r3
 80033c2:	697b      	ldr	r3, [r7, #20]
 80033c4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80033c6:	bf00      	nop
 80033c8:	371c      	adds	r7, #28
 80033ca:	46bd      	mov	sp, r7
 80033cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d0:	4770      	bx	lr

080033d2 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80033d2:	b480      	push	{r7}
 80033d4:	b087      	sub	sp, #28
 80033d6:	af00      	add	r7, sp, #0
 80033d8:	60f8      	str	r0, [r7, #12]
 80033da:	60b9      	str	r1, [r7, #8]
 80033dc:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	3360      	adds	r3, #96	; 0x60
 80033e2:	461a      	mov	r2, r3
 80033e4:	68bb      	ldr	r3, [r7, #8]
 80033e6:	009b      	lsls	r3, r3, #2
 80033e8:	4413      	add	r3, r2
 80033ea:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80033ec:	697b      	ldr	r3, [r7, #20]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	431a      	orrs	r2, r3
 80033f8:	697b      	ldr	r3, [r7, #20]
 80033fa:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80033fc:	bf00      	nop
 80033fe:	371c      	adds	r7, #28
 8003400:	46bd      	mov	sp, r7
 8003402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003406:	4770      	bx	lr

08003408 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8003408:	b480      	push	{r7}
 800340a:	b087      	sub	sp, #28
 800340c:	af00      	add	r7, sp, #0
 800340e:	60f8      	str	r0, [r7, #12]
 8003410:	60b9      	str	r1, [r7, #8]
 8003412:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	3360      	adds	r3, #96	; 0x60
 8003418:	461a      	mov	r2, r3
 800341a:	68bb      	ldr	r3, [r7, #8]
 800341c:	009b      	lsls	r3, r3, #2
 800341e:	4413      	add	r3, r2
 8003420:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003422:	697b      	ldr	r3, [r7, #20]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	431a      	orrs	r2, r3
 800342e:	697b      	ldr	r3, [r7, #20]
 8003430:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8003432:	bf00      	nop
 8003434:	371c      	adds	r7, #28
 8003436:	46bd      	mov	sp, r7
 8003438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343c:	4770      	bx	lr

0800343e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800343e:	b480      	push	{r7}
 8003440:	b083      	sub	sp, #12
 8003442:	af00      	add	r7, sp, #0
 8003444:	6078      	str	r0, [r7, #4]
 8003446:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	695b      	ldr	r3, [r3, #20]
 800344c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	431a      	orrs	r2, r3
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	615a      	str	r2, [r3, #20]
}
 8003458:	bf00      	nop
 800345a:	370c      	adds	r7, #12
 800345c:	46bd      	mov	sp, r7
 800345e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003462:	4770      	bx	lr

08003464 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8003464:	b480      	push	{r7}
 8003466:	b083      	sub	sp, #12
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	68db      	ldr	r3, [r3, #12]
 8003470:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003474:	2b00      	cmp	r3, #0
 8003476:	d101      	bne.n	800347c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003478:	2301      	movs	r3, #1
 800347a:	e000      	b.n	800347e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800347c:	2300      	movs	r3, #0
}
 800347e:	4618      	mov	r0, r3
 8003480:	370c      	adds	r7, #12
 8003482:	46bd      	mov	sp, r7
 8003484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003488:	4770      	bx	lr

0800348a <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800348a:	b480      	push	{r7}
 800348c:	b087      	sub	sp, #28
 800348e:	af00      	add	r7, sp, #0
 8003490:	60f8      	str	r0, [r7, #12]
 8003492:	60b9      	str	r1, [r7, #8]
 8003494:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	3330      	adds	r3, #48	; 0x30
 800349a:	461a      	mov	r2, r3
 800349c:	68bb      	ldr	r3, [r7, #8]
 800349e:	0a1b      	lsrs	r3, r3, #8
 80034a0:	009b      	lsls	r3, r3, #2
 80034a2:	f003 030c 	and.w	r3, r3, #12
 80034a6:	4413      	add	r3, r2
 80034a8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80034aa:	697b      	ldr	r3, [r7, #20]
 80034ac:	681a      	ldr	r2, [r3, #0]
 80034ae:	68bb      	ldr	r3, [r7, #8]
 80034b0:	f003 031f 	and.w	r3, r3, #31
 80034b4:	211f      	movs	r1, #31
 80034b6:	fa01 f303 	lsl.w	r3, r1, r3
 80034ba:	43db      	mvns	r3, r3
 80034bc:	401a      	ands	r2, r3
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	0e9b      	lsrs	r3, r3, #26
 80034c2:	f003 011f 	and.w	r1, r3, #31
 80034c6:	68bb      	ldr	r3, [r7, #8]
 80034c8:	f003 031f 	and.w	r3, r3, #31
 80034cc:	fa01 f303 	lsl.w	r3, r1, r3
 80034d0:	431a      	orrs	r2, r3
 80034d2:	697b      	ldr	r3, [r7, #20]
 80034d4:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80034d6:	bf00      	nop
 80034d8:	371c      	adds	r7, #28
 80034da:	46bd      	mov	sp, r7
 80034dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e0:	4770      	bx	lr

080034e2 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80034e2:	b480      	push	{r7}
 80034e4:	b087      	sub	sp, #28
 80034e6:	af00      	add	r7, sp, #0
 80034e8:	60f8      	str	r0, [r7, #12]
 80034ea:	60b9      	str	r1, [r7, #8]
 80034ec:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	3314      	adds	r3, #20
 80034f2:	461a      	mov	r2, r3
 80034f4:	68bb      	ldr	r3, [r7, #8]
 80034f6:	0e5b      	lsrs	r3, r3, #25
 80034f8:	009b      	lsls	r3, r3, #2
 80034fa:	f003 0304 	and.w	r3, r3, #4
 80034fe:	4413      	add	r3, r2
 8003500:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003502:	697b      	ldr	r3, [r7, #20]
 8003504:	681a      	ldr	r2, [r3, #0]
 8003506:	68bb      	ldr	r3, [r7, #8]
 8003508:	0d1b      	lsrs	r3, r3, #20
 800350a:	f003 031f 	and.w	r3, r3, #31
 800350e:	2107      	movs	r1, #7
 8003510:	fa01 f303 	lsl.w	r3, r1, r3
 8003514:	43db      	mvns	r3, r3
 8003516:	401a      	ands	r2, r3
 8003518:	68bb      	ldr	r3, [r7, #8]
 800351a:	0d1b      	lsrs	r3, r3, #20
 800351c:	f003 031f 	and.w	r3, r3, #31
 8003520:	6879      	ldr	r1, [r7, #4]
 8003522:	fa01 f303 	lsl.w	r3, r1, r3
 8003526:	431a      	orrs	r2, r3
 8003528:	697b      	ldr	r3, [r7, #20]
 800352a:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800352c:	bf00      	nop
 800352e:	371c      	adds	r7, #28
 8003530:	46bd      	mov	sp, r7
 8003532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003536:	4770      	bx	lr

08003538 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003538:	b480      	push	{r7}
 800353a:	b085      	sub	sp, #20
 800353c:	af00      	add	r7, sp, #0
 800353e:	60f8      	str	r0, [r7, #12]
 8003540:	60b9      	str	r1, [r7, #8]
 8003542:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	4a0f      	ldr	r2, [pc, #60]	; (8003584 <LL_ADC_SetChannelSingleDiff+0x4c>)
 8003548:	4293      	cmp	r3, r2
 800354a:	d10a      	bne.n	8003562 <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8003552:	68bb      	ldr	r3, [r7, #8]
 8003554:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003558:	431a      	orrs	r2, r3
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 8003560:	e00a      	b.n	8003578 <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8003568:	68bb      	ldr	r3, [r7, #8]
 800356a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800356e:	43db      	mvns	r3, r3
 8003570:	401a      	ands	r2, r3
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8003578:	bf00      	nop
 800357a:	3714      	adds	r7, #20
 800357c:	46bd      	mov	sp, r7
 800357e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003582:	4770      	bx	lr
 8003584:	407f0000 	.word	0x407f0000

08003588 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003588:	b480      	push	{r7}
 800358a:	b083      	sub	sp, #12
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	689b      	ldr	r3, [r3, #8]
 8003594:	f003 031f 	and.w	r3, r3, #31
}
 8003598:	4618      	mov	r0, r3
 800359a:	370c      	adds	r7, #12
 800359c:	46bd      	mov	sp, r7
 800359e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a2:	4770      	bx	lr

080035a4 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80035a4:	b480      	push	{r7}
 80035a6:	b083      	sub	sp, #12
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	689b      	ldr	r3, [r3, #8]
 80035b0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 80035b4:	4618      	mov	r0, r3
 80035b6:	370c      	adds	r7, #12
 80035b8:	46bd      	mov	sp, r7
 80035ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035be:	4770      	bx	lr

080035c0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80035c0:	b480      	push	{r7}
 80035c2:	b083      	sub	sp, #12
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	689b      	ldr	r3, [r3, #8]
 80035cc:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80035d0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80035d4:	687a      	ldr	r2, [r7, #4]
 80035d6:	6093      	str	r3, [r2, #8]
}
 80035d8:	bf00      	nop
 80035da:	370c      	adds	r7, #12
 80035dc:	46bd      	mov	sp, r7
 80035de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e2:	4770      	bx	lr

080035e4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80035e4:	b480      	push	{r7}
 80035e6:	b083      	sub	sp, #12
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	689b      	ldr	r3, [r3, #8]
 80035f0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80035f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80035f8:	d101      	bne.n	80035fe <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80035fa:	2301      	movs	r3, #1
 80035fc:	e000      	b.n	8003600 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80035fe:	2300      	movs	r3, #0
}
 8003600:	4618      	mov	r0, r3
 8003602:	370c      	adds	r7, #12
 8003604:	46bd      	mov	sp, r7
 8003606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360a:	4770      	bx	lr

0800360c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800360c:	b480      	push	{r7}
 800360e:	b083      	sub	sp, #12
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	689b      	ldr	r3, [r3, #8]
 8003618:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800361c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003620:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003628:	bf00      	nop
 800362a:	370c      	adds	r7, #12
 800362c:	46bd      	mov	sp, r7
 800362e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003632:	4770      	bx	lr

08003634 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003634:	b480      	push	{r7}
 8003636:	b083      	sub	sp, #12
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	689b      	ldr	r3, [r3, #8]
 8003640:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003644:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003648:	d101      	bne.n	800364e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800364a:	2301      	movs	r3, #1
 800364c:	e000      	b.n	8003650 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800364e:	2300      	movs	r3, #0
}
 8003650:	4618      	mov	r0, r3
 8003652:	370c      	adds	r7, #12
 8003654:	46bd      	mov	sp, r7
 8003656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365a:	4770      	bx	lr

0800365c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800365c:	b480      	push	{r7}
 800365e:	b083      	sub	sp, #12
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	689b      	ldr	r3, [r3, #8]
 8003668:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800366c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003670:	f043 0201 	orr.w	r2, r3, #1
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003678:	bf00      	nop
 800367a:	370c      	adds	r7, #12
 800367c:	46bd      	mov	sp, r7
 800367e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003682:	4770      	bx	lr

08003684 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003684:	b480      	push	{r7}
 8003686:	b083      	sub	sp, #12
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	689b      	ldr	r3, [r3, #8]
 8003690:	f003 0301 	and.w	r3, r3, #1
 8003694:	2b01      	cmp	r3, #1
 8003696:	d101      	bne.n	800369c <LL_ADC_IsEnabled+0x18>
 8003698:	2301      	movs	r3, #1
 800369a:	e000      	b.n	800369e <LL_ADC_IsEnabled+0x1a>
 800369c:	2300      	movs	r3, #0
}
 800369e:	4618      	mov	r0, r3
 80036a0:	370c      	adds	r7, #12
 80036a2:	46bd      	mov	sp, r7
 80036a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a8:	4770      	bx	lr

080036aa <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80036aa:	b480      	push	{r7}
 80036ac:	b083      	sub	sp, #12
 80036ae:	af00      	add	r7, sp, #0
 80036b0:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	689b      	ldr	r3, [r3, #8]
 80036b6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80036ba:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80036be:	f043 0204 	orr.w	r2, r3, #4
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80036c6:	bf00      	nop
 80036c8:	370c      	adds	r7, #12
 80036ca:	46bd      	mov	sp, r7
 80036cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d0:	4770      	bx	lr

080036d2 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80036d2:	b480      	push	{r7}
 80036d4:	b083      	sub	sp, #12
 80036d6:	af00      	add	r7, sp, #0
 80036d8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	689b      	ldr	r3, [r3, #8]
 80036de:	f003 0304 	and.w	r3, r3, #4
 80036e2:	2b04      	cmp	r3, #4
 80036e4:	d101      	bne.n	80036ea <LL_ADC_REG_IsConversionOngoing+0x18>
 80036e6:	2301      	movs	r3, #1
 80036e8:	e000      	b.n	80036ec <LL_ADC_REG_IsConversionOngoing+0x1a>
 80036ea:	2300      	movs	r3, #0
}
 80036ec:	4618      	mov	r0, r3
 80036ee:	370c      	adds	r7, #12
 80036f0:	46bd      	mov	sp, r7
 80036f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f6:	4770      	bx	lr

080036f8 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80036f8:	b480      	push	{r7}
 80036fa:	b083      	sub	sp, #12
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	689b      	ldr	r3, [r3, #8]
 8003704:	f003 0308 	and.w	r3, r3, #8
 8003708:	2b08      	cmp	r3, #8
 800370a:	d101      	bne.n	8003710 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800370c:	2301      	movs	r3, #1
 800370e:	e000      	b.n	8003712 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003710:	2300      	movs	r3, #0
}
 8003712:	4618      	mov	r0, r3
 8003714:	370c      	adds	r7, #12
 8003716:	46bd      	mov	sp, r7
 8003718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371c:	4770      	bx	lr
	...

08003720 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003720:	b590      	push	{r4, r7, lr}
 8003722:	b089      	sub	sp, #36	; 0x24
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003728:	2300      	movs	r3, #0
 800372a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800372c:	2300      	movs	r3, #0
 800372e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d101      	bne.n	800373a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003736:	2301      	movs	r3, #1
 8003738:	e1af      	b.n	8003a9a <HAL_ADC_Init+0x37a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	695b      	ldr	r3, [r3, #20]
 800373e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003744:	2b00      	cmp	r3, #0
 8003746:	d109      	bne.n	800375c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003748:	6878      	ldr	r0, [r7, #4]
 800374a:	f7fd fddf 	bl	800130c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2200      	movs	r2, #0
 8003752:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2200      	movs	r2, #0
 8003758:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4618      	mov	r0, r3
 8003762:	f7ff ff3f 	bl	80035e4 <LL_ADC_IsDeepPowerDownEnabled>
 8003766:	4603      	mov	r3, r0
 8003768:	2b00      	cmp	r3, #0
 800376a:	d004      	beq.n	8003776 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4618      	mov	r0, r3
 8003772:	f7ff ff25 	bl	80035c0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	4618      	mov	r0, r3
 800377c:	f7ff ff5a 	bl	8003634 <LL_ADC_IsInternalRegulatorEnabled>
 8003780:	4603      	mov	r3, r0
 8003782:	2b00      	cmp	r3, #0
 8003784:	d115      	bne.n	80037b2 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4618      	mov	r0, r3
 800378c:	f7ff ff3e 	bl	800360c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003790:	4b9f      	ldr	r3, [pc, #636]	; (8003a10 <HAL_ADC_Init+0x2f0>)
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	099b      	lsrs	r3, r3, #6
 8003796:	4a9f      	ldr	r2, [pc, #636]	; (8003a14 <HAL_ADC_Init+0x2f4>)
 8003798:	fba2 2303 	umull	r2, r3, r2, r3
 800379c:	099b      	lsrs	r3, r3, #6
 800379e:	3301      	adds	r3, #1
 80037a0:	005b      	lsls	r3, r3, #1
 80037a2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80037a4:	e002      	b.n	80037ac <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80037a6:	68bb      	ldr	r3, [r7, #8]
 80037a8:	3b01      	subs	r3, #1
 80037aa:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80037ac:	68bb      	ldr	r3, [r7, #8]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d1f9      	bne.n	80037a6 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	4618      	mov	r0, r3
 80037b8:	f7ff ff3c 	bl	8003634 <LL_ADC_IsInternalRegulatorEnabled>
 80037bc:	4603      	mov	r3, r0
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d10d      	bne.n	80037de <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037c6:	f043 0210 	orr.w	r2, r3, #16
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037d2:	f043 0201 	orr.w	r2, r3, #1
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80037da:	2301      	movs	r3, #1
 80037dc:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4618      	mov	r0, r3
 80037e4:	f7ff ff75 	bl	80036d2 <LL_ADC_REG_IsConversionOngoing>
 80037e8:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037ee:	f003 0310 	and.w	r3, r3, #16
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	f040 8148 	bne.w	8003a88 <HAL_ADC_Init+0x368>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80037f8:	697b      	ldr	r3, [r7, #20]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	f040 8144 	bne.w	8003a88 <HAL_ADC_Init+0x368>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003804:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003808:	f043 0202 	orr.w	r2, r3, #2
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4618      	mov	r0, r3
 8003816:	f7ff ff35 	bl	8003684 <LL_ADC_IsEnabled>
 800381a:	4603      	mov	r3, r0
 800381c:	2b00      	cmp	r3, #0
 800381e:	d141      	bne.n	80038a4 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003828:	d004      	beq.n	8003834 <HAL_ADC_Init+0x114>
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	4a7a      	ldr	r2, [pc, #488]	; (8003a18 <HAL_ADC_Init+0x2f8>)
 8003830:	4293      	cmp	r3, r2
 8003832:	d10f      	bne.n	8003854 <HAL_ADC_Init+0x134>
 8003834:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003838:	f7ff ff24 	bl	8003684 <LL_ADC_IsEnabled>
 800383c:	4604      	mov	r4, r0
 800383e:	4876      	ldr	r0, [pc, #472]	; (8003a18 <HAL_ADC_Init+0x2f8>)
 8003840:	f7ff ff20 	bl	8003684 <LL_ADC_IsEnabled>
 8003844:	4603      	mov	r3, r0
 8003846:	4323      	orrs	r3, r4
 8003848:	2b00      	cmp	r3, #0
 800384a:	bf0c      	ite	eq
 800384c:	2301      	moveq	r3, #1
 800384e:	2300      	movne	r3, #0
 8003850:	b2db      	uxtb	r3, r3
 8003852:	e012      	b.n	800387a <HAL_ADC_Init+0x15a>
 8003854:	4871      	ldr	r0, [pc, #452]	; (8003a1c <HAL_ADC_Init+0x2fc>)
 8003856:	f7ff ff15 	bl	8003684 <LL_ADC_IsEnabled>
 800385a:	4604      	mov	r4, r0
 800385c:	4870      	ldr	r0, [pc, #448]	; (8003a20 <HAL_ADC_Init+0x300>)
 800385e:	f7ff ff11 	bl	8003684 <LL_ADC_IsEnabled>
 8003862:	4603      	mov	r3, r0
 8003864:	431c      	orrs	r4, r3
 8003866:	486f      	ldr	r0, [pc, #444]	; (8003a24 <HAL_ADC_Init+0x304>)
 8003868:	f7ff ff0c 	bl	8003684 <LL_ADC_IsEnabled>
 800386c:	4603      	mov	r3, r0
 800386e:	4323      	orrs	r3, r4
 8003870:	2b00      	cmp	r3, #0
 8003872:	bf0c      	ite	eq
 8003874:	2301      	moveq	r3, #1
 8003876:	2300      	movne	r3, #0
 8003878:	b2db      	uxtb	r3, r3
 800387a:	2b00      	cmp	r3, #0
 800387c:	d012      	beq.n	80038a4 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003886:	d004      	beq.n	8003892 <HAL_ADC_Init+0x172>
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	4a62      	ldr	r2, [pc, #392]	; (8003a18 <HAL_ADC_Init+0x2f8>)
 800388e:	4293      	cmp	r3, r2
 8003890:	d101      	bne.n	8003896 <HAL_ADC_Init+0x176>
 8003892:	4a65      	ldr	r2, [pc, #404]	; (8003a28 <HAL_ADC_Init+0x308>)
 8003894:	e000      	b.n	8003898 <HAL_ADC_Init+0x178>
 8003896:	4a65      	ldr	r2, [pc, #404]	; (8003a2c <HAL_ADC_Init+0x30c>)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	685b      	ldr	r3, [r3, #4]
 800389c:	4619      	mov	r1, r3
 800389e:	4610      	mov	r0, r2
 80038a0:	f7ff fd0e 	bl	80032c0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	7f5b      	ldrb	r3, [r3, #29]
 80038a8:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80038ae:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80038b4:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80038ba:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80038c2:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80038c4:	4313      	orrs	r3, r2
 80038c6:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80038ce:	2b01      	cmp	r3, #1
 80038d0:	d106      	bne.n	80038e0 <HAL_ADC_Init+0x1c0>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038d6:	3b01      	subs	r3, #1
 80038d8:	045b      	lsls	r3, r3, #17
 80038da:	69ba      	ldr	r2, [r7, #24]
 80038dc:	4313      	orrs	r3, r2
 80038de:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d009      	beq.n	80038fc <HAL_ADC_Init+0x1dc>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038ec:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038f4:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80038f6:	69ba      	ldr	r2, [r7, #24]
 80038f8:	4313      	orrs	r3, r2
 80038fa:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	68da      	ldr	r2, [r3, #12]
 8003902:	4b4b      	ldr	r3, [pc, #300]	; (8003a30 <HAL_ADC_Init+0x310>)
 8003904:	4013      	ands	r3, r2
 8003906:	687a      	ldr	r2, [r7, #4]
 8003908:	6812      	ldr	r2, [r2, #0]
 800390a:	69b9      	ldr	r1, [r7, #24]
 800390c:	430b      	orrs	r3, r1
 800390e:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	691b      	ldr	r3, [r3, #16]
 8003916:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	430a      	orrs	r2, r1
 8003924:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	4618      	mov	r0, r3
 800392c:	f7ff fed1 	bl	80036d2 <LL_ADC_REG_IsConversionOngoing>
 8003930:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	4618      	mov	r0, r3
 8003938:	f7ff fede 	bl	80036f8 <LL_ADC_INJ_IsConversionOngoing>
 800393c:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800393e:	693b      	ldr	r3, [r7, #16]
 8003940:	2b00      	cmp	r3, #0
 8003942:	d17f      	bne.n	8003a44 <HAL_ADC_Init+0x324>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d17c      	bne.n	8003a44 <HAL_ADC_Init+0x324>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800394e:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003956:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8003958:	4313      	orrs	r3, r2
 800395a:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	68db      	ldr	r3, [r3, #12]
 8003962:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003966:	f023 0302 	bic.w	r3, r3, #2
 800396a:	687a      	ldr	r2, [r7, #4]
 800396c:	6812      	ldr	r2, [r2, #0]
 800396e:	69b9      	ldr	r1, [r7, #24]
 8003970:	430b      	orrs	r3, r1
 8003972:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	691b      	ldr	r3, [r3, #16]
 8003978:	2b00      	cmp	r3, #0
 800397a:	d017      	beq.n	80039ac <HAL_ADC_Init+0x28c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	691a      	ldr	r2, [r3, #16]
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800398a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003994:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003998:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800399c:	687a      	ldr	r2, [r7, #4]
 800399e:	6911      	ldr	r1, [r2, #16]
 80039a0:	687a      	ldr	r2, [r7, #4]
 80039a2:	6812      	ldr	r2, [r2, #0]
 80039a4:	430b      	orrs	r3, r1
 80039a6:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 80039aa:	e013      	b.n	80039d4 <HAL_ADC_Init+0x2b4>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	691a      	ldr	r2, [r3, #16]
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80039ba:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80039c4:	687a      	ldr	r2, [r7, #4]
 80039c6:	6812      	ldr	r2, [r2, #0]
 80039c8:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80039cc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80039d0:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80039da:	2b01      	cmp	r3, #1
 80039dc:	d12a      	bne.n	8003a34 <HAL_ADC_Init+0x314>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	691b      	ldr	r3, [r3, #16]
 80039e4:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80039e8:	f023 0304 	bic.w	r3, r3, #4
 80039ec:	687a      	ldr	r2, [r7, #4]
 80039ee:	6c51      	ldr	r1, [r2, #68]	; 0x44
 80039f0:	687a      	ldr	r2, [r7, #4]
 80039f2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80039f4:	4311      	orrs	r1, r2
 80039f6:	687a      	ldr	r2, [r7, #4]
 80039f8:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80039fa:	4311      	orrs	r1, r2
 80039fc:	687a      	ldr	r2, [r7, #4]
 80039fe:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003a00:	430a      	orrs	r2, r1
 8003a02:	431a      	orrs	r2, r3
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f042 0201 	orr.w	r2, r2, #1
 8003a0c:	611a      	str	r2, [r3, #16]
 8003a0e:	e019      	b.n	8003a44 <HAL_ADC_Init+0x324>
 8003a10:	20000000 	.word	0x20000000
 8003a14:	053e2d63 	.word	0x053e2d63
 8003a18:	50000100 	.word	0x50000100
 8003a1c:	50000400 	.word	0x50000400
 8003a20:	50000500 	.word	0x50000500
 8003a24:	50000600 	.word	0x50000600
 8003a28:	50000300 	.word	0x50000300
 8003a2c:	50000700 	.word	0x50000700
 8003a30:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	691a      	ldr	r2, [r3, #16]
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f022 0201 	bic.w	r2, r2, #1
 8003a42:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	695b      	ldr	r3, [r3, #20]
 8003a48:	2b01      	cmp	r3, #1
 8003a4a:	d10c      	bne.n	8003a66 <HAL_ADC_Init+0x346>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a52:	f023 010f 	bic.w	r1, r3, #15
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6a1b      	ldr	r3, [r3, #32]
 8003a5a:	1e5a      	subs	r2, r3, #1
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	430a      	orrs	r2, r1
 8003a62:	631a      	str	r2, [r3, #48]	; 0x30
 8003a64:	e007      	b.n	8003a76 <HAL_ADC_Init+0x356>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f022 020f 	bic.w	r2, r2, #15
 8003a74:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a7a:	f023 0303 	bic.w	r3, r3, #3
 8003a7e:	f043 0201 	orr.w	r2, r3, #1
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	65da      	str	r2, [r3, #92]	; 0x5c
 8003a86:	e007      	b.n	8003a98 <HAL_ADC_Init+0x378>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a8c:	f043 0210 	orr.w	r2, r3, #16
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003a94:	2301      	movs	r3, #1
 8003a96:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003a98:	7ffb      	ldrb	r3, [r7, #31]
}
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	3724      	adds	r7, #36	; 0x24
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	bd90      	pop	{r4, r7, pc}
 8003aa2:	bf00      	nop

08003aa4 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b086      	sub	sp, #24
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003ab4:	d004      	beq.n	8003ac0 <HAL_ADC_Start+0x1c>
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	4a67      	ldr	r2, [pc, #412]	; (8003c58 <HAL_ADC_Start+0x1b4>)
 8003abc:	4293      	cmp	r3, r2
 8003abe:	d101      	bne.n	8003ac4 <HAL_ADC_Start+0x20>
 8003ac0:	4b66      	ldr	r3, [pc, #408]	; (8003c5c <HAL_ADC_Start+0x1b8>)
 8003ac2:	e000      	b.n	8003ac6 <HAL_ADC_Start+0x22>
 8003ac4:	4b66      	ldr	r3, [pc, #408]	; (8003c60 <HAL_ADC_Start+0x1bc>)
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	f7ff fd5e 	bl	8003588 <LL_ADC_GetMultimode>
 8003acc:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	f7ff fdfd 	bl	80036d2 <LL_ADC_REG_IsConversionOngoing>
 8003ad8:	4603      	mov	r3, r0
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	f040 80b4 	bne.w	8003c48 <HAL_ADC_Start+0x1a4>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003ae6:	2b01      	cmp	r3, #1
 8003ae8:	d101      	bne.n	8003aee <HAL_ADC_Start+0x4a>
 8003aea:	2302      	movs	r3, #2
 8003aec:	e0af      	b.n	8003c4e <HAL_ADC_Start+0x1aa>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	2201      	movs	r2, #1
 8003af2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8003af6:	6878      	ldr	r0, [r7, #4]
 8003af8:	f000 fe0c 	bl	8004714 <ADC_Enable>
 8003afc:	4603      	mov	r3, r0
 8003afe:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003b00:	7dfb      	ldrb	r3, [r7, #23]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	f040 809b 	bne.w	8003c3e <HAL_ADC_Start+0x19a>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b0c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003b10:	f023 0301 	bic.w	r3, r3, #1
 8003b14:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	4a4d      	ldr	r2, [pc, #308]	; (8003c58 <HAL_ADC_Start+0x1b4>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d009      	beq.n	8003b3a <HAL_ADC_Start+0x96>
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	4a4e      	ldr	r2, [pc, #312]	; (8003c64 <HAL_ADC_Start+0x1c0>)
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	d002      	beq.n	8003b36 <HAL_ADC_Start+0x92>
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	e003      	b.n	8003b3e <HAL_ADC_Start+0x9a>
 8003b36:	4b4c      	ldr	r3, [pc, #304]	; (8003c68 <HAL_ADC_Start+0x1c4>)
 8003b38:	e001      	b.n	8003b3e <HAL_ADC_Start+0x9a>
 8003b3a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003b3e:	687a      	ldr	r2, [r7, #4]
 8003b40:	6812      	ldr	r2, [r2, #0]
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d002      	beq.n	8003b4c <HAL_ADC_Start+0xa8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003b46:	693b      	ldr	r3, [r7, #16]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d105      	bne.n	8003b58 <HAL_ADC_Start+0xb4>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b50:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	65da      	str	r2, [r3, #92]	; 0x5c
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b5c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003b60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b64:	d106      	bne.n	8003b74 <HAL_ADC_Start+0xd0>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b6a:	f023 0206 	bic.w	r2, r3, #6
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	661a      	str	r2, [r3, #96]	; 0x60
 8003b72:	e002      	b.n	8003b7a <HAL_ADC_Start+0xd6>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2200      	movs	r2, #0
 8003b78:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	221c      	movs	r2, #28
 8003b80:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2200      	movs	r2, #0
 8003b86:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	4a32      	ldr	r2, [pc, #200]	; (8003c58 <HAL_ADC_Start+0x1b4>)
 8003b90:	4293      	cmp	r3, r2
 8003b92:	d009      	beq.n	8003ba8 <HAL_ADC_Start+0x104>
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	4a32      	ldr	r2, [pc, #200]	; (8003c64 <HAL_ADC_Start+0x1c0>)
 8003b9a:	4293      	cmp	r3, r2
 8003b9c:	d002      	beq.n	8003ba4 <HAL_ADC_Start+0x100>
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	e003      	b.n	8003bac <HAL_ADC_Start+0x108>
 8003ba4:	4b30      	ldr	r3, [pc, #192]	; (8003c68 <HAL_ADC_Start+0x1c4>)
 8003ba6:	e001      	b.n	8003bac <HAL_ADC_Start+0x108>
 8003ba8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003bac:	687a      	ldr	r2, [r7, #4]
 8003bae:	6812      	ldr	r2, [r2, #0]
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	d008      	beq.n	8003bc6 <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003bb4:	693b      	ldr	r3, [r7, #16]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d005      	beq.n	8003bc6 <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003bba:	693b      	ldr	r3, [r7, #16]
 8003bbc:	2b05      	cmp	r3, #5
 8003bbe:	d002      	beq.n	8003bc6 <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003bc0:	693b      	ldr	r3, [r7, #16]
 8003bc2:	2b09      	cmp	r3, #9
 8003bc4:	d114      	bne.n	8003bf0 <HAL_ADC_Start+0x14c>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	68db      	ldr	r3, [r3, #12]
 8003bcc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d007      	beq.n	8003be4 <HAL_ADC_Start+0x140>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bd8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003bdc:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	4618      	mov	r0, r3
 8003bea:	f7ff fd5e 	bl	80036aa <LL_ADC_REG_StartConversion>
 8003bee:	e02d      	b.n	8003c4c <HAL_ADC_Start+0x1a8>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bf4:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	65da      	str	r2, [r3, #92]	; 0x5c
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	4a15      	ldr	r2, [pc, #84]	; (8003c58 <HAL_ADC_Start+0x1b4>)
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d009      	beq.n	8003c1a <HAL_ADC_Start+0x176>
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	4a16      	ldr	r2, [pc, #88]	; (8003c64 <HAL_ADC_Start+0x1c0>)
 8003c0c:	4293      	cmp	r3, r2
 8003c0e:	d002      	beq.n	8003c16 <HAL_ADC_Start+0x172>
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	e003      	b.n	8003c1e <HAL_ADC_Start+0x17a>
 8003c16:	4b14      	ldr	r3, [pc, #80]	; (8003c68 <HAL_ADC_Start+0x1c4>)
 8003c18:	e001      	b.n	8003c1e <HAL_ADC_Start+0x17a>
 8003c1a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003c1e:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	68db      	ldr	r3, [r3, #12]
 8003c24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d00f      	beq.n	8003c4c <HAL_ADC_Start+0x1a8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c30:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003c34:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	65da      	str	r2, [r3, #92]	; 0x5c
 8003c3c:	e006      	b.n	8003c4c <HAL_ADC_Start+0x1a8>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2200      	movs	r2, #0
 8003c42:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8003c46:	e001      	b.n	8003c4c <HAL_ADC_Start+0x1a8>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003c48:	2302      	movs	r3, #2
 8003c4a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003c4c:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c4e:	4618      	mov	r0, r3
 8003c50:	3718      	adds	r7, #24
 8003c52:	46bd      	mov	sp, r7
 8003c54:	bd80      	pop	{r7, pc}
 8003c56:	bf00      	nop
 8003c58:	50000100 	.word	0x50000100
 8003c5c:	50000300 	.word	0x50000300
 8003c60:	50000700 	.word	0x50000700
 8003c64:	50000500 	.word	0x50000500
 8003c68:	50000400 	.word	0x50000400

08003c6c <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b088      	sub	sp, #32
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
 8003c74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003c7e:	d004      	beq.n	8003c8a <HAL_ADC_PollForConversion+0x1e>
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4a77      	ldr	r2, [pc, #476]	; (8003e64 <HAL_ADC_PollForConversion+0x1f8>)
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d101      	bne.n	8003c8e <HAL_ADC_PollForConversion+0x22>
 8003c8a:	4b77      	ldr	r3, [pc, #476]	; (8003e68 <HAL_ADC_PollForConversion+0x1fc>)
 8003c8c:	e000      	b.n	8003c90 <HAL_ADC_PollForConversion+0x24>
 8003c8e:	4b77      	ldr	r3, [pc, #476]	; (8003e6c <HAL_ADC_PollForConversion+0x200>)
 8003c90:	4618      	mov	r0, r3
 8003c92:	f7ff fc79 	bl	8003588 <LL_ADC_GetMultimode>
 8003c96:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	699b      	ldr	r3, [r3, #24]
 8003c9c:	2b08      	cmp	r3, #8
 8003c9e:	d102      	bne.n	8003ca6 <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8003ca0:	2308      	movs	r3, #8
 8003ca2:	61fb      	str	r3, [r7, #28]
 8003ca4:	e037      	b.n	8003d16 <HAL_ADC_PollForConversion+0xaa>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003ca6:	697b      	ldr	r3, [r7, #20]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d005      	beq.n	8003cb8 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003cac:	697b      	ldr	r3, [r7, #20]
 8003cae:	2b05      	cmp	r3, #5
 8003cb0:	d002      	beq.n	8003cb8 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003cb2:	697b      	ldr	r3, [r7, #20]
 8003cb4:	2b09      	cmp	r3, #9
 8003cb6:	d111      	bne.n	8003cdc <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	68db      	ldr	r3, [r3, #12]
 8003cbe:	f003 0301 	and.w	r3, r3, #1
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d007      	beq.n	8003cd6 <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cca:	f043 0220 	orr.w	r2, r3, #32
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	65da      	str	r2, [r3, #92]	; 0x5c
        return HAL_ERROR;
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	e0c1      	b.n	8003e5a <HAL_ADC_PollForConversion+0x1ee>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8003cd6:	2304      	movs	r3, #4
 8003cd8:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8003cda:	e01c      	b.n	8003d16 <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003ce4:	d004      	beq.n	8003cf0 <HAL_ADC_PollForConversion+0x84>
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	4a5e      	ldr	r2, [pc, #376]	; (8003e64 <HAL_ADC_PollForConversion+0x1f8>)
 8003cec:	4293      	cmp	r3, r2
 8003cee:	d101      	bne.n	8003cf4 <HAL_ADC_PollForConversion+0x88>
 8003cf0:	4b5d      	ldr	r3, [pc, #372]	; (8003e68 <HAL_ADC_PollForConversion+0x1fc>)
 8003cf2:	e000      	b.n	8003cf6 <HAL_ADC_PollForConversion+0x8a>
 8003cf4:	4b5d      	ldr	r3, [pc, #372]	; (8003e6c <HAL_ADC_PollForConversion+0x200>)
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	f7ff fc54 	bl	80035a4 <LL_ADC_GetMultiDMATransfer>
 8003cfc:	4603      	mov	r3, r0
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d007      	beq.n	8003d12 <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d06:	f043 0220 	orr.w	r2, r3, #32
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	65da      	str	r2, [r3, #92]	; 0x5c
        return HAL_ERROR;
 8003d0e:	2301      	movs	r3, #1
 8003d10:	e0a3      	b.n	8003e5a <HAL_ADC_PollForConversion+0x1ee>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8003d12:	2304      	movs	r3, #4
 8003d14:	61fb      	str	r3, [r7, #28]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8003d16:	f7ff faa5 	bl	8003264 <HAL_GetTick>
 8003d1a:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003d1c:	e021      	b.n	8003d62 <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003d24:	d01d      	beq.n	8003d62 <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8003d26:	f7ff fa9d 	bl	8003264 <HAL_GetTick>
 8003d2a:	4602      	mov	r2, r0
 8003d2c:	693b      	ldr	r3, [r7, #16]
 8003d2e:	1ad3      	subs	r3, r2, r3
 8003d30:	683a      	ldr	r2, [r7, #0]
 8003d32:	429a      	cmp	r2, r3
 8003d34:	d302      	bcc.n	8003d3c <HAL_ADC_PollForConversion+0xd0>
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d112      	bne.n	8003d62 <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	681a      	ldr	r2, [r3, #0]
 8003d42:	69fb      	ldr	r3, [r7, #28]
 8003d44:	4013      	ands	r3, r2
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d10b      	bne.n	8003d62 <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d4e:	f043 0204 	orr.w	r2, r3, #4
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2200      	movs	r2, #0
 8003d5a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

          return HAL_TIMEOUT;
 8003d5e:	2303      	movs	r3, #3
 8003d60:	e07b      	b.n	8003e5a <HAL_ADC_PollForConversion+0x1ee>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	681a      	ldr	r2, [r3, #0]
 8003d68:	69fb      	ldr	r3, [r7, #28]
 8003d6a:	4013      	ands	r3, r2
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d0d6      	beq.n	8003d1e <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d74:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	4618      	mov	r0, r3
 8003d82:	f7ff fb6f 	bl	8003464 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003d86:	4603      	mov	r3, r0
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d01c      	beq.n	8003dc6 <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	7f5b      	ldrb	r3, [r3, #29]
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d118      	bne.n	8003dc6 <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f003 0308 	and.w	r3, r3, #8
 8003d9e:	2b08      	cmp	r3, #8
 8003da0:	d111      	bne.n	8003dc6 <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003da6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	65da      	str	r2, [r3, #92]	; 0x5c

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003db2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d105      	bne.n	8003dc6 <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dbe:	f043 0201 	orr.w	r2, r3, #1
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	4a26      	ldr	r2, [pc, #152]	; (8003e64 <HAL_ADC_PollForConversion+0x1f8>)
 8003dcc:	4293      	cmp	r3, r2
 8003dce:	d009      	beq.n	8003de4 <HAL_ADC_PollForConversion+0x178>
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	4a26      	ldr	r2, [pc, #152]	; (8003e70 <HAL_ADC_PollForConversion+0x204>)
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d002      	beq.n	8003de0 <HAL_ADC_PollForConversion+0x174>
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	e003      	b.n	8003de8 <HAL_ADC_PollForConversion+0x17c>
 8003de0:	4b24      	ldr	r3, [pc, #144]	; (8003e74 <HAL_ADC_PollForConversion+0x208>)
 8003de2:	e001      	b.n	8003de8 <HAL_ADC_PollForConversion+0x17c>
 8003de4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003de8:	687a      	ldr	r2, [r7, #4]
 8003dea:	6812      	ldr	r2, [r2, #0]
 8003dec:	4293      	cmp	r3, r2
 8003dee:	d008      	beq.n	8003e02 <HAL_ADC_PollForConversion+0x196>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003df0:	697b      	ldr	r3, [r7, #20]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d005      	beq.n	8003e02 <HAL_ADC_PollForConversion+0x196>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003df6:	697b      	ldr	r3, [r7, #20]
 8003df8:	2b05      	cmp	r3, #5
 8003dfa:	d002      	beq.n	8003e02 <HAL_ADC_PollForConversion+0x196>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003dfc:	697b      	ldr	r3, [r7, #20]
 8003dfe:	2b09      	cmp	r3, #9
 8003e00:	d104      	bne.n	8003e0c <HAL_ADC_PollForConversion+0x1a0>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	68db      	ldr	r3, [r3, #12]
 8003e08:	61bb      	str	r3, [r7, #24]
 8003e0a:	e014      	b.n	8003e36 <HAL_ADC_PollForConversion+0x1ca>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	4a14      	ldr	r2, [pc, #80]	; (8003e64 <HAL_ADC_PollForConversion+0x1f8>)
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d009      	beq.n	8003e2a <HAL_ADC_PollForConversion+0x1be>
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	4a15      	ldr	r2, [pc, #84]	; (8003e70 <HAL_ADC_PollForConversion+0x204>)
 8003e1c:	4293      	cmp	r3, r2
 8003e1e:	d002      	beq.n	8003e26 <HAL_ADC_PollForConversion+0x1ba>
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	e003      	b.n	8003e2e <HAL_ADC_PollForConversion+0x1c2>
 8003e26:	4b13      	ldr	r3, [pc, #76]	; (8003e74 <HAL_ADC_PollForConversion+0x208>)
 8003e28:	e001      	b.n	8003e2e <HAL_ADC_PollForConversion+0x1c2>
 8003e2a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003e2e:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	68db      	ldr	r3, [r3, #12]
 8003e34:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8003e36:	69fb      	ldr	r3, [r7, #28]
 8003e38:	2b08      	cmp	r3, #8
 8003e3a:	d104      	bne.n	8003e46 <HAL_ADC_PollForConversion+0x1da>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	2208      	movs	r2, #8
 8003e42:	601a      	str	r2, [r3, #0]
 8003e44:	e008      	b.n	8003e58 <HAL_ADC_PollForConversion+0x1ec>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8003e46:	69bb      	ldr	r3, [r7, #24]
 8003e48:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d103      	bne.n	8003e58 <HAL_ADC_PollForConversion+0x1ec>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	220c      	movs	r2, #12
 8003e56:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8003e58:	2300      	movs	r3, #0
}
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	3720      	adds	r7, #32
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	bd80      	pop	{r7, pc}
 8003e62:	bf00      	nop
 8003e64:	50000100 	.word	0x50000100
 8003e68:	50000300 	.word	0x50000300
 8003e6c:	50000700 	.word	0x50000700
 8003e70:	50000500 	.word	0x50000500
 8003e74:	50000400 	.word	0x50000400

08003e78 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8003e78:	b480      	push	{r7}
 8003e7a:	b083      	sub	sp, #12
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8003e86:	4618      	mov	r0, r3
 8003e88:	370c      	adds	r7, #12
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e90:	4770      	bx	lr
	...

08003e94 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b0b6      	sub	sp, #216	; 0xd8
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
 8003e9c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003eae:	2b01      	cmp	r3, #1
 8003eb0:	d102      	bne.n	8003eb8 <HAL_ADC_ConfigChannel+0x24>
 8003eb2:	2302      	movs	r3, #2
 8003eb4:	f000 bc13 	b.w	80046de <HAL_ADC_ConfigChannel+0x84a>
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2201      	movs	r2, #1
 8003ebc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	f7ff fc04 	bl	80036d2 <LL_ADC_REG_IsConversionOngoing>
 8003eca:	4603      	mov	r3, r0
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	f040 83f3 	bne.w	80046b8 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6818      	ldr	r0, [r3, #0]
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	6859      	ldr	r1, [r3, #4]
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	461a      	mov	r2, r3
 8003ee0:	f7ff fad3 	bl	800348a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	4618      	mov	r0, r3
 8003eea:	f7ff fbf2 	bl	80036d2 <LL_ADC_REG_IsConversionOngoing>
 8003eee:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	f7ff fbfe 	bl	80036f8 <LL_ADC_INJ_IsConversionOngoing>
 8003efc:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003f00:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	f040 81d9 	bne.w	80042bc <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003f0a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	f040 81d4 	bne.w	80042bc <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	689b      	ldr	r3, [r3, #8]
 8003f18:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003f1c:	d10f      	bne.n	8003f3e <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6818      	ldr	r0, [r3, #0]
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	2200      	movs	r2, #0
 8003f28:	4619      	mov	r1, r3
 8003f2a:	f7ff fada 	bl	80034e2 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8003f36:	4618      	mov	r0, r3
 8003f38:	f7ff fa81 	bl	800343e <LL_ADC_SetSamplingTimeCommonConfig>
 8003f3c:	e00e      	b.n	8003f5c <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6818      	ldr	r0, [r3, #0]
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	6819      	ldr	r1, [r3, #0]
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	689b      	ldr	r3, [r3, #8]
 8003f4a:	461a      	mov	r2, r3
 8003f4c:	f7ff fac9 	bl	80034e2 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	2100      	movs	r1, #0
 8003f56:	4618      	mov	r0, r3
 8003f58:	f7ff fa71 	bl	800343e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	695a      	ldr	r2, [r3, #20]
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	68db      	ldr	r3, [r3, #12]
 8003f66:	08db      	lsrs	r3, r3, #3
 8003f68:	f003 0303 	and.w	r3, r3, #3
 8003f6c:	005b      	lsls	r3, r3, #1
 8003f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f72:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	691b      	ldr	r3, [r3, #16]
 8003f7a:	2b04      	cmp	r3, #4
 8003f7c:	d022      	beq.n	8003fc4 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6818      	ldr	r0, [r3, #0]
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	6919      	ldr	r1, [r3, #16]
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	681a      	ldr	r2, [r3, #0]
 8003f8a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003f8e:	f7ff f9cb 	bl	8003328 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6818      	ldr	r0, [r3, #0]
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	6919      	ldr	r1, [r3, #16]
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	699b      	ldr	r3, [r3, #24]
 8003f9e:	461a      	mov	r2, r3
 8003fa0:	f7ff fa17 	bl	80033d2 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6818      	ldr	r0, [r3, #0]
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	6919      	ldr	r1, [r3, #16]
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	7f1b      	ldrb	r3, [r3, #28]
 8003fb0:	2b01      	cmp	r3, #1
 8003fb2:	d102      	bne.n	8003fba <HAL_ADC_ConfigChannel+0x126>
 8003fb4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003fb8:	e000      	b.n	8003fbc <HAL_ADC_ConfigChannel+0x128>
 8003fba:	2300      	movs	r3, #0
 8003fbc:	461a      	mov	r2, r3
 8003fbe:	f7ff fa23 	bl	8003408 <LL_ADC_SetOffsetSaturation>
 8003fc2:	e17b      	b.n	80042bc <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	2100      	movs	r1, #0
 8003fca:	4618      	mov	r0, r3
 8003fcc:	f7ff f9d0 	bl	8003370 <LL_ADC_GetOffsetChannel>
 8003fd0:	4603      	mov	r3, r0
 8003fd2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d10a      	bne.n	8003ff0 <HAL_ADC_ConfigChannel+0x15c>
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	2100      	movs	r1, #0
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	f7ff f9c5 	bl	8003370 <LL_ADC_GetOffsetChannel>
 8003fe6:	4603      	mov	r3, r0
 8003fe8:	0e9b      	lsrs	r3, r3, #26
 8003fea:	f003 021f 	and.w	r2, r3, #31
 8003fee:	e01e      	b.n	800402e <HAL_ADC_ConfigChannel+0x19a>
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	2100      	movs	r1, #0
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	f7ff f9ba 	bl	8003370 <LL_ADC_GetOffsetChannel>
 8003ffc:	4603      	mov	r3, r0
 8003ffe:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004002:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004006:	fa93 f3a3 	rbit	r3, r3
 800400a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800400e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004012:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004016:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800401a:	2b00      	cmp	r3, #0
 800401c:	d101      	bne.n	8004022 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 800401e:	2320      	movs	r3, #32
 8004020:	e004      	b.n	800402c <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8004022:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004026:	fab3 f383 	clz	r3, r3
 800402a:	b2db      	uxtb	r3, r3
 800402c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004036:	2b00      	cmp	r3, #0
 8004038:	d105      	bne.n	8004046 <HAL_ADC_ConfigChannel+0x1b2>
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	0e9b      	lsrs	r3, r3, #26
 8004040:	f003 031f 	and.w	r3, r3, #31
 8004044:	e018      	b.n	8004078 <HAL_ADC_ConfigChannel+0x1e4>
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800404e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004052:	fa93 f3a3 	rbit	r3, r3
 8004056:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 800405a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800405e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8004062:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004066:	2b00      	cmp	r3, #0
 8004068:	d101      	bne.n	800406e <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 800406a:	2320      	movs	r3, #32
 800406c:	e004      	b.n	8004078 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 800406e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004072:	fab3 f383 	clz	r3, r3
 8004076:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004078:	429a      	cmp	r2, r3
 800407a:	d106      	bne.n	800408a <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	2200      	movs	r2, #0
 8004082:	2100      	movs	r1, #0
 8004084:	4618      	mov	r0, r3
 8004086:	f7ff f989 	bl	800339c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	2101      	movs	r1, #1
 8004090:	4618      	mov	r0, r3
 8004092:	f7ff f96d 	bl	8003370 <LL_ADC_GetOffsetChannel>
 8004096:	4603      	mov	r3, r0
 8004098:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800409c:	2b00      	cmp	r3, #0
 800409e:	d10a      	bne.n	80040b6 <HAL_ADC_ConfigChannel+0x222>
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	2101      	movs	r1, #1
 80040a6:	4618      	mov	r0, r3
 80040a8:	f7ff f962 	bl	8003370 <LL_ADC_GetOffsetChannel>
 80040ac:	4603      	mov	r3, r0
 80040ae:	0e9b      	lsrs	r3, r3, #26
 80040b0:	f003 021f 	and.w	r2, r3, #31
 80040b4:	e01e      	b.n	80040f4 <HAL_ADC_ConfigChannel+0x260>
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	2101      	movs	r1, #1
 80040bc:	4618      	mov	r0, r3
 80040be:	f7ff f957 	bl	8003370 <LL_ADC_GetOffsetChannel>
 80040c2:	4603      	mov	r3, r0
 80040c4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040c8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80040cc:	fa93 f3a3 	rbit	r3, r3
 80040d0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80040d4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80040d8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80040dc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d101      	bne.n	80040e8 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 80040e4:	2320      	movs	r3, #32
 80040e6:	e004      	b.n	80040f2 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 80040e8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80040ec:	fab3 f383 	clz	r3, r3
 80040f0:	b2db      	uxtb	r3, r3
 80040f2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d105      	bne.n	800410c <HAL_ADC_ConfigChannel+0x278>
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	0e9b      	lsrs	r3, r3, #26
 8004106:	f003 031f 	and.w	r3, r3, #31
 800410a:	e018      	b.n	800413e <HAL_ADC_ConfigChannel+0x2aa>
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004114:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004118:	fa93 f3a3 	rbit	r3, r3
 800411c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8004120:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004124:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8004128:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800412c:	2b00      	cmp	r3, #0
 800412e:	d101      	bne.n	8004134 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8004130:	2320      	movs	r3, #32
 8004132:	e004      	b.n	800413e <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8004134:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004138:	fab3 f383 	clz	r3, r3
 800413c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800413e:	429a      	cmp	r2, r3
 8004140:	d106      	bne.n	8004150 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	2200      	movs	r2, #0
 8004148:	2101      	movs	r1, #1
 800414a:	4618      	mov	r0, r3
 800414c:	f7ff f926 	bl	800339c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	2102      	movs	r1, #2
 8004156:	4618      	mov	r0, r3
 8004158:	f7ff f90a 	bl	8003370 <LL_ADC_GetOffsetChannel>
 800415c:	4603      	mov	r3, r0
 800415e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004162:	2b00      	cmp	r3, #0
 8004164:	d10a      	bne.n	800417c <HAL_ADC_ConfigChannel+0x2e8>
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	2102      	movs	r1, #2
 800416c:	4618      	mov	r0, r3
 800416e:	f7ff f8ff 	bl	8003370 <LL_ADC_GetOffsetChannel>
 8004172:	4603      	mov	r3, r0
 8004174:	0e9b      	lsrs	r3, r3, #26
 8004176:	f003 021f 	and.w	r2, r3, #31
 800417a:	e01e      	b.n	80041ba <HAL_ADC_ConfigChannel+0x326>
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	2102      	movs	r1, #2
 8004182:	4618      	mov	r0, r3
 8004184:	f7ff f8f4 	bl	8003370 <LL_ADC_GetOffsetChannel>
 8004188:	4603      	mov	r3, r0
 800418a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800418e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004192:	fa93 f3a3 	rbit	r3, r3
 8004196:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 800419a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800419e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80041a2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d101      	bne.n	80041ae <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 80041aa:	2320      	movs	r3, #32
 80041ac:	e004      	b.n	80041b8 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 80041ae:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80041b2:	fab3 f383 	clz	r3, r3
 80041b6:	b2db      	uxtb	r3, r3
 80041b8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d105      	bne.n	80041d2 <HAL_ADC_ConfigChannel+0x33e>
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	0e9b      	lsrs	r3, r3, #26
 80041cc:	f003 031f 	and.w	r3, r3, #31
 80041d0:	e016      	b.n	8004200 <HAL_ADC_ConfigChannel+0x36c>
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041da:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80041de:	fa93 f3a3 	rbit	r3, r3
 80041e2:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80041e4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80041e6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80041ea:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d101      	bne.n	80041f6 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 80041f2:	2320      	movs	r3, #32
 80041f4:	e004      	b.n	8004200 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 80041f6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80041fa:	fab3 f383 	clz	r3, r3
 80041fe:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004200:	429a      	cmp	r2, r3
 8004202:	d106      	bne.n	8004212 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	2200      	movs	r2, #0
 800420a:	2102      	movs	r1, #2
 800420c:	4618      	mov	r0, r3
 800420e:	f7ff f8c5 	bl	800339c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	2103      	movs	r1, #3
 8004218:	4618      	mov	r0, r3
 800421a:	f7ff f8a9 	bl	8003370 <LL_ADC_GetOffsetChannel>
 800421e:	4603      	mov	r3, r0
 8004220:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004224:	2b00      	cmp	r3, #0
 8004226:	d10a      	bne.n	800423e <HAL_ADC_ConfigChannel+0x3aa>
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	2103      	movs	r1, #3
 800422e:	4618      	mov	r0, r3
 8004230:	f7ff f89e 	bl	8003370 <LL_ADC_GetOffsetChannel>
 8004234:	4603      	mov	r3, r0
 8004236:	0e9b      	lsrs	r3, r3, #26
 8004238:	f003 021f 	and.w	r2, r3, #31
 800423c:	e017      	b.n	800426e <HAL_ADC_ConfigChannel+0x3da>
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	2103      	movs	r1, #3
 8004244:	4618      	mov	r0, r3
 8004246:	f7ff f893 	bl	8003370 <LL_ADC_GetOffsetChannel>
 800424a:	4603      	mov	r3, r0
 800424c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800424e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004250:	fa93 f3a3 	rbit	r3, r3
 8004254:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8004256:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004258:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 800425a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800425c:	2b00      	cmp	r3, #0
 800425e:	d101      	bne.n	8004264 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8004260:	2320      	movs	r3, #32
 8004262:	e003      	b.n	800426c <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8004264:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004266:	fab3 f383 	clz	r3, r3
 800426a:	b2db      	uxtb	r3, r3
 800426c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004276:	2b00      	cmp	r3, #0
 8004278:	d105      	bne.n	8004286 <HAL_ADC_ConfigChannel+0x3f2>
 800427a:	683b      	ldr	r3, [r7, #0]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	0e9b      	lsrs	r3, r3, #26
 8004280:	f003 031f 	and.w	r3, r3, #31
 8004284:	e011      	b.n	80042aa <HAL_ADC_ConfigChannel+0x416>
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800428c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800428e:	fa93 f3a3 	rbit	r3, r3
 8004292:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8004294:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004296:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8004298:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800429a:	2b00      	cmp	r3, #0
 800429c:	d101      	bne.n	80042a2 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 800429e:	2320      	movs	r3, #32
 80042a0:	e003      	b.n	80042aa <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 80042a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042a4:	fab3 f383 	clz	r3, r3
 80042a8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80042aa:	429a      	cmp	r2, r3
 80042ac:	d106      	bne.n	80042bc <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	2200      	movs	r2, #0
 80042b4:	2103      	movs	r1, #3
 80042b6:	4618      	mov	r0, r3
 80042b8:	f7ff f870 	bl	800339c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	4618      	mov	r0, r3
 80042c2:	f7ff f9df 	bl	8003684 <LL_ADC_IsEnabled>
 80042c6:	4603      	mov	r3, r0
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	f040 813d 	bne.w	8004548 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6818      	ldr	r0, [r3, #0]
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	6819      	ldr	r1, [r3, #0]
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	68db      	ldr	r3, [r3, #12]
 80042da:	461a      	mov	r2, r3
 80042dc:	f7ff f92c 	bl	8003538 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	68db      	ldr	r3, [r3, #12]
 80042e4:	4aa2      	ldr	r2, [pc, #648]	; (8004570 <HAL_ADC_ConfigChannel+0x6dc>)
 80042e6:	4293      	cmp	r3, r2
 80042e8:	f040 812e 	bne.w	8004548 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d10b      	bne.n	8004314 <HAL_ADC_ConfigChannel+0x480>
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	0e9b      	lsrs	r3, r3, #26
 8004302:	3301      	adds	r3, #1
 8004304:	f003 031f 	and.w	r3, r3, #31
 8004308:	2b09      	cmp	r3, #9
 800430a:	bf94      	ite	ls
 800430c:	2301      	movls	r3, #1
 800430e:	2300      	movhi	r3, #0
 8004310:	b2db      	uxtb	r3, r3
 8004312:	e019      	b.n	8004348 <HAL_ADC_ConfigChannel+0x4b4>
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800431a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800431c:	fa93 f3a3 	rbit	r3, r3
 8004320:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8004322:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004324:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8004326:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004328:	2b00      	cmp	r3, #0
 800432a:	d101      	bne.n	8004330 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 800432c:	2320      	movs	r3, #32
 800432e:	e003      	b.n	8004338 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8004330:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004332:	fab3 f383 	clz	r3, r3
 8004336:	b2db      	uxtb	r3, r3
 8004338:	3301      	adds	r3, #1
 800433a:	f003 031f 	and.w	r3, r3, #31
 800433e:	2b09      	cmp	r3, #9
 8004340:	bf94      	ite	ls
 8004342:	2301      	movls	r3, #1
 8004344:	2300      	movhi	r3, #0
 8004346:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004348:	2b00      	cmp	r3, #0
 800434a:	d079      	beq.n	8004440 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004354:	2b00      	cmp	r3, #0
 8004356:	d107      	bne.n	8004368 <HAL_ADC_ConfigChannel+0x4d4>
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	0e9b      	lsrs	r3, r3, #26
 800435e:	3301      	adds	r3, #1
 8004360:	069b      	lsls	r3, r3, #26
 8004362:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004366:	e015      	b.n	8004394 <HAL_ADC_ConfigChannel+0x500>
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800436e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004370:	fa93 f3a3 	rbit	r3, r3
 8004374:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8004376:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004378:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 800437a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800437c:	2b00      	cmp	r3, #0
 800437e:	d101      	bne.n	8004384 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8004380:	2320      	movs	r3, #32
 8004382:	e003      	b.n	800438c <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8004384:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004386:	fab3 f383 	clz	r3, r3
 800438a:	b2db      	uxtb	r3, r3
 800438c:	3301      	adds	r3, #1
 800438e:	069b      	lsls	r3, r3, #26
 8004390:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800439c:	2b00      	cmp	r3, #0
 800439e:	d109      	bne.n	80043b4 <HAL_ADC_ConfigChannel+0x520>
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	0e9b      	lsrs	r3, r3, #26
 80043a6:	3301      	adds	r3, #1
 80043a8:	f003 031f 	and.w	r3, r3, #31
 80043ac:	2101      	movs	r1, #1
 80043ae:	fa01 f303 	lsl.w	r3, r1, r3
 80043b2:	e017      	b.n	80043e4 <HAL_ADC_ConfigChannel+0x550>
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80043bc:	fa93 f3a3 	rbit	r3, r3
 80043c0:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80043c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80043c4:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80043c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d101      	bne.n	80043d0 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 80043cc:	2320      	movs	r3, #32
 80043ce:	e003      	b.n	80043d8 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 80043d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80043d2:	fab3 f383 	clz	r3, r3
 80043d6:	b2db      	uxtb	r3, r3
 80043d8:	3301      	adds	r3, #1
 80043da:	f003 031f 	and.w	r3, r3, #31
 80043de:	2101      	movs	r1, #1
 80043e0:	fa01 f303 	lsl.w	r3, r1, r3
 80043e4:	ea42 0103 	orr.w	r1, r2, r3
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d10a      	bne.n	800440a <HAL_ADC_ConfigChannel+0x576>
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	0e9b      	lsrs	r3, r3, #26
 80043fa:	3301      	adds	r3, #1
 80043fc:	f003 021f 	and.w	r2, r3, #31
 8004400:	4613      	mov	r3, r2
 8004402:	005b      	lsls	r3, r3, #1
 8004404:	4413      	add	r3, r2
 8004406:	051b      	lsls	r3, r3, #20
 8004408:	e018      	b.n	800443c <HAL_ADC_ConfigChannel+0x5a8>
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004410:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004412:	fa93 f3a3 	rbit	r3, r3
 8004416:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8004418:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800441a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 800441c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800441e:	2b00      	cmp	r3, #0
 8004420:	d101      	bne.n	8004426 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8004422:	2320      	movs	r3, #32
 8004424:	e003      	b.n	800442e <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8004426:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004428:	fab3 f383 	clz	r3, r3
 800442c:	b2db      	uxtb	r3, r3
 800442e:	3301      	adds	r3, #1
 8004430:	f003 021f 	and.w	r2, r3, #31
 8004434:	4613      	mov	r3, r2
 8004436:	005b      	lsls	r3, r3, #1
 8004438:	4413      	add	r3, r2
 800443a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800443c:	430b      	orrs	r3, r1
 800443e:	e07e      	b.n	800453e <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004448:	2b00      	cmp	r3, #0
 800444a:	d107      	bne.n	800445c <HAL_ADC_ConfigChannel+0x5c8>
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	0e9b      	lsrs	r3, r3, #26
 8004452:	3301      	adds	r3, #1
 8004454:	069b      	lsls	r3, r3, #26
 8004456:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800445a:	e015      	b.n	8004488 <HAL_ADC_ConfigChannel+0x5f4>
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004462:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004464:	fa93 f3a3 	rbit	r3, r3
 8004468:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 800446a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800446c:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 800446e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004470:	2b00      	cmp	r3, #0
 8004472:	d101      	bne.n	8004478 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8004474:	2320      	movs	r3, #32
 8004476:	e003      	b.n	8004480 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8004478:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800447a:	fab3 f383 	clz	r3, r3
 800447e:	b2db      	uxtb	r3, r3
 8004480:	3301      	adds	r3, #1
 8004482:	069b      	lsls	r3, r3, #26
 8004484:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004490:	2b00      	cmp	r3, #0
 8004492:	d109      	bne.n	80044a8 <HAL_ADC_ConfigChannel+0x614>
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	0e9b      	lsrs	r3, r3, #26
 800449a:	3301      	adds	r3, #1
 800449c:	f003 031f 	and.w	r3, r3, #31
 80044a0:	2101      	movs	r1, #1
 80044a2:	fa01 f303 	lsl.w	r3, r1, r3
 80044a6:	e017      	b.n	80044d8 <HAL_ADC_ConfigChannel+0x644>
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044ae:	6a3b      	ldr	r3, [r7, #32]
 80044b0:	fa93 f3a3 	rbit	r3, r3
 80044b4:	61fb      	str	r3, [r7, #28]
  return result;
 80044b6:	69fb      	ldr	r3, [r7, #28]
 80044b8:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80044ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d101      	bne.n	80044c4 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 80044c0:	2320      	movs	r3, #32
 80044c2:	e003      	b.n	80044cc <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 80044c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044c6:	fab3 f383 	clz	r3, r3
 80044ca:	b2db      	uxtb	r3, r3
 80044cc:	3301      	adds	r3, #1
 80044ce:	f003 031f 	and.w	r3, r3, #31
 80044d2:	2101      	movs	r1, #1
 80044d4:	fa01 f303 	lsl.w	r3, r1, r3
 80044d8:	ea42 0103 	orr.w	r1, r2, r3
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d10d      	bne.n	8004504 <HAL_ADC_ConfigChannel+0x670>
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	0e9b      	lsrs	r3, r3, #26
 80044ee:	3301      	adds	r3, #1
 80044f0:	f003 021f 	and.w	r2, r3, #31
 80044f4:	4613      	mov	r3, r2
 80044f6:	005b      	lsls	r3, r3, #1
 80044f8:	4413      	add	r3, r2
 80044fa:	3b1e      	subs	r3, #30
 80044fc:	051b      	lsls	r3, r3, #20
 80044fe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004502:	e01b      	b.n	800453c <HAL_ADC_ConfigChannel+0x6a8>
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800450a:	697b      	ldr	r3, [r7, #20]
 800450c:	fa93 f3a3 	rbit	r3, r3
 8004510:	613b      	str	r3, [r7, #16]
  return result;
 8004512:	693b      	ldr	r3, [r7, #16]
 8004514:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004516:	69bb      	ldr	r3, [r7, #24]
 8004518:	2b00      	cmp	r3, #0
 800451a:	d101      	bne.n	8004520 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 800451c:	2320      	movs	r3, #32
 800451e:	e003      	b.n	8004528 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8004520:	69bb      	ldr	r3, [r7, #24]
 8004522:	fab3 f383 	clz	r3, r3
 8004526:	b2db      	uxtb	r3, r3
 8004528:	3301      	adds	r3, #1
 800452a:	f003 021f 	and.w	r2, r3, #31
 800452e:	4613      	mov	r3, r2
 8004530:	005b      	lsls	r3, r3, #1
 8004532:	4413      	add	r3, r2
 8004534:	3b1e      	subs	r3, #30
 8004536:	051b      	lsls	r3, r3, #20
 8004538:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800453c:	430b      	orrs	r3, r1
 800453e:	683a      	ldr	r2, [r7, #0]
 8004540:	6892      	ldr	r2, [r2, #8]
 8004542:	4619      	mov	r1, r3
 8004544:	f7fe ffcd 	bl	80034e2 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	681a      	ldr	r2, [r3, #0]
 800454c:	4b09      	ldr	r3, [pc, #36]	; (8004574 <HAL_ADC_ConfigChannel+0x6e0>)
 800454e:	4013      	ands	r3, r2
 8004550:	2b00      	cmp	r3, #0
 8004552:	f000 80be 	beq.w	80046d2 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800455e:	d004      	beq.n	800456a <HAL_ADC_ConfigChannel+0x6d6>
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	4a04      	ldr	r2, [pc, #16]	; (8004578 <HAL_ADC_ConfigChannel+0x6e4>)
 8004566:	4293      	cmp	r3, r2
 8004568:	d10a      	bne.n	8004580 <HAL_ADC_ConfigChannel+0x6ec>
 800456a:	4b04      	ldr	r3, [pc, #16]	; (800457c <HAL_ADC_ConfigChannel+0x6e8>)
 800456c:	e009      	b.n	8004582 <HAL_ADC_ConfigChannel+0x6ee>
 800456e:	bf00      	nop
 8004570:	407f0000 	.word	0x407f0000
 8004574:	80080000 	.word	0x80080000
 8004578:	50000100 	.word	0x50000100
 800457c:	50000300 	.word	0x50000300
 8004580:	4b59      	ldr	r3, [pc, #356]	; (80046e8 <HAL_ADC_ConfigChannel+0x854>)
 8004582:	4618      	mov	r0, r3
 8004584:	f7fe fec2 	bl	800330c <LL_ADC_GetCommonPathInternalCh>
 8004588:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	4a56      	ldr	r2, [pc, #344]	; (80046ec <HAL_ADC_ConfigChannel+0x858>)
 8004592:	4293      	cmp	r3, r2
 8004594:	d004      	beq.n	80045a0 <HAL_ADC_ConfigChannel+0x70c>
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	4a55      	ldr	r2, [pc, #340]	; (80046f0 <HAL_ADC_ConfigChannel+0x85c>)
 800459c:	4293      	cmp	r3, r2
 800459e:	d13a      	bne.n	8004616 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80045a0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80045a4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d134      	bne.n	8004616 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80045b4:	d005      	beq.n	80045c2 <HAL_ADC_ConfigChannel+0x72e>
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	4a4e      	ldr	r2, [pc, #312]	; (80046f4 <HAL_ADC_ConfigChannel+0x860>)
 80045bc:	4293      	cmp	r3, r2
 80045be:	f040 8085 	bne.w	80046cc <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80045ca:	d004      	beq.n	80045d6 <HAL_ADC_ConfigChannel+0x742>
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	4a49      	ldr	r2, [pc, #292]	; (80046f8 <HAL_ADC_ConfigChannel+0x864>)
 80045d2:	4293      	cmp	r3, r2
 80045d4:	d101      	bne.n	80045da <HAL_ADC_ConfigChannel+0x746>
 80045d6:	4a49      	ldr	r2, [pc, #292]	; (80046fc <HAL_ADC_ConfigChannel+0x868>)
 80045d8:	e000      	b.n	80045dc <HAL_ADC_ConfigChannel+0x748>
 80045da:	4a43      	ldr	r2, [pc, #268]	; (80046e8 <HAL_ADC_ConfigChannel+0x854>)
 80045dc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80045e0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80045e4:	4619      	mov	r1, r3
 80045e6:	4610      	mov	r0, r2
 80045e8:	f7fe fe7d 	bl	80032e6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80045ec:	4b44      	ldr	r3, [pc, #272]	; (8004700 <HAL_ADC_ConfigChannel+0x86c>)
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	099b      	lsrs	r3, r3, #6
 80045f2:	4a44      	ldr	r2, [pc, #272]	; (8004704 <HAL_ADC_ConfigChannel+0x870>)
 80045f4:	fba2 2303 	umull	r2, r3, r2, r3
 80045f8:	099b      	lsrs	r3, r3, #6
 80045fa:	1c5a      	adds	r2, r3, #1
 80045fc:	4613      	mov	r3, r2
 80045fe:	005b      	lsls	r3, r3, #1
 8004600:	4413      	add	r3, r2
 8004602:	009b      	lsls	r3, r3, #2
 8004604:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004606:	e002      	b.n	800460e <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	3b01      	subs	r3, #1
 800460c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	2b00      	cmp	r3, #0
 8004612:	d1f9      	bne.n	8004608 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004614:	e05a      	b.n	80046cc <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	4a3b      	ldr	r2, [pc, #236]	; (8004708 <HAL_ADC_ConfigChannel+0x874>)
 800461c:	4293      	cmp	r3, r2
 800461e:	d125      	bne.n	800466c <HAL_ADC_ConfigChannel+0x7d8>
 8004620:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004624:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004628:	2b00      	cmp	r3, #0
 800462a:	d11f      	bne.n	800466c <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	4a31      	ldr	r2, [pc, #196]	; (80046f8 <HAL_ADC_ConfigChannel+0x864>)
 8004632:	4293      	cmp	r3, r2
 8004634:	d104      	bne.n	8004640 <HAL_ADC_ConfigChannel+0x7ac>
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	4a34      	ldr	r2, [pc, #208]	; (800470c <HAL_ADC_ConfigChannel+0x878>)
 800463c:	4293      	cmp	r3, r2
 800463e:	d047      	beq.n	80046d0 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004648:	d004      	beq.n	8004654 <HAL_ADC_ConfigChannel+0x7c0>
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	4a2a      	ldr	r2, [pc, #168]	; (80046f8 <HAL_ADC_ConfigChannel+0x864>)
 8004650:	4293      	cmp	r3, r2
 8004652:	d101      	bne.n	8004658 <HAL_ADC_ConfigChannel+0x7c4>
 8004654:	4a29      	ldr	r2, [pc, #164]	; (80046fc <HAL_ADC_ConfigChannel+0x868>)
 8004656:	e000      	b.n	800465a <HAL_ADC_ConfigChannel+0x7c6>
 8004658:	4a23      	ldr	r2, [pc, #140]	; (80046e8 <HAL_ADC_ConfigChannel+0x854>)
 800465a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800465e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004662:	4619      	mov	r1, r3
 8004664:	4610      	mov	r0, r2
 8004666:	f7fe fe3e 	bl	80032e6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800466a:	e031      	b.n	80046d0 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	4a27      	ldr	r2, [pc, #156]	; (8004710 <HAL_ADC_ConfigChannel+0x87c>)
 8004672:	4293      	cmp	r3, r2
 8004674:	d12d      	bne.n	80046d2 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004676:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800467a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800467e:	2b00      	cmp	r3, #0
 8004680:	d127      	bne.n	80046d2 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	4a1c      	ldr	r2, [pc, #112]	; (80046f8 <HAL_ADC_ConfigChannel+0x864>)
 8004688:	4293      	cmp	r3, r2
 800468a:	d022      	beq.n	80046d2 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004694:	d004      	beq.n	80046a0 <HAL_ADC_ConfigChannel+0x80c>
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	4a17      	ldr	r2, [pc, #92]	; (80046f8 <HAL_ADC_ConfigChannel+0x864>)
 800469c:	4293      	cmp	r3, r2
 800469e:	d101      	bne.n	80046a4 <HAL_ADC_ConfigChannel+0x810>
 80046a0:	4a16      	ldr	r2, [pc, #88]	; (80046fc <HAL_ADC_ConfigChannel+0x868>)
 80046a2:	e000      	b.n	80046a6 <HAL_ADC_ConfigChannel+0x812>
 80046a4:	4a10      	ldr	r2, [pc, #64]	; (80046e8 <HAL_ADC_ConfigChannel+0x854>)
 80046a6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80046aa:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80046ae:	4619      	mov	r1, r3
 80046b0:	4610      	mov	r0, r2
 80046b2:	f7fe fe18 	bl	80032e6 <LL_ADC_SetCommonPathInternalCh>
 80046b6:	e00c      	b.n	80046d2 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046bc:	f043 0220 	orr.w	r2, r3, #32
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80046c4:	2301      	movs	r3, #1
 80046c6:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 80046ca:	e002      	b.n	80046d2 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80046cc:	bf00      	nop
 80046ce:	e000      	b.n	80046d2 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80046d0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	2200      	movs	r2, #0
 80046d6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80046da:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80046de:	4618      	mov	r0, r3
 80046e0:	37d8      	adds	r7, #216	; 0xd8
 80046e2:	46bd      	mov	sp, r7
 80046e4:	bd80      	pop	{r7, pc}
 80046e6:	bf00      	nop
 80046e8:	50000700 	.word	0x50000700
 80046ec:	c3210000 	.word	0xc3210000
 80046f0:	90c00010 	.word	0x90c00010
 80046f4:	50000600 	.word	0x50000600
 80046f8:	50000100 	.word	0x50000100
 80046fc:	50000300 	.word	0x50000300
 8004700:	20000000 	.word	0x20000000
 8004704:	053e2d63 	.word	0x053e2d63
 8004708:	c7520000 	.word	0xc7520000
 800470c:	50000500 	.word	0x50000500
 8004710:	cb840000 	.word	0xcb840000

08004714 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004714:	b580      	push	{r7, lr}
 8004716:	b084      	sub	sp, #16
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	4618      	mov	r0, r3
 8004722:	f7fe ffaf 	bl	8003684 <LL_ADC_IsEnabled>
 8004726:	4603      	mov	r3, r0
 8004728:	2b00      	cmp	r3, #0
 800472a:	d14d      	bne.n	80047c8 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	689a      	ldr	r2, [r3, #8]
 8004732:	4b28      	ldr	r3, [pc, #160]	; (80047d4 <ADC_Enable+0xc0>)
 8004734:	4013      	ands	r3, r2
 8004736:	2b00      	cmp	r3, #0
 8004738:	d00d      	beq.n	8004756 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800473e:	f043 0210 	orr.w	r2, r3, #16
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800474a:	f043 0201 	orr.w	r2, r3, #1
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8004752:	2301      	movs	r3, #1
 8004754:	e039      	b.n	80047ca <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	4618      	mov	r0, r3
 800475c:	f7fe ff7e 	bl	800365c <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004760:	f7fe fd80 	bl	8003264 <HAL_GetTick>
 8004764:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004766:	e028      	b.n	80047ba <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	4618      	mov	r0, r3
 800476e:	f7fe ff89 	bl	8003684 <LL_ADC_IsEnabled>
 8004772:	4603      	mov	r3, r0
 8004774:	2b00      	cmp	r3, #0
 8004776:	d104      	bne.n	8004782 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	4618      	mov	r0, r3
 800477e:	f7fe ff6d 	bl	800365c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004782:	f7fe fd6f 	bl	8003264 <HAL_GetTick>
 8004786:	4602      	mov	r2, r0
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	1ad3      	subs	r3, r2, r3
 800478c:	2b02      	cmp	r3, #2
 800478e:	d914      	bls.n	80047ba <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f003 0301 	and.w	r3, r3, #1
 800479a:	2b01      	cmp	r3, #1
 800479c:	d00d      	beq.n	80047ba <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047a2:	f043 0210 	orr.w	r2, r3, #16
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047ae:	f043 0201 	orr.w	r2, r3, #1
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 80047b6:	2301      	movs	r3, #1
 80047b8:	e007      	b.n	80047ca <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f003 0301 	and.w	r3, r3, #1
 80047c4:	2b01      	cmp	r3, #1
 80047c6:	d1cf      	bne.n	8004768 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80047c8:	2300      	movs	r3, #0
}
 80047ca:	4618      	mov	r0, r3
 80047cc:	3710      	adds	r7, #16
 80047ce:	46bd      	mov	sp, r7
 80047d0:	bd80      	pop	{r7, pc}
 80047d2:	bf00      	nop
 80047d4:	8000003f 	.word	0x8000003f

080047d8 <LL_ADC_IsEnabled>:
{
 80047d8:	b480      	push	{r7}
 80047da:	b083      	sub	sp, #12
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	689b      	ldr	r3, [r3, #8]
 80047e4:	f003 0301 	and.w	r3, r3, #1
 80047e8:	2b01      	cmp	r3, #1
 80047ea:	d101      	bne.n	80047f0 <LL_ADC_IsEnabled+0x18>
 80047ec:	2301      	movs	r3, #1
 80047ee:	e000      	b.n	80047f2 <LL_ADC_IsEnabled+0x1a>
 80047f0:	2300      	movs	r3, #0
}
 80047f2:	4618      	mov	r0, r3
 80047f4:	370c      	adds	r7, #12
 80047f6:	46bd      	mov	sp, r7
 80047f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fc:	4770      	bx	lr

080047fe <LL_ADC_REG_IsConversionOngoing>:
{
 80047fe:	b480      	push	{r7}
 8004800:	b083      	sub	sp, #12
 8004802:	af00      	add	r7, sp, #0
 8004804:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	689b      	ldr	r3, [r3, #8]
 800480a:	f003 0304 	and.w	r3, r3, #4
 800480e:	2b04      	cmp	r3, #4
 8004810:	d101      	bne.n	8004816 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004812:	2301      	movs	r3, #1
 8004814:	e000      	b.n	8004818 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004816:	2300      	movs	r3, #0
}
 8004818:	4618      	mov	r0, r3
 800481a:	370c      	adds	r7, #12
 800481c:	46bd      	mov	sp, r7
 800481e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004822:	4770      	bx	lr

08004824 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8004824:	b590      	push	{r4, r7, lr}
 8004826:	b0a1      	sub	sp, #132	; 0x84
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
 800482c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800482e:	2300      	movs	r3, #0
 8004830:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800483a:	2b01      	cmp	r3, #1
 800483c:	d101      	bne.n	8004842 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800483e:	2302      	movs	r3, #2
 8004840:	e0e7      	b.n	8004a12 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	2201      	movs	r2, #1
 8004846:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 800484a:	2300      	movs	r3, #0
 800484c:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 800484e:	2300      	movs	r3, #0
 8004850:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800485a:	d102      	bne.n	8004862 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800485c:	4b6f      	ldr	r3, [pc, #444]	; (8004a1c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800485e:	60bb      	str	r3, [r7, #8]
 8004860:	e009      	b.n	8004876 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	4a6e      	ldr	r2, [pc, #440]	; (8004a20 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8004868:	4293      	cmp	r3, r2
 800486a:	d102      	bne.n	8004872 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 800486c:	4b6d      	ldr	r3, [pc, #436]	; (8004a24 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800486e:	60bb      	str	r3, [r7, #8]
 8004870:	e001      	b.n	8004876 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8004872:	2300      	movs	r3, #0
 8004874:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8004876:	68bb      	ldr	r3, [r7, #8]
 8004878:	2b00      	cmp	r3, #0
 800487a:	d10b      	bne.n	8004894 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004880:	f043 0220 	orr.w	r2, r3, #32
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2200      	movs	r2, #0
 800488c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8004890:	2301      	movs	r3, #1
 8004892:	e0be      	b.n	8004a12 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8004894:	68bb      	ldr	r3, [r7, #8]
 8004896:	4618      	mov	r0, r3
 8004898:	f7ff ffb1 	bl	80047fe <LL_ADC_REG_IsConversionOngoing>
 800489c:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	4618      	mov	r0, r3
 80048a4:	f7ff ffab 	bl	80047fe <LL_ADC_REG_IsConversionOngoing>
 80048a8:	4603      	mov	r3, r0
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	f040 80a0 	bne.w	80049f0 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80048b0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	f040 809c 	bne.w	80049f0 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80048c0:	d004      	beq.n	80048cc <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	4a55      	ldr	r2, [pc, #340]	; (8004a1c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80048c8:	4293      	cmp	r3, r2
 80048ca:	d101      	bne.n	80048d0 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 80048cc:	4b56      	ldr	r3, [pc, #344]	; (8004a28 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 80048ce:	e000      	b.n	80048d2 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 80048d0:	4b56      	ldr	r3, [pc, #344]	; (8004a2c <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 80048d2:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d04b      	beq.n	8004974 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80048dc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80048de:	689b      	ldr	r3, [r3, #8]
 80048e0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80048e4:	683b      	ldr	r3, [r7, #0]
 80048e6:	6859      	ldr	r1, [r3, #4]
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80048ee:	035b      	lsls	r3, r3, #13
 80048f0:	430b      	orrs	r3, r1
 80048f2:	431a      	orrs	r2, r3
 80048f4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80048f6:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004900:	d004      	beq.n	800490c <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	4a45      	ldr	r2, [pc, #276]	; (8004a1c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004908:	4293      	cmp	r3, r2
 800490a:	d10f      	bne.n	800492c <HAL_ADCEx_MultiModeConfigChannel+0x108>
 800490c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8004910:	f7ff ff62 	bl	80047d8 <LL_ADC_IsEnabled>
 8004914:	4604      	mov	r4, r0
 8004916:	4841      	ldr	r0, [pc, #260]	; (8004a1c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004918:	f7ff ff5e 	bl	80047d8 <LL_ADC_IsEnabled>
 800491c:	4603      	mov	r3, r0
 800491e:	4323      	orrs	r3, r4
 8004920:	2b00      	cmp	r3, #0
 8004922:	bf0c      	ite	eq
 8004924:	2301      	moveq	r3, #1
 8004926:	2300      	movne	r3, #0
 8004928:	b2db      	uxtb	r3, r3
 800492a:	e012      	b.n	8004952 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 800492c:	483c      	ldr	r0, [pc, #240]	; (8004a20 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800492e:	f7ff ff53 	bl	80047d8 <LL_ADC_IsEnabled>
 8004932:	4604      	mov	r4, r0
 8004934:	483b      	ldr	r0, [pc, #236]	; (8004a24 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8004936:	f7ff ff4f 	bl	80047d8 <LL_ADC_IsEnabled>
 800493a:	4603      	mov	r3, r0
 800493c:	431c      	orrs	r4, r3
 800493e:	483c      	ldr	r0, [pc, #240]	; (8004a30 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8004940:	f7ff ff4a 	bl	80047d8 <LL_ADC_IsEnabled>
 8004944:	4603      	mov	r3, r0
 8004946:	4323      	orrs	r3, r4
 8004948:	2b00      	cmp	r3, #0
 800494a:	bf0c      	ite	eq
 800494c:	2301      	moveq	r3, #1
 800494e:	2300      	movne	r3, #0
 8004950:	b2db      	uxtb	r3, r3
 8004952:	2b00      	cmp	r3, #0
 8004954:	d056      	beq.n	8004a04 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004956:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004958:	689b      	ldr	r3, [r3, #8]
 800495a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800495e:	f023 030f 	bic.w	r3, r3, #15
 8004962:	683a      	ldr	r2, [r7, #0]
 8004964:	6811      	ldr	r1, [r2, #0]
 8004966:	683a      	ldr	r2, [r7, #0]
 8004968:	6892      	ldr	r2, [r2, #8]
 800496a:	430a      	orrs	r2, r1
 800496c:	431a      	orrs	r2, r3
 800496e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004970:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004972:	e047      	b.n	8004a04 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8004974:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004976:	689b      	ldr	r3, [r3, #8]
 8004978:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800497c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800497e:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004988:	d004      	beq.n	8004994 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	4a23      	ldr	r2, [pc, #140]	; (8004a1c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004990:	4293      	cmp	r3, r2
 8004992:	d10f      	bne.n	80049b4 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8004994:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8004998:	f7ff ff1e 	bl	80047d8 <LL_ADC_IsEnabled>
 800499c:	4604      	mov	r4, r0
 800499e:	481f      	ldr	r0, [pc, #124]	; (8004a1c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80049a0:	f7ff ff1a 	bl	80047d8 <LL_ADC_IsEnabled>
 80049a4:	4603      	mov	r3, r0
 80049a6:	4323      	orrs	r3, r4
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	bf0c      	ite	eq
 80049ac:	2301      	moveq	r3, #1
 80049ae:	2300      	movne	r3, #0
 80049b0:	b2db      	uxtb	r3, r3
 80049b2:	e012      	b.n	80049da <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 80049b4:	481a      	ldr	r0, [pc, #104]	; (8004a20 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80049b6:	f7ff ff0f 	bl	80047d8 <LL_ADC_IsEnabled>
 80049ba:	4604      	mov	r4, r0
 80049bc:	4819      	ldr	r0, [pc, #100]	; (8004a24 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80049be:	f7ff ff0b 	bl	80047d8 <LL_ADC_IsEnabled>
 80049c2:	4603      	mov	r3, r0
 80049c4:	431c      	orrs	r4, r3
 80049c6:	481a      	ldr	r0, [pc, #104]	; (8004a30 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80049c8:	f7ff ff06 	bl	80047d8 <LL_ADC_IsEnabled>
 80049cc:	4603      	mov	r3, r0
 80049ce:	4323      	orrs	r3, r4
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	bf0c      	ite	eq
 80049d4:	2301      	moveq	r3, #1
 80049d6:	2300      	movne	r3, #0
 80049d8:	b2db      	uxtb	r3, r3
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d012      	beq.n	8004a04 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80049de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80049e0:	689b      	ldr	r3, [r3, #8]
 80049e2:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80049e6:	f023 030f 	bic.w	r3, r3, #15
 80049ea:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80049ec:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80049ee:	e009      	b.n	8004a04 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049f4:	f043 0220 	orr.w	r2, r3, #32
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80049fc:	2301      	movs	r3, #1
 80049fe:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8004a02:	e000      	b.n	8004a06 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004a04:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	2200      	movs	r2, #0
 8004a0a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8004a0e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8004a12:	4618      	mov	r0, r3
 8004a14:	3784      	adds	r7, #132	; 0x84
 8004a16:	46bd      	mov	sp, r7
 8004a18:	bd90      	pop	{r4, r7, pc}
 8004a1a:	bf00      	nop
 8004a1c:	50000100 	.word	0x50000100
 8004a20:	50000400 	.word	0x50000400
 8004a24:	50000500 	.word	0x50000500
 8004a28:	50000300 	.word	0x50000300
 8004a2c:	50000700 	.word	0x50000700
 8004a30:	50000600 	.word	0x50000600

08004a34 <HAL_CORDIC_Init>:
  * @brief  Initialize the CORDIC peripheral and the associated handle.
  * @param  hcordic pointer to a CORDIC_HandleTypeDef structure.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CORDIC_Init(CORDIC_HandleTypeDef *hcordic)
{
 8004a34:	b580      	push	{r7, lr}
 8004a36:	b082      	sub	sp, #8
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
  /* Check the CORDIC handle allocation */
  if (hcordic == NULL)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d101      	bne.n	8004a46 <HAL_CORDIC_Init+0x12>
  {
    /* Return error status */
    return HAL_ERROR;
 8004a42:	2301      	movs	r3, #1
 8004a44:	e023      	b.n	8004a8e <HAL_CORDIC_Init+0x5a>

    /* Initialize the low level hardware */
    hcordic->MspInitCallback(hcordic);
  }
#else
  if (hcordic->State == HAL_CORDIC_STATE_RESET)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004a4c:	b2db      	uxtb	r3, r3
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d106      	bne.n	8004a60 <HAL_CORDIC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hcordic->Lock = HAL_UNLOCKED;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	2200      	movs	r2, #0
 8004a56:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize the low level hardware */
    HAL_CORDIC_MspInit(hcordic);
 8004a5a:	6878      	ldr	r0, [r7, #4]
 8004a5c:	f7fc fde8 	bl	8001630 <HAL_CORDIC_MspInit>
  }
#endif /* (USE_HAL_CORDIC_REGISTER_CALLBACKS) */

  /* Set CORDIC error code to none */
  hcordic->ErrorCode = HAL_CORDIC_ERROR_NONE;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2200      	movs	r2, #0
 8004a64:	625a      	str	r2, [r3, #36]	; 0x24

  /* Reset pInBuff and pOutBuff */
  hcordic->pInBuff = NULL;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	2200      	movs	r2, #0
 8004a6a:	605a      	str	r2, [r3, #4]
  hcordic->pOutBuff = NULL;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2200      	movs	r2, #0
 8004a70:	609a      	str	r2, [r3, #8]

  /* Reset NbCalcToOrder and NbCalcToGet */
  hcordic->NbCalcToOrder = 0U;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	2200      	movs	r2, #0
 8004a76:	60da      	str	r2, [r3, #12]
  hcordic->NbCalcToGet = 0U;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	611a      	str	r2, [r3, #16]

  /* Reset DMADirection */
  hcordic->DMADirection = CORDIC_DMA_DIR_NONE;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	2200      	movs	r2, #0
 8004a82:	615a      	str	r2, [r3, #20]

  /* Change CORDIC peripheral state */
  hcordic->State = HAL_CORDIC_STATE_READY;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2201      	movs	r2, #1
 8004a88:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Return function status */
  return HAL_OK;
 8004a8c:	2300      	movs	r3, #0
}
 8004a8e:	4618      	mov	r0, r3
 8004a90:	3708      	adds	r7, #8
 8004a92:	46bd      	mov	sp, r7
 8004a94:	bd80      	pop	{r7, pc}
	...

08004a98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004a98:	b480      	push	{r7}
 8004a9a:	b085      	sub	sp, #20
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	f003 0307 	and.w	r3, r3, #7
 8004aa6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004aa8:	4b0c      	ldr	r3, [pc, #48]	; (8004adc <__NVIC_SetPriorityGrouping+0x44>)
 8004aaa:	68db      	ldr	r3, [r3, #12]
 8004aac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004aae:	68ba      	ldr	r2, [r7, #8]
 8004ab0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004ab4:	4013      	ands	r3, r2
 8004ab6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004abc:	68bb      	ldr	r3, [r7, #8]
 8004abe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004ac0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004ac4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004ac8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004aca:	4a04      	ldr	r2, [pc, #16]	; (8004adc <__NVIC_SetPriorityGrouping+0x44>)
 8004acc:	68bb      	ldr	r3, [r7, #8]
 8004ace:	60d3      	str	r3, [r2, #12]
}
 8004ad0:	bf00      	nop
 8004ad2:	3714      	adds	r7, #20
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ada:	4770      	bx	lr
 8004adc:	e000ed00 	.word	0xe000ed00

08004ae0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004ae0:	b480      	push	{r7}
 8004ae2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004ae4:	4b04      	ldr	r3, [pc, #16]	; (8004af8 <__NVIC_GetPriorityGrouping+0x18>)
 8004ae6:	68db      	ldr	r3, [r3, #12]
 8004ae8:	0a1b      	lsrs	r3, r3, #8
 8004aea:	f003 0307 	and.w	r3, r3, #7
}
 8004aee:	4618      	mov	r0, r3
 8004af0:	46bd      	mov	sp, r7
 8004af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af6:	4770      	bx	lr
 8004af8:	e000ed00 	.word	0xe000ed00

08004afc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004afc:	b480      	push	{r7}
 8004afe:	b083      	sub	sp, #12
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	4603      	mov	r3, r0
 8004b04:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004b06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	db0b      	blt.n	8004b26 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004b0e:	79fb      	ldrb	r3, [r7, #7]
 8004b10:	f003 021f 	and.w	r2, r3, #31
 8004b14:	4907      	ldr	r1, [pc, #28]	; (8004b34 <__NVIC_EnableIRQ+0x38>)
 8004b16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b1a:	095b      	lsrs	r3, r3, #5
 8004b1c:	2001      	movs	r0, #1
 8004b1e:	fa00 f202 	lsl.w	r2, r0, r2
 8004b22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004b26:	bf00      	nop
 8004b28:	370c      	adds	r7, #12
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b30:	4770      	bx	lr
 8004b32:	bf00      	nop
 8004b34:	e000e100 	.word	0xe000e100

08004b38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004b38:	b480      	push	{r7}
 8004b3a:	b083      	sub	sp, #12
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	4603      	mov	r3, r0
 8004b40:	6039      	str	r1, [r7, #0]
 8004b42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004b44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	db0a      	blt.n	8004b62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	b2da      	uxtb	r2, r3
 8004b50:	490c      	ldr	r1, [pc, #48]	; (8004b84 <__NVIC_SetPriority+0x4c>)
 8004b52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b56:	0112      	lsls	r2, r2, #4
 8004b58:	b2d2      	uxtb	r2, r2
 8004b5a:	440b      	add	r3, r1
 8004b5c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004b60:	e00a      	b.n	8004b78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	b2da      	uxtb	r2, r3
 8004b66:	4908      	ldr	r1, [pc, #32]	; (8004b88 <__NVIC_SetPriority+0x50>)
 8004b68:	79fb      	ldrb	r3, [r7, #7]
 8004b6a:	f003 030f 	and.w	r3, r3, #15
 8004b6e:	3b04      	subs	r3, #4
 8004b70:	0112      	lsls	r2, r2, #4
 8004b72:	b2d2      	uxtb	r2, r2
 8004b74:	440b      	add	r3, r1
 8004b76:	761a      	strb	r2, [r3, #24]
}
 8004b78:	bf00      	nop
 8004b7a:	370c      	adds	r7, #12
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b82:	4770      	bx	lr
 8004b84:	e000e100 	.word	0xe000e100
 8004b88:	e000ed00 	.word	0xe000ed00

08004b8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004b8c:	b480      	push	{r7}
 8004b8e:	b089      	sub	sp, #36	; 0x24
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	60f8      	str	r0, [r7, #12]
 8004b94:	60b9      	str	r1, [r7, #8]
 8004b96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	f003 0307 	and.w	r3, r3, #7
 8004b9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004ba0:	69fb      	ldr	r3, [r7, #28]
 8004ba2:	f1c3 0307 	rsb	r3, r3, #7
 8004ba6:	2b04      	cmp	r3, #4
 8004ba8:	bf28      	it	cs
 8004baa:	2304      	movcs	r3, #4
 8004bac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004bae:	69fb      	ldr	r3, [r7, #28]
 8004bb0:	3304      	adds	r3, #4
 8004bb2:	2b06      	cmp	r3, #6
 8004bb4:	d902      	bls.n	8004bbc <NVIC_EncodePriority+0x30>
 8004bb6:	69fb      	ldr	r3, [r7, #28]
 8004bb8:	3b03      	subs	r3, #3
 8004bba:	e000      	b.n	8004bbe <NVIC_EncodePriority+0x32>
 8004bbc:	2300      	movs	r3, #0
 8004bbe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004bc0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004bc4:	69bb      	ldr	r3, [r7, #24]
 8004bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8004bca:	43da      	mvns	r2, r3
 8004bcc:	68bb      	ldr	r3, [r7, #8]
 8004bce:	401a      	ands	r2, r3
 8004bd0:	697b      	ldr	r3, [r7, #20]
 8004bd2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004bd4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004bd8:	697b      	ldr	r3, [r7, #20]
 8004bda:	fa01 f303 	lsl.w	r3, r1, r3
 8004bde:	43d9      	mvns	r1, r3
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004be4:	4313      	orrs	r3, r2
         );
}
 8004be6:	4618      	mov	r0, r3
 8004be8:	3724      	adds	r7, #36	; 0x24
 8004bea:	46bd      	mov	sp, r7
 8004bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf0:	4770      	bx	lr

08004bf2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004bf2:	b580      	push	{r7, lr}
 8004bf4:	b082      	sub	sp, #8
 8004bf6:	af00      	add	r7, sp, #0
 8004bf8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004bfa:	6878      	ldr	r0, [r7, #4]
 8004bfc:	f7ff ff4c 	bl	8004a98 <__NVIC_SetPriorityGrouping>
}
 8004c00:	bf00      	nop
 8004c02:	3708      	adds	r7, #8
 8004c04:	46bd      	mov	sp, r7
 8004c06:	bd80      	pop	{r7, pc}

08004c08 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b086      	sub	sp, #24
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	4603      	mov	r3, r0
 8004c10:	60b9      	str	r1, [r7, #8]
 8004c12:	607a      	str	r2, [r7, #4]
 8004c14:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004c16:	f7ff ff63 	bl	8004ae0 <__NVIC_GetPriorityGrouping>
 8004c1a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004c1c:	687a      	ldr	r2, [r7, #4]
 8004c1e:	68b9      	ldr	r1, [r7, #8]
 8004c20:	6978      	ldr	r0, [r7, #20]
 8004c22:	f7ff ffb3 	bl	8004b8c <NVIC_EncodePriority>
 8004c26:	4602      	mov	r2, r0
 8004c28:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004c2c:	4611      	mov	r1, r2
 8004c2e:	4618      	mov	r0, r3
 8004c30:	f7ff ff82 	bl	8004b38 <__NVIC_SetPriority>
}
 8004c34:	bf00      	nop
 8004c36:	3718      	adds	r7, #24
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	bd80      	pop	{r7, pc}

08004c3c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	b082      	sub	sp, #8
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	4603      	mov	r3, r0
 8004c44:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004c46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	f7ff ff56 	bl	8004afc <__NVIC_EnableIRQ>
}
 8004c50:	bf00      	nop
 8004c52:	3708      	adds	r7, #8
 8004c54:	46bd      	mov	sp, r7
 8004c56:	bd80      	pop	{r7, pc}

08004c58 <HAL_FMAC_Init>:
  * @brief  Initialize the FMAC peripheral and the associated handle.
  * @param  hfmac pointer to a FMAC_HandleTypeDef structure.
  * @retval HAL_StatusTypeDef HAL status
  */
HAL_StatusTypeDef HAL_FMAC_Init(FMAC_HandleTypeDef *hfmac)
{
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	b084      	sub	sp, #16
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the FMAC handle allocation */
  if (hfmac == NULL)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d101      	bne.n	8004c6a <HAL_FMAC_Init+0x12>
  {
    return HAL_ERROR;
 8004c66:	2301      	movs	r3, #1
 8004c68:	e033      	b.n	8004cd2 <HAL_FMAC_Init+0x7a>
  }

  /* Check the instance */
  assert_param(IS_FMAC_ALL_INSTANCE(hfmac->Instance));

  if (hfmac->State == HAL_FMAC_STATE_RESET)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004c70:	b2db      	uxtb	r3, r3
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d106      	bne.n	8004c84 <HAL_FMAC_Init+0x2c>
  {
    /* Initialize lock resource */
    hfmac->Lock = HAL_UNLOCKED;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	2200      	movs	r2, #0
 8004c7a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Init the low level hardware */
    hfmac->MspInitCallback(hfmac);
#else
    /* Init the low level hardware */
    HAL_FMAC_MspInit(hfmac);
 8004c7e:	6878      	ldr	r0, [r7, #4]
 8004c80:	f7fc fd0a 	bl	8001698 <HAL_FMAC_MspInit>
#endif /* USE_HAL_FMAC_REGISTER_CALLBACKS */
  }

  /* Reset pInput and pOutput */
  hfmac->FilterParam = 0U;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2200      	movs	r2, #0
 8004c88:	605a      	str	r2, [r3, #4]
  FMAC_ResetDataPointers(hfmac);
 8004c8a:	6878      	ldr	r0, [r7, #4]
 8004c8c:	f000 f854 	bl	8004d38 <FMAC_ResetDataPointers>

  /* Reset FMAC unit (internal pointers) */
  if (FMAC_Reset(hfmac) == HAL_ERROR)
 8004c90:	6878      	ldr	r0, [r7, #4]
 8004c92:	f000 f822 	bl	8004cda <FMAC_Reset>
 8004c96:	4603      	mov	r3, r0
 8004c98:	2b01      	cmp	r3, #1
 8004c9a:	d10c      	bne.n	8004cb6 <HAL_FMAC_Init+0x5e>
  {
    /* Update FMAC error code and FMAC peripheral state */
    hfmac->ErrorCode |= HAL_FMAC_ERROR_RESET;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ca0:	f043 0210 	orr.w	r2, r3, #16
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	635a      	str	r2, [r3, #52]	; 0x34
    hfmac->State = HAL_FMAC_STATE_TIMEOUT;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	22a0      	movs	r2, #160	; 0xa0
 8004cac:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

    status = HAL_ERROR;
 8004cb0:	2301      	movs	r3, #1
 8004cb2:	73fb      	strb	r3, [r7, #15]
 8004cb4:	e008      	b.n	8004cc8 <HAL_FMAC_Init+0x70>
  }
  else
  {
    /* Update FMAC error code and FMAC peripheral state */
    hfmac->ErrorCode = HAL_FMAC_ERROR_NONE;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	2200      	movs	r2, #0
 8004cba:	635a      	str	r2, [r3, #52]	; 0x34
    hfmac->State = HAL_FMAC_STATE_READY;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2220      	movs	r2, #32
 8004cc0:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

    status = HAL_OK;
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	73fb      	strb	r3, [r7, #15]
  }

  __HAL_UNLOCK(hfmac);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2200      	movs	r2, #0
 8004ccc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 8004cd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	3710      	adds	r7, #16
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	bd80      	pop	{r7, pc}

08004cda <FMAC_Reset>:
  * @brief  Perform a reset of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval HAL_StatusTypeDef HAL status
  */
static HAL_StatusTypeDef FMAC_Reset(FMAC_HandleTypeDef *hfmac)
{
 8004cda:	b580      	push	{r7, lr}
 8004cdc:	b084      	sub	sp, #16
 8004cde:	af00      	add	r7, sp, #0
 8004ce0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004ce2:	f7fe fabf 	bl	8003264 <HAL_GetTick>
 8004ce6:	60f8      	str	r0, [r7, #12]

  /* Perform the reset */
  SET_BIT(hfmac->Instance->CR, FMAC_CR_RESET);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	691a      	ldr	r2, [r3, #16]
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004cf6:	611a      	str	r2, [r3, #16]

  /* Wait until flag is reset */
  while (READ_BIT(hfmac->Instance->CR, FMAC_CR_RESET) != 0U)
 8004cf8:	e00f      	b.n	8004d1a <FMAC_Reset+0x40>
  {
    if ((HAL_GetTick() - tickstart) > HAL_FMAC_RESET_TIMEOUT_VALUE)
 8004cfa:	f7fe fab3 	bl	8003264 <HAL_GetTick>
 8004cfe:	4602      	mov	r2, r0
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	1ad3      	subs	r3, r2, r3
 8004d04:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004d08:	d907      	bls.n	8004d1a <FMAC_Reset+0x40>
    {
      hfmac->ErrorCode |= HAL_FMAC_ERROR_TIMEOUT;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d0e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8004d16:	2301      	movs	r3, #1
 8004d18:	e00a      	b.n	8004d30 <FMAC_Reset+0x56>
  while (READ_BIT(hfmac->Instance->CR, FMAC_CR_RESET) != 0U)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	691b      	ldr	r3, [r3, #16]
 8004d20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d1e8      	bne.n	8004cfa <FMAC_Reset+0x20>
    }
  }

  hfmac->ErrorCode = HAL_FMAC_ERROR_NONE;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	635a      	str	r2, [r3, #52]	; 0x34
  return HAL_OK;
 8004d2e:	2300      	movs	r3, #0
}
 8004d30:	4618      	mov	r0, r3
 8004d32:	3710      	adds	r7, #16
 8004d34:	46bd      	mov	sp, r7
 8004d36:	bd80      	pop	{r7, pc}

08004d38 <FMAC_ResetDataPointers>:
  * @brief  Reset the data pointers of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval None
  */
static void FMAC_ResetDataPointers(FMAC_HandleTypeDef *hfmac)
{
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	b082      	sub	sp, #8
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
  FMAC_ResetInputStateAndDataPointers(hfmac);
 8004d40:	6878      	ldr	r0, [r7, #4]
 8004d42:	f000 f807 	bl	8004d54 <FMAC_ResetInputStateAndDataPointers>
  FMAC_ResetOutputStateAndDataPointers(hfmac);
 8004d46:	6878      	ldr	r0, [r7, #4]
 8004d48:	f000 f81b 	bl	8004d82 <FMAC_ResetOutputStateAndDataPointers>
}
 8004d4c:	bf00      	nop
 8004d4e:	3708      	adds	r7, #8
 8004d50:	46bd      	mov	sp, r7
 8004d52:	bd80      	pop	{r7, pc}

08004d54 <FMAC_ResetInputStateAndDataPointers>:
  * @brief  Reset the input data pointers of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval None
  */
static void FMAC_ResetInputStateAndDataPointers(FMAC_HandleTypeDef *hfmac)
{
 8004d54:	b480      	push	{r7}
 8004d56:	b083      	sub	sp, #12
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
  hfmac->pInput = NULL;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2200      	movs	r2, #0
 8004d60:	60da      	str	r2, [r3, #12]
  hfmac->pInputSize = NULL;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	2200      	movs	r2, #0
 8004d66:	615a      	str	r2, [r3, #20]
  hfmac->InputCurrentSize = 0U;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	821a      	strh	r2, [r3, #16]
  hfmac->WrState = HAL_FMAC_STATE_READY;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2220      	movs	r2, #32
 8004d72:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
}
 8004d76:	bf00      	nop
 8004d78:	370c      	adds	r7, #12
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d80:	4770      	bx	lr

08004d82 <FMAC_ResetOutputStateAndDataPointers>:
  * @brief  Reset the output data pointers of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval None
  */
static void FMAC_ResetOutputStateAndDataPointers(FMAC_HandleTypeDef *hfmac)
{
 8004d82:	b480      	push	{r7}
 8004d84:	b083      	sub	sp, #12
 8004d86:	af00      	add	r7, sp, #0
 8004d88:	6078      	str	r0, [r7, #4]
  hfmac->pOutput = NULL;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	619a      	str	r2, [r3, #24]
  hfmac->pOutputSize = NULL;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2200      	movs	r2, #0
 8004d94:	621a      	str	r2, [r3, #32]
  hfmac->OutputCurrentSize = 0U;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	2200      	movs	r2, #0
 8004d9a:	839a      	strh	r2, [r3, #28]
  hfmac->RdState = HAL_FMAC_STATE_READY;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2220      	movs	r2, #32
 8004da0:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
}
 8004da4:	bf00      	nop
 8004da6:	370c      	adds	r7, #12
 8004da8:	46bd      	mov	sp, r7
 8004daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dae:	4770      	bx	lr

08004db0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004db0:	b480      	push	{r7}
 8004db2:	b087      	sub	sp, #28
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]
 8004db8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004dba:	2300      	movs	r3, #0
 8004dbc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004dbe:	e15a      	b.n	8005076 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	681a      	ldr	r2, [r3, #0]
 8004dc4:	2101      	movs	r1, #1
 8004dc6:	697b      	ldr	r3, [r7, #20]
 8004dc8:	fa01 f303 	lsl.w	r3, r1, r3
 8004dcc:	4013      	ands	r3, r2
 8004dce:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	f000 814c 	beq.w	8005070 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	685b      	ldr	r3, [r3, #4]
 8004ddc:	f003 0303 	and.w	r3, r3, #3
 8004de0:	2b01      	cmp	r3, #1
 8004de2:	d005      	beq.n	8004df0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	685b      	ldr	r3, [r3, #4]
 8004de8:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004dec:	2b02      	cmp	r3, #2
 8004dee:	d130      	bne.n	8004e52 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	689b      	ldr	r3, [r3, #8]
 8004df4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004df6:	697b      	ldr	r3, [r7, #20]
 8004df8:	005b      	lsls	r3, r3, #1
 8004dfa:	2203      	movs	r2, #3
 8004dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8004e00:	43db      	mvns	r3, r3
 8004e02:	693a      	ldr	r2, [r7, #16]
 8004e04:	4013      	ands	r3, r2
 8004e06:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	68da      	ldr	r2, [r3, #12]
 8004e0c:	697b      	ldr	r3, [r7, #20]
 8004e0e:	005b      	lsls	r3, r3, #1
 8004e10:	fa02 f303 	lsl.w	r3, r2, r3
 8004e14:	693a      	ldr	r2, [r7, #16]
 8004e16:	4313      	orrs	r3, r2
 8004e18:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	693a      	ldr	r2, [r7, #16]
 8004e1e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	685b      	ldr	r3, [r3, #4]
 8004e24:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004e26:	2201      	movs	r2, #1
 8004e28:	697b      	ldr	r3, [r7, #20]
 8004e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8004e2e:	43db      	mvns	r3, r3
 8004e30:	693a      	ldr	r2, [r7, #16]
 8004e32:	4013      	ands	r3, r2
 8004e34:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	685b      	ldr	r3, [r3, #4]
 8004e3a:	091b      	lsrs	r3, r3, #4
 8004e3c:	f003 0201 	and.w	r2, r3, #1
 8004e40:	697b      	ldr	r3, [r7, #20]
 8004e42:	fa02 f303 	lsl.w	r3, r2, r3
 8004e46:	693a      	ldr	r2, [r7, #16]
 8004e48:	4313      	orrs	r3, r2
 8004e4a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	693a      	ldr	r2, [r7, #16]
 8004e50:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004e52:	683b      	ldr	r3, [r7, #0]
 8004e54:	685b      	ldr	r3, [r3, #4]
 8004e56:	f003 0303 	and.w	r3, r3, #3
 8004e5a:	2b03      	cmp	r3, #3
 8004e5c:	d017      	beq.n	8004e8e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	68db      	ldr	r3, [r3, #12]
 8004e62:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004e64:	697b      	ldr	r3, [r7, #20]
 8004e66:	005b      	lsls	r3, r3, #1
 8004e68:	2203      	movs	r2, #3
 8004e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8004e6e:	43db      	mvns	r3, r3
 8004e70:	693a      	ldr	r2, [r7, #16]
 8004e72:	4013      	ands	r3, r2
 8004e74:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004e76:	683b      	ldr	r3, [r7, #0]
 8004e78:	689a      	ldr	r2, [r3, #8]
 8004e7a:	697b      	ldr	r3, [r7, #20]
 8004e7c:	005b      	lsls	r3, r3, #1
 8004e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8004e82:	693a      	ldr	r2, [r7, #16]
 8004e84:	4313      	orrs	r3, r2
 8004e86:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	693a      	ldr	r2, [r7, #16]
 8004e8c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004e8e:	683b      	ldr	r3, [r7, #0]
 8004e90:	685b      	ldr	r3, [r3, #4]
 8004e92:	f003 0303 	and.w	r3, r3, #3
 8004e96:	2b02      	cmp	r3, #2
 8004e98:	d123      	bne.n	8004ee2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004e9a:	697b      	ldr	r3, [r7, #20]
 8004e9c:	08da      	lsrs	r2, r3, #3
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	3208      	adds	r2, #8
 8004ea2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ea6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004ea8:	697b      	ldr	r3, [r7, #20]
 8004eaa:	f003 0307 	and.w	r3, r3, #7
 8004eae:	009b      	lsls	r3, r3, #2
 8004eb0:	220f      	movs	r2, #15
 8004eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8004eb6:	43db      	mvns	r3, r3
 8004eb8:	693a      	ldr	r2, [r7, #16]
 8004eba:	4013      	ands	r3, r2
 8004ebc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	691a      	ldr	r2, [r3, #16]
 8004ec2:	697b      	ldr	r3, [r7, #20]
 8004ec4:	f003 0307 	and.w	r3, r3, #7
 8004ec8:	009b      	lsls	r3, r3, #2
 8004eca:	fa02 f303 	lsl.w	r3, r2, r3
 8004ece:	693a      	ldr	r2, [r7, #16]
 8004ed0:	4313      	orrs	r3, r2
 8004ed2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004ed4:	697b      	ldr	r3, [r7, #20]
 8004ed6:	08da      	lsrs	r2, r3, #3
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	3208      	adds	r2, #8
 8004edc:	6939      	ldr	r1, [r7, #16]
 8004ede:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004ee8:	697b      	ldr	r3, [r7, #20]
 8004eea:	005b      	lsls	r3, r3, #1
 8004eec:	2203      	movs	r2, #3
 8004eee:	fa02 f303 	lsl.w	r3, r2, r3
 8004ef2:	43db      	mvns	r3, r3
 8004ef4:	693a      	ldr	r2, [r7, #16]
 8004ef6:	4013      	ands	r3, r2
 8004ef8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004efa:	683b      	ldr	r3, [r7, #0]
 8004efc:	685b      	ldr	r3, [r3, #4]
 8004efe:	f003 0203 	and.w	r2, r3, #3
 8004f02:	697b      	ldr	r3, [r7, #20]
 8004f04:	005b      	lsls	r3, r3, #1
 8004f06:	fa02 f303 	lsl.w	r3, r2, r3
 8004f0a:	693a      	ldr	r2, [r7, #16]
 8004f0c:	4313      	orrs	r3, r2
 8004f0e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	693a      	ldr	r2, [r7, #16]
 8004f14:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004f16:	683b      	ldr	r3, [r7, #0]
 8004f18:	685b      	ldr	r3, [r3, #4]
 8004f1a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	f000 80a6 	beq.w	8005070 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004f24:	4b5b      	ldr	r3, [pc, #364]	; (8005094 <HAL_GPIO_Init+0x2e4>)
 8004f26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f28:	4a5a      	ldr	r2, [pc, #360]	; (8005094 <HAL_GPIO_Init+0x2e4>)
 8004f2a:	f043 0301 	orr.w	r3, r3, #1
 8004f2e:	6613      	str	r3, [r2, #96]	; 0x60
 8004f30:	4b58      	ldr	r3, [pc, #352]	; (8005094 <HAL_GPIO_Init+0x2e4>)
 8004f32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f34:	f003 0301 	and.w	r3, r3, #1
 8004f38:	60bb      	str	r3, [r7, #8]
 8004f3a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004f3c:	4a56      	ldr	r2, [pc, #344]	; (8005098 <HAL_GPIO_Init+0x2e8>)
 8004f3e:	697b      	ldr	r3, [r7, #20]
 8004f40:	089b      	lsrs	r3, r3, #2
 8004f42:	3302      	adds	r3, #2
 8004f44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f48:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004f4a:	697b      	ldr	r3, [r7, #20]
 8004f4c:	f003 0303 	and.w	r3, r3, #3
 8004f50:	009b      	lsls	r3, r3, #2
 8004f52:	220f      	movs	r2, #15
 8004f54:	fa02 f303 	lsl.w	r3, r2, r3
 8004f58:	43db      	mvns	r3, r3
 8004f5a:	693a      	ldr	r2, [r7, #16]
 8004f5c:	4013      	ands	r3, r2
 8004f5e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004f66:	d01f      	beq.n	8004fa8 <HAL_GPIO_Init+0x1f8>
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	4a4c      	ldr	r2, [pc, #304]	; (800509c <HAL_GPIO_Init+0x2ec>)
 8004f6c:	4293      	cmp	r3, r2
 8004f6e:	d019      	beq.n	8004fa4 <HAL_GPIO_Init+0x1f4>
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	4a4b      	ldr	r2, [pc, #300]	; (80050a0 <HAL_GPIO_Init+0x2f0>)
 8004f74:	4293      	cmp	r3, r2
 8004f76:	d013      	beq.n	8004fa0 <HAL_GPIO_Init+0x1f0>
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	4a4a      	ldr	r2, [pc, #296]	; (80050a4 <HAL_GPIO_Init+0x2f4>)
 8004f7c:	4293      	cmp	r3, r2
 8004f7e:	d00d      	beq.n	8004f9c <HAL_GPIO_Init+0x1ec>
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	4a49      	ldr	r2, [pc, #292]	; (80050a8 <HAL_GPIO_Init+0x2f8>)
 8004f84:	4293      	cmp	r3, r2
 8004f86:	d007      	beq.n	8004f98 <HAL_GPIO_Init+0x1e8>
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	4a48      	ldr	r2, [pc, #288]	; (80050ac <HAL_GPIO_Init+0x2fc>)
 8004f8c:	4293      	cmp	r3, r2
 8004f8e:	d101      	bne.n	8004f94 <HAL_GPIO_Init+0x1e4>
 8004f90:	2305      	movs	r3, #5
 8004f92:	e00a      	b.n	8004faa <HAL_GPIO_Init+0x1fa>
 8004f94:	2306      	movs	r3, #6
 8004f96:	e008      	b.n	8004faa <HAL_GPIO_Init+0x1fa>
 8004f98:	2304      	movs	r3, #4
 8004f9a:	e006      	b.n	8004faa <HAL_GPIO_Init+0x1fa>
 8004f9c:	2303      	movs	r3, #3
 8004f9e:	e004      	b.n	8004faa <HAL_GPIO_Init+0x1fa>
 8004fa0:	2302      	movs	r3, #2
 8004fa2:	e002      	b.n	8004faa <HAL_GPIO_Init+0x1fa>
 8004fa4:	2301      	movs	r3, #1
 8004fa6:	e000      	b.n	8004faa <HAL_GPIO_Init+0x1fa>
 8004fa8:	2300      	movs	r3, #0
 8004faa:	697a      	ldr	r2, [r7, #20]
 8004fac:	f002 0203 	and.w	r2, r2, #3
 8004fb0:	0092      	lsls	r2, r2, #2
 8004fb2:	4093      	lsls	r3, r2
 8004fb4:	693a      	ldr	r2, [r7, #16]
 8004fb6:	4313      	orrs	r3, r2
 8004fb8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004fba:	4937      	ldr	r1, [pc, #220]	; (8005098 <HAL_GPIO_Init+0x2e8>)
 8004fbc:	697b      	ldr	r3, [r7, #20]
 8004fbe:	089b      	lsrs	r3, r3, #2
 8004fc0:	3302      	adds	r3, #2
 8004fc2:	693a      	ldr	r2, [r7, #16]
 8004fc4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004fc8:	4b39      	ldr	r3, [pc, #228]	; (80050b0 <HAL_GPIO_Init+0x300>)
 8004fca:	689b      	ldr	r3, [r3, #8]
 8004fcc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	43db      	mvns	r3, r3
 8004fd2:	693a      	ldr	r2, [r7, #16]
 8004fd4:	4013      	ands	r3, r2
 8004fd6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	685b      	ldr	r3, [r3, #4]
 8004fdc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d003      	beq.n	8004fec <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8004fe4:	693a      	ldr	r2, [r7, #16]
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	4313      	orrs	r3, r2
 8004fea:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004fec:	4a30      	ldr	r2, [pc, #192]	; (80050b0 <HAL_GPIO_Init+0x300>)
 8004fee:	693b      	ldr	r3, [r7, #16]
 8004ff0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004ff2:	4b2f      	ldr	r3, [pc, #188]	; (80050b0 <HAL_GPIO_Init+0x300>)
 8004ff4:	68db      	ldr	r3, [r3, #12]
 8004ff6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	43db      	mvns	r3, r3
 8004ffc:	693a      	ldr	r2, [r7, #16]
 8004ffe:	4013      	ands	r3, r2
 8005000:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005002:	683b      	ldr	r3, [r7, #0]
 8005004:	685b      	ldr	r3, [r3, #4]
 8005006:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800500a:	2b00      	cmp	r3, #0
 800500c:	d003      	beq.n	8005016 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800500e:	693a      	ldr	r2, [r7, #16]
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	4313      	orrs	r3, r2
 8005014:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005016:	4a26      	ldr	r2, [pc, #152]	; (80050b0 <HAL_GPIO_Init+0x300>)
 8005018:	693b      	ldr	r3, [r7, #16]
 800501a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 800501c:	4b24      	ldr	r3, [pc, #144]	; (80050b0 <HAL_GPIO_Init+0x300>)
 800501e:	685b      	ldr	r3, [r3, #4]
 8005020:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	43db      	mvns	r3, r3
 8005026:	693a      	ldr	r2, [r7, #16]
 8005028:	4013      	ands	r3, r2
 800502a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	685b      	ldr	r3, [r3, #4]
 8005030:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005034:	2b00      	cmp	r3, #0
 8005036:	d003      	beq.n	8005040 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8005038:	693a      	ldr	r2, [r7, #16]
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	4313      	orrs	r3, r2
 800503e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005040:	4a1b      	ldr	r2, [pc, #108]	; (80050b0 <HAL_GPIO_Init+0x300>)
 8005042:	693b      	ldr	r3, [r7, #16]
 8005044:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8005046:	4b1a      	ldr	r3, [pc, #104]	; (80050b0 <HAL_GPIO_Init+0x300>)
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	43db      	mvns	r3, r3
 8005050:	693a      	ldr	r2, [r7, #16]
 8005052:	4013      	ands	r3, r2
 8005054:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	685b      	ldr	r3, [r3, #4]
 800505a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800505e:	2b00      	cmp	r3, #0
 8005060:	d003      	beq.n	800506a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8005062:	693a      	ldr	r2, [r7, #16]
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	4313      	orrs	r3, r2
 8005068:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800506a:	4a11      	ldr	r2, [pc, #68]	; (80050b0 <HAL_GPIO_Init+0x300>)
 800506c:	693b      	ldr	r3, [r7, #16]
 800506e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8005070:	697b      	ldr	r3, [r7, #20]
 8005072:	3301      	adds	r3, #1
 8005074:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005076:	683b      	ldr	r3, [r7, #0]
 8005078:	681a      	ldr	r2, [r3, #0]
 800507a:	697b      	ldr	r3, [r7, #20]
 800507c:	fa22 f303 	lsr.w	r3, r2, r3
 8005080:	2b00      	cmp	r3, #0
 8005082:	f47f ae9d 	bne.w	8004dc0 <HAL_GPIO_Init+0x10>
  }
}
 8005086:	bf00      	nop
 8005088:	bf00      	nop
 800508a:	371c      	adds	r7, #28
 800508c:	46bd      	mov	sp, r7
 800508e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005092:	4770      	bx	lr
 8005094:	40021000 	.word	0x40021000
 8005098:	40010000 	.word	0x40010000
 800509c:	48000400 	.word	0x48000400
 80050a0:	48000800 	.word	0x48000800
 80050a4:	48000c00 	.word	0x48000c00
 80050a8:	48001000 	.word	0x48001000
 80050ac:	48001400 	.word	0x48001400
 80050b0:	40010400 	.word	0x40010400

080050b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80050b4:	b480      	push	{r7}
 80050b6:	b083      	sub	sp, #12
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	6078      	str	r0, [r7, #4]
 80050bc:	460b      	mov	r3, r1
 80050be:	807b      	strh	r3, [r7, #2]
 80050c0:	4613      	mov	r3, r2
 80050c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80050c4:	787b      	ldrb	r3, [r7, #1]
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d003      	beq.n	80050d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80050ca:	887a      	ldrh	r2, [r7, #2]
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80050d0:	e002      	b.n	80050d8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80050d2:	887a      	ldrh	r2, [r7, #2]
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80050d8:	bf00      	nop
 80050da:	370c      	adds	r7, #12
 80050dc:	46bd      	mov	sp, r7
 80050de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e2:	4770      	bx	lr

080050e4 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80050e4:	b480      	push	{r7}
 80050e6:	b085      	sub	sp, #20
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]
 80050ec:	460b      	mov	r3, r1
 80050ee:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	695b      	ldr	r3, [r3, #20]
 80050f4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80050f6:	887a      	ldrh	r2, [r7, #2]
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	4013      	ands	r3, r2
 80050fc:	041a      	lsls	r2, r3, #16
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	43d9      	mvns	r1, r3
 8005102:	887b      	ldrh	r3, [r7, #2]
 8005104:	400b      	ands	r3, r1
 8005106:	431a      	orrs	r2, r3
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	619a      	str	r2, [r3, #24]
}
 800510c:	bf00      	nop
 800510e:	3714      	adds	r7, #20
 8005110:	46bd      	mov	sp, r7
 8005112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005116:	4770      	bx	lr

08005118 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005118:	b580      	push	{r7, lr}
 800511a:	b082      	sub	sp, #8
 800511c:	af00      	add	r7, sp, #0
 800511e:	4603      	mov	r3, r0
 8005120:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8005122:	4b08      	ldr	r3, [pc, #32]	; (8005144 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005124:	695a      	ldr	r2, [r3, #20]
 8005126:	88fb      	ldrh	r3, [r7, #6]
 8005128:	4013      	ands	r3, r2
 800512a:	2b00      	cmp	r3, #0
 800512c:	d006      	beq.n	800513c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800512e:	4a05      	ldr	r2, [pc, #20]	; (8005144 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005130:	88fb      	ldrh	r3, [r7, #6]
 8005132:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005134:	88fb      	ldrh	r3, [r7, #6]
 8005136:	4618      	mov	r0, r3
 8005138:	f7fc face 	bl	80016d8 <HAL_GPIO_EXTI_Callback>
  }
}
 800513c:	bf00      	nop
 800513e:	3708      	adds	r7, #8
 8005140:	46bd      	mov	sp, r7
 8005142:	bd80      	pop	{r7, pc}
 8005144:	40010400 	.word	0x40010400

08005148 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8005148:	b580      	push	{r7, lr}
 800514a:	b08a      	sub	sp, #40	; 0x28
 800514c:	af02      	add	r7, sp, #8
 800514e:	60f8      	str	r0, [r7, #12]
 8005150:	607a      	str	r2, [r7, #4]
 8005152:	603b      	str	r3, [r7, #0]
 8005154:	460b      	mov	r3, r1
 8005156:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8005158:	2300      	movs	r3, #0
 800515a:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005162:	b2db      	uxtb	r3, r3
 8005164:	2b20      	cmp	r3, #32
 8005166:	f040 80f1 	bne.w	800534c <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	699b      	ldr	r3, [r3, #24]
 8005170:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005174:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005178:	d101      	bne.n	800517e <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 800517a:	2302      	movs	r3, #2
 800517c:	e0e7      	b.n	800534e <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005184:	2b01      	cmp	r3, #1
 8005186:	d101      	bne.n	800518c <HAL_I2C_IsDeviceReady+0x44>
 8005188:	2302      	movs	r3, #2
 800518a:	e0e0      	b.n	800534e <HAL_I2C_IsDeviceReady+0x206>
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	2201      	movs	r2, #1
 8005190:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	2224      	movs	r2, #36	; 0x24
 8005198:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	2200      	movs	r2, #0
 80051a0:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	68db      	ldr	r3, [r3, #12]
 80051a6:	2b01      	cmp	r3, #1
 80051a8:	d107      	bne.n	80051ba <HAL_I2C_IsDeviceReady+0x72>
 80051aa:	897b      	ldrh	r3, [r7, #10]
 80051ac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80051b0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80051b4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80051b8:	e004      	b.n	80051c4 <HAL_I2C_IsDeviceReady+0x7c>
 80051ba:	897b      	ldrh	r3, [r7, #10]
 80051bc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80051c0:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 80051c4:	68fa      	ldr	r2, [r7, #12]
 80051c6:	6812      	ldr	r2, [r2, #0]
 80051c8:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 80051ca:	f7fe f84b 	bl	8003264 <HAL_GetTick>
 80051ce:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	699b      	ldr	r3, [r3, #24]
 80051d6:	f003 0320 	and.w	r3, r3, #32
 80051da:	2b20      	cmp	r3, #32
 80051dc:	bf0c      	ite	eq
 80051de:	2301      	moveq	r3, #1
 80051e0:	2300      	movne	r3, #0
 80051e2:	b2db      	uxtb	r3, r3
 80051e4:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	699b      	ldr	r3, [r3, #24]
 80051ec:	f003 0310 	and.w	r3, r3, #16
 80051f0:	2b10      	cmp	r3, #16
 80051f2:	bf0c      	ite	eq
 80051f4:	2301      	moveq	r3, #1
 80051f6:	2300      	movne	r3, #0
 80051f8:	b2db      	uxtb	r3, r3
 80051fa:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 80051fc:	e034      	b.n	8005268 <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 80051fe:	683b      	ldr	r3, [r7, #0]
 8005200:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005204:	d01a      	beq.n	800523c <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005206:	f7fe f82d 	bl	8003264 <HAL_GetTick>
 800520a:	4602      	mov	r2, r0
 800520c:	69bb      	ldr	r3, [r7, #24]
 800520e:	1ad3      	subs	r3, r2, r3
 8005210:	683a      	ldr	r2, [r7, #0]
 8005212:	429a      	cmp	r2, r3
 8005214:	d302      	bcc.n	800521c <HAL_I2C_IsDeviceReady+0xd4>
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	2b00      	cmp	r3, #0
 800521a:	d10f      	bne.n	800523c <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	2220      	movs	r2, #32
 8005220:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005228:	f043 0220 	orr.w	r2, r3, #32
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	2200      	movs	r2, #0
 8005234:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8005238:	2301      	movs	r3, #1
 800523a:	e088      	b.n	800534e <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	699b      	ldr	r3, [r3, #24]
 8005242:	f003 0320 	and.w	r3, r3, #32
 8005246:	2b20      	cmp	r3, #32
 8005248:	bf0c      	ite	eq
 800524a:	2301      	moveq	r3, #1
 800524c:	2300      	movne	r3, #0
 800524e:	b2db      	uxtb	r3, r3
 8005250:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	699b      	ldr	r3, [r3, #24]
 8005258:	f003 0310 	and.w	r3, r3, #16
 800525c:	2b10      	cmp	r3, #16
 800525e:	bf0c      	ite	eq
 8005260:	2301      	moveq	r3, #1
 8005262:	2300      	movne	r3, #0
 8005264:	b2db      	uxtb	r3, r3
 8005266:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8005268:	7ffb      	ldrb	r3, [r7, #31]
 800526a:	2b00      	cmp	r3, #0
 800526c:	d102      	bne.n	8005274 <HAL_I2C_IsDeviceReady+0x12c>
 800526e:	7fbb      	ldrb	r3, [r7, #30]
 8005270:	2b00      	cmp	r3, #0
 8005272:	d0c4      	beq.n	80051fe <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	699b      	ldr	r3, [r3, #24]
 800527a:	f003 0310 	and.w	r3, r3, #16
 800527e:	2b10      	cmp	r3, #16
 8005280:	d01a      	beq.n	80052b8 <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8005282:	69bb      	ldr	r3, [r7, #24]
 8005284:	9300      	str	r3, [sp, #0]
 8005286:	683b      	ldr	r3, [r7, #0]
 8005288:	2200      	movs	r2, #0
 800528a:	2120      	movs	r1, #32
 800528c:	68f8      	ldr	r0, [r7, #12]
 800528e:	f000 f862 	bl	8005356 <I2C_WaitOnFlagUntilTimeout>
 8005292:	4603      	mov	r3, r0
 8005294:	2b00      	cmp	r3, #0
 8005296:	d001      	beq.n	800529c <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 8005298:	2301      	movs	r3, #1
 800529a:	e058      	b.n	800534e <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	2220      	movs	r2, #32
 80052a2:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	2220      	movs	r2, #32
 80052a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	2200      	movs	r2, #0
 80052b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 80052b4:	2300      	movs	r3, #0
 80052b6:	e04a      	b.n	800534e <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80052b8:	69bb      	ldr	r3, [r7, #24]
 80052ba:	9300      	str	r3, [sp, #0]
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	2200      	movs	r2, #0
 80052c0:	2120      	movs	r1, #32
 80052c2:	68f8      	ldr	r0, [r7, #12]
 80052c4:	f000 f847 	bl	8005356 <I2C_WaitOnFlagUntilTimeout>
 80052c8:	4603      	mov	r3, r0
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d001      	beq.n	80052d2 <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 80052ce:	2301      	movs	r3, #1
 80052d0:	e03d      	b.n	800534e <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	2210      	movs	r2, #16
 80052d8:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	2220      	movs	r2, #32
 80052e0:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 80052e2:	697b      	ldr	r3, [r7, #20]
 80052e4:	687a      	ldr	r2, [r7, #4]
 80052e6:	429a      	cmp	r2, r3
 80052e8:	d118      	bne.n	800531c <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	685a      	ldr	r2, [r3, #4]
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80052f8:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80052fa:	69bb      	ldr	r3, [r7, #24]
 80052fc:	9300      	str	r3, [sp, #0]
 80052fe:	683b      	ldr	r3, [r7, #0]
 8005300:	2200      	movs	r2, #0
 8005302:	2120      	movs	r1, #32
 8005304:	68f8      	ldr	r0, [r7, #12]
 8005306:	f000 f826 	bl	8005356 <I2C_WaitOnFlagUntilTimeout>
 800530a:	4603      	mov	r3, r0
 800530c:	2b00      	cmp	r3, #0
 800530e:	d001      	beq.n	8005314 <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 8005310:	2301      	movs	r3, #1
 8005312:	e01c      	b.n	800534e <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	2220      	movs	r2, #32
 800531a:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 800531c:	697b      	ldr	r3, [r7, #20]
 800531e:	3301      	adds	r3, #1
 8005320:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8005322:	697b      	ldr	r3, [r7, #20]
 8005324:	687a      	ldr	r2, [r7, #4]
 8005326:	429a      	cmp	r2, r3
 8005328:	f63f af3b 	bhi.w	80051a2 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	2220      	movs	r2, #32
 8005330:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005338:	f043 0220 	orr.w	r2, r3, #32
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	2200      	movs	r2, #0
 8005344:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8005348:	2301      	movs	r3, #1
 800534a:	e000      	b.n	800534e <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 800534c:	2302      	movs	r3, #2
  }
}
 800534e:	4618      	mov	r0, r3
 8005350:	3720      	adds	r7, #32
 8005352:	46bd      	mov	sp, r7
 8005354:	bd80      	pop	{r7, pc}

08005356 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005356:	b580      	push	{r7, lr}
 8005358:	b084      	sub	sp, #16
 800535a:	af00      	add	r7, sp, #0
 800535c:	60f8      	str	r0, [r7, #12]
 800535e:	60b9      	str	r1, [r7, #8]
 8005360:	603b      	str	r3, [r7, #0]
 8005362:	4613      	mov	r3, r2
 8005364:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005366:	e022      	b.n	80053ae <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005368:	683b      	ldr	r3, [r7, #0]
 800536a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800536e:	d01e      	beq.n	80053ae <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005370:	f7fd ff78 	bl	8003264 <HAL_GetTick>
 8005374:	4602      	mov	r2, r0
 8005376:	69bb      	ldr	r3, [r7, #24]
 8005378:	1ad3      	subs	r3, r2, r3
 800537a:	683a      	ldr	r2, [r7, #0]
 800537c:	429a      	cmp	r2, r3
 800537e:	d302      	bcc.n	8005386 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	2b00      	cmp	r3, #0
 8005384:	d113      	bne.n	80053ae <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800538a:	f043 0220 	orr.w	r2, r3, #32
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	2220      	movs	r2, #32
 8005396:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	2200      	movs	r2, #0
 800539e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	2200      	movs	r2, #0
 80053a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80053aa:	2301      	movs	r3, #1
 80053ac:	e00f      	b.n	80053ce <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	699a      	ldr	r2, [r3, #24]
 80053b4:	68bb      	ldr	r3, [r7, #8]
 80053b6:	4013      	ands	r3, r2
 80053b8:	68ba      	ldr	r2, [r7, #8]
 80053ba:	429a      	cmp	r2, r3
 80053bc:	bf0c      	ite	eq
 80053be:	2301      	moveq	r3, #1
 80053c0:	2300      	movne	r3, #0
 80053c2:	b2db      	uxtb	r3, r3
 80053c4:	461a      	mov	r2, r3
 80053c6:	79fb      	ldrb	r3, [r7, #7]
 80053c8:	429a      	cmp	r2, r3
 80053ca:	d0cd      	beq.n	8005368 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80053cc:	2300      	movs	r3, #0
}
 80053ce:	4618      	mov	r0, r3
 80053d0:	3710      	adds	r7, #16
 80053d2:	46bd      	mov	sp, r7
 80053d4:	bd80      	pop	{r7, pc}

080053d6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80053d6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80053d8:	b08b      	sub	sp, #44	; 0x2c
 80053da:	af06      	add	r7, sp, #24
 80053dc:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d101      	bne.n	80053e8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80053e4:	2301      	movs	r3, #1
 80053e6:	e0d7      	b.n	8005598 <HAL_PCD_Init+0x1c2>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80053ee:	b2db      	uxtb	r3, r3
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d106      	bne.n	8005402 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2200      	movs	r2, #0
 80053f8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80053fc:	6878      	ldr	r0, [r7, #4]
 80053fe:	f00b ff7d 	bl	80112fc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	2203      	movs	r2, #3
 8005406:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	4618      	mov	r0, r3
 8005410:	f005 fc63 	bl	800acda <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005414:	2300      	movs	r3, #0
 8005416:	73fb      	strb	r3, [r7, #15]
 8005418:	e04c      	b.n	80054b4 <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800541a:	7bfb      	ldrb	r3, [r7, #15]
 800541c:	6879      	ldr	r1, [r7, #4]
 800541e:	1c5a      	adds	r2, r3, #1
 8005420:	4613      	mov	r3, r2
 8005422:	009b      	lsls	r3, r3, #2
 8005424:	4413      	add	r3, r2
 8005426:	00db      	lsls	r3, r3, #3
 8005428:	440b      	add	r3, r1
 800542a:	3301      	adds	r3, #1
 800542c:	2201      	movs	r2, #1
 800542e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005430:	7bfb      	ldrb	r3, [r7, #15]
 8005432:	6879      	ldr	r1, [r7, #4]
 8005434:	1c5a      	adds	r2, r3, #1
 8005436:	4613      	mov	r3, r2
 8005438:	009b      	lsls	r3, r3, #2
 800543a:	4413      	add	r3, r2
 800543c:	00db      	lsls	r3, r3, #3
 800543e:	440b      	add	r3, r1
 8005440:	7bfa      	ldrb	r2, [r7, #15]
 8005442:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005444:	7bfa      	ldrb	r2, [r7, #15]
 8005446:	7bfb      	ldrb	r3, [r7, #15]
 8005448:	b298      	uxth	r0, r3
 800544a:	6879      	ldr	r1, [r7, #4]
 800544c:	4613      	mov	r3, r2
 800544e:	009b      	lsls	r3, r3, #2
 8005450:	4413      	add	r3, r2
 8005452:	00db      	lsls	r3, r3, #3
 8005454:	440b      	add	r3, r1
 8005456:	3336      	adds	r3, #54	; 0x36
 8005458:	4602      	mov	r2, r0
 800545a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800545c:	7bfb      	ldrb	r3, [r7, #15]
 800545e:	6879      	ldr	r1, [r7, #4]
 8005460:	1c5a      	adds	r2, r3, #1
 8005462:	4613      	mov	r3, r2
 8005464:	009b      	lsls	r3, r3, #2
 8005466:	4413      	add	r3, r2
 8005468:	00db      	lsls	r3, r3, #3
 800546a:	440b      	add	r3, r1
 800546c:	3303      	adds	r3, #3
 800546e:	2200      	movs	r2, #0
 8005470:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005472:	7bfa      	ldrb	r2, [r7, #15]
 8005474:	6879      	ldr	r1, [r7, #4]
 8005476:	4613      	mov	r3, r2
 8005478:	009b      	lsls	r3, r3, #2
 800547a:	4413      	add	r3, r2
 800547c:	00db      	lsls	r3, r3, #3
 800547e:	440b      	add	r3, r1
 8005480:	3338      	adds	r3, #56	; 0x38
 8005482:	2200      	movs	r2, #0
 8005484:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005486:	7bfa      	ldrb	r2, [r7, #15]
 8005488:	6879      	ldr	r1, [r7, #4]
 800548a:	4613      	mov	r3, r2
 800548c:	009b      	lsls	r3, r3, #2
 800548e:	4413      	add	r3, r2
 8005490:	00db      	lsls	r3, r3, #3
 8005492:	440b      	add	r3, r1
 8005494:	333c      	adds	r3, #60	; 0x3c
 8005496:	2200      	movs	r2, #0
 8005498:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800549a:	7bfa      	ldrb	r2, [r7, #15]
 800549c:	6879      	ldr	r1, [r7, #4]
 800549e:	4613      	mov	r3, r2
 80054a0:	009b      	lsls	r3, r3, #2
 80054a2:	4413      	add	r3, r2
 80054a4:	00db      	lsls	r3, r3, #3
 80054a6:	440b      	add	r3, r1
 80054a8:	3340      	adds	r3, #64	; 0x40
 80054aa:	2200      	movs	r2, #0
 80054ac:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80054ae:	7bfb      	ldrb	r3, [r7, #15]
 80054b0:	3301      	adds	r3, #1
 80054b2:	73fb      	strb	r3, [r7, #15]
 80054b4:	7bfa      	ldrb	r2, [r7, #15]
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	685b      	ldr	r3, [r3, #4]
 80054ba:	429a      	cmp	r2, r3
 80054bc:	d3ad      	bcc.n	800541a <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80054be:	2300      	movs	r3, #0
 80054c0:	73fb      	strb	r3, [r7, #15]
 80054c2:	e044      	b.n	800554e <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80054c4:	7bfa      	ldrb	r2, [r7, #15]
 80054c6:	6879      	ldr	r1, [r7, #4]
 80054c8:	4613      	mov	r3, r2
 80054ca:	009b      	lsls	r3, r3, #2
 80054cc:	4413      	add	r3, r2
 80054ce:	00db      	lsls	r3, r3, #3
 80054d0:	440b      	add	r3, r1
 80054d2:	f203 1369 	addw	r3, r3, #361	; 0x169
 80054d6:	2200      	movs	r2, #0
 80054d8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80054da:	7bfa      	ldrb	r2, [r7, #15]
 80054dc:	6879      	ldr	r1, [r7, #4]
 80054de:	4613      	mov	r3, r2
 80054e0:	009b      	lsls	r3, r3, #2
 80054e2:	4413      	add	r3, r2
 80054e4:	00db      	lsls	r3, r3, #3
 80054e6:	440b      	add	r3, r1
 80054e8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80054ec:	7bfa      	ldrb	r2, [r7, #15]
 80054ee:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80054f0:	7bfa      	ldrb	r2, [r7, #15]
 80054f2:	6879      	ldr	r1, [r7, #4]
 80054f4:	4613      	mov	r3, r2
 80054f6:	009b      	lsls	r3, r3, #2
 80054f8:	4413      	add	r3, r2
 80054fa:	00db      	lsls	r3, r3, #3
 80054fc:	440b      	add	r3, r1
 80054fe:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8005502:	2200      	movs	r2, #0
 8005504:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005506:	7bfa      	ldrb	r2, [r7, #15]
 8005508:	6879      	ldr	r1, [r7, #4]
 800550a:	4613      	mov	r3, r2
 800550c:	009b      	lsls	r3, r3, #2
 800550e:	4413      	add	r3, r2
 8005510:	00db      	lsls	r3, r3, #3
 8005512:	440b      	add	r3, r1
 8005514:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8005518:	2200      	movs	r2, #0
 800551a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800551c:	7bfa      	ldrb	r2, [r7, #15]
 800551e:	6879      	ldr	r1, [r7, #4]
 8005520:	4613      	mov	r3, r2
 8005522:	009b      	lsls	r3, r3, #2
 8005524:	4413      	add	r3, r2
 8005526:	00db      	lsls	r3, r3, #3
 8005528:	440b      	add	r3, r1
 800552a:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800552e:	2200      	movs	r2, #0
 8005530:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005532:	7bfa      	ldrb	r2, [r7, #15]
 8005534:	6879      	ldr	r1, [r7, #4]
 8005536:	4613      	mov	r3, r2
 8005538:	009b      	lsls	r3, r3, #2
 800553a:	4413      	add	r3, r2
 800553c:	00db      	lsls	r3, r3, #3
 800553e:	440b      	add	r3, r1
 8005540:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8005544:	2200      	movs	r2, #0
 8005546:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005548:	7bfb      	ldrb	r3, [r7, #15]
 800554a:	3301      	adds	r3, #1
 800554c:	73fb      	strb	r3, [r7, #15]
 800554e:	7bfa      	ldrb	r2, [r7, #15]
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	685b      	ldr	r3, [r3, #4]
 8005554:	429a      	cmp	r2, r3
 8005556:	d3b5      	bcc.n	80054c4 <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	603b      	str	r3, [r7, #0]
 800555e:	687e      	ldr	r6, [r7, #4]
 8005560:	466d      	mov	r5, sp
 8005562:	f106 0410 	add.w	r4, r6, #16
 8005566:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005568:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800556a:	6823      	ldr	r3, [r4, #0]
 800556c:	602b      	str	r3, [r5, #0]
 800556e:	1d33      	adds	r3, r6, #4
 8005570:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005572:	6838      	ldr	r0, [r7, #0]
 8005574:	f005 fbcc 	bl	800ad10 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	2200      	movs	r2, #0
 800557c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2201      	movs	r2, #1
 8005584:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	69db      	ldr	r3, [r3, #28]
 800558c:	2b01      	cmp	r3, #1
 800558e:	d102      	bne.n	8005596 <HAL_PCD_Init+0x1c0>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8005590:	6878      	ldr	r0, [r7, #4]
 8005592:	f001 fc29 	bl	8006de8 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8005596:	2300      	movs	r3, #0
}
 8005598:	4618      	mov	r0, r3
 800559a:	3714      	adds	r7, #20
 800559c:	46bd      	mov	sp, r7
 800559e:	bdf0      	pop	{r4, r5, r6, r7, pc}

080055a0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80055a0:	b580      	push	{r7, lr}
 80055a2:	b082      	sub	sp, #8
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80055ae:	2b01      	cmp	r3, #1
 80055b0:	d101      	bne.n	80055b6 <HAL_PCD_Start+0x16>
 80055b2:	2302      	movs	r3, #2
 80055b4:	e012      	b.n	80055dc <HAL_PCD_Start+0x3c>
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	2201      	movs	r2, #1
 80055ba:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	4618      	mov	r0, r3
 80055c4:	f005 fb72 	bl	800acac <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	4618      	mov	r0, r3
 80055ce:	f007 fd8b 	bl	800d0e8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	2200      	movs	r2, #0
 80055d6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80055da:	2300      	movs	r3, #0
}
 80055dc:	4618      	mov	r0, r3
 80055de:	3708      	adds	r7, #8
 80055e0:	46bd      	mov	sp, r7
 80055e2:	bd80      	pop	{r7, pc}

080055e4 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80055e4:	b580      	push	{r7, lr}
 80055e6:	b084      	sub	sp, #16
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	4618      	mov	r0, r3
 80055f2:	f007 fd90 	bl	800d116 <USB_ReadInterrupts>
 80055f6:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d003      	beq.n	800560a <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8005602:	6878      	ldr	r0, [r7, #4]
 8005604:	f000 fb26 	bl	8005c54 <PCD_EP_ISR_Handler>

    return;
 8005608:	e110      	b.n	800582c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005610:	2b00      	cmp	r3, #0
 8005612:	d013      	beq.n	800563c <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800561c:	b29a      	uxth	r2, r3
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005626:	b292      	uxth	r2, r2
 8005628:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800562c:	6878      	ldr	r0, [r7, #4]
 800562e:	f00b fef6 	bl	801141e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8005632:	2100      	movs	r1, #0
 8005634:	6878      	ldr	r0, [r7, #4]
 8005636:	f000 f8fc 	bl	8005832 <HAL_PCD_SetAddress>

    return;
 800563a:	e0f7      	b.n	800582c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005642:	2b00      	cmp	r3, #0
 8005644:	d00c      	beq.n	8005660 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800564e:	b29a      	uxth	r2, r3
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005658:	b292      	uxth	r2, r2
 800565a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800565e:	e0e5      	b.n	800582c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005666:	2b00      	cmp	r3, #0
 8005668:	d00c      	beq.n	8005684 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005672:	b29a      	uxth	r2, r3
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800567c:	b292      	uxth	r2, r2
 800567e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8005682:	e0d3      	b.n	800582c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800568a:	2b00      	cmp	r3, #0
 800568c:	d034      	beq.n	80056f8 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005696:	b29a      	uxth	r2, r3
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f022 0204 	bic.w	r2, r2, #4
 80056a0:	b292      	uxth	r2, r2
 80056a2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80056ae:	b29a      	uxth	r2, r3
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f022 0208 	bic.w	r2, r2, #8
 80056b8:	b292      	uxth	r2, r2
 80056ba:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 80056c4:	2b01      	cmp	r3, #1
 80056c6:	d107      	bne.n	80056d8 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2200      	movs	r2, #0
 80056cc:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80056d0:	2100      	movs	r1, #0
 80056d2:	6878      	ldr	r0, [r7, #4]
 80056d4:	f00c f898 	bl	8011808 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80056d8:	6878      	ldr	r0, [r7, #4]
 80056da:	f00b fed9 	bl	8011490 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80056e6:	b29a      	uxth	r2, r3
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80056f0:	b292      	uxth	r2, r2
 80056f2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80056f6:	e099      	b.n	800582c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d027      	beq.n	8005752 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800570a:	b29a      	uxth	r2, r3
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f042 0208 	orr.w	r2, r2, #8
 8005714:	b292      	uxth	r2, r2
 8005716:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005722:	b29a      	uxth	r2, r3
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800572c:	b292      	uxth	r2, r2
 800572e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800573a:	b29a      	uxth	r2, r3
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f042 0204 	orr.w	r2, r2, #4
 8005744:	b292      	uxth	r2, r2
 8005746:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800574a:	6878      	ldr	r0, [r7, #4]
 800574c:	f00b fe86 	bl	801145c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8005750:	e06c      	b.n	800582c <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005758:	2b00      	cmp	r3, #0
 800575a:	d040      	beq.n	80057de <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005764:	b29a      	uxth	r2, r3
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800576e:	b292      	uxth	r2, r2
 8005770:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 800577a:	2b00      	cmp	r3, #0
 800577c:	d12b      	bne.n	80057d6 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005786:	b29a      	uxth	r2, r3
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	f042 0204 	orr.w	r2, r2, #4
 8005790:	b292      	uxth	r2, r2
 8005792:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800579e:	b29a      	uxth	r2, r3
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f042 0208 	orr.w	r2, r2, #8
 80057a8:	b292      	uxth	r2, r2
 80057aa:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	2201      	movs	r2, #1
 80057b2:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80057be:	b29b      	uxth	r3, r3
 80057c0:	089b      	lsrs	r3, r3, #2
 80057c2:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80057cc:	2101      	movs	r1, #1
 80057ce:	6878      	ldr	r0, [r7, #4]
 80057d0:	f00c f81a 	bl	8011808 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 80057d4:	e02a      	b.n	800582c <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 80057d6:	6878      	ldr	r0, [r7, #4]
 80057d8:	f00b fe40 	bl	801145c <HAL_PCD_SuspendCallback>
    return;
 80057dc:	e026      	b.n	800582c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d00f      	beq.n	8005808 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80057f0:	b29a      	uxth	r2, r3
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80057fa:	b292      	uxth	r2, r2
 80057fc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8005800:	6878      	ldr	r0, [r7, #4]
 8005802:	f00b fdfe 	bl	8011402 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8005806:	e011      	b.n	800582c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800580e:	2b00      	cmp	r3, #0
 8005810:	d00c      	beq.n	800582c <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800581a:	b29a      	uxth	r2, r3
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005824:	b292      	uxth	r2, r2
 8005826:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800582a:	bf00      	nop
  }
}
 800582c:	3710      	adds	r7, #16
 800582e:	46bd      	mov	sp, r7
 8005830:	bd80      	pop	{r7, pc}

08005832 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8005832:	b580      	push	{r7, lr}
 8005834:	b082      	sub	sp, #8
 8005836:	af00      	add	r7, sp, #0
 8005838:	6078      	str	r0, [r7, #4]
 800583a:	460b      	mov	r3, r1
 800583c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005844:	2b01      	cmp	r3, #1
 8005846:	d101      	bne.n	800584c <HAL_PCD_SetAddress+0x1a>
 8005848:	2302      	movs	r3, #2
 800584a:	e013      	b.n	8005874 <HAL_PCD_SetAddress+0x42>
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2201      	movs	r2, #1
 8005850:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	78fa      	ldrb	r2, [r7, #3]
 8005858:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	78fa      	ldrb	r2, [r7, #3]
 8005862:	4611      	mov	r1, r2
 8005864:	4618      	mov	r0, r3
 8005866:	f007 fc2b 	bl	800d0c0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	2200      	movs	r2, #0
 800586e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8005872:	2300      	movs	r3, #0
}
 8005874:	4618      	mov	r0, r3
 8005876:	3708      	adds	r7, #8
 8005878:	46bd      	mov	sp, r7
 800587a:	bd80      	pop	{r7, pc}

0800587c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800587c:	b580      	push	{r7, lr}
 800587e:	b084      	sub	sp, #16
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]
 8005884:	4608      	mov	r0, r1
 8005886:	4611      	mov	r1, r2
 8005888:	461a      	mov	r2, r3
 800588a:	4603      	mov	r3, r0
 800588c:	70fb      	strb	r3, [r7, #3]
 800588e:	460b      	mov	r3, r1
 8005890:	803b      	strh	r3, [r7, #0]
 8005892:	4613      	mov	r3, r2
 8005894:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8005896:	2300      	movs	r3, #0
 8005898:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800589a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	da0e      	bge.n	80058c0 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80058a2:	78fb      	ldrb	r3, [r7, #3]
 80058a4:	f003 0307 	and.w	r3, r3, #7
 80058a8:	1c5a      	adds	r2, r3, #1
 80058aa:	4613      	mov	r3, r2
 80058ac:	009b      	lsls	r3, r3, #2
 80058ae:	4413      	add	r3, r2
 80058b0:	00db      	lsls	r3, r3, #3
 80058b2:	687a      	ldr	r2, [r7, #4]
 80058b4:	4413      	add	r3, r2
 80058b6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	2201      	movs	r2, #1
 80058bc:	705a      	strb	r2, [r3, #1]
 80058be:	e00e      	b.n	80058de <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80058c0:	78fb      	ldrb	r3, [r7, #3]
 80058c2:	f003 0207 	and.w	r2, r3, #7
 80058c6:	4613      	mov	r3, r2
 80058c8:	009b      	lsls	r3, r3, #2
 80058ca:	4413      	add	r3, r2
 80058cc:	00db      	lsls	r3, r3, #3
 80058ce:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80058d2:	687a      	ldr	r2, [r7, #4]
 80058d4:	4413      	add	r3, r2
 80058d6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	2200      	movs	r2, #0
 80058dc:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80058de:	78fb      	ldrb	r3, [r7, #3]
 80058e0:	f003 0307 	and.w	r3, r3, #7
 80058e4:	b2da      	uxtb	r2, r3
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80058ea:	883a      	ldrh	r2, [r7, #0]
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	78ba      	ldrb	r2, [r7, #2]
 80058f4:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	785b      	ldrb	r3, [r3, #1]
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d004      	beq.n	8005908 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	781b      	ldrb	r3, [r3, #0]
 8005902:	b29a      	uxth	r2, r3
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8005908:	78bb      	ldrb	r3, [r7, #2]
 800590a:	2b02      	cmp	r3, #2
 800590c:	d102      	bne.n	8005914 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	2200      	movs	r2, #0
 8005912:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800591a:	2b01      	cmp	r3, #1
 800591c:	d101      	bne.n	8005922 <HAL_PCD_EP_Open+0xa6>
 800591e:	2302      	movs	r3, #2
 8005920:	e00e      	b.n	8005940 <HAL_PCD_EP_Open+0xc4>
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	2201      	movs	r2, #1
 8005926:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	68f9      	ldr	r1, [r7, #12]
 8005930:	4618      	mov	r0, r3
 8005932:	f005 fa0f 	bl	800ad54 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	2200      	movs	r2, #0
 800593a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 800593e:	7afb      	ldrb	r3, [r7, #11]
}
 8005940:	4618      	mov	r0, r3
 8005942:	3710      	adds	r7, #16
 8005944:	46bd      	mov	sp, r7
 8005946:	bd80      	pop	{r7, pc}

08005948 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005948:	b580      	push	{r7, lr}
 800594a:	b084      	sub	sp, #16
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]
 8005950:	460b      	mov	r3, r1
 8005952:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005954:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005958:	2b00      	cmp	r3, #0
 800595a:	da0e      	bge.n	800597a <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800595c:	78fb      	ldrb	r3, [r7, #3]
 800595e:	f003 0307 	and.w	r3, r3, #7
 8005962:	1c5a      	adds	r2, r3, #1
 8005964:	4613      	mov	r3, r2
 8005966:	009b      	lsls	r3, r3, #2
 8005968:	4413      	add	r3, r2
 800596a:	00db      	lsls	r3, r3, #3
 800596c:	687a      	ldr	r2, [r7, #4]
 800596e:	4413      	add	r3, r2
 8005970:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	2201      	movs	r2, #1
 8005976:	705a      	strb	r2, [r3, #1]
 8005978:	e00e      	b.n	8005998 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800597a:	78fb      	ldrb	r3, [r7, #3]
 800597c:	f003 0207 	and.w	r2, r3, #7
 8005980:	4613      	mov	r3, r2
 8005982:	009b      	lsls	r3, r3, #2
 8005984:	4413      	add	r3, r2
 8005986:	00db      	lsls	r3, r3, #3
 8005988:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800598c:	687a      	ldr	r2, [r7, #4]
 800598e:	4413      	add	r3, r2
 8005990:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	2200      	movs	r2, #0
 8005996:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8005998:	78fb      	ldrb	r3, [r7, #3]
 800599a:	f003 0307 	and.w	r3, r3, #7
 800599e:	b2da      	uxtb	r2, r3
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80059aa:	2b01      	cmp	r3, #1
 80059ac:	d101      	bne.n	80059b2 <HAL_PCD_EP_Close+0x6a>
 80059ae:	2302      	movs	r3, #2
 80059b0:	e00e      	b.n	80059d0 <HAL_PCD_EP_Close+0x88>
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	2201      	movs	r2, #1
 80059b6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	68f9      	ldr	r1, [r7, #12]
 80059c0:	4618      	mov	r0, r3
 80059c2:	f005 fd5b 	bl	800b47c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	2200      	movs	r2, #0
 80059ca:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 80059ce:	2300      	movs	r3, #0
}
 80059d0:	4618      	mov	r0, r3
 80059d2:	3710      	adds	r7, #16
 80059d4:	46bd      	mov	sp, r7
 80059d6:	bd80      	pop	{r7, pc}

080059d8 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80059d8:	b580      	push	{r7, lr}
 80059da:	b086      	sub	sp, #24
 80059dc:	af00      	add	r7, sp, #0
 80059de:	60f8      	str	r0, [r7, #12]
 80059e0:	607a      	str	r2, [r7, #4]
 80059e2:	603b      	str	r3, [r7, #0]
 80059e4:	460b      	mov	r3, r1
 80059e6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80059e8:	7afb      	ldrb	r3, [r7, #11]
 80059ea:	f003 0207 	and.w	r2, r3, #7
 80059ee:	4613      	mov	r3, r2
 80059f0:	009b      	lsls	r3, r3, #2
 80059f2:	4413      	add	r3, r2
 80059f4:	00db      	lsls	r3, r3, #3
 80059f6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80059fa:	68fa      	ldr	r2, [r7, #12]
 80059fc:	4413      	add	r3, r2
 80059fe:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005a00:	697b      	ldr	r3, [r7, #20]
 8005a02:	687a      	ldr	r2, [r7, #4]
 8005a04:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8005a06:	697b      	ldr	r3, [r7, #20]
 8005a08:	683a      	ldr	r2, [r7, #0]
 8005a0a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8005a0c:	697b      	ldr	r3, [r7, #20]
 8005a0e:	2200      	movs	r2, #0
 8005a10:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8005a12:	697b      	ldr	r3, [r7, #20]
 8005a14:	2200      	movs	r2, #0
 8005a16:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005a18:	7afb      	ldrb	r3, [r7, #11]
 8005a1a:	f003 0307 	and.w	r3, r3, #7
 8005a1e:	b2da      	uxtb	r2, r3
 8005a20:	697b      	ldr	r3, [r7, #20]
 8005a22:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005a24:	7afb      	ldrb	r3, [r7, #11]
 8005a26:	f003 0307 	and.w	r3, r3, #7
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d106      	bne.n	8005a3c <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	6979      	ldr	r1, [r7, #20]
 8005a34:	4618      	mov	r0, r3
 8005a36:	f005 ff0e 	bl	800b856 <USB_EPStartXfer>
 8005a3a:	e005      	b.n	8005a48 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	6979      	ldr	r1, [r7, #20]
 8005a42:	4618      	mov	r0, r3
 8005a44:	f005 ff07 	bl	800b856 <USB_EPStartXfer>
  }

  return HAL_OK;
 8005a48:	2300      	movs	r3, #0
}
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	3718      	adds	r7, #24
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	bd80      	pop	{r7, pc}

08005a52 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005a52:	b480      	push	{r7}
 8005a54:	b083      	sub	sp, #12
 8005a56:	af00      	add	r7, sp, #0
 8005a58:	6078      	str	r0, [r7, #4]
 8005a5a:	460b      	mov	r3, r1
 8005a5c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8005a5e:	78fb      	ldrb	r3, [r7, #3]
 8005a60:	f003 0207 	and.w	r2, r3, #7
 8005a64:	6879      	ldr	r1, [r7, #4]
 8005a66:	4613      	mov	r3, r2
 8005a68:	009b      	lsls	r3, r3, #2
 8005a6a:	4413      	add	r3, r2
 8005a6c:	00db      	lsls	r3, r3, #3
 8005a6e:	440b      	add	r3, r1
 8005a70:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8005a74:	681b      	ldr	r3, [r3, #0]
}
 8005a76:	4618      	mov	r0, r3
 8005a78:	370c      	adds	r7, #12
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a80:	4770      	bx	lr

08005a82 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005a82:	b580      	push	{r7, lr}
 8005a84:	b086      	sub	sp, #24
 8005a86:	af00      	add	r7, sp, #0
 8005a88:	60f8      	str	r0, [r7, #12]
 8005a8a:	607a      	str	r2, [r7, #4]
 8005a8c:	603b      	str	r3, [r7, #0]
 8005a8e:	460b      	mov	r3, r1
 8005a90:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005a92:	7afb      	ldrb	r3, [r7, #11]
 8005a94:	f003 0307 	and.w	r3, r3, #7
 8005a98:	1c5a      	adds	r2, r3, #1
 8005a9a:	4613      	mov	r3, r2
 8005a9c:	009b      	lsls	r3, r3, #2
 8005a9e:	4413      	add	r3, r2
 8005aa0:	00db      	lsls	r3, r3, #3
 8005aa2:	68fa      	ldr	r2, [r7, #12]
 8005aa4:	4413      	add	r3, r2
 8005aa6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005aa8:	697b      	ldr	r3, [r7, #20]
 8005aaa:	687a      	ldr	r2, [r7, #4]
 8005aac:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8005aae:	697b      	ldr	r3, [r7, #20]
 8005ab0:	683a      	ldr	r2, [r7, #0]
 8005ab2:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8005ab4:	697b      	ldr	r3, [r7, #20]
 8005ab6:	2201      	movs	r2, #1
 8005ab8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8005abc:	697b      	ldr	r3, [r7, #20]
 8005abe:	683a      	ldr	r2, [r7, #0]
 8005ac0:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8005ac2:	697b      	ldr	r3, [r7, #20]
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8005ac8:	697b      	ldr	r3, [r7, #20]
 8005aca:	2201      	movs	r2, #1
 8005acc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005ace:	7afb      	ldrb	r3, [r7, #11]
 8005ad0:	f003 0307 	and.w	r3, r3, #7
 8005ad4:	b2da      	uxtb	r2, r3
 8005ad6:	697b      	ldr	r3, [r7, #20]
 8005ad8:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005ada:	7afb      	ldrb	r3, [r7, #11]
 8005adc:	f003 0307 	and.w	r3, r3, #7
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d106      	bne.n	8005af2 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	6979      	ldr	r1, [r7, #20]
 8005aea:	4618      	mov	r0, r3
 8005aec:	f005 feb3 	bl	800b856 <USB_EPStartXfer>
 8005af0:	e005      	b.n	8005afe <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	6979      	ldr	r1, [r7, #20]
 8005af8:	4618      	mov	r0, r3
 8005afa:	f005 feac 	bl	800b856 <USB_EPStartXfer>
  }

  return HAL_OK;
 8005afe:	2300      	movs	r3, #0
}
 8005b00:	4618      	mov	r0, r3
 8005b02:	3718      	adds	r7, #24
 8005b04:	46bd      	mov	sp, r7
 8005b06:	bd80      	pop	{r7, pc}

08005b08 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005b08:	b580      	push	{r7, lr}
 8005b0a:	b084      	sub	sp, #16
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	6078      	str	r0, [r7, #4]
 8005b10:	460b      	mov	r3, r1
 8005b12:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005b14:	78fb      	ldrb	r3, [r7, #3]
 8005b16:	f003 0207 	and.w	r2, r3, #7
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	685b      	ldr	r3, [r3, #4]
 8005b1e:	429a      	cmp	r2, r3
 8005b20:	d901      	bls.n	8005b26 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8005b22:	2301      	movs	r3, #1
 8005b24:	e03e      	b.n	8005ba4 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005b26:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	da0e      	bge.n	8005b4c <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005b2e:	78fb      	ldrb	r3, [r7, #3]
 8005b30:	f003 0307 	and.w	r3, r3, #7
 8005b34:	1c5a      	adds	r2, r3, #1
 8005b36:	4613      	mov	r3, r2
 8005b38:	009b      	lsls	r3, r3, #2
 8005b3a:	4413      	add	r3, r2
 8005b3c:	00db      	lsls	r3, r3, #3
 8005b3e:	687a      	ldr	r2, [r7, #4]
 8005b40:	4413      	add	r3, r2
 8005b42:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	2201      	movs	r2, #1
 8005b48:	705a      	strb	r2, [r3, #1]
 8005b4a:	e00c      	b.n	8005b66 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005b4c:	78fa      	ldrb	r2, [r7, #3]
 8005b4e:	4613      	mov	r3, r2
 8005b50:	009b      	lsls	r3, r3, #2
 8005b52:	4413      	add	r3, r2
 8005b54:	00db      	lsls	r3, r3, #3
 8005b56:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005b5a:	687a      	ldr	r2, [r7, #4]
 8005b5c:	4413      	add	r3, r2
 8005b5e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	2200      	movs	r2, #0
 8005b64:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	2201      	movs	r2, #1
 8005b6a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005b6c:	78fb      	ldrb	r3, [r7, #3]
 8005b6e:	f003 0307 	and.w	r3, r3, #7
 8005b72:	b2da      	uxtb	r2, r3
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005b7e:	2b01      	cmp	r3, #1
 8005b80:	d101      	bne.n	8005b86 <HAL_PCD_EP_SetStall+0x7e>
 8005b82:	2302      	movs	r3, #2
 8005b84:	e00e      	b.n	8005ba4 <HAL_PCD_EP_SetStall+0x9c>
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	2201      	movs	r2, #1
 8005b8a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	68f9      	ldr	r1, [r7, #12]
 8005b94:	4618      	mov	r0, r3
 8005b96:	f007 f994 	bl	800cec2 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8005ba2:	2300      	movs	r3, #0
}
 8005ba4:	4618      	mov	r0, r3
 8005ba6:	3710      	adds	r7, #16
 8005ba8:	46bd      	mov	sp, r7
 8005baa:	bd80      	pop	{r7, pc}

08005bac <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005bac:	b580      	push	{r7, lr}
 8005bae:	b084      	sub	sp, #16
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	6078      	str	r0, [r7, #4]
 8005bb4:	460b      	mov	r3, r1
 8005bb6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005bb8:	78fb      	ldrb	r3, [r7, #3]
 8005bba:	f003 020f 	and.w	r2, r3, #15
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	685b      	ldr	r3, [r3, #4]
 8005bc2:	429a      	cmp	r2, r3
 8005bc4:	d901      	bls.n	8005bca <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8005bc6:	2301      	movs	r3, #1
 8005bc8:	e040      	b.n	8005c4c <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005bca:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	da0e      	bge.n	8005bf0 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005bd2:	78fb      	ldrb	r3, [r7, #3]
 8005bd4:	f003 0307 	and.w	r3, r3, #7
 8005bd8:	1c5a      	adds	r2, r3, #1
 8005bda:	4613      	mov	r3, r2
 8005bdc:	009b      	lsls	r3, r3, #2
 8005bde:	4413      	add	r3, r2
 8005be0:	00db      	lsls	r3, r3, #3
 8005be2:	687a      	ldr	r2, [r7, #4]
 8005be4:	4413      	add	r3, r2
 8005be6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	2201      	movs	r2, #1
 8005bec:	705a      	strb	r2, [r3, #1]
 8005bee:	e00e      	b.n	8005c0e <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005bf0:	78fb      	ldrb	r3, [r7, #3]
 8005bf2:	f003 0207 	and.w	r2, r3, #7
 8005bf6:	4613      	mov	r3, r2
 8005bf8:	009b      	lsls	r3, r3, #2
 8005bfa:	4413      	add	r3, r2
 8005bfc:	00db      	lsls	r3, r3, #3
 8005bfe:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005c02:	687a      	ldr	r2, [r7, #4]
 8005c04:	4413      	add	r3, r2
 8005c06:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	2200      	movs	r2, #0
 8005c0c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	2200      	movs	r2, #0
 8005c12:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005c14:	78fb      	ldrb	r3, [r7, #3]
 8005c16:	f003 0307 	and.w	r3, r3, #7
 8005c1a:	b2da      	uxtb	r2, r3
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005c26:	2b01      	cmp	r3, #1
 8005c28:	d101      	bne.n	8005c2e <HAL_PCD_EP_ClrStall+0x82>
 8005c2a:	2302      	movs	r3, #2
 8005c2c:	e00e      	b.n	8005c4c <HAL_PCD_EP_ClrStall+0xa0>
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	2201      	movs	r2, #1
 8005c32:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	68f9      	ldr	r1, [r7, #12]
 8005c3c:	4618      	mov	r0, r3
 8005c3e:	f007 f991 	bl	800cf64 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	2200      	movs	r2, #0
 8005c46:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8005c4a:	2300      	movs	r3, #0
}
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	3710      	adds	r7, #16
 8005c50:	46bd      	mov	sp, r7
 8005c52:	bd80      	pop	{r7, pc}

08005c54 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8005c54:	b580      	push	{r7, lr}
 8005c56:	b096      	sub	sp, #88	; 0x58
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	6078      	str	r0, [r7, #4]
  uint16_t wEPVal;
  uint16_t TxPctSize;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8005c5c:	e39c      	b.n	8006398 <PCD_EP_ISR_Handler+0x744>
  {
    wIstr = hpcd->Instance->ISTR;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005c66:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8005c6a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005c6e:	b2db      	uxtb	r3, r3
 8005c70:	f003 030f 	and.w	r3, r3, #15
 8005c74:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55

    if (epindex == 0U)
 8005c78:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	f040 815e 	bne.w	8005f3e <PCD_EP_ISR_Handler+0x2ea>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8005c82:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005c86:	f003 0310 	and.w	r3, r3, #16
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d150      	bne.n	8005d30 <PCD_EP_ISR_Handler+0xdc>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	881b      	ldrh	r3, [r3, #0]
 8005c94:	b29b      	uxth	r3, r3
 8005c96:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8005c9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c9e:	81fb      	strh	r3, [r7, #14]
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681a      	ldr	r2, [r3, #0]
 8005ca4:	89fb      	ldrh	r3, [r7, #14]
 8005ca6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005caa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005cae:	b29b      	uxth	r3, r3
 8005cb0:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	3328      	adds	r3, #40	; 0x28
 8005cb6:	64fb      	str	r3, [r7, #76]	; 0x4c

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005cc0:	b29b      	uxth	r3, r3
 8005cc2:	461a      	mov	r2, r3
 8005cc4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005cc6:	781b      	ldrb	r3, [r3, #0]
 8005cc8:	00db      	lsls	r3, r3, #3
 8005cca:	4413      	add	r3, r2
 8005ccc:	687a      	ldr	r2, [r7, #4]
 8005cce:	6812      	ldr	r2, [r2, #0]
 8005cd0:	4413      	add	r3, r2
 8005cd2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005cd6:	881b      	ldrh	r3, [r3, #0]
 8005cd8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005cdc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005cde:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8005ce0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ce2:	695a      	ldr	r2, [r3, #20]
 8005ce4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ce6:	69db      	ldr	r3, [r3, #28]
 8005ce8:	441a      	add	r2, r3
 8005cea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005cec:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8005cee:	2100      	movs	r1, #0
 8005cf0:	6878      	ldr	r0, [r7, #4]
 8005cf2:	f00b fb6c 	bl	80113ce <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005cfc:	b2db      	uxtb	r3, r3
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	f000 834a 	beq.w	8006398 <PCD_EP_ISR_Handler+0x744>
 8005d04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d06:	699b      	ldr	r3, [r3, #24]
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	f040 8345 	bne.w	8006398 <PCD_EP_ISR_Handler+0x744>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005d14:	b2db      	uxtb	r3, r3
 8005d16:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005d1a:	b2da      	uxtb	r2, r3
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	b292      	uxth	r2, r2
 8005d22:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	2200      	movs	r2, #0
 8005d2a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8005d2e:	e333      	b.n	8006398 <PCD_EP_ISR_Handler+0x744>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005d36:	64fb      	str	r3, [r7, #76]	; 0x4c
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	881b      	ldrh	r3, [r3, #0]
 8005d3e:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8005d42:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8005d46:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d032      	beq.n	8005db4 <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d56:	b29b      	uxth	r3, r3
 8005d58:	461a      	mov	r2, r3
 8005d5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d5c:	781b      	ldrb	r3, [r3, #0]
 8005d5e:	00db      	lsls	r3, r3, #3
 8005d60:	4413      	add	r3, r2
 8005d62:	687a      	ldr	r2, [r7, #4]
 8005d64:	6812      	ldr	r2, [r2, #0]
 8005d66:	4413      	add	r3, r2
 8005d68:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005d6c:	881b      	ldrh	r3, [r3, #0]
 8005d6e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005d72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d74:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	6818      	ldr	r0, [r3, #0]
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8005d80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d82:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8005d84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d86:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8005d88:	b29b      	uxth	r3, r3
 8005d8a:	f007 fa16 	bl	800d1ba <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	881b      	ldrh	r3, [r3, #0]
 8005d94:	b29a      	uxth	r2, r3
 8005d96:	f640 738f 	movw	r3, #3983	; 0xf8f
 8005d9a:	4013      	ands	r3, r2
 8005d9c:	823b      	strh	r3, [r7, #16]
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	8a3a      	ldrh	r2, [r7, #16]
 8005da4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005da8:	b292      	uxth	r2, r2
 8005daa:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8005dac:	6878      	ldr	r0, [r7, #4]
 8005dae:	f00b fae1 	bl	8011374 <HAL_PCD_SetupStageCallback>
 8005db2:	e2f1      	b.n	8006398 <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8005db4:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	f280 82ed 	bge.w	8006398 <PCD_EP_ISR_Handler+0x744>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	881b      	ldrh	r3, [r3, #0]
 8005dc4:	b29a      	uxth	r2, r3
 8005dc6:	f640 738f 	movw	r3, #3983	; 0xf8f
 8005dca:	4013      	ands	r3, r2
 8005dcc:	83fb      	strh	r3, [r7, #30]
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	8bfa      	ldrh	r2, [r7, #30]
 8005dd4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005dd8:	b292      	uxth	r2, r2
 8005dda:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005de4:	b29b      	uxth	r3, r3
 8005de6:	461a      	mov	r2, r3
 8005de8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005dea:	781b      	ldrb	r3, [r3, #0]
 8005dec:	00db      	lsls	r3, r3, #3
 8005dee:	4413      	add	r3, r2
 8005df0:	687a      	ldr	r2, [r7, #4]
 8005df2:	6812      	ldr	r2, [r2, #0]
 8005df4:	4413      	add	r3, r2
 8005df6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005dfa:	881b      	ldrh	r3, [r3, #0]
 8005dfc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005e00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e02:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8005e04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e06:	69db      	ldr	r3, [r3, #28]
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d019      	beq.n	8005e40 <PCD_EP_ISR_Handler+0x1ec>
 8005e0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e0e:	695b      	ldr	r3, [r3, #20]
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d015      	beq.n	8005e40 <PCD_EP_ISR_Handler+0x1ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	6818      	ldr	r0, [r3, #0]
 8005e18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e1a:	6959      	ldr	r1, [r3, #20]
 8005e1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e1e:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8005e20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e22:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8005e24:	b29b      	uxth	r3, r3
 8005e26:	f007 f9c8 	bl	800d1ba <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8005e2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e2c:	695a      	ldr	r2, [r3, #20]
 8005e2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e30:	69db      	ldr	r3, [r3, #28]
 8005e32:	441a      	add	r2, r3
 8005e34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e36:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8005e38:	2100      	movs	r1, #0
 8005e3a:	6878      	ldr	r0, [r7, #4]
 8005e3c:	f00b faac 	bl	8011398 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	881b      	ldrh	r3, [r3, #0]
 8005e46:	b29b      	uxth	r3, r3
 8005e48:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	f040 82a3 	bne.w	8006398 <PCD_EP_ISR_Handler+0x744>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	61bb      	str	r3, [r7, #24]
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e60:	b29b      	uxth	r3, r3
 8005e62:	461a      	mov	r2, r3
 8005e64:	69bb      	ldr	r3, [r7, #24]
 8005e66:	4413      	add	r3, r2
 8005e68:	61bb      	str	r3, [r7, #24]
 8005e6a:	69bb      	ldr	r3, [r7, #24]
 8005e6c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005e70:	617b      	str	r3, [r7, #20]
 8005e72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e74:	691b      	ldr	r3, [r3, #16]
 8005e76:	2b3e      	cmp	r3, #62	; 0x3e
 8005e78:	d918      	bls.n	8005eac <PCD_EP_ISR_Handler+0x258>
 8005e7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e7c:	691b      	ldr	r3, [r3, #16]
 8005e7e:	095b      	lsrs	r3, r3, #5
 8005e80:	647b      	str	r3, [r7, #68]	; 0x44
 8005e82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e84:	691b      	ldr	r3, [r3, #16]
 8005e86:	f003 031f 	and.w	r3, r3, #31
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d102      	bne.n	8005e94 <PCD_EP_ISR_Handler+0x240>
 8005e8e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e90:	3b01      	subs	r3, #1
 8005e92:	647b      	str	r3, [r7, #68]	; 0x44
 8005e94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e96:	b29b      	uxth	r3, r3
 8005e98:	029b      	lsls	r3, r3, #10
 8005e9a:	b29b      	uxth	r3, r3
 8005e9c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ea0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ea4:	b29a      	uxth	r2, r3
 8005ea6:	697b      	ldr	r3, [r7, #20]
 8005ea8:	801a      	strh	r2, [r3, #0]
 8005eaa:	e029      	b.n	8005f00 <PCD_EP_ISR_Handler+0x2ac>
 8005eac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005eae:	691b      	ldr	r3, [r3, #16]
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d112      	bne.n	8005eda <PCD_EP_ISR_Handler+0x286>
 8005eb4:	697b      	ldr	r3, [r7, #20]
 8005eb6:	881b      	ldrh	r3, [r3, #0]
 8005eb8:	b29b      	uxth	r3, r3
 8005eba:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005ebe:	b29a      	uxth	r2, r3
 8005ec0:	697b      	ldr	r3, [r7, #20]
 8005ec2:	801a      	strh	r2, [r3, #0]
 8005ec4:	697b      	ldr	r3, [r7, #20]
 8005ec6:	881b      	ldrh	r3, [r3, #0]
 8005ec8:	b29b      	uxth	r3, r3
 8005eca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ece:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ed2:	b29a      	uxth	r2, r3
 8005ed4:	697b      	ldr	r3, [r7, #20]
 8005ed6:	801a      	strh	r2, [r3, #0]
 8005ed8:	e012      	b.n	8005f00 <PCD_EP_ISR_Handler+0x2ac>
 8005eda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005edc:	691b      	ldr	r3, [r3, #16]
 8005ede:	085b      	lsrs	r3, r3, #1
 8005ee0:	647b      	str	r3, [r7, #68]	; 0x44
 8005ee2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ee4:	691b      	ldr	r3, [r3, #16]
 8005ee6:	f003 0301 	and.w	r3, r3, #1
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d002      	beq.n	8005ef4 <PCD_EP_ISR_Handler+0x2a0>
 8005eee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005ef0:	3301      	adds	r3, #1
 8005ef2:	647b      	str	r3, [r7, #68]	; 0x44
 8005ef4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005ef6:	b29b      	uxth	r3, r3
 8005ef8:	029b      	lsls	r3, r3, #10
 8005efa:	b29a      	uxth	r2, r3
 8005efc:	697b      	ldr	r3, [r7, #20]
 8005efe:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	881b      	ldrh	r3, [r3, #0]
 8005f06:	b29b      	uxth	r3, r3
 8005f08:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005f0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f10:	827b      	strh	r3, [r7, #18]
 8005f12:	8a7b      	ldrh	r3, [r7, #18]
 8005f14:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005f18:	827b      	strh	r3, [r7, #18]
 8005f1a:	8a7b      	ldrh	r3, [r7, #18]
 8005f1c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005f20:	827b      	strh	r3, [r7, #18]
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681a      	ldr	r2, [r3, #0]
 8005f26:	8a7b      	ldrh	r3, [r7, #18]
 8005f28:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f2c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f30:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f38:	b29b      	uxth	r3, r3
 8005f3a:	8013      	strh	r3, [r2, #0]
 8005f3c:	e22c      	b.n	8006398 <PCD_EP_ISR_Handler+0x744>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	461a      	mov	r2, r3
 8005f44:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8005f48:	009b      	lsls	r3, r3, #2
 8005f4a:	4413      	add	r3, r2
 8005f4c:	881b      	ldrh	r3, [r3, #0]
 8005f4e:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8005f52:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	f280 80f6 	bge.w	8006148 <PCD_EP_ISR_Handler+0x4f4>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	461a      	mov	r2, r3
 8005f62:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8005f66:	009b      	lsls	r3, r3, #2
 8005f68:	4413      	add	r3, r2
 8005f6a:	881b      	ldrh	r3, [r3, #0]
 8005f6c:	b29a      	uxth	r2, r3
 8005f6e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8005f72:	4013      	ands	r3, r2
 8005f74:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	461a      	mov	r2, r3
 8005f7e:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8005f82:	009b      	lsls	r3, r3, #2
 8005f84:	4413      	add	r3, r2
 8005f86:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8005f8a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005f8e:	b292      	uxth	r2, r2
 8005f90:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8005f92:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 8005f96:	4613      	mov	r3, r2
 8005f98:	009b      	lsls	r3, r3, #2
 8005f9a:	4413      	add	r3, r2
 8005f9c:	00db      	lsls	r3, r3, #3
 8005f9e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005fa2:	687a      	ldr	r2, [r7, #4]
 8005fa4:	4413      	add	r3, r2
 8005fa6:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8005fa8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005faa:	7b1b      	ldrb	r3, [r3, #12]
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d123      	bne.n	8005ff8 <PCD_EP_ISR_Handler+0x3a4>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005fb8:	b29b      	uxth	r3, r3
 8005fba:	461a      	mov	r2, r3
 8005fbc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005fbe:	781b      	ldrb	r3, [r3, #0]
 8005fc0:	00db      	lsls	r3, r3, #3
 8005fc2:	4413      	add	r3, r2
 8005fc4:	687a      	ldr	r2, [r7, #4]
 8005fc6:	6812      	ldr	r2, [r2, #0]
 8005fc8:	4413      	add	r3, r2
 8005fca:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005fce:	881b      	ldrh	r3, [r3, #0]
 8005fd0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005fd4:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

          if (count != 0U)
 8005fd8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	f000 808e 	beq.w	80060fe <PCD_EP_ISR_Handler+0x4aa>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	6818      	ldr	r0, [r3, #0]
 8005fe6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005fe8:	6959      	ldr	r1, [r3, #20]
 8005fea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005fec:	88da      	ldrh	r2, [r3, #6]
 8005fee:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005ff2:	f007 f8e2 	bl	800d1ba <USB_ReadPMA>
 8005ff6:	e082      	b.n	80060fe <PCD_EP_ISR_Handler+0x4aa>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8005ff8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ffa:	78db      	ldrb	r3, [r3, #3]
 8005ffc:	2b02      	cmp	r3, #2
 8005ffe:	d10a      	bne.n	8006016 <PCD_EP_ISR_Handler+0x3c2>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8006000:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8006004:	461a      	mov	r2, r3
 8006006:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8006008:	6878      	ldr	r0, [r7, #4]
 800600a:	f000 f9d3 	bl	80063b4 <HAL_PCD_EP_DB_Receive>
 800600e:	4603      	mov	r3, r0
 8006010:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8006014:	e073      	b.n	80060fe <PCD_EP_ISR_Handler+0x4aa>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	461a      	mov	r2, r3
 800601c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800601e:	781b      	ldrb	r3, [r3, #0]
 8006020:	009b      	lsls	r3, r3, #2
 8006022:	4413      	add	r3, r2
 8006024:	881b      	ldrh	r3, [r3, #0]
 8006026:	b29b      	uxth	r3, r3
 8006028:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800602c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006030:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	461a      	mov	r2, r3
 800603a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800603c:	781b      	ldrb	r3, [r3, #0]
 800603e:	009b      	lsls	r3, r3, #2
 8006040:	441a      	add	r2, r3
 8006042:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8006046:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800604a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800604e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006052:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006056:	b29b      	uxth	r3, r3
 8006058:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	461a      	mov	r2, r3
 8006060:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006062:	781b      	ldrb	r3, [r3, #0]
 8006064:	009b      	lsls	r3, r3, #2
 8006066:	4413      	add	r3, r2
 8006068:	881b      	ldrh	r3, [r3, #0]
 800606a:	b29b      	uxth	r3, r3
 800606c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006070:	2b00      	cmp	r3, #0
 8006072:	d022      	beq.n	80060ba <PCD_EP_ISR_Handler+0x466>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800607c:	b29b      	uxth	r3, r3
 800607e:	461a      	mov	r2, r3
 8006080:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006082:	781b      	ldrb	r3, [r3, #0]
 8006084:	00db      	lsls	r3, r3, #3
 8006086:	4413      	add	r3, r2
 8006088:	687a      	ldr	r2, [r7, #4]
 800608a:	6812      	ldr	r2, [r2, #0]
 800608c:	4413      	add	r3, r2
 800608e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006092:	881b      	ldrh	r3, [r3, #0]
 8006094:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006098:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 800609c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d02c      	beq.n	80060fe <PCD_EP_ISR_Handler+0x4aa>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	6818      	ldr	r0, [r3, #0]
 80060a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80060aa:	6959      	ldr	r1, [r3, #20]
 80060ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80060ae:	891a      	ldrh	r2, [r3, #8]
 80060b0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80060b4:	f007 f881 	bl	800d1ba <USB_ReadPMA>
 80060b8:	e021      	b.n	80060fe <PCD_EP_ISR_Handler+0x4aa>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80060c2:	b29b      	uxth	r3, r3
 80060c4:	461a      	mov	r2, r3
 80060c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80060c8:	781b      	ldrb	r3, [r3, #0]
 80060ca:	00db      	lsls	r3, r3, #3
 80060cc:	4413      	add	r3, r2
 80060ce:	687a      	ldr	r2, [r7, #4]
 80060d0:	6812      	ldr	r2, [r2, #0]
 80060d2:	4413      	add	r3, r2
 80060d4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80060d8:	881b      	ldrh	r3, [r3, #0]
 80060da:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80060de:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 80060e2:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d009      	beq.n	80060fe <PCD_EP_ISR_Handler+0x4aa>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	6818      	ldr	r0, [r3, #0]
 80060ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80060f0:	6959      	ldr	r1, [r3, #20]
 80060f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80060f4:	895a      	ldrh	r2, [r3, #10]
 80060f6:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80060fa:	f007 f85e 	bl	800d1ba <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80060fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006100:	69da      	ldr	r2, [r3, #28]
 8006102:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8006106:	441a      	add	r2, r3
 8006108:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800610a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800610c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800610e:	695a      	ldr	r2, [r3, #20]
 8006110:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8006114:	441a      	add	r2, r3
 8006116:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006118:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800611a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800611c:	699b      	ldr	r3, [r3, #24]
 800611e:	2b00      	cmp	r3, #0
 8006120:	d005      	beq.n	800612e <PCD_EP_ISR_Handler+0x4da>
 8006122:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8006126:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006128:	691b      	ldr	r3, [r3, #16]
 800612a:	429a      	cmp	r2, r3
 800612c:	d206      	bcs.n	800613c <PCD_EP_ISR_Handler+0x4e8>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800612e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006130:	781b      	ldrb	r3, [r3, #0]
 8006132:	4619      	mov	r1, r3
 8006134:	6878      	ldr	r0, [r7, #4]
 8006136:	f00b f92f 	bl	8011398 <HAL_PCD_DataOutStageCallback>
 800613a:	e005      	b.n	8006148 <PCD_EP_ISR_Handler+0x4f4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8006142:	4618      	mov	r0, r3
 8006144:	f005 fb87 	bl	800b856 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8006148:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800614c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006150:	2b00      	cmp	r3, #0
 8006152:	f000 8121 	beq.w	8006398 <PCD_EP_ISR_Handler+0x744>
      {
        ep = &hpcd->IN_ep[epindex];
 8006156:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800615a:	1c5a      	adds	r2, r3, #1
 800615c:	4613      	mov	r3, r2
 800615e:	009b      	lsls	r3, r3, #2
 8006160:	4413      	add	r3, r2
 8006162:	00db      	lsls	r3, r3, #3
 8006164:	687a      	ldr	r2, [r7, #4]
 8006166:	4413      	add	r3, r2
 8006168:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	461a      	mov	r2, r3
 8006170:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8006174:	009b      	lsls	r3, r3, #2
 8006176:	4413      	add	r3, r2
 8006178:	881b      	ldrh	r3, [r3, #0]
 800617a:	b29b      	uxth	r3, r3
 800617c:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8006180:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006184:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	461a      	mov	r2, r3
 800618e:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8006192:	009b      	lsls	r3, r3, #2
 8006194:	441a      	add	r2, r3
 8006196:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800619a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800619e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80061a2:	b29b      	uxth	r3, r3
 80061a4:	8013      	strh	r3, [r2, #0]

        if (ep->type != EP_TYPE_BULK)
 80061a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80061a8:	78db      	ldrb	r3, [r3, #3]
 80061aa:	2b02      	cmp	r3, #2
 80061ac:	f000 80a2 	beq.w	80062f4 <PCD_EP_ISR_Handler+0x6a0>
        {
          ep->xfer_len = 0U;
 80061b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80061b2:	2200      	movs	r2, #0
 80061b4:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 80061b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80061b8:	7b1b      	ldrb	r3, [r3, #12]
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	f000 8093 	beq.w	80062e6 <PCD_EP_ISR_Handler+0x692>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80061c0:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80061c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d046      	beq.n	800625a <PCD_EP_ISR_Handler+0x606>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80061cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80061ce:	785b      	ldrb	r3, [r3, #1]
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d126      	bne.n	8006222 <PCD_EP_ISR_Handler+0x5ce>
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	627b      	str	r3, [r7, #36]	; 0x24
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80061e2:	b29b      	uxth	r3, r3
 80061e4:	461a      	mov	r2, r3
 80061e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061e8:	4413      	add	r3, r2
 80061ea:	627b      	str	r3, [r7, #36]	; 0x24
 80061ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80061ee:	781b      	ldrb	r3, [r3, #0]
 80061f0:	00da      	lsls	r2, r3, #3
 80061f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061f4:	4413      	add	r3, r2
 80061f6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80061fa:	623b      	str	r3, [r7, #32]
 80061fc:	6a3b      	ldr	r3, [r7, #32]
 80061fe:	881b      	ldrh	r3, [r3, #0]
 8006200:	b29b      	uxth	r3, r3
 8006202:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006206:	b29a      	uxth	r2, r3
 8006208:	6a3b      	ldr	r3, [r7, #32]
 800620a:	801a      	strh	r2, [r3, #0]
 800620c:	6a3b      	ldr	r3, [r7, #32]
 800620e:	881b      	ldrh	r3, [r3, #0]
 8006210:	b29b      	uxth	r3, r3
 8006212:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006216:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800621a:	b29a      	uxth	r2, r3
 800621c:	6a3b      	ldr	r3, [r7, #32]
 800621e:	801a      	strh	r2, [r3, #0]
 8006220:	e061      	b.n	80062e6 <PCD_EP_ISR_Handler+0x692>
 8006222:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006224:	785b      	ldrb	r3, [r3, #1]
 8006226:	2b01      	cmp	r3, #1
 8006228:	d15d      	bne.n	80062e6 <PCD_EP_ISR_Handler+0x692>
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006238:	b29b      	uxth	r3, r3
 800623a:	461a      	mov	r2, r3
 800623c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800623e:	4413      	add	r3, r2
 8006240:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006242:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006244:	781b      	ldrb	r3, [r3, #0]
 8006246:	00da      	lsls	r2, r3, #3
 8006248:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800624a:	4413      	add	r3, r2
 800624c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006250:	62bb      	str	r3, [r7, #40]	; 0x28
 8006252:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006254:	2200      	movs	r2, #0
 8006256:	801a      	strh	r2, [r3, #0]
 8006258:	e045      	b.n	80062e6 <PCD_EP_ISR_Handler+0x692>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006260:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006262:	785b      	ldrb	r3, [r3, #1]
 8006264:	2b00      	cmp	r3, #0
 8006266:	d126      	bne.n	80062b6 <PCD_EP_ISR_Handler+0x662>
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	637b      	str	r3, [r7, #52]	; 0x34
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006276:	b29b      	uxth	r3, r3
 8006278:	461a      	mov	r2, r3
 800627a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800627c:	4413      	add	r3, r2
 800627e:	637b      	str	r3, [r7, #52]	; 0x34
 8006280:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006282:	781b      	ldrb	r3, [r3, #0]
 8006284:	00da      	lsls	r2, r3, #3
 8006286:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006288:	4413      	add	r3, r2
 800628a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800628e:	633b      	str	r3, [r7, #48]	; 0x30
 8006290:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006292:	881b      	ldrh	r3, [r3, #0]
 8006294:	b29b      	uxth	r3, r3
 8006296:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800629a:	b29a      	uxth	r2, r3
 800629c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800629e:	801a      	strh	r2, [r3, #0]
 80062a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062a2:	881b      	ldrh	r3, [r3, #0]
 80062a4:	b29b      	uxth	r3, r3
 80062a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80062aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80062ae:	b29a      	uxth	r2, r3
 80062b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062b2:	801a      	strh	r2, [r3, #0]
 80062b4:	e017      	b.n	80062e6 <PCD_EP_ISR_Handler+0x692>
 80062b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80062b8:	785b      	ldrb	r3, [r3, #1]
 80062ba:	2b01      	cmp	r3, #1
 80062bc:	d113      	bne.n	80062e6 <PCD_EP_ISR_Handler+0x692>
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80062c6:	b29b      	uxth	r3, r3
 80062c8:	461a      	mov	r2, r3
 80062ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80062cc:	4413      	add	r3, r2
 80062ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80062d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80062d2:	781b      	ldrb	r3, [r3, #0]
 80062d4:	00da      	lsls	r2, r3, #3
 80062d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80062d8:	4413      	add	r3, r2
 80062da:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80062de:	63bb      	str	r3, [r7, #56]	; 0x38
 80062e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062e2:	2200      	movs	r2, #0
 80062e4:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80062e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80062e8:	781b      	ldrb	r3, [r3, #0]
 80062ea:	4619      	mov	r1, r3
 80062ec:	6878      	ldr	r0, [r7, #4]
 80062ee:	f00b f86e 	bl	80113ce <HAL_PCD_DataInStageCallback>
 80062f2:	e051      	b.n	8006398 <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Bulk Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 80062f4:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80062f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d144      	bne.n	800638a <PCD_EP_ISR_Handler+0x736>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006308:	b29b      	uxth	r3, r3
 800630a:	461a      	mov	r2, r3
 800630c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800630e:	781b      	ldrb	r3, [r3, #0]
 8006310:	00db      	lsls	r3, r3, #3
 8006312:	4413      	add	r3, r2
 8006314:	687a      	ldr	r2, [r7, #4]
 8006316:	6812      	ldr	r2, [r2, #0]
 8006318:	4413      	add	r3, r2
 800631a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800631e:	881b      	ldrh	r3, [r3, #0]
 8006320:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006324:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8006328:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800632a:	699a      	ldr	r2, [r3, #24]
 800632c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006330:	429a      	cmp	r2, r3
 8006332:	d907      	bls.n	8006344 <PCD_EP_ISR_Handler+0x6f0>
            {
              ep->xfer_len -= TxPctSize;
 8006334:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006336:	699a      	ldr	r2, [r3, #24]
 8006338:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800633c:	1ad2      	subs	r2, r2, r3
 800633e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006340:	619a      	str	r2, [r3, #24]
 8006342:	e002      	b.n	800634a <PCD_EP_ISR_Handler+0x6f6>
            }
            else
            {
              ep->xfer_len = 0U;
 8006344:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006346:	2200      	movs	r2, #0
 8006348:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 800634a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800634c:	699b      	ldr	r3, [r3, #24]
 800634e:	2b00      	cmp	r3, #0
 8006350:	d106      	bne.n	8006360 <PCD_EP_ISR_Handler+0x70c>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8006352:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006354:	781b      	ldrb	r3, [r3, #0]
 8006356:	4619      	mov	r1, r3
 8006358:	6878      	ldr	r0, [r7, #4]
 800635a:	f00b f838 	bl	80113ce <HAL_PCD_DataInStageCallback>
 800635e:	e01b      	b.n	8006398 <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8006360:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006362:	695a      	ldr	r2, [r3, #20]
 8006364:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006368:	441a      	add	r2, r3
 800636a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800636c:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 800636e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006370:	69da      	ldr	r2, [r3, #28]
 8006372:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006376:	441a      	add	r2, r3
 8006378:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800637a:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8006382:	4618      	mov	r0, r3
 8006384:	f005 fa67 	bl	800b856 <USB_EPStartXfer>
 8006388:	e006      	b.n	8006398 <PCD_EP_ISR_Handler+0x744>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800638a:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800638e:	461a      	mov	r2, r3
 8006390:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8006392:	6878      	ldr	r0, [r7, #4]
 8006394:	f000 f917 	bl	80065c6 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80063a0:	b29b      	uxth	r3, r3
 80063a2:	b21b      	sxth	r3, r3
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	f6ff ac5a 	blt.w	8005c5e <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80063aa:	2300      	movs	r3, #0
}
 80063ac:	4618      	mov	r0, r3
 80063ae:	3758      	adds	r7, #88	; 0x58
 80063b0:	46bd      	mov	sp, r7
 80063b2:	bd80      	pop	{r7, pc}

080063b4 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80063b4:	b580      	push	{r7, lr}
 80063b6:	b088      	sub	sp, #32
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	60f8      	str	r0, [r7, #12]
 80063bc:	60b9      	str	r1, [r7, #8]
 80063be:	4613      	mov	r3, r2
 80063c0:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80063c2:	88fb      	ldrh	r3, [r7, #6]
 80063c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d07c      	beq.n	80064c6 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80063d4:	b29b      	uxth	r3, r3
 80063d6:	461a      	mov	r2, r3
 80063d8:	68bb      	ldr	r3, [r7, #8]
 80063da:	781b      	ldrb	r3, [r3, #0]
 80063dc:	00db      	lsls	r3, r3, #3
 80063de:	4413      	add	r3, r2
 80063e0:	68fa      	ldr	r2, [r7, #12]
 80063e2:	6812      	ldr	r2, [r2, #0]
 80063e4:	4413      	add	r3, r2
 80063e6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80063ea:	881b      	ldrh	r3, [r3, #0]
 80063ec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80063f0:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80063f2:	68bb      	ldr	r3, [r7, #8]
 80063f4:	699a      	ldr	r2, [r3, #24]
 80063f6:	8b7b      	ldrh	r3, [r7, #26]
 80063f8:	429a      	cmp	r2, r3
 80063fa:	d306      	bcc.n	800640a <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 80063fc:	68bb      	ldr	r3, [r7, #8]
 80063fe:	699a      	ldr	r2, [r3, #24]
 8006400:	8b7b      	ldrh	r3, [r7, #26]
 8006402:	1ad2      	subs	r2, r2, r3
 8006404:	68bb      	ldr	r3, [r7, #8]
 8006406:	619a      	str	r2, [r3, #24]
 8006408:	e002      	b.n	8006410 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 800640a:	68bb      	ldr	r3, [r7, #8]
 800640c:	2200      	movs	r2, #0
 800640e:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8006410:	68bb      	ldr	r3, [r7, #8]
 8006412:	699b      	ldr	r3, [r3, #24]
 8006414:	2b00      	cmp	r3, #0
 8006416:	d123      	bne.n	8006460 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	461a      	mov	r2, r3
 800641e:	68bb      	ldr	r3, [r7, #8]
 8006420:	781b      	ldrb	r3, [r3, #0]
 8006422:	009b      	lsls	r3, r3, #2
 8006424:	4413      	add	r3, r2
 8006426:	881b      	ldrh	r3, [r3, #0]
 8006428:	b29b      	uxth	r3, r3
 800642a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800642e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006432:	833b      	strh	r3, [r7, #24]
 8006434:	8b3b      	ldrh	r3, [r7, #24]
 8006436:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800643a:	833b      	strh	r3, [r7, #24]
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	461a      	mov	r2, r3
 8006442:	68bb      	ldr	r3, [r7, #8]
 8006444:	781b      	ldrb	r3, [r3, #0]
 8006446:	009b      	lsls	r3, r3, #2
 8006448:	441a      	add	r2, r3
 800644a:	8b3b      	ldrh	r3, [r7, #24]
 800644c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006450:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006454:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006458:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800645c:	b29b      	uxth	r3, r3
 800645e:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8006460:	88fb      	ldrh	r3, [r7, #6]
 8006462:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006466:	2b00      	cmp	r3, #0
 8006468:	d01f      	beq.n	80064aa <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	461a      	mov	r2, r3
 8006470:	68bb      	ldr	r3, [r7, #8]
 8006472:	781b      	ldrb	r3, [r3, #0]
 8006474:	009b      	lsls	r3, r3, #2
 8006476:	4413      	add	r3, r2
 8006478:	881b      	ldrh	r3, [r3, #0]
 800647a:	b29b      	uxth	r3, r3
 800647c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006480:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006484:	82fb      	strh	r3, [r7, #22]
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	461a      	mov	r2, r3
 800648c:	68bb      	ldr	r3, [r7, #8]
 800648e:	781b      	ldrb	r3, [r3, #0]
 8006490:	009b      	lsls	r3, r3, #2
 8006492:	441a      	add	r2, r3
 8006494:	8afb      	ldrh	r3, [r7, #22]
 8006496:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800649a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800649e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80064a2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80064a6:	b29b      	uxth	r3, r3
 80064a8:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80064aa:	8b7b      	ldrh	r3, [r7, #26]
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	f000 8085 	beq.w	80065bc <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	6818      	ldr	r0, [r3, #0]
 80064b6:	68bb      	ldr	r3, [r7, #8]
 80064b8:	6959      	ldr	r1, [r3, #20]
 80064ba:	68bb      	ldr	r3, [r7, #8]
 80064bc:	891a      	ldrh	r2, [r3, #8]
 80064be:	8b7b      	ldrh	r3, [r7, #26]
 80064c0:	f006 fe7b 	bl	800d1ba <USB_ReadPMA>
 80064c4:	e07a      	b.n	80065bc <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80064ce:	b29b      	uxth	r3, r3
 80064d0:	461a      	mov	r2, r3
 80064d2:	68bb      	ldr	r3, [r7, #8]
 80064d4:	781b      	ldrb	r3, [r3, #0]
 80064d6:	00db      	lsls	r3, r3, #3
 80064d8:	4413      	add	r3, r2
 80064da:	68fa      	ldr	r2, [r7, #12]
 80064dc:	6812      	ldr	r2, [r2, #0]
 80064de:	4413      	add	r3, r2
 80064e0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80064e4:	881b      	ldrh	r3, [r3, #0]
 80064e6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80064ea:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80064ec:	68bb      	ldr	r3, [r7, #8]
 80064ee:	699a      	ldr	r2, [r3, #24]
 80064f0:	8b7b      	ldrh	r3, [r7, #26]
 80064f2:	429a      	cmp	r2, r3
 80064f4:	d306      	bcc.n	8006504 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 80064f6:	68bb      	ldr	r3, [r7, #8]
 80064f8:	699a      	ldr	r2, [r3, #24]
 80064fa:	8b7b      	ldrh	r3, [r7, #26]
 80064fc:	1ad2      	subs	r2, r2, r3
 80064fe:	68bb      	ldr	r3, [r7, #8]
 8006500:	619a      	str	r2, [r3, #24]
 8006502:	e002      	b.n	800650a <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8006504:	68bb      	ldr	r3, [r7, #8]
 8006506:	2200      	movs	r2, #0
 8006508:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800650a:	68bb      	ldr	r3, [r7, #8]
 800650c:	699b      	ldr	r3, [r3, #24]
 800650e:	2b00      	cmp	r3, #0
 8006510:	d123      	bne.n	800655a <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	461a      	mov	r2, r3
 8006518:	68bb      	ldr	r3, [r7, #8]
 800651a:	781b      	ldrb	r3, [r3, #0]
 800651c:	009b      	lsls	r3, r3, #2
 800651e:	4413      	add	r3, r2
 8006520:	881b      	ldrh	r3, [r3, #0]
 8006522:	b29b      	uxth	r3, r3
 8006524:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006528:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800652c:	83fb      	strh	r3, [r7, #30]
 800652e:	8bfb      	ldrh	r3, [r7, #30]
 8006530:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006534:	83fb      	strh	r3, [r7, #30]
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	461a      	mov	r2, r3
 800653c:	68bb      	ldr	r3, [r7, #8]
 800653e:	781b      	ldrb	r3, [r3, #0]
 8006540:	009b      	lsls	r3, r3, #2
 8006542:	441a      	add	r2, r3
 8006544:	8bfb      	ldrh	r3, [r7, #30]
 8006546:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800654a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800654e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006552:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006556:	b29b      	uxth	r3, r3
 8006558:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800655a:	88fb      	ldrh	r3, [r7, #6]
 800655c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006560:	2b00      	cmp	r3, #0
 8006562:	d11f      	bne.n	80065a4 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	461a      	mov	r2, r3
 800656a:	68bb      	ldr	r3, [r7, #8]
 800656c:	781b      	ldrb	r3, [r3, #0]
 800656e:	009b      	lsls	r3, r3, #2
 8006570:	4413      	add	r3, r2
 8006572:	881b      	ldrh	r3, [r3, #0]
 8006574:	b29b      	uxth	r3, r3
 8006576:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800657a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800657e:	83bb      	strh	r3, [r7, #28]
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	461a      	mov	r2, r3
 8006586:	68bb      	ldr	r3, [r7, #8]
 8006588:	781b      	ldrb	r3, [r3, #0]
 800658a:	009b      	lsls	r3, r3, #2
 800658c:	441a      	add	r2, r3
 800658e:	8bbb      	ldrh	r3, [r7, #28]
 8006590:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006594:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006598:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800659c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80065a0:	b29b      	uxth	r3, r3
 80065a2:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80065a4:	8b7b      	ldrh	r3, [r7, #26]
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d008      	beq.n	80065bc <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	6818      	ldr	r0, [r3, #0]
 80065ae:	68bb      	ldr	r3, [r7, #8]
 80065b0:	6959      	ldr	r1, [r3, #20]
 80065b2:	68bb      	ldr	r3, [r7, #8]
 80065b4:	895a      	ldrh	r2, [r3, #10]
 80065b6:	8b7b      	ldrh	r3, [r7, #26]
 80065b8:	f006 fdff 	bl	800d1ba <USB_ReadPMA>
    }
  }

  return count;
 80065bc:	8b7b      	ldrh	r3, [r7, #26]
}
 80065be:	4618      	mov	r0, r3
 80065c0:	3720      	adds	r7, #32
 80065c2:	46bd      	mov	sp, r7
 80065c4:	bd80      	pop	{r7, pc}

080065c6 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80065c6:	b580      	push	{r7, lr}
 80065c8:	b0a2      	sub	sp, #136	; 0x88
 80065ca:	af00      	add	r7, sp, #0
 80065cc:	60f8      	str	r0, [r7, #12]
 80065ce:	60b9      	str	r1, [r7, #8]
 80065d0:	4613      	mov	r3, r2
 80065d2:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80065d4:	88fb      	ldrh	r3, [r7, #6]
 80065d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065da:	2b00      	cmp	r3, #0
 80065dc:	f000 81c5 	beq.w	800696a <HAL_PCD_EP_DB_Transmit+0x3a4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80065e8:	b29b      	uxth	r3, r3
 80065ea:	461a      	mov	r2, r3
 80065ec:	68bb      	ldr	r3, [r7, #8]
 80065ee:	781b      	ldrb	r3, [r3, #0]
 80065f0:	00db      	lsls	r3, r3, #3
 80065f2:	4413      	add	r3, r2
 80065f4:	68fa      	ldr	r2, [r7, #12]
 80065f6:	6812      	ldr	r2, [r2, #0]
 80065f8:	4413      	add	r3, r2
 80065fa:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80065fe:	881b      	ldrh	r3, [r3, #0]
 8006600:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006604:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxPctSize)
 8006608:	68bb      	ldr	r3, [r7, #8]
 800660a:	699a      	ldr	r2, [r3, #24]
 800660c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006610:	429a      	cmp	r2, r3
 8006612:	d907      	bls.n	8006624 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8006614:	68bb      	ldr	r3, [r7, #8]
 8006616:	699a      	ldr	r2, [r3, #24]
 8006618:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800661c:	1ad2      	subs	r2, r2, r3
 800661e:	68bb      	ldr	r3, [r7, #8]
 8006620:	619a      	str	r2, [r3, #24]
 8006622:	e002      	b.n	800662a <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8006624:	68bb      	ldr	r3, [r7, #8]
 8006626:	2200      	movs	r2, #0
 8006628:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800662a:	68bb      	ldr	r3, [r7, #8]
 800662c:	699b      	ldr	r3, [r3, #24]
 800662e:	2b00      	cmp	r3, #0
 8006630:	f040 80b9 	bne.w	80067a6 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006634:	68bb      	ldr	r3, [r7, #8]
 8006636:	785b      	ldrb	r3, [r3, #1]
 8006638:	2b00      	cmp	r3, #0
 800663a:	d126      	bne.n	800668a <HAL_PCD_EP_DB_Transmit+0xc4>
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	62bb      	str	r3, [r7, #40]	; 0x28
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800664a:	b29b      	uxth	r3, r3
 800664c:	461a      	mov	r2, r3
 800664e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006650:	4413      	add	r3, r2
 8006652:	62bb      	str	r3, [r7, #40]	; 0x28
 8006654:	68bb      	ldr	r3, [r7, #8]
 8006656:	781b      	ldrb	r3, [r3, #0]
 8006658:	00da      	lsls	r2, r3, #3
 800665a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800665c:	4413      	add	r3, r2
 800665e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006662:	627b      	str	r3, [r7, #36]	; 0x24
 8006664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006666:	881b      	ldrh	r3, [r3, #0]
 8006668:	b29b      	uxth	r3, r3
 800666a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800666e:	b29a      	uxth	r2, r3
 8006670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006672:	801a      	strh	r2, [r3, #0]
 8006674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006676:	881b      	ldrh	r3, [r3, #0]
 8006678:	b29b      	uxth	r3, r3
 800667a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800667e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006682:	b29a      	uxth	r2, r3
 8006684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006686:	801a      	strh	r2, [r3, #0]
 8006688:	e01a      	b.n	80066c0 <HAL_PCD_EP_DB_Transmit+0xfa>
 800668a:	68bb      	ldr	r3, [r7, #8]
 800668c:	785b      	ldrb	r3, [r3, #1]
 800668e:	2b01      	cmp	r3, #1
 8006690:	d116      	bne.n	80066c0 <HAL_PCD_EP_DB_Transmit+0xfa>
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	633b      	str	r3, [r7, #48]	; 0x30
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80066a0:	b29b      	uxth	r3, r3
 80066a2:	461a      	mov	r2, r3
 80066a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066a6:	4413      	add	r3, r2
 80066a8:	633b      	str	r3, [r7, #48]	; 0x30
 80066aa:	68bb      	ldr	r3, [r7, #8]
 80066ac:	781b      	ldrb	r3, [r3, #0]
 80066ae:	00da      	lsls	r2, r3, #3
 80066b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066b2:	4413      	add	r3, r2
 80066b4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80066b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80066ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066bc:	2200      	movs	r2, #0
 80066be:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	623b      	str	r3, [r7, #32]
 80066c6:	68bb      	ldr	r3, [r7, #8]
 80066c8:	785b      	ldrb	r3, [r3, #1]
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d126      	bne.n	800671c <HAL_PCD_EP_DB_Transmit+0x156>
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	61bb      	str	r3, [r7, #24]
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80066dc:	b29b      	uxth	r3, r3
 80066de:	461a      	mov	r2, r3
 80066e0:	69bb      	ldr	r3, [r7, #24]
 80066e2:	4413      	add	r3, r2
 80066e4:	61bb      	str	r3, [r7, #24]
 80066e6:	68bb      	ldr	r3, [r7, #8]
 80066e8:	781b      	ldrb	r3, [r3, #0]
 80066ea:	00da      	lsls	r2, r3, #3
 80066ec:	69bb      	ldr	r3, [r7, #24]
 80066ee:	4413      	add	r3, r2
 80066f0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80066f4:	617b      	str	r3, [r7, #20]
 80066f6:	697b      	ldr	r3, [r7, #20]
 80066f8:	881b      	ldrh	r3, [r3, #0]
 80066fa:	b29b      	uxth	r3, r3
 80066fc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006700:	b29a      	uxth	r2, r3
 8006702:	697b      	ldr	r3, [r7, #20]
 8006704:	801a      	strh	r2, [r3, #0]
 8006706:	697b      	ldr	r3, [r7, #20]
 8006708:	881b      	ldrh	r3, [r3, #0]
 800670a:	b29b      	uxth	r3, r3
 800670c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006710:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006714:	b29a      	uxth	r2, r3
 8006716:	697b      	ldr	r3, [r7, #20]
 8006718:	801a      	strh	r2, [r3, #0]
 800671a:	e017      	b.n	800674c <HAL_PCD_EP_DB_Transmit+0x186>
 800671c:	68bb      	ldr	r3, [r7, #8]
 800671e:	785b      	ldrb	r3, [r3, #1]
 8006720:	2b01      	cmp	r3, #1
 8006722:	d113      	bne.n	800674c <HAL_PCD_EP_DB_Transmit+0x186>
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800672c:	b29b      	uxth	r3, r3
 800672e:	461a      	mov	r2, r3
 8006730:	6a3b      	ldr	r3, [r7, #32]
 8006732:	4413      	add	r3, r2
 8006734:	623b      	str	r3, [r7, #32]
 8006736:	68bb      	ldr	r3, [r7, #8]
 8006738:	781b      	ldrb	r3, [r3, #0]
 800673a:	00da      	lsls	r2, r3, #3
 800673c:	6a3b      	ldr	r3, [r7, #32]
 800673e:	4413      	add	r3, r2
 8006740:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006744:	61fb      	str	r3, [r7, #28]
 8006746:	69fb      	ldr	r3, [r7, #28]
 8006748:	2200      	movs	r2, #0
 800674a:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800674c:	68bb      	ldr	r3, [r7, #8]
 800674e:	781b      	ldrb	r3, [r3, #0]
 8006750:	4619      	mov	r1, r3
 8006752:	68f8      	ldr	r0, [r7, #12]
 8006754:	f00a fe3b 	bl	80113ce <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8006758:	88fb      	ldrh	r3, [r7, #6]
 800675a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800675e:	2b00      	cmp	r3, #0
 8006760:	f000 82d2 	beq.w	8006d08 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	461a      	mov	r2, r3
 800676a:	68bb      	ldr	r3, [r7, #8]
 800676c:	781b      	ldrb	r3, [r3, #0]
 800676e:	009b      	lsls	r3, r3, #2
 8006770:	4413      	add	r3, r2
 8006772:	881b      	ldrh	r3, [r3, #0]
 8006774:	b29b      	uxth	r3, r3
 8006776:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800677a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800677e:	827b      	strh	r3, [r7, #18]
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	461a      	mov	r2, r3
 8006786:	68bb      	ldr	r3, [r7, #8]
 8006788:	781b      	ldrb	r3, [r3, #0]
 800678a:	009b      	lsls	r3, r3, #2
 800678c:	441a      	add	r2, r3
 800678e:	8a7b      	ldrh	r3, [r7, #18]
 8006790:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006794:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006798:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800679c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80067a0:	b29b      	uxth	r3, r3
 80067a2:	8013      	strh	r3, [r2, #0]
 80067a4:	e2b0      	b.n	8006d08 <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80067a6:	88fb      	ldrh	r3, [r7, #6]
 80067a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d021      	beq.n	80067f4 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	461a      	mov	r2, r3
 80067b6:	68bb      	ldr	r3, [r7, #8]
 80067b8:	781b      	ldrb	r3, [r3, #0]
 80067ba:	009b      	lsls	r3, r3, #2
 80067bc:	4413      	add	r3, r2
 80067be:	881b      	ldrh	r3, [r3, #0]
 80067c0:	b29b      	uxth	r3, r3
 80067c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80067c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067ca:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	461a      	mov	r2, r3
 80067d4:	68bb      	ldr	r3, [r7, #8]
 80067d6:	781b      	ldrb	r3, [r3, #0]
 80067d8:	009b      	lsls	r3, r3, #2
 80067da:	441a      	add	r2, r3
 80067dc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80067e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80067e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80067e8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80067ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80067f0:	b29b      	uxth	r3, r3
 80067f2:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80067f4:	68bb      	ldr	r3, [r7, #8]
 80067f6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80067fa:	2b01      	cmp	r3, #1
 80067fc:	f040 8284 	bne.w	8006d08 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 8006800:	68bb      	ldr	r3, [r7, #8]
 8006802:	695a      	ldr	r2, [r3, #20]
 8006804:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006808:	441a      	add	r2, r3
 800680a:	68bb      	ldr	r3, [r7, #8]
 800680c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800680e:	68bb      	ldr	r3, [r7, #8]
 8006810:	69da      	ldr	r2, [r3, #28]
 8006812:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006816:	441a      	add	r2, r3
 8006818:	68bb      	ldr	r3, [r7, #8]
 800681a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800681c:	68bb      	ldr	r3, [r7, #8]
 800681e:	6a1a      	ldr	r2, [r3, #32]
 8006820:	68bb      	ldr	r3, [r7, #8]
 8006822:	691b      	ldr	r3, [r3, #16]
 8006824:	429a      	cmp	r2, r3
 8006826:	d309      	bcc.n	800683c <HAL_PCD_EP_DB_Transmit+0x276>
        {
          len = ep->maxpacket;
 8006828:	68bb      	ldr	r3, [r7, #8]
 800682a:	691b      	ldr	r3, [r3, #16]
 800682c:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 800682e:	68bb      	ldr	r3, [r7, #8]
 8006830:	6a1a      	ldr	r2, [r3, #32]
 8006832:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006834:	1ad2      	subs	r2, r2, r3
 8006836:	68bb      	ldr	r3, [r7, #8]
 8006838:	621a      	str	r2, [r3, #32]
 800683a:	e015      	b.n	8006868 <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else if (ep->xfer_len_db == 0U)
 800683c:	68bb      	ldr	r3, [r7, #8]
 800683e:	6a1b      	ldr	r3, [r3, #32]
 8006840:	2b00      	cmp	r3, #0
 8006842:	d107      	bne.n	8006854 <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxPctSize;
 8006844:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006848:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 800684a:	68bb      	ldr	r3, [r7, #8]
 800684c:	2200      	movs	r2, #0
 800684e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8006852:	e009      	b.n	8006868 <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8006854:	68bb      	ldr	r3, [r7, #8]
 8006856:	2200      	movs	r2, #0
 8006858:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 800685c:	68bb      	ldr	r3, [r7, #8]
 800685e:	6a1b      	ldr	r3, [r3, #32]
 8006860:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8006862:	68bb      	ldr	r3, [r7, #8]
 8006864:	2200      	movs	r2, #0
 8006866:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8006868:	68bb      	ldr	r3, [r7, #8]
 800686a:	785b      	ldrb	r3, [r3, #1]
 800686c:	2b00      	cmp	r3, #0
 800686e:	d155      	bne.n	800691c <HAL_PCD_EP_DB_Transmit+0x356>
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	63bb      	str	r3, [r7, #56]	; 0x38
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800687e:	b29b      	uxth	r3, r3
 8006880:	461a      	mov	r2, r3
 8006882:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006884:	4413      	add	r3, r2
 8006886:	63bb      	str	r3, [r7, #56]	; 0x38
 8006888:	68bb      	ldr	r3, [r7, #8]
 800688a:	781b      	ldrb	r3, [r3, #0]
 800688c:	00da      	lsls	r2, r3, #3
 800688e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006890:	4413      	add	r3, r2
 8006892:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006896:	637b      	str	r3, [r7, #52]	; 0x34
 8006898:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800689a:	2b3e      	cmp	r3, #62	; 0x3e
 800689c:	d916      	bls.n	80068cc <HAL_PCD_EP_DB_Transmit+0x306>
 800689e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80068a0:	095b      	lsrs	r3, r3, #5
 80068a2:	64bb      	str	r3, [r7, #72]	; 0x48
 80068a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80068a6:	f003 031f 	and.w	r3, r3, #31
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d102      	bne.n	80068b4 <HAL_PCD_EP_DB_Transmit+0x2ee>
 80068ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80068b0:	3b01      	subs	r3, #1
 80068b2:	64bb      	str	r3, [r7, #72]	; 0x48
 80068b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80068b6:	b29b      	uxth	r3, r3
 80068b8:	029b      	lsls	r3, r3, #10
 80068ba:	b29b      	uxth	r3, r3
 80068bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80068c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80068c4:	b29a      	uxth	r2, r3
 80068c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068c8:	801a      	strh	r2, [r3, #0]
 80068ca:	e043      	b.n	8006954 <HAL_PCD_EP_DB_Transmit+0x38e>
 80068cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d112      	bne.n	80068f8 <HAL_PCD_EP_DB_Transmit+0x332>
 80068d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068d4:	881b      	ldrh	r3, [r3, #0]
 80068d6:	b29b      	uxth	r3, r3
 80068d8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80068dc:	b29a      	uxth	r2, r3
 80068de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068e0:	801a      	strh	r2, [r3, #0]
 80068e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068e4:	881b      	ldrh	r3, [r3, #0]
 80068e6:	b29b      	uxth	r3, r3
 80068e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80068ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80068f0:	b29a      	uxth	r2, r3
 80068f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068f4:	801a      	strh	r2, [r3, #0]
 80068f6:	e02d      	b.n	8006954 <HAL_PCD_EP_DB_Transmit+0x38e>
 80068f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80068fa:	085b      	lsrs	r3, r3, #1
 80068fc:	64bb      	str	r3, [r7, #72]	; 0x48
 80068fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006900:	f003 0301 	and.w	r3, r3, #1
 8006904:	2b00      	cmp	r3, #0
 8006906:	d002      	beq.n	800690e <HAL_PCD_EP_DB_Transmit+0x348>
 8006908:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800690a:	3301      	adds	r3, #1
 800690c:	64bb      	str	r3, [r7, #72]	; 0x48
 800690e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006910:	b29b      	uxth	r3, r3
 8006912:	029b      	lsls	r3, r3, #10
 8006914:	b29a      	uxth	r2, r3
 8006916:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006918:	801a      	strh	r2, [r3, #0]
 800691a:	e01b      	b.n	8006954 <HAL_PCD_EP_DB_Transmit+0x38e>
 800691c:	68bb      	ldr	r3, [r7, #8]
 800691e:	785b      	ldrb	r3, [r3, #1]
 8006920:	2b01      	cmp	r3, #1
 8006922:	d117      	bne.n	8006954 <HAL_PCD_EP_DB_Transmit+0x38e>
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	643b      	str	r3, [r7, #64]	; 0x40
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006932:	b29b      	uxth	r3, r3
 8006934:	461a      	mov	r2, r3
 8006936:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006938:	4413      	add	r3, r2
 800693a:	643b      	str	r3, [r7, #64]	; 0x40
 800693c:	68bb      	ldr	r3, [r7, #8]
 800693e:	781b      	ldrb	r3, [r3, #0]
 8006940:	00da      	lsls	r2, r3, #3
 8006942:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006944:	4413      	add	r3, r2
 8006946:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800694a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800694c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800694e:	b29a      	uxth	r2, r3
 8006950:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006952:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	6818      	ldr	r0, [r3, #0]
 8006958:	68bb      	ldr	r3, [r7, #8]
 800695a:	6959      	ldr	r1, [r3, #20]
 800695c:	68bb      	ldr	r3, [r7, #8]
 800695e:	891a      	ldrh	r2, [r3, #8]
 8006960:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006962:	b29b      	uxth	r3, r3
 8006964:	f006 fbe7 	bl	800d136 <USB_WritePMA>
 8006968:	e1ce      	b.n	8006d08 <HAL_PCD_EP_DB_Transmit+0x742>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006972:	b29b      	uxth	r3, r3
 8006974:	461a      	mov	r2, r3
 8006976:	68bb      	ldr	r3, [r7, #8]
 8006978:	781b      	ldrb	r3, [r3, #0]
 800697a:	00db      	lsls	r3, r3, #3
 800697c:	4413      	add	r3, r2
 800697e:	68fa      	ldr	r2, [r7, #12]
 8006980:	6812      	ldr	r2, [r2, #0]
 8006982:	4413      	add	r3, r2
 8006984:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006988:	881b      	ldrh	r3, [r3, #0]
 800698a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800698e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxPctSize)
 8006992:	68bb      	ldr	r3, [r7, #8]
 8006994:	699a      	ldr	r2, [r3, #24]
 8006996:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800699a:	429a      	cmp	r2, r3
 800699c:	d307      	bcc.n	80069ae <HAL_PCD_EP_DB_Transmit+0x3e8>
    {
      ep->xfer_len -= TxPctSize;
 800699e:	68bb      	ldr	r3, [r7, #8]
 80069a0:	699a      	ldr	r2, [r3, #24]
 80069a2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80069a6:	1ad2      	subs	r2, r2, r3
 80069a8:	68bb      	ldr	r3, [r7, #8]
 80069aa:	619a      	str	r2, [r3, #24]
 80069ac:	e002      	b.n	80069b4 <HAL_PCD_EP_DB_Transmit+0x3ee>
    }
    else
    {
      ep->xfer_len = 0U;
 80069ae:	68bb      	ldr	r3, [r7, #8]
 80069b0:	2200      	movs	r2, #0
 80069b2:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80069b4:	68bb      	ldr	r3, [r7, #8]
 80069b6:	699b      	ldr	r3, [r3, #24]
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	f040 80c4 	bne.w	8006b46 <HAL_PCD_EP_DB_Transmit+0x580>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80069be:	68bb      	ldr	r3, [r7, #8]
 80069c0:	785b      	ldrb	r3, [r3, #1]
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d126      	bne.n	8006a14 <HAL_PCD_EP_DB_Transmit+0x44e>
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	66bb      	str	r3, [r7, #104]	; 0x68
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80069d4:	b29b      	uxth	r3, r3
 80069d6:	461a      	mov	r2, r3
 80069d8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80069da:	4413      	add	r3, r2
 80069dc:	66bb      	str	r3, [r7, #104]	; 0x68
 80069de:	68bb      	ldr	r3, [r7, #8]
 80069e0:	781b      	ldrb	r3, [r3, #0]
 80069e2:	00da      	lsls	r2, r3, #3
 80069e4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80069e6:	4413      	add	r3, r2
 80069e8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80069ec:	667b      	str	r3, [r7, #100]	; 0x64
 80069ee:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80069f0:	881b      	ldrh	r3, [r3, #0]
 80069f2:	b29b      	uxth	r3, r3
 80069f4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80069f8:	b29a      	uxth	r2, r3
 80069fa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80069fc:	801a      	strh	r2, [r3, #0]
 80069fe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006a00:	881b      	ldrh	r3, [r3, #0]
 8006a02:	b29b      	uxth	r3, r3
 8006a04:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a08:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a0c:	b29a      	uxth	r2, r3
 8006a0e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006a10:	801a      	strh	r2, [r3, #0]
 8006a12:	e01a      	b.n	8006a4a <HAL_PCD_EP_DB_Transmit+0x484>
 8006a14:	68bb      	ldr	r3, [r7, #8]
 8006a16:	785b      	ldrb	r3, [r3, #1]
 8006a18:	2b01      	cmp	r3, #1
 8006a1a:	d116      	bne.n	8006a4a <HAL_PCD_EP_DB_Transmit+0x484>
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	673b      	str	r3, [r7, #112]	; 0x70
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006a2a:	b29b      	uxth	r3, r3
 8006a2c:	461a      	mov	r2, r3
 8006a2e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006a30:	4413      	add	r3, r2
 8006a32:	673b      	str	r3, [r7, #112]	; 0x70
 8006a34:	68bb      	ldr	r3, [r7, #8]
 8006a36:	781b      	ldrb	r3, [r3, #0]
 8006a38:	00da      	lsls	r2, r3, #3
 8006a3a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006a3c:	4413      	add	r3, r2
 8006a3e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006a42:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006a44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a46:	2200      	movs	r2, #0
 8006a48:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006a50:	68bb      	ldr	r3, [r7, #8]
 8006a52:	785b      	ldrb	r3, [r3, #1]
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d12f      	bne.n	8006ab8 <HAL_PCD_EP_DB_Transmit+0x4f2>
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006a68:	b29b      	uxth	r3, r3
 8006a6a:	461a      	mov	r2, r3
 8006a6c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006a70:	4413      	add	r3, r2
 8006a72:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006a76:	68bb      	ldr	r3, [r7, #8]
 8006a78:	781b      	ldrb	r3, [r3, #0]
 8006a7a:	00da      	lsls	r2, r3, #3
 8006a7c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006a80:	4413      	add	r3, r2
 8006a82:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006a86:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006a8a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006a8e:	881b      	ldrh	r3, [r3, #0]
 8006a90:	b29b      	uxth	r3, r3
 8006a92:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006a96:	b29a      	uxth	r2, r3
 8006a98:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006a9c:	801a      	strh	r2, [r3, #0]
 8006a9e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006aa2:	881b      	ldrh	r3, [r3, #0]
 8006aa4:	b29b      	uxth	r3, r3
 8006aa6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006aaa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006aae:	b29a      	uxth	r2, r3
 8006ab0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006ab4:	801a      	strh	r2, [r3, #0]
 8006ab6:	e017      	b.n	8006ae8 <HAL_PCD_EP_DB_Transmit+0x522>
 8006ab8:	68bb      	ldr	r3, [r7, #8]
 8006aba:	785b      	ldrb	r3, [r3, #1]
 8006abc:	2b01      	cmp	r3, #1
 8006abe:	d113      	bne.n	8006ae8 <HAL_PCD_EP_DB_Transmit+0x522>
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ac8:	b29b      	uxth	r3, r3
 8006aca:	461a      	mov	r2, r3
 8006acc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006ace:	4413      	add	r3, r2
 8006ad0:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006ad2:	68bb      	ldr	r3, [r7, #8]
 8006ad4:	781b      	ldrb	r3, [r3, #0]
 8006ad6:	00da      	lsls	r2, r3, #3
 8006ad8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006ada:	4413      	add	r3, r2
 8006adc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006ae0:	67bb      	str	r3, [r7, #120]	; 0x78
 8006ae2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006ae4:	2200      	movs	r2, #0
 8006ae6:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8006ae8:	68bb      	ldr	r3, [r7, #8]
 8006aea:	781b      	ldrb	r3, [r3, #0]
 8006aec:	4619      	mov	r1, r3
 8006aee:	68f8      	ldr	r0, [r7, #12]
 8006af0:	f00a fc6d 	bl	80113ce <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8006af4:	88fb      	ldrh	r3, [r7, #6]
 8006af6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	f040 8104 	bne.w	8006d08 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	461a      	mov	r2, r3
 8006b06:	68bb      	ldr	r3, [r7, #8]
 8006b08:	781b      	ldrb	r3, [r3, #0]
 8006b0a:	009b      	lsls	r3, r3, #2
 8006b0c:	4413      	add	r3, r2
 8006b0e:	881b      	ldrh	r3, [r3, #0]
 8006b10:	b29b      	uxth	r3, r3
 8006b12:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b1a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	461a      	mov	r2, r3
 8006b24:	68bb      	ldr	r3, [r7, #8]
 8006b26:	781b      	ldrb	r3, [r3, #0]
 8006b28:	009b      	lsls	r3, r3, #2
 8006b2a:	441a      	add	r2, r3
 8006b2c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8006b30:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b34:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b38:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006b3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b40:	b29b      	uxth	r3, r3
 8006b42:	8013      	strh	r3, [r2, #0]
 8006b44:	e0e0      	b.n	8006d08 <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8006b46:	88fb      	ldrh	r3, [r7, #6]
 8006b48:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d121      	bne.n	8006b94 <HAL_PCD_EP_DB_Transmit+0x5ce>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	461a      	mov	r2, r3
 8006b56:	68bb      	ldr	r3, [r7, #8]
 8006b58:	781b      	ldrb	r3, [r3, #0]
 8006b5a:	009b      	lsls	r3, r3, #2
 8006b5c:	4413      	add	r3, r2
 8006b5e:	881b      	ldrh	r3, [r3, #0]
 8006b60:	b29b      	uxth	r3, r3
 8006b62:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b6a:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	461a      	mov	r2, r3
 8006b74:	68bb      	ldr	r3, [r7, #8]
 8006b76:	781b      	ldrb	r3, [r3, #0]
 8006b78:	009b      	lsls	r3, r3, #2
 8006b7a:	441a      	add	r2, r3
 8006b7c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8006b80:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b84:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b88:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006b8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b90:	b29b      	uxth	r3, r3
 8006b92:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8006b94:	68bb      	ldr	r3, [r7, #8]
 8006b96:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006b9a:	2b01      	cmp	r3, #1
 8006b9c:	f040 80b4 	bne.w	8006d08 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 8006ba0:	68bb      	ldr	r3, [r7, #8]
 8006ba2:	695a      	ldr	r2, [r3, #20]
 8006ba4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006ba8:	441a      	add	r2, r3
 8006baa:	68bb      	ldr	r3, [r7, #8]
 8006bac:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8006bae:	68bb      	ldr	r3, [r7, #8]
 8006bb0:	69da      	ldr	r2, [r3, #28]
 8006bb2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006bb6:	441a      	add	r2, r3
 8006bb8:	68bb      	ldr	r3, [r7, #8]
 8006bba:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8006bbc:	68bb      	ldr	r3, [r7, #8]
 8006bbe:	6a1a      	ldr	r2, [r3, #32]
 8006bc0:	68bb      	ldr	r3, [r7, #8]
 8006bc2:	691b      	ldr	r3, [r3, #16]
 8006bc4:	429a      	cmp	r2, r3
 8006bc6:	d309      	bcc.n	8006bdc <HAL_PCD_EP_DB_Transmit+0x616>
        {
          len = ep->maxpacket;
 8006bc8:	68bb      	ldr	r3, [r7, #8]
 8006bca:	691b      	ldr	r3, [r3, #16]
 8006bcc:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8006bce:	68bb      	ldr	r3, [r7, #8]
 8006bd0:	6a1a      	ldr	r2, [r3, #32]
 8006bd2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006bd4:	1ad2      	subs	r2, r2, r3
 8006bd6:	68bb      	ldr	r3, [r7, #8]
 8006bd8:	621a      	str	r2, [r3, #32]
 8006bda:	e015      	b.n	8006c08 <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else if (ep->xfer_len_db == 0U)
 8006bdc:	68bb      	ldr	r3, [r7, #8]
 8006bde:	6a1b      	ldr	r3, [r3, #32]
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d107      	bne.n	8006bf4 <HAL_PCD_EP_DB_Transmit+0x62e>
        {
          len = TxPctSize;
 8006be4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006be8:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8006bea:	68bb      	ldr	r3, [r7, #8]
 8006bec:	2200      	movs	r2, #0
 8006bee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8006bf2:	e009      	b.n	8006c08 <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else
        {
          len = ep->xfer_len_db;
 8006bf4:	68bb      	ldr	r3, [r7, #8]
 8006bf6:	6a1b      	ldr	r3, [r3, #32]
 8006bf8:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8006bfa:	68bb      	ldr	r3, [r7, #8]
 8006bfc:	2200      	movs	r2, #0
 8006bfe:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8006c00:	68bb      	ldr	r3, [r7, #8]
 8006c02:	2200      	movs	r2, #0
 8006c04:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	663b      	str	r3, [r7, #96]	; 0x60
 8006c0e:	68bb      	ldr	r3, [r7, #8]
 8006c10:	785b      	ldrb	r3, [r3, #1]
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d155      	bne.n	8006cc2 <HAL_PCD_EP_DB_Transmit+0x6fc>
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	65bb      	str	r3, [r7, #88]	; 0x58
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c24:	b29b      	uxth	r3, r3
 8006c26:	461a      	mov	r2, r3
 8006c28:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006c2a:	4413      	add	r3, r2
 8006c2c:	65bb      	str	r3, [r7, #88]	; 0x58
 8006c2e:	68bb      	ldr	r3, [r7, #8]
 8006c30:	781b      	ldrb	r3, [r3, #0]
 8006c32:	00da      	lsls	r2, r3, #3
 8006c34:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006c36:	4413      	add	r3, r2
 8006c38:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006c3c:	657b      	str	r3, [r7, #84]	; 0x54
 8006c3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006c40:	2b3e      	cmp	r3, #62	; 0x3e
 8006c42:	d916      	bls.n	8006c72 <HAL_PCD_EP_DB_Transmit+0x6ac>
 8006c44:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006c46:	095b      	lsrs	r3, r3, #5
 8006c48:	677b      	str	r3, [r7, #116]	; 0x74
 8006c4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006c4c:	f003 031f 	and.w	r3, r3, #31
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d102      	bne.n	8006c5a <HAL_PCD_EP_DB_Transmit+0x694>
 8006c54:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006c56:	3b01      	subs	r3, #1
 8006c58:	677b      	str	r3, [r7, #116]	; 0x74
 8006c5a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006c5c:	b29b      	uxth	r3, r3
 8006c5e:	029b      	lsls	r3, r3, #10
 8006c60:	b29b      	uxth	r3, r3
 8006c62:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c66:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c6a:	b29a      	uxth	r2, r3
 8006c6c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006c6e:	801a      	strh	r2, [r3, #0]
 8006c70:	e040      	b.n	8006cf4 <HAL_PCD_EP_DB_Transmit+0x72e>
 8006c72:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d112      	bne.n	8006c9e <HAL_PCD_EP_DB_Transmit+0x6d8>
 8006c78:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006c7a:	881b      	ldrh	r3, [r3, #0]
 8006c7c:	b29b      	uxth	r3, r3
 8006c7e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006c82:	b29a      	uxth	r2, r3
 8006c84:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006c86:	801a      	strh	r2, [r3, #0]
 8006c88:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006c8a:	881b      	ldrh	r3, [r3, #0]
 8006c8c:	b29b      	uxth	r3, r3
 8006c8e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c92:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c96:	b29a      	uxth	r2, r3
 8006c98:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006c9a:	801a      	strh	r2, [r3, #0]
 8006c9c:	e02a      	b.n	8006cf4 <HAL_PCD_EP_DB_Transmit+0x72e>
 8006c9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006ca0:	085b      	lsrs	r3, r3, #1
 8006ca2:	677b      	str	r3, [r7, #116]	; 0x74
 8006ca4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006ca6:	f003 0301 	and.w	r3, r3, #1
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d002      	beq.n	8006cb4 <HAL_PCD_EP_DB_Transmit+0x6ee>
 8006cae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006cb0:	3301      	adds	r3, #1
 8006cb2:	677b      	str	r3, [r7, #116]	; 0x74
 8006cb4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006cb6:	b29b      	uxth	r3, r3
 8006cb8:	029b      	lsls	r3, r3, #10
 8006cba:	b29a      	uxth	r2, r3
 8006cbc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006cbe:	801a      	strh	r2, [r3, #0]
 8006cc0:	e018      	b.n	8006cf4 <HAL_PCD_EP_DB_Transmit+0x72e>
 8006cc2:	68bb      	ldr	r3, [r7, #8]
 8006cc4:	785b      	ldrb	r3, [r3, #1]
 8006cc6:	2b01      	cmp	r3, #1
 8006cc8:	d114      	bne.n	8006cf4 <HAL_PCD_EP_DB_Transmit+0x72e>
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006cd2:	b29b      	uxth	r3, r3
 8006cd4:	461a      	mov	r2, r3
 8006cd6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006cd8:	4413      	add	r3, r2
 8006cda:	663b      	str	r3, [r7, #96]	; 0x60
 8006cdc:	68bb      	ldr	r3, [r7, #8]
 8006cde:	781b      	ldrb	r3, [r3, #0]
 8006ce0:	00da      	lsls	r2, r3, #3
 8006ce2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006ce4:	4413      	add	r3, r2
 8006ce6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006cea:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006cec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006cee:	b29a      	uxth	r2, r3
 8006cf0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006cf2:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	6818      	ldr	r0, [r3, #0]
 8006cf8:	68bb      	ldr	r3, [r7, #8]
 8006cfa:	6959      	ldr	r1, [r3, #20]
 8006cfc:	68bb      	ldr	r3, [r7, #8]
 8006cfe:	895a      	ldrh	r2, [r3, #10]
 8006d00:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006d02:	b29b      	uxth	r3, r3
 8006d04:	f006 fa17 	bl	800d136 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	461a      	mov	r2, r3
 8006d0e:	68bb      	ldr	r3, [r7, #8]
 8006d10:	781b      	ldrb	r3, [r3, #0]
 8006d12:	009b      	lsls	r3, r3, #2
 8006d14:	4413      	add	r3, r2
 8006d16:	881b      	ldrh	r3, [r3, #0]
 8006d18:	b29b      	uxth	r3, r3
 8006d1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d1e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006d22:	823b      	strh	r3, [r7, #16]
 8006d24:	8a3b      	ldrh	r3, [r7, #16]
 8006d26:	f083 0310 	eor.w	r3, r3, #16
 8006d2a:	823b      	strh	r3, [r7, #16]
 8006d2c:	8a3b      	ldrh	r3, [r7, #16]
 8006d2e:	f083 0320 	eor.w	r3, r3, #32
 8006d32:	823b      	strh	r3, [r7, #16]
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	461a      	mov	r2, r3
 8006d3a:	68bb      	ldr	r3, [r7, #8]
 8006d3c:	781b      	ldrb	r3, [r3, #0]
 8006d3e:	009b      	lsls	r3, r3, #2
 8006d40:	441a      	add	r2, r3
 8006d42:	8a3b      	ldrh	r3, [r7, #16]
 8006d44:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d48:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d4c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d54:	b29b      	uxth	r3, r3
 8006d56:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8006d58:	2300      	movs	r3, #0
}
 8006d5a:	4618      	mov	r0, r3
 8006d5c:	3788      	adds	r7, #136	; 0x88
 8006d5e:	46bd      	mov	sp, r7
 8006d60:	bd80      	pop	{r7, pc}

08006d62 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8006d62:	b480      	push	{r7}
 8006d64:	b087      	sub	sp, #28
 8006d66:	af00      	add	r7, sp, #0
 8006d68:	60f8      	str	r0, [r7, #12]
 8006d6a:	607b      	str	r3, [r7, #4]
 8006d6c:	460b      	mov	r3, r1
 8006d6e:	817b      	strh	r3, [r7, #10]
 8006d70:	4613      	mov	r3, r2
 8006d72:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8006d74:	897b      	ldrh	r3, [r7, #10]
 8006d76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d7a:	b29b      	uxth	r3, r3
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d00b      	beq.n	8006d98 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006d80:	897b      	ldrh	r3, [r7, #10]
 8006d82:	f003 0307 	and.w	r3, r3, #7
 8006d86:	1c5a      	adds	r2, r3, #1
 8006d88:	4613      	mov	r3, r2
 8006d8a:	009b      	lsls	r3, r3, #2
 8006d8c:	4413      	add	r3, r2
 8006d8e:	00db      	lsls	r3, r3, #3
 8006d90:	68fa      	ldr	r2, [r7, #12]
 8006d92:	4413      	add	r3, r2
 8006d94:	617b      	str	r3, [r7, #20]
 8006d96:	e009      	b.n	8006dac <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006d98:	897a      	ldrh	r2, [r7, #10]
 8006d9a:	4613      	mov	r3, r2
 8006d9c:	009b      	lsls	r3, r3, #2
 8006d9e:	4413      	add	r3, r2
 8006da0:	00db      	lsls	r3, r3, #3
 8006da2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8006da6:	68fa      	ldr	r2, [r7, #12]
 8006da8:	4413      	add	r3, r2
 8006daa:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8006dac:	893b      	ldrh	r3, [r7, #8]
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d107      	bne.n	8006dc2 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8006db2:	697b      	ldr	r3, [r7, #20]
 8006db4:	2200      	movs	r2, #0
 8006db6:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	b29a      	uxth	r2, r3
 8006dbc:	697b      	ldr	r3, [r7, #20]
 8006dbe:	80da      	strh	r2, [r3, #6]
 8006dc0:	e00b      	b.n	8006dda <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8006dc2:	697b      	ldr	r3, [r7, #20]
 8006dc4:	2201      	movs	r2, #1
 8006dc6:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	b29a      	uxth	r2, r3
 8006dcc:	697b      	ldr	r3, [r7, #20]
 8006dce:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	0c1b      	lsrs	r3, r3, #16
 8006dd4:	b29a      	uxth	r2, r3
 8006dd6:	697b      	ldr	r3, [r7, #20]
 8006dd8:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8006dda:	2300      	movs	r3, #0
}
 8006ddc:	4618      	mov	r0, r3
 8006dde:	371c      	adds	r7, #28
 8006de0:	46bd      	mov	sp, r7
 8006de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de6:	4770      	bx	lr

08006de8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8006de8:	b480      	push	{r7}
 8006dea:	b085      	sub	sp, #20
 8006dec:	af00      	add	r7, sp, #0
 8006dee:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	2201      	movs	r2, #1
 8006dfa:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	2200      	movs	r2, #0
 8006e02:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8006e0c:	b29b      	uxth	r3, r3
 8006e0e:	f043 0301 	orr.w	r3, r3, #1
 8006e12:	b29a      	uxth	r2, r3
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8006e20:	b29b      	uxth	r3, r3
 8006e22:	f043 0302 	orr.w	r3, r3, #2
 8006e26:	b29a      	uxth	r2, r3
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8006e2e:	2300      	movs	r3, #0
}
 8006e30:	4618      	mov	r0, r3
 8006e32:	3714      	adds	r7, #20
 8006e34:	46bd      	mov	sp, r7
 8006e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e3a:	4770      	bx	lr

08006e3c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006e3c:	b480      	push	{r7}
 8006e3e:	b085      	sub	sp, #20
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d141      	bne.n	8006ece <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006e4a:	4b4b      	ldr	r3, [pc, #300]	; (8006f78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006e52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e56:	d131      	bne.n	8006ebc <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006e58:	4b47      	ldr	r3, [pc, #284]	; (8006f78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006e5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006e5e:	4a46      	ldr	r2, [pc, #280]	; (8006f78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006e60:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006e64:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006e68:	4b43      	ldr	r3, [pc, #268]	; (8006f78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006e70:	4a41      	ldr	r2, [pc, #260]	; (8006f78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006e72:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006e76:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006e78:	4b40      	ldr	r3, [pc, #256]	; (8006f7c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	2232      	movs	r2, #50	; 0x32
 8006e7e:	fb02 f303 	mul.w	r3, r2, r3
 8006e82:	4a3f      	ldr	r2, [pc, #252]	; (8006f80 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006e84:	fba2 2303 	umull	r2, r3, r2, r3
 8006e88:	0c9b      	lsrs	r3, r3, #18
 8006e8a:	3301      	adds	r3, #1
 8006e8c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006e8e:	e002      	b.n	8006e96 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	3b01      	subs	r3, #1
 8006e94:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006e96:	4b38      	ldr	r3, [pc, #224]	; (8006f78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006e98:	695b      	ldr	r3, [r3, #20]
 8006e9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006e9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ea2:	d102      	bne.n	8006eaa <HAL_PWREx_ControlVoltageScaling+0x6e>
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d1f2      	bne.n	8006e90 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006eaa:	4b33      	ldr	r3, [pc, #204]	; (8006f78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006eac:	695b      	ldr	r3, [r3, #20]
 8006eae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006eb2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006eb6:	d158      	bne.n	8006f6a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006eb8:	2303      	movs	r3, #3
 8006eba:	e057      	b.n	8006f6c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006ebc:	4b2e      	ldr	r3, [pc, #184]	; (8006f78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006ebe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006ec2:	4a2d      	ldr	r2, [pc, #180]	; (8006f78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006ec4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006ec8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8006ecc:	e04d      	b.n	8006f6a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006ed4:	d141      	bne.n	8006f5a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006ed6:	4b28      	ldr	r3, [pc, #160]	; (8006f78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006ede:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ee2:	d131      	bne.n	8006f48 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006ee4:	4b24      	ldr	r3, [pc, #144]	; (8006f78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006ee6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006eea:	4a23      	ldr	r2, [pc, #140]	; (8006f78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006eec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006ef0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006ef4:	4b20      	ldr	r3, [pc, #128]	; (8006f78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006efc:	4a1e      	ldr	r2, [pc, #120]	; (8006f78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006efe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006f02:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006f04:	4b1d      	ldr	r3, [pc, #116]	; (8006f7c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	2232      	movs	r2, #50	; 0x32
 8006f0a:	fb02 f303 	mul.w	r3, r2, r3
 8006f0e:	4a1c      	ldr	r2, [pc, #112]	; (8006f80 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006f10:	fba2 2303 	umull	r2, r3, r2, r3
 8006f14:	0c9b      	lsrs	r3, r3, #18
 8006f16:	3301      	adds	r3, #1
 8006f18:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006f1a:	e002      	b.n	8006f22 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	3b01      	subs	r3, #1
 8006f20:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006f22:	4b15      	ldr	r3, [pc, #84]	; (8006f78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006f24:	695b      	ldr	r3, [r3, #20]
 8006f26:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006f2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f2e:	d102      	bne.n	8006f36 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d1f2      	bne.n	8006f1c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006f36:	4b10      	ldr	r3, [pc, #64]	; (8006f78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006f38:	695b      	ldr	r3, [r3, #20]
 8006f3a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006f3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f42:	d112      	bne.n	8006f6a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006f44:	2303      	movs	r3, #3
 8006f46:	e011      	b.n	8006f6c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006f48:	4b0b      	ldr	r3, [pc, #44]	; (8006f78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006f4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006f4e:	4a0a      	ldr	r2, [pc, #40]	; (8006f78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006f50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006f54:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8006f58:	e007      	b.n	8006f6a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8006f5a:	4b07      	ldr	r3, [pc, #28]	; (8006f78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006f62:	4a05      	ldr	r2, [pc, #20]	; (8006f78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006f64:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006f68:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8006f6a:	2300      	movs	r3, #0
}
 8006f6c:	4618      	mov	r0, r3
 8006f6e:	3714      	adds	r7, #20
 8006f70:	46bd      	mov	sp, r7
 8006f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f76:	4770      	bx	lr
 8006f78:	40007000 	.word	0x40007000
 8006f7c:	20000000 	.word	0x20000000
 8006f80:	431bde83 	.word	0x431bde83

08006f84 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006f84:	b580      	push	{r7, lr}
 8006f86:	b088      	sub	sp, #32
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d101      	bne.n	8006f96 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006f92:	2301      	movs	r3, #1
 8006f94:	e306      	b.n	80075a4 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	f003 0301 	and.w	r3, r3, #1
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d075      	beq.n	800708e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006fa2:	4b97      	ldr	r3, [pc, #604]	; (8007200 <HAL_RCC_OscConfig+0x27c>)
 8006fa4:	689b      	ldr	r3, [r3, #8]
 8006fa6:	f003 030c 	and.w	r3, r3, #12
 8006faa:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006fac:	4b94      	ldr	r3, [pc, #592]	; (8007200 <HAL_RCC_OscConfig+0x27c>)
 8006fae:	68db      	ldr	r3, [r3, #12]
 8006fb0:	f003 0303 	and.w	r3, r3, #3
 8006fb4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8006fb6:	69bb      	ldr	r3, [r7, #24]
 8006fb8:	2b0c      	cmp	r3, #12
 8006fba:	d102      	bne.n	8006fc2 <HAL_RCC_OscConfig+0x3e>
 8006fbc:	697b      	ldr	r3, [r7, #20]
 8006fbe:	2b03      	cmp	r3, #3
 8006fc0:	d002      	beq.n	8006fc8 <HAL_RCC_OscConfig+0x44>
 8006fc2:	69bb      	ldr	r3, [r7, #24]
 8006fc4:	2b08      	cmp	r3, #8
 8006fc6:	d10b      	bne.n	8006fe0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006fc8:	4b8d      	ldr	r3, [pc, #564]	; (8007200 <HAL_RCC_OscConfig+0x27c>)
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d05b      	beq.n	800708c <HAL_RCC_OscConfig+0x108>
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	685b      	ldr	r3, [r3, #4]
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d157      	bne.n	800708c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006fdc:	2301      	movs	r3, #1
 8006fde:	e2e1      	b.n	80075a4 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	685b      	ldr	r3, [r3, #4]
 8006fe4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006fe8:	d106      	bne.n	8006ff8 <HAL_RCC_OscConfig+0x74>
 8006fea:	4b85      	ldr	r3, [pc, #532]	; (8007200 <HAL_RCC_OscConfig+0x27c>)
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	4a84      	ldr	r2, [pc, #528]	; (8007200 <HAL_RCC_OscConfig+0x27c>)
 8006ff0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006ff4:	6013      	str	r3, [r2, #0]
 8006ff6:	e01d      	b.n	8007034 <HAL_RCC_OscConfig+0xb0>
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	685b      	ldr	r3, [r3, #4]
 8006ffc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007000:	d10c      	bne.n	800701c <HAL_RCC_OscConfig+0x98>
 8007002:	4b7f      	ldr	r3, [pc, #508]	; (8007200 <HAL_RCC_OscConfig+0x27c>)
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	4a7e      	ldr	r2, [pc, #504]	; (8007200 <HAL_RCC_OscConfig+0x27c>)
 8007008:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800700c:	6013      	str	r3, [r2, #0]
 800700e:	4b7c      	ldr	r3, [pc, #496]	; (8007200 <HAL_RCC_OscConfig+0x27c>)
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	4a7b      	ldr	r2, [pc, #492]	; (8007200 <HAL_RCC_OscConfig+0x27c>)
 8007014:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007018:	6013      	str	r3, [r2, #0]
 800701a:	e00b      	b.n	8007034 <HAL_RCC_OscConfig+0xb0>
 800701c:	4b78      	ldr	r3, [pc, #480]	; (8007200 <HAL_RCC_OscConfig+0x27c>)
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	4a77      	ldr	r2, [pc, #476]	; (8007200 <HAL_RCC_OscConfig+0x27c>)
 8007022:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007026:	6013      	str	r3, [r2, #0]
 8007028:	4b75      	ldr	r3, [pc, #468]	; (8007200 <HAL_RCC_OscConfig+0x27c>)
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	4a74      	ldr	r2, [pc, #464]	; (8007200 <HAL_RCC_OscConfig+0x27c>)
 800702e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007032:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	685b      	ldr	r3, [r3, #4]
 8007038:	2b00      	cmp	r3, #0
 800703a:	d013      	beq.n	8007064 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800703c:	f7fc f912 	bl	8003264 <HAL_GetTick>
 8007040:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007042:	e008      	b.n	8007056 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007044:	f7fc f90e 	bl	8003264 <HAL_GetTick>
 8007048:	4602      	mov	r2, r0
 800704a:	693b      	ldr	r3, [r7, #16]
 800704c:	1ad3      	subs	r3, r2, r3
 800704e:	2b64      	cmp	r3, #100	; 0x64
 8007050:	d901      	bls.n	8007056 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007052:	2303      	movs	r3, #3
 8007054:	e2a6      	b.n	80075a4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007056:	4b6a      	ldr	r3, [pc, #424]	; (8007200 <HAL_RCC_OscConfig+0x27c>)
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800705e:	2b00      	cmp	r3, #0
 8007060:	d0f0      	beq.n	8007044 <HAL_RCC_OscConfig+0xc0>
 8007062:	e014      	b.n	800708e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007064:	f7fc f8fe 	bl	8003264 <HAL_GetTick>
 8007068:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800706a:	e008      	b.n	800707e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800706c:	f7fc f8fa 	bl	8003264 <HAL_GetTick>
 8007070:	4602      	mov	r2, r0
 8007072:	693b      	ldr	r3, [r7, #16]
 8007074:	1ad3      	subs	r3, r2, r3
 8007076:	2b64      	cmp	r3, #100	; 0x64
 8007078:	d901      	bls.n	800707e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800707a:	2303      	movs	r3, #3
 800707c:	e292      	b.n	80075a4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800707e:	4b60      	ldr	r3, [pc, #384]	; (8007200 <HAL_RCC_OscConfig+0x27c>)
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007086:	2b00      	cmp	r3, #0
 8007088:	d1f0      	bne.n	800706c <HAL_RCC_OscConfig+0xe8>
 800708a:	e000      	b.n	800708e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800708c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	f003 0302 	and.w	r3, r3, #2
 8007096:	2b00      	cmp	r3, #0
 8007098:	d075      	beq.n	8007186 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800709a:	4b59      	ldr	r3, [pc, #356]	; (8007200 <HAL_RCC_OscConfig+0x27c>)
 800709c:	689b      	ldr	r3, [r3, #8]
 800709e:	f003 030c 	and.w	r3, r3, #12
 80070a2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80070a4:	4b56      	ldr	r3, [pc, #344]	; (8007200 <HAL_RCC_OscConfig+0x27c>)
 80070a6:	68db      	ldr	r3, [r3, #12]
 80070a8:	f003 0303 	and.w	r3, r3, #3
 80070ac:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80070ae:	69bb      	ldr	r3, [r7, #24]
 80070b0:	2b0c      	cmp	r3, #12
 80070b2:	d102      	bne.n	80070ba <HAL_RCC_OscConfig+0x136>
 80070b4:	697b      	ldr	r3, [r7, #20]
 80070b6:	2b02      	cmp	r3, #2
 80070b8:	d002      	beq.n	80070c0 <HAL_RCC_OscConfig+0x13c>
 80070ba:	69bb      	ldr	r3, [r7, #24]
 80070bc:	2b04      	cmp	r3, #4
 80070be:	d11f      	bne.n	8007100 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80070c0:	4b4f      	ldr	r3, [pc, #316]	; (8007200 <HAL_RCC_OscConfig+0x27c>)
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d005      	beq.n	80070d8 <HAL_RCC_OscConfig+0x154>
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	68db      	ldr	r3, [r3, #12]
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d101      	bne.n	80070d8 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80070d4:	2301      	movs	r3, #1
 80070d6:	e265      	b.n	80075a4 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80070d8:	4b49      	ldr	r3, [pc, #292]	; (8007200 <HAL_RCC_OscConfig+0x27c>)
 80070da:	685b      	ldr	r3, [r3, #4]
 80070dc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	691b      	ldr	r3, [r3, #16]
 80070e4:	061b      	lsls	r3, r3, #24
 80070e6:	4946      	ldr	r1, [pc, #280]	; (8007200 <HAL_RCC_OscConfig+0x27c>)
 80070e8:	4313      	orrs	r3, r2
 80070ea:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80070ec:	4b45      	ldr	r3, [pc, #276]	; (8007204 <HAL_RCC_OscConfig+0x280>)
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	4618      	mov	r0, r3
 80070f2:	f7fa fe3b 	bl	8001d6c <HAL_InitTick>
 80070f6:	4603      	mov	r3, r0
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d043      	beq.n	8007184 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80070fc:	2301      	movs	r3, #1
 80070fe:	e251      	b.n	80075a4 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	68db      	ldr	r3, [r3, #12]
 8007104:	2b00      	cmp	r3, #0
 8007106:	d023      	beq.n	8007150 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007108:	4b3d      	ldr	r3, [pc, #244]	; (8007200 <HAL_RCC_OscConfig+0x27c>)
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	4a3c      	ldr	r2, [pc, #240]	; (8007200 <HAL_RCC_OscConfig+0x27c>)
 800710e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007112:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007114:	f7fc f8a6 	bl	8003264 <HAL_GetTick>
 8007118:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800711a:	e008      	b.n	800712e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800711c:	f7fc f8a2 	bl	8003264 <HAL_GetTick>
 8007120:	4602      	mov	r2, r0
 8007122:	693b      	ldr	r3, [r7, #16]
 8007124:	1ad3      	subs	r3, r2, r3
 8007126:	2b02      	cmp	r3, #2
 8007128:	d901      	bls.n	800712e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800712a:	2303      	movs	r3, #3
 800712c:	e23a      	b.n	80075a4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800712e:	4b34      	ldr	r3, [pc, #208]	; (8007200 <HAL_RCC_OscConfig+0x27c>)
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007136:	2b00      	cmp	r3, #0
 8007138:	d0f0      	beq.n	800711c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800713a:	4b31      	ldr	r3, [pc, #196]	; (8007200 <HAL_RCC_OscConfig+0x27c>)
 800713c:	685b      	ldr	r3, [r3, #4]
 800713e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	691b      	ldr	r3, [r3, #16]
 8007146:	061b      	lsls	r3, r3, #24
 8007148:	492d      	ldr	r1, [pc, #180]	; (8007200 <HAL_RCC_OscConfig+0x27c>)
 800714a:	4313      	orrs	r3, r2
 800714c:	604b      	str	r3, [r1, #4]
 800714e:	e01a      	b.n	8007186 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007150:	4b2b      	ldr	r3, [pc, #172]	; (8007200 <HAL_RCC_OscConfig+0x27c>)
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	4a2a      	ldr	r2, [pc, #168]	; (8007200 <HAL_RCC_OscConfig+0x27c>)
 8007156:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800715a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800715c:	f7fc f882 	bl	8003264 <HAL_GetTick>
 8007160:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007162:	e008      	b.n	8007176 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007164:	f7fc f87e 	bl	8003264 <HAL_GetTick>
 8007168:	4602      	mov	r2, r0
 800716a:	693b      	ldr	r3, [r7, #16]
 800716c:	1ad3      	subs	r3, r2, r3
 800716e:	2b02      	cmp	r3, #2
 8007170:	d901      	bls.n	8007176 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8007172:	2303      	movs	r3, #3
 8007174:	e216      	b.n	80075a4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007176:	4b22      	ldr	r3, [pc, #136]	; (8007200 <HAL_RCC_OscConfig+0x27c>)
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800717e:	2b00      	cmp	r3, #0
 8007180:	d1f0      	bne.n	8007164 <HAL_RCC_OscConfig+0x1e0>
 8007182:	e000      	b.n	8007186 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007184:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	f003 0308 	and.w	r3, r3, #8
 800718e:	2b00      	cmp	r3, #0
 8007190:	d041      	beq.n	8007216 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	695b      	ldr	r3, [r3, #20]
 8007196:	2b00      	cmp	r3, #0
 8007198:	d01c      	beq.n	80071d4 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800719a:	4b19      	ldr	r3, [pc, #100]	; (8007200 <HAL_RCC_OscConfig+0x27c>)
 800719c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80071a0:	4a17      	ldr	r2, [pc, #92]	; (8007200 <HAL_RCC_OscConfig+0x27c>)
 80071a2:	f043 0301 	orr.w	r3, r3, #1
 80071a6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80071aa:	f7fc f85b 	bl	8003264 <HAL_GetTick>
 80071ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80071b0:	e008      	b.n	80071c4 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80071b2:	f7fc f857 	bl	8003264 <HAL_GetTick>
 80071b6:	4602      	mov	r2, r0
 80071b8:	693b      	ldr	r3, [r7, #16]
 80071ba:	1ad3      	subs	r3, r2, r3
 80071bc:	2b02      	cmp	r3, #2
 80071be:	d901      	bls.n	80071c4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80071c0:	2303      	movs	r3, #3
 80071c2:	e1ef      	b.n	80075a4 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80071c4:	4b0e      	ldr	r3, [pc, #56]	; (8007200 <HAL_RCC_OscConfig+0x27c>)
 80071c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80071ca:	f003 0302 	and.w	r3, r3, #2
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d0ef      	beq.n	80071b2 <HAL_RCC_OscConfig+0x22e>
 80071d2:	e020      	b.n	8007216 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80071d4:	4b0a      	ldr	r3, [pc, #40]	; (8007200 <HAL_RCC_OscConfig+0x27c>)
 80071d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80071da:	4a09      	ldr	r2, [pc, #36]	; (8007200 <HAL_RCC_OscConfig+0x27c>)
 80071dc:	f023 0301 	bic.w	r3, r3, #1
 80071e0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80071e4:	f7fc f83e 	bl	8003264 <HAL_GetTick>
 80071e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80071ea:	e00d      	b.n	8007208 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80071ec:	f7fc f83a 	bl	8003264 <HAL_GetTick>
 80071f0:	4602      	mov	r2, r0
 80071f2:	693b      	ldr	r3, [r7, #16]
 80071f4:	1ad3      	subs	r3, r2, r3
 80071f6:	2b02      	cmp	r3, #2
 80071f8:	d906      	bls.n	8007208 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80071fa:	2303      	movs	r3, #3
 80071fc:	e1d2      	b.n	80075a4 <HAL_RCC_OscConfig+0x620>
 80071fe:	bf00      	nop
 8007200:	40021000 	.word	0x40021000
 8007204:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007208:	4b8c      	ldr	r3, [pc, #560]	; (800743c <HAL_RCC_OscConfig+0x4b8>)
 800720a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800720e:	f003 0302 	and.w	r3, r3, #2
 8007212:	2b00      	cmp	r3, #0
 8007214:	d1ea      	bne.n	80071ec <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	f003 0304 	and.w	r3, r3, #4
 800721e:	2b00      	cmp	r3, #0
 8007220:	f000 80a6 	beq.w	8007370 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007224:	2300      	movs	r3, #0
 8007226:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8007228:	4b84      	ldr	r3, [pc, #528]	; (800743c <HAL_RCC_OscConfig+0x4b8>)
 800722a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800722c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007230:	2b00      	cmp	r3, #0
 8007232:	d101      	bne.n	8007238 <HAL_RCC_OscConfig+0x2b4>
 8007234:	2301      	movs	r3, #1
 8007236:	e000      	b.n	800723a <HAL_RCC_OscConfig+0x2b6>
 8007238:	2300      	movs	r3, #0
 800723a:	2b00      	cmp	r3, #0
 800723c:	d00d      	beq.n	800725a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800723e:	4b7f      	ldr	r3, [pc, #508]	; (800743c <HAL_RCC_OscConfig+0x4b8>)
 8007240:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007242:	4a7e      	ldr	r2, [pc, #504]	; (800743c <HAL_RCC_OscConfig+0x4b8>)
 8007244:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007248:	6593      	str	r3, [r2, #88]	; 0x58
 800724a:	4b7c      	ldr	r3, [pc, #496]	; (800743c <HAL_RCC_OscConfig+0x4b8>)
 800724c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800724e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007252:	60fb      	str	r3, [r7, #12]
 8007254:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8007256:	2301      	movs	r3, #1
 8007258:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800725a:	4b79      	ldr	r3, [pc, #484]	; (8007440 <HAL_RCC_OscConfig+0x4bc>)
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007262:	2b00      	cmp	r3, #0
 8007264:	d118      	bne.n	8007298 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007266:	4b76      	ldr	r3, [pc, #472]	; (8007440 <HAL_RCC_OscConfig+0x4bc>)
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	4a75      	ldr	r2, [pc, #468]	; (8007440 <HAL_RCC_OscConfig+0x4bc>)
 800726c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007270:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007272:	f7fb fff7 	bl	8003264 <HAL_GetTick>
 8007276:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007278:	e008      	b.n	800728c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800727a:	f7fb fff3 	bl	8003264 <HAL_GetTick>
 800727e:	4602      	mov	r2, r0
 8007280:	693b      	ldr	r3, [r7, #16]
 8007282:	1ad3      	subs	r3, r2, r3
 8007284:	2b02      	cmp	r3, #2
 8007286:	d901      	bls.n	800728c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8007288:	2303      	movs	r3, #3
 800728a:	e18b      	b.n	80075a4 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800728c:	4b6c      	ldr	r3, [pc, #432]	; (8007440 <HAL_RCC_OscConfig+0x4bc>)
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007294:	2b00      	cmp	r3, #0
 8007296:	d0f0      	beq.n	800727a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	689b      	ldr	r3, [r3, #8]
 800729c:	2b01      	cmp	r3, #1
 800729e:	d108      	bne.n	80072b2 <HAL_RCC_OscConfig+0x32e>
 80072a0:	4b66      	ldr	r3, [pc, #408]	; (800743c <HAL_RCC_OscConfig+0x4b8>)
 80072a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80072a6:	4a65      	ldr	r2, [pc, #404]	; (800743c <HAL_RCC_OscConfig+0x4b8>)
 80072a8:	f043 0301 	orr.w	r3, r3, #1
 80072ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80072b0:	e024      	b.n	80072fc <HAL_RCC_OscConfig+0x378>
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	689b      	ldr	r3, [r3, #8]
 80072b6:	2b05      	cmp	r3, #5
 80072b8:	d110      	bne.n	80072dc <HAL_RCC_OscConfig+0x358>
 80072ba:	4b60      	ldr	r3, [pc, #384]	; (800743c <HAL_RCC_OscConfig+0x4b8>)
 80072bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80072c0:	4a5e      	ldr	r2, [pc, #376]	; (800743c <HAL_RCC_OscConfig+0x4b8>)
 80072c2:	f043 0304 	orr.w	r3, r3, #4
 80072c6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80072ca:	4b5c      	ldr	r3, [pc, #368]	; (800743c <HAL_RCC_OscConfig+0x4b8>)
 80072cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80072d0:	4a5a      	ldr	r2, [pc, #360]	; (800743c <HAL_RCC_OscConfig+0x4b8>)
 80072d2:	f043 0301 	orr.w	r3, r3, #1
 80072d6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80072da:	e00f      	b.n	80072fc <HAL_RCC_OscConfig+0x378>
 80072dc:	4b57      	ldr	r3, [pc, #348]	; (800743c <HAL_RCC_OscConfig+0x4b8>)
 80072de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80072e2:	4a56      	ldr	r2, [pc, #344]	; (800743c <HAL_RCC_OscConfig+0x4b8>)
 80072e4:	f023 0301 	bic.w	r3, r3, #1
 80072e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80072ec:	4b53      	ldr	r3, [pc, #332]	; (800743c <HAL_RCC_OscConfig+0x4b8>)
 80072ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80072f2:	4a52      	ldr	r2, [pc, #328]	; (800743c <HAL_RCC_OscConfig+0x4b8>)
 80072f4:	f023 0304 	bic.w	r3, r3, #4
 80072f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	689b      	ldr	r3, [r3, #8]
 8007300:	2b00      	cmp	r3, #0
 8007302:	d016      	beq.n	8007332 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007304:	f7fb ffae 	bl	8003264 <HAL_GetTick>
 8007308:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800730a:	e00a      	b.n	8007322 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800730c:	f7fb ffaa 	bl	8003264 <HAL_GetTick>
 8007310:	4602      	mov	r2, r0
 8007312:	693b      	ldr	r3, [r7, #16]
 8007314:	1ad3      	subs	r3, r2, r3
 8007316:	f241 3288 	movw	r2, #5000	; 0x1388
 800731a:	4293      	cmp	r3, r2
 800731c:	d901      	bls.n	8007322 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800731e:	2303      	movs	r3, #3
 8007320:	e140      	b.n	80075a4 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007322:	4b46      	ldr	r3, [pc, #280]	; (800743c <HAL_RCC_OscConfig+0x4b8>)
 8007324:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007328:	f003 0302 	and.w	r3, r3, #2
 800732c:	2b00      	cmp	r3, #0
 800732e:	d0ed      	beq.n	800730c <HAL_RCC_OscConfig+0x388>
 8007330:	e015      	b.n	800735e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007332:	f7fb ff97 	bl	8003264 <HAL_GetTick>
 8007336:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007338:	e00a      	b.n	8007350 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800733a:	f7fb ff93 	bl	8003264 <HAL_GetTick>
 800733e:	4602      	mov	r2, r0
 8007340:	693b      	ldr	r3, [r7, #16]
 8007342:	1ad3      	subs	r3, r2, r3
 8007344:	f241 3288 	movw	r2, #5000	; 0x1388
 8007348:	4293      	cmp	r3, r2
 800734a:	d901      	bls.n	8007350 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800734c:	2303      	movs	r3, #3
 800734e:	e129      	b.n	80075a4 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007350:	4b3a      	ldr	r3, [pc, #232]	; (800743c <HAL_RCC_OscConfig+0x4b8>)
 8007352:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007356:	f003 0302 	and.w	r3, r3, #2
 800735a:	2b00      	cmp	r3, #0
 800735c:	d1ed      	bne.n	800733a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800735e:	7ffb      	ldrb	r3, [r7, #31]
 8007360:	2b01      	cmp	r3, #1
 8007362:	d105      	bne.n	8007370 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007364:	4b35      	ldr	r3, [pc, #212]	; (800743c <HAL_RCC_OscConfig+0x4b8>)
 8007366:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007368:	4a34      	ldr	r2, [pc, #208]	; (800743c <HAL_RCC_OscConfig+0x4b8>)
 800736a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800736e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	f003 0320 	and.w	r3, r3, #32
 8007378:	2b00      	cmp	r3, #0
 800737a:	d03c      	beq.n	80073f6 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	699b      	ldr	r3, [r3, #24]
 8007380:	2b00      	cmp	r3, #0
 8007382:	d01c      	beq.n	80073be <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007384:	4b2d      	ldr	r3, [pc, #180]	; (800743c <HAL_RCC_OscConfig+0x4b8>)
 8007386:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800738a:	4a2c      	ldr	r2, [pc, #176]	; (800743c <HAL_RCC_OscConfig+0x4b8>)
 800738c:	f043 0301 	orr.w	r3, r3, #1
 8007390:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007394:	f7fb ff66 	bl	8003264 <HAL_GetTick>
 8007398:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800739a:	e008      	b.n	80073ae <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800739c:	f7fb ff62 	bl	8003264 <HAL_GetTick>
 80073a0:	4602      	mov	r2, r0
 80073a2:	693b      	ldr	r3, [r7, #16]
 80073a4:	1ad3      	subs	r3, r2, r3
 80073a6:	2b02      	cmp	r3, #2
 80073a8:	d901      	bls.n	80073ae <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80073aa:	2303      	movs	r3, #3
 80073ac:	e0fa      	b.n	80075a4 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80073ae:	4b23      	ldr	r3, [pc, #140]	; (800743c <HAL_RCC_OscConfig+0x4b8>)
 80073b0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80073b4:	f003 0302 	and.w	r3, r3, #2
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d0ef      	beq.n	800739c <HAL_RCC_OscConfig+0x418>
 80073bc:	e01b      	b.n	80073f6 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80073be:	4b1f      	ldr	r3, [pc, #124]	; (800743c <HAL_RCC_OscConfig+0x4b8>)
 80073c0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80073c4:	4a1d      	ldr	r2, [pc, #116]	; (800743c <HAL_RCC_OscConfig+0x4b8>)
 80073c6:	f023 0301 	bic.w	r3, r3, #1
 80073ca:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80073ce:	f7fb ff49 	bl	8003264 <HAL_GetTick>
 80073d2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80073d4:	e008      	b.n	80073e8 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80073d6:	f7fb ff45 	bl	8003264 <HAL_GetTick>
 80073da:	4602      	mov	r2, r0
 80073dc:	693b      	ldr	r3, [r7, #16]
 80073de:	1ad3      	subs	r3, r2, r3
 80073e0:	2b02      	cmp	r3, #2
 80073e2:	d901      	bls.n	80073e8 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80073e4:	2303      	movs	r3, #3
 80073e6:	e0dd      	b.n	80075a4 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80073e8:	4b14      	ldr	r3, [pc, #80]	; (800743c <HAL_RCC_OscConfig+0x4b8>)
 80073ea:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80073ee:	f003 0302 	and.w	r3, r3, #2
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d1ef      	bne.n	80073d6 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	69db      	ldr	r3, [r3, #28]
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	f000 80d1 	beq.w	80075a2 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007400:	4b0e      	ldr	r3, [pc, #56]	; (800743c <HAL_RCC_OscConfig+0x4b8>)
 8007402:	689b      	ldr	r3, [r3, #8]
 8007404:	f003 030c 	and.w	r3, r3, #12
 8007408:	2b0c      	cmp	r3, #12
 800740a:	f000 808b 	beq.w	8007524 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	69db      	ldr	r3, [r3, #28]
 8007412:	2b02      	cmp	r3, #2
 8007414:	d15e      	bne.n	80074d4 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007416:	4b09      	ldr	r3, [pc, #36]	; (800743c <HAL_RCC_OscConfig+0x4b8>)
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	4a08      	ldr	r2, [pc, #32]	; (800743c <HAL_RCC_OscConfig+0x4b8>)
 800741c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007420:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007422:	f7fb ff1f 	bl	8003264 <HAL_GetTick>
 8007426:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007428:	e00c      	b.n	8007444 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800742a:	f7fb ff1b 	bl	8003264 <HAL_GetTick>
 800742e:	4602      	mov	r2, r0
 8007430:	693b      	ldr	r3, [r7, #16]
 8007432:	1ad3      	subs	r3, r2, r3
 8007434:	2b02      	cmp	r3, #2
 8007436:	d905      	bls.n	8007444 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8007438:	2303      	movs	r3, #3
 800743a:	e0b3      	b.n	80075a4 <HAL_RCC_OscConfig+0x620>
 800743c:	40021000 	.word	0x40021000
 8007440:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007444:	4b59      	ldr	r3, [pc, #356]	; (80075ac <HAL_RCC_OscConfig+0x628>)
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800744c:	2b00      	cmp	r3, #0
 800744e:	d1ec      	bne.n	800742a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007450:	4b56      	ldr	r3, [pc, #344]	; (80075ac <HAL_RCC_OscConfig+0x628>)
 8007452:	68da      	ldr	r2, [r3, #12]
 8007454:	4b56      	ldr	r3, [pc, #344]	; (80075b0 <HAL_RCC_OscConfig+0x62c>)
 8007456:	4013      	ands	r3, r2
 8007458:	687a      	ldr	r2, [r7, #4]
 800745a:	6a11      	ldr	r1, [r2, #32]
 800745c:	687a      	ldr	r2, [r7, #4]
 800745e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007460:	3a01      	subs	r2, #1
 8007462:	0112      	lsls	r2, r2, #4
 8007464:	4311      	orrs	r1, r2
 8007466:	687a      	ldr	r2, [r7, #4]
 8007468:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800746a:	0212      	lsls	r2, r2, #8
 800746c:	4311      	orrs	r1, r2
 800746e:	687a      	ldr	r2, [r7, #4]
 8007470:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8007472:	0852      	lsrs	r2, r2, #1
 8007474:	3a01      	subs	r2, #1
 8007476:	0552      	lsls	r2, r2, #21
 8007478:	4311      	orrs	r1, r2
 800747a:	687a      	ldr	r2, [r7, #4]
 800747c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800747e:	0852      	lsrs	r2, r2, #1
 8007480:	3a01      	subs	r2, #1
 8007482:	0652      	lsls	r2, r2, #25
 8007484:	4311      	orrs	r1, r2
 8007486:	687a      	ldr	r2, [r7, #4]
 8007488:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800748a:	06d2      	lsls	r2, r2, #27
 800748c:	430a      	orrs	r2, r1
 800748e:	4947      	ldr	r1, [pc, #284]	; (80075ac <HAL_RCC_OscConfig+0x628>)
 8007490:	4313      	orrs	r3, r2
 8007492:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007494:	4b45      	ldr	r3, [pc, #276]	; (80075ac <HAL_RCC_OscConfig+0x628>)
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	4a44      	ldr	r2, [pc, #272]	; (80075ac <HAL_RCC_OscConfig+0x628>)
 800749a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800749e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80074a0:	4b42      	ldr	r3, [pc, #264]	; (80075ac <HAL_RCC_OscConfig+0x628>)
 80074a2:	68db      	ldr	r3, [r3, #12]
 80074a4:	4a41      	ldr	r2, [pc, #260]	; (80075ac <HAL_RCC_OscConfig+0x628>)
 80074a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80074aa:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80074ac:	f7fb feda 	bl	8003264 <HAL_GetTick>
 80074b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80074b2:	e008      	b.n	80074c6 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80074b4:	f7fb fed6 	bl	8003264 <HAL_GetTick>
 80074b8:	4602      	mov	r2, r0
 80074ba:	693b      	ldr	r3, [r7, #16]
 80074bc:	1ad3      	subs	r3, r2, r3
 80074be:	2b02      	cmp	r3, #2
 80074c0:	d901      	bls.n	80074c6 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80074c2:	2303      	movs	r3, #3
 80074c4:	e06e      	b.n	80075a4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80074c6:	4b39      	ldr	r3, [pc, #228]	; (80075ac <HAL_RCC_OscConfig+0x628>)
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d0f0      	beq.n	80074b4 <HAL_RCC_OscConfig+0x530>
 80074d2:	e066      	b.n	80075a2 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80074d4:	4b35      	ldr	r3, [pc, #212]	; (80075ac <HAL_RCC_OscConfig+0x628>)
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	4a34      	ldr	r2, [pc, #208]	; (80075ac <HAL_RCC_OscConfig+0x628>)
 80074da:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80074de:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80074e0:	4b32      	ldr	r3, [pc, #200]	; (80075ac <HAL_RCC_OscConfig+0x628>)
 80074e2:	68db      	ldr	r3, [r3, #12]
 80074e4:	4a31      	ldr	r2, [pc, #196]	; (80075ac <HAL_RCC_OscConfig+0x628>)
 80074e6:	f023 0303 	bic.w	r3, r3, #3
 80074ea:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80074ec:	4b2f      	ldr	r3, [pc, #188]	; (80075ac <HAL_RCC_OscConfig+0x628>)
 80074ee:	68db      	ldr	r3, [r3, #12]
 80074f0:	4a2e      	ldr	r2, [pc, #184]	; (80075ac <HAL_RCC_OscConfig+0x628>)
 80074f2:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80074f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80074fa:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80074fc:	f7fb feb2 	bl	8003264 <HAL_GetTick>
 8007500:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007502:	e008      	b.n	8007516 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007504:	f7fb feae 	bl	8003264 <HAL_GetTick>
 8007508:	4602      	mov	r2, r0
 800750a:	693b      	ldr	r3, [r7, #16]
 800750c:	1ad3      	subs	r3, r2, r3
 800750e:	2b02      	cmp	r3, #2
 8007510:	d901      	bls.n	8007516 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8007512:	2303      	movs	r3, #3
 8007514:	e046      	b.n	80075a4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007516:	4b25      	ldr	r3, [pc, #148]	; (80075ac <HAL_RCC_OscConfig+0x628>)
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800751e:	2b00      	cmp	r3, #0
 8007520:	d1f0      	bne.n	8007504 <HAL_RCC_OscConfig+0x580>
 8007522:	e03e      	b.n	80075a2 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	69db      	ldr	r3, [r3, #28]
 8007528:	2b01      	cmp	r3, #1
 800752a:	d101      	bne.n	8007530 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 800752c:	2301      	movs	r3, #1
 800752e:	e039      	b.n	80075a4 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8007530:	4b1e      	ldr	r3, [pc, #120]	; (80075ac <HAL_RCC_OscConfig+0x628>)
 8007532:	68db      	ldr	r3, [r3, #12]
 8007534:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007536:	697b      	ldr	r3, [r7, #20]
 8007538:	f003 0203 	and.w	r2, r3, #3
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	6a1b      	ldr	r3, [r3, #32]
 8007540:	429a      	cmp	r2, r3
 8007542:	d12c      	bne.n	800759e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007544:	697b      	ldr	r3, [r7, #20]
 8007546:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800754e:	3b01      	subs	r3, #1
 8007550:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007552:	429a      	cmp	r2, r3
 8007554:	d123      	bne.n	800759e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8007556:	697b      	ldr	r3, [r7, #20]
 8007558:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007560:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007562:	429a      	cmp	r2, r3
 8007564:	d11b      	bne.n	800759e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007566:	697b      	ldr	r3, [r7, #20]
 8007568:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007570:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8007572:	429a      	cmp	r2, r3
 8007574:	d113      	bne.n	800759e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007576:	697b      	ldr	r3, [r7, #20]
 8007578:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007580:	085b      	lsrs	r3, r3, #1
 8007582:	3b01      	subs	r3, #1
 8007584:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007586:	429a      	cmp	r2, r3
 8007588:	d109      	bne.n	800759e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800758a:	697b      	ldr	r3, [r7, #20]
 800758c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007594:	085b      	lsrs	r3, r3, #1
 8007596:	3b01      	subs	r3, #1
 8007598:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800759a:	429a      	cmp	r2, r3
 800759c:	d001      	beq.n	80075a2 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 800759e:	2301      	movs	r3, #1
 80075a0:	e000      	b.n	80075a4 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 80075a2:	2300      	movs	r3, #0
}
 80075a4:	4618      	mov	r0, r3
 80075a6:	3720      	adds	r7, #32
 80075a8:	46bd      	mov	sp, r7
 80075aa:	bd80      	pop	{r7, pc}
 80075ac:	40021000 	.word	0x40021000
 80075b0:	019f800c 	.word	0x019f800c

080075b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80075b4:	b580      	push	{r7, lr}
 80075b6:	b086      	sub	sp, #24
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	6078      	str	r0, [r7, #4]
 80075bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80075be:	2300      	movs	r3, #0
 80075c0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d101      	bne.n	80075cc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80075c8:	2301      	movs	r3, #1
 80075ca:	e11e      	b.n	800780a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80075cc:	4b91      	ldr	r3, [pc, #580]	; (8007814 <HAL_RCC_ClockConfig+0x260>)
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	f003 030f 	and.w	r3, r3, #15
 80075d4:	683a      	ldr	r2, [r7, #0]
 80075d6:	429a      	cmp	r2, r3
 80075d8:	d910      	bls.n	80075fc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80075da:	4b8e      	ldr	r3, [pc, #568]	; (8007814 <HAL_RCC_ClockConfig+0x260>)
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	f023 020f 	bic.w	r2, r3, #15
 80075e2:	498c      	ldr	r1, [pc, #560]	; (8007814 <HAL_RCC_ClockConfig+0x260>)
 80075e4:	683b      	ldr	r3, [r7, #0]
 80075e6:	4313      	orrs	r3, r2
 80075e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80075ea:	4b8a      	ldr	r3, [pc, #552]	; (8007814 <HAL_RCC_ClockConfig+0x260>)
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	f003 030f 	and.w	r3, r3, #15
 80075f2:	683a      	ldr	r2, [r7, #0]
 80075f4:	429a      	cmp	r2, r3
 80075f6:	d001      	beq.n	80075fc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80075f8:	2301      	movs	r3, #1
 80075fa:	e106      	b.n	800780a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	f003 0301 	and.w	r3, r3, #1
 8007604:	2b00      	cmp	r3, #0
 8007606:	d073      	beq.n	80076f0 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	685b      	ldr	r3, [r3, #4]
 800760c:	2b03      	cmp	r3, #3
 800760e:	d129      	bne.n	8007664 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007610:	4b81      	ldr	r3, [pc, #516]	; (8007818 <HAL_RCC_ClockConfig+0x264>)
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007618:	2b00      	cmp	r3, #0
 800761a:	d101      	bne.n	8007620 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800761c:	2301      	movs	r3, #1
 800761e:	e0f4      	b.n	800780a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8007620:	f000 f9ce 	bl	80079c0 <RCC_GetSysClockFreqFromPLLSource>
 8007624:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8007626:	693b      	ldr	r3, [r7, #16]
 8007628:	4a7c      	ldr	r2, [pc, #496]	; (800781c <HAL_RCC_ClockConfig+0x268>)
 800762a:	4293      	cmp	r3, r2
 800762c:	d93f      	bls.n	80076ae <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800762e:	4b7a      	ldr	r3, [pc, #488]	; (8007818 <HAL_RCC_ClockConfig+0x264>)
 8007630:	689b      	ldr	r3, [r3, #8]
 8007632:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007636:	2b00      	cmp	r3, #0
 8007638:	d009      	beq.n	800764e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8007642:	2b00      	cmp	r3, #0
 8007644:	d033      	beq.n	80076ae <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800764a:	2b00      	cmp	r3, #0
 800764c:	d12f      	bne.n	80076ae <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800764e:	4b72      	ldr	r3, [pc, #456]	; (8007818 <HAL_RCC_ClockConfig+0x264>)
 8007650:	689b      	ldr	r3, [r3, #8]
 8007652:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007656:	4a70      	ldr	r2, [pc, #448]	; (8007818 <HAL_RCC_ClockConfig+0x264>)
 8007658:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800765c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800765e:	2380      	movs	r3, #128	; 0x80
 8007660:	617b      	str	r3, [r7, #20]
 8007662:	e024      	b.n	80076ae <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	685b      	ldr	r3, [r3, #4]
 8007668:	2b02      	cmp	r3, #2
 800766a:	d107      	bne.n	800767c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800766c:	4b6a      	ldr	r3, [pc, #424]	; (8007818 <HAL_RCC_ClockConfig+0x264>)
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007674:	2b00      	cmp	r3, #0
 8007676:	d109      	bne.n	800768c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8007678:	2301      	movs	r3, #1
 800767a:	e0c6      	b.n	800780a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800767c:	4b66      	ldr	r3, [pc, #408]	; (8007818 <HAL_RCC_ClockConfig+0x264>)
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007684:	2b00      	cmp	r3, #0
 8007686:	d101      	bne.n	800768c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8007688:	2301      	movs	r3, #1
 800768a:	e0be      	b.n	800780a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800768c:	f000 f8ce 	bl	800782c <HAL_RCC_GetSysClockFreq>
 8007690:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8007692:	693b      	ldr	r3, [r7, #16]
 8007694:	4a61      	ldr	r2, [pc, #388]	; (800781c <HAL_RCC_ClockConfig+0x268>)
 8007696:	4293      	cmp	r3, r2
 8007698:	d909      	bls.n	80076ae <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800769a:	4b5f      	ldr	r3, [pc, #380]	; (8007818 <HAL_RCC_ClockConfig+0x264>)
 800769c:	689b      	ldr	r3, [r3, #8]
 800769e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80076a2:	4a5d      	ldr	r2, [pc, #372]	; (8007818 <HAL_RCC_ClockConfig+0x264>)
 80076a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80076a8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80076aa:	2380      	movs	r3, #128	; 0x80
 80076ac:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80076ae:	4b5a      	ldr	r3, [pc, #360]	; (8007818 <HAL_RCC_ClockConfig+0x264>)
 80076b0:	689b      	ldr	r3, [r3, #8]
 80076b2:	f023 0203 	bic.w	r2, r3, #3
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	685b      	ldr	r3, [r3, #4]
 80076ba:	4957      	ldr	r1, [pc, #348]	; (8007818 <HAL_RCC_ClockConfig+0x264>)
 80076bc:	4313      	orrs	r3, r2
 80076be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80076c0:	f7fb fdd0 	bl	8003264 <HAL_GetTick>
 80076c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80076c6:	e00a      	b.n	80076de <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80076c8:	f7fb fdcc 	bl	8003264 <HAL_GetTick>
 80076cc:	4602      	mov	r2, r0
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	1ad3      	subs	r3, r2, r3
 80076d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80076d6:	4293      	cmp	r3, r2
 80076d8:	d901      	bls.n	80076de <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80076da:	2303      	movs	r3, #3
 80076dc:	e095      	b.n	800780a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80076de:	4b4e      	ldr	r3, [pc, #312]	; (8007818 <HAL_RCC_ClockConfig+0x264>)
 80076e0:	689b      	ldr	r3, [r3, #8]
 80076e2:	f003 020c 	and.w	r2, r3, #12
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	685b      	ldr	r3, [r3, #4]
 80076ea:	009b      	lsls	r3, r3, #2
 80076ec:	429a      	cmp	r2, r3
 80076ee:	d1eb      	bne.n	80076c8 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	f003 0302 	and.w	r3, r3, #2
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d023      	beq.n	8007744 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	f003 0304 	and.w	r3, r3, #4
 8007704:	2b00      	cmp	r3, #0
 8007706:	d005      	beq.n	8007714 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007708:	4b43      	ldr	r3, [pc, #268]	; (8007818 <HAL_RCC_ClockConfig+0x264>)
 800770a:	689b      	ldr	r3, [r3, #8]
 800770c:	4a42      	ldr	r2, [pc, #264]	; (8007818 <HAL_RCC_ClockConfig+0x264>)
 800770e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8007712:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	f003 0308 	and.w	r3, r3, #8
 800771c:	2b00      	cmp	r3, #0
 800771e:	d007      	beq.n	8007730 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8007720:	4b3d      	ldr	r3, [pc, #244]	; (8007818 <HAL_RCC_ClockConfig+0x264>)
 8007722:	689b      	ldr	r3, [r3, #8]
 8007724:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8007728:	4a3b      	ldr	r2, [pc, #236]	; (8007818 <HAL_RCC_ClockConfig+0x264>)
 800772a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800772e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007730:	4b39      	ldr	r3, [pc, #228]	; (8007818 <HAL_RCC_ClockConfig+0x264>)
 8007732:	689b      	ldr	r3, [r3, #8]
 8007734:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	689b      	ldr	r3, [r3, #8]
 800773c:	4936      	ldr	r1, [pc, #216]	; (8007818 <HAL_RCC_ClockConfig+0x264>)
 800773e:	4313      	orrs	r3, r2
 8007740:	608b      	str	r3, [r1, #8]
 8007742:	e008      	b.n	8007756 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8007744:	697b      	ldr	r3, [r7, #20]
 8007746:	2b80      	cmp	r3, #128	; 0x80
 8007748:	d105      	bne.n	8007756 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800774a:	4b33      	ldr	r3, [pc, #204]	; (8007818 <HAL_RCC_ClockConfig+0x264>)
 800774c:	689b      	ldr	r3, [r3, #8]
 800774e:	4a32      	ldr	r2, [pc, #200]	; (8007818 <HAL_RCC_ClockConfig+0x264>)
 8007750:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007754:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007756:	4b2f      	ldr	r3, [pc, #188]	; (8007814 <HAL_RCC_ClockConfig+0x260>)
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	f003 030f 	and.w	r3, r3, #15
 800775e:	683a      	ldr	r2, [r7, #0]
 8007760:	429a      	cmp	r2, r3
 8007762:	d21d      	bcs.n	80077a0 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007764:	4b2b      	ldr	r3, [pc, #172]	; (8007814 <HAL_RCC_ClockConfig+0x260>)
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	f023 020f 	bic.w	r2, r3, #15
 800776c:	4929      	ldr	r1, [pc, #164]	; (8007814 <HAL_RCC_ClockConfig+0x260>)
 800776e:	683b      	ldr	r3, [r7, #0]
 8007770:	4313      	orrs	r3, r2
 8007772:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8007774:	f7fb fd76 	bl	8003264 <HAL_GetTick>
 8007778:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800777a:	e00a      	b.n	8007792 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800777c:	f7fb fd72 	bl	8003264 <HAL_GetTick>
 8007780:	4602      	mov	r2, r0
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	1ad3      	subs	r3, r2, r3
 8007786:	f241 3288 	movw	r2, #5000	; 0x1388
 800778a:	4293      	cmp	r3, r2
 800778c:	d901      	bls.n	8007792 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800778e:	2303      	movs	r3, #3
 8007790:	e03b      	b.n	800780a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007792:	4b20      	ldr	r3, [pc, #128]	; (8007814 <HAL_RCC_ClockConfig+0x260>)
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	f003 030f 	and.w	r3, r3, #15
 800779a:	683a      	ldr	r2, [r7, #0]
 800779c:	429a      	cmp	r2, r3
 800779e:	d1ed      	bne.n	800777c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	f003 0304 	and.w	r3, r3, #4
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d008      	beq.n	80077be <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80077ac:	4b1a      	ldr	r3, [pc, #104]	; (8007818 <HAL_RCC_ClockConfig+0x264>)
 80077ae:	689b      	ldr	r3, [r3, #8]
 80077b0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	68db      	ldr	r3, [r3, #12]
 80077b8:	4917      	ldr	r1, [pc, #92]	; (8007818 <HAL_RCC_ClockConfig+0x264>)
 80077ba:	4313      	orrs	r3, r2
 80077bc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	f003 0308 	and.w	r3, r3, #8
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d009      	beq.n	80077de <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80077ca:	4b13      	ldr	r3, [pc, #76]	; (8007818 <HAL_RCC_ClockConfig+0x264>)
 80077cc:	689b      	ldr	r3, [r3, #8]
 80077ce:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	691b      	ldr	r3, [r3, #16]
 80077d6:	00db      	lsls	r3, r3, #3
 80077d8:	490f      	ldr	r1, [pc, #60]	; (8007818 <HAL_RCC_ClockConfig+0x264>)
 80077da:	4313      	orrs	r3, r2
 80077dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80077de:	f000 f825 	bl	800782c <HAL_RCC_GetSysClockFreq>
 80077e2:	4602      	mov	r2, r0
 80077e4:	4b0c      	ldr	r3, [pc, #48]	; (8007818 <HAL_RCC_ClockConfig+0x264>)
 80077e6:	689b      	ldr	r3, [r3, #8]
 80077e8:	091b      	lsrs	r3, r3, #4
 80077ea:	f003 030f 	and.w	r3, r3, #15
 80077ee:	490c      	ldr	r1, [pc, #48]	; (8007820 <HAL_RCC_ClockConfig+0x26c>)
 80077f0:	5ccb      	ldrb	r3, [r1, r3]
 80077f2:	f003 031f 	and.w	r3, r3, #31
 80077f6:	fa22 f303 	lsr.w	r3, r2, r3
 80077fa:	4a0a      	ldr	r2, [pc, #40]	; (8007824 <HAL_RCC_ClockConfig+0x270>)
 80077fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80077fe:	4b0a      	ldr	r3, [pc, #40]	; (8007828 <HAL_RCC_ClockConfig+0x274>)
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	4618      	mov	r0, r3
 8007804:	f7fa fab2 	bl	8001d6c <HAL_InitTick>
 8007808:	4603      	mov	r3, r0
}
 800780a:	4618      	mov	r0, r3
 800780c:	3718      	adds	r7, #24
 800780e:	46bd      	mov	sp, r7
 8007810:	bd80      	pop	{r7, pc}
 8007812:	bf00      	nop
 8007814:	40022000 	.word	0x40022000
 8007818:	40021000 	.word	0x40021000
 800781c:	04c4b400 	.word	0x04c4b400
 8007820:	080147c0 	.word	0x080147c0
 8007824:	20000000 	.word	0x20000000
 8007828:	20000004 	.word	0x20000004

0800782c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800782c:	b480      	push	{r7}
 800782e:	b087      	sub	sp, #28
 8007830:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8007832:	4b2c      	ldr	r3, [pc, #176]	; (80078e4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007834:	689b      	ldr	r3, [r3, #8]
 8007836:	f003 030c 	and.w	r3, r3, #12
 800783a:	2b04      	cmp	r3, #4
 800783c:	d102      	bne.n	8007844 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800783e:	4b2a      	ldr	r3, [pc, #168]	; (80078e8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8007840:	613b      	str	r3, [r7, #16]
 8007842:	e047      	b.n	80078d4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8007844:	4b27      	ldr	r3, [pc, #156]	; (80078e4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007846:	689b      	ldr	r3, [r3, #8]
 8007848:	f003 030c 	and.w	r3, r3, #12
 800784c:	2b08      	cmp	r3, #8
 800784e:	d102      	bne.n	8007856 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8007850:	4b25      	ldr	r3, [pc, #148]	; (80078e8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8007852:	613b      	str	r3, [r7, #16]
 8007854:	e03e      	b.n	80078d4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8007856:	4b23      	ldr	r3, [pc, #140]	; (80078e4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007858:	689b      	ldr	r3, [r3, #8]
 800785a:	f003 030c 	and.w	r3, r3, #12
 800785e:	2b0c      	cmp	r3, #12
 8007860:	d136      	bne.n	80078d0 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007862:	4b20      	ldr	r3, [pc, #128]	; (80078e4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007864:	68db      	ldr	r3, [r3, #12]
 8007866:	f003 0303 	and.w	r3, r3, #3
 800786a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800786c:	4b1d      	ldr	r3, [pc, #116]	; (80078e4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800786e:	68db      	ldr	r3, [r3, #12]
 8007870:	091b      	lsrs	r3, r3, #4
 8007872:	f003 030f 	and.w	r3, r3, #15
 8007876:	3301      	adds	r3, #1
 8007878:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	2b03      	cmp	r3, #3
 800787e:	d10c      	bne.n	800789a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007880:	4a19      	ldr	r2, [pc, #100]	; (80078e8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8007882:	68bb      	ldr	r3, [r7, #8]
 8007884:	fbb2 f3f3 	udiv	r3, r2, r3
 8007888:	4a16      	ldr	r2, [pc, #88]	; (80078e4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800788a:	68d2      	ldr	r2, [r2, #12]
 800788c:	0a12      	lsrs	r2, r2, #8
 800788e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8007892:	fb02 f303 	mul.w	r3, r2, r3
 8007896:	617b      	str	r3, [r7, #20]
      break;
 8007898:	e00c      	b.n	80078b4 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800789a:	4a13      	ldr	r2, [pc, #76]	; (80078e8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800789c:	68bb      	ldr	r3, [r7, #8]
 800789e:	fbb2 f3f3 	udiv	r3, r2, r3
 80078a2:	4a10      	ldr	r2, [pc, #64]	; (80078e4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80078a4:	68d2      	ldr	r2, [r2, #12]
 80078a6:	0a12      	lsrs	r2, r2, #8
 80078a8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80078ac:	fb02 f303 	mul.w	r3, r2, r3
 80078b0:	617b      	str	r3, [r7, #20]
      break;
 80078b2:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80078b4:	4b0b      	ldr	r3, [pc, #44]	; (80078e4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80078b6:	68db      	ldr	r3, [r3, #12]
 80078b8:	0e5b      	lsrs	r3, r3, #25
 80078ba:	f003 0303 	and.w	r3, r3, #3
 80078be:	3301      	adds	r3, #1
 80078c0:	005b      	lsls	r3, r3, #1
 80078c2:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80078c4:	697a      	ldr	r2, [r7, #20]
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80078cc:	613b      	str	r3, [r7, #16]
 80078ce:	e001      	b.n	80078d4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80078d0:	2300      	movs	r3, #0
 80078d2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80078d4:	693b      	ldr	r3, [r7, #16]
}
 80078d6:	4618      	mov	r0, r3
 80078d8:	371c      	adds	r7, #28
 80078da:	46bd      	mov	sp, r7
 80078dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e0:	4770      	bx	lr
 80078e2:	bf00      	nop
 80078e4:	40021000 	.word	0x40021000
 80078e8:	00f42400 	.word	0x00f42400

080078ec <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80078ec:	b480      	push	{r7}
 80078ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80078f0:	4b03      	ldr	r3, [pc, #12]	; (8007900 <HAL_RCC_GetHCLKFreq+0x14>)
 80078f2:	681b      	ldr	r3, [r3, #0]
}
 80078f4:	4618      	mov	r0, r3
 80078f6:	46bd      	mov	sp, r7
 80078f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078fc:	4770      	bx	lr
 80078fe:	bf00      	nop
 8007900:	20000000 	.word	0x20000000

08007904 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007904:	b580      	push	{r7, lr}
 8007906:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8007908:	f7ff fff0 	bl	80078ec <HAL_RCC_GetHCLKFreq>
 800790c:	4602      	mov	r2, r0
 800790e:	4b06      	ldr	r3, [pc, #24]	; (8007928 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007910:	689b      	ldr	r3, [r3, #8]
 8007912:	0a1b      	lsrs	r3, r3, #8
 8007914:	f003 0307 	and.w	r3, r3, #7
 8007918:	4904      	ldr	r1, [pc, #16]	; (800792c <HAL_RCC_GetPCLK1Freq+0x28>)
 800791a:	5ccb      	ldrb	r3, [r1, r3]
 800791c:	f003 031f 	and.w	r3, r3, #31
 8007920:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007924:	4618      	mov	r0, r3
 8007926:	bd80      	pop	{r7, pc}
 8007928:	40021000 	.word	0x40021000
 800792c:	080147d0 	.word	0x080147d0

08007930 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007930:	b580      	push	{r7, lr}
 8007932:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8007934:	f7ff ffda 	bl	80078ec <HAL_RCC_GetHCLKFreq>
 8007938:	4602      	mov	r2, r0
 800793a:	4b06      	ldr	r3, [pc, #24]	; (8007954 <HAL_RCC_GetPCLK2Freq+0x24>)
 800793c:	689b      	ldr	r3, [r3, #8]
 800793e:	0adb      	lsrs	r3, r3, #11
 8007940:	f003 0307 	and.w	r3, r3, #7
 8007944:	4904      	ldr	r1, [pc, #16]	; (8007958 <HAL_RCC_GetPCLK2Freq+0x28>)
 8007946:	5ccb      	ldrb	r3, [r1, r3]
 8007948:	f003 031f 	and.w	r3, r3, #31
 800794c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007950:	4618      	mov	r0, r3
 8007952:	bd80      	pop	{r7, pc}
 8007954:	40021000 	.word	0x40021000
 8007958:	080147d0 	.word	0x080147d0

0800795c <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800795c:	b480      	push	{r7}
 800795e:	b083      	sub	sp, #12
 8007960:	af00      	add	r7, sp, #0
 8007962:	6078      	str	r0, [r7, #4]
 8007964:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	220f      	movs	r2, #15
 800796a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 800796c:	4b12      	ldr	r3, [pc, #72]	; (80079b8 <HAL_RCC_GetClockConfig+0x5c>)
 800796e:	689b      	ldr	r3, [r3, #8]
 8007970:	f003 0203 	and.w	r2, r3, #3
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8007978:	4b0f      	ldr	r3, [pc, #60]	; (80079b8 <HAL_RCC_GetClockConfig+0x5c>)
 800797a:	689b      	ldr	r3, [r3, #8]
 800797c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8007984:	4b0c      	ldr	r3, [pc, #48]	; (80079b8 <HAL_RCC_GetClockConfig+0x5c>)
 8007986:	689b      	ldr	r3, [r3, #8]
 8007988:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8007990:	4b09      	ldr	r3, [pc, #36]	; (80079b8 <HAL_RCC_GetClockConfig+0x5c>)
 8007992:	689b      	ldr	r3, [r3, #8]
 8007994:	08db      	lsrs	r3, r3, #3
 8007996:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800799e:	4b07      	ldr	r3, [pc, #28]	; (80079bc <HAL_RCC_GetClockConfig+0x60>)
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	f003 020f 	and.w	r2, r3, #15
 80079a6:	683b      	ldr	r3, [r7, #0]
 80079a8:	601a      	str	r2, [r3, #0]
}
 80079aa:	bf00      	nop
 80079ac:	370c      	adds	r7, #12
 80079ae:	46bd      	mov	sp, r7
 80079b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b4:	4770      	bx	lr
 80079b6:	bf00      	nop
 80079b8:	40021000 	.word	0x40021000
 80079bc:	40022000 	.word	0x40022000

080079c0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80079c0:	b480      	push	{r7}
 80079c2:	b087      	sub	sp, #28
 80079c4:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80079c6:	4b1e      	ldr	r3, [pc, #120]	; (8007a40 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80079c8:	68db      	ldr	r3, [r3, #12]
 80079ca:	f003 0303 	and.w	r3, r3, #3
 80079ce:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80079d0:	4b1b      	ldr	r3, [pc, #108]	; (8007a40 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80079d2:	68db      	ldr	r3, [r3, #12]
 80079d4:	091b      	lsrs	r3, r3, #4
 80079d6:	f003 030f 	and.w	r3, r3, #15
 80079da:	3301      	adds	r3, #1
 80079dc:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80079de:	693b      	ldr	r3, [r7, #16]
 80079e0:	2b03      	cmp	r3, #3
 80079e2:	d10c      	bne.n	80079fe <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80079e4:	4a17      	ldr	r2, [pc, #92]	; (8007a44 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80079ec:	4a14      	ldr	r2, [pc, #80]	; (8007a40 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80079ee:	68d2      	ldr	r2, [r2, #12]
 80079f0:	0a12      	lsrs	r2, r2, #8
 80079f2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80079f6:	fb02 f303 	mul.w	r3, r2, r3
 80079fa:	617b      	str	r3, [r7, #20]
    break;
 80079fc:	e00c      	b.n	8007a18 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80079fe:	4a11      	ldr	r2, [pc, #68]	; (8007a44 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a06:	4a0e      	ldr	r2, [pc, #56]	; (8007a40 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007a08:	68d2      	ldr	r2, [r2, #12]
 8007a0a:	0a12      	lsrs	r2, r2, #8
 8007a0c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8007a10:	fb02 f303 	mul.w	r3, r2, r3
 8007a14:	617b      	str	r3, [r7, #20]
    break;
 8007a16:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007a18:	4b09      	ldr	r3, [pc, #36]	; (8007a40 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007a1a:	68db      	ldr	r3, [r3, #12]
 8007a1c:	0e5b      	lsrs	r3, r3, #25
 8007a1e:	f003 0303 	and.w	r3, r3, #3
 8007a22:	3301      	adds	r3, #1
 8007a24:	005b      	lsls	r3, r3, #1
 8007a26:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8007a28:	697a      	ldr	r2, [r7, #20]
 8007a2a:	68bb      	ldr	r3, [r7, #8]
 8007a2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a30:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8007a32:	687b      	ldr	r3, [r7, #4]
}
 8007a34:	4618      	mov	r0, r3
 8007a36:	371c      	adds	r7, #28
 8007a38:	46bd      	mov	sp, r7
 8007a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a3e:	4770      	bx	lr
 8007a40:	40021000 	.word	0x40021000
 8007a44:	00f42400 	.word	0x00f42400

08007a48 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007a48:	b580      	push	{r7, lr}
 8007a4a:	b086      	sub	sp, #24
 8007a4c:	af00      	add	r7, sp, #0
 8007a4e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007a50:	2300      	movs	r3, #0
 8007a52:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007a54:	2300      	movs	r3, #0
 8007a56:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	f000 8098 	beq.w	8007b96 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007a66:	2300      	movs	r3, #0
 8007a68:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007a6a:	4b43      	ldr	r3, [pc, #268]	; (8007b78 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007a6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d10d      	bne.n	8007a92 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007a76:	4b40      	ldr	r3, [pc, #256]	; (8007b78 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007a78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a7a:	4a3f      	ldr	r2, [pc, #252]	; (8007b78 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007a7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007a80:	6593      	str	r3, [r2, #88]	; 0x58
 8007a82:	4b3d      	ldr	r3, [pc, #244]	; (8007b78 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007a84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007a8a:	60bb      	str	r3, [r7, #8]
 8007a8c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007a8e:	2301      	movs	r3, #1
 8007a90:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007a92:	4b3a      	ldr	r3, [pc, #232]	; (8007b7c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	4a39      	ldr	r2, [pc, #228]	; (8007b7c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007a98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007a9c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007a9e:	f7fb fbe1 	bl	8003264 <HAL_GetTick>
 8007aa2:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007aa4:	e009      	b.n	8007aba <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007aa6:	f7fb fbdd 	bl	8003264 <HAL_GetTick>
 8007aaa:	4602      	mov	r2, r0
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	1ad3      	subs	r3, r2, r3
 8007ab0:	2b02      	cmp	r3, #2
 8007ab2:	d902      	bls.n	8007aba <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8007ab4:	2303      	movs	r3, #3
 8007ab6:	74fb      	strb	r3, [r7, #19]
        break;
 8007ab8:	e005      	b.n	8007ac6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007aba:	4b30      	ldr	r3, [pc, #192]	; (8007b7c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d0ef      	beq.n	8007aa6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8007ac6:	7cfb      	ldrb	r3, [r7, #19]
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d159      	bne.n	8007b80 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007acc:	4b2a      	ldr	r3, [pc, #168]	; (8007b78 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007ace:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ad2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007ad6:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8007ad8:	697b      	ldr	r3, [r7, #20]
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d01e      	beq.n	8007b1c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ae2:	697a      	ldr	r2, [r7, #20]
 8007ae4:	429a      	cmp	r2, r3
 8007ae6:	d019      	beq.n	8007b1c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007ae8:	4b23      	ldr	r3, [pc, #140]	; (8007b78 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007aea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007aee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007af2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007af4:	4b20      	ldr	r3, [pc, #128]	; (8007b78 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007af6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007afa:	4a1f      	ldr	r2, [pc, #124]	; (8007b78 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007afc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007b00:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007b04:	4b1c      	ldr	r3, [pc, #112]	; (8007b78 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007b06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b0a:	4a1b      	ldr	r2, [pc, #108]	; (8007b78 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007b0c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007b10:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007b14:	4a18      	ldr	r2, [pc, #96]	; (8007b78 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007b16:	697b      	ldr	r3, [r7, #20]
 8007b18:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007b1c:	697b      	ldr	r3, [r7, #20]
 8007b1e:	f003 0301 	and.w	r3, r3, #1
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d016      	beq.n	8007b54 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b26:	f7fb fb9d 	bl	8003264 <HAL_GetTick>
 8007b2a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007b2c:	e00b      	b.n	8007b46 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007b2e:	f7fb fb99 	bl	8003264 <HAL_GetTick>
 8007b32:	4602      	mov	r2, r0
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	1ad3      	subs	r3, r2, r3
 8007b38:	f241 3288 	movw	r2, #5000	; 0x1388
 8007b3c:	4293      	cmp	r3, r2
 8007b3e:	d902      	bls.n	8007b46 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8007b40:	2303      	movs	r3, #3
 8007b42:	74fb      	strb	r3, [r7, #19]
            break;
 8007b44:	e006      	b.n	8007b54 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007b46:	4b0c      	ldr	r3, [pc, #48]	; (8007b78 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007b48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b4c:	f003 0302 	and.w	r3, r3, #2
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d0ec      	beq.n	8007b2e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8007b54:	7cfb      	ldrb	r3, [r7, #19]
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d10b      	bne.n	8007b72 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007b5a:	4b07      	ldr	r3, [pc, #28]	; (8007b78 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007b5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b60:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b68:	4903      	ldr	r1, [pc, #12]	; (8007b78 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007b6a:	4313      	orrs	r3, r2
 8007b6c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8007b70:	e008      	b.n	8007b84 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007b72:	7cfb      	ldrb	r3, [r7, #19]
 8007b74:	74bb      	strb	r3, [r7, #18]
 8007b76:	e005      	b.n	8007b84 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8007b78:	40021000 	.word	0x40021000
 8007b7c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b80:	7cfb      	ldrb	r3, [r7, #19]
 8007b82:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007b84:	7c7b      	ldrb	r3, [r7, #17]
 8007b86:	2b01      	cmp	r3, #1
 8007b88:	d105      	bne.n	8007b96 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007b8a:	4ba7      	ldr	r3, [pc, #668]	; (8007e28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007b8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b8e:	4aa6      	ldr	r2, [pc, #664]	; (8007e28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007b90:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007b94:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	f003 0301 	and.w	r3, r3, #1
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d00a      	beq.n	8007bb8 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007ba2:	4ba1      	ldr	r3, [pc, #644]	; (8007e28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007ba4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ba8:	f023 0203 	bic.w	r2, r3, #3
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	685b      	ldr	r3, [r3, #4]
 8007bb0:	499d      	ldr	r1, [pc, #628]	; (8007e28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007bb2:	4313      	orrs	r3, r2
 8007bb4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	f003 0302 	and.w	r3, r3, #2
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d00a      	beq.n	8007bda <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007bc4:	4b98      	ldr	r3, [pc, #608]	; (8007e28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007bc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007bca:	f023 020c 	bic.w	r2, r3, #12
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	689b      	ldr	r3, [r3, #8]
 8007bd2:	4995      	ldr	r1, [pc, #596]	; (8007e28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007bd4:	4313      	orrs	r3, r2
 8007bd6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	f003 0304 	and.w	r3, r3, #4
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d00a      	beq.n	8007bfc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007be6:	4b90      	ldr	r3, [pc, #576]	; (8007e28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007be8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007bec:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	68db      	ldr	r3, [r3, #12]
 8007bf4:	498c      	ldr	r1, [pc, #560]	; (8007e28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007bf6:	4313      	orrs	r3, r2
 8007bf8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	f003 0308 	and.w	r3, r3, #8
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d00a      	beq.n	8007c1e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007c08:	4b87      	ldr	r3, [pc, #540]	; (8007e28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007c0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c0e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	691b      	ldr	r3, [r3, #16]
 8007c16:	4984      	ldr	r1, [pc, #528]	; (8007e28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007c18:	4313      	orrs	r3, r2
 8007c1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	f003 0310 	and.w	r3, r3, #16
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d00a      	beq.n	8007c40 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007c2a:	4b7f      	ldr	r3, [pc, #508]	; (8007e28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007c2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c30:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	695b      	ldr	r3, [r3, #20]
 8007c38:	497b      	ldr	r1, [pc, #492]	; (8007e28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007c3a:	4313      	orrs	r3, r2
 8007c3c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	f003 0320 	and.w	r3, r3, #32
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d00a      	beq.n	8007c62 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007c4c:	4b76      	ldr	r3, [pc, #472]	; (8007e28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007c4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c52:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	699b      	ldr	r3, [r3, #24]
 8007c5a:	4973      	ldr	r1, [pc, #460]	; (8007e28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007c5c:	4313      	orrs	r3, r2
 8007c5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d00a      	beq.n	8007c84 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007c6e:	4b6e      	ldr	r3, [pc, #440]	; (8007e28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007c70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c74:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	69db      	ldr	r3, [r3, #28]
 8007c7c:	496a      	ldr	r1, [pc, #424]	; (8007e28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007c7e:	4313      	orrs	r3, r2
 8007c80:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d00a      	beq.n	8007ca6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007c90:	4b65      	ldr	r3, [pc, #404]	; (8007e28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007c92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c96:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	6a1b      	ldr	r3, [r3, #32]
 8007c9e:	4962      	ldr	r1, [pc, #392]	; (8007e28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007ca0:	4313      	orrs	r3, r2
 8007ca2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d00a      	beq.n	8007cc8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007cb2:	4b5d      	ldr	r3, [pc, #372]	; (8007e28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007cb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007cb8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cc0:	4959      	ldr	r1, [pc, #356]	; (8007e28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007cc2:	4313      	orrs	r3, r2
 8007cc4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d00a      	beq.n	8007cea <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007cd4:	4b54      	ldr	r3, [pc, #336]	; (8007e28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007cd6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007cda:	f023 0203 	bic.w	r2, r3, #3
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ce2:	4951      	ldr	r1, [pc, #324]	; (8007e28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007ce4:	4313      	orrs	r3, r2
 8007ce6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d00a      	beq.n	8007d0c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007cf6:	4b4c      	ldr	r3, [pc, #304]	; (8007e28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007cf8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007cfc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d04:	4948      	ldr	r1, [pc, #288]	; (8007e28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007d06:	4313      	orrs	r3, r2
 8007d08:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d015      	beq.n	8007d44 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007d18:	4b43      	ldr	r3, [pc, #268]	; (8007e28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007d1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d1e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d26:	4940      	ldr	r1, [pc, #256]	; (8007e28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007d28:	4313      	orrs	r3, r2
 8007d2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d32:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007d36:	d105      	bne.n	8007d44 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007d38:	4b3b      	ldr	r3, [pc, #236]	; (8007e28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007d3a:	68db      	ldr	r3, [r3, #12]
 8007d3c:	4a3a      	ldr	r2, [pc, #232]	; (8007e28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007d3e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007d42:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d015      	beq.n	8007d7c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007d50:	4b35      	ldr	r3, [pc, #212]	; (8007e28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007d52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d56:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d5e:	4932      	ldr	r1, [pc, #200]	; (8007e28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007d60:	4313      	orrs	r3, r2
 8007d62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d6a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007d6e:	d105      	bne.n	8007d7c <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007d70:	4b2d      	ldr	r3, [pc, #180]	; (8007e28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007d72:	68db      	ldr	r3, [r3, #12]
 8007d74:	4a2c      	ldr	r2, [pc, #176]	; (8007e28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007d76:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007d7a:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d015      	beq.n	8007db4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007d88:	4b27      	ldr	r3, [pc, #156]	; (8007e28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007d8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d8e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d96:	4924      	ldr	r1, [pc, #144]	; (8007e28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007d98:	4313      	orrs	r3, r2
 8007d9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007da2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007da6:	d105      	bne.n	8007db4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007da8:	4b1f      	ldr	r3, [pc, #124]	; (8007e28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007daa:	68db      	ldr	r3, [r3, #12]
 8007dac:	4a1e      	ldr	r2, [pc, #120]	; (8007e28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007dae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007db2:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d015      	beq.n	8007dec <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007dc0:	4b19      	ldr	r3, [pc, #100]	; (8007e28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007dc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007dc6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007dce:	4916      	ldr	r1, [pc, #88]	; (8007e28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007dd0:	4313      	orrs	r3, r2
 8007dd2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007dda:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007dde:	d105      	bne.n	8007dec <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007de0:	4b11      	ldr	r3, [pc, #68]	; (8007e28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007de2:	68db      	ldr	r3, [r3, #12]
 8007de4:	4a10      	ldr	r2, [pc, #64]	; (8007e28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007de6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007dea:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d019      	beq.n	8007e2c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007df8:	4b0b      	ldr	r3, [pc, #44]	; (8007e28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007dfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007dfe:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e06:	4908      	ldr	r1, [pc, #32]	; (8007e28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007e08:	4313      	orrs	r3, r2
 8007e0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e12:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007e16:	d109      	bne.n	8007e2c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007e18:	4b03      	ldr	r3, [pc, #12]	; (8007e28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007e1a:	68db      	ldr	r3, [r3, #12]
 8007e1c:	4a02      	ldr	r2, [pc, #8]	; (8007e28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007e1e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007e22:	60d3      	str	r3, [r2, #12]
 8007e24:	e002      	b.n	8007e2c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8007e26:	bf00      	nop
 8007e28:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d015      	beq.n	8007e64 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8007e38:	4b29      	ldr	r3, [pc, #164]	; (8007ee0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007e3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e3e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e46:	4926      	ldr	r1, [pc, #152]	; (8007ee0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007e48:	4313      	orrs	r3, r2
 8007e4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e52:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007e56:	d105      	bne.n	8007e64 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007e58:	4b21      	ldr	r3, [pc, #132]	; (8007ee0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007e5a:	68db      	ldr	r3, [r3, #12]
 8007e5c:	4a20      	ldr	r2, [pc, #128]	; (8007ee0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007e5e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007e62:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d015      	beq.n	8007e9c <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8007e70:	4b1b      	ldr	r3, [pc, #108]	; (8007ee0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007e72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e76:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007e7e:	4918      	ldr	r1, [pc, #96]	; (8007ee0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007e80:	4313      	orrs	r3, r2
 8007e82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007e8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e8e:	d105      	bne.n	8007e9c <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007e90:	4b13      	ldr	r3, [pc, #76]	; (8007ee0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007e92:	68db      	ldr	r3, [r3, #12]
 8007e94:	4a12      	ldr	r2, [pc, #72]	; (8007ee0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007e96:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007e9a:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d015      	beq.n	8007ed4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007ea8:	4b0d      	ldr	r3, [pc, #52]	; (8007ee0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007eaa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007eae:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007eb6:	490a      	ldr	r1, [pc, #40]	; (8007ee0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007eb8:	4313      	orrs	r3, r2
 8007eba:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007ec2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007ec6:	d105      	bne.n	8007ed4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007ec8:	4b05      	ldr	r3, [pc, #20]	; (8007ee0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007eca:	68db      	ldr	r3, [r3, #12]
 8007ecc:	4a04      	ldr	r2, [pc, #16]	; (8007ee0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007ece:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007ed2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8007ed4:	7cbb      	ldrb	r3, [r7, #18]
}
 8007ed6:	4618      	mov	r0, r3
 8007ed8:	3718      	adds	r7, #24
 8007eda:	46bd      	mov	sp, r7
 8007edc:	bd80      	pop	{r7, pc}
 8007ede:	bf00      	nop
 8007ee0:	40021000 	.word	0x40021000

08007ee4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007ee4:	b580      	push	{r7, lr}
 8007ee6:	b082      	sub	sp, #8
 8007ee8:	af00      	add	r7, sp, #0
 8007eea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d101      	bne.n	8007ef6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007ef2:	2301      	movs	r3, #1
 8007ef4:	e049      	b.n	8007f8a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007efc:	b2db      	uxtb	r3, r3
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d106      	bne.n	8007f10 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	2200      	movs	r2, #0
 8007f06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007f0a:	6878      	ldr	r0, [r7, #4]
 8007f0c:	f7fa fb8e 	bl	800262c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	2202      	movs	r2, #2
 8007f14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681a      	ldr	r2, [r3, #0]
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	3304      	adds	r3, #4
 8007f20:	4619      	mov	r1, r3
 8007f22:	4610      	mov	r0, r2
 8007f24:	f001 f824 	bl	8008f70 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	2201      	movs	r2, #1
 8007f2c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	2201      	movs	r2, #1
 8007f34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	2201      	movs	r2, #1
 8007f3c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	2201      	movs	r2, #1
 8007f44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	2201      	movs	r2, #1
 8007f4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	2201      	movs	r2, #1
 8007f54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	2201      	movs	r2, #1
 8007f5c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	2201      	movs	r2, #1
 8007f64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	2201      	movs	r2, #1
 8007f6c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	2201      	movs	r2, #1
 8007f74:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	2201      	movs	r2, #1
 8007f7c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	2201      	movs	r2, #1
 8007f84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007f88:	2300      	movs	r3, #0
}
 8007f8a:	4618      	mov	r0, r3
 8007f8c:	3708      	adds	r7, #8
 8007f8e:	46bd      	mov	sp, r7
 8007f90:	bd80      	pop	{r7, pc}
	...

08007f94 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007f94:	b480      	push	{r7}
 8007f96:	b085      	sub	sp, #20
 8007f98:	af00      	add	r7, sp, #0
 8007f9a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007fa2:	b2db      	uxtb	r3, r3
 8007fa4:	2b01      	cmp	r3, #1
 8007fa6:	d001      	beq.n	8007fac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007fa8:	2301      	movs	r3, #1
 8007faa:	e054      	b.n	8008056 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	2202      	movs	r2, #2
 8007fb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	68da      	ldr	r2, [r3, #12]
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	f042 0201 	orr.w	r2, r2, #1
 8007fc2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	4a26      	ldr	r2, [pc, #152]	; (8008064 <HAL_TIM_Base_Start_IT+0xd0>)
 8007fca:	4293      	cmp	r3, r2
 8007fcc:	d022      	beq.n	8008014 <HAL_TIM_Base_Start_IT+0x80>
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007fd6:	d01d      	beq.n	8008014 <HAL_TIM_Base_Start_IT+0x80>
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	4a22      	ldr	r2, [pc, #136]	; (8008068 <HAL_TIM_Base_Start_IT+0xd4>)
 8007fde:	4293      	cmp	r3, r2
 8007fe0:	d018      	beq.n	8008014 <HAL_TIM_Base_Start_IT+0x80>
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	4a21      	ldr	r2, [pc, #132]	; (800806c <HAL_TIM_Base_Start_IT+0xd8>)
 8007fe8:	4293      	cmp	r3, r2
 8007fea:	d013      	beq.n	8008014 <HAL_TIM_Base_Start_IT+0x80>
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	4a1f      	ldr	r2, [pc, #124]	; (8008070 <HAL_TIM_Base_Start_IT+0xdc>)
 8007ff2:	4293      	cmp	r3, r2
 8007ff4:	d00e      	beq.n	8008014 <HAL_TIM_Base_Start_IT+0x80>
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	4a1e      	ldr	r2, [pc, #120]	; (8008074 <HAL_TIM_Base_Start_IT+0xe0>)
 8007ffc:	4293      	cmp	r3, r2
 8007ffe:	d009      	beq.n	8008014 <HAL_TIM_Base_Start_IT+0x80>
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	4a1c      	ldr	r2, [pc, #112]	; (8008078 <HAL_TIM_Base_Start_IT+0xe4>)
 8008006:	4293      	cmp	r3, r2
 8008008:	d004      	beq.n	8008014 <HAL_TIM_Base_Start_IT+0x80>
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	4a1b      	ldr	r2, [pc, #108]	; (800807c <HAL_TIM_Base_Start_IT+0xe8>)
 8008010:	4293      	cmp	r3, r2
 8008012:	d115      	bne.n	8008040 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	689a      	ldr	r2, [r3, #8]
 800801a:	4b19      	ldr	r3, [pc, #100]	; (8008080 <HAL_TIM_Base_Start_IT+0xec>)
 800801c:	4013      	ands	r3, r2
 800801e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	2b06      	cmp	r3, #6
 8008024:	d015      	beq.n	8008052 <HAL_TIM_Base_Start_IT+0xbe>
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800802c:	d011      	beq.n	8008052 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	681a      	ldr	r2, [r3, #0]
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	f042 0201 	orr.w	r2, r2, #1
 800803c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800803e:	e008      	b.n	8008052 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	681a      	ldr	r2, [r3, #0]
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	f042 0201 	orr.w	r2, r2, #1
 800804e:	601a      	str	r2, [r3, #0]
 8008050:	e000      	b.n	8008054 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008052:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008054:	2300      	movs	r3, #0
}
 8008056:	4618      	mov	r0, r3
 8008058:	3714      	adds	r7, #20
 800805a:	46bd      	mov	sp, r7
 800805c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008060:	4770      	bx	lr
 8008062:	bf00      	nop
 8008064:	40012c00 	.word	0x40012c00
 8008068:	40000400 	.word	0x40000400
 800806c:	40000800 	.word	0x40000800
 8008070:	40000c00 	.word	0x40000c00
 8008074:	40013400 	.word	0x40013400
 8008078:	40014000 	.word	0x40014000
 800807c:	40015000 	.word	0x40015000
 8008080:	00010007 	.word	0x00010007

08008084 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008084:	b580      	push	{r7, lr}
 8008086:	b082      	sub	sp, #8
 8008088:	af00      	add	r7, sp, #0
 800808a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	2b00      	cmp	r3, #0
 8008090:	d101      	bne.n	8008096 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008092:	2301      	movs	r3, #1
 8008094:	e049      	b.n	800812a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800809c:	b2db      	uxtb	r3, r3
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d106      	bne.n	80080b0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	2200      	movs	r2, #0
 80080a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80080aa:	6878      	ldr	r0, [r7, #4]
 80080ac:	f000 f841 	bl	8008132 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	2202      	movs	r2, #2
 80080b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681a      	ldr	r2, [r3, #0]
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	3304      	adds	r3, #4
 80080c0:	4619      	mov	r1, r3
 80080c2:	4610      	mov	r0, r2
 80080c4:	f000 ff54 	bl	8008f70 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	2201      	movs	r2, #1
 80080cc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	2201      	movs	r2, #1
 80080d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	2201      	movs	r2, #1
 80080dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	2201      	movs	r2, #1
 80080e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	2201      	movs	r2, #1
 80080ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	2201      	movs	r2, #1
 80080f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	2201      	movs	r2, #1
 80080fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	2201      	movs	r2, #1
 8008104:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	2201      	movs	r2, #1
 800810c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	2201      	movs	r2, #1
 8008114:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	2201      	movs	r2, #1
 800811c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	2201      	movs	r2, #1
 8008124:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008128:	2300      	movs	r3, #0
}
 800812a:	4618      	mov	r0, r3
 800812c:	3708      	adds	r7, #8
 800812e:	46bd      	mov	sp, r7
 8008130:	bd80      	pop	{r7, pc}

08008132 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008132:	b480      	push	{r7}
 8008134:	b083      	sub	sp, #12
 8008136:	af00      	add	r7, sp, #0
 8008138:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800813a:	bf00      	nop
 800813c:	370c      	adds	r7, #12
 800813e:	46bd      	mov	sp, r7
 8008140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008144:	4770      	bx	lr
	...

08008148 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008148:	b580      	push	{r7, lr}
 800814a:	b084      	sub	sp, #16
 800814c:	af00      	add	r7, sp, #0
 800814e:	6078      	str	r0, [r7, #4]
 8008150:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008152:	683b      	ldr	r3, [r7, #0]
 8008154:	2b00      	cmp	r3, #0
 8008156:	d109      	bne.n	800816c <HAL_TIM_PWM_Start+0x24>
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800815e:	b2db      	uxtb	r3, r3
 8008160:	2b01      	cmp	r3, #1
 8008162:	bf14      	ite	ne
 8008164:	2301      	movne	r3, #1
 8008166:	2300      	moveq	r3, #0
 8008168:	b2db      	uxtb	r3, r3
 800816a:	e03c      	b.n	80081e6 <HAL_TIM_PWM_Start+0x9e>
 800816c:	683b      	ldr	r3, [r7, #0]
 800816e:	2b04      	cmp	r3, #4
 8008170:	d109      	bne.n	8008186 <HAL_TIM_PWM_Start+0x3e>
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008178:	b2db      	uxtb	r3, r3
 800817a:	2b01      	cmp	r3, #1
 800817c:	bf14      	ite	ne
 800817e:	2301      	movne	r3, #1
 8008180:	2300      	moveq	r3, #0
 8008182:	b2db      	uxtb	r3, r3
 8008184:	e02f      	b.n	80081e6 <HAL_TIM_PWM_Start+0x9e>
 8008186:	683b      	ldr	r3, [r7, #0]
 8008188:	2b08      	cmp	r3, #8
 800818a:	d109      	bne.n	80081a0 <HAL_TIM_PWM_Start+0x58>
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008192:	b2db      	uxtb	r3, r3
 8008194:	2b01      	cmp	r3, #1
 8008196:	bf14      	ite	ne
 8008198:	2301      	movne	r3, #1
 800819a:	2300      	moveq	r3, #0
 800819c:	b2db      	uxtb	r3, r3
 800819e:	e022      	b.n	80081e6 <HAL_TIM_PWM_Start+0x9e>
 80081a0:	683b      	ldr	r3, [r7, #0]
 80081a2:	2b0c      	cmp	r3, #12
 80081a4:	d109      	bne.n	80081ba <HAL_TIM_PWM_Start+0x72>
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80081ac:	b2db      	uxtb	r3, r3
 80081ae:	2b01      	cmp	r3, #1
 80081b0:	bf14      	ite	ne
 80081b2:	2301      	movne	r3, #1
 80081b4:	2300      	moveq	r3, #0
 80081b6:	b2db      	uxtb	r3, r3
 80081b8:	e015      	b.n	80081e6 <HAL_TIM_PWM_Start+0x9e>
 80081ba:	683b      	ldr	r3, [r7, #0]
 80081bc:	2b10      	cmp	r3, #16
 80081be:	d109      	bne.n	80081d4 <HAL_TIM_PWM_Start+0x8c>
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80081c6:	b2db      	uxtb	r3, r3
 80081c8:	2b01      	cmp	r3, #1
 80081ca:	bf14      	ite	ne
 80081cc:	2301      	movne	r3, #1
 80081ce:	2300      	moveq	r3, #0
 80081d0:	b2db      	uxtb	r3, r3
 80081d2:	e008      	b.n	80081e6 <HAL_TIM_PWM_Start+0x9e>
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80081da:	b2db      	uxtb	r3, r3
 80081dc:	2b01      	cmp	r3, #1
 80081de:	bf14      	ite	ne
 80081e0:	2301      	movne	r3, #1
 80081e2:	2300      	moveq	r3, #0
 80081e4:	b2db      	uxtb	r3, r3
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d001      	beq.n	80081ee <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80081ea:	2301      	movs	r3, #1
 80081ec:	e0a6      	b.n	800833c <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80081ee:	683b      	ldr	r3, [r7, #0]
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d104      	bne.n	80081fe <HAL_TIM_PWM_Start+0xb6>
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	2202      	movs	r2, #2
 80081f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80081fc:	e023      	b.n	8008246 <HAL_TIM_PWM_Start+0xfe>
 80081fe:	683b      	ldr	r3, [r7, #0]
 8008200:	2b04      	cmp	r3, #4
 8008202:	d104      	bne.n	800820e <HAL_TIM_PWM_Start+0xc6>
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	2202      	movs	r2, #2
 8008208:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800820c:	e01b      	b.n	8008246 <HAL_TIM_PWM_Start+0xfe>
 800820e:	683b      	ldr	r3, [r7, #0]
 8008210:	2b08      	cmp	r3, #8
 8008212:	d104      	bne.n	800821e <HAL_TIM_PWM_Start+0xd6>
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	2202      	movs	r2, #2
 8008218:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800821c:	e013      	b.n	8008246 <HAL_TIM_PWM_Start+0xfe>
 800821e:	683b      	ldr	r3, [r7, #0]
 8008220:	2b0c      	cmp	r3, #12
 8008222:	d104      	bne.n	800822e <HAL_TIM_PWM_Start+0xe6>
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	2202      	movs	r2, #2
 8008228:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800822c:	e00b      	b.n	8008246 <HAL_TIM_PWM_Start+0xfe>
 800822e:	683b      	ldr	r3, [r7, #0]
 8008230:	2b10      	cmp	r3, #16
 8008232:	d104      	bne.n	800823e <HAL_TIM_PWM_Start+0xf6>
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	2202      	movs	r2, #2
 8008238:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800823c:	e003      	b.n	8008246 <HAL_TIM_PWM_Start+0xfe>
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	2202      	movs	r2, #2
 8008242:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	2201      	movs	r2, #1
 800824c:	6839      	ldr	r1, [r7, #0]
 800824e:	4618      	mov	r0, r3
 8008250:	f001 fc26 	bl	8009aa0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	4a3a      	ldr	r2, [pc, #232]	; (8008344 <HAL_TIM_PWM_Start+0x1fc>)
 800825a:	4293      	cmp	r3, r2
 800825c:	d018      	beq.n	8008290 <HAL_TIM_PWM_Start+0x148>
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	4a39      	ldr	r2, [pc, #228]	; (8008348 <HAL_TIM_PWM_Start+0x200>)
 8008264:	4293      	cmp	r3, r2
 8008266:	d013      	beq.n	8008290 <HAL_TIM_PWM_Start+0x148>
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	4a37      	ldr	r2, [pc, #220]	; (800834c <HAL_TIM_PWM_Start+0x204>)
 800826e:	4293      	cmp	r3, r2
 8008270:	d00e      	beq.n	8008290 <HAL_TIM_PWM_Start+0x148>
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	4a36      	ldr	r2, [pc, #216]	; (8008350 <HAL_TIM_PWM_Start+0x208>)
 8008278:	4293      	cmp	r3, r2
 800827a:	d009      	beq.n	8008290 <HAL_TIM_PWM_Start+0x148>
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	4a34      	ldr	r2, [pc, #208]	; (8008354 <HAL_TIM_PWM_Start+0x20c>)
 8008282:	4293      	cmp	r3, r2
 8008284:	d004      	beq.n	8008290 <HAL_TIM_PWM_Start+0x148>
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	4a33      	ldr	r2, [pc, #204]	; (8008358 <HAL_TIM_PWM_Start+0x210>)
 800828c:	4293      	cmp	r3, r2
 800828e:	d101      	bne.n	8008294 <HAL_TIM_PWM_Start+0x14c>
 8008290:	2301      	movs	r3, #1
 8008292:	e000      	b.n	8008296 <HAL_TIM_PWM_Start+0x14e>
 8008294:	2300      	movs	r3, #0
 8008296:	2b00      	cmp	r3, #0
 8008298:	d007      	beq.n	80082aa <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80082a8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	4a25      	ldr	r2, [pc, #148]	; (8008344 <HAL_TIM_PWM_Start+0x1fc>)
 80082b0:	4293      	cmp	r3, r2
 80082b2:	d022      	beq.n	80082fa <HAL_TIM_PWM_Start+0x1b2>
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80082bc:	d01d      	beq.n	80082fa <HAL_TIM_PWM_Start+0x1b2>
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	4a26      	ldr	r2, [pc, #152]	; (800835c <HAL_TIM_PWM_Start+0x214>)
 80082c4:	4293      	cmp	r3, r2
 80082c6:	d018      	beq.n	80082fa <HAL_TIM_PWM_Start+0x1b2>
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	4a24      	ldr	r2, [pc, #144]	; (8008360 <HAL_TIM_PWM_Start+0x218>)
 80082ce:	4293      	cmp	r3, r2
 80082d0:	d013      	beq.n	80082fa <HAL_TIM_PWM_Start+0x1b2>
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	4a23      	ldr	r2, [pc, #140]	; (8008364 <HAL_TIM_PWM_Start+0x21c>)
 80082d8:	4293      	cmp	r3, r2
 80082da:	d00e      	beq.n	80082fa <HAL_TIM_PWM_Start+0x1b2>
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	4a19      	ldr	r2, [pc, #100]	; (8008348 <HAL_TIM_PWM_Start+0x200>)
 80082e2:	4293      	cmp	r3, r2
 80082e4:	d009      	beq.n	80082fa <HAL_TIM_PWM_Start+0x1b2>
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	4a18      	ldr	r2, [pc, #96]	; (800834c <HAL_TIM_PWM_Start+0x204>)
 80082ec:	4293      	cmp	r3, r2
 80082ee:	d004      	beq.n	80082fa <HAL_TIM_PWM_Start+0x1b2>
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	4a18      	ldr	r2, [pc, #96]	; (8008358 <HAL_TIM_PWM_Start+0x210>)
 80082f6:	4293      	cmp	r3, r2
 80082f8:	d115      	bne.n	8008326 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	689a      	ldr	r2, [r3, #8]
 8008300:	4b19      	ldr	r3, [pc, #100]	; (8008368 <HAL_TIM_PWM_Start+0x220>)
 8008302:	4013      	ands	r3, r2
 8008304:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	2b06      	cmp	r3, #6
 800830a:	d015      	beq.n	8008338 <HAL_TIM_PWM_Start+0x1f0>
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008312:	d011      	beq.n	8008338 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	681a      	ldr	r2, [r3, #0]
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	f042 0201 	orr.w	r2, r2, #1
 8008322:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008324:	e008      	b.n	8008338 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	681a      	ldr	r2, [r3, #0]
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	f042 0201 	orr.w	r2, r2, #1
 8008334:	601a      	str	r2, [r3, #0]
 8008336:	e000      	b.n	800833a <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008338:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800833a:	2300      	movs	r3, #0
}
 800833c:	4618      	mov	r0, r3
 800833e:	3710      	adds	r7, #16
 8008340:	46bd      	mov	sp, r7
 8008342:	bd80      	pop	{r7, pc}
 8008344:	40012c00 	.word	0x40012c00
 8008348:	40013400 	.word	0x40013400
 800834c:	40014000 	.word	0x40014000
 8008350:	40014400 	.word	0x40014400
 8008354:	40014800 	.word	0x40014800
 8008358:	40015000 	.word	0x40015000
 800835c:	40000400 	.word	0x40000400
 8008360:	40000800 	.word	0x40000800
 8008364:	40000c00 	.word	0x40000c00
 8008368:	00010007 	.word	0x00010007

0800836c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800836c:	b580      	push	{r7, lr}
 800836e:	b082      	sub	sp, #8
 8008370:	af00      	add	r7, sp, #0
 8008372:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	2b00      	cmp	r3, #0
 8008378:	d101      	bne.n	800837e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800837a:	2301      	movs	r3, #1
 800837c:	e049      	b.n	8008412 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008384:	b2db      	uxtb	r3, r3
 8008386:	2b00      	cmp	r3, #0
 8008388:	d106      	bne.n	8008398 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	2200      	movs	r2, #0
 800838e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8008392:	6878      	ldr	r0, [r7, #4]
 8008394:	f000 f841 	bl	800841a <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	2202      	movs	r2, #2
 800839c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	681a      	ldr	r2, [r3, #0]
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	3304      	adds	r3, #4
 80083a8:	4619      	mov	r1, r3
 80083aa:	4610      	mov	r0, r2
 80083ac:	f000 fde0 	bl	8008f70 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	2201      	movs	r2, #1
 80083b4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	2201      	movs	r2, #1
 80083bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	2201      	movs	r2, #1
 80083c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	2201      	movs	r2, #1
 80083cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	2201      	movs	r2, #1
 80083d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	2201      	movs	r2, #1
 80083dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	2201      	movs	r2, #1
 80083e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	2201      	movs	r2, #1
 80083ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	2201      	movs	r2, #1
 80083f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	2201      	movs	r2, #1
 80083fc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	2201      	movs	r2, #1
 8008404:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	2201      	movs	r2, #1
 800840c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008410:	2300      	movs	r3, #0
}
 8008412:	4618      	mov	r0, r3
 8008414:	3708      	adds	r7, #8
 8008416:	46bd      	mov	sp, r7
 8008418:	bd80      	pop	{r7, pc}

0800841a <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800841a:	b480      	push	{r7}
 800841c:	b083      	sub	sp, #12
 800841e:	af00      	add	r7, sp, #0
 8008420:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8008422:	bf00      	nop
 8008424:	370c      	adds	r7, #12
 8008426:	46bd      	mov	sp, r7
 8008428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800842c:	4770      	bx	lr

0800842e <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800842e:	b580      	push	{r7, lr}
 8008430:	b086      	sub	sp, #24
 8008432:	af00      	add	r7, sp, #0
 8008434:	6078      	str	r0, [r7, #4]
 8008436:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	2b00      	cmp	r3, #0
 800843c:	d101      	bne.n	8008442 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800843e:	2301      	movs	r3, #1
 8008440:	e097      	b.n	8008572 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008448:	b2db      	uxtb	r3, r3
 800844a:	2b00      	cmp	r3, #0
 800844c:	d106      	bne.n	800845c <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	2200      	movs	r2, #0
 8008452:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8008456:	6878      	ldr	r0, [r7, #4]
 8008458:	f7fa f9b6 	bl	80027c8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	2202      	movs	r2, #2
 8008460:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	689b      	ldr	r3, [r3, #8]
 800846a:	687a      	ldr	r2, [r7, #4]
 800846c:	6812      	ldr	r2, [r2, #0]
 800846e:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8008472:	f023 0307 	bic.w	r3, r3, #7
 8008476:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	681a      	ldr	r2, [r3, #0]
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	3304      	adds	r3, #4
 8008480:	4619      	mov	r1, r3
 8008482:	4610      	mov	r0, r2
 8008484:	f000 fd74 	bl	8008f70 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	689b      	ldr	r3, [r3, #8]
 800848e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	699b      	ldr	r3, [r3, #24]
 8008496:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	6a1b      	ldr	r3, [r3, #32]
 800849e:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80084a0:	683b      	ldr	r3, [r7, #0]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	697a      	ldr	r2, [r7, #20]
 80084a6:	4313      	orrs	r3, r2
 80084a8:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80084aa:	693b      	ldr	r3, [r7, #16]
 80084ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80084b0:	f023 0303 	bic.w	r3, r3, #3
 80084b4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80084b6:	683b      	ldr	r3, [r7, #0]
 80084b8:	689a      	ldr	r2, [r3, #8]
 80084ba:	683b      	ldr	r3, [r7, #0]
 80084bc:	699b      	ldr	r3, [r3, #24]
 80084be:	021b      	lsls	r3, r3, #8
 80084c0:	4313      	orrs	r3, r2
 80084c2:	693a      	ldr	r2, [r7, #16]
 80084c4:	4313      	orrs	r3, r2
 80084c6:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80084c8:	693b      	ldr	r3, [r7, #16]
 80084ca:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80084ce:	f023 030c 	bic.w	r3, r3, #12
 80084d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80084d4:	693b      	ldr	r3, [r7, #16]
 80084d6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80084da:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80084de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80084e0:	683b      	ldr	r3, [r7, #0]
 80084e2:	68da      	ldr	r2, [r3, #12]
 80084e4:	683b      	ldr	r3, [r7, #0]
 80084e6:	69db      	ldr	r3, [r3, #28]
 80084e8:	021b      	lsls	r3, r3, #8
 80084ea:	4313      	orrs	r3, r2
 80084ec:	693a      	ldr	r2, [r7, #16]
 80084ee:	4313      	orrs	r3, r2
 80084f0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80084f2:	683b      	ldr	r3, [r7, #0]
 80084f4:	691b      	ldr	r3, [r3, #16]
 80084f6:	011a      	lsls	r2, r3, #4
 80084f8:	683b      	ldr	r3, [r7, #0]
 80084fa:	6a1b      	ldr	r3, [r3, #32]
 80084fc:	031b      	lsls	r3, r3, #12
 80084fe:	4313      	orrs	r3, r2
 8008500:	693a      	ldr	r2, [r7, #16]
 8008502:	4313      	orrs	r3, r2
 8008504:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800850c:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8008514:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8008516:	683b      	ldr	r3, [r7, #0]
 8008518:	685a      	ldr	r2, [r3, #4]
 800851a:	683b      	ldr	r3, [r7, #0]
 800851c:	695b      	ldr	r3, [r3, #20]
 800851e:	011b      	lsls	r3, r3, #4
 8008520:	4313      	orrs	r3, r2
 8008522:	68fa      	ldr	r2, [r7, #12]
 8008524:	4313      	orrs	r3, r2
 8008526:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	697a      	ldr	r2, [r7, #20]
 800852e:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	693a      	ldr	r2, [r7, #16]
 8008536:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	68fa      	ldr	r2, [r7, #12]
 800853e:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	2201      	movs	r2, #1
 8008544:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	2201      	movs	r2, #1
 800854c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	2201      	movs	r2, #1
 8008554:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	2201      	movs	r2, #1
 800855c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	2201      	movs	r2, #1
 8008564:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	2201      	movs	r2, #1
 800856c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008570:	2300      	movs	r3, #0
}
 8008572:	4618      	mov	r0, r3
 8008574:	3718      	adds	r7, #24
 8008576:	46bd      	mov	sp, r7
 8008578:	bd80      	pop	{r7, pc}

0800857a <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800857a:	b580      	push	{r7, lr}
 800857c:	b084      	sub	sp, #16
 800857e:	af00      	add	r7, sp, #0
 8008580:	6078      	str	r0, [r7, #4]
 8008582:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800858a:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008592:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800859a:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80085a2:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80085a4:	683b      	ldr	r3, [r7, #0]
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d110      	bne.n	80085cc <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80085aa:	7bfb      	ldrb	r3, [r7, #15]
 80085ac:	2b01      	cmp	r3, #1
 80085ae:	d102      	bne.n	80085b6 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80085b0:	7b7b      	ldrb	r3, [r7, #13]
 80085b2:	2b01      	cmp	r3, #1
 80085b4:	d001      	beq.n	80085ba <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80085b6:	2301      	movs	r3, #1
 80085b8:	e069      	b.n	800868e <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	2202      	movs	r2, #2
 80085be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	2202      	movs	r2, #2
 80085c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80085ca:	e031      	b.n	8008630 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80085cc:	683b      	ldr	r3, [r7, #0]
 80085ce:	2b04      	cmp	r3, #4
 80085d0:	d110      	bne.n	80085f4 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80085d2:	7bbb      	ldrb	r3, [r7, #14]
 80085d4:	2b01      	cmp	r3, #1
 80085d6:	d102      	bne.n	80085de <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80085d8:	7b3b      	ldrb	r3, [r7, #12]
 80085da:	2b01      	cmp	r3, #1
 80085dc:	d001      	beq.n	80085e2 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80085de:	2301      	movs	r3, #1
 80085e0:	e055      	b.n	800868e <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	2202      	movs	r2, #2
 80085e6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	2202      	movs	r2, #2
 80085ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80085f2:	e01d      	b.n	8008630 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80085f4:	7bfb      	ldrb	r3, [r7, #15]
 80085f6:	2b01      	cmp	r3, #1
 80085f8:	d108      	bne.n	800860c <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80085fa:	7bbb      	ldrb	r3, [r7, #14]
 80085fc:	2b01      	cmp	r3, #1
 80085fe:	d105      	bne.n	800860c <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008600:	7b7b      	ldrb	r3, [r7, #13]
 8008602:	2b01      	cmp	r3, #1
 8008604:	d102      	bne.n	800860c <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8008606:	7b3b      	ldrb	r3, [r7, #12]
 8008608:	2b01      	cmp	r3, #1
 800860a:	d001      	beq.n	8008610 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800860c:	2301      	movs	r3, #1
 800860e:	e03e      	b.n	800868e <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	2202      	movs	r2, #2
 8008614:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	2202      	movs	r2, #2
 800861c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	2202      	movs	r2, #2
 8008624:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	2202      	movs	r2, #2
 800862c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8008630:	683b      	ldr	r3, [r7, #0]
 8008632:	2b00      	cmp	r3, #0
 8008634:	d003      	beq.n	800863e <HAL_TIM_Encoder_Start+0xc4>
 8008636:	683b      	ldr	r3, [r7, #0]
 8008638:	2b04      	cmp	r3, #4
 800863a:	d008      	beq.n	800864e <HAL_TIM_Encoder_Start+0xd4>
 800863c:	e00f      	b.n	800865e <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	2201      	movs	r2, #1
 8008644:	2100      	movs	r1, #0
 8008646:	4618      	mov	r0, r3
 8008648:	f001 fa2a 	bl	8009aa0 <TIM_CCxChannelCmd>
      break;
 800864c:	e016      	b.n	800867c <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	2201      	movs	r2, #1
 8008654:	2104      	movs	r1, #4
 8008656:	4618      	mov	r0, r3
 8008658:	f001 fa22 	bl	8009aa0 <TIM_CCxChannelCmd>
      break;
 800865c:	e00e      	b.n	800867c <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	2201      	movs	r2, #1
 8008664:	2100      	movs	r1, #0
 8008666:	4618      	mov	r0, r3
 8008668:	f001 fa1a 	bl	8009aa0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	2201      	movs	r2, #1
 8008672:	2104      	movs	r1, #4
 8008674:	4618      	mov	r0, r3
 8008676:	f001 fa13 	bl	8009aa0 <TIM_CCxChannelCmd>
      break;
 800867a:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	681a      	ldr	r2, [r3, #0]
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	f042 0201 	orr.w	r2, r2, #1
 800868a:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800868c:	2300      	movs	r3, #0
}
 800868e:	4618      	mov	r0, r3
 8008690:	3710      	adds	r7, #16
 8008692:	46bd      	mov	sp, r7
 8008694:	bd80      	pop	{r7, pc}

08008696 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008696:	b580      	push	{r7, lr}
 8008698:	b082      	sub	sp, #8
 800869a:	af00      	add	r7, sp, #0
 800869c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	691b      	ldr	r3, [r3, #16]
 80086a4:	f003 0302 	and.w	r3, r3, #2
 80086a8:	2b02      	cmp	r3, #2
 80086aa:	d122      	bne.n	80086f2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	68db      	ldr	r3, [r3, #12]
 80086b2:	f003 0302 	and.w	r3, r3, #2
 80086b6:	2b02      	cmp	r3, #2
 80086b8:	d11b      	bne.n	80086f2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	f06f 0202 	mvn.w	r2, #2
 80086c2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	2201      	movs	r2, #1
 80086c8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	699b      	ldr	r3, [r3, #24]
 80086d0:	f003 0303 	and.w	r3, r3, #3
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d003      	beq.n	80086e0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80086d8:	6878      	ldr	r0, [r7, #4]
 80086da:	f000 fc2b 	bl	8008f34 <HAL_TIM_IC_CaptureCallback>
 80086de:	e005      	b.n	80086ec <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80086e0:	6878      	ldr	r0, [r7, #4]
 80086e2:	f000 fc1d 	bl	8008f20 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80086e6:	6878      	ldr	r0, [r7, #4]
 80086e8:	f000 fc2e 	bl	8008f48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	2200      	movs	r2, #0
 80086f0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	691b      	ldr	r3, [r3, #16]
 80086f8:	f003 0304 	and.w	r3, r3, #4
 80086fc:	2b04      	cmp	r3, #4
 80086fe:	d122      	bne.n	8008746 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	68db      	ldr	r3, [r3, #12]
 8008706:	f003 0304 	and.w	r3, r3, #4
 800870a:	2b04      	cmp	r3, #4
 800870c:	d11b      	bne.n	8008746 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	f06f 0204 	mvn.w	r2, #4
 8008716:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	2202      	movs	r2, #2
 800871c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	699b      	ldr	r3, [r3, #24]
 8008724:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008728:	2b00      	cmp	r3, #0
 800872a:	d003      	beq.n	8008734 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800872c:	6878      	ldr	r0, [r7, #4]
 800872e:	f000 fc01 	bl	8008f34 <HAL_TIM_IC_CaptureCallback>
 8008732:	e005      	b.n	8008740 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008734:	6878      	ldr	r0, [r7, #4]
 8008736:	f000 fbf3 	bl	8008f20 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800873a:	6878      	ldr	r0, [r7, #4]
 800873c:	f000 fc04 	bl	8008f48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	2200      	movs	r2, #0
 8008744:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	691b      	ldr	r3, [r3, #16]
 800874c:	f003 0308 	and.w	r3, r3, #8
 8008750:	2b08      	cmp	r3, #8
 8008752:	d122      	bne.n	800879a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	68db      	ldr	r3, [r3, #12]
 800875a:	f003 0308 	and.w	r3, r3, #8
 800875e:	2b08      	cmp	r3, #8
 8008760:	d11b      	bne.n	800879a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	f06f 0208 	mvn.w	r2, #8
 800876a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	2204      	movs	r2, #4
 8008770:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	69db      	ldr	r3, [r3, #28]
 8008778:	f003 0303 	and.w	r3, r3, #3
 800877c:	2b00      	cmp	r3, #0
 800877e:	d003      	beq.n	8008788 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008780:	6878      	ldr	r0, [r7, #4]
 8008782:	f000 fbd7 	bl	8008f34 <HAL_TIM_IC_CaptureCallback>
 8008786:	e005      	b.n	8008794 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008788:	6878      	ldr	r0, [r7, #4]
 800878a:	f000 fbc9 	bl	8008f20 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800878e:	6878      	ldr	r0, [r7, #4]
 8008790:	f000 fbda 	bl	8008f48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	2200      	movs	r2, #0
 8008798:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	691b      	ldr	r3, [r3, #16]
 80087a0:	f003 0310 	and.w	r3, r3, #16
 80087a4:	2b10      	cmp	r3, #16
 80087a6:	d122      	bne.n	80087ee <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	68db      	ldr	r3, [r3, #12]
 80087ae:	f003 0310 	and.w	r3, r3, #16
 80087b2:	2b10      	cmp	r3, #16
 80087b4:	d11b      	bne.n	80087ee <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	f06f 0210 	mvn.w	r2, #16
 80087be:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	2208      	movs	r2, #8
 80087c4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	69db      	ldr	r3, [r3, #28]
 80087cc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d003      	beq.n	80087dc <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80087d4:	6878      	ldr	r0, [r7, #4]
 80087d6:	f000 fbad 	bl	8008f34 <HAL_TIM_IC_CaptureCallback>
 80087da:	e005      	b.n	80087e8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80087dc:	6878      	ldr	r0, [r7, #4]
 80087de:	f000 fb9f 	bl	8008f20 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80087e2:	6878      	ldr	r0, [r7, #4]
 80087e4:	f000 fbb0 	bl	8008f48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	2200      	movs	r2, #0
 80087ec:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	691b      	ldr	r3, [r3, #16]
 80087f4:	f003 0301 	and.w	r3, r3, #1
 80087f8:	2b01      	cmp	r3, #1
 80087fa:	d10e      	bne.n	800881a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	68db      	ldr	r3, [r3, #12]
 8008802:	f003 0301 	and.w	r3, r3, #1
 8008806:	2b01      	cmp	r3, #1
 8008808:	d107      	bne.n	800881a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	f06f 0201 	mvn.w	r2, #1
 8008812:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008814:	6878      	ldr	r0, [r7, #4]
 8008816:	f7f9 fa69 	bl	8001cec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	691b      	ldr	r3, [r3, #16]
 8008820:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008824:	2b80      	cmp	r3, #128	; 0x80
 8008826:	d10e      	bne.n	8008846 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	68db      	ldr	r3, [r3, #12]
 800882e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008832:	2b80      	cmp	r3, #128	; 0x80
 8008834:	d107      	bne.n	8008846 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800883e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008840:	6878      	ldr	r0, [r7, #4]
 8008842:	f001 fb5d 	bl	8009f00 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	691b      	ldr	r3, [r3, #16]
 800884c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008850:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008854:	d10e      	bne.n	8008874 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	68db      	ldr	r3, [r3, #12]
 800885c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008860:	2b80      	cmp	r3, #128	; 0x80
 8008862:	d107      	bne.n	8008874 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800886c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800886e:	6878      	ldr	r0, [r7, #4]
 8008870:	f001 fb50 	bl	8009f14 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	691b      	ldr	r3, [r3, #16]
 800887a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800887e:	2b40      	cmp	r3, #64	; 0x40
 8008880:	d10e      	bne.n	80088a0 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	68db      	ldr	r3, [r3, #12]
 8008888:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800888c:	2b40      	cmp	r3, #64	; 0x40
 800888e:	d107      	bne.n	80088a0 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008898:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800889a:	6878      	ldr	r0, [r7, #4]
 800889c:	f000 fb5e 	bl	8008f5c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	691b      	ldr	r3, [r3, #16]
 80088a6:	f003 0320 	and.w	r3, r3, #32
 80088aa:	2b20      	cmp	r3, #32
 80088ac:	d10e      	bne.n	80088cc <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	68db      	ldr	r3, [r3, #12]
 80088b4:	f003 0320 	and.w	r3, r3, #32
 80088b8:	2b20      	cmp	r3, #32
 80088ba:	d107      	bne.n	80088cc <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	f06f 0220 	mvn.w	r2, #32
 80088c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80088c6:	6878      	ldr	r0, [r7, #4]
 80088c8:	f001 fb10 	bl	8009eec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	691b      	ldr	r3, [r3, #16]
 80088d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80088d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80088da:	d10f      	bne.n	80088fc <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	68db      	ldr	r3, [r3, #12]
 80088e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80088e6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80088ea:	d107      	bne.n	80088fc <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 80088f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80088f6:	6878      	ldr	r0, [r7, #4]
 80088f8:	f001 fb16 	bl	8009f28 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	691b      	ldr	r3, [r3, #16]
 8008902:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008906:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800890a:	d10f      	bne.n	800892c <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	68db      	ldr	r3, [r3, #12]
 8008912:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008916:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800891a:	d107      	bne.n	800892c <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8008924:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8008926:	6878      	ldr	r0, [r7, #4]
 8008928:	f001 fb08 	bl	8009f3c <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	691b      	ldr	r3, [r3, #16]
 8008932:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008936:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800893a:	d10f      	bne.n	800895c <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	68db      	ldr	r3, [r3, #12]
 8008942:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008946:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800894a:	d107      	bne.n	800895c <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8008954:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8008956:	6878      	ldr	r0, [r7, #4]
 8008958:	f001 fafa 	bl	8009f50 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	691b      	ldr	r3, [r3, #16]
 8008962:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008966:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800896a:	d10f      	bne.n	800898c <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	68db      	ldr	r3, [r3, #12]
 8008972:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008976:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800897a:	d107      	bne.n	800898c <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8008984:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8008986:	6878      	ldr	r0, [r7, #4]
 8008988:	f001 faec 	bl	8009f64 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800898c:	bf00      	nop
 800898e:	3708      	adds	r7, #8
 8008990:	46bd      	mov	sp, r7
 8008992:	bd80      	pop	{r7, pc}

08008994 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8008994:	b580      	push	{r7, lr}
 8008996:	b086      	sub	sp, #24
 8008998:	af00      	add	r7, sp, #0
 800899a:	60f8      	str	r0, [r7, #12]
 800899c:	60b9      	str	r1, [r7, #8]
 800899e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80089a0:	2300      	movs	r3, #0
 80089a2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80089aa:	2b01      	cmp	r3, #1
 80089ac:	d101      	bne.n	80089b2 <HAL_TIM_IC_ConfigChannel+0x1e>
 80089ae:	2302      	movs	r3, #2
 80089b0:	e088      	b.n	8008ac4 <HAL_TIM_IC_ConfigChannel+0x130>
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	2201      	movs	r2, #1
 80089b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d11b      	bne.n	80089f8 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	6818      	ldr	r0, [r3, #0]
 80089c4:	68bb      	ldr	r3, [r7, #8]
 80089c6:	6819      	ldr	r1, [r3, #0]
 80089c8:	68bb      	ldr	r3, [r7, #8]
 80089ca:	685a      	ldr	r2, [r3, #4]
 80089cc:	68bb      	ldr	r3, [r7, #8]
 80089ce:	68db      	ldr	r3, [r3, #12]
 80089d0:	f000 fea0 	bl	8009714 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	699a      	ldr	r2, [r3, #24]
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	f022 020c 	bic.w	r2, r2, #12
 80089e2:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	6999      	ldr	r1, [r3, #24]
 80089ea:	68bb      	ldr	r3, [r7, #8]
 80089ec:	689a      	ldr	r2, [r3, #8]
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	430a      	orrs	r2, r1
 80089f4:	619a      	str	r2, [r3, #24]
 80089f6:	e060      	b.n	8008aba <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	2b04      	cmp	r3, #4
 80089fc:	d11c      	bne.n	8008a38 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	6818      	ldr	r0, [r3, #0]
 8008a02:	68bb      	ldr	r3, [r7, #8]
 8008a04:	6819      	ldr	r1, [r3, #0]
 8008a06:	68bb      	ldr	r3, [r7, #8]
 8008a08:	685a      	ldr	r2, [r3, #4]
 8008a0a:	68bb      	ldr	r3, [r7, #8]
 8008a0c:	68db      	ldr	r3, [r3, #12]
 8008a0e:	f000 ff24 	bl	800985a <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	699a      	ldr	r2, [r3, #24]
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8008a20:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	6999      	ldr	r1, [r3, #24]
 8008a28:	68bb      	ldr	r3, [r7, #8]
 8008a2a:	689b      	ldr	r3, [r3, #8]
 8008a2c:	021a      	lsls	r2, r3, #8
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	430a      	orrs	r2, r1
 8008a34:	619a      	str	r2, [r3, #24]
 8008a36:	e040      	b.n	8008aba <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	2b08      	cmp	r3, #8
 8008a3c:	d11b      	bne.n	8008a76 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	6818      	ldr	r0, [r3, #0]
 8008a42:	68bb      	ldr	r3, [r7, #8]
 8008a44:	6819      	ldr	r1, [r3, #0]
 8008a46:	68bb      	ldr	r3, [r7, #8]
 8008a48:	685a      	ldr	r2, [r3, #4]
 8008a4a:	68bb      	ldr	r3, [r7, #8]
 8008a4c:	68db      	ldr	r3, [r3, #12]
 8008a4e:	f000 ff71 	bl	8009934 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	69da      	ldr	r2, [r3, #28]
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	f022 020c 	bic.w	r2, r2, #12
 8008a60:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	69d9      	ldr	r1, [r3, #28]
 8008a68:	68bb      	ldr	r3, [r7, #8]
 8008a6a:	689a      	ldr	r2, [r3, #8]
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	430a      	orrs	r2, r1
 8008a72:	61da      	str	r2, [r3, #28]
 8008a74:	e021      	b.n	8008aba <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	2b0c      	cmp	r3, #12
 8008a7a:	d11c      	bne.n	8008ab6 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	6818      	ldr	r0, [r3, #0]
 8008a80:	68bb      	ldr	r3, [r7, #8]
 8008a82:	6819      	ldr	r1, [r3, #0]
 8008a84:	68bb      	ldr	r3, [r7, #8]
 8008a86:	685a      	ldr	r2, [r3, #4]
 8008a88:	68bb      	ldr	r3, [r7, #8]
 8008a8a:	68db      	ldr	r3, [r3, #12]
 8008a8c:	f000 ff8e 	bl	80099ac <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	69da      	ldr	r2, [r3, #28]
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8008a9e:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	69d9      	ldr	r1, [r3, #28]
 8008aa6:	68bb      	ldr	r3, [r7, #8]
 8008aa8:	689b      	ldr	r3, [r3, #8]
 8008aaa:	021a      	lsls	r2, r3, #8
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	430a      	orrs	r2, r1
 8008ab2:	61da      	str	r2, [r3, #28]
 8008ab4:	e001      	b.n	8008aba <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8008ab6:	2301      	movs	r3, #1
 8008ab8:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	2200      	movs	r2, #0
 8008abe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008ac2:	7dfb      	ldrb	r3, [r7, #23]
}
 8008ac4:	4618      	mov	r0, r3
 8008ac6:	3718      	adds	r7, #24
 8008ac8:	46bd      	mov	sp, r7
 8008aca:	bd80      	pop	{r7, pc}

08008acc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008acc:	b580      	push	{r7, lr}
 8008ace:	b086      	sub	sp, #24
 8008ad0:	af00      	add	r7, sp, #0
 8008ad2:	60f8      	str	r0, [r7, #12]
 8008ad4:	60b9      	str	r1, [r7, #8]
 8008ad6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008ad8:	2300      	movs	r3, #0
 8008ada:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008ae2:	2b01      	cmp	r3, #1
 8008ae4:	d101      	bne.n	8008aea <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008ae6:	2302      	movs	r3, #2
 8008ae8:	e0ff      	b.n	8008cea <HAL_TIM_PWM_ConfigChannel+0x21e>
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	2201      	movs	r2, #1
 8008aee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	2b14      	cmp	r3, #20
 8008af6:	f200 80f0 	bhi.w	8008cda <HAL_TIM_PWM_ConfigChannel+0x20e>
 8008afa:	a201      	add	r2, pc, #4	; (adr r2, 8008b00 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008afc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b00:	08008b55 	.word	0x08008b55
 8008b04:	08008cdb 	.word	0x08008cdb
 8008b08:	08008cdb 	.word	0x08008cdb
 8008b0c:	08008cdb 	.word	0x08008cdb
 8008b10:	08008b95 	.word	0x08008b95
 8008b14:	08008cdb 	.word	0x08008cdb
 8008b18:	08008cdb 	.word	0x08008cdb
 8008b1c:	08008cdb 	.word	0x08008cdb
 8008b20:	08008bd7 	.word	0x08008bd7
 8008b24:	08008cdb 	.word	0x08008cdb
 8008b28:	08008cdb 	.word	0x08008cdb
 8008b2c:	08008cdb 	.word	0x08008cdb
 8008b30:	08008c17 	.word	0x08008c17
 8008b34:	08008cdb 	.word	0x08008cdb
 8008b38:	08008cdb 	.word	0x08008cdb
 8008b3c:	08008cdb 	.word	0x08008cdb
 8008b40:	08008c59 	.word	0x08008c59
 8008b44:	08008cdb 	.word	0x08008cdb
 8008b48:	08008cdb 	.word	0x08008cdb
 8008b4c:	08008cdb 	.word	0x08008cdb
 8008b50:	08008c99 	.word	0x08008c99
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	68b9      	ldr	r1, [r7, #8]
 8008b5a:	4618      	mov	r0, r3
 8008b5c:	f000 fab0 	bl	80090c0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	699a      	ldr	r2, [r3, #24]
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	f042 0208 	orr.w	r2, r2, #8
 8008b6e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	699a      	ldr	r2, [r3, #24]
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	f022 0204 	bic.w	r2, r2, #4
 8008b7e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	6999      	ldr	r1, [r3, #24]
 8008b86:	68bb      	ldr	r3, [r7, #8]
 8008b88:	691a      	ldr	r2, [r3, #16]
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	430a      	orrs	r2, r1
 8008b90:	619a      	str	r2, [r3, #24]
      break;
 8008b92:	e0a5      	b.n	8008ce0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	68b9      	ldr	r1, [r7, #8]
 8008b9a:	4618      	mov	r0, r3
 8008b9c:	f000 fb2a 	bl	80091f4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	699a      	ldr	r2, [r3, #24]
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008bae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	699a      	ldr	r2, [r3, #24]
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008bbe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	6999      	ldr	r1, [r3, #24]
 8008bc6:	68bb      	ldr	r3, [r7, #8]
 8008bc8:	691b      	ldr	r3, [r3, #16]
 8008bca:	021a      	lsls	r2, r3, #8
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	430a      	orrs	r2, r1
 8008bd2:	619a      	str	r2, [r3, #24]
      break;
 8008bd4:	e084      	b.n	8008ce0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	68b9      	ldr	r1, [r7, #8]
 8008bdc:	4618      	mov	r0, r3
 8008bde:	f000 fb9d 	bl	800931c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	69da      	ldr	r2, [r3, #28]
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	f042 0208 	orr.w	r2, r2, #8
 8008bf0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	69da      	ldr	r2, [r3, #28]
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	f022 0204 	bic.w	r2, r2, #4
 8008c00:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	69d9      	ldr	r1, [r3, #28]
 8008c08:	68bb      	ldr	r3, [r7, #8]
 8008c0a:	691a      	ldr	r2, [r3, #16]
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	430a      	orrs	r2, r1
 8008c12:	61da      	str	r2, [r3, #28]
      break;
 8008c14:	e064      	b.n	8008ce0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	68b9      	ldr	r1, [r7, #8]
 8008c1c:	4618      	mov	r0, r3
 8008c1e:	f000 fc0f 	bl	8009440 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	69da      	ldr	r2, [r3, #28]
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008c30:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	69da      	ldr	r2, [r3, #28]
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008c40:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	69d9      	ldr	r1, [r3, #28]
 8008c48:	68bb      	ldr	r3, [r7, #8]
 8008c4a:	691b      	ldr	r3, [r3, #16]
 8008c4c:	021a      	lsls	r2, r3, #8
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	430a      	orrs	r2, r1
 8008c54:	61da      	str	r2, [r3, #28]
      break;
 8008c56:	e043      	b.n	8008ce0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	68b9      	ldr	r1, [r7, #8]
 8008c5e:	4618      	mov	r0, r3
 8008c60:	f000 fc82 	bl	8009568 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	f042 0208 	orr.w	r2, r2, #8
 8008c72:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	f022 0204 	bic.w	r2, r2, #4
 8008c82:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8008c8a:	68bb      	ldr	r3, [r7, #8]
 8008c8c:	691a      	ldr	r2, [r3, #16]
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	430a      	orrs	r2, r1
 8008c94:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8008c96:	e023      	b.n	8008ce0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	68b9      	ldr	r1, [r7, #8]
 8008c9e:	4618      	mov	r0, r3
 8008ca0:	f000 fccc 	bl	800963c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008cb2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008cc2:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8008cca:	68bb      	ldr	r3, [r7, #8]
 8008ccc:	691b      	ldr	r3, [r3, #16]
 8008cce:	021a      	lsls	r2, r3, #8
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	430a      	orrs	r2, r1
 8008cd6:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8008cd8:	e002      	b.n	8008ce0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8008cda:	2301      	movs	r3, #1
 8008cdc:	75fb      	strb	r3, [r7, #23]
      break;
 8008cde:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	2200      	movs	r2, #0
 8008ce4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008ce8:	7dfb      	ldrb	r3, [r7, #23]
}
 8008cea:	4618      	mov	r0, r3
 8008cec:	3718      	adds	r7, #24
 8008cee:	46bd      	mov	sp, r7
 8008cf0:	bd80      	pop	{r7, pc}
 8008cf2:	bf00      	nop

08008cf4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008cf4:	b580      	push	{r7, lr}
 8008cf6:	b084      	sub	sp, #16
 8008cf8:	af00      	add	r7, sp, #0
 8008cfa:	6078      	str	r0, [r7, #4]
 8008cfc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008cfe:	2300      	movs	r3, #0
 8008d00:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008d08:	2b01      	cmp	r3, #1
 8008d0a:	d101      	bne.n	8008d10 <HAL_TIM_ConfigClockSource+0x1c>
 8008d0c:	2302      	movs	r3, #2
 8008d0e:	e0f6      	b.n	8008efe <HAL_TIM_ConfigClockSource+0x20a>
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	2201      	movs	r2, #1
 8008d14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	2202      	movs	r2, #2
 8008d1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	689b      	ldr	r3, [r3, #8]
 8008d26:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008d28:	68bb      	ldr	r3, [r7, #8]
 8008d2a:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8008d2e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008d32:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008d34:	68bb      	ldr	r3, [r7, #8]
 8008d36:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008d3a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	68ba      	ldr	r2, [r7, #8]
 8008d42:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008d44:	683b      	ldr	r3, [r7, #0]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	4a6f      	ldr	r2, [pc, #444]	; (8008f08 <HAL_TIM_ConfigClockSource+0x214>)
 8008d4a:	4293      	cmp	r3, r2
 8008d4c:	f000 80c1 	beq.w	8008ed2 <HAL_TIM_ConfigClockSource+0x1de>
 8008d50:	4a6d      	ldr	r2, [pc, #436]	; (8008f08 <HAL_TIM_ConfigClockSource+0x214>)
 8008d52:	4293      	cmp	r3, r2
 8008d54:	f200 80c6 	bhi.w	8008ee4 <HAL_TIM_ConfigClockSource+0x1f0>
 8008d58:	4a6c      	ldr	r2, [pc, #432]	; (8008f0c <HAL_TIM_ConfigClockSource+0x218>)
 8008d5a:	4293      	cmp	r3, r2
 8008d5c:	f000 80b9 	beq.w	8008ed2 <HAL_TIM_ConfigClockSource+0x1de>
 8008d60:	4a6a      	ldr	r2, [pc, #424]	; (8008f0c <HAL_TIM_ConfigClockSource+0x218>)
 8008d62:	4293      	cmp	r3, r2
 8008d64:	f200 80be 	bhi.w	8008ee4 <HAL_TIM_ConfigClockSource+0x1f0>
 8008d68:	4a69      	ldr	r2, [pc, #420]	; (8008f10 <HAL_TIM_ConfigClockSource+0x21c>)
 8008d6a:	4293      	cmp	r3, r2
 8008d6c:	f000 80b1 	beq.w	8008ed2 <HAL_TIM_ConfigClockSource+0x1de>
 8008d70:	4a67      	ldr	r2, [pc, #412]	; (8008f10 <HAL_TIM_ConfigClockSource+0x21c>)
 8008d72:	4293      	cmp	r3, r2
 8008d74:	f200 80b6 	bhi.w	8008ee4 <HAL_TIM_ConfigClockSource+0x1f0>
 8008d78:	4a66      	ldr	r2, [pc, #408]	; (8008f14 <HAL_TIM_ConfigClockSource+0x220>)
 8008d7a:	4293      	cmp	r3, r2
 8008d7c:	f000 80a9 	beq.w	8008ed2 <HAL_TIM_ConfigClockSource+0x1de>
 8008d80:	4a64      	ldr	r2, [pc, #400]	; (8008f14 <HAL_TIM_ConfigClockSource+0x220>)
 8008d82:	4293      	cmp	r3, r2
 8008d84:	f200 80ae 	bhi.w	8008ee4 <HAL_TIM_ConfigClockSource+0x1f0>
 8008d88:	4a63      	ldr	r2, [pc, #396]	; (8008f18 <HAL_TIM_ConfigClockSource+0x224>)
 8008d8a:	4293      	cmp	r3, r2
 8008d8c:	f000 80a1 	beq.w	8008ed2 <HAL_TIM_ConfigClockSource+0x1de>
 8008d90:	4a61      	ldr	r2, [pc, #388]	; (8008f18 <HAL_TIM_ConfigClockSource+0x224>)
 8008d92:	4293      	cmp	r3, r2
 8008d94:	f200 80a6 	bhi.w	8008ee4 <HAL_TIM_ConfigClockSource+0x1f0>
 8008d98:	4a60      	ldr	r2, [pc, #384]	; (8008f1c <HAL_TIM_ConfigClockSource+0x228>)
 8008d9a:	4293      	cmp	r3, r2
 8008d9c:	f000 8099 	beq.w	8008ed2 <HAL_TIM_ConfigClockSource+0x1de>
 8008da0:	4a5e      	ldr	r2, [pc, #376]	; (8008f1c <HAL_TIM_ConfigClockSource+0x228>)
 8008da2:	4293      	cmp	r3, r2
 8008da4:	f200 809e 	bhi.w	8008ee4 <HAL_TIM_ConfigClockSource+0x1f0>
 8008da8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8008dac:	f000 8091 	beq.w	8008ed2 <HAL_TIM_ConfigClockSource+0x1de>
 8008db0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8008db4:	f200 8096 	bhi.w	8008ee4 <HAL_TIM_ConfigClockSource+0x1f0>
 8008db8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008dbc:	f000 8089 	beq.w	8008ed2 <HAL_TIM_ConfigClockSource+0x1de>
 8008dc0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008dc4:	f200 808e 	bhi.w	8008ee4 <HAL_TIM_ConfigClockSource+0x1f0>
 8008dc8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008dcc:	d03e      	beq.n	8008e4c <HAL_TIM_ConfigClockSource+0x158>
 8008dce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008dd2:	f200 8087 	bhi.w	8008ee4 <HAL_TIM_ConfigClockSource+0x1f0>
 8008dd6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008dda:	f000 8086 	beq.w	8008eea <HAL_TIM_ConfigClockSource+0x1f6>
 8008dde:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008de2:	d87f      	bhi.n	8008ee4 <HAL_TIM_ConfigClockSource+0x1f0>
 8008de4:	2b70      	cmp	r3, #112	; 0x70
 8008de6:	d01a      	beq.n	8008e1e <HAL_TIM_ConfigClockSource+0x12a>
 8008de8:	2b70      	cmp	r3, #112	; 0x70
 8008dea:	d87b      	bhi.n	8008ee4 <HAL_TIM_ConfigClockSource+0x1f0>
 8008dec:	2b60      	cmp	r3, #96	; 0x60
 8008dee:	d050      	beq.n	8008e92 <HAL_TIM_ConfigClockSource+0x19e>
 8008df0:	2b60      	cmp	r3, #96	; 0x60
 8008df2:	d877      	bhi.n	8008ee4 <HAL_TIM_ConfigClockSource+0x1f0>
 8008df4:	2b50      	cmp	r3, #80	; 0x50
 8008df6:	d03c      	beq.n	8008e72 <HAL_TIM_ConfigClockSource+0x17e>
 8008df8:	2b50      	cmp	r3, #80	; 0x50
 8008dfa:	d873      	bhi.n	8008ee4 <HAL_TIM_ConfigClockSource+0x1f0>
 8008dfc:	2b40      	cmp	r3, #64	; 0x40
 8008dfe:	d058      	beq.n	8008eb2 <HAL_TIM_ConfigClockSource+0x1be>
 8008e00:	2b40      	cmp	r3, #64	; 0x40
 8008e02:	d86f      	bhi.n	8008ee4 <HAL_TIM_ConfigClockSource+0x1f0>
 8008e04:	2b30      	cmp	r3, #48	; 0x30
 8008e06:	d064      	beq.n	8008ed2 <HAL_TIM_ConfigClockSource+0x1de>
 8008e08:	2b30      	cmp	r3, #48	; 0x30
 8008e0a:	d86b      	bhi.n	8008ee4 <HAL_TIM_ConfigClockSource+0x1f0>
 8008e0c:	2b20      	cmp	r3, #32
 8008e0e:	d060      	beq.n	8008ed2 <HAL_TIM_ConfigClockSource+0x1de>
 8008e10:	2b20      	cmp	r3, #32
 8008e12:	d867      	bhi.n	8008ee4 <HAL_TIM_ConfigClockSource+0x1f0>
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d05c      	beq.n	8008ed2 <HAL_TIM_ConfigClockSource+0x1de>
 8008e18:	2b10      	cmp	r3, #16
 8008e1a:	d05a      	beq.n	8008ed2 <HAL_TIM_ConfigClockSource+0x1de>
 8008e1c:	e062      	b.n	8008ee4 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	6818      	ldr	r0, [r3, #0]
 8008e22:	683b      	ldr	r3, [r7, #0]
 8008e24:	6899      	ldr	r1, [r3, #8]
 8008e26:	683b      	ldr	r3, [r7, #0]
 8008e28:	685a      	ldr	r2, [r3, #4]
 8008e2a:	683b      	ldr	r3, [r7, #0]
 8008e2c:	68db      	ldr	r3, [r3, #12]
 8008e2e:	f000 fe17 	bl	8009a60 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	689b      	ldr	r3, [r3, #8]
 8008e38:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008e3a:	68bb      	ldr	r3, [r7, #8]
 8008e3c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008e40:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	68ba      	ldr	r2, [r7, #8]
 8008e48:	609a      	str	r2, [r3, #8]
      break;
 8008e4a:	e04f      	b.n	8008eec <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	6818      	ldr	r0, [r3, #0]
 8008e50:	683b      	ldr	r3, [r7, #0]
 8008e52:	6899      	ldr	r1, [r3, #8]
 8008e54:	683b      	ldr	r3, [r7, #0]
 8008e56:	685a      	ldr	r2, [r3, #4]
 8008e58:	683b      	ldr	r3, [r7, #0]
 8008e5a:	68db      	ldr	r3, [r3, #12]
 8008e5c:	f000 fe00 	bl	8009a60 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	689a      	ldr	r2, [r3, #8]
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008e6e:	609a      	str	r2, [r3, #8]
      break;
 8008e70:	e03c      	b.n	8008eec <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	6818      	ldr	r0, [r3, #0]
 8008e76:	683b      	ldr	r3, [r7, #0]
 8008e78:	6859      	ldr	r1, [r3, #4]
 8008e7a:	683b      	ldr	r3, [r7, #0]
 8008e7c:	68db      	ldr	r3, [r3, #12]
 8008e7e:	461a      	mov	r2, r3
 8008e80:	f000 fcbc 	bl	80097fc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	2150      	movs	r1, #80	; 0x50
 8008e8a:	4618      	mov	r0, r3
 8008e8c:	f000 fdcb 	bl	8009a26 <TIM_ITRx_SetConfig>
      break;
 8008e90:	e02c      	b.n	8008eec <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	6818      	ldr	r0, [r3, #0]
 8008e96:	683b      	ldr	r3, [r7, #0]
 8008e98:	6859      	ldr	r1, [r3, #4]
 8008e9a:	683b      	ldr	r3, [r7, #0]
 8008e9c:	68db      	ldr	r3, [r3, #12]
 8008e9e:	461a      	mov	r2, r3
 8008ea0:	f000 fd18 	bl	80098d4 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	2160      	movs	r1, #96	; 0x60
 8008eaa:	4618      	mov	r0, r3
 8008eac:	f000 fdbb 	bl	8009a26 <TIM_ITRx_SetConfig>
      break;
 8008eb0:	e01c      	b.n	8008eec <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	6818      	ldr	r0, [r3, #0]
 8008eb6:	683b      	ldr	r3, [r7, #0]
 8008eb8:	6859      	ldr	r1, [r3, #4]
 8008eba:	683b      	ldr	r3, [r7, #0]
 8008ebc:	68db      	ldr	r3, [r3, #12]
 8008ebe:	461a      	mov	r2, r3
 8008ec0:	f000 fc9c 	bl	80097fc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	2140      	movs	r1, #64	; 0x40
 8008eca:	4618      	mov	r0, r3
 8008ecc:	f000 fdab 	bl	8009a26 <TIM_ITRx_SetConfig>
      break;
 8008ed0:	e00c      	b.n	8008eec <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	681a      	ldr	r2, [r3, #0]
 8008ed6:	683b      	ldr	r3, [r7, #0]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	4619      	mov	r1, r3
 8008edc:	4610      	mov	r0, r2
 8008ede:	f000 fda2 	bl	8009a26 <TIM_ITRx_SetConfig>
      break;
 8008ee2:	e003      	b.n	8008eec <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8008ee4:	2301      	movs	r3, #1
 8008ee6:	73fb      	strb	r3, [r7, #15]
      break;
 8008ee8:	e000      	b.n	8008eec <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8008eea:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	2201      	movs	r2, #1
 8008ef0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	2200      	movs	r2, #0
 8008ef8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008efc:	7bfb      	ldrb	r3, [r7, #15]
}
 8008efe:	4618      	mov	r0, r3
 8008f00:	3710      	adds	r7, #16
 8008f02:	46bd      	mov	sp, r7
 8008f04:	bd80      	pop	{r7, pc}
 8008f06:	bf00      	nop
 8008f08:	00100070 	.word	0x00100070
 8008f0c:	00100060 	.word	0x00100060
 8008f10:	00100050 	.word	0x00100050
 8008f14:	00100040 	.word	0x00100040
 8008f18:	00100030 	.word	0x00100030
 8008f1c:	00100020 	.word	0x00100020

08008f20 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008f20:	b480      	push	{r7}
 8008f22:	b083      	sub	sp, #12
 8008f24:	af00      	add	r7, sp, #0
 8008f26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008f28:	bf00      	nop
 8008f2a:	370c      	adds	r7, #12
 8008f2c:	46bd      	mov	sp, r7
 8008f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f32:	4770      	bx	lr

08008f34 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008f34:	b480      	push	{r7}
 8008f36:	b083      	sub	sp, #12
 8008f38:	af00      	add	r7, sp, #0
 8008f3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008f3c:	bf00      	nop
 8008f3e:	370c      	adds	r7, #12
 8008f40:	46bd      	mov	sp, r7
 8008f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f46:	4770      	bx	lr

08008f48 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008f48:	b480      	push	{r7}
 8008f4a:	b083      	sub	sp, #12
 8008f4c:	af00      	add	r7, sp, #0
 8008f4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008f50:	bf00      	nop
 8008f52:	370c      	adds	r7, #12
 8008f54:	46bd      	mov	sp, r7
 8008f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f5a:	4770      	bx	lr

08008f5c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008f5c:	b480      	push	{r7}
 8008f5e:	b083      	sub	sp, #12
 8008f60:	af00      	add	r7, sp, #0
 8008f62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008f64:	bf00      	nop
 8008f66:	370c      	adds	r7, #12
 8008f68:	46bd      	mov	sp, r7
 8008f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f6e:	4770      	bx	lr

08008f70 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008f70:	b480      	push	{r7}
 8008f72:	b085      	sub	sp, #20
 8008f74:	af00      	add	r7, sp, #0
 8008f76:	6078      	str	r0, [r7, #4]
 8008f78:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	4a46      	ldr	r2, [pc, #280]	; (800909c <TIM_Base_SetConfig+0x12c>)
 8008f84:	4293      	cmp	r3, r2
 8008f86:	d017      	beq.n	8008fb8 <TIM_Base_SetConfig+0x48>
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008f8e:	d013      	beq.n	8008fb8 <TIM_Base_SetConfig+0x48>
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	4a43      	ldr	r2, [pc, #268]	; (80090a0 <TIM_Base_SetConfig+0x130>)
 8008f94:	4293      	cmp	r3, r2
 8008f96:	d00f      	beq.n	8008fb8 <TIM_Base_SetConfig+0x48>
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	4a42      	ldr	r2, [pc, #264]	; (80090a4 <TIM_Base_SetConfig+0x134>)
 8008f9c:	4293      	cmp	r3, r2
 8008f9e:	d00b      	beq.n	8008fb8 <TIM_Base_SetConfig+0x48>
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	4a41      	ldr	r2, [pc, #260]	; (80090a8 <TIM_Base_SetConfig+0x138>)
 8008fa4:	4293      	cmp	r3, r2
 8008fa6:	d007      	beq.n	8008fb8 <TIM_Base_SetConfig+0x48>
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	4a40      	ldr	r2, [pc, #256]	; (80090ac <TIM_Base_SetConfig+0x13c>)
 8008fac:	4293      	cmp	r3, r2
 8008fae:	d003      	beq.n	8008fb8 <TIM_Base_SetConfig+0x48>
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	4a3f      	ldr	r2, [pc, #252]	; (80090b0 <TIM_Base_SetConfig+0x140>)
 8008fb4:	4293      	cmp	r3, r2
 8008fb6:	d108      	bne.n	8008fca <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008fbe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008fc0:	683b      	ldr	r3, [r7, #0]
 8008fc2:	685b      	ldr	r3, [r3, #4]
 8008fc4:	68fa      	ldr	r2, [r7, #12]
 8008fc6:	4313      	orrs	r3, r2
 8008fc8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	4a33      	ldr	r2, [pc, #204]	; (800909c <TIM_Base_SetConfig+0x12c>)
 8008fce:	4293      	cmp	r3, r2
 8008fd0:	d023      	beq.n	800901a <TIM_Base_SetConfig+0xaa>
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008fd8:	d01f      	beq.n	800901a <TIM_Base_SetConfig+0xaa>
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	4a30      	ldr	r2, [pc, #192]	; (80090a0 <TIM_Base_SetConfig+0x130>)
 8008fde:	4293      	cmp	r3, r2
 8008fe0:	d01b      	beq.n	800901a <TIM_Base_SetConfig+0xaa>
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	4a2f      	ldr	r2, [pc, #188]	; (80090a4 <TIM_Base_SetConfig+0x134>)
 8008fe6:	4293      	cmp	r3, r2
 8008fe8:	d017      	beq.n	800901a <TIM_Base_SetConfig+0xaa>
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	4a2e      	ldr	r2, [pc, #184]	; (80090a8 <TIM_Base_SetConfig+0x138>)
 8008fee:	4293      	cmp	r3, r2
 8008ff0:	d013      	beq.n	800901a <TIM_Base_SetConfig+0xaa>
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	4a2d      	ldr	r2, [pc, #180]	; (80090ac <TIM_Base_SetConfig+0x13c>)
 8008ff6:	4293      	cmp	r3, r2
 8008ff8:	d00f      	beq.n	800901a <TIM_Base_SetConfig+0xaa>
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	4a2d      	ldr	r2, [pc, #180]	; (80090b4 <TIM_Base_SetConfig+0x144>)
 8008ffe:	4293      	cmp	r3, r2
 8009000:	d00b      	beq.n	800901a <TIM_Base_SetConfig+0xaa>
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	4a2c      	ldr	r2, [pc, #176]	; (80090b8 <TIM_Base_SetConfig+0x148>)
 8009006:	4293      	cmp	r3, r2
 8009008:	d007      	beq.n	800901a <TIM_Base_SetConfig+0xaa>
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	4a2b      	ldr	r2, [pc, #172]	; (80090bc <TIM_Base_SetConfig+0x14c>)
 800900e:	4293      	cmp	r3, r2
 8009010:	d003      	beq.n	800901a <TIM_Base_SetConfig+0xaa>
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	4a26      	ldr	r2, [pc, #152]	; (80090b0 <TIM_Base_SetConfig+0x140>)
 8009016:	4293      	cmp	r3, r2
 8009018:	d108      	bne.n	800902c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009020:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009022:	683b      	ldr	r3, [r7, #0]
 8009024:	68db      	ldr	r3, [r3, #12]
 8009026:	68fa      	ldr	r2, [r7, #12]
 8009028:	4313      	orrs	r3, r2
 800902a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009032:	683b      	ldr	r3, [r7, #0]
 8009034:	695b      	ldr	r3, [r3, #20]
 8009036:	4313      	orrs	r3, r2
 8009038:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	68fa      	ldr	r2, [r7, #12]
 800903e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009040:	683b      	ldr	r3, [r7, #0]
 8009042:	689a      	ldr	r2, [r3, #8]
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009048:	683b      	ldr	r3, [r7, #0]
 800904a:	681a      	ldr	r2, [r3, #0]
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	4a12      	ldr	r2, [pc, #72]	; (800909c <TIM_Base_SetConfig+0x12c>)
 8009054:	4293      	cmp	r3, r2
 8009056:	d013      	beq.n	8009080 <TIM_Base_SetConfig+0x110>
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	4a14      	ldr	r2, [pc, #80]	; (80090ac <TIM_Base_SetConfig+0x13c>)
 800905c:	4293      	cmp	r3, r2
 800905e:	d00f      	beq.n	8009080 <TIM_Base_SetConfig+0x110>
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	4a14      	ldr	r2, [pc, #80]	; (80090b4 <TIM_Base_SetConfig+0x144>)
 8009064:	4293      	cmp	r3, r2
 8009066:	d00b      	beq.n	8009080 <TIM_Base_SetConfig+0x110>
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	4a13      	ldr	r2, [pc, #76]	; (80090b8 <TIM_Base_SetConfig+0x148>)
 800906c:	4293      	cmp	r3, r2
 800906e:	d007      	beq.n	8009080 <TIM_Base_SetConfig+0x110>
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	4a12      	ldr	r2, [pc, #72]	; (80090bc <TIM_Base_SetConfig+0x14c>)
 8009074:	4293      	cmp	r3, r2
 8009076:	d003      	beq.n	8009080 <TIM_Base_SetConfig+0x110>
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	4a0d      	ldr	r2, [pc, #52]	; (80090b0 <TIM_Base_SetConfig+0x140>)
 800907c:	4293      	cmp	r3, r2
 800907e:	d103      	bne.n	8009088 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009080:	683b      	ldr	r3, [r7, #0]
 8009082:	691a      	ldr	r2, [r3, #16]
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	2201      	movs	r2, #1
 800908c:	615a      	str	r2, [r3, #20]
}
 800908e:	bf00      	nop
 8009090:	3714      	adds	r7, #20
 8009092:	46bd      	mov	sp, r7
 8009094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009098:	4770      	bx	lr
 800909a:	bf00      	nop
 800909c:	40012c00 	.word	0x40012c00
 80090a0:	40000400 	.word	0x40000400
 80090a4:	40000800 	.word	0x40000800
 80090a8:	40000c00 	.word	0x40000c00
 80090ac:	40013400 	.word	0x40013400
 80090b0:	40015000 	.word	0x40015000
 80090b4:	40014000 	.word	0x40014000
 80090b8:	40014400 	.word	0x40014400
 80090bc:	40014800 	.word	0x40014800

080090c0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80090c0:	b480      	push	{r7}
 80090c2:	b087      	sub	sp, #28
 80090c4:	af00      	add	r7, sp, #0
 80090c6:	6078      	str	r0, [r7, #4]
 80090c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	6a1b      	ldr	r3, [r3, #32]
 80090ce:	f023 0201 	bic.w	r2, r3, #1
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	6a1b      	ldr	r3, [r3, #32]
 80090da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	685b      	ldr	r3, [r3, #4]
 80090e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	699b      	ldr	r3, [r3, #24]
 80090e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80090ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80090f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	f023 0303 	bic.w	r3, r3, #3
 80090fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80090fc:	683b      	ldr	r3, [r7, #0]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	68fa      	ldr	r2, [r7, #12]
 8009102:	4313      	orrs	r3, r2
 8009104:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009106:	697b      	ldr	r3, [r7, #20]
 8009108:	f023 0302 	bic.w	r3, r3, #2
 800910c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800910e:	683b      	ldr	r3, [r7, #0]
 8009110:	689b      	ldr	r3, [r3, #8]
 8009112:	697a      	ldr	r2, [r7, #20]
 8009114:	4313      	orrs	r3, r2
 8009116:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	4a30      	ldr	r2, [pc, #192]	; (80091dc <TIM_OC1_SetConfig+0x11c>)
 800911c:	4293      	cmp	r3, r2
 800911e:	d013      	beq.n	8009148 <TIM_OC1_SetConfig+0x88>
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	4a2f      	ldr	r2, [pc, #188]	; (80091e0 <TIM_OC1_SetConfig+0x120>)
 8009124:	4293      	cmp	r3, r2
 8009126:	d00f      	beq.n	8009148 <TIM_OC1_SetConfig+0x88>
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	4a2e      	ldr	r2, [pc, #184]	; (80091e4 <TIM_OC1_SetConfig+0x124>)
 800912c:	4293      	cmp	r3, r2
 800912e:	d00b      	beq.n	8009148 <TIM_OC1_SetConfig+0x88>
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	4a2d      	ldr	r2, [pc, #180]	; (80091e8 <TIM_OC1_SetConfig+0x128>)
 8009134:	4293      	cmp	r3, r2
 8009136:	d007      	beq.n	8009148 <TIM_OC1_SetConfig+0x88>
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	4a2c      	ldr	r2, [pc, #176]	; (80091ec <TIM_OC1_SetConfig+0x12c>)
 800913c:	4293      	cmp	r3, r2
 800913e:	d003      	beq.n	8009148 <TIM_OC1_SetConfig+0x88>
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	4a2b      	ldr	r2, [pc, #172]	; (80091f0 <TIM_OC1_SetConfig+0x130>)
 8009144:	4293      	cmp	r3, r2
 8009146:	d10c      	bne.n	8009162 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009148:	697b      	ldr	r3, [r7, #20]
 800914a:	f023 0308 	bic.w	r3, r3, #8
 800914e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009150:	683b      	ldr	r3, [r7, #0]
 8009152:	68db      	ldr	r3, [r3, #12]
 8009154:	697a      	ldr	r2, [r7, #20]
 8009156:	4313      	orrs	r3, r2
 8009158:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800915a:	697b      	ldr	r3, [r7, #20]
 800915c:	f023 0304 	bic.w	r3, r3, #4
 8009160:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	4a1d      	ldr	r2, [pc, #116]	; (80091dc <TIM_OC1_SetConfig+0x11c>)
 8009166:	4293      	cmp	r3, r2
 8009168:	d013      	beq.n	8009192 <TIM_OC1_SetConfig+0xd2>
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	4a1c      	ldr	r2, [pc, #112]	; (80091e0 <TIM_OC1_SetConfig+0x120>)
 800916e:	4293      	cmp	r3, r2
 8009170:	d00f      	beq.n	8009192 <TIM_OC1_SetConfig+0xd2>
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	4a1b      	ldr	r2, [pc, #108]	; (80091e4 <TIM_OC1_SetConfig+0x124>)
 8009176:	4293      	cmp	r3, r2
 8009178:	d00b      	beq.n	8009192 <TIM_OC1_SetConfig+0xd2>
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	4a1a      	ldr	r2, [pc, #104]	; (80091e8 <TIM_OC1_SetConfig+0x128>)
 800917e:	4293      	cmp	r3, r2
 8009180:	d007      	beq.n	8009192 <TIM_OC1_SetConfig+0xd2>
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	4a19      	ldr	r2, [pc, #100]	; (80091ec <TIM_OC1_SetConfig+0x12c>)
 8009186:	4293      	cmp	r3, r2
 8009188:	d003      	beq.n	8009192 <TIM_OC1_SetConfig+0xd2>
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	4a18      	ldr	r2, [pc, #96]	; (80091f0 <TIM_OC1_SetConfig+0x130>)
 800918e:	4293      	cmp	r3, r2
 8009190:	d111      	bne.n	80091b6 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009192:	693b      	ldr	r3, [r7, #16]
 8009194:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009198:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800919a:	693b      	ldr	r3, [r7, #16]
 800919c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80091a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80091a2:	683b      	ldr	r3, [r7, #0]
 80091a4:	695b      	ldr	r3, [r3, #20]
 80091a6:	693a      	ldr	r2, [r7, #16]
 80091a8:	4313      	orrs	r3, r2
 80091aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80091ac:	683b      	ldr	r3, [r7, #0]
 80091ae:	699b      	ldr	r3, [r3, #24]
 80091b0:	693a      	ldr	r2, [r7, #16]
 80091b2:	4313      	orrs	r3, r2
 80091b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	693a      	ldr	r2, [r7, #16]
 80091ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	68fa      	ldr	r2, [r7, #12]
 80091c0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80091c2:	683b      	ldr	r3, [r7, #0]
 80091c4:	685a      	ldr	r2, [r3, #4]
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	697a      	ldr	r2, [r7, #20]
 80091ce:	621a      	str	r2, [r3, #32]
}
 80091d0:	bf00      	nop
 80091d2:	371c      	adds	r7, #28
 80091d4:	46bd      	mov	sp, r7
 80091d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091da:	4770      	bx	lr
 80091dc:	40012c00 	.word	0x40012c00
 80091e0:	40013400 	.word	0x40013400
 80091e4:	40014000 	.word	0x40014000
 80091e8:	40014400 	.word	0x40014400
 80091ec:	40014800 	.word	0x40014800
 80091f0:	40015000 	.word	0x40015000

080091f4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80091f4:	b480      	push	{r7}
 80091f6:	b087      	sub	sp, #28
 80091f8:	af00      	add	r7, sp, #0
 80091fa:	6078      	str	r0, [r7, #4]
 80091fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	6a1b      	ldr	r3, [r3, #32]
 8009202:	f023 0210 	bic.w	r2, r3, #16
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	6a1b      	ldr	r3, [r3, #32]
 800920e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	685b      	ldr	r3, [r3, #4]
 8009214:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	699b      	ldr	r3, [r3, #24]
 800921a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009222:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009226:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800922e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009230:	683b      	ldr	r3, [r7, #0]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	021b      	lsls	r3, r3, #8
 8009236:	68fa      	ldr	r2, [r7, #12]
 8009238:	4313      	orrs	r3, r2
 800923a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800923c:	697b      	ldr	r3, [r7, #20]
 800923e:	f023 0320 	bic.w	r3, r3, #32
 8009242:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009244:	683b      	ldr	r3, [r7, #0]
 8009246:	689b      	ldr	r3, [r3, #8]
 8009248:	011b      	lsls	r3, r3, #4
 800924a:	697a      	ldr	r2, [r7, #20]
 800924c:	4313      	orrs	r3, r2
 800924e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	4a2c      	ldr	r2, [pc, #176]	; (8009304 <TIM_OC2_SetConfig+0x110>)
 8009254:	4293      	cmp	r3, r2
 8009256:	d007      	beq.n	8009268 <TIM_OC2_SetConfig+0x74>
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	4a2b      	ldr	r2, [pc, #172]	; (8009308 <TIM_OC2_SetConfig+0x114>)
 800925c:	4293      	cmp	r3, r2
 800925e:	d003      	beq.n	8009268 <TIM_OC2_SetConfig+0x74>
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	4a2a      	ldr	r2, [pc, #168]	; (800930c <TIM_OC2_SetConfig+0x118>)
 8009264:	4293      	cmp	r3, r2
 8009266:	d10d      	bne.n	8009284 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009268:	697b      	ldr	r3, [r7, #20]
 800926a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800926e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009270:	683b      	ldr	r3, [r7, #0]
 8009272:	68db      	ldr	r3, [r3, #12]
 8009274:	011b      	lsls	r3, r3, #4
 8009276:	697a      	ldr	r2, [r7, #20]
 8009278:	4313      	orrs	r3, r2
 800927a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800927c:	697b      	ldr	r3, [r7, #20]
 800927e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009282:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	4a1f      	ldr	r2, [pc, #124]	; (8009304 <TIM_OC2_SetConfig+0x110>)
 8009288:	4293      	cmp	r3, r2
 800928a:	d013      	beq.n	80092b4 <TIM_OC2_SetConfig+0xc0>
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	4a1e      	ldr	r2, [pc, #120]	; (8009308 <TIM_OC2_SetConfig+0x114>)
 8009290:	4293      	cmp	r3, r2
 8009292:	d00f      	beq.n	80092b4 <TIM_OC2_SetConfig+0xc0>
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	4a1e      	ldr	r2, [pc, #120]	; (8009310 <TIM_OC2_SetConfig+0x11c>)
 8009298:	4293      	cmp	r3, r2
 800929a:	d00b      	beq.n	80092b4 <TIM_OC2_SetConfig+0xc0>
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	4a1d      	ldr	r2, [pc, #116]	; (8009314 <TIM_OC2_SetConfig+0x120>)
 80092a0:	4293      	cmp	r3, r2
 80092a2:	d007      	beq.n	80092b4 <TIM_OC2_SetConfig+0xc0>
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	4a1c      	ldr	r2, [pc, #112]	; (8009318 <TIM_OC2_SetConfig+0x124>)
 80092a8:	4293      	cmp	r3, r2
 80092aa:	d003      	beq.n	80092b4 <TIM_OC2_SetConfig+0xc0>
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	4a17      	ldr	r2, [pc, #92]	; (800930c <TIM_OC2_SetConfig+0x118>)
 80092b0:	4293      	cmp	r3, r2
 80092b2:	d113      	bne.n	80092dc <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80092b4:	693b      	ldr	r3, [r7, #16]
 80092b6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80092ba:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80092bc:	693b      	ldr	r3, [r7, #16]
 80092be:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80092c2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80092c4:	683b      	ldr	r3, [r7, #0]
 80092c6:	695b      	ldr	r3, [r3, #20]
 80092c8:	009b      	lsls	r3, r3, #2
 80092ca:	693a      	ldr	r2, [r7, #16]
 80092cc:	4313      	orrs	r3, r2
 80092ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80092d0:	683b      	ldr	r3, [r7, #0]
 80092d2:	699b      	ldr	r3, [r3, #24]
 80092d4:	009b      	lsls	r3, r3, #2
 80092d6:	693a      	ldr	r2, [r7, #16]
 80092d8:	4313      	orrs	r3, r2
 80092da:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	693a      	ldr	r2, [r7, #16]
 80092e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	68fa      	ldr	r2, [r7, #12]
 80092e6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80092e8:	683b      	ldr	r3, [r7, #0]
 80092ea:	685a      	ldr	r2, [r3, #4]
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	697a      	ldr	r2, [r7, #20]
 80092f4:	621a      	str	r2, [r3, #32]
}
 80092f6:	bf00      	nop
 80092f8:	371c      	adds	r7, #28
 80092fa:	46bd      	mov	sp, r7
 80092fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009300:	4770      	bx	lr
 8009302:	bf00      	nop
 8009304:	40012c00 	.word	0x40012c00
 8009308:	40013400 	.word	0x40013400
 800930c:	40015000 	.word	0x40015000
 8009310:	40014000 	.word	0x40014000
 8009314:	40014400 	.word	0x40014400
 8009318:	40014800 	.word	0x40014800

0800931c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800931c:	b480      	push	{r7}
 800931e:	b087      	sub	sp, #28
 8009320:	af00      	add	r7, sp, #0
 8009322:	6078      	str	r0, [r7, #4]
 8009324:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	6a1b      	ldr	r3, [r3, #32]
 800932a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	6a1b      	ldr	r3, [r3, #32]
 8009336:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	685b      	ldr	r3, [r3, #4]
 800933c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	69db      	ldr	r3, [r3, #28]
 8009342:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800934a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800934e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	f023 0303 	bic.w	r3, r3, #3
 8009356:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009358:	683b      	ldr	r3, [r7, #0]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	68fa      	ldr	r2, [r7, #12]
 800935e:	4313      	orrs	r3, r2
 8009360:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009362:	697b      	ldr	r3, [r7, #20]
 8009364:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009368:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800936a:	683b      	ldr	r3, [r7, #0]
 800936c:	689b      	ldr	r3, [r3, #8]
 800936e:	021b      	lsls	r3, r3, #8
 8009370:	697a      	ldr	r2, [r7, #20]
 8009372:	4313      	orrs	r3, r2
 8009374:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	4a2b      	ldr	r2, [pc, #172]	; (8009428 <TIM_OC3_SetConfig+0x10c>)
 800937a:	4293      	cmp	r3, r2
 800937c:	d007      	beq.n	800938e <TIM_OC3_SetConfig+0x72>
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	4a2a      	ldr	r2, [pc, #168]	; (800942c <TIM_OC3_SetConfig+0x110>)
 8009382:	4293      	cmp	r3, r2
 8009384:	d003      	beq.n	800938e <TIM_OC3_SetConfig+0x72>
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	4a29      	ldr	r2, [pc, #164]	; (8009430 <TIM_OC3_SetConfig+0x114>)
 800938a:	4293      	cmp	r3, r2
 800938c:	d10d      	bne.n	80093aa <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800938e:	697b      	ldr	r3, [r7, #20]
 8009390:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009394:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009396:	683b      	ldr	r3, [r7, #0]
 8009398:	68db      	ldr	r3, [r3, #12]
 800939a:	021b      	lsls	r3, r3, #8
 800939c:	697a      	ldr	r2, [r7, #20]
 800939e:	4313      	orrs	r3, r2
 80093a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80093a2:	697b      	ldr	r3, [r7, #20]
 80093a4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80093a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	4a1e      	ldr	r2, [pc, #120]	; (8009428 <TIM_OC3_SetConfig+0x10c>)
 80093ae:	4293      	cmp	r3, r2
 80093b0:	d013      	beq.n	80093da <TIM_OC3_SetConfig+0xbe>
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	4a1d      	ldr	r2, [pc, #116]	; (800942c <TIM_OC3_SetConfig+0x110>)
 80093b6:	4293      	cmp	r3, r2
 80093b8:	d00f      	beq.n	80093da <TIM_OC3_SetConfig+0xbe>
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	4a1d      	ldr	r2, [pc, #116]	; (8009434 <TIM_OC3_SetConfig+0x118>)
 80093be:	4293      	cmp	r3, r2
 80093c0:	d00b      	beq.n	80093da <TIM_OC3_SetConfig+0xbe>
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	4a1c      	ldr	r2, [pc, #112]	; (8009438 <TIM_OC3_SetConfig+0x11c>)
 80093c6:	4293      	cmp	r3, r2
 80093c8:	d007      	beq.n	80093da <TIM_OC3_SetConfig+0xbe>
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	4a1b      	ldr	r2, [pc, #108]	; (800943c <TIM_OC3_SetConfig+0x120>)
 80093ce:	4293      	cmp	r3, r2
 80093d0:	d003      	beq.n	80093da <TIM_OC3_SetConfig+0xbe>
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	4a16      	ldr	r2, [pc, #88]	; (8009430 <TIM_OC3_SetConfig+0x114>)
 80093d6:	4293      	cmp	r3, r2
 80093d8:	d113      	bne.n	8009402 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80093da:	693b      	ldr	r3, [r7, #16]
 80093dc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80093e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80093e2:	693b      	ldr	r3, [r7, #16]
 80093e4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80093e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80093ea:	683b      	ldr	r3, [r7, #0]
 80093ec:	695b      	ldr	r3, [r3, #20]
 80093ee:	011b      	lsls	r3, r3, #4
 80093f0:	693a      	ldr	r2, [r7, #16]
 80093f2:	4313      	orrs	r3, r2
 80093f4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80093f6:	683b      	ldr	r3, [r7, #0]
 80093f8:	699b      	ldr	r3, [r3, #24]
 80093fa:	011b      	lsls	r3, r3, #4
 80093fc:	693a      	ldr	r2, [r7, #16]
 80093fe:	4313      	orrs	r3, r2
 8009400:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	693a      	ldr	r2, [r7, #16]
 8009406:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	68fa      	ldr	r2, [r7, #12]
 800940c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800940e:	683b      	ldr	r3, [r7, #0]
 8009410:	685a      	ldr	r2, [r3, #4]
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	697a      	ldr	r2, [r7, #20]
 800941a:	621a      	str	r2, [r3, #32]
}
 800941c:	bf00      	nop
 800941e:	371c      	adds	r7, #28
 8009420:	46bd      	mov	sp, r7
 8009422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009426:	4770      	bx	lr
 8009428:	40012c00 	.word	0x40012c00
 800942c:	40013400 	.word	0x40013400
 8009430:	40015000 	.word	0x40015000
 8009434:	40014000 	.word	0x40014000
 8009438:	40014400 	.word	0x40014400
 800943c:	40014800 	.word	0x40014800

08009440 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009440:	b480      	push	{r7}
 8009442:	b087      	sub	sp, #28
 8009444:	af00      	add	r7, sp, #0
 8009446:	6078      	str	r0, [r7, #4]
 8009448:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	6a1b      	ldr	r3, [r3, #32]
 800944e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	6a1b      	ldr	r3, [r3, #32]
 800945a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	685b      	ldr	r3, [r3, #4]
 8009460:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	69db      	ldr	r3, [r3, #28]
 8009466:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800946e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009472:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800947a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800947c:	683b      	ldr	r3, [r7, #0]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	021b      	lsls	r3, r3, #8
 8009482:	68fa      	ldr	r2, [r7, #12]
 8009484:	4313      	orrs	r3, r2
 8009486:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009488:	697b      	ldr	r3, [r7, #20]
 800948a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800948e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009490:	683b      	ldr	r3, [r7, #0]
 8009492:	689b      	ldr	r3, [r3, #8]
 8009494:	031b      	lsls	r3, r3, #12
 8009496:	697a      	ldr	r2, [r7, #20]
 8009498:	4313      	orrs	r3, r2
 800949a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	4a2c      	ldr	r2, [pc, #176]	; (8009550 <TIM_OC4_SetConfig+0x110>)
 80094a0:	4293      	cmp	r3, r2
 80094a2:	d007      	beq.n	80094b4 <TIM_OC4_SetConfig+0x74>
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	4a2b      	ldr	r2, [pc, #172]	; (8009554 <TIM_OC4_SetConfig+0x114>)
 80094a8:	4293      	cmp	r3, r2
 80094aa:	d003      	beq.n	80094b4 <TIM_OC4_SetConfig+0x74>
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	4a2a      	ldr	r2, [pc, #168]	; (8009558 <TIM_OC4_SetConfig+0x118>)
 80094b0:	4293      	cmp	r3, r2
 80094b2:	d10d      	bne.n	80094d0 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80094b4:	697b      	ldr	r3, [r7, #20]
 80094b6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80094ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80094bc:	683b      	ldr	r3, [r7, #0]
 80094be:	68db      	ldr	r3, [r3, #12]
 80094c0:	031b      	lsls	r3, r3, #12
 80094c2:	697a      	ldr	r2, [r7, #20]
 80094c4:	4313      	orrs	r3, r2
 80094c6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80094c8:	697b      	ldr	r3, [r7, #20]
 80094ca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80094ce:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	4a1f      	ldr	r2, [pc, #124]	; (8009550 <TIM_OC4_SetConfig+0x110>)
 80094d4:	4293      	cmp	r3, r2
 80094d6:	d013      	beq.n	8009500 <TIM_OC4_SetConfig+0xc0>
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	4a1e      	ldr	r2, [pc, #120]	; (8009554 <TIM_OC4_SetConfig+0x114>)
 80094dc:	4293      	cmp	r3, r2
 80094de:	d00f      	beq.n	8009500 <TIM_OC4_SetConfig+0xc0>
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	4a1e      	ldr	r2, [pc, #120]	; (800955c <TIM_OC4_SetConfig+0x11c>)
 80094e4:	4293      	cmp	r3, r2
 80094e6:	d00b      	beq.n	8009500 <TIM_OC4_SetConfig+0xc0>
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	4a1d      	ldr	r2, [pc, #116]	; (8009560 <TIM_OC4_SetConfig+0x120>)
 80094ec:	4293      	cmp	r3, r2
 80094ee:	d007      	beq.n	8009500 <TIM_OC4_SetConfig+0xc0>
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	4a1c      	ldr	r2, [pc, #112]	; (8009564 <TIM_OC4_SetConfig+0x124>)
 80094f4:	4293      	cmp	r3, r2
 80094f6:	d003      	beq.n	8009500 <TIM_OC4_SetConfig+0xc0>
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	4a17      	ldr	r2, [pc, #92]	; (8009558 <TIM_OC4_SetConfig+0x118>)
 80094fc:	4293      	cmp	r3, r2
 80094fe:	d113      	bne.n	8009528 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009500:	693b      	ldr	r3, [r7, #16]
 8009502:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009506:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8009508:	693b      	ldr	r3, [r7, #16]
 800950a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800950e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009510:	683b      	ldr	r3, [r7, #0]
 8009512:	695b      	ldr	r3, [r3, #20]
 8009514:	019b      	lsls	r3, r3, #6
 8009516:	693a      	ldr	r2, [r7, #16]
 8009518:	4313      	orrs	r3, r2
 800951a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800951c:	683b      	ldr	r3, [r7, #0]
 800951e:	699b      	ldr	r3, [r3, #24]
 8009520:	019b      	lsls	r3, r3, #6
 8009522:	693a      	ldr	r2, [r7, #16]
 8009524:	4313      	orrs	r3, r2
 8009526:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	693a      	ldr	r2, [r7, #16]
 800952c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	68fa      	ldr	r2, [r7, #12]
 8009532:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009534:	683b      	ldr	r3, [r7, #0]
 8009536:	685a      	ldr	r2, [r3, #4]
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	697a      	ldr	r2, [r7, #20]
 8009540:	621a      	str	r2, [r3, #32]
}
 8009542:	bf00      	nop
 8009544:	371c      	adds	r7, #28
 8009546:	46bd      	mov	sp, r7
 8009548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800954c:	4770      	bx	lr
 800954e:	bf00      	nop
 8009550:	40012c00 	.word	0x40012c00
 8009554:	40013400 	.word	0x40013400
 8009558:	40015000 	.word	0x40015000
 800955c:	40014000 	.word	0x40014000
 8009560:	40014400 	.word	0x40014400
 8009564:	40014800 	.word	0x40014800

08009568 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8009568:	b480      	push	{r7}
 800956a:	b087      	sub	sp, #28
 800956c:	af00      	add	r7, sp, #0
 800956e:	6078      	str	r0, [r7, #4]
 8009570:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	6a1b      	ldr	r3, [r3, #32]
 8009576:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	6a1b      	ldr	r3, [r3, #32]
 8009582:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	685b      	ldr	r3, [r3, #4]
 8009588:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800958e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009596:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800959a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800959c:	683b      	ldr	r3, [r7, #0]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	68fa      	ldr	r2, [r7, #12]
 80095a2:	4313      	orrs	r3, r2
 80095a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80095a6:	693b      	ldr	r3, [r7, #16]
 80095a8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80095ac:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80095ae:	683b      	ldr	r3, [r7, #0]
 80095b0:	689b      	ldr	r3, [r3, #8]
 80095b2:	041b      	lsls	r3, r3, #16
 80095b4:	693a      	ldr	r2, [r7, #16]
 80095b6:	4313      	orrs	r3, r2
 80095b8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	4a19      	ldr	r2, [pc, #100]	; (8009624 <TIM_OC5_SetConfig+0xbc>)
 80095be:	4293      	cmp	r3, r2
 80095c0:	d013      	beq.n	80095ea <TIM_OC5_SetConfig+0x82>
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	4a18      	ldr	r2, [pc, #96]	; (8009628 <TIM_OC5_SetConfig+0xc0>)
 80095c6:	4293      	cmp	r3, r2
 80095c8:	d00f      	beq.n	80095ea <TIM_OC5_SetConfig+0x82>
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	4a17      	ldr	r2, [pc, #92]	; (800962c <TIM_OC5_SetConfig+0xc4>)
 80095ce:	4293      	cmp	r3, r2
 80095d0:	d00b      	beq.n	80095ea <TIM_OC5_SetConfig+0x82>
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	4a16      	ldr	r2, [pc, #88]	; (8009630 <TIM_OC5_SetConfig+0xc8>)
 80095d6:	4293      	cmp	r3, r2
 80095d8:	d007      	beq.n	80095ea <TIM_OC5_SetConfig+0x82>
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	4a15      	ldr	r2, [pc, #84]	; (8009634 <TIM_OC5_SetConfig+0xcc>)
 80095de:	4293      	cmp	r3, r2
 80095e0:	d003      	beq.n	80095ea <TIM_OC5_SetConfig+0x82>
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	4a14      	ldr	r2, [pc, #80]	; (8009638 <TIM_OC5_SetConfig+0xd0>)
 80095e6:	4293      	cmp	r3, r2
 80095e8:	d109      	bne.n	80095fe <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80095ea:	697b      	ldr	r3, [r7, #20]
 80095ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80095f0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80095f2:	683b      	ldr	r3, [r7, #0]
 80095f4:	695b      	ldr	r3, [r3, #20]
 80095f6:	021b      	lsls	r3, r3, #8
 80095f8:	697a      	ldr	r2, [r7, #20]
 80095fa:	4313      	orrs	r3, r2
 80095fc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	697a      	ldr	r2, [r7, #20]
 8009602:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	68fa      	ldr	r2, [r7, #12]
 8009608:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800960a:	683b      	ldr	r3, [r7, #0]
 800960c:	685a      	ldr	r2, [r3, #4]
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	693a      	ldr	r2, [r7, #16]
 8009616:	621a      	str	r2, [r3, #32]
}
 8009618:	bf00      	nop
 800961a:	371c      	adds	r7, #28
 800961c:	46bd      	mov	sp, r7
 800961e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009622:	4770      	bx	lr
 8009624:	40012c00 	.word	0x40012c00
 8009628:	40013400 	.word	0x40013400
 800962c:	40014000 	.word	0x40014000
 8009630:	40014400 	.word	0x40014400
 8009634:	40014800 	.word	0x40014800
 8009638:	40015000 	.word	0x40015000

0800963c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800963c:	b480      	push	{r7}
 800963e:	b087      	sub	sp, #28
 8009640:	af00      	add	r7, sp, #0
 8009642:	6078      	str	r0, [r7, #4]
 8009644:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	6a1b      	ldr	r3, [r3, #32]
 800964a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	6a1b      	ldr	r3, [r3, #32]
 8009656:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	685b      	ldr	r3, [r3, #4]
 800965c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009662:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800966a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800966e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009670:	683b      	ldr	r3, [r7, #0]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	021b      	lsls	r3, r3, #8
 8009676:	68fa      	ldr	r2, [r7, #12]
 8009678:	4313      	orrs	r3, r2
 800967a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800967c:	693b      	ldr	r3, [r7, #16]
 800967e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009682:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009684:	683b      	ldr	r3, [r7, #0]
 8009686:	689b      	ldr	r3, [r3, #8]
 8009688:	051b      	lsls	r3, r3, #20
 800968a:	693a      	ldr	r2, [r7, #16]
 800968c:	4313      	orrs	r3, r2
 800968e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	4a1a      	ldr	r2, [pc, #104]	; (80096fc <TIM_OC6_SetConfig+0xc0>)
 8009694:	4293      	cmp	r3, r2
 8009696:	d013      	beq.n	80096c0 <TIM_OC6_SetConfig+0x84>
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	4a19      	ldr	r2, [pc, #100]	; (8009700 <TIM_OC6_SetConfig+0xc4>)
 800969c:	4293      	cmp	r3, r2
 800969e:	d00f      	beq.n	80096c0 <TIM_OC6_SetConfig+0x84>
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	4a18      	ldr	r2, [pc, #96]	; (8009704 <TIM_OC6_SetConfig+0xc8>)
 80096a4:	4293      	cmp	r3, r2
 80096a6:	d00b      	beq.n	80096c0 <TIM_OC6_SetConfig+0x84>
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	4a17      	ldr	r2, [pc, #92]	; (8009708 <TIM_OC6_SetConfig+0xcc>)
 80096ac:	4293      	cmp	r3, r2
 80096ae:	d007      	beq.n	80096c0 <TIM_OC6_SetConfig+0x84>
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	4a16      	ldr	r2, [pc, #88]	; (800970c <TIM_OC6_SetConfig+0xd0>)
 80096b4:	4293      	cmp	r3, r2
 80096b6:	d003      	beq.n	80096c0 <TIM_OC6_SetConfig+0x84>
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	4a15      	ldr	r2, [pc, #84]	; (8009710 <TIM_OC6_SetConfig+0xd4>)
 80096bc:	4293      	cmp	r3, r2
 80096be:	d109      	bne.n	80096d4 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80096c0:	697b      	ldr	r3, [r7, #20]
 80096c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80096c6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80096c8:	683b      	ldr	r3, [r7, #0]
 80096ca:	695b      	ldr	r3, [r3, #20]
 80096cc:	029b      	lsls	r3, r3, #10
 80096ce:	697a      	ldr	r2, [r7, #20]
 80096d0:	4313      	orrs	r3, r2
 80096d2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	697a      	ldr	r2, [r7, #20]
 80096d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	68fa      	ldr	r2, [r7, #12]
 80096de:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80096e0:	683b      	ldr	r3, [r7, #0]
 80096e2:	685a      	ldr	r2, [r3, #4]
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	693a      	ldr	r2, [r7, #16]
 80096ec:	621a      	str	r2, [r3, #32]
}
 80096ee:	bf00      	nop
 80096f0:	371c      	adds	r7, #28
 80096f2:	46bd      	mov	sp, r7
 80096f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096f8:	4770      	bx	lr
 80096fa:	bf00      	nop
 80096fc:	40012c00 	.word	0x40012c00
 8009700:	40013400 	.word	0x40013400
 8009704:	40014000 	.word	0x40014000
 8009708:	40014400 	.word	0x40014400
 800970c:	40014800 	.word	0x40014800
 8009710:	40015000 	.word	0x40015000

08009714 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8009714:	b480      	push	{r7}
 8009716:	b087      	sub	sp, #28
 8009718:	af00      	add	r7, sp, #0
 800971a:	60f8      	str	r0, [r7, #12]
 800971c:	60b9      	str	r1, [r7, #8]
 800971e:	607a      	str	r2, [r7, #4]
 8009720:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	6a1b      	ldr	r3, [r3, #32]
 8009726:	f023 0201 	bic.w	r2, r3, #1
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	699b      	ldr	r3, [r3, #24]
 8009732:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	6a1b      	ldr	r3, [r3, #32]
 8009738:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	4a28      	ldr	r2, [pc, #160]	; (80097e0 <TIM_TI1_SetConfig+0xcc>)
 800973e:	4293      	cmp	r3, r2
 8009740:	d01b      	beq.n	800977a <TIM_TI1_SetConfig+0x66>
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009748:	d017      	beq.n	800977a <TIM_TI1_SetConfig+0x66>
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	4a25      	ldr	r2, [pc, #148]	; (80097e4 <TIM_TI1_SetConfig+0xd0>)
 800974e:	4293      	cmp	r3, r2
 8009750:	d013      	beq.n	800977a <TIM_TI1_SetConfig+0x66>
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	4a24      	ldr	r2, [pc, #144]	; (80097e8 <TIM_TI1_SetConfig+0xd4>)
 8009756:	4293      	cmp	r3, r2
 8009758:	d00f      	beq.n	800977a <TIM_TI1_SetConfig+0x66>
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	4a23      	ldr	r2, [pc, #140]	; (80097ec <TIM_TI1_SetConfig+0xd8>)
 800975e:	4293      	cmp	r3, r2
 8009760:	d00b      	beq.n	800977a <TIM_TI1_SetConfig+0x66>
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	4a22      	ldr	r2, [pc, #136]	; (80097f0 <TIM_TI1_SetConfig+0xdc>)
 8009766:	4293      	cmp	r3, r2
 8009768:	d007      	beq.n	800977a <TIM_TI1_SetConfig+0x66>
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	4a21      	ldr	r2, [pc, #132]	; (80097f4 <TIM_TI1_SetConfig+0xe0>)
 800976e:	4293      	cmp	r3, r2
 8009770:	d003      	beq.n	800977a <TIM_TI1_SetConfig+0x66>
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	4a20      	ldr	r2, [pc, #128]	; (80097f8 <TIM_TI1_SetConfig+0xe4>)
 8009776:	4293      	cmp	r3, r2
 8009778:	d101      	bne.n	800977e <TIM_TI1_SetConfig+0x6a>
 800977a:	2301      	movs	r3, #1
 800977c:	e000      	b.n	8009780 <TIM_TI1_SetConfig+0x6c>
 800977e:	2300      	movs	r3, #0
 8009780:	2b00      	cmp	r3, #0
 8009782:	d008      	beq.n	8009796 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8009784:	697b      	ldr	r3, [r7, #20]
 8009786:	f023 0303 	bic.w	r3, r3, #3
 800978a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800978c:	697a      	ldr	r2, [r7, #20]
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	4313      	orrs	r3, r2
 8009792:	617b      	str	r3, [r7, #20]
 8009794:	e003      	b.n	800979e <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8009796:	697b      	ldr	r3, [r7, #20]
 8009798:	f043 0301 	orr.w	r3, r3, #1
 800979c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800979e:	697b      	ldr	r3, [r7, #20]
 80097a0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80097a4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80097a6:	683b      	ldr	r3, [r7, #0]
 80097a8:	011b      	lsls	r3, r3, #4
 80097aa:	b2db      	uxtb	r3, r3
 80097ac:	697a      	ldr	r2, [r7, #20]
 80097ae:	4313      	orrs	r3, r2
 80097b0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80097b2:	693b      	ldr	r3, [r7, #16]
 80097b4:	f023 030a 	bic.w	r3, r3, #10
 80097b8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80097ba:	68bb      	ldr	r3, [r7, #8]
 80097bc:	f003 030a 	and.w	r3, r3, #10
 80097c0:	693a      	ldr	r2, [r7, #16]
 80097c2:	4313      	orrs	r3, r2
 80097c4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	697a      	ldr	r2, [r7, #20]
 80097ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	693a      	ldr	r2, [r7, #16]
 80097d0:	621a      	str	r2, [r3, #32]
}
 80097d2:	bf00      	nop
 80097d4:	371c      	adds	r7, #28
 80097d6:	46bd      	mov	sp, r7
 80097d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097dc:	4770      	bx	lr
 80097de:	bf00      	nop
 80097e0:	40012c00 	.word	0x40012c00
 80097e4:	40000400 	.word	0x40000400
 80097e8:	40000800 	.word	0x40000800
 80097ec:	40000c00 	.word	0x40000c00
 80097f0:	40013400 	.word	0x40013400
 80097f4:	40014000 	.word	0x40014000
 80097f8:	40015000 	.word	0x40015000

080097fc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80097fc:	b480      	push	{r7}
 80097fe:	b087      	sub	sp, #28
 8009800:	af00      	add	r7, sp, #0
 8009802:	60f8      	str	r0, [r7, #12]
 8009804:	60b9      	str	r1, [r7, #8]
 8009806:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	6a1b      	ldr	r3, [r3, #32]
 800980c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	6a1b      	ldr	r3, [r3, #32]
 8009812:	f023 0201 	bic.w	r2, r3, #1
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	699b      	ldr	r3, [r3, #24]
 800981e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009820:	693b      	ldr	r3, [r7, #16]
 8009822:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009826:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	011b      	lsls	r3, r3, #4
 800982c:	693a      	ldr	r2, [r7, #16]
 800982e:	4313      	orrs	r3, r2
 8009830:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009832:	697b      	ldr	r3, [r7, #20]
 8009834:	f023 030a 	bic.w	r3, r3, #10
 8009838:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800983a:	697a      	ldr	r2, [r7, #20]
 800983c:	68bb      	ldr	r3, [r7, #8]
 800983e:	4313      	orrs	r3, r2
 8009840:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	693a      	ldr	r2, [r7, #16]
 8009846:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	697a      	ldr	r2, [r7, #20]
 800984c:	621a      	str	r2, [r3, #32]
}
 800984e:	bf00      	nop
 8009850:	371c      	adds	r7, #28
 8009852:	46bd      	mov	sp, r7
 8009854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009858:	4770      	bx	lr

0800985a <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800985a:	b480      	push	{r7}
 800985c:	b087      	sub	sp, #28
 800985e:	af00      	add	r7, sp, #0
 8009860:	60f8      	str	r0, [r7, #12]
 8009862:	60b9      	str	r1, [r7, #8]
 8009864:	607a      	str	r2, [r7, #4]
 8009866:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	6a1b      	ldr	r3, [r3, #32]
 800986c:	f023 0210 	bic.w	r2, r3, #16
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	699b      	ldr	r3, [r3, #24]
 8009878:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	6a1b      	ldr	r3, [r3, #32]
 800987e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8009880:	697b      	ldr	r3, [r7, #20]
 8009882:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009886:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	021b      	lsls	r3, r3, #8
 800988c:	697a      	ldr	r2, [r7, #20]
 800988e:	4313      	orrs	r3, r2
 8009890:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009892:	697b      	ldr	r3, [r7, #20]
 8009894:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009898:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800989a:	683b      	ldr	r3, [r7, #0]
 800989c:	031b      	lsls	r3, r3, #12
 800989e:	b29b      	uxth	r3, r3
 80098a0:	697a      	ldr	r2, [r7, #20]
 80098a2:	4313      	orrs	r3, r2
 80098a4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80098a6:	693b      	ldr	r3, [r7, #16]
 80098a8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80098ac:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80098ae:	68bb      	ldr	r3, [r7, #8]
 80098b0:	011b      	lsls	r3, r3, #4
 80098b2:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80098b6:	693a      	ldr	r2, [r7, #16]
 80098b8:	4313      	orrs	r3, r2
 80098ba:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	697a      	ldr	r2, [r7, #20]
 80098c0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	693a      	ldr	r2, [r7, #16]
 80098c6:	621a      	str	r2, [r3, #32]
}
 80098c8:	bf00      	nop
 80098ca:	371c      	adds	r7, #28
 80098cc:	46bd      	mov	sp, r7
 80098ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098d2:	4770      	bx	lr

080098d4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80098d4:	b480      	push	{r7}
 80098d6:	b087      	sub	sp, #28
 80098d8:	af00      	add	r7, sp, #0
 80098da:	60f8      	str	r0, [r7, #12]
 80098dc:	60b9      	str	r1, [r7, #8]
 80098de:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	6a1b      	ldr	r3, [r3, #32]
 80098e4:	f023 0210 	bic.w	r2, r3, #16
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	699b      	ldr	r3, [r3, #24]
 80098f0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	6a1b      	ldr	r3, [r3, #32]
 80098f6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80098f8:	697b      	ldr	r3, [r7, #20]
 80098fa:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80098fe:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	031b      	lsls	r3, r3, #12
 8009904:	697a      	ldr	r2, [r7, #20]
 8009906:	4313      	orrs	r3, r2
 8009908:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800990a:	693b      	ldr	r3, [r7, #16]
 800990c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009910:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009912:	68bb      	ldr	r3, [r7, #8]
 8009914:	011b      	lsls	r3, r3, #4
 8009916:	693a      	ldr	r2, [r7, #16]
 8009918:	4313      	orrs	r3, r2
 800991a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	697a      	ldr	r2, [r7, #20]
 8009920:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	693a      	ldr	r2, [r7, #16]
 8009926:	621a      	str	r2, [r3, #32]
}
 8009928:	bf00      	nop
 800992a:	371c      	adds	r7, #28
 800992c:	46bd      	mov	sp, r7
 800992e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009932:	4770      	bx	lr

08009934 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8009934:	b480      	push	{r7}
 8009936:	b087      	sub	sp, #28
 8009938:	af00      	add	r7, sp, #0
 800993a:	60f8      	str	r0, [r7, #12]
 800993c:	60b9      	str	r1, [r7, #8]
 800993e:	607a      	str	r2, [r7, #4]
 8009940:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	6a1b      	ldr	r3, [r3, #32]
 8009946:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	69db      	ldr	r3, [r3, #28]
 8009952:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	6a1b      	ldr	r3, [r3, #32]
 8009958:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800995a:	697b      	ldr	r3, [r7, #20]
 800995c:	f023 0303 	bic.w	r3, r3, #3
 8009960:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8009962:	697a      	ldr	r2, [r7, #20]
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	4313      	orrs	r3, r2
 8009968:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800996a:	697b      	ldr	r3, [r7, #20]
 800996c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009970:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8009972:	683b      	ldr	r3, [r7, #0]
 8009974:	011b      	lsls	r3, r3, #4
 8009976:	b2db      	uxtb	r3, r3
 8009978:	697a      	ldr	r2, [r7, #20]
 800997a:	4313      	orrs	r3, r2
 800997c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800997e:	693b      	ldr	r3, [r7, #16]
 8009980:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8009984:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8009986:	68bb      	ldr	r3, [r7, #8]
 8009988:	021b      	lsls	r3, r3, #8
 800998a:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800998e:	693a      	ldr	r2, [r7, #16]
 8009990:	4313      	orrs	r3, r2
 8009992:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	697a      	ldr	r2, [r7, #20]
 8009998:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	693a      	ldr	r2, [r7, #16]
 800999e:	621a      	str	r2, [r3, #32]
}
 80099a0:	bf00      	nop
 80099a2:	371c      	adds	r7, #28
 80099a4:	46bd      	mov	sp, r7
 80099a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099aa:	4770      	bx	lr

080099ac <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80099ac:	b480      	push	{r7}
 80099ae:	b087      	sub	sp, #28
 80099b0:	af00      	add	r7, sp, #0
 80099b2:	60f8      	str	r0, [r7, #12]
 80099b4:	60b9      	str	r1, [r7, #8]
 80099b6:	607a      	str	r2, [r7, #4]
 80099b8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	6a1b      	ldr	r3, [r3, #32]
 80099be:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	69db      	ldr	r3, [r3, #28]
 80099ca:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	6a1b      	ldr	r3, [r3, #32]
 80099d0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80099d2:	697b      	ldr	r3, [r7, #20]
 80099d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80099d8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	021b      	lsls	r3, r3, #8
 80099de:	697a      	ldr	r2, [r7, #20]
 80099e0:	4313      	orrs	r3, r2
 80099e2:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80099e4:	697b      	ldr	r3, [r7, #20]
 80099e6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80099ea:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80099ec:	683b      	ldr	r3, [r7, #0]
 80099ee:	031b      	lsls	r3, r3, #12
 80099f0:	b29b      	uxth	r3, r3
 80099f2:	697a      	ldr	r2, [r7, #20]
 80099f4:	4313      	orrs	r3, r2
 80099f6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80099f8:	693b      	ldr	r3, [r7, #16]
 80099fa:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80099fe:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8009a00:	68bb      	ldr	r3, [r7, #8]
 8009a02:	031b      	lsls	r3, r3, #12
 8009a04:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8009a08:	693a      	ldr	r2, [r7, #16]
 8009a0a:	4313      	orrs	r3, r2
 8009a0c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	697a      	ldr	r2, [r7, #20]
 8009a12:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	693a      	ldr	r2, [r7, #16]
 8009a18:	621a      	str	r2, [r3, #32]
}
 8009a1a:	bf00      	nop
 8009a1c:	371c      	adds	r7, #28
 8009a1e:	46bd      	mov	sp, r7
 8009a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a24:	4770      	bx	lr

08009a26 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009a26:	b480      	push	{r7}
 8009a28:	b085      	sub	sp, #20
 8009a2a:	af00      	add	r7, sp, #0
 8009a2c:	6078      	str	r0, [r7, #4]
 8009a2e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	689b      	ldr	r3, [r3, #8]
 8009a34:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8009a3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009a40:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009a42:	683a      	ldr	r2, [r7, #0]
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	4313      	orrs	r3, r2
 8009a48:	f043 0307 	orr.w	r3, r3, #7
 8009a4c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	68fa      	ldr	r2, [r7, #12]
 8009a52:	609a      	str	r2, [r3, #8]
}
 8009a54:	bf00      	nop
 8009a56:	3714      	adds	r7, #20
 8009a58:	46bd      	mov	sp, r7
 8009a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a5e:	4770      	bx	lr

08009a60 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009a60:	b480      	push	{r7}
 8009a62:	b087      	sub	sp, #28
 8009a64:	af00      	add	r7, sp, #0
 8009a66:	60f8      	str	r0, [r7, #12]
 8009a68:	60b9      	str	r1, [r7, #8]
 8009a6a:	607a      	str	r2, [r7, #4]
 8009a6c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	689b      	ldr	r3, [r3, #8]
 8009a72:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009a74:	697b      	ldr	r3, [r7, #20]
 8009a76:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009a7a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009a7c:	683b      	ldr	r3, [r7, #0]
 8009a7e:	021a      	lsls	r2, r3, #8
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	431a      	orrs	r2, r3
 8009a84:	68bb      	ldr	r3, [r7, #8]
 8009a86:	4313      	orrs	r3, r2
 8009a88:	697a      	ldr	r2, [r7, #20]
 8009a8a:	4313      	orrs	r3, r2
 8009a8c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	697a      	ldr	r2, [r7, #20]
 8009a92:	609a      	str	r2, [r3, #8]
}
 8009a94:	bf00      	nop
 8009a96:	371c      	adds	r7, #28
 8009a98:	46bd      	mov	sp, r7
 8009a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a9e:	4770      	bx	lr

08009aa0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009aa0:	b480      	push	{r7}
 8009aa2:	b087      	sub	sp, #28
 8009aa4:	af00      	add	r7, sp, #0
 8009aa6:	60f8      	str	r0, [r7, #12]
 8009aa8:	60b9      	str	r1, [r7, #8]
 8009aaa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009aac:	68bb      	ldr	r3, [r7, #8]
 8009aae:	f003 031f 	and.w	r3, r3, #31
 8009ab2:	2201      	movs	r2, #1
 8009ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8009ab8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	6a1a      	ldr	r2, [r3, #32]
 8009abe:	697b      	ldr	r3, [r7, #20]
 8009ac0:	43db      	mvns	r3, r3
 8009ac2:	401a      	ands	r2, r3
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	6a1a      	ldr	r2, [r3, #32]
 8009acc:	68bb      	ldr	r3, [r7, #8]
 8009ace:	f003 031f 	and.w	r3, r3, #31
 8009ad2:	6879      	ldr	r1, [r7, #4]
 8009ad4:	fa01 f303 	lsl.w	r3, r1, r3
 8009ad8:	431a      	orrs	r2, r3
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	621a      	str	r2, [r3, #32]
}
 8009ade:	bf00      	nop
 8009ae0:	371c      	adds	r7, #28
 8009ae2:	46bd      	mov	sp, r7
 8009ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ae8:	4770      	bx	lr

08009aea <HAL_TIMEx_HallSensor_Init>:
  * @param  htim TIM Hall Sensor Interface handle
  * @param  sConfig TIM Hall Sensor configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Init(TIM_HandleTypeDef *htim, TIM_HallSensor_InitTypeDef *sConfig)
{
 8009aea:	b580      	push	{r7, lr}
 8009aec:	b08a      	sub	sp, #40	; 0x28
 8009aee:	af00      	add	r7, sp, #0
 8009af0:	6078      	str	r0, [r7, #4]
 8009af2:	6039      	str	r1, [r7, #0]
  TIM_OC_InitTypeDef OC_Config;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d101      	bne.n	8009afe <HAL_TIMEx_HallSensor_Init+0x14>
  {
    return HAL_ERROR;
 8009afa:	2301      	movs	r3, #1
 8009afc:	e0a0      	b.n	8009c40 <HAL_TIMEx_HallSensor_Init+0x156>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
  assert_param(IS_TIM_IC_POLARITY(sConfig->IC1Polarity));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009b04:	b2db      	uxtb	r3, r3
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d106      	bne.n	8009b18 <HAL_TIMEx_HallSensor_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	2200      	movs	r2, #0
 8009b0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->HallSensor_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIMEx_HallSensor_MspInit(htim);
 8009b12:	6878      	ldr	r0, [r7, #4]
 8009b14:	f000 f898 	bl	8009c48 <HAL_TIMEx_HallSensor_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	2202      	movs	r2, #2
 8009b1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	681a      	ldr	r2, [r3, #0]
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	3304      	adds	r3, #4
 8009b28:	4619      	mov	r1, r3
 8009b2a:	4610      	mov	r0, r2
 8009b2c:	f7ff fa20 	bl	8008f70 <TIM_Base_SetConfig>

  /* Configure the Channel 1 as Input Channel to interface with the three Outputs of the  Hall sensor */
  TIM_TI1_SetConfig(htim->Instance, sConfig->IC1Polarity, TIM_ICSELECTION_TRC, sConfig->IC1Filter);
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	6818      	ldr	r0, [r3, #0]
 8009b34:	683b      	ldr	r3, [r7, #0]
 8009b36:	6819      	ldr	r1, [r3, #0]
 8009b38:	683b      	ldr	r3, [r7, #0]
 8009b3a:	689b      	ldr	r3, [r3, #8]
 8009b3c:	2203      	movs	r2, #3
 8009b3e:	f7ff fde9 	bl	8009714 <TIM_TI1_SetConfig>

  /* Reset the IC1PSC Bits */
  htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	699a      	ldr	r2, [r3, #24]
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	f022 020c 	bic.w	r2, r2, #12
 8009b50:	619a      	str	r2, [r3, #24]
  /* Set the IC1PSC value */
  htim->Instance->CCMR1 |= sConfig->IC1Prescaler;
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	6999      	ldr	r1, [r3, #24]
 8009b58:	683b      	ldr	r3, [r7, #0]
 8009b5a:	685a      	ldr	r2, [r3, #4]
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	430a      	orrs	r2, r1
 8009b62:	619a      	str	r2, [r3, #24]

  /* Enable the Hall sensor interface (XOR function of the three inputs) */
  htim->Instance->CR2 |= TIM_CR2_TI1S;
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	685a      	ldr	r2, [r3, #4]
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009b72:	605a      	str	r2, [r3, #4]

  /* Select the TIM_TS_TI1F_ED signal as Input trigger for the TIM */
  htim->Instance->SMCR &= ~TIM_SMCR_TS;
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	689b      	ldr	r3, [r3, #8]
 8009b7a:	687a      	ldr	r2, [r7, #4]
 8009b7c:	6812      	ldr	r2, [r2, #0]
 8009b7e:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8009b82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009b86:	6093      	str	r3, [r2, #8]
  htim->Instance->SMCR |= TIM_TS_TI1F_ED;
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	689a      	ldr	r2, [r3, #8]
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009b96:	609a      	str	r2, [r3, #8]

  /* Use the TIM_TS_TI1F_ED signal to reset the TIM counter each edge detection */
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	689b      	ldr	r3, [r3, #8]
 8009b9e:	687a      	ldr	r2, [r7, #4]
 8009ba0:	6812      	ldr	r2, [r2, #0]
 8009ba2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009ba6:	f023 0307 	bic.w	r3, r3, #7
 8009baa:	6093      	str	r3, [r2, #8]
  htim->Instance->SMCR |= TIM_SLAVEMODE_RESET;
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	689a      	ldr	r2, [r3, #8]
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	f042 0204 	orr.w	r2, r2, #4
 8009bba:	609a      	str	r2, [r3, #8]

  /* Program channel 2 in PWM 2 mode with the desired Commutation_Delay*/
  OC_Config.OCFastMode = TIM_OCFAST_DISABLE;
 8009bbc:	2300      	movs	r3, #0
 8009bbe:	61fb      	str	r3, [r7, #28]
  OC_Config.OCIdleState = TIM_OCIDLESTATE_RESET;
 8009bc0:	2300      	movs	r3, #0
 8009bc2:	623b      	str	r3, [r7, #32]
  OC_Config.OCMode = TIM_OCMODE_PWM2;
 8009bc4:	2370      	movs	r3, #112	; 0x70
 8009bc6:	60fb      	str	r3, [r7, #12]
  OC_Config.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8009bc8:	2300      	movs	r3, #0
 8009bca:	627b      	str	r3, [r7, #36]	; 0x24
  OC_Config.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8009bcc:	2300      	movs	r3, #0
 8009bce:	61bb      	str	r3, [r7, #24]
  OC_Config.OCPolarity = TIM_OCPOLARITY_HIGH;
 8009bd0:	2300      	movs	r3, #0
 8009bd2:	617b      	str	r3, [r7, #20]
  OC_Config.Pulse = sConfig->Commutation_Delay;
 8009bd4:	683b      	ldr	r3, [r7, #0]
 8009bd6:	68db      	ldr	r3, [r3, #12]
 8009bd8:	613b      	str	r3, [r7, #16]

  TIM_OC2_SetConfig(htim->Instance, &OC_Config);
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	f107 020c 	add.w	r2, r7, #12
 8009be2:	4611      	mov	r1, r2
 8009be4:	4618      	mov	r0, r3
 8009be6:	f7ff fb05 	bl	80091f4 <TIM_OC2_SetConfig>

  /* Select OC2REF as trigger output on TRGO: write the MMS bits in the TIMx_CR2
    register to 101 */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	685b      	ldr	r3, [r3, #4]
 8009bf0:	687a      	ldr	r2, [r7, #4]
 8009bf2:	6812      	ldr	r2, [r2, #0]
 8009bf4:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8009bf8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009bfc:	6053      	str	r3, [r2, #4]
  htim->Instance->CR2 |= TIM_TRGO_OC2REF;
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	685a      	ldr	r2, [r3, #4]
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	f042 0250 	orr.w	r2, r2, #80	; 0x50
 8009c0c:	605a      	str	r2, [r3, #4]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	2201      	movs	r2, #1
 8009c12:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	2201      	movs	r2, #1
 8009c1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	2201      	movs	r2, #1
 8009c22:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	2201      	movs	r2, #1
 8009c2a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	2201      	movs	r2, #1
 8009c32:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	2201      	movs	r2, #1
 8009c3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009c3e:	2300      	movs	r3, #0
}
 8009c40:	4618      	mov	r0, r3
 8009c42:	3728      	adds	r7, #40	; 0x28
 8009c44:	46bd      	mov	sp, r7
 8009c46:	bd80      	pop	{r7, pc}

08009c48 <HAL_TIMEx_HallSensor_MspInit>:
  * @brief  Initializes the TIM Hall Sensor MSP.
  * @param  htim TIM Hall Sensor Interface handle
  * @retval None
  */
__weak void HAL_TIMEx_HallSensor_MspInit(TIM_HandleTypeDef *htim)
{
 8009c48:	b480      	push	{r7}
 8009c4a:	b083      	sub	sp, #12
 8009c4c:	af00      	add	r7, sp, #0
 8009c4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_HallSensor_MspInit could be implemented in the user file
   */
}
 8009c50:	bf00      	nop
 8009c52:	370c      	adds	r7, #12
 8009c54:	46bd      	mov	sp, r7
 8009c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c5a:	4770      	bx	lr

08009c5c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009c5c:	b480      	push	{r7}
 8009c5e:	b085      	sub	sp, #20
 8009c60:	af00      	add	r7, sp, #0
 8009c62:	6078      	str	r0, [r7, #4]
 8009c64:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009c6c:	2b01      	cmp	r3, #1
 8009c6e:	d101      	bne.n	8009c74 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009c70:	2302      	movs	r3, #2
 8009c72:	e074      	b.n	8009d5e <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	2201      	movs	r2, #1
 8009c78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	2202      	movs	r2, #2
 8009c80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	685b      	ldr	r3, [r3, #4]
 8009c8a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	689b      	ldr	r3, [r3, #8]
 8009c92:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	4a34      	ldr	r2, [pc, #208]	; (8009d6c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8009c9a:	4293      	cmp	r3, r2
 8009c9c:	d009      	beq.n	8009cb2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	4a33      	ldr	r2, [pc, #204]	; (8009d70 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8009ca4:	4293      	cmp	r3, r2
 8009ca6:	d004      	beq.n	8009cb2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	4a31      	ldr	r2, [pc, #196]	; (8009d74 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009cae:	4293      	cmp	r3, r2
 8009cb0:	d108      	bne.n	8009cc4 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8009cb8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009cba:	683b      	ldr	r3, [r7, #0]
 8009cbc:	685b      	ldr	r3, [r3, #4]
 8009cbe:	68fa      	ldr	r2, [r7, #12]
 8009cc0:	4313      	orrs	r3, r2
 8009cc2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8009cca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009cce:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009cd0:	683b      	ldr	r3, [r7, #0]
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	68fa      	ldr	r2, [r7, #12]
 8009cd6:	4313      	orrs	r3, r2
 8009cd8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	68fa      	ldr	r2, [r7, #12]
 8009ce0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	4a21      	ldr	r2, [pc, #132]	; (8009d6c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8009ce8:	4293      	cmp	r3, r2
 8009cea:	d022      	beq.n	8009d32 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009cf4:	d01d      	beq.n	8009d32 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	4a1f      	ldr	r2, [pc, #124]	; (8009d78 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8009cfc:	4293      	cmp	r3, r2
 8009cfe:	d018      	beq.n	8009d32 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	4a1d      	ldr	r2, [pc, #116]	; (8009d7c <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8009d06:	4293      	cmp	r3, r2
 8009d08:	d013      	beq.n	8009d32 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	4a1c      	ldr	r2, [pc, #112]	; (8009d80 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8009d10:	4293      	cmp	r3, r2
 8009d12:	d00e      	beq.n	8009d32 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	4a15      	ldr	r2, [pc, #84]	; (8009d70 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8009d1a:	4293      	cmp	r3, r2
 8009d1c:	d009      	beq.n	8009d32 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	4a18      	ldr	r2, [pc, #96]	; (8009d84 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8009d24:	4293      	cmp	r3, r2
 8009d26:	d004      	beq.n	8009d32 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	4a11      	ldr	r2, [pc, #68]	; (8009d74 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009d2e:	4293      	cmp	r3, r2
 8009d30:	d10c      	bne.n	8009d4c <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009d32:	68bb      	ldr	r3, [r7, #8]
 8009d34:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009d38:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009d3a:	683b      	ldr	r3, [r7, #0]
 8009d3c:	689b      	ldr	r3, [r3, #8]
 8009d3e:	68ba      	ldr	r2, [r7, #8]
 8009d40:	4313      	orrs	r3, r2
 8009d42:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	68ba      	ldr	r2, [r7, #8]
 8009d4a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	2201      	movs	r2, #1
 8009d50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	2200      	movs	r2, #0
 8009d58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009d5c:	2300      	movs	r3, #0
}
 8009d5e:	4618      	mov	r0, r3
 8009d60:	3714      	adds	r7, #20
 8009d62:	46bd      	mov	sp, r7
 8009d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d68:	4770      	bx	lr
 8009d6a:	bf00      	nop
 8009d6c:	40012c00 	.word	0x40012c00
 8009d70:	40013400 	.word	0x40013400
 8009d74:	40015000 	.word	0x40015000
 8009d78:	40000400 	.word	0x40000400
 8009d7c:	40000800 	.word	0x40000800
 8009d80:	40000c00 	.word	0x40000c00
 8009d84:	40014000 	.word	0x40014000

08009d88 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009d88:	b480      	push	{r7}
 8009d8a:	b085      	sub	sp, #20
 8009d8c:	af00      	add	r7, sp, #0
 8009d8e:	6078      	str	r0, [r7, #4]
 8009d90:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8009d92:	2300      	movs	r3, #0
 8009d94:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009d9c:	2b01      	cmp	r3, #1
 8009d9e:	d101      	bne.n	8009da4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009da0:	2302      	movs	r3, #2
 8009da2:	e096      	b.n	8009ed2 <HAL_TIMEx_ConfigBreakDeadTime+0x14a>
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	2201      	movs	r2, #1
 8009da8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8009db2:	683b      	ldr	r3, [r7, #0]
 8009db4:	68db      	ldr	r3, [r3, #12]
 8009db6:	4313      	orrs	r3, r2
 8009db8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009dc0:	683b      	ldr	r3, [r7, #0]
 8009dc2:	689b      	ldr	r3, [r3, #8]
 8009dc4:	4313      	orrs	r3, r2
 8009dc6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8009dce:	683b      	ldr	r3, [r7, #0]
 8009dd0:	685b      	ldr	r3, [r3, #4]
 8009dd2:	4313      	orrs	r3, r2
 8009dd4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8009ddc:	683b      	ldr	r3, [r7, #0]
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	4313      	orrs	r3, r2
 8009de2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009dea:	683b      	ldr	r3, [r7, #0]
 8009dec:	691b      	ldr	r3, [r3, #16]
 8009dee:	4313      	orrs	r3, r2
 8009df0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8009df8:	683b      	ldr	r3, [r7, #0]
 8009dfa:	695b      	ldr	r3, [r3, #20]
 8009dfc:	4313      	orrs	r3, r2
 8009dfe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8009e06:	683b      	ldr	r3, [r7, #0]
 8009e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e0a:	4313      	orrs	r3, r2
 8009e0c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8009e14:	683b      	ldr	r3, [r7, #0]
 8009e16:	699b      	ldr	r3, [r3, #24]
 8009e18:	041b      	lsls	r3, r3, #16
 8009e1a:	4313      	orrs	r3, r2
 8009e1c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	4a2f      	ldr	r2, [pc, #188]	; (8009ee0 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8009e24:	4293      	cmp	r3, r2
 8009e26:	d009      	beq.n	8009e3c <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	4a2d      	ldr	r2, [pc, #180]	; (8009ee4 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8009e2e:	4293      	cmp	r3, r2
 8009e30:	d004      	beq.n	8009e3c <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	4a2c      	ldr	r2, [pc, #176]	; (8009ee8 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8009e38:	4293      	cmp	r3, r2
 8009e3a:	d106      	bne.n	8009e4a <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8009e42:	683b      	ldr	r3, [r7, #0]
 8009e44:	69db      	ldr	r3, [r3, #28]
 8009e46:	4313      	orrs	r3, r2
 8009e48:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	4a24      	ldr	r2, [pc, #144]	; (8009ee0 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8009e50:	4293      	cmp	r3, r2
 8009e52:	d009      	beq.n	8009e68 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	4a22      	ldr	r2, [pc, #136]	; (8009ee4 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8009e5a:	4293      	cmp	r3, r2
 8009e5c:	d004      	beq.n	8009e68 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	4a21      	ldr	r2, [pc, #132]	; (8009ee8 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8009e64:	4293      	cmp	r3, r2
 8009e66:	d12b      	bne.n	8009ec0 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8009e6e:	683b      	ldr	r3, [r7, #0]
 8009e70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e72:	051b      	lsls	r3, r3, #20
 8009e74:	4313      	orrs	r3, r2
 8009e76:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8009e7e:	683b      	ldr	r3, [r7, #0]
 8009e80:	6a1b      	ldr	r3, [r3, #32]
 8009e82:	4313      	orrs	r3, r2
 8009e84:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8009e8c:	683b      	ldr	r3, [r7, #0]
 8009e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e90:	4313      	orrs	r3, r2
 8009e92:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	4a11      	ldr	r2, [pc, #68]	; (8009ee0 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8009e9a:	4293      	cmp	r3, r2
 8009e9c:	d009      	beq.n	8009eb2 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	4a10      	ldr	r2, [pc, #64]	; (8009ee4 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8009ea4:	4293      	cmp	r3, r2
 8009ea6:	d004      	beq.n	8009eb2 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	4a0e      	ldr	r2, [pc, #56]	; (8009ee8 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8009eae:	4293      	cmp	r3, r2
 8009eb0:	d106      	bne.n	8009ec0 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8009eb8:	683b      	ldr	r3, [r7, #0]
 8009eba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ebc:	4313      	orrs	r3, r2
 8009ebe:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	68fa      	ldr	r2, [r7, #12]
 8009ec6:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	2200      	movs	r2, #0
 8009ecc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009ed0:	2300      	movs	r3, #0
}
 8009ed2:	4618      	mov	r0, r3
 8009ed4:	3714      	adds	r7, #20
 8009ed6:	46bd      	mov	sp, r7
 8009ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009edc:	4770      	bx	lr
 8009ede:	bf00      	nop
 8009ee0:	40012c00 	.word	0x40012c00
 8009ee4:	40013400 	.word	0x40013400
 8009ee8:	40015000 	.word	0x40015000

08009eec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009eec:	b480      	push	{r7}
 8009eee:	b083      	sub	sp, #12
 8009ef0:	af00      	add	r7, sp, #0
 8009ef2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009ef4:	bf00      	nop
 8009ef6:	370c      	adds	r7, #12
 8009ef8:	46bd      	mov	sp, r7
 8009efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009efe:	4770      	bx	lr

08009f00 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009f00:	b480      	push	{r7}
 8009f02:	b083      	sub	sp, #12
 8009f04:	af00      	add	r7, sp, #0
 8009f06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009f08:	bf00      	nop
 8009f0a:	370c      	adds	r7, #12
 8009f0c:	46bd      	mov	sp, r7
 8009f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f12:	4770      	bx	lr

08009f14 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009f14:	b480      	push	{r7}
 8009f16:	b083      	sub	sp, #12
 8009f18:	af00      	add	r7, sp, #0
 8009f1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009f1c:	bf00      	nop
 8009f1e:	370c      	adds	r7, #12
 8009f20:	46bd      	mov	sp, r7
 8009f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f26:	4770      	bx	lr

08009f28 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8009f28:	b480      	push	{r7}
 8009f2a:	b083      	sub	sp, #12
 8009f2c:	af00      	add	r7, sp, #0
 8009f2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8009f30:	bf00      	nop
 8009f32:	370c      	adds	r7, #12
 8009f34:	46bd      	mov	sp, r7
 8009f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f3a:	4770      	bx	lr

08009f3c <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8009f3c:	b480      	push	{r7}
 8009f3e:	b083      	sub	sp, #12
 8009f40:	af00      	add	r7, sp, #0
 8009f42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8009f44:	bf00      	nop
 8009f46:	370c      	adds	r7, #12
 8009f48:	46bd      	mov	sp, r7
 8009f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f4e:	4770      	bx	lr

08009f50 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8009f50:	b480      	push	{r7}
 8009f52:	b083      	sub	sp, #12
 8009f54:	af00      	add	r7, sp, #0
 8009f56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8009f58:	bf00      	nop
 8009f5a:	370c      	adds	r7, #12
 8009f5c:	46bd      	mov	sp, r7
 8009f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f62:	4770      	bx	lr

08009f64 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8009f64:	b480      	push	{r7}
 8009f66:	b083      	sub	sp, #12
 8009f68:	af00      	add	r7, sp, #0
 8009f6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8009f6c:	bf00      	nop
 8009f6e:	370c      	adds	r7, #12
 8009f70:	46bd      	mov	sp, r7
 8009f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f76:	4770      	bx	lr

08009f78 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009f78:	b580      	push	{r7, lr}
 8009f7a:	b082      	sub	sp, #8
 8009f7c:	af00      	add	r7, sp, #0
 8009f7e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d101      	bne.n	8009f8a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009f86:	2301      	movs	r3, #1
 8009f88:	e042      	b.n	800a010 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	d106      	bne.n	8009fa2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	2200      	movs	r2, #0
 8009f98:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009f9c:	6878      	ldr	r0, [r7, #4]
 8009f9e:	f7f8 fd49 	bl	8002a34 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	2224      	movs	r2, #36	; 0x24
 8009fa6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	681a      	ldr	r2, [r3, #0]
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	f022 0201 	bic.w	r2, r2, #1
 8009fb8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009fba:	6878      	ldr	r0, [r7, #4]
 8009fbc:	f000 f8c2 	bl	800a144 <UART_SetConfig>
 8009fc0:	4603      	mov	r3, r0
 8009fc2:	2b01      	cmp	r3, #1
 8009fc4:	d101      	bne.n	8009fca <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8009fc6:	2301      	movs	r3, #1
 8009fc8:	e022      	b.n	800a010 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d002      	beq.n	8009fd8 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8009fd2:	6878      	ldr	r0, [r7, #4]
 8009fd4:	f000 fbb2 	bl	800a73c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	685a      	ldr	r2, [r3, #4]
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009fe6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	689a      	ldr	r2, [r3, #8]
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009ff6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	681a      	ldr	r2, [r3, #0]
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	f042 0201 	orr.w	r2, r2, #1
 800a006:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a008:	6878      	ldr	r0, [r7, #4]
 800a00a:	f000 fc39 	bl	800a880 <UART_CheckIdleState>
 800a00e:	4603      	mov	r3, r0
}
 800a010:	4618      	mov	r0, r3
 800a012:	3708      	adds	r7, #8
 800a014:	46bd      	mov	sp, r7
 800a016:	bd80      	pop	{r7, pc}

0800a018 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a018:	b580      	push	{r7, lr}
 800a01a:	b08a      	sub	sp, #40	; 0x28
 800a01c:	af02      	add	r7, sp, #8
 800a01e:	60f8      	str	r0, [r7, #12]
 800a020:	60b9      	str	r1, [r7, #8]
 800a022:	603b      	str	r3, [r7, #0]
 800a024:	4613      	mov	r3, r2
 800a026:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a02e:	2b20      	cmp	r3, #32
 800a030:	f040 8083 	bne.w	800a13a <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800a034:	68bb      	ldr	r3, [r7, #8]
 800a036:	2b00      	cmp	r3, #0
 800a038:	d002      	beq.n	800a040 <HAL_UART_Transmit+0x28>
 800a03a:	88fb      	ldrh	r3, [r7, #6]
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	d101      	bne.n	800a044 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800a040:	2301      	movs	r3, #1
 800a042:	e07b      	b.n	800a13c <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a04a:	2b01      	cmp	r3, #1
 800a04c:	d101      	bne.n	800a052 <HAL_UART_Transmit+0x3a>
 800a04e:	2302      	movs	r3, #2
 800a050:	e074      	b.n	800a13c <HAL_UART_Transmit+0x124>
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	2201      	movs	r2, #1
 800a056:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	2200      	movs	r2, #0
 800a05e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	2221      	movs	r2, #33	; 0x21
 800a066:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a06a:	f7f9 f8fb 	bl	8003264 <HAL_GetTick>
 800a06e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	88fa      	ldrh	r2, [r7, #6]
 800a074:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	88fa      	ldrh	r2, [r7, #6]
 800a07c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	689b      	ldr	r3, [r3, #8]
 800a084:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a088:	d108      	bne.n	800a09c <HAL_UART_Transmit+0x84>
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	691b      	ldr	r3, [r3, #16]
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d104      	bne.n	800a09c <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800a092:	2300      	movs	r3, #0
 800a094:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800a096:	68bb      	ldr	r3, [r7, #8]
 800a098:	61bb      	str	r3, [r7, #24]
 800a09a:	e003      	b.n	800a0a4 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800a09c:	68bb      	ldr	r3, [r7, #8]
 800a09e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a0a0:	2300      	movs	r3, #0
 800a0a2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	2200      	movs	r2, #0
 800a0a8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800a0ac:	e02c      	b.n	800a108 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a0ae:	683b      	ldr	r3, [r7, #0]
 800a0b0:	9300      	str	r3, [sp, #0]
 800a0b2:	697b      	ldr	r3, [r7, #20]
 800a0b4:	2200      	movs	r2, #0
 800a0b6:	2180      	movs	r1, #128	; 0x80
 800a0b8:	68f8      	ldr	r0, [r7, #12]
 800a0ba:	f000 fc2c 	bl	800a916 <UART_WaitOnFlagUntilTimeout>
 800a0be:	4603      	mov	r3, r0
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	d001      	beq.n	800a0c8 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800a0c4:	2303      	movs	r3, #3
 800a0c6:	e039      	b.n	800a13c <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800a0c8:	69fb      	ldr	r3, [r7, #28]
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	d10b      	bne.n	800a0e6 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a0ce:	69bb      	ldr	r3, [r7, #24]
 800a0d0:	881b      	ldrh	r3, [r3, #0]
 800a0d2:	461a      	mov	r2, r3
 800a0d4:	68fb      	ldr	r3, [r7, #12]
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a0dc:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800a0de:	69bb      	ldr	r3, [r7, #24]
 800a0e0:	3302      	adds	r3, #2
 800a0e2:	61bb      	str	r3, [r7, #24]
 800a0e4:	e007      	b.n	800a0f6 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800a0e6:	69fb      	ldr	r3, [r7, #28]
 800a0e8:	781a      	ldrb	r2, [r3, #0]
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800a0f0:	69fb      	ldr	r3, [r7, #28]
 800a0f2:	3301      	adds	r3, #1
 800a0f4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800a0fc:	b29b      	uxth	r3, r3
 800a0fe:	3b01      	subs	r3, #1
 800a100:	b29a      	uxth	r2, r3
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800a10e:	b29b      	uxth	r3, r3
 800a110:	2b00      	cmp	r3, #0
 800a112:	d1cc      	bne.n	800a0ae <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a114:	683b      	ldr	r3, [r7, #0]
 800a116:	9300      	str	r3, [sp, #0]
 800a118:	697b      	ldr	r3, [r7, #20]
 800a11a:	2200      	movs	r2, #0
 800a11c:	2140      	movs	r1, #64	; 0x40
 800a11e:	68f8      	ldr	r0, [r7, #12]
 800a120:	f000 fbf9 	bl	800a916 <UART_WaitOnFlagUntilTimeout>
 800a124:	4603      	mov	r3, r0
 800a126:	2b00      	cmp	r3, #0
 800a128:	d001      	beq.n	800a12e <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800a12a:	2303      	movs	r3, #3
 800a12c:	e006      	b.n	800a13c <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	2220      	movs	r2, #32
 800a132:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800a136:	2300      	movs	r3, #0
 800a138:	e000      	b.n	800a13c <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800a13a:	2302      	movs	r3, #2
  }
}
 800a13c:	4618      	mov	r0, r3
 800a13e:	3720      	adds	r7, #32
 800a140:	46bd      	mov	sp, r7
 800a142:	bd80      	pop	{r7, pc}

0800a144 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a144:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a148:	b08c      	sub	sp, #48	; 0x30
 800a14a:	af00      	add	r7, sp, #0
 800a14c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a14e:	2300      	movs	r3, #0
 800a150:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a154:	697b      	ldr	r3, [r7, #20]
 800a156:	689a      	ldr	r2, [r3, #8]
 800a158:	697b      	ldr	r3, [r7, #20]
 800a15a:	691b      	ldr	r3, [r3, #16]
 800a15c:	431a      	orrs	r2, r3
 800a15e:	697b      	ldr	r3, [r7, #20]
 800a160:	695b      	ldr	r3, [r3, #20]
 800a162:	431a      	orrs	r2, r3
 800a164:	697b      	ldr	r3, [r7, #20]
 800a166:	69db      	ldr	r3, [r3, #28]
 800a168:	4313      	orrs	r3, r2
 800a16a:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a16c:	697b      	ldr	r3, [r7, #20]
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	681a      	ldr	r2, [r3, #0]
 800a172:	4baa      	ldr	r3, [pc, #680]	; (800a41c <UART_SetConfig+0x2d8>)
 800a174:	4013      	ands	r3, r2
 800a176:	697a      	ldr	r2, [r7, #20]
 800a178:	6812      	ldr	r2, [r2, #0]
 800a17a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a17c:	430b      	orrs	r3, r1
 800a17e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a180:	697b      	ldr	r3, [r7, #20]
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	685b      	ldr	r3, [r3, #4]
 800a186:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a18a:	697b      	ldr	r3, [r7, #20]
 800a18c:	68da      	ldr	r2, [r3, #12]
 800a18e:	697b      	ldr	r3, [r7, #20]
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	430a      	orrs	r2, r1
 800a194:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a196:	697b      	ldr	r3, [r7, #20]
 800a198:	699b      	ldr	r3, [r3, #24]
 800a19a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a19c:	697b      	ldr	r3, [r7, #20]
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	4a9f      	ldr	r2, [pc, #636]	; (800a420 <UART_SetConfig+0x2dc>)
 800a1a2:	4293      	cmp	r3, r2
 800a1a4:	d004      	beq.n	800a1b0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a1a6:	697b      	ldr	r3, [r7, #20]
 800a1a8:	6a1b      	ldr	r3, [r3, #32]
 800a1aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a1ac:	4313      	orrs	r3, r2
 800a1ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a1b0:	697b      	ldr	r3, [r7, #20]
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	689b      	ldr	r3, [r3, #8]
 800a1b6:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800a1ba:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800a1be:	697a      	ldr	r2, [r7, #20]
 800a1c0:	6812      	ldr	r2, [r2, #0]
 800a1c2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a1c4:	430b      	orrs	r3, r1
 800a1c6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a1c8:	697b      	ldr	r3, [r7, #20]
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1ce:	f023 010f 	bic.w	r1, r3, #15
 800a1d2:	697b      	ldr	r3, [r7, #20]
 800a1d4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a1d6:	697b      	ldr	r3, [r7, #20]
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	430a      	orrs	r2, r1
 800a1dc:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a1de:	697b      	ldr	r3, [r7, #20]
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	4a90      	ldr	r2, [pc, #576]	; (800a424 <UART_SetConfig+0x2e0>)
 800a1e4:	4293      	cmp	r3, r2
 800a1e6:	d125      	bne.n	800a234 <UART_SetConfig+0xf0>
 800a1e8:	4b8f      	ldr	r3, [pc, #572]	; (800a428 <UART_SetConfig+0x2e4>)
 800a1ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a1ee:	f003 0303 	and.w	r3, r3, #3
 800a1f2:	2b03      	cmp	r3, #3
 800a1f4:	d81a      	bhi.n	800a22c <UART_SetConfig+0xe8>
 800a1f6:	a201      	add	r2, pc, #4	; (adr r2, 800a1fc <UART_SetConfig+0xb8>)
 800a1f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1fc:	0800a20d 	.word	0x0800a20d
 800a200:	0800a21d 	.word	0x0800a21d
 800a204:	0800a215 	.word	0x0800a215
 800a208:	0800a225 	.word	0x0800a225
 800a20c:	2301      	movs	r3, #1
 800a20e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a212:	e116      	b.n	800a442 <UART_SetConfig+0x2fe>
 800a214:	2302      	movs	r3, #2
 800a216:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a21a:	e112      	b.n	800a442 <UART_SetConfig+0x2fe>
 800a21c:	2304      	movs	r3, #4
 800a21e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a222:	e10e      	b.n	800a442 <UART_SetConfig+0x2fe>
 800a224:	2308      	movs	r3, #8
 800a226:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a22a:	e10a      	b.n	800a442 <UART_SetConfig+0x2fe>
 800a22c:	2310      	movs	r3, #16
 800a22e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a232:	e106      	b.n	800a442 <UART_SetConfig+0x2fe>
 800a234:	697b      	ldr	r3, [r7, #20]
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	4a7c      	ldr	r2, [pc, #496]	; (800a42c <UART_SetConfig+0x2e8>)
 800a23a:	4293      	cmp	r3, r2
 800a23c:	d138      	bne.n	800a2b0 <UART_SetConfig+0x16c>
 800a23e:	4b7a      	ldr	r3, [pc, #488]	; (800a428 <UART_SetConfig+0x2e4>)
 800a240:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a244:	f003 030c 	and.w	r3, r3, #12
 800a248:	2b0c      	cmp	r3, #12
 800a24a:	d82d      	bhi.n	800a2a8 <UART_SetConfig+0x164>
 800a24c:	a201      	add	r2, pc, #4	; (adr r2, 800a254 <UART_SetConfig+0x110>)
 800a24e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a252:	bf00      	nop
 800a254:	0800a289 	.word	0x0800a289
 800a258:	0800a2a9 	.word	0x0800a2a9
 800a25c:	0800a2a9 	.word	0x0800a2a9
 800a260:	0800a2a9 	.word	0x0800a2a9
 800a264:	0800a299 	.word	0x0800a299
 800a268:	0800a2a9 	.word	0x0800a2a9
 800a26c:	0800a2a9 	.word	0x0800a2a9
 800a270:	0800a2a9 	.word	0x0800a2a9
 800a274:	0800a291 	.word	0x0800a291
 800a278:	0800a2a9 	.word	0x0800a2a9
 800a27c:	0800a2a9 	.word	0x0800a2a9
 800a280:	0800a2a9 	.word	0x0800a2a9
 800a284:	0800a2a1 	.word	0x0800a2a1
 800a288:	2300      	movs	r3, #0
 800a28a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a28e:	e0d8      	b.n	800a442 <UART_SetConfig+0x2fe>
 800a290:	2302      	movs	r3, #2
 800a292:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a296:	e0d4      	b.n	800a442 <UART_SetConfig+0x2fe>
 800a298:	2304      	movs	r3, #4
 800a29a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a29e:	e0d0      	b.n	800a442 <UART_SetConfig+0x2fe>
 800a2a0:	2308      	movs	r3, #8
 800a2a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a2a6:	e0cc      	b.n	800a442 <UART_SetConfig+0x2fe>
 800a2a8:	2310      	movs	r3, #16
 800a2aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a2ae:	e0c8      	b.n	800a442 <UART_SetConfig+0x2fe>
 800a2b0:	697b      	ldr	r3, [r7, #20]
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	4a5e      	ldr	r2, [pc, #376]	; (800a430 <UART_SetConfig+0x2ec>)
 800a2b6:	4293      	cmp	r3, r2
 800a2b8:	d125      	bne.n	800a306 <UART_SetConfig+0x1c2>
 800a2ba:	4b5b      	ldr	r3, [pc, #364]	; (800a428 <UART_SetConfig+0x2e4>)
 800a2bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a2c0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800a2c4:	2b30      	cmp	r3, #48	; 0x30
 800a2c6:	d016      	beq.n	800a2f6 <UART_SetConfig+0x1b2>
 800a2c8:	2b30      	cmp	r3, #48	; 0x30
 800a2ca:	d818      	bhi.n	800a2fe <UART_SetConfig+0x1ba>
 800a2cc:	2b20      	cmp	r3, #32
 800a2ce:	d00a      	beq.n	800a2e6 <UART_SetConfig+0x1a2>
 800a2d0:	2b20      	cmp	r3, #32
 800a2d2:	d814      	bhi.n	800a2fe <UART_SetConfig+0x1ba>
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d002      	beq.n	800a2de <UART_SetConfig+0x19a>
 800a2d8:	2b10      	cmp	r3, #16
 800a2da:	d008      	beq.n	800a2ee <UART_SetConfig+0x1aa>
 800a2dc:	e00f      	b.n	800a2fe <UART_SetConfig+0x1ba>
 800a2de:	2300      	movs	r3, #0
 800a2e0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a2e4:	e0ad      	b.n	800a442 <UART_SetConfig+0x2fe>
 800a2e6:	2302      	movs	r3, #2
 800a2e8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a2ec:	e0a9      	b.n	800a442 <UART_SetConfig+0x2fe>
 800a2ee:	2304      	movs	r3, #4
 800a2f0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a2f4:	e0a5      	b.n	800a442 <UART_SetConfig+0x2fe>
 800a2f6:	2308      	movs	r3, #8
 800a2f8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a2fc:	e0a1      	b.n	800a442 <UART_SetConfig+0x2fe>
 800a2fe:	2310      	movs	r3, #16
 800a300:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a304:	e09d      	b.n	800a442 <UART_SetConfig+0x2fe>
 800a306:	697b      	ldr	r3, [r7, #20]
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	4a4a      	ldr	r2, [pc, #296]	; (800a434 <UART_SetConfig+0x2f0>)
 800a30c:	4293      	cmp	r3, r2
 800a30e:	d125      	bne.n	800a35c <UART_SetConfig+0x218>
 800a310:	4b45      	ldr	r3, [pc, #276]	; (800a428 <UART_SetConfig+0x2e4>)
 800a312:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a316:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800a31a:	2bc0      	cmp	r3, #192	; 0xc0
 800a31c:	d016      	beq.n	800a34c <UART_SetConfig+0x208>
 800a31e:	2bc0      	cmp	r3, #192	; 0xc0
 800a320:	d818      	bhi.n	800a354 <UART_SetConfig+0x210>
 800a322:	2b80      	cmp	r3, #128	; 0x80
 800a324:	d00a      	beq.n	800a33c <UART_SetConfig+0x1f8>
 800a326:	2b80      	cmp	r3, #128	; 0x80
 800a328:	d814      	bhi.n	800a354 <UART_SetConfig+0x210>
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d002      	beq.n	800a334 <UART_SetConfig+0x1f0>
 800a32e:	2b40      	cmp	r3, #64	; 0x40
 800a330:	d008      	beq.n	800a344 <UART_SetConfig+0x200>
 800a332:	e00f      	b.n	800a354 <UART_SetConfig+0x210>
 800a334:	2300      	movs	r3, #0
 800a336:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a33a:	e082      	b.n	800a442 <UART_SetConfig+0x2fe>
 800a33c:	2302      	movs	r3, #2
 800a33e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a342:	e07e      	b.n	800a442 <UART_SetConfig+0x2fe>
 800a344:	2304      	movs	r3, #4
 800a346:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a34a:	e07a      	b.n	800a442 <UART_SetConfig+0x2fe>
 800a34c:	2308      	movs	r3, #8
 800a34e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a352:	e076      	b.n	800a442 <UART_SetConfig+0x2fe>
 800a354:	2310      	movs	r3, #16
 800a356:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a35a:	e072      	b.n	800a442 <UART_SetConfig+0x2fe>
 800a35c:	697b      	ldr	r3, [r7, #20]
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	4a35      	ldr	r2, [pc, #212]	; (800a438 <UART_SetConfig+0x2f4>)
 800a362:	4293      	cmp	r3, r2
 800a364:	d12a      	bne.n	800a3bc <UART_SetConfig+0x278>
 800a366:	4b30      	ldr	r3, [pc, #192]	; (800a428 <UART_SetConfig+0x2e4>)
 800a368:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a36c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a370:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a374:	d01a      	beq.n	800a3ac <UART_SetConfig+0x268>
 800a376:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a37a:	d81b      	bhi.n	800a3b4 <UART_SetConfig+0x270>
 800a37c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a380:	d00c      	beq.n	800a39c <UART_SetConfig+0x258>
 800a382:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a386:	d815      	bhi.n	800a3b4 <UART_SetConfig+0x270>
 800a388:	2b00      	cmp	r3, #0
 800a38a:	d003      	beq.n	800a394 <UART_SetConfig+0x250>
 800a38c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a390:	d008      	beq.n	800a3a4 <UART_SetConfig+0x260>
 800a392:	e00f      	b.n	800a3b4 <UART_SetConfig+0x270>
 800a394:	2300      	movs	r3, #0
 800a396:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a39a:	e052      	b.n	800a442 <UART_SetConfig+0x2fe>
 800a39c:	2302      	movs	r3, #2
 800a39e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a3a2:	e04e      	b.n	800a442 <UART_SetConfig+0x2fe>
 800a3a4:	2304      	movs	r3, #4
 800a3a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a3aa:	e04a      	b.n	800a442 <UART_SetConfig+0x2fe>
 800a3ac:	2308      	movs	r3, #8
 800a3ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a3b2:	e046      	b.n	800a442 <UART_SetConfig+0x2fe>
 800a3b4:	2310      	movs	r3, #16
 800a3b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a3ba:	e042      	b.n	800a442 <UART_SetConfig+0x2fe>
 800a3bc:	697b      	ldr	r3, [r7, #20]
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	4a17      	ldr	r2, [pc, #92]	; (800a420 <UART_SetConfig+0x2dc>)
 800a3c2:	4293      	cmp	r3, r2
 800a3c4:	d13a      	bne.n	800a43c <UART_SetConfig+0x2f8>
 800a3c6:	4b18      	ldr	r3, [pc, #96]	; (800a428 <UART_SetConfig+0x2e4>)
 800a3c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a3cc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800a3d0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a3d4:	d01a      	beq.n	800a40c <UART_SetConfig+0x2c8>
 800a3d6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a3da:	d81b      	bhi.n	800a414 <UART_SetConfig+0x2d0>
 800a3dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a3e0:	d00c      	beq.n	800a3fc <UART_SetConfig+0x2b8>
 800a3e2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a3e6:	d815      	bhi.n	800a414 <UART_SetConfig+0x2d0>
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	d003      	beq.n	800a3f4 <UART_SetConfig+0x2b0>
 800a3ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a3f0:	d008      	beq.n	800a404 <UART_SetConfig+0x2c0>
 800a3f2:	e00f      	b.n	800a414 <UART_SetConfig+0x2d0>
 800a3f4:	2300      	movs	r3, #0
 800a3f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a3fa:	e022      	b.n	800a442 <UART_SetConfig+0x2fe>
 800a3fc:	2302      	movs	r3, #2
 800a3fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a402:	e01e      	b.n	800a442 <UART_SetConfig+0x2fe>
 800a404:	2304      	movs	r3, #4
 800a406:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a40a:	e01a      	b.n	800a442 <UART_SetConfig+0x2fe>
 800a40c:	2308      	movs	r3, #8
 800a40e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a412:	e016      	b.n	800a442 <UART_SetConfig+0x2fe>
 800a414:	2310      	movs	r3, #16
 800a416:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a41a:	e012      	b.n	800a442 <UART_SetConfig+0x2fe>
 800a41c:	cfff69f3 	.word	0xcfff69f3
 800a420:	40008000 	.word	0x40008000
 800a424:	40013800 	.word	0x40013800
 800a428:	40021000 	.word	0x40021000
 800a42c:	40004400 	.word	0x40004400
 800a430:	40004800 	.word	0x40004800
 800a434:	40004c00 	.word	0x40004c00
 800a438:	40005000 	.word	0x40005000
 800a43c:	2310      	movs	r3, #16
 800a43e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a442:	697b      	ldr	r3, [r7, #20]
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	4aae      	ldr	r2, [pc, #696]	; (800a700 <UART_SetConfig+0x5bc>)
 800a448:	4293      	cmp	r3, r2
 800a44a:	f040 8097 	bne.w	800a57c <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a44e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a452:	2b08      	cmp	r3, #8
 800a454:	d823      	bhi.n	800a49e <UART_SetConfig+0x35a>
 800a456:	a201      	add	r2, pc, #4	; (adr r2, 800a45c <UART_SetConfig+0x318>)
 800a458:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a45c:	0800a481 	.word	0x0800a481
 800a460:	0800a49f 	.word	0x0800a49f
 800a464:	0800a489 	.word	0x0800a489
 800a468:	0800a49f 	.word	0x0800a49f
 800a46c:	0800a48f 	.word	0x0800a48f
 800a470:	0800a49f 	.word	0x0800a49f
 800a474:	0800a49f 	.word	0x0800a49f
 800a478:	0800a49f 	.word	0x0800a49f
 800a47c:	0800a497 	.word	0x0800a497
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a480:	f7fd fa40 	bl	8007904 <HAL_RCC_GetPCLK1Freq>
 800a484:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800a486:	e010      	b.n	800a4aa <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a488:	4b9e      	ldr	r3, [pc, #632]	; (800a704 <UART_SetConfig+0x5c0>)
 800a48a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800a48c:	e00d      	b.n	800a4aa <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a48e:	f7fd f9cd 	bl	800782c <HAL_RCC_GetSysClockFreq>
 800a492:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800a494:	e009      	b.n	800a4aa <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a496:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a49a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800a49c:	e005      	b.n	800a4aa <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800a49e:	2300      	movs	r3, #0
 800a4a0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800a4a2:	2301      	movs	r3, #1
 800a4a4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800a4a8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a4aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	f000 8130 	beq.w	800a712 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a4b2:	697b      	ldr	r3, [r7, #20]
 800a4b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4b6:	4a94      	ldr	r2, [pc, #592]	; (800a708 <UART_SetConfig+0x5c4>)
 800a4b8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a4bc:	461a      	mov	r2, r3
 800a4be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4c0:	fbb3 f3f2 	udiv	r3, r3, r2
 800a4c4:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a4c6:	697b      	ldr	r3, [r7, #20]
 800a4c8:	685a      	ldr	r2, [r3, #4]
 800a4ca:	4613      	mov	r3, r2
 800a4cc:	005b      	lsls	r3, r3, #1
 800a4ce:	4413      	add	r3, r2
 800a4d0:	69ba      	ldr	r2, [r7, #24]
 800a4d2:	429a      	cmp	r2, r3
 800a4d4:	d305      	bcc.n	800a4e2 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a4d6:	697b      	ldr	r3, [r7, #20]
 800a4d8:	685b      	ldr	r3, [r3, #4]
 800a4da:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a4dc:	69ba      	ldr	r2, [r7, #24]
 800a4de:	429a      	cmp	r2, r3
 800a4e0:	d903      	bls.n	800a4ea <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800a4e2:	2301      	movs	r3, #1
 800a4e4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800a4e8:	e113      	b.n	800a712 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a4ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4ec:	2200      	movs	r2, #0
 800a4ee:	60bb      	str	r3, [r7, #8]
 800a4f0:	60fa      	str	r2, [r7, #12]
 800a4f2:	697b      	ldr	r3, [r7, #20]
 800a4f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4f6:	4a84      	ldr	r2, [pc, #528]	; (800a708 <UART_SetConfig+0x5c4>)
 800a4f8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a4fc:	b29b      	uxth	r3, r3
 800a4fe:	2200      	movs	r2, #0
 800a500:	603b      	str	r3, [r7, #0]
 800a502:	607a      	str	r2, [r7, #4]
 800a504:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a508:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a50c:	f7f6 fbc4 	bl	8000c98 <__aeabi_uldivmod>
 800a510:	4602      	mov	r2, r0
 800a512:	460b      	mov	r3, r1
 800a514:	4610      	mov	r0, r2
 800a516:	4619      	mov	r1, r3
 800a518:	f04f 0200 	mov.w	r2, #0
 800a51c:	f04f 0300 	mov.w	r3, #0
 800a520:	020b      	lsls	r3, r1, #8
 800a522:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a526:	0202      	lsls	r2, r0, #8
 800a528:	6979      	ldr	r1, [r7, #20]
 800a52a:	6849      	ldr	r1, [r1, #4]
 800a52c:	0849      	lsrs	r1, r1, #1
 800a52e:	2000      	movs	r0, #0
 800a530:	460c      	mov	r4, r1
 800a532:	4605      	mov	r5, r0
 800a534:	eb12 0804 	adds.w	r8, r2, r4
 800a538:	eb43 0905 	adc.w	r9, r3, r5
 800a53c:	697b      	ldr	r3, [r7, #20]
 800a53e:	685b      	ldr	r3, [r3, #4]
 800a540:	2200      	movs	r2, #0
 800a542:	469a      	mov	sl, r3
 800a544:	4693      	mov	fp, r2
 800a546:	4652      	mov	r2, sl
 800a548:	465b      	mov	r3, fp
 800a54a:	4640      	mov	r0, r8
 800a54c:	4649      	mov	r1, r9
 800a54e:	f7f6 fba3 	bl	8000c98 <__aeabi_uldivmod>
 800a552:	4602      	mov	r2, r0
 800a554:	460b      	mov	r3, r1
 800a556:	4613      	mov	r3, r2
 800a558:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a55a:	6a3b      	ldr	r3, [r7, #32]
 800a55c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a560:	d308      	bcc.n	800a574 <UART_SetConfig+0x430>
 800a562:	6a3b      	ldr	r3, [r7, #32]
 800a564:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a568:	d204      	bcs.n	800a574 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800a56a:	697b      	ldr	r3, [r7, #20]
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	6a3a      	ldr	r2, [r7, #32]
 800a570:	60da      	str	r2, [r3, #12]
 800a572:	e0ce      	b.n	800a712 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800a574:	2301      	movs	r3, #1
 800a576:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800a57a:	e0ca      	b.n	800a712 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a57c:	697b      	ldr	r3, [r7, #20]
 800a57e:	69db      	ldr	r3, [r3, #28]
 800a580:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a584:	d166      	bne.n	800a654 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800a586:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a58a:	2b08      	cmp	r3, #8
 800a58c:	d827      	bhi.n	800a5de <UART_SetConfig+0x49a>
 800a58e:	a201      	add	r2, pc, #4	; (adr r2, 800a594 <UART_SetConfig+0x450>)
 800a590:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a594:	0800a5b9 	.word	0x0800a5b9
 800a598:	0800a5c1 	.word	0x0800a5c1
 800a59c:	0800a5c9 	.word	0x0800a5c9
 800a5a0:	0800a5df 	.word	0x0800a5df
 800a5a4:	0800a5cf 	.word	0x0800a5cf
 800a5a8:	0800a5df 	.word	0x0800a5df
 800a5ac:	0800a5df 	.word	0x0800a5df
 800a5b0:	0800a5df 	.word	0x0800a5df
 800a5b4:	0800a5d7 	.word	0x0800a5d7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a5b8:	f7fd f9a4 	bl	8007904 <HAL_RCC_GetPCLK1Freq>
 800a5bc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800a5be:	e014      	b.n	800a5ea <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a5c0:	f7fd f9b6 	bl	8007930 <HAL_RCC_GetPCLK2Freq>
 800a5c4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800a5c6:	e010      	b.n	800a5ea <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a5c8:	4b4e      	ldr	r3, [pc, #312]	; (800a704 <UART_SetConfig+0x5c0>)
 800a5ca:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800a5cc:	e00d      	b.n	800a5ea <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a5ce:	f7fd f92d 	bl	800782c <HAL_RCC_GetSysClockFreq>
 800a5d2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800a5d4:	e009      	b.n	800a5ea <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a5d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a5da:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800a5dc:	e005      	b.n	800a5ea <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800a5de:	2300      	movs	r3, #0
 800a5e0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800a5e2:	2301      	movs	r3, #1
 800a5e4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800a5e8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a5ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	f000 8090 	beq.w	800a712 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a5f2:	697b      	ldr	r3, [r7, #20]
 800a5f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5f6:	4a44      	ldr	r2, [pc, #272]	; (800a708 <UART_SetConfig+0x5c4>)
 800a5f8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a5fc:	461a      	mov	r2, r3
 800a5fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a600:	fbb3 f3f2 	udiv	r3, r3, r2
 800a604:	005a      	lsls	r2, r3, #1
 800a606:	697b      	ldr	r3, [r7, #20]
 800a608:	685b      	ldr	r3, [r3, #4]
 800a60a:	085b      	lsrs	r3, r3, #1
 800a60c:	441a      	add	r2, r3
 800a60e:	697b      	ldr	r3, [r7, #20]
 800a610:	685b      	ldr	r3, [r3, #4]
 800a612:	fbb2 f3f3 	udiv	r3, r2, r3
 800a616:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a618:	6a3b      	ldr	r3, [r7, #32]
 800a61a:	2b0f      	cmp	r3, #15
 800a61c:	d916      	bls.n	800a64c <UART_SetConfig+0x508>
 800a61e:	6a3b      	ldr	r3, [r7, #32]
 800a620:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a624:	d212      	bcs.n	800a64c <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a626:	6a3b      	ldr	r3, [r7, #32]
 800a628:	b29b      	uxth	r3, r3
 800a62a:	f023 030f 	bic.w	r3, r3, #15
 800a62e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a630:	6a3b      	ldr	r3, [r7, #32]
 800a632:	085b      	lsrs	r3, r3, #1
 800a634:	b29b      	uxth	r3, r3
 800a636:	f003 0307 	and.w	r3, r3, #7
 800a63a:	b29a      	uxth	r2, r3
 800a63c:	8bfb      	ldrh	r3, [r7, #30]
 800a63e:	4313      	orrs	r3, r2
 800a640:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800a642:	697b      	ldr	r3, [r7, #20]
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	8bfa      	ldrh	r2, [r7, #30]
 800a648:	60da      	str	r2, [r3, #12]
 800a64a:	e062      	b.n	800a712 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800a64c:	2301      	movs	r3, #1
 800a64e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800a652:	e05e      	b.n	800a712 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a654:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a658:	2b08      	cmp	r3, #8
 800a65a:	d828      	bhi.n	800a6ae <UART_SetConfig+0x56a>
 800a65c:	a201      	add	r2, pc, #4	; (adr r2, 800a664 <UART_SetConfig+0x520>)
 800a65e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a662:	bf00      	nop
 800a664:	0800a689 	.word	0x0800a689
 800a668:	0800a691 	.word	0x0800a691
 800a66c:	0800a699 	.word	0x0800a699
 800a670:	0800a6af 	.word	0x0800a6af
 800a674:	0800a69f 	.word	0x0800a69f
 800a678:	0800a6af 	.word	0x0800a6af
 800a67c:	0800a6af 	.word	0x0800a6af
 800a680:	0800a6af 	.word	0x0800a6af
 800a684:	0800a6a7 	.word	0x0800a6a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a688:	f7fd f93c 	bl	8007904 <HAL_RCC_GetPCLK1Freq>
 800a68c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800a68e:	e014      	b.n	800a6ba <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a690:	f7fd f94e 	bl	8007930 <HAL_RCC_GetPCLK2Freq>
 800a694:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800a696:	e010      	b.n	800a6ba <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a698:	4b1a      	ldr	r3, [pc, #104]	; (800a704 <UART_SetConfig+0x5c0>)
 800a69a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800a69c:	e00d      	b.n	800a6ba <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a69e:	f7fd f8c5 	bl	800782c <HAL_RCC_GetSysClockFreq>
 800a6a2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800a6a4:	e009      	b.n	800a6ba <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a6a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a6aa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800a6ac:	e005      	b.n	800a6ba <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800a6ae:	2300      	movs	r3, #0
 800a6b0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800a6b2:	2301      	movs	r3, #1
 800a6b4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800a6b8:	bf00      	nop
    }

    if (pclk != 0U)
 800a6ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	d028      	beq.n	800a712 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a6c0:	697b      	ldr	r3, [r7, #20]
 800a6c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6c4:	4a10      	ldr	r2, [pc, #64]	; (800a708 <UART_SetConfig+0x5c4>)
 800a6c6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a6ca:	461a      	mov	r2, r3
 800a6cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6ce:	fbb3 f2f2 	udiv	r2, r3, r2
 800a6d2:	697b      	ldr	r3, [r7, #20]
 800a6d4:	685b      	ldr	r3, [r3, #4]
 800a6d6:	085b      	lsrs	r3, r3, #1
 800a6d8:	441a      	add	r2, r3
 800a6da:	697b      	ldr	r3, [r7, #20]
 800a6dc:	685b      	ldr	r3, [r3, #4]
 800a6de:	fbb2 f3f3 	udiv	r3, r2, r3
 800a6e2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a6e4:	6a3b      	ldr	r3, [r7, #32]
 800a6e6:	2b0f      	cmp	r3, #15
 800a6e8:	d910      	bls.n	800a70c <UART_SetConfig+0x5c8>
 800a6ea:	6a3b      	ldr	r3, [r7, #32]
 800a6ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a6f0:	d20c      	bcs.n	800a70c <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a6f2:	6a3b      	ldr	r3, [r7, #32]
 800a6f4:	b29a      	uxth	r2, r3
 800a6f6:	697b      	ldr	r3, [r7, #20]
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	60da      	str	r2, [r3, #12]
 800a6fc:	e009      	b.n	800a712 <UART_SetConfig+0x5ce>
 800a6fe:	bf00      	nop
 800a700:	40008000 	.word	0x40008000
 800a704:	00f42400 	.word	0x00f42400
 800a708:	080147d8 	.word	0x080147d8
      }
      else
      {
        ret = HAL_ERROR;
 800a70c:	2301      	movs	r3, #1
 800a70e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a712:	697b      	ldr	r3, [r7, #20]
 800a714:	2201      	movs	r2, #1
 800a716:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800a71a:	697b      	ldr	r3, [r7, #20]
 800a71c:	2201      	movs	r2, #1
 800a71e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a722:	697b      	ldr	r3, [r7, #20]
 800a724:	2200      	movs	r2, #0
 800a726:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800a728:	697b      	ldr	r3, [r7, #20]
 800a72a:	2200      	movs	r2, #0
 800a72c:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800a72e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800a732:	4618      	mov	r0, r3
 800a734:	3730      	adds	r7, #48	; 0x30
 800a736:	46bd      	mov	sp, r7
 800a738:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800a73c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a73c:	b480      	push	{r7}
 800a73e:	b083      	sub	sp, #12
 800a740:	af00      	add	r7, sp, #0
 800a742:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a748:	f003 0301 	and.w	r3, r3, #1
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	d00a      	beq.n	800a766 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	685b      	ldr	r3, [r3, #4]
 800a756:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	430a      	orrs	r2, r1
 800a764:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a76a:	f003 0302 	and.w	r3, r3, #2
 800a76e:	2b00      	cmp	r3, #0
 800a770:	d00a      	beq.n	800a788 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	685b      	ldr	r3, [r3, #4]
 800a778:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	430a      	orrs	r2, r1
 800a786:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a78c:	f003 0304 	and.w	r3, r3, #4
 800a790:	2b00      	cmp	r3, #0
 800a792:	d00a      	beq.n	800a7aa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	685b      	ldr	r3, [r3, #4]
 800a79a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	430a      	orrs	r2, r1
 800a7a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a7ae:	f003 0308 	and.w	r3, r3, #8
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	d00a      	beq.n	800a7cc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	685b      	ldr	r3, [r3, #4]
 800a7bc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	430a      	orrs	r2, r1
 800a7ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a7d0:	f003 0310 	and.w	r3, r3, #16
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	d00a      	beq.n	800a7ee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	689b      	ldr	r3, [r3, #8]
 800a7de:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	430a      	orrs	r2, r1
 800a7ec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a7f2:	f003 0320 	and.w	r3, r3, #32
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	d00a      	beq.n	800a810 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	689b      	ldr	r3, [r3, #8]
 800a800:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	430a      	orrs	r2, r1
 800a80e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a814:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a818:	2b00      	cmp	r3, #0
 800a81a:	d01a      	beq.n	800a852 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	685b      	ldr	r3, [r3, #4]
 800a822:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	430a      	orrs	r2, r1
 800a830:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a836:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a83a:	d10a      	bne.n	800a852 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	685b      	ldr	r3, [r3, #4]
 800a842:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	430a      	orrs	r2, r1
 800a850:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a856:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	d00a      	beq.n	800a874 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	685b      	ldr	r3, [r3, #4]
 800a864:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	430a      	orrs	r2, r1
 800a872:	605a      	str	r2, [r3, #4]
  }
}
 800a874:	bf00      	nop
 800a876:	370c      	adds	r7, #12
 800a878:	46bd      	mov	sp, r7
 800a87a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a87e:	4770      	bx	lr

0800a880 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a880:	b580      	push	{r7, lr}
 800a882:	b086      	sub	sp, #24
 800a884:	af02      	add	r7, sp, #8
 800a886:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	2200      	movs	r2, #0
 800a88c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a890:	f7f8 fce8 	bl	8003264 <HAL_GetTick>
 800a894:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	f003 0308 	and.w	r3, r3, #8
 800a8a0:	2b08      	cmp	r3, #8
 800a8a2:	d10e      	bne.n	800a8c2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a8a4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a8a8:	9300      	str	r3, [sp, #0]
 800a8aa:	68fb      	ldr	r3, [r7, #12]
 800a8ac:	2200      	movs	r2, #0
 800a8ae:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a8b2:	6878      	ldr	r0, [r7, #4]
 800a8b4:	f000 f82f 	bl	800a916 <UART_WaitOnFlagUntilTimeout>
 800a8b8:	4603      	mov	r3, r0
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d001      	beq.n	800a8c2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a8be:	2303      	movs	r3, #3
 800a8c0:	e025      	b.n	800a90e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	f003 0304 	and.w	r3, r3, #4
 800a8cc:	2b04      	cmp	r3, #4
 800a8ce:	d10e      	bne.n	800a8ee <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a8d0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a8d4:	9300      	str	r3, [sp, #0]
 800a8d6:	68fb      	ldr	r3, [r7, #12]
 800a8d8:	2200      	movs	r2, #0
 800a8da:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a8de:	6878      	ldr	r0, [r7, #4]
 800a8e0:	f000 f819 	bl	800a916 <UART_WaitOnFlagUntilTimeout>
 800a8e4:	4603      	mov	r3, r0
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	d001      	beq.n	800a8ee <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a8ea:	2303      	movs	r3, #3
 800a8ec:	e00f      	b.n	800a90e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	2220      	movs	r2, #32
 800a8f2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	2220      	movs	r2, #32
 800a8fa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	2200      	movs	r2, #0
 800a902:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	2200      	movs	r2, #0
 800a908:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a90c:	2300      	movs	r3, #0
}
 800a90e:	4618      	mov	r0, r3
 800a910:	3710      	adds	r7, #16
 800a912:	46bd      	mov	sp, r7
 800a914:	bd80      	pop	{r7, pc}

0800a916 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a916:	b580      	push	{r7, lr}
 800a918:	b09c      	sub	sp, #112	; 0x70
 800a91a:	af00      	add	r7, sp, #0
 800a91c:	60f8      	str	r0, [r7, #12]
 800a91e:	60b9      	str	r1, [r7, #8]
 800a920:	603b      	str	r3, [r7, #0]
 800a922:	4613      	mov	r3, r2
 800a924:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a926:	e0a9      	b.n	800aa7c <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a928:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a92a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a92e:	f000 80a5 	beq.w	800aa7c <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a932:	f7f8 fc97 	bl	8003264 <HAL_GetTick>
 800a936:	4602      	mov	r2, r0
 800a938:	683b      	ldr	r3, [r7, #0]
 800a93a:	1ad3      	subs	r3, r2, r3
 800a93c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800a93e:	429a      	cmp	r2, r3
 800a940:	d302      	bcc.n	800a948 <UART_WaitOnFlagUntilTimeout+0x32>
 800a942:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a944:	2b00      	cmp	r3, #0
 800a946:	d140      	bne.n	800a9ca <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800a948:	68fb      	ldr	r3, [r7, #12]
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a94e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a950:	e853 3f00 	ldrex	r3, [r3]
 800a954:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800a956:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a958:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a95c:	667b      	str	r3, [r7, #100]	; 0x64
 800a95e:	68fb      	ldr	r3, [r7, #12]
 800a960:	681b      	ldr	r3, [r3, #0]
 800a962:	461a      	mov	r2, r3
 800a964:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a966:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a968:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a96a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a96c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a96e:	e841 2300 	strex	r3, r2, [r1]
 800a972:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800a974:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a976:	2b00      	cmp	r3, #0
 800a978:	d1e6      	bne.n	800a948 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a97a:	68fb      	ldr	r3, [r7, #12]
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	3308      	adds	r3, #8
 800a980:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a982:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a984:	e853 3f00 	ldrex	r3, [r3]
 800a988:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a98a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a98c:	f023 0301 	bic.w	r3, r3, #1
 800a990:	663b      	str	r3, [r7, #96]	; 0x60
 800a992:	68fb      	ldr	r3, [r7, #12]
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	3308      	adds	r3, #8
 800a998:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a99a:	64ba      	str	r2, [r7, #72]	; 0x48
 800a99c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a99e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a9a0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a9a2:	e841 2300 	strex	r3, r2, [r1]
 800a9a6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800a9a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d1e5      	bne.n	800a97a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800a9ae:	68fb      	ldr	r3, [r7, #12]
 800a9b0:	2220      	movs	r2, #32
 800a9b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	2220      	movs	r2, #32
 800a9ba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800a9be:	68fb      	ldr	r3, [r7, #12]
 800a9c0:	2200      	movs	r2, #0
 800a9c2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800a9c6:	2303      	movs	r3, #3
 800a9c8:	e069      	b.n	800aa9e <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a9ca:	68fb      	ldr	r3, [r7, #12]
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	f003 0304 	and.w	r3, r3, #4
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	d051      	beq.n	800aa7c <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a9d8:	68fb      	ldr	r3, [r7, #12]
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	69db      	ldr	r3, [r3, #28]
 800a9de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a9e2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a9e6:	d149      	bne.n	800aa7c <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a9e8:	68fb      	ldr	r3, [r7, #12]
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a9f0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800a9f2:	68fb      	ldr	r3, [r7, #12]
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9fa:	e853 3f00 	ldrex	r3, [r3]
 800a9fe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800aa00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa02:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800aa06:	66fb      	str	r3, [r7, #108]	; 0x6c
 800aa08:	68fb      	ldr	r3, [r7, #12]
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	461a      	mov	r2, r3
 800aa0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aa10:	637b      	str	r3, [r7, #52]	; 0x34
 800aa12:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa14:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800aa16:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800aa18:	e841 2300 	strex	r3, r2, [r1]
 800aa1c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800aa1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	d1e6      	bne.n	800a9f2 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aa24:	68fb      	ldr	r3, [r7, #12]
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	3308      	adds	r3, #8
 800aa2a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa2c:	697b      	ldr	r3, [r7, #20]
 800aa2e:	e853 3f00 	ldrex	r3, [r3]
 800aa32:	613b      	str	r3, [r7, #16]
   return(result);
 800aa34:	693b      	ldr	r3, [r7, #16]
 800aa36:	f023 0301 	bic.w	r3, r3, #1
 800aa3a:	66bb      	str	r3, [r7, #104]	; 0x68
 800aa3c:	68fb      	ldr	r3, [r7, #12]
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	3308      	adds	r3, #8
 800aa42:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800aa44:	623a      	str	r2, [r7, #32]
 800aa46:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa48:	69f9      	ldr	r1, [r7, #28]
 800aa4a:	6a3a      	ldr	r2, [r7, #32]
 800aa4c:	e841 2300 	strex	r3, r2, [r1]
 800aa50:	61bb      	str	r3, [r7, #24]
   return(result);
 800aa52:	69bb      	ldr	r3, [r7, #24]
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	d1e5      	bne.n	800aa24 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800aa58:	68fb      	ldr	r3, [r7, #12]
 800aa5a:	2220      	movs	r2, #32
 800aa5c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800aa60:	68fb      	ldr	r3, [r7, #12]
 800aa62:	2220      	movs	r2, #32
 800aa64:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800aa68:	68fb      	ldr	r3, [r7, #12]
 800aa6a:	2220      	movs	r2, #32
 800aa6c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800aa70:	68fb      	ldr	r3, [r7, #12]
 800aa72:	2200      	movs	r2, #0
 800aa74:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800aa78:	2303      	movs	r3, #3
 800aa7a:	e010      	b.n	800aa9e <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800aa7c:	68fb      	ldr	r3, [r7, #12]
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	69da      	ldr	r2, [r3, #28]
 800aa82:	68bb      	ldr	r3, [r7, #8]
 800aa84:	4013      	ands	r3, r2
 800aa86:	68ba      	ldr	r2, [r7, #8]
 800aa88:	429a      	cmp	r2, r3
 800aa8a:	bf0c      	ite	eq
 800aa8c:	2301      	moveq	r3, #1
 800aa8e:	2300      	movne	r3, #0
 800aa90:	b2db      	uxtb	r3, r3
 800aa92:	461a      	mov	r2, r3
 800aa94:	79fb      	ldrb	r3, [r7, #7]
 800aa96:	429a      	cmp	r2, r3
 800aa98:	f43f af46 	beq.w	800a928 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800aa9c:	2300      	movs	r3, #0
}
 800aa9e:	4618      	mov	r0, r3
 800aaa0:	3770      	adds	r7, #112	; 0x70
 800aaa2:	46bd      	mov	sp, r7
 800aaa4:	bd80      	pop	{r7, pc}

0800aaa6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800aaa6:	b480      	push	{r7}
 800aaa8:	b085      	sub	sp, #20
 800aaaa:	af00      	add	r7, sp, #0
 800aaac:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800aab4:	2b01      	cmp	r3, #1
 800aab6:	d101      	bne.n	800aabc <HAL_UARTEx_DisableFifoMode+0x16>
 800aab8:	2302      	movs	r3, #2
 800aaba:	e027      	b.n	800ab0c <HAL_UARTEx_DisableFifoMode+0x66>
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	2201      	movs	r2, #1
 800aac0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	2224      	movs	r2, #36	; 0x24
 800aac8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	681b      	ldr	r3, [r3, #0]
 800aad2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	681a      	ldr	r2, [r3, #0]
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	f022 0201 	bic.w	r2, r2, #1
 800aae2:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800aae4:	68fb      	ldr	r3, [r7, #12]
 800aae6:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800aaea:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	2200      	movs	r2, #0
 800aaf0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	681b      	ldr	r3, [r3, #0]
 800aaf6:	68fa      	ldr	r2, [r7, #12]
 800aaf8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	2220      	movs	r2, #32
 800aafe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	2200      	movs	r2, #0
 800ab06:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ab0a:	2300      	movs	r3, #0
}
 800ab0c:	4618      	mov	r0, r3
 800ab0e:	3714      	adds	r7, #20
 800ab10:	46bd      	mov	sp, r7
 800ab12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab16:	4770      	bx	lr

0800ab18 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ab18:	b580      	push	{r7, lr}
 800ab1a:	b084      	sub	sp, #16
 800ab1c:	af00      	add	r7, sp, #0
 800ab1e:	6078      	str	r0, [r7, #4]
 800ab20:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ab28:	2b01      	cmp	r3, #1
 800ab2a:	d101      	bne.n	800ab30 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800ab2c:	2302      	movs	r3, #2
 800ab2e:	e02d      	b.n	800ab8c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	2201      	movs	r2, #1
 800ab34:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	2224      	movs	r2, #36	; 0x24
 800ab3c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	681b      	ldr	r3, [r3, #0]
 800ab46:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	681a      	ldr	r2, [r3, #0]
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	681b      	ldr	r3, [r3, #0]
 800ab52:	f022 0201 	bic.w	r2, r2, #1
 800ab56:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	681b      	ldr	r3, [r3, #0]
 800ab5c:	689b      	ldr	r3, [r3, #8]
 800ab5e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	683a      	ldr	r2, [r7, #0]
 800ab68:	430a      	orrs	r2, r1
 800ab6a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ab6c:	6878      	ldr	r0, [r7, #4]
 800ab6e:	f000 f84f 	bl	800ac10 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	68fa      	ldr	r2, [r7, #12]
 800ab78:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	2220      	movs	r2, #32
 800ab7e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	2200      	movs	r2, #0
 800ab86:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ab8a:	2300      	movs	r3, #0
}
 800ab8c:	4618      	mov	r0, r3
 800ab8e:	3710      	adds	r7, #16
 800ab90:	46bd      	mov	sp, r7
 800ab92:	bd80      	pop	{r7, pc}

0800ab94 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ab94:	b580      	push	{r7, lr}
 800ab96:	b084      	sub	sp, #16
 800ab98:	af00      	add	r7, sp, #0
 800ab9a:	6078      	str	r0, [r7, #4]
 800ab9c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800aba4:	2b01      	cmp	r3, #1
 800aba6:	d101      	bne.n	800abac <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800aba8:	2302      	movs	r3, #2
 800abaa:	e02d      	b.n	800ac08 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	2201      	movs	r2, #1
 800abb0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	2224      	movs	r2, #36	; 0x24
 800abb8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	681b      	ldr	r3, [r3, #0]
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	681a      	ldr	r2, [r3, #0]
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	f022 0201 	bic.w	r2, r2, #1
 800abd2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	689b      	ldr	r3, [r3, #8]
 800abda:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	683a      	ldr	r2, [r7, #0]
 800abe4:	430a      	orrs	r2, r1
 800abe6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800abe8:	6878      	ldr	r0, [r7, #4]
 800abea:	f000 f811 	bl	800ac10 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	68fa      	ldr	r2, [r7, #12]
 800abf4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	2220      	movs	r2, #32
 800abfa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	2200      	movs	r2, #0
 800ac02:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ac06:	2300      	movs	r3, #0
}
 800ac08:	4618      	mov	r0, r3
 800ac0a:	3710      	adds	r7, #16
 800ac0c:	46bd      	mov	sp, r7
 800ac0e:	bd80      	pop	{r7, pc}

0800ac10 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800ac10:	b480      	push	{r7}
 800ac12:	b085      	sub	sp, #20
 800ac14:	af00      	add	r7, sp, #0
 800ac16:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	d108      	bne.n	800ac32 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	2201      	movs	r2, #1
 800ac24:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	2201      	movs	r2, #1
 800ac2c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800ac30:	e031      	b.n	800ac96 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800ac32:	2308      	movs	r3, #8
 800ac34:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800ac36:	2308      	movs	r3, #8
 800ac38:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	681b      	ldr	r3, [r3, #0]
 800ac3e:	689b      	ldr	r3, [r3, #8]
 800ac40:	0e5b      	lsrs	r3, r3, #25
 800ac42:	b2db      	uxtb	r3, r3
 800ac44:	f003 0307 	and.w	r3, r3, #7
 800ac48:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	681b      	ldr	r3, [r3, #0]
 800ac4e:	689b      	ldr	r3, [r3, #8]
 800ac50:	0f5b      	lsrs	r3, r3, #29
 800ac52:	b2db      	uxtb	r3, r3
 800ac54:	f003 0307 	and.w	r3, r3, #7
 800ac58:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ac5a:	7bbb      	ldrb	r3, [r7, #14]
 800ac5c:	7b3a      	ldrb	r2, [r7, #12]
 800ac5e:	4911      	ldr	r1, [pc, #68]	; (800aca4 <UARTEx_SetNbDataToProcess+0x94>)
 800ac60:	5c8a      	ldrb	r2, [r1, r2]
 800ac62:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800ac66:	7b3a      	ldrb	r2, [r7, #12]
 800ac68:	490f      	ldr	r1, [pc, #60]	; (800aca8 <UARTEx_SetNbDataToProcess+0x98>)
 800ac6a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ac6c:	fb93 f3f2 	sdiv	r3, r3, r2
 800ac70:	b29a      	uxth	r2, r3
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ac78:	7bfb      	ldrb	r3, [r7, #15]
 800ac7a:	7b7a      	ldrb	r2, [r7, #13]
 800ac7c:	4909      	ldr	r1, [pc, #36]	; (800aca4 <UARTEx_SetNbDataToProcess+0x94>)
 800ac7e:	5c8a      	ldrb	r2, [r1, r2]
 800ac80:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800ac84:	7b7a      	ldrb	r2, [r7, #13]
 800ac86:	4908      	ldr	r1, [pc, #32]	; (800aca8 <UARTEx_SetNbDataToProcess+0x98>)
 800ac88:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ac8a:	fb93 f3f2 	sdiv	r3, r3, r2
 800ac8e:	b29a      	uxth	r2, r3
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800ac96:	bf00      	nop
 800ac98:	3714      	adds	r7, #20
 800ac9a:	46bd      	mov	sp, r7
 800ac9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aca0:	4770      	bx	lr
 800aca2:	bf00      	nop
 800aca4:	080147f0 	.word	0x080147f0
 800aca8:	080147f8 	.word	0x080147f8

0800acac <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800acac:	b480      	push	{r7}
 800acae:	b085      	sub	sp, #20
 800acb0:	af00      	add	r7, sp, #0
 800acb2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	2200      	movs	r2, #0
 800acb8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800acbc:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800acc0:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800acc2:	68fb      	ldr	r3, [r7, #12]
 800acc4:	b29a      	uxth	r2, r3
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800accc:	2300      	movs	r3, #0
}
 800acce:	4618      	mov	r0, r3
 800acd0:	3714      	adds	r7, #20
 800acd2:	46bd      	mov	sp, r7
 800acd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acd8:	4770      	bx	lr

0800acda <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800acda:	b480      	push	{r7}
 800acdc:	b085      	sub	sp, #20
 800acde:	af00      	add	r7, sp, #0
 800ace0:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800ace2:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800ace6:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800acee:	b29a      	uxth	r2, r3
 800acf0:	68fb      	ldr	r3, [r7, #12]
 800acf2:	b29b      	uxth	r3, r3
 800acf4:	43db      	mvns	r3, r3
 800acf6:	b29b      	uxth	r3, r3
 800acf8:	4013      	ands	r3, r2
 800acfa:	b29a      	uxth	r2, r3
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800ad02:	2300      	movs	r3, #0
}
 800ad04:	4618      	mov	r0, r3
 800ad06:	3714      	adds	r7, #20
 800ad08:	46bd      	mov	sp, r7
 800ad0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad0e:	4770      	bx	lr

0800ad10 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800ad10:	b084      	sub	sp, #16
 800ad12:	b480      	push	{r7}
 800ad14:	b083      	sub	sp, #12
 800ad16:	af00      	add	r7, sp, #0
 800ad18:	6078      	str	r0, [r7, #4]
 800ad1a:	f107 0014 	add.w	r0, r7, #20
 800ad1e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	2201      	movs	r2, #1
 800ad26:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	2200      	movs	r2, #0
 800ad2e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	2200      	movs	r2, #0
 800ad36:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	2200      	movs	r2, #0
 800ad3e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800ad42:	2300      	movs	r3, #0
}
 800ad44:	4618      	mov	r0, r3
 800ad46:	370c      	adds	r7, #12
 800ad48:	46bd      	mov	sp, r7
 800ad4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad4e:	b004      	add	sp, #16
 800ad50:	4770      	bx	lr
	...

0800ad54 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800ad54:	b480      	push	{r7}
 800ad56:	b09d      	sub	sp, #116	; 0x74
 800ad58:	af00      	add	r7, sp, #0
 800ad5a:	6078      	str	r0, [r7, #4]
 800ad5c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800ad5e:	2300      	movs	r3, #0
 800ad60:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800ad64:	687a      	ldr	r2, [r7, #4]
 800ad66:	683b      	ldr	r3, [r7, #0]
 800ad68:	781b      	ldrb	r3, [r3, #0]
 800ad6a:	009b      	lsls	r3, r3, #2
 800ad6c:	4413      	add	r3, r2
 800ad6e:	881b      	ldrh	r3, [r3, #0]
 800ad70:	b29b      	uxth	r3, r3
 800ad72:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800ad76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ad7a:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800ad7e:	683b      	ldr	r3, [r7, #0]
 800ad80:	78db      	ldrb	r3, [r3, #3]
 800ad82:	2b03      	cmp	r3, #3
 800ad84:	d81f      	bhi.n	800adc6 <USB_ActivateEndpoint+0x72>
 800ad86:	a201      	add	r2, pc, #4	; (adr r2, 800ad8c <USB_ActivateEndpoint+0x38>)
 800ad88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad8c:	0800ad9d 	.word	0x0800ad9d
 800ad90:	0800adb9 	.word	0x0800adb9
 800ad94:	0800adcf 	.word	0x0800adcf
 800ad98:	0800adab 	.word	0x0800adab
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800ad9c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800ada0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800ada4:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800ada8:	e012      	b.n	800add0 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800adaa:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800adae:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800adb2:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800adb6:	e00b      	b.n	800add0 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800adb8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800adbc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800adc0:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800adc4:	e004      	b.n	800add0 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800adc6:	2301      	movs	r3, #1
 800adc8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 800adcc:	e000      	b.n	800add0 <USB_ActivateEndpoint+0x7c>
      break;
 800adce:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800add0:	687a      	ldr	r2, [r7, #4]
 800add2:	683b      	ldr	r3, [r7, #0]
 800add4:	781b      	ldrb	r3, [r3, #0]
 800add6:	009b      	lsls	r3, r3, #2
 800add8:	441a      	add	r2, r3
 800adda:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800adde:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ade2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ade6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800adea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800adee:	b29b      	uxth	r3, r3
 800adf0:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800adf2:	687a      	ldr	r2, [r7, #4]
 800adf4:	683b      	ldr	r3, [r7, #0]
 800adf6:	781b      	ldrb	r3, [r3, #0]
 800adf8:	009b      	lsls	r3, r3, #2
 800adfa:	4413      	add	r3, r2
 800adfc:	881b      	ldrh	r3, [r3, #0]
 800adfe:	b29b      	uxth	r3, r3
 800ae00:	b21b      	sxth	r3, r3
 800ae02:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ae06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ae0a:	b21a      	sxth	r2, r3
 800ae0c:	683b      	ldr	r3, [r7, #0]
 800ae0e:	781b      	ldrb	r3, [r3, #0]
 800ae10:	b21b      	sxth	r3, r3
 800ae12:	4313      	orrs	r3, r2
 800ae14:	b21b      	sxth	r3, r3
 800ae16:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 800ae1a:	687a      	ldr	r2, [r7, #4]
 800ae1c:	683b      	ldr	r3, [r7, #0]
 800ae1e:	781b      	ldrb	r3, [r3, #0]
 800ae20:	009b      	lsls	r3, r3, #2
 800ae22:	441a      	add	r2, r3
 800ae24:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800ae28:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ae2c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ae30:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ae34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ae38:	b29b      	uxth	r3, r3
 800ae3a:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800ae3c:	683b      	ldr	r3, [r7, #0]
 800ae3e:	7b1b      	ldrb	r3, [r3, #12]
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	f040 8149 	bne.w	800b0d8 <USB_ActivateEndpoint+0x384>
  {
    if (ep->is_in != 0U)
 800ae46:	683b      	ldr	r3, [r7, #0]
 800ae48:	785b      	ldrb	r3, [r3, #1]
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	f000 8084 	beq.w	800af58 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	61bb      	str	r3, [r7, #24]
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ae5a:	b29b      	uxth	r3, r3
 800ae5c:	461a      	mov	r2, r3
 800ae5e:	69bb      	ldr	r3, [r7, #24]
 800ae60:	4413      	add	r3, r2
 800ae62:	61bb      	str	r3, [r7, #24]
 800ae64:	683b      	ldr	r3, [r7, #0]
 800ae66:	781b      	ldrb	r3, [r3, #0]
 800ae68:	00da      	lsls	r2, r3, #3
 800ae6a:	69bb      	ldr	r3, [r7, #24]
 800ae6c:	4413      	add	r3, r2
 800ae6e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ae72:	617b      	str	r3, [r7, #20]
 800ae74:	683b      	ldr	r3, [r7, #0]
 800ae76:	88db      	ldrh	r3, [r3, #6]
 800ae78:	085b      	lsrs	r3, r3, #1
 800ae7a:	b29b      	uxth	r3, r3
 800ae7c:	005b      	lsls	r3, r3, #1
 800ae7e:	b29a      	uxth	r2, r3
 800ae80:	697b      	ldr	r3, [r7, #20]
 800ae82:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800ae84:	687a      	ldr	r2, [r7, #4]
 800ae86:	683b      	ldr	r3, [r7, #0]
 800ae88:	781b      	ldrb	r3, [r3, #0]
 800ae8a:	009b      	lsls	r3, r3, #2
 800ae8c:	4413      	add	r3, r2
 800ae8e:	881b      	ldrh	r3, [r3, #0]
 800ae90:	827b      	strh	r3, [r7, #18]
 800ae92:	8a7b      	ldrh	r3, [r7, #18]
 800ae94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	d01b      	beq.n	800aed4 <USB_ActivateEndpoint+0x180>
 800ae9c:	687a      	ldr	r2, [r7, #4]
 800ae9e:	683b      	ldr	r3, [r7, #0]
 800aea0:	781b      	ldrb	r3, [r3, #0]
 800aea2:	009b      	lsls	r3, r3, #2
 800aea4:	4413      	add	r3, r2
 800aea6:	881b      	ldrh	r3, [r3, #0]
 800aea8:	b29b      	uxth	r3, r3
 800aeaa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800aeae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aeb2:	823b      	strh	r3, [r7, #16]
 800aeb4:	687a      	ldr	r2, [r7, #4]
 800aeb6:	683b      	ldr	r3, [r7, #0]
 800aeb8:	781b      	ldrb	r3, [r3, #0]
 800aeba:	009b      	lsls	r3, r3, #2
 800aebc:	441a      	add	r2, r3
 800aebe:	8a3b      	ldrh	r3, [r7, #16]
 800aec0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800aec4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800aec8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800aecc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800aed0:	b29b      	uxth	r3, r3
 800aed2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800aed4:	683b      	ldr	r3, [r7, #0]
 800aed6:	78db      	ldrb	r3, [r3, #3]
 800aed8:	2b01      	cmp	r3, #1
 800aeda:	d020      	beq.n	800af1e <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800aedc:	687a      	ldr	r2, [r7, #4]
 800aede:	683b      	ldr	r3, [r7, #0]
 800aee0:	781b      	ldrb	r3, [r3, #0]
 800aee2:	009b      	lsls	r3, r3, #2
 800aee4:	4413      	add	r3, r2
 800aee6:	881b      	ldrh	r3, [r3, #0]
 800aee8:	b29b      	uxth	r3, r3
 800aeea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800aeee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800aef2:	81bb      	strh	r3, [r7, #12]
 800aef4:	89bb      	ldrh	r3, [r7, #12]
 800aef6:	f083 0320 	eor.w	r3, r3, #32
 800aefa:	81bb      	strh	r3, [r7, #12]
 800aefc:	687a      	ldr	r2, [r7, #4]
 800aefe:	683b      	ldr	r3, [r7, #0]
 800af00:	781b      	ldrb	r3, [r3, #0]
 800af02:	009b      	lsls	r3, r3, #2
 800af04:	441a      	add	r2, r3
 800af06:	89bb      	ldrh	r3, [r7, #12]
 800af08:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800af0c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800af10:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800af14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800af18:	b29b      	uxth	r3, r3
 800af1a:	8013      	strh	r3, [r2, #0]
 800af1c:	e2a6      	b.n	800b46c <USB_ActivateEndpoint+0x718>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800af1e:	687a      	ldr	r2, [r7, #4]
 800af20:	683b      	ldr	r3, [r7, #0]
 800af22:	781b      	ldrb	r3, [r3, #0]
 800af24:	009b      	lsls	r3, r3, #2
 800af26:	4413      	add	r3, r2
 800af28:	881b      	ldrh	r3, [r3, #0]
 800af2a:	b29b      	uxth	r3, r3
 800af2c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800af30:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800af34:	81fb      	strh	r3, [r7, #14]
 800af36:	687a      	ldr	r2, [r7, #4]
 800af38:	683b      	ldr	r3, [r7, #0]
 800af3a:	781b      	ldrb	r3, [r3, #0]
 800af3c:	009b      	lsls	r3, r3, #2
 800af3e:	441a      	add	r2, r3
 800af40:	89fb      	ldrh	r3, [r7, #14]
 800af42:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800af46:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800af4a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800af4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800af52:	b29b      	uxth	r3, r3
 800af54:	8013      	strh	r3, [r2, #0]
 800af56:	e289      	b.n	800b46c <USB_ActivateEndpoint+0x718>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	633b      	str	r3, [r7, #48]	; 0x30
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800af62:	b29b      	uxth	r3, r3
 800af64:	461a      	mov	r2, r3
 800af66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af68:	4413      	add	r3, r2
 800af6a:	633b      	str	r3, [r7, #48]	; 0x30
 800af6c:	683b      	ldr	r3, [r7, #0]
 800af6e:	781b      	ldrb	r3, [r3, #0]
 800af70:	00da      	lsls	r2, r3, #3
 800af72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af74:	4413      	add	r3, r2
 800af76:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800af7a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800af7c:	683b      	ldr	r3, [r7, #0]
 800af7e:	88db      	ldrh	r3, [r3, #6]
 800af80:	085b      	lsrs	r3, r3, #1
 800af82:	b29b      	uxth	r3, r3
 800af84:	005b      	lsls	r3, r3, #1
 800af86:	b29a      	uxth	r2, r3
 800af88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af8a:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	62bb      	str	r3, [r7, #40]	; 0x28
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800af96:	b29b      	uxth	r3, r3
 800af98:	461a      	mov	r2, r3
 800af9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af9c:	4413      	add	r3, r2
 800af9e:	62bb      	str	r3, [r7, #40]	; 0x28
 800afa0:	683b      	ldr	r3, [r7, #0]
 800afa2:	781b      	ldrb	r3, [r3, #0]
 800afa4:	00da      	lsls	r2, r3, #3
 800afa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afa8:	4413      	add	r3, r2
 800afaa:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800afae:	627b      	str	r3, [r7, #36]	; 0x24
 800afb0:	683b      	ldr	r3, [r7, #0]
 800afb2:	691b      	ldr	r3, [r3, #16]
 800afb4:	2b3e      	cmp	r3, #62	; 0x3e
 800afb6:	d918      	bls.n	800afea <USB_ActivateEndpoint+0x296>
 800afb8:	683b      	ldr	r3, [r7, #0]
 800afba:	691b      	ldr	r3, [r3, #16]
 800afbc:	095b      	lsrs	r3, r3, #5
 800afbe:	66bb      	str	r3, [r7, #104]	; 0x68
 800afc0:	683b      	ldr	r3, [r7, #0]
 800afc2:	691b      	ldr	r3, [r3, #16]
 800afc4:	f003 031f 	and.w	r3, r3, #31
 800afc8:	2b00      	cmp	r3, #0
 800afca:	d102      	bne.n	800afd2 <USB_ActivateEndpoint+0x27e>
 800afcc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800afce:	3b01      	subs	r3, #1
 800afd0:	66bb      	str	r3, [r7, #104]	; 0x68
 800afd2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800afd4:	b29b      	uxth	r3, r3
 800afd6:	029b      	lsls	r3, r3, #10
 800afd8:	b29b      	uxth	r3, r3
 800afda:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800afde:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800afe2:	b29a      	uxth	r2, r3
 800afe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afe6:	801a      	strh	r2, [r3, #0]
 800afe8:	e029      	b.n	800b03e <USB_ActivateEndpoint+0x2ea>
 800afea:	683b      	ldr	r3, [r7, #0]
 800afec:	691b      	ldr	r3, [r3, #16]
 800afee:	2b00      	cmp	r3, #0
 800aff0:	d112      	bne.n	800b018 <USB_ActivateEndpoint+0x2c4>
 800aff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aff4:	881b      	ldrh	r3, [r3, #0]
 800aff6:	b29b      	uxth	r3, r3
 800aff8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800affc:	b29a      	uxth	r2, r3
 800affe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b000:	801a      	strh	r2, [r3, #0]
 800b002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b004:	881b      	ldrh	r3, [r3, #0]
 800b006:	b29b      	uxth	r3, r3
 800b008:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b00c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b010:	b29a      	uxth	r2, r3
 800b012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b014:	801a      	strh	r2, [r3, #0]
 800b016:	e012      	b.n	800b03e <USB_ActivateEndpoint+0x2ea>
 800b018:	683b      	ldr	r3, [r7, #0]
 800b01a:	691b      	ldr	r3, [r3, #16]
 800b01c:	085b      	lsrs	r3, r3, #1
 800b01e:	66bb      	str	r3, [r7, #104]	; 0x68
 800b020:	683b      	ldr	r3, [r7, #0]
 800b022:	691b      	ldr	r3, [r3, #16]
 800b024:	f003 0301 	and.w	r3, r3, #1
 800b028:	2b00      	cmp	r3, #0
 800b02a:	d002      	beq.n	800b032 <USB_ActivateEndpoint+0x2de>
 800b02c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b02e:	3301      	adds	r3, #1
 800b030:	66bb      	str	r3, [r7, #104]	; 0x68
 800b032:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b034:	b29b      	uxth	r3, r3
 800b036:	029b      	lsls	r3, r3, #10
 800b038:	b29a      	uxth	r2, r3
 800b03a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b03c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800b03e:	687a      	ldr	r2, [r7, #4]
 800b040:	683b      	ldr	r3, [r7, #0]
 800b042:	781b      	ldrb	r3, [r3, #0]
 800b044:	009b      	lsls	r3, r3, #2
 800b046:	4413      	add	r3, r2
 800b048:	881b      	ldrh	r3, [r3, #0]
 800b04a:	847b      	strh	r3, [r7, #34]	; 0x22
 800b04c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b04e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b052:	2b00      	cmp	r3, #0
 800b054:	d01b      	beq.n	800b08e <USB_ActivateEndpoint+0x33a>
 800b056:	687a      	ldr	r2, [r7, #4]
 800b058:	683b      	ldr	r3, [r7, #0]
 800b05a:	781b      	ldrb	r3, [r3, #0]
 800b05c:	009b      	lsls	r3, r3, #2
 800b05e:	4413      	add	r3, r2
 800b060:	881b      	ldrh	r3, [r3, #0]
 800b062:	b29b      	uxth	r3, r3
 800b064:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b068:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b06c:	843b      	strh	r3, [r7, #32]
 800b06e:	687a      	ldr	r2, [r7, #4]
 800b070:	683b      	ldr	r3, [r7, #0]
 800b072:	781b      	ldrb	r3, [r3, #0]
 800b074:	009b      	lsls	r3, r3, #2
 800b076:	441a      	add	r2, r3
 800b078:	8c3b      	ldrh	r3, [r7, #32]
 800b07a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b07e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b082:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800b086:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b08a:	b29b      	uxth	r3, r3
 800b08c:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800b08e:	687a      	ldr	r2, [r7, #4]
 800b090:	683b      	ldr	r3, [r7, #0]
 800b092:	781b      	ldrb	r3, [r3, #0]
 800b094:	009b      	lsls	r3, r3, #2
 800b096:	4413      	add	r3, r2
 800b098:	881b      	ldrh	r3, [r3, #0]
 800b09a:	b29b      	uxth	r3, r3
 800b09c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b0a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b0a4:	83fb      	strh	r3, [r7, #30]
 800b0a6:	8bfb      	ldrh	r3, [r7, #30]
 800b0a8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800b0ac:	83fb      	strh	r3, [r7, #30]
 800b0ae:	8bfb      	ldrh	r3, [r7, #30]
 800b0b0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800b0b4:	83fb      	strh	r3, [r7, #30]
 800b0b6:	687a      	ldr	r2, [r7, #4]
 800b0b8:	683b      	ldr	r3, [r7, #0]
 800b0ba:	781b      	ldrb	r3, [r3, #0]
 800b0bc:	009b      	lsls	r3, r3, #2
 800b0be:	441a      	add	r2, r3
 800b0c0:	8bfb      	ldrh	r3, [r7, #30]
 800b0c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b0c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b0ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b0ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b0d2:	b29b      	uxth	r3, r3
 800b0d4:	8013      	strh	r3, [r2, #0]
 800b0d6:	e1c9      	b.n	800b46c <USB_ActivateEndpoint+0x718>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800b0d8:	683b      	ldr	r3, [r7, #0]
 800b0da:	78db      	ldrb	r3, [r3, #3]
 800b0dc:	2b02      	cmp	r3, #2
 800b0de:	d11e      	bne.n	800b11e <USB_ActivateEndpoint+0x3ca>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800b0e0:	687a      	ldr	r2, [r7, #4]
 800b0e2:	683b      	ldr	r3, [r7, #0]
 800b0e4:	781b      	ldrb	r3, [r3, #0]
 800b0e6:	009b      	lsls	r3, r3, #2
 800b0e8:	4413      	add	r3, r2
 800b0ea:	881b      	ldrh	r3, [r3, #0]
 800b0ec:	b29b      	uxth	r3, r3
 800b0ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b0f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b0f6:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800b0fa:	687a      	ldr	r2, [r7, #4]
 800b0fc:	683b      	ldr	r3, [r7, #0]
 800b0fe:	781b      	ldrb	r3, [r3, #0]
 800b100:	009b      	lsls	r3, r3, #2
 800b102:	441a      	add	r2, r3
 800b104:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800b108:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b10c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b110:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800b114:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b118:	b29b      	uxth	r3, r3
 800b11a:	8013      	strh	r3, [r2, #0]
 800b11c:	e01d      	b.n	800b15a <USB_ActivateEndpoint+0x406>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800b11e:	687a      	ldr	r2, [r7, #4]
 800b120:	683b      	ldr	r3, [r7, #0]
 800b122:	781b      	ldrb	r3, [r3, #0]
 800b124:	009b      	lsls	r3, r3, #2
 800b126:	4413      	add	r3, r2
 800b128:	881b      	ldrh	r3, [r3, #0]
 800b12a:	b29b      	uxth	r3, r3
 800b12c:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800b130:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b134:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 800b138:	687a      	ldr	r2, [r7, #4]
 800b13a:	683b      	ldr	r3, [r7, #0]
 800b13c:	781b      	ldrb	r3, [r3, #0]
 800b13e:	009b      	lsls	r3, r3, #2
 800b140:	441a      	add	r2, r3
 800b142:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800b146:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b14a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b14e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b152:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b156:	b29b      	uxth	r3, r3
 800b158:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b164:	b29b      	uxth	r3, r3
 800b166:	461a      	mov	r2, r3
 800b168:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b16a:	4413      	add	r3, r2
 800b16c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b16e:	683b      	ldr	r3, [r7, #0]
 800b170:	781b      	ldrb	r3, [r3, #0]
 800b172:	00da      	lsls	r2, r3, #3
 800b174:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b176:	4413      	add	r3, r2
 800b178:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b17c:	65bb      	str	r3, [r7, #88]	; 0x58
 800b17e:	683b      	ldr	r3, [r7, #0]
 800b180:	891b      	ldrh	r3, [r3, #8]
 800b182:	085b      	lsrs	r3, r3, #1
 800b184:	b29b      	uxth	r3, r3
 800b186:	005b      	lsls	r3, r3, #1
 800b188:	b29a      	uxth	r2, r3
 800b18a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b18c:	801a      	strh	r2, [r3, #0]
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	657b      	str	r3, [r7, #84]	; 0x54
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b198:	b29b      	uxth	r3, r3
 800b19a:	461a      	mov	r2, r3
 800b19c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b19e:	4413      	add	r3, r2
 800b1a0:	657b      	str	r3, [r7, #84]	; 0x54
 800b1a2:	683b      	ldr	r3, [r7, #0]
 800b1a4:	781b      	ldrb	r3, [r3, #0]
 800b1a6:	00da      	lsls	r2, r3, #3
 800b1a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b1aa:	4413      	add	r3, r2
 800b1ac:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800b1b0:	653b      	str	r3, [r7, #80]	; 0x50
 800b1b2:	683b      	ldr	r3, [r7, #0]
 800b1b4:	895b      	ldrh	r3, [r3, #10]
 800b1b6:	085b      	lsrs	r3, r3, #1
 800b1b8:	b29b      	uxth	r3, r3
 800b1ba:	005b      	lsls	r3, r3, #1
 800b1bc:	b29a      	uxth	r2, r3
 800b1be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b1c0:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800b1c2:	683b      	ldr	r3, [r7, #0]
 800b1c4:	785b      	ldrb	r3, [r3, #1]
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	f040 8093 	bne.w	800b2f2 <USB_ActivateEndpoint+0x59e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800b1cc:	687a      	ldr	r2, [r7, #4]
 800b1ce:	683b      	ldr	r3, [r7, #0]
 800b1d0:	781b      	ldrb	r3, [r3, #0]
 800b1d2:	009b      	lsls	r3, r3, #2
 800b1d4:	4413      	add	r3, r2
 800b1d6:	881b      	ldrh	r3, [r3, #0]
 800b1d8:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800b1dc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800b1e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b1e4:	2b00      	cmp	r3, #0
 800b1e6:	d01b      	beq.n	800b220 <USB_ActivateEndpoint+0x4cc>
 800b1e8:	687a      	ldr	r2, [r7, #4]
 800b1ea:	683b      	ldr	r3, [r7, #0]
 800b1ec:	781b      	ldrb	r3, [r3, #0]
 800b1ee:	009b      	lsls	r3, r3, #2
 800b1f0:	4413      	add	r3, r2
 800b1f2:	881b      	ldrh	r3, [r3, #0]
 800b1f4:	b29b      	uxth	r3, r3
 800b1f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b1fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b1fe:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800b200:	687a      	ldr	r2, [r7, #4]
 800b202:	683b      	ldr	r3, [r7, #0]
 800b204:	781b      	ldrb	r3, [r3, #0]
 800b206:	009b      	lsls	r3, r3, #2
 800b208:	441a      	add	r2, r3
 800b20a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800b20c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b210:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b214:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800b218:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b21c:	b29b      	uxth	r3, r3
 800b21e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b220:	687a      	ldr	r2, [r7, #4]
 800b222:	683b      	ldr	r3, [r7, #0]
 800b224:	781b      	ldrb	r3, [r3, #0]
 800b226:	009b      	lsls	r3, r3, #2
 800b228:	4413      	add	r3, r2
 800b22a:	881b      	ldrh	r3, [r3, #0]
 800b22c:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800b22e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800b230:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b234:	2b00      	cmp	r3, #0
 800b236:	d01b      	beq.n	800b270 <USB_ActivateEndpoint+0x51c>
 800b238:	687a      	ldr	r2, [r7, #4]
 800b23a:	683b      	ldr	r3, [r7, #0]
 800b23c:	781b      	ldrb	r3, [r3, #0]
 800b23e:	009b      	lsls	r3, r3, #2
 800b240:	4413      	add	r3, r2
 800b242:	881b      	ldrh	r3, [r3, #0]
 800b244:	b29b      	uxth	r3, r3
 800b246:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b24a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b24e:	877b      	strh	r3, [r7, #58]	; 0x3a
 800b250:	687a      	ldr	r2, [r7, #4]
 800b252:	683b      	ldr	r3, [r7, #0]
 800b254:	781b      	ldrb	r3, [r3, #0]
 800b256:	009b      	lsls	r3, r3, #2
 800b258:	441a      	add	r2, r3
 800b25a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800b25c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b260:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b264:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b268:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800b26c:	b29b      	uxth	r3, r3
 800b26e:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800b270:	687a      	ldr	r2, [r7, #4]
 800b272:	683b      	ldr	r3, [r7, #0]
 800b274:	781b      	ldrb	r3, [r3, #0]
 800b276:	009b      	lsls	r3, r3, #2
 800b278:	4413      	add	r3, r2
 800b27a:	881b      	ldrh	r3, [r3, #0]
 800b27c:	b29b      	uxth	r3, r3
 800b27e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b282:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b286:	873b      	strh	r3, [r7, #56]	; 0x38
 800b288:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800b28a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800b28e:	873b      	strh	r3, [r7, #56]	; 0x38
 800b290:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800b292:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800b296:	873b      	strh	r3, [r7, #56]	; 0x38
 800b298:	687a      	ldr	r2, [r7, #4]
 800b29a:	683b      	ldr	r3, [r7, #0]
 800b29c:	781b      	ldrb	r3, [r3, #0]
 800b29e:	009b      	lsls	r3, r3, #2
 800b2a0:	441a      	add	r2, r3
 800b2a2:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800b2a4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b2a8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b2ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b2b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b2b4:	b29b      	uxth	r3, r3
 800b2b6:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800b2b8:	687a      	ldr	r2, [r7, #4]
 800b2ba:	683b      	ldr	r3, [r7, #0]
 800b2bc:	781b      	ldrb	r3, [r3, #0]
 800b2be:	009b      	lsls	r3, r3, #2
 800b2c0:	4413      	add	r3, r2
 800b2c2:	881b      	ldrh	r3, [r3, #0]
 800b2c4:	b29b      	uxth	r3, r3
 800b2c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b2ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b2ce:	86fb      	strh	r3, [r7, #54]	; 0x36
 800b2d0:	687a      	ldr	r2, [r7, #4]
 800b2d2:	683b      	ldr	r3, [r7, #0]
 800b2d4:	781b      	ldrb	r3, [r3, #0]
 800b2d6:	009b      	lsls	r3, r3, #2
 800b2d8:	441a      	add	r2, r3
 800b2da:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800b2dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b2e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b2e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b2e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b2ec:	b29b      	uxth	r3, r3
 800b2ee:	8013      	strh	r3, [r2, #0]
 800b2f0:	e0bc      	b.n	800b46c <USB_ActivateEndpoint+0x718>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800b2f2:	687a      	ldr	r2, [r7, #4]
 800b2f4:	683b      	ldr	r3, [r7, #0]
 800b2f6:	781b      	ldrb	r3, [r3, #0]
 800b2f8:	009b      	lsls	r3, r3, #2
 800b2fa:	4413      	add	r3, r2
 800b2fc:	881b      	ldrh	r3, [r3, #0]
 800b2fe:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800b302:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800b306:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	d01d      	beq.n	800b34a <USB_ActivateEndpoint+0x5f6>
 800b30e:	687a      	ldr	r2, [r7, #4]
 800b310:	683b      	ldr	r3, [r7, #0]
 800b312:	781b      	ldrb	r3, [r3, #0]
 800b314:	009b      	lsls	r3, r3, #2
 800b316:	4413      	add	r3, r2
 800b318:	881b      	ldrh	r3, [r3, #0]
 800b31a:	b29b      	uxth	r3, r3
 800b31c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b320:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b324:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800b328:	687a      	ldr	r2, [r7, #4]
 800b32a:	683b      	ldr	r3, [r7, #0]
 800b32c:	781b      	ldrb	r3, [r3, #0]
 800b32e:	009b      	lsls	r3, r3, #2
 800b330:	441a      	add	r2, r3
 800b332:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800b336:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b33a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b33e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800b342:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b346:	b29b      	uxth	r3, r3
 800b348:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b34a:	687a      	ldr	r2, [r7, #4]
 800b34c:	683b      	ldr	r3, [r7, #0]
 800b34e:	781b      	ldrb	r3, [r3, #0]
 800b350:	009b      	lsls	r3, r3, #2
 800b352:	4413      	add	r3, r2
 800b354:	881b      	ldrh	r3, [r3, #0]
 800b356:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800b35a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800b35e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b362:	2b00      	cmp	r3, #0
 800b364:	d01d      	beq.n	800b3a2 <USB_ActivateEndpoint+0x64e>
 800b366:	687a      	ldr	r2, [r7, #4]
 800b368:	683b      	ldr	r3, [r7, #0]
 800b36a:	781b      	ldrb	r3, [r3, #0]
 800b36c:	009b      	lsls	r3, r3, #2
 800b36e:	4413      	add	r3, r2
 800b370:	881b      	ldrh	r3, [r3, #0]
 800b372:	b29b      	uxth	r3, r3
 800b374:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b378:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b37c:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800b380:	687a      	ldr	r2, [r7, #4]
 800b382:	683b      	ldr	r3, [r7, #0]
 800b384:	781b      	ldrb	r3, [r3, #0]
 800b386:	009b      	lsls	r3, r3, #2
 800b388:	441a      	add	r2, r3
 800b38a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800b38e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b392:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b396:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b39a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800b39e:	b29b      	uxth	r3, r3
 800b3a0:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800b3a2:	683b      	ldr	r3, [r7, #0]
 800b3a4:	78db      	ldrb	r3, [r3, #3]
 800b3a6:	2b01      	cmp	r3, #1
 800b3a8:	d024      	beq.n	800b3f4 <USB_ActivateEndpoint+0x6a0>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800b3aa:	687a      	ldr	r2, [r7, #4]
 800b3ac:	683b      	ldr	r3, [r7, #0]
 800b3ae:	781b      	ldrb	r3, [r3, #0]
 800b3b0:	009b      	lsls	r3, r3, #2
 800b3b2:	4413      	add	r3, r2
 800b3b4:	881b      	ldrh	r3, [r3, #0]
 800b3b6:	b29b      	uxth	r3, r3
 800b3b8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b3bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b3c0:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800b3c4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800b3c8:	f083 0320 	eor.w	r3, r3, #32
 800b3cc:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800b3d0:	687a      	ldr	r2, [r7, #4]
 800b3d2:	683b      	ldr	r3, [r7, #0]
 800b3d4:	781b      	ldrb	r3, [r3, #0]
 800b3d6:	009b      	lsls	r3, r3, #2
 800b3d8:	441a      	add	r2, r3
 800b3da:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800b3de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b3e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b3e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b3ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b3ee:	b29b      	uxth	r3, r3
 800b3f0:	8013      	strh	r3, [r2, #0]
 800b3f2:	e01d      	b.n	800b430 <USB_ActivateEndpoint+0x6dc>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800b3f4:	687a      	ldr	r2, [r7, #4]
 800b3f6:	683b      	ldr	r3, [r7, #0]
 800b3f8:	781b      	ldrb	r3, [r3, #0]
 800b3fa:	009b      	lsls	r3, r3, #2
 800b3fc:	4413      	add	r3, r2
 800b3fe:	881b      	ldrh	r3, [r3, #0]
 800b400:	b29b      	uxth	r3, r3
 800b402:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b406:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b40a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800b40e:	687a      	ldr	r2, [r7, #4]
 800b410:	683b      	ldr	r3, [r7, #0]
 800b412:	781b      	ldrb	r3, [r3, #0]
 800b414:	009b      	lsls	r3, r3, #2
 800b416:	441a      	add	r2, r3
 800b418:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800b41c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b420:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b424:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b428:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b42c:	b29b      	uxth	r3, r3
 800b42e:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800b430:	687a      	ldr	r2, [r7, #4]
 800b432:	683b      	ldr	r3, [r7, #0]
 800b434:	781b      	ldrb	r3, [r3, #0]
 800b436:	009b      	lsls	r3, r3, #2
 800b438:	4413      	add	r3, r2
 800b43a:	881b      	ldrh	r3, [r3, #0]
 800b43c:	b29b      	uxth	r3, r3
 800b43e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b442:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b446:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800b44a:	687a      	ldr	r2, [r7, #4]
 800b44c:	683b      	ldr	r3, [r7, #0]
 800b44e:	781b      	ldrb	r3, [r3, #0]
 800b450:	009b      	lsls	r3, r3, #2
 800b452:	441a      	add	r2, r3
 800b454:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800b458:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b45c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b460:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b464:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b468:	b29b      	uxth	r3, r3
 800b46a:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800b46c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 800b470:	4618      	mov	r0, r3
 800b472:	3774      	adds	r7, #116	; 0x74
 800b474:	46bd      	mov	sp, r7
 800b476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b47a:	4770      	bx	lr

0800b47c <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800b47c:	b480      	push	{r7}
 800b47e:	b08d      	sub	sp, #52	; 0x34
 800b480:	af00      	add	r7, sp, #0
 800b482:	6078      	str	r0, [r7, #4]
 800b484:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800b486:	683b      	ldr	r3, [r7, #0]
 800b488:	7b1b      	ldrb	r3, [r3, #12]
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	f040 808e 	bne.w	800b5ac <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800b490:	683b      	ldr	r3, [r7, #0]
 800b492:	785b      	ldrb	r3, [r3, #1]
 800b494:	2b00      	cmp	r3, #0
 800b496:	d044      	beq.n	800b522 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b498:	687a      	ldr	r2, [r7, #4]
 800b49a:	683b      	ldr	r3, [r7, #0]
 800b49c:	781b      	ldrb	r3, [r3, #0]
 800b49e:	009b      	lsls	r3, r3, #2
 800b4a0:	4413      	add	r3, r2
 800b4a2:	881b      	ldrh	r3, [r3, #0]
 800b4a4:	81bb      	strh	r3, [r7, #12]
 800b4a6:	89bb      	ldrh	r3, [r7, #12]
 800b4a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	d01b      	beq.n	800b4e8 <USB_DeactivateEndpoint+0x6c>
 800b4b0:	687a      	ldr	r2, [r7, #4]
 800b4b2:	683b      	ldr	r3, [r7, #0]
 800b4b4:	781b      	ldrb	r3, [r3, #0]
 800b4b6:	009b      	lsls	r3, r3, #2
 800b4b8:	4413      	add	r3, r2
 800b4ba:	881b      	ldrh	r3, [r3, #0]
 800b4bc:	b29b      	uxth	r3, r3
 800b4be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b4c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b4c6:	817b      	strh	r3, [r7, #10]
 800b4c8:	687a      	ldr	r2, [r7, #4]
 800b4ca:	683b      	ldr	r3, [r7, #0]
 800b4cc:	781b      	ldrb	r3, [r3, #0]
 800b4ce:	009b      	lsls	r3, r3, #2
 800b4d0:	441a      	add	r2, r3
 800b4d2:	897b      	ldrh	r3, [r7, #10]
 800b4d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b4d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b4dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b4e0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800b4e4:	b29b      	uxth	r3, r3
 800b4e6:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800b4e8:	687a      	ldr	r2, [r7, #4]
 800b4ea:	683b      	ldr	r3, [r7, #0]
 800b4ec:	781b      	ldrb	r3, [r3, #0]
 800b4ee:	009b      	lsls	r3, r3, #2
 800b4f0:	4413      	add	r3, r2
 800b4f2:	881b      	ldrh	r3, [r3, #0]
 800b4f4:	b29b      	uxth	r3, r3
 800b4f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b4fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b4fe:	813b      	strh	r3, [r7, #8]
 800b500:	687a      	ldr	r2, [r7, #4]
 800b502:	683b      	ldr	r3, [r7, #0]
 800b504:	781b      	ldrb	r3, [r3, #0]
 800b506:	009b      	lsls	r3, r3, #2
 800b508:	441a      	add	r2, r3
 800b50a:	893b      	ldrh	r3, [r7, #8]
 800b50c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b510:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b514:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b518:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b51c:	b29b      	uxth	r3, r3
 800b51e:	8013      	strh	r3, [r2, #0]
 800b520:	e192      	b.n	800b848 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800b522:	687a      	ldr	r2, [r7, #4]
 800b524:	683b      	ldr	r3, [r7, #0]
 800b526:	781b      	ldrb	r3, [r3, #0]
 800b528:	009b      	lsls	r3, r3, #2
 800b52a:	4413      	add	r3, r2
 800b52c:	881b      	ldrh	r3, [r3, #0]
 800b52e:	827b      	strh	r3, [r7, #18]
 800b530:	8a7b      	ldrh	r3, [r7, #18]
 800b532:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b536:	2b00      	cmp	r3, #0
 800b538:	d01b      	beq.n	800b572 <USB_DeactivateEndpoint+0xf6>
 800b53a:	687a      	ldr	r2, [r7, #4]
 800b53c:	683b      	ldr	r3, [r7, #0]
 800b53e:	781b      	ldrb	r3, [r3, #0]
 800b540:	009b      	lsls	r3, r3, #2
 800b542:	4413      	add	r3, r2
 800b544:	881b      	ldrh	r3, [r3, #0]
 800b546:	b29b      	uxth	r3, r3
 800b548:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b54c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b550:	823b      	strh	r3, [r7, #16]
 800b552:	687a      	ldr	r2, [r7, #4]
 800b554:	683b      	ldr	r3, [r7, #0]
 800b556:	781b      	ldrb	r3, [r3, #0]
 800b558:	009b      	lsls	r3, r3, #2
 800b55a:	441a      	add	r2, r3
 800b55c:	8a3b      	ldrh	r3, [r7, #16]
 800b55e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b562:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b566:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800b56a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b56e:	b29b      	uxth	r3, r3
 800b570:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800b572:	687a      	ldr	r2, [r7, #4]
 800b574:	683b      	ldr	r3, [r7, #0]
 800b576:	781b      	ldrb	r3, [r3, #0]
 800b578:	009b      	lsls	r3, r3, #2
 800b57a:	4413      	add	r3, r2
 800b57c:	881b      	ldrh	r3, [r3, #0]
 800b57e:	b29b      	uxth	r3, r3
 800b580:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b584:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b588:	81fb      	strh	r3, [r7, #14]
 800b58a:	687a      	ldr	r2, [r7, #4]
 800b58c:	683b      	ldr	r3, [r7, #0]
 800b58e:	781b      	ldrb	r3, [r3, #0]
 800b590:	009b      	lsls	r3, r3, #2
 800b592:	441a      	add	r2, r3
 800b594:	89fb      	ldrh	r3, [r7, #14]
 800b596:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b59a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b59e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b5a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b5a6:	b29b      	uxth	r3, r3
 800b5a8:	8013      	strh	r3, [r2, #0]
 800b5aa:	e14d      	b.n	800b848 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800b5ac:	683b      	ldr	r3, [r7, #0]
 800b5ae:	785b      	ldrb	r3, [r3, #1]
 800b5b0:	2b00      	cmp	r3, #0
 800b5b2:	f040 80a5 	bne.w	800b700 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800b5b6:	687a      	ldr	r2, [r7, #4]
 800b5b8:	683b      	ldr	r3, [r7, #0]
 800b5ba:	781b      	ldrb	r3, [r3, #0]
 800b5bc:	009b      	lsls	r3, r3, #2
 800b5be:	4413      	add	r3, r2
 800b5c0:	881b      	ldrh	r3, [r3, #0]
 800b5c2:	843b      	strh	r3, [r7, #32]
 800b5c4:	8c3b      	ldrh	r3, [r7, #32]
 800b5c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	d01b      	beq.n	800b606 <USB_DeactivateEndpoint+0x18a>
 800b5ce:	687a      	ldr	r2, [r7, #4]
 800b5d0:	683b      	ldr	r3, [r7, #0]
 800b5d2:	781b      	ldrb	r3, [r3, #0]
 800b5d4:	009b      	lsls	r3, r3, #2
 800b5d6:	4413      	add	r3, r2
 800b5d8:	881b      	ldrh	r3, [r3, #0]
 800b5da:	b29b      	uxth	r3, r3
 800b5dc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b5e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b5e4:	83fb      	strh	r3, [r7, #30]
 800b5e6:	687a      	ldr	r2, [r7, #4]
 800b5e8:	683b      	ldr	r3, [r7, #0]
 800b5ea:	781b      	ldrb	r3, [r3, #0]
 800b5ec:	009b      	lsls	r3, r3, #2
 800b5ee:	441a      	add	r2, r3
 800b5f0:	8bfb      	ldrh	r3, [r7, #30]
 800b5f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b5f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b5fa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800b5fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b602:	b29b      	uxth	r3, r3
 800b604:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b606:	687a      	ldr	r2, [r7, #4]
 800b608:	683b      	ldr	r3, [r7, #0]
 800b60a:	781b      	ldrb	r3, [r3, #0]
 800b60c:	009b      	lsls	r3, r3, #2
 800b60e:	4413      	add	r3, r2
 800b610:	881b      	ldrh	r3, [r3, #0]
 800b612:	83bb      	strh	r3, [r7, #28]
 800b614:	8bbb      	ldrh	r3, [r7, #28]
 800b616:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b61a:	2b00      	cmp	r3, #0
 800b61c:	d01b      	beq.n	800b656 <USB_DeactivateEndpoint+0x1da>
 800b61e:	687a      	ldr	r2, [r7, #4]
 800b620:	683b      	ldr	r3, [r7, #0]
 800b622:	781b      	ldrb	r3, [r3, #0]
 800b624:	009b      	lsls	r3, r3, #2
 800b626:	4413      	add	r3, r2
 800b628:	881b      	ldrh	r3, [r3, #0]
 800b62a:	b29b      	uxth	r3, r3
 800b62c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b630:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b634:	837b      	strh	r3, [r7, #26]
 800b636:	687a      	ldr	r2, [r7, #4]
 800b638:	683b      	ldr	r3, [r7, #0]
 800b63a:	781b      	ldrb	r3, [r3, #0]
 800b63c:	009b      	lsls	r3, r3, #2
 800b63e:	441a      	add	r2, r3
 800b640:	8b7b      	ldrh	r3, [r7, #26]
 800b642:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b646:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b64a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b64e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800b652:	b29b      	uxth	r3, r3
 800b654:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800b656:	687a      	ldr	r2, [r7, #4]
 800b658:	683b      	ldr	r3, [r7, #0]
 800b65a:	781b      	ldrb	r3, [r3, #0]
 800b65c:	009b      	lsls	r3, r3, #2
 800b65e:	4413      	add	r3, r2
 800b660:	881b      	ldrh	r3, [r3, #0]
 800b662:	b29b      	uxth	r3, r3
 800b664:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b668:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b66c:	833b      	strh	r3, [r7, #24]
 800b66e:	687a      	ldr	r2, [r7, #4]
 800b670:	683b      	ldr	r3, [r7, #0]
 800b672:	781b      	ldrb	r3, [r3, #0]
 800b674:	009b      	lsls	r3, r3, #2
 800b676:	441a      	add	r2, r3
 800b678:	8b3b      	ldrh	r3, [r7, #24]
 800b67a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b67e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b682:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b686:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800b68a:	b29b      	uxth	r3, r3
 800b68c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800b68e:	687a      	ldr	r2, [r7, #4]
 800b690:	683b      	ldr	r3, [r7, #0]
 800b692:	781b      	ldrb	r3, [r3, #0]
 800b694:	009b      	lsls	r3, r3, #2
 800b696:	4413      	add	r3, r2
 800b698:	881b      	ldrh	r3, [r3, #0]
 800b69a:	b29b      	uxth	r3, r3
 800b69c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b6a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b6a4:	82fb      	strh	r3, [r7, #22]
 800b6a6:	687a      	ldr	r2, [r7, #4]
 800b6a8:	683b      	ldr	r3, [r7, #0]
 800b6aa:	781b      	ldrb	r3, [r3, #0]
 800b6ac:	009b      	lsls	r3, r3, #2
 800b6ae:	441a      	add	r2, r3
 800b6b0:	8afb      	ldrh	r3, [r7, #22]
 800b6b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b6b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b6ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b6be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b6c2:	b29b      	uxth	r3, r3
 800b6c4:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800b6c6:	687a      	ldr	r2, [r7, #4]
 800b6c8:	683b      	ldr	r3, [r7, #0]
 800b6ca:	781b      	ldrb	r3, [r3, #0]
 800b6cc:	009b      	lsls	r3, r3, #2
 800b6ce:	4413      	add	r3, r2
 800b6d0:	881b      	ldrh	r3, [r3, #0]
 800b6d2:	b29b      	uxth	r3, r3
 800b6d4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b6d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b6dc:	82bb      	strh	r3, [r7, #20]
 800b6de:	687a      	ldr	r2, [r7, #4]
 800b6e0:	683b      	ldr	r3, [r7, #0]
 800b6e2:	781b      	ldrb	r3, [r3, #0]
 800b6e4:	009b      	lsls	r3, r3, #2
 800b6e6:	441a      	add	r2, r3
 800b6e8:	8abb      	ldrh	r3, [r7, #20]
 800b6ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b6ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b6f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b6f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b6fa:	b29b      	uxth	r3, r3
 800b6fc:	8013      	strh	r3, [r2, #0]
 800b6fe:	e0a3      	b.n	800b848 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800b700:	687a      	ldr	r2, [r7, #4]
 800b702:	683b      	ldr	r3, [r7, #0]
 800b704:	781b      	ldrb	r3, [r3, #0]
 800b706:	009b      	lsls	r3, r3, #2
 800b708:	4413      	add	r3, r2
 800b70a:	881b      	ldrh	r3, [r3, #0]
 800b70c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800b70e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b710:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b714:	2b00      	cmp	r3, #0
 800b716:	d01b      	beq.n	800b750 <USB_DeactivateEndpoint+0x2d4>
 800b718:	687a      	ldr	r2, [r7, #4]
 800b71a:	683b      	ldr	r3, [r7, #0]
 800b71c:	781b      	ldrb	r3, [r3, #0]
 800b71e:	009b      	lsls	r3, r3, #2
 800b720:	4413      	add	r3, r2
 800b722:	881b      	ldrh	r3, [r3, #0]
 800b724:	b29b      	uxth	r3, r3
 800b726:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b72a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b72e:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800b730:	687a      	ldr	r2, [r7, #4]
 800b732:	683b      	ldr	r3, [r7, #0]
 800b734:	781b      	ldrb	r3, [r3, #0]
 800b736:	009b      	lsls	r3, r3, #2
 800b738:	441a      	add	r2, r3
 800b73a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800b73c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b740:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b744:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800b748:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b74c:	b29b      	uxth	r3, r3
 800b74e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b750:	687a      	ldr	r2, [r7, #4]
 800b752:	683b      	ldr	r3, [r7, #0]
 800b754:	781b      	ldrb	r3, [r3, #0]
 800b756:	009b      	lsls	r3, r3, #2
 800b758:	4413      	add	r3, r2
 800b75a:	881b      	ldrh	r3, [r3, #0]
 800b75c:	857b      	strh	r3, [r7, #42]	; 0x2a
 800b75e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800b760:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b764:	2b00      	cmp	r3, #0
 800b766:	d01b      	beq.n	800b7a0 <USB_DeactivateEndpoint+0x324>
 800b768:	687a      	ldr	r2, [r7, #4]
 800b76a:	683b      	ldr	r3, [r7, #0]
 800b76c:	781b      	ldrb	r3, [r3, #0]
 800b76e:	009b      	lsls	r3, r3, #2
 800b770:	4413      	add	r3, r2
 800b772:	881b      	ldrh	r3, [r3, #0]
 800b774:	b29b      	uxth	r3, r3
 800b776:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b77a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b77e:	853b      	strh	r3, [r7, #40]	; 0x28
 800b780:	687a      	ldr	r2, [r7, #4]
 800b782:	683b      	ldr	r3, [r7, #0]
 800b784:	781b      	ldrb	r3, [r3, #0]
 800b786:	009b      	lsls	r3, r3, #2
 800b788:	441a      	add	r2, r3
 800b78a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800b78c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b790:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b794:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b798:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800b79c:	b29b      	uxth	r3, r3
 800b79e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800b7a0:	687a      	ldr	r2, [r7, #4]
 800b7a2:	683b      	ldr	r3, [r7, #0]
 800b7a4:	781b      	ldrb	r3, [r3, #0]
 800b7a6:	009b      	lsls	r3, r3, #2
 800b7a8:	4413      	add	r3, r2
 800b7aa:	881b      	ldrh	r3, [r3, #0]
 800b7ac:	b29b      	uxth	r3, r3
 800b7ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b7b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b7b6:	84fb      	strh	r3, [r7, #38]	; 0x26
 800b7b8:	687a      	ldr	r2, [r7, #4]
 800b7ba:	683b      	ldr	r3, [r7, #0]
 800b7bc:	781b      	ldrb	r3, [r3, #0]
 800b7be:	009b      	lsls	r3, r3, #2
 800b7c0:	441a      	add	r2, r3
 800b7c2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b7c4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b7c8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b7cc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800b7d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b7d4:	b29b      	uxth	r3, r3
 800b7d6:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800b7d8:	687a      	ldr	r2, [r7, #4]
 800b7da:	683b      	ldr	r3, [r7, #0]
 800b7dc:	781b      	ldrb	r3, [r3, #0]
 800b7de:	009b      	lsls	r3, r3, #2
 800b7e0:	4413      	add	r3, r2
 800b7e2:	881b      	ldrh	r3, [r3, #0]
 800b7e4:	b29b      	uxth	r3, r3
 800b7e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b7ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b7ee:	84bb      	strh	r3, [r7, #36]	; 0x24
 800b7f0:	687a      	ldr	r2, [r7, #4]
 800b7f2:	683b      	ldr	r3, [r7, #0]
 800b7f4:	781b      	ldrb	r3, [r3, #0]
 800b7f6:	009b      	lsls	r3, r3, #2
 800b7f8:	441a      	add	r2, r3
 800b7fa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b7fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b800:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b804:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b808:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b80c:	b29b      	uxth	r3, r3
 800b80e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800b810:	687a      	ldr	r2, [r7, #4]
 800b812:	683b      	ldr	r3, [r7, #0]
 800b814:	781b      	ldrb	r3, [r3, #0]
 800b816:	009b      	lsls	r3, r3, #2
 800b818:	4413      	add	r3, r2
 800b81a:	881b      	ldrh	r3, [r3, #0]
 800b81c:	b29b      	uxth	r3, r3
 800b81e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b822:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b826:	847b      	strh	r3, [r7, #34]	; 0x22
 800b828:	687a      	ldr	r2, [r7, #4]
 800b82a:	683b      	ldr	r3, [r7, #0]
 800b82c:	781b      	ldrb	r3, [r3, #0]
 800b82e:	009b      	lsls	r3, r3, #2
 800b830:	441a      	add	r2, r3
 800b832:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b834:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b838:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b83c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b840:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b844:	b29b      	uxth	r3, r3
 800b846:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800b848:	2300      	movs	r3, #0
}
 800b84a:	4618      	mov	r0, r3
 800b84c:	3734      	adds	r7, #52	; 0x34
 800b84e:	46bd      	mov	sp, r7
 800b850:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b854:	4770      	bx	lr

0800b856 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800b856:	b580      	push	{r7, lr}
 800b858:	b0c2      	sub	sp, #264	; 0x108
 800b85a:	af00      	add	r7, sp, #0
 800b85c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b860:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b864:	6018      	str	r0, [r3, #0]
 800b866:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b86a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b86e:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800b870:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b874:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b878:	681b      	ldr	r3, [r3, #0]
 800b87a:	785b      	ldrb	r3, [r3, #1]
 800b87c:	2b01      	cmp	r3, #1
 800b87e:	f040 867b 	bne.w	800c578 <USB_EPStartXfer+0xd22>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800b882:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b886:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b88a:	681b      	ldr	r3, [r3, #0]
 800b88c:	699a      	ldr	r2, [r3, #24]
 800b88e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b892:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b896:	681b      	ldr	r3, [r3, #0]
 800b898:	691b      	ldr	r3, [r3, #16]
 800b89a:	429a      	cmp	r2, r3
 800b89c:	d908      	bls.n	800b8b0 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 800b89e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b8a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b8a6:	681b      	ldr	r3, [r3, #0]
 800b8a8:	691b      	ldr	r3, [r3, #16]
 800b8aa:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800b8ae:	e007      	b.n	800b8c0 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800b8b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b8b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b8b8:	681b      	ldr	r3, [r3, #0]
 800b8ba:	699b      	ldr	r3, [r3, #24]
 800b8bc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800b8c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b8c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b8c8:	681b      	ldr	r3, [r3, #0]
 800b8ca:	7b1b      	ldrb	r3, [r3, #12]
 800b8cc:	2b00      	cmp	r3, #0
 800b8ce:	d13a      	bne.n	800b946 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800b8d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b8d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b8d8:	681b      	ldr	r3, [r3, #0]
 800b8da:	6959      	ldr	r1, [r3, #20]
 800b8dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b8e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b8e4:	681b      	ldr	r3, [r3, #0]
 800b8e6:	88da      	ldrh	r2, [r3, #6]
 800b8e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b8ec:	b29b      	uxth	r3, r3
 800b8ee:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800b8f2:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800b8f6:	6800      	ldr	r0, [r0, #0]
 800b8f8:	f001 fc1d 	bl	800d136 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800b8fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b900:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b904:	681b      	ldr	r3, [r3, #0]
 800b906:	613b      	str	r3, [r7, #16]
 800b908:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b90c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b910:	681b      	ldr	r3, [r3, #0]
 800b912:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b916:	b29b      	uxth	r3, r3
 800b918:	461a      	mov	r2, r3
 800b91a:	693b      	ldr	r3, [r7, #16]
 800b91c:	4413      	add	r3, r2
 800b91e:	613b      	str	r3, [r7, #16]
 800b920:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b924:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b928:	681b      	ldr	r3, [r3, #0]
 800b92a:	781b      	ldrb	r3, [r3, #0]
 800b92c:	00da      	lsls	r2, r3, #3
 800b92e:	693b      	ldr	r3, [r7, #16]
 800b930:	4413      	add	r3, r2
 800b932:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b936:	60fb      	str	r3, [r7, #12]
 800b938:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b93c:	b29a      	uxth	r2, r3
 800b93e:	68fb      	ldr	r3, [r7, #12]
 800b940:	801a      	strh	r2, [r3, #0]
 800b942:	f000 bde3 	b.w	800c50c <USB_EPStartXfer+0xcb6>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800b946:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b94a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b94e:	681b      	ldr	r3, [r3, #0]
 800b950:	78db      	ldrb	r3, [r3, #3]
 800b952:	2b02      	cmp	r3, #2
 800b954:	f040 843a 	bne.w	800c1cc <USB_EPStartXfer+0x976>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800b958:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b95c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b960:	681b      	ldr	r3, [r3, #0]
 800b962:	6a1a      	ldr	r2, [r3, #32]
 800b964:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b968:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b96c:	681b      	ldr	r3, [r3, #0]
 800b96e:	691b      	ldr	r3, [r3, #16]
 800b970:	429a      	cmp	r2, r3
 800b972:	f240 83b7 	bls.w	800c0e4 <USB_EPStartXfer+0x88e>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800b976:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b97a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b97e:	681a      	ldr	r2, [r3, #0]
 800b980:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b984:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b988:	681b      	ldr	r3, [r3, #0]
 800b98a:	781b      	ldrb	r3, [r3, #0]
 800b98c:	009b      	lsls	r3, r3, #2
 800b98e:	4413      	add	r3, r2
 800b990:	881b      	ldrh	r3, [r3, #0]
 800b992:	b29b      	uxth	r3, r3
 800b994:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b998:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b99c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800b9a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b9a4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b9a8:	681a      	ldr	r2, [r3, #0]
 800b9aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b9ae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b9b2:	681b      	ldr	r3, [r3, #0]
 800b9b4:	781b      	ldrb	r3, [r3, #0]
 800b9b6:	009b      	lsls	r3, r3, #2
 800b9b8:	441a      	add	r2, r3
 800b9ba:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800b9be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b9c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b9c6:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800b9ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b9ce:	b29b      	uxth	r3, r3
 800b9d0:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800b9d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b9d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b9da:	681b      	ldr	r3, [r3, #0]
 800b9dc:	6a1a      	ldr	r2, [r3, #32]
 800b9de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b9e2:	1ad2      	subs	r2, r2, r3
 800b9e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b9e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b9ec:	681b      	ldr	r3, [r3, #0]
 800b9ee:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800b9f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b9f4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b9f8:	681a      	ldr	r2, [r3, #0]
 800b9fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b9fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ba02:	681b      	ldr	r3, [r3, #0]
 800ba04:	781b      	ldrb	r3, [r3, #0]
 800ba06:	009b      	lsls	r3, r3, #2
 800ba08:	4413      	add	r3, r2
 800ba0a:	881b      	ldrh	r3, [r3, #0]
 800ba0c:	b29b      	uxth	r3, r3
 800ba0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ba12:	2b00      	cmp	r3, #0
 800ba14:	f000 81b3 	beq.w	800bd7e <USB_EPStartXfer+0x528>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800ba18:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ba1c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ba20:	681b      	ldr	r3, [r3, #0]
 800ba22:	633b      	str	r3, [r7, #48]	; 0x30
 800ba24:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ba28:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ba2c:	681b      	ldr	r3, [r3, #0]
 800ba2e:	785b      	ldrb	r3, [r3, #1]
 800ba30:	2b00      	cmp	r3, #0
 800ba32:	d16d      	bne.n	800bb10 <USB_EPStartXfer+0x2ba>
 800ba34:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ba38:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ba3c:	681b      	ldr	r3, [r3, #0]
 800ba3e:	62bb      	str	r3, [r7, #40]	; 0x28
 800ba40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ba44:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ba48:	681b      	ldr	r3, [r3, #0]
 800ba4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ba4e:	b29b      	uxth	r3, r3
 800ba50:	461a      	mov	r2, r3
 800ba52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba54:	4413      	add	r3, r2
 800ba56:	62bb      	str	r3, [r7, #40]	; 0x28
 800ba58:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ba5c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ba60:	681b      	ldr	r3, [r3, #0]
 800ba62:	781b      	ldrb	r3, [r3, #0]
 800ba64:	00da      	lsls	r2, r3, #3
 800ba66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba68:	4413      	add	r3, r2
 800ba6a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800ba6e:	627b      	str	r3, [r7, #36]	; 0x24
 800ba70:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba74:	2b3e      	cmp	r3, #62	; 0x3e
 800ba76:	d91c      	bls.n	800bab2 <USB_EPStartXfer+0x25c>
 800ba78:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba7c:	095b      	lsrs	r3, r3, #5
 800ba7e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800ba82:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba86:	f003 031f 	and.w	r3, r3, #31
 800ba8a:	2b00      	cmp	r3, #0
 800ba8c:	d104      	bne.n	800ba98 <USB_EPStartXfer+0x242>
 800ba8e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800ba92:	3b01      	subs	r3, #1
 800ba94:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800ba98:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800ba9c:	b29b      	uxth	r3, r3
 800ba9e:	029b      	lsls	r3, r3, #10
 800baa0:	b29b      	uxth	r3, r3
 800baa2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800baa6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800baaa:	b29a      	uxth	r2, r3
 800baac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800baae:	801a      	strh	r2, [r3, #0]
 800bab0:	e053      	b.n	800bb5a <USB_EPStartXfer+0x304>
 800bab2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bab6:	2b00      	cmp	r3, #0
 800bab8:	d112      	bne.n	800bae0 <USB_EPStartXfer+0x28a>
 800baba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800babc:	881b      	ldrh	r3, [r3, #0]
 800babe:	b29b      	uxth	r3, r3
 800bac0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800bac4:	b29a      	uxth	r2, r3
 800bac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bac8:	801a      	strh	r2, [r3, #0]
 800baca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bacc:	881b      	ldrh	r3, [r3, #0]
 800bace:	b29b      	uxth	r3, r3
 800bad0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bad4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bad8:	b29a      	uxth	r2, r3
 800bada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800badc:	801a      	strh	r2, [r3, #0]
 800bade:	e03c      	b.n	800bb5a <USB_EPStartXfer+0x304>
 800bae0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bae4:	085b      	lsrs	r3, r3, #1
 800bae6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800baea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800baee:	f003 0301 	and.w	r3, r3, #1
 800baf2:	2b00      	cmp	r3, #0
 800baf4:	d004      	beq.n	800bb00 <USB_EPStartXfer+0x2aa>
 800baf6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800bafa:	3301      	adds	r3, #1
 800bafc:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800bb00:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800bb04:	b29b      	uxth	r3, r3
 800bb06:	029b      	lsls	r3, r3, #10
 800bb08:	b29a      	uxth	r2, r3
 800bb0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb0c:	801a      	strh	r2, [r3, #0]
 800bb0e:	e024      	b.n	800bb5a <USB_EPStartXfer+0x304>
 800bb10:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bb14:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bb18:	681b      	ldr	r3, [r3, #0]
 800bb1a:	785b      	ldrb	r3, [r3, #1]
 800bb1c:	2b01      	cmp	r3, #1
 800bb1e:	d11c      	bne.n	800bb5a <USB_EPStartXfer+0x304>
 800bb20:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bb24:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bb28:	681b      	ldr	r3, [r3, #0]
 800bb2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bb2e:	b29b      	uxth	r3, r3
 800bb30:	461a      	mov	r2, r3
 800bb32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb34:	4413      	add	r3, r2
 800bb36:	633b      	str	r3, [r7, #48]	; 0x30
 800bb38:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bb3c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bb40:	681b      	ldr	r3, [r3, #0]
 800bb42:	781b      	ldrb	r3, [r3, #0]
 800bb44:	00da      	lsls	r2, r3, #3
 800bb46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb48:	4413      	add	r3, r2
 800bb4a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800bb4e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bb50:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bb54:	b29a      	uxth	r2, r3
 800bb56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb58:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800bb5a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bb5e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bb62:	681b      	ldr	r3, [r3, #0]
 800bb64:	895b      	ldrh	r3, [r3, #10]
 800bb66:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800bb6a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bb6e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bb72:	681b      	ldr	r3, [r3, #0]
 800bb74:	6959      	ldr	r1, [r3, #20]
 800bb76:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bb7a:	b29b      	uxth	r3, r3
 800bb7c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800bb80:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800bb84:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800bb88:	6800      	ldr	r0, [r0, #0]
 800bb8a:	f001 fad4 	bl	800d136 <USB_WritePMA>
            ep->xfer_buff += len;
 800bb8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bb92:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bb96:	681b      	ldr	r3, [r3, #0]
 800bb98:	695a      	ldr	r2, [r3, #20]
 800bb9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bb9e:	441a      	add	r2, r3
 800bba0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bba4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bba8:	681b      	ldr	r3, [r3, #0]
 800bbaa:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800bbac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bbb0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bbb4:	681b      	ldr	r3, [r3, #0]
 800bbb6:	6a1a      	ldr	r2, [r3, #32]
 800bbb8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bbbc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bbc0:	681b      	ldr	r3, [r3, #0]
 800bbc2:	691b      	ldr	r3, [r3, #16]
 800bbc4:	429a      	cmp	r2, r3
 800bbc6:	d90f      	bls.n	800bbe8 <USB_EPStartXfer+0x392>
            {
              ep->xfer_len_db -= len;
 800bbc8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bbcc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bbd0:	681b      	ldr	r3, [r3, #0]
 800bbd2:	6a1a      	ldr	r2, [r3, #32]
 800bbd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bbd8:	1ad2      	subs	r2, r2, r3
 800bbda:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bbde:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bbe2:	681b      	ldr	r3, [r3, #0]
 800bbe4:	621a      	str	r2, [r3, #32]
 800bbe6:	e00e      	b.n	800bc06 <USB_EPStartXfer+0x3b0>
            }
            else
            {
              len = ep->xfer_len_db;
 800bbe8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bbec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bbf0:	681b      	ldr	r3, [r3, #0]
 800bbf2:	6a1b      	ldr	r3, [r3, #32]
 800bbf4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800bbf8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bbfc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bc00:	681b      	ldr	r3, [r3, #0]
 800bc02:	2200      	movs	r2, #0
 800bc04:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800bc06:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bc0a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bc0e:	681b      	ldr	r3, [r3, #0]
 800bc10:	785b      	ldrb	r3, [r3, #1]
 800bc12:	2b00      	cmp	r3, #0
 800bc14:	d16d      	bne.n	800bcf2 <USB_EPStartXfer+0x49c>
 800bc16:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bc1a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bc1e:	681b      	ldr	r3, [r3, #0]
 800bc20:	61bb      	str	r3, [r7, #24]
 800bc22:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bc26:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bc2a:	681b      	ldr	r3, [r3, #0]
 800bc2c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bc30:	b29b      	uxth	r3, r3
 800bc32:	461a      	mov	r2, r3
 800bc34:	69bb      	ldr	r3, [r7, #24]
 800bc36:	4413      	add	r3, r2
 800bc38:	61bb      	str	r3, [r7, #24]
 800bc3a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bc3e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bc42:	681b      	ldr	r3, [r3, #0]
 800bc44:	781b      	ldrb	r3, [r3, #0]
 800bc46:	00da      	lsls	r2, r3, #3
 800bc48:	69bb      	ldr	r3, [r7, #24]
 800bc4a:	4413      	add	r3, r2
 800bc4c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800bc50:	617b      	str	r3, [r7, #20]
 800bc52:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bc56:	2b3e      	cmp	r3, #62	; 0x3e
 800bc58:	d91c      	bls.n	800bc94 <USB_EPStartXfer+0x43e>
 800bc5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bc5e:	095b      	lsrs	r3, r3, #5
 800bc60:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800bc64:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bc68:	f003 031f 	and.w	r3, r3, #31
 800bc6c:	2b00      	cmp	r3, #0
 800bc6e:	d104      	bne.n	800bc7a <USB_EPStartXfer+0x424>
 800bc70:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bc74:	3b01      	subs	r3, #1
 800bc76:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800bc7a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bc7e:	b29b      	uxth	r3, r3
 800bc80:	029b      	lsls	r3, r3, #10
 800bc82:	b29b      	uxth	r3, r3
 800bc84:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bc88:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bc8c:	b29a      	uxth	r2, r3
 800bc8e:	697b      	ldr	r3, [r7, #20]
 800bc90:	801a      	strh	r2, [r3, #0]
 800bc92:	e059      	b.n	800bd48 <USB_EPStartXfer+0x4f2>
 800bc94:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bc98:	2b00      	cmp	r3, #0
 800bc9a:	d112      	bne.n	800bcc2 <USB_EPStartXfer+0x46c>
 800bc9c:	697b      	ldr	r3, [r7, #20]
 800bc9e:	881b      	ldrh	r3, [r3, #0]
 800bca0:	b29b      	uxth	r3, r3
 800bca2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800bca6:	b29a      	uxth	r2, r3
 800bca8:	697b      	ldr	r3, [r7, #20]
 800bcaa:	801a      	strh	r2, [r3, #0]
 800bcac:	697b      	ldr	r3, [r7, #20]
 800bcae:	881b      	ldrh	r3, [r3, #0]
 800bcb0:	b29b      	uxth	r3, r3
 800bcb2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bcb6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bcba:	b29a      	uxth	r2, r3
 800bcbc:	697b      	ldr	r3, [r7, #20]
 800bcbe:	801a      	strh	r2, [r3, #0]
 800bcc0:	e042      	b.n	800bd48 <USB_EPStartXfer+0x4f2>
 800bcc2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bcc6:	085b      	lsrs	r3, r3, #1
 800bcc8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800bccc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bcd0:	f003 0301 	and.w	r3, r3, #1
 800bcd4:	2b00      	cmp	r3, #0
 800bcd6:	d004      	beq.n	800bce2 <USB_EPStartXfer+0x48c>
 800bcd8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bcdc:	3301      	adds	r3, #1
 800bcde:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800bce2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bce6:	b29b      	uxth	r3, r3
 800bce8:	029b      	lsls	r3, r3, #10
 800bcea:	b29a      	uxth	r2, r3
 800bcec:	697b      	ldr	r3, [r7, #20]
 800bcee:	801a      	strh	r2, [r3, #0]
 800bcf0:	e02a      	b.n	800bd48 <USB_EPStartXfer+0x4f2>
 800bcf2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bcf6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bcfa:	681b      	ldr	r3, [r3, #0]
 800bcfc:	785b      	ldrb	r3, [r3, #1]
 800bcfe:	2b01      	cmp	r3, #1
 800bd00:	d122      	bne.n	800bd48 <USB_EPStartXfer+0x4f2>
 800bd02:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bd06:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bd0a:	681b      	ldr	r3, [r3, #0]
 800bd0c:	623b      	str	r3, [r7, #32]
 800bd0e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bd12:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bd16:	681b      	ldr	r3, [r3, #0]
 800bd18:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bd1c:	b29b      	uxth	r3, r3
 800bd1e:	461a      	mov	r2, r3
 800bd20:	6a3b      	ldr	r3, [r7, #32]
 800bd22:	4413      	add	r3, r2
 800bd24:	623b      	str	r3, [r7, #32]
 800bd26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bd2a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bd2e:	681b      	ldr	r3, [r3, #0]
 800bd30:	781b      	ldrb	r3, [r3, #0]
 800bd32:	00da      	lsls	r2, r3, #3
 800bd34:	6a3b      	ldr	r3, [r7, #32]
 800bd36:	4413      	add	r3, r2
 800bd38:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800bd3c:	61fb      	str	r3, [r7, #28]
 800bd3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bd42:	b29a      	uxth	r2, r3
 800bd44:	69fb      	ldr	r3, [r7, #28]
 800bd46:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800bd48:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bd4c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bd50:	681b      	ldr	r3, [r3, #0]
 800bd52:	891b      	ldrh	r3, [r3, #8]
 800bd54:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800bd58:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bd5c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bd60:	681b      	ldr	r3, [r3, #0]
 800bd62:	6959      	ldr	r1, [r3, #20]
 800bd64:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bd68:	b29b      	uxth	r3, r3
 800bd6a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800bd6e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800bd72:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800bd76:	6800      	ldr	r0, [r0, #0]
 800bd78:	f001 f9dd 	bl	800d136 <USB_WritePMA>
 800bd7c:	e3c6      	b.n	800c50c <USB_EPStartXfer+0xcb6>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800bd7e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bd82:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bd86:	681b      	ldr	r3, [r3, #0]
 800bd88:	785b      	ldrb	r3, [r3, #1]
 800bd8a:	2b00      	cmp	r3, #0
 800bd8c:	d16d      	bne.n	800be6a <USB_EPStartXfer+0x614>
 800bd8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bd92:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bd96:	681b      	ldr	r3, [r3, #0]
 800bd98:	64bb      	str	r3, [r7, #72]	; 0x48
 800bd9a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bd9e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bda2:	681b      	ldr	r3, [r3, #0]
 800bda4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bda8:	b29b      	uxth	r3, r3
 800bdaa:	461a      	mov	r2, r3
 800bdac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bdae:	4413      	add	r3, r2
 800bdb0:	64bb      	str	r3, [r7, #72]	; 0x48
 800bdb2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bdb6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bdba:	681b      	ldr	r3, [r3, #0]
 800bdbc:	781b      	ldrb	r3, [r3, #0]
 800bdbe:	00da      	lsls	r2, r3, #3
 800bdc0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bdc2:	4413      	add	r3, r2
 800bdc4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800bdc8:	647b      	str	r3, [r7, #68]	; 0x44
 800bdca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bdce:	2b3e      	cmp	r3, #62	; 0x3e
 800bdd0:	d91c      	bls.n	800be0c <USB_EPStartXfer+0x5b6>
 800bdd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bdd6:	095b      	lsrs	r3, r3, #5
 800bdd8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800bddc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bde0:	f003 031f 	and.w	r3, r3, #31
 800bde4:	2b00      	cmp	r3, #0
 800bde6:	d104      	bne.n	800bdf2 <USB_EPStartXfer+0x59c>
 800bde8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800bdec:	3b01      	subs	r3, #1
 800bdee:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800bdf2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800bdf6:	b29b      	uxth	r3, r3
 800bdf8:	029b      	lsls	r3, r3, #10
 800bdfa:	b29b      	uxth	r3, r3
 800bdfc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800be00:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800be04:	b29a      	uxth	r2, r3
 800be06:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800be08:	801a      	strh	r2, [r3, #0]
 800be0a:	e059      	b.n	800bec0 <USB_EPStartXfer+0x66a>
 800be0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800be10:	2b00      	cmp	r3, #0
 800be12:	d112      	bne.n	800be3a <USB_EPStartXfer+0x5e4>
 800be14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800be16:	881b      	ldrh	r3, [r3, #0]
 800be18:	b29b      	uxth	r3, r3
 800be1a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800be1e:	b29a      	uxth	r2, r3
 800be20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800be22:	801a      	strh	r2, [r3, #0]
 800be24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800be26:	881b      	ldrh	r3, [r3, #0]
 800be28:	b29b      	uxth	r3, r3
 800be2a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800be2e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800be32:	b29a      	uxth	r2, r3
 800be34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800be36:	801a      	strh	r2, [r3, #0]
 800be38:	e042      	b.n	800bec0 <USB_EPStartXfer+0x66a>
 800be3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800be3e:	085b      	lsrs	r3, r3, #1
 800be40:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800be44:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800be48:	f003 0301 	and.w	r3, r3, #1
 800be4c:	2b00      	cmp	r3, #0
 800be4e:	d004      	beq.n	800be5a <USB_EPStartXfer+0x604>
 800be50:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800be54:	3301      	adds	r3, #1
 800be56:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800be5a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800be5e:	b29b      	uxth	r3, r3
 800be60:	029b      	lsls	r3, r3, #10
 800be62:	b29a      	uxth	r2, r3
 800be64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800be66:	801a      	strh	r2, [r3, #0]
 800be68:	e02a      	b.n	800bec0 <USB_EPStartXfer+0x66a>
 800be6a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800be6e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800be72:	681b      	ldr	r3, [r3, #0]
 800be74:	785b      	ldrb	r3, [r3, #1]
 800be76:	2b01      	cmp	r3, #1
 800be78:	d122      	bne.n	800bec0 <USB_EPStartXfer+0x66a>
 800be7a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800be7e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800be82:	681b      	ldr	r3, [r3, #0]
 800be84:	653b      	str	r3, [r7, #80]	; 0x50
 800be86:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800be8a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800be8e:	681b      	ldr	r3, [r3, #0]
 800be90:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800be94:	b29b      	uxth	r3, r3
 800be96:	461a      	mov	r2, r3
 800be98:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800be9a:	4413      	add	r3, r2
 800be9c:	653b      	str	r3, [r7, #80]	; 0x50
 800be9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bea2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bea6:	681b      	ldr	r3, [r3, #0]
 800bea8:	781b      	ldrb	r3, [r3, #0]
 800beaa:	00da      	lsls	r2, r3, #3
 800beac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800beae:	4413      	add	r3, r2
 800beb0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800beb4:	64fb      	str	r3, [r7, #76]	; 0x4c
 800beb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800beba:	b29a      	uxth	r2, r3
 800bebc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bebe:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800bec0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bec4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bec8:	681b      	ldr	r3, [r3, #0]
 800beca:	891b      	ldrh	r3, [r3, #8]
 800becc:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800bed0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bed4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bed8:	681b      	ldr	r3, [r3, #0]
 800beda:	6959      	ldr	r1, [r3, #20]
 800bedc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bee0:	b29b      	uxth	r3, r3
 800bee2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800bee6:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800beea:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800beee:	6800      	ldr	r0, [r0, #0]
 800bef0:	f001 f921 	bl	800d136 <USB_WritePMA>
            ep->xfer_buff += len;
 800bef4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bef8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800befc:	681b      	ldr	r3, [r3, #0]
 800befe:	695a      	ldr	r2, [r3, #20]
 800bf00:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bf04:	441a      	add	r2, r3
 800bf06:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bf0a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bf0e:	681b      	ldr	r3, [r3, #0]
 800bf10:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800bf12:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bf16:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bf1a:	681b      	ldr	r3, [r3, #0]
 800bf1c:	6a1a      	ldr	r2, [r3, #32]
 800bf1e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bf22:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bf26:	681b      	ldr	r3, [r3, #0]
 800bf28:	691b      	ldr	r3, [r3, #16]
 800bf2a:	429a      	cmp	r2, r3
 800bf2c:	d90f      	bls.n	800bf4e <USB_EPStartXfer+0x6f8>
            {
              ep->xfer_len_db -= len;
 800bf2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bf32:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bf36:	681b      	ldr	r3, [r3, #0]
 800bf38:	6a1a      	ldr	r2, [r3, #32]
 800bf3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bf3e:	1ad2      	subs	r2, r2, r3
 800bf40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bf44:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bf48:	681b      	ldr	r3, [r3, #0]
 800bf4a:	621a      	str	r2, [r3, #32]
 800bf4c:	e00e      	b.n	800bf6c <USB_EPStartXfer+0x716>
            }
            else
            {
              len = ep->xfer_len_db;
 800bf4e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bf52:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bf56:	681b      	ldr	r3, [r3, #0]
 800bf58:	6a1b      	ldr	r3, [r3, #32]
 800bf5a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800bf5e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bf62:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bf66:	681b      	ldr	r3, [r3, #0]
 800bf68:	2200      	movs	r2, #0
 800bf6a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800bf6c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bf70:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bf74:	681b      	ldr	r3, [r3, #0]
 800bf76:	643b      	str	r3, [r7, #64]	; 0x40
 800bf78:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bf7c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bf80:	681b      	ldr	r3, [r3, #0]
 800bf82:	785b      	ldrb	r3, [r3, #1]
 800bf84:	2b00      	cmp	r3, #0
 800bf86:	d16d      	bne.n	800c064 <USB_EPStartXfer+0x80e>
 800bf88:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bf8c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bf90:	681b      	ldr	r3, [r3, #0]
 800bf92:	63bb      	str	r3, [r7, #56]	; 0x38
 800bf94:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bf98:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bf9c:	681b      	ldr	r3, [r3, #0]
 800bf9e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bfa2:	b29b      	uxth	r3, r3
 800bfa4:	461a      	mov	r2, r3
 800bfa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfa8:	4413      	add	r3, r2
 800bfaa:	63bb      	str	r3, [r7, #56]	; 0x38
 800bfac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bfb0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bfb4:	681b      	ldr	r3, [r3, #0]
 800bfb6:	781b      	ldrb	r3, [r3, #0]
 800bfb8:	00da      	lsls	r2, r3, #3
 800bfba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfbc:	4413      	add	r3, r2
 800bfbe:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800bfc2:	637b      	str	r3, [r7, #52]	; 0x34
 800bfc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bfc8:	2b3e      	cmp	r3, #62	; 0x3e
 800bfca:	d91c      	bls.n	800c006 <USB_EPStartXfer+0x7b0>
 800bfcc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bfd0:	095b      	lsrs	r3, r3, #5
 800bfd2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800bfd6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bfda:	f003 031f 	and.w	r3, r3, #31
 800bfde:	2b00      	cmp	r3, #0
 800bfe0:	d104      	bne.n	800bfec <USB_EPStartXfer+0x796>
 800bfe2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bfe6:	3b01      	subs	r3, #1
 800bfe8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800bfec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bff0:	b29b      	uxth	r3, r3
 800bff2:	029b      	lsls	r3, r3, #10
 800bff4:	b29b      	uxth	r3, r3
 800bff6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bffa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bffe:	b29a      	uxth	r2, r3
 800c000:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c002:	801a      	strh	r2, [r3, #0]
 800c004:	e053      	b.n	800c0ae <USB_EPStartXfer+0x858>
 800c006:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c00a:	2b00      	cmp	r3, #0
 800c00c:	d112      	bne.n	800c034 <USB_EPStartXfer+0x7de>
 800c00e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c010:	881b      	ldrh	r3, [r3, #0]
 800c012:	b29b      	uxth	r3, r3
 800c014:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800c018:	b29a      	uxth	r2, r3
 800c01a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c01c:	801a      	strh	r2, [r3, #0]
 800c01e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c020:	881b      	ldrh	r3, [r3, #0]
 800c022:	b29b      	uxth	r3, r3
 800c024:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c028:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c02c:	b29a      	uxth	r2, r3
 800c02e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c030:	801a      	strh	r2, [r3, #0]
 800c032:	e03c      	b.n	800c0ae <USB_EPStartXfer+0x858>
 800c034:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c038:	085b      	lsrs	r3, r3, #1
 800c03a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800c03e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c042:	f003 0301 	and.w	r3, r3, #1
 800c046:	2b00      	cmp	r3, #0
 800c048:	d004      	beq.n	800c054 <USB_EPStartXfer+0x7fe>
 800c04a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c04e:	3301      	adds	r3, #1
 800c050:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800c054:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c058:	b29b      	uxth	r3, r3
 800c05a:	029b      	lsls	r3, r3, #10
 800c05c:	b29a      	uxth	r2, r3
 800c05e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c060:	801a      	strh	r2, [r3, #0]
 800c062:	e024      	b.n	800c0ae <USB_EPStartXfer+0x858>
 800c064:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c068:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c06c:	681b      	ldr	r3, [r3, #0]
 800c06e:	785b      	ldrb	r3, [r3, #1]
 800c070:	2b01      	cmp	r3, #1
 800c072:	d11c      	bne.n	800c0ae <USB_EPStartXfer+0x858>
 800c074:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c078:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c07c:	681b      	ldr	r3, [r3, #0]
 800c07e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c082:	b29b      	uxth	r3, r3
 800c084:	461a      	mov	r2, r3
 800c086:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c088:	4413      	add	r3, r2
 800c08a:	643b      	str	r3, [r7, #64]	; 0x40
 800c08c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c090:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c094:	681b      	ldr	r3, [r3, #0]
 800c096:	781b      	ldrb	r3, [r3, #0]
 800c098:	00da      	lsls	r2, r3, #3
 800c09a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c09c:	4413      	add	r3, r2
 800c09e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800c0a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c0a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c0a8:	b29a      	uxth	r2, r3
 800c0aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c0ac:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800c0ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c0b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c0b6:	681b      	ldr	r3, [r3, #0]
 800c0b8:	895b      	ldrh	r3, [r3, #10]
 800c0ba:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800c0be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c0c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c0c6:	681b      	ldr	r3, [r3, #0]
 800c0c8:	6959      	ldr	r1, [r3, #20]
 800c0ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c0ce:	b29b      	uxth	r3, r3
 800c0d0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800c0d4:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800c0d8:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800c0dc:	6800      	ldr	r0, [r0, #0]
 800c0de:	f001 f82a 	bl	800d136 <USB_WritePMA>
 800c0e2:	e213      	b.n	800c50c <USB_EPStartXfer+0xcb6>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800c0e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c0e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c0ec:	681b      	ldr	r3, [r3, #0]
 800c0ee:	6a1b      	ldr	r3, [r3, #32]
 800c0f0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800c0f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c0f8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c0fc:	681a      	ldr	r2, [r3, #0]
 800c0fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c102:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c106:	681b      	ldr	r3, [r3, #0]
 800c108:	781b      	ldrb	r3, [r3, #0]
 800c10a:	009b      	lsls	r3, r3, #2
 800c10c:	4413      	add	r3, r2
 800c10e:	881b      	ldrh	r3, [r3, #0]
 800c110:	b29b      	uxth	r3, r3
 800c112:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800c116:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c11a:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800c11e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c122:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c126:	681a      	ldr	r2, [r3, #0]
 800c128:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c12c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c130:	681b      	ldr	r3, [r3, #0]
 800c132:	781b      	ldrb	r3, [r3, #0]
 800c134:	009b      	lsls	r3, r3, #2
 800c136:	441a      	add	r2, r3
 800c138:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800c13c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c140:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c144:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c148:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c14c:	b29b      	uxth	r3, r3
 800c14e:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800c150:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c154:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c158:	681b      	ldr	r3, [r3, #0]
 800c15a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c15c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c160:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c164:	681b      	ldr	r3, [r3, #0]
 800c166:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c16a:	b29b      	uxth	r3, r3
 800c16c:	461a      	mov	r2, r3
 800c16e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c170:	4413      	add	r3, r2
 800c172:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c174:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c178:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c17c:	681b      	ldr	r3, [r3, #0]
 800c17e:	781b      	ldrb	r3, [r3, #0]
 800c180:	00da      	lsls	r2, r3, #3
 800c182:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c184:	4413      	add	r3, r2
 800c186:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800c18a:	65bb      	str	r3, [r7, #88]	; 0x58
 800c18c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c190:	b29a      	uxth	r2, r3
 800c192:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c194:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800c196:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c19a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c19e:	681b      	ldr	r3, [r3, #0]
 800c1a0:	891b      	ldrh	r3, [r3, #8]
 800c1a2:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800c1a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c1aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c1ae:	681b      	ldr	r3, [r3, #0]
 800c1b0:	6959      	ldr	r1, [r3, #20]
 800c1b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c1b6:	b29b      	uxth	r3, r3
 800c1b8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800c1bc:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800c1c0:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800c1c4:	6800      	ldr	r0, [r0, #0]
 800c1c6:	f000 ffb6 	bl	800d136 <USB_WritePMA>
 800c1ca:	e19f      	b.n	800c50c <USB_EPStartXfer+0xcb6>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800c1cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c1d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c1d4:	681b      	ldr	r3, [r3, #0]
 800c1d6:	6a1a      	ldr	r2, [r3, #32]
 800c1d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c1dc:	1ad2      	subs	r2, r2, r3
 800c1de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c1e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c1e6:	681b      	ldr	r3, [r3, #0]
 800c1e8:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800c1ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c1ee:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c1f2:	681a      	ldr	r2, [r3, #0]
 800c1f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c1f8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c1fc:	681b      	ldr	r3, [r3, #0]
 800c1fe:	781b      	ldrb	r3, [r3, #0]
 800c200:	009b      	lsls	r3, r3, #2
 800c202:	4413      	add	r3, r2
 800c204:	881b      	ldrh	r3, [r3, #0]
 800c206:	b29b      	uxth	r3, r3
 800c208:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c20c:	2b00      	cmp	r3, #0
 800c20e:	f000 80bc 	beq.w	800c38a <USB_EPStartXfer+0xb34>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800c212:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c216:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c21a:	681b      	ldr	r3, [r3, #0]
 800c21c:	673b      	str	r3, [r7, #112]	; 0x70
 800c21e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c222:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c226:	681b      	ldr	r3, [r3, #0]
 800c228:	785b      	ldrb	r3, [r3, #1]
 800c22a:	2b00      	cmp	r3, #0
 800c22c:	d16d      	bne.n	800c30a <USB_EPStartXfer+0xab4>
 800c22e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c232:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c236:	681b      	ldr	r3, [r3, #0]
 800c238:	66bb      	str	r3, [r7, #104]	; 0x68
 800c23a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c23e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c242:	681b      	ldr	r3, [r3, #0]
 800c244:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c248:	b29b      	uxth	r3, r3
 800c24a:	461a      	mov	r2, r3
 800c24c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c24e:	4413      	add	r3, r2
 800c250:	66bb      	str	r3, [r7, #104]	; 0x68
 800c252:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c256:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c25a:	681b      	ldr	r3, [r3, #0]
 800c25c:	781b      	ldrb	r3, [r3, #0]
 800c25e:	00da      	lsls	r2, r3, #3
 800c260:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c262:	4413      	add	r3, r2
 800c264:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800c268:	667b      	str	r3, [r7, #100]	; 0x64
 800c26a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c26e:	2b3e      	cmp	r3, #62	; 0x3e
 800c270:	d91c      	bls.n	800c2ac <USB_EPStartXfer+0xa56>
 800c272:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c276:	095b      	lsrs	r3, r3, #5
 800c278:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800c27c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c280:	f003 031f 	and.w	r3, r3, #31
 800c284:	2b00      	cmp	r3, #0
 800c286:	d104      	bne.n	800c292 <USB_EPStartXfer+0xa3c>
 800c288:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800c28c:	3b01      	subs	r3, #1
 800c28e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800c292:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800c296:	b29b      	uxth	r3, r3
 800c298:	029b      	lsls	r3, r3, #10
 800c29a:	b29b      	uxth	r3, r3
 800c29c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c2a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c2a4:	b29a      	uxth	r2, r3
 800c2a6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c2a8:	801a      	strh	r2, [r3, #0]
 800c2aa:	e053      	b.n	800c354 <USB_EPStartXfer+0xafe>
 800c2ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c2b0:	2b00      	cmp	r3, #0
 800c2b2:	d112      	bne.n	800c2da <USB_EPStartXfer+0xa84>
 800c2b4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c2b6:	881b      	ldrh	r3, [r3, #0]
 800c2b8:	b29b      	uxth	r3, r3
 800c2ba:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800c2be:	b29a      	uxth	r2, r3
 800c2c0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c2c2:	801a      	strh	r2, [r3, #0]
 800c2c4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c2c6:	881b      	ldrh	r3, [r3, #0]
 800c2c8:	b29b      	uxth	r3, r3
 800c2ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c2ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c2d2:	b29a      	uxth	r2, r3
 800c2d4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c2d6:	801a      	strh	r2, [r3, #0]
 800c2d8:	e03c      	b.n	800c354 <USB_EPStartXfer+0xafe>
 800c2da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c2de:	085b      	lsrs	r3, r3, #1
 800c2e0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800c2e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c2e8:	f003 0301 	and.w	r3, r3, #1
 800c2ec:	2b00      	cmp	r3, #0
 800c2ee:	d004      	beq.n	800c2fa <USB_EPStartXfer+0xaa4>
 800c2f0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800c2f4:	3301      	adds	r3, #1
 800c2f6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800c2fa:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800c2fe:	b29b      	uxth	r3, r3
 800c300:	029b      	lsls	r3, r3, #10
 800c302:	b29a      	uxth	r2, r3
 800c304:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c306:	801a      	strh	r2, [r3, #0]
 800c308:	e024      	b.n	800c354 <USB_EPStartXfer+0xafe>
 800c30a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c30e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c312:	681b      	ldr	r3, [r3, #0]
 800c314:	785b      	ldrb	r3, [r3, #1]
 800c316:	2b01      	cmp	r3, #1
 800c318:	d11c      	bne.n	800c354 <USB_EPStartXfer+0xafe>
 800c31a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c31e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c322:	681b      	ldr	r3, [r3, #0]
 800c324:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c328:	b29b      	uxth	r3, r3
 800c32a:	461a      	mov	r2, r3
 800c32c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c32e:	4413      	add	r3, r2
 800c330:	673b      	str	r3, [r7, #112]	; 0x70
 800c332:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c336:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c33a:	681b      	ldr	r3, [r3, #0]
 800c33c:	781b      	ldrb	r3, [r3, #0]
 800c33e:	00da      	lsls	r2, r3, #3
 800c340:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c342:	4413      	add	r3, r2
 800c344:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800c348:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c34a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c34e:	b29a      	uxth	r2, r3
 800c350:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c352:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800c354:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c358:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c35c:	681b      	ldr	r3, [r3, #0]
 800c35e:	895b      	ldrh	r3, [r3, #10]
 800c360:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800c364:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c368:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c36c:	681b      	ldr	r3, [r3, #0]
 800c36e:	6959      	ldr	r1, [r3, #20]
 800c370:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c374:	b29b      	uxth	r3, r3
 800c376:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800c37a:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800c37e:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800c382:	6800      	ldr	r0, [r0, #0]
 800c384:	f000 fed7 	bl	800d136 <USB_WritePMA>
 800c388:	e0c0      	b.n	800c50c <USB_EPStartXfer+0xcb6>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800c38a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c38e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c392:	681b      	ldr	r3, [r3, #0]
 800c394:	785b      	ldrb	r3, [r3, #1]
 800c396:	2b00      	cmp	r3, #0
 800c398:	d16d      	bne.n	800c476 <USB_EPStartXfer+0xc20>
 800c39a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c39e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c3a2:	681b      	ldr	r3, [r3, #0]
 800c3a4:	67fb      	str	r3, [r7, #124]	; 0x7c
 800c3a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c3aa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c3ae:	681b      	ldr	r3, [r3, #0]
 800c3b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c3b4:	b29b      	uxth	r3, r3
 800c3b6:	461a      	mov	r2, r3
 800c3b8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c3ba:	4413      	add	r3, r2
 800c3bc:	67fb      	str	r3, [r7, #124]	; 0x7c
 800c3be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c3c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c3c6:	681b      	ldr	r3, [r3, #0]
 800c3c8:	781b      	ldrb	r3, [r3, #0]
 800c3ca:	00da      	lsls	r2, r3, #3
 800c3cc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c3ce:	4413      	add	r3, r2
 800c3d0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800c3d4:	67bb      	str	r3, [r7, #120]	; 0x78
 800c3d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c3da:	2b3e      	cmp	r3, #62	; 0x3e
 800c3dc:	d91c      	bls.n	800c418 <USB_EPStartXfer+0xbc2>
 800c3de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c3e2:	095b      	lsrs	r3, r3, #5
 800c3e4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800c3e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c3ec:	f003 031f 	and.w	r3, r3, #31
 800c3f0:	2b00      	cmp	r3, #0
 800c3f2:	d104      	bne.n	800c3fe <USB_EPStartXfer+0xba8>
 800c3f4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800c3f8:	3b01      	subs	r3, #1
 800c3fa:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800c3fe:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800c402:	b29b      	uxth	r3, r3
 800c404:	029b      	lsls	r3, r3, #10
 800c406:	b29b      	uxth	r3, r3
 800c408:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c40c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c410:	b29a      	uxth	r2, r3
 800c412:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c414:	801a      	strh	r2, [r3, #0]
 800c416:	e05f      	b.n	800c4d8 <USB_EPStartXfer+0xc82>
 800c418:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c41c:	2b00      	cmp	r3, #0
 800c41e:	d112      	bne.n	800c446 <USB_EPStartXfer+0xbf0>
 800c420:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c422:	881b      	ldrh	r3, [r3, #0]
 800c424:	b29b      	uxth	r3, r3
 800c426:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800c42a:	b29a      	uxth	r2, r3
 800c42c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c42e:	801a      	strh	r2, [r3, #0]
 800c430:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c432:	881b      	ldrh	r3, [r3, #0]
 800c434:	b29b      	uxth	r3, r3
 800c436:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c43a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c43e:	b29a      	uxth	r2, r3
 800c440:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c442:	801a      	strh	r2, [r3, #0]
 800c444:	e048      	b.n	800c4d8 <USB_EPStartXfer+0xc82>
 800c446:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c44a:	085b      	lsrs	r3, r3, #1
 800c44c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800c450:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c454:	f003 0301 	and.w	r3, r3, #1
 800c458:	2b00      	cmp	r3, #0
 800c45a:	d004      	beq.n	800c466 <USB_EPStartXfer+0xc10>
 800c45c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800c460:	3301      	adds	r3, #1
 800c462:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800c466:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800c46a:	b29b      	uxth	r3, r3
 800c46c:	029b      	lsls	r3, r3, #10
 800c46e:	b29a      	uxth	r2, r3
 800c470:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c472:	801a      	strh	r2, [r3, #0]
 800c474:	e030      	b.n	800c4d8 <USB_EPStartXfer+0xc82>
 800c476:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c47a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c47e:	681b      	ldr	r3, [r3, #0]
 800c480:	785b      	ldrb	r3, [r3, #1]
 800c482:	2b01      	cmp	r3, #1
 800c484:	d128      	bne.n	800c4d8 <USB_EPStartXfer+0xc82>
 800c486:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c48a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c48e:	681b      	ldr	r3, [r3, #0]
 800c490:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800c494:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c498:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c49c:	681b      	ldr	r3, [r3, #0]
 800c49e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c4a2:	b29b      	uxth	r3, r3
 800c4a4:	461a      	mov	r2, r3
 800c4a6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c4aa:	4413      	add	r3, r2
 800c4ac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800c4b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c4b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c4b8:	681b      	ldr	r3, [r3, #0]
 800c4ba:	781b      	ldrb	r3, [r3, #0]
 800c4bc:	00da      	lsls	r2, r3, #3
 800c4be:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c4c2:	4413      	add	r3, r2
 800c4c4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800c4c8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800c4cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c4d0:	b29a      	uxth	r2, r3
 800c4d2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800c4d6:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800c4d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c4dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c4e0:	681b      	ldr	r3, [r3, #0]
 800c4e2:	891b      	ldrh	r3, [r3, #8]
 800c4e4:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800c4e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c4ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c4f0:	681b      	ldr	r3, [r3, #0]
 800c4f2:	6959      	ldr	r1, [r3, #20]
 800c4f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c4f8:	b29b      	uxth	r3, r3
 800c4fa:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800c4fe:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800c502:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800c506:	6800      	ldr	r0, [r0, #0]
 800c508:	f000 fe15 	bl	800d136 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800c50c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c510:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c514:	681a      	ldr	r2, [r3, #0]
 800c516:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c51a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c51e:	681b      	ldr	r3, [r3, #0]
 800c520:	781b      	ldrb	r3, [r3, #0]
 800c522:	009b      	lsls	r3, r3, #2
 800c524:	4413      	add	r3, r2
 800c526:	881b      	ldrh	r3, [r3, #0]
 800c528:	b29b      	uxth	r3, r3
 800c52a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c52e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c532:	817b      	strh	r3, [r7, #10]
 800c534:	897b      	ldrh	r3, [r7, #10]
 800c536:	f083 0310 	eor.w	r3, r3, #16
 800c53a:	817b      	strh	r3, [r7, #10]
 800c53c:	897b      	ldrh	r3, [r7, #10]
 800c53e:	f083 0320 	eor.w	r3, r3, #32
 800c542:	817b      	strh	r3, [r7, #10]
 800c544:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c548:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c54c:	681a      	ldr	r2, [r3, #0]
 800c54e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c552:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c556:	681b      	ldr	r3, [r3, #0]
 800c558:	781b      	ldrb	r3, [r3, #0]
 800c55a:	009b      	lsls	r3, r3, #2
 800c55c:	441a      	add	r2, r3
 800c55e:	897b      	ldrh	r3, [r7, #10]
 800c560:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c564:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c568:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c56c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c570:	b29b      	uxth	r3, r3
 800c572:	8013      	strh	r3, [r2, #0]
 800c574:	f000 bc9f 	b.w	800ceb6 <USB_EPStartXfer+0x1660>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800c578:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c57c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c580:	681b      	ldr	r3, [r3, #0]
 800c582:	7b1b      	ldrb	r3, [r3, #12]
 800c584:	2b00      	cmp	r3, #0
 800c586:	f040 80ae 	bne.w	800c6e6 <USB_EPStartXfer+0xe90>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800c58a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c58e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c592:	681b      	ldr	r3, [r3, #0]
 800c594:	699a      	ldr	r2, [r3, #24]
 800c596:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c59a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c59e:	681b      	ldr	r3, [r3, #0]
 800c5a0:	691b      	ldr	r3, [r3, #16]
 800c5a2:	429a      	cmp	r2, r3
 800c5a4:	d917      	bls.n	800c5d6 <USB_EPStartXfer+0xd80>
      {
        len = ep->maxpacket;
 800c5a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c5aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c5ae:	681b      	ldr	r3, [r3, #0]
 800c5b0:	691b      	ldr	r3, [r3, #16]
 800c5b2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 800c5b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c5ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c5be:	681b      	ldr	r3, [r3, #0]
 800c5c0:	699a      	ldr	r2, [r3, #24]
 800c5c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c5c6:	1ad2      	subs	r2, r2, r3
 800c5c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c5cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c5d0:	681b      	ldr	r3, [r3, #0]
 800c5d2:	619a      	str	r2, [r3, #24]
 800c5d4:	e00e      	b.n	800c5f4 <USB_EPStartXfer+0xd9e>
      }
      else
      {
        len = ep->xfer_len;
 800c5d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c5da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c5de:	681b      	ldr	r3, [r3, #0]
 800c5e0:	699b      	ldr	r3, [r3, #24]
 800c5e2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 800c5e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c5ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c5ee:	681b      	ldr	r3, [r3, #0]
 800c5f0:	2200      	movs	r2, #0
 800c5f2:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800c5f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c5f8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c5fc:	681b      	ldr	r3, [r3, #0]
 800c5fe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800c602:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c606:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c60a:	681b      	ldr	r3, [r3, #0]
 800c60c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c610:	b29b      	uxth	r3, r3
 800c612:	461a      	mov	r2, r3
 800c614:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c618:	4413      	add	r3, r2
 800c61a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800c61e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c622:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c626:	681b      	ldr	r3, [r3, #0]
 800c628:	781b      	ldrb	r3, [r3, #0]
 800c62a:	00da      	lsls	r2, r3, #3
 800c62c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c630:	4413      	add	r3, r2
 800c632:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800c636:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800c63a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c63e:	2b3e      	cmp	r3, #62	; 0x3e
 800c640:	d91d      	bls.n	800c67e <USB_EPStartXfer+0xe28>
 800c642:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c646:	095b      	lsrs	r3, r3, #5
 800c648:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800c64c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c650:	f003 031f 	and.w	r3, r3, #31
 800c654:	2b00      	cmp	r3, #0
 800c656:	d104      	bne.n	800c662 <USB_EPStartXfer+0xe0c>
 800c658:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800c65c:	3b01      	subs	r3, #1
 800c65e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800c662:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800c666:	b29b      	uxth	r3, r3
 800c668:	029b      	lsls	r3, r3, #10
 800c66a:	b29b      	uxth	r3, r3
 800c66c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c670:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c674:	b29a      	uxth	r2, r3
 800c676:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c67a:	801a      	strh	r2, [r3, #0]
 800c67c:	e3e1      	b.n	800ce42 <USB_EPStartXfer+0x15ec>
 800c67e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c682:	2b00      	cmp	r3, #0
 800c684:	d116      	bne.n	800c6b4 <USB_EPStartXfer+0xe5e>
 800c686:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c68a:	881b      	ldrh	r3, [r3, #0]
 800c68c:	b29b      	uxth	r3, r3
 800c68e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800c692:	b29a      	uxth	r2, r3
 800c694:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c698:	801a      	strh	r2, [r3, #0]
 800c69a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c69e:	881b      	ldrh	r3, [r3, #0]
 800c6a0:	b29b      	uxth	r3, r3
 800c6a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c6a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c6aa:	b29a      	uxth	r2, r3
 800c6ac:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c6b0:	801a      	strh	r2, [r3, #0]
 800c6b2:	e3c6      	b.n	800ce42 <USB_EPStartXfer+0x15ec>
 800c6b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c6b8:	085b      	lsrs	r3, r3, #1
 800c6ba:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800c6be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c6c2:	f003 0301 	and.w	r3, r3, #1
 800c6c6:	2b00      	cmp	r3, #0
 800c6c8:	d004      	beq.n	800c6d4 <USB_EPStartXfer+0xe7e>
 800c6ca:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800c6ce:	3301      	adds	r3, #1
 800c6d0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800c6d4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800c6d8:	b29b      	uxth	r3, r3
 800c6da:	029b      	lsls	r3, r3, #10
 800c6dc:	b29a      	uxth	r2, r3
 800c6de:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c6e2:	801a      	strh	r2, [r3, #0]
 800c6e4:	e3ad      	b.n	800ce42 <USB_EPStartXfer+0x15ec>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800c6e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c6ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c6ee:	681b      	ldr	r3, [r3, #0]
 800c6f0:	78db      	ldrb	r3, [r3, #3]
 800c6f2:	2b02      	cmp	r3, #2
 800c6f4:	f040 8200 	bne.w	800caf8 <USB_EPStartXfer+0x12a2>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800c6f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c6fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c700:	681b      	ldr	r3, [r3, #0]
 800c702:	785b      	ldrb	r3, [r3, #1]
 800c704:	2b00      	cmp	r3, #0
 800c706:	f040 8091 	bne.w	800c82c <USB_EPStartXfer+0xfd6>
 800c70a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c70e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c712:	681b      	ldr	r3, [r3, #0]
 800c714:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800c718:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c71c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c720:	681b      	ldr	r3, [r3, #0]
 800c722:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c726:	b29b      	uxth	r3, r3
 800c728:	461a      	mov	r2, r3
 800c72a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c72e:	4413      	add	r3, r2
 800c730:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800c734:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c738:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c73c:	681b      	ldr	r3, [r3, #0]
 800c73e:	781b      	ldrb	r3, [r3, #0]
 800c740:	00da      	lsls	r2, r3, #3
 800c742:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c746:	4413      	add	r3, r2
 800c748:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800c74c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800c750:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c754:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c758:	681b      	ldr	r3, [r3, #0]
 800c75a:	691b      	ldr	r3, [r3, #16]
 800c75c:	2b3e      	cmp	r3, #62	; 0x3e
 800c75e:	d925      	bls.n	800c7ac <USB_EPStartXfer+0xf56>
 800c760:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c764:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c768:	681b      	ldr	r3, [r3, #0]
 800c76a:	691b      	ldr	r3, [r3, #16]
 800c76c:	095b      	lsrs	r3, r3, #5
 800c76e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800c772:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c776:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c77a:	681b      	ldr	r3, [r3, #0]
 800c77c:	691b      	ldr	r3, [r3, #16]
 800c77e:	f003 031f 	and.w	r3, r3, #31
 800c782:	2b00      	cmp	r3, #0
 800c784:	d104      	bne.n	800c790 <USB_EPStartXfer+0xf3a>
 800c786:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c78a:	3b01      	subs	r3, #1
 800c78c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800c790:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c794:	b29b      	uxth	r3, r3
 800c796:	029b      	lsls	r3, r3, #10
 800c798:	b29b      	uxth	r3, r3
 800c79a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c79e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c7a2:	b29a      	uxth	r2, r3
 800c7a4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c7a8:	801a      	strh	r2, [r3, #0]
 800c7aa:	e074      	b.n	800c896 <USB_EPStartXfer+0x1040>
 800c7ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c7b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c7b4:	681b      	ldr	r3, [r3, #0]
 800c7b6:	691b      	ldr	r3, [r3, #16]
 800c7b8:	2b00      	cmp	r3, #0
 800c7ba:	d116      	bne.n	800c7ea <USB_EPStartXfer+0xf94>
 800c7bc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c7c0:	881b      	ldrh	r3, [r3, #0]
 800c7c2:	b29b      	uxth	r3, r3
 800c7c4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800c7c8:	b29a      	uxth	r2, r3
 800c7ca:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c7ce:	801a      	strh	r2, [r3, #0]
 800c7d0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c7d4:	881b      	ldrh	r3, [r3, #0]
 800c7d6:	b29b      	uxth	r3, r3
 800c7d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c7dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c7e0:	b29a      	uxth	r2, r3
 800c7e2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c7e6:	801a      	strh	r2, [r3, #0]
 800c7e8:	e055      	b.n	800c896 <USB_EPStartXfer+0x1040>
 800c7ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c7ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c7f2:	681b      	ldr	r3, [r3, #0]
 800c7f4:	691b      	ldr	r3, [r3, #16]
 800c7f6:	085b      	lsrs	r3, r3, #1
 800c7f8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800c7fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c800:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c804:	681b      	ldr	r3, [r3, #0]
 800c806:	691b      	ldr	r3, [r3, #16]
 800c808:	f003 0301 	and.w	r3, r3, #1
 800c80c:	2b00      	cmp	r3, #0
 800c80e:	d004      	beq.n	800c81a <USB_EPStartXfer+0xfc4>
 800c810:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c814:	3301      	adds	r3, #1
 800c816:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800c81a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c81e:	b29b      	uxth	r3, r3
 800c820:	029b      	lsls	r3, r3, #10
 800c822:	b29a      	uxth	r2, r3
 800c824:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c828:	801a      	strh	r2, [r3, #0]
 800c82a:	e034      	b.n	800c896 <USB_EPStartXfer+0x1040>
 800c82c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c830:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c834:	681b      	ldr	r3, [r3, #0]
 800c836:	785b      	ldrb	r3, [r3, #1]
 800c838:	2b01      	cmp	r3, #1
 800c83a:	d12c      	bne.n	800c896 <USB_EPStartXfer+0x1040>
 800c83c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c840:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c844:	681b      	ldr	r3, [r3, #0]
 800c846:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c84a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c84e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c852:	681b      	ldr	r3, [r3, #0]
 800c854:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c858:	b29b      	uxth	r3, r3
 800c85a:	461a      	mov	r2, r3
 800c85c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800c860:	4413      	add	r3, r2
 800c862:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c866:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c86a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c86e:	681b      	ldr	r3, [r3, #0]
 800c870:	781b      	ldrb	r3, [r3, #0]
 800c872:	00da      	lsls	r2, r3, #3
 800c874:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800c878:	4413      	add	r3, r2
 800c87a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800c87e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800c882:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c886:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c88a:	681b      	ldr	r3, [r3, #0]
 800c88c:	691b      	ldr	r3, [r3, #16]
 800c88e:	b29a      	uxth	r2, r3
 800c890:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800c894:	801a      	strh	r2, [r3, #0]
 800c896:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c89a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c89e:	681b      	ldr	r3, [r3, #0]
 800c8a0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800c8a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c8a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c8ac:	681b      	ldr	r3, [r3, #0]
 800c8ae:	785b      	ldrb	r3, [r3, #1]
 800c8b0:	2b00      	cmp	r3, #0
 800c8b2:	f040 8091 	bne.w	800c9d8 <USB_EPStartXfer+0x1182>
 800c8b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c8ba:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c8be:	681b      	ldr	r3, [r3, #0]
 800c8c0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800c8c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c8c8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c8cc:	681b      	ldr	r3, [r3, #0]
 800c8ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c8d2:	b29b      	uxth	r3, r3
 800c8d4:	461a      	mov	r2, r3
 800c8d6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c8da:	4413      	add	r3, r2
 800c8dc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800c8e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c8e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c8e8:	681b      	ldr	r3, [r3, #0]
 800c8ea:	781b      	ldrb	r3, [r3, #0]
 800c8ec:	00da      	lsls	r2, r3, #3
 800c8ee:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c8f2:	4413      	add	r3, r2
 800c8f4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800c8f8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800c8fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c900:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c904:	681b      	ldr	r3, [r3, #0]
 800c906:	691b      	ldr	r3, [r3, #16]
 800c908:	2b3e      	cmp	r3, #62	; 0x3e
 800c90a:	d925      	bls.n	800c958 <USB_EPStartXfer+0x1102>
 800c90c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c910:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c914:	681b      	ldr	r3, [r3, #0]
 800c916:	691b      	ldr	r3, [r3, #16]
 800c918:	095b      	lsrs	r3, r3, #5
 800c91a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800c91e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c922:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c926:	681b      	ldr	r3, [r3, #0]
 800c928:	691b      	ldr	r3, [r3, #16]
 800c92a:	f003 031f 	and.w	r3, r3, #31
 800c92e:	2b00      	cmp	r3, #0
 800c930:	d104      	bne.n	800c93c <USB_EPStartXfer+0x10e6>
 800c932:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c936:	3b01      	subs	r3, #1
 800c938:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800c93c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c940:	b29b      	uxth	r3, r3
 800c942:	029b      	lsls	r3, r3, #10
 800c944:	b29b      	uxth	r3, r3
 800c946:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c94a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c94e:	b29a      	uxth	r2, r3
 800c950:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c954:	801a      	strh	r2, [r3, #0]
 800c956:	e06d      	b.n	800ca34 <USB_EPStartXfer+0x11de>
 800c958:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c95c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c960:	681b      	ldr	r3, [r3, #0]
 800c962:	691b      	ldr	r3, [r3, #16]
 800c964:	2b00      	cmp	r3, #0
 800c966:	d116      	bne.n	800c996 <USB_EPStartXfer+0x1140>
 800c968:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c96c:	881b      	ldrh	r3, [r3, #0]
 800c96e:	b29b      	uxth	r3, r3
 800c970:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800c974:	b29a      	uxth	r2, r3
 800c976:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c97a:	801a      	strh	r2, [r3, #0]
 800c97c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c980:	881b      	ldrh	r3, [r3, #0]
 800c982:	b29b      	uxth	r3, r3
 800c984:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c988:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c98c:	b29a      	uxth	r2, r3
 800c98e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c992:	801a      	strh	r2, [r3, #0]
 800c994:	e04e      	b.n	800ca34 <USB_EPStartXfer+0x11de>
 800c996:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c99a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c99e:	681b      	ldr	r3, [r3, #0]
 800c9a0:	691b      	ldr	r3, [r3, #16]
 800c9a2:	085b      	lsrs	r3, r3, #1
 800c9a4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800c9a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c9ac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c9b0:	681b      	ldr	r3, [r3, #0]
 800c9b2:	691b      	ldr	r3, [r3, #16]
 800c9b4:	f003 0301 	and.w	r3, r3, #1
 800c9b8:	2b00      	cmp	r3, #0
 800c9ba:	d004      	beq.n	800c9c6 <USB_EPStartXfer+0x1170>
 800c9bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c9c0:	3301      	adds	r3, #1
 800c9c2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800c9c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c9ca:	b29b      	uxth	r3, r3
 800c9cc:	029b      	lsls	r3, r3, #10
 800c9ce:	b29a      	uxth	r2, r3
 800c9d0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c9d4:	801a      	strh	r2, [r3, #0]
 800c9d6:	e02d      	b.n	800ca34 <USB_EPStartXfer+0x11de>
 800c9d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c9dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c9e0:	681b      	ldr	r3, [r3, #0]
 800c9e2:	785b      	ldrb	r3, [r3, #1]
 800c9e4:	2b01      	cmp	r3, #1
 800c9e6:	d125      	bne.n	800ca34 <USB_EPStartXfer+0x11de>
 800c9e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c9ec:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c9f0:	681b      	ldr	r3, [r3, #0]
 800c9f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800c9f6:	b29b      	uxth	r3, r3
 800c9f8:	461a      	mov	r2, r3
 800c9fa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800c9fe:	4413      	add	r3, r2
 800ca00:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800ca04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ca08:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ca0c:	681b      	ldr	r3, [r3, #0]
 800ca0e:	781b      	ldrb	r3, [r3, #0]
 800ca10:	00da      	lsls	r2, r3, #3
 800ca12:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800ca16:	4413      	add	r3, r2
 800ca18:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800ca1c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800ca20:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ca24:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ca28:	681b      	ldr	r3, [r3, #0]
 800ca2a:	691b      	ldr	r3, [r3, #16]
 800ca2c:	b29a      	uxth	r2, r3
 800ca2e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800ca32:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800ca34:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ca38:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ca3c:	681b      	ldr	r3, [r3, #0]
 800ca3e:	69db      	ldr	r3, [r3, #28]
 800ca40:	2b00      	cmp	r3, #0
 800ca42:	f000 81fe 	beq.w	800ce42 <USB_EPStartXfer+0x15ec>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800ca46:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ca4a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ca4e:	681a      	ldr	r2, [r3, #0]
 800ca50:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ca54:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ca58:	681b      	ldr	r3, [r3, #0]
 800ca5a:	781b      	ldrb	r3, [r3, #0]
 800ca5c:	009b      	lsls	r3, r3, #2
 800ca5e:	4413      	add	r3, r2
 800ca60:	881b      	ldrh	r3, [r3, #0]
 800ca62:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800ca66:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800ca6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ca6e:	2b00      	cmp	r3, #0
 800ca70:	d005      	beq.n	800ca7e <USB_EPStartXfer+0x1228>
 800ca72:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800ca76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ca7a:	2b00      	cmp	r3, #0
 800ca7c:	d10d      	bne.n	800ca9a <USB_EPStartXfer+0x1244>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800ca7e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800ca82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800ca86:	2b00      	cmp	r3, #0
 800ca88:	f040 81db 	bne.w	800ce42 <USB_EPStartXfer+0x15ec>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800ca8c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800ca90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ca94:	2b00      	cmp	r3, #0
 800ca96:	f040 81d4 	bne.w	800ce42 <USB_EPStartXfer+0x15ec>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800ca9a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ca9e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800caa2:	681a      	ldr	r2, [r3, #0]
 800caa4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800caa8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800caac:	681b      	ldr	r3, [r3, #0]
 800caae:	781b      	ldrb	r3, [r3, #0]
 800cab0:	009b      	lsls	r3, r3, #2
 800cab2:	4413      	add	r3, r2
 800cab4:	881b      	ldrh	r3, [r3, #0]
 800cab6:	b29b      	uxth	r3, r3
 800cab8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800cabc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cac0:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 800cac4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cac8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800cacc:	681a      	ldr	r2, [r3, #0]
 800cace:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cad2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cad6:	681b      	ldr	r3, [r3, #0]
 800cad8:	781b      	ldrb	r3, [r3, #0]
 800cada:	009b      	lsls	r3, r3, #2
 800cadc:	441a      	add	r2, r3
 800cade:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 800cae2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800cae6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800caea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800caee:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800caf2:	b29b      	uxth	r3, r3
 800caf4:	8013      	strh	r3, [r2, #0]
 800caf6:	e1a4      	b.n	800ce42 <USB_EPStartXfer+0x15ec>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800caf8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cafc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cb00:	681b      	ldr	r3, [r3, #0]
 800cb02:	78db      	ldrb	r3, [r3, #3]
 800cb04:	2b01      	cmp	r3, #1
 800cb06:	f040 819a 	bne.w	800ce3e <USB_EPStartXfer+0x15e8>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800cb0a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cb0e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cb12:	681b      	ldr	r3, [r3, #0]
 800cb14:	699a      	ldr	r2, [r3, #24]
 800cb16:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cb1a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cb1e:	681b      	ldr	r3, [r3, #0]
 800cb20:	691b      	ldr	r3, [r3, #16]
 800cb22:	429a      	cmp	r2, r3
 800cb24:	d917      	bls.n	800cb56 <USB_EPStartXfer+0x1300>
        {
          len = ep->maxpacket;
 800cb26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cb2a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cb2e:	681b      	ldr	r3, [r3, #0]
 800cb30:	691b      	ldr	r3, [r3, #16]
 800cb32:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 800cb36:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cb3a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cb3e:	681b      	ldr	r3, [r3, #0]
 800cb40:	699a      	ldr	r2, [r3, #24]
 800cb42:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cb46:	1ad2      	subs	r2, r2, r3
 800cb48:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cb4c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cb50:	681b      	ldr	r3, [r3, #0]
 800cb52:	619a      	str	r2, [r3, #24]
 800cb54:	e00e      	b.n	800cb74 <USB_EPStartXfer+0x131e>
        }
        else
        {
          len = ep->xfer_len;
 800cb56:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cb5a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cb5e:	681b      	ldr	r3, [r3, #0]
 800cb60:	699b      	ldr	r3, [r3, #24]
 800cb62:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 800cb66:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cb6a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cb6e:	681b      	ldr	r3, [r3, #0]
 800cb70:	2200      	movs	r2, #0
 800cb72:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800cb74:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cb78:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cb7c:	681b      	ldr	r3, [r3, #0]
 800cb7e:	785b      	ldrb	r3, [r3, #1]
 800cb80:	2b00      	cmp	r3, #0
 800cb82:	d178      	bne.n	800cc76 <USB_EPStartXfer+0x1420>
 800cb84:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cb88:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800cb8c:	681b      	ldr	r3, [r3, #0]
 800cb8e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800cb92:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cb96:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800cb9a:	681b      	ldr	r3, [r3, #0]
 800cb9c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800cba0:	b29b      	uxth	r3, r3
 800cba2:	461a      	mov	r2, r3
 800cba4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800cba8:	4413      	add	r3, r2
 800cbaa:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800cbae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cbb2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cbb6:	681b      	ldr	r3, [r3, #0]
 800cbb8:	781b      	ldrb	r3, [r3, #0]
 800cbba:	00da      	lsls	r2, r3, #3
 800cbbc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800cbc0:	4413      	add	r3, r2
 800cbc2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800cbc6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800cbca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cbce:	2b3e      	cmp	r3, #62	; 0x3e
 800cbd0:	d91d      	bls.n	800cc0e <USB_EPStartXfer+0x13b8>
 800cbd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cbd6:	095b      	lsrs	r3, r3, #5
 800cbd8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800cbdc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cbe0:	f003 031f 	and.w	r3, r3, #31
 800cbe4:	2b00      	cmp	r3, #0
 800cbe6:	d104      	bne.n	800cbf2 <USB_EPStartXfer+0x139c>
 800cbe8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800cbec:	3b01      	subs	r3, #1
 800cbee:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800cbf2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800cbf6:	b29b      	uxth	r3, r3
 800cbf8:	029b      	lsls	r3, r3, #10
 800cbfa:	b29b      	uxth	r3, r3
 800cbfc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cc00:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cc04:	b29a      	uxth	r2, r3
 800cc06:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800cc0a:	801a      	strh	r2, [r3, #0]
 800cc0c:	e064      	b.n	800ccd8 <USB_EPStartXfer+0x1482>
 800cc0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cc12:	2b00      	cmp	r3, #0
 800cc14:	d116      	bne.n	800cc44 <USB_EPStartXfer+0x13ee>
 800cc16:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800cc1a:	881b      	ldrh	r3, [r3, #0]
 800cc1c:	b29b      	uxth	r3, r3
 800cc1e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800cc22:	b29a      	uxth	r2, r3
 800cc24:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800cc28:	801a      	strh	r2, [r3, #0]
 800cc2a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800cc2e:	881b      	ldrh	r3, [r3, #0]
 800cc30:	b29b      	uxth	r3, r3
 800cc32:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cc36:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cc3a:	b29a      	uxth	r2, r3
 800cc3c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800cc40:	801a      	strh	r2, [r3, #0]
 800cc42:	e049      	b.n	800ccd8 <USB_EPStartXfer+0x1482>
 800cc44:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cc48:	085b      	lsrs	r3, r3, #1
 800cc4a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800cc4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cc52:	f003 0301 	and.w	r3, r3, #1
 800cc56:	2b00      	cmp	r3, #0
 800cc58:	d004      	beq.n	800cc64 <USB_EPStartXfer+0x140e>
 800cc5a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800cc5e:	3301      	adds	r3, #1
 800cc60:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800cc64:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800cc68:	b29b      	uxth	r3, r3
 800cc6a:	029b      	lsls	r3, r3, #10
 800cc6c:	b29a      	uxth	r2, r3
 800cc6e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800cc72:	801a      	strh	r2, [r3, #0]
 800cc74:	e030      	b.n	800ccd8 <USB_EPStartXfer+0x1482>
 800cc76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cc7a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cc7e:	681b      	ldr	r3, [r3, #0]
 800cc80:	785b      	ldrb	r3, [r3, #1]
 800cc82:	2b01      	cmp	r3, #1
 800cc84:	d128      	bne.n	800ccd8 <USB_EPStartXfer+0x1482>
 800cc86:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cc8a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800cc8e:	681b      	ldr	r3, [r3, #0]
 800cc90:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800cc94:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cc98:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800cc9c:	681b      	ldr	r3, [r3, #0]
 800cc9e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800cca2:	b29b      	uxth	r3, r3
 800cca4:	461a      	mov	r2, r3
 800cca6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800ccaa:	4413      	add	r3, r2
 800ccac:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800ccb0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ccb4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ccb8:	681b      	ldr	r3, [r3, #0]
 800ccba:	781b      	ldrb	r3, [r3, #0]
 800ccbc:	00da      	lsls	r2, r3, #3
 800ccbe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800ccc2:	4413      	add	r3, r2
 800ccc4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800ccc8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800cccc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ccd0:	b29a      	uxth	r2, r3
 800ccd2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800ccd6:	801a      	strh	r2, [r3, #0]
 800ccd8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ccdc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800cce0:	681b      	ldr	r3, [r3, #0]
 800cce2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800cce6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ccea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ccee:	681b      	ldr	r3, [r3, #0]
 800ccf0:	785b      	ldrb	r3, [r3, #1]
 800ccf2:	2b00      	cmp	r3, #0
 800ccf4:	d178      	bne.n	800cde8 <USB_EPStartXfer+0x1592>
 800ccf6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ccfa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ccfe:	681b      	ldr	r3, [r3, #0]
 800cd00:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800cd04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cd08:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800cd0c:	681b      	ldr	r3, [r3, #0]
 800cd0e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800cd12:	b29b      	uxth	r3, r3
 800cd14:	461a      	mov	r2, r3
 800cd16:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800cd1a:	4413      	add	r3, r2
 800cd1c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800cd20:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cd24:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cd28:	681b      	ldr	r3, [r3, #0]
 800cd2a:	781b      	ldrb	r3, [r3, #0]
 800cd2c:	00da      	lsls	r2, r3, #3
 800cd2e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800cd32:	4413      	add	r3, r2
 800cd34:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800cd38:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800cd3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cd40:	2b3e      	cmp	r3, #62	; 0x3e
 800cd42:	d91d      	bls.n	800cd80 <USB_EPStartXfer+0x152a>
 800cd44:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cd48:	095b      	lsrs	r3, r3, #5
 800cd4a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800cd4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cd52:	f003 031f 	and.w	r3, r3, #31
 800cd56:	2b00      	cmp	r3, #0
 800cd58:	d104      	bne.n	800cd64 <USB_EPStartXfer+0x150e>
 800cd5a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800cd5e:	3b01      	subs	r3, #1
 800cd60:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800cd64:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800cd68:	b29b      	uxth	r3, r3
 800cd6a:	029b      	lsls	r3, r3, #10
 800cd6c:	b29b      	uxth	r3, r3
 800cd6e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cd72:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cd76:	b29a      	uxth	r2, r3
 800cd78:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800cd7c:	801a      	strh	r2, [r3, #0]
 800cd7e:	e060      	b.n	800ce42 <USB_EPStartXfer+0x15ec>
 800cd80:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cd84:	2b00      	cmp	r3, #0
 800cd86:	d116      	bne.n	800cdb6 <USB_EPStartXfer+0x1560>
 800cd88:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800cd8c:	881b      	ldrh	r3, [r3, #0]
 800cd8e:	b29b      	uxth	r3, r3
 800cd90:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800cd94:	b29a      	uxth	r2, r3
 800cd96:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800cd9a:	801a      	strh	r2, [r3, #0]
 800cd9c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800cda0:	881b      	ldrh	r3, [r3, #0]
 800cda2:	b29b      	uxth	r3, r3
 800cda4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cda8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cdac:	b29a      	uxth	r2, r3
 800cdae:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800cdb2:	801a      	strh	r2, [r3, #0]
 800cdb4:	e045      	b.n	800ce42 <USB_EPStartXfer+0x15ec>
 800cdb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cdba:	085b      	lsrs	r3, r3, #1
 800cdbc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800cdc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cdc4:	f003 0301 	and.w	r3, r3, #1
 800cdc8:	2b00      	cmp	r3, #0
 800cdca:	d004      	beq.n	800cdd6 <USB_EPStartXfer+0x1580>
 800cdcc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800cdd0:	3301      	adds	r3, #1
 800cdd2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800cdd6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800cdda:	b29b      	uxth	r3, r3
 800cddc:	029b      	lsls	r3, r3, #10
 800cdde:	b29a      	uxth	r2, r3
 800cde0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800cde4:	801a      	strh	r2, [r3, #0]
 800cde6:	e02c      	b.n	800ce42 <USB_EPStartXfer+0x15ec>
 800cde8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cdec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800cdf0:	681b      	ldr	r3, [r3, #0]
 800cdf2:	785b      	ldrb	r3, [r3, #1]
 800cdf4:	2b01      	cmp	r3, #1
 800cdf6:	d124      	bne.n	800ce42 <USB_EPStartXfer+0x15ec>
 800cdf8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cdfc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ce00:	681b      	ldr	r3, [r3, #0]
 800ce02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ce06:	b29b      	uxth	r3, r3
 800ce08:	461a      	mov	r2, r3
 800ce0a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800ce0e:	4413      	add	r3, r2
 800ce10:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800ce14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ce18:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ce1c:	681b      	ldr	r3, [r3, #0]
 800ce1e:	781b      	ldrb	r3, [r3, #0]
 800ce20:	00da      	lsls	r2, r3, #3
 800ce22:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800ce26:	4413      	add	r3, r2
 800ce28:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800ce2c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800ce30:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ce34:	b29a      	uxth	r2, r3
 800ce36:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800ce3a:	801a      	strh	r2, [r3, #0]
 800ce3c:	e001      	b.n	800ce42 <USB_EPStartXfer+0x15ec>
      }
      else
      {
        return HAL_ERROR;
 800ce3e:	2301      	movs	r3, #1
 800ce40:	e03a      	b.n	800ceb8 <USB_EPStartXfer+0x1662>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800ce42:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ce46:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ce4a:	681a      	ldr	r2, [r3, #0]
 800ce4c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ce50:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ce54:	681b      	ldr	r3, [r3, #0]
 800ce56:	781b      	ldrb	r3, [r3, #0]
 800ce58:	009b      	lsls	r3, r3, #2
 800ce5a:	4413      	add	r3, r2
 800ce5c:	881b      	ldrh	r3, [r3, #0]
 800ce5e:	b29b      	uxth	r3, r3
 800ce60:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ce64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ce68:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800ce6c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800ce70:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800ce74:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800ce78:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800ce7c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800ce80:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800ce84:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ce88:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ce8c:	681a      	ldr	r2, [r3, #0]
 800ce8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ce92:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ce96:	681b      	ldr	r3, [r3, #0]
 800ce98:	781b      	ldrb	r3, [r3, #0]
 800ce9a:	009b      	lsls	r3, r3, #2
 800ce9c:	441a      	add	r2, r3
 800ce9e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800cea2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800cea6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ceaa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ceae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ceb2:	b29b      	uxth	r3, r3
 800ceb4:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800ceb6:	2300      	movs	r3, #0
}
 800ceb8:	4618      	mov	r0, r3
 800ceba:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800cebe:	46bd      	mov	sp, r7
 800cec0:	bd80      	pop	{r7, pc}

0800cec2 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800cec2:	b480      	push	{r7}
 800cec4:	b085      	sub	sp, #20
 800cec6:	af00      	add	r7, sp, #0
 800cec8:	6078      	str	r0, [r7, #4]
 800ceca:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800cecc:	683b      	ldr	r3, [r7, #0]
 800cece:	785b      	ldrb	r3, [r3, #1]
 800ced0:	2b00      	cmp	r3, #0
 800ced2:	d020      	beq.n	800cf16 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800ced4:	687a      	ldr	r2, [r7, #4]
 800ced6:	683b      	ldr	r3, [r7, #0]
 800ced8:	781b      	ldrb	r3, [r3, #0]
 800ceda:	009b      	lsls	r3, r3, #2
 800cedc:	4413      	add	r3, r2
 800cede:	881b      	ldrh	r3, [r3, #0]
 800cee0:	b29b      	uxth	r3, r3
 800cee2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800cee6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ceea:	81bb      	strh	r3, [r7, #12]
 800ceec:	89bb      	ldrh	r3, [r7, #12]
 800ceee:	f083 0310 	eor.w	r3, r3, #16
 800cef2:	81bb      	strh	r3, [r7, #12]
 800cef4:	687a      	ldr	r2, [r7, #4]
 800cef6:	683b      	ldr	r3, [r7, #0]
 800cef8:	781b      	ldrb	r3, [r3, #0]
 800cefa:	009b      	lsls	r3, r3, #2
 800cefc:	441a      	add	r2, r3
 800cefe:	89bb      	ldrh	r3, [r7, #12]
 800cf00:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800cf04:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800cf08:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cf0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cf10:	b29b      	uxth	r3, r3
 800cf12:	8013      	strh	r3, [r2, #0]
 800cf14:	e01f      	b.n	800cf56 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800cf16:	687a      	ldr	r2, [r7, #4]
 800cf18:	683b      	ldr	r3, [r7, #0]
 800cf1a:	781b      	ldrb	r3, [r3, #0]
 800cf1c:	009b      	lsls	r3, r3, #2
 800cf1e:	4413      	add	r3, r2
 800cf20:	881b      	ldrh	r3, [r3, #0]
 800cf22:	b29b      	uxth	r3, r3
 800cf24:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800cf28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cf2c:	81fb      	strh	r3, [r7, #14]
 800cf2e:	89fb      	ldrh	r3, [r7, #14]
 800cf30:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800cf34:	81fb      	strh	r3, [r7, #14]
 800cf36:	687a      	ldr	r2, [r7, #4]
 800cf38:	683b      	ldr	r3, [r7, #0]
 800cf3a:	781b      	ldrb	r3, [r3, #0]
 800cf3c:	009b      	lsls	r3, r3, #2
 800cf3e:	441a      	add	r2, r3
 800cf40:	89fb      	ldrh	r3, [r7, #14]
 800cf42:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800cf46:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800cf4a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cf4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cf52:	b29b      	uxth	r3, r3
 800cf54:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800cf56:	2300      	movs	r3, #0
}
 800cf58:	4618      	mov	r0, r3
 800cf5a:	3714      	adds	r7, #20
 800cf5c:	46bd      	mov	sp, r7
 800cf5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf62:	4770      	bx	lr

0800cf64 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800cf64:	b480      	push	{r7}
 800cf66:	b087      	sub	sp, #28
 800cf68:	af00      	add	r7, sp, #0
 800cf6a:	6078      	str	r0, [r7, #4]
 800cf6c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800cf6e:	683b      	ldr	r3, [r7, #0]
 800cf70:	7b1b      	ldrb	r3, [r3, #12]
 800cf72:	2b00      	cmp	r3, #0
 800cf74:	f040 809d 	bne.w	800d0b2 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800cf78:	683b      	ldr	r3, [r7, #0]
 800cf7a:	785b      	ldrb	r3, [r3, #1]
 800cf7c:	2b00      	cmp	r3, #0
 800cf7e:	d04c      	beq.n	800d01a <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800cf80:	687a      	ldr	r2, [r7, #4]
 800cf82:	683b      	ldr	r3, [r7, #0]
 800cf84:	781b      	ldrb	r3, [r3, #0]
 800cf86:	009b      	lsls	r3, r3, #2
 800cf88:	4413      	add	r3, r2
 800cf8a:	881b      	ldrh	r3, [r3, #0]
 800cf8c:	823b      	strh	r3, [r7, #16]
 800cf8e:	8a3b      	ldrh	r3, [r7, #16]
 800cf90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cf94:	2b00      	cmp	r3, #0
 800cf96:	d01b      	beq.n	800cfd0 <USB_EPClearStall+0x6c>
 800cf98:	687a      	ldr	r2, [r7, #4]
 800cf9a:	683b      	ldr	r3, [r7, #0]
 800cf9c:	781b      	ldrb	r3, [r3, #0]
 800cf9e:	009b      	lsls	r3, r3, #2
 800cfa0:	4413      	add	r3, r2
 800cfa2:	881b      	ldrh	r3, [r3, #0]
 800cfa4:	b29b      	uxth	r3, r3
 800cfa6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800cfaa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cfae:	81fb      	strh	r3, [r7, #14]
 800cfb0:	687a      	ldr	r2, [r7, #4]
 800cfb2:	683b      	ldr	r3, [r7, #0]
 800cfb4:	781b      	ldrb	r3, [r3, #0]
 800cfb6:	009b      	lsls	r3, r3, #2
 800cfb8:	441a      	add	r2, r3
 800cfba:	89fb      	ldrh	r3, [r7, #14]
 800cfbc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800cfc0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800cfc4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cfc8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800cfcc:	b29b      	uxth	r3, r3
 800cfce:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800cfd0:	683b      	ldr	r3, [r7, #0]
 800cfd2:	78db      	ldrb	r3, [r3, #3]
 800cfd4:	2b01      	cmp	r3, #1
 800cfd6:	d06c      	beq.n	800d0b2 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800cfd8:	687a      	ldr	r2, [r7, #4]
 800cfda:	683b      	ldr	r3, [r7, #0]
 800cfdc:	781b      	ldrb	r3, [r3, #0]
 800cfde:	009b      	lsls	r3, r3, #2
 800cfe0:	4413      	add	r3, r2
 800cfe2:	881b      	ldrh	r3, [r3, #0]
 800cfe4:	b29b      	uxth	r3, r3
 800cfe6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800cfea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cfee:	81bb      	strh	r3, [r7, #12]
 800cff0:	89bb      	ldrh	r3, [r7, #12]
 800cff2:	f083 0320 	eor.w	r3, r3, #32
 800cff6:	81bb      	strh	r3, [r7, #12]
 800cff8:	687a      	ldr	r2, [r7, #4]
 800cffa:	683b      	ldr	r3, [r7, #0]
 800cffc:	781b      	ldrb	r3, [r3, #0]
 800cffe:	009b      	lsls	r3, r3, #2
 800d000:	441a      	add	r2, r3
 800d002:	89bb      	ldrh	r3, [r7, #12]
 800d004:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d008:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d00c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d010:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d014:	b29b      	uxth	r3, r3
 800d016:	8013      	strh	r3, [r2, #0]
 800d018:	e04b      	b.n	800d0b2 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800d01a:	687a      	ldr	r2, [r7, #4]
 800d01c:	683b      	ldr	r3, [r7, #0]
 800d01e:	781b      	ldrb	r3, [r3, #0]
 800d020:	009b      	lsls	r3, r3, #2
 800d022:	4413      	add	r3, r2
 800d024:	881b      	ldrh	r3, [r3, #0]
 800d026:	82fb      	strh	r3, [r7, #22]
 800d028:	8afb      	ldrh	r3, [r7, #22]
 800d02a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d02e:	2b00      	cmp	r3, #0
 800d030:	d01b      	beq.n	800d06a <USB_EPClearStall+0x106>
 800d032:	687a      	ldr	r2, [r7, #4]
 800d034:	683b      	ldr	r3, [r7, #0]
 800d036:	781b      	ldrb	r3, [r3, #0]
 800d038:	009b      	lsls	r3, r3, #2
 800d03a:	4413      	add	r3, r2
 800d03c:	881b      	ldrh	r3, [r3, #0]
 800d03e:	b29b      	uxth	r3, r3
 800d040:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d044:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d048:	82bb      	strh	r3, [r7, #20]
 800d04a:	687a      	ldr	r2, [r7, #4]
 800d04c:	683b      	ldr	r3, [r7, #0]
 800d04e:	781b      	ldrb	r3, [r3, #0]
 800d050:	009b      	lsls	r3, r3, #2
 800d052:	441a      	add	r2, r3
 800d054:	8abb      	ldrh	r3, [r7, #20]
 800d056:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d05a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d05e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800d062:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d066:	b29b      	uxth	r3, r3
 800d068:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800d06a:	687a      	ldr	r2, [r7, #4]
 800d06c:	683b      	ldr	r3, [r7, #0]
 800d06e:	781b      	ldrb	r3, [r3, #0]
 800d070:	009b      	lsls	r3, r3, #2
 800d072:	4413      	add	r3, r2
 800d074:	881b      	ldrh	r3, [r3, #0]
 800d076:	b29b      	uxth	r3, r3
 800d078:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800d07c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d080:	827b      	strh	r3, [r7, #18]
 800d082:	8a7b      	ldrh	r3, [r7, #18]
 800d084:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800d088:	827b      	strh	r3, [r7, #18]
 800d08a:	8a7b      	ldrh	r3, [r7, #18]
 800d08c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800d090:	827b      	strh	r3, [r7, #18]
 800d092:	687a      	ldr	r2, [r7, #4]
 800d094:	683b      	ldr	r3, [r7, #0]
 800d096:	781b      	ldrb	r3, [r3, #0]
 800d098:	009b      	lsls	r3, r3, #2
 800d09a:	441a      	add	r2, r3
 800d09c:	8a7b      	ldrh	r3, [r7, #18]
 800d09e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d0a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d0a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d0aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d0ae:	b29b      	uxth	r3, r3
 800d0b0:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800d0b2:	2300      	movs	r3, #0
}
 800d0b4:	4618      	mov	r0, r3
 800d0b6:	371c      	adds	r7, #28
 800d0b8:	46bd      	mov	sp, r7
 800d0ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0be:	4770      	bx	lr

0800d0c0 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800d0c0:	b480      	push	{r7}
 800d0c2:	b083      	sub	sp, #12
 800d0c4:	af00      	add	r7, sp, #0
 800d0c6:	6078      	str	r0, [r7, #4]
 800d0c8:	460b      	mov	r3, r1
 800d0ca:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800d0cc:	78fb      	ldrb	r3, [r7, #3]
 800d0ce:	2b00      	cmp	r3, #0
 800d0d0:	d103      	bne.n	800d0da <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	2280      	movs	r2, #128	; 0x80
 800d0d6:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800d0da:	2300      	movs	r3, #0
}
 800d0dc:	4618      	mov	r0, r3
 800d0de:	370c      	adds	r7, #12
 800d0e0:	46bd      	mov	sp, r7
 800d0e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0e6:	4770      	bx	lr

0800d0e8 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800d0e8:	b480      	push	{r7}
 800d0ea:	b083      	sub	sp, #12
 800d0ec:	af00      	add	r7, sp, #0
 800d0ee:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800d0f6:	b29b      	uxth	r3, r3
 800d0f8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d0fc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d100:	b29a      	uxth	r2, r3
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 800d108:	2300      	movs	r3, #0
}
 800d10a:	4618      	mov	r0, r3
 800d10c:	370c      	adds	r7, #12
 800d10e:	46bd      	mov	sp, r7
 800d110:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d114:	4770      	bx	lr

0800d116 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800d116:	b480      	push	{r7}
 800d118:	b085      	sub	sp, #20
 800d11a:	af00      	add	r7, sp, #0
 800d11c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800d124:	b29b      	uxth	r3, r3
 800d126:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800d128:	68fb      	ldr	r3, [r7, #12]
}
 800d12a:	4618      	mov	r0, r3
 800d12c:	3714      	adds	r7, #20
 800d12e:	46bd      	mov	sp, r7
 800d130:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d134:	4770      	bx	lr

0800d136 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800d136:	b480      	push	{r7}
 800d138:	b08d      	sub	sp, #52	; 0x34
 800d13a:	af00      	add	r7, sp, #0
 800d13c:	60f8      	str	r0, [r7, #12]
 800d13e:	60b9      	str	r1, [r7, #8]
 800d140:	4611      	mov	r1, r2
 800d142:	461a      	mov	r2, r3
 800d144:	460b      	mov	r3, r1
 800d146:	80fb      	strh	r3, [r7, #6]
 800d148:	4613      	mov	r3, r2
 800d14a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800d14c:	88bb      	ldrh	r3, [r7, #4]
 800d14e:	3301      	adds	r3, #1
 800d150:	085b      	lsrs	r3, r3, #1
 800d152:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 800d154:	68fb      	ldr	r3, [r7, #12]
 800d156:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t temp1;
  uint32_t temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800d158:	68bb      	ldr	r3, [r7, #8]
 800d15a:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800d15c:	88fa      	ldrh	r2, [r7, #6]
 800d15e:	69fb      	ldr	r3, [r7, #28]
 800d160:	4413      	add	r3, r2
 800d162:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d166:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 800d168:	6a3b      	ldr	r3, [r7, #32]
 800d16a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d16c:	e01b      	b.n	800d1a6 <USB_WritePMA+0x70>
  {
    temp1 = *pBuf;
 800d16e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d170:	781b      	ldrb	r3, [r3, #0]
 800d172:	61bb      	str	r3, [r7, #24]
    pBuf++;
 800d174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d176:	3301      	adds	r3, #1
 800d178:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 800d17a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d17c:	781b      	ldrb	r3, [r3, #0]
 800d17e:	b29b      	uxth	r3, r3
 800d180:	021b      	lsls	r3, r3, #8
 800d182:	b29b      	uxth	r3, r3
 800d184:	461a      	mov	r2, r3
 800d186:	69bb      	ldr	r3, [r7, #24]
 800d188:	4313      	orrs	r3, r2
 800d18a:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 800d18c:	697b      	ldr	r3, [r7, #20]
 800d18e:	b29a      	uxth	r2, r3
 800d190:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d192:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800d194:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d196:	3302      	adds	r3, #2
 800d198:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800d19a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d19c:	3301      	adds	r3, #1
 800d19e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 800d1a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1a2:	3b01      	subs	r3, #1
 800d1a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d1a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1a8:	2b00      	cmp	r3, #0
 800d1aa:	d1e0      	bne.n	800d16e <USB_WritePMA+0x38>
  }
}
 800d1ac:	bf00      	nop
 800d1ae:	bf00      	nop
 800d1b0:	3734      	adds	r7, #52	; 0x34
 800d1b2:	46bd      	mov	sp, r7
 800d1b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1b8:	4770      	bx	lr

0800d1ba <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800d1ba:	b480      	push	{r7}
 800d1bc:	b08b      	sub	sp, #44	; 0x2c
 800d1be:	af00      	add	r7, sp, #0
 800d1c0:	60f8      	str	r0, [r7, #12]
 800d1c2:	60b9      	str	r1, [r7, #8]
 800d1c4:	4611      	mov	r1, r2
 800d1c6:	461a      	mov	r2, r3
 800d1c8:	460b      	mov	r3, r1
 800d1ca:	80fb      	strh	r3, [r7, #6]
 800d1cc:	4613      	mov	r3, r2
 800d1ce:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800d1d0:	88bb      	ldrh	r3, [r7, #4]
 800d1d2:	085b      	lsrs	r3, r3, #1
 800d1d4:	b29b      	uxth	r3, r3
 800d1d6:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800d1d8:	68fb      	ldr	r3, [r7, #12]
 800d1da:	617b      	str	r3, [r7, #20]
  uint32_t i;
  uint32_t temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800d1dc:	68bb      	ldr	r3, [r7, #8]
 800d1de:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800d1e0:	88fa      	ldrh	r2, [r7, #6]
 800d1e2:	697b      	ldr	r3, [r7, #20]
 800d1e4:	4413      	add	r3, r2
 800d1e6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d1ea:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800d1ec:	69bb      	ldr	r3, [r7, #24]
 800d1ee:	627b      	str	r3, [r7, #36]	; 0x24
 800d1f0:	e018      	b.n	800d224 <USB_ReadPMA+0x6a>
  {
    temp = *(__IO uint16_t *)pdwVal;
 800d1f2:	6a3b      	ldr	r3, [r7, #32]
 800d1f4:	881b      	ldrh	r3, [r3, #0]
 800d1f6:	b29b      	uxth	r3, r3
 800d1f8:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800d1fa:	6a3b      	ldr	r3, [r7, #32]
 800d1fc:	3302      	adds	r3, #2
 800d1fe:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800d200:	693b      	ldr	r3, [r7, #16]
 800d202:	b2da      	uxtb	r2, r3
 800d204:	69fb      	ldr	r3, [r7, #28]
 800d206:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800d208:	69fb      	ldr	r3, [r7, #28]
 800d20a:	3301      	adds	r3, #1
 800d20c:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800d20e:	693b      	ldr	r3, [r7, #16]
 800d210:	0a1b      	lsrs	r3, r3, #8
 800d212:	b2da      	uxtb	r2, r3
 800d214:	69fb      	ldr	r3, [r7, #28]
 800d216:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800d218:	69fb      	ldr	r3, [r7, #28]
 800d21a:	3301      	adds	r3, #1
 800d21c:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 800d21e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d220:	3b01      	subs	r3, #1
 800d222:	627b      	str	r3, [r7, #36]	; 0x24
 800d224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d226:	2b00      	cmp	r3, #0
 800d228:	d1e3      	bne.n	800d1f2 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800d22a:	88bb      	ldrh	r3, [r7, #4]
 800d22c:	f003 0301 	and.w	r3, r3, #1
 800d230:	b29b      	uxth	r3, r3
 800d232:	2b00      	cmp	r3, #0
 800d234:	d007      	beq.n	800d246 <USB_ReadPMA+0x8c>
  {
    temp = *pdwVal;
 800d236:	6a3b      	ldr	r3, [r7, #32]
 800d238:	881b      	ldrh	r3, [r3, #0]
 800d23a:	b29b      	uxth	r3, r3
 800d23c:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800d23e:	693b      	ldr	r3, [r7, #16]
 800d240:	b2da      	uxtb	r2, r3
 800d242:	69fb      	ldr	r3, [r7, #28]
 800d244:	701a      	strb	r2, [r3, #0]
  }
}
 800d246:	bf00      	nop
 800d248:	372c      	adds	r7, #44	; 0x2c
 800d24a:	46bd      	mov	sp, r7
 800d24c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d250:	4770      	bx	lr

0800d252 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d252:	b580      	push	{r7, lr}
 800d254:	b084      	sub	sp, #16
 800d256:	af00      	add	r7, sp, #0
 800d258:	6078      	str	r0, [r7, #4]
 800d25a:	460b      	mov	r3, r1
 800d25c:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800d25e:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800d262:	f004 fb07 	bl	8011874 <USBD_static_malloc>
 800d266:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800d268:	68fb      	ldr	r3, [r7, #12]
 800d26a:	2b00      	cmp	r3, #0
 800d26c:	d105      	bne.n	800d27a <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	2200      	movs	r2, #0
 800d272:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800d276:	2302      	movs	r3, #2
 800d278:	e066      	b.n	800d348 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	68fa      	ldr	r2, [r7, #12]
 800d27e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	7c1b      	ldrb	r3, [r3, #16]
 800d286:	2b00      	cmp	r3, #0
 800d288:	d119      	bne.n	800d2be <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800d28a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d28e:	2202      	movs	r2, #2
 800d290:	2181      	movs	r1, #129	; 0x81
 800d292:	6878      	ldr	r0, [r7, #4]
 800d294:	f004 f993 	bl	80115be <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	2201      	movs	r2, #1
 800d29c:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800d29e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d2a2:	2202      	movs	r2, #2
 800d2a4:	2101      	movs	r1, #1
 800d2a6:	6878      	ldr	r0, [r7, #4]
 800d2a8:	f004 f989 	bl	80115be <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	2201      	movs	r2, #1
 800d2b0:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	2210      	movs	r2, #16
 800d2b8:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800d2bc:	e016      	b.n	800d2ec <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800d2be:	2340      	movs	r3, #64	; 0x40
 800d2c0:	2202      	movs	r2, #2
 800d2c2:	2181      	movs	r1, #129	; 0x81
 800d2c4:	6878      	ldr	r0, [r7, #4]
 800d2c6:	f004 f97a 	bl	80115be <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	2201      	movs	r2, #1
 800d2ce:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800d2d0:	2340      	movs	r3, #64	; 0x40
 800d2d2:	2202      	movs	r2, #2
 800d2d4:	2101      	movs	r1, #1
 800d2d6:	6878      	ldr	r0, [r7, #4]
 800d2d8:	f004 f971 	bl	80115be <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	2201      	movs	r2, #1
 800d2e0:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	2210      	movs	r2, #16
 800d2e8:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800d2ec:	2308      	movs	r3, #8
 800d2ee:	2203      	movs	r2, #3
 800d2f0:	2182      	movs	r1, #130	; 0x82
 800d2f2:	6878      	ldr	r0, [r7, #4]
 800d2f4:	f004 f963 	bl	80115be <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800d2f8:	687b      	ldr	r3, [r7, #4]
 800d2fa:	2201      	movs	r2, #1
 800d2fc:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d306:	681b      	ldr	r3, [r3, #0]
 800d308:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800d30a:	68fb      	ldr	r3, [r7, #12]
 800d30c:	2200      	movs	r2, #0
 800d30e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800d312:	68fb      	ldr	r3, [r7, #12]
 800d314:	2200      	movs	r2, #0
 800d316:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	7c1b      	ldrb	r3, [r3, #16]
 800d31e:	2b00      	cmp	r3, #0
 800d320:	d109      	bne.n	800d336 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800d322:	68fb      	ldr	r3, [r7, #12]
 800d324:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d328:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d32c:	2101      	movs	r1, #1
 800d32e:	6878      	ldr	r0, [r7, #4]
 800d330:	f004 fa35 	bl	801179e <USBD_LL_PrepareReceive>
 800d334:	e007      	b.n	800d346 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800d336:	68fb      	ldr	r3, [r7, #12]
 800d338:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d33c:	2340      	movs	r3, #64	; 0x40
 800d33e:	2101      	movs	r1, #1
 800d340:	6878      	ldr	r0, [r7, #4]
 800d342:	f004 fa2c 	bl	801179e <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800d346:	2300      	movs	r3, #0
}
 800d348:	4618      	mov	r0, r3
 800d34a:	3710      	adds	r7, #16
 800d34c:	46bd      	mov	sp, r7
 800d34e:	bd80      	pop	{r7, pc}

0800d350 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d350:	b580      	push	{r7, lr}
 800d352:	b082      	sub	sp, #8
 800d354:	af00      	add	r7, sp, #0
 800d356:	6078      	str	r0, [r7, #4]
 800d358:	460b      	mov	r3, r1
 800d35a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800d35c:	2181      	movs	r1, #129	; 0x81
 800d35e:	6878      	ldr	r0, [r7, #4]
 800d360:	f004 f953 	bl	801160a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	2200      	movs	r2, #0
 800d368:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800d36a:	2101      	movs	r1, #1
 800d36c:	6878      	ldr	r0, [r7, #4]
 800d36e:	f004 f94c 	bl	801160a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800d372:	687b      	ldr	r3, [r7, #4]
 800d374:	2200      	movs	r2, #0
 800d376:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800d37a:	2182      	movs	r1, #130	; 0x82
 800d37c:	6878      	ldr	r0, [r7, #4]
 800d37e:	f004 f944 	bl	801160a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800d382:	687b      	ldr	r3, [r7, #4]
 800d384:	2200      	movs	r2, #0
 800d386:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	2200      	movs	r2, #0
 800d38e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d398:	2b00      	cmp	r3, #0
 800d39a:	d00e      	beq.n	800d3ba <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d3a2:	685b      	ldr	r3, [r3, #4]
 800d3a4:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d3ac:	4618      	mov	r0, r3
 800d3ae:	f004 fa6f 	bl	8011890 <USBD_static_free>
    pdev->pClassData = NULL;
 800d3b2:	687b      	ldr	r3, [r7, #4]
 800d3b4:	2200      	movs	r2, #0
 800d3b6:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800d3ba:	2300      	movs	r3, #0
}
 800d3bc:	4618      	mov	r0, r3
 800d3be:	3708      	adds	r7, #8
 800d3c0:	46bd      	mov	sp, r7
 800d3c2:	bd80      	pop	{r7, pc}

0800d3c4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800d3c4:	b580      	push	{r7, lr}
 800d3c6:	b086      	sub	sp, #24
 800d3c8:	af00      	add	r7, sp, #0
 800d3ca:	6078      	str	r0, [r7, #4]
 800d3cc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d3d4:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800d3d6:	2300      	movs	r3, #0
 800d3d8:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800d3da:	2300      	movs	r3, #0
 800d3dc:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800d3de:	2300      	movs	r3, #0
 800d3e0:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800d3e2:	693b      	ldr	r3, [r7, #16]
 800d3e4:	2b00      	cmp	r3, #0
 800d3e6:	d101      	bne.n	800d3ec <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800d3e8:	2303      	movs	r3, #3
 800d3ea:	e0af      	b.n	800d54c <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d3ec:	683b      	ldr	r3, [r7, #0]
 800d3ee:	781b      	ldrb	r3, [r3, #0]
 800d3f0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d3f4:	2b00      	cmp	r3, #0
 800d3f6:	d03f      	beq.n	800d478 <USBD_CDC_Setup+0xb4>
 800d3f8:	2b20      	cmp	r3, #32
 800d3fa:	f040 809f 	bne.w	800d53c <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800d3fe:	683b      	ldr	r3, [r7, #0]
 800d400:	88db      	ldrh	r3, [r3, #6]
 800d402:	2b00      	cmp	r3, #0
 800d404:	d02e      	beq.n	800d464 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800d406:	683b      	ldr	r3, [r7, #0]
 800d408:	781b      	ldrb	r3, [r3, #0]
 800d40a:	b25b      	sxtb	r3, r3
 800d40c:	2b00      	cmp	r3, #0
 800d40e:	da16      	bge.n	800d43e <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d416:	689b      	ldr	r3, [r3, #8]
 800d418:	683a      	ldr	r2, [r7, #0]
 800d41a:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800d41c:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800d41e:	683a      	ldr	r2, [r7, #0]
 800d420:	88d2      	ldrh	r2, [r2, #6]
 800d422:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800d424:	683b      	ldr	r3, [r7, #0]
 800d426:	88db      	ldrh	r3, [r3, #6]
 800d428:	2b07      	cmp	r3, #7
 800d42a:	bf28      	it	cs
 800d42c:	2307      	movcs	r3, #7
 800d42e:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800d430:	693b      	ldr	r3, [r7, #16]
 800d432:	89fa      	ldrh	r2, [r7, #14]
 800d434:	4619      	mov	r1, r3
 800d436:	6878      	ldr	r0, [r7, #4]
 800d438:	f001 fa9f 	bl	800e97a <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800d43c:	e085      	b.n	800d54a <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800d43e:	683b      	ldr	r3, [r7, #0]
 800d440:	785a      	ldrb	r2, [r3, #1]
 800d442:	693b      	ldr	r3, [r7, #16]
 800d444:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800d448:	683b      	ldr	r3, [r7, #0]
 800d44a:	88db      	ldrh	r3, [r3, #6]
 800d44c:	b2da      	uxtb	r2, r3
 800d44e:	693b      	ldr	r3, [r7, #16]
 800d450:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800d454:	6939      	ldr	r1, [r7, #16]
 800d456:	683b      	ldr	r3, [r7, #0]
 800d458:	88db      	ldrh	r3, [r3, #6]
 800d45a:	461a      	mov	r2, r3
 800d45c:	6878      	ldr	r0, [r7, #4]
 800d45e:	f001 fab8 	bl	800e9d2 <USBD_CtlPrepareRx>
      break;
 800d462:	e072      	b.n	800d54a <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d46a:	689b      	ldr	r3, [r3, #8]
 800d46c:	683a      	ldr	r2, [r7, #0]
 800d46e:	7850      	ldrb	r0, [r2, #1]
 800d470:	2200      	movs	r2, #0
 800d472:	6839      	ldr	r1, [r7, #0]
 800d474:	4798      	blx	r3
      break;
 800d476:	e068      	b.n	800d54a <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d478:	683b      	ldr	r3, [r7, #0]
 800d47a:	785b      	ldrb	r3, [r3, #1]
 800d47c:	2b0b      	cmp	r3, #11
 800d47e:	d852      	bhi.n	800d526 <USBD_CDC_Setup+0x162>
 800d480:	a201      	add	r2, pc, #4	; (adr r2, 800d488 <USBD_CDC_Setup+0xc4>)
 800d482:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d486:	bf00      	nop
 800d488:	0800d4b9 	.word	0x0800d4b9
 800d48c:	0800d535 	.word	0x0800d535
 800d490:	0800d527 	.word	0x0800d527
 800d494:	0800d527 	.word	0x0800d527
 800d498:	0800d527 	.word	0x0800d527
 800d49c:	0800d527 	.word	0x0800d527
 800d4a0:	0800d527 	.word	0x0800d527
 800d4a4:	0800d527 	.word	0x0800d527
 800d4a8:	0800d527 	.word	0x0800d527
 800d4ac:	0800d527 	.word	0x0800d527
 800d4b0:	0800d4e3 	.word	0x0800d4e3
 800d4b4:	0800d50d 	.word	0x0800d50d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d4be:	b2db      	uxtb	r3, r3
 800d4c0:	2b03      	cmp	r3, #3
 800d4c2:	d107      	bne.n	800d4d4 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800d4c4:	f107 030a 	add.w	r3, r7, #10
 800d4c8:	2202      	movs	r2, #2
 800d4ca:	4619      	mov	r1, r3
 800d4cc:	6878      	ldr	r0, [r7, #4]
 800d4ce:	f001 fa54 	bl	800e97a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800d4d2:	e032      	b.n	800d53a <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800d4d4:	6839      	ldr	r1, [r7, #0]
 800d4d6:	6878      	ldr	r0, [r7, #4]
 800d4d8:	f001 f9de 	bl	800e898 <USBD_CtlError>
            ret = USBD_FAIL;
 800d4dc:	2303      	movs	r3, #3
 800d4de:	75fb      	strb	r3, [r7, #23]
          break;
 800d4e0:	e02b      	b.n	800d53a <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d4e8:	b2db      	uxtb	r3, r3
 800d4ea:	2b03      	cmp	r3, #3
 800d4ec:	d107      	bne.n	800d4fe <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800d4ee:	f107 030d 	add.w	r3, r7, #13
 800d4f2:	2201      	movs	r2, #1
 800d4f4:	4619      	mov	r1, r3
 800d4f6:	6878      	ldr	r0, [r7, #4]
 800d4f8:	f001 fa3f 	bl	800e97a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800d4fc:	e01d      	b.n	800d53a <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800d4fe:	6839      	ldr	r1, [r7, #0]
 800d500:	6878      	ldr	r0, [r7, #4]
 800d502:	f001 f9c9 	bl	800e898 <USBD_CtlError>
            ret = USBD_FAIL;
 800d506:	2303      	movs	r3, #3
 800d508:	75fb      	strb	r3, [r7, #23]
          break;
 800d50a:	e016      	b.n	800d53a <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d512:	b2db      	uxtb	r3, r3
 800d514:	2b03      	cmp	r3, #3
 800d516:	d00f      	beq.n	800d538 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800d518:	6839      	ldr	r1, [r7, #0]
 800d51a:	6878      	ldr	r0, [r7, #4]
 800d51c:	f001 f9bc 	bl	800e898 <USBD_CtlError>
            ret = USBD_FAIL;
 800d520:	2303      	movs	r3, #3
 800d522:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800d524:	e008      	b.n	800d538 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800d526:	6839      	ldr	r1, [r7, #0]
 800d528:	6878      	ldr	r0, [r7, #4]
 800d52a:	f001 f9b5 	bl	800e898 <USBD_CtlError>
          ret = USBD_FAIL;
 800d52e:	2303      	movs	r3, #3
 800d530:	75fb      	strb	r3, [r7, #23]
          break;
 800d532:	e002      	b.n	800d53a <USBD_CDC_Setup+0x176>
          break;
 800d534:	bf00      	nop
 800d536:	e008      	b.n	800d54a <USBD_CDC_Setup+0x186>
          break;
 800d538:	bf00      	nop
      }
      break;
 800d53a:	e006      	b.n	800d54a <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800d53c:	6839      	ldr	r1, [r7, #0]
 800d53e:	6878      	ldr	r0, [r7, #4]
 800d540:	f001 f9aa 	bl	800e898 <USBD_CtlError>
      ret = USBD_FAIL;
 800d544:	2303      	movs	r3, #3
 800d546:	75fb      	strb	r3, [r7, #23]
      break;
 800d548:	bf00      	nop
  }

  return (uint8_t)ret;
 800d54a:	7dfb      	ldrb	r3, [r7, #23]
}
 800d54c:	4618      	mov	r0, r3
 800d54e:	3718      	adds	r7, #24
 800d550:	46bd      	mov	sp, r7
 800d552:	bd80      	pop	{r7, pc}

0800d554 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800d554:	b580      	push	{r7, lr}
 800d556:	b084      	sub	sp, #16
 800d558:	af00      	add	r7, sp, #0
 800d55a:	6078      	str	r0, [r7, #4]
 800d55c:	460b      	mov	r3, r1
 800d55e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d566:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d56e:	2b00      	cmp	r3, #0
 800d570:	d101      	bne.n	800d576 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800d572:	2303      	movs	r3, #3
 800d574:	e04f      	b.n	800d616 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800d576:	687b      	ldr	r3, [r7, #4]
 800d578:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d57c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800d57e:	78fa      	ldrb	r2, [r7, #3]
 800d580:	6879      	ldr	r1, [r7, #4]
 800d582:	4613      	mov	r3, r2
 800d584:	009b      	lsls	r3, r3, #2
 800d586:	4413      	add	r3, r2
 800d588:	009b      	lsls	r3, r3, #2
 800d58a:	440b      	add	r3, r1
 800d58c:	3318      	adds	r3, #24
 800d58e:	681b      	ldr	r3, [r3, #0]
 800d590:	2b00      	cmp	r3, #0
 800d592:	d029      	beq.n	800d5e8 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800d594:	78fa      	ldrb	r2, [r7, #3]
 800d596:	6879      	ldr	r1, [r7, #4]
 800d598:	4613      	mov	r3, r2
 800d59a:	009b      	lsls	r3, r3, #2
 800d59c:	4413      	add	r3, r2
 800d59e:	009b      	lsls	r3, r3, #2
 800d5a0:	440b      	add	r3, r1
 800d5a2:	3318      	adds	r3, #24
 800d5a4:	681a      	ldr	r2, [r3, #0]
 800d5a6:	78f9      	ldrb	r1, [r7, #3]
 800d5a8:	68f8      	ldr	r0, [r7, #12]
 800d5aa:	460b      	mov	r3, r1
 800d5ac:	009b      	lsls	r3, r3, #2
 800d5ae:	440b      	add	r3, r1
 800d5b0:	00db      	lsls	r3, r3, #3
 800d5b2:	4403      	add	r3, r0
 800d5b4:	3338      	adds	r3, #56	; 0x38
 800d5b6:	681b      	ldr	r3, [r3, #0]
 800d5b8:	fbb2 f1f3 	udiv	r1, r2, r3
 800d5bc:	fb01 f303 	mul.w	r3, r1, r3
 800d5c0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800d5c2:	2b00      	cmp	r3, #0
 800d5c4:	d110      	bne.n	800d5e8 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800d5c6:	78fa      	ldrb	r2, [r7, #3]
 800d5c8:	6879      	ldr	r1, [r7, #4]
 800d5ca:	4613      	mov	r3, r2
 800d5cc:	009b      	lsls	r3, r3, #2
 800d5ce:	4413      	add	r3, r2
 800d5d0:	009b      	lsls	r3, r3, #2
 800d5d2:	440b      	add	r3, r1
 800d5d4:	3318      	adds	r3, #24
 800d5d6:	2200      	movs	r2, #0
 800d5d8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800d5da:	78f9      	ldrb	r1, [r7, #3]
 800d5dc:	2300      	movs	r3, #0
 800d5de:	2200      	movs	r2, #0
 800d5e0:	6878      	ldr	r0, [r7, #4]
 800d5e2:	f004 f8bb 	bl	801175c <USBD_LL_Transmit>
 800d5e6:	e015      	b.n	800d614 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800d5e8:	68bb      	ldr	r3, [r7, #8]
 800d5ea:	2200      	movs	r2, #0
 800d5ec:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d5f6:	691b      	ldr	r3, [r3, #16]
 800d5f8:	2b00      	cmp	r3, #0
 800d5fa:	d00b      	beq.n	800d614 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d602:	691b      	ldr	r3, [r3, #16]
 800d604:	68ba      	ldr	r2, [r7, #8]
 800d606:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800d60a:	68ba      	ldr	r2, [r7, #8]
 800d60c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800d610:	78fa      	ldrb	r2, [r7, #3]
 800d612:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800d614:	2300      	movs	r3, #0
}
 800d616:	4618      	mov	r0, r3
 800d618:	3710      	adds	r7, #16
 800d61a:	46bd      	mov	sp, r7
 800d61c:	bd80      	pop	{r7, pc}

0800d61e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800d61e:	b580      	push	{r7, lr}
 800d620:	b084      	sub	sp, #16
 800d622:	af00      	add	r7, sp, #0
 800d624:	6078      	str	r0, [r7, #4]
 800d626:	460b      	mov	r3, r1
 800d628:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d630:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d638:	2b00      	cmp	r3, #0
 800d63a:	d101      	bne.n	800d640 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800d63c:	2303      	movs	r3, #3
 800d63e:	e015      	b.n	800d66c <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800d640:	78fb      	ldrb	r3, [r7, #3]
 800d642:	4619      	mov	r1, r3
 800d644:	6878      	ldr	r0, [r7, #4]
 800d646:	f004 f8cb 	bl	80117e0 <USBD_LL_GetRxDataSize>
 800d64a:	4602      	mov	r2, r0
 800d64c:	68fb      	ldr	r3, [r7, #12]
 800d64e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d658:	68db      	ldr	r3, [r3, #12]
 800d65a:	68fa      	ldr	r2, [r7, #12]
 800d65c:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800d660:	68fa      	ldr	r2, [r7, #12]
 800d662:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800d666:	4611      	mov	r1, r2
 800d668:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800d66a:	2300      	movs	r3, #0
}
 800d66c:	4618      	mov	r0, r3
 800d66e:	3710      	adds	r7, #16
 800d670:	46bd      	mov	sp, r7
 800d672:	bd80      	pop	{r7, pc}

0800d674 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800d674:	b580      	push	{r7, lr}
 800d676:	b084      	sub	sp, #16
 800d678:	af00      	add	r7, sp, #0
 800d67a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d682:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800d684:	68fb      	ldr	r3, [r7, #12]
 800d686:	2b00      	cmp	r3, #0
 800d688:	d101      	bne.n	800d68e <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800d68a:	2303      	movs	r3, #3
 800d68c:	e01b      	b.n	800d6c6 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800d68e:	687b      	ldr	r3, [r7, #4]
 800d690:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d694:	2b00      	cmp	r3, #0
 800d696:	d015      	beq.n	800d6c4 <USBD_CDC_EP0_RxReady+0x50>
 800d698:	68fb      	ldr	r3, [r7, #12]
 800d69a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800d69e:	2bff      	cmp	r3, #255	; 0xff
 800d6a0:	d010      	beq.n	800d6c4 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800d6a2:	687b      	ldr	r3, [r7, #4]
 800d6a4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d6a8:	689b      	ldr	r3, [r3, #8]
 800d6aa:	68fa      	ldr	r2, [r7, #12]
 800d6ac:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800d6b0:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800d6b2:	68fa      	ldr	r2, [r7, #12]
 800d6b4:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800d6b8:	b292      	uxth	r2, r2
 800d6ba:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800d6bc:	68fb      	ldr	r3, [r7, #12]
 800d6be:	22ff      	movs	r2, #255	; 0xff
 800d6c0:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800d6c4:	2300      	movs	r3, #0
}
 800d6c6:	4618      	mov	r0, r3
 800d6c8:	3710      	adds	r7, #16
 800d6ca:	46bd      	mov	sp, r7
 800d6cc:	bd80      	pop	{r7, pc}
	...

0800d6d0 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800d6d0:	b480      	push	{r7}
 800d6d2:	b083      	sub	sp, #12
 800d6d4:	af00      	add	r7, sp, #0
 800d6d6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	2243      	movs	r2, #67	; 0x43
 800d6dc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800d6de:	4b03      	ldr	r3, [pc, #12]	; (800d6ec <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800d6e0:	4618      	mov	r0, r3
 800d6e2:	370c      	adds	r7, #12
 800d6e4:	46bd      	mov	sp, r7
 800d6e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6ea:	4770      	bx	lr
 800d6ec:	20000094 	.word	0x20000094

0800d6f0 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800d6f0:	b480      	push	{r7}
 800d6f2:	b083      	sub	sp, #12
 800d6f4:	af00      	add	r7, sp, #0
 800d6f6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	2243      	movs	r2, #67	; 0x43
 800d6fc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800d6fe:	4b03      	ldr	r3, [pc, #12]	; (800d70c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800d700:	4618      	mov	r0, r3
 800d702:	370c      	adds	r7, #12
 800d704:	46bd      	mov	sp, r7
 800d706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d70a:	4770      	bx	lr
 800d70c:	20000050 	.word	0x20000050

0800d710 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800d710:	b480      	push	{r7}
 800d712:	b083      	sub	sp, #12
 800d714:	af00      	add	r7, sp, #0
 800d716:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	2243      	movs	r2, #67	; 0x43
 800d71c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800d71e:	4b03      	ldr	r3, [pc, #12]	; (800d72c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800d720:	4618      	mov	r0, r3
 800d722:	370c      	adds	r7, #12
 800d724:	46bd      	mov	sp, r7
 800d726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d72a:	4770      	bx	lr
 800d72c:	200000d8 	.word	0x200000d8

0800d730 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800d730:	b480      	push	{r7}
 800d732:	b083      	sub	sp, #12
 800d734:	af00      	add	r7, sp, #0
 800d736:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	220a      	movs	r2, #10
 800d73c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800d73e:	4b03      	ldr	r3, [pc, #12]	; (800d74c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800d740:	4618      	mov	r0, r3
 800d742:	370c      	adds	r7, #12
 800d744:	46bd      	mov	sp, r7
 800d746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d74a:	4770      	bx	lr
 800d74c:	2000000c 	.word	0x2000000c

0800d750 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800d750:	b480      	push	{r7}
 800d752:	b083      	sub	sp, #12
 800d754:	af00      	add	r7, sp, #0
 800d756:	6078      	str	r0, [r7, #4]
 800d758:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800d75a:	683b      	ldr	r3, [r7, #0]
 800d75c:	2b00      	cmp	r3, #0
 800d75e:	d101      	bne.n	800d764 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800d760:	2303      	movs	r3, #3
 800d762:	e004      	b.n	800d76e <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	683a      	ldr	r2, [r7, #0]
 800d768:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800d76c:	2300      	movs	r3, #0
}
 800d76e:	4618      	mov	r0, r3
 800d770:	370c      	adds	r7, #12
 800d772:	46bd      	mov	sp, r7
 800d774:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d778:	4770      	bx	lr

0800d77a <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800d77a:	b480      	push	{r7}
 800d77c:	b087      	sub	sp, #28
 800d77e:	af00      	add	r7, sp, #0
 800d780:	60f8      	str	r0, [r7, #12]
 800d782:	60b9      	str	r1, [r7, #8]
 800d784:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800d786:	68fb      	ldr	r3, [r7, #12]
 800d788:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d78c:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800d78e:	697b      	ldr	r3, [r7, #20]
 800d790:	2b00      	cmp	r3, #0
 800d792:	d101      	bne.n	800d798 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800d794:	2303      	movs	r3, #3
 800d796:	e008      	b.n	800d7aa <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800d798:	697b      	ldr	r3, [r7, #20]
 800d79a:	68ba      	ldr	r2, [r7, #8]
 800d79c:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800d7a0:	697b      	ldr	r3, [r7, #20]
 800d7a2:	687a      	ldr	r2, [r7, #4]
 800d7a4:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800d7a8:	2300      	movs	r3, #0
}
 800d7aa:	4618      	mov	r0, r3
 800d7ac:	371c      	adds	r7, #28
 800d7ae:	46bd      	mov	sp, r7
 800d7b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7b4:	4770      	bx	lr

0800d7b6 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800d7b6:	b480      	push	{r7}
 800d7b8:	b085      	sub	sp, #20
 800d7ba:	af00      	add	r7, sp, #0
 800d7bc:	6078      	str	r0, [r7, #4]
 800d7be:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d7c6:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800d7c8:	68fb      	ldr	r3, [r7, #12]
 800d7ca:	2b00      	cmp	r3, #0
 800d7cc:	d101      	bne.n	800d7d2 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800d7ce:	2303      	movs	r3, #3
 800d7d0:	e004      	b.n	800d7dc <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800d7d2:	68fb      	ldr	r3, [r7, #12]
 800d7d4:	683a      	ldr	r2, [r7, #0]
 800d7d6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800d7da:	2300      	movs	r3, #0
}
 800d7dc:	4618      	mov	r0, r3
 800d7de:	3714      	adds	r7, #20
 800d7e0:	46bd      	mov	sp, r7
 800d7e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7e6:	4770      	bx	lr

0800d7e8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800d7e8:	b580      	push	{r7, lr}
 800d7ea:	b084      	sub	sp, #16
 800d7ec:	af00      	add	r7, sp, #0
 800d7ee:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800d7f0:	687b      	ldr	r3, [r7, #4]
 800d7f2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d7f6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d7fe:	2b00      	cmp	r3, #0
 800d800:	d101      	bne.n	800d806 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800d802:	2303      	movs	r3, #3
 800d804:	e016      	b.n	800d834 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	7c1b      	ldrb	r3, [r3, #16]
 800d80a:	2b00      	cmp	r3, #0
 800d80c:	d109      	bne.n	800d822 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800d80e:	68fb      	ldr	r3, [r7, #12]
 800d810:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d814:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d818:	2101      	movs	r1, #1
 800d81a:	6878      	ldr	r0, [r7, #4]
 800d81c:	f003 ffbf 	bl	801179e <USBD_LL_PrepareReceive>
 800d820:	e007      	b.n	800d832 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800d822:	68fb      	ldr	r3, [r7, #12]
 800d824:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d828:	2340      	movs	r3, #64	; 0x40
 800d82a:	2101      	movs	r1, #1
 800d82c:	6878      	ldr	r0, [r7, #4]
 800d82e:	f003 ffb6 	bl	801179e <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800d832:	2300      	movs	r3, #0
}
 800d834:	4618      	mov	r0, r3
 800d836:	3710      	adds	r7, #16
 800d838:	46bd      	mov	sp, r7
 800d83a:	bd80      	pop	{r7, pc}

0800d83c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800d83c:	b580      	push	{r7, lr}
 800d83e:	b086      	sub	sp, #24
 800d840:	af00      	add	r7, sp, #0
 800d842:	60f8      	str	r0, [r7, #12]
 800d844:	60b9      	str	r1, [r7, #8]
 800d846:	4613      	mov	r3, r2
 800d848:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800d84a:	68fb      	ldr	r3, [r7, #12]
 800d84c:	2b00      	cmp	r3, #0
 800d84e:	d101      	bne.n	800d854 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800d850:	2303      	movs	r3, #3
 800d852:	e01f      	b.n	800d894 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800d854:	68fb      	ldr	r3, [r7, #12]
 800d856:	2200      	movs	r2, #0
 800d858:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800d85c:	68fb      	ldr	r3, [r7, #12]
 800d85e:	2200      	movs	r2, #0
 800d860:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800d864:	68fb      	ldr	r3, [r7, #12]
 800d866:	2200      	movs	r2, #0
 800d868:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800d86c:	68bb      	ldr	r3, [r7, #8]
 800d86e:	2b00      	cmp	r3, #0
 800d870:	d003      	beq.n	800d87a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800d872:	68fb      	ldr	r3, [r7, #12]
 800d874:	68ba      	ldr	r2, [r7, #8]
 800d876:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d87a:	68fb      	ldr	r3, [r7, #12]
 800d87c:	2201      	movs	r2, #1
 800d87e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800d882:	68fb      	ldr	r3, [r7, #12]
 800d884:	79fa      	ldrb	r2, [r7, #7]
 800d886:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800d888:	68f8      	ldr	r0, [r7, #12]
 800d88a:	f003 fe1d 	bl	80114c8 <USBD_LL_Init>
 800d88e:	4603      	mov	r3, r0
 800d890:	75fb      	strb	r3, [r7, #23]

  return ret;
 800d892:	7dfb      	ldrb	r3, [r7, #23]
}
 800d894:	4618      	mov	r0, r3
 800d896:	3718      	adds	r7, #24
 800d898:	46bd      	mov	sp, r7
 800d89a:	bd80      	pop	{r7, pc}

0800d89c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800d89c:	b580      	push	{r7, lr}
 800d89e:	b084      	sub	sp, #16
 800d8a0:	af00      	add	r7, sp, #0
 800d8a2:	6078      	str	r0, [r7, #4]
 800d8a4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800d8a6:	2300      	movs	r3, #0
 800d8a8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800d8aa:	683b      	ldr	r3, [r7, #0]
 800d8ac:	2b00      	cmp	r3, #0
 800d8ae:	d101      	bne.n	800d8b4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800d8b0:	2303      	movs	r3, #3
 800d8b2:	e016      	b.n	800d8e2 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	683a      	ldr	r2, [r7, #0]
 800d8b8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d8c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d8c4:	2b00      	cmp	r3, #0
 800d8c6:	d00b      	beq.n	800d8e0 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800d8c8:	687b      	ldr	r3, [r7, #4]
 800d8ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d8ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d8d0:	f107 020e 	add.w	r2, r7, #14
 800d8d4:	4610      	mov	r0, r2
 800d8d6:	4798      	blx	r3
 800d8d8:	4602      	mov	r2, r0
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800d8e0:	2300      	movs	r3, #0
}
 800d8e2:	4618      	mov	r0, r3
 800d8e4:	3710      	adds	r7, #16
 800d8e6:	46bd      	mov	sp, r7
 800d8e8:	bd80      	pop	{r7, pc}

0800d8ea <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800d8ea:	b580      	push	{r7, lr}
 800d8ec:	b082      	sub	sp, #8
 800d8ee:	af00      	add	r7, sp, #0
 800d8f0:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800d8f2:	6878      	ldr	r0, [r7, #4]
 800d8f4:	f003 fe48 	bl	8011588 <USBD_LL_Start>
 800d8f8:	4603      	mov	r3, r0
}
 800d8fa:	4618      	mov	r0, r3
 800d8fc:	3708      	adds	r7, #8
 800d8fe:	46bd      	mov	sp, r7
 800d900:	bd80      	pop	{r7, pc}

0800d902 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800d902:	b480      	push	{r7}
 800d904:	b083      	sub	sp, #12
 800d906:	af00      	add	r7, sp, #0
 800d908:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800d90a:	2300      	movs	r3, #0
}
 800d90c:	4618      	mov	r0, r3
 800d90e:	370c      	adds	r7, #12
 800d910:	46bd      	mov	sp, r7
 800d912:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d916:	4770      	bx	lr

0800d918 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d918:	b580      	push	{r7, lr}
 800d91a:	b084      	sub	sp, #16
 800d91c:	af00      	add	r7, sp, #0
 800d91e:	6078      	str	r0, [r7, #4]
 800d920:	460b      	mov	r3, r1
 800d922:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800d924:	2303      	movs	r3, #3
 800d926:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d92e:	2b00      	cmp	r3, #0
 800d930:	d009      	beq.n	800d946 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800d932:	687b      	ldr	r3, [r7, #4]
 800d934:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d938:	681b      	ldr	r3, [r3, #0]
 800d93a:	78fa      	ldrb	r2, [r7, #3]
 800d93c:	4611      	mov	r1, r2
 800d93e:	6878      	ldr	r0, [r7, #4]
 800d940:	4798      	blx	r3
 800d942:	4603      	mov	r3, r0
 800d944:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800d946:	7bfb      	ldrb	r3, [r7, #15]
}
 800d948:	4618      	mov	r0, r3
 800d94a:	3710      	adds	r7, #16
 800d94c:	46bd      	mov	sp, r7
 800d94e:	bd80      	pop	{r7, pc}

0800d950 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d950:	b580      	push	{r7, lr}
 800d952:	b082      	sub	sp, #8
 800d954:	af00      	add	r7, sp, #0
 800d956:	6078      	str	r0, [r7, #4]
 800d958:	460b      	mov	r3, r1
 800d95a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800d95c:	687b      	ldr	r3, [r7, #4]
 800d95e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d962:	2b00      	cmp	r3, #0
 800d964:	d007      	beq.n	800d976 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800d966:	687b      	ldr	r3, [r7, #4]
 800d968:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d96c:	685b      	ldr	r3, [r3, #4]
 800d96e:	78fa      	ldrb	r2, [r7, #3]
 800d970:	4611      	mov	r1, r2
 800d972:	6878      	ldr	r0, [r7, #4]
 800d974:	4798      	blx	r3
  }

  return USBD_OK;
 800d976:	2300      	movs	r3, #0
}
 800d978:	4618      	mov	r0, r3
 800d97a:	3708      	adds	r7, #8
 800d97c:	46bd      	mov	sp, r7
 800d97e:	bd80      	pop	{r7, pc}

0800d980 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800d980:	b580      	push	{r7, lr}
 800d982:	b084      	sub	sp, #16
 800d984:	af00      	add	r7, sp, #0
 800d986:	6078      	str	r0, [r7, #4]
 800d988:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800d98a:	687b      	ldr	r3, [r7, #4]
 800d98c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800d990:	6839      	ldr	r1, [r7, #0]
 800d992:	4618      	mov	r0, r3
 800d994:	f000 ff46 	bl	800e824 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800d998:	687b      	ldr	r3, [r7, #4]
 800d99a:	2201      	movs	r2, #1
 800d99c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800d9a6:	461a      	mov	r2, r3
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800d9ae:	687b      	ldr	r3, [r7, #4]
 800d9b0:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800d9b4:	f003 031f 	and.w	r3, r3, #31
 800d9b8:	2b02      	cmp	r3, #2
 800d9ba:	d01a      	beq.n	800d9f2 <USBD_LL_SetupStage+0x72>
 800d9bc:	2b02      	cmp	r3, #2
 800d9be:	d822      	bhi.n	800da06 <USBD_LL_SetupStage+0x86>
 800d9c0:	2b00      	cmp	r3, #0
 800d9c2:	d002      	beq.n	800d9ca <USBD_LL_SetupStage+0x4a>
 800d9c4:	2b01      	cmp	r3, #1
 800d9c6:	d00a      	beq.n	800d9de <USBD_LL_SetupStage+0x5e>
 800d9c8:	e01d      	b.n	800da06 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800d9ca:	687b      	ldr	r3, [r7, #4]
 800d9cc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800d9d0:	4619      	mov	r1, r3
 800d9d2:	6878      	ldr	r0, [r7, #4]
 800d9d4:	f000 f9ee 	bl	800ddb4 <USBD_StdDevReq>
 800d9d8:	4603      	mov	r3, r0
 800d9da:	73fb      	strb	r3, [r7, #15]
      break;
 800d9dc:	e020      	b.n	800da20 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800d9de:	687b      	ldr	r3, [r7, #4]
 800d9e0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800d9e4:	4619      	mov	r1, r3
 800d9e6:	6878      	ldr	r0, [r7, #4]
 800d9e8:	f000 fa52 	bl	800de90 <USBD_StdItfReq>
 800d9ec:	4603      	mov	r3, r0
 800d9ee:	73fb      	strb	r3, [r7, #15]
      break;
 800d9f0:	e016      	b.n	800da20 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800d9f2:	687b      	ldr	r3, [r7, #4]
 800d9f4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800d9f8:	4619      	mov	r1, r3
 800d9fa:	6878      	ldr	r0, [r7, #4]
 800d9fc:	f000 fa91 	bl	800df22 <USBD_StdEPReq>
 800da00:	4603      	mov	r3, r0
 800da02:	73fb      	strb	r3, [r7, #15]
      break;
 800da04:	e00c      	b.n	800da20 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800da0c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800da10:	b2db      	uxtb	r3, r3
 800da12:	4619      	mov	r1, r3
 800da14:	6878      	ldr	r0, [r7, #4]
 800da16:	f003 fe17 	bl	8011648 <USBD_LL_StallEP>
 800da1a:	4603      	mov	r3, r0
 800da1c:	73fb      	strb	r3, [r7, #15]
      break;
 800da1e:	bf00      	nop
  }

  return ret;
 800da20:	7bfb      	ldrb	r3, [r7, #15]
}
 800da22:	4618      	mov	r0, r3
 800da24:	3710      	adds	r7, #16
 800da26:	46bd      	mov	sp, r7
 800da28:	bd80      	pop	{r7, pc}

0800da2a <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800da2a:	b580      	push	{r7, lr}
 800da2c:	b086      	sub	sp, #24
 800da2e:	af00      	add	r7, sp, #0
 800da30:	60f8      	str	r0, [r7, #12]
 800da32:	460b      	mov	r3, r1
 800da34:	607a      	str	r2, [r7, #4]
 800da36:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800da38:	7afb      	ldrb	r3, [r7, #11]
 800da3a:	2b00      	cmp	r3, #0
 800da3c:	d138      	bne.n	800dab0 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800da3e:	68fb      	ldr	r3, [r7, #12]
 800da40:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800da44:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800da46:	68fb      	ldr	r3, [r7, #12]
 800da48:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800da4c:	2b03      	cmp	r3, #3
 800da4e:	d14a      	bne.n	800dae6 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800da50:	693b      	ldr	r3, [r7, #16]
 800da52:	689a      	ldr	r2, [r3, #8]
 800da54:	693b      	ldr	r3, [r7, #16]
 800da56:	68db      	ldr	r3, [r3, #12]
 800da58:	429a      	cmp	r2, r3
 800da5a:	d913      	bls.n	800da84 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800da5c:	693b      	ldr	r3, [r7, #16]
 800da5e:	689a      	ldr	r2, [r3, #8]
 800da60:	693b      	ldr	r3, [r7, #16]
 800da62:	68db      	ldr	r3, [r3, #12]
 800da64:	1ad2      	subs	r2, r2, r3
 800da66:	693b      	ldr	r3, [r7, #16]
 800da68:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800da6a:	693b      	ldr	r3, [r7, #16]
 800da6c:	68da      	ldr	r2, [r3, #12]
 800da6e:	693b      	ldr	r3, [r7, #16]
 800da70:	689b      	ldr	r3, [r3, #8]
 800da72:	4293      	cmp	r3, r2
 800da74:	bf28      	it	cs
 800da76:	4613      	movcs	r3, r2
 800da78:	461a      	mov	r2, r3
 800da7a:	6879      	ldr	r1, [r7, #4]
 800da7c:	68f8      	ldr	r0, [r7, #12]
 800da7e:	f000 ffc5 	bl	800ea0c <USBD_CtlContinueRx>
 800da82:	e030      	b.n	800dae6 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800da84:	68fb      	ldr	r3, [r7, #12]
 800da86:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800da8a:	b2db      	uxtb	r3, r3
 800da8c:	2b03      	cmp	r3, #3
 800da8e:	d10b      	bne.n	800daa8 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800da90:	68fb      	ldr	r3, [r7, #12]
 800da92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800da96:	691b      	ldr	r3, [r3, #16]
 800da98:	2b00      	cmp	r3, #0
 800da9a:	d005      	beq.n	800daa8 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800da9c:	68fb      	ldr	r3, [r7, #12]
 800da9e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800daa2:	691b      	ldr	r3, [r3, #16]
 800daa4:	68f8      	ldr	r0, [r7, #12]
 800daa6:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800daa8:	68f8      	ldr	r0, [r7, #12]
 800daaa:	f000 ffc0 	bl	800ea2e <USBD_CtlSendStatus>
 800daae:	e01a      	b.n	800dae6 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dab0:	68fb      	ldr	r3, [r7, #12]
 800dab2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dab6:	b2db      	uxtb	r3, r3
 800dab8:	2b03      	cmp	r3, #3
 800daba:	d114      	bne.n	800dae6 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800dabc:	68fb      	ldr	r3, [r7, #12]
 800dabe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dac2:	699b      	ldr	r3, [r3, #24]
 800dac4:	2b00      	cmp	r3, #0
 800dac6:	d00e      	beq.n	800dae6 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800dac8:	68fb      	ldr	r3, [r7, #12]
 800daca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dace:	699b      	ldr	r3, [r3, #24]
 800dad0:	7afa      	ldrb	r2, [r7, #11]
 800dad2:	4611      	mov	r1, r2
 800dad4:	68f8      	ldr	r0, [r7, #12]
 800dad6:	4798      	blx	r3
 800dad8:	4603      	mov	r3, r0
 800dada:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800dadc:	7dfb      	ldrb	r3, [r7, #23]
 800dade:	2b00      	cmp	r3, #0
 800dae0:	d001      	beq.n	800dae6 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800dae2:	7dfb      	ldrb	r3, [r7, #23]
 800dae4:	e000      	b.n	800dae8 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800dae6:	2300      	movs	r3, #0
}
 800dae8:	4618      	mov	r0, r3
 800daea:	3718      	adds	r7, #24
 800daec:	46bd      	mov	sp, r7
 800daee:	bd80      	pop	{r7, pc}

0800daf0 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800daf0:	b580      	push	{r7, lr}
 800daf2:	b086      	sub	sp, #24
 800daf4:	af00      	add	r7, sp, #0
 800daf6:	60f8      	str	r0, [r7, #12]
 800daf8:	460b      	mov	r3, r1
 800dafa:	607a      	str	r2, [r7, #4]
 800dafc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800dafe:	7afb      	ldrb	r3, [r7, #11]
 800db00:	2b00      	cmp	r3, #0
 800db02:	d16b      	bne.n	800dbdc <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800db04:	68fb      	ldr	r3, [r7, #12]
 800db06:	3314      	adds	r3, #20
 800db08:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800db0a:	68fb      	ldr	r3, [r7, #12]
 800db0c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800db10:	2b02      	cmp	r3, #2
 800db12:	d156      	bne.n	800dbc2 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800db14:	693b      	ldr	r3, [r7, #16]
 800db16:	689a      	ldr	r2, [r3, #8]
 800db18:	693b      	ldr	r3, [r7, #16]
 800db1a:	68db      	ldr	r3, [r3, #12]
 800db1c:	429a      	cmp	r2, r3
 800db1e:	d914      	bls.n	800db4a <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800db20:	693b      	ldr	r3, [r7, #16]
 800db22:	689a      	ldr	r2, [r3, #8]
 800db24:	693b      	ldr	r3, [r7, #16]
 800db26:	68db      	ldr	r3, [r3, #12]
 800db28:	1ad2      	subs	r2, r2, r3
 800db2a:	693b      	ldr	r3, [r7, #16]
 800db2c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800db2e:	693b      	ldr	r3, [r7, #16]
 800db30:	689b      	ldr	r3, [r3, #8]
 800db32:	461a      	mov	r2, r3
 800db34:	6879      	ldr	r1, [r7, #4]
 800db36:	68f8      	ldr	r0, [r7, #12]
 800db38:	f000 ff3a 	bl	800e9b0 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800db3c:	2300      	movs	r3, #0
 800db3e:	2200      	movs	r2, #0
 800db40:	2100      	movs	r1, #0
 800db42:	68f8      	ldr	r0, [r7, #12]
 800db44:	f003 fe2b 	bl	801179e <USBD_LL_PrepareReceive>
 800db48:	e03b      	b.n	800dbc2 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800db4a:	693b      	ldr	r3, [r7, #16]
 800db4c:	68da      	ldr	r2, [r3, #12]
 800db4e:	693b      	ldr	r3, [r7, #16]
 800db50:	689b      	ldr	r3, [r3, #8]
 800db52:	429a      	cmp	r2, r3
 800db54:	d11c      	bne.n	800db90 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800db56:	693b      	ldr	r3, [r7, #16]
 800db58:	685a      	ldr	r2, [r3, #4]
 800db5a:	693b      	ldr	r3, [r7, #16]
 800db5c:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800db5e:	429a      	cmp	r2, r3
 800db60:	d316      	bcc.n	800db90 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800db62:	693b      	ldr	r3, [r7, #16]
 800db64:	685a      	ldr	r2, [r3, #4]
 800db66:	68fb      	ldr	r3, [r7, #12]
 800db68:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800db6c:	429a      	cmp	r2, r3
 800db6e:	d20f      	bcs.n	800db90 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800db70:	2200      	movs	r2, #0
 800db72:	2100      	movs	r1, #0
 800db74:	68f8      	ldr	r0, [r7, #12]
 800db76:	f000 ff1b 	bl	800e9b0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800db7a:	68fb      	ldr	r3, [r7, #12]
 800db7c:	2200      	movs	r2, #0
 800db7e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800db82:	2300      	movs	r3, #0
 800db84:	2200      	movs	r2, #0
 800db86:	2100      	movs	r1, #0
 800db88:	68f8      	ldr	r0, [r7, #12]
 800db8a:	f003 fe08 	bl	801179e <USBD_LL_PrepareReceive>
 800db8e:	e018      	b.n	800dbc2 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800db90:	68fb      	ldr	r3, [r7, #12]
 800db92:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800db96:	b2db      	uxtb	r3, r3
 800db98:	2b03      	cmp	r3, #3
 800db9a:	d10b      	bne.n	800dbb4 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800db9c:	68fb      	ldr	r3, [r7, #12]
 800db9e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dba2:	68db      	ldr	r3, [r3, #12]
 800dba4:	2b00      	cmp	r3, #0
 800dba6:	d005      	beq.n	800dbb4 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800dba8:	68fb      	ldr	r3, [r7, #12]
 800dbaa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dbae:	68db      	ldr	r3, [r3, #12]
 800dbb0:	68f8      	ldr	r0, [r7, #12]
 800dbb2:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800dbb4:	2180      	movs	r1, #128	; 0x80
 800dbb6:	68f8      	ldr	r0, [r7, #12]
 800dbb8:	f003 fd46 	bl	8011648 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800dbbc:	68f8      	ldr	r0, [r7, #12]
 800dbbe:	f000 ff49 	bl	800ea54 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800dbc2:	68fb      	ldr	r3, [r7, #12]
 800dbc4:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800dbc8:	2b01      	cmp	r3, #1
 800dbca:	d122      	bne.n	800dc12 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800dbcc:	68f8      	ldr	r0, [r7, #12]
 800dbce:	f7ff fe98 	bl	800d902 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800dbd2:	68fb      	ldr	r3, [r7, #12]
 800dbd4:	2200      	movs	r2, #0
 800dbd6:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800dbda:	e01a      	b.n	800dc12 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dbdc:	68fb      	ldr	r3, [r7, #12]
 800dbde:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dbe2:	b2db      	uxtb	r3, r3
 800dbe4:	2b03      	cmp	r3, #3
 800dbe6:	d114      	bne.n	800dc12 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800dbe8:	68fb      	ldr	r3, [r7, #12]
 800dbea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dbee:	695b      	ldr	r3, [r3, #20]
 800dbf0:	2b00      	cmp	r3, #0
 800dbf2:	d00e      	beq.n	800dc12 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800dbf4:	68fb      	ldr	r3, [r7, #12]
 800dbf6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dbfa:	695b      	ldr	r3, [r3, #20]
 800dbfc:	7afa      	ldrb	r2, [r7, #11]
 800dbfe:	4611      	mov	r1, r2
 800dc00:	68f8      	ldr	r0, [r7, #12]
 800dc02:	4798      	blx	r3
 800dc04:	4603      	mov	r3, r0
 800dc06:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800dc08:	7dfb      	ldrb	r3, [r7, #23]
 800dc0a:	2b00      	cmp	r3, #0
 800dc0c:	d001      	beq.n	800dc12 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800dc0e:	7dfb      	ldrb	r3, [r7, #23]
 800dc10:	e000      	b.n	800dc14 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800dc12:	2300      	movs	r3, #0
}
 800dc14:	4618      	mov	r0, r3
 800dc16:	3718      	adds	r7, #24
 800dc18:	46bd      	mov	sp, r7
 800dc1a:	bd80      	pop	{r7, pc}

0800dc1c <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800dc1c:	b580      	push	{r7, lr}
 800dc1e:	b082      	sub	sp, #8
 800dc20:	af00      	add	r7, sp, #0
 800dc22:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800dc24:	687b      	ldr	r3, [r7, #4]
 800dc26:	2201      	movs	r2, #1
 800dc28:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800dc2c:	687b      	ldr	r3, [r7, #4]
 800dc2e:	2200      	movs	r2, #0
 800dc30:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800dc34:	687b      	ldr	r3, [r7, #4]
 800dc36:	2200      	movs	r2, #0
 800dc38:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800dc3a:	687b      	ldr	r3, [r7, #4]
 800dc3c:	2200      	movs	r2, #0
 800dc3e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800dc42:	687b      	ldr	r3, [r7, #4]
 800dc44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dc48:	2b00      	cmp	r3, #0
 800dc4a:	d101      	bne.n	800dc50 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800dc4c:	2303      	movs	r3, #3
 800dc4e:	e02f      	b.n	800dcb0 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800dc56:	2b00      	cmp	r3, #0
 800dc58:	d00f      	beq.n	800dc7a <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800dc5a:	687b      	ldr	r3, [r7, #4]
 800dc5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dc60:	685b      	ldr	r3, [r3, #4]
 800dc62:	2b00      	cmp	r3, #0
 800dc64:	d009      	beq.n	800dc7a <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800dc66:	687b      	ldr	r3, [r7, #4]
 800dc68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dc6c:	685b      	ldr	r3, [r3, #4]
 800dc6e:	687a      	ldr	r2, [r7, #4]
 800dc70:	6852      	ldr	r2, [r2, #4]
 800dc72:	b2d2      	uxtb	r2, r2
 800dc74:	4611      	mov	r1, r2
 800dc76:	6878      	ldr	r0, [r7, #4]
 800dc78:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800dc7a:	2340      	movs	r3, #64	; 0x40
 800dc7c:	2200      	movs	r2, #0
 800dc7e:	2100      	movs	r1, #0
 800dc80:	6878      	ldr	r0, [r7, #4]
 800dc82:	f003 fc9c 	bl	80115be <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800dc86:	687b      	ldr	r3, [r7, #4]
 800dc88:	2201      	movs	r2, #1
 800dc8a:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800dc8e:	687b      	ldr	r3, [r7, #4]
 800dc90:	2240      	movs	r2, #64	; 0x40
 800dc92:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800dc96:	2340      	movs	r3, #64	; 0x40
 800dc98:	2200      	movs	r2, #0
 800dc9a:	2180      	movs	r1, #128	; 0x80
 800dc9c:	6878      	ldr	r0, [r7, #4]
 800dc9e:	f003 fc8e 	bl	80115be <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	2201      	movs	r2, #1
 800dca6:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800dca8:	687b      	ldr	r3, [r7, #4]
 800dcaa:	2240      	movs	r2, #64	; 0x40
 800dcac:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800dcae:	2300      	movs	r3, #0
}
 800dcb0:	4618      	mov	r0, r3
 800dcb2:	3708      	adds	r7, #8
 800dcb4:	46bd      	mov	sp, r7
 800dcb6:	bd80      	pop	{r7, pc}

0800dcb8 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800dcb8:	b480      	push	{r7}
 800dcba:	b083      	sub	sp, #12
 800dcbc:	af00      	add	r7, sp, #0
 800dcbe:	6078      	str	r0, [r7, #4]
 800dcc0:	460b      	mov	r3, r1
 800dcc2:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800dcc4:	687b      	ldr	r3, [r7, #4]
 800dcc6:	78fa      	ldrb	r2, [r7, #3]
 800dcc8:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800dcca:	2300      	movs	r3, #0
}
 800dccc:	4618      	mov	r0, r3
 800dcce:	370c      	adds	r7, #12
 800dcd0:	46bd      	mov	sp, r7
 800dcd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcd6:	4770      	bx	lr

0800dcd8 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800dcd8:	b480      	push	{r7}
 800dcda:	b083      	sub	sp, #12
 800dcdc:	af00      	add	r7, sp, #0
 800dcde:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800dce0:	687b      	ldr	r3, [r7, #4]
 800dce2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dce6:	b2da      	uxtb	r2, r3
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800dcee:	687b      	ldr	r3, [r7, #4]
 800dcf0:	2204      	movs	r2, #4
 800dcf2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800dcf6:	2300      	movs	r3, #0
}
 800dcf8:	4618      	mov	r0, r3
 800dcfa:	370c      	adds	r7, #12
 800dcfc:	46bd      	mov	sp, r7
 800dcfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd02:	4770      	bx	lr

0800dd04 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800dd04:	b480      	push	{r7}
 800dd06:	b083      	sub	sp, #12
 800dd08:	af00      	add	r7, sp, #0
 800dd0a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800dd0c:	687b      	ldr	r3, [r7, #4]
 800dd0e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dd12:	b2db      	uxtb	r3, r3
 800dd14:	2b04      	cmp	r3, #4
 800dd16:	d106      	bne.n	800dd26 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800dd18:	687b      	ldr	r3, [r7, #4]
 800dd1a:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800dd1e:	b2da      	uxtb	r2, r3
 800dd20:	687b      	ldr	r3, [r7, #4]
 800dd22:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800dd26:	2300      	movs	r3, #0
}
 800dd28:	4618      	mov	r0, r3
 800dd2a:	370c      	adds	r7, #12
 800dd2c:	46bd      	mov	sp, r7
 800dd2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd32:	4770      	bx	lr

0800dd34 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800dd34:	b580      	push	{r7, lr}
 800dd36:	b082      	sub	sp, #8
 800dd38:	af00      	add	r7, sp, #0
 800dd3a:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dd42:	2b00      	cmp	r3, #0
 800dd44:	d101      	bne.n	800dd4a <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800dd46:	2303      	movs	r3, #3
 800dd48:	e012      	b.n	800dd70 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dd4a:	687b      	ldr	r3, [r7, #4]
 800dd4c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dd50:	b2db      	uxtb	r3, r3
 800dd52:	2b03      	cmp	r3, #3
 800dd54:	d10b      	bne.n	800dd6e <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800dd56:	687b      	ldr	r3, [r7, #4]
 800dd58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dd5c:	69db      	ldr	r3, [r3, #28]
 800dd5e:	2b00      	cmp	r3, #0
 800dd60:	d005      	beq.n	800dd6e <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800dd62:	687b      	ldr	r3, [r7, #4]
 800dd64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dd68:	69db      	ldr	r3, [r3, #28]
 800dd6a:	6878      	ldr	r0, [r7, #4]
 800dd6c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800dd6e:	2300      	movs	r3, #0
}
 800dd70:	4618      	mov	r0, r3
 800dd72:	3708      	adds	r7, #8
 800dd74:	46bd      	mov	sp, r7
 800dd76:	bd80      	pop	{r7, pc}

0800dd78 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800dd78:	b480      	push	{r7}
 800dd7a:	b087      	sub	sp, #28
 800dd7c:	af00      	add	r7, sp, #0
 800dd7e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800dd80:	687b      	ldr	r3, [r7, #4]
 800dd82:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800dd84:	697b      	ldr	r3, [r7, #20]
 800dd86:	781b      	ldrb	r3, [r3, #0]
 800dd88:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800dd8a:	697b      	ldr	r3, [r7, #20]
 800dd8c:	3301      	adds	r3, #1
 800dd8e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800dd90:	697b      	ldr	r3, [r7, #20]
 800dd92:	781b      	ldrb	r3, [r3, #0]
 800dd94:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800dd96:	8a3b      	ldrh	r3, [r7, #16]
 800dd98:	021b      	lsls	r3, r3, #8
 800dd9a:	b21a      	sxth	r2, r3
 800dd9c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800dda0:	4313      	orrs	r3, r2
 800dda2:	b21b      	sxth	r3, r3
 800dda4:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800dda6:	89fb      	ldrh	r3, [r7, #14]
}
 800dda8:	4618      	mov	r0, r3
 800ddaa:	371c      	adds	r7, #28
 800ddac:	46bd      	mov	sp, r7
 800ddae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddb2:	4770      	bx	lr

0800ddb4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ddb4:	b580      	push	{r7, lr}
 800ddb6:	b084      	sub	sp, #16
 800ddb8:	af00      	add	r7, sp, #0
 800ddba:	6078      	str	r0, [r7, #4]
 800ddbc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ddbe:	2300      	movs	r3, #0
 800ddc0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ddc2:	683b      	ldr	r3, [r7, #0]
 800ddc4:	781b      	ldrb	r3, [r3, #0]
 800ddc6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ddca:	2b40      	cmp	r3, #64	; 0x40
 800ddcc:	d005      	beq.n	800ddda <USBD_StdDevReq+0x26>
 800ddce:	2b40      	cmp	r3, #64	; 0x40
 800ddd0:	d853      	bhi.n	800de7a <USBD_StdDevReq+0xc6>
 800ddd2:	2b00      	cmp	r3, #0
 800ddd4:	d00b      	beq.n	800ddee <USBD_StdDevReq+0x3a>
 800ddd6:	2b20      	cmp	r3, #32
 800ddd8:	d14f      	bne.n	800de7a <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ddda:	687b      	ldr	r3, [r7, #4]
 800dddc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dde0:	689b      	ldr	r3, [r3, #8]
 800dde2:	6839      	ldr	r1, [r7, #0]
 800dde4:	6878      	ldr	r0, [r7, #4]
 800dde6:	4798      	blx	r3
 800dde8:	4603      	mov	r3, r0
 800ddea:	73fb      	strb	r3, [r7, #15]
      break;
 800ddec:	e04a      	b.n	800de84 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ddee:	683b      	ldr	r3, [r7, #0]
 800ddf0:	785b      	ldrb	r3, [r3, #1]
 800ddf2:	2b09      	cmp	r3, #9
 800ddf4:	d83b      	bhi.n	800de6e <USBD_StdDevReq+0xba>
 800ddf6:	a201      	add	r2, pc, #4	; (adr r2, 800ddfc <USBD_StdDevReq+0x48>)
 800ddf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ddfc:	0800de51 	.word	0x0800de51
 800de00:	0800de65 	.word	0x0800de65
 800de04:	0800de6f 	.word	0x0800de6f
 800de08:	0800de5b 	.word	0x0800de5b
 800de0c:	0800de6f 	.word	0x0800de6f
 800de10:	0800de2f 	.word	0x0800de2f
 800de14:	0800de25 	.word	0x0800de25
 800de18:	0800de6f 	.word	0x0800de6f
 800de1c:	0800de47 	.word	0x0800de47
 800de20:	0800de39 	.word	0x0800de39
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800de24:	6839      	ldr	r1, [r7, #0]
 800de26:	6878      	ldr	r0, [r7, #4]
 800de28:	f000 f9de 	bl	800e1e8 <USBD_GetDescriptor>
          break;
 800de2c:	e024      	b.n	800de78 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800de2e:	6839      	ldr	r1, [r7, #0]
 800de30:	6878      	ldr	r0, [r7, #4]
 800de32:	f000 fb6d 	bl	800e510 <USBD_SetAddress>
          break;
 800de36:	e01f      	b.n	800de78 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800de38:	6839      	ldr	r1, [r7, #0]
 800de3a:	6878      	ldr	r0, [r7, #4]
 800de3c:	f000 fbac 	bl	800e598 <USBD_SetConfig>
 800de40:	4603      	mov	r3, r0
 800de42:	73fb      	strb	r3, [r7, #15]
          break;
 800de44:	e018      	b.n	800de78 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800de46:	6839      	ldr	r1, [r7, #0]
 800de48:	6878      	ldr	r0, [r7, #4]
 800de4a:	f000 fc4b 	bl	800e6e4 <USBD_GetConfig>
          break;
 800de4e:	e013      	b.n	800de78 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800de50:	6839      	ldr	r1, [r7, #0]
 800de52:	6878      	ldr	r0, [r7, #4]
 800de54:	f000 fc7c 	bl	800e750 <USBD_GetStatus>
          break;
 800de58:	e00e      	b.n	800de78 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800de5a:	6839      	ldr	r1, [r7, #0]
 800de5c:	6878      	ldr	r0, [r7, #4]
 800de5e:	f000 fcab 	bl	800e7b8 <USBD_SetFeature>
          break;
 800de62:	e009      	b.n	800de78 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800de64:	6839      	ldr	r1, [r7, #0]
 800de66:	6878      	ldr	r0, [r7, #4]
 800de68:	f000 fcba 	bl	800e7e0 <USBD_ClrFeature>
          break;
 800de6c:	e004      	b.n	800de78 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800de6e:	6839      	ldr	r1, [r7, #0]
 800de70:	6878      	ldr	r0, [r7, #4]
 800de72:	f000 fd11 	bl	800e898 <USBD_CtlError>
          break;
 800de76:	bf00      	nop
      }
      break;
 800de78:	e004      	b.n	800de84 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800de7a:	6839      	ldr	r1, [r7, #0]
 800de7c:	6878      	ldr	r0, [r7, #4]
 800de7e:	f000 fd0b 	bl	800e898 <USBD_CtlError>
      break;
 800de82:	bf00      	nop
  }

  return ret;
 800de84:	7bfb      	ldrb	r3, [r7, #15]
}
 800de86:	4618      	mov	r0, r3
 800de88:	3710      	adds	r7, #16
 800de8a:	46bd      	mov	sp, r7
 800de8c:	bd80      	pop	{r7, pc}
 800de8e:	bf00      	nop

0800de90 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800de90:	b580      	push	{r7, lr}
 800de92:	b084      	sub	sp, #16
 800de94:	af00      	add	r7, sp, #0
 800de96:	6078      	str	r0, [r7, #4]
 800de98:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800de9a:	2300      	movs	r3, #0
 800de9c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800de9e:	683b      	ldr	r3, [r7, #0]
 800dea0:	781b      	ldrb	r3, [r3, #0]
 800dea2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800dea6:	2b40      	cmp	r3, #64	; 0x40
 800dea8:	d005      	beq.n	800deb6 <USBD_StdItfReq+0x26>
 800deaa:	2b40      	cmp	r3, #64	; 0x40
 800deac:	d82f      	bhi.n	800df0e <USBD_StdItfReq+0x7e>
 800deae:	2b00      	cmp	r3, #0
 800deb0:	d001      	beq.n	800deb6 <USBD_StdItfReq+0x26>
 800deb2:	2b20      	cmp	r3, #32
 800deb4:	d12b      	bne.n	800df0e <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800deb6:	687b      	ldr	r3, [r7, #4]
 800deb8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800debc:	b2db      	uxtb	r3, r3
 800debe:	3b01      	subs	r3, #1
 800dec0:	2b02      	cmp	r3, #2
 800dec2:	d81d      	bhi.n	800df00 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800dec4:	683b      	ldr	r3, [r7, #0]
 800dec6:	889b      	ldrh	r3, [r3, #4]
 800dec8:	b2db      	uxtb	r3, r3
 800deca:	2b01      	cmp	r3, #1
 800decc:	d813      	bhi.n	800def6 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800dece:	687b      	ldr	r3, [r7, #4]
 800ded0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ded4:	689b      	ldr	r3, [r3, #8]
 800ded6:	6839      	ldr	r1, [r7, #0]
 800ded8:	6878      	ldr	r0, [r7, #4]
 800deda:	4798      	blx	r3
 800dedc:	4603      	mov	r3, r0
 800dede:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800dee0:	683b      	ldr	r3, [r7, #0]
 800dee2:	88db      	ldrh	r3, [r3, #6]
 800dee4:	2b00      	cmp	r3, #0
 800dee6:	d110      	bne.n	800df0a <USBD_StdItfReq+0x7a>
 800dee8:	7bfb      	ldrb	r3, [r7, #15]
 800deea:	2b00      	cmp	r3, #0
 800deec:	d10d      	bne.n	800df0a <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800deee:	6878      	ldr	r0, [r7, #4]
 800def0:	f000 fd9d 	bl	800ea2e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800def4:	e009      	b.n	800df0a <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800def6:	6839      	ldr	r1, [r7, #0]
 800def8:	6878      	ldr	r0, [r7, #4]
 800defa:	f000 fccd 	bl	800e898 <USBD_CtlError>
          break;
 800defe:	e004      	b.n	800df0a <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800df00:	6839      	ldr	r1, [r7, #0]
 800df02:	6878      	ldr	r0, [r7, #4]
 800df04:	f000 fcc8 	bl	800e898 <USBD_CtlError>
          break;
 800df08:	e000      	b.n	800df0c <USBD_StdItfReq+0x7c>
          break;
 800df0a:	bf00      	nop
      }
      break;
 800df0c:	e004      	b.n	800df18 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800df0e:	6839      	ldr	r1, [r7, #0]
 800df10:	6878      	ldr	r0, [r7, #4]
 800df12:	f000 fcc1 	bl	800e898 <USBD_CtlError>
      break;
 800df16:	bf00      	nop
  }

  return ret;
 800df18:	7bfb      	ldrb	r3, [r7, #15]
}
 800df1a:	4618      	mov	r0, r3
 800df1c:	3710      	adds	r7, #16
 800df1e:	46bd      	mov	sp, r7
 800df20:	bd80      	pop	{r7, pc}

0800df22 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800df22:	b580      	push	{r7, lr}
 800df24:	b084      	sub	sp, #16
 800df26:	af00      	add	r7, sp, #0
 800df28:	6078      	str	r0, [r7, #4]
 800df2a:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800df2c:	2300      	movs	r3, #0
 800df2e:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800df30:	683b      	ldr	r3, [r7, #0]
 800df32:	889b      	ldrh	r3, [r3, #4]
 800df34:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800df36:	683b      	ldr	r3, [r7, #0]
 800df38:	781b      	ldrb	r3, [r3, #0]
 800df3a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800df3e:	2b40      	cmp	r3, #64	; 0x40
 800df40:	d007      	beq.n	800df52 <USBD_StdEPReq+0x30>
 800df42:	2b40      	cmp	r3, #64	; 0x40
 800df44:	f200 8145 	bhi.w	800e1d2 <USBD_StdEPReq+0x2b0>
 800df48:	2b00      	cmp	r3, #0
 800df4a:	d00c      	beq.n	800df66 <USBD_StdEPReq+0x44>
 800df4c:	2b20      	cmp	r3, #32
 800df4e:	f040 8140 	bne.w	800e1d2 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800df52:	687b      	ldr	r3, [r7, #4]
 800df54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800df58:	689b      	ldr	r3, [r3, #8]
 800df5a:	6839      	ldr	r1, [r7, #0]
 800df5c:	6878      	ldr	r0, [r7, #4]
 800df5e:	4798      	blx	r3
 800df60:	4603      	mov	r3, r0
 800df62:	73fb      	strb	r3, [r7, #15]
      break;
 800df64:	e13a      	b.n	800e1dc <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800df66:	683b      	ldr	r3, [r7, #0]
 800df68:	785b      	ldrb	r3, [r3, #1]
 800df6a:	2b03      	cmp	r3, #3
 800df6c:	d007      	beq.n	800df7e <USBD_StdEPReq+0x5c>
 800df6e:	2b03      	cmp	r3, #3
 800df70:	f300 8129 	bgt.w	800e1c6 <USBD_StdEPReq+0x2a4>
 800df74:	2b00      	cmp	r3, #0
 800df76:	d07f      	beq.n	800e078 <USBD_StdEPReq+0x156>
 800df78:	2b01      	cmp	r3, #1
 800df7a:	d03c      	beq.n	800dff6 <USBD_StdEPReq+0xd4>
 800df7c:	e123      	b.n	800e1c6 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800df7e:	687b      	ldr	r3, [r7, #4]
 800df80:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800df84:	b2db      	uxtb	r3, r3
 800df86:	2b02      	cmp	r3, #2
 800df88:	d002      	beq.n	800df90 <USBD_StdEPReq+0x6e>
 800df8a:	2b03      	cmp	r3, #3
 800df8c:	d016      	beq.n	800dfbc <USBD_StdEPReq+0x9a>
 800df8e:	e02c      	b.n	800dfea <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800df90:	7bbb      	ldrb	r3, [r7, #14]
 800df92:	2b00      	cmp	r3, #0
 800df94:	d00d      	beq.n	800dfb2 <USBD_StdEPReq+0x90>
 800df96:	7bbb      	ldrb	r3, [r7, #14]
 800df98:	2b80      	cmp	r3, #128	; 0x80
 800df9a:	d00a      	beq.n	800dfb2 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800df9c:	7bbb      	ldrb	r3, [r7, #14]
 800df9e:	4619      	mov	r1, r3
 800dfa0:	6878      	ldr	r0, [r7, #4]
 800dfa2:	f003 fb51 	bl	8011648 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800dfa6:	2180      	movs	r1, #128	; 0x80
 800dfa8:	6878      	ldr	r0, [r7, #4]
 800dfaa:	f003 fb4d 	bl	8011648 <USBD_LL_StallEP>
 800dfae:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800dfb0:	e020      	b.n	800dff4 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800dfb2:	6839      	ldr	r1, [r7, #0]
 800dfb4:	6878      	ldr	r0, [r7, #4]
 800dfb6:	f000 fc6f 	bl	800e898 <USBD_CtlError>
              break;
 800dfba:	e01b      	b.n	800dff4 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800dfbc:	683b      	ldr	r3, [r7, #0]
 800dfbe:	885b      	ldrh	r3, [r3, #2]
 800dfc0:	2b00      	cmp	r3, #0
 800dfc2:	d10e      	bne.n	800dfe2 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800dfc4:	7bbb      	ldrb	r3, [r7, #14]
 800dfc6:	2b00      	cmp	r3, #0
 800dfc8:	d00b      	beq.n	800dfe2 <USBD_StdEPReq+0xc0>
 800dfca:	7bbb      	ldrb	r3, [r7, #14]
 800dfcc:	2b80      	cmp	r3, #128	; 0x80
 800dfce:	d008      	beq.n	800dfe2 <USBD_StdEPReq+0xc0>
 800dfd0:	683b      	ldr	r3, [r7, #0]
 800dfd2:	88db      	ldrh	r3, [r3, #6]
 800dfd4:	2b00      	cmp	r3, #0
 800dfd6:	d104      	bne.n	800dfe2 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800dfd8:	7bbb      	ldrb	r3, [r7, #14]
 800dfda:	4619      	mov	r1, r3
 800dfdc:	6878      	ldr	r0, [r7, #4]
 800dfde:	f003 fb33 	bl	8011648 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800dfe2:	6878      	ldr	r0, [r7, #4]
 800dfe4:	f000 fd23 	bl	800ea2e <USBD_CtlSendStatus>

              break;
 800dfe8:	e004      	b.n	800dff4 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800dfea:	6839      	ldr	r1, [r7, #0]
 800dfec:	6878      	ldr	r0, [r7, #4]
 800dfee:	f000 fc53 	bl	800e898 <USBD_CtlError>
              break;
 800dff2:	bf00      	nop
          }
          break;
 800dff4:	e0ec      	b.n	800e1d0 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800dff6:	687b      	ldr	r3, [r7, #4]
 800dff8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dffc:	b2db      	uxtb	r3, r3
 800dffe:	2b02      	cmp	r3, #2
 800e000:	d002      	beq.n	800e008 <USBD_StdEPReq+0xe6>
 800e002:	2b03      	cmp	r3, #3
 800e004:	d016      	beq.n	800e034 <USBD_StdEPReq+0x112>
 800e006:	e030      	b.n	800e06a <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e008:	7bbb      	ldrb	r3, [r7, #14]
 800e00a:	2b00      	cmp	r3, #0
 800e00c:	d00d      	beq.n	800e02a <USBD_StdEPReq+0x108>
 800e00e:	7bbb      	ldrb	r3, [r7, #14]
 800e010:	2b80      	cmp	r3, #128	; 0x80
 800e012:	d00a      	beq.n	800e02a <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800e014:	7bbb      	ldrb	r3, [r7, #14]
 800e016:	4619      	mov	r1, r3
 800e018:	6878      	ldr	r0, [r7, #4]
 800e01a:	f003 fb15 	bl	8011648 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800e01e:	2180      	movs	r1, #128	; 0x80
 800e020:	6878      	ldr	r0, [r7, #4]
 800e022:	f003 fb11 	bl	8011648 <USBD_LL_StallEP>
 800e026:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800e028:	e025      	b.n	800e076 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800e02a:	6839      	ldr	r1, [r7, #0]
 800e02c:	6878      	ldr	r0, [r7, #4]
 800e02e:	f000 fc33 	bl	800e898 <USBD_CtlError>
              break;
 800e032:	e020      	b.n	800e076 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800e034:	683b      	ldr	r3, [r7, #0]
 800e036:	885b      	ldrh	r3, [r3, #2]
 800e038:	2b00      	cmp	r3, #0
 800e03a:	d11b      	bne.n	800e074 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800e03c:	7bbb      	ldrb	r3, [r7, #14]
 800e03e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e042:	2b00      	cmp	r3, #0
 800e044:	d004      	beq.n	800e050 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800e046:	7bbb      	ldrb	r3, [r7, #14]
 800e048:	4619      	mov	r1, r3
 800e04a:	6878      	ldr	r0, [r7, #4]
 800e04c:	f003 fb1b 	bl	8011686 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800e050:	6878      	ldr	r0, [r7, #4]
 800e052:	f000 fcec 	bl	800ea2e <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800e056:	687b      	ldr	r3, [r7, #4]
 800e058:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e05c:	689b      	ldr	r3, [r3, #8]
 800e05e:	6839      	ldr	r1, [r7, #0]
 800e060:	6878      	ldr	r0, [r7, #4]
 800e062:	4798      	blx	r3
 800e064:	4603      	mov	r3, r0
 800e066:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800e068:	e004      	b.n	800e074 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800e06a:	6839      	ldr	r1, [r7, #0]
 800e06c:	6878      	ldr	r0, [r7, #4]
 800e06e:	f000 fc13 	bl	800e898 <USBD_CtlError>
              break;
 800e072:	e000      	b.n	800e076 <USBD_StdEPReq+0x154>
              break;
 800e074:	bf00      	nop
          }
          break;
 800e076:	e0ab      	b.n	800e1d0 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800e078:	687b      	ldr	r3, [r7, #4]
 800e07a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e07e:	b2db      	uxtb	r3, r3
 800e080:	2b02      	cmp	r3, #2
 800e082:	d002      	beq.n	800e08a <USBD_StdEPReq+0x168>
 800e084:	2b03      	cmp	r3, #3
 800e086:	d032      	beq.n	800e0ee <USBD_StdEPReq+0x1cc>
 800e088:	e097      	b.n	800e1ba <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e08a:	7bbb      	ldrb	r3, [r7, #14]
 800e08c:	2b00      	cmp	r3, #0
 800e08e:	d007      	beq.n	800e0a0 <USBD_StdEPReq+0x17e>
 800e090:	7bbb      	ldrb	r3, [r7, #14]
 800e092:	2b80      	cmp	r3, #128	; 0x80
 800e094:	d004      	beq.n	800e0a0 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800e096:	6839      	ldr	r1, [r7, #0]
 800e098:	6878      	ldr	r0, [r7, #4]
 800e09a:	f000 fbfd 	bl	800e898 <USBD_CtlError>
                break;
 800e09e:	e091      	b.n	800e1c4 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e0a0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e0a4:	2b00      	cmp	r3, #0
 800e0a6:	da0b      	bge.n	800e0c0 <USBD_StdEPReq+0x19e>
 800e0a8:	7bbb      	ldrb	r3, [r7, #14]
 800e0aa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e0ae:	4613      	mov	r3, r2
 800e0b0:	009b      	lsls	r3, r3, #2
 800e0b2:	4413      	add	r3, r2
 800e0b4:	009b      	lsls	r3, r3, #2
 800e0b6:	3310      	adds	r3, #16
 800e0b8:	687a      	ldr	r2, [r7, #4]
 800e0ba:	4413      	add	r3, r2
 800e0bc:	3304      	adds	r3, #4
 800e0be:	e00b      	b.n	800e0d8 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800e0c0:	7bbb      	ldrb	r3, [r7, #14]
 800e0c2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e0c6:	4613      	mov	r3, r2
 800e0c8:	009b      	lsls	r3, r3, #2
 800e0ca:	4413      	add	r3, r2
 800e0cc:	009b      	lsls	r3, r3, #2
 800e0ce:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800e0d2:	687a      	ldr	r2, [r7, #4]
 800e0d4:	4413      	add	r3, r2
 800e0d6:	3304      	adds	r3, #4
 800e0d8:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800e0da:	68bb      	ldr	r3, [r7, #8]
 800e0dc:	2200      	movs	r2, #0
 800e0de:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800e0e0:	68bb      	ldr	r3, [r7, #8]
 800e0e2:	2202      	movs	r2, #2
 800e0e4:	4619      	mov	r1, r3
 800e0e6:	6878      	ldr	r0, [r7, #4]
 800e0e8:	f000 fc47 	bl	800e97a <USBD_CtlSendData>
              break;
 800e0ec:	e06a      	b.n	800e1c4 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800e0ee:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e0f2:	2b00      	cmp	r3, #0
 800e0f4:	da11      	bge.n	800e11a <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800e0f6:	7bbb      	ldrb	r3, [r7, #14]
 800e0f8:	f003 020f 	and.w	r2, r3, #15
 800e0fc:	6879      	ldr	r1, [r7, #4]
 800e0fe:	4613      	mov	r3, r2
 800e100:	009b      	lsls	r3, r3, #2
 800e102:	4413      	add	r3, r2
 800e104:	009b      	lsls	r3, r3, #2
 800e106:	440b      	add	r3, r1
 800e108:	3324      	adds	r3, #36	; 0x24
 800e10a:	881b      	ldrh	r3, [r3, #0]
 800e10c:	2b00      	cmp	r3, #0
 800e10e:	d117      	bne.n	800e140 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800e110:	6839      	ldr	r1, [r7, #0]
 800e112:	6878      	ldr	r0, [r7, #4]
 800e114:	f000 fbc0 	bl	800e898 <USBD_CtlError>
                  break;
 800e118:	e054      	b.n	800e1c4 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800e11a:	7bbb      	ldrb	r3, [r7, #14]
 800e11c:	f003 020f 	and.w	r2, r3, #15
 800e120:	6879      	ldr	r1, [r7, #4]
 800e122:	4613      	mov	r3, r2
 800e124:	009b      	lsls	r3, r3, #2
 800e126:	4413      	add	r3, r2
 800e128:	009b      	lsls	r3, r3, #2
 800e12a:	440b      	add	r3, r1
 800e12c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800e130:	881b      	ldrh	r3, [r3, #0]
 800e132:	2b00      	cmp	r3, #0
 800e134:	d104      	bne.n	800e140 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800e136:	6839      	ldr	r1, [r7, #0]
 800e138:	6878      	ldr	r0, [r7, #4]
 800e13a:	f000 fbad 	bl	800e898 <USBD_CtlError>
                  break;
 800e13e:	e041      	b.n	800e1c4 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e140:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e144:	2b00      	cmp	r3, #0
 800e146:	da0b      	bge.n	800e160 <USBD_StdEPReq+0x23e>
 800e148:	7bbb      	ldrb	r3, [r7, #14]
 800e14a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e14e:	4613      	mov	r3, r2
 800e150:	009b      	lsls	r3, r3, #2
 800e152:	4413      	add	r3, r2
 800e154:	009b      	lsls	r3, r3, #2
 800e156:	3310      	adds	r3, #16
 800e158:	687a      	ldr	r2, [r7, #4]
 800e15a:	4413      	add	r3, r2
 800e15c:	3304      	adds	r3, #4
 800e15e:	e00b      	b.n	800e178 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800e160:	7bbb      	ldrb	r3, [r7, #14]
 800e162:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e166:	4613      	mov	r3, r2
 800e168:	009b      	lsls	r3, r3, #2
 800e16a:	4413      	add	r3, r2
 800e16c:	009b      	lsls	r3, r3, #2
 800e16e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800e172:	687a      	ldr	r2, [r7, #4]
 800e174:	4413      	add	r3, r2
 800e176:	3304      	adds	r3, #4
 800e178:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800e17a:	7bbb      	ldrb	r3, [r7, #14]
 800e17c:	2b00      	cmp	r3, #0
 800e17e:	d002      	beq.n	800e186 <USBD_StdEPReq+0x264>
 800e180:	7bbb      	ldrb	r3, [r7, #14]
 800e182:	2b80      	cmp	r3, #128	; 0x80
 800e184:	d103      	bne.n	800e18e <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800e186:	68bb      	ldr	r3, [r7, #8]
 800e188:	2200      	movs	r2, #0
 800e18a:	601a      	str	r2, [r3, #0]
 800e18c:	e00e      	b.n	800e1ac <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800e18e:	7bbb      	ldrb	r3, [r7, #14]
 800e190:	4619      	mov	r1, r3
 800e192:	6878      	ldr	r0, [r7, #4]
 800e194:	f003 fa96 	bl	80116c4 <USBD_LL_IsStallEP>
 800e198:	4603      	mov	r3, r0
 800e19a:	2b00      	cmp	r3, #0
 800e19c:	d003      	beq.n	800e1a6 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800e19e:	68bb      	ldr	r3, [r7, #8]
 800e1a0:	2201      	movs	r2, #1
 800e1a2:	601a      	str	r2, [r3, #0]
 800e1a4:	e002      	b.n	800e1ac <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800e1a6:	68bb      	ldr	r3, [r7, #8]
 800e1a8:	2200      	movs	r2, #0
 800e1aa:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800e1ac:	68bb      	ldr	r3, [r7, #8]
 800e1ae:	2202      	movs	r2, #2
 800e1b0:	4619      	mov	r1, r3
 800e1b2:	6878      	ldr	r0, [r7, #4]
 800e1b4:	f000 fbe1 	bl	800e97a <USBD_CtlSendData>
              break;
 800e1b8:	e004      	b.n	800e1c4 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800e1ba:	6839      	ldr	r1, [r7, #0]
 800e1bc:	6878      	ldr	r0, [r7, #4]
 800e1be:	f000 fb6b 	bl	800e898 <USBD_CtlError>
              break;
 800e1c2:	bf00      	nop
          }
          break;
 800e1c4:	e004      	b.n	800e1d0 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800e1c6:	6839      	ldr	r1, [r7, #0]
 800e1c8:	6878      	ldr	r0, [r7, #4]
 800e1ca:	f000 fb65 	bl	800e898 <USBD_CtlError>
          break;
 800e1ce:	bf00      	nop
      }
      break;
 800e1d0:	e004      	b.n	800e1dc <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800e1d2:	6839      	ldr	r1, [r7, #0]
 800e1d4:	6878      	ldr	r0, [r7, #4]
 800e1d6:	f000 fb5f 	bl	800e898 <USBD_CtlError>
      break;
 800e1da:	bf00      	nop
  }

  return ret;
 800e1dc:	7bfb      	ldrb	r3, [r7, #15]
}
 800e1de:	4618      	mov	r0, r3
 800e1e0:	3710      	adds	r7, #16
 800e1e2:	46bd      	mov	sp, r7
 800e1e4:	bd80      	pop	{r7, pc}
	...

0800e1e8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e1e8:	b580      	push	{r7, lr}
 800e1ea:	b084      	sub	sp, #16
 800e1ec:	af00      	add	r7, sp, #0
 800e1ee:	6078      	str	r0, [r7, #4]
 800e1f0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800e1f2:	2300      	movs	r3, #0
 800e1f4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800e1f6:	2300      	movs	r3, #0
 800e1f8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800e1fa:	2300      	movs	r3, #0
 800e1fc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800e1fe:	683b      	ldr	r3, [r7, #0]
 800e200:	885b      	ldrh	r3, [r3, #2]
 800e202:	0a1b      	lsrs	r3, r3, #8
 800e204:	b29b      	uxth	r3, r3
 800e206:	3b01      	subs	r3, #1
 800e208:	2b0e      	cmp	r3, #14
 800e20a:	f200 8152 	bhi.w	800e4b2 <USBD_GetDescriptor+0x2ca>
 800e20e:	a201      	add	r2, pc, #4	; (adr r2, 800e214 <USBD_GetDescriptor+0x2c>)
 800e210:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e214:	0800e285 	.word	0x0800e285
 800e218:	0800e29d 	.word	0x0800e29d
 800e21c:	0800e2dd 	.word	0x0800e2dd
 800e220:	0800e4b3 	.word	0x0800e4b3
 800e224:	0800e4b3 	.word	0x0800e4b3
 800e228:	0800e453 	.word	0x0800e453
 800e22c:	0800e47f 	.word	0x0800e47f
 800e230:	0800e4b3 	.word	0x0800e4b3
 800e234:	0800e4b3 	.word	0x0800e4b3
 800e238:	0800e4b3 	.word	0x0800e4b3
 800e23c:	0800e4b3 	.word	0x0800e4b3
 800e240:	0800e4b3 	.word	0x0800e4b3
 800e244:	0800e4b3 	.word	0x0800e4b3
 800e248:	0800e4b3 	.word	0x0800e4b3
 800e24c:	0800e251 	.word	0x0800e251
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800e250:	687b      	ldr	r3, [r7, #4]
 800e252:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e256:	69db      	ldr	r3, [r3, #28]
 800e258:	2b00      	cmp	r3, #0
 800e25a:	d00b      	beq.n	800e274 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800e25c:	687b      	ldr	r3, [r7, #4]
 800e25e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e262:	69db      	ldr	r3, [r3, #28]
 800e264:	687a      	ldr	r2, [r7, #4]
 800e266:	7c12      	ldrb	r2, [r2, #16]
 800e268:	f107 0108 	add.w	r1, r7, #8
 800e26c:	4610      	mov	r0, r2
 800e26e:	4798      	blx	r3
 800e270:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e272:	e126      	b.n	800e4c2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800e274:	6839      	ldr	r1, [r7, #0]
 800e276:	6878      	ldr	r0, [r7, #4]
 800e278:	f000 fb0e 	bl	800e898 <USBD_CtlError>
        err++;
 800e27c:	7afb      	ldrb	r3, [r7, #11]
 800e27e:	3301      	adds	r3, #1
 800e280:	72fb      	strb	r3, [r7, #11]
      break;
 800e282:	e11e      	b.n	800e4c2 <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e28a:	681b      	ldr	r3, [r3, #0]
 800e28c:	687a      	ldr	r2, [r7, #4]
 800e28e:	7c12      	ldrb	r2, [r2, #16]
 800e290:	f107 0108 	add.w	r1, r7, #8
 800e294:	4610      	mov	r0, r2
 800e296:	4798      	blx	r3
 800e298:	60f8      	str	r0, [r7, #12]
      break;
 800e29a:	e112      	b.n	800e4c2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e29c:	687b      	ldr	r3, [r7, #4]
 800e29e:	7c1b      	ldrb	r3, [r3, #16]
 800e2a0:	2b00      	cmp	r3, #0
 800e2a2:	d10d      	bne.n	800e2c0 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800e2a4:	687b      	ldr	r3, [r7, #4]
 800e2a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e2aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e2ac:	f107 0208 	add.w	r2, r7, #8
 800e2b0:	4610      	mov	r0, r2
 800e2b2:	4798      	blx	r3
 800e2b4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800e2b6:	68fb      	ldr	r3, [r7, #12]
 800e2b8:	3301      	adds	r3, #1
 800e2ba:	2202      	movs	r2, #2
 800e2bc:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800e2be:	e100      	b.n	800e4c2 <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800e2c0:	687b      	ldr	r3, [r7, #4]
 800e2c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e2c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e2c8:	f107 0208 	add.w	r2, r7, #8
 800e2cc:	4610      	mov	r0, r2
 800e2ce:	4798      	blx	r3
 800e2d0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800e2d2:	68fb      	ldr	r3, [r7, #12]
 800e2d4:	3301      	adds	r3, #1
 800e2d6:	2202      	movs	r2, #2
 800e2d8:	701a      	strb	r2, [r3, #0]
      break;
 800e2da:	e0f2      	b.n	800e4c2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800e2dc:	683b      	ldr	r3, [r7, #0]
 800e2de:	885b      	ldrh	r3, [r3, #2]
 800e2e0:	b2db      	uxtb	r3, r3
 800e2e2:	2b05      	cmp	r3, #5
 800e2e4:	f200 80ac 	bhi.w	800e440 <USBD_GetDescriptor+0x258>
 800e2e8:	a201      	add	r2, pc, #4	; (adr r2, 800e2f0 <USBD_GetDescriptor+0x108>)
 800e2ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e2ee:	bf00      	nop
 800e2f0:	0800e309 	.word	0x0800e309
 800e2f4:	0800e33d 	.word	0x0800e33d
 800e2f8:	0800e371 	.word	0x0800e371
 800e2fc:	0800e3a5 	.word	0x0800e3a5
 800e300:	0800e3d9 	.word	0x0800e3d9
 800e304:	0800e40d 	.word	0x0800e40d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800e308:	687b      	ldr	r3, [r7, #4]
 800e30a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e30e:	685b      	ldr	r3, [r3, #4]
 800e310:	2b00      	cmp	r3, #0
 800e312:	d00b      	beq.n	800e32c <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800e314:	687b      	ldr	r3, [r7, #4]
 800e316:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e31a:	685b      	ldr	r3, [r3, #4]
 800e31c:	687a      	ldr	r2, [r7, #4]
 800e31e:	7c12      	ldrb	r2, [r2, #16]
 800e320:	f107 0108 	add.w	r1, r7, #8
 800e324:	4610      	mov	r0, r2
 800e326:	4798      	blx	r3
 800e328:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e32a:	e091      	b.n	800e450 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e32c:	6839      	ldr	r1, [r7, #0]
 800e32e:	6878      	ldr	r0, [r7, #4]
 800e330:	f000 fab2 	bl	800e898 <USBD_CtlError>
            err++;
 800e334:	7afb      	ldrb	r3, [r7, #11]
 800e336:	3301      	adds	r3, #1
 800e338:	72fb      	strb	r3, [r7, #11]
          break;
 800e33a:	e089      	b.n	800e450 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800e33c:	687b      	ldr	r3, [r7, #4]
 800e33e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e342:	689b      	ldr	r3, [r3, #8]
 800e344:	2b00      	cmp	r3, #0
 800e346:	d00b      	beq.n	800e360 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800e348:	687b      	ldr	r3, [r7, #4]
 800e34a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e34e:	689b      	ldr	r3, [r3, #8]
 800e350:	687a      	ldr	r2, [r7, #4]
 800e352:	7c12      	ldrb	r2, [r2, #16]
 800e354:	f107 0108 	add.w	r1, r7, #8
 800e358:	4610      	mov	r0, r2
 800e35a:	4798      	blx	r3
 800e35c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e35e:	e077      	b.n	800e450 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e360:	6839      	ldr	r1, [r7, #0]
 800e362:	6878      	ldr	r0, [r7, #4]
 800e364:	f000 fa98 	bl	800e898 <USBD_CtlError>
            err++;
 800e368:	7afb      	ldrb	r3, [r7, #11]
 800e36a:	3301      	adds	r3, #1
 800e36c:	72fb      	strb	r3, [r7, #11]
          break;
 800e36e:	e06f      	b.n	800e450 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800e370:	687b      	ldr	r3, [r7, #4]
 800e372:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e376:	68db      	ldr	r3, [r3, #12]
 800e378:	2b00      	cmp	r3, #0
 800e37a:	d00b      	beq.n	800e394 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800e37c:	687b      	ldr	r3, [r7, #4]
 800e37e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e382:	68db      	ldr	r3, [r3, #12]
 800e384:	687a      	ldr	r2, [r7, #4]
 800e386:	7c12      	ldrb	r2, [r2, #16]
 800e388:	f107 0108 	add.w	r1, r7, #8
 800e38c:	4610      	mov	r0, r2
 800e38e:	4798      	blx	r3
 800e390:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e392:	e05d      	b.n	800e450 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e394:	6839      	ldr	r1, [r7, #0]
 800e396:	6878      	ldr	r0, [r7, #4]
 800e398:	f000 fa7e 	bl	800e898 <USBD_CtlError>
            err++;
 800e39c:	7afb      	ldrb	r3, [r7, #11]
 800e39e:	3301      	adds	r3, #1
 800e3a0:	72fb      	strb	r3, [r7, #11]
          break;
 800e3a2:	e055      	b.n	800e450 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800e3a4:	687b      	ldr	r3, [r7, #4]
 800e3a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e3aa:	691b      	ldr	r3, [r3, #16]
 800e3ac:	2b00      	cmp	r3, #0
 800e3ae:	d00b      	beq.n	800e3c8 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800e3b0:	687b      	ldr	r3, [r7, #4]
 800e3b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e3b6:	691b      	ldr	r3, [r3, #16]
 800e3b8:	687a      	ldr	r2, [r7, #4]
 800e3ba:	7c12      	ldrb	r2, [r2, #16]
 800e3bc:	f107 0108 	add.w	r1, r7, #8
 800e3c0:	4610      	mov	r0, r2
 800e3c2:	4798      	blx	r3
 800e3c4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e3c6:	e043      	b.n	800e450 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e3c8:	6839      	ldr	r1, [r7, #0]
 800e3ca:	6878      	ldr	r0, [r7, #4]
 800e3cc:	f000 fa64 	bl	800e898 <USBD_CtlError>
            err++;
 800e3d0:	7afb      	ldrb	r3, [r7, #11]
 800e3d2:	3301      	adds	r3, #1
 800e3d4:	72fb      	strb	r3, [r7, #11]
          break;
 800e3d6:	e03b      	b.n	800e450 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800e3d8:	687b      	ldr	r3, [r7, #4]
 800e3da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e3de:	695b      	ldr	r3, [r3, #20]
 800e3e0:	2b00      	cmp	r3, #0
 800e3e2:	d00b      	beq.n	800e3fc <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800e3e4:	687b      	ldr	r3, [r7, #4]
 800e3e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e3ea:	695b      	ldr	r3, [r3, #20]
 800e3ec:	687a      	ldr	r2, [r7, #4]
 800e3ee:	7c12      	ldrb	r2, [r2, #16]
 800e3f0:	f107 0108 	add.w	r1, r7, #8
 800e3f4:	4610      	mov	r0, r2
 800e3f6:	4798      	blx	r3
 800e3f8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e3fa:	e029      	b.n	800e450 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e3fc:	6839      	ldr	r1, [r7, #0]
 800e3fe:	6878      	ldr	r0, [r7, #4]
 800e400:	f000 fa4a 	bl	800e898 <USBD_CtlError>
            err++;
 800e404:	7afb      	ldrb	r3, [r7, #11]
 800e406:	3301      	adds	r3, #1
 800e408:	72fb      	strb	r3, [r7, #11]
          break;
 800e40a:	e021      	b.n	800e450 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800e40c:	687b      	ldr	r3, [r7, #4]
 800e40e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e412:	699b      	ldr	r3, [r3, #24]
 800e414:	2b00      	cmp	r3, #0
 800e416:	d00b      	beq.n	800e430 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800e418:	687b      	ldr	r3, [r7, #4]
 800e41a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e41e:	699b      	ldr	r3, [r3, #24]
 800e420:	687a      	ldr	r2, [r7, #4]
 800e422:	7c12      	ldrb	r2, [r2, #16]
 800e424:	f107 0108 	add.w	r1, r7, #8
 800e428:	4610      	mov	r0, r2
 800e42a:	4798      	blx	r3
 800e42c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e42e:	e00f      	b.n	800e450 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e430:	6839      	ldr	r1, [r7, #0]
 800e432:	6878      	ldr	r0, [r7, #4]
 800e434:	f000 fa30 	bl	800e898 <USBD_CtlError>
            err++;
 800e438:	7afb      	ldrb	r3, [r7, #11]
 800e43a:	3301      	adds	r3, #1
 800e43c:	72fb      	strb	r3, [r7, #11]
          break;
 800e43e:	e007      	b.n	800e450 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800e440:	6839      	ldr	r1, [r7, #0]
 800e442:	6878      	ldr	r0, [r7, #4]
 800e444:	f000 fa28 	bl	800e898 <USBD_CtlError>
          err++;
 800e448:	7afb      	ldrb	r3, [r7, #11]
 800e44a:	3301      	adds	r3, #1
 800e44c:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800e44e:	bf00      	nop
      }
      break;
 800e450:	e037      	b.n	800e4c2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e452:	687b      	ldr	r3, [r7, #4]
 800e454:	7c1b      	ldrb	r3, [r3, #16]
 800e456:	2b00      	cmp	r3, #0
 800e458:	d109      	bne.n	800e46e <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800e45a:	687b      	ldr	r3, [r7, #4]
 800e45c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e460:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e462:	f107 0208 	add.w	r2, r7, #8
 800e466:	4610      	mov	r0, r2
 800e468:	4798      	blx	r3
 800e46a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e46c:	e029      	b.n	800e4c2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800e46e:	6839      	ldr	r1, [r7, #0]
 800e470:	6878      	ldr	r0, [r7, #4]
 800e472:	f000 fa11 	bl	800e898 <USBD_CtlError>
        err++;
 800e476:	7afb      	ldrb	r3, [r7, #11]
 800e478:	3301      	adds	r3, #1
 800e47a:	72fb      	strb	r3, [r7, #11]
      break;
 800e47c:	e021      	b.n	800e4c2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e47e:	687b      	ldr	r3, [r7, #4]
 800e480:	7c1b      	ldrb	r3, [r3, #16]
 800e482:	2b00      	cmp	r3, #0
 800e484:	d10d      	bne.n	800e4a2 <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800e486:	687b      	ldr	r3, [r7, #4]
 800e488:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e48c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e48e:	f107 0208 	add.w	r2, r7, #8
 800e492:	4610      	mov	r0, r2
 800e494:	4798      	blx	r3
 800e496:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800e498:	68fb      	ldr	r3, [r7, #12]
 800e49a:	3301      	adds	r3, #1
 800e49c:	2207      	movs	r2, #7
 800e49e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e4a0:	e00f      	b.n	800e4c2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800e4a2:	6839      	ldr	r1, [r7, #0]
 800e4a4:	6878      	ldr	r0, [r7, #4]
 800e4a6:	f000 f9f7 	bl	800e898 <USBD_CtlError>
        err++;
 800e4aa:	7afb      	ldrb	r3, [r7, #11]
 800e4ac:	3301      	adds	r3, #1
 800e4ae:	72fb      	strb	r3, [r7, #11]
      break;
 800e4b0:	e007      	b.n	800e4c2 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800e4b2:	6839      	ldr	r1, [r7, #0]
 800e4b4:	6878      	ldr	r0, [r7, #4]
 800e4b6:	f000 f9ef 	bl	800e898 <USBD_CtlError>
      err++;
 800e4ba:	7afb      	ldrb	r3, [r7, #11]
 800e4bc:	3301      	adds	r3, #1
 800e4be:	72fb      	strb	r3, [r7, #11]
      break;
 800e4c0:	bf00      	nop
  }

  if (err != 0U)
 800e4c2:	7afb      	ldrb	r3, [r7, #11]
 800e4c4:	2b00      	cmp	r3, #0
 800e4c6:	d11e      	bne.n	800e506 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800e4c8:	683b      	ldr	r3, [r7, #0]
 800e4ca:	88db      	ldrh	r3, [r3, #6]
 800e4cc:	2b00      	cmp	r3, #0
 800e4ce:	d016      	beq.n	800e4fe <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800e4d0:	893b      	ldrh	r3, [r7, #8]
 800e4d2:	2b00      	cmp	r3, #0
 800e4d4:	d00e      	beq.n	800e4f4 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800e4d6:	683b      	ldr	r3, [r7, #0]
 800e4d8:	88da      	ldrh	r2, [r3, #6]
 800e4da:	893b      	ldrh	r3, [r7, #8]
 800e4dc:	4293      	cmp	r3, r2
 800e4de:	bf28      	it	cs
 800e4e0:	4613      	movcs	r3, r2
 800e4e2:	b29b      	uxth	r3, r3
 800e4e4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800e4e6:	893b      	ldrh	r3, [r7, #8]
 800e4e8:	461a      	mov	r2, r3
 800e4ea:	68f9      	ldr	r1, [r7, #12]
 800e4ec:	6878      	ldr	r0, [r7, #4]
 800e4ee:	f000 fa44 	bl	800e97a <USBD_CtlSendData>
 800e4f2:	e009      	b.n	800e508 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800e4f4:	6839      	ldr	r1, [r7, #0]
 800e4f6:	6878      	ldr	r0, [r7, #4]
 800e4f8:	f000 f9ce 	bl	800e898 <USBD_CtlError>
 800e4fc:	e004      	b.n	800e508 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800e4fe:	6878      	ldr	r0, [r7, #4]
 800e500:	f000 fa95 	bl	800ea2e <USBD_CtlSendStatus>
 800e504:	e000      	b.n	800e508 <USBD_GetDescriptor+0x320>
    return;
 800e506:	bf00      	nop
  }
}
 800e508:	3710      	adds	r7, #16
 800e50a:	46bd      	mov	sp, r7
 800e50c:	bd80      	pop	{r7, pc}
 800e50e:	bf00      	nop

0800e510 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e510:	b580      	push	{r7, lr}
 800e512:	b084      	sub	sp, #16
 800e514:	af00      	add	r7, sp, #0
 800e516:	6078      	str	r0, [r7, #4]
 800e518:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800e51a:	683b      	ldr	r3, [r7, #0]
 800e51c:	889b      	ldrh	r3, [r3, #4]
 800e51e:	2b00      	cmp	r3, #0
 800e520:	d131      	bne.n	800e586 <USBD_SetAddress+0x76>
 800e522:	683b      	ldr	r3, [r7, #0]
 800e524:	88db      	ldrh	r3, [r3, #6]
 800e526:	2b00      	cmp	r3, #0
 800e528:	d12d      	bne.n	800e586 <USBD_SetAddress+0x76>
 800e52a:	683b      	ldr	r3, [r7, #0]
 800e52c:	885b      	ldrh	r3, [r3, #2]
 800e52e:	2b7f      	cmp	r3, #127	; 0x7f
 800e530:	d829      	bhi.n	800e586 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800e532:	683b      	ldr	r3, [r7, #0]
 800e534:	885b      	ldrh	r3, [r3, #2]
 800e536:	b2db      	uxtb	r3, r3
 800e538:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e53c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e53e:	687b      	ldr	r3, [r7, #4]
 800e540:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e544:	b2db      	uxtb	r3, r3
 800e546:	2b03      	cmp	r3, #3
 800e548:	d104      	bne.n	800e554 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800e54a:	6839      	ldr	r1, [r7, #0]
 800e54c:	6878      	ldr	r0, [r7, #4]
 800e54e:	f000 f9a3 	bl	800e898 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e552:	e01d      	b.n	800e590 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800e554:	687b      	ldr	r3, [r7, #4]
 800e556:	7bfa      	ldrb	r2, [r7, #15]
 800e558:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800e55c:	7bfb      	ldrb	r3, [r7, #15]
 800e55e:	4619      	mov	r1, r3
 800e560:	6878      	ldr	r0, [r7, #4]
 800e562:	f003 f8dc 	bl	801171e <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800e566:	6878      	ldr	r0, [r7, #4]
 800e568:	f000 fa61 	bl	800ea2e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800e56c:	7bfb      	ldrb	r3, [r7, #15]
 800e56e:	2b00      	cmp	r3, #0
 800e570:	d004      	beq.n	800e57c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800e572:	687b      	ldr	r3, [r7, #4]
 800e574:	2202      	movs	r2, #2
 800e576:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e57a:	e009      	b.n	800e590 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800e57c:	687b      	ldr	r3, [r7, #4]
 800e57e:	2201      	movs	r2, #1
 800e580:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e584:	e004      	b.n	800e590 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800e586:	6839      	ldr	r1, [r7, #0]
 800e588:	6878      	ldr	r0, [r7, #4]
 800e58a:	f000 f985 	bl	800e898 <USBD_CtlError>
  }
}
 800e58e:	bf00      	nop
 800e590:	bf00      	nop
 800e592:	3710      	adds	r7, #16
 800e594:	46bd      	mov	sp, r7
 800e596:	bd80      	pop	{r7, pc}

0800e598 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e598:	b580      	push	{r7, lr}
 800e59a:	b084      	sub	sp, #16
 800e59c:	af00      	add	r7, sp, #0
 800e59e:	6078      	str	r0, [r7, #4]
 800e5a0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e5a2:	2300      	movs	r3, #0
 800e5a4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800e5a6:	683b      	ldr	r3, [r7, #0]
 800e5a8:	885b      	ldrh	r3, [r3, #2]
 800e5aa:	b2da      	uxtb	r2, r3
 800e5ac:	4b4c      	ldr	r3, [pc, #304]	; (800e6e0 <USBD_SetConfig+0x148>)
 800e5ae:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800e5b0:	4b4b      	ldr	r3, [pc, #300]	; (800e6e0 <USBD_SetConfig+0x148>)
 800e5b2:	781b      	ldrb	r3, [r3, #0]
 800e5b4:	2b01      	cmp	r3, #1
 800e5b6:	d905      	bls.n	800e5c4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800e5b8:	6839      	ldr	r1, [r7, #0]
 800e5ba:	6878      	ldr	r0, [r7, #4]
 800e5bc:	f000 f96c 	bl	800e898 <USBD_CtlError>
    return USBD_FAIL;
 800e5c0:	2303      	movs	r3, #3
 800e5c2:	e088      	b.n	800e6d6 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800e5c4:	687b      	ldr	r3, [r7, #4]
 800e5c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e5ca:	b2db      	uxtb	r3, r3
 800e5cc:	2b02      	cmp	r3, #2
 800e5ce:	d002      	beq.n	800e5d6 <USBD_SetConfig+0x3e>
 800e5d0:	2b03      	cmp	r3, #3
 800e5d2:	d025      	beq.n	800e620 <USBD_SetConfig+0x88>
 800e5d4:	e071      	b.n	800e6ba <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800e5d6:	4b42      	ldr	r3, [pc, #264]	; (800e6e0 <USBD_SetConfig+0x148>)
 800e5d8:	781b      	ldrb	r3, [r3, #0]
 800e5da:	2b00      	cmp	r3, #0
 800e5dc:	d01c      	beq.n	800e618 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800e5de:	4b40      	ldr	r3, [pc, #256]	; (800e6e0 <USBD_SetConfig+0x148>)
 800e5e0:	781b      	ldrb	r3, [r3, #0]
 800e5e2:	461a      	mov	r2, r3
 800e5e4:	687b      	ldr	r3, [r7, #4]
 800e5e6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800e5e8:	4b3d      	ldr	r3, [pc, #244]	; (800e6e0 <USBD_SetConfig+0x148>)
 800e5ea:	781b      	ldrb	r3, [r3, #0]
 800e5ec:	4619      	mov	r1, r3
 800e5ee:	6878      	ldr	r0, [r7, #4]
 800e5f0:	f7ff f992 	bl	800d918 <USBD_SetClassConfig>
 800e5f4:	4603      	mov	r3, r0
 800e5f6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800e5f8:	7bfb      	ldrb	r3, [r7, #15]
 800e5fa:	2b00      	cmp	r3, #0
 800e5fc:	d004      	beq.n	800e608 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800e5fe:	6839      	ldr	r1, [r7, #0]
 800e600:	6878      	ldr	r0, [r7, #4]
 800e602:	f000 f949 	bl	800e898 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800e606:	e065      	b.n	800e6d4 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800e608:	6878      	ldr	r0, [r7, #4]
 800e60a:	f000 fa10 	bl	800ea2e <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800e60e:	687b      	ldr	r3, [r7, #4]
 800e610:	2203      	movs	r2, #3
 800e612:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800e616:	e05d      	b.n	800e6d4 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800e618:	6878      	ldr	r0, [r7, #4]
 800e61a:	f000 fa08 	bl	800ea2e <USBD_CtlSendStatus>
      break;
 800e61e:	e059      	b.n	800e6d4 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800e620:	4b2f      	ldr	r3, [pc, #188]	; (800e6e0 <USBD_SetConfig+0x148>)
 800e622:	781b      	ldrb	r3, [r3, #0]
 800e624:	2b00      	cmp	r3, #0
 800e626:	d112      	bne.n	800e64e <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800e628:	687b      	ldr	r3, [r7, #4]
 800e62a:	2202      	movs	r2, #2
 800e62c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800e630:	4b2b      	ldr	r3, [pc, #172]	; (800e6e0 <USBD_SetConfig+0x148>)
 800e632:	781b      	ldrb	r3, [r3, #0]
 800e634:	461a      	mov	r2, r3
 800e636:	687b      	ldr	r3, [r7, #4]
 800e638:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800e63a:	4b29      	ldr	r3, [pc, #164]	; (800e6e0 <USBD_SetConfig+0x148>)
 800e63c:	781b      	ldrb	r3, [r3, #0]
 800e63e:	4619      	mov	r1, r3
 800e640:	6878      	ldr	r0, [r7, #4]
 800e642:	f7ff f985 	bl	800d950 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800e646:	6878      	ldr	r0, [r7, #4]
 800e648:	f000 f9f1 	bl	800ea2e <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800e64c:	e042      	b.n	800e6d4 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800e64e:	4b24      	ldr	r3, [pc, #144]	; (800e6e0 <USBD_SetConfig+0x148>)
 800e650:	781b      	ldrb	r3, [r3, #0]
 800e652:	461a      	mov	r2, r3
 800e654:	687b      	ldr	r3, [r7, #4]
 800e656:	685b      	ldr	r3, [r3, #4]
 800e658:	429a      	cmp	r2, r3
 800e65a:	d02a      	beq.n	800e6b2 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800e65c:	687b      	ldr	r3, [r7, #4]
 800e65e:	685b      	ldr	r3, [r3, #4]
 800e660:	b2db      	uxtb	r3, r3
 800e662:	4619      	mov	r1, r3
 800e664:	6878      	ldr	r0, [r7, #4]
 800e666:	f7ff f973 	bl	800d950 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800e66a:	4b1d      	ldr	r3, [pc, #116]	; (800e6e0 <USBD_SetConfig+0x148>)
 800e66c:	781b      	ldrb	r3, [r3, #0]
 800e66e:	461a      	mov	r2, r3
 800e670:	687b      	ldr	r3, [r7, #4]
 800e672:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800e674:	4b1a      	ldr	r3, [pc, #104]	; (800e6e0 <USBD_SetConfig+0x148>)
 800e676:	781b      	ldrb	r3, [r3, #0]
 800e678:	4619      	mov	r1, r3
 800e67a:	6878      	ldr	r0, [r7, #4]
 800e67c:	f7ff f94c 	bl	800d918 <USBD_SetClassConfig>
 800e680:	4603      	mov	r3, r0
 800e682:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800e684:	7bfb      	ldrb	r3, [r7, #15]
 800e686:	2b00      	cmp	r3, #0
 800e688:	d00f      	beq.n	800e6aa <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800e68a:	6839      	ldr	r1, [r7, #0]
 800e68c:	6878      	ldr	r0, [r7, #4]
 800e68e:	f000 f903 	bl	800e898 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800e692:	687b      	ldr	r3, [r7, #4]
 800e694:	685b      	ldr	r3, [r3, #4]
 800e696:	b2db      	uxtb	r3, r3
 800e698:	4619      	mov	r1, r3
 800e69a:	6878      	ldr	r0, [r7, #4]
 800e69c:	f7ff f958 	bl	800d950 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800e6a0:	687b      	ldr	r3, [r7, #4]
 800e6a2:	2202      	movs	r2, #2
 800e6a4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800e6a8:	e014      	b.n	800e6d4 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800e6aa:	6878      	ldr	r0, [r7, #4]
 800e6ac:	f000 f9bf 	bl	800ea2e <USBD_CtlSendStatus>
      break;
 800e6b0:	e010      	b.n	800e6d4 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800e6b2:	6878      	ldr	r0, [r7, #4]
 800e6b4:	f000 f9bb 	bl	800ea2e <USBD_CtlSendStatus>
      break;
 800e6b8:	e00c      	b.n	800e6d4 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800e6ba:	6839      	ldr	r1, [r7, #0]
 800e6bc:	6878      	ldr	r0, [r7, #4]
 800e6be:	f000 f8eb 	bl	800e898 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800e6c2:	4b07      	ldr	r3, [pc, #28]	; (800e6e0 <USBD_SetConfig+0x148>)
 800e6c4:	781b      	ldrb	r3, [r3, #0]
 800e6c6:	4619      	mov	r1, r3
 800e6c8:	6878      	ldr	r0, [r7, #4]
 800e6ca:	f7ff f941 	bl	800d950 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800e6ce:	2303      	movs	r3, #3
 800e6d0:	73fb      	strb	r3, [r7, #15]
      break;
 800e6d2:	bf00      	nop
  }

  return ret;
 800e6d4:	7bfb      	ldrb	r3, [r7, #15]
}
 800e6d6:	4618      	mov	r0, r3
 800e6d8:	3710      	adds	r7, #16
 800e6da:	46bd      	mov	sp, r7
 800e6dc:	bd80      	pop	{r7, pc}
 800e6de:	bf00      	nop
 800e6e0:	20000934 	.word	0x20000934

0800e6e4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e6e4:	b580      	push	{r7, lr}
 800e6e6:	b082      	sub	sp, #8
 800e6e8:	af00      	add	r7, sp, #0
 800e6ea:	6078      	str	r0, [r7, #4]
 800e6ec:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800e6ee:	683b      	ldr	r3, [r7, #0]
 800e6f0:	88db      	ldrh	r3, [r3, #6]
 800e6f2:	2b01      	cmp	r3, #1
 800e6f4:	d004      	beq.n	800e700 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800e6f6:	6839      	ldr	r1, [r7, #0]
 800e6f8:	6878      	ldr	r0, [r7, #4]
 800e6fa:	f000 f8cd 	bl	800e898 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800e6fe:	e023      	b.n	800e748 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800e700:	687b      	ldr	r3, [r7, #4]
 800e702:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e706:	b2db      	uxtb	r3, r3
 800e708:	2b02      	cmp	r3, #2
 800e70a:	dc02      	bgt.n	800e712 <USBD_GetConfig+0x2e>
 800e70c:	2b00      	cmp	r3, #0
 800e70e:	dc03      	bgt.n	800e718 <USBD_GetConfig+0x34>
 800e710:	e015      	b.n	800e73e <USBD_GetConfig+0x5a>
 800e712:	2b03      	cmp	r3, #3
 800e714:	d00b      	beq.n	800e72e <USBD_GetConfig+0x4a>
 800e716:	e012      	b.n	800e73e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800e718:	687b      	ldr	r3, [r7, #4]
 800e71a:	2200      	movs	r2, #0
 800e71c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800e71e:	687b      	ldr	r3, [r7, #4]
 800e720:	3308      	adds	r3, #8
 800e722:	2201      	movs	r2, #1
 800e724:	4619      	mov	r1, r3
 800e726:	6878      	ldr	r0, [r7, #4]
 800e728:	f000 f927 	bl	800e97a <USBD_CtlSendData>
        break;
 800e72c:	e00c      	b.n	800e748 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800e72e:	687b      	ldr	r3, [r7, #4]
 800e730:	3304      	adds	r3, #4
 800e732:	2201      	movs	r2, #1
 800e734:	4619      	mov	r1, r3
 800e736:	6878      	ldr	r0, [r7, #4]
 800e738:	f000 f91f 	bl	800e97a <USBD_CtlSendData>
        break;
 800e73c:	e004      	b.n	800e748 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800e73e:	6839      	ldr	r1, [r7, #0]
 800e740:	6878      	ldr	r0, [r7, #4]
 800e742:	f000 f8a9 	bl	800e898 <USBD_CtlError>
        break;
 800e746:	bf00      	nop
}
 800e748:	bf00      	nop
 800e74a:	3708      	adds	r7, #8
 800e74c:	46bd      	mov	sp, r7
 800e74e:	bd80      	pop	{r7, pc}

0800e750 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e750:	b580      	push	{r7, lr}
 800e752:	b082      	sub	sp, #8
 800e754:	af00      	add	r7, sp, #0
 800e756:	6078      	str	r0, [r7, #4]
 800e758:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800e75a:	687b      	ldr	r3, [r7, #4]
 800e75c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e760:	b2db      	uxtb	r3, r3
 800e762:	3b01      	subs	r3, #1
 800e764:	2b02      	cmp	r3, #2
 800e766:	d81e      	bhi.n	800e7a6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800e768:	683b      	ldr	r3, [r7, #0]
 800e76a:	88db      	ldrh	r3, [r3, #6]
 800e76c:	2b02      	cmp	r3, #2
 800e76e:	d004      	beq.n	800e77a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800e770:	6839      	ldr	r1, [r7, #0]
 800e772:	6878      	ldr	r0, [r7, #4]
 800e774:	f000 f890 	bl	800e898 <USBD_CtlError>
        break;
 800e778:	e01a      	b.n	800e7b0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800e77a:	687b      	ldr	r3, [r7, #4]
 800e77c:	2201      	movs	r2, #1
 800e77e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800e780:	687b      	ldr	r3, [r7, #4]
 800e782:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800e786:	2b00      	cmp	r3, #0
 800e788:	d005      	beq.n	800e796 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800e78a:	687b      	ldr	r3, [r7, #4]
 800e78c:	68db      	ldr	r3, [r3, #12]
 800e78e:	f043 0202 	orr.w	r2, r3, #2
 800e792:	687b      	ldr	r3, [r7, #4]
 800e794:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800e796:	687b      	ldr	r3, [r7, #4]
 800e798:	330c      	adds	r3, #12
 800e79a:	2202      	movs	r2, #2
 800e79c:	4619      	mov	r1, r3
 800e79e:	6878      	ldr	r0, [r7, #4]
 800e7a0:	f000 f8eb 	bl	800e97a <USBD_CtlSendData>
      break;
 800e7a4:	e004      	b.n	800e7b0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800e7a6:	6839      	ldr	r1, [r7, #0]
 800e7a8:	6878      	ldr	r0, [r7, #4]
 800e7aa:	f000 f875 	bl	800e898 <USBD_CtlError>
      break;
 800e7ae:	bf00      	nop
  }
}
 800e7b0:	bf00      	nop
 800e7b2:	3708      	adds	r7, #8
 800e7b4:	46bd      	mov	sp, r7
 800e7b6:	bd80      	pop	{r7, pc}

0800e7b8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e7b8:	b580      	push	{r7, lr}
 800e7ba:	b082      	sub	sp, #8
 800e7bc:	af00      	add	r7, sp, #0
 800e7be:	6078      	str	r0, [r7, #4]
 800e7c0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800e7c2:	683b      	ldr	r3, [r7, #0]
 800e7c4:	885b      	ldrh	r3, [r3, #2]
 800e7c6:	2b01      	cmp	r3, #1
 800e7c8:	d106      	bne.n	800e7d8 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800e7ca:	687b      	ldr	r3, [r7, #4]
 800e7cc:	2201      	movs	r2, #1
 800e7ce:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800e7d2:	6878      	ldr	r0, [r7, #4]
 800e7d4:	f000 f92b 	bl	800ea2e <USBD_CtlSendStatus>
  }
}
 800e7d8:	bf00      	nop
 800e7da:	3708      	adds	r7, #8
 800e7dc:	46bd      	mov	sp, r7
 800e7de:	bd80      	pop	{r7, pc}

0800e7e0 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e7e0:	b580      	push	{r7, lr}
 800e7e2:	b082      	sub	sp, #8
 800e7e4:	af00      	add	r7, sp, #0
 800e7e6:	6078      	str	r0, [r7, #4]
 800e7e8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800e7ea:	687b      	ldr	r3, [r7, #4]
 800e7ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e7f0:	b2db      	uxtb	r3, r3
 800e7f2:	3b01      	subs	r3, #1
 800e7f4:	2b02      	cmp	r3, #2
 800e7f6:	d80b      	bhi.n	800e810 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800e7f8:	683b      	ldr	r3, [r7, #0]
 800e7fa:	885b      	ldrh	r3, [r3, #2]
 800e7fc:	2b01      	cmp	r3, #1
 800e7fe:	d10c      	bne.n	800e81a <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800e800:	687b      	ldr	r3, [r7, #4]
 800e802:	2200      	movs	r2, #0
 800e804:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800e808:	6878      	ldr	r0, [r7, #4]
 800e80a:	f000 f910 	bl	800ea2e <USBD_CtlSendStatus>
      }
      break;
 800e80e:	e004      	b.n	800e81a <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800e810:	6839      	ldr	r1, [r7, #0]
 800e812:	6878      	ldr	r0, [r7, #4]
 800e814:	f000 f840 	bl	800e898 <USBD_CtlError>
      break;
 800e818:	e000      	b.n	800e81c <USBD_ClrFeature+0x3c>
      break;
 800e81a:	bf00      	nop
  }
}
 800e81c:	bf00      	nop
 800e81e:	3708      	adds	r7, #8
 800e820:	46bd      	mov	sp, r7
 800e822:	bd80      	pop	{r7, pc}

0800e824 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800e824:	b580      	push	{r7, lr}
 800e826:	b084      	sub	sp, #16
 800e828:	af00      	add	r7, sp, #0
 800e82a:	6078      	str	r0, [r7, #4]
 800e82c:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800e82e:	683b      	ldr	r3, [r7, #0]
 800e830:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800e832:	68fb      	ldr	r3, [r7, #12]
 800e834:	781a      	ldrb	r2, [r3, #0]
 800e836:	687b      	ldr	r3, [r7, #4]
 800e838:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800e83a:	68fb      	ldr	r3, [r7, #12]
 800e83c:	3301      	adds	r3, #1
 800e83e:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800e840:	68fb      	ldr	r3, [r7, #12]
 800e842:	781a      	ldrb	r2, [r3, #0]
 800e844:	687b      	ldr	r3, [r7, #4]
 800e846:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800e848:	68fb      	ldr	r3, [r7, #12]
 800e84a:	3301      	adds	r3, #1
 800e84c:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800e84e:	68f8      	ldr	r0, [r7, #12]
 800e850:	f7ff fa92 	bl	800dd78 <SWAPBYTE>
 800e854:	4603      	mov	r3, r0
 800e856:	461a      	mov	r2, r3
 800e858:	687b      	ldr	r3, [r7, #4]
 800e85a:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800e85c:	68fb      	ldr	r3, [r7, #12]
 800e85e:	3301      	adds	r3, #1
 800e860:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800e862:	68fb      	ldr	r3, [r7, #12]
 800e864:	3301      	adds	r3, #1
 800e866:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800e868:	68f8      	ldr	r0, [r7, #12]
 800e86a:	f7ff fa85 	bl	800dd78 <SWAPBYTE>
 800e86e:	4603      	mov	r3, r0
 800e870:	461a      	mov	r2, r3
 800e872:	687b      	ldr	r3, [r7, #4]
 800e874:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800e876:	68fb      	ldr	r3, [r7, #12]
 800e878:	3301      	adds	r3, #1
 800e87a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800e87c:	68fb      	ldr	r3, [r7, #12]
 800e87e:	3301      	adds	r3, #1
 800e880:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800e882:	68f8      	ldr	r0, [r7, #12]
 800e884:	f7ff fa78 	bl	800dd78 <SWAPBYTE>
 800e888:	4603      	mov	r3, r0
 800e88a:	461a      	mov	r2, r3
 800e88c:	687b      	ldr	r3, [r7, #4]
 800e88e:	80da      	strh	r2, [r3, #6]
}
 800e890:	bf00      	nop
 800e892:	3710      	adds	r7, #16
 800e894:	46bd      	mov	sp, r7
 800e896:	bd80      	pop	{r7, pc}

0800e898 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e898:	b580      	push	{r7, lr}
 800e89a:	b082      	sub	sp, #8
 800e89c:	af00      	add	r7, sp, #0
 800e89e:	6078      	str	r0, [r7, #4]
 800e8a0:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800e8a2:	2180      	movs	r1, #128	; 0x80
 800e8a4:	6878      	ldr	r0, [r7, #4]
 800e8a6:	f002 fecf 	bl	8011648 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800e8aa:	2100      	movs	r1, #0
 800e8ac:	6878      	ldr	r0, [r7, #4]
 800e8ae:	f002 fecb 	bl	8011648 <USBD_LL_StallEP>
}
 800e8b2:	bf00      	nop
 800e8b4:	3708      	adds	r7, #8
 800e8b6:	46bd      	mov	sp, r7
 800e8b8:	bd80      	pop	{r7, pc}

0800e8ba <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800e8ba:	b580      	push	{r7, lr}
 800e8bc:	b086      	sub	sp, #24
 800e8be:	af00      	add	r7, sp, #0
 800e8c0:	60f8      	str	r0, [r7, #12]
 800e8c2:	60b9      	str	r1, [r7, #8]
 800e8c4:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800e8c6:	2300      	movs	r3, #0
 800e8c8:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800e8ca:	68fb      	ldr	r3, [r7, #12]
 800e8cc:	2b00      	cmp	r3, #0
 800e8ce:	d036      	beq.n	800e93e <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800e8d0:	68fb      	ldr	r3, [r7, #12]
 800e8d2:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800e8d4:	6938      	ldr	r0, [r7, #16]
 800e8d6:	f000 f836 	bl	800e946 <USBD_GetLen>
 800e8da:	4603      	mov	r3, r0
 800e8dc:	3301      	adds	r3, #1
 800e8de:	b29b      	uxth	r3, r3
 800e8e0:	005b      	lsls	r3, r3, #1
 800e8e2:	b29a      	uxth	r2, r3
 800e8e4:	687b      	ldr	r3, [r7, #4]
 800e8e6:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800e8e8:	7dfb      	ldrb	r3, [r7, #23]
 800e8ea:	68ba      	ldr	r2, [r7, #8]
 800e8ec:	4413      	add	r3, r2
 800e8ee:	687a      	ldr	r2, [r7, #4]
 800e8f0:	7812      	ldrb	r2, [r2, #0]
 800e8f2:	701a      	strb	r2, [r3, #0]
  idx++;
 800e8f4:	7dfb      	ldrb	r3, [r7, #23]
 800e8f6:	3301      	adds	r3, #1
 800e8f8:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800e8fa:	7dfb      	ldrb	r3, [r7, #23]
 800e8fc:	68ba      	ldr	r2, [r7, #8]
 800e8fe:	4413      	add	r3, r2
 800e900:	2203      	movs	r2, #3
 800e902:	701a      	strb	r2, [r3, #0]
  idx++;
 800e904:	7dfb      	ldrb	r3, [r7, #23]
 800e906:	3301      	adds	r3, #1
 800e908:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800e90a:	e013      	b.n	800e934 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800e90c:	7dfb      	ldrb	r3, [r7, #23]
 800e90e:	68ba      	ldr	r2, [r7, #8]
 800e910:	4413      	add	r3, r2
 800e912:	693a      	ldr	r2, [r7, #16]
 800e914:	7812      	ldrb	r2, [r2, #0]
 800e916:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800e918:	693b      	ldr	r3, [r7, #16]
 800e91a:	3301      	adds	r3, #1
 800e91c:	613b      	str	r3, [r7, #16]
    idx++;
 800e91e:	7dfb      	ldrb	r3, [r7, #23]
 800e920:	3301      	adds	r3, #1
 800e922:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800e924:	7dfb      	ldrb	r3, [r7, #23]
 800e926:	68ba      	ldr	r2, [r7, #8]
 800e928:	4413      	add	r3, r2
 800e92a:	2200      	movs	r2, #0
 800e92c:	701a      	strb	r2, [r3, #0]
    idx++;
 800e92e:	7dfb      	ldrb	r3, [r7, #23]
 800e930:	3301      	adds	r3, #1
 800e932:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800e934:	693b      	ldr	r3, [r7, #16]
 800e936:	781b      	ldrb	r3, [r3, #0]
 800e938:	2b00      	cmp	r3, #0
 800e93a:	d1e7      	bne.n	800e90c <USBD_GetString+0x52>
 800e93c:	e000      	b.n	800e940 <USBD_GetString+0x86>
    return;
 800e93e:	bf00      	nop
  }
}
 800e940:	3718      	adds	r7, #24
 800e942:	46bd      	mov	sp, r7
 800e944:	bd80      	pop	{r7, pc}

0800e946 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800e946:	b480      	push	{r7}
 800e948:	b085      	sub	sp, #20
 800e94a:	af00      	add	r7, sp, #0
 800e94c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800e94e:	2300      	movs	r3, #0
 800e950:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800e952:	687b      	ldr	r3, [r7, #4]
 800e954:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800e956:	e005      	b.n	800e964 <USBD_GetLen+0x1e>
  {
    len++;
 800e958:	7bfb      	ldrb	r3, [r7, #15]
 800e95a:	3301      	adds	r3, #1
 800e95c:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800e95e:	68bb      	ldr	r3, [r7, #8]
 800e960:	3301      	adds	r3, #1
 800e962:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800e964:	68bb      	ldr	r3, [r7, #8]
 800e966:	781b      	ldrb	r3, [r3, #0]
 800e968:	2b00      	cmp	r3, #0
 800e96a:	d1f5      	bne.n	800e958 <USBD_GetLen+0x12>
  }

  return len;
 800e96c:	7bfb      	ldrb	r3, [r7, #15]
}
 800e96e:	4618      	mov	r0, r3
 800e970:	3714      	adds	r7, #20
 800e972:	46bd      	mov	sp, r7
 800e974:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e978:	4770      	bx	lr

0800e97a <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800e97a:	b580      	push	{r7, lr}
 800e97c:	b084      	sub	sp, #16
 800e97e:	af00      	add	r7, sp, #0
 800e980:	60f8      	str	r0, [r7, #12]
 800e982:	60b9      	str	r1, [r7, #8]
 800e984:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800e986:	68fb      	ldr	r3, [r7, #12]
 800e988:	2202      	movs	r2, #2
 800e98a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800e98e:	68fb      	ldr	r3, [r7, #12]
 800e990:	687a      	ldr	r2, [r7, #4]
 800e992:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800e994:	68fb      	ldr	r3, [r7, #12]
 800e996:	687a      	ldr	r2, [r7, #4]
 800e998:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800e99a:	687b      	ldr	r3, [r7, #4]
 800e99c:	68ba      	ldr	r2, [r7, #8]
 800e99e:	2100      	movs	r1, #0
 800e9a0:	68f8      	ldr	r0, [r7, #12]
 800e9a2:	f002 fedb 	bl	801175c <USBD_LL_Transmit>

  return USBD_OK;
 800e9a6:	2300      	movs	r3, #0
}
 800e9a8:	4618      	mov	r0, r3
 800e9aa:	3710      	adds	r7, #16
 800e9ac:	46bd      	mov	sp, r7
 800e9ae:	bd80      	pop	{r7, pc}

0800e9b0 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800e9b0:	b580      	push	{r7, lr}
 800e9b2:	b084      	sub	sp, #16
 800e9b4:	af00      	add	r7, sp, #0
 800e9b6:	60f8      	str	r0, [r7, #12]
 800e9b8:	60b9      	str	r1, [r7, #8]
 800e9ba:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800e9bc:	687b      	ldr	r3, [r7, #4]
 800e9be:	68ba      	ldr	r2, [r7, #8]
 800e9c0:	2100      	movs	r1, #0
 800e9c2:	68f8      	ldr	r0, [r7, #12]
 800e9c4:	f002 feca 	bl	801175c <USBD_LL_Transmit>

  return USBD_OK;
 800e9c8:	2300      	movs	r3, #0
}
 800e9ca:	4618      	mov	r0, r3
 800e9cc:	3710      	adds	r7, #16
 800e9ce:	46bd      	mov	sp, r7
 800e9d0:	bd80      	pop	{r7, pc}

0800e9d2 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800e9d2:	b580      	push	{r7, lr}
 800e9d4:	b084      	sub	sp, #16
 800e9d6:	af00      	add	r7, sp, #0
 800e9d8:	60f8      	str	r0, [r7, #12]
 800e9da:	60b9      	str	r1, [r7, #8]
 800e9dc:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800e9de:	68fb      	ldr	r3, [r7, #12]
 800e9e0:	2203      	movs	r2, #3
 800e9e2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800e9e6:	68fb      	ldr	r3, [r7, #12]
 800e9e8:	687a      	ldr	r2, [r7, #4]
 800e9ea:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800e9ee:	68fb      	ldr	r3, [r7, #12]
 800e9f0:	687a      	ldr	r2, [r7, #4]
 800e9f2:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800e9f6:	687b      	ldr	r3, [r7, #4]
 800e9f8:	68ba      	ldr	r2, [r7, #8]
 800e9fa:	2100      	movs	r1, #0
 800e9fc:	68f8      	ldr	r0, [r7, #12]
 800e9fe:	f002 fece 	bl	801179e <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ea02:	2300      	movs	r3, #0
}
 800ea04:	4618      	mov	r0, r3
 800ea06:	3710      	adds	r7, #16
 800ea08:	46bd      	mov	sp, r7
 800ea0a:	bd80      	pop	{r7, pc}

0800ea0c <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800ea0c:	b580      	push	{r7, lr}
 800ea0e:	b084      	sub	sp, #16
 800ea10:	af00      	add	r7, sp, #0
 800ea12:	60f8      	str	r0, [r7, #12]
 800ea14:	60b9      	str	r1, [r7, #8]
 800ea16:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ea18:	687b      	ldr	r3, [r7, #4]
 800ea1a:	68ba      	ldr	r2, [r7, #8]
 800ea1c:	2100      	movs	r1, #0
 800ea1e:	68f8      	ldr	r0, [r7, #12]
 800ea20:	f002 febd 	bl	801179e <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ea24:	2300      	movs	r3, #0
}
 800ea26:	4618      	mov	r0, r3
 800ea28:	3710      	adds	r7, #16
 800ea2a:	46bd      	mov	sp, r7
 800ea2c:	bd80      	pop	{r7, pc}

0800ea2e <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800ea2e:	b580      	push	{r7, lr}
 800ea30:	b082      	sub	sp, #8
 800ea32:	af00      	add	r7, sp, #0
 800ea34:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800ea36:	687b      	ldr	r3, [r7, #4]
 800ea38:	2204      	movs	r2, #4
 800ea3a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800ea3e:	2300      	movs	r3, #0
 800ea40:	2200      	movs	r2, #0
 800ea42:	2100      	movs	r1, #0
 800ea44:	6878      	ldr	r0, [r7, #4]
 800ea46:	f002 fe89 	bl	801175c <USBD_LL_Transmit>

  return USBD_OK;
 800ea4a:	2300      	movs	r3, #0
}
 800ea4c:	4618      	mov	r0, r3
 800ea4e:	3708      	adds	r7, #8
 800ea50:	46bd      	mov	sp, r7
 800ea52:	bd80      	pop	{r7, pc}

0800ea54 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800ea54:	b580      	push	{r7, lr}
 800ea56:	b082      	sub	sp, #8
 800ea58:	af00      	add	r7, sp, #0
 800ea5a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800ea5c:	687b      	ldr	r3, [r7, #4]
 800ea5e:	2205      	movs	r2, #5
 800ea60:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ea64:	2300      	movs	r3, #0
 800ea66:	2200      	movs	r2, #0
 800ea68:	2100      	movs	r1, #0
 800ea6a:	6878      	ldr	r0, [r7, #4]
 800ea6c:	f002 fe97 	bl	801179e <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ea70:	2300      	movs	r3, #0
}
 800ea72:	4618      	mov	r0, r3
 800ea74:	3708      	adds	r7, #8
 800ea76:	46bd      	mov	sp, r7
 800ea78:	bd80      	pop	{r7, pc}

0800ea7a <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800ea7a:	b480      	push	{r7}
 800ea7c:	b085      	sub	sp, #20
 800ea7e:	af00      	add	r7, sp, #0
 800ea80:	4603      	mov	r3, r0
 800ea82:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800ea84:	2300      	movs	r3, #0
 800ea86:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800ea88:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800ea8c:	2b84      	cmp	r3, #132	; 0x84
 800ea8e:	d005      	beq.n	800ea9c <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800ea90:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800ea94:	68fb      	ldr	r3, [r7, #12]
 800ea96:	4413      	add	r3, r2
 800ea98:	3303      	adds	r3, #3
 800ea9a:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800ea9c:	68fb      	ldr	r3, [r7, #12]
}
 800ea9e:	4618      	mov	r0, r3
 800eaa0:	3714      	adds	r7, #20
 800eaa2:	46bd      	mov	sp, r7
 800eaa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaa8:	4770      	bx	lr

0800eaaa <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800eaaa:	b580      	push	{r7, lr}
 800eaac:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800eaae:	f001 f80f 	bl	800fad0 <vTaskStartScheduler>
  
  return osOK;
 800eab2:	2300      	movs	r3, #0
}
 800eab4:	4618      	mov	r0, r3
 800eab6:	bd80      	pop	{r7, pc}

0800eab8 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800eab8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800eaba:	b087      	sub	sp, #28
 800eabc:	af02      	add	r7, sp, #8
 800eabe:	6078      	str	r0, [r7, #4]
 800eac0:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800eac2:	687b      	ldr	r3, [r7, #4]
 800eac4:	685c      	ldr	r4, [r3, #4]
 800eac6:	687b      	ldr	r3, [r7, #4]
 800eac8:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800eaca:	687b      	ldr	r3, [r7, #4]
 800eacc:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800eace:	b29e      	uxth	r6, r3
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800ead0:	687b      	ldr	r3, [r7, #4]
 800ead2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800ead6:	4618      	mov	r0, r3
 800ead8:	f7ff ffcf 	bl	800ea7a <makeFreeRtosPriority>
 800eadc:	4602      	mov	r2, r0
 800eade:	f107 030c 	add.w	r3, r7, #12
 800eae2:	9301      	str	r3, [sp, #4]
 800eae4:	9200      	str	r2, [sp, #0]
 800eae6:	683b      	ldr	r3, [r7, #0]
 800eae8:	4632      	mov	r2, r6
 800eaea:	4629      	mov	r1, r5
 800eaec:	4620      	mov	r0, r4
 800eaee:	f000 fe71 	bl	800f7d4 <xTaskCreate>
 800eaf2:	4603      	mov	r3, r0
 800eaf4:	2b01      	cmp	r3, #1
 800eaf6:	d001      	beq.n	800eafc <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 800eaf8:	2300      	movs	r3, #0
 800eafa:	e000      	b.n	800eafe <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 800eafc:	68fb      	ldr	r3, [r7, #12]
}
 800eafe:	4618      	mov	r0, r3
 800eb00:	3714      	adds	r7, #20
 800eb02:	46bd      	mov	sp, r7
 800eb04:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800eb06 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800eb06:	b580      	push	{r7, lr}
 800eb08:	b084      	sub	sp, #16
 800eb0a:	af00      	add	r7, sp, #0
 800eb0c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800eb0e:	687b      	ldr	r3, [r7, #4]
 800eb10:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800eb12:	68fb      	ldr	r3, [r7, #12]
 800eb14:	2b00      	cmp	r3, #0
 800eb16:	d001      	beq.n	800eb1c <osDelay+0x16>
 800eb18:	68fb      	ldr	r3, [r7, #12]
 800eb1a:	e000      	b.n	800eb1e <osDelay+0x18>
 800eb1c:	2301      	movs	r3, #1
 800eb1e:	4618      	mov	r0, r3
 800eb20:	f000 ffa2 	bl	800fa68 <vTaskDelay>
  
  return osOK;
 800eb24:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800eb26:	4618      	mov	r0, r3
 800eb28:	3710      	adds	r7, #16
 800eb2a:	46bd      	mov	sp, r7
 800eb2c:	bd80      	pop	{r7, pc}

0800eb2e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800eb2e:	b480      	push	{r7}
 800eb30:	b083      	sub	sp, #12
 800eb32:	af00      	add	r7, sp, #0
 800eb34:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800eb36:	687b      	ldr	r3, [r7, #4]
 800eb38:	f103 0208 	add.w	r2, r3, #8
 800eb3c:	687b      	ldr	r3, [r7, #4]
 800eb3e:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800eb40:	687b      	ldr	r3, [r7, #4]
 800eb42:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800eb46:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800eb48:	687b      	ldr	r3, [r7, #4]
 800eb4a:	f103 0208 	add.w	r2, r3, #8
 800eb4e:	687b      	ldr	r3, [r7, #4]
 800eb50:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800eb52:	687b      	ldr	r3, [r7, #4]
 800eb54:	f103 0208 	add.w	r2, r3, #8
 800eb58:	687b      	ldr	r3, [r7, #4]
 800eb5a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800eb5c:	687b      	ldr	r3, [r7, #4]
 800eb5e:	2200      	movs	r2, #0
 800eb60:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800eb62:	bf00      	nop
 800eb64:	370c      	adds	r7, #12
 800eb66:	46bd      	mov	sp, r7
 800eb68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb6c:	4770      	bx	lr

0800eb6e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800eb6e:	b480      	push	{r7}
 800eb70:	b083      	sub	sp, #12
 800eb72:	af00      	add	r7, sp, #0
 800eb74:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800eb76:	687b      	ldr	r3, [r7, #4]
 800eb78:	2200      	movs	r2, #0
 800eb7a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800eb7c:	bf00      	nop
 800eb7e:	370c      	adds	r7, #12
 800eb80:	46bd      	mov	sp, r7
 800eb82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb86:	4770      	bx	lr

0800eb88 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800eb88:	b480      	push	{r7}
 800eb8a:	b085      	sub	sp, #20
 800eb8c:	af00      	add	r7, sp, #0
 800eb8e:	6078      	str	r0, [r7, #4]
 800eb90:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800eb92:	687b      	ldr	r3, [r7, #4]
 800eb94:	685b      	ldr	r3, [r3, #4]
 800eb96:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800eb98:	683b      	ldr	r3, [r7, #0]
 800eb9a:	68fa      	ldr	r2, [r7, #12]
 800eb9c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800eb9e:	68fb      	ldr	r3, [r7, #12]
 800eba0:	689a      	ldr	r2, [r3, #8]
 800eba2:	683b      	ldr	r3, [r7, #0]
 800eba4:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800eba6:	68fb      	ldr	r3, [r7, #12]
 800eba8:	689b      	ldr	r3, [r3, #8]
 800ebaa:	683a      	ldr	r2, [r7, #0]
 800ebac:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800ebae:	68fb      	ldr	r3, [r7, #12]
 800ebb0:	683a      	ldr	r2, [r7, #0]
 800ebb2:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800ebb4:	683b      	ldr	r3, [r7, #0]
 800ebb6:	687a      	ldr	r2, [r7, #4]
 800ebb8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ebba:	687b      	ldr	r3, [r7, #4]
 800ebbc:	681b      	ldr	r3, [r3, #0]
 800ebbe:	1c5a      	adds	r2, r3, #1
 800ebc0:	687b      	ldr	r3, [r7, #4]
 800ebc2:	601a      	str	r2, [r3, #0]
}
 800ebc4:	bf00      	nop
 800ebc6:	3714      	adds	r7, #20
 800ebc8:	46bd      	mov	sp, r7
 800ebca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebce:	4770      	bx	lr

0800ebd0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ebd0:	b480      	push	{r7}
 800ebd2:	b085      	sub	sp, #20
 800ebd4:	af00      	add	r7, sp, #0
 800ebd6:	6078      	str	r0, [r7, #4]
 800ebd8:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800ebda:	683b      	ldr	r3, [r7, #0]
 800ebdc:	681b      	ldr	r3, [r3, #0]
 800ebde:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800ebe0:	68bb      	ldr	r3, [r7, #8]
 800ebe2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ebe6:	d103      	bne.n	800ebf0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800ebe8:	687b      	ldr	r3, [r7, #4]
 800ebea:	691b      	ldr	r3, [r3, #16]
 800ebec:	60fb      	str	r3, [r7, #12]
 800ebee:	e00c      	b.n	800ec0a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800ebf0:	687b      	ldr	r3, [r7, #4]
 800ebf2:	3308      	adds	r3, #8
 800ebf4:	60fb      	str	r3, [r7, #12]
 800ebf6:	e002      	b.n	800ebfe <vListInsert+0x2e>
 800ebf8:	68fb      	ldr	r3, [r7, #12]
 800ebfa:	685b      	ldr	r3, [r3, #4]
 800ebfc:	60fb      	str	r3, [r7, #12]
 800ebfe:	68fb      	ldr	r3, [r7, #12]
 800ec00:	685b      	ldr	r3, [r3, #4]
 800ec02:	681b      	ldr	r3, [r3, #0]
 800ec04:	68ba      	ldr	r2, [r7, #8]
 800ec06:	429a      	cmp	r2, r3
 800ec08:	d2f6      	bcs.n	800ebf8 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800ec0a:	68fb      	ldr	r3, [r7, #12]
 800ec0c:	685a      	ldr	r2, [r3, #4]
 800ec0e:	683b      	ldr	r3, [r7, #0]
 800ec10:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800ec12:	683b      	ldr	r3, [r7, #0]
 800ec14:	685b      	ldr	r3, [r3, #4]
 800ec16:	683a      	ldr	r2, [r7, #0]
 800ec18:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800ec1a:	683b      	ldr	r3, [r7, #0]
 800ec1c:	68fa      	ldr	r2, [r7, #12]
 800ec1e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800ec20:	68fb      	ldr	r3, [r7, #12]
 800ec22:	683a      	ldr	r2, [r7, #0]
 800ec24:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800ec26:	683b      	ldr	r3, [r7, #0]
 800ec28:	687a      	ldr	r2, [r7, #4]
 800ec2a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ec2c:	687b      	ldr	r3, [r7, #4]
 800ec2e:	681b      	ldr	r3, [r3, #0]
 800ec30:	1c5a      	adds	r2, r3, #1
 800ec32:	687b      	ldr	r3, [r7, #4]
 800ec34:	601a      	str	r2, [r3, #0]
}
 800ec36:	bf00      	nop
 800ec38:	3714      	adds	r7, #20
 800ec3a:	46bd      	mov	sp, r7
 800ec3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec40:	4770      	bx	lr

0800ec42 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800ec42:	b480      	push	{r7}
 800ec44:	b085      	sub	sp, #20
 800ec46:	af00      	add	r7, sp, #0
 800ec48:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800ec4a:	687b      	ldr	r3, [r7, #4]
 800ec4c:	691b      	ldr	r3, [r3, #16]
 800ec4e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800ec50:	687b      	ldr	r3, [r7, #4]
 800ec52:	685b      	ldr	r3, [r3, #4]
 800ec54:	687a      	ldr	r2, [r7, #4]
 800ec56:	6892      	ldr	r2, [r2, #8]
 800ec58:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800ec5a:	687b      	ldr	r3, [r7, #4]
 800ec5c:	689b      	ldr	r3, [r3, #8]
 800ec5e:	687a      	ldr	r2, [r7, #4]
 800ec60:	6852      	ldr	r2, [r2, #4]
 800ec62:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800ec64:	68fb      	ldr	r3, [r7, #12]
 800ec66:	685b      	ldr	r3, [r3, #4]
 800ec68:	687a      	ldr	r2, [r7, #4]
 800ec6a:	429a      	cmp	r2, r3
 800ec6c:	d103      	bne.n	800ec76 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800ec6e:	687b      	ldr	r3, [r7, #4]
 800ec70:	689a      	ldr	r2, [r3, #8]
 800ec72:	68fb      	ldr	r3, [r7, #12]
 800ec74:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800ec76:	687b      	ldr	r3, [r7, #4]
 800ec78:	2200      	movs	r2, #0
 800ec7a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800ec7c:	68fb      	ldr	r3, [r7, #12]
 800ec7e:	681b      	ldr	r3, [r3, #0]
 800ec80:	1e5a      	subs	r2, r3, #1
 800ec82:	68fb      	ldr	r3, [r7, #12]
 800ec84:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800ec86:	68fb      	ldr	r3, [r7, #12]
 800ec88:	681b      	ldr	r3, [r3, #0]
}
 800ec8a:	4618      	mov	r0, r3
 800ec8c:	3714      	adds	r7, #20
 800ec8e:	46bd      	mov	sp, r7
 800ec90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec94:	4770      	bx	lr
	...

0800ec98 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800ec98:	b580      	push	{r7, lr}
 800ec9a:	b084      	sub	sp, #16
 800ec9c:	af00      	add	r7, sp, #0
 800ec9e:	6078      	str	r0, [r7, #4]
 800eca0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800eca2:	687b      	ldr	r3, [r7, #4]
 800eca4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800eca6:	68fb      	ldr	r3, [r7, #12]
 800eca8:	2b00      	cmp	r3, #0
 800ecaa:	d10a      	bne.n	800ecc2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800ecac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ecb0:	f383 8811 	msr	BASEPRI, r3
 800ecb4:	f3bf 8f6f 	isb	sy
 800ecb8:	f3bf 8f4f 	dsb	sy
 800ecbc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800ecbe:	bf00      	nop
 800ecc0:	e7fe      	b.n	800ecc0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800ecc2:	f001 fe2f 	bl	8010924 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ecc6:	68fb      	ldr	r3, [r7, #12]
 800ecc8:	681a      	ldr	r2, [r3, #0]
 800ecca:	68fb      	ldr	r3, [r7, #12]
 800eccc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ecce:	68f9      	ldr	r1, [r7, #12]
 800ecd0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800ecd2:	fb01 f303 	mul.w	r3, r1, r3
 800ecd6:	441a      	add	r2, r3
 800ecd8:	68fb      	ldr	r3, [r7, #12]
 800ecda:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800ecdc:	68fb      	ldr	r3, [r7, #12]
 800ecde:	2200      	movs	r2, #0
 800ece0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800ece2:	68fb      	ldr	r3, [r7, #12]
 800ece4:	681a      	ldr	r2, [r3, #0]
 800ece6:	68fb      	ldr	r3, [r7, #12]
 800ece8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ecea:	68fb      	ldr	r3, [r7, #12]
 800ecec:	681a      	ldr	r2, [r3, #0]
 800ecee:	68fb      	ldr	r3, [r7, #12]
 800ecf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ecf2:	3b01      	subs	r3, #1
 800ecf4:	68f9      	ldr	r1, [r7, #12]
 800ecf6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800ecf8:	fb01 f303 	mul.w	r3, r1, r3
 800ecfc:	441a      	add	r2, r3
 800ecfe:	68fb      	ldr	r3, [r7, #12]
 800ed00:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800ed02:	68fb      	ldr	r3, [r7, #12]
 800ed04:	22ff      	movs	r2, #255	; 0xff
 800ed06:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800ed0a:	68fb      	ldr	r3, [r7, #12]
 800ed0c:	22ff      	movs	r2, #255	; 0xff
 800ed0e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800ed12:	683b      	ldr	r3, [r7, #0]
 800ed14:	2b00      	cmp	r3, #0
 800ed16:	d114      	bne.n	800ed42 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ed18:	68fb      	ldr	r3, [r7, #12]
 800ed1a:	691b      	ldr	r3, [r3, #16]
 800ed1c:	2b00      	cmp	r3, #0
 800ed1e:	d01a      	beq.n	800ed56 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ed20:	68fb      	ldr	r3, [r7, #12]
 800ed22:	3310      	adds	r3, #16
 800ed24:	4618      	mov	r0, r3
 800ed26:	f001 f90b 	bl	800ff40 <xTaskRemoveFromEventList>
 800ed2a:	4603      	mov	r3, r0
 800ed2c:	2b00      	cmp	r3, #0
 800ed2e:	d012      	beq.n	800ed56 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800ed30:	4b0c      	ldr	r3, [pc, #48]	; (800ed64 <xQueueGenericReset+0xcc>)
 800ed32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ed36:	601a      	str	r2, [r3, #0]
 800ed38:	f3bf 8f4f 	dsb	sy
 800ed3c:	f3bf 8f6f 	isb	sy
 800ed40:	e009      	b.n	800ed56 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800ed42:	68fb      	ldr	r3, [r7, #12]
 800ed44:	3310      	adds	r3, #16
 800ed46:	4618      	mov	r0, r3
 800ed48:	f7ff fef1 	bl	800eb2e <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800ed4c:	68fb      	ldr	r3, [r7, #12]
 800ed4e:	3324      	adds	r3, #36	; 0x24
 800ed50:	4618      	mov	r0, r3
 800ed52:	f7ff feec 	bl	800eb2e <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800ed56:	f001 fe15 	bl	8010984 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800ed5a:	2301      	movs	r3, #1
}
 800ed5c:	4618      	mov	r0, r3
 800ed5e:	3710      	adds	r7, #16
 800ed60:	46bd      	mov	sp, r7
 800ed62:	bd80      	pop	{r7, pc}
 800ed64:	e000ed04 	.word	0xe000ed04

0800ed68 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800ed68:	b580      	push	{r7, lr}
 800ed6a:	b08a      	sub	sp, #40	; 0x28
 800ed6c:	af02      	add	r7, sp, #8
 800ed6e:	60f8      	str	r0, [r7, #12]
 800ed70:	60b9      	str	r1, [r7, #8]
 800ed72:	4613      	mov	r3, r2
 800ed74:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ed76:	68fb      	ldr	r3, [r7, #12]
 800ed78:	2b00      	cmp	r3, #0
 800ed7a:	d10a      	bne.n	800ed92 <xQueueGenericCreate+0x2a>
	__asm volatile
 800ed7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed80:	f383 8811 	msr	BASEPRI, r3
 800ed84:	f3bf 8f6f 	isb	sy
 800ed88:	f3bf 8f4f 	dsb	sy
 800ed8c:	613b      	str	r3, [r7, #16]
}
 800ed8e:	bf00      	nop
 800ed90:	e7fe      	b.n	800ed90 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ed92:	68fb      	ldr	r3, [r7, #12]
 800ed94:	68ba      	ldr	r2, [r7, #8]
 800ed96:	fb02 f303 	mul.w	r3, r2, r3
 800ed9a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800ed9c:	69fb      	ldr	r3, [r7, #28]
 800ed9e:	3348      	adds	r3, #72	; 0x48
 800eda0:	4618      	mov	r0, r3
 800eda2:	f001 fee1 	bl	8010b68 <pvPortMalloc>
 800eda6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800eda8:	69bb      	ldr	r3, [r7, #24]
 800edaa:	2b00      	cmp	r3, #0
 800edac:	d00d      	beq.n	800edca <xQueueGenericCreate+0x62>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800edae:	69bb      	ldr	r3, [r7, #24]
 800edb0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800edb2:	697b      	ldr	r3, [r7, #20]
 800edb4:	3348      	adds	r3, #72	; 0x48
 800edb6:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800edb8:	79fa      	ldrb	r2, [r7, #7]
 800edba:	69bb      	ldr	r3, [r7, #24]
 800edbc:	9300      	str	r3, [sp, #0]
 800edbe:	4613      	mov	r3, r2
 800edc0:	697a      	ldr	r2, [r7, #20]
 800edc2:	68b9      	ldr	r1, [r7, #8]
 800edc4:	68f8      	ldr	r0, [r7, #12]
 800edc6:	f000 f805 	bl	800edd4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800edca:	69bb      	ldr	r3, [r7, #24]
	}
 800edcc:	4618      	mov	r0, r3
 800edce:	3720      	adds	r7, #32
 800edd0:	46bd      	mov	sp, r7
 800edd2:	bd80      	pop	{r7, pc}

0800edd4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800edd4:	b580      	push	{r7, lr}
 800edd6:	b084      	sub	sp, #16
 800edd8:	af00      	add	r7, sp, #0
 800edda:	60f8      	str	r0, [r7, #12]
 800eddc:	60b9      	str	r1, [r7, #8]
 800edde:	607a      	str	r2, [r7, #4]
 800ede0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800ede2:	68bb      	ldr	r3, [r7, #8]
 800ede4:	2b00      	cmp	r3, #0
 800ede6:	d103      	bne.n	800edf0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800ede8:	69bb      	ldr	r3, [r7, #24]
 800edea:	69ba      	ldr	r2, [r7, #24]
 800edec:	601a      	str	r2, [r3, #0]
 800edee:	e002      	b.n	800edf6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800edf0:	69bb      	ldr	r3, [r7, #24]
 800edf2:	687a      	ldr	r2, [r7, #4]
 800edf4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800edf6:	69bb      	ldr	r3, [r7, #24]
 800edf8:	68fa      	ldr	r2, [r7, #12]
 800edfa:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800edfc:	69bb      	ldr	r3, [r7, #24]
 800edfe:	68ba      	ldr	r2, [r7, #8]
 800ee00:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800ee02:	2101      	movs	r1, #1
 800ee04:	69b8      	ldr	r0, [r7, #24]
 800ee06:	f7ff ff47 	bl	800ec98 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800ee0a:	bf00      	nop
 800ee0c:	3710      	adds	r7, #16
 800ee0e:	46bd      	mov	sp, r7
 800ee10:	bd80      	pop	{r7, pc}

0800ee12 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800ee12:	b580      	push	{r7, lr}
 800ee14:	b082      	sub	sp, #8
 800ee16:	af00      	add	r7, sp, #0
 800ee18:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800ee1a:	687b      	ldr	r3, [r7, #4]
 800ee1c:	2b00      	cmp	r3, #0
 800ee1e:	d00e      	beq.n	800ee3e <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800ee20:	687b      	ldr	r3, [r7, #4]
 800ee22:	2200      	movs	r2, #0
 800ee24:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800ee26:	687b      	ldr	r3, [r7, #4]
 800ee28:	2200      	movs	r2, #0
 800ee2a:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800ee2c:	687b      	ldr	r3, [r7, #4]
 800ee2e:	2200      	movs	r2, #0
 800ee30:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800ee32:	2300      	movs	r3, #0
 800ee34:	2200      	movs	r2, #0
 800ee36:	2100      	movs	r1, #0
 800ee38:	6878      	ldr	r0, [r7, #4]
 800ee3a:	f000 f81d 	bl	800ee78 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800ee3e:	bf00      	nop
 800ee40:	3708      	adds	r7, #8
 800ee42:	46bd      	mov	sp, r7
 800ee44:	bd80      	pop	{r7, pc}

0800ee46 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800ee46:	b580      	push	{r7, lr}
 800ee48:	b086      	sub	sp, #24
 800ee4a:	af00      	add	r7, sp, #0
 800ee4c:	4603      	mov	r3, r0
 800ee4e:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800ee50:	2301      	movs	r3, #1
 800ee52:	617b      	str	r3, [r7, #20]
 800ee54:	2300      	movs	r3, #0
 800ee56:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800ee58:	79fb      	ldrb	r3, [r7, #7]
 800ee5a:	461a      	mov	r2, r3
 800ee5c:	6939      	ldr	r1, [r7, #16]
 800ee5e:	6978      	ldr	r0, [r7, #20]
 800ee60:	f7ff ff82 	bl	800ed68 <xQueueGenericCreate>
 800ee64:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800ee66:	68f8      	ldr	r0, [r7, #12]
 800ee68:	f7ff ffd3 	bl	800ee12 <prvInitialiseMutex>

		return xNewQueue;
 800ee6c:	68fb      	ldr	r3, [r7, #12]
	}
 800ee6e:	4618      	mov	r0, r3
 800ee70:	3718      	adds	r7, #24
 800ee72:	46bd      	mov	sp, r7
 800ee74:	bd80      	pop	{r7, pc}
	...

0800ee78 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800ee78:	b580      	push	{r7, lr}
 800ee7a:	b08e      	sub	sp, #56	; 0x38
 800ee7c:	af00      	add	r7, sp, #0
 800ee7e:	60f8      	str	r0, [r7, #12]
 800ee80:	60b9      	str	r1, [r7, #8]
 800ee82:	607a      	str	r2, [r7, #4]
 800ee84:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800ee86:	2300      	movs	r3, #0
 800ee88:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ee8a:	68fb      	ldr	r3, [r7, #12]
 800ee8c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800ee8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee90:	2b00      	cmp	r3, #0
 800ee92:	d10a      	bne.n	800eeaa <xQueueGenericSend+0x32>
	__asm volatile
 800ee94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee98:	f383 8811 	msr	BASEPRI, r3
 800ee9c:	f3bf 8f6f 	isb	sy
 800eea0:	f3bf 8f4f 	dsb	sy
 800eea4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800eea6:	bf00      	nop
 800eea8:	e7fe      	b.n	800eea8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800eeaa:	68bb      	ldr	r3, [r7, #8]
 800eeac:	2b00      	cmp	r3, #0
 800eeae:	d103      	bne.n	800eeb8 <xQueueGenericSend+0x40>
 800eeb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eeb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eeb4:	2b00      	cmp	r3, #0
 800eeb6:	d101      	bne.n	800eebc <xQueueGenericSend+0x44>
 800eeb8:	2301      	movs	r3, #1
 800eeba:	e000      	b.n	800eebe <xQueueGenericSend+0x46>
 800eebc:	2300      	movs	r3, #0
 800eebe:	2b00      	cmp	r3, #0
 800eec0:	d10a      	bne.n	800eed8 <xQueueGenericSend+0x60>
	__asm volatile
 800eec2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eec6:	f383 8811 	msr	BASEPRI, r3
 800eeca:	f3bf 8f6f 	isb	sy
 800eece:	f3bf 8f4f 	dsb	sy
 800eed2:	627b      	str	r3, [r7, #36]	; 0x24
}
 800eed4:	bf00      	nop
 800eed6:	e7fe      	b.n	800eed6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800eed8:	683b      	ldr	r3, [r7, #0]
 800eeda:	2b02      	cmp	r3, #2
 800eedc:	d103      	bne.n	800eee6 <xQueueGenericSend+0x6e>
 800eede:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eee0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800eee2:	2b01      	cmp	r3, #1
 800eee4:	d101      	bne.n	800eeea <xQueueGenericSend+0x72>
 800eee6:	2301      	movs	r3, #1
 800eee8:	e000      	b.n	800eeec <xQueueGenericSend+0x74>
 800eeea:	2300      	movs	r3, #0
 800eeec:	2b00      	cmp	r3, #0
 800eeee:	d10a      	bne.n	800ef06 <xQueueGenericSend+0x8e>
	__asm volatile
 800eef0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eef4:	f383 8811 	msr	BASEPRI, r3
 800eef8:	f3bf 8f6f 	isb	sy
 800eefc:	f3bf 8f4f 	dsb	sy
 800ef00:	623b      	str	r3, [r7, #32]
}
 800ef02:	bf00      	nop
 800ef04:	e7fe      	b.n	800ef04 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ef06:	f001 f9bd 	bl	8010284 <xTaskGetSchedulerState>
 800ef0a:	4603      	mov	r3, r0
 800ef0c:	2b00      	cmp	r3, #0
 800ef0e:	d102      	bne.n	800ef16 <xQueueGenericSend+0x9e>
 800ef10:	687b      	ldr	r3, [r7, #4]
 800ef12:	2b00      	cmp	r3, #0
 800ef14:	d101      	bne.n	800ef1a <xQueueGenericSend+0xa2>
 800ef16:	2301      	movs	r3, #1
 800ef18:	e000      	b.n	800ef1c <xQueueGenericSend+0xa4>
 800ef1a:	2300      	movs	r3, #0
 800ef1c:	2b00      	cmp	r3, #0
 800ef1e:	d10a      	bne.n	800ef36 <xQueueGenericSend+0xbe>
	__asm volatile
 800ef20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef24:	f383 8811 	msr	BASEPRI, r3
 800ef28:	f3bf 8f6f 	isb	sy
 800ef2c:	f3bf 8f4f 	dsb	sy
 800ef30:	61fb      	str	r3, [r7, #28]
}
 800ef32:	bf00      	nop
 800ef34:	e7fe      	b.n	800ef34 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ef36:	f001 fcf5 	bl	8010924 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ef3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef3c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ef3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ef42:	429a      	cmp	r2, r3
 800ef44:	d302      	bcc.n	800ef4c <xQueueGenericSend+0xd4>
 800ef46:	683b      	ldr	r3, [r7, #0]
 800ef48:	2b02      	cmp	r3, #2
 800ef4a:	d129      	bne.n	800efa0 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ef4c:	683a      	ldr	r2, [r7, #0]
 800ef4e:	68b9      	ldr	r1, [r7, #8]
 800ef50:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ef52:	f000 fb2f 	bl	800f5b4 <prvCopyDataToQueue>
 800ef56:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ef58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ef5c:	2b00      	cmp	r3, #0
 800ef5e:	d010      	beq.n	800ef82 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ef60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef62:	3324      	adds	r3, #36	; 0x24
 800ef64:	4618      	mov	r0, r3
 800ef66:	f000 ffeb 	bl	800ff40 <xTaskRemoveFromEventList>
 800ef6a:	4603      	mov	r3, r0
 800ef6c:	2b00      	cmp	r3, #0
 800ef6e:	d013      	beq.n	800ef98 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800ef70:	4b3f      	ldr	r3, [pc, #252]	; (800f070 <xQueueGenericSend+0x1f8>)
 800ef72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ef76:	601a      	str	r2, [r3, #0]
 800ef78:	f3bf 8f4f 	dsb	sy
 800ef7c:	f3bf 8f6f 	isb	sy
 800ef80:	e00a      	b.n	800ef98 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800ef82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef84:	2b00      	cmp	r3, #0
 800ef86:	d007      	beq.n	800ef98 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800ef88:	4b39      	ldr	r3, [pc, #228]	; (800f070 <xQueueGenericSend+0x1f8>)
 800ef8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ef8e:	601a      	str	r2, [r3, #0]
 800ef90:	f3bf 8f4f 	dsb	sy
 800ef94:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800ef98:	f001 fcf4 	bl	8010984 <vPortExitCritical>
				return pdPASS;
 800ef9c:	2301      	movs	r3, #1
 800ef9e:	e063      	b.n	800f068 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800efa0:	687b      	ldr	r3, [r7, #4]
 800efa2:	2b00      	cmp	r3, #0
 800efa4:	d103      	bne.n	800efae <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800efa6:	f001 fced 	bl	8010984 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800efaa:	2300      	movs	r3, #0
 800efac:	e05c      	b.n	800f068 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800efae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800efb0:	2b00      	cmp	r3, #0
 800efb2:	d106      	bne.n	800efc2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800efb4:	f107 0314 	add.w	r3, r7, #20
 800efb8:	4618      	mov	r0, r3
 800efba:	f001 f823 	bl	8010004 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800efbe:	2301      	movs	r3, #1
 800efc0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800efc2:	f001 fcdf 	bl	8010984 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800efc6:	f000 fdd3 	bl	800fb70 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800efca:	f001 fcab 	bl	8010924 <vPortEnterCritical>
 800efce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800efd0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800efd4:	b25b      	sxtb	r3, r3
 800efd6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800efda:	d103      	bne.n	800efe4 <xQueueGenericSend+0x16c>
 800efdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800efde:	2200      	movs	r2, #0
 800efe0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800efe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800efe6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800efea:	b25b      	sxtb	r3, r3
 800efec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800eff0:	d103      	bne.n	800effa <xQueueGenericSend+0x182>
 800eff2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eff4:	2200      	movs	r2, #0
 800eff6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800effa:	f001 fcc3 	bl	8010984 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800effe:	1d3a      	adds	r2, r7, #4
 800f000:	f107 0314 	add.w	r3, r7, #20
 800f004:	4611      	mov	r1, r2
 800f006:	4618      	mov	r0, r3
 800f008:	f001 f812 	bl	8010030 <xTaskCheckForTimeOut>
 800f00c:	4603      	mov	r3, r0
 800f00e:	2b00      	cmp	r3, #0
 800f010:	d124      	bne.n	800f05c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800f012:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f014:	f000 fbc6 	bl	800f7a4 <prvIsQueueFull>
 800f018:	4603      	mov	r3, r0
 800f01a:	2b00      	cmp	r3, #0
 800f01c:	d018      	beq.n	800f050 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800f01e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f020:	3310      	adds	r3, #16
 800f022:	687a      	ldr	r2, [r7, #4]
 800f024:	4611      	mov	r1, r2
 800f026:	4618      	mov	r0, r3
 800f028:	f000 ff66 	bl	800fef8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800f02c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f02e:	f000 fb51 	bl	800f6d4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800f032:	f000 fdab 	bl	800fb8c <xTaskResumeAll>
 800f036:	4603      	mov	r3, r0
 800f038:	2b00      	cmp	r3, #0
 800f03a:	f47f af7c 	bne.w	800ef36 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800f03e:	4b0c      	ldr	r3, [pc, #48]	; (800f070 <xQueueGenericSend+0x1f8>)
 800f040:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f044:	601a      	str	r2, [r3, #0]
 800f046:	f3bf 8f4f 	dsb	sy
 800f04a:	f3bf 8f6f 	isb	sy
 800f04e:	e772      	b.n	800ef36 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800f050:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f052:	f000 fb3f 	bl	800f6d4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800f056:	f000 fd99 	bl	800fb8c <xTaskResumeAll>
 800f05a:	e76c      	b.n	800ef36 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800f05c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f05e:	f000 fb39 	bl	800f6d4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f062:	f000 fd93 	bl	800fb8c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800f066:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800f068:	4618      	mov	r0, r3
 800f06a:	3738      	adds	r7, #56	; 0x38
 800f06c:	46bd      	mov	sp, r7
 800f06e:	bd80      	pop	{r7, pc}
 800f070:	e000ed04 	.word	0xe000ed04

0800f074 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800f074:	b580      	push	{r7, lr}
 800f076:	b090      	sub	sp, #64	; 0x40
 800f078:	af00      	add	r7, sp, #0
 800f07a:	60f8      	str	r0, [r7, #12]
 800f07c:	60b9      	str	r1, [r7, #8]
 800f07e:	607a      	str	r2, [r7, #4]
 800f080:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800f082:	68fb      	ldr	r3, [r7, #12]
 800f084:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800f086:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f088:	2b00      	cmp	r3, #0
 800f08a:	d10a      	bne.n	800f0a2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800f08c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f090:	f383 8811 	msr	BASEPRI, r3
 800f094:	f3bf 8f6f 	isb	sy
 800f098:	f3bf 8f4f 	dsb	sy
 800f09c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800f09e:	bf00      	nop
 800f0a0:	e7fe      	b.n	800f0a0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f0a2:	68bb      	ldr	r3, [r7, #8]
 800f0a4:	2b00      	cmp	r3, #0
 800f0a6:	d103      	bne.n	800f0b0 <xQueueGenericSendFromISR+0x3c>
 800f0a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f0aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f0ac:	2b00      	cmp	r3, #0
 800f0ae:	d101      	bne.n	800f0b4 <xQueueGenericSendFromISR+0x40>
 800f0b0:	2301      	movs	r3, #1
 800f0b2:	e000      	b.n	800f0b6 <xQueueGenericSendFromISR+0x42>
 800f0b4:	2300      	movs	r3, #0
 800f0b6:	2b00      	cmp	r3, #0
 800f0b8:	d10a      	bne.n	800f0d0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800f0ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f0be:	f383 8811 	msr	BASEPRI, r3
 800f0c2:	f3bf 8f6f 	isb	sy
 800f0c6:	f3bf 8f4f 	dsb	sy
 800f0ca:	627b      	str	r3, [r7, #36]	; 0x24
}
 800f0cc:	bf00      	nop
 800f0ce:	e7fe      	b.n	800f0ce <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800f0d0:	683b      	ldr	r3, [r7, #0]
 800f0d2:	2b02      	cmp	r3, #2
 800f0d4:	d103      	bne.n	800f0de <xQueueGenericSendFromISR+0x6a>
 800f0d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f0d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f0da:	2b01      	cmp	r3, #1
 800f0dc:	d101      	bne.n	800f0e2 <xQueueGenericSendFromISR+0x6e>
 800f0de:	2301      	movs	r3, #1
 800f0e0:	e000      	b.n	800f0e4 <xQueueGenericSendFromISR+0x70>
 800f0e2:	2300      	movs	r3, #0
 800f0e4:	2b00      	cmp	r3, #0
 800f0e6:	d10a      	bne.n	800f0fe <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800f0e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f0ec:	f383 8811 	msr	BASEPRI, r3
 800f0f0:	f3bf 8f6f 	isb	sy
 800f0f4:	f3bf 8f4f 	dsb	sy
 800f0f8:	623b      	str	r3, [r7, #32]
}
 800f0fa:	bf00      	nop
 800f0fc:	e7fe      	b.n	800f0fc <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800f0fe:	f001 fcf3 	bl	8010ae8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800f102:	f3ef 8211 	mrs	r2, BASEPRI
 800f106:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f10a:	f383 8811 	msr	BASEPRI, r3
 800f10e:	f3bf 8f6f 	isb	sy
 800f112:	f3bf 8f4f 	dsb	sy
 800f116:	61fa      	str	r2, [r7, #28]
 800f118:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800f11a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800f11c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800f11e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f120:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f122:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f124:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f126:	429a      	cmp	r2, r3
 800f128:	d302      	bcc.n	800f130 <xQueueGenericSendFromISR+0xbc>
 800f12a:	683b      	ldr	r3, [r7, #0]
 800f12c:	2b02      	cmp	r3, #2
 800f12e:	d12f      	bne.n	800f190 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800f130:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f132:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f136:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f13a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f13c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f13e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800f140:	683a      	ldr	r2, [r7, #0]
 800f142:	68b9      	ldr	r1, [r7, #8]
 800f144:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800f146:	f000 fa35 	bl	800f5b4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800f14a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800f14e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f152:	d112      	bne.n	800f17a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f154:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f158:	2b00      	cmp	r3, #0
 800f15a:	d016      	beq.n	800f18a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f15c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f15e:	3324      	adds	r3, #36	; 0x24
 800f160:	4618      	mov	r0, r3
 800f162:	f000 feed 	bl	800ff40 <xTaskRemoveFromEventList>
 800f166:	4603      	mov	r3, r0
 800f168:	2b00      	cmp	r3, #0
 800f16a:	d00e      	beq.n	800f18a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800f16c:	687b      	ldr	r3, [r7, #4]
 800f16e:	2b00      	cmp	r3, #0
 800f170:	d00b      	beq.n	800f18a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800f172:	687b      	ldr	r3, [r7, #4]
 800f174:	2201      	movs	r2, #1
 800f176:	601a      	str	r2, [r3, #0]
 800f178:	e007      	b.n	800f18a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800f17a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800f17e:	3301      	adds	r3, #1
 800f180:	b2db      	uxtb	r3, r3
 800f182:	b25a      	sxtb	r2, r3
 800f184:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f186:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800f18a:	2301      	movs	r3, #1
 800f18c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800f18e:	e001      	b.n	800f194 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800f190:	2300      	movs	r3, #0
 800f192:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f194:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f196:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800f198:	697b      	ldr	r3, [r7, #20]
 800f19a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800f19e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800f1a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800f1a2:	4618      	mov	r0, r3
 800f1a4:	3740      	adds	r7, #64	; 0x40
 800f1a6:	46bd      	mov	sp, r7
 800f1a8:	bd80      	pop	{r7, pc}
	...

0800f1ac <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800f1ac:	b580      	push	{r7, lr}
 800f1ae:	b08c      	sub	sp, #48	; 0x30
 800f1b0:	af00      	add	r7, sp, #0
 800f1b2:	60f8      	str	r0, [r7, #12]
 800f1b4:	60b9      	str	r1, [r7, #8]
 800f1b6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800f1b8:	2300      	movs	r3, #0
 800f1ba:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800f1bc:	68fb      	ldr	r3, [r7, #12]
 800f1be:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800f1c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f1c2:	2b00      	cmp	r3, #0
 800f1c4:	d10a      	bne.n	800f1dc <xQueueReceive+0x30>
	__asm volatile
 800f1c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f1ca:	f383 8811 	msr	BASEPRI, r3
 800f1ce:	f3bf 8f6f 	isb	sy
 800f1d2:	f3bf 8f4f 	dsb	sy
 800f1d6:	623b      	str	r3, [r7, #32]
}
 800f1d8:	bf00      	nop
 800f1da:	e7fe      	b.n	800f1da <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f1dc:	68bb      	ldr	r3, [r7, #8]
 800f1de:	2b00      	cmp	r3, #0
 800f1e0:	d103      	bne.n	800f1ea <xQueueReceive+0x3e>
 800f1e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f1e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f1e6:	2b00      	cmp	r3, #0
 800f1e8:	d101      	bne.n	800f1ee <xQueueReceive+0x42>
 800f1ea:	2301      	movs	r3, #1
 800f1ec:	e000      	b.n	800f1f0 <xQueueReceive+0x44>
 800f1ee:	2300      	movs	r3, #0
 800f1f0:	2b00      	cmp	r3, #0
 800f1f2:	d10a      	bne.n	800f20a <xQueueReceive+0x5e>
	__asm volatile
 800f1f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f1f8:	f383 8811 	msr	BASEPRI, r3
 800f1fc:	f3bf 8f6f 	isb	sy
 800f200:	f3bf 8f4f 	dsb	sy
 800f204:	61fb      	str	r3, [r7, #28]
}
 800f206:	bf00      	nop
 800f208:	e7fe      	b.n	800f208 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f20a:	f001 f83b 	bl	8010284 <xTaskGetSchedulerState>
 800f20e:	4603      	mov	r3, r0
 800f210:	2b00      	cmp	r3, #0
 800f212:	d102      	bne.n	800f21a <xQueueReceive+0x6e>
 800f214:	687b      	ldr	r3, [r7, #4]
 800f216:	2b00      	cmp	r3, #0
 800f218:	d101      	bne.n	800f21e <xQueueReceive+0x72>
 800f21a:	2301      	movs	r3, #1
 800f21c:	e000      	b.n	800f220 <xQueueReceive+0x74>
 800f21e:	2300      	movs	r3, #0
 800f220:	2b00      	cmp	r3, #0
 800f222:	d10a      	bne.n	800f23a <xQueueReceive+0x8e>
	__asm volatile
 800f224:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f228:	f383 8811 	msr	BASEPRI, r3
 800f22c:	f3bf 8f6f 	isb	sy
 800f230:	f3bf 8f4f 	dsb	sy
 800f234:	61bb      	str	r3, [r7, #24]
}
 800f236:	bf00      	nop
 800f238:	e7fe      	b.n	800f238 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800f23a:	f001 fb73 	bl	8010924 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f23e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f240:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f242:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f246:	2b00      	cmp	r3, #0
 800f248:	d01f      	beq.n	800f28a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800f24a:	68b9      	ldr	r1, [r7, #8]
 800f24c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f24e:	f000 fa1b 	bl	800f688 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800f252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f254:	1e5a      	subs	r2, r3, #1
 800f256:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f258:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f25a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f25c:	691b      	ldr	r3, [r3, #16]
 800f25e:	2b00      	cmp	r3, #0
 800f260:	d00f      	beq.n	800f282 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f262:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f264:	3310      	adds	r3, #16
 800f266:	4618      	mov	r0, r3
 800f268:	f000 fe6a 	bl	800ff40 <xTaskRemoveFromEventList>
 800f26c:	4603      	mov	r3, r0
 800f26e:	2b00      	cmp	r3, #0
 800f270:	d007      	beq.n	800f282 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800f272:	4b3d      	ldr	r3, [pc, #244]	; (800f368 <xQueueReceive+0x1bc>)
 800f274:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f278:	601a      	str	r2, [r3, #0]
 800f27a:	f3bf 8f4f 	dsb	sy
 800f27e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800f282:	f001 fb7f 	bl	8010984 <vPortExitCritical>
				return pdPASS;
 800f286:	2301      	movs	r3, #1
 800f288:	e069      	b.n	800f35e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800f28a:	687b      	ldr	r3, [r7, #4]
 800f28c:	2b00      	cmp	r3, #0
 800f28e:	d103      	bne.n	800f298 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800f290:	f001 fb78 	bl	8010984 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800f294:	2300      	movs	r3, #0
 800f296:	e062      	b.n	800f35e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800f298:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f29a:	2b00      	cmp	r3, #0
 800f29c:	d106      	bne.n	800f2ac <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800f29e:	f107 0310 	add.w	r3, r7, #16
 800f2a2:	4618      	mov	r0, r3
 800f2a4:	f000 feae 	bl	8010004 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800f2a8:	2301      	movs	r3, #1
 800f2aa:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800f2ac:	f001 fb6a 	bl	8010984 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800f2b0:	f000 fc5e 	bl	800fb70 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f2b4:	f001 fb36 	bl	8010924 <vPortEnterCritical>
 800f2b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f2ba:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f2be:	b25b      	sxtb	r3, r3
 800f2c0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f2c4:	d103      	bne.n	800f2ce <xQueueReceive+0x122>
 800f2c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f2c8:	2200      	movs	r2, #0
 800f2ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f2ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f2d0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f2d4:	b25b      	sxtb	r3, r3
 800f2d6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f2da:	d103      	bne.n	800f2e4 <xQueueReceive+0x138>
 800f2dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f2de:	2200      	movs	r2, #0
 800f2e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f2e4:	f001 fb4e 	bl	8010984 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f2e8:	1d3a      	adds	r2, r7, #4
 800f2ea:	f107 0310 	add.w	r3, r7, #16
 800f2ee:	4611      	mov	r1, r2
 800f2f0:	4618      	mov	r0, r3
 800f2f2:	f000 fe9d 	bl	8010030 <xTaskCheckForTimeOut>
 800f2f6:	4603      	mov	r3, r0
 800f2f8:	2b00      	cmp	r3, #0
 800f2fa:	d123      	bne.n	800f344 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f2fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f2fe:	f000 fa3b 	bl	800f778 <prvIsQueueEmpty>
 800f302:	4603      	mov	r3, r0
 800f304:	2b00      	cmp	r3, #0
 800f306:	d017      	beq.n	800f338 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800f308:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f30a:	3324      	adds	r3, #36	; 0x24
 800f30c:	687a      	ldr	r2, [r7, #4]
 800f30e:	4611      	mov	r1, r2
 800f310:	4618      	mov	r0, r3
 800f312:	f000 fdf1 	bl	800fef8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800f316:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f318:	f000 f9dc 	bl	800f6d4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800f31c:	f000 fc36 	bl	800fb8c <xTaskResumeAll>
 800f320:	4603      	mov	r3, r0
 800f322:	2b00      	cmp	r3, #0
 800f324:	d189      	bne.n	800f23a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800f326:	4b10      	ldr	r3, [pc, #64]	; (800f368 <xQueueReceive+0x1bc>)
 800f328:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f32c:	601a      	str	r2, [r3, #0]
 800f32e:	f3bf 8f4f 	dsb	sy
 800f332:	f3bf 8f6f 	isb	sy
 800f336:	e780      	b.n	800f23a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800f338:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f33a:	f000 f9cb 	bl	800f6d4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800f33e:	f000 fc25 	bl	800fb8c <xTaskResumeAll>
 800f342:	e77a      	b.n	800f23a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800f344:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f346:	f000 f9c5 	bl	800f6d4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f34a:	f000 fc1f 	bl	800fb8c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f34e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f350:	f000 fa12 	bl	800f778 <prvIsQueueEmpty>
 800f354:	4603      	mov	r3, r0
 800f356:	2b00      	cmp	r3, #0
 800f358:	f43f af6f 	beq.w	800f23a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800f35c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800f35e:	4618      	mov	r0, r3
 800f360:	3730      	adds	r7, #48	; 0x30
 800f362:	46bd      	mov	sp, r7
 800f364:	bd80      	pop	{r7, pc}
 800f366:	bf00      	nop
 800f368:	e000ed04 	.word	0xe000ed04

0800f36c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800f36c:	b580      	push	{r7, lr}
 800f36e:	b08e      	sub	sp, #56	; 0x38
 800f370:	af00      	add	r7, sp, #0
 800f372:	6078      	str	r0, [r7, #4]
 800f374:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800f376:	2300      	movs	r3, #0
 800f378:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800f37a:	687b      	ldr	r3, [r7, #4]
 800f37c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800f37e:	2300      	movs	r3, #0
 800f380:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800f382:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f384:	2b00      	cmp	r3, #0
 800f386:	d10a      	bne.n	800f39e <xQueueSemaphoreTake+0x32>
	__asm volatile
 800f388:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f38c:	f383 8811 	msr	BASEPRI, r3
 800f390:	f3bf 8f6f 	isb	sy
 800f394:	f3bf 8f4f 	dsb	sy
 800f398:	623b      	str	r3, [r7, #32]
}
 800f39a:	bf00      	nop
 800f39c:	e7fe      	b.n	800f39c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800f39e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f3a2:	2b00      	cmp	r3, #0
 800f3a4:	d00a      	beq.n	800f3bc <xQueueSemaphoreTake+0x50>
	__asm volatile
 800f3a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f3aa:	f383 8811 	msr	BASEPRI, r3
 800f3ae:	f3bf 8f6f 	isb	sy
 800f3b2:	f3bf 8f4f 	dsb	sy
 800f3b6:	61fb      	str	r3, [r7, #28]
}
 800f3b8:	bf00      	nop
 800f3ba:	e7fe      	b.n	800f3ba <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f3bc:	f000 ff62 	bl	8010284 <xTaskGetSchedulerState>
 800f3c0:	4603      	mov	r3, r0
 800f3c2:	2b00      	cmp	r3, #0
 800f3c4:	d102      	bne.n	800f3cc <xQueueSemaphoreTake+0x60>
 800f3c6:	683b      	ldr	r3, [r7, #0]
 800f3c8:	2b00      	cmp	r3, #0
 800f3ca:	d101      	bne.n	800f3d0 <xQueueSemaphoreTake+0x64>
 800f3cc:	2301      	movs	r3, #1
 800f3ce:	e000      	b.n	800f3d2 <xQueueSemaphoreTake+0x66>
 800f3d0:	2300      	movs	r3, #0
 800f3d2:	2b00      	cmp	r3, #0
 800f3d4:	d10a      	bne.n	800f3ec <xQueueSemaphoreTake+0x80>
	__asm volatile
 800f3d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f3da:	f383 8811 	msr	BASEPRI, r3
 800f3de:	f3bf 8f6f 	isb	sy
 800f3e2:	f3bf 8f4f 	dsb	sy
 800f3e6:	61bb      	str	r3, [r7, #24]
}
 800f3e8:	bf00      	nop
 800f3ea:	e7fe      	b.n	800f3ea <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800f3ec:	f001 fa9a 	bl	8010924 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800f3f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f3f4:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800f3f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3f8:	2b00      	cmp	r3, #0
 800f3fa:	d024      	beq.n	800f446 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800f3fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3fe:	1e5a      	subs	r2, r3, #1
 800f400:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f402:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800f404:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f406:	681b      	ldr	r3, [r3, #0]
 800f408:	2b00      	cmp	r3, #0
 800f40a:	d104      	bne.n	800f416 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800f40c:	f001 f8e2 	bl	80105d4 <pvTaskIncrementMutexHeldCount>
 800f410:	4602      	mov	r2, r0
 800f412:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f414:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f416:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f418:	691b      	ldr	r3, [r3, #16]
 800f41a:	2b00      	cmp	r3, #0
 800f41c:	d00f      	beq.n	800f43e <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f41e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f420:	3310      	adds	r3, #16
 800f422:	4618      	mov	r0, r3
 800f424:	f000 fd8c 	bl	800ff40 <xTaskRemoveFromEventList>
 800f428:	4603      	mov	r3, r0
 800f42a:	2b00      	cmp	r3, #0
 800f42c:	d007      	beq.n	800f43e <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800f42e:	4b54      	ldr	r3, [pc, #336]	; (800f580 <xQueueSemaphoreTake+0x214>)
 800f430:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f434:	601a      	str	r2, [r3, #0]
 800f436:	f3bf 8f4f 	dsb	sy
 800f43a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800f43e:	f001 faa1 	bl	8010984 <vPortExitCritical>
				return pdPASS;
 800f442:	2301      	movs	r3, #1
 800f444:	e097      	b.n	800f576 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800f446:	683b      	ldr	r3, [r7, #0]
 800f448:	2b00      	cmp	r3, #0
 800f44a:	d111      	bne.n	800f470 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800f44c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f44e:	2b00      	cmp	r3, #0
 800f450:	d00a      	beq.n	800f468 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800f452:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f456:	f383 8811 	msr	BASEPRI, r3
 800f45a:	f3bf 8f6f 	isb	sy
 800f45e:	f3bf 8f4f 	dsb	sy
 800f462:	617b      	str	r3, [r7, #20]
}
 800f464:	bf00      	nop
 800f466:	e7fe      	b.n	800f466 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800f468:	f001 fa8c 	bl	8010984 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800f46c:	2300      	movs	r3, #0
 800f46e:	e082      	b.n	800f576 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800f470:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f472:	2b00      	cmp	r3, #0
 800f474:	d106      	bne.n	800f484 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800f476:	f107 030c 	add.w	r3, r7, #12
 800f47a:	4618      	mov	r0, r3
 800f47c:	f000 fdc2 	bl	8010004 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800f480:	2301      	movs	r3, #1
 800f482:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800f484:	f001 fa7e 	bl	8010984 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800f488:	f000 fb72 	bl	800fb70 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f48c:	f001 fa4a 	bl	8010924 <vPortEnterCritical>
 800f490:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f492:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f496:	b25b      	sxtb	r3, r3
 800f498:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f49c:	d103      	bne.n	800f4a6 <xQueueSemaphoreTake+0x13a>
 800f49e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f4a0:	2200      	movs	r2, #0
 800f4a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f4a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f4a8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f4ac:	b25b      	sxtb	r3, r3
 800f4ae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f4b2:	d103      	bne.n	800f4bc <xQueueSemaphoreTake+0x150>
 800f4b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f4b6:	2200      	movs	r2, #0
 800f4b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f4bc:	f001 fa62 	bl	8010984 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f4c0:	463a      	mov	r2, r7
 800f4c2:	f107 030c 	add.w	r3, r7, #12
 800f4c6:	4611      	mov	r1, r2
 800f4c8:	4618      	mov	r0, r3
 800f4ca:	f000 fdb1 	bl	8010030 <xTaskCheckForTimeOut>
 800f4ce:	4603      	mov	r3, r0
 800f4d0:	2b00      	cmp	r3, #0
 800f4d2:	d132      	bne.n	800f53a <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f4d4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f4d6:	f000 f94f 	bl	800f778 <prvIsQueueEmpty>
 800f4da:	4603      	mov	r3, r0
 800f4dc:	2b00      	cmp	r3, #0
 800f4de:	d026      	beq.n	800f52e <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800f4e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f4e2:	681b      	ldr	r3, [r3, #0]
 800f4e4:	2b00      	cmp	r3, #0
 800f4e6:	d109      	bne.n	800f4fc <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800f4e8:	f001 fa1c 	bl	8010924 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800f4ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f4ee:	689b      	ldr	r3, [r3, #8]
 800f4f0:	4618      	mov	r0, r3
 800f4f2:	f000 fee5 	bl	80102c0 <xTaskPriorityInherit>
 800f4f6:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800f4f8:	f001 fa44 	bl	8010984 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800f4fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f4fe:	3324      	adds	r3, #36	; 0x24
 800f500:	683a      	ldr	r2, [r7, #0]
 800f502:	4611      	mov	r1, r2
 800f504:	4618      	mov	r0, r3
 800f506:	f000 fcf7 	bl	800fef8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800f50a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f50c:	f000 f8e2 	bl	800f6d4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800f510:	f000 fb3c 	bl	800fb8c <xTaskResumeAll>
 800f514:	4603      	mov	r3, r0
 800f516:	2b00      	cmp	r3, #0
 800f518:	f47f af68 	bne.w	800f3ec <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800f51c:	4b18      	ldr	r3, [pc, #96]	; (800f580 <xQueueSemaphoreTake+0x214>)
 800f51e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f522:	601a      	str	r2, [r3, #0]
 800f524:	f3bf 8f4f 	dsb	sy
 800f528:	f3bf 8f6f 	isb	sy
 800f52c:	e75e      	b.n	800f3ec <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800f52e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f530:	f000 f8d0 	bl	800f6d4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800f534:	f000 fb2a 	bl	800fb8c <xTaskResumeAll>
 800f538:	e758      	b.n	800f3ec <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800f53a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f53c:	f000 f8ca 	bl	800f6d4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f540:	f000 fb24 	bl	800fb8c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f544:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f546:	f000 f917 	bl	800f778 <prvIsQueueEmpty>
 800f54a:	4603      	mov	r3, r0
 800f54c:	2b00      	cmp	r3, #0
 800f54e:	f43f af4d 	beq.w	800f3ec <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800f552:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f554:	2b00      	cmp	r3, #0
 800f556:	d00d      	beq.n	800f574 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800f558:	f001 f9e4 	bl	8010924 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800f55c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f55e:	f000 f811 	bl	800f584 <prvGetDisinheritPriorityAfterTimeout>
 800f562:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800f564:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f566:	689b      	ldr	r3, [r3, #8]
 800f568:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f56a:	4618      	mov	r0, r3
 800f56c:	f000 ffa4 	bl	80104b8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800f570:	f001 fa08 	bl	8010984 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800f574:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800f576:	4618      	mov	r0, r3
 800f578:	3738      	adds	r7, #56	; 0x38
 800f57a:	46bd      	mov	sp, r7
 800f57c:	bd80      	pop	{r7, pc}
 800f57e:	bf00      	nop
 800f580:	e000ed04 	.word	0xe000ed04

0800f584 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800f584:	b480      	push	{r7}
 800f586:	b085      	sub	sp, #20
 800f588:	af00      	add	r7, sp, #0
 800f58a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800f58c:	687b      	ldr	r3, [r7, #4]
 800f58e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f590:	2b00      	cmp	r3, #0
 800f592:	d006      	beq.n	800f5a2 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800f594:	687b      	ldr	r3, [r7, #4]
 800f596:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f598:	681b      	ldr	r3, [r3, #0]
 800f59a:	f1c3 0320 	rsb	r3, r3, #32
 800f59e:	60fb      	str	r3, [r7, #12]
 800f5a0:	e001      	b.n	800f5a6 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800f5a2:	2300      	movs	r3, #0
 800f5a4:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800f5a6:	68fb      	ldr	r3, [r7, #12]
	}
 800f5a8:	4618      	mov	r0, r3
 800f5aa:	3714      	adds	r7, #20
 800f5ac:	46bd      	mov	sp, r7
 800f5ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5b2:	4770      	bx	lr

0800f5b4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800f5b4:	b580      	push	{r7, lr}
 800f5b6:	b086      	sub	sp, #24
 800f5b8:	af00      	add	r7, sp, #0
 800f5ba:	60f8      	str	r0, [r7, #12]
 800f5bc:	60b9      	str	r1, [r7, #8]
 800f5be:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800f5c0:	2300      	movs	r3, #0
 800f5c2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f5c4:	68fb      	ldr	r3, [r7, #12]
 800f5c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f5c8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800f5ca:	68fb      	ldr	r3, [r7, #12]
 800f5cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f5ce:	2b00      	cmp	r3, #0
 800f5d0:	d10d      	bne.n	800f5ee <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800f5d2:	68fb      	ldr	r3, [r7, #12]
 800f5d4:	681b      	ldr	r3, [r3, #0]
 800f5d6:	2b00      	cmp	r3, #0
 800f5d8:	d14d      	bne.n	800f676 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800f5da:	68fb      	ldr	r3, [r7, #12]
 800f5dc:	689b      	ldr	r3, [r3, #8]
 800f5de:	4618      	mov	r0, r3
 800f5e0:	f000 fee4 	bl	80103ac <xTaskPriorityDisinherit>
 800f5e4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800f5e6:	68fb      	ldr	r3, [r7, #12]
 800f5e8:	2200      	movs	r2, #0
 800f5ea:	609a      	str	r2, [r3, #8]
 800f5ec:	e043      	b.n	800f676 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800f5ee:	687b      	ldr	r3, [r7, #4]
 800f5f0:	2b00      	cmp	r3, #0
 800f5f2:	d119      	bne.n	800f628 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800f5f4:	68fb      	ldr	r3, [r7, #12]
 800f5f6:	6858      	ldr	r0, [r3, #4]
 800f5f8:	68fb      	ldr	r3, [r7, #12]
 800f5fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f5fc:	461a      	mov	r2, r3
 800f5fe:	68b9      	ldr	r1, [r7, #8]
 800f600:	f003 f8b2 	bl	8012768 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800f604:	68fb      	ldr	r3, [r7, #12]
 800f606:	685a      	ldr	r2, [r3, #4]
 800f608:	68fb      	ldr	r3, [r7, #12]
 800f60a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f60c:	441a      	add	r2, r3
 800f60e:	68fb      	ldr	r3, [r7, #12]
 800f610:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800f612:	68fb      	ldr	r3, [r7, #12]
 800f614:	685a      	ldr	r2, [r3, #4]
 800f616:	68fb      	ldr	r3, [r7, #12]
 800f618:	689b      	ldr	r3, [r3, #8]
 800f61a:	429a      	cmp	r2, r3
 800f61c:	d32b      	bcc.n	800f676 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800f61e:	68fb      	ldr	r3, [r7, #12]
 800f620:	681a      	ldr	r2, [r3, #0]
 800f622:	68fb      	ldr	r3, [r7, #12]
 800f624:	605a      	str	r2, [r3, #4]
 800f626:	e026      	b.n	800f676 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800f628:	68fb      	ldr	r3, [r7, #12]
 800f62a:	68d8      	ldr	r0, [r3, #12]
 800f62c:	68fb      	ldr	r3, [r7, #12]
 800f62e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f630:	461a      	mov	r2, r3
 800f632:	68b9      	ldr	r1, [r7, #8]
 800f634:	f003 f898 	bl	8012768 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800f638:	68fb      	ldr	r3, [r7, #12]
 800f63a:	68da      	ldr	r2, [r3, #12]
 800f63c:	68fb      	ldr	r3, [r7, #12]
 800f63e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f640:	425b      	negs	r3, r3
 800f642:	441a      	add	r2, r3
 800f644:	68fb      	ldr	r3, [r7, #12]
 800f646:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800f648:	68fb      	ldr	r3, [r7, #12]
 800f64a:	68da      	ldr	r2, [r3, #12]
 800f64c:	68fb      	ldr	r3, [r7, #12]
 800f64e:	681b      	ldr	r3, [r3, #0]
 800f650:	429a      	cmp	r2, r3
 800f652:	d207      	bcs.n	800f664 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800f654:	68fb      	ldr	r3, [r7, #12]
 800f656:	689a      	ldr	r2, [r3, #8]
 800f658:	68fb      	ldr	r3, [r7, #12]
 800f65a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f65c:	425b      	negs	r3, r3
 800f65e:	441a      	add	r2, r3
 800f660:	68fb      	ldr	r3, [r7, #12]
 800f662:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800f664:	687b      	ldr	r3, [r7, #4]
 800f666:	2b02      	cmp	r3, #2
 800f668:	d105      	bne.n	800f676 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f66a:	693b      	ldr	r3, [r7, #16]
 800f66c:	2b00      	cmp	r3, #0
 800f66e:	d002      	beq.n	800f676 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800f670:	693b      	ldr	r3, [r7, #16]
 800f672:	3b01      	subs	r3, #1
 800f674:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800f676:	693b      	ldr	r3, [r7, #16]
 800f678:	1c5a      	adds	r2, r3, #1
 800f67a:	68fb      	ldr	r3, [r7, #12]
 800f67c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800f67e:	697b      	ldr	r3, [r7, #20]
}
 800f680:	4618      	mov	r0, r3
 800f682:	3718      	adds	r7, #24
 800f684:	46bd      	mov	sp, r7
 800f686:	bd80      	pop	{r7, pc}

0800f688 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800f688:	b580      	push	{r7, lr}
 800f68a:	b082      	sub	sp, #8
 800f68c:	af00      	add	r7, sp, #0
 800f68e:	6078      	str	r0, [r7, #4]
 800f690:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800f692:	687b      	ldr	r3, [r7, #4]
 800f694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f696:	2b00      	cmp	r3, #0
 800f698:	d018      	beq.n	800f6cc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800f69a:	687b      	ldr	r3, [r7, #4]
 800f69c:	68da      	ldr	r2, [r3, #12]
 800f69e:	687b      	ldr	r3, [r7, #4]
 800f6a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f6a2:	441a      	add	r2, r3
 800f6a4:	687b      	ldr	r3, [r7, #4]
 800f6a6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800f6a8:	687b      	ldr	r3, [r7, #4]
 800f6aa:	68da      	ldr	r2, [r3, #12]
 800f6ac:	687b      	ldr	r3, [r7, #4]
 800f6ae:	689b      	ldr	r3, [r3, #8]
 800f6b0:	429a      	cmp	r2, r3
 800f6b2:	d303      	bcc.n	800f6bc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800f6b4:	687b      	ldr	r3, [r7, #4]
 800f6b6:	681a      	ldr	r2, [r3, #0]
 800f6b8:	687b      	ldr	r3, [r7, #4]
 800f6ba:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800f6bc:	687b      	ldr	r3, [r7, #4]
 800f6be:	68d9      	ldr	r1, [r3, #12]
 800f6c0:	687b      	ldr	r3, [r7, #4]
 800f6c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f6c4:	461a      	mov	r2, r3
 800f6c6:	6838      	ldr	r0, [r7, #0]
 800f6c8:	f003 f84e 	bl	8012768 <memcpy>
	}
}
 800f6cc:	bf00      	nop
 800f6ce:	3708      	adds	r7, #8
 800f6d0:	46bd      	mov	sp, r7
 800f6d2:	bd80      	pop	{r7, pc}

0800f6d4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800f6d4:	b580      	push	{r7, lr}
 800f6d6:	b084      	sub	sp, #16
 800f6d8:	af00      	add	r7, sp, #0
 800f6da:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800f6dc:	f001 f922 	bl	8010924 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800f6e0:	687b      	ldr	r3, [r7, #4]
 800f6e2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f6e6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800f6e8:	e011      	b.n	800f70e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f6ea:	687b      	ldr	r3, [r7, #4]
 800f6ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f6ee:	2b00      	cmp	r3, #0
 800f6f0:	d012      	beq.n	800f718 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f6f2:	687b      	ldr	r3, [r7, #4]
 800f6f4:	3324      	adds	r3, #36	; 0x24
 800f6f6:	4618      	mov	r0, r3
 800f6f8:	f000 fc22 	bl	800ff40 <xTaskRemoveFromEventList>
 800f6fc:	4603      	mov	r3, r0
 800f6fe:	2b00      	cmp	r3, #0
 800f700:	d001      	beq.n	800f706 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800f702:	f000 fcf7 	bl	80100f4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800f706:	7bfb      	ldrb	r3, [r7, #15]
 800f708:	3b01      	subs	r3, #1
 800f70a:	b2db      	uxtb	r3, r3
 800f70c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800f70e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f712:	2b00      	cmp	r3, #0
 800f714:	dce9      	bgt.n	800f6ea <prvUnlockQueue+0x16>
 800f716:	e000      	b.n	800f71a <prvUnlockQueue+0x46>
					break;
 800f718:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800f71a:	687b      	ldr	r3, [r7, #4]
 800f71c:	22ff      	movs	r2, #255	; 0xff
 800f71e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800f722:	f001 f92f 	bl	8010984 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800f726:	f001 f8fd 	bl	8010924 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800f72a:	687b      	ldr	r3, [r7, #4]
 800f72c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f730:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800f732:	e011      	b.n	800f758 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f734:	687b      	ldr	r3, [r7, #4]
 800f736:	691b      	ldr	r3, [r3, #16]
 800f738:	2b00      	cmp	r3, #0
 800f73a:	d012      	beq.n	800f762 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f73c:	687b      	ldr	r3, [r7, #4]
 800f73e:	3310      	adds	r3, #16
 800f740:	4618      	mov	r0, r3
 800f742:	f000 fbfd 	bl	800ff40 <xTaskRemoveFromEventList>
 800f746:	4603      	mov	r3, r0
 800f748:	2b00      	cmp	r3, #0
 800f74a:	d001      	beq.n	800f750 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800f74c:	f000 fcd2 	bl	80100f4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800f750:	7bbb      	ldrb	r3, [r7, #14]
 800f752:	3b01      	subs	r3, #1
 800f754:	b2db      	uxtb	r3, r3
 800f756:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800f758:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f75c:	2b00      	cmp	r3, #0
 800f75e:	dce9      	bgt.n	800f734 <prvUnlockQueue+0x60>
 800f760:	e000      	b.n	800f764 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800f762:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800f764:	687b      	ldr	r3, [r7, #4]
 800f766:	22ff      	movs	r2, #255	; 0xff
 800f768:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800f76c:	f001 f90a 	bl	8010984 <vPortExitCritical>
}
 800f770:	bf00      	nop
 800f772:	3710      	adds	r7, #16
 800f774:	46bd      	mov	sp, r7
 800f776:	bd80      	pop	{r7, pc}

0800f778 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800f778:	b580      	push	{r7, lr}
 800f77a:	b084      	sub	sp, #16
 800f77c:	af00      	add	r7, sp, #0
 800f77e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800f780:	f001 f8d0 	bl	8010924 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800f784:	687b      	ldr	r3, [r7, #4]
 800f786:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f788:	2b00      	cmp	r3, #0
 800f78a:	d102      	bne.n	800f792 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800f78c:	2301      	movs	r3, #1
 800f78e:	60fb      	str	r3, [r7, #12]
 800f790:	e001      	b.n	800f796 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800f792:	2300      	movs	r3, #0
 800f794:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800f796:	f001 f8f5 	bl	8010984 <vPortExitCritical>

	return xReturn;
 800f79a:	68fb      	ldr	r3, [r7, #12]
}
 800f79c:	4618      	mov	r0, r3
 800f79e:	3710      	adds	r7, #16
 800f7a0:	46bd      	mov	sp, r7
 800f7a2:	bd80      	pop	{r7, pc}

0800f7a4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800f7a4:	b580      	push	{r7, lr}
 800f7a6:	b084      	sub	sp, #16
 800f7a8:	af00      	add	r7, sp, #0
 800f7aa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800f7ac:	f001 f8ba 	bl	8010924 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800f7b0:	687b      	ldr	r3, [r7, #4]
 800f7b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f7b4:	687b      	ldr	r3, [r7, #4]
 800f7b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f7b8:	429a      	cmp	r2, r3
 800f7ba:	d102      	bne.n	800f7c2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800f7bc:	2301      	movs	r3, #1
 800f7be:	60fb      	str	r3, [r7, #12]
 800f7c0:	e001      	b.n	800f7c6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800f7c2:	2300      	movs	r3, #0
 800f7c4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800f7c6:	f001 f8dd 	bl	8010984 <vPortExitCritical>

	return xReturn;
 800f7ca:	68fb      	ldr	r3, [r7, #12]
}
 800f7cc:	4618      	mov	r0, r3
 800f7ce:	3710      	adds	r7, #16
 800f7d0:	46bd      	mov	sp, r7
 800f7d2:	bd80      	pop	{r7, pc}

0800f7d4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800f7d4:	b580      	push	{r7, lr}
 800f7d6:	b08c      	sub	sp, #48	; 0x30
 800f7d8:	af04      	add	r7, sp, #16
 800f7da:	60f8      	str	r0, [r7, #12]
 800f7dc:	60b9      	str	r1, [r7, #8]
 800f7de:	603b      	str	r3, [r7, #0]
 800f7e0:	4613      	mov	r3, r2
 800f7e2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800f7e4:	88fb      	ldrh	r3, [r7, #6]
 800f7e6:	009b      	lsls	r3, r3, #2
 800f7e8:	4618      	mov	r0, r3
 800f7ea:	f001 f9bd 	bl	8010b68 <pvPortMalloc>
 800f7ee:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800f7f0:	697b      	ldr	r3, [r7, #20]
 800f7f2:	2b00      	cmp	r3, #0
 800f7f4:	d00e      	beq.n	800f814 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800f7f6:	20a0      	movs	r0, #160	; 0xa0
 800f7f8:	f001 f9b6 	bl	8010b68 <pvPortMalloc>
 800f7fc:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800f7fe:	69fb      	ldr	r3, [r7, #28]
 800f800:	2b00      	cmp	r3, #0
 800f802:	d003      	beq.n	800f80c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800f804:	69fb      	ldr	r3, [r7, #28]
 800f806:	697a      	ldr	r2, [r7, #20]
 800f808:	631a      	str	r2, [r3, #48]	; 0x30
 800f80a:	e005      	b.n	800f818 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800f80c:	6978      	ldr	r0, [r7, #20]
 800f80e:	f001 fa77 	bl	8010d00 <vPortFree>
 800f812:	e001      	b.n	800f818 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800f814:	2300      	movs	r3, #0
 800f816:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800f818:	69fb      	ldr	r3, [r7, #28]
 800f81a:	2b00      	cmp	r3, #0
 800f81c:	d013      	beq.n	800f846 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800f81e:	88fa      	ldrh	r2, [r7, #6]
 800f820:	2300      	movs	r3, #0
 800f822:	9303      	str	r3, [sp, #12]
 800f824:	69fb      	ldr	r3, [r7, #28]
 800f826:	9302      	str	r3, [sp, #8]
 800f828:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f82a:	9301      	str	r3, [sp, #4]
 800f82c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f82e:	9300      	str	r3, [sp, #0]
 800f830:	683b      	ldr	r3, [r7, #0]
 800f832:	68b9      	ldr	r1, [r7, #8]
 800f834:	68f8      	ldr	r0, [r7, #12]
 800f836:	f000 f80f 	bl	800f858 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800f83a:	69f8      	ldr	r0, [r7, #28]
 800f83c:	f000 f8aa 	bl	800f994 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800f840:	2301      	movs	r3, #1
 800f842:	61bb      	str	r3, [r7, #24]
 800f844:	e002      	b.n	800f84c <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800f846:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f84a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800f84c:	69bb      	ldr	r3, [r7, #24]
	}
 800f84e:	4618      	mov	r0, r3
 800f850:	3720      	adds	r7, #32
 800f852:	46bd      	mov	sp, r7
 800f854:	bd80      	pop	{r7, pc}
	...

0800f858 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800f858:	b580      	push	{r7, lr}
 800f85a:	b088      	sub	sp, #32
 800f85c:	af00      	add	r7, sp, #0
 800f85e:	60f8      	str	r0, [r7, #12]
 800f860:	60b9      	str	r1, [r7, #8]
 800f862:	607a      	str	r2, [r7, #4]
 800f864:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800f866:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f868:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f86a:	687b      	ldr	r3, [r7, #4]
 800f86c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800f870:	3b01      	subs	r3, #1
 800f872:	009b      	lsls	r3, r3, #2
 800f874:	4413      	add	r3, r2
 800f876:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800f878:	69bb      	ldr	r3, [r7, #24]
 800f87a:	f023 0307 	bic.w	r3, r3, #7
 800f87e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800f880:	69bb      	ldr	r3, [r7, #24]
 800f882:	f003 0307 	and.w	r3, r3, #7
 800f886:	2b00      	cmp	r3, #0
 800f888:	d00a      	beq.n	800f8a0 <prvInitialiseNewTask+0x48>
	__asm volatile
 800f88a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f88e:	f383 8811 	msr	BASEPRI, r3
 800f892:	f3bf 8f6f 	isb	sy
 800f896:	f3bf 8f4f 	dsb	sy
 800f89a:	617b      	str	r3, [r7, #20]
}
 800f89c:	bf00      	nop
 800f89e:	e7fe      	b.n	800f89e <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800f8a0:	68bb      	ldr	r3, [r7, #8]
 800f8a2:	2b00      	cmp	r3, #0
 800f8a4:	d01f      	beq.n	800f8e6 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f8a6:	2300      	movs	r3, #0
 800f8a8:	61fb      	str	r3, [r7, #28]
 800f8aa:	e012      	b.n	800f8d2 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800f8ac:	68ba      	ldr	r2, [r7, #8]
 800f8ae:	69fb      	ldr	r3, [r7, #28]
 800f8b0:	4413      	add	r3, r2
 800f8b2:	7819      	ldrb	r1, [r3, #0]
 800f8b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f8b6:	69fb      	ldr	r3, [r7, #28]
 800f8b8:	4413      	add	r3, r2
 800f8ba:	3334      	adds	r3, #52	; 0x34
 800f8bc:	460a      	mov	r2, r1
 800f8be:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800f8c0:	68ba      	ldr	r2, [r7, #8]
 800f8c2:	69fb      	ldr	r3, [r7, #28]
 800f8c4:	4413      	add	r3, r2
 800f8c6:	781b      	ldrb	r3, [r3, #0]
 800f8c8:	2b00      	cmp	r3, #0
 800f8ca:	d006      	beq.n	800f8da <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f8cc:	69fb      	ldr	r3, [r7, #28]
 800f8ce:	3301      	adds	r3, #1
 800f8d0:	61fb      	str	r3, [r7, #28]
 800f8d2:	69fb      	ldr	r3, [r7, #28]
 800f8d4:	2b0f      	cmp	r3, #15
 800f8d6:	d9e9      	bls.n	800f8ac <prvInitialiseNewTask+0x54>
 800f8d8:	e000      	b.n	800f8dc <prvInitialiseNewTask+0x84>
			{
				break;
 800f8da:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800f8dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8de:	2200      	movs	r2, #0
 800f8e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800f8e4:	e003      	b.n	800f8ee <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800f8e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8e8:	2200      	movs	r2, #0
 800f8ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800f8ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f8f0:	2b1f      	cmp	r3, #31
 800f8f2:	d901      	bls.n	800f8f8 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800f8f4:	231f      	movs	r3, #31
 800f8f6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800f8f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f8fc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800f8fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f900:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f902:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800f904:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f906:	2200      	movs	r2, #0
 800f908:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800f90a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f90c:	3304      	adds	r3, #4
 800f90e:	4618      	mov	r0, r3
 800f910:	f7ff f92d 	bl	800eb6e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800f914:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f916:	3318      	adds	r3, #24
 800f918:	4618      	mov	r0, r3
 800f91a:	f7ff f928 	bl	800eb6e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800f91e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f920:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f922:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f924:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f926:	f1c3 0220 	rsb	r2, r3, #32
 800f92a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f92c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800f92e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f930:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f932:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800f934:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f936:	2200      	movs	r2, #0
 800f938:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800f93c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f93e:	2200      	movs	r2, #0
 800f940:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800f944:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f946:	334c      	adds	r3, #76	; 0x4c
 800f948:	224c      	movs	r2, #76	; 0x4c
 800f94a:	2100      	movs	r1, #0
 800f94c:	4618      	mov	r0, r3
 800f94e:	f002 fe37 	bl	80125c0 <memset>
 800f952:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f954:	4a0c      	ldr	r2, [pc, #48]	; (800f988 <prvInitialiseNewTask+0x130>)
 800f956:	651a      	str	r2, [r3, #80]	; 0x50
 800f958:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f95a:	4a0c      	ldr	r2, [pc, #48]	; (800f98c <prvInitialiseNewTask+0x134>)
 800f95c:	655a      	str	r2, [r3, #84]	; 0x54
 800f95e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f960:	4a0b      	ldr	r2, [pc, #44]	; (800f990 <prvInitialiseNewTask+0x138>)
 800f962:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800f964:	683a      	ldr	r2, [r7, #0]
 800f966:	68f9      	ldr	r1, [r7, #12]
 800f968:	69b8      	ldr	r0, [r7, #24]
 800f96a:	f000 fead 	bl	80106c8 <pxPortInitialiseStack>
 800f96e:	4602      	mov	r2, r0
 800f970:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f972:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800f974:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f976:	2b00      	cmp	r3, #0
 800f978:	d002      	beq.n	800f980 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800f97a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f97c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f97e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f980:	bf00      	nop
 800f982:	3720      	adds	r7, #32
 800f984:	46bd      	mov	sp, r7
 800f986:	bd80      	pop	{r7, pc}
 800f988:	20006664 	.word	0x20006664
 800f98c:	200066cc 	.word	0x200066cc
 800f990:	20006734 	.word	0x20006734

0800f994 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800f994:	b580      	push	{r7, lr}
 800f996:	b082      	sub	sp, #8
 800f998:	af00      	add	r7, sp, #0
 800f99a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800f99c:	f000 ffc2 	bl	8010924 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800f9a0:	4b2a      	ldr	r3, [pc, #168]	; (800fa4c <prvAddNewTaskToReadyList+0xb8>)
 800f9a2:	681b      	ldr	r3, [r3, #0]
 800f9a4:	3301      	adds	r3, #1
 800f9a6:	4a29      	ldr	r2, [pc, #164]	; (800fa4c <prvAddNewTaskToReadyList+0xb8>)
 800f9a8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800f9aa:	4b29      	ldr	r3, [pc, #164]	; (800fa50 <prvAddNewTaskToReadyList+0xbc>)
 800f9ac:	681b      	ldr	r3, [r3, #0]
 800f9ae:	2b00      	cmp	r3, #0
 800f9b0:	d109      	bne.n	800f9c6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800f9b2:	4a27      	ldr	r2, [pc, #156]	; (800fa50 <prvAddNewTaskToReadyList+0xbc>)
 800f9b4:	687b      	ldr	r3, [r7, #4]
 800f9b6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800f9b8:	4b24      	ldr	r3, [pc, #144]	; (800fa4c <prvAddNewTaskToReadyList+0xb8>)
 800f9ba:	681b      	ldr	r3, [r3, #0]
 800f9bc:	2b01      	cmp	r3, #1
 800f9be:	d110      	bne.n	800f9e2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800f9c0:	f000 fbbc 	bl	801013c <prvInitialiseTaskLists>
 800f9c4:	e00d      	b.n	800f9e2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800f9c6:	4b23      	ldr	r3, [pc, #140]	; (800fa54 <prvAddNewTaskToReadyList+0xc0>)
 800f9c8:	681b      	ldr	r3, [r3, #0]
 800f9ca:	2b00      	cmp	r3, #0
 800f9cc:	d109      	bne.n	800f9e2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800f9ce:	4b20      	ldr	r3, [pc, #128]	; (800fa50 <prvAddNewTaskToReadyList+0xbc>)
 800f9d0:	681b      	ldr	r3, [r3, #0]
 800f9d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f9d4:	687b      	ldr	r3, [r7, #4]
 800f9d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f9d8:	429a      	cmp	r2, r3
 800f9da:	d802      	bhi.n	800f9e2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800f9dc:	4a1c      	ldr	r2, [pc, #112]	; (800fa50 <prvAddNewTaskToReadyList+0xbc>)
 800f9de:	687b      	ldr	r3, [r7, #4]
 800f9e0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800f9e2:	4b1d      	ldr	r3, [pc, #116]	; (800fa58 <prvAddNewTaskToReadyList+0xc4>)
 800f9e4:	681b      	ldr	r3, [r3, #0]
 800f9e6:	3301      	adds	r3, #1
 800f9e8:	4a1b      	ldr	r2, [pc, #108]	; (800fa58 <prvAddNewTaskToReadyList+0xc4>)
 800f9ea:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800f9ec:	687b      	ldr	r3, [r7, #4]
 800f9ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f9f0:	2201      	movs	r2, #1
 800f9f2:	409a      	lsls	r2, r3
 800f9f4:	4b19      	ldr	r3, [pc, #100]	; (800fa5c <prvAddNewTaskToReadyList+0xc8>)
 800f9f6:	681b      	ldr	r3, [r3, #0]
 800f9f8:	4313      	orrs	r3, r2
 800f9fa:	4a18      	ldr	r2, [pc, #96]	; (800fa5c <prvAddNewTaskToReadyList+0xc8>)
 800f9fc:	6013      	str	r3, [r2, #0]
 800f9fe:	687b      	ldr	r3, [r7, #4]
 800fa00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fa02:	4613      	mov	r3, r2
 800fa04:	009b      	lsls	r3, r3, #2
 800fa06:	4413      	add	r3, r2
 800fa08:	009b      	lsls	r3, r3, #2
 800fa0a:	4a15      	ldr	r2, [pc, #84]	; (800fa60 <prvAddNewTaskToReadyList+0xcc>)
 800fa0c:	441a      	add	r2, r3
 800fa0e:	687b      	ldr	r3, [r7, #4]
 800fa10:	3304      	adds	r3, #4
 800fa12:	4619      	mov	r1, r3
 800fa14:	4610      	mov	r0, r2
 800fa16:	f7ff f8b7 	bl	800eb88 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800fa1a:	f000 ffb3 	bl	8010984 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800fa1e:	4b0d      	ldr	r3, [pc, #52]	; (800fa54 <prvAddNewTaskToReadyList+0xc0>)
 800fa20:	681b      	ldr	r3, [r3, #0]
 800fa22:	2b00      	cmp	r3, #0
 800fa24:	d00e      	beq.n	800fa44 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800fa26:	4b0a      	ldr	r3, [pc, #40]	; (800fa50 <prvAddNewTaskToReadyList+0xbc>)
 800fa28:	681b      	ldr	r3, [r3, #0]
 800fa2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fa2c:	687b      	ldr	r3, [r7, #4]
 800fa2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fa30:	429a      	cmp	r2, r3
 800fa32:	d207      	bcs.n	800fa44 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800fa34:	4b0b      	ldr	r3, [pc, #44]	; (800fa64 <prvAddNewTaskToReadyList+0xd0>)
 800fa36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fa3a:	601a      	str	r2, [r3, #0]
 800fa3c:	f3bf 8f4f 	dsb	sy
 800fa40:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800fa44:	bf00      	nop
 800fa46:	3708      	adds	r7, #8
 800fa48:	46bd      	mov	sp, r7
 800fa4a:	bd80      	pop	{r7, pc}
 800fa4c:	20000c2c 	.word	0x20000c2c
 800fa50:	20000938 	.word	0x20000938
 800fa54:	20000c38 	.word	0x20000c38
 800fa58:	20000c48 	.word	0x20000c48
 800fa5c:	20000c34 	.word	0x20000c34
 800fa60:	2000093c 	.word	0x2000093c
 800fa64:	e000ed04 	.word	0xe000ed04

0800fa68 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800fa68:	b580      	push	{r7, lr}
 800fa6a:	b084      	sub	sp, #16
 800fa6c:	af00      	add	r7, sp, #0
 800fa6e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800fa70:	2300      	movs	r3, #0
 800fa72:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800fa74:	687b      	ldr	r3, [r7, #4]
 800fa76:	2b00      	cmp	r3, #0
 800fa78:	d017      	beq.n	800faaa <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800fa7a:	4b13      	ldr	r3, [pc, #76]	; (800fac8 <vTaskDelay+0x60>)
 800fa7c:	681b      	ldr	r3, [r3, #0]
 800fa7e:	2b00      	cmp	r3, #0
 800fa80:	d00a      	beq.n	800fa98 <vTaskDelay+0x30>
	__asm volatile
 800fa82:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa86:	f383 8811 	msr	BASEPRI, r3
 800fa8a:	f3bf 8f6f 	isb	sy
 800fa8e:	f3bf 8f4f 	dsb	sy
 800fa92:	60bb      	str	r3, [r7, #8]
}
 800fa94:	bf00      	nop
 800fa96:	e7fe      	b.n	800fa96 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800fa98:	f000 f86a 	bl	800fb70 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800fa9c:	2100      	movs	r1, #0
 800fa9e:	6878      	ldr	r0, [r7, #4]
 800faa0:	f000 fdac 	bl	80105fc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800faa4:	f000 f872 	bl	800fb8c <xTaskResumeAll>
 800faa8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800faaa:	68fb      	ldr	r3, [r7, #12]
 800faac:	2b00      	cmp	r3, #0
 800faae:	d107      	bne.n	800fac0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800fab0:	4b06      	ldr	r3, [pc, #24]	; (800facc <vTaskDelay+0x64>)
 800fab2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fab6:	601a      	str	r2, [r3, #0]
 800fab8:	f3bf 8f4f 	dsb	sy
 800fabc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800fac0:	bf00      	nop
 800fac2:	3710      	adds	r7, #16
 800fac4:	46bd      	mov	sp, r7
 800fac6:	bd80      	pop	{r7, pc}
 800fac8:	20000c54 	.word	0x20000c54
 800facc:	e000ed04 	.word	0xe000ed04

0800fad0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800fad0:	b580      	push	{r7, lr}
 800fad2:	b086      	sub	sp, #24
 800fad4:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 800fad6:	4b1e      	ldr	r3, [pc, #120]	; (800fb50 <vTaskStartScheduler+0x80>)
 800fad8:	9301      	str	r3, [sp, #4]
 800fada:	2300      	movs	r3, #0
 800fadc:	9300      	str	r3, [sp, #0]
 800fade:	2300      	movs	r3, #0
 800fae0:	2280      	movs	r2, #128	; 0x80
 800fae2:	491c      	ldr	r1, [pc, #112]	; (800fb54 <vTaskStartScheduler+0x84>)
 800fae4:	481c      	ldr	r0, [pc, #112]	; (800fb58 <vTaskStartScheduler+0x88>)
 800fae6:	f7ff fe75 	bl	800f7d4 <xTaskCreate>
 800faea:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800faec:	68fb      	ldr	r3, [r7, #12]
 800faee:	2b01      	cmp	r3, #1
 800faf0:	d11b      	bne.n	800fb2a <vTaskStartScheduler+0x5a>
	__asm volatile
 800faf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800faf6:	f383 8811 	msr	BASEPRI, r3
 800fafa:	f3bf 8f6f 	isb	sy
 800fafe:	f3bf 8f4f 	dsb	sy
 800fb02:	60bb      	str	r3, [r7, #8]
}
 800fb04:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800fb06:	4b15      	ldr	r3, [pc, #84]	; (800fb5c <vTaskStartScheduler+0x8c>)
 800fb08:	681b      	ldr	r3, [r3, #0]
 800fb0a:	334c      	adds	r3, #76	; 0x4c
 800fb0c:	4a14      	ldr	r2, [pc, #80]	; (800fb60 <vTaskStartScheduler+0x90>)
 800fb0e:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800fb10:	4b14      	ldr	r3, [pc, #80]	; (800fb64 <vTaskStartScheduler+0x94>)
 800fb12:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800fb16:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800fb18:	4b13      	ldr	r3, [pc, #76]	; (800fb68 <vTaskStartScheduler+0x98>)
 800fb1a:	2201      	movs	r2, #1
 800fb1c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800fb1e:	4b13      	ldr	r3, [pc, #76]	; (800fb6c <vTaskStartScheduler+0x9c>)
 800fb20:	2200      	movs	r2, #0
 800fb22:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800fb24:	f000 fe5c 	bl	80107e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800fb28:	e00e      	b.n	800fb48 <vTaskStartScheduler+0x78>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800fb2a:	68fb      	ldr	r3, [r7, #12]
 800fb2c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800fb30:	d10a      	bne.n	800fb48 <vTaskStartScheduler+0x78>
	__asm volatile
 800fb32:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb36:	f383 8811 	msr	BASEPRI, r3
 800fb3a:	f3bf 8f6f 	isb	sy
 800fb3e:	f3bf 8f4f 	dsb	sy
 800fb42:	607b      	str	r3, [r7, #4]
}
 800fb44:	bf00      	nop
 800fb46:	e7fe      	b.n	800fb46 <vTaskStartScheduler+0x76>
}
 800fb48:	bf00      	nop
 800fb4a:	3710      	adds	r7, #16
 800fb4c:	46bd      	mov	sp, r7
 800fb4e:	bd80      	pop	{r7, pc}
 800fb50:	20000c50 	.word	0x20000c50
 800fb54:	08014770 	.word	0x08014770
 800fb58:	0801010d 	.word	0x0801010d
 800fb5c:	20000938 	.word	0x20000938
 800fb60:	200001e0 	.word	0x200001e0
 800fb64:	20000c4c 	.word	0x20000c4c
 800fb68:	20000c38 	.word	0x20000c38
 800fb6c:	20000c30 	.word	0x20000c30

0800fb70 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800fb70:	b480      	push	{r7}
 800fb72:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800fb74:	4b04      	ldr	r3, [pc, #16]	; (800fb88 <vTaskSuspendAll+0x18>)
 800fb76:	681b      	ldr	r3, [r3, #0]
 800fb78:	3301      	adds	r3, #1
 800fb7a:	4a03      	ldr	r2, [pc, #12]	; (800fb88 <vTaskSuspendAll+0x18>)
 800fb7c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800fb7e:	bf00      	nop
 800fb80:	46bd      	mov	sp, r7
 800fb82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb86:	4770      	bx	lr
 800fb88:	20000c54 	.word	0x20000c54

0800fb8c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800fb8c:	b580      	push	{r7, lr}
 800fb8e:	b084      	sub	sp, #16
 800fb90:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800fb92:	2300      	movs	r3, #0
 800fb94:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800fb96:	2300      	movs	r3, #0
 800fb98:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800fb9a:	4b41      	ldr	r3, [pc, #260]	; (800fca0 <xTaskResumeAll+0x114>)
 800fb9c:	681b      	ldr	r3, [r3, #0]
 800fb9e:	2b00      	cmp	r3, #0
 800fba0:	d10a      	bne.n	800fbb8 <xTaskResumeAll+0x2c>
	__asm volatile
 800fba2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fba6:	f383 8811 	msr	BASEPRI, r3
 800fbaa:	f3bf 8f6f 	isb	sy
 800fbae:	f3bf 8f4f 	dsb	sy
 800fbb2:	603b      	str	r3, [r7, #0]
}
 800fbb4:	bf00      	nop
 800fbb6:	e7fe      	b.n	800fbb6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800fbb8:	f000 feb4 	bl	8010924 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800fbbc:	4b38      	ldr	r3, [pc, #224]	; (800fca0 <xTaskResumeAll+0x114>)
 800fbbe:	681b      	ldr	r3, [r3, #0]
 800fbc0:	3b01      	subs	r3, #1
 800fbc2:	4a37      	ldr	r2, [pc, #220]	; (800fca0 <xTaskResumeAll+0x114>)
 800fbc4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fbc6:	4b36      	ldr	r3, [pc, #216]	; (800fca0 <xTaskResumeAll+0x114>)
 800fbc8:	681b      	ldr	r3, [r3, #0]
 800fbca:	2b00      	cmp	r3, #0
 800fbcc:	d161      	bne.n	800fc92 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800fbce:	4b35      	ldr	r3, [pc, #212]	; (800fca4 <xTaskResumeAll+0x118>)
 800fbd0:	681b      	ldr	r3, [r3, #0]
 800fbd2:	2b00      	cmp	r3, #0
 800fbd4:	d05d      	beq.n	800fc92 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800fbd6:	e02e      	b.n	800fc36 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fbd8:	4b33      	ldr	r3, [pc, #204]	; (800fca8 <xTaskResumeAll+0x11c>)
 800fbda:	68db      	ldr	r3, [r3, #12]
 800fbdc:	68db      	ldr	r3, [r3, #12]
 800fbde:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800fbe0:	68fb      	ldr	r3, [r7, #12]
 800fbe2:	3318      	adds	r3, #24
 800fbe4:	4618      	mov	r0, r3
 800fbe6:	f7ff f82c 	bl	800ec42 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800fbea:	68fb      	ldr	r3, [r7, #12]
 800fbec:	3304      	adds	r3, #4
 800fbee:	4618      	mov	r0, r3
 800fbf0:	f7ff f827 	bl	800ec42 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800fbf4:	68fb      	ldr	r3, [r7, #12]
 800fbf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fbf8:	2201      	movs	r2, #1
 800fbfa:	409a      	lsls	r2, r3
 800fbfc:	4b2b      	ldr	r3, [pc, #172]	; (800fcac <xTaskResumeAll+0x120>)
 800fbfe:	681b      	ldr	r3, [r3, #0]
 800fc00:	4313      	orrs	r3, r2
 800fc02:	4a2a      	ldr	r2, [pc, #168]	; (800fcac <xTaskResumeAll+0x120>)
 800fc04:	6013      	str	r3, [r2, #0]
 800fc06:	68fb      	ldr	r3, [r7, #12]
 800fc08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fc0a:	4613      	mov	r3, r2
 800fc0c:	009b      	lsls	r3, r3, #2
 800fc0e:	4413      	add	r3, r2
 800fc10:	009b      	lsls	r3, r3, #2
 800fc12:	4a27      	ldr	r2, [pc, #156]	; (800fcb0 <xTaskResumeAll+0x124>)
 800fc14:	441a      	add	r2, r3
 800fc16:	68fb      	ldr	r3, [r7, #12]
 800fc18:	3304      	adds	r3, #4
 800fc1a:	4619      	mov	r1, r3
 800fc1c:	4610      	mov	r0, r2
 800fc1e:	f7fe ffb3 	bl	800eb88 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800fc22:	68fb      	ldr	r3, [r7, #12]
 800fc24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fc26:	4b23      	ldr	r3, [pc, #140]	; (800fcb4 <xTaskResumeAll+0x128>)
 800fc28:	681b      	ldr	r3, [r3, #0]
 800fc2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fc2c:	429a      	cmp	r2, r3
 800fc2e:	d302      	bcc.n	800fc36 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800fc30:	4b21      	ldr	r3, [pc, #132]	; (800fcb8 <xTaskResumeAll+0x12c>)
 800fc32:	2201      	movs	r2, #1
 800fc34:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800fc36:	4b1c      	ldr	r3, [pc, #112]	; (800fca8 <xTaskResumeAll+0x11c>)
 800fc38:	681b      	ldr	r3, [r3, #0]
 800fc3a:	2b00      	cmp	r3, #0
 800fc3c:	d1cc      	bne.n	800fbd8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800fc3e:	68fb      	ldr	r3, [r7, #12]
 800fc40:	2b00      	cmp	r3, #0
 800fc42:	d001      	beq.n	800fc48 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800fc44:	f000 fafe 	bl	8010244 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800fc48:	4b1c      	ldr	r3, [pc, #112]	; (800fcbc <xTaskResumeAll+0x130>)
 800fc4a:	681b      	ldr	r3, [r3, #0]
 800fc4c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800fc4e:	687b      	ldr	r3, [r7, #4]
 800fc50:	2b00      	cmp	r3, #0
 800fc52:	d010      	beq.n	800fc76 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800fc54:	f000 f836 	bl	800fcc4 <xTaskIncrementTick>
 800fc58:	4603      	mov	r3, r0
 800fc5a:	2b00      	cmp	r3, #0
 800fc5c:	d002      	beq.n	800fc64 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800fc5e:	4b16      	ldr	r3, [pc, #88]	; (800fcb8 <xTaskResumeAll+0x12c>)
 800fc60:	2201      	movs	r2, #1
 800fc62:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800fc64:	687b      	ldr	r3, [r7, #4]
 800fc66:	3b01      	subs	r3, #1
 800fc68:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800fc6a:	687b      	ldr	r3, [r7, #4]
 800fc6c:	2b00      	cmp	r3, #0
 800fc6e:	d1f1      	bne.n	800fc54 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800fc70:	4b12      	ldr	r3, [pc, #72]	; (800fcbc <xTaskResumeAll+0x130>)
 800fc72:	2200      	movs	r2, #0
 800fc74:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800fc76:	4b10      	ldr	r3, [pc, #64]	; (800fcb8 <xTaskResumeAll+0x12c>)
 800fc78:	681b      	ldr	r3, [r3, #0]
 800fc7a:	2b00      	cmp	r3, #0
 800fc7c:	d009      	beq.n	800fc92 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800fc7e:	2301      	movs	r3, #1
 800fc80:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800fc82:	4b0f      	ldr	r3, [pc, #60]	; (800fcc0 <xTaskResumeAll+0x134>)
 800fc84:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fc88:	601a      	str	r2, [r3, #0]
 800fc8a:	f3bf 8f4f 	dsb	sy
 800fc8e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800fc92:	f000 fe77 	bl	8010984 <vPortExitCritical>

	return xAlreadyYielded;
 800fc96:	68bb      	ldr	r3, [r7, #8]
}
 800fc98:	4618      	mov	r0, r3
 800fc9a:	3710      	adds	r7, #16
 800fc9c:	46bd      	mov	sp, r7
 800fc9e:	bd80      	pop	{r7, pc}
 800fca0:	20000c54 	.word	0x20000c54
 800fca4:	20000c2c 	.word	0x20000c2c
 800fca8:	20000bec 	.word	0x20000bec
 800fcac:	20000c34 	.word	0x20000c34
 800fcb0:	2000093c 	.word	0x2000093c
 800fcb4:	20000938 	.word	0x20000938
 800fcb8:	20000c40 	.word	0x20000c40
 800fcbc:	20000c3c 	.word	0x20000c3c
 800fcc0:	e000ed04 	.word	0xe000ed04

0800fcc4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800fcc4:	b580      	push	{r7, lr}
 800fcc6:	b086      	sub	sp, #24
 800fcc8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800fcca:	2300      	movs	r3, #0
 800fccc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fcce:	4b4e      	ldr	r3, [pc, #312]	; (800fe08 <xTaskIncrementTick+0x144>)
 800fcd0:	681b      	ldr	r3, [r3, #0]
 800fcd2:	2b00      	cmp	r3, #0
 800fcd4:	f040 808e 	bne.w	800fdf4 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800fcd8:	4b4c      	ldr	r3, [pc, #304]	; (800fe0c <xTaskIncrementTick+0x148>)
 800fcda:	681b      	ldr	r3, [r3, #0]
 800fcdc:	3301      	adds	r3, #1
 800fcde:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800fce0:	4a4a      	ldr	r2, [pc, #296]	; (800fe0c <xTaskIncrementTick+0x148>)
 800fce2:	693b      	ldr	r3, [r7, #16]
 800fce4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800fce6:	693b      	ldr	r3, [r7, #16]
 800fce8:	2b00      	cmp	r3, #0
 800fcea:	d120      	bne.n	800fd2e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800fcec:	4b48      	ldr	r3, [pc, #288]	; (800fe10 <xTaskIncrementTick+0x14c>)
 800fcee:	681b      	ldr	r3, [r3, #0]
 800fcf0:	681b      	ldr	r3, [r3, #0]
 800fcf2:	2b00      	cmp	r3, #0
 800fcf4:	d00a      	beq.n	800fd0c <xTaskIncrementTick+0x48>
	__asm volatile
 800fcf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fcfa:	f383 8811 	msr	BASEPRI, r3
 800fcfe:	f3bf 8f6f 	isb	sy
 800fd02:	f3bf 8f4f 	dsb	sy
 800fd06:	603b      	str	r3, [r7, #0]
}
 800fd08:	bf00      	nop
 800fd0a:	e7fe      	b.n	800fd0a <xTaskIncrementTick+0x46>
 800fd0c:	4b40      	ldr	r3, [pc, #256]	; (800fe10 <xTaskIncrementTick+0x14c>)
 800fd0e:	681b      	ldr	r3, [r3, #0]
 800fd10:	60fb      	str	r3, [r7, #12]
 800fd12:	4b40      	ldr	r3, [pc, #256]	; (800fe14 <xTaskIncrementTick+0x150>)
 800fd14:	681b      	ldr	r3, [r3, #0]
 800fd16:	4a3e      	ldr	r2, [pc, #248]	; (800fe10 <xTaskIncrementTick+0x14c>)
 800fd18:	6013      	str	r3, [r2, #0]
 800fd1a:	4a3e      	ldr	r2, [pc, #248]	; (800fe14 <xTaskIncrementTick+0x150>)
 800fd1c:	68fb      	ldr	r3, [r7, #12]
 800fd1e:	6013      	str	r3, [r2, #0]
 800fd20:	4b3d      	ldr	r3, [pc, #244]	; (800fe18 <xTaskIncrementTick+0x154>)
 800fd22:	681b      	ldr	r3, [r3, #0]
 800fd24:	3301      	adds	r3, #1
 800fd26:	4a3c      	ldr	r2, [pc, #240]	; (800fe18 <xTaskIncrementTick+0x154>)
 800fd28:	6013      	str	r3, [r2, #0]
 800fd2a:	f000 fa8b 	bl	8010244 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800fd2e:	4b3b      	ldr	r3, [pc, #236]	; (800fe1c <xTaskIncrementTick+0x158>)
 800fd30:	681b      	ldr	r3, [r3, #0]
 800fd32:	693a      	ldr	r2, [r7, #16]
 800fd34:	429a      	cmp	r2, r3
 800fd36:	d348      	bcc.n	800fdca <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800fd38:	4b35      	ldr	r3, [pc, #212]	; (800fe10 <xTaskIncrementTick+0x14c>)
 800fd3a:	681b      	ldr	r3, [r3, #0]
 800fd3c:	681b      	ldr	r3, [r3, #0]
 800fd3e:	2b00      	cmp	r3, #0
 800fd40:	d104      	bne.n	800fd4c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fd42:	4b36      	ldr	r3, [pc, #216]	; (800fe1c <xTaskIncrementTick+0x158>)
 800fd44:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800fd48:	601a      	str	r2, [r3, #0]
					break;
 800fd4a:	e03e      	b.n	800fdca <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fd4c:	4b30      	ldr	r3, [pc, #192]	; (800fe10 <xTaskIncrementTick+0x14c>)
 800fd4e:	681b      	ldr	r3, [r3, #0]
 800fd50:	68db      	ldr	r3, [r3, #12]
 800fd52:	68db      	ldr	r3, [r3, #12]
 800fd54:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800fd56:	68bb      	ldr	r3, [r7, #8]
 800fd58:	685b      	ldr	r3, [r3, #4]
 800fd5a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800fd5c:	693a      	ldr	r2, [r7, #16]
 800fd5e:	687b      	ldr	r3, [r7, #4]
 800fd60:	429a      	cmp	r2, r3
 800fd62:	d203      	bcs.n	800fd6c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800fd64:	4a2d      	ldr	r2, [pc, #180]	; (800fe1c <xTaskIncrementTick+0x158>)
 800fd66:	687b      	ldr	r3, [r7, #4]
 800fd68:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800fd6a:	e02e      	b.n	800fdca <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800fd6c:	68bb      	ldr	r3, [r7, #8]
 800fd6e:	3304      	adds	r3, #4
 800fd70:	4618      	mov	r0, r3
 800fd72:	f7fe ff66 	bl	800ec42 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800fd76:	68bb      	ldr	r3, [r7, #8]
 800fd78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fd7a:	2b00      	cmp	r3, #0
 800fd7c:	d004      	beq.n	800fd88 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800fd7e:	68bb      	ldr	r3, [r7, #8]
 800fd80:	3318      	adds	r3, #24
 800fd82:	4618      	mov	r0, r3
 800fd84:	f7fe ff5d 	bl	800ec42 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800fd88:	68bb      	ldr	r3, [r7, #8]
 800fd8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fd8c:	2201      	movs	r2, #1
 800fd8e:	409a      	lsls	r2, r3
 800fd90:	4b23      	ldr	r3, [pc, #140]	; (800fe20 <xTaskIncrementTick+0x15c>)
 800fd92:	681b      	ldr	r3, [r3, #0]
 800fd94:	4313      	orrs	r3, r2
 800fd96:	4a22      	ldr	r2, [pc, #136]	; (800fe20 <xTaskIncrementTick+0x15c>)
 800fd98:	6013      	str	r3, [r2, #0]
 800fd9a:	68bb      	ldr	r3, [r7, #8]
 800fd9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fd9e:	4613      	mov	r3, r2
 800fda0:	009b      	lsls	r3, r3, #2
 800fda2:	4413      	add	r3, r2
 800fda4:	009b      	lsls	r3, r3, #2
 800fda6:	4a1f      	ldr	r2, [pc, #124]	; (800fe24 <xTaskIncrementTick+0x160>)
 800fda8:	441a      	add	r2, r3
 800fdaa:	68bb      	ldr	r3, [r7, #8]
 800fdac:	3304      	adds	r3, #4
 800fdae:	4619      	mov	r1, r3
 800fdb0:	4610      	mov	r0, r2
 800fdb2:	f7fe fee9 	bl	800eb88 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800fdb6:	68bb      	ldr	r3, [r7, #8]
 800fdb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fdba:	4b1b      	ldr	r3, [pc, #108]	; (800fe28 <xTaskIncrementTick+0x164>)
 800fdbc:	681b      	ldr	r3, [r3, #0]
 800fdbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fdc0:	429a      	cmp	r2, r3
 800fdc2:	d3b9      	bcc.n	800fd38 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800fdc4:	2301      	movs	r3, #1
 800fdc6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800fdc8:	e7b6      	b.n	800fd38 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800fdca:	4b17      	ldr	r3, [pc, #92]	; (800fe28 <xTaskIncrementTick+0x164>)
 800fdcc:	681b      	ldr	r3, [r3, #0]
 800fdce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fdd0:	4914      	ldr	r1, [pc, #80]	; (800fe24 <xTaskIncrementTick+0x160>)
 800fdd2:	4613      	mov	r3, r2
 800fdd4:	009b      	lsls	r3, r3, #2
 800fdd6:	4413      	add	r3, r2
 800fdd8:	009b      	lsls	r3, r3, #2
 800fdda:	440b      	add	r3, r1
 800fddc:	681b      	ldr	r3, [r3, #0]
 800fdde:	2b01      	cmp	r3, #1
 800fde0:	d901      	bls.n	800fde6 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800fde2:	2301      	movs	r3, #1
 800fde4:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800fde6:	4b11      	ldr	r3, [pc, #68]	; (800fe2c <xTaskIncrementTick+0x168>)
 800fde8:	681b      	ldr	r3, [r3, #0]
 800fdea:	2b00      	cmp	r3, #0
 800fdec:	d007      	beq.n	800fdfe <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800fdee:	2301      	movs	r3, #1
 800fdf0:	617b      	str	r3, [r7, #20]
 800fdf2:	e004      	b.n	800fdfe <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800fdf4:	4b0e      	ldr	r3, [pc, #56]	; (800fe30 <xTaskIncrementTick+0x16c>)
 800fdf6:	681b      	ldr	r3, [r3, #0]
 800fdf8:	3301      	adds	r3, #1
 800fdfa:	4a0d      	ldr	r2, [pc, #52]	; (800fe30 <xTaskIncrementTick+0x16c>)
 800fdfc:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800fdfe:	697b      	ldr	r3, [r7, #20]
}
 800fe00:	4618      	mov	r0, r3
 800fe02:	3718      	adds	r7, #24
 800fe04:	46bd      	mov	sp, r7
 800fe06:	bd80      	pop	{r7, pc}
 800fe08:	20000c54 	.word	0x20000c54
 800fe0c:	20000c30 	.word	0x20000c30
 800fe10:	20000be4 	.word	0x20000be4
 800fe14:	20000be8 	.word	0x20000be8
 800fe18:	20000c44 	.word	0x20000c44
 800fe1c:	20000c4c 	.word	0x20000c4c
 800fe20:	20000c34 	.word	0x20000c34
 800fe24:	2000093c 	.word	0x2000093c
 800fe28:	20000938 	.word	0x20000938
 800fe2c:	20000c40 	.word	0x20000c40
 800fe30:	20000c3c 	.word	0x20000c3c

0800fe34 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800fe34:	b480      	push	{r7}
 800fe36:	b087      	sub	sp, #28
 800fe38:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800fe3a:	4b29      	ldr	r3, [pc, #164]	; (800fee0 <vTaskSwitchContext+0xac>)
 800fe3c:	681b      	ldr	r3, [r3, #0]
 800fe3e:	2b00      	cmp	r3, #0
 800fe40:	d003      	beq.n	800fe4a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800fe42:	4b28      	ldr	r3, [pc, #160]	; (800fee4 <vTaskSwitchContext+0xb0>)
 800fe44:	2201      	movs	r2, #1
 800fe46:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800fe48:	e044      	b.n	800fed4 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800fe4a:	4b26      	ldr	r3, [pc, #152]	; (800fee4 <vTaskSwitchContext+0xb0>)
 800fe4c:	2200      	movs	r2, #0
 800fe4e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fe50:	4b25      	ldr	r3, [pc, #148]	; (800fee8 <vTaskSwitchContext+0xb4>)
 800fe52:	681b      	ldr	r3, [r3, #0]
 800fe54:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800fe56:	68fb      	ldr	r3, [r7, #12]
 800fe58:	fab3 f383 	clz	r3, r3
 800fe5c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800fe5e:	7afb      	ldrb	r3, [r7, #11]
 800fe60:	f1c3 031f 	rsb	r3, r3, #31
 800fe64:	617b      	str	r3, [r7, #20]
 800fe66:	4921      	ldr	r1, [pc, #132]	; (800feec <vTaskSwitchContext+0xb8>)
 800fe68:	697a      	ldr	r2, [r7, #20]
 800fe6a:	4613      	mov	r3, r2
 800fe6c:	009b      	lsls	r3, r3, #2
 800fe6e:	4413      	add	r3, r2
 800fe70:	009b      	lsls	r3, r3, #2
 800fe72:	440b      	add	r3, r1
 800fe74:	681b      	ldr	r3, [r3, #0]
 800fe76:	2b00      	cmp	r3, #0
 800fe78:	d10a      	bne.n	800fe90 <vTaskSwitchContext+0x5c>
	__asm volatile
 800fe7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe7e:	f383 8811 	msr	BASEPRI, r3
 800fe82:	f3bf 8f6f 	isb	sy
 800fe86:	f3bf 8f4f 	dsb	sy
 800fe8a:	607b      	str	r3, [r7, #4]
}
 800fe8c:	bf00      	nop
 800fe8e:	e7fe      	b.n	800fe8e <vTaskSwitchContext+0x5a>
 800fe90:	697a      	ldr	r2, [r7, #20]
 800fe92:	4613      	mov	r3, r2
 800fe94:	009b      	lsls	r3, r3, #2
 800fe96:	4413      	add	r3, r2
 800fe98:	009b      	lsls	r3, r3, #2
 800fe9a:	4a14      	ldr	r2, [pc, #80]	; (800feec <vTaskSwitchContext+0xb8>)
 800fe9c:	4413      	add	r3, r2
 800fe9e:	613b      	str	r3, [r7, #16]
 800fea0:	693b      	ldr	r3, [r7, #16]
 800fea2:	685b      	ldr	r3, [r3, #4]
 800fea4:	685a      	ldr	r2, [r3, #4]
 800fea6:	693b      	ldr	r3, [r7, #16]
 800fea8:	605a      	str	r2, [r3, #4]
 800feaa:	693b      	ldr	r3, [r7, #16]
 800feac:	685a      	ldr	r2, [r3, #4]
 800feae:	693b      	ldr	r3, [r7, #16]
 800feb0:	3308      	adds	r3, #8
 800feb2:	429a      	cmp	r2, r3
 800feb4:	d104      	bne.n	800fec0 <vTaskSwitchContext+0x8c>
 800feb6:	693b      	ldr	r3, [r7, #16]
 800feb8:	685b      	ldr	r3, [r3, #4]
 800feba:	685a      	ldr	r2, [r3, #4]
 800febc:	693b      	ldr	r3, [r7, #16]
 800febe:	605a      	str	r2, [r3, #4]
 800fec0:	693b      	ldr	r3, [r7, #16]
 800fec2:	685b      	ldr	r3, [r3, #4]
 800fec4:	68db      	ldr	r3, [r3, #12]
 800fec6:	4a0a      	ldr	r2, [pc, #40]	; (800fef0 <vTaskSwitchContext+0xbc>)
 800fec8:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800feca:	4b09      	ldr	r3, [pc, #36]	; (800fef0 <vTaskSwitchContext+0xbc>)
 800fecc:	681b      	ldr	r3, [r3, #0]
 800fece:	334c      	adds	r3, #76	; 0x4c
 800fed0:	4a08      	ldr	r2, [pc, #32]	; (800fef4 <vTaskSwitchContext+0xc0>)
 800fed2:	6013      	str	r3, [r2, #0]
}
 800fed4:	bf00      	nop
 800fed6:	371c      	adds	r7, #28
 800fed8:	46bd      	mov	sp, r7
 800feda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fede:	4770      	bx	lr
 800fee0:	20000c54 	.word	0x20000c54
 800fee4:	20000c40 	.word	0x20000c40
 800fee8:	20000c34 	.word	0x20000c34
 800feec:	2000093c 	.word	0x2000093c
 800fef0:	20000938 	.word	0x20000938
 800fef4:	200001e0 	.word	0x200001e0

0800fef8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800fef8:	b580      	push	{r7, lr}
 800fefa:	b084      	sub	sp, #16
 800fefc:	af00      	add	r7, sp, #0
 800fefe:	6078      	str	r0, [r7, #4]
 800ff00:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800ff02:	687b      	ldr	r3, [r7, #4]
 800ff04:	2b00      	cmp	r3, #0
 800ff06:	d10a      	bne.n	800ff1e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800ff08:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff0c:	f383 8811 	msr	BASEPRI, r3
 800ff10:	f3bf 8f6f 	isb	sy
 800ff14:	f3bf 8f4f 	dsb	sy
 800ff18:	60fb      	str	r3, [r7, #12]
}
 800ff1a:	bf00      	nop
 800ff1c:	e7fe      	b.n	800ff1c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ff1e:	4b07      	ldr	r3, [pc, #28]	; (800ff3c <vTaskPlaceOnEventList+0x44>)
 800ff20:	681b      	ldr	r3, [r3, #0]
 800ff22:	3318      	adds	r3, #24
 800ff24:	4619      	mov	r1, r3
 800ff26:	6878      	ldr	r0, [r7, #4]
 800ff28:	f7fe fe52 	bl	800ebd0 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800ff2c:	2101      	movs	r1, #1
 800ff2e:	6838      	ldr	r0, [r7, #0]
 800ff30:	f000 fb64 	bl	80105fc <prvAddCurrentTaskToDelayedList>
}
 800ff34:	bf00      	nop
 800ff36:	3710      	adds	r7, #16
 800ff38:	46bd      	mov	sp, r7
 800ff3a:	bd80      	pop	{r7, pc}
 800ff3c:	20000938 	.word	0x20000938

0800ff40 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800ff40:	b580      	push	{r7, lr}
 800ff42:	b086      	sub	sp, #24
 800ff44:	af00      	add	r7, sp, #0
 800ff46:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ff48:	687b      	ldr	r3, [r7, #4]
 800ff4a:	68db      	ldr	r3, [r3, #12]
 800ff4c:	68db      	ldr	r3, [r3, #12]
 800ff4e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800ff50:	693b      	ldr	r3, [r7, #16]
 800ff52:	2b00      	cmp	r3, #0
 800ff54:	d10a      	bne.n	800ff6c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800ff56:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff5a:	f383 8811 	msr	BASEPRI, r3
 800ff5e:	f3bf 8f6f 	isb	sy
 800ff62:	f3bf 8f4f 	dsb	sy
 800ff66:	60fb      	str	r3, [r7, #12]
}
 800ff68:	bf00      	nop
 800ff6a:	e7fe      	b.n	800ff6a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800ff6c:	693b      	ldr	r3, [r7, #16]
 800ff6e:	3318      	adds	r3, #24
 800ff70:	4618      	mov	r0, r3
 800ff72:	f7fe fe66 	bl	800ec42 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ff76:	4b1d      	ldr	r3, [pc, #116]	; (800ffec <xTaskRemoveFromEventList+0xac>)
 800ff78:	681b      	ldr	r3, [r3, #0]
 800ff7a:	2b00      	cmp	r3, #0
 800ff7c:	d11c      	bne.n	800ffb8 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800ff7e:	693b      	ldr	r3, [r7, #16]
 800ff80:	3304      	adds	r3, #4
 800ff82:	4618      	mov	r0, r3
 800ff84:	f7fe fe5d 	bl	800ec42 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800ff88:	693b      	ldr	r3, [r7, #16]
 800ff8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ff8c:	2201      	movs	r2, #1
 800ff8e:	409a      	lsls	r2, r3
 800ff90:	4b17      	ldr	r3, [pc, #92]	; (800fff0 <xTaskRemoveFromEventList+0xb0>)
 800ff92:	681b      	ldr	r3, [r3, #0]
 800ff94:	4313      	orrs	r3, r2
 800ff96:	4a16      	ldr	r2, [pc, #88]	; (800fff0 <xTaskRemoveFromEventList+0xb0>)
 800ff98:	6013      	str	r3, [r2, #0]
 800ff9a:	693b      	ldr	r3, [r7, #16]
 800ff9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ff9e:	4613      	mov	r3, r2
 800ffa0:	009b      	lsls	r3, r3, #2
 800ffa2:	4413      	add	r3, r2
 800ffa4:	009b      	lsls	r3, r3, #2
 800ffa6:	4a13      	ldr	r2, [pc, #76]	; (800fff4 <xTaskRemoveFromEventList+0xb4>)
 800ffa8:	441a      	add	r2, r3
 800ffaa:	693b      	ldr	r3, [r7, #16]
 800ffac:	3304      	adds	r3, #4
 800ffae:	4619      	mov	r1, r3
 800ffb0:	4610      	mov	r0, r2
 800ffb2:	f7fe fde9 	bl	800eb88 <vListInsertEnd>
 800ffb6:	e005      	b.n	800ffc4 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800ffb8:	693b      	ldr	r3, [r7, #16]
 800ffba:	3318      	adds	r3, #24
 800ffbc:	4619      	mov	r1, r3
 800ffbe:	480e      	ldr	r0, [pc, #56]	; (800fff8 <xTaskRemoveFromEventList+0xb8>)
 800ffc0:	f7fe fde2 	bl	800eb88 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ffc4:	693b      	ldr	r3, [r7, #16]
 800ffc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ffc8:	4b0c      	ldr	r3, [pc, #48]	; (800fffc <xTaskRemoveFromEventList+0xbc>)
 800ffca:	681b      	ldr	r3, [r3, #0]
 800ffcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ffce:	429a      	cmp	r2, r3
 800ffd0:	d905      	bls.n	800ffde <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800ffd2:	2301      	movs	r3, #1
 800ffd4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800ffd6:	4b0a      	ldr	r3, [pc, #40]	; (8010000 <xTaskRemoveFromEventList+0xc0>)
 800ffd8:	2201      	movs	r2, #1
 800ffda:	601a      	str	r2, [r3, #0]
 800ffdc:	e001      	b.n	800ffe2 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800ffde:	2300      	movs	r3, #0
 800ffe0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800ffe2:	697b      	ldr	r3, [r7, #20]
}
 800ffe4:	4618      	mov	r0, r3
 800ffe6:	3718      	adds	r7, #24
 800ffe8:	46bd      	mov	sp, r7
 800ffea:	bd80      	pop	{r7, pc}
 800ffec:	20000c54 	.word	0x20000c54
 800fff0:	20000c34 	.word	0x20000c34
 800fff4:	2000093c 	.word	0x2000093c
 800fff8:	20000bec 	.word	0x20000bec
 800fffc:	20000938 	.word	0x20000938
 8010000:	20000c40 	.word	0x20000c40

08010004 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8010004:	b480      	push	{r7}
 8010006:	b083      	sub	sp, #12
 8010008:	af00      	add	r7, sp, #0
 801000a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 801000c:	4b06      	ldr	r3, [pc, #24]	; (8010028 <vTaskInternalSetTimeOutState+0x24>)
 801000e:	681a      	ldr	r2, [r3, #0]
 8010010:	687b      	ldr	r3, [r7, #4]
 8010012:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8010014:	4b05      	ldr	r3, [pc, #20]	; (801002c <vTaskInternalSetTimeOutState+0x28>)
 8010016:	681a      	ldr	r2, [r3, #0]
 8010018:	687b      	ldr	r3, [r7, #4]
 801001a:	605a      	str	r2, [r3, #4]
}
 801001c:	bf00      	nop
 801001e:	370c      	adds	r7, #12
 8010020:	46bd      	mov	sp, r7
 8010022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010026:	4770      	bx	lr
 8010028:	20000c44 	.word	0x20000c44
 801002c:	20000c30 	.word	0x20000c30

08010030 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8010030:	b580      	push	{r7, lr}
 8010032:	b088      	sub	sp, #32
 8010034:	af00      	add	r7, sp, #0
 8010036:	6078      	str	r0, [r7, #4]
 8010038:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 801003a:	687b      	ldr	r3, [r7, #4]
 801003c:	2b00      	cmp	r3, #0
 801003e:	d10a      	bne.n	8010056 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8010040:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010044:	f383 8811 	msr	BASEPRI, r3
 8010048:	f3bf 8f6f 	isb	sy
 801004c:	f3bf 8f4f 	dsb	sy
 8010050:	613b      	str	r3, [r7, #16]
}
 8010052:	bf00      	nop
 8010054:	e7fe      	b.n	8010054 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8010056:	683b      	ldr	r3, [r7, #0]
 8010058:	2b00      	cmp	r3, #0
 801005a:	d10a      	bne.n	8010072 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 801005c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010060:	f383 8811 	msr	BASEPRI, r3
 8010064:	f3bf 8f6f 	isb	sy
 8010068:	f3bf 8f4f 	dsb	sy
 801006c:	60fb      	str	r3, [r7, #12]
}
 801006e:	bf00      	nop
 8010070:	e7fe      	b.n	8010070 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8010072:	f000 fc57 	bl	8010924 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8010076:	4b1d      	ldr	r3, [pc, #116]	; (80100ec <xTaskCheckForTimeOut+0xbc>)
 8010078:	681b      	ldr	r3, [r3, #0]
 801007a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 801007c:	687b      	ldr	r3, [r7, #4]
 801007e:	685b      	ldr	r3, [r3, #4]
 8010080:	69ba      	ldr	r2, [r7, #24]
 8010082:	1ad3      	subs	r3, r2, r3
 8010084:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8010086:	683b      	ldr	r3, [r7, #0]
 8010088:	681b      	ldr	r3, [r3, #0]
 801008a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801008e:	d102      	bne.n	8010096 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8010090:	2300      	movs	r3, #0
 8010092:	61fb      	str	r3, [r7, #28]
 8010094:	e023      	b.n	80100de <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8010096:	687b      	ldr	r3, [r7, #4]
 8010098:	681a      	ldr	r2, [r3, #0]
 801009a:	4b15      	ldr	r3, [pc, #84]	; (80100f0 <xTaskCheckForTimeOut+0xc0>)
 801009c:	681b      	ldr	r3, [r3, #0]
 801009e:	429a      	cmp	r2, r3
 80100a0:	d007      	beq.n	80100b2 <xTaskCheckForTimeOut+0x82>
 80100a2:	687b      	ldr	r3, [r7, #4]
 80100a4:	685b      	ldr	r3, [r3, #4]
 80100a6:	69ba      	ldr	r2, [r7, #24]
 80100a8:	429a      	cmp	r2, r3
 80100aa:	d302      	bcc.n	80100b2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80100ac:	2301      	movs	r3, #1
 80100ae:	61fb      	str	r3, [r7, #28]
 80100b0:	e015      	b.n	80100de <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80100b2:	683b      	ldr	r3, [r7, #0]
 80100b4:	681b      	ldr	r3, [r3, #0]
 80100b6:	697a      	ldr	r2, [r7, #20]
 80100b8:	429a      	cmp	r2, r3
 80100ba:	d20b      	bcs.n	80100d4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80100bc:	683b      	ldr	r3, [r7, #0]
 80100be:	681a      	ldr	r2, [r3, #0]
 80100c0:	697b      	ldr	r3, [r7, #20]
 80100c2:	1ad2      	subs	r2, r2, r3
 80100c4:	683b      	ldr	r3, [r7, #0]
 80100c6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80100c8:	6878      	ldr	r0, [r7, #4]
 80100ca:	f7ff ff9b 	bl	8010004 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80100ce:	2300      	movs	r3, #0
 80100d0:	61fb      	str	r3, [r7, #28]
 80100d2:	e004      	b.n	80100de <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80100d4:	683b      	ldr	r3, [r7, #0]
 80100d6:	2200      	movs	r2, #0
 80100d8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80100da:	2301      	movs	r3, #1
 80100dc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80100de:	f000 fc51 	bl	8010984 <vPortExitCritical>

	return xReturn;
 80100e2:	69fb      	ldr	r3, [r7, #28]
}
 80100e4:	4618      	mov	r0, r3
 80100e6:	3720      	adds	r7, #32
 80100e8:	46bd      	mov	sp, r7
 80100ea:	bd80      	pop	{r7, pc}
 80100ec:	20000c30 	.word	0x20000c30
 80100f0:	20000c44 	.word	0x20000c44

080100f4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80100f4:	b480      	push	{r7}
 80100f6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80100f8:	4b03      	ldr	r3, [pc, #12]	; (8010108 <vTaskMissedYield+0x14>)
 80100fa:	2201      	movs	r2, #1
 80100fc:	601a      	str	r2, [r3, #0]
}
 80100fe:	bf00      	nop
 8010100:	46bd      	mov	sp, r7
 8010102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010106:	4770      	bx	lr
 8010108:	20000c40 	.word	0x20000c40

0801010c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 801010c:	b580      	push	{r7, lr}
 801010e:	b082      	sub	sp, #8
 8010110:	af00      	add	r7, sp, #0
 8010112:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8010114:	f000 f852 	bl	80101bc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8010118:	4b06      	ldr	r3, [pc, #24]	; (8010134 <prvIdleTask+0x28>)
 801011a:	681b      	ldr	r3, [r3, #0]
 801011c:	2b01      	cmp	r3, #1
 801011e:	d9f9      	bls.n	8010114 <prvIdleTask+0x8>
			{
				taskYIELD();
 8010120:	4b05      	ldr	r3, [pc, #20]	; (8010138 <prvIdleTask+0x2c>)
 8010122:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010126:	601a      	str	r2, [r3, #0]
 8010128:	f3bf 8f4f 	dsb	sy
 801012c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8010130:	e7f0      	b.n	8010114 <prvIdleTask+0x8>
 8010132:	bf00      	nop
 8010134:	2000093c 	.word	0x2000093c
 8010138:	e000ed04 	.word	0xe000ed04

0801013c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 801013c:	b580      	push	{r7, lr}
 801013e:	b082      	sub	sp, #8
 8010140:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8010142:	2300      	movs	r3, #0
 8010144:	607b      	str	r3, [r7, #4]
 8010146:	e00c      	b.n	8010162 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8010148:	687a      	ldr	r2, [r7, #4]
 801014a:	4613      	mov	r3, r2
 801014c:	009b      	lsls	r3, r3, #2
 801014e:	4413      	add	r3, r2
 8010150:	009b      	lsls	r3, r3, #2
 8010152:	4a12      	ldr	r2, [pc, #72]	; (801019c <prvInitialiseTaskLists+0x60>)
 8010154:	4413      	add	r3, r2
 8010156:	4618      	mov	r0, r3
 8010158:	f7fe fce9 	bl	800eb2e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801015c:	687b      	ldr	r3, [r7, #4]
 801015e:	3301      	adds	r3, #1
 8010160:	607b      	str	r3, [r7, #4]
 8010162:	687b      	ldr	r3, [r7, #4]
 8010164:	2b1f      	cmp	r3, #31
 8010166:	d9ef      	bls.n	8010148 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8010168:	480d      	ldr	r0, [pc, #52]	; (80101a0 <prvInitialiseTaskLists+0x64>)
 801016a:	f7fe fce0 	bl	800eb2e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 801016e:	480d      	ldr	r0, [pc, #52]	; (80101a4 <prvInitialiseTaskLists+0x68>)
 8010170:	f7fe fcdd 	bl	800eb2e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8010174:	480c      	ldr	r0, [pc, #48]	; (80101a8 <prvInitialiseTaskLists+0x6c>)
 8010176:	f7fe fcda 	bl	800eb2e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 801017a:	480c      	ldr	r0, [pc, #48]	; (80101ac <prvInitialiseTaskLists+0x70>)
 801017c:	f7fe fcd7 	bl	800eb2e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8010180:	480b      	ldr	r0, [pc, #44]	; (80101b0 <prvInitialiseTaskLists+0x74>)
 8010182:	f7fe fcd4 	bl	800eb2e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8010186:	4b0b      	ldr	r3, [pc, #44]	; (80101b4 <prvInitialiseTaskLists+0x78>)
 8010188:	4a05      	ldr	r2, [pc, #20]	; (80101a0 <prvInitialiseTaskLists+0x64>)
 801018a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 801018c:	4b0a      	ldr	r3, [pc, #40]	; (80101b8 <prvInitialiseTaskLists+0x7c>)
 801018e:	4a05      	ldr	r2, [pc, #20]	; (80101a4 <prvInitialiseTaskLists+0x68>)
 8010190:	601a      	str	r2, [r3, #0]
}
 8010192:	bf00      	nop
 8010194:	3708      	adds	r7, #8
 8010196:	46bd      	mov	sp, r7
 8010198:	bd80      	pop	{r7, pc}
 801019a:	bf00      	nop
 801019c:	2000093c 	.word	0x2000093c
 80101a0:	20000bbc 	.word	0x20000bbc
 80101a4:	20000bd0 	.word	0x20000bd0
 80101a8:	20000bec 	.word	0x20000bec
 80101ac:	20000c00 	.word	0x20000c00
 80101b0:	20000c18 	.word	0x20000c18
 80101b4:	20000be4 	.word	0x20000be4
 80101b8:	20000be8 	.word	0x20000be8

080101bc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80101bc:	b580      	push	{r7, lr}
 80101be:	b082      	sub	sp, #8
 80101c0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80101c2:	e019      	b.n	80101f8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80101c4:	f000 fbae 	bl	8010924 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80101c8:	4b10      	ldr	r3, [pc, #64]	; (801020c <prvCheckTasksWaitingTermination+0x50>)
 80101ca:	68db      	ldr	r3, [r3, #12]
 80101cc:	68db      	ldr	r3, [r3, #12]
 80101ce:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80101d0:	687b      	ldr	r3, [r7, #4]
 80101d2:	3304      	adds	r3, #4
 80101d4:	4618      	mov	r0, r3
 80101d6:	f7fe fd34 	bl	800ec42 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80101da:	4b0d      	ldr	r3, [pc, #52]	; (8010210 <prvCheckTasksWaitingTermination+0x54>)
 80101dc:	681b      	ldr	r3, [r3, #0]
 80101de:	3b01      	subs	r3, #1
 80101e0:	4a0b      	ldr	r2, [pc, #44]	; (8010210 <prvCheckTasksWaitingTermination+0x54>)
 80101e2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80101e4:	4b0b      	ldr	r3, [pc, #44]	; (8010214 <prvCheckTasksWaitingTermination+0x58>)
 80101e6:	681b      	ldr	r3, [r3, #0]
 80101e8:	3b01      	subs	r3, #1
 80101ea:	4a0a      	ldr	r2, [pc, #40]	; (8010214 <prvCheckTasksWaitingTermination+0x58>)
 80101ec:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80101ee:	f000 fbc9 	bl	8010984 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80101f2:	6878      	ldr	r0, [r7, #4]
 80101f4:	f000 f810 	bl	8010218 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80101f8:	4b06      	ldr	r3, [pc, #24]	; (8010214 <prvCheckTasksWaitingTermination+0x58>)
 80101fa:	681b      	ldr	r3, [r3, #0]
 80101fc:	2b00      	cmp	r3, #0
 80101fe:	d1e1      	bne.n	80101c4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8010200:	bf00      	nop
 8010202:	bf00      	nop
 8010204:	3708      	adds	r7, #8
 8010206:	46bd      	mov	sp, r7
 8010208:	bd80      	pop	{r7, pc}
 801020a:	bf00      	nop
 801020c:	20000c00 	.word	0x20000c00
 8010210:	20000c2c 	.word	0x20000c2c
 8010214:	20000c14 	.word	0x20000c14

08010218 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8010218:	b580      	push	{r7, lr}
 801021a:	b082      	sub	sp, #8
 801021c:	af00      	add	r7, sp, #0
 801021e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8010220:	687b      	ldr	r3, [r7, #4]
 8010222:	334c      	adds	r3, #76	; 0x4c
 8010224:	4618      	mov	r0, r3
 8010226:	f002 f9e7 	bl	80125f8 <_reclaim_reent>

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 801022a:	687b      	ldr	r3, [r7, #4]
 801022c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801022e:	4618      	mov	r0, r3
 8010230:	f000 fd66 	bl	8010d00 <vPortFree>
			vPortFree( pxTCB );
 8010234:	6878      	ldr	r0, [r7, #4]
 8010236:	f000 fd63 	bl	8010d00 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 801023a:	bf00      	nop
 801023c:	3708      	adds	r7, #8
 801023e:	46bd      	mov	sp, r7
 8010240:	bd80      	pop	{r7, pc}
	...

08010244 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8010244:	b480      	push	{r7}
 8010246:	b083      	sub	sp, #12
 8010248:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801024a:	4b0c      	ldr	r3, [pc, #48]	; (801027c <prvResetNextTaskUnblockTime+0x38>)
 801024c:	681b      	ldr	r3, [r3, #0]
 801024e:	681b      	ldr	r3, [r3, #0]
 8010250:	2b00      	cmp	r3, #0
 8010252:	d104      	bne.n	801025e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8010254:	4b0a      	ldr	r3, [pc, #40]	; (8010280 <prvResetNextTaskUnblockTime+0x3c>)
 8010256:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801025a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 801025c:	e008      	b.n	8010270 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801025e:	4b07      	ldr	r3, [pc, #28]	; (801027c <prvResetNextTaskUnblockTime+0x38>)
 8010260:	681b      	ldr	r3, [r3, #0]
 8010262:	68db      	ldr	r3, [r3, #12]
 8010264:	68db      	ldr	r3, [r3, #12]
 8010266:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8010268:	687b      	ldr	r3, [r7, #4]
 801026a:	685b      	ldr	r3, [r3, #4]
 801026c:	4a04      	ldr	r2, [pc, #16]	; (8010280 <prvResetNextTaskUnblockTime+0x3c>)
 801026e:	6013      	str	r3, [r2, #0]
}
 8010270:	bf00      	nop
 8010272:	370c      	adds	r7, #12
 8010274:	46bd      	mov	sp, r7
 8010276:	f85d 7b04 	ldr.w	r7, [sp], #4
 801027a:	4770      	bx	lr
 801027c:	20000be4 	.word	0x20000be4
 8010280:	20000c4c 	.word	0x20000c4c

08010284 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8010284:	b480      	push	{r7}
 8010286:	b083      	sub	sp, #12
 8010288:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 801028a:	4b0b      	ldr	r3, [pc, #44]	; (80102b8 <xTaskGetSchedulerState+0x34>)
 801028c:	681b      	ldr	r3, [r3, #0]
 801028e:	2b00      	cmp	r3, #0
 8010290:	d102      	bne.n	8010298 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8010292:	2301      	movs	r3, #1
 8010294:	607b      	str	r3, [r7, #4]
 8010296:	e008      	b.n	80102aa <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010298:	4b08      	ldr	r3, [pc, #32]	; (80102bc <xTaskGetSchedulerState+0x38>)
 801029a:	681b      	ldr	r3, [r3, #0]
 801029c:	2b00      	cmp	r3, #0
 801029e:	d102      	bne.n	80102a6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80102a0:	2302      	movs	r3, #2
 80102a2:	607b      	str	r3, [r7, #4]
 80102a4:	e001      	b.n	80102aa <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80102a6:	2300      	movs	r3, #0
 80102a8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80102aa:	687b      	ldr	r3, [r7, #4]
	}
 80102ac:	4618      	mov	r0, r3
 80102ae:	370c      	adds	r7, #12
 80102b0:	46bd      	mov	sp, r7
 80102b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102b6:	4770      	bx	lr
 80102b8:	20000c38 	.word	0x20000c38
 80102bc:	20000c54 	.word	0x20000c54

080102c0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80102c0:	b580      	push	{r7, lr}
 80102c2:	b084      	sub	sp, #16
 80102c4:	af00      	add	r7, sp, #0
 80102c6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80102c8:	687b      	ldr	r3, [r7, #4]
 80102ca:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80102cc:	2300      	movs	r3, #0
 80102ce:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80102d0:	687b      	ldr	r3, [r7, #4]
 80102d2:	2b00      	cmp	r3, #0
 80102d4:	d05e      	beq.n	8010394 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80102d6:	68bb      	ldr	r3, [r7, #8]
 80102d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80102da:	4b31      	ldr	r3, [pc, #196]	; (80103a0 <xTaskPriorityInherit+0xe0>)
 80102dc:	681b      	ldr	r3, [r3, #0]
 80102de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80102e0:	429a      	cmp	r2, r3
 80102e2:	d24e      	bcs.n	8010382 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80102e4:	68bb      	ldr	r3, [r7, #8]
 80102e6:	699b      	ldr	r3, [r3, #24]
 80102e8:	2b00      	cmp	r3, #0
 80102ea:	db06      	blt.n	80102fa <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80102ec:	4b2c      	ldr	r3, [pc, #176]	; (80103a0 <xTaskPriorityInherit+0xe0>)
 80102ee:	681b      	ldr	r3, [r3, #0]
 80102f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80102f2:	f1c3 0220 	rsb	r2, r3, #32
 80102f6:	68bb      	ldr	r3, [r7, #8]
 80102f8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80102fa:	68bb      	ldr	r3, [r7, #8]
 80102fc:	6959      	ldr	r1, [r3, #20]
 80102fe:	68bb      	ldr	r3, [r7, #8]
 8010300:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010302:	4613      	mov	r3, r2
 8010304:	009b      	lsls	r3, r3, #2
 8010306:	4413      	add	r3, r2
 8010308:	009b      	lsls	r3, r3, #2
 801030a:	4a26      	ldr	r2, [pc, #152]	; (80103a4 <xTaskPriorityInherit+0xe4>)
 801030c:	4413      	add	r3, r2
 801030e:	4299      	cmp	r1, r3
 8010310:	d12f      	bne.n	8010372 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010312:	68bb      	ldr	r3, [r7, #8]
 8010314:	3304      	adds	r3, #4
 8010316:	4618      	mov	r0, r3
 8010318:	f7fe fc93 	bl	800ec42 <uxListRemove>
 801031c:	4603      	mov	r3, r0
 801031e:	2b00      	cmp	r3, #0
 8010320:	d10a      	bne.n	8010338 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8010322:	68bb      	ldr	r3, [r7, #8]
 8010324:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010326:	2201      	movs	r2, #1
 8010328:	fa02 f303 	lsl.w	r3, r2, r3
 801032c:	43da      	mvns	r2, r3
 801032e:	4b1e      	ldr	r3, [pc, #120]	; (80103a8 <xTaskPriorityInherit+0xe8>)
 8010330:	681b      	ldr	r3, [r3, #0]
 8010332:	4013      	ands	r3, r2
 8010334:	4a1c      	ldr	r2, [pc, #112]	; (80103a8 <xTaskPriorityInherit+0xe8>)
 8010336:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8010338:	4b19      	ldr	r3, [pc, #100]	; (80103a0 <xTaskPriorityInherit+0xe0>)
 801033a:	681b      	ldr	r3, [r3, #0]
 801033c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801033e:	68bb      	ldr	r3, [r7, #8]
 8010340:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8010342:	68bb      	ldr	r3, [r7, #8]
 8010344:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010346:	2201      	movs	r2, #1
 8010348:	409a      	lsls	r2, r3
 801034a:	4b17      	ldr	r3, [pc, #92]	; (80103a8 <xTaskPriorityInherit+0xe8>)
 801034c:	681b      	ldr	r3, [r3, #0]
 801034e:	4313      	orrs	r3, r2
 8010350:	4a15      	ldr	r2, [pc, #84]	; (80103a8 <xTaskPriorityInherit+0xe8>)
 8010352:	6013      	str	r3, [r2, #0]
 8010354:	68bb      	ldr	r3, [r7, #8]
 8010356:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010358:	4613      	mov	r3, r2
 801035a:	009b      	lsls	r3, r3, #2
 801035c:	4413      	add	r3, r2
 801035e:	009b      	lsls	r3, r3, #2
 8010360:	4a10      	ldr	r2, [pc, #64]	; (80103a4 <xTaskPriorityInherit+0xe4>)
 8010362:	441a      	add	r2, r3
 8010364:	68bb      	ldr	r3, [r7, #8]
 8010366:	3304      	adds	r3, #4
 8010368:	4619      	mov	r1, r3
 801036a:	4610      	mov	r0, r2
 801036c:	f7fe fc0c 	bl	800eb88 <vListInsertEnd>
 8010370:	e004      	b.n	801037c <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8010372:	4b0b      	ldr	r3, [pc, #44]	; (80103a0 <xTaskPriorityInherit+0xe0>)
 8010374:	681b      	ldr	r3, [r3, #0]
 8010376:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010378:	68bb      	ldr	r3, [r7, #8]
 801037a:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 801037c:	2301      	movs	r3, #1
 801037e:	60fb      	str	r3, [r7, #12]
 8010380:	e008      	b.n	8010394 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8010382:	68bb      	ldr	r3, [r7, #8]
 8010384:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010386:	4b06      	ldr	r3, [pc, #24]	; (80103a0 <xTaskPriorityInherit+0xe0>)
 8010388:	681b      	ldr	r3, [r3, #0]
 801038a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801038c:	429a      	cmp	r2, r3
 801038e:	d201      	bcs.n	8010394 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8010390:	2301      	movs	r3, #1
 8010392:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8010394:	68fb      	ldr	r3, [r7, #12]
	}
 8010396:	4618      	mov	r0, r3
 8010398:	3710      	adds	r7, #16
 801039a:	46bd      	mov	sp, r7
 801039c:	bd80      	pop	{r7, pc}
 801039e:	bf00      	nop
 80103a0:	20000938 	.word	0x20000938
 80103a4:	2000093c 	.word	0x2000093c
 80103a8:	20000c34 	.word	0x20000c34

080103ac <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80103ac:	b580      	push	{r7, lr}
 80103ae:	b086      	sub	sp, #24
 80103b0:	af00      	add	r7, sp, #0
 80103b2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80103b4:	687b      	ldr	r3, [r7, #4]
 80103b6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80103b8:	2300      	movs	r3, #0
 80103ba:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80103bc:	687b      	ldr	r3, [r7, #4]
 80103be:	2b00      	cmp	r3, #0
 80103c0:	d06e      	beq.n	80104a0 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80103c2:	4b3a      	ldr	r3, [pc, #232]	; (80104ac <xTaskPriorityDisinherit+0x100>)
 80103c4:	681b      	ldr	r3, [r3, #0]
 80103c6:	693a      	ldr	r2, [r7, #16]
 80103c8:	429a      	cmp	r2, r3
 80103ca:	d00a      	beq.n	80103e2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80103cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80103d0:	f383 8811 	msr	BASEPRI, r3
 80103d4:	f3bf 8f6f 	isb	sy
 80103d8:	f3bf 8f4f 	dsb	sy
 80103dc:	60fb      	str	r3, [r7, #12]
}
 80103de:	bf00      	nop
 80103e0:	e7fe      	b.n	80103e0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80103e2:	693b      	ldr	r3, [r7, #16]
 80103e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80103e6:	2b00      	cmp	r3, #0
 80103e8:	d10a      	bne.n	8010400 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80103ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80103ee:	f383 8811 	msr	BASEPRI, r3
 80103f2:	f3bf 8f6f 	isb	sy
 80103f6:	f3bf 8f4f 	dsb	sy
 80103fa:	60bb      	str	r3, [r7, #8]
}
 80103fc:	bf00      	nop
 80103fe:	e7fe      	b.n	80103fe <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8010400:	693b      	ldr	r3, [r7, #16]
 8010402:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010404:	1e5a      	subs	r2, r3, #1
 8010406:	693b      	ldr	r3, [r7, #16]
 8010408:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 801040a:	693b      	ldr	r3, [r7, #16]
 801040c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801040e:	693b      	ldr	r3, [r7, #16]
 8010410:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010412:	429a      	cmp	r2, r3
 8010414:	d044      	beq.n	80104a0 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8010416:	693b      	ldr	r3, [r7, #16]
 8010418:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801041a:	2b00      	cmp	r3, #0
 801041c:	d140      	bne.n	80104a0 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801041e:	693b      	ldr	r3, [r7, #16]
 8010420:	3304      	adds	r3, #4
 8010422:	4618      	mov	r0, r3
 8010424:	f7fe fc0d 	bl	800ec42 <uxListRemove>
 8010428:	4603      	mov	r3, r0
 801042a:	2b00      	cmp	r3, #0
 801042c:	d115      	bne.n	801045a <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 801042e:	693b      	ldr	r3, [r7, #16]
 8010430:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010432:	491f      	ldr	r1, [pc, #124]	; (80104b0 <xTaskPriorityDisinherit+0x104>)
 8010434:	4613      	mov	r3, r2
 8010436:	009b      	lsls	r3, r3, #2
 8010438:	4413      	add	r3, r2
 801043a:	009b      	lsls	r3, r3, #2
 801043c:	440b      	add	r3, r1
 801043e:	681b      	ldr	r3, [r3, #0]
 8010440:	2b00      	cmp	r3, #0
 8010442:	d10a      	bne.n	801045a <xTaskPriorityDisinherit+0xae>
 8010444:	693b      	ldr	r3, [r7, #16]
 8010446:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010448:	2201      	movs	r2, #1
 801044a:	fa02 f303 	lsl.w	r3, r2, r3
 801044e:	43da      	mvns	r2, r3
 8010450:	4b18      	ldr	r3, [pc, #96]	; (80104b4 <xTaskPriorityDisinherit+0x108>)
 8010452:	681b      	ldr	r3, [r3, #0]
 8010454:	4013      	ands	r3, r2
 8010456:	4a17      	ldr	r2, [pc, #92]	; (80104b4 <xTaskPriorityDisinherit+0x108>)
 8010458:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 801045a:	693b      	ldr	r3, [r7, #16]
 801045c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801045e:	693b      	ldr	r3, [r7, #16]
 8010460:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010462:	693b      	ldr	r3, [r7, #16]
 8010464:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010466:	f1c3 0220 	rsb	r2, r3, #32
 801046a:	693b      	ldr	r3, [r7, #16]
 801046c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 801046e:	693b      	ldr	r3, [r7, #16]
 8010470:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010472:	2201      	movs	r2, #1
 8010474:	409a      	lsls	r2, r3
 8010476:	4b0f      	ldr	r3, [pc, #60]	; (80104b4 <xTaskPriorityDisinherit+0x108>)
 8010478:	681b      	ldr	r3, [r3, #0]
 801047a:	4313      	orrs	r3, r2
 801047c:	4a0d      	ldr	r2, [pc, #52]	; (80104b4 <xTaskPriorityDisinherit+0x108>)
 801047e:	6013      	str	r3, [r2, #0]
 8010480:	693b      	ldr	r3, [r7, #16]
 8010482:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010484:	4613      	mov	r3, r2
 8010486:	009b      	lsls	r3, r3, #2
 8010488:	4413      	add	r3, r2
 801048a:	009b      	lsls	r3, r3, #2
 801048c:	4a08      	ldr	r2, [pc, #32]	; (80104b0 <xTaskPriorityDisinherit+0x104>)
 801048e:	441a      	add	r2, r3
 8010490:	693b      	ldr	r3, [r7, #16]
 8010492:	3304      	adds	r3, #4
 8010494:	4619      	mov	r1, r3
 8010496:	4610      	mov	r0, r2
 8010498:	f7fe fb76 	bl	800eb88 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 801049c:	2301      	movs	r3, #1
 801049e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80104a0:	697b      	ldr	r3, [r7, #20]
	}
 80104a2:	4618      	mov	r0, r3
 80104a4:	3718      	adds	r7, #24
 80104a6:	46bd      	mov	sp, r7
 80104a8:	bd80      	pop	{r7, pc}
 80104aa:	bf00      	nop
 80104ac:	20000938 	.word	0x20000938
 80104b0:	2000093c 	.word	0x2000093c
 80104b4:	20000c34 	.word	0x20000c34

080104b8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80104b8:	b580      	push	{r7, lr}
 80104ba:	b088      	sub	sp, #32
 80104bc:	af00      	add	r7, sp, #0
 80104be:	6078      	str	r0, [r7, #4]
 80104c0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80104c2:	687b      	ldr	r3, [r7, #4]
 80104c4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80104c6:	2301      	movs	r3, #1
 80104c8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80104ca:	687b      	ldr	r3, [r7, #4]
 80104cc:	2b00      	cmp	r3, #0
 80104ce:	d077      	beq.n	80105c0 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80104d0:	69bb      	ldr	r3, [r7, #24]
 80104d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80104d4:	2b00      	cmp	r3, #0
 80104d6:	d10a      	bne.n	80104ee <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 80104d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80104dc:	f383 8811 	msr	BASEPRI, r3
 80104e0:	f3bf 8f6f 	isb	sy
 80104e4:	f3bf 8f4f 	dsb	sy
 80104e8:	60fb      	str	r3, [r7, #12]
}
 80104ea:	bf00      	nop
 80104ec:	e7fe      	b.n	80104ec <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80104ee:	69bb      	ldr	r3, [r7, #24]
 80104f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80104f2:	683a      	ldr	r2, [r7, #0]
 80104f4:	429a      	cmp	r2, r3
 80104f6:	d902      	bls.n	80104fe <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80104f8:	683b      	ldr	r3, [r7, #0]
 80104fa:	61fb      	str	r3, [r7, #28]
 80104fc:	e002      	b.n	8010504 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80104fe:	69bb      	ldr	r3, [r7, #24]
 8010500:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010502:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8010504:	69bb      	ldr	r3, [r7, #24]
 8010506:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010508:	69fa      	ldr	r2, [r7, #28]
 801050a:	429a      	cmp	r2, r3
 801050c:	d058      	beq.n	80105c0 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 801050e:	69bb      	ldr	r3, [r7, #24]
 8010510:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010512:	697a      	ldr	r2, [r7, #20]
 8010514:	429a      	cmp	r2, r3
 8010516:	d153      	bne.n	80105c0 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8010518:	4b2b      	ldr	r3, [pc, #172]	; (80105c8 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 801051a:	681b      	ldr	r3, [r3, #0]
 801051c:	69ba      	ldr	r2, [r7, #24]
 801051e:	429a      	cmp	r2, r3
 8010520:	d10a      	bne.n	8010538 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8010522:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010526:	f383 8811 	msr	BASEPRI, r3
 801052a:	f3bf 8f6f 	isb	sy
 801052e:	f3bf 8f4f 	dsb	sy
 8010532:	60bb      	str	r3, [r7, #8]
}
 8010534:	bf00      	nop
 8010536:	e7fe      	b.n	8010536 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8010538:	69bb      	ldr	r3, [r7, #24]
 801053a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801053c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 801053e:	69bb      	ldr	r3, [r7, #24]
 8010540:	69fa      	ldr	r2, [r7, #28]
 8010542:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8010544:	69bb      	ldr	r3, [r7, #24]
 8010546:	699b      	ldr	r3, [r3, #24]
 8010548:	2b00      	cmp	r3, #0
 801054a:	db04      	blt.n	8010556 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801054c:	69fb      	ldr	r3, [r7, #28]
 801054e:	f1c3 0220 	rsb	r2, r3, #32
 8010552:	69bb      	ldr	r3, [r7, #24]
 8010554:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8010556:	69bb      	ldr	r3, [r7, #24]
 8010558:	6959      	ldr	r1, [r3, #20]
 801055a:	693a      	ldr	r2, [r7, #16]
 801055c:	4613      	mov	r3, r2
 801055e:	009b      	lsls	r3, r3, #2
 8010560:	4413      	add	r3, r2
 8010562:	009b      	lsls	r3, r3, #2
 8010564:	4a19      	ldr	r2, [pc, #100]	; (80105cc <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8010566:	4413      	add	r3, r2
 8010568:	4299      	cmp	r1, r3
 801056a:	d129      	bne.n	80105c0 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801056c:	69bb      	ldr	r3, [r7, #24]
 801056e:	3304      	adds	r3, #4
 8010570:	4618      	mov	r0, r3
 8010572:	f7fe fb66 	bl	800ec42 <uxListRemove>
 8010576:	4603      	mov	r3, r0
 8010578:	2b00      	cmp	r3, #0
 801057a:	d10a      	bne.n	8010592 <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 801057c:	69bb      	ldr	r3, [r7, #24]
 801057e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010580:	2201      	movs	r2, #1
 8010582:	fa02 f303 	lsl.w	r3, r2, r3
 8010586:	43da      	mvns	r2, r3
 8010588:	4b11      	ldr	r3, [pc, #68]	; (80105d0 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 801058a:	681b      	ldr	r3, [r3, #0]
 801058c:	4013      	ands	r3, r2
 801058e:	4a10      	ldr	r2, [pc, #64]	; (80105d0 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8010590:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8010592:	69bb      	ldr	r3, [r7, #24]
 8010594:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010596:	2201      	movs	r2, #1
 8010598:	409a      	lsls	r2, r3
 801059a:	4b0d      	ldr	r3, [pc, #52]	; (80105d0 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 801059c:	681b      	ldr	r3, [r3, #0]
 801059e:	4313      	orrs	r3, r2
 80105a0:	4a0b      	ldr	r2, [pc, #44]	; (80105d0 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80105a2:	6013      	str	r3, [r2, #0]
 80105a4:	69bb      	ldr	r3, [r7, #24]
 80105a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80105a8:	4613      	mov	r3, r2
 80105aa:	009b      	lsls	r3, r3, #2
 80105ac:	4413      	add	r3, r2
 80105ae:	009b      	lsls	r3, r3, #2
 80105b0:	4a06      	ldr	r2, [pc, #24]	; (80105cc <vTaskPriorityDisinheritAfterTimeout+0x114>)
 80105b2:	441a      	add	r2, r3
 80105b4:	69bb      	ldr	r3, [r7, #24]
 80105b6:	3304      	adds	r3, #4
 80105b8:	4619      	mov	r1, r3
 80105ba:	4610      	mov	r0, r2
 80105bc:	f7fe fae4 	bl	800eb88 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80105c0:	bf00      	nop
 80105c2:	3720      	adds	r7, #32
 80105c4:	46bd      	mov	sp, r7
 80105c6:	bd80      	pop	{r7, pc}
 80105c8:	20000938 	.word	0x20000938
 80105cc:	2000093c 	.word	0x2000093c
 80105d0:	20000c34 	.word	0x20000c34

080105d4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80105d4:	b480      	push	{r7}
 80105d6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80105d8:	4b07      	ldr	r3, [pc, #28]	; (80105f8 <pvTaskIncrementMutexHeldCount+0x24>)
 80105da:	681b      	ldr	r3, [r3, #0]
 80105dc:	2b00      	cmp	r3, #0
 80105de:	d004      	beq.n	80105ea <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80105e0:	4b05      	ldr	r3, [pc, #20]	; (80105f8 <pvTaskIncrementMutexHeldCount+0x24>)
 80105e2:	681b      	ldr	r3, [r3, #0]
 80105e4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80105e6:	3201      	adds	r2, #1
 80105e8:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 80105ea:	4b03      	ldr	r3, [pc, #12]	; (80105f8 <pvTaskIncrementMutexHeldCount+0x24>)
 80105ec:	681b      	ldr	r3, [r3, #0]
	}
 80105ee:	4618      	mov	r0, r3
 80105f0:	46bd      	mov	sp, r7
 80105f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105f6:	4770      	bx	lr
 80105f8:	20000938 	.word	0x20000938

080105fc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80105fc:	b580      	push	{r7, lr}
 80105fe:	b084      	sub	sp, #16
 8010600:	af00      	add	r7, sp, #0
 8010602:	6078      	str	r0, [r7, #4]
 8010604:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8010606:	4b29      	ldr	r3, [pc, #164]	; (80106ac <prvAddCurrentTaskToDelayedList+0xb0>)
 8010608:	681b      	ldr	r3, [r3, #0]
 801060a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801060c:	4b28      	ldr	r3, [pc, #160]	; (80106b0 <prvAddCurrentTaskToDelayedList+0xb4>)
 801060e:	681b      	ldr	r3, [r3, #0]
 8010610:	3304      	adds	r3, #4
 8010612:	4618      	mov	r0, r3
 8010614:	f7fe fb15 	bl	800ec42 <uxListRemove>
 8010618:	4603      	mov	r3, r0
 801061a:	2b00      	cmp	r3, #0
 801061c:	d10b      	bne.n	8010636 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 801061e:	4b24      	ldr	r3, [pc, #144]	; (80106b0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8010620:	681b      	ldr	r3, [r3, #0]
 8010622:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010624:	2201      	movs	r2, #1
 8010626:	fa02 f303 	lsl.w	r3, r2, r3
 801062a:	43da      	mvns	r2, r3
 801062c:	4b21      	ldr	r3, [pc, #132]	; (80106b4 <prvAddCurrentTaskToDelayedList+0xb8>)
 801062e:	681b      	ldr	r3, [r3, #0]
 8010630:	4013      	ands	r3, r2
 8010632:	4a20      	ldr	r2, [pc, #128]	; (80106b4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8010634:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8010636:	687b      	ldr	r3, [r7, #4]
 8010638:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801063c:	d10a      	bne.n	8010654 <prvAddCurrentTaskToDelayedList+0x58>
 801063e:	683b      	ldr	r3, [r7, #0]
 8010640:	2b00      	cmp	r3, #0
 8010642:	d007      	beq.n	8010654 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010644:	4b1a      	ldr	r3, [pc, #104]	; (80106b0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8010646:	681b      	ldr	r3, [r3, #0]
 8010648:	3304      	adds	r3, #4
 801064a:	4619      	mov	r1, r3
 801064c:	481a      	ldr	r0, [pc, #104]	; (80106b8 <prvAddCurrentTaskToDelayedList+0xbc>)
 801064e:	f7fe fa9b 	bl	800eb88 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8010652:	e026      	b.n	80106a2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8010654:	68fa      	ldr	r2, [r7, #12]
 8010656:	687b      	ldr	r3, [r7, #4]
 8010658:	4413      	add	r3, r2
 801065a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 801065c:	4b14      	ldr	r3, [pc, #80]	; (80106b0 <prvAddCurrentTaskToDelayedList+0xb4>)
 801065e:	681b      	ldr	r3, [r3, #0]
 8010660:	68ba      	ldr	r2, [r7, #8]
 8010662:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8010664:	68ba      	ldr	r2, [r7, #8]
 8010666:	68fb      	ldr	r3, [r7, #12]
 8010668:	429a      	cmp	r2, r3
 801066a:	d209      	bcs.n	8010680 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801066c:	4b13      	ldr	r3, [pc, #76]	; (80106bc <prvAddCurrentTaskToDelayedList+0xc0>)
 801066e:	681a      	ldr	r2, [r3, #0]
 8010670:	4b0f      	ldr	r3, [pc, #60]	; (80106b0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8010672:	681b      	ldr	r3, [r3, #0]
 8010674:	3304      	adds	r3, #4
 8010676:	4619      	mov	r1, r3
 8010678:	4610      	mov	r0, r2
 801067a:	f7fe faa9 	bl	800ebd0 <vListInsert>
}
 801067e:	e010      	b.n	80106a2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010680:	4b0f      	ldr	r3, [pc, #60]	; (80106c0 <prvAddCurrentTaskToDelayedList+0xc4>)
 8010682:	681a      	ldr	r2, [r3, #0]
 8010684:	4b0a      	ldr	r3, [pc, #40]	; (80106b0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8010686:	681b      	ldr	r3, [r3, #0]
 8010688:	3304      	adds	r3, #4
 801068a:	4619      	mov	r1, r3
 801068c:	4610      	mov	r0, r2
 801068e:	f7fe fa9f 	bl	800ebd0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8010692:	4b0c      	ldr	r3, [pc, #48]	; (80106c4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8010694:	681b      	ldr	r3, [r3, #0]
 8010696:	68ba      	ldr	r2, [r7, #8]
 8010698:	429a      	cmp	r2, r3
 801069a:	d202      	bcs.n	80106a2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 801069c:	4a09      	ldr	r2, [pc, #36]	; (80106c4 <prvAddCurrentTaskToDelayedList+0xc8>)
 801069e:	68bb      	ldr	r3, [r7, #8]
 80106a0:	6013      	str	r3, [r2, #0]
}
 80106a2:	bf00      	nop
 80106a4:	3710      	adds	r7, #16
 80106a6:	46bd      	mov	sp, r7
 80106a8:	bd80      	pop	{r7, pc}
 80106aa:	bf00      	nop
 80106ac:	20000c30 	.word	0x20000c30
 80106b0:	20000938 	.word	0x20000938
 80106b4:	20000c34 	.word	0x20000c34
 80106b8:	20000c18 	.word	0x20000c18
 80106bc:	20000be8 	.word	0x20000be8
 80106c0:	20000be4 	.word	0x20000be4
 80106c4:	20000c4c 	.word	0x20000c4c

080106c8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80106c8:	b480      	push	{r7}
 80106ca:	b085      	sub	sp, #20
 80106cc:	af00      	add	r7, sp, #0
 80106ce:	60f8      	str	r0, [r7, #12]
 80106d0:	60b9      	str	r1, [r7, #8]
 80106d2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80106d4:	68fb      	ldr	r3, [r7, #12]
 80106d6:	3b04      	subs	r3, #4
 80106d8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80106da:	68fb      	ldr	r3, [r7, #12]
 80106dc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80106e0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80106e2:	68fb      	ldr	r3, [r7, #12]
 80106e4:	3b04      	subs	r3, #4
 80106e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80106e8:	68bb      	ldr	r3, [r7, #8]
 80106ea:	f023 0201 	bic.w	r2, r3, #1
 80106ee:	68fb      	ldr	r3, [r7, #12]
 80106f0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80106f2:	68fb      	ldr	r3, [r7, #12]
 80106f4:	3b04      	subs	r3, #4
 80106f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80106f8:	4a0c      	ldr	r2, [pc, #48]	; (801072c <pxPortInitialiseStack+0x64>)
 80106fa:	68fb      	ldr	r3, [r7, #12]
 80106fc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80106fe:	68fb      	ldr	r3, [r7, #12]
 8010700:	3b14      	subs	r3, #20
 8010702:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8010704:	687a      	ldr	r2, [r7, #4]
 8010706:	68fb      	ldr	r3, [r7, #12]
 8010708:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 801070a:	68fb      	ldr	r3, [r7, #12]
 801070c:	3b04      	subs	r3, #4
 801070e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8010710:	68fb      	ldr	r3, [r7, #12]
 8010712:	f06f 0202 	mvn.w	r2, #2
 8010716:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8010718:	68fb      	ldr	r3, [r7, #12]
 801071a:	3b20      	subs	r3, #32
 801071c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 801071e:	68fb      	ldr	r3, [r7, #12]
}
 8010720:	4618      	mov	r0, r3
 8010722:	3714      	adds	r7, #20
 8010724:	46bd      	mov	sp, r7
 8010726:	f85d 7b04 	ldr.w	r7, [sp], #4
 801072a:	4770      	bx	lr
 801072c:	08010731 	.word	0x08010731

08010730 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8010730:	b480      	push	{r7}
 8010732:	b085      	sub	sp, #20
 8010734:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8010736:	2300      	movs	r3, #0
 8010738:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 801073a:	4b12      	ldr	r3, [pc, #72]	; (8010784 <prvTaskExitError+0x54>)
 801073c:	681b      	ldr	r3, [r3, #0]
 801073e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010742:	d00a      	beq.n	801075a <prvTaskExitError+0x2a>
	__asm volatile
 8010744:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010748:	f383 8811 	msr	BASEPRI, r3
 801074c:	f3bf 8f6f 	isb	sy
 8010750:	f3bf 8f4f 	dsb	sy
 8010754:	60fb      	str	r3, [r7, #12]
}
 8010756:	bf00      	nop
 8010758:	e7fe      	b.n	8010758 <prvTaskExitError+0x28>
	__asm volatile
 801075a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801075e:	f383 8811 	msr	BASEPRI, r3
 8010762:	f3bf 8f6f 	isb	sy
 8010766:	f3bf 8f4f 	dsb	sy
 801076a:	60bb      	str	r3, [r7, #8]
}
 801076c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 801076e:	bf00      	nop
 8010770:	687b      	ldr	r3, [r7, #4]
 8010772:	2b00      	cmp	r3, #0
 8010774:	d0fc      	beq.n	8010770 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8010776:	bf00      	nop
 8010778:	bf00      	nop
 801077a:	3714      	adds	r7, #20
 801077c:	46bd      	mov	sp, r7
 801077e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010782:	4770      	bx	lr
 8010784:	2000011c 	.word	0x2000011c
	...

08010790 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8010790:	4b07      	ldr	r3, [pc, #28]	; (80107b0 <pxCurrentTCBConst2>)
 8010792:	6819      	ldr	r1, [r3, #0]
 8010794:	6808      	ldr	r0, [r1, #0]
 8010796:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801079a:	f380 8809 	msr	PSP, r0
 801079e:	f3bf 8f6f 	isb	sy
 80107a2:	f04f 0000 	mov.w	r0, #0
 80107a6:	f380 8811 	msr	BASEPRI, r0
 80107aa:	4770      	bx	lr
 80107ac:	f3af 8000 	nop.w

080107b0 <pxCurrentTCBConst2>:
 80107b0:	20000938 	.word	0x20000938
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80107b4:	bf00      	nop
 80107b6:	bf00      	nop

080107b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80107b8:	4808      	ldr	r0, [pc, #32]	; (80107dc <prvPortStartFirstTask+0x24>)
 80107ba:	6800      	ldr	r0, [r0, #0]
 80107bc:	6800      	ldr	r0, [r0, #0]
 80107be:	f380 8808 	msr	MSP, r0
 80107c2:	f04f 0000 	mov.w	r0, #0
 80107c6:	f380 8814 	msr	CONTROL, r0
 80107ca:	b662      	cpsie	i
 80107cc:	b661      	cpsie	f
 80107ce:	f3bf 8f4f 	dsb	sy
 80107d2:	f3bf 8f6f 	isb	sy
 80107d6:	df00      	svc	0
 80107d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80107da:	bf00      	nop
 80107dc:	e000ed08 	.word	0xe000ed08

080107e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80107e0:	b580      	push	{r7, lr}
 80107e2:	b086      	sub	sp, #24
 80107e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80107e6:	4b46      	ldr	r3, [pc, #280]	; (8010900 <xPortStartScheduler+0x120>)
 80107e8:	681b      	ldr	r3, [r3, #0]
 80107ea:	4a46      	ldr	r2, [pc, #280]	; (8010904 <xPortStartScheduler+0x124>)
 80107ec:	4293      	cmp	r3, r2
 80107ee:	d10a      	bne.n	8010806 <xPortStartScheduler+0x26>
	__asm volatile
 80107f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80107f4:	f383 8811 	msr	BASEPRI, r3
 80107f8:	f3bf 8f6f 	isb	sy
 80107fc:	f3bf 8f4f 	dsb	sy
 8010800:	613b      	str	r3, [r7, #16]
}
 8010802:	bf00      	nop
 8010804:	e7fe      	b.n	8010804 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8010806:	4b3e      	ldr	r3, [pc, #248]	; (8010900 <xPortStartScheduler+0x120>)
 8010808:	681b      	ldr	r3, [r3, #0]
 801080a:	4a3f      	ldr	r2, [pc, #252]	; (8010908 <xPortStartScheduler+0x128>)
 801080c:	4293      	cmp	r3, r2
 801080e:	d10a      	bne.n	8010826 <xPortStartScheduler+0x46>
	__asm volatile
 8010810:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010814:	f383 8811 	msr	BASEPRI, r3
 8010818:	f3bf 8f6f 	isb	sy
 801081c:	f3bf 8f4f 	dsb	sy
 8010820:	60fb      	str	r3, [r7, #12]
}
 8010822:	bf00      	nop
 8010824:	e7fe      	b.n	8010824 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8010826:	4b39      	ldr	r3, [pc, #228]	; (801090c <xPortStartScheduler+0x12c>)
 8010828:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801082a:	697b      	ldr	r3, [r7, #20]
 801082c:	781b      	ldrb	r3, [r3, #0]
 801082e:	b2db      	uxtb	r3, r3
 8010830:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8010832:	697b      	ldr	r3, [r7, #20]
 8010834:	22ff      	movs	r2, #255	; 0xff
 8010836:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8010838:	697b      	ldr	r3, [r7, #20]
 801083a:	781b      	ldrb	r3, [r3, #0]
 801083c:	b2db      	uxtb	r3, r3
 801083e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8010840:	78fb      	ldrb	r3, [r7, #3]
 8010842:	b2db      	uxtb	r3, r3
 8010844:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8010848:	b2da      	uxtb	r2, r3
 801084a:	4b31      	ldr	r3, [pc, #196]	; (8010910 <xPortStartScheduler+0x130>)
 801084c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801084e:	4b31      	ldr	r3, [pc, #196]	; (8010914 <xPortStartScheduler+0x134>)
 8010850:	2207      	movs	r2, #7
 8010852:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8010854:	e009      	b.n	801086a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8010856:	4b2f      	ldr	r3, [pc, #188]	; (8010914 <xPortStartScheduler+0x134>)
 8010858:	681b      	ldr	r3, [r3, #0]
 801085a:	3b01      	subs	r3, #1
 801085c:	4a2d      	ldr	r2, [pc, #180]	; (8010914 <xPortStartScheduler+0x134>)
 801085e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8010860:	78fb      	ldrb	r3, [r7, #3]
 8010862:	b2db      	uxtb	r3, r3
 8010864:	005b      	lsls	r3, r3, #1
 8010866:	b2db      	uxtb	r3, r3
 8010868:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801086a:	78fb      	ldrb	r3, [r7, #3]
 801086c:	b2db      	uxtb	r3, r3
 801086e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010872:	2b80      	cmp	r3, #128	; 0x80
 8010874:	d0ef      	beq.n	8010856 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8010876:	4b27      	ldr	r3, [pc, #156]	; (8010914 <xPortStartScheduler+0x134>)
 8010878:	681b      	ldr	r3, [r3, #0]
 801087a:	f1c3 0307 	rsb	r3, r3, #7
 801087e:	2b04      	cmp	r3, #4
 8010880:	d00a      	beq.n	8010898 <xPortStartScheduler+0xb8>
	__asm volatile
 8010882:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010886:	f383 8811 	msr	BASEPRI, r3
 801088a:	f3bf 8f6f 	isb	sy
 801088e:	f3bf 8f4f 	dsb	sy
 8010892:	60bb      	str	r3, [r7, #8]
}
 8010894:	bf00      	nop
 8010896:	e7fe      	b.n	8010896 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8010898:	4b1e      	ldr	r3, [pc, #120]	; (8010914 <xPortStartScheduler+0x134>)
 801089a:	681b      	ldr	r3, [r3, #0]
 801089c:	021b      	lsls	r3, r3, #8
 801089e:	4a1d      	ldr	r2, [pc, #116]	; (8010914 <xPortStartScheduler+0x134>)
 80108a0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80108a2:	4b1c      	ldr	r3, [pc, #112]	; (8010914 <xPortStartScheduler+0x134>)
 80108a4:	681b      	ldr	r3, [r3, #0]
 80108a6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80108aa:	4a1a      	ldr	r2, [pc, #104]	; (8010914 <xPortStartScheduler+0x134>)
 80108ac:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80108ae:	687b      	ldr	r3, [r7, #4]
 80108b0:	b2da      	uxtb	r2, r3
 80108b2:	697b      	ldr	r3, [r7, #20]
 80108b4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80108b6:	4b18      	ldr	r3, [pc, #96]	; (8010918 <xPortStartScheduler+0x138>)
 80108b8:	681b      	ldr	r3, [r3, #0]
 80108ba:	4a17      	ldr	r2, [pc, #92]	; (8010918 <xPortStartScheduler+0x138>)
 80108bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80108c0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80108c2:	4b15      	ldr	r3, [pc, #84]	; (8010918 <xPortStartScheduler+0x138>)
 80108c4:	681b      	ldr	r3, [r3, #0]
 80108c6:	4a14      	ldr	r2, [pc, #80]	; (8010918 <xPortStartScheduler+0x138>)
 80108c8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80108cc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80108ce:	f000 f8dd 	bl	8010a8c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80108d2:	4b12      	ldr	r3, [pc, #72]	; (801091c <xPortStartScheduler+0x13c>)
 80108d4:	2200      	movs	r2, #0
 80108d6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80108d8:	f000 f8fc 	bl	8010ad4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80108dc:	4b10      	ldr	r3, [pc, #64]	; (8010920 <xPortStartScheduler+0x140>)
 80108de:	681b      	ldr	r3, [r3, #0]
 80108e0:	4a0f      	ldr	r2, [pc, #60]	; (8010920 <xPortStartScheduler+0x140>)
 80108e2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80108e6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80108e8:	f7ff ff66 	bl	80107b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80108ec:	f7ff faa2 	bl	800fe34 <vTaskSwitchContext>
	prvTaskExitError();
 80108f0:	f7ff ff1e 	bl	8010730 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80108f4:	2300      	movs	r3, #0
}
 80108f6:	4618      	mov	r0, r3
 80108f8:	3718      	adds	r7, #24
 80108fa:	46bd      	mov	sp, r7
 80108fc:	bd80      	pop	{r7, pc}
 80108fe:	bf00      	nop
 8010900:	e000ed00 	.word	0xe000ed00
 8010904:	410fc271 	.word	0x410fc271
 8010908:	410fc270 	.word	0x410fc270
 801090c:	e000e400 	.word	0xe000e400
 8010910:	20000c58 	.word	0x20000c58
 8010914:	20000c5c 	.word	0x20000c5c
 8010918:	e000ed20 	.word	0xe000ed20
 801091c:	2000011c 	.word	0x2000011c
 8010920:	e000ef34 	.word	0xe000ef34

08010924 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8010924:	b480      	push	{r7}
 8010926:	b083      	sub	sp, #12
 8010928:	af00      	add	r7, sp, #0
	__asm volatile
 801092a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801092e:	f383 8811 	msr	BASEPRI, r3
 8010932:	f3bf 8f6f 	isb	sy
 8010936:	f3bf 8f4f 	dsb	sy
 801093a:	607b      	str	r3, [r7, #4]
}
 801093c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801093e:	4b0f      	ldr	r3, [pc, #60]	; (801097c <vPortEnterCritical+0x58>)
 8010940:	681b      	ldr	r3, [r3, #0]
 8010942:	3301      	adds	r3, #1
 8010944:	4a0d      	ldr	r2, [pc, #52]	; (801097c <vPortEnterCritical+0x58>)
 8010946:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8010948:	4b0c      	ldr	r3, [pc, #48]	; (801097c <vPortEnterCritical+0x58>)
 801094a:	681b      	ldr	r3, [r3, #0]
 801094c:	2b01      	cmp	r3, #1
 801094e:	d10f      	bne.n	8010970 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8010950:	4b0b      	ldr	r3, [pc, #44]	; (8010980 <vPortEnterCritical+0x5c>)
 8010952:	681b      	ldr	r3, [r3, #0]
 8010954:	b2db      	uxtb	r3, r3
 8010956:	2b00      	cmp	r3, #0
 8010958:	d00a      	beq.n	8010970 <vPortEnterCritical+0x4c>
	__asm volatile
 801095a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801095e:	f383 8811 	msr	BASEPRI, r3
 8010962:	f3bf 8f6f 	isb	sy
 8010966:	f3bf 8f4f 	dsb	sy
 801096a:	603b      	str	r3, [r7, #0]
}
 801096c:	bf00      	nop
 801096e:	e7fe      	b.n	801096e <vPortEnterCritical+0x4a>
	}
}
 8010970:	bf00      	nop
 8010972:	370c      	adds	r7, #12
 8010974:	46bd      	mov	sp, r7
 8010976:	f85d 7b04 	ldr.w	r7, [sp], #4
 801097a:	4770      	bx	lr
 801097c:	2000011c 	.word	0x2000011c
 8010980:	e000ed04 	.word	0xe000ed04

08010984 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8010984:	b480      	push	{r7}
 8010986:	b083      	sub	sp, #12
 8010988:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801098a:	4b12      	ldr	r3, [pc, #72]	; (80109d4 <vPortExitCritical+0x50>)
 801098c:	681b      	ldr	r3, [r3, #0]
 801098e:	2b00      	cmp	r3, #0
 8010990:	d10a      	bne.n	80109a8 <vPortExitCritical+0x24>
	__asm volatile
 8010992:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010996:	f383 8811 	msr	BASEPRI, r3
 801099a:	f3bf 8f6f 	isb	sy
 801099e:	f3bf 8f4f 	dsb	sy
 80109a2:	607b      	str	r3, [r7, #4]
}
 80109a4:	bf00      	nop
 80109a6:	e7fe      	b.n	80109a6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80109a8:	4b0a      	ldr	r3, [pc, #40]	; (80109d4 <vPortExitCritical+0x50>)
 80109aa:	681b      	ldr	r3, [r3, #0]
 80109ac:	3b01      	subs	r3, #1
 80109ae:	4a09      	ldr	r2, [pc, #36]	; (80109d4 <vPortExitCritical+0x50>)
 80109b0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80109b2:	4b08      	ldr	r3, [pc, #32]	; (80109d4 <vPortExitCritical+0x50>)
 80109b4:	681b      	ldr	r3, [r3, #0]
 80109b6:	2b00      	cmp	r3, #0
 80109b8:	d105      	bne.n	80109c6 <vPortExitCritical+0x42>
 80109ba:	2300      	movs	r3, #0
 80109bc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80109be:	683b      	ldr	r3, [r7, #0]
 80109c0:	f383 8811 	msr	BASEPRI, r3
}
 80109c4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80109c6:	bf00      	nop
 80109c8:	370c      	adds	r7, #12
 80109ca:	46bd      	mov	sp, r7
 80109cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109d0:	4770      	bx	lr
 80109d2:	bf00      	nop
 80109d4:	2000011c 	.word	0x2000011c
	...

080109e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80109e0:	f3ef 8009 	mrs	r0, PSP
 80109e4:	f3bf 8f6f 	isb	sy
 80109e8:	4b15      	ldr	r3, [pc, #84]	; (8010a40 <pxCurrentTCBConst>)
 80109ea:	681a      	ldr	r2, [r3, #0]
 80109ec:	f01e 0f10 	tst.w	lr, #16
 80109f0:	bf08      	it	eq
 80109f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80109f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80109fa:	6010      	str	r0, [r2, #0]
 80109fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8010a00:	f04f 0050 	mov.w	r0, #80	; 0x50
 8010a04:	f380 8811 	msr	BASEPRI, r0
 8010a08:	f3bf 8f4f 	dsb	sy
 8010a0c:	f3bf 8f6f 	isb	sy
 8010a10:	f7ff fa10 	bl	800fe34 <vTaskSwitchContext>
 8010a14:	f04f 0000 	mov.w	r0, #0
 8010a18:	f380 8811 	msr	BASEPRI, r0
 8010a1c:	bc09      	pop	{r0, r3}
 8010a1e:	6819      	ldr	r1, [r3, #0]
 8010a20:	6808      	ldr	r0, [r1, #0]
 8010a22:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010a26:	f01e 0f10 	tst.w	lr, #16
 8010a2a:	bf08      	it	eq
 8010a2c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8010a30:	f380 8809 	msr	PSP, r0
 8010a34:	f3bf 8f6f 	isb	sy
 8010a38:	4770      	bx	lr
 8010a3a:	bf00      	nop
 8010a3c:	f3af 8000 	nop.w

08010a40 <pxCurrentTCBConst>:
 8010a40:	20000938 	.word	0x20000938
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8010a44:	bf00      	nop
 8010a46:	bf00      	nop

08010a48 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8010a48:	b580      	push	{r7, lr}
 8010a4a:	b082      	sub	sp, #8
 8010a4c:	af00      	add	r7, sp, #0
	__asm volatile
 8010a4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a52:	f383 8811 	msr	BASEPRI, r3
 8010a56:	f3bf 8f6f 	isb	sy
 8010a5a:	f3bf 8f4f 	dsb	sy
 8010a5e:	607b      	str	r3, [r7, #4]
}
 8010a60:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8010a62:	f7ff f92f 	bl	800fcc4 <xTaskIncrementTick>
 8010a66:	4603      	mov	r3, r0
 8010a68:	2b00      	cmp	r3, #0
 8010a6a:	d003      	beq.n	8010a74 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8010a6c:	4b06      	ldr	r3, [pc, #24]	; (8010a88 <SysTick_Handler+0x40>)
 8010a6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010a72:	601a      	str	r2, [r3, #0]
 8010a74:	2300      	movs	r3, #0
 8010a76:	603b      	str	r3, [r7, #0]
	__asm volatile
 8010a78:	683b      	ldr	r3, [r7, #0]
 8010a7a:	f383 8811 	msr	BASEPRI, r3
}
 8010a7e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8010a80:	bf00      	nop
 8010a82:	3708      	adds	r7, #8
 8010a84:	46bd      	mov	sp, r7
 8010a86:	bd80      	pop	{r7, pc}
 8010a88:	e000ed04 	.word	0xe000ed04

08010a8c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8010a8c:	b480      	push	{r7}
 8010a8e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8010a90:	4b0b      	ldr	r3, [pc, #44]	; (8010ac0 <vPortSetupTimerInterrupt+0x34>)
 8010a92:	2200      	movs	r2, #0
 8010a94:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8010a96:	4b0b      	ldr	r3, [pc, #44]	; (8010ac4 <vPortSetupTimerInterrupt+0x38>)
 8010a98:	2200      	movs	r2, #0
 8010a9a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8010a9c:	4b0a      	ldr	r3, [pc, #40]	; (8010ac8 <vPortSetupTimerInterrupt+0x3c>)
 8010a9e:	681b      	ldr	r3, [r3, #0]
 8010aa0:	4a0a      	ldr	r2, [pc, #40]	; (8010acc <vPortSetupTimerInterrupt+0x40>)
 8010aa2:	fba2 2303 	umull	r2, r3, r2, r3
 8010aa6:	099b      	lsrs	r3, r3, #6
 8010aa8:	4a09      	ldr	r2, [pc, #36]	; (8010ad0 <vPortSetupTimerInterrupt+0x44>)
 8010aaa:	3b01      	subs	r3, #1
 8010aac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8010aae:	4b04      	ldr	r3, [pc, #16]	; (8010ac0 <vPortSetupTimerInterrupt+0x34>)
 8010ab0:	2207      	movs	r2, #7
 8010ab2:	601a      	str	r2, [r3, #0]
}
 8010ab4:	bf00      	nop
 8010ab6:	46bd      	mov	sp, r7
 8010ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010abc:	4770      	bx	lr
 8010abe:	bf00      	nop
 8010ac0:	e000e010 	.word	0xe000e010
 8010ac4:	e000e018 	.word	0xe000e018
 8010ac8:	20000000 	.word	0x20000000
 8010acc:	10624dd3 	.word	0x10624dd3
 8010ad0:	e000e014 	.word	0xe000e014

08010ad4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8010ad4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8010ae4 <vPortEnableVFP+0x10>
 8010ad8:	6801      	ldr	r1, [r0, #0]
 8010ada:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8010ade:	6001      	str	r1, [r0, #0]
 8010ae0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8010ae2:	bf00      	nop
 8010ae4:	e000ed88 	.word	0xe000ed88

08010ae8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8010ae8:	b480      	push	{r7}
 8010aea:	b085      	sub	sp, #20
 8010aec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8010aee:	f3ef 8305 	mrs	r3, IPSR
 8010af2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8010af4:	68fb      	ldr	r3, [r7, #12]
 8010af6:	2b0f      	cmp	r3, #15
 8010af8:	d914      	bls.n	8010b24 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8010afa:	4a17      	ldr	r2, [pc, #92]	; (8010b58 <vPortValidateInterruptPriority+0x70>)
 8010afc:	68fb      	ldr	r3, [r7, #12]
 8010afe:	4413      	add	r3, r2
 8010b00:	781b      	ldrb	r3, [r3, #0]
 8010b02:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8010b04:	4b15      	ldr	r3, [pc, #84]	; (8010b5c <vPortValidateInterruptPriority+0x74>)
 8010b06:	781b      	ldrb	r3, [r3, #0]
 8010b08:	7afa      	ldrb	r2, [r7, #11]
 8010b0a:	429a      	cmp	r2, r3
 8010b0c:	d20a      	bcs.n	8010b24 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8010b0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b12:	f383 8811 	msr	BASEPRI, r3
 8010b16:	f3bf 8f6f 	isb	sy
 8010b1a:	f3bf 8f4f 	dsb	sy
 8010b1e:	607b      	str	r3, [r7, #4]
}
 8010b20:	bf00      	nop
 8010b22:	e7fe      	b.n	8010b22 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8010b24:	4b0e      	ldr	r3, [pc, #56]	; (8010b60 <vPortValidateInterruptPriority+0x78>)
 8010b26:	681b      	ldr	r3, [r3, #0]
 8010b28:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8010b2c:	4b0d      	ldr	r3, [pc, #52]	; (8010b64 <vPortValidateInterruptPriority+0x7c>)
 8010b2e:	681b      	ldr	r3, [r3, #0]
 8010b30:	429a      	cmp	r2, r3
 8010b32:	d90a      	bls.n	8010b4a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8010b34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b38:	f383 8811 	msr	BASEPRI, r3
 8010b3c:	f3bf 8f6f 	isb	sy
 8010b40:	f3bf 8f4f 	dsb	sy
 8010b44:	603b      	str	r3, [r7, #0]
}
 8010b46:	bf00      	nop
 8010b48:	e7fe      	b.n	8010b48 <vPortValidateInterruptPriority+0x60>
	}
 8010b4a:	bf00      	nop
 8010b4c:	3714      	adds	r7, #20
 8010b4e:	46bd      	mov	sp, r7
 8010b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b54:	4770      	bx	lr
 8010b56:	bf00      	nop
 8010b58:	e000e3f0 	.word	0xe000e3f0
 8010b5c:	20000c58 	.word	0x20000c58
 8010b60:	e000ed0c 	.word	0xe000ed0c
 8010b64:	20000c5c 	.word	0x20000c5c

08010b68 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8010b68:	b580      	push	{r7, lr}
 8010b6a:	b08a      	sub	sp, #40	; 0x28
 8010b6c:	af00      	add	r7, sp, #0
 8010b6e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8010b70:	2300      	movs	r3, #0
 8010b72:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8010b74:	f7fe fffc 	bl	800fb70 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8010b78:	4b5b      	ldr	r3, [pc, #364]	; (8010ce8 <pvPortMalloc+0x180>)
 8010b7a:	681b      	ldr	r3, [r3, #0]
 8010b7c:	2b00      	cmp	r3, #0
 8010b7e:	d101      	bne.n	8010b84 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8010b80:	f000 f920 	bl	8010dc4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8010b84:	4b59      	ldr	r3, [pc, #356]	; (8010cec <pvPortMalloc+0x184>)
 8010b86:	681a      	ldr	r2, [r3, #0]
 8010b88:	687b      	ldr	r3, [r7, #4]
 8010b8a:	4013      	ands	r3, r2
 8010b8c:	2b00      	cmp	r3, #0
 8010b8e:	f040 8093 	bne.w	8010cb8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8010b92:	687b      	ldr	r3, [r7, #4]
 8010b94:	2b00      	cmp	r3, #0
 8010b96:	d01d      	beq.n	8010bd4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8010b98:	2208      	movs	r2, #8
 8010b9a:	687b      	ldr	r3, [r7, #4]
 8010b9c:	4413      	add	r3, r2
 8010b9e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8010ba0:	687b      	ldr	r3, [r7, #4]
 8010ba2:	f003 0307 	and.w	r3, r3, #7
 8010ba6:	2b00      	cmp	r3, #0
 8010ba8:	d014      	beq.n	8010bd4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8010baa:	687b      	ldr	r3, [r7, #4]
 8010bac:	f023 0307 	bic.w	r3, r3, #7
 8010bb0:	3308      	adds	r3, #8
 8010bb2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010bb4:	687b      	ldr	r3, [r7, #4]
 8010bb6:	f003 0307 	and.w	r3, r3, #7
 8010bba:	2b00      	cmp	r3, #0
 8010bbc:	d00a      	beq.n	8010bd4 <pvPortMalloc+0x6c>
	__asm volatile
 8010bbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010bc2:	f383 8811 	msr	BASEPRI, r3
 8010bc6:	f3bf 8f6f 	isb	sy
 8010bca:	f3bf 8f4f 	dsb	sy
 8010bce:	617b      	str	r3, [r7, #20]
}
 8010bd0:	bf00      	nop
 8010bd2:	e7fe      	b.n	8010bd2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8010bd4:	687b      	ldr	r3, [r7, #4]
 8010bd6:	2b00      	cmp	r3, #0
 8010bd8:	d06e      	beq.n	8010cb8 <pvPortMalloc+0x150>
 8010bda:	4b45      	ldr	r3, [pc, #276]	; (8010cf0 <pvPortMalloc+0x188>)
 8010bdc:	681b      	ldr	r3, [r3, #0]
 8010bde:	687a      	ldr	r2, [r7, #4]
 8010be0:	429a      	cmp	r2, r3
 8010be2:	d869      	bhi.n	8010cb8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8010be4:	4b43      	ldr	r3, [pc, #268]	; (8010cf4 <pvPortMalloc+0x18c>)
 8010be6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8010be8:	4b42      	ldr	r3, [pc, #264]	; (8010cf4 <pvPortMalloc+0x18c>)
 8010bea:	681b      	ldr	r3, [r3, #0]
 8010bec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8010bee:	e004      	b.n	8010bfa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8010bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010bf2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8010bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010bf6:	681b      	ldr	r3, [r3, #0]
 8010bf8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8010bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010bfc:	685b      	ldr	r3, [r3, #4]
 8010bfe:	687a      	ldr	r2, [r7, #4]
 8010c00:	429a      	cmp	r2, r3
 8010c02:	d903      	bls.n	8010c0c <pvPortMalloc+0xa4>
 8010c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c06:	681b      	ldr	r3, [r3, #0]
 8010c08:	2b00      	cmp	r3, #0
 8010c0a:	d1f1      	bne.n	8010bf0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8010c0c:	4b36      	ldr	r3, [pc, #216]	; (8010ce8 <pvPortMalloc+0x180>)
 8010c0e:	681b      	ldr	r3, [r3, #0]
 8010c10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010c12:	429a      	cmp	r2, r3
 8010c14:	d050      	beq.n	8010cb8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8010c16:	6a3b      	ldr	r3, [r7, #32]
 8010c18:	681b      	ldr	r3, [r3, #0]
 8010c1a:	2208      	movs	r2, #8
 8010c1c:	4413      	add	r3, r2
 8010c1e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8010c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c22:	681a      	ldr	r2, [r3, #0]
 8010c24:	6a3b      	ldr	r3, [r7, #32]
 8010c26:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8010c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c2a:	685a      	ldr	r2, [r3, #4]
 8010c2c:	687b      	ldr	r3, [r7, #4]
 8010c2e:	1ad2      	subs	r2, r2, r3
 8010c30:	2308      	movs	r3, #8
 8010c32:	005b      	lsls	r3, r3, #1
 8010c34:	429a      	cmp	r2, r3
 8010c36:	d91f      	bls.n	8010c78 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8010c38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010c3a:	687b      	ldr	r3, [r7, #4]
 8010c3c:	4413      	add	r3, r2
 8010c3e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010c40:	69bb      	ldr	r3, [r7, #24]
 8010c42:	f003 0307 	and.w	r3, r3, #7
 8010c46:	2b00      	cmp	r3, #0
 8010c48:	d00a      	beq.n	8010c60 <pvPortMalloc+0xf8>
	__asm volatile
 8010c4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c4e:	f383 8811 	msr	BASEPRI, r3
 8010c52:	f3bf 8f6f 	isb	sy
 8010c56:	f3bf 8f4f 	dsb	sy
 8010c5a:	613b      	str	r3, [r7, #16]
}
 8010c5c:	bf00      	nop
 8010c5e:	e7fe      	b.n	8010c5e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8010c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c62:	685a      	ldr	r2, [r3, #4]
 8010c64:	687b      	ldr	r3, [r7, #4]
 8010c66:	1ad2      	subs	r2, r2, r3
 8010c68:	69bb      	ldr	r3, [r7, #24]
 8010c6a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8010c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c6e:	687a      	ldr	r2, [r7, #4]
 8010c70:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8010c72:	69b8      	ldr	r0, [r7, #24]
 8010c74:	f000 f908 	bl	8010e88 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8010c78:	4b1d      	ldr	r3, [pc, #116]	; (8010cf0 <pvPortMalloc+0x188>)
 8010c7a:	681a      	ldr	r2, [r3, #0]
 8010c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c7e:	685b      	ldr	r3, [r3, #4]
 8010c80:	1ad3      	subs	r3, r2, r3
 8010c82:	4a1b      	ldr	r2, [pc, #108]	; (8010cf0 <pvPortMalloc+0x188>)
 8010c84:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8010c86:	4b1a      	ldr	r3, [pc, #104]	; (8010cf0 <pvPortMalloc+0x188>)
 8010c88:	681a      	ldr	r2, [r3, #0]
 8010c8a:	4b1b      	ldr	r3, [pc, #108]	; (8010cf8 <pvPortMalloc+0x190>)
 8010c8c:	681b      	ldr	r3, [r3, #0]
 8010c8e:	429a      	cmp	r2, r3
 8010c90:	d203      	bcs.n	8010c9a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8010c92:	4b17      	ldr	r3, [pc, #92]	; (8010cf0 <pvPortMalloc+0x188>)
 8010c94:	681b      	ldr	r3, [r3, #0]
 8010c96:	4a18      	ldr	r2, [pc, #96]	; (8010cf8 <pvPortMalloc+0x190>)
 8010c98:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8010c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c9c:	685a      	ldr	r2, [r3, #4]
 8010c9e:	4b13      	ldr	r3, [pc, #76]	; (8010cec <pvPortMalloc+0x184>)
 8010ca0:	681b      	ldr	r3, [r3, #0]
 8010ca2:	431a      	orrs	r2, r3
 8010ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ca6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8010ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010caa:	2200      	movs	r2, #0
 8010cac:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8010cae:	4b13      	ldr	r3, [pc, #76]	; (8010cfc <pvPortMalloc+0x194>)
 8010cb0:	681b      	ldr	r3, [r3, #0]
 8010cb2:	3301      	adds	r3, #1
 8010cb4:	4a11      	ldr	r2, [pc, #68]	; (8010cfc <pvPortMalloc+0x194>)
 8010cb6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8010cb8:	f7fe ff68 	bl	800fb8c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8010cbc:	69fb      	ldr	r3, [r7, #28]
 8010cbe:	f003 0307 	and.w	r3, r3, #7
 8010cc2:	2b00      	cmp	r3, #0
 8010cc4:	d00a      	beq.n	8010cdc <pvPortMalloc+0x174>
	__asm volatile
 8010cc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010cca:	f383 8811 	msr	BASEPRI, r3
 8010cce:	f3bf 8f6f 	isb	sy
 8010cd2:	f3bf 8f4f 	dsb	sy
 8010cd6:	60fb      	str	r3, [r7, #12]
}
 8010cd8:	bf00      	nop
 8010cda:	e7fe      	b.n	8010cda <pvPortMalloc+0x172>
	return pvReturn;
 8010cdc:	69fb      	ldr	r3, [r7, #28]
}
 8010cde:	4618      	mov	r0, r3
 8010ce0:	3728      	adds	r7, #40	; 0x28
 8010ce2:	46bd      	mov	sp, r7
 8010ce4:	bd80      	pop	{r7, pc}
 8010ce6:	bf00      	nop
 8010ce8:	20004c68 	.word	0x20004c68
 8010cec:	20004c7c 	.word	0x20004c7c
 8010cf0:	20004c6c 	.word	0x20004c6c
 8010cf4:	20004c60 	.word	0x20004c60
 8010cf8:	20004c70 	.word	0x20004c70
 8010cfc:	20004c74 	.word	0x20004c74

08010d00 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8010d00:	b580      	push	{r7, lr}
 8010d02:	b086      	sub	sp, #24
 8010d04:	af00      	add	r7, sp, #0
 8010d06:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8010d08:	687b      	ldr	r3, [r7, #4]
 8010d0a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8010d0c:	687b      	ldr	r3, [r7, #4]
 8010d0e:	2b00      	cmp	r3, #0
 8010d10:	d04d      	beq.n	8010dae <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8010d12:	2308      	movs	r3, #8
 8010d14:	425b      	negs	r3, r3
 8010d16:	697a      	ldr	r2, [r7, #20]
 8010d18:	4413      	add	r3, r2
 8010d1a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8010d1c:	697b      	ldr	r3, [r7, #20]
 8010d1e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8010d20:	693b      	ldr	r3, [r7, #16]
 8010d22:	685a      	ldr	r2, [r3, #4]
 8010d24:	4b24      	ldr	r3, [pc, #144]	; (8010db8 <vPortFree+0xb8>)
 8010d26:	681b      	ldr	r3, [r3, #0]
 8010d28:	4013      	ands	r3, r2
 8010d2a:	2b00      	cmp	r3, #0
 8010d2c:	d10a      	bne.n	8010d44 <vPortFree+0x44>
	__asm volatile
 8010d2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d32:	f383 8811 	msr	BASEPRI, r3
 8010d36:	f3bf 8f6f 	isb	sy
 8010d3a:	f3bf 8f4f 	dsb	sy
 8010d3e:	60fb      	str	r3, [r7, #12]
}
 8010d40:	bf00      	nop
 8010d42:	e7fe      	b.n	8010d42 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8010d44:	693b      	ldr	r3, [r7, #16]
 8010d46:	681b      	ldr	r3, [r3, #0]
 8010d48:	2b00      	cmp	r3, #0
 8010d4a:	d00a      	beq.n	8010d62 <vPortFree+0x62>
	__asm volatile
 8010d4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d50:	f383 8811 	msr	BASEPRI, r3
 8010d54:	f3bf 8f6f 	isb	sy
 8010d58:	f3bf 8f4f 	dsb	sy
 8010d5c:	60bb      	str	r3, [r7, #8]
}
 8010d5e:	bf00      	nop
 8010d60:	e7fe      	b.n	8010d60 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8010d62:	693b      	ldr	r3, [r7, #16]
 8010d64:	685a      	ldr	r2, [r3, #4]
 8010d66:	4b14      	ldr	r3, [pc, #80]	; (8010db8 <vPortFree+0xb8>)
 8010d68:	681b      	ldr	r3, [r3, #0]
 8010d6a:	4013      	ands	r3, r2
 8010d6c:	2b00      	cmp	r3, #0
 8010d6e:	d01e      	beq.n	8010dae <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8010d70:	693b      	ldr	r3, [r7, #16]
 8010d72:	681b      	ldr	r3, [r3, #0]
 8010d74:	2b00      	cmp	r3, #0
 8010d76:	d11a      	bne.n	8010dae <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8010d78:	693b      	ldr	r3, [r7, #16]
 8010d7a:	685a      	ldr	r2, [r3, #4]
 8010d7c:	4b0e      	ldr	r3, [pc, #56]	; (8010db8 <vPortFree+0xb8>)
 8010d7e:	681b      	ldr	r3, [r3, #0]
 8010d80:	43db      	mvns	r3, r3
 8010d82:	401a      	ands	r2, r3
 8010d84:	693b      	ldr	r3, [r7, #16]
 8010d86:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8010d88:	f7fe fef2 	bl	800fb70 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8010d8c:	693b      	ldr	r3, [r7, #16]
 8010d8e:	685a      	ldr	r2, [r3, #4]
 8010d90:	4b0a      	ldr	r3, [pc, #40]	; (8010dbc <vPortFree+0xbc>)
 8010d92:	681b      	ldr	r3, [r3, #0]
 8010d94:	4413      	add	r3, r2
 8010d96:	4a09      	ldr	r2, [pc, #36]	; (8010dbc <vPortFree+0xbc>)
 8010d98:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8010d9a:	6938      	ldr	r0, [r7, #16]
 8010d9c:	f000 f874 	bl	8010e88 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8010da0:	4b07      	ldr	r3, [pc, #28]	; (8010dc0 <vPortFree+0xc0>)
 8010da2:	681b      	ldr	r3, [r3, #0]
 8010da4:	3301      	adds	r3, #1
 8010da6:	4a06      	ldr	r2, [pc, #24]	; (8010dc0 <vPortFree+0xc0>)
 8010da8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8010daa:	f7fe feef 	bl	800fb8c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8010dae:	bf00      	nop
 8010db0:	3718      	adds	r7, #24
 8010db2:	46bd      	mov	sp, r7
 8010db4:	bd80      	pop	{r7, pc}
 8010db6:	bf00      	nop
 8010db8:	20004c7c 	.word	0x20004c7c
 8010dbc:	20004c6c 	.word	0x20004c6c
 8010dc0:	20004c78 	.word	0x20004c78

08010dc4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8010dc4:	b480      	push	{r7}
 8010dc6:	b085      	sub	sp, #20
 8010dc8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8010dca:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8010dce:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8010dd0:	4b27      	ldr	r3, [pc, #156]	; (8010e70 <prvHeapInit+0xac>)
 8010dd2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8010dd4:	68fb      	ldr	r3, [r7, #12]
 8010dd6:	f003 0307 	and.w	r3, r3, #7
 8010dda:	2b00      	cmp	r3, #0
 8010ddc:	d00c      	beq.n	8010df8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8010dde:	68fb      	ldr	r3, [r7, #12]
 8010de0:	3307      	adds	r3, #7
 8010de2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010de4:	68fb      	ldr	r3, [r7, #12]
 8010de6:	f023 0307 	bic.w	r3, r3, #7
 8010dea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8010dec:	68ba      	ldr	r2, [r7, #8]
 8010dee:	68fb      	ldr	r3, [r7, #12]
 8010df0:	1ad3      	subs	r3, r2, r3
 8010df2:	4a1f      	ldr	r2, [pc, #124]	; (8010e70 <prvHeapInit+0xac>)
 8010df4:	4413      	add	r3, r2
 8010df6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8010df8:	68fb      	ldr	r3, [r7, #12]
 8010dfa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8010dfc:	4a1d      	ldr	r2, [pc, #116]	; (8010e74 <prvHeapInit+0xb0>)
 8010dfe:	687b      	ldr	r3, [r7, #4]
 8010e00:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8010e02:	4b1c      	ldr	r3, [pc, #112]	; (8010e74 <prvHeapInit+0xb0>)
 8010e04:	2200      	movs	r2, #0
 8010e06:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8010e08:	687b      	ldr	r3, [r7, #4]
 8010e0a:	68ba      	ldr	r2, [r7, #8]
 8010e0c:	4413      	add	r3, r2
 8010e0e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8010e10:	2208      	movs	r2, #8
 8010e12:	68fb      	ldr	r3, [r7, #12]
 8010e14:	1a9b      	subs	r3, r3, r2
 8010e16:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010e18:	68fb      	ldr	r3, [r7, #12]
 8010e1a:	f023 0307 	bic.w	r3, r3, #7
 8010e1e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8010e20:	68fb      	ldr	r3, [r7, #12]
 8010e22:	4a15      	ldr	r2, [pc, #84]	; (8010e78 <prvHeapInit+0xb4>)
 8010e24:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8010e26:	4b14      	ldr	r3, [pc, #80]	; (8010e78 <prvHeapInit+0xb4>)
 8010e28:	681b      	ldr	r3, [r3, #0]
 8010e2a:	2200      	movs	r2, #0
 8010e2c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8010e2e:	4b12      	ldr	r3, [pc, #72]	; (8010e78 <prvHeapInit+0xb4>)
 8010e30:	681b      	ldr	r3, [r3, #0]
 8010e32:	2200      	movs	r2, #0
 8010e34:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8010e36:	687b      	ldr	r3, [r7, #4]
 8010e38:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8010e3a:	683b      	ldr	r3, [r7, #0]
 8010e3c:	68fa      	ldr	r2, [r7, #12]
 8010e3e:	1ad2      	subs	r2, r2, r3
 8010e40:	683b      	ldr	r3, [r7, #0]
 8010e42:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8010e44:	4b0c      	ldr	r3, [pc, #48]	; (8010e78 <prvHeapInit+0xb4>)
 8010e46:	681a      	ldr	r2, [r3, #0]
 8010e48:	683b      	ldr	r3, [r7, #0]
 8010e4a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8010e4c:	683b      	ldr	r3, [r7, #0]
 8010e4e:	685b      	ldr	r3, [r3, #4]
 8010e50:	4a0a      	ldr	r2, [pc, #40]	; (8010e7c <prvHeapInit+0xb8>)
 8010e52:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8010e54:	683b      	ldr	r3, [r7, #0]
 8010e56:	685b      	ldr	r3, [r3, #4]
 8010e58:	4a09      	ldr	r2, [pc, #36]	; (8010e80 <prvHeapInit+0xbc>)
 8010e5a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8010e5c:	4b09      	ldr	r3, [pc, #36]	; (8010e84 <prvHeapInit+0xc0>)
 8010e5e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8010e62:	601a      	str	r2, [r3, #0]
}
 8010e64:	bf00      	nop
 8010e66:	3714      	adds	r7, #20
 8010e68:	46bd      	mov	sp, r7
 8010e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e6e:	4770      	bx	lr
 8010e70:	20000c60 	.word	0x20000c60
 8010e74:	20004c60 	.word	0x20004c60
 8010e78:	20004c68 	.word	0x20004c68
 8010e7c:	20004c70 	.word	0x20004c70
 8010e80:	20004c6c 	.word	0x20004c6c
 8010e84:	20004c7c 	.word	0x20004c7c

08010e88 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8010e88:	b480      	push	{r7}
 8010e8a:	b085      	sub	sp, #20
 8010e8c:	af00      	add	r7, sp, #0
 8010e8e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8010e90:	4b28      	ldr	r3, [pc, #160]	; (8010f34 <prvInsertBlockIntoFreeList+0xac>)
 8010e92:	60fb      	str	r3, [r7, #12]
 8010e94:	e002      	b.n	8010e9c <prvInsertBlockIntoFreeList+0x14>
 8010e96:	68fb      	ldr	r3, [r7, #12]
 8010e98:	681b      	ldr	r3, [r3, #0]
 8010e9a:	60fb      	str	r3, [r7, #12]
 8010e9c:	68fb      	ldr	r3, [r7, #12]
 8010e9e:	681b      	ldr	r3, [r3, #0]
 8010ea0:	687a      	ldr	r2, [r7, #4]
 8010ea2:	429a      	cmp	r2, r3
 8010ea4:	d8f7      	bhi.n	8010e96 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8010ea6:	68fb      	ldr	r3, [r7, #12]
 8010ea8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8010eaa:	68fb      	ldr	r3, [r7, #12]
 8010eac:	685b      	ldr	r3, [r3, #4]
 8010eae:	68ba      	ldr	r2, [r7, #8]
 8010eb0:	4413      	add	r3, r2
 8010eb2:	687a      	ldr	r2, [r7, #4]
 8010eb4:	429a      	cmp	r2, r3
 8010eb6:	d108      	bne.n	8010eca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8010eb8:	68fb      	ldr	r3, [r7, #12]
 8010eba:	685a      	ldr	r2, [r3, #4]
 8010ebc:	687b      	ldr	r3, [r7, #4]
 8010ebe:	685b      	ldr	r3, [r3, #4]
 8010ec0:	441a      	add	r2, r3
 8010ec2:	68fb      	ldr	r3, [r7, #12]
 8010ec4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8010ec6:	68fb      	ldr	r3, [r7, #12]
 8010ec8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8010eca:	687b      	ldr	r3, [r7, #4]
 8010ecc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8010ece:	687b      	ldr	r3, [r7, #4]
 8010ed0:	685b      	ldr	r3, [r3, #4]
 8010ed2:	68ba      	ldr	r2, [r7, #8]
 8010ed4:	441a      	add	r2, r3
 8010ed6:	68fb      	ldr	r3, [r7, #12]
 8010ed8:	681b      	ldr	r3, [r3, #0]
 8010eda:	429a      	cmp	r2, r3
 8010edc:	d118      	bne.n	8010f10 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8010ede:	68fb      	ldr	r3, [r7, #12]
 8010ee0:	681a      	ldr	r2, [r3, #0]
 8010ee2:	4b15      	ldr	r3, [pc, #84]	; (8010f38 <prvInsertBlockIntoFreeList+0xb0>)
 8010ee4:	681b      	ldr	r3, [r3, #0]
 8010ee6:	429a      	cmp	r2, r3
 8010ee8:	d00d      	beq.n	8010f06 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8010eea:	687b      	ldr	r3, [r7, #4]
 8010eec:	685a      	ldr	r2, [r3, #4]
 8010eee:	68fb      	ldr	r3, [r7, #12]
 8010ef0:	681b      	ldr	r3, [r3, #0]
 8010ef2:	685b      	ldr	r3, [r3, #4]
 8010ef4:	441a      	add	r2, r3
 8010ef6:	687b      	ldr	r3, [r7, #4]
 8010ef8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8010efa:	68fb      	ldr	r3, [r7, #12]
 8010efc:	681b      	ldr	r3, [r3, #0]
 8010efe:	681a      	ldr	r2, [r3, #0]
 8010f00:	687b      	ldr	r3, [r7, #4]
 8010f02:	601a      	str	r2, [r3, #0]
 8010f04:	e008      	b.n	8010f18 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8010f06:	4b0c      	ldr	r3, [pc, #48]	; (8010f38 <prvInsertBlockIntoFreeList+0xb0>)
 8010f08:	681a      	ldr	r2, [r3, #0]
 8010f0a:	687b      	ldr	r3, [r7, #4]
 8010f0c:	601a      	str	r2, [r3, #0]
 8010f0e:	e003      	b.n	8010f18 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8010f10:	68fb      	ldr	r3, [r7, #12]
 8010f12:	681a      	ldr	r2, [r3, #0]
 8010f14:	687b      	ldr	r3, [r7, #4]
 8010f16:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8010f18:	68fa      	ldr	r2, [r7, #12]
 8010f1a:	687b      	ldr	r3, [r7, #4]
 8010f1c:	429a      	cmp	r2, r3
 8010f1e:	d002      	beq.n	8010f26 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8010f20:	68fb      	ldr	r3, [r7, #12]
 8010f22:	687a      	ldr	r2, [r7, #4]
 8010f24:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010f26:	bf00      	nop
 8010f28:	3714      	adds	r7, #20
 8010f2a:	46bd      	mov	sp, r7
 8010f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f30:	4770      	bx	lr
 8010f32:	bf00      	nop
 8010f34:	20004c60 	.word	0x20004c60
 8010f38:	20004c68 	.word	0x20004c68

08010f3c <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 8010f3c:	b580      	push	{r7, lr}
 8010f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 8010f40:	2200      	movs	r2, #0
 8010f42:	4912      	ldr	r1, [pc, #72]	; (8010f8c <MX_USB_Device_Init+0x50>)
 8010f44:	4812      	ldr	r0, [pc, #72]	; (8010f90 <MX_USB_Device_Init+0x54>)
 8010f46:	f7fc fc79 	bl	800d83c <USBD_Init>
 8010f4a:	4603      	mov	r3, r0
 8010f4c:	2b00      	cmp	r3, #0
 8010f4e:	d001      	beq.n	8010f54 <MX_USB_Device_Init+0x18>
    Error_Handler();
 8010f50:	f7f0 fede 	bl	8001d10 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 8010f54:	490f      	ldr	r1, [pc, #60]	; (8010f94 <MX_USB_Device_Init+0x58>)
 8010f56:	480e      	ldr	r0, [pc, #56]	; (8010f90 <MX_USB_Device_Init+0x54>)
 8010f58:	f7fc fca0 	bl	800d89c <USBD_RegisterClass>
 8010f5c:	4603      	mov	r3, r0
 8010f5e:	2b00      	cmp	r3, #0
 8010f60:	d001      	beq.n	8010f66 <MX_USB_Device_Init+0x2a>
    Error_Handler();
 8010f62:	f7f0 fed5 	bl	8001d10 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 8010f66:	490c      	ldr	r1, [pc, #48]	; (8010f98 <MX_USB_Device_Init+0x5c>)
 8010f68:	4809      	ldr	r0, [pc, #36]	; (8010f90 <MX_USB_Device_Init+0x54>)
 8010f6a:	f7fc fbf1 	bl	800d750 <USBD_CDC_RegisterInterface>
 8010f6e:	4603      	mov	r3, r0
 8010f70:	2b00      	cmp	r3, #0
 8010f72:	d001      	beq.n	8010f78 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 8010f74:	f7f0 fecc 	bl	8001d10 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 8010f78:	4805      	ldr	r0, [pc, #20]	; (8010f90 <MX_USB_Device_Init+0x54>)
 8010f7a:	f7fc fcb6 	bl	800d8ea <USBD_Start>
 8010f7e:	4603      	mov	r3, r0
 8010f80:	2b00      	cmp	r3, #0
 8010f82:	d001      	beq.n	8010f88 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 8010f84:	f7f0 fec4 	bl	8001d10 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 8010f88:	bf00      	nop
 8010f8a:	bd80      	pop	{r7, pc}
 8010f8c:	20000134 	.word	0x20000134
 8010f90:	20004c80 	.word	0x20004c80
 8010f94:	20000018 	.word	0x20000018
 8010f98:	20000120 	.word	0x20000120

08010f9c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8010f9c:	b580      	push	{r7, lr}
 8010f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8010fa0:	2200      	movs	r2, #0
 8010fa2:	4905      	ldr	r1, [pc, #20]	; (8010fb8 <CDC_Init_FS+0x1c>)
 8010fa4:	4805      	ldr	r0, [pc, #20]	; (8010fbc <CDC_Init_FS+0x20>)
 8010fa6:	f7fc fbe8 	bl	800d77a <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8010faa:	4905      	ldr	r1, [pc, #20]	; (8010fc0 <CDC_Init_FS+0x24>)
 8010fac:	4803      	ldr	r0, [pc, #12]	; (8010fbc <CDC_Init_FS+0x20>)
 8010fae:	f7fc fc02 	bl	800d7b6 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8010fb2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8010fb4:	4618      	mov	r0, r3
 8010fb6:	bd80      	pop	{r7, pc}
 8010fb8:	20005750 	.word	0x20005750
 8010fbc:	20004c80 	.word	0x20004c80
 8010fc0:	20004f50 	.word	0x20004f50

08010fc4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8010fc4:	b480      	push	{r7}
 8010fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8010fc8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8010fca:	4618      	mov	r0, r3
 8010fcc:	46bd      	mov	sp, r7
 8010fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fd2:	4770      	bx	lr

08010fd4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8010fd4:	b480      	push	{r7}
 8010fd6:	b083      	sub	sp, #12
 8010fd8:	af00      	add	r7, sp, #0
 8010fda:	4603      	mov	r3, r0
 8010fdc:	6039      	str	r1, [r7, #0]
 8010fde:	71fb      	strb	r3, [r7, #7]
 8010fe0:	4613      	mov	r3, r2
 8010fe2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8010fe4:	79fb      	ldrb	r3, [r7, #7]
 8010fe6:	2b23      	cmp	r3, #35	; 0x23
 8010fe8:	d84a      	bhi.n	8011080 <CDC_Control_FS+0xac>
 8010fea:	a201      	add	r2, pc, #4	; (adr r2, 8010ff0 <CDC_Control_FS+0x1c>)
 8010fec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010ff0:	08011081 	.word	0x08011081
 8010ff4:	08011081 	.word	0x08011081
 8010ff8:	08011081 	.word	0x08011081
 8010ffc:	08011081 	.word	0x08011081
 8011000:	08011081 	.word	0x08011081
 8011004:	08011081 	.word	0x08011081
 8011008:	08011081 	.word	0x08011081
 801100c:	08011081 	.word	0x08011081
 8011010:	08011081 	.word	0x08011081
 8011014:	08011081 	.word	0x08011081
 8011018:	08011081 	.word	0x08011081
 801101c:	08011081 	.word	0x08011081
 8011020:	08011081 	.word	0x08011081
 8011024:	08011081 	.word	0x08011081
 8011028:	08011081 	.word	0x08011081
 801102c:	08011081 	.word	0x08011081
 8011030:	08011081 	.word	0x08011081
 8011034:	08011081 	.word	0x08011081
 8011038:	08011081 	.word	0x08011081
 801103c:	08011081 	.word	0x08011081
 8011040:	08011081 	.word	0x08011081
 8011044:	08011081 	.word	0x08011081
 8011048:	08011081 	.word	0x08011081
 801104c:	08011081 	.word	0x08011081
 8011050:	08011081 	.word	0x08011081
 8011054:	08011081 	.word	0x08011081
 8011058:	08011081 	.word	0x08011081
 801105c:	08011081 	.word	0x08011081
 8011060:	08011081 	.word	0x08011081
 8011064:	08011081 	.word	0x08011081
 8011068:	08011081 	.word	0x08011081
 801106c:	08011081 	.word	0x08011081
 8011070:	08011081 	.word	0x08011081
 8011074:	08011081 	.word	0x08011081
 8011078:	08011081 	.word	0x08011081
 801107c:	08011081 	.word	0x08011081
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8011080:	bf00      	nop
  }

  return (USBD_OK);
 8011082:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8011084:	4618      	mov	r0, r3
 8011086:	370c      	adds	r7, #12
 8011088:	46bd      	mov	sp, r7
 801108a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801108e:	4770      	bx	lr

08011090 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8011090:	b580      	push	{r7, lr}
 8011092:	b082      	sub	sp, #8
 8011094:	af00      	add	r7, sp, #0
 8011096:	6078      	str	r0, [r7, #4]
 8011098:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 801109a:	6879      	ldr	r1, [r7, #4]
 801109c:	4805      	ldr	r0, [pc, #20]	; (80110b4 <CDC_Receive_FS+0x24>)
 801109e:	f7fc fb8a 	bl	800d7b6 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80110a2:	4804      	ldr	r0, [pc, #16]	; (80110b4 <CDC_Receive_FS+0x24>)
 80110a4:	f7fc fba0 	bl	800d7e8 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80110a8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80110aa:	4618      	mov	r0, r3
 80110ac:	3708      	adds	r7, #8
 80110ae:	46bd      	mov	sp, r7
 80110b0:	bd80      	pop	{r7, pc}
 80110b2:	bf00      	nop
 80110b4:	20004c80 	.word	0x20004c80

080110b8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80110b8:	b480      	push	{r7}
 80110ba:	b087      	sub	sp, #28
 80110bc:	af00      	add	r7, sp, #0
 80110be:	60f8      	str	r0, [r7, #12]
 80110c0:	60b9      	str	r1, [r7, #8]
 80110c2:	4613      	mov	r3, r2
 80110c4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80110c6:	2300      	movs	r3, #0
 80110c8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80110ca:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80110ce:	4618      	mov	r0, r3
 80110d0:	371c      	adds	r7, #28
 80110d2:	46bd      	mov	sp, r7
 80110d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110d8:	4770      	bx	lr
	...

080110dc <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80110dc:	b480      	push	{r7}
 80110de:	b083      	sub	sp, #12
 80110e0:	af00      	add	r7, sp, #0
 80110e2:	4603      	mov	r3, r0
 80110e4:	6039      	str	r1, [r7, #0]
 80110e6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 80110e8:	683b      	ldr	r3, [r7, #0]
 80110ea:	2212      	movs	r2, #18
 80110ec:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 80110ee:	4b03      	ldr	r3, [pc, #12]	; (80110fc <USBD_CDC_DeviceDescriptor+0x20>)
}
 80110f0:	4618      	mov	r0, r3
 80110f2:	370c      	adds	r7, #12
 80110f4:	46bd      	mov	sp, r7
 80110f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110fa:	4770      	bx	lr
 80110fc:	20000154 	.word	0x20000154

08011100 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011100:	b480      	push	{r7}
 8011102:	b083      	sub	sp, #12
 8011104:	af00      	add	r7, sp, #0
 8011106:	4603      	mov	r3, r0
 8011108:	6039      	str	r1, [r7, #0]
 801110a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 801110c:	683b      	ldr	r3, [r7, #0]
 801110e:	2204      	movs	r2, #4
 8011110:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8011112:	4b03      	ldr	r3, [pc, #12]	; (8011120 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 8011114:	4618      	mov	r0, r3
 8011116:	370c      	adds	r7, #12
 8011118:	46bd      	mov	sp, r7
 801111a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801111e:	4770      	bx	lr
 8011120:	20000168 	.word	0x20000168

08011124 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011124:	b580      	push	{r7, lr}
 8011126:	b082      	sub	sp, #8
 8011128:	af00      	add	r7, sp, #0
 801112a:	4603      	mov	r3, r0
 801112c:	6039      	str	r1, [r7, #0]
 801112e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8011130:	79fb      	ldrb	r3, [r7, #7]
 8011132:	2b00      	cmp	r3, #0
 8011134:	d105      	bne.n	8011142 <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8011136:	683a      	ldr	r2, [r7, #0]
 8011138:	4907      	ldr	r1, [pc, #28]	; (8011158 <USBD_CDC_ProductStrDescriptor+0x34>)
 801113a:	4808      	ldr	r0, [pc, #32]	; (801115c <USBD_CDC_ProductStrDescriptor+0x38>)
 801113c:	f7fd fbbd 	bl	800e8ba <USBD_GetString>
 8011140:	e004      	b.n	801114c <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8011142:	683a      	ldr	r2, [r7, #0]
 8011144:	4904      	ldr	r1, [pc, #16]	; (8011158 <USBD_CDC_ProductStrDescriptor+0x34>)
 8011146:	4805      	ldr	r0, [pc, #20]	; (801115c <USBD_CDC_ProductStrDescriptor+0x38>)
 8011148:	f7fd fbb7 	bl	800e8ba <USBD_GetString>
  }
  return USBD_StrDesc;
 801114c:	4b02      	ldr	r3, [pc, #8]	; (8011158 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 801114e:	4618      	mov	r0, r3
 8011150:	3708      	adds	r7, #8
 8011152:	46bd      	mov	sp, r7
 8011154:	bd80      	pop	{r7, pc}
 8011156:	bf00      	nop
 8011158:	20005f50 	.word	0x20005f50
 801115c:	08014778 	.word	0x08014778

08011160 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011160:	b580      	push	{r7, lr}
 8011162:	b082      	sub	sp, #8
 8011164:	af00      	add	r7, sp, #0
 8011166:	4603      	mov	r3, r0
 8011168:	6039      	str	r1, [r7, #0]
 801116a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 801116c:	683a      	ldr	r2, [r7, #0]
 801116e:	4904      	ldr	r1, [pc, #16]	; (8011180 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 8011170:	4804      	ldr	r0, [pc, #16]	; (8011184 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 8011172:	f7fd fba2 	bl	800e8ba <USBD_GetString>
  return USBD_StrDesc;
 8011176:	4b02      	ldr	r3, [pc, #8]	; (8011180 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 8011178:	4618      	mov	r0, r3
 801117a:	3708      	adds	r7, #8
 801117c:	46bd      	mov	sp, r7
 801117e:	bd80      	pop	{r7, pc}
 8011180:	20005f50 	.word	0x20005f50
 8011184:	08014790 	.word	0x08014790

08011188 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011188:	b580      	push	{r7, lr}
 801118a:	b082      	sub	sp, #8
 801118c:	af00      	add	r7, sp, #0
 801118e:	4603      	mov	r3, r0
 8011190:	6039      	str	r1, [r7, #0]
 8011192:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8011194:	683b      	ldr	r3, [r7, #0]
 8011196:	221a      	movs	r2, #26
 8011198:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801119a:	f000 f843 	bl	8011224 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 801119e:	4b02      	ldr	r3, [pc, #8]	; (80111a8 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 80111a0:	4618      	mov	r0, r3
 80111a2:	3708      	adds	r7, #8
 80111a4:	46bd      	mov	sp, r7
 80111a6:	bd80      	pop	{r7, pc}
 80111a8:	2000016c 	.word	0x2000016c

080111ac <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80111ac:	b580      	push	{r7, lr}
 80111ae:	b082      	sub	sp, #8
 80111b0:	af00      	add	r7, sp, #0
 80111b2:	4603      	mov	r3, r0
 80111b4:	6039      	str	r1, [r7, #0]
 80111b6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80111b8:	79fb      	ldrb	r3, [r7, #7]
 80111ba:	2b00      	cmp	r3, #0
 80111bc:	d105      	bne.n	80111ca <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 80111be:	683a      	ldr	r2, [r7, #0]
 80111c0:	4907      	ldr	r1, [pc, #28]	; (80111e0 <USBD_CDC_ConfigStrDescriptor+0x34>)
 80111c2:	4808      	ldr	r0, [pc, #32]	; (80111e4 <USBD_CDC_ConfigStrDescriptor+0x38>)
 80111c4:	f7fd fb79 	bl	800e8ba <USBD_GetString>
 80111c8:	e004      	b.n	80111d4 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 80111ca:	683a      	ldr	r2, [r7, #0]
 80111cc:	4904      	ldr	r1, [pc, #16]	; (80111e0 <USBD_CDC_ConfigStrDescriptor+0x34>)
 80111ce:	4805      	ldr	r0, [pc, #20]	; (80111e4 <USBD_CDC_ConfigStrDescriptor+0x38>)
 80111d0:	f7fd fb73 	bl	800e8ba <USBD_GetString>
  }
  return USBD_StrDesc;
 80111d4:	4b02      	ldr	r3, [pc, #8]	; (80111e0 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 80111d6:	4618      	mov	r0, r3
 80111d8:	3708      	adds	r7, #8
 80111da:	46bd      	mov	sp, r7
 80111dc:	bd80      	pop	{r7, pc}
 80111de:	bf00      	nop
 80111e0:	20005f50 	.word	0x20005f50
 80111e4:	080147a4 	.word	0x080147a4

080111e8 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80111e8:	b580      	push	{r7, lr}
 80111ea:	b082      	sub	sp, #8
 80111ec:	af00      	add	r7, sp, #0
 80111ee:	4603      	mov	r3, r0
 80111f0:	6039      	str	r1, [r7, #0]
 80111f2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80111f4:	79fb      	ldrb	r3, [r7, #7]
 80111f6:	2b00      	cmp	r3, #0
 80111f8:	d105      	bne.n	8011206 <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 80111fa:	683a      	ldr	r2, [r7, #0]
 80111fc:	4907      	ldr	r1, [pc, #28]	; (801121c <USBD_CDC_InterfaceStrDescriptor+0x34>)
 80111fe:	4808      	ldr	r0, [pc, #32]	; (8011220 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8011200:	f7fd fb5b 	bl	800e8ba <USBD_GetString>
 8011204:	e004      	b.n	8011210 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8011206:	683a      	ldr	r2, [r7, #0]
 8011208:	4904      	ldr	r1, [pc, #16]	; (801121c <USBD_CDC_InterfaceStrDescriptor+0x34>)
 801120a:	4805      	ldr	r0, [pc, #20]	; (8011220 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 801120c:	f7fd fb55 	bl	800e8ba <USBD_GetString>
  }
  return USBD_StrDesc;
 8011210:	4b02      	ldr	r3, [pc, #8]	; (801121c <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 8011212:	4618      	mov	r0, r3
 8011214:	3708      	adds	r7, #8
 8011216:	46bd      	mov	sp, r7
 8011218:	bd80      	pop	{r7, pc}
 801121a:	bf00      	nop
 801121c:	20005f50 	.word	0x20005f50
 8011220:	080147b0 	.word	0x080147b0

08011224 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8011224:	b580      	push	{r7, lr}
 8011226:	b084      	sub	sp, #16
 8011228:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801122a:	4b0f      	ldr	r3, [pc, #60]	; (8011268 <Get_SerialNum+0x44>)
 801122c:	681b      	ldr	r3, [r3, #0]
 801122e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8011230:	4b0e      	ldr	r3, [pc, #56]	; (801126c <Get_SerialNum+0x48>)
 8011232:	681b      	ldr	r3, [r3, #0]
 8011234:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8011236:	4b0e      	ldr	r3, [pc, #56]	; (8011270 <Get_SerialNum+0x4c>)
 8011238:	681b      	ldr	r3, [r3, #0]
 801123a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 801123c:	68fa      	ldr	r2, [r7, #12]
 801123e:	687b      	ldr	r3, [r7, #4]
 8011240:	4413      	add	r3, r2
 8011242:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8011244:	68fb      	ldr	r3, [r7, #12]
 8011246:	2b00      	cmp	r3, #0
 8011248:	d009      	beq.n	801125e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801124a:	2208      	movs	r2, #8
 801124c:	4909      	ldr	r1, [pc, #36]	; (8011274 <Get_SerialNum+0x50>)
 801124e:	68f8      	ldr	r0, [r7, #12]
 8011250:	f000 f814 	bl	801127c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8011254:	2204      	movs	r2, #4
 8011256:	4908      	ldr	r1, [pc, #32]	; (8011278 <Get_SerialNum+0x54>)
 8011258:	68b8      	ldr	r0, [r7, #8]
 801125a:	f000 f80f 	bl	801127c <IntToUnicode>
  }
}
 801125e:	bf00      	nop
 8011260:	3710      	adds	r7, #16
 8011262:	46bd      	mov	sp, r7
 8011264:	bd80      	pop	{r7, pc}
 8011266:	bf00      	nop
 8011268:	1fff7590 	.word	0x1fff7590
 801126c:	1fff7594 	.word	0x1fff7594
 8011270:	1fff7598 	.word	0x1fff7598
 8011274:	2000016e 	.word	0x2000016e
 8011278:	2000017e 	.word	0x2000017e

0801127c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 801127c:	b480      	push	{r7}
 801127e:	b087      	sub	sp, #28
 8011280:	af00      	add	r7, sp, #0
 8011282:	60f8      	str	r0, [r7, #12]
 8011284:	60b9      	str	r1, [r7, #8]
 8011286:	4613      	mov	r3, r2
 8011288:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 801128a:	2300      	movs	r3, #0
 801128c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 801128e:	2300      	movs	r3, #0
 8011290:	75fb      	strb	r3, [r7, #23]
 8011292:	e027      	b.n	80112e4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8011294:	68fb      	ldr	r3, [r7, #12]
 8011296:	0f1b      	lsrs	r3, r3, #28
 8011298:	2b09      	cmp	r3, #9
 801129a:	d80b      	bhi.n	80112b4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 801129c:	68fb      	ldr	r3, [r7, #12]
 801129e:	0f1b      	lsrs	r3, r3, #28
 80112a0:	b2da      	uxtb	r2, r3
 80112a2:	7dfb      	ldrb	r3, [r7, #23]
 80112a4:	005b      	lsls	r3, r3, #1
 80112a6:	4619      	mov	r1, r3
 80112a8:	68bb      	ldr	r3, [r7, #8]
 80112aa:	440b      	add	r3, r1
 80112ac:	3230      	adds	r2, #48	; 0x30
 80112ae:	b2d2      	uxtb	r2, r2
 80112b0:	701a      	strb	r2, [r3, #0]
 80112b2:	e00a      	b.n	80112ca <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80112b4:	68fb      	ldr	r3, [r7, #12]
 80112b6:	0f1b      	lsrs	r3, r3, #28
 80112b8:	b2da      	uxtb	r2, r3
 80112ba:	7dfb      	ldrb	r3, [r7, #23]
 80112bc:	005b      	lsls	r3, r3, #1
 80112be:	4619      	mov	r1, r3
 80112c0:	68bb      	ldr	r3, [r7, #8]
 80112c2:	440b      	add	r3, r1
 80112c4:	3237      	adds	r2, #55	; 0x37
 80112c6:	b2d2      	uxtb	r2, r2
 80112c8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80112ca:	68fb      	ldr	r3, [r7, #12]
 80112cc:	011b      	lsls	r3, r3, #4
 80112ce:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80112d0:	7dfb      	ldrb	r3, [r7, #23]
 80112d2:	005b      	lsls	r3, r3, #1
 80112d4:	3301      	adds	r3, #1
 80112d6:	68ba      	ldr	r2, [r7, #8]
 80112d8:	4413      	add	r3, r2
 80112da:	2200      	movs	r2, #0
 80112dc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80112de:	7dfb      	ldrb	r3, [r7, #23]
 80112e0:	3301      	adds	r3, #1
 80112e2:	75fb      	strb	r3, [r7, #23]
 80112e4:	7dfa      	ldrb	r2, [r7, #23]
 80112e6:	79fb      	ldrb	r3, [r7, #7]
 80112e8:	429a      	cmp	r2, r3
 80112ea:	d3d3      	bcc.n	8011294 <IntToUnicode+0x18>
  }
}
 80112ec:	bf00      	nop
 80112ee:	bf00      	nop
 80112f0:	371c      	adds	r7, #28
 80112f2:	46bd      	mov	sp, r7
 80112f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112f8:	4770      	bx	lr
	...

080112fc <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80112fc:	b580      	push	{r7, lr}
 80112fe:	b098      	sub	sp, #96	; 0x60
 8011300:	af00      	add	r7, sp, #0
 8011302:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8011304:	f107 030c 	add.w	r3, r7, #12
 8011308:	2254      	movs	r2, #84	; 0x54
 801130a:	2100      	movs	r1, #0
 801130c:	4618      	mov	r0, r3
 801130e:	f001 f957 	bl	80125c0 <memset>
  if(pcdHandle->Instance==USB)
 8011312:	687b      	ldr	r3, [r7, #4]
 8011314:	681b      	ldr	r3, [r3, #0]
 8011316:	4a15      	ldr	r2, [pc, #84]	; (801136c <HAL_PCD_MspInit+0x70>)
 8011318:	4293      	cmp	r3, r2
 801131a:	d122      	bne.n	8011362 <HAL_PCD_MspInit+0x66>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 801131c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8011320:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8011322:	2300      	movs	r3, #0
 8011324:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8011326:	f107 030c 	add.w	r3, r7, #12
 801132a:	4618      	mov	r0, r3
 801132c:	f7f6 fb8c 	bl	8007a48 <HAL_RCCEx_PeriphCLKConfig>
 8011330:	4603      	mov	r3, r0
 8011332:	2b00      	cmp	r3, #0
 8011334:	d001      	beq.n	801133a <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 8011336:	f7f0 fceb 	bl	8001d10 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 801133a:	4b0d      	ldr	r3, [pc, #52]	; (8011370 <HAL_PCD_MspInit+0x74>)
 801133c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801133e:	4a0c      	ldr	r2, [pc, #48]	; (8011370 <HAL_PCD_MspInit+0x74>)
 8011340:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8011344:	6593      	str	r3, [r2, #88]	; 0x58
 8011346:	4b0a      	ldr	r3, [pc, #40]	; (8011370 <HAL_PCD_MspInit+0x74>)
 8011348:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801134a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801134e:	60bb      	str	r3, [r7, #8]
 8011350:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 5, 0);
 8011352:	2200      	movs	r2, #0
 8011354:	2105      	movs	r1, #5
 8011356:	2014      	movs	r0, #20
 8011358:	f7f3 fc56 	bl	8004c08 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 801135c:	2014      	movs	r0, #20
 801135e:	f7f3 fc6d 	bl	8004c3c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8011362:	bf00      	nop
 8011364:	3760      	adds	r7, #96	; 0x60
 8011366:	46bd      	mov	sp, r7
 8011368:	bd80      	pop	{r7, pc}
 801136a:	bf00      	nop
 801136c:	40005c00 	.word	0x40005c00
 8011370:	40021000 	.word	0x40021000

08011374 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011374:	b580      	push	{r7, lr}
 8011376:	b082      	sub	sp, #8
 8011378:	af00      	add	r7, sp, #0
 801137a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 801137c:	687b      	ldr	r3, [r7, #4]
 801137e:	f8d3 22f0 	ldr.w	r2, [r3, #752]	; 0x2f0
 8011382:	687b      	ldr	r3, [r7, #4]
 8011384:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8011388:	4619      	mov	r1, r3
 801138a:	4610      	mov	r0, r2
 801138c:	f7fc faf8 	bl	800d980 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 8011390:	bf00      	nop
 8011392:	3708      	adds	r7, #8
 8011394:	46bd      	mov	sp, r7
 8011396:	bd80      	pop	{r7, pc}

08011398 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011398:	b580      	push	{r7, lr}
 801139a:	b082      	sub	sp, #8
 801139c:	af00      	add	r7, sp, #0
 801139e:	6078      	str	r0, [r7, #4]
 80113a0:	460b      	mov	r3, r1
 80113a2:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80113a4:	687b      	ldr	r3, [r7, #4]
 80113a6:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 80113aa:	78fa      	ldrb	r2, [r7, #3]
 80113ac:	6879      	ldr	r1, [r7, #4]
 80113ae:	4613      	mov	r3, r2
 80113b0:	009b      	lsls	r3, r3, #2
 80113b2:	4413      	add	r3, r2
 80113b4:	00db      	lsls	r3, r3, #3
 80113b6:	440b      	add	r3, r1
 80113b8:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80113bc:	681a      	ldr	r2, [r3, #0]
 80113be:	78fb      	ldrb	r3, [r7, #3]
 80113c0:	4619      	mov	r1, r3
 80113c2:	f7fc fb32 	bl	800da2a <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 80113c6:	bf00      	nop
 80113c8:	3708      	adds	r7, #8
 80113ca:	46bd      	mov	sp, r7
 80113cc:	bd80      	pop	{r7, pc}

080113ce <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80113ce:	b580      	push	{r7, lr}
 80113d0:	b082      	sub	sp, #8
 80113d2:	af00      	add	r7, sp, #0
 80113d4:	6078      	str	r0, [r7, #4]
 80113d6:	460b      	mov	r3, r1
 80113d8:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80113da:	687b      	ldr	r3, [r7, #4]
 80113dc:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 80113e0:	78fa      	ldrb	r2, [r7, #3]
 80113e2:	6879      	ldr	r1, [r7, #4]
 80113e4:	4613      	mov	r3, r2
 80113e6:	009b      	lsls	r3, r3, #2
 80113e8:	4413      	add	r3, r2
 80113ea:	00db      	lsls	r3, r3, #3
 80113ec:	440b      	add	r3, r1
 80113ee:	333c      	adds	r3, #60	; 0x3c
 80113f0:	681a      	ldr	r2, [r3, #0]
 80113f2:	78fb      	ldrb	r3, [r7, #3]
 80113f4:	4619      	mov	r1, r3
 80113f6:	f7fc fb7b 	bl	800daf0 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 80113fa:	bf00      	nop
 80113fc:	3708      	adds	r7, #8
 80113fe:	46bd      	mov	sp, r7
 8011400:	bd80      	pop	{r7, pc}

08011402 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011402:	b580      	push	{r7, lr}
 8011404:	b082      	sub	sp, #8
 8011406:	af00      	add	r7, sp, #0
 8011408:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801140a:	687b      	ldr	r3, [r7, #4]
 801140c:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8011410:	4618      	mov	r0, r3
 8011412:	f7fc fc8f 	bl	800dd34 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 8011416:	bf00      	nop
 8011418:	3708      	adds	r7, #8
 801141a:	46bd      	mov	sp, r7
 801141c:	bd80      	pop	{r7, pc}

0801141e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801141e:	b580      	push	{r7, lr}
 8011420:	b084      	sub	sp, #16
 8011422:	af00      	add	r7, sp, #0
 8011424:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8011426:	2301      	movs	r3, #1
 8011428:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 801142a:	687b      	ldr	r3, [r7, #4]
 801142c:	689b      	ldr	r3, [r3, #8]
 801142e:	2b02      	cmp	r3, #2
 8011430:	d001      	beq.n	8011436 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8011432:	f7f0 fc6d 	bl	8001d10 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8011436:	687b      	ldr	r3, [r7, #4]
 8011438:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 801143c:	7bfa      	ldrb	r2, [r7, #15]
 801143e:	4611      	mov	r1, r2
 8011440:	4618      	mov	r0, r3
 8011442:	f7fc fc39 	bl	800dcb8 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8011446:	687b      	ldr	r3, [r7, #4]
 8011448:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 801144c:	4618      	mov	r0, r3
 801144e:	f7fc fbe5 	bl	800dc1c <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 8011452:	bf00      	nop
 8011454:	3710      	adds	r7, #16
 8011456:	46bd      	mov	sp, r7
 8011458:	bd80      	pop	{r7, pc}
	...

0801145c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801145c:	b580      	push	{r7, lr}
 801145e:	b082      	sub	sp, #8
 8011460:	af00      	add	r7, sp, #0
 8011462:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8011464:	687b      	ldr	r3, [r7, #4]
 8011466:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 801146a:	4618      	mov	r0, r3
 801146c:	f7fc fc34 	bl	800dcd8 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8011470:	687b      	ldr	r3, [r7, #4]
 8011472:	699b      	ldr	r3, [r3, #24]
 8011474:	2b00      	cmp	r3, #0
 8011476:	d005      	beq.n	8011484 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8011478:	4b04      	ldr	r3, [pc, #16]	; (801148c <HAL_PCD_SuspendCallback+0x30>)
 801147a:	691b      	ldr	r3, [r3, #16]
 801147c:	4a03      	ldr	r2, [pc, #12]	; (801148c <HAL_PCD_SuspendCallback+0x30>)
 801147e:	f043 0306 	orr.w	r3, r3, #6
 8011482:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 8011484:	bf00      	nop
 8011486:	3708      	adds	r7, #8
 8011488:	46bd      	mov	sp, r7
 801148a:	bd80      	pop	{r7, pc}
 801148c:	e000ed00 	.word	0xe000ed00

08011490 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011490:	b580      	push	{r7, lr}
 8011492:	b082      	sub	sp, #8
 8011494:	af00      	add	r7, sp, #0
 8011496:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8011498:	687b      	ldr	r3, [r7, #4]
 801149a:	699b      	ldr	r3, [r3, #24]
 801149c:	2b00      	cmp	r3, #0
 801149e:	d007      	beq.n	80114b0 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80114a0:	4b08      	ldr	r3, [pc, #32]	; (80114c4 <HAL_PCD_ResumeCallback+0x34>)
 80114a2:	691b      	ldr	r3, [r3, #16]
 80114a4:	4a07      	ldr	r2, [pc, #28]	; (80114c4 <HAL_PCD_ResumeCallback+0x34>)
 80114a6:	f023 0306 	bic.w	r3, r3, #6
 80114aa:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 80114ac:	f000 f9fa 	bl	80118a4 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80114b0:	687b      	ldr	r3, [r7, #4]
 80114b2:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 80114b6:	4618      	mov	r0, r3
 80114b8:	f7fc fc24 	bl	800dd04 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 80114bc:	bf00      	nop
 80114be:	3708      	adds	r7, #8
 80114c0:	46bd      	mov	sp, r7
 80114c2:	bd80      	pop	{r7, pc}
 80114c4:	e000ed00 	.word	0xe000ed00

080114c8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80114c8:	b580      	push	{r7, lr}
 80114ca:	b082      	sub	sp, #8
 80114cc:	af00      	add	r7, sp, #0
 80114ce:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 80114d0:	4a2b      	ldr	r2, [pc, #172]	; (8011580 <USBD_LL_Init+0xb8>)
 80114d2:	687b      	ldr	r3, [r7, #4]
 80114d4:	f8c2 32f0 	str.w	r3, [r2, #752]	; 0x2f0
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 80114d8:	687b      	ldr	r3, [r7, #4]
 80114da:	4a29      	ldr	r2, [pc, #164]	; (8011580 <USBD_LL_Init+0xb8>)
 80114dc:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_FS.Instance = USB;
 80114e0:	4b27      	ldr	r3, [pc, #156]	; (8011580 <USBD_LL_Init+0xb8>)
 80114e2:	4a28      	ldr	r2, [pc, #160]	; (8011584 <USBD_LL_Init+0xbc>)
 80114e4:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80114e6:	4b26      	ldr	r3, [pc, #152]	; (8011580 <USBD_LL_Init+0xb8>)
 80114e8:	2208      	movs	r2, #8
 80114ea:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80114ec:	4b24      	ldr	r3, [pc, #144]	; (8011580 <USBD_LL_Init+0xb8>)
 80114ee:	2202      	movs	r2, #2
 80114f0:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80114f2:	4b23      	ldr	r3, [pc, #140]	; (8011580 <USBD_LL_Init+0xb8>)
 80114f4:	2202      	movs	r2, #2
 80114f6:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 80114f8:	4b21      	ldr	r3, [pc, #132]	; (8011580 <USBD_LL_Init+0xb8>)
 80114fa:	2200      	movs	r2, #0
 80114fc:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80114fe:	4b20      	ldr	r3, [pc, #128]	; (8011580 <USBD_LL_Init+0xb8>)
 8011500:	2200      	movs	r2, #0
 8011502:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8011504:	4b1e      	ldr	r3, [pc, #120]	; (8011580 <USBD_LL_Init+0xb8>)
 8011506:	2200      	movs	r2, #0
 8011508:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 801150a:	4b1d      	ldr	r3, [pc, #116]	; (8011580 <USBD_LL_Init+0xb8>)
 801150c:	2200      	movs	r2, #0
 801150e:	621a      	str	r2, [r3, #32]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8011510:	481b      	ldr	r0, [pc, #108]	; (8011580 <USBD_LL_Init+0xb8>)
 8011512:	f7f3 ff60 	bl	80053d6 <HAL_PCD_Init>
 8011516:	4603      	mov	r3, r0
 8011518:	2b00      	cmp	r3, #0
 801151a:	d001      	beq.n	8011520 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 801151c:	f7f0 fbf8 	bl	8001d10 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8011520:	687b      	ldr	r3, [r7, #4]
 8011522:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8011526:	2318      	movs	r3, #24
 8011528:	2200      	movs	r2, #0
 801152a:	2100      	movs	r1, #0
 801152c:	f7f5 fc19 	bl	8006d62 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8011530:	687b      	ldr	r3, [r7, #4]
 8011532:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8011536:	2358      	movs	r3, #88	; 0x58
 8011538:	2200      	movs	r2, #0
 801153a:	2180      	movs	r1, #128	; 0x80
 801153c:	f7f5 fc11 	bl	8006d62 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8011540:	687b      	ldr	r3, [r7, #4]
 8011542:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8011546:	23c0      	movs	r3, #192	; 0xc0
 8011548:	2200      	movs	r2, #0
 801154a:	2181      	movs	r1, #129	; 0x81
 801154c:	f7f5 fc09 	bl	8006d62 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8011550:	687b      	ldr	r3, [r7, #4]
 8011552:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8011556:	f44f 7388 	mov.w	r3, #272	; 0x110
 801155a:	2200      	movs	r2, #0
 801155c:	2101      	movs	r1, #1
 801155e:	f7f5 fc00 	bl	8006d62 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8011562:	687b      	ldr	r3, [r7, #4]
 8011564:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8011568:	f44f 7380 	mov.w	r3, #256	; 0x100
 801156c:	2200      	movs	r2, #0
 801156e:	2182      	movs	r1, #130	; 0x82
 8011570:	f7f5 fbf7 	bl	8006d62 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8011574:	2300      	movs	r3, #0
}
 8011576:	4618      	mov	r0, r3
 8011578:	3708      	adds	r7, #8
 801157a:	46bd      	mov	sp, r7
 801157c:	bd80      	pop	{r7, pc}
 801157e:	bf00      	nop
 8011580:	20006150 	.word	0x20006150
 8011584:	40005c00 	.word	0x40005c00

08011588 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8011588:	b580      	push	{r7, lr}
 801158a:	b084      	sub	sp, #16
 801158c:	af00      	add	r7, sp, #0
 801158e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011590:	2300      	movs	r3, #0
 8011592:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011594:	2300      	movs	r3, #0
 8011596:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8011598:	687b      	ldr	r3, [r7, #4]
 801159a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801159e:	4618      	mov	r0, r3
 80115a0:	f7f3 fffe 	bl	80055a0 <HAL_PCD_Start>
 80115a4:	4603      	mov	r3, r0
 80115a6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80115a8:	7bfb      	ldrb	r3, [r7, #15]
 80115aa:	4618      	mov	r0, r3
 80115ac:	f000 f980 	bl	80118b0 <USBD_Get_USB_Status>
 80115b0:	4603      	mov	r3, r0
 80115b2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80115b4:	7bbb      	ldrb	r3, [r7, #14]
}
 80115b6:	4618      	mov	r0, r3
 80115b8:	3710      	adds	r7, #16
 80115ba:	46bd      	mov	sp, r7
 80115bc:	bd80      	pop	{r7, pc}

080115be <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80115be:	b580      	push	{r7, lr}
 80115c0:	b084      	sub	sp, #16
 80115c2:	af00      	add	r7, sp, #0
 80115c4:	6078      	str	r0, [r7, #4]
 80115c6:	4608      	mov	r0, r1
 80115c8:	4611      	mov	r1, r2
 80115ca:	461a      	mov	r2, r3
 80115cc:	4603      	mov	r3, r0
 80115ce:	70fb      	strb	r3, [r7, #3]
 80115d0:	460b      	mov	r3, r1
 80115d2:	70bb      	strb	r3, [r7, #2]
 80115d4:	4613      	mov	r3, r2
 80115d6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80115d8:	2300      	movs	r3, #0
 80115da:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80115dc:	2300      	movs	r3, #0
 80115de:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80115e0:	687b      	ldr	r3, [r7, #4]
 80115e2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80115e6:	78bb      	ldrb	r3, [r7, #2]
 80115e8:	883a      	ldrh	r2, [r7, #0]
 80115ea:	78f9      	ldrb	r1, [r7, #3]
 80115ec:	f7f4 f946 	bl	800587c <HAL_PCD_EP_Open>
 80115f0:	4603      	mov	r3, r0
 80115f2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80115f4:	7bfb      	ldrb	r3, [r7, #15]
 80115f6:	4618      	mov	r0, r3
 80115f8:	f000 f95a 	bl	80118b0 <USBD_Get_USB_Status>
 80115fc:	4603      	mov	r3, r0
 80115fe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011600:	7bbb      	ldrb	r3, [r7, #14]
}
 8011602:	4618      	mov	r0, r3
 8011604:	3710      	adds	r7, #16
 8011606:	46bd      	mov	sp, r7
 8011608:	bd80      	pop	{r7, pc}

0801160a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801160a:	b580      	push	{r7, lr}
 801160c:	b084      	sub	sp, #16
 801160e:	af00      	add	r7, sp, #0
 8011610:	6078      	str	r0, [r7, #4]
 8011612:	460b      	mov	r3, r1
 8011614:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011616:	2300      	movs	r3, #0
 8011618:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801161a:	2300      	movs	r3, #0
 801161c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801161e:	687b      	ldr	r3, [r7, #4]
 8011620:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8011624:	78fa      	ldrb	r2, [r7, #3]
 8011626:	4611      	mov	r1, r2
 8011628:	4618      	mov	r0, r3
 801162a:	f7f4 f98d 	bl	8005948 <HAL_PCD_EP_Close>
 801162e:	4603      	mov	r3, r0
 8011630:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011632:	7bfb      	ldrb	r3, [r7, #15]
 8011634:	4618      	mov	r0, r3
 8011636:	f000 f93b 	bl	80118b0 <USBD_Get_USB_Status>
 801163a:	4603      	mov	r3, r0
 801163c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801163e:	7bbb      	ldrb	r3, [r7, #14]
}
 8011640:	4618      	mov	r0, r3
 8011642:	3710      	adds	r7, #16
 8011644:	46bd      	mov	sp, r7
 8011646:	bd80      	pop	{r7, pc}

08011648 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011648:	b580      	push	{r7, lr}
 801164a:	b084      	sub	sp, #16
 801164c:	af00      	add	r7, sp, #0
 801164e:	6078      	str	r0, [r7, #4]
 8011650:	460b      	mov	r3, r1
 8011652:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011654:	2300      	movs	r3, #0
 8011656:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011658:	2300      	movs	r3, #0
 801165a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 801165c:	687b      	ldr	r3, [r7, #4]
 801165e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8011662:	78fa      	ldrb	r2, [r7, #3]
 8011664:	4611      	mov	r1, r2
 8011666:	4618      	mov	r0, r3
 8011668:	f7f4 fa4e 	bl	8005b08 <HAL_PCD_EP_SetStall>
 801166c:	4603      	mov	r3, r0
 801166e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011670:	7bfb      	ldrb	r3, [r7, #15]
 8011672:	4618      	mov	r0, r3
 8011674:	f000 f91c 	bl	80118b0 <USBD_Get_USB_Status>
 8011678:	4603      	mov	r3, r0
 801167a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801167c:	7bbb      	ldrb	r3, [r7, #14]
}
 801167e:	4618      	mov	r0, r3
 8011680:	3710      	adds	r7, #16
 8011682:	46bd      	mov	sp, r7
 8011684:	bd80      	pop	{r7, pc}

08011686 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011686:	b580      	push	{r7, lr}
 8011688:	b084      	sub	sp, #16
 801168a:	af00      	add	r7, sp, #0
 801168c:	6078      	str	r0, [r7, #4]
 801168e:	460b      	mov	r3, r1
 8011690:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011692:	2300      	movs	r3, #0
 8011694:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011696:	2300      	movs	r3, #0
 8011698:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801169a:	687b      	ldr	r3, [r7, #4]
 801169c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80116a0:	78fa      	ldrb	r2, [r7, #3]
 80116a2:	4611      	mov	r1, r2
 80116a4:	4618      	mov	r0, r3
 80116a6:	f7f4 fa81 	bl	8005bac <HAL_PCD_EP_ClrStall>
 80116aa:	4603      	mov	r3, r0
 80116ac:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80116ae:	7bfb      	ldrb	r3, [r7, #15]
 80116b0:	4618      	mov	r0, r3
 80116b2:	f000 f8fd 	bl	80118b0 <USBD_Get_USB_Status>
 80116b6:	4603      	mov	r3, r0
 80116b8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80116ba:	7bbb      	ldrb	r3, [r7, #14]
}
 80116bc:	4618      	mov	r0, r3
 80116be:	3710      	adds	r7, #16
 80116c0:	46bd      	mov	sp, r7
 80116c2:	bd80      	pop	{r7, pc}

080116c4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80116c4:	b480      	push	{r7}
 80116c6:	b085      	sub	sp, #20
 80116c8:	af00      	add	r7, sp, #0
 80116ca:	6078      	str	r0, [r7, #4]
 80116cc:	460b      	mov	r3, r1
 80116ce:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80116d0:	687b      	ldr	r3, [r7, #4]
 80116d2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80116d6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80116d8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80116dc:	2b00      	cmp	r3, #0
 80116de:	da0c      	bge.n	80116fa <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80116e0:	78fb      	ldrb	r3, [r7, #3]
 80116e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80116e6:	68f9      	ldr	r1, [r7, #12]
 80116e8:	1c5a      	adds	r2, r3, #1
 80116ea:	4613      	mov	r3, r2
 80116ec:	009b      	lsls	r3, r3, #2
 80116ee:	4413      	add	r3, r2
 80116f0:	00db      	lsls	r3, r3, #3
 80116f2:	440b      	add	r3, r1
 80116f4:	3302      	adds	r3, #2
 80116f6:	781b      	ldrb	r3, [r3, #0]
 80116f8:	e00b      	b.n	8011712 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80116fa:	78fb      	ldrb	r3, [r7, #3]
 80116fc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8011700:	68f9      	ldr	r1, [r7, #12]
 8011702:	4613      	mov	r3, r2
 8011704:	009b      	lsls	r3, r3, #2
 8011706:	4413      	add	r3, r2
 8011708:	00db      	lsls	r3, r3, #3
 801170a:	440b      	add	r3, r1
 801170c:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8011710:	781b      	ldrb	r3, [r3, #0]
  }
}
 8011712:	4618      	mov	r0, r3
 8011714:	3714      	adds	r7, #20
 8011716:	46bd      	mov	sp, r7
 8011718:	f85d 7b04 	ldr.w	r7, [sp], #4
 801171c:	4770      	bx	lr

0801171e <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 801171e:	b580      	push	{r7, lr}
 8011720:	b084      	sub	sp, #16
 8011722:	af00      	add	r7, sp, #0
 8011724:	6078      	str	r0, [r7, #4]
 8011726:	460b      	mov	r3, r1
 8011728:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801172a:	2300      	movs	r3, #0
 801172c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801172e:	2300      	movs	r3, #0
 8011730:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8011732:	687b      	ldr	r3, [r7, #4]
 8011734:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8011738:	78fa      	ldrb	r2, [r7, #3]
 801173a:	4611      	mov	r1, r2
 801173c:	4618      	mov	r0, r3
 801173e:	f7f4 f878 	bl	8005832 <HAL_PCD_SetAddress>
 8011742:	4603      	mov	r3, r0
 8011744:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011746:	7bfb      	ldrb	r3, [r7, #15]
 8011748:	4618      	mov	r0, r3
 801174a:	f000 f8b1 	bl	80118b0 <USBD_Get_USB_Status>
 801174e:	4603      	mov	r3, r0
 8011750:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011752:	7bbb      	ldrb	r3, [r7, #14]
}
 8011754:	4618      	mov	r0, r3
 8011756:	3710      	adds	r7, #16
 8011758:	46bd      	mov	sp, r7
 801175a:	bd80      	pop	{r7, pc}

0801175c <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801175c:	b580      	push	{r7, lr}
 801175e:	b086      	sub	sp, #24
 8011760:	af00      	add	r7, sp, #0
 8011762:	60f8      	str	r0, [r7, #12]
 8011764:	607a      	str	r2, [r7, #4]
 8011766:	603b      	str	r3, [r7, #0]
 8011768:	460b      	mov	r3, r1
 801176a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801176c:	2300      	movs	r3, #0
 801176e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011770:	2300      	movs	r3, #0
 8011772:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8011774:	68fb      	ldr	r3, [r7, #12]
 8011776:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 801177a:	7af9      	ldrb	r1, [r7, #11]
 801177c:	683b      	ldr	r3, [r7, #0]
 801177e:	687a      	ldr	r2, [r7, #4]
 8011780:	f7f4 f97f 	bl	8005a82 <HAL_PCD_EP_Transmit>
 8011784:	4603      	mov	r3, r0
 8011786:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011788:	7dfb      	ldrb	r3, [r7, #23]
 801178a:	4618      	mov	r0, r3
 801178c:	f000 f890 	bl	80118b0 <USBD_Get_USB_Status>
 8011790:	4603      	mov	r3, r0
 8011792:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8011794:	7dbb      	ldrb	r3, [r7, #22]
}
 8011796:	4618      	mov	r0, r3
 8011798:	3718      	adds	r7, #24
 801179a:	46bd      	mov	sp, r7
 801179c:	bd80      	pop	{r7, pc}

0801179e <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801179e:	b580      	push	{r7, lr}
 80117a0:	b086      	sub	sp, #24
 80117a2:	af00      	add	r7, sp, #0
 80117a4:	60f8      	str	r0, [r7, #12]
 80117a6:	607a      	str	r2, [r7, #4]
 80117a8:	603b      	str	r3, [r7, #0]
 80117aa:	460b      	mov	r3, r1
 80117ac:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80117ae:	2300      	movs	r3, #0
 80117b0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80117b2:	2300      	movs	r3, #0
 80117b4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80117b6:	68fb      	ldr	r3, [r7, #12]
 80117b8:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80117bc:	7af9      	ldrb	r1, [r7, #11]
 80117be:	683b      	ldr	r3, [r7, #0]
 80117c0:	687a      	ldr	r2, [r7, #4]
 80117c2:	f7f4 f909 	bl	80059d8 <HAL_PCD_EP_Receive>
 80117c6:	4603      	mov	r3, r0
 80117c8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80117ca:	7dfb      	ldrb	r3, [r7, #23]
 80117cc:	4618      	mov	r0, r3
 80117ce:	f000 f86f 	bl	80118b0 <USBD_Get_USB_Status>
 80117d2:	4603      	mov	r3, r0
 80117d4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80117d6:	7dbb      	ldrb	r3, [r7, #22]
}
 80117d8:	4618      	mov	r0, r3
 80117da:	3718      	adds	r7, #24
 80117dc:	46bd      	mov	sp, r7
 80117de:	bd80      	pop	{r7, pc}

080117e0 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80117e0:	b580      	push	{r7, lr}
 80117e2:	b082      	sub	sp, #8
 80117e4:	af00      	add	r7, sp, #0
 80117e6:	6078      	str	r0, [r7, #4]
 80117e8:	460b      	mov	r3, r1
 80117ea:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80117ec:	687b      	ldr	r3, [r7, #4]
 80117ee:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80117f2:	78fa      	ldrb	r2, [r7, #3]
 80117f4:	4611      	mov	r1, r2
 80117f6:	4618      	mov	r0, r3
 80117f8:	f7f4 f92b 	bl	8005a52 <HAL_PCD_EP_GetRxCount>
 80117fc:	4603      	mov	r3, r0
}
 80117fe:	4618      	mov	r0, r3
 8011800:	3708      	adds	r7, #8
 8011802:	46bd      	mov	sp, r7
 8011804:	bd80      	pop	{r7, pc}
	...

08011808 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011808:	b580      	push	{r7, lr}
 801180a:	b082      	sub	sp, #8
 801180c:	af00      	add	r7, sp, #0
 801180e:	6078      	str	r0, [r7, #4]
 8011810:	460b      	mov	r3, r1
 8011812:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 8011814:	78fb      	ldrb	r3, [r7, #3]
 8011816:	2b00      	cmp	r3, #0
 8011818:	d002      	beq.n	8011820 <HAL_PCDEx_LPM_Callback+0x18>
 801181a:	2b01      	cmp	r3, #1
 801181c:	d013      	beq.n	8011846 <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 801181e:	e023      	b.n	8011868 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 8011820:	687b      	ldr	r3, [r7, #4]
 8011822:	699b      	ldr	r3, [r3, #24]
 8011824:	2b00      	cmp	r3, #0
 8011826:	d007      	beq.n	8011838 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8011828:	f000 f83c 	bl	80118a4 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801182c:	4b10      	ldr	r3, [pc, #64]	; (8011870 <HAL_PCDEx_LPM_Callback+0x68>)
 801182e:	691b      	ldr	r3, [r3, #16]
 8011830:	4a0f      	ldr	r2, [pc, #60]	; (8011870 <HAL_PCDEx_LPM_Callback+0x68>)
 8011832:	f023 0306 	bic.w	r3, r3, #6
 8011836:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 8011838:	687b      	ldr	r3, [r7, #4]
 801183a:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 801183e:	4618      	mov	r0, r3
 8011840:	f7fc fa60 	bl	800dd04 <USBD_LL_Resume>
    break;
 8011844:	e010      	b.n	8011868 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 8011846:	687b      	ldr	r3, [r7, #4]
 8011848:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 801184c:	4618      	mov	r0, r3
 801184e:	f7fc fa43 	bl	800dcd8 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8011852:	687b      	ldr	r3, [r7, #4]
 8011854:	699b      	ldr	r3, [r3, #24]
 8011856:	2b00      	cmp	r3, #0
 8011858:	d005      	beq.n	8011866 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801185a:	4b05      	ldr	r3, [pc, #20]	; (8011870 <HAL_PCDEx_LPM_Callback+0x68>)
 801185c:	691b      	ldr	r3, [r3, #16]
 801185e:	4a04      	ldr	r2, [pc, #16]	; (8011870 <HAL_PCDEx_LPM_Callback+0x68>)
 8011860:	f043 0306 	orr.w	r3, r3, #6
 8011864:	6113      	str	r3, [r2, #16]
    break;
 8011866:	bf00      	nop
}
 8011868:	bf00      	nop
 801186a:	3708      	adds	r7, #8
 801186c:	46bd      	mov	sp, r7
 801186e:	bd80      	pop	{r7, pc}
 8011870:	e000ed00 	.word	0xe000ed00

08011874 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8011874:	b480      	push	{r7}
 8011876:	b083      	sub	sp, #12
 8011878:	af00      	add	r7, sp, #0
 801187a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 801187c:	4b03      	ldr	r3, [pc, #12]	; (801188c <USBD_static_malloc+0x18>)
}
 801187e:	4618      	mov	r0, r3
 8011880:	370c      	adds	r7, #12
 8011882:	46bd      	mov	sp, r7
 8011884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011888:	4770      	bx	lr
 801188a:	bf00      	nop
 801188c:	20006444 	.word	0x20006444

08011890 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8011890:	b480      	push	{r7}
 8011892:	b083      	sub	sp, #12
 8011894:	af00      	add	r7, sp, #0
 8011896:	6078      	str	r0, [r7, #4]

}
 8011898:	bf00      	nop
 801189a:	370c      	adds	r7, #12
 801189c:	46bd      	mov	sp, r7
 801189e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118a2:	4770      	bx	lr

080118a4 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 80118a4:	b580      	push	{r7, lr}
 80118a6:	af00      	add	r7, sp, #0
  SystemClock_Config();
 80118a8:	f7f0 f9c2 	bl	8001c30 <SystemClock_Config>
}
 80118ac:	bf00      	nop
 80118ae:	bd80      	pop	{r7, pc}

080118b0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80118b0:	b480      	push	{r7}
 80118b2:	b085      	sub	sp, #20
 80118b4:	af00      	add	r7, sp, #0
 80118b6:	4603      	mov	r3, r0
 80118b8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80118ba:	2300      	movs	r3, #0
 80118bc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80118be:	79fb      	ldrb	r3, [r7, #7]
 80118c0:	2b03      	cmp	r3, #3
 80118c2:	d817      	bhi.n	80118f4 <USBD_Get_USB_Status+0x44>
 80118c4:	a201      	add	r2, pc, #4	; (adr r2, 80118cc <USBD_Get_USB_Status+0x1c>)
 80118c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80118ca:	bf00      	nop
 80118cc:	080118dd 	.word	0x080118dd
 80118d0:	080118e3 	.word	0x080118e3
 80118d4:	080118e9 	.word	0x080118e9
 80118d8:	080118ef 	.word	0x080118ef
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80118dc:	2300      	movs	r3, #0
 80118de:	73fb      	strb	r3, [r7, #15]
    break;
 80118e0:	e00b      	b.n	80118fa <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80118e2:	2303      	movs	r3, #3
 80118e4:	73fb      	strb	r3, [r7, #15]
    break;
 80118e6:	e008      	b.n	80118fa <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80118e8:	2301      	movs	r3, #1
 80118ea:	73fb      	strb	r3, [r7, #15]
    break;
 80118ec:	e005      	b.n	80118fa <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80118ee:	2303      	movs	r3, #3
 80118f0:	73fb      	strb	r3, [r7, #15]
    break;
 80118f2:	e002      	b.n	80118fa <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80118f4:	2303      	movs	r3, #3
 80118f6:	73fb      	strb	r3, [r7, #15]
    break;
 80118f8:	bf00      	nop
  }
  return usb_status;
 80118fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80118fc:	4618      	mov	r0, r3
 80118fe:	3714      	adds	r7, #20
 8011900:	46bd      	mov	sp, r7
 8011902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011906:	4770      	bx	lr

08011908 <__cvt>:
 8011908:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801190c:	ec55 4b10 	vmov	r4, r5, d0
 8011910:	2d00      	cmp	r5, #0
 8011912:	460e      	mov	r6, r1
 8011914:	4619      	mov	r1, r3
 8011916:	462b      	mov	r3, r5
 8011918:	bfbb      	ittet	lt
 801191a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 801191e:	461d      	movlt	r5, r3
 8011920:	2300      	movge	r3, #0
 8011922:	232d      	movlt	r3, #45	; 0x2d
 8011924:	700b      	strb	r3, [r1, #0]
 8011926:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011928:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 801192c:	4691      	mov	r9, r2
 801192e:	f023 0820 	bic.w	r8, r3, #32
 8011932:	bfbc      	itt	lt
 8011934:	4622      	movlt	r2, r4
 8011936:	4614      	movlt	r4, r2
 8011938:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801193c:	d005      	beq.n	801194a <__cvt+0x42>
 801193e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8011942:	d100      	bne.n	8011946 <__cvt+0x3e>
 8011944:	3601      	adds	r6, #1
 8011946:	2102      	movs	r1, #2
 8011948:	e000      	b.n	801194c <__cvt+0x44>
 801194a:	2103      	movs	r1, #3
 801194c:	ab03      	add	r3, sp, #12
 801194e:	9301      	str	r3, [sp, #4]
 8011950:	ab02      	add	r3, sp, #8
 8011952:	9300      	str	r3, [sp, #0]
 8011954:	ec45 4b10 	vmov	d0, r4, r5
 8011958:	4653      	mov	r3, sl
 801195a:	4632      	mov	r2, r6
 801195c:	f000 ff9c 	bl	8012898 <_dtoa_r>
 8011960:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8011964:	4607      	mov	r7, r0
 8011966:	d102      	bne.n	801196e <__cvt+0x66>
 8011968:	f019 0f01 	tst.w	r9, #1
 801196c:	d022      	beq.n	80119b4 <__cvt+0xac>
 801196e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8011972:	eb07 0906 	add.w	r9, r7, r6
 8011976:	d110      	bne.n	801199a <__cvt+0x92>
 8011978:	783b      	ldrb	r3, [r7, #0]
 801197a:	2b30      	cmp	r3, #48	; 0x30
 801197c:	d10a      	bne.n	8011994 <__cvt+0x8c>
 801197e:	2200      	movs	r2, #0
 8011980:	2300      	movs	r3, #0
 8011982:	4620      	mov	r0, r4
 8011984:	4629      	mov	r1, r5
 8011986:	f7ef f8c7 	bl	8000b18 <__aeabi_dcmpeq>
 801198a:	b918      	cbnz	r0, 8011994 <__cvt+0x8c>
 801198c:	f1c6 0601 	rsb	r6, r6, #1
 8011990:	f8ca 6000 	str.w	r6, [sl]
 8011994:	f8da 3000 	ldr.w	r3, [sl]
 8011998:	4499      	add	r9, r3
 801199a:	2200      	movs	r2, #0
 801199c:	2300      	movs	r3, #0
 801199e:	4620      	mov	r0, r4
 80119a0:	4629      	mov	r1, r5
 80119a2:	f7ef f8b9 	bl	8000b18 <__aeabi_dcmpeq>
 80119a6:	b108      	cbz	r0, 80119ac <__cvt+0xa4>
 80119a8:	f8cd 900c 	str.w	r9, [sp, #12]
 80119ac:	2230      	movs	r2, #48	; 0x30
 80119ae:	9b03      	ldr	r3, [sp, #12]
 80119b0:	454b      	cmp	r3, r9
 80119b2:	d307      	bcc.n	80119c4 <__cvt+0xbc>
 80119b4:	9b03      	ldr	r3, [sp, #12]
 80119b6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80119b8:	1bdb      	subs	r3, r3, r7
 80119ba:	4638      	mov	r0, r7
 80119bc:	6013      	str	r3, [r2, #0]
 80119be:	b004      	add	sp, #16
 80119c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80119c4:	1c59      	adds	r1, r3, #1
 80119c6:	9103      	str	r1, [sp, #12]
 80119c8:	701a      	strb	r2, [r3, #0]
 80119ca:	e7f0      	b.n	80119ae <__cvt+0xa6>

080119cc <__exponent>:
 80119cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80119ce:	4603      	mov	r3, r0
 80119d0:	2900      	cmp	r1, #0
 80119d2:	bfb8      	it	lt
 80119d4:	4249      	neglt	r1, r1
 80119d6:	f803 2b02 	strb.w	r2, [r3], #2
 80119da:	bfb4      	ite	lt
 80119dc:	222d      	movlt	r2, #45	; 0x2d
 80119de:	222b      	movge	r2, #43	; 0x2b
 80119e0:	2909      	cmp	r1, #9
 80119e2:	7042      	strb	r2, [r0, #1]
 80119e4:	dd2a      	ble.n	8011a3c <__exponent+0x70>
 80119e6:	f10d 0207 	add.w	r2, sp, #7
 80119ea:	4617      	mov	r7, r2
 80119ec:	260a      	movs	r6, #10
 80119ee:	4694      	mov	ip, r2
 80119f0:	fb91 f5f6 	sdiv	r5, r1, r6
 80119f4:	fb06 1415 	mls	r4, r6, r5, r1
 80119f8:	3430      	adds	r4, #48	; 0x30
 80119fa:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80119fe:	460c      	mov	r4, r1
 8011a00:	2c63      	cmp	r4, #99	; 0x63
 8011a02:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 8011a06:	4629      	mov	r1, r5
 8011a08:	dcf1      	bgt.n	80119ee <__exponent+0x22>
 8011a0a:	3130      	adds	r1, #48	; 0x30
 8011a0c:	f1ac 0402 	sub.w	r4, ip, #2
 8011a10:	f802 1c01 	strb.w	r1, [r2, #-1]
 8011a14:	1c41      	adds	r1, r0, #1
 8011a16:	4622      	mov	r2, r4
 8011a18:	42ba      	cmp	r2, r7
 8011a1a:	d30a      	bcc.n	8011a32 <__exponent+0x66>
 8011a1c:	f10d 0209 	add.w	r2, sp, #9
 8011a20:	eba2 020c 	sub.w	r2, r2, ip
 8011a24:	42bc      	cmp	r4, r7
 8011a26:	bf88      	it	hi
 8011a28:	2200      	movhi	r2, #0
 8011a2a:	4413      	add	r3, r2
 8011a2c:	1a18      	subs	r0, r3, r0
 8011a2e:	b003      	add	sp, #12
 8011a30:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011a32:	f812 5b01 	ldrb.w	r5, [r2], #1
 8011a36:	f801 5f01 	strb.w	r5, [r1, #1]!
 8011a3a:	e7ed      	b.n	8011a18 <__exponent+0x4c>
 8011a3c:	2330      	movs	r3, #48	; 0x30
 8011a3e:	3130      	adds	r1, #48	; 0x30
 8011a40:	7083      	strb	r3, [r0, #2]
 8011a42:	70c1      	strb	r1, [r0, #3]
 8011a44:	1d03      	adds	r3, r0, #4
 8011a46:	e7f1      	b.n	8011a2c <__exponent+0x60>

08011a48 <_printf_float>:
 8011a48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011a4c:	ed2d 8b02 	vpush	{d8}
 8011a50:	b08d      	sub	sp, #52	; 0x34
 8011a52:	460c      	mov	r4, r1
 8011a54:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8011a58:	4616      	mov	r6, r2
 8011a5a:	461f      	mov	r7, r3
 8011a5c:	4605      	mov	r5, r0
 8011a5e:	f000 fdb7 	bl	80125d0 <_localeconv_r>
 8011a62:	f8d0 a000 	ldr.w	sl, [r0]
 8011a66:	4650      	mov	r0, sl
 8011a68:	f7ee fc2a 	bl	80002c0 <strlen>
 8011a6c:	2300      	movs	r3, #0
 8011a6e:	930a      	str	r3, [sp, #40]	; 0x28
 8011a70:	6823      	ldr	r3, [r4, #0]
 8011a72:	9305      	str	r3, [sp, #20]
 8011a74:	f8d8 3000 	ldr.w	r3, [r8]
 8011a78:	f894 b018 	ldrb.w	fp, [r4, #24]
 8011a7c:	3307      	adds	r3, #7
 8011a7e:	f023 0307 	bic.w	r3, r3, #7
 8011a82:	f103 0208 	add.w	r2, r3, #8
 8011a86:	f8c8 2000 	str.w	r2, [r8]
 8011a8a:	e9d3 8900 	ldrd	r8, r9, [r3]
 8011a8e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8011a92:	9307      	str	r3, [sp, #28]
 8011a94:	f8cd 8018 	str.w	r8, [sp, #24]
 8011a98:	ee08 0a10 	vmov	s16, r0
 8011a9c:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8011aa0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8011aa4:	4b9e      	ldr	r3, [pc, #632]	; (8011d20 <_printf_float+0x2d8>)
 8011aa6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011aaa:	f7ef f867 	bl	8000b7c <__aeabi_dcmpun>
 8011aae:	bb88      	cbnz	r0, 8011b14 <_printf_float+0xcc>
 8011ab0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8011ab4:	4b9a      	ldr	r3, [pc, #616]	; (8011d20 <_printf_float+0x2d8>)
 8011ab6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011aba:	f7ef f841 	bl	8000b40 <__aeabi_dcmple>
 8011abe:	bb48      	cbnz	r0, 8011b14 <_printf_float+0xcc>
 8011ac0:	2200      	movs	r2, #0
 8011ac2:	2300      	movs	r3, #0
 8011ac4:	4640      	mov	r0, r8
 8011ac6:	4649      	mov	r1, r9
 8011ac8:	f7ef f830 	bl	8000b2c <__aeabi_dcmplt>
 8011acc:	b110      	cbz	r0, 8011ad4 <_printf_float+0x8c>
 8011ace:	232d      	movs	r3, #45	; 0x2d
 8011ad0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011ad4:	4a93      	ldr	r2, [pc, #588]	; (8011d24 <_printf_float+0x2dc>)
 8011ad6:	4b94      	ldr	r3, [pc, #592]	; (8011d28 <_printf_float+0x2e0>)
 8011ad8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8011adc:	bf94      	ite	ls
 8011ade:	4690      	movls	r8, r2
 8011ae0:	4698      	movhi	r8, r3
 8011ae2:	2303      	movs	r3, #3
 8011ae4:	6123      	str	r3, [r4, #16]
 8011ae6:	9b05      	ldr	r3, [sp, #20]
 8011ae8:	f023 0304 	bic.w	r3, r3, #4
 8011aec:	6023      	str	r3, [r4, #0]
 8011aee:	f04f 0900 	mov.w	r9, #0
 8011af2:	9700      	str	r7, [sp, #0]
 8011af4:	4633      	mov	r3, r6
 8011af6:	aa0b      	add	r2, sp, #44	; 0x2c
 8011af8:	4621      	mov	r1, r4
 8011afa:	4628      	mov	r0, r5
 8011afc:	f000 f9da 	bl	8011eb4 <_printf_common>
 8011b00:	3001      	adds	r0, #1
 8011b02:	f040 8090 	bne.w	8011c26 <_printf_float+0x1de>
 8011b06:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011b0a:	b00d      	add	sp, #52	; 0x34
 8011b0c:	ecbd 8b02 	vpop	{d8}
 8011b10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011b14:	4642      	mov	r2, r8
 8011b16:	464b      	mov	r3, r9
 8011b18:	4640      	mov	r0, r8
 8011b1a:	4649      	mov	r1, r9
 8011b1c:	f7ef f82e 	bl	8000b7c <__aeabi_dcmpun>
 8011b20:	b140      	cbz	r0, 8011b34 <_printf_float+0xec>
 8011b22:	464b      	mov	r3, r9
 8011b24:	2b00      	cmp	r3, #0
 8011b26:	bfbc      	itt	lt
 8011b28:	232d      	movlt	r3, #45	; 0x2d
 8011b2a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8011b2e:	4a7f      	ldr	r2, [pc, #508]	; (8011d2c <_printf_float+0x2e4>)
 8011b30:	4b7f      	ldr	r3, [pc, #508]	; (8011d30 <_printf_float+0x2e8>)
 8011b32:	e7d1      	b.n	8011ad8 <_printf_float+0x90>
 8011b34:	6863      	ldr	r3, [r4, #4]
 8011b36:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8011b3a:	9206      	str	r2, [sp, #24]
 8011b3c:	1c5a      	adds	r2, r3, #1
 8011b3e:	d13f      	bne.n	8011bc0 <_printf_float+0x178>
 8011b40:	2306      	movs	r3, #6
 8011b42:	6063      	str	r3, [r4, #4]
 8011b44:	9b05      	ldr	r3, [sp, #20]
 8011b46:	6861      	ldr	r1, [r4, #4]
 8011b48:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8011b4c:	2300      	movs	r3, #0
 8011b4e:	9303      	str	r3, [sp, #12]
 8011b50:	ab0a      	add	r3, sp, #40	; 0x28
 8011b52:	e9cd b301 	strd	fp, r3, [sp, #4]
 8011b56:	ab09      	add	r3, sp, #36	; 0x24
 8011b58:	ec49 8b10 	vmov	d0, r8, r9
 8011b5c:	9300      	str	r3, [sp, #0]
 8011b5e:	6022      	str	r2, [r4, #0]
 8011b60:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8011b64:	4628      	mov	r0, r5
 8011b66:	f7ff fecf 	bl	8011908 <__cvt>
 8011b6a:	9b06      	ldr	r3, [sp, #24]
 8011b6c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011b6e:	2b47      	cmp	r3, #71	; 0x47
 8011b70:	4680      	mov	r8, r0
 8011b72:	d108      	bne.n	8011b86 <_printf_float+0x13e>
 8011b74:	1cc8      	adds	r0, r1, #3
 8011b76:	db02      	blt.n	8011b7e <_printf_float+0x136>
 8011b78:	6863      	ldr	r3, [r4, #4]
 8011b7a:	4299      	cmp	r1, r3
 8011b7c:	dd41      	ble.n	8011c02 <_printf_float+0x1ba>
 8011b7e:	f1ab 0302 	sub.w	r3, fp, #2
 8011b82:	fa5f fb83 	uxtb.w	fp, r3
 8011b86:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8011b8a:	d820      	bhi.n	8011bce <_printf_float+0x186>
 8011b8c:	3901      	subs	r1, #1
 8011b8e:	465a      	mov	r2, fp
 8011b90:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8011b94:	9109      	str	r1, [sp, #36]	; 0x24
 8011b96:	f7ff ff19 	bl	80119cc <__exponent>
 8011b9a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011b9c:	1813      	adds	r3, r2, r0
 8011b9e:	2a01      	cmp	r2, #1
 8011ba0:	4681      	mov	r9, r0
 8011ba2:	6123      	str	r3, [r4, #16]
 8011ba4:	dc02      	bgt.n	8011bac <_printf_float+0x164>
 8011ba6:	6822      	ldr	r2, [r4, #0]
 8011ba8:	07d2      	lsls	r2, r2, #31
 8011baa:	d501      	bpl.n	8011bb0 <_printf_float+0x168>
 8011bac:	3301      	adds	r3, #1
 8011bae:	6123      	str	r3, [r4, #16]
 8011bb0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8011bb4:	2b00      	cmp	r3, #0
 8011bb6:	d09c      	beq.n	8011af2 <_printf_float+0xaa>
 8011bb8:	232d      	movs	r3, #45	; 0x2d
 8011bba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011bbe:	e798      	b.n	8011af2 <_printf_float+0xaa>
 8011bc0:	9a06      	ldr	r2, [sp, #24]
 8011bc2:	2a47      	cmp	r2, #71	; 0x47
 8011bc4:	d1be      	bne.n	8011b44 <_printf_float+0xfc>
 8011bc6:	2b00      	cmp	r3, #0
 8011bc8:	d1bc      	bne.n	8011b44 <_printf_float+0xfc>
 8011bca:	2301      	movs	r3, #1
 8011bcc:	e7b9      	b.n	8011b42 <_printf_float+0xfa>
 8011bce:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8011bd2:	d118      	bne.n	8011c06 <_printf_float+0x1be>
 8011bd4:	2900      	cmp	r1, #0
 8011bd6:	6863      	ldr	r3, [r4, #4]
 8011bd8:	dd0b      	ble.n	8011bf2 <_printf_float+0x1aa>
 8011bda:	6121      	str	r1, [r4, #16]
 8011bdc:	b913      	cbnz	r3, 8011be4 <_printf_float+0x19c>
 8011bde:	6822      	ldr	r2, [r4, #0]
 8011be0:	07d0      	lsls	r0, r2, #31
 8011be2:	d502      	bpl.n	8011bea <_printf_float+0x1a2>
 8011be4:	3301      	adds	r3, #1
 8011be6:	440b      	add	r3, r1
 8011be8:	6123      	str	r3, [r4, #16]
 8011bea:	65a1      	str	r1, [r4, #88]	; 0x58
 8011bec:	f04f 0900 	mov.w	r9, #0
 8011bf0:	e7de      	b.n	8011bb0 <_printf_float+0x168>
 8011bf2:	b913      	cbnz	r3, 8011bfa <_printf_float+0x1b2>
 8011bf4:	6822      	ldr	r2, [r4, #0]
 8011bf6:	07d2      	lsls	r2, r2, #31
 8011bf8:	d501      	bpl.n	8011bfe <_printf_float+0x1b6>
 8011bfa:	3302      	adds	r3, #2
 8011bfc:	e7f4      	b.n	8011be8 <_printf_float+0x1a0>
 8011bfe:	2301      	movs	r3, #1
 8011c00:	e7f2      	b.n	8011be8 <_printf_float+0x1a0>
 8011c02:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8011c06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011c08:	4299      	cmp	r1, r3
 8011c0a:	db05      	blt.n	8011c18 <_printf_float+0x1d0>
 8011c0c:	6823      	ldr	r3, [r4, #0]
 8011c0e:	6121      	str	r1, [r4, #16]
 8011c10:	07d8      	lsls	r0, r3, #31
 8011c12:	d5ea      	bpl.n	8011bea <_printf_float+0x1a2>
 8011c14:	1c4b      	adds	r3, r1, #1
 8011c16:	e7e7      	b.n	8011be8 <_printf_float+0x1a0>
 8011c18:	2900      	cmp	r1, #0
 8011c1a:	bfd4      	ite	le
 8011c1c:	f1c1 0202 	rsble	r2, r1, #2
 8011c20:	2201      	movgt	r2, #1
 8011c22:	4413      	add	r3, r2
 8011c24:	e7e0      	b.n	8011be8 <_printf_float+0x1a0>
 8011c26:	6823      	ldr	r3, [r4, #0]
 8011c28:	055a      	lsls	r2, r3, #21
 8011c2a:	d407      	bmi.n	8011c3c <_printf_float+0x1f4>
 8011c2c:	6923      	ldr	r3, [r4, #16]
 8011c2e:	4642      	mov	r2, r8
 8011c30:	4631      	mov	r1, r6
 8011c32:	4628      	mov	r0, r5
 8011c34:	47b8      	blx	r7
 8011c36:	3001      	adds	r0, #1
 8011c38:	d12c      	bne.n	8011c94 <_printf_float+0x24c>
 8011c3a:	e764      	b.n	8011b06 <_printf_float+0xbe>
 8011c3c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8011c40:	f240 80e0 	bls.w	8011e04 <_printf_float+0x3bc>
 8011c44:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8011c48:	2200      	movs	r2, #0
 8011c4a:	2300      	movs	r3, #0
 8011c4c:	f7ee ff64 	bl	8000b18 <__aeabi_dcmpeq>
 8011c50:	2800      	cmp	r0, #0
 8011c52:	d034      	beq.n	8011cbe <_printf_float+0x276>
 8011c54:	4a37      	ldr	r2, [pc, #220]	; (8011d34 <_printf_float+0x2ec>)
 8011c56:	2301      	movs	r3, #1
 8011c58:	4631      	mov	r1, r6
 8011c5a:	4628      	mov	r0, r5
 8011c5c:	47b8      	blx	r7
 8011c5e:	3001      	adds	r0, #1
 8011c60:	f43f af51 	beq.w	8011b06 <_printf_float+0xbe>
 8011c64:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8011c68:	429a      	cmp	r2, r3
 8011c6a:	db02      	blt.n	8011c72 <_printf_float+0x22a>
 8011c6c:	6823      	ldr	r3, [r4, #0]
 8011c6e:	07d8      	lsls	r0, r3, #31
 8011c70:	d510      	bpl.n	8011c94 <_printf_float+0x24c>
 8011c72:	ee18 3a10 	vmov	r3, s16
 8011c76:	4652      	mov	r2, sl
 8011c78:	4631      	mov	r1, r6
 8011c7a:	4628      	mov	r0, r5
 8011c7c:	47b8      	blx	r7
 8011c7e:	3001      	adds	r0, #1
 8011c80:	f43f af41 	beq.w	8011b06 <_printf_float+0xbe>
 8011c84:	f04f 0800 	mov.w	r8, #0
 8011c88:	f104 091a 	add.w	r9, r4, #26
 8011c8c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011c8e:	3b01      	subs	r3, #1
 8011c90:	4543      	cmp	r3, r8
 8011c92:	dc09      	bgt.n	8011ca8 <_printf_float+0x260>
 8011c94:	6823      	ldr	r3, [r4, #0]
 8011c96:	079b      	lsls	r3, r3, #30
 8011c98:	f100 8107 	bmi.w	8011eaa <_printf_float+0x462>
 8011c9c:	68e0      	ldr	r0, [r4, #12]
 8011c9e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011ca0:	4298      	cmp	r0, r3
 8011ca2:	bfb8      	it	lt
 8011ca4:	4618      	movlt	r0, r3
 8011ca6:	e730      	b.n	8011b0a <_printf_float+0xc2>
 8011ca8:	2301      	movs	r3, #1
 8011caa:	464a      	mov	r2, r9
 8011cac:	4631      	mov	r1, r6
 8011cae:	4628      	mov	r0, r5
 8011cb0:	47b8      	blx	r7
 8011cb2:	3001      	adds	r0, #1
 8011cb4:	f43f af27 	beq.w	8011b06 <_printf_float+0xbe>
 8011cb8:	f108 0801 	add.w	r8, r8, #1
 8011cbc:	e7e6      	b.n	8011c8c <_printf_float+0x244>
 8011cbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011cc0:	2b00      	cmp	r3, #0
 8011cc2:	dc39      	bgt.n	8011d38 <_printf_float+0x2f0>
 8011cc4:	4a1b      	ldr	r2, [pc, #108]	; (8011d34 <_printf_float+0x2ec>)
 8011cc6:	2301      	movs	r3, #1
 8011cc8:	4631      	mov	r1, r6
 8011cca:	4628      	mov	r0, r5
 8011ccc:	47b8      	blx	r7
 8011cce:	3001      	adds	r0, #1
 8011cd0:	f43f af19 	beq.w	8011b06 <_printf_float+0xbe>
 8011cd4:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8011cd8:	4313      	orrs	r3, r2
 8011cda:	d102      	bne.n	8011ce2 <_printf_float+0x29a>
 8011cdc:	6823      	ldr	r3, [r4, #0]
 8011cde:	07d9      	lsls	r1, r3, #31
 8011ce0:	d5d8      	bpl.n	8011c94 <_printf_float+0x24c>
 8011ce2:	ee18 3a10 	vmov	r3, s16
 8011ce6:	4652      	mov	r2, sl
 8011ce8:	4631      	mov	r1, r6
 8011cea:	4628      	mov	r0, r5
 8011cec:	47b8      	blx	r7
 8011cee:	3001      	adds	r0, #1
 8011cf0:	f43f af09 	beq.w	8011b06 <_printf_float+0xbe>
 8011cf4:	f04f 0900 	mov.w	r9, #0
 8011cf8:	f104 0a1a 	add.w	sl, r4, #26
 8011cfc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011cfe:	425b      	negs	r3, r3
 8011d00:	454b      	cmp	r3, r9
 8011d02:	dc01      	bgt.n	8011d08 <_printf_float+0x2c0>
 8011d04:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011d06:	e792      	b.n	8011c2e <_printf_float+0x1e6>
 8011d08:	2301      	movs	r3, #1
 8011d0a:	4652      	mov	r2, sl
 8011d0c:	4631      	mov	r1, r6
 8011d0e:	4628      	mov	r0, r5
 8011d10:	47b8      	blx	r7
 8011d12:	3001      	adds	r0, #1
 8011d14:	f43f aef7 	beq.w	8011b06 <_printf_float+0xbe>
 8011d18:	f109 0901 	add.w	r9, r9, #1
 8011d1c:	e7ee      	b.n	8011cfc <_printf_float+0x2b4>
 8011d1e:	bf00      	nop
 8011d20:	7fefffff 	.word	0x7fefffff
 8011d24:	08014800 	.word	0x08014800
 8011d28:	08014804 	.word	0x08014804
 8011d2c:	08014808 	.word	0x08014808
 8011d30:	0801480c 	.word	0x0801480c
 8011d34:	08014810 	.word	0x08014810
 8011d38:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011d3a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8011d3c:	429a      	cmp	r2, r3
 8011d3e:	bfa8      	it	ge
 8011d40:	461a      	movge	r2, r3
 8011d42:	2a00      	cmp	r2, #0
 8011d44:	4691      	mov	r9, r2
 8011d46:	dc37      	bgt.n	8011db8 <_printf_float+0x370>
 8011d48:	f04f 0b00 	mov.w	fp, #0
 8011d4c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8011d50:	f104 021a 	add.w	r2, r4, #26
 8011d54:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8011d56:	9305      	str	r3, [sp, #20]
 8011d58:	eba3 0309 	sub.w	r3, r3, r9
 8011d5c:	455b      	cmp	r3, fp
 8011d5e:	dc33      	bgt.n	8011dc8 <_printf_float+0x380>
 8011d60:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8011d64:	429a      	cmp	r2, r3
 8011d66:	db3b      	blt.n	8011de0 <_printf_float+0x398>
 8011d68:	6823      	ldr	r3, [r4, #0]
 8011d6a:	07da      	lsls	r2, r3, #31
 8011d6c:	d438      	bmi.n	8011de0 <_printf_float+0x398>
 8011d6e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8011d72:	eba2 0903 	sub.w	r9, r2, r3
 8011d76:	9b05      	ldr	r3, [sp, #20]
 8011d78:	1ad2      	subs	r2, r2, r3
 8011d7a:	4591      	cmp	r9, r2
 8011d7c:	bfa8      	it	ge
 8011d7e:	4691      	movge	r9, r2
 8011d80:	f1b9 0f00 	cmp.w	r9, #0
 8011d84:	dc35      	bgt.n	8011df2 <_printf_float+0x3aa>
 8011d86:	f04f 0800 	mov.w	r8, #0
 8011d8a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8011d8e:	f104 0a1a 	add.w	sl, r4, #26
 8011d92:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8011d96:	1a9b      	subs	r3, r3, r2
 8011d98:	eba3 0309 	sub.w	r3, r3, r9
 8011d9c:	4543      	cmp	r3, r8
 8011d9e:	f77f af79 	ble.w	8011c94 <_printf_float+0x24c>
 8011da2:	2301      	movs	r3, #1
 8011da4:	4652      	mov	r2, sl
 8011da6:	4631      	mov	r1, r6
 8011da8:	4628      	mov	r0, r5
 8011daa:	47b8      	blx	r7
 8011dac:	3001      	adds	r0, #1
 8011dae:	f43f aeaa 	beq.w	8011b06 <_printf_float+0xbe>
 8011db2:	f108 0801 	add.w	r8, r8, #1
 8011db6:	e7ec      	b.n	8011d92 <_printf_float+0x34a>
 8011db8:	4613      	mov	r3, r2
 8011dba:	4631      	mov	r1, r6
 8011dbc:	4642      	mov	r2, r8
 8011dbe:	4628      	mov	r0, r5
 8011dc0:	47b8      	blx	r7
 8011dc2:	3001      	adds	r0, #1
 8011dc4:	d1c0      	bne.n	8011d48 <_printf_float+0x300>
 8011dc6:	e69e      	b.n	8011b06 <_printf_float+0xbe>
 8011dc8:	2301      	movs	r3, #1
 8011dca:	4631      	mov	r1, r6
 8011dcc:	4628      	mov	r0, r5
 8011dce:	9205      	str	r2, [sp, #20]
 8011dd0:	47b8      	blx	r7
 8011dd2:	3001      	adds	r0, #1
 8011dd4:	f43f ae97 	beq.w	8011b06 <_printf_float+0xbe>
 8011dd8:	9a05      	ldr	r2, [sp, #20]
 8011dda:	f10b 0b01 	add.w	fp, fp, #1
 8011dde:	e7b9      	b.n	8011d54 <_printf_float+0x30c>
 8011de0:	ee18 3a10 	vmov	r3, s16
 8011de4:	4652      	mov	r2, sl
 8011de6:	4631      	mov	r1, r6
 8011de8:	4628      	mov	r0, r5
 8011dea:	47b8      	blx	r7
 8011dec:	3001      	adds	r0, #1
 8011dee:	d1be      	bne.n	8011d6e <_printf_float+0x326>
 8011df0:	e689      	b.n	8011b06 <_printf_float+0xbe>
 8011df2:	9a05      	ldr	r2, [sp, #20]
 8011df4:	464b      	mov	r3, r9
 8011df6:	4442      	add	r2, r8
 8011df8:	4631      	mov	r1, r6
 8011dfa:	4628      	mov	r0, r5
 8011dfc:	47b8      	blx	r7
 8011dfe:	3001      	adds	r0, #1
 8011e00:	d1c1      	bne.n	8011d86 <_printf_float+0x33e>
 8011e02:	e680      	b.n	8011b06 <_printf_float+0xbe>
 8011e04:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011e06:	2a01      	cmp	r2, #1
 8011e08:	dc01      	bgt.n	8011e0e <_printf_float+0x3c6>
 8011e0a:	07db      	lsls	r3, r3, #31
 8011e0c:	d53a      	bpl.n	8011e84 <_printf_float+0x43c>
 8011e0e:	2301      	movs	r3, #1
 8011e10:	4642      	mov	r2, r8
 8011e12:	4631      	mov	r1, r6
 8011e14:	4628      	mov	r0, r5
 8011e16:	47b8      	blx	r7
 8011e18:	3001      	adds	r0, #1
 8011e1a:	f43f ae74 	beq.w	8011b06 <_printf_float+0xbe>
 8011e1e:	ee18 3a10 	vmov	r3, s16
 8011e22:	4652      	mov	r2, sl
 8011e24:	4631      	mov	r1, r6
 8011e26:	4628      	mov	r0, r5
 8011e28:	47b8      	blx	r7
 8011e2a:	3001      	adds	r0, #1
 8011e2c:	f43f ae6b 	beq.w	8011b06 <_printf_float+0xbe>
 8011e30:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8011e34:	2200      	movs	r2, #0
 8011e36:	2300      	movs	r3, #0
 8011e38:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8011e3c:	f7ee fe6c 	bl	8000b18 <__aeabi_dcmpeq>
 8011e40:	b9d8      	cbnz	r0, 8011e7a <_printf_float+0x432>
 8011e42:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8011e46:	f108 0201 	add.w	r2, r8, #1
 8011e4a:	4631      	mov	r1, r6
 8011e4c:	4628      	mov	r0, r5
 8011e4e:	47b8      	blx	r7
 8011e50:	3001      	adds	r0, #1
 8011e52:	d10e      	bne.n	8011e72 <_printf_float+0x42a>
 8011e54:	e657      	b.n	8011b06 <_printf_float+0xbe>
 8011e56:	2301      	movs	r3, #1
 8011e58:	4652      	mov	r2, sl
 8011e5a:	4631      	mov	r1, r6
 8011e5c:	4628      	mov	r0, r5
 8011e5e:	47b8      	blx	r7
 8011e60:	3001      	adds	r0, #1
 8011e62:	f43f ae50 	beq.w	8011b06 <_printf_float+0xbe>
 8011e66:	f108 0801 	add.w	r8, r8, #1
 8011e6a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011e6c:	3b01      	subs	r3, #1
 8011e6e:	4543      	cmp	r3, r8
 8011e70:	dcf1      	bgt.n	8011e56 <_printf_float+0x40e>
 8011e72:	464b      	mov	r3, r9
 8011e74:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8011e78:	e6da      	b.n	8011c30 <_printf_float+0x1e8>
 8011e7a:	f04f 0800 	mov.w	r8, #0
 8011e7e:	f104 0a1a 	add.w	sl, r4, #26
 8011e82:	e7f2      	b.n	8011e6a <_printf_float+0x422>
 8011e84:	2301      	movs	r3, #1
 8011e86:	4642      	mov	r2, r8
 8011e88:	e7df      	b.n	8011e4a <_printf_float+0x402>
 8011e8a:	2301      	movs	r3, #1
 8011e8c:	464a      	mov	r2, r9
 8011e8e:	4631      	mov	r1, r6
 8011e90:	4628      	mov	r0, r5
 8011e92:	47b8      	blx	r7
 8011e94:	3001      	adds	r0, #1
 8011e96:	f43f ae36 	beq.w	8011b06 <_printf_float+0xbe>
 8011e9a:	f108 0801 	add.w	r8, r8, #1
 8011e9e:	68e3      	ldr	r3, [r4, #12]
 8011ea0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8011ea2:	1a5b      	subs	r3, r3, r1
 8011ea4:	4543      	cmp	r3, r8
 8011ea6:	dcf0      	bgt.n	8011e8a <_printf_float+0x442>
 8011ea8:	e6f8      	b.n	8011c9c <_printf_float+0x254>
 8011eaa:	f04f 0800 	mov.w	r8, #0
 8011eae:	f104 0919 	add.w	r9, r4, #25
 8011eb2:	e7f4      	b.n	8011e9e <_printf_float+0x456>

08011eb4 <_printf_common>:
 8011eb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011eb8:	4616      	mov	r6, r2
 8011eba:	4699      	mov	r9, r3
 8011ebc:	688a      	ldr	r2, [r1, #8]
 8011ebe:	690b      	ldr	r3, [r1, #16]
 8011ec0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8011ec4:	4293      	cmp	r3, r2
 8011ec6:	bfb8      	it	lt
 8011ec8:	4613      	movlt	r3, r2
 8011eca:	6033      	str	r3, [r6, #0]
 8011ecc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8011ed0:	4607      	mov	r7, r0
 8011ed2:	460c      	mov	r4, r1
 8011ed4:	b10a      	cbz	r2, 8011eda <_printf_common+0x26>
 8011ed6:	3301      	adds	r3, #1
 8011ed8:	6033      	str	r3, [r6, #0]
 8011eda:	6823      	ldr	r3, [r4, #0]
 8011edc:	0699      	lsls	r1, r3, #26
 8011ede:	bf42      	ittt	mi
 8011ee0:	6833      	ldrmi	r3, [r6, #0]
 8011ee2:	3302      	addmi	r3, #2
 8011ee4:	6033      	strmi	r3, [r6, #0]
 8011ee6:	6825      	ldr	r5, [r4, #0]
 8011ee8:	f015 0506 	ands.w	r5, r5, #6
 8011eec:	d106      	bne.n	8011efc <_printf_common+0x48>
 8011eee:	f104 0a19 	add.w	sl, r4, #25
 8011ef2:	68e3      	ldr	r3, [r4, #12]
 8011ef4:	6832      	ldr	r2, [r6, #0]
 8011ef6:	1a9b      	subs	r3, r3, r2
 8011ef8:	42ab      	cmp	r3, r5
 8011efa:	dc26      	bgt.n	8011f4a <_printf_common+0x96>
 8011efc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8011f00:	1e13      	subs	r3, r2, #0
 8011f02:	6822      	ldr	r2, [r4, #0]
 8011f04:	bf18      	it	ne
 8011f06:	2301      	movne	r3, #1
 8011f08:	0692      	lsls	r2, r2, #26
 8011f0a:	d42b      	bmi.n	8011f64 <_printf_common+0xb0>
 8011f0c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8011f10:	4649      	mov	r1, r9
 8011f12:	4638      	mov	r0, r7
 8011f14:	47c0      	blx	r8
 8011f16:	3001      	adds	r0, #1
 8011f18:	d01e      	beq.n	8011f58 <_printf_common+0xa4>
 8011f1a:	6823      	ldr	r3, [r4, #0]
 8011f1c:	6922      	ldr	r2, [r4, #16]
 8011f1e:	f003 0306 	and.w	r3, r3, #6
 8011f22:	2b04      	cmp	r3, #4
 8011f24:	bf02      	ittt	eq
 8011f26:	68e5      	ldreq	r5, [r4, #12]
 8011f28:	6833      	ldreq	r3, [r6, #0]
 8011f2a:	1aed      	subeq	r5, r5, r3
 8011f2c:	68a3      	ldr	r3, [r4, #8]
 8011f2e:	bf0c      	ite	eq
 8011f30:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011f34:	2500      	movne	r5, #0
 8011f36:	4293      	cmp	r3, r2
 8011f38:	bfc4      	itt	gt
 8011f3a:	1a9b      	subgt	r3, r3, r2
 8011f3c:	18ed      	addgt	r5, r5, r3
 8011f3e:	2600      	movs	r6, #0
 8011f40:	341a      	adds	r4, #26
 8011f42:	42b5      	cmp	r5, r6
 8011f44:	d11a      	bne.n	8011f7c <_printf_common+0xc8>
 8011f46:	2000      	movs	r0, #0
 8011f48:	e008      	b.n	8011f5c <_printf_common+0xa8>
 8011f4a:	2301      	movs	r3, #1
 8011f4c:	4652      	mov	r2, sl
 8011f4e:	4649      	mov	r1, r9
 8011f50:	4638      	mov	r0, r7
 8011f52:	47c0      	blx	r8
 8011f54:	3001      	adds	r0, #1
 8011f56:	d103      	bne.n	8011f60 <_printf_common+0xac>
 8011f58:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011f5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011f60:	3501      	adds	r5, #1
 8011f62:	e7c6      	b.n	8011ef2 <_printf_common+0x3e>
 8011f64:	18e1      	adds	r1, r4, r3
 8011f66:	1c5a      	adds	r2, r3, #1
 8011f68:	2030      	movs	r0, #48	; 0x30
 8011f6a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8011f6e:	4422      	add	r2, r4
 8011f70:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8011f74:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8011f78:	3302      	adds	r3, #2
 8011f7a:	e7c7      	b.n	8011f0c <_printf_common+0x58>
 8011f7c:	2301      	movs	r3, #1
 8011f7e:	4622      	mov	r2, r4
 8011f80:	4649      	mov	r1, r9
 8011f82:	4638      	mov	r0, r7
 8011f84:	47c0      	blx	r8
 8011f86:	3001      	adds	r0, #1
 8011f88:	d0e6      	beq.n	8011f58 <_printf_common+0xa4>
 8011f8a:	3601      	adds	r6, #1
 8011f8c:	e7d9      	b.n	8011f42 <_printf_common+0x8e>
	...

08011f90 <_printf_i>:
 8011f90:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011f94:	7e0f      	ldrb	r7, [r1, #24]
 8011f96:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8011f98:	2f78      	cmp	r7, #120	; 0x78
 8011f9a:	4691      	mov	r9, r2
 8011f9c:	4680      	mov	r8, r0
 8011f9e:	460c      	mov	r4, r1
 8011fa0:	469a      	mov	sl, r3
 8011fa2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8011fa6:	d807      	bhi.n	8011fb8 <_printf_i+0x28>
 8011fa8:	2f62      	cmp	r7, #98	; 0x62
 8011faa:	d80a      	bhi.n	8011fc2 <_printf_i+0x32>
 8011fac:	2f00      	cmp	r7, #0
 8011fae:	f000 80d4 	beq.w	801215a <_printf_i+0x1ca>
 8011fb2:	2f58      	cmp	r7, #88	; 0x58
 8011fb4:	f000 80c0 	beq.w	8012138 <_printf_i+0x1a8>
 8011fb8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011fbc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8011fc0:	e03a      	b.n	8012038 <_printf_i+0xa8>
 8011fc2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8011fc6:	2b15      	cmp	r3, #21
 8011fc8:	d8f6      	bhi.n	8011fb8 <_printf_i+0x28>
 8011fca:	a101      	add	r1, pc, #4	; (adr r1, 8011fd0 <_printf_i+0x40>)
 8011fcc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8011fd0:	08012029 	.word	0x08012029
 8011fd4:	0801203d 	.word	0x0801203d
 8011fd8:	08011fb9 	.word	0x08011fb9
 8011fdc:	08011fb9 	.word	0x08011fb9
 8011fe0:	08011fb9 	.word	0x08011fb9
 8011fe4:	08011fb9 	.word	0x08011fb9
 8011fe8:	0801203d 	.word	0x0801203d
 8011fec:	08011fb9 	.word	0x08011fb9
 8011ff0:	08011fb9 	.word	0x08011fb9
 8011ff4:	08011fb9 	.word	0x08011fb9
 8011ff8:	08011fb9 	.word	0x08011fb9
 8011ffc:	08012141 	.word	0x08012141
 8012000:	08012069 	.word	0x08012069
 8012004:	080120fb 	.word	0x080120fb
 8012008:	08011fb9 	.word	0x08011fb9
 801200c:	08011fb9 	.word	0x08011fb9
 8012010:	08012163 	.word	0x08012163
 8012014:	08011fb9 	.word	0x08011fb9
 8012018:	08012069 	.word	0x08012069
 801201c:	08011fb9 	.word	0x08011fb9
 8012020:	08011fb9 	.word	0x08011fb9
 8012024:	08012103 	.word	0x08012103
 8012028:	682b      	ldr	r3, [r5, #0]
 801202a:	1d1a      	adds	r2, r3, #4
 801202c:	681b      	ldr	r3, [r3, #0]
 801202e:	602a      	str	r2, [r5, #0]
 8012030:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012034:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8012038:	2301      	movs	r3, #1
 801203a:	e09f      	b.n	801217c <_printf_i+0x1ec>
 801203c:	6820      	ldr	r0, [r4, #0]
 801203e:	682b      	ldr	r3, [r5, #0]
 8012040:	0607      	lsls	r7, r0, #24
 8012042:	f103 0104 	add.w	r1, r3, #4
 8012046:	6029      	str	r1, [r5, #0]
 8012048:	d501      	bpl.n	801204e <_printf_i+0xbe>
 801204a:	681e      	ldr	r6, [r3, #0]
 801204c:	e003      	b.n	8012056 <_printf_i+0xc6>
 801204e:	0646      	lsls	r6, r0, #25
 8012050:	d5fb      	bpl.n	801204a <_printf_i+0xba>
 8012052:	f9b3 6000 	ldrsh.w	r6, [r3]
 8012056:	2e00      	cmp	r6, #0
 8012058:	da03      	bge.n	8012062 <_printf_i+0xd2>
 801205a:	232d      	movs	r3, #45	; 0x2d
 801205c:	4276      	negs	r6, r6
 801205e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012062:	485a      	ldr	r0, [pc, #360]	; (80121cc <_printf_i+0x23c>)
 8012064:	230a      	movs	r3, #10
 8012066:	e012      	b.n	801208e <_printf_i+0xfe>
 8012068:	682b      	ldr	r3, [r5, #0]
 801206a:	6820      	ldr	r0, [r4, #0]
 801206c:	1d19      	adds	r1, r3, #4
 801206e:	6029      	str	r1, [r5, #0]
 8012070:	0605      	lsls	r5, r0, #24
 8012072:	d501      	bpl.n	8012078 <_printf_i+0xe8>
 8012074:	681e      	ldr	r6, [r3, #0]
 8012076:	e002      	b.n	801207e <_printf_i+0xee>
 8012078:	0641      	lsls	r1, r0, #25
 801207a:	d5fb      	bpl.n	8012074 <_printf_i+0xe4>
 801207c:	881e      	ldrh	r6, [r3, #0]
 801207e:	4853      	ldr	r0, [pc, #332]	; (80121cc <_printf_i+0x23c>)
 8012080:	2f6f      	cmp	r7, #111	; 0x6f
 8012082:	bf0c      	ite	eq
 8012084:	2308      	moveq	r3, #8
 8012086:	230a      	movne	r3, #10
 8012088:	2100      	movs	r1, #0
 801208a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801208e:	6865      	ldr	r5, [r4, #4]
 8012090:	60a5      	str	r5, [r4, #8]
 8012092:	2d00      	cmp	r5, #0
 8012094:	bfa2      	ittt	ge
 8012096:	6821      	ldrge	r1, [r4, #0]
 8012098:	f021 0104 	bicge.w	r1, r1, #4
 801209c:	6021      	strge	r1, [r4, #0]
 801209e:	b90e      	cbnz	r6, 80120a4 <_printf_i+0x114>
 80120a0:	2d00      	cmp	r5, #0
 80120a2:	d04b      	beq.n	801213c <_printf_i+0x1ac>
 80120a4:	4615      	mov	r5, r2
 80120a6:	fbb6 f1f3 	udiv	r1, r6, r3
 80120aa:	fb03 6711 	mls	r7, r3, r1, r6
 80120ae:	5dc7      	ldrb	r7, [r0, r7]
 80120b0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80120b4:	4637      	mov	r7, r6
 80120b6:	42bb      	cmp	r3, r7
 80120b8:	460e      	mov	r6, r1
 80120ba:	d9f4      	bls.n	80120a6 <_printf_i+0x116>
 80120bc:	2b08      	cmp	r3, #8
 80120be:	d10b      	bne.n	80120d8 <_printf_i+0x148>
 80120c0:	6823      	ldr	r3, [r4, #0]
 80120c2:	07de      	lsls	r6, r3, #31
 80120c4:	d508      	bpl.n	80120d8 <_printf_i+0x148>
 80120c6:	6923      	ldr	r3, [r4, #16]
 80120c8:	6861      	ldr	r1, [r4, #4]
 80120ca:	4299      	cmp	r1, r3
 80120cc:	bfde      	ittt	le
 80120ce:	2330      	movle	r3, #48	; 0x30
 80120d0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80120d4:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80120d8:	1b52      	subs	r2, r2, r5
 80120da:	6122      	str	r2, [r4, #16]
 80120dc:	f8cd a000 	str.w	sl, [sp]
 80120e0:	464b      	mov	r3, r9
 80120e2:	aa03      	add	r2, sp, #12
 80120e4:	4621      	mov	r1, r4
 80120e6:	4640      	mov	r0, r8
 80120e8:	f7ff fee4 	bl	8011eb4 <_printf_common>
 80120ec:	3001      	adds	r0, #1
 80120ee:	d14a      	bne.n	8012186 <_printf_i+0x1f6>
 80120f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80120f4:	b004      	add	sp, #16
 80120f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80120fa:	6823      	ldr	r3, [r4, #0]
 80120fc:	f043 0320 	orr.w	r3, r3, #32
 8012100:	6023      	str	r3, [r4, #0]
 8012102:	4833      	ldr	r0, [pc, #204]	; (80121d0 <_printf_i+0x240>)
 8012104:	2778      	movs	r7, #120	; 0x78
 8012106:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801210a:	6823      	ldr	r3, [r4, #0]
 801210c:	6829      	ldr	r1, [r5, #0]
 801210e:	061f      	lsls	r7, r3, #24
 8012110:	f851 6b04 	ldr.w	r6, [r1], #4
 8012114:	d402      	bmi.n	801211c <_printf_i+0x18c>
 8012116:	065f      	lsls	r7, r3, #25
 8012118:	bf48      	it	mi
 801211a:	b2b6      	uxthmi	r6, r6
 801211c:	07df      	lsls	r7, r3, #31
 801211e:	bf48      	it	mi
 8012120:	f043 0320 	orrmi.w	r3, r3, #32
 8012124:	6029      	str	r1, [r5, #0]
 8012126:	bf48      	it	mi
 8012128:	6023      	strmi	r3, [r4, #0]
 801212a:	b91e      	cbnz	r6, 8012134 <_printf_i+0x1a4>
 801212c:	6823      	ldr	r3, [r4, #0]
 801212e:	f023 0320 	bic.w	r3, r3, #32
 8012132:	6023      	str	r3, [r4, #0]
 8012134:	2310      	movs	r3, #16
 8012136:	e7a7      	b.n	8012088 <_printf_i+0xf8>
 8012138:	4824      	ldr	r0, [pc, #144]	; (80121cc <_printf_i+0x23c>)
 801213a:	e7e4      	b.n	8012106 <_printf_i+0x176>
 801213c:	4615      	mov	r5, r2
 801213e:	e7bd      	b.n	80120bc <_printf_i+0x12c>
 8012140:	682b      	ldr	r3, [r5, #0]
 8012142:	6826      	ldr	r6, [r4, #0]
 8012144:	6961      	ldr	r1, [r4, #20]
 8012146:	1d18      	adds	r0, r3, #4
 8012148:	6028      	str	r0, [r5, #0]
 801214a:	0635      	lsls	r5, r6, #24
 801214c:	681b      	ldr	r3, [r3, #0]
 801214e:	d501      	bpl.n	8012154 <_printf_i+0x1c4>
 8012150:	6019      	str	r1, [r3, #0]
 8012152:	e002      	b.n	801215a <_printf_i+0x1ca>
 8012154:	0670      	lsls	r0, r6, #25
 8012156:	d5fb      	bpl.n	8012150 <_printf_i+0x1c0>
 8012158:	8019      	strh	r1, [r3, #0]
 801215a:	2300      	movs	r3, #0
 801215c:	6123      	str	r3, [r4, #16]
 801215e:	4615      	mov	r5, r2
 8012160:	e7bc      	b.n	80120dc <_printf_i+0x14c>
 8012162:	682b      	ldr	r3, [r5, #0]
 8012164:	1d1a      	adds	r2, r3, #4
 8012166:	602a      	str	r2, [r5, #0]
 8012168:	681d      	ldr	r5, [r3, #0]
 801216a:	6862      	ldr	r2, [r4, #4]
 801216c:	2100      	movs	r1, #0
 801216e:	4628      	mov	r0, r5
 8012170:	f7ee f856 	bl	8000220 <memchr>
 8012174:	b108      	cbz	r0, 801217a <_printf_i+0x1ea>
 8012176:	1b40      	subs	r0, r0, r5
 8012178:	6060      	str	r0, [r4, #4]
 801217a:	6863      	ldr	r3, [r4, #4]
 801217c:	6123      	str	r3, [r4, #16]
 801217e:	2300      	movs	r3, #0
 8012180:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012184:	e7aa      	b.n	80120dc <_printf_i+0x14c>
 8012186:	6923      	ldr	r3, [r4, #16]
 8012188:	462a      	mov	r2, r5
 801218a:	4649      	mov	r1, r9
 801218c:	4640      	mov	r0, r8
 801218e:	47d0      	blx	sl
 8012190:	3001      	adds	r0, #1
 8012192:	d0ad      	beq.n	80120f0 <_printf_i+0x160>
 8012194:	6823      	ldr	r3, [r4, #0]
 8012196:	079b      	lsls	r3, r3, #30
 8012198:	d413      	bmi.n	80121c2 <_printf_i+0x232>
 801219a:	68e0      	ldr	r0, [r4, #12]
 801219c:	9b03      	ldr	r3, [sp, #12]
 801219e:	4298      	cmp	r0, r3
 80121a0:	bfb8      	it	lt
 80121a2:	4618      	movlt	r0, r3
 80121a4:	e7a6      	b.n	80120f4 <_printf_i+0x164>
 80121a6:	2301      	movs	r3, #1
 80121a8:	4632      	mov	r2, r6
 80121aa:	4649      	mov	r1, r9
 80121ac:	4640      	mov	r0, r8
 80121ae:	47d0      	blx	sl
 80121b0:	3001      	adds	r0, #1
 80121b2:	d09d      	beq.n	80120f0 <_printf_i+0x160>
 80121b4:	3501      	adds	r5, #1
 80121b6:	68e3      	ldr	r3, [r4, #12]
 80121b8:	9903      	ldr	r1, [sp, #12]
 80121ba:	1a5b      	subs	r3, r3, r1
 80121bc:	42ab      	cmp	r3, r5
 80121be:	dcf2      	bgt.n	80121a6 <_printf_i+0x216>
 80121c0:	e7eb      	b.n	801219a <_printf_i+0x20a>
 80121c2:	2500      	movs	r5, #0
 80121c4:	f104 0619 	add.w	r6, r4, #25
 80121c8:	e7f5      	b.n	80121b6 <_printf_i+0x226>
 80121ca:	bf00      	nop
 80121cc:	08014812 	.word	0x08014812
 80121d0:	08014823 	.word	0x08014823

080121d4 <std>:
 80121d4:	2300      	movs	r3, #0
 80121d6:	b510      	push	{r4, lr}
 80121d8:	4604      	mov	r4, r0
 80121da:	e9c0 3300 	strd	r3, r3, [r0]
 80121de:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80121e2:	6083      	str	r3, [r0, #8]
 80121e4:	8181      	strh	r1, [r0, #12]
 80121e6:	6643      	str	r3, [r0, #100]	; 0x64
 80121e8:	81c2      	strh	r2, [r0, #14]
 80121ea:	6183      	str	r3, [r0, #24]
 80121ec:	4619      	mov	r1, r3
 80121ee:	2208      	movs	r2, #8
 80121f0:	305c      	adds	r0, #92	; 0x5c
 80121f2:	f000 f9e5 	bl	80125c0 <memset>
 80121f6:	4b05      	ldr	r3, [pc, #20]	; (801220c <std+0x38>)
 80121f8:	6263      	str	r3, [r4, #36]	; 0x24
 80121fa:	4b05      	ldr	r3, [pc, #20]	; (8012210 <std+0x3c>)
 80121fc:	62a3      	str	r3, [r4, #40]	; 0x28
 80121fe:	4b05      	ldr	r3, [pc, #20]	; (8012214 <std+0x40>)
 8012200:	62e3      	str	r3, [r4, #44]	; 0x2c
 8012202:	4b05      	ldr	r3, [pc, #20]	; (8012218 <std+0x44>)
 8012204:	6224      	str	r4, [r4, #32]
 8012206:	6323      	str	r3, [r4, #48]	; 0x30
 8012208:	bd10      	pop	{r4, pc}
 801220a:	bf00      	nop
 801220c:	08012411 	.word	0x08012411
 8012210:	08012433 	.word	0x08012433
 8012214:	0801246b 	.word	0x0801246b
 8012218:	0801248f 	.word	0x0801248f

0801221c <stdio_exit_handler>:
 801221c:	4a02      	ldr	r2, [pc, #8]	; (8012228 <stdio_exit_handler+0xc>)
 801221e:	4903      	ldr	r1, [pc, #12]	; (801222c <stdio_exit_handler+0x10>)
 8012220:	4803      	ldr	r0, [pc, #12]	; (8012230 <stdio_exit_handler+0x14>)
 8012222:	f000 b869 	b.w	80122f8 <_fwalk_sglue>
 8012226:	bf00      	nop
 8012228:	20000188 	.word	0x20000188
 801222c:	08014109 	.word	0x08014109
 8012230:	20000194 	.word	0x20000194

08012234 <cleanup_stdio>:
 8012234:	6841      	ldr	r1, [r0, #4]
 8012236:	4b0c      	ldr	r3, [pc, #48]	; (8012268 <cleanup_stdio+0x34>)
 8012238:	4299      	cmp	r1, r3
 801223a:	b510      	push	{r4, lr}
 801223c:	4604      	mov	r4, r0
 801223e:	d001      	beq.n	8012244 <cleanup_stdio+0x10>
 8012240:	f001 ff62 	bl	8014108 <_fflush_r>
 8012244:	68a1      	ldr	r1, [r4, #8]
 8012246:	4b09      	ldr	r3, [pc, #36]	; (801226c <cleanup_stdio+0x38>)
 8012248:	4299      	cmp	r1, r3
 801224a:	d002      	beq.n	8012252 <cleanup_stdio+0x1e>
 801224c:	4620      	mov	r0, r4
 801224e:	f001 ff5b 	bl	8014108 <_fflush_r>
 8012252:	68e1      	ldr	r1, [r4, #12]
 8012254:	4b06      	ldr	r3, [pc, #24]	; (8012270 <cleanup_stdio+0x3c>)
 8012256:	4299      	cmp	r1, r3
 8012258:	d004      	beq.n	8012264 <cleanup_stdio+0x30>
 801225a:	4620      	mov	r0, r4
 801225c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012260:	f001 bf52 	b.w	8014108 <_fflush_r>
 8012264:	bd10      	pop	{r4, pc}
 8012266:	bf00      	nop
 8012268:	20006664 	.word	0x20006664
 801226c:	200066cc 	.word	0x200066cc
 8012270:	20006734 	.word	0x20006734

08012274 <global_stdio_init.part.0>:
 8012274:	b510      	push	{r4, lr}
 8012276:	4b0b      	ldr	r3, [pc, #44]	; (80122a4 <global_stdio_init.part.0+0x30>)
 8012278:	4c0b      	ldr	r4, [pc, #44]	; (80122a8 <global_stdio_init.part.0+0x34>)
 801227a:	4a0c      	ldr	r2, [pc, #48]	; (80122ac <global_stdio_init.part.0+0x38>)
 801227c:	601a      	str	r2, [r3, #0]
 801227e:	4620      	mov	r0, r4
 8012280:	2200      	movs	r2, #0
 8012282:	2104      	movs	r1, #4
 8012284:	f7ff ffa6 	bl	80121d4 <std>
 8012288:	f104 0068 	add.w	r0, r4, #104	; 0x68
 801228c:	2201      	movs	r2, #1
 801228e:	2109      	movs	r1, #9
 8012290:	f7ff ffa0 	bl	80121d4 <std>
 8012294:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8012298:	2202      	movs	r2, #2
 801229a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801229e:	2112      	movs	r1, #18
 80122a0:	f7ff bf98 	b.w	80121d4 <std>
 80122a4:	2000679c 	.word	0x2000679c
 80122a8:	20006664 	.word	0x20006664
 80122ac:	0801221d 	.word	0x0801221d

080122b0 <__sfp_lock_acquire>:
 80122b0:	4801      	ldr	r0, [pc, #4]	; (80122b8 <__sfp_lock_acquire+0x8>)
 80122b2:	f000 ba57 	b.w	8012764 <__retarget_lock_acquire_recursive>
 80122b6:	bf00      	nop
 80122b8:	200067a5 	.word	0x200067a5

080122bc <__sfp_lock_release>:
 80122bc:	4801      	ldr	r0, [pc, #4]	; (80122c4 <__sfp_lock_release+0x8>)
 80122be:	f000 ba52 	b.w	8012766 <__retarget_lock_release_recursive>
 80122c2:	bf00      	nop
 80122c4:	200067a5 	.word	0x200067a5

080122c8 <__sinit>:
 80122c8:	b510      	push	{r4, lr}
 80122ca:	4604      	mov	r4, r0
 80122cc:	f7ff fff0 	bl	80122b0 <__sfp_lock_acquire>
 80122d0:	6a23      	ldr	r3, [r4, #32]
 80122d2:	b11b      	cbz	r3, 80122dc <__sinit+0x14>
 80122d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80122d8:	f7ff bff0 	b.w	80122bc <__sfp_lock_release>
 80122dc:	4b04      	ldr	r3, [pc, #16]	; (80122f0 <__sinit+0x28>)
 80122de:	6223      	str	r3, [r4, #32]
 80122e0:	4b04      	ldr	r3, [pc, #16]	; (80122f4 <__sinit+0x2c>)
 80122e2:	681b      	ldr	r3, [r3, #0]
 80122e4:	2b00      	cmp	r3, #0
 80122e6:	d1f5      	bne.n	80122d4 <__sinit+0xc>
 80122e8:	f7ff ffc4 	bl	8012274 <global_stdio_init.part.0>
 80122ec:	e7f2      	b.n	80122d4 <__sinit+0xc>
 80122ee:	bf00      	nop
 80122f0:	08012235 	.word	0x08012235
 80122f4:	2000679c 	.word	0x2000679c

080122f8 <_fwalk_sglue>:
 80122f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80122fc:	4607      	mov	r7, r0
 80122fe:	4688      	mov	r8, r1
 8012300:	4614      	mov	r4, r2
 8012302:	2600      	movs	r6, #0
 8012304:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8012308:	f1b9 0901 	subs.w	r9, r9, #1
 801230c:	d505      	bpl.n	801231a <_fwalk_sglue+0x22>
 801230e:	6824      	ldr	r4, [r4, #0]
 8012310:	2c00      	cmp	r4, #0
 8012312:	d1f7      	bne.n	8012304 <_fwalk_sglue+0xc>
 8012314:	4630      	mov	r0, r6
 8012316:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801231a:	89ab      	ldrh	r3, [r5, #12]
 801231c:	2b01      	cmp	r3, #1
 801231e:	d907      	bls.n	8012330 <_fwalk_sglue+0x38>
 8012320:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8012324:	3301      	adds	r3, #1
 8012326:	d003      	beq.n	8012330 <_fwalk_sglue+0x38>
 8012328:	4629      	mov	r1, r5
 801232a:	4638      	mov	r0, r7
 801232c:	47c0      	blx	r8
 801232e:	4306      	orrs	r6, r0
 8012330:	3568      	adds	r5, #104	; 0x68
 8012332:	e7e9      	b.n	8012308 <_fwalk_sglue+0x10>

08012334 <iprintf>:
 8012334:	b40f      	push	{r0, r1, r2, r3}
 8012336:	b507      	push	{r0, r1, r2, lr}
 8012338:	4906      	ldr	r1, [pc, #24]	; (8012354 <iprintf+0x20>)
 801233a:	ab04      	add	r3, sp, #16
 801233c:	6808      	ldr	r0, [r1, #0]
 801233e:	f853 2b04 	ldr.w	r2, [r3], #4
 8012342:	6881      	ldr	r1, [r0, #8]
 8012344:	9301      	str	r3, [sp, #4]
 8012346:	f001 fd3f 	bl	8013dc8 <_vfiprintf_r>
 801234a:	b003      	add	sp, #12
 801234c:	f85d eb04 	ldr.w	lr, [sp], #4
 8012350:	b004      	add	sp, #16
 8012352:	4770      	bx	lr
 8012354:	200001e0 	.word	0x200001e0

08012358 <_puts_r>:
 8012358:	6a03      	ldr	r3, [r0, #32]
 801235a:	b570      	push	{r4, r5, r6, lr}
 801235c:	6884      	ldr	r4, [r0, #8]
 801235e:	4605      	mov	r5, r0
 8012360:	460e      	mov	r6, r1
 8012362:	b90b      	cbnz	r3, 8012368 <_puts_r+0x10>
 8012364:	f7ff ffb0 	bl	80122c8 <__sinit>
 8012368:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801236a:	07db      	lsls	r3, r3, #31
 801236c:	d405      	bmi.n	801237a <_puts_r+0x22>
 801236e:	89a3      	ldrh	r3, [r4, #12]
 8012370:	0598      	lsls	r0, r3, #22
 8012372:	d402      	bmi.n	801237a <_puts_r+0x22>
 8012374:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012376:	f000 f9f5 	bl	8012764 <__retarget_lock_acquire_recursive>
 801237a:	89a3      	ldrh	r3, [r4, #12]
 801237c:	0719      	lsls	r1, r3, #28
 801237e:	d513      	bpl.n	80123a8 <_puts_r+0x50>
 8012380:	6923      	ldr	r3, [r4, #16]
 8012382:	b18b      	cbz	r3, 80123a8 <_puts_r+0x50>
 8012384:	3e01      	subs	r6, #1
 8012386:	68a3      	ldr	r3, [r4, #8]
 8012388:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801238c:	3b01      	subs	r3, #1
 801238e:	60a3      	str	r3, [r4, #8]
 8012390:	b9e9      	cbnz	r1, 80123ce <_puts_r+0x76>
 8012392:	2b00      	cmp	r3, #0
 8012394:	da2e      	bge.n	80123f4 <_puts_r+0x9c>
 8012396:	4622      	mov	r2, r4
 8012398:	210a      	movs	r1, #10
 801239a:	4628      	mov	r0, r5
 801239c:	f000 f87b 	bl	8012496 <__swbuf_r>
 80123a0:	3001      	adds	r0, #1
 80123a2:	d007      	beq.n	80123b4 <_puts_r+0x5c>
 80123a4:	250a      	movs	r5, #10
 80123a6:	e007      	b.n	80123b8 <_puts_r+0x60>
 80123a8:	4621      	mov	r1, r4
 80123aa:	4628      	mov	r0, r5
 80123ac:	f000 f8b0 	bl	8012510 <__swsetup_r>
 80123b0:	2800      	cmp	r0, #0
 80123b2:	d0e7      	beq.n	8012384 <_puts_r+0x2c>
 80123b4:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80123b8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80123ba:	07da      	lsls	r2, r3, #31
 80123bc:	d405      	bmi.n	80123ca <_puts_r+0x72>
 80123be:	89a3      	ldrh	r3, [r4, #12]
 80123c0:	059b      	lsls	r3, r3, #22
 80123c2:	d402      	bmi.n	80123ca <_puts_r+0x72>
 80123c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80123c6:	f000 f9ce 	bl	8012766 <__retarget_lock_release_recursive>
 80123ca:	4628      	mov	r0, r5
 80123cc:	bd70      	pop	{r4, r5, r6, pc}
 80123ce:	2b00      	cmp	r3, #0
 80123d0:	da04      	bge.n	80123dc <_puts_r+0x84>
 80123d2:	69a2      	ldr	r2, [r4, #24]
 80123d4:	429a      	cmp	r2, r3
 80123d6:	dc06      	bgt.n	80123e6 <_puts_r+0x8e>
 80123d8:	290a      	cmp	r1, #10
 80123da:	d004      	beq.n	80123e6 <_puts_r+0x8e>
 80123dc:	6823      	ldr	r3, [r4, #0]
 80123de:	1c5a      	adds	r2, r3, #1
 80123e0:	6022      	str	r2, [r4, #0]
 80123e2:	7019      	strb	r1, [r3, #0]
 80123e4:	e7cf      	b.n	8012386 <_puts_r+0x2e>
 80123e6:	4622      	mov	r2, r4
 80123e8:	4628      	mov	r0, r5
 80123ea:	f000 f854 	bl	8012496 <__swbuf_r>
 80123ee:	3001      	adds	r0, #1
 80123f0:	d1c9      	bne.n	8012386 <_puts_r+0x2e>
 80123f2:	e7df      	b.n	80123b4 <_puts_r+0x5c>
 80123f4:	6823      	ldr	r3, [r4, #0]
 80123f6:	250a      	movs	r5, #10
 80123f8:	1c5a      	adds	r2, r3, #1
 80123fa:	6022      	str	r2, [r4, #0]
 80123fc:	701d      	strb	r5, [r3, #0]
 80123fe:	e7db      	b.n	80123b8 <_puts_r+0x60>

08012400 <puts>:
 8012400:	4b02      	ldr	r3, [pc, #8]	; (801240c <puts+0xc>)
 8012402:	4601      	mov	r1, r0
 8012404:	6818      	ldr	r0, [r3, #0]
 8012406:	f7ff bfa7 	b.w	8012358 <_puts_r>
 801240a:	bf00      	nop
 801240c:	200001e0 	.word	0x200001e0

08012410 <__sread>:
 8012410:	b510      	push	{r4, lr}
 8012412:	460c      	mov	r4, r1
 8012414:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012418:	f000 f956 	bl	80126c8 <_read_r>
 801241c:	2800      	cmp	r0, #0
 801241e:	bfab      	itete	ge
 8012420:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8012422:	89a3      	ldrhlt	r3, [r4, #12]
 8012424:	181b      	addge	r3, r3, r0
 8012426:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801242a:	bfac      	ite	ge
 801242c:	6563      	strge	r3, [r4, #84]	; 0x54
 801242e:	81a3      	strhlt	r3, [r4, #12]
 8012430:	bd10      	pop	{r4, pc}

08012432 <__swrite>:
 8012432:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012436:	461f      	mov	r7, r3
 8012438:	898b      	ldrh	r3, [r1, #12]
 801243a:	05db      	lsls	r3, r3, #23
 801243c:	4605      	mov	r5, r0
 801243e:	460c      	mov	r4, r1
 8012440:	4616      	mov	r6, r2
 8012442:	d505      	bpl.n	8012450 <__swrite+0x1e>
 8012444:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012448:	2302      	movs	r3, #2
 801244a:	2200      	movs	r2, #0
 801244c:	f000 f92a 	bl	80126a4 <_lseek_r>
 8012450:	89a3      	ldrh	r3, [r4, #12]
 8012452:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012456:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801245a:	81a3      	strh	r3, [r4, #12]
 801245c:	4632      	mov	r2, r6
 801245e:	463b      	mov	r3, r7
 8012460:	4628      	mov	r0, r5
 8012462:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012466:	f000 b941 	b.w	80126ec <_write_r>

0801246a <__sseek>:
 801246a:	b510      	push	{r4, lr}
 801246c:	460c      	mov	r4, r1
 801246e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012472:	f000 f917 	bl	80126a4 <_lseek_r>
 8012476:	1c43      	adds	r3, r0, #1
 8012478:	89a3      	ldrh	r3, [r4, #12]
 801247a:	bf15      	itete	ne
 801247c:	6560      	strne	r0, [r4, #84]	; 0x54
 801247e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8012482:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8012486:	81a3      	strheq	r3, [r4, #12]
 8012488:	bf18      	it	ne
 801248a:	81a3      	strhne	r3, [r4, #12]
 801248c:	bd10      	pop	{r4, pc}

0801248e <__sclose>:
 801248e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012492:	f000 b8a1 	b.w	80125d8 <_close_r>

08012496 <__swbuf_r>:
 8012496:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012498:	460e      	mov	r6, r1
 801249a:	4614      	mov	r4, r2
 801249c:	4605      	mov	r5, r0
 801249e:	b118      	cbz	r0, 80124a8 <__swbuf_r+0x12>
 80124a0:	6a03      	ldr	r3, [r0, #32]
 80124a2:	b90b      	cbnz	r3, 80124a8 <__swbuf_r+0x12>
 80124a4:	f7ff ff10 	bl	80122c8 <__sinit>
 80124a8:	69a3      	ldr	r3, [r4, #24]
 80124aa:	60a3      	str	r3, [r4, #8]
 80124ac:	89a3      	ldrh	r3, [r4, #12]
 80124ae:	071a      	lsls	r2, r3, #28
 80124b0:	d525      	bpl.n	80124fe <__swbuf_r+0x68>
 80124b2:	6923      	ldr	r3, [r4, #16]
 80124b4:	b31b      	cbz	r3, 80124fe <__swbuf_r+0x68>
 80124b6:	6823      	ldr	r3, [r4, #0]
 80124b8:	6922      	ldr	r2, [r4, #16]
 80124ba:	1a98      	subs	r0, r3, r2
 80124bc:	6963      	ldr	r3, [r4, #20]
 80124be:	b2f6      	uxtb	r6, r6
 80124c0:	4283      	cmp	r3, r0
 80124c2:	4637      	mov	r7, r6
 80124c4:	dc04      	bgt.n	80124d0 <__swbuf_r+0x3a>
 80124c6:	4621      	mov	r1, r4
 80124c8:	4628      	mov	r0, r5
 80124ca:	f001 fe1d 	bl	8014108 <_fflush_r>
 80124ce:	b9e0      	cbnz	r0, 801250a <__swbuf_r+0x74>
 80124d0:	68a3      	ldr	r3, [r4, #8]
 80124d2:	3b01      	subs	r3, #1
 80124d4:	60a3      	str	r3, [r4, #8]
 80124d6:	6823      	ldr	r3, [r4, #0]
 80124d8:	1c5a      	adds	r2, r3, #1
 80124da:	6022      	str	r2, [r4, #0]
 80124dc:	701e      	strb	r6, [r3, #0]
 80124de:	6962      	ldr	r2, [r4, #20]
 80124e0:	1c43      	adds	r3, r0, #1
 80124e2:	429a      	cmp	r2, r3
 80124e4:	d004      	beq.n	80124f0 <__swbuf_r+0x5a>
 80124e6:	89a3      	ldrh	r3, [r4, #12]
 80124e8:	07db      	lsls	r3, r3, #31
 80124ea:	d506      	bpl.n	80124fa <__swbuf_r+0x64>
 80124ec:	2e0a      	cmp	r6, #10
 80124ee:	d104      	bne.n	80124fa <__swbuf_r+0x64>
 80124f0:	4621      	mov	r1, r4
 80124f2:	4628      	mov	r0, r5
 80124f4:	f001 fe08 	bl	8014108 <_fflush_r>
 80124f8:	b938      	cbnz	r0, 801250a <__swbuf_r+0x74>
 80124fa:	4638      	mov	r0, r7
 80124fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80124fe:	4621      	mov	r1, r4
 8012500:	4628      	mov	r0, r5
 8012502:	f000 f805 	bl	8012510 <__swsetup_r>
 8012506:	2800      	cmp	r0, #0
 8012508:	d0d5      	beq.n	80124b6 <__swbuf_r+0x20>
 801250a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801250e:	e7f4      	b.n	80124fa <__swbuf_r+0x64>

08012510 <__swsetup_r>:
 8012510:	b538      	push	{r3, r4, r5, lr}
 8012512:	4b2a      	ldr	r3, [pc, #168]	; (80125bc <__swsetup_r+0xac>)
 8012514:	4605      	mov	r5, r0
 8012516:	6818      	ldr	r0, [r3, #0]
 8012518:	460c      	mov	r4, r1
 801251a:	b118      	cbz	r0, 8012524 <__swsetup_r+0x14>
 801251c:	6a03      	ldr	r3, [r0, #32]
 801251e:	b90b      	cbnz	r3, 8012524 <__swsetup_r+0x14>
 8012520:	f7ff fed2 	bl	80122c8 <__sinit>
 8012524:	89a3      	ldrh	r3, [r4, #12]
 8012526:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801252a:	0718      	lsls	r0, r3, #28
 801252c:	d422      	bmi.n	8012574 <__swsetup_r+0x64>
 801252e:	06d9      	lsls	r1, r3, #27
 8012530:	d407      	bmi.n	8012542 <__swsetup_r+0x32>
 8012532:	2309      	movs	r3, #9
 8012534:	602b      	str	r3, [r5, #0]
 8012536:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801253a:	81a3      	strh	r3, [r4, #12]
 801253c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012540:	e034      	b.n	80125ac <__swsetup_r+0x9c>
 8012542:	0758      	lsls	r0, r3, #29
 8012544:	d512      	bpl.n	801256c <__swsetup_r+0x5c>
 8012546:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012548:	b141      	cbz	r1, 801255c <__swsetup_r+0x4c>
 801254a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801254e:	4299      	cmp	r1, r3
 8012550:	d002      	beq.n	8012558 <__swsetup_r+0x48>
 8012552:	4628      	mov	r0, r5
 8012554:	f000 ff92 	bl	801347c <_free_r>
 8012558:	2300      	movs	r3, #0
 801255a:	6363      	str	r3, [r4, #52]	; 0x34
 801255c:	89a3      	ldrh	r3, [r4, #12]
 801255e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8012562:	81a3      	strh	r3, [r4, #12]
 8012564:	2300      	movs	r3, #0
 8012566:	6063      	str	r3, [r4, #4]
 8012568:	6923      	ldr	r3, [r4, #16]
 801256a:	6023      	str	r3, [r4, #0]
 801256c:	89a3      	ldrh	r3, [r4, #12]
 801256e:	f043 0308 	orr.w	r3, r3, #8
 8012572:	81a3      	strh	r3, [r4, #12]
 8012574:	6923      	ldr	r3, [r4, #16]
 8012576:	b94b      	cbnz	r3, 801258c <__swsetup_r+0x7c>
 8012578:	89a3      	ldrh	r3, [r4, #12]
 801257a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801257e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012582:	d003      	beq.n	801258c <__swsetup_r+0x7c>
 8012584:	4621      	mov	r1, r4
 8012586:	4628      	mov	r0, r5
 8012588:	f001 fe0c 	bl	80141a4 <__smakebuf_r>
 801258c:	89a0      	ldrh	r0, [r4, #12]
 801258e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012592:	f010 0301 	ands.w	r3, r0, #1
 8012596:	d00a      	beq.n	80125ae <__swsetup_r+0x9e>
 8012598:	2300      	movs	r3, #0
 801259a:	60a3      	str	r3, [r4, #8]
 801259c:	6963      	ldr	r3, [r4, #20]
 801259e:	425b      	negs	r3, r3
 80125a0:	61a3      	str	r3, [r4, #24]
 80125a2:	6923      	ldr	r3, [r4, #16]
 80125a4:	b943      	cbnz	r3, 80125b8 <__swsetup_r+0xa8>
 80125a6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80125aa:	d1c4      	bne.n	8012536 <__swsetup_r+0x26>
 80125ac:	bd38      	pop	{r3, r4, r5, pc}
 80125ae:	0781      	lsls	r1, r0, #30
 80125b0:	bf58      	it	pl
 80125b2:	6963      	ldrpl	r3, [r4, #20]
 80125b4:	60a3      	str	r3, [r4, #8]
 80125b6:	e7f4      	b.n	80125a2 <__swsetup_r+0x92>
 80125b8:	2000      	movs	r0, #0
 80125ba:	e7f7      	b.n	80125ac <__swsetup_r+0x9c>
 80125bc:	200001e0 	.word	0x200001e0

080125c0 <memset>:
 80125c0:	4402      	add	r2, r0
 80125c2:	4603      	mov	r3, r0
 80125c4:	4293      	cmp	r3, r2
 80125c6:	d100      	bne.n	80125ca <memset+0xa>
 80125c8:	4770      	bx	lr
 80125ca:	f803 1b01 	strb.w	r1, [r3], #1
 80125ce:	e7f9      	b.n	80125c4 <memset+0x4>

080125d0 <_localeconv_r>:
 80125d0:	4800      	ldr	r0, [pc, #0]	; (80125d4 <_localeconv_r+0x4>)
 80125d2:	4770      	bx	lr
 80125d4:	200002d4 	.word	0x200002d4

080125d8 <_close_r>:
 80125d8:	b538      	push	{r3, r4, r5, lr}
 80125da:	4d06      	ldr	r5, [pc, #24]	; (80125f4 <_close_r+0x1c>)
 80125dc:	2300      	movs	r3, #0
 80125de:	4604      	mov	r4, r0
 80125e0:	4608      	mov	r0, r1
 80125e2:	602b      	str	r3, [r5, #0]
 80125e4:	f7ef fcd7 	bl	8001f96 <_close>
 80125e8:	1c43      	adds	r3, r0, #1
 80125ea:	d102      	bne.n	80125f2 <_close_r+0x1a>
 80125ec:	682b      	ldr	r3, [r5, #0]
 80125ee:	b103      	cbz	r3, 80125f2 <_close_r+0x1a>
 80125f0:	6023      	str	r3, [r4, #0]
 80125f2:	bd38      	pop	{r3, r4, r5, pc}
 80125f4:	200067a0 	.word	0x200067a0

080125f8 <_reclaim_reent>:
 80125f8:	4b29      	ldr	r3, [pc, #164]	; (80126a0 <_reclaim_reent+0xa8>)
 80125fa:	681b      	ldr	r3, [r3, #0]
 80125fc:	4283      	cmp	r3, r0
 80125fe:	b570      	push	{r4, r5, r6, lr}
 8012600:	4604      	mov	r4, r0
 8012602:	d04b      	beq.n	801269c <_reclaim_reent+0xa4>
 8012604:	69c3      	ldr	r3, [r0, #28]
 8012606:	b143      	cbz	r3, 801261a <_reclaim_reent+0x22>
 8012608:	68db      	ldr	r3, [r3, #12]
 801260a:	2b00      	cmp	r3, #0
 801260c:	d144      	bne.n	8012698 <_reclaim_reent+0xa0>
 801260e:	69e3      	ldr	r3, [r4, #28]
 8012610:	6819      	ldr	r1, [r3, #0]
 8012612:	b111      	cbz	r1, 801261a <_reclaim_reent+0x22>
 8012614:	4620      	mov	r0, r4
 8012616:	f000 ff31 	bl	801347c <_free_r>
 801261a:	6961      	ldr	r1, [r4, #20]
 801261c:	b111      	cbz	r1, 8012624 <_reclaim_reent+0x2c>
 801261e:	4620      	mov	r0, r4
 8012620:	f000 ff2c 	bl	801347c <_free_r>
 8012624:	69e1      	ldr	r1, [r4, #28]
 8012626:	b111      	cbz	r1, 801262e <_reclaim_reent+0x36>
 8012628:	4620      	mov	r0, r4
 801262a:	f000 ff27 	bl	801347c <_free_r>
 801262e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8012630:	b111      	cbz	r1, 8012638 <_reclaim_reent+0x40>
 8012632:	4620      	mov	r0, r4
 8012634:	f000 ff22 	bl	801347c <_free_r>
 8012638:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801263a:	b111      	cbz	r1, 8012642 <_reclaim_reent+0x4a>
 801263c:	4620      	mov	r0, r4
 801263e:	f000 ff1d 	bl	801347c <_free_r>
 8012642:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8012644:	b111      	cbz	r1, 801264c <_reclaim_reent+0x54>
 8012646:	4620      	mov	r0, r4
 8012648:	f000 ff18 	bl	801347c <_free_r>
 801264c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 801264e:	b111      	cbz	r1, 8012656 <_reclaim_reent+0x5e>
 8012650:	4620      	mov	r0, r4
 8012652:	f000 ff13 	bl	801347c <_free_r>
 8012656:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8012658:	b111      	cbz	r1, 8012660 <_reclaim_reent+0x68>
 801265a:	4620      	mov	r0, r4
 801265c:	f000 ff0e 	bl	801347c <_free_r>
 8012660:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8012662:	b111      	cbz	r1, 801266a <_reclaim_reent+0x72>
 8012664:	4620      	mov	r0, r4
 8012666:	f000 ff09 	bl	801347c <_free_r>
 801266a:	6a23      	ldr	r3, [r4, #32]
 801266c:	b1b3      	cbz	r3, 801269c <_reclaim_reent+0xa4>
 801266e:	4620      	mov	r0, r4
 8012670:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012674:	4718      	bx	r3
 8012676:	5949      	ldr	r1, [r1, r5]
 8012678:	b941      	cbnz	r1, 801268c <_reclaim_reent+0x94>
 801267a:	3504      	adds	r5, #4
 801267c:	69e3      	ldr	r3, [r4, #28]
 801267e:	2d80      	cmp	r5, #128	; 0x80
 8012680:	68d9      	ldr	r1, [r3, #12]
 8012682:	d1f8      	bne.n	8012676 <_reclaim_reent+0x7e>
 8012684:	4620      	mov	r0, r4
 8012686:	f000 fef9 	bl	801347c <_free_r>
 801268a:	e7c0      	b.n	801260e <_reclaim_reent+0x16>
 801268c:	680e      	ldr	r6, [r1, #0]
 801268e:	4620      	mov	r0, r4
 8012690:	f000 fef4 	bl	801347c <_free_r>
 8012694:	4631      	mov	r1, r6
 8012696:	e7ef      	b.n	8012678 <_reclaim_reent+0x80>
 8012698:	2500      	movs	r5, #0
 801269a:	e7ef      	b.n	801267c <_reclaim_reent+0x84>
 801269c:	bd70      	pop	{r4, r5, r6, pc}
 801269e:	bf00      	nop
 80126a0:	200001e0 	.word	0x200001e0

080126a4 <_lseek_r>:
 80126a4:	b538      	push	{r3, r4, r5, lr}
 80126a6:	4d07      	ldr	r5, [pc, #28]	; (80126c4 <_lseek_r+0x20>)
 80126a8:	4604      	mov	r4, r0
 80126aa:	4608      	mov	r0, r1
 80126ac:	4611      	mov	r1, r2
 80126ae:	2200      	movs	r2, #0
 80126b0:	602a      	str	r2, [r5, #0]
 80126b2:	461a      	mov	r2, r3
 80126b4:	f7ef fc96 	bl	8001fe4 <_lseek>
 80126b8:	1c43      	adds	r3, r0, #1
 80126ba:	d102      	bne.n	80126c2 <_lseek_r+0x1e>
 80126bc:	682b      	ldr	r3, [r5, #0]
 80126be:	b103      	cbz	r3, 80126c2 <_lseek_r+0x1e>
 80126c0:	6023      	str	r3, [r4, #0]
 80126c2:	bd38      	pop	{r3, r4, r5, pc}
 80126c4:	200067a0 	.word	0x200067a0

080126c8 <_read_r>:
 80126c8:	b538      	push	{r3, r4, r5, lr}
 80126ca:	4d07      	ldr	r5, [pc, #28]	; (80126e8 <_read_r+0x20>)
 80126cc:	4604      	mov	r4, r0
 80126ce:	4608      	mov	r0, r1
 80126d0:	4611      	mov	r1, r2
 80126d2:	2200      	movs	r2, #0
 80126d4:	602a      	str	r2, [r5, #0]
 80126d6:	461a      	mov	r2, r3
 80126d8:	f7ef fc24 	bl	8001f24 <_read>
 80126dc:	1c43      	adds	r3, r0, #1
 80126de:	d102      	bne.n	80126e6 <_read_r+0x1e>
 80126e0:	682b      	ldr	r3, [r5, #0]
 80126e2:	b103      	cbz	r3, 80126e6 <_read_r+0x1e>
 80126e4:	6023      	str	r3, [r4, #0]
 80126e6:	bd38      	pop	{r3, r4, r5, pc}
 80126e8:	200067a0 	.word	0x200067a0

080126ec <_write_r>:
 80126ec:	b538      	push	{r3, r4, r5, lr}
 80126ee:	4d07      	ldr	r5, [pc, #28]	; (801270c <_write_r+0x20>)
 80126f0:	4604      	mov	r4, r0
 80126f2:	4608      	mov	r0, r1
 80126f4:	4611      	mov	r1, r2
 80126f6:	2200      	movs	r2, #0
 80126f8:	602a      	str	r2, [r5, #0]
 80126fa:	461a      	mov	r2, r3
 80126fc:	f7ef fc2f 	bl	8001f5e <_write>
 8012700:	1c43      	adds	r3, r0, #1
 8012702:	d102      	bne.n	801270a <_write_r+0x1e>
 8012704:	682b      	ldr	r3, [r5, #0]
 8012706:	b103      	cbz	r3, 801270a <_write_r+0x1e>
 8012708:	6023      	str	r3, [r4, #0]
 801270a:	bd38      	pop	{r3, r4, r5, pc}
 801270c:	200067a0 	.word	0x200067a0

08012710 <__errno>:
 8012710:	4b01      	ldr	r3, [pc, #4]	; (8012718 <__errno+0x8>)
 8012712:	6818      	ldr	r0, [r3, #0]
 8012714:	4770      	bx	lr
 8012716:	bf00      	nop
 8012718:	200001e0 	.word	0x200001e0

0801271c <__libc_init_array>:
 801271c:	b570      	push	{r4, r5, r6, lr}
 801271e:	4d0d      	ldr	r5, [pc, #52]	; (8012754 <__libc_init_array+0x38>)
 8012720:	4c0d      	ldr	r4, [pc, #52]	; (8012758 <__libc_init_array+0x3c>)
 8012722:	1b64      	subs	r4, r4, r5
 8012724:	10a4      	asrs	r4, r4, #2
 8012726:	2600      	movs	r6, #0
 8012728:	42a6      	cmp	r6, r4
 801272a:	d109      	bne.n	8012740 <__libc_init_array+0x24>
 801272c:	4d0b      	ldr	r5, [pc, #44]	; (801275c <__libc_init_array+0x40>)
 801272e:	4c0c      	ldr	r4, [pc, #48]	; (8012760 <__libc_init_array+0x44>)
 8012730:	f001 fe58 	bl	80143e4 <_init>
 8012734:	1b64      	subs	r4, r4, r5
 8012736:	10a4      	asrs	r4, r4, #2
 8012738:	2600      	movs	r6, #0
 801273a:	42a6      	cmp	r6, r4
 801273c:	d105      	bne.n	801274a <__libc_init_array+0x2e>
 801273e:	bd70      	pop	{r4, r5, r6, pc}
 8012740:	f855 3b04 	ldr.w	r3, [r5], #4
 8012744:	4798      	blx	r3
 8012746:	3601      	adds	r6, #1
 8012748:	e7ee      	b.n	8012728 <__libc_init_array+0xc>
 801274a:	f855 3b04 	ldr.w	r3, [r5], #4
 801274e:	4798      	blx	r3
 8012750:	3601      	adds	r6, #1
 8012752:	e7f2      	b.n	801273a <__libc_init_array+0x1e>
 8012754:	08014b7c 	.word	0x08014b7c
 8012758:	08014b7c 	.word	0x08014b7c
 801275c:	08014b7c 	.word	0x08014b7c
 8012760:	08014b80 	.word	0x08014b80

08012764 <__retarget_lock_acquire_recursive>:
 8012764:	4770      	bx	lr

08012766 <__retarget_lock_release_recursive>:
 8012766:	4770      	bx	lr

08012768 <memcpy>:
 8012768:	440a      	add	r2, r1
 801276a:	4291      	cmp	r1, r2
 801276c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8012770:	d100      	bne.n	8012774 <memcpy+0xc>
 8012772:	4770      	bx	lr
 8012774:	b510      	push	{r4, lr}
 8012776:	f811 4b01 	ldrb.w	r4, [r1], #1
 801277a:	f803 4f01 	strb.w	r4, [r3, #1]!
 801277e:	4291      	cmp	r1, r2
 8012780:	d1f9      	bne.n	8012776 <memcpy+0xe>
 8012782:	bd10      	pop	{r4, pc}

08012784 <quorem>:
 8012784:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012788:	6903      	ldr	r3, [r0, #16]
 801278a:	690c      	ldr	r4, [r1, #16]
 801278c:	42a3      	cmp	r3, r4
 801278e:	4607      	mov	r7, r0
 8012790:	db7e      	blt.n	8012890 <quorem+0x10c>
 8012792:	3c01      	subs	r4, #1
 8012794:	f101 0814 	add.w	r8, r1, #20
 8012798:	f100 0514 	add.w	r5, r0, #20
 801279c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80127a0:	9301      	str	r3, [sp, #4]
 80127a2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80127a6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80127aa:	3301      	adds	r3, #1
 80127ac:	429a      	cmp	r2, r3
 80127ae:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80127b2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80127b6:	fbb2 f6f3 	udiv	r6, r2, r3
 80127ba:	d331      	bcc.n	8012820 <quorem+0x9c>
 80127bc:	f04f 0e00 	mov.w	lr, #0
 80127c0:	4640      	mov	r0, r8
 80127c2:	46ac      	mov	ip, r5
 80127c4:	46f2      	mov	sl, lr
 80127c6:	f850 2b04 	ldr.w	r2, [r0], #4
 80127ca:	b293      	uxth	r3, r2
 80127cc:	fb06 e303 	mla	r3, r6, r3, lr
 80127d0:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80127d4:	0c1a      	lsrs	r2, r3, #16
 80127d6:	b29b      	uxth	r3, r3
 80127d8:	ebaa 0303 	sub.w	r3, sl, r3
 80127dc:	f8dc a000 	ldr.w	sl, [ip]
 80127e0:	fa13 f38a 	uxtah	r3, r3, sl
 80127e4:	fb06 220e 	mla	r2, r6, lr, r2
 80127e8:	9300      	str	r3, [sp, #0]
 80127ea:	9b00      	ldr	r3, [sp, #0]
 80127ec:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80127f0:	b292      	uxth	r2, r2
 80127f2:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80127f6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80127fa:	f8bd 3000 	ldrh.w	r3, [sp]
 80127fe:	4581      	cmp	r9, r0
 8012800:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8012804:	f84c 3b04 	str.w	r3, [ip], #4
 8012808:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801280c:	d2db      	bcs.n	80127c6 <quorem+0x42>
 801280e:	f855 300b 	ldr.w	r3, [r5, fp]
 8012812:	b92b      	cbnz	r3, 8012820 <quorem+0x9c>
 8012814:	9b01      	ldr	r3, [sp, #4]
 8012816:	3b04      	subs	r3, #4
 8012818:	429d      	cmp	r5, r3
 801281a:	461a      	mov	r2, r3
 801281c:	d32c      	bcc.n	8012878 <quorem+0xf4>
 801281e:	613c      	str	r4, [r7, #16]
 8012820:	4638      	mov	r0, r7
 8012822:	f001 f9a7 	bl	8013b74 <__mcmp>
 8012826:	2800      	cmp	r0, #0
 8012828:	db22      	blt.n	8012870 <quorem+0xec>
 801282a:	3601      	adds	r6, #1
 801282c:	4629      	mov	r1, r5
 801282e:	2000      	movs	r0, #0
 8012830:	f858 2b04 	ldr.w	r2, [r8], #4
 8012834:	f8d1 c000 	ldr.w	ip, [r1]
 8012838:	b293      	uxth	r3, r2
 801283a:	1ac3      	subs	r3, r0, r3
 801283c:	0c12      	lsrs	r2, r2, #16
 801283e:	fa13 f38c 	uxtah	r3, r3, ip
 8012842:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8012846:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801284a:	b29b      	uxth	r3, r3
 801284c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8012850:	45c1      	cmp	r9, r8
 8012852:	f841 3b04 	str.w	r3, [r1], #4
 8012856:	ea4f 4022 	mov.w	r0, r2, asr #16
 801285a:	d2e9      	bcs.n	8012830 <quorem+0xac>
 801285c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8012860:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8012864:	b922      	cbnz	r2, 8012870 <quorem+0xec>
 8012866:	3b04      	subs	r3, #4
 8012868:	429d      	cmp	r5, r3
 801286a:	461a      	mov	r2, r3
 801286c:	d30a      	bcc.n	8012884 <quorem+0x100>
 801286e:	613c      	str	r4, [r7, #16]
 8012870:	4630      	mov	r0, r6
 8012872:	b003      	add	sp, #12
 8012874:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012878:	6812      	ldr	r2, [r2, #0]
 801287a:	3b04      	subs	r3, #4
 801287c:	2a00      	cmp	r2, #0
 801287e:	d1ce      	bne.n	801281e <quorem+0x9a>
 8012880:	3c01      	subs	r4, #1
 8012882:	e7c9      	b.n	8012818 <quorem+0x94>
 8012884:	6812      	ldr	r2, [r2, #0]
 8012886:	3b04      	subs	r3, #4
 8012888:	2a00      	cmp	r2, #0
 801288a:	d1f0      	bne.n	801286e <quorem+0xea>
 801288c:	3c01      	subs	r4, #1
 801288e:	e7eb      	b.n	8012868 <quorem+0xe4>
 8012890:	2000      	movs	r0, #0
 8012892:	e7ee      	b.n	8012872 <quorem+0xee>
 8012894:	0000      	movs	r0, r0
	...

08012898 <_dtoa_r>:
 8012898:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801289c:	ed2d 8b04 	vpush	{d8-d9}
 80128a0:	69c5      	ldr	r5, [r0, #28]
 80128a2:	b093      	sub	sp, #76	; 0x4c
 80128a4:	ed8d 0b02 	vstr	d0, [sp, #8]
 80128a8:	ec57 6b10 	vmov	r6, r7, d0
 80128ac:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80128b0:	9107      	str	r1, [sp, #28]
 80128b2:	4604      	mov	r4, r0
 80128b4:	920a      	str	r2, [sp, #40]	; 0x28
 80128b6:	930d      	str	r3, [sp, #52]	; 0x34
 80128b8:	b975      	cbnz	r5, 80128d8 <_dtoa_r+0x40>
 80128ba:	2010      	movs	r0, #16
 80128bc:	f000 fe2a 	bl	8013514 <malloc>
 80128c0:	4602      	mov	r2, r0
 80128c2:	61e0      	str	r0, [r4, #28]
 80128c4:	b920      	cbnz	r0, 80128d0 <_dtoa_r+0x38>
 80128c6:	4bae      	ldr	r3, [pc, #696]	; (8012b80 <_dtoa_r+0x2e8>)
 80128c8:	21ef      	movs	r1, #239	; 0xef
 80128ca:	48ae      	ldr	r0, [pc, #696]	; (8012b84 <_dtoa_r+0x2ec>)
 80128cc:	f001 fcd8 	bl	8014280 <__assert_func>
 80128d0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80128d4:	6005      	str	r5, [r0, #0]
 80128d6:	60c5      	str	r5, [r0, #12]
 80128d8:	69e3      	ldr	r3, [r4, #28]
 80128da:	6819      	ldr	r1, [r3, #0]
 80128dc:	b151      	cbz	r1, 80128f4 <_dtoa_r+0x5c>
 80128de:	685a      	ldr	r2, [r3, #4]
 80128e0:	604a      	str	r2, [r1, #4]
 80128e2:	2301      	movs	r3, #1
 80128e4:	4093      	lsls	r3, r2
 80128e6:	608b      	str	r3, [r1, #8]
 80128e8:	4620      	mov	r0, r4
 80128ea:	f000 ff07 	bl	80136fc <_Bfree>
 80128ee:	69e3      	ldr	r3, [r4, #28]
 80128f0:	2200      	movs	r2, #0
 80128f2:	601a      	str	r2, [r3, #0]
 80128f4:	1e3b      	subs	r3, r7, #0
 80128f6:	bfbb      	ittet	lt
 80128f8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80128fc:	9303      	strlt	r3, [sp, #12]
 80128fe:	2300      	movge	r3, #0
 8012900:	2201      	movlt	r2, #1
 8012902:	bfac      	ite	ge
 8012904:	f8c8 3000 	strge.w	r3, [r8]
 8012908:	f8c8 2000 	strlt.w	r2, [r8]
 801290c:	4b9e      	ldr	r3, [pc, #632]	; (8012b88 <_dtoa_r+0x2f0>)
 801290e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8012912:	ea33 0308 	bics.w	r3, r3, r8
 8012916:	d11b      	bne.n	8012950 <_dtoa_r+0xb8>
 8012918:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801291a:	f242 730f 	movw	r3, #9999	; 0x270f
 801291e:	6013      	str	r3, [r2, #0]
 8012920:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8012924:	4333      	orrs	r3, r6
 8012926:	f000 8593 	beq.w	8013450 <_dtoa_r+0xbb8>
 801292a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801292c:	b963      	cbnz	r3, 8012948 <_dtoa_r+0xb0>
 801292e:	4b97      	ldr	r3, [pc, #604]	; (8012b8c <_dtoa_r+0x2f4>)
 8012930:	e027      	b.n	8012982 <_dtoa_r+0xea>
 8012932:	4b97      	ldr	r3, [pc, #604]	; (8012b90 <_dtoa_r+0x2f8>)
 8012934:	9300      	str	r3, [sp, #0]
 8012936:	3308      	adds	r3, #8
 8012938:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801293a:	6013      	str	r3, [r2, #0]
 801293c:	9800      	ldr	r0, [sp, #0]
 801293e:	b013      	add	sp, #76	; 0x4c
 8012940:	ecbd 8b04 	vpop	{d8-d9}
 8012944:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012948:	4b90      	ldr	r3, [pc, #576]	; (8012b8c <_dtoa_r+0x2f4>)
 801294a:	9300      	str	r3, [sp, #0]
 801294c:	3303      	adds	r3, #3
 801294e:	e7f3      	b.n	8012938 <_dtoa_r+0xa0>
 8012950:	ed9d 7b02 	vldr	d7, [sp, #8]
 8012954:	2200      	movs	r2, #0
 8012956:	ec51 0b17 	vmov	r0, r1, d7
 801295a:	eeb0 8a47 	vmov.f32	s16, s14
 801295e:	eef0 8a67 	vmov.f32	s17, s15
 8012962:	2300      	movs	r3, #0
 8012964:	f7ee f8d8 	bl	8000b18 <__aeabi_dcmpeq>
 8012968:	4681      	mov	r9, r0
 801296a:	b160      	cbz	r0, 8012986 <_dtoa_r+0xee>
 801296c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801296e:	2301      	movs	r3, #1
 8012970:	6013      	str	r3, [r2, #0]
 8012972:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012974:	2b00      	cmp	r3, #0
 8012976:	f000 8568 	beq.w	801344a <_dtoa_r+0xbb2>
 801297a:	4b86      	ldr	r3, [pc, #536]	; (8012b94 <_dtoa_r+0x2fc>)
 801297c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801297e:	6013      	str	r3, [r2, #0]
 8012980:	3b01      	subs	r3, #1
 8012982:	9300      	str	r3, [sp, #0]
 8012984:	e7da      	b.n	801293c <_dtoa_r+0xa4>
 8012986:	aa10      	add	r2, sp, #64	; 0x40
 8012988:	a911      	add	r1, sp, #68	; 0x44
 801298a:	4620      	mov	r0, r4
 801298c:	eeb0 0a48 	vmov.f32	s0, s16
 8012990:	eef0 0a68 	vmov.f32	s1, s17
 8012994:	f001 f994 	bl	8013cc0 <__d2b>
 8012998:	f3c8 550a 	ubfx	r5, r8, #20, #11
 801299c:	4682      	mov	sl, r0
 801299e:	2d00      	cmp	r5, #0
 80129a0:	d07f      	beq.n	8012aa2 <_dtoa_r+0x20a>
 80129a2:	ee18 3a90 	vmov	r3, s17
 80129a6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80129aa:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80129ae:	ec51 0b18 	vmov	r0, r1, d8
 80129b2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80129b6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80129ba:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 80129be:	4619      	mov	r1, r3
 80129c0:	2200      	movs	r2, #0
 80129c2:	4b75      	ldr	r3, [pc, #468]	; (8012b98 <_dtoa_r+0x300>)
 80129c4:	f7ed fc88 	bl	80002d8 <__aeabi_dsub>
 80129c8:	a367      	add	r3, pc, #412	; (adr r3, 8012b68 <_dtoa_r+0x2d0>)
 80129ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80129ce:	f7ed fe3b 	bl	8000648 <__aeabi_dmul>
 80129d2:	a367      	add	r3, pc, #412	; (adr r3, 8012b70 <_dtoa_r+0x2d8>)
 80129d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80129d8:	f7ed fc80 	bl	80002dc <__adddf3>
 80129dc:	4606      	mov	r6, r0
 80129de:	4628      	mov	r0, r5
 80129e0:	460f      	mov	r7, r1
 80129e2:	f7ed fdc7 	bl	8000574 <__aeabi_i2d>
 80129e6:	a364      	add	r3, pc, #400	; (adr r3, 8012b78 <_dtoa_r+0x2e0>)
 80129e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80129ec:	f7ed fe2c 	bl	8000648 <__aeabi_dmul>
 80129f0:	4602      	mov	r2, r0
 80129f2:	460b      	mov	r3, r1
 80129f4:	4630      	mov	r0, r6
 80129f6:	4639      	mov	r1, r7
 80129f8:	f7ed fc70 	bl	80002dc <__adddf3>
 80129fc:	4606      	mov	r6, r0
 80129fe:	460f      	mov	r7, r1
 8012a00:	f7ee f8d2 	bl	8000ba8 <__aeabi_d2iz>
 8012a04:	2200      	movs	r2, #0
 8012a06:	4683      	mov	fp, r0
 8012a08:	2300      	movs	r3, #0
 8012a0a:	4630      	mov	r0, r6
 8012a0c:	4639      	mov	r1, r7
 8012a0e:	f7ee f88d 	bl	8000b2c <__aeabi_dcmplt>
 8012a12:	b148      	cbz	r0, 8012a28 <_dtoa_r+0x190>
 8012a14:	4658      	mov	r0, fp
 8012a16:	f7ed fdad 	bl	8000574 <__aeabi_i2d>
 8012a1a:	4632      	mov	r2, r6
 8012a1c:	463b      	mov	r3, r7
 8012a1e:	f7ee f87b 	bl	8000b18 <__aeabi_dcmpeq>
 8012a22:	b908      	cbnz	r0, 8012a28 <_dtoa_r+0x190>
 8012a24:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8012a28:	f1bb 0f16 	cmp.w	fp, #22
 8012a2c:	d857      	bhi.n	8012ade <_dtoa_r+0x246>
 8012a2e:	4b5b      	ldr	r3, [pc, #364]	; (8012b9c <_dtoa_r+0x304>)
 8012a30:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8012a34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a38:	ec51 0b18 	vmov	r0, r1, d8
 8012a3c:	f7ee f876 	bl	8000b2c <__aeabi_dcmplt>
 8012a40:	2800      	cmp	r0, #0
 8012a42:	d04e      	beq.n	8012ae2 <_dtoa_r+0x24a>
 8012a44:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8012a48:	2300      	movs	r3, #0
 8012a4a:	930c      	str	r3, [sp, #48]	; 0x30
 8012a4c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8012a4e:	1b5b      	subs	r3, r3, r5
 8012a50:	1e5a      	subs	r2, r3, #1
 8012a52:	bf45      	ittet	mi
 8012a54:	f1c3 0301 	rsbmi	r3, r3, #1
 8012a58:	9305      	strmi	r3, [sp, #20]
 8012a5a:	2300      	movpl	r3, #0
 8012a5c:	2300      	movmi	r3, #0
 8012a5e:	9206      	str	r2, [sp, #24]
 8012a60:	bf54      	ite	pl
 8012a62:	9305      	strpl	r3, [sp, #20]
 8012a64:	9306      	strmi	r3, [sp, #24]
 8012a66:	f1bb 0f00 	cmp.w	fp, #0
 8012a6a:	db3c      	blt.n	8012ae6 <_dtoa_r+0x24e>
 8012a6c:	9b06      	ldr	r3, [sp, #24]
 8012a6e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8012a72:	445b      	add	r3, fp
 8012a74:	9306      	str	r3, [sp, #24]
 8012a76:	2300      	movs	r3, #0
 8012a78:	9308      	str	r3, [sp, #32]
 8012a7a:	9b07      	ldr	r3, [sp, #28]
 8012a7c:	2b09      	cmp	r3, #9
 8012a7e:	d868      	bhi.n	8012b52 <_dtoa_r+0x2ba>
 8012a80:	2b05      	cmp	r3, #5
 8012a82:	bfc4      	itt	gt
 8012a84:	3b04      	subgt	r3, #4
 8012a86:	9307      	strgt	r3, [sp, #28]
 8012a88:	9b07      	ldr	r3, [sp, #28]
 8012a8a:	f1a3 0302 	sub.w	r3, r3, #2
 8012a8e:	bfcc      	ite	gt
 8012a90:	2500      	movgt	r5, #0
 8012a92:	2501      	movle	r5, #1
 8012a94:	2b03      	cmp	r3, #3
 8012a96:	f200 8085 	bhi.w	8012ba4 <_dtoa_r+0x30c>
 8012a9a:	e8df f003 	tbb	[pc, r3]
 8012a9e:	3b2e      	.short	0x3b2e
 8012aa0:	5839      	.short	0x5839
 8012aa2:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8012aa6:	441d      	add	r5, r3
 8012aa8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8012aac:	2b20      	cmp	r3, #32
 8012aae:	bfc1      	itttt	gt
 8012ab0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8012ab4:	fa08 f803 	lslgt.w	r8, r8, r3
 8012ab8:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8012abc:	fa26 f303 	lsrgt.w	r3, r6, r3
 8012ac0:	bfd6      	itet	le
 8012ac2:	f1c3 0320 	rsble	r3, r3, #32
 8012ac6:	ea48 0003 	orrgt.w	r0, r8, r3
 8012aca:	fa06 f003 	lslle.w	r0, r6, r3
 8012ace:	f7ed fd41 	bl	8000554 <__aeabi_ui2d>
 8012ad2:	2201      	movs	r2, #1
 8012ad4:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8012ad8:	3d01      	subs	r5, #1
 8012ada:	920e      	str	r2, [sp, #56]	; 0x38
 8012adc:	e76f      	b.n	80129be <_dtoa_r+0x126>
 8012ade:	2301      	movs	r3, #1
 8012ae0:	e7b3      	b.n	8012a4a <_dtoa_r+0x1b2>
 8012ae2:	900c      	str	r0, [sp, #48]	; 0x30
 8012ae4:	e7b2      	b.n	8012a4c <_dtoa_r+0x1b4>
 8012ae6:	9b05      	ldr	r3, [sp, #20]
 8012ae8:	eba3 030b 	sub.w	r3, r3, fp
 8012aec:	9305      	str	r3, [sp, #20]
 8012aee:	f1cb 0300 	rsb	r3, fp, #0
 8012af2:	9308      	str	r3, [sp, #32]
 8012af4:	2300      	movs	r3, #0
 8012af6:	930b      	str	r3, [sp, #44]	; 0x2c
 8012af8:	e7bf      	b.n	8012a7a <_dtoa_r+0x1e2>
 8012afa:	2300      	movs	r3, #0
 8012afc:	9309      	str	r3, [sp, #36]	; 0x24
 8012afe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012b00:	2b00      	cmp	r3, #0
 8012b02:	dc52      	bgt.n	8012baa <_dtoa_r+0x312>
 8012b04:	2301      	movs	r3, #1
 8012b06:	9301      	str	r3, [sp, #4]
 8012b08:	9304      	str	r3, [sp, #16]
 8012b0a:	461a      	mov	r2, r3
 8012b0c:	920a      	str	r2, [sp, #40]	; 0x28
 8012b0e:	e00b      	b.n	8012b28 <_dtoa_r+0x290>
 8012b10:	2301      	movs	r3, #1
 8012b12:	e7f3      	b.n	8012afc <_dtoa_r+0x264>
 8012b14:	2300      	movs	r3, #0
 8012b16:	9309      	str	r3, [sp, #36]	; 0x24
 8012b18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012b1a:	445b      	add	r3, fp
 8012b1c:	9301      	str	r3, [sp, #4]
 8012b1e:	3301      	adds	r3, #1
 8012b20:	2b01      	cmp	r3, #1
 8012b22:	9304      	str	r3, [sp, #16]
 8012b24:	bfb8      	it	lt
 8012b26:	2301      	movlt	r3, #1
 8012b28:	69e0      	ldr	r0, [r4, #28]
 8012b2a:	2100      	movs	r1, #0
 8012b2c:	2204      	movs	r2, #4
 8012b2e:	f102 0614 	add.w	r6, r2, #20
 8012b32:	429e      	cmp	r6, r3
 8012b34:	d93d      	bls.n	8012bb2 <_dtoa_r+0x31a>
 8012b36:	6041      	str	r1, [r0, #4]
 8012b38:	4620      	mov	r0, r4
 8012b3a:	f000 fd9f 	bl	801367c <_Balloc>
 8012b3e:	9000      	str	r0, [sp, #0]
 8012b40:	2800      	cmp	r0, #0
 8012b42:	d139      	bne.n	8012bb8 <_dtoa_r+0x320>
 8012b44:	4b16      	ldr	r3, [pc, #88]	; (8012ba0 <_dtoa_r+0x308>)
 8012b46:	4602      	mov	r2, r0
 8012b48:	f240 11af 	movw	r1, #431	; 0x1af
 8012b4c:	e6bd      	b.n	80128ca <_dtoa_r+0x32>
 8012b4e:	2301      	movs	r3, #1
 8012b50:	e7e1      	b.n	8012b16 <_dtoa_r+0x27e>
 8012b52:	2501      	movs	r5, #1
 8012b54:	2300      	movs	r3, #0
 8012b56:	9307      	str	r3, [sp, #28]
 8012b58:	9509      	str	r5, [sp, #36]	; 0x24
 8012b5a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012b5e:	9301      	str	r3, [sp, #4]
 8012b60:	9304      	str	r3, [sp, #16]
 8012b62:	2200      	movs	r2, #0
 8012b64:	2312      	movs	r3, #18
 8012b66:	e7d1      	b.n	8012b0c <_dtoa_r+0x274>
 8012b68:	636f4361 	.word	0x636f4361
 8012b6c:	3fd287a7 	.word	0x3fd287a7
 8012b70:	8b60c8b3 	.word	0x8b60c8b3
 8012b74:	3fc68a28 	.word	0x3fc68a28
 8012b78:	509f79fb 	.word	0x509f79fb
 8012b7c:	3fd34413 	.word	0x3fd34413
 8012b80:	08014841 	.word	0x08014841
 8012b84:	08014858 	.word	0x08014858
 8012b88:	7ff00000 	.word	0x7ff00000
 8012b8c:	0801483d 	.word	0x0801483d
 8012b90:	08014834 	.word	0x08014834
 8012b94:	08014811 	.word	0x08014811
 8012b98:	3ff80000 	.word	0x3ff80000
 8012b9c:	08014948 	.word	0x08014948
 8012ba0:	080148b0 	.word	0x080148b0
 8012ba4:	2301      	movs	r3, #1
 8012ba6:	9309      	str	r3, [sp, #36]	; 0x24
 8012ba8:	e7d7      	b.n	8012b5a <_dtoa_r+0x2c2>
 8012baa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012bac:	9301      	str	r3, [sp, #4]
 8012bae:	9304      	str	r3, [sp, #16]
 8012bb0:	e7ba      	b.n	8012b28 <_dtoa_r+0x290>
 8012bb2:	3101      	adds	r1, #1
 8012bb4:	0052      	lsls	r2, r2, #1
 8012bb6:	e7ba      	b.n	8012b2e <_dtoa_r+0x296>
 8012bb8:	69e3      	ldr	r3, [r4, #28]
 8012bba:	9a00      	ldr	r2, [sp, #0]
 8012bbc:	601a      	str	r2, [r3, #0]
 8012bbe:	9b04      	ldr	r3, [sp, #16]
 8012bc0:	2b0e      	cmp	r3, #14
 8012bc2:	f200 80a8 	bhi.w	8012d16 <_dtoa_r+0x47e>
 8012bc6:	2d00      	cmp	r5, #0
 8012bc8:	f000 80a5 	beq.w	8012d16 <_dtoa_r+0x47e>
 8012bcc:	f1bb 0f00 	cmp.w	fp, #0
 8012bd0:	dd38      	ble.n	8012c44 <_dtoa_r+0x3ac>
 8012bd2:	4bc0      	ldr	r3, [pc, #768]	; (8012ed4 <_dtoa_r+0x63c>)
 8012bd4:	f00b 020f 	and.w	r2, fp, #15
 8012bd8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8012bdc:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8012be0:	e9d3 6700 	ldrd	r6, r7, [r3]
 8012be4:	ea4f 182b 	mov.w	r8, fp, asr #4
 8012be8:	d019      	beq.n	8012c1e <_dtoa_r+0x386>
 8012bea:	4bbb      	ldr	r3, [pc, #748]	; (8012ed8 <_dtoa_r+0x640>)
 8012bec:	ec51 0b18 	vmov	r0, r1, d8
 8012bf0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8012bf4:	f7ed fe52 	bl	800089c <__aeabi_ddiv>
 8012bf8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012bfc:	f008 080f 	and.w	r8, r8, #15
 8012c00:	2503      	movs	r5, #3
 8012c02:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8012ed8 <_dtoa_r+0x640>
 8012c06:	f1b8 0f00 	cmp.w	r8, #0
 8012c0a:	d10a      	bne.n	8012c22 <_dtoa_r+0x38a>
 8012c0c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012c10:	4632      	mov	r2, r6
 8012c12:	463b      	mov	r3, r7
 8012c14:	f7ed fe42 	bl	800089c <__aeabi_ddiv>
 8012c18:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012c1c:	e02b      	b.n	8012c76 <_dtoa_r+0x3de>
 8012c1e:	2502      	movs	r5, #2
 8012c20:	e7ef      	b.n	8012c02 <_dtoa_r+0x36a>
 8012c22:	f018 0f01 	tst.w	r8, #1
 8012c26:	d008      	beq.n	8012c3a <_dtoa_r+0x3a2>
 8012c28:	4630      	mov	r0, r6
 8012c2a:	4639      	mov	r1, r7
 8012c2c:	e9d9 2300 	ldrd	r2, r3, [r9]
 8012c30:	f7ed fd0a 	bl	8000648 <__aeabi_dmul>
 8012c34:	3501      	adds	r5, #1
 8012c36:	4606      	mov	r6, r0
 8012c38:	460f      	mov	r7, r1
 8012c3a:	ea4f 0868 	mov.w	r8, r8, asr #1
 8012c3e:	f109 0908 	add.w	r9, r9, #8
 8012c42:	e7e0      	b.n	8012c06 <_dtoa_r+0x36e>
 8012c44:	f000 809f 	beq.w	8012d86 <_dtoa_r+0x4ee>
 8012c48:	f1cb 0600 	rsb	r6, fp, #0
 8012c4c:	4ba1      	ldr	r3, [pc, #644]	; (8012ed4 <_dtoa_r+0x63c>)
 8012c4e:	4fa2      	ldr	r7, [pc, #648]	; (8012ed8 <_dtoa_r+0x640>)
 8012c50:	f006 020f 	and.w	r2, r6, #15
 8012c54:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8012c58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c5c:	ec51 0b18 	vmov	r0, r1, d8
 8012c60:	f7ed fcf2 	bl	8000648 <__aeabi_dmul>
 8012c64:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012c68:	1136      	asrs	r6, r6, #4
 8012c6a:	2300      	movs	r3, #0
 8012c6c:	2502      	movs	r5, #2
 8012c6e:	2e00      	cmp	r6, #0
 8012c70:	d17e      	bne.n	8012d70 <_dtoa_r+0x4d8>
 8012c72:	2b00      	cmp	r3, #0
 8012c74:	d1d0      	bne.n	8012c18 <_dtoa_r+0x380>
 8012c76:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012c78:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8012c7c:	2b00      	cmp	r3, #0
 8012c7e:	f000 8084 	beq.w	8012d8a <_dtoa_r+0x4f2>
 8012c82:	4b96      	ldr	r3, [pc, #600]	; (8012edc <_dtoa_r+0x644>)
 8012c84:	2200      	movs	r2, #0
 8012c86:	4640      	mov	r0, r8
 8012c88:	4649      	mov	r1, r9
 8012c8a:	f7ed ff4f 	bl	8000b2c <__aeabi_dcmplt>
 8012c8e:	2800      	cmp	r0, #0
 8012c90:	d07b      	beq.n	8012d8a <_dtoa_r+0x4f2>
 8012c92:	9b04      	ldr	r3, [sp, #16]
 8012c94:	2b00      	cmp	r3, #0
 8012c96:	d078      	beq.n	8012d8a <_dtoa_r+0x4f2>
 8012c98:	9b01      	ldr	r3, [sp, #4]
 8012c9a:	2b00      	cmp	r3, #0
 8012c9c:	dd39      	ble.n	8012d12 <_dtoa_r+0x47a>
 8012c9e:	4b90      	ldr	r3, [pc, #576]	; (8012ee0 <_dtoa_r+0x648>)
 8012ca0:	2200      	movs	r2, #0
 8012ca2:	4640      	mov	r0, r8
 8012ca4:	4649      	mov	r1, r9
 8012ca6:	f7ed fccf 	bl	8000648 <__aeabi_dmul>
 8012caa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012cae:	9e01      	ldr	r6, [sp, #4]
 8012cb0:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 8012cb4:	3501      	adds	r5, #1
 8012cb6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8012cba:	4628      	mov	r0, r5
 8012cbc:	f7ed fc5a 	bl	8000574 <__aeabi_i2d>
 8012cc0:	4642      	mov	r2, r8
 8012cc2:	464b      	mov	r3, r9
 8012cc4:	f7ed fcc0 	bl	8000648 <__aeabi_dmul>
 8012cc8:	4b86      	ldr	r3, [pc, #536]	; (8012ee4 <_dtoa_r+0x64c>)
 8012cca:	2200      	movs	r2, #0
 8012ccc:	f7ed fb06 	bl	80002dc <__adddf3>
 8012cd0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8012cd4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012cd8:	9303      	str	r3, [sp, #12]
 8012cda:	2e00      	cmp	r6, #0
 8012cdc:	d158      	bne.n	8012d90 <_dtoa_r+0x4f8>
 8012cde:	4b82      	ldr	r3, [pc, #520]	; (8012ee8 <_dtoa_r+0x650>)
 8012ce0:	2200      	movs	r2, #0
 8012ce2:	4640      	mov	r0, r8
 8012ce4:	4649      	mov	r1, r9
 8012ce6:	f7ed faf7 	bl	80002d8 <__aeabi_dsub>
 8012cea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8012cee:	4680      	mov	r8, r0
 8012cf0:	4689      	mov	r9, r1
 8012cf2:	f7ed ff39 	bl	8000b68 <__aeabi_dcmpgt>
 8012cf6:	2800      	cmp	r0, #0
 8012cf8:	f040 8296 	bne.w	8013228 <_dtoa_r+0x990>
 8012cfc:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8012d00:	4640      	mov	r0, r8
 8012d02:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012d06:	4649      	mov	r1, r9
 8012d08:	f7ed ff10 	bl	8000b2c <__aeabi_dcmplt>
 8012d0c:	2800      	cmp	r0, #0
 8012d0e:	f040 8289 	bne.w	8013224 <_dtoa_r+0x98c>
 8012d12:	ed8d 8b02 	vstr	d8, [sp, #8]
 8012d16:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8012d18:	2b00      	cmp	r3, #0
 8012d1a:	f2c0 814e 	blt.w	8012fba <_dtoa_r+0x722>
 8012d1e:	f1bb 0f0e 	cmp.w	fp, #14
 8012d22:	f300 814a 	bgt.w	8012fba <_dtoa_r+0x722>
 8012d26:	4b6b      	ldr	r3, [pc, #428]	; (8012ed4 <_dtoa_r+0x63c>)
 8012d28:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8012d2c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8012d30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012d32:	2b00      	cmp	r3, #0
 8012d34:	f280 80dc 	bge.w	8012ef0 <_dtoa_r+0x658>
 8012d38:	9b04      	ldr	r3, [sp, #16]
 8012d3a:	2b00      	cmp	r3, #0
 8012d3c:	f300 80d8 	bgt.w	8012ef0 <_dtoa_r+0x658>
 8012d40:	f040 826f 	bne.w	8013222 <_dtoa_r+0x98a>
 8012d44:	4b68      	ldr	r3, [pc, #416]	; (8012ee8 <_dtoa_r+0x650>)
 8012d46:	2200      	movs	r2, #0
 8012d48:	4640      	mov	r0, r8
 8012d4a:	4649      	mov	r1, r9
 8012d4c:	f7ed fc7c 	bl	8000648 <__aeabi_dmul>
 8012d50:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8012d54:	f7ed fefe 	bl	8000b54 <__aeabi_dcmpge>
 8012d58:	9e04      	ldr	r6, [sp, #16]
 8012d5a:	4637      	mov	r7, r6
 8012d5c:	2800      	cmp	r0, #0
 8012d5e:	f040 8245 	bne.w	80131ec <_dtoa_r+0x954>
 8012d62:	9d00      	ldr	r5, [sp, #0]
 8012d64:	2331      	movs	r3, #49	; 0x31
 8012d66:	f805 3b01 	strb.w	r3, [r5], #1
 8012d6a:	f10b 0b01 	add.w	fp, fp, #1
 8012d6e:	e241      	b.n	80131f4 <_dtoa_r+0x95c>
 8012d70:	07f2      	lsls	r2, r6, #31
 8012d72:	d505      	bpl.n	8012d80 <_dtoa_r+0x4e8>
 8012d74:	e9d7 2300 	ldrd	r2, r3, [r7]
 8012d78:	f7ed fc66 	bl	8000648 <__aeabi_dmul>
 8012d7c:	3501      	adds	r5, #1
 8012d7e:	2301      	movs	r3, #1
 8012d80:	1076      	asrs	r6, r6, #1
 8012d82:	3708      	adds	r7, #8
 8012d84:	e773      	b.n	8012c6e <_dtoa_r+0x3d6>
 8012d86:	2502      	movs	r5, #2
 8012d88:	e775      	b.n	8012c76 <_dtoa_r+0x3de>
 8012d8a:	9e04      	ldr	r6, [sp, #16]
 8012d8c:	465f      	mov	r7, fp
 8012d8e:	e792      	b.n	8012cb6 <_dtoa_r+0x41e>
 8012d90:	9900      	ldr	r1, [sp, #0]
 8012d92:	4b50      	ldr	r3, [pc, #320]	; (8012ed4 <_dtoa_r+0x63c>)
 8012d94:	ed9d 7b02 	vldr	d7, [sp, #8]
 8012d98:	4431      	add	r1, r6
 8012d9a:	9102      	str	r1, [sp, #8]
 8012d9c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8012d9e:	eeb0 9a47 	vmov.f32	s18, s14
 8012da2:	eef0 9a67 	vmov.f32	s19, s15
 8012da6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8012daa:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8012dae:	2900      	cmp	r1, #0
 8012db0:	d044      	beq.n	8012e3c <_dtoa_r+0x5a4>
 8012db2:	494e      	ldr	r1, [pc, #312]	; (8012eec <_dtoa_r+0x654>)
 8012db4:	2000      	movs	r0, #0
 8012db6:	f7ed fd71 	bl	800089c <__aeabi_ddiv>
 8012dba:	ec53 2b19 	vmov	r2, r3, d9
 8012dbe:	f7ed fa8b 	bl	80002d8 <__aeabi_dsub>
 8012dc2:	9d00      	ldr	r5, [sp, #0]
 8012dc4:	ec41 0b19 	vmov	d9, r0, r1
 8012dc8:	4649      	mov	r1, r9
 8012dca:	4640      	mov	r0, r8
 8012dcc:	f7ed feec 	bl	8000ba8 <__aeabi_d2iz>
 8012dd0:	4606      	mov	r6, r0
 8012dd2:	f7ed fbcf 	bl	8000574 <__aeabi_i2d>
 8012dd6:	4602      	mov	r2, r0
 8012dd8:	460b      	mov	r3, r1
 8012dda:	4640      	mov	r0, r8
 8012ddc:	4649      	mov	r1, r9
 8012dde:	f7ed fa7b 	bl	80002d8 <__aeabi_dsub>
 8012de2:	3630      	adds	r6, #48	; 0x30
 8012de4:	f805 6b01 	strb.w	r6, [r5], #1
 8012de8:	ec53 2b19 	vmov	r2, r3, d9
 8012dec:	4680      	mov	r8, r0
 8012dee:	4689      	mov	r9, r1
 8012df0:	f7ed fe9c 	bl	8000b2c <__aeabi_dcmplt>
 8012df4:	2800      	cmp	r0, #0
 8012df6:	d164      	bne.n	8012ec2 <_dtoa_r+0x62a>
 8012df8:	4642      	mov	r2, r8
 8012dfa:	464b      	mov	r3, r9
 8012dfc:	4937      	ldr	r1, [pc, #220]	; (8012edc <_dtoa_r+0x644>)
 8012dfe:	2000      	movs	r0, #0
 8012e00:	f7ed fa6a 	bl	80002d8 <__aeabi_dsub>
 8012e04:	ec53 2b19 	vmov	r2, r3, d9
 8012e08:	f7ed fe90 	bl	8000b2c <__aeabi_dcmplt>
 8012e0c:	2800      	cmp	r0, #0
 8012e0e:	f040 80b6 	bne.w	8012f7e <_dtoa_r+0x6e6>
 8012e12:	9b02      	ldr	r3, [sp, #8]
 8012e14:	429d      	cmp	r5, r3
 8012e16:	f43f af7c 	beq.w	8012d12 <_dtoa_r+0x47a>
 8012e1a:	4b31      	ldr	r3, [pc, #196]	; (8012ee0 <_dtoa_r+0x648>)
 8012e1c:	ec51 0b19 	vmov	r0, r1, d9
 8012e20:	2200      	movs	r2, #0
 8012e22:	f7ed fc11 	bl	8000648 <__aeabi_dmul>
 8012e26:	4b2e      	ldr	r3, [pc, #184]	; (8012ee0 <_dtoa_r+0x648>)
 8012e28:	ec41 0b19 	vmov	d9, r0, r1
 8012e2c:	2200      	movs	r2, #0
 8012e2e:	4640      	mov	r0, r8
 8012e30:	4649      	mov	r1, r9
 8012e32:	f7ed fc09 	bl	8000648 <__aeabi_dmul>
 8012e36:	4680      	mov	r8, r0
 8012e38:	4689      	mov	r9, r1
 8012e3a:	e7c5      	b.n	8012dc8 <_dtoa_r+0x530>
 8012e3c:	ec51 0b17 	vmov	r0, r1, d7
 8012e40:	f7ed fc02 	bl	8000648 <__aeabi_dmul>
 8012e44:	9b02      	ldr	r3, [sp, #8]
 8012e46:	9d00      	ldr	r5, [sp, #0]
 8012e48:	930f      	str	r3, [sp, #60]	; 0x3c
 8012e4a:	ec41 0b19 	vmov	d9, r0, r1
 8012e4e:	4649      	mov	r1, r9
 8012e50:	4640      	mov	r0, r8
 8012e52:	f7ed fea9 	bl	8000ba8 <__aeabi_d2iz>
 8012e56:	4606      	mov	r6, r0
 8012e58:	f7ed fb8c 	bl	8000574 <__aeabi_i2d>
 8012e5c:	3630      	adds	r6, #48	; 0x30
 8012e5e:	4602      	mov	r2, r0
 8012e60:	460b      	mov	r3, r1
 8012e62:	4640      	mov	r0, r8
 8012e64:	4649      	mov	r1, r9
 8012e66:	f7ed fa37 	bl	80002d8 <__aeabi_dsub>
 8012e6a:	f805 6b01 	strb.w	r6, [r5], #1
 8012e6e:	9b02      	ldr	r3, [sp, #8]
 8012e70:	429d      	cmp	r5, r3
 8012e72:	4680      	mov	r8, r0
 8012e74:	4689      	mov	r9, r1
 8012e76:	f04f 0200 	mov.w	r2, #0
 8012e7a:	d124      	bne.n	8012ec6 <_dtoa_r+0x62e>
 8012e7c:	4b1b      	ldr	r3, [pc, #108]	; (8012eec <_dtoa_r+0x654>)
 8012e7e:	ec51 0b19 	vmov	r0, r1, d9
 8012e82:	f7ed fa2b 	bl	80002dc <__adddf3>
 8012e86:	4602      	mov	r2, r0
 8012e88:	460b      	mov	r3, r1
 8012e8a:	4640      	mov	r0, r8
 8012e8c:	4649      	mov	r1, r9
 8012e8e:	f7ed fe6b 	bl	8000b68 <__aeabi_dcmpgt>
 8012e92:	2800      	cmp	r0, #0
 8012e94:	d173      	bne.n	8012f7e <_dtoa_r+0x6e6>
 8012e96:	ec53 2b19 	vmov	r2, r3, d9
 8012e9a:	4914      	ldr	r1, [pc, #80]	; (8012eec <_dtoa_r+0x654>)
 8012e9c:	2000      	movs	r0, #0
 8012e9e:	f7ed fa1b 	bl	80002d8 <__aeabi_dsub>
 8012ea2:	4602      	mov	r2, r0
 8012ea4:	460b      	mov	r3, r1
 8012ea6:	4640      	mov	r0, r8
 8012ea8:	4649      	mov	r1, r9
 8012eaa:	f7ed fe3f 	bl	8000b2c <__aeabi_dcmplt>
 8012eae:	2800      	cmp	r0, #0
 8012eb0:	f43f af2f 	beq.w	8012d12 <_dtoa_r+0x47a>
 8012eb4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8012eb6:	1e6b      	subs	r3, r5, #1
 8012eb8:	930f      	str	r3, [sp, #60]	; 0x3c
 8012eba:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8012ebe:	2b30      	cmp	r3, #48	; 0x30
 8012ec0:	d0f8      	beq.n	8012eb4 <_dtoa_r+0x61c>
 8012ec2:	46bb      	mov	fp, r7
 8012ec4:	e04a      	b.n	8012f5c <_dtoa_r+0x6c4>
 8012ec6:	4b06      	ldr	r3, [pc, #24]	; (8012ee0 <_dtoa_r+0x648>)
 8012ec8:	f7ed fbbe 	bl	8000648 <__aeabi_dmul>
 8012ecc:	4680      	mov	r8, r0
 8012ece:	4689      	mov	r9, r1
 8012ed0:	e7bd      	b.n	8012e4e <_dtoa_r+0x5b6>
 8012ed2:	bf00      	nop
 8012ed4:	08014948 	.word	0x08014948
 8012ed8:	08014920 	.word	0x08014920
 8012edc:	3ff00000 	.word	0x3ff00000
 8012ee0:	40240000 	.word	0x40240000
 8012ee4:	401c0000 	.word	0x401c0000
 8012ee8:	40140000 	.word	0x40140000
 8012eec:	3fe00000 	.word	0x3fe00000
 8012ef0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8012ef4:	9d00      	ldr	r5, [sp, #0]
 8012ef6:	4642      	mov	r2, r8
 8012ef8:	464b      	mov	r3, r9
 8012efa:	4630      	mov	r0, r6
 8012efc:	4639      	mov	r1, r7
 8012efe:	f7ed fccd 	bl	800089c <__aeabi_ddiv>
 8012f02:	f7ed fe51 	bl	8000ba8 <__aeabi_d2iz>
 8012f06:	9001      	str	r0, [sp, #4]
 8012f08:	f7ed fb34 	bl	8000574 <__aeabi_i2d>
 8012f0c:	4642      	mov	r2, r8
 8012f0e:	464b      	mov	r3, r9
 8012f10:	f7ed fb9a 	bl	8000648 <__aeabi_dmul>
 8012f14:	4602      	mov	r2, r0
 8012f16:	460b      	mov	r3, r1
 8012f18:	4630      	mov	r0, r6
 8012f1a:	4639      	mov	r1, r7
 8012f1c:	f7ed f9dc 	bl	80002d8 <__aeabi_dsub>
 8012f20:	9e01      	ldr	r6, [sp, #4]
 8012f22:	9f04      	ldr	r7, [sp, #16]
 8012f24:	3630      	adds	r6, #48	; 0x30
 8012f26:	f805 6b01 	strb.w	r6, [r5], #1
 8012f2a:	9e00      	ldr	r6, [sp, #0]
 8012f2c:	1bae      	subs	r6, r5, r6
 8012f2e:	42b7      	cmp	r7, r6
 8012f30:	4602      	mov	r2, r0
 8012f32:	460b      	mov	r3, r1
 8012f34:	d134      	bne.n	8012fa0 <_dtoa_r+0x708>
 8012f36:	f7ed f9d1 	bl	80002dc <__adddf3>
 8012f3a:	4642      	mov	r2, r8
 8012f3c:	464b      	mov	r3, r9
 8012f3e:	4606      	mov	r6, r0
 8012f40:	460f      	mov	r7, r1
 8012f42:	f7ed fe11 	bl	8000b68 <__aeabi_dcmpgt>
 8012f46:	b9c8      	cbnz	r0, 8012f7c <_dtoa_r+0x6e4>
 8012f48:	4642      	mov	r2, r8
 8012f4a:	464b      	mov	r3, r9
 8012f4c:	4630      	mov	r0, r6
 8012f4e:	4639      	mov	r1, r7
 8012f50:	f7ed fde2 	bl	8000b18 <__aeabi_dcmpeq>
 8012f54:	b110      	cbz	r0, 8012f5c <_dtoa_r+0x6c4>
 8012f56:	9b01      	ldr	r3, [sp, #4]
 8012f58:	07db      	lsls	r3, r3, #31
 8012f5a:	d40f      	bmi.n	8012f7c <_dtoa_r+0x6e4>
 8012f5c:	4651      	mov	r1, sl
 8012f5e:	4620      	mov	r0, r4
 8012f60:	f000 fbcc 	bl	80136fc <_Bfree>
 8012f64:	2300      	movs	r3, #0
 8012f66:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8012f68:	702b      	strb	r3, [r5, #0]
 8012f6a:	f10b 0301 	add.w	r3, fp, #1
 8012f6e:	6013      	str	r3, [r2, #0]
 8012f70:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012f72:	2b00      	cmp	r3, #0
 8012f74:	f43f ace2 	beq.w	801293c <_dtoa_r+0xa4>
 8012f78:	601d      	str	r5, [r3, #0]
 8012f7a:	e4df      	b.n	801293c <_dtoa_r+0xa4>
 8012f7c:	465f      	mov	r7, fp
 8012f7e:	462b      	mov	r3, r5
 8012f80:	461d      	mov	r5, r3
 8012f82:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8012f86:	2a39      	cmp	r2, #57	; 0x39
 8012f88:	d106      	bne.n	8012f98 <_dtoa_r+0x700>
 8012f8a:	9a00      	ldr	r2, [sp, #0]
 8012f8c:	429a      	cmp	r2, r3
 8012f8e:	d1f7      	bne.n	8012f80 <_dtoa_r+0x6e8>
 8012f90:	9900      	ldr	r1, [sp, #0]
 8012f92:	2230      	movs	r2, #48	; 0x30
 8012f94:	3701      	adds	r7, #1
 8012f96:	700a      	strb	r2, [r1, #0]
 8012f98:	781a      	ldrb	r2, [r3, #0]
 8012f9a:	3201      	adds	r2, #1
 8012f9c:	701a      	strb	r2, [r3, #0]
 8012f9e:	e790      	b.n	8012ec2 <_dtoa_r+0x62a>
 8012fa0:	4ba3      	ldr	r3, [pc, #652]	; (8013230 <_dtoa_r+0x998>)
 8012fa2:	2200      	movs	r2, #0
 8012fa4:	f7ed fb50 	bl	8000648 <__aeabi_dmul>
 8012fa8:	2200      	movs	r2, #0
 8012faa:	2300      	movs	r3, #0
 8012fac:	4606      	mov	r6, r0
 8012fae:	460f      	mov	r7, r1
 8012fb0:	f7ed fdb2 	bl	8000b18 <__aeabi_dcmpeq>
 8012fb4:	2800      	cmp	r0, #0
 8012fb6:	d09e      	beq.n	8012ef6 <_dtoa_r+0x65e>
 8012fb8:	e7d0      	b.n	8012f5c <_dtoa_r+0x6c4>
 8012fba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012fbc:	2a00      	cmp	r2, #0
 8012fbe:	f000 80ca 	beq.w	8013156 <_dtoa_r+0x8be>
 8012fc2:	9a07      	ldr	r2, [sp, #28]
 8012fc4:	2a01      	cmp	r2, #1
 8012fc6:	f300 80ad 	bgt.w	8013124 <_dtoa_r+0x88c>
 8012fca:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8012fcc:	2a00      	cmp	r2, #0
 8012fce:	f000 80a5 	beq.w	801311c <_dtoa_r+0x884>
 8012fd2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8012fd6:	9e08      	ldr	r6, [sp, #32]
 8012fd8:	9d05      	ldr	r5, [sp, #20]
 8012fda:	9a05      	ldr	r2, [sp, #20]
 8012fdc:	441a      	add	r2, r3
 8012fde:	9205      	str	r2, [sp, #20]
 8012fe0:	9a06      	ldr	r2, [sp, #24]
 8012fe2:	2101      	movs	r1, #1
 8012fe4:	441a      	add	r2, r3
 8012fe6:	4620      	mov	r0, r4
 8012fe8:	9206      	str	r2, [sp, #24]
 8012fea:	f000 fc3d 	bl	8013868 <__i2b>
 8012fee:	4607      	mov	r7, r0
 8012ff0:	b165      	cbz	r5, 801300c <_dtoa_r+0x774>
 8012ff2:	9b06      	ldr	r3, [sp, #24]
 8012ff4:	2b00      	cmp	r3, #0
 8012ff6:	dd09      	ble.n	801300c <_dtoa_r+0x774>
 8012ff8:	42ab      	cmp	r3, r5
 8012ffa:	9a05      	ldr	r2, [sp, #20]
 8012ffc:	bfa8      	it	ge
 8012ffe:	462b      	movge	r3, r5
 8013000:	1ad2      	subs	r2, r2, r3
 8013002:	9205      	str	r2, [sp, #20]
 8013004:	9a06      	ldr	r2, [sp, #24]
 8013006:	1aed      	subs	r5, r5, r3
 8013008:	1ad3      	subs	r3, r2, r3
 801300a:	9306      	str	r3, [sp, #24]
 801300c:	9b08      	ldr	r3, [sp, #32]
 801300e:	b1f3      	cbz	r3, 801304e <_dtoa_r+0x7b6>
 8013010:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013012:	2b00      	cmp	r3, #0
 8013014:	f000 80a3 	beq.w	801315e <_dtoa_r+0x8c6>
 8013018:	2e00      	cmp	r6, #0
 801301a:	dd10      	ble.n	801303e <_dtoa_r+0x7a6>
 801301c:	4639      	mov	r1, r7
 801301e:	4632      	mov	r2, r6
 8013020:	4620      	mov	r0, r4
 8013022:	f000 fce1 	bl	80139e8 <__pow5mult>
 8013026:	4652      	mov	r2, sl
 8013028:	4601      	mov	r1, r0
 801302a:	4607      	mov	r7, r0
 801302c:	4620      	mov	r0, r4
 801302e:	f000 fc31 	bl	8013894 <__multiply>
 8013032:	4651      	mov	r1, sl
 8013034:	4680      	mov	r8, r0
 8013036:	4620      	mov	r0, r4
 8013038:	f000 fb60 	bl	80136fc <_Bfree>
 801303c:	46c2      	mov	sl, r8
 801303e:	9b08      	ldr	r3, [sp, #32]
 8013040:	1b9a      	subs	r2, r3, r6
 8013042:	d004      	beq.n	801304e <_dtoa_r+0x7b6>
 8013044:	4651      	mov	r1, sl
 8013046:	4620      	mov	r0, r4
 8013048:	f000 fcce 	bl	80139e8 <__pow5mult>
 801304c:	4682      	mov	sl, r0
 801304e:	2101      	movs	r1, #1
 8013050:	4620      	mov	r0, r4
 8013052:	f000 fc09 	bl	8013868 <__i2b>
 8013056:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013058:	2b00      	cmp	r3, #0
 801305a:	4606      	mov	r6, r0
 801305c:	f340 8081 	ble.w	8013162 <_dtoa_r+0x8ca>
 8013060:	461a      	mov	r2, r3
 8013062:	4601      	mov	r1, r0
 8013064:	4620      	mov	r0, r4
 8013066:	f000 fcbf 	bl	80139e8 <__pow5mult>
 801306a:	9b07      	ldr	r3, [sp, #28]
 801306c:	2b01      	cmp	r3, #1
 801306e:	4606      	mov	r6, r0
 8013070:	dd7a      	ble.n	8013168 <_dtoa_r+0x8d0>
 8013072:	f04f 0800 	mov.w	r8, #0
 8013076:	6933      	ldr	r3, [r6, #16]
 8013078:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 801307c:	6918      	ldr	r0, [r3, #16]
 801307e:	f000 fba5 	bl	80137cc <__hi0bits>
 8013082:	f1c0 0020 	rsb	r0, r0, #32
 8013086:	9b06      	ldr	r3, [sp, #24]
 8013088:	4418      	add	r0, r3
 801308a:	f010 001f 	ands.w	r0, r0, #31
 801308e:	f000 8094 	beq.w	80131ba <_dtoa_r+0x922>
 8013092:	f1c0 0320 	rsb	r3, r0, #32
 8013096:	2b04      	cmp	r3, #4
 8013098:	f340 8085 	ble.w	80131a6 <_dtoa_r+0x90e>
 801309c:	9b05      	ldr	r3, [sp, #20]
 801309e:	f1c0 001c 	rsb	r0, r0, #28
 80130a2:	4403      	add	r3, r0
 80130a4:	9305      	str	r3, [sp, #20]
 80130a6:	9b06      	ldr	r3, [sp, #24]
 80130a8:	4403      	add	r3, r0
 80130aa:	4405      	add	r5, r0
 80130ac:	9306      	str	r3, [sp, #24]
 80130ae:	9b05      	ldr	r3, [sp, #20]
 80130b0:	2b00      	cmp	r3, #0
 80130b2:	dd05      	ble.n	80130c0 <_dtoa_r+0x828>
 80130b4:	4651      	mov	r1, sl
 80130b6:	461a      	mov	r2, r3
 80130b8:	4620      	mov	r0, r4
 80130ba:	f000 fcef 	bl	8013a9c <__lshift>
 80130be:	4682      	mov	sl, r0
 80130c0:	9b06      	ldr	r3, [sp, #24]
 80130c2:	2b00      	cmp	r3, #0
 80130c4:	dd05      	ble.n	80130d2 <_dtoa_r+0x83a>
 80130c6:	4631      	mov	r1, r6
 80130c8:	461a      	mov	r2, r3
 80130ca:	4620      	mov	r0, r4
 80130cc:	f000 fce6 	bl	8013a9c <__lshift>
 80130d0:	4606      	mov	r6, r0
 80130d2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80130d4:	2b00      	cmp	r3, #0
 80130d6:	d072      	beq.n	80131be <_dtoa_r+0x926>
 80130d8:	4631      	mov	r1, r6
 80130da:	4650      	mov	r0, sl
 80130dc:	f000 fd4a 	bl	8013b74 <__mcmp>
 80130e0:	2800      	cmp	r0, #0
 80130e2:	da6c      	bge.n	80131be <_dtoa_r+0x926>
 80130e4:	2300      	movs	r3, #0
 80130e6:	4651      	mov	r1, sl
 80130e8:	220a      	movs	r2, #10
 80130ea:	4620      	mov	r0, r4
 80130ec:	f000 fb28 	bl	8013740 <__multadd>
 80130f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80130f2:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80130f6:	4682      	mov	sl, r0
 80130f8:	2b00      	cmp	r3, #0
 80130fa:	f000 81b0 	beq.w	801345e <_dtoa_r+0xbc6>
 80130fe:	2300      	movs	r3, #0
 8013100:	4639      	mov	r1, r7
 8013102:	220a      	movs	r2, #10
 8013104:	4620      	mov	r0, r4
 8013106:	f000 fb1b 	bl	8013740 <__multadd>
 801310a:	9b01      	ldr	r3, [sp, #4]
 801310c:	2b00      	cmp	r3, #0
 801310e:	4607      	mov	r7, r0
 8013110:	f300 8096 	bgt.w	8013240 <_dtoa_r+0x9a8>
 8013114:	9b07      	ldr	r3, [sp, #28]
 8013116:	2b02      	cmp	r3, #2
 8013118:	dc59      	bgt.n	80131ce <_dtoa_r+0x936>
 801311a:	e091      	b.n	8013240 <_dtoa_r+0x9a8>
 801311c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801311e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8013122:	e758      	b.n	8012fd6 <_dtoa_r+0x73e>
 8013124:	9b04      	ldr	r3, [sp, #16]
 8013126:	1e5e      	subs	r6, r3, #1
 8013128:	9b08      	ldr	r3, [sp, #32]
 801312a:	42b3      	cmp	r3, r6
 801312c:	bfbf      	itttt	lt
 801312e:	9b08      	ldrlt	r3, [sp, #32]
 8013130:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8013132:	9608      	strlt	r6, [sp, #32]
 8013134:	1af3      	sublt	r3, r6, r3
 8013136:	bfb4      	ite	lt
 8013138:	18d2      	addlt	r2, r2, r3
 801313a:	1b9e      	subge	r6, r3, r6
 801313c:	9b04      	ldr	r3, [sp, #16]
 801313e:	bfbc      	itt	lt
 8013140:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8013142:	2600      	movlt	r6, #0
 8013144:	2b00      	cmp	r3, #0
 8013146:	bfb7      	itett	lt
 8013148:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 801314c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8013150:	1a9d      	sublt	r5, r3, r2
 8013152:	2300      	movlt	r3, #0
 8013154:	e741      	b.n	8012fda <_dtoa_r+0x742>
 8013156:	9e08      	ldr	r6, [sp, #32]
 8013158:	9d05      	ldr	r5, [sp, #20]
 801315a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801315c:	e748      	b.n	8012ff0 <_dtoa_r+0x758>
 801315e:	9a08      	ldr	r2, [sp, #32]
 8013160:	e770      	b.n	8013044 <_dtoa_r+0x7ac>
 8013162:	9b07      	ldr	r3, [sp, #28]
 8013164:	2b01      	cmp	r3, #1
 8013166:	dc19      	bgt.n	801319c <_dtoa_r+0x904>
 8013168:	9b02      	ldr	r3, [sp, #8]
 801316a:	b9bb      	cbnz	r3, 801319c <_dtoa_r+0x904>
 801316c:	9b03      	ldr	r3, [sp, #12]
 801316e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8013172:	b99b      	cbnz	r3, 801319c <_dtoa_r+0x904>
 8013174:	9b03      	ldr	r3, [sp, #12]
 8013176:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801317a:	0d1b      	lsrs	r3, r3, #20
 801317c:	051b      	lsls	r3, r3, #20
 801317e:	b183      	cbz	r3, 80131a2 <_dtoa_r+0x90a>
 8013180:	9b05      	ldr	r3, [sp, #20]
 8013182:	3301      	adds	r3, #1
 8013184:	9305      	str	r3, [sp, #20]
 8013186:	9b06      	ldr	r3, [sp, #24]
 8013188:	3301      	adds	r3, #1
 801318a:	9306      	str	r3, [sp, #24]
 801318c:	f04f 0801 	mov.w	r8, #1
 8013190:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013192:	2b00      	cmp	r3, #0
 8013194:	f47f af6f 	bne.w	8013076 <_dtoa_r+0x7de>
 8013198:	2001      	movs	r0, #1
 801319a:	e774      	b.n	8013086 <_dtoa_r+0x7ee>
 801319c:	f04f 0800 	mov.w	r8, #0
 80131a0:	e7f6      	b.n	8013190 <_dtoa_r+0x8f8>
 80131a2:	4698      	mov	r8, r3
 80131a4:	e7f4      	b.n	8013190 <_dtoa_r+0x8f8>
 80131a6:	d082      	beq.n	80130ae <_dtoa_r+0x816>
 80131a8:	9a05      	ldr	r2, [sp, #20]
 80131aa:	331c      	adds	r3, #28
 80131ac:	441a      	add	r2, r3
 80131ae:	9205      	str	r2, [sp, #20]
 80131b0:	9a06      	ldr	r2, [sp, #24]
 80131b2:	441a      	add	r2, r3
 80131b4:	441d      	add	r5, r3
 80131b6:	9206      	str	r2, [sp, #24]
 80131b8:	e779      	b.n	80130ae <_dtoa_r+0x816>
 80131ba:	4603      	mov	r3, r0
 80131bc:	e7f4      	b.n	80131a8 <_dtoa_r+0x910>
 80131be:	9b04      	ldr	r3, [sp, #16]
 80131c0:	2b00      	cmp	r3, #0
 80131c2:	dc37      	bgt.n	8013234 <_dtoa_r+0x99c>
 80131c4:	9b07      	ldr	r3, [sp, #28]
 80131c6:	2b02      	cmp	r3, #2
 80131c8:	dd34      	ble.n	8013234 <_dtoa_r+0x99c>
 80131ca:	9b04      	ldr	r3, [sp, #16]
 80131cc:	9301      	str	r3, [sp, #4]
 80131ce:	9b01      	ldr	r3, [sp, #4]
 80131d0:	b963      	cbnz	r3, 80131ec <_dtoa_r+0x954>
 80131d2:	4631      	mov	r1, r6
 80131d4:	2205      	movs	r2, #5
 80131d6:	4620      	mov	r0, r4
 80131d8:	f000 fab2 	bl	8013740 <__multadd>
 80131dc:	4601      	mov	r1, r0
 80131de:	4606      	mov	r6, r0
 80131e0:	4650      	mov	r0, sl
 80131e2:	f000 fcc7 	bl	8013b74 <__mcmp>
 80131e6:	2800      	cmp	r0, #0
 80131e8:	f73f adbb 	bgt.w	8012d62 <_dtoa_r+0x4ca>
 80131ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80131ee:	9d00      	ldr	r5, [sp, #0]
 80131f0:	ea6f 0b03 	mvn.w	fp, r3
 80131f4:	f04f 0800 	mov.w	r8, #0
 80131f8:	4631      	mov	r1, r6
 80131fa:	4620      	mov	r0, r4
 80131fc:	f000 fa7e 	bl	80136fc <_Bfree>
 8013200:	2f00      	cmp	r7, #0
 8013202:	f43f aeab 	beq.w	8012f5c <_dtoa_r+0x6c4>
 8013206:	f1b8 0f00 	cmp.w	r8, #0
 801320a:	d005      	beq.n	8013218 <_dtoa_r+0x980>
 801320c:	45b8      	cmp	r8, r7
 801320e:	d003      	beq.n	8013218 <_dtoa_r+0x980>
 8013210:	4641      	mov	r1, r8
 8013212:	4620      	mov	r0, r4
 8013214:	f000 fa72 	bl	80136fc <_Bfree>
 8013218:	4639      	mov	r1, r7
 801321a:	4620      	mov	r0, r4
 801321c:	f000 fa6e 	bl	80136fc <_Bfree>
 8013220:	e69c      	b.n	8012f5c <_dtoa_r+0x6c4>
 8013222:	2600      	movs	r6, #0
 8013224:	4637      	mov	r7, r6
 8013226:	e7e1      	b.n	80131ec <_dtoa_r+0x954>
 8013228:	46bb      	mov	fp, r7
 801322a:	4637      	mov	r7, r6
 801322c:	e599      	b.n	8012d62 <_dtoa_r+0x4ca>
 801322e:	bf00      	nop
 8013230:	40240000 	.word	0x40240000
 8013234:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013236:	2b00      	cmp	r3, #0
 8013238:	f000 80c8 	beq.w	80133cc <_dtoa_r+0xb34>
 801323c:	9b04      	ldr	r3, [sp, #16]
 801323e:	9301      	str	r3, [sp, #4]
 8013240:	2d00      	cmp	r5, #0
 8013242:	dd05      	ble.n	8013250 <_dtoa_r+0x9b8>
 8013244:	4639      	mov	r1, r7
 8013246:	462a      	mov	r2, r5
 8013248:	4620      	mov	r0, r4
 801324a:	f000 fc27 	bl	8013a9c <__lshift>
 801324e:	4607      	mov	r7, r0
 8013250:	f1b8 0f00 	cmp.w	r8, #0
 8013254:	d05b      	beq.n	801330e <_dtoa_r+0xa76>
 8013256:	6879      	ldr	r1, [r7, #4]
 8013258:	4620      	mov	r0, r4
 801325a:	f000 fa0f 	bl	801367c <_Balloc>
 801325e:	4605      	mov	r5, r0
 8013260:	b928      	cbnz	r0, 801326e <_dtoa_r+0x9d6>
 8013262:	4b83      	ldr	r3, [pc, #524]	; (8013470 <_dtoa_r+0xbd8>)
 8013264:	4602      	mov	r2, r0
 8013266:	f240 21ef 	movw	r1, #751	; 0x2ef
 801326a:	f7ff bb2e 	b.w	80128ca <_dtoa_r+0x32>
 801326e:	693a      	ldr	r2, [r7, #16]
 8013270:	3202      	adds	r2, #2
 8013272:	0092      	lsls	r2, r2, #2
 8013274:	f107 010c 	add.w	r1, r7, #12
 8013278:	300c      	adds	r0, #12
 801327a:	f7ff fa75 	bl	8012768 <memcpy>
 801327e:	2201      	movs	r2, #1
 8013280:	4629      	mov	r1, r5
 8013282:	4620      	mov	r0, r4
 8013284:	f000 fc0a 	bl	8013a9c <__lshift>
 8013288:	9b00      	ldr	r3, [sp, #0]
 801328a:	3301      	adds	r3, #1
 801328c:	9304      	str	r3, [sp, #16]
 801328e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013292:	4413      	add	r3, r2
 8013294:	9308      	str	r3, [sp, #32]
 8013296:	9b02      	ldr	r3, [sp, #8]
 8013298:	f003 0301 	and.w	r3, r3, #1
 801329c:	46b8      	mov	r8, r7
 801329e:	9306      	str	r3, [sp, #24]
 80132a0:	4607      	mov	r7, r0
 80132a2:	9b04      	ldr	r3, [sp, #16]
 80132a4:	4631      	mov	r1, r6
 80132a6:	3b01      	subs	r3, #1
 80132a8:	4650      	mov	r0, sl
 80132aa:	9301      	str	r3, [sp, #4]
 80132ac:	f7ff fa6a 	bl	8012784 <quorem>
 80132b0:	4641      	mov	r1, r8
 80132b2:	9002      	str	r0, [sp, #8]
 80132b4:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80132b8:	4650      	mov	r0, sl
 80132ba:	f000 fc5b 	bl	8013b74 <__mcmp>
 80132be:	463a      	mov	r2, r7
 80132c0:	9005      	str	r0, [sp, #20]
 80132c2:	4631      	mov	r1, r6
 80132c4:	4620      	mov	r0, r4
 80132c6:	f000 fc71 	bl	8013bac <__mdiff>
 80132ca:	68c2      	ldr	r2, [r0, #12]
 80132cc:	4605      	mov	r5, r0
 80132ce:	bb02      	cbnz	r2, 8013312 <_dtoa_r+0xa7a>
 80132d0:	4601      	mov	r1, r0
 80132d2:	4650      	mov	r0, sl
 80132d4:	f000 fc4e 	bl	8013b74 <__mcmp>
 80132d8:	4602      	mov	r2, r0
 80132da:	4629      	mov	r1, r5
 80132dc:	4620      	mov	r0, r4
 80132de:	9209      	str	r2, [sp, #36]	; 0x24
 80132e0:	f000 fa0c 	bl	80136fc <_Bfree>
 80132e4:	9b07      	ldr	r3, [sp, #28]
 80132e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80132e8:	9d04      	ldr	r5, [sp, #16]
 80132ea:	ea43 0102 	orr.w	r1, r3, r2
 80132ee:	9b06      	ldr	r3, [sp, #24]
 80132f0:	4319      	orrs	r1, r3
 80132f2:	d110      	bne.n	8013316 <_dtoa_r+0xa7e>
 80132f4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80132f8:	d029      	beq.n	801334e <_dtoa_r+0xab6>
 80132fa:	9b05      	ldr	r3, [sp, #20]
 80132fc:	2b00      	cmp	r3, #0
 80132fe:	dd02      	ble.n	8013306 <_dtoa_r+0xa6e>
 8013300:	9b02      	ldr	r3, [sp, #8]
 8013302:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8013306:	9b01      	ldr	r3, [sp, #4]
 8013308:	f883 9000 	strb.w	r9, [r3]
 801330c:	e774      	b.n	80131f8 <_dtoa_r+0x960>
 801330e:	4638      	mov	r0, r7
 8013310:	e7ba      	b.n	8013288 <_dtoa_r+0x9f0>
 8013312:	2201      	movs	r2, #1
 8013314:	e7e1      	b.n	80132da <_dtoa_r+0xa42>
 8013316:	9b05      	ldr	r3, [sp, #20]
 8013318:	2b00      	cmp	r3, #0
 801331a:	db04      	blt.n	8013326 <_dtoa_r+0xa8e>
 801331c:	9907      	ldr	r1, [sp, #28]
 801331e:	430b      	orrs	r3, r1
 8013320:	9906      	ldr	r1, [sp, #24]
 8013322:	430b      	orrs	r3, r1
 8013324:	d120      	bne.n	8013368 <_dtoa_r+0xad0>
 8013326:	2a00      	cmp	r2, #0
 8013328:	dded      	ble.n	8013306 <_dtoa_r+0xa6e>
 801332a:	4651      	mov	r1, sl
 801332c:	2201      	movs	r2, #1
 801332e:	4620      	mov	r0, r4
 8013330:	f000 fbb4 	bl	8013a9c <__lshift>
 8013334:	4631      	mov	r1, r6
 8013336:	4682      	mov	sl, r0
 8013338:	f000 fc1c 	bl	8013b74 <__mcmp>
 801333c:	2800      	cmp	r0, #0
 801333e:	dc03      	bgt.n	8013348 <_dtoa_r+0xab0>
 8013340:	d1e1      	bne.n	8013306 <_dtoa_r+0xa6e>
 8013342:	f019 0f01 	tst.w	r9, #1
 8013346:	d0de      	beq.n	8013306 <_dtoa_r+0xa6e>
 8013348:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 801334c:	d1d8      	bne.n	8013300 <_dtoa_r+0xa68>
 801334e:	9a01      	ldr	r2, [sp, #4]
 8013350:	2339      	movs	r3, #57	; 0x39
 8013352:	7013      	strb	r3, [r2, #0]
 8013354:	462b      	mov	r3, r5
 8013356:	461d      	mov	r5, r3
 8013358:	3b01      	subs	r3, #1
 801335a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801335e:	2a39      	cmp	r2, #57	; 0x39
 8013360:	d06c      	beq.n	801343c <_dtoa_r+0xba4>
 8013362:	3201      	adds	r2, #1
 8013364:	701a      	strb	r2, [r3, #0]
 8013366:	e747      	b.n	80131f8 <_dtoa_r+0x960>
 8013368:	2a00      	cmp	r2, #0
 801336a:	dd07      	ble.n	801337c <_dtoa_r+0xae4>
 801336c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8013370:	d0ed      	beq.n	801334e <_dtoa_r+0xab6>
 8013372:	9a01      	ldr	r2, [sp, #4]
 8013374:	f109 0301 	add.w	r3, r9, #1
 8013378:	7013      	strb	r3, [r2, #0]
 801337a:	e73d      	b.n	80131f8 <_dtoa_r+0x960>
 801337c:	9b04      	ldr	r3, [sp, #16]
 801337e:	9a08      	ldr	r2, [sp, #32]
 8013380:	f803 9c01 	strb.w	r9, [r3, #-1]
 8013384:	4293      	cmp	r3, r2
 8013386:	d043      	beq.n	8013410 <_dtoa_r+0xb78>
 8013388:	4651      	mov	r1, sl
 801338a:	2300      	movs	r3, #0
 801338c:	220a      	movs	r2, #10
 801338e:	4620      	mov	r0, r4
 8013390:	f000 f9d6 	bl	8013740 <__multadd>
 8013394:	45b8      	cmp	r8, r7
 8013396:	4682      	mov	sl, r0
 8013398:	f04f 0300 	mov.w	r3, #0
 801339c:	f04f 020a 	mov.w	r2, #10
 80133a0:	4641      	mov	r1, r8
 80133a2:	4620      	mov	r0, r4
 80133a4:	d107      	bne.n	80133b6 <_dtoa_r+0xb1e>
 80133a6:	f000 f9cb 	bl	8013740 <__multadd>
 80133aa:	4680      	mov	r8, r0
 80133ac:	4607      	mov	r7, r0
 80133ae:	9b04      	ldr	r3, [sp, #16]
 80133b0:	3301      	adds	r3, #1
 80133b2:	9304      	str	r3, [sp, #16]
 80133b4:	e775      	b.n	80132a2 <_dtoa_r+0xa0a>
 80133b6:	f000 f9c3 	bl	8013740 <__multadd>
 80133ba:	4639      	mov	r1, r7
 80133bc:	4680      	mov	r8, r0
 80133be:	2300      	movs	r3, #0
 80133c0:	220a      	movs	r2, #10
 80133c2:	4620      	mov	r0, r4
 80133c4:	f000 f9bc 	bl	8013740 <__multadd>
 80133c8:	4607      	mov	r7, r0
 80133ca:	e7f0      	b.n	80133ae <_dtoa_r+0xb16>
 80133cc:	9b04      	ldr	r3, [sp, #16]
 80133ce:	9301      	str	r3, [sp, #4]
 80133d0:	9d00      	ldr	r5, [sp, #0]
 80133d2:	4631      	mov	r1, r6
 80133d4:	4650      	mov	r0, sl
 80133d6:	f7ff f9d5 	bl	8012784 <quorem>
 80133da:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80133de:	9b00      	ldr	r3, [sp, #0]
 80133e0:	f805 9b01 	strb.w	r9, [r5], #1
 80133e4:	1aea      	subs	r2, r5, r3
 80133e6:	9b01      	ldr	r3, [sp, #4]
 80133e8:	4293      	cmp	r3, r2
 80133ea:	dd07      	ble.n	80133fc <_dtoa_r+0xb64>
 80133ec:	4651      	mov	r1, sl
 80133ee:	2300      	movs	r3, #0
 80133f0:	220a      	movs	r2, #10
 80133f2:	4620      	mov	r0, r4
 80133f4:	f000 f9a4 	bl	8013740 <__multadd>
 80133f8:	4682      	mov	sl, r0
 80133fa:	e7ea      	b.n	80133d2 <_dtoa_r+0xb3a>
 80133fc:	9b01      	ldr	r3, [sp, #4]
 80133fe:	2b00      	cmp	r3, #0
 8013400:	bfc8      	it	gt
 8013402:	461d      	movgt	r5, r3
 8013404:	9b00      	ldr	r3, [sp, #0]
 8013406:	bfd8      	it	le
 8013408:	2501      	movle	r5, #1
 801340a:	441d      	add	r5, r3
 801340c:	f04f 0800 	mov.w	r8, #0
 8013410:	4651      	mov	r1, sl
 8013412:	2201      	movs	r2, #1
 8013414:	4620      	mov	r0, r4
 8013416:	f000 fb41 	bl	8013a9c <__lshift>
 801341a:	4631      	mov	r1, r6
 801341c:	4682      	mov	sl, r0
 801341e:	f000 fba9 	bl	8013b74 <__mcmp>
 8013422:	2800      	cmp	r0, #0
 8013424:	dc96      	bgt.n	8013354 <_dtoa_r+0xabc>
 8013426:	d102      	bne.n	801342e <_dtoa_r+0xb96>
 8013428:	f019 0f01 	tst.w	r9, #1
 801342c:	d192      	bne.n	8013354 <_dtoa_r+0xabc>
 801342e:	462b      	mov	r3, r5
 8013430:	461d      	mov	r5, r3
 8013432:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8013436:	2a30      	cmp	r2, #48	; 0x30
 8013438:	d0fa      	beq.n	8013430 <_dtoa_r+0xb98>
 801343a:	e6dd      	b.n	80131f8 <_dtoa_r+0x960>
 801343c:	9a00      	ldr	r2, [sp, #0]
 801343e:	429a      	cmp	r2, r3
 8013440:	d189      	bne.n	8013356 <_dtoa_r+0xabe>
 8013442:	f10b 0b01 	add.w	fp, fp, #1
 8013446:	2331      	movs	r3, #49	; 0x31
 8013448:	e796      	b.n	8013378 <_dtoa_r+0xae0>
 801344a:	4b0a      	ldr	r3, [pc, #40]	; (8013474 <_dtoa_r+0xbdc>)
 801344c:	f7ff ba99 	b.w	8012982 <_dtoa_r+0xea>
 8013450:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013452:	2b00      	cmp	r3, #0
 8013454:	f47f aa6d 	bne.w	8012932 <_dtoa_r+0x9a>
 8013458:	4b07      	ldr	r3, [pc, #28]	; (8013478 <_dtoa_r+0xbe0>)
 801345a:	f7ff ba92 	b.w	8012982 <_dtoa_r+0xea>
 801345e:	9b01      	ldr	r3, [sp, #4]
 8013460:	2b00      	cmp	r3, #0
 8013462:	dcb5      	bgt.n	80133d0 <_dtoa_r+0xb38>
 8013464:	9b07      	ldr	r3, [sp, #28]
 8013466:	2b02      	cmp	r3, #2
 8013468:	f73f aeb1 	bgt.w	80131ce <_dtoa_r+0x936>
 801346c:	e7b0      	b.n	80133d0 <_dtoa_r+0xb38>
 801346e:	bf00      	nop
 8013470:	080148b0 	.word	0x080148b0
 8013474:	08014810 	.word	0x08014810
 8013478:	08014834 	.word	0x08014834

0801347c <_free_r>:
 801347c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801347e:	2900      	cmp	r1, #0
 8013480:	d044      	beq.n	801350c <_free_r+0x90>
 8013482:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013486:	9001      	str	r0, [sp, #4]
 8013488:	2b00      	cmp	r3, #0
 801348a:	f1a1 0404 	sub.w	r4, r1, #4
 801348e:	bfb8      	it	lt
 8013490:	18e4      	addlt	r4, r4, r3
 8013492:	f000 f8e7 	bl	8013664 <__malloc_lock>
 8013496:	4a1e      	ldr	r2, [pc, #120]	; (8013510 <_free_r+0x94>)
 8013498:	9801      	ldr	r0, [sp, #4]
 801349a:	6813      	ldr	r3, [r2, #0]
 801349c:	b933      	cbnz	r3, 80134ac <_free_r+0x30>
 801349e:	6063      	str	r3, [r4, #4]
 80134a0:	6014      	str	r4, [r2, #0]
 80134a2:	b003      	add	sp, #12
 80134a4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80134a8:	f000 b8e2 	b.w	8013670 <__malloc_unlock>
 80134ac:	42a3      	cmp	r3, r4
 80134ae:	d908      	bls.n	80134c2 <_free_r+0x46>
 80134b0:	6825      	ldr	r5, [r4, #0]
 80134b2:	1961      	adds	r1, r4, r5
 80134b4:	428b      	cmp	r3, r1
 80134b6:	bf01      	itttt	eq
 80134b8:	6819      	ldreq	r1, [r3, #0]
 80134ba:	685b      	ldreq	r3, [r3, #4]
 80134bc:	1949      	addeq	r1, r1, r5
 80134be:	6021      	streq	r1, [r4, #0]
 80134c0:	e7ed      	b.n	801349e <_free_r+0x22>
 80134c2:	461a      	mov	r2, r3
 80134c4:	685b      	ldr	r3, [r3, #4]
 80134c6:	b10b      	cbz	r3, 80134cc <_free_r+0x50>
 80134c8:	42a3      	cmp	r3, r4
 80134ca:	d9fa      	bls.n	80134c2 <_free_r+0x46>
 80134cc:	6811      	ldr	r1, [r2, #0]
 80134ce:	1855      	adds	r5, r2, r1
 80134d0:	42a5      	cmp	r5, r4
 80134d2:	d10b      	bne.n	80134ec <_free_r+0x70>
 80134d4:	6824      	ldr	r4, [r4, #0]
 80134d6:	4421      	add	r1, r4
 80134d8:	1854      	adds	r4, r2, r1
 80134da:	42a3      	cmp	r3, r4
 80134dc:	6011      	str	r1, [r2, #0]
 80134de:	d1e0      	bne.n	80134a2 <_free_r+0x26>
 80134e0:	681c      	ldr	r4, [r3, #0]
 80134e2:	685b      	ldr	r3, [r3, #4]
 80134e4:	6053      	str	r3, [r2, #4]
 80134e6:	440c      	add	r4, r1
 80134e8:	6014      	str	r4, [r2, #0]
 80134ea:	e7da      	b.n	80134a2 <_free_r+0x26>
 80134ec:	d902      	bls.n	80134f4 <_free_r+0x78>
 80134ee:	230c      	movs	r3, #12
 80134f0:	6003      	str	r3, [r0, #0]
 80134f2:	e7d6      	b.n	80134a2 <_free_r+0x26>
 80134f4:	6825      	ldr	r5, [r4, #0]
 80134f6:	1961      	adds	r1, r4, r5
 80134f8:	428b      	cmp	r3, r1
 80134fa:	bf04      	itt	eq
 80134fc:	6819      	ldreq	r1, [r3, #0]
 80134fe:	685b      	ldreq	r3, [r3, #4]
 8013500:	6063      	str	r3, [r4, #4]
 8013502:	bf04      	itt	eq
 8013504:	1949      	addeq	r1, r1, r5
 8013506:	6021      	streq	r1, [r4, #0]
 8013508:	6054      	str	r4, [r2, #4]
 801350a:	e7ca      	b.n	80134a2 <_free_r+0x26>
 801350c:	b003      	add	sp, #12
 801350e:	bd30      	pop	{r4, r5, pc}
 8013510:	200067a8 	.word	0x200067a8

08013514 <malloc>:
 8013514:	4b02      	ldr	r3, [pc, #8]	; (8013520 <malloc+0xc>)
 8013516:	4601      	mov	r1, r0
 8013518:	6818      	ldr	r0, [r3, #0]
 801351a:	f000 b823 	b.w	8013564 <_malloc_r>
 801351e:	bf00      	nop
 8013520:	200001e0 	.word	0x200001e0

08013524 <sbrk_aligned>:
 8013524:	b570      	push	{r4, r5, r6, lr}
 8013526:	4e0e      	ldr	r6, [pc, #56]	; (8013560 <sbrk_aligned+0x3c>)
 8013528:	460c      	mov	r4, r1
 801352a:	6831      	ldr	r1, [r6, #0]
 801352c:	4605      	mov	r5, r0
 801352e:	b911      	cbnz	r1, 8013536 <sbrk_aligned+0x12>
 8013530:	f000 fe96 	bl	8014260 <_sbrk_r>
 8013534:	6030      	str	r0, [r6, #0]
 8013536:	4621      	mov	r1, r4
 8013538:	4628      	mov	r0, r5
 801353a:	f000 fe91 	bl	8014260 <_sbrk_r>
 801353e:	1c43      	adds	r3, r0, #1
 8013540:	d00a      	beq.n	8013558 <sbrk_aligned+0x34>
 8013542:	1cc4      	adds	r4, r0, #3
 8013544:	f024 0403 	bic.w	r4, r4, #3
 8013548:	42a0      	cmp	r0, r4
 801354a:	d007      	beq.n	801355c <sbrk_aligned+0x38>
 801354c:	1a21      	subs	r1, r4, r0
 801354e:	4628      	mov	r0, r5
 8013550:	f000 fe86 	bl	8014260 <_sbrk_r>
 8013554:	3001      	adds	r0, #1
 8013556:	d101      	bne.n	801355c <sbrk_aligned+0x38>
 8013558:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 801355c:	4620      	mov	r0, r4
 801355e:	bd70      	pop	{r4, r5, r6, pc}
 8013560:	200067ac 	.word	0x200067ac

08013564 <_malloc_r>:
 8013564:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013568:	1ccd      	adds	r5, r1, #3
 801356a:	f025 0503 	bic.w	r5, r5, #3
 801356e:	3508      	adds	r5, #8
 8013570:	2d0c      	cmp	r5, #12
 8013572:	bf38      	it	cc
 8013574:	250c      	movcc	r5, #12
 8013576:	2d00      	cmp	r5, #0
 8013578:	4607      	mov	r7, r0
 801357a:	db01      	blt.n	8013580 <_malloc_r+0x1c>
 801357c:	42a9      	cmp	r1, r5
 801357e:	d905      	bls.n	801358c <_malloc_r+0x28>
 8013580:	230c      	movs	r3, #12
 8013582:	603b      	str	r3, [r7, #0]
 8013584:	2600      	movs	r6, #0
 8013586:	4630      	mov	r0, r6
 8013588:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801358c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8013660 <_malloc_r+0xfc>
 8013590:	f000 f868 	bl	8013664 <__malloc_lock>
 8013594:	f8d8 3000 	ldr.w	r3, [r8]
 8013598:	461c      	mov	r4, r3
 801359a:	bb5c      	cbnz	r4, 80135f4 <_malloc_r+0x90>
 801359c:	4629      	mov	r1, r5
 801359e:	4638      	mov	r0, r7
 80135a0:	f7ff ffc0 	bl	8013524 <sbrk_aligned>
 80135a4:	1c43      	adds	r3, r0, #1
 80135a6:	4604      	mov	r4, r0
 80135a8:	d155      	bne.n	8013656 <_malloc_r+0xf2>
 80135aa:	f8d8 4000 	ldr.w	r4, [r8]
 80135ae:	4626      	mov	r6, r4
 80135b0:	2e00      	cmp	r6, #0
 80135b2:	d145      	bne.n	8013640 <_malloc_r+0xdc>
 80135b4:	2c00      	cmp	r4, #0
 80135b6:	d048      	beq.n	801364a <_malloc_r+0xe6>
 80135b8:	6823      	ldr	r3, [r4, #0]
 80135ba:	4631      	mov	r1, r6
 80135bc:	4638      	mov	r0, r7
 80135be:	eb04 0903 	add.w	r9, r4, r3
 80135c2:	f000 fe4d 	bl	8014260 <_sbrk_r>
 80135c6:	4581      	cmp	r9, r0
 80135c8:	d13f      	bne.n	801364a <_malloc_r+0xe6>
 80135ca:	6821      	ldr	r1, [r4, #0]
 80135cc:	1a6d      	subs	r5, r5, r1
 80135ce:	4629      	mov	r1, r5
 80135d0:	4638      	mov	r0, r7
 80135d2:	f7ff ffa7 	bl	8013524 <sbrk_aligned>
 80135d6:	3001      	adds	r0, #1
 80135d8:	d037      	beq.n	801364a <_malloc_r+0xe6>
 80135da:	6823      	ldr	r3, [r4, #0]
 80135dc:	442b      	add	r3, r5
 80135de:	6023      	str	r3, [r4, #0]
 80135e0:	f8d8 3000 	ldr.w	r3, [r8]
 80135e4:	2b00      	cmp	r3, #0
 80135e6:	d038      	beq.n	801365a <_malloc_r+0xf6>
 80135e8:	685a      	ldr	r2, [r3, #4]
 80135ea:	42a2      	cmp	r2, r4
 80135ec:	d12b      	bne.n	8013646 <_malloc_r+0xe2>
 80135ee:	2200      	movs	r2, #0
 80135f0:	605a      	str	r2, [r3, #4]
 80135f2:	e00f      	b.n	8013614 <_malloc_r+0xb0>
 80135f4:	6822      	ldr	r2, [r4, #0]
 80135f6:	1b52      	subs	r2, r2, r5
 80135f8:	d41f      	bmi.n	801363a <_malloc_r+0xd6>
 80135fa:	2a0b      	cmp	r2, #11
 80135fc:	d917      	bls.n	801362e <_malloc_r+0xca>
 80135fe:	1961      	adds	r1, r4, r5
 8013600:	42a3      	cmp	r3, r4
 8013602:	6025      	str	r5, [r4, #0]
 8013604:	bf18      	it	ne
 8013606:	6059      	strne	r1, [r3, #4]
 8013608:	6863      	ldr	r3, [r4, #4]
 801360a:	bf08      	it	eq
 801360c:	f8c8 1000 	streq.w	r1, [r8]
 8013610:	5162      	str	r2, [r4, r5]
 8013612:	604b      	str	r3, [r1, #4]
 8013614:	4638      	mov	r0, r7
 8013616:	f104 060b 	add.w	r6, r4, #11
 801361a:	f000 f829 	bl	8013670 <__malloc_unlock>
 801361e:	f026 0607 	bic.w	r6, r6, #7
 8013622:	1d23      	adds	r3, r4, #4
 8013624:	1af2      	subs	r2, r6, r3
 8013626:	d0ae      	beq.n	8013586 <_malloc_r+0x22>
 8013628:	1b9b      	subs	r3, r3, r6
 801362a:	50a3      	str	r3, [r4, r2]
 801362c:	e7ab      	b.n	8013586 <_malloc_r+0x22>
 801362e:	42a3      	cmp	r3, r4
 8013630:	6862      	ldr	r2, [r4, #4]
 8013632:	d1dd      	bne.n	80135f0 <_malloc_r+0x8c>
 8013634:	f8c8 2000 	str.w	r2, [r8]
 8013638:	e7ec      	b.n	8013614 <_malloc_r+0xb0>
 801363a:	4623      	mov	r3, r4
 801363c:	6864      	ldr	r4, [r4, #4]
 801363e:	e7ac      	b.n	801359a <_malloc_r+0x36>
 8013640:	4634      	mov	r4, r6
 8013642:	6876      	ldr	r6, [r6, #4]
 8013644:	e7b4      	b.n	80135b0 <_malloc_r+0x4c>
 8013646:	4613      	mov	r3, r2
 8013648:	e7cc      	b.n	80135e4 <_malloc_r+0x80>
 801364a:	230c      	movs	r3, #12
 801364c:	603b      	str	r3, [r7, #0]
 801364e:	4638      	mov	r0, r7
 8013650:	f000 f80e 	bl	8013670 <__malloc_unlock>
 8013654:	e797      	b.n	8013586 <_malloc_r+0x22>
 8013656:	6025      	str	r5, [r4, #0]
 8013658:	e7dc      	b.n	8013614 <_malloc_r+0xb0>
 801365a:	605b      	str	r3, [r3, #4]
 801365c:	deff      	udf	#255	; 0xff
 801365e:	bf00      	nop
 8013660:	200067a8 	.word	0x200067a8

08013664 <__malloc_lock>:
 8013664:	4801      	ldr	r0, [pc, #4]	; (801366c <__malloc_lock+0x8>)
 8013666:	f7ff b87d 	b.w	8012764 <__retarget_lock_acquire_recursive>
 801366a:	bf00      	nop
 801366c:	200067a4 	.word	0x200067a4

08013670 <__malloc_unlock>:
 8013670:	4801      	ldr	r0, [pc, #4]	; (8013678 <__malloc_unlock+0x8>)
 8013672:	f7ff b878 	b.w	8012766 <__retarget_lock_release_recursive>
 8013676:	bf00      	nop
 8013678:	200067a4 	.word	0x200067a4

0801367c <_Balloc>:
 801367c:	b570      	push	{r4, r5, r6, lr}
 801367e:	69c6      	ldr	r6, [r0, #28]
 8013680:	4604      	mov	r4, r0
 8013682:	460d      	mov	r5, r1
 8013684:	b976      	cbnz	r6, 80136a4 <_Balloc+0x28>
 8013686:	2010      	movs	r0, #16
 8013688:	f7ff ff44 	bl	8013514 <malloc>
 801368c:	4602      	mov	r2, r0
 801368e:	61e0      	str	r0, [r4, #28]
 8013690:	b920      	cbnz	r0, 801369c <_Balloc+0x20>
 8013692:	4b18      	ldr	r3, [pc, #96]	; (80136f4 <_Balloc+0x78>)
 8013694:	4818      	ldr	r0, [pc, #96]	; (80136f8 <_Balloc+0x7c>)
 8013696:	216b      	movs	r1, #107	; 0x6b
 8013698:	f000 fdf2 	bl	8014280 <__assert_func>
 801369c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80136a0:	6006      	str	r6, [r0, #0]
 80136a2:	60c6      	str	r6, [r0, #12]
 80136a4:	69e6      	ldr	r6, [r4, #28]
 80136a6:	68f3      	ldr	r3, [r6, #12]
 80136a8:	b183      	cbz	r3, 80136cc <_Balloc+0x50>
 80136aa:	69e3      	ldr	r3, [r4, #28]
 80136ac:	68db      	ldr	r3, [r3, #12]
 80136ae:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80136b2:	b9b8      	cbnz	r0, 80136e4 <_Balloc+0x68>
 80136b4:	2101      	movs	r1, #1
 80136b6:	fa01 f605 	lsl.w	r6, r1, r5
 80136ba:	1d72      	adds	r2, r6, #5
 80136bc:	0092      	lsls	r2, r2, #2
 80136be:	4620      	mov	r0, r4
 80136c0:	f000 fdfc 	bl	80142bc <_calloc_r>
 80136c4:	b160      	cbz	r0, 80136e0 <_Balloc+0x64>
 80136c6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80136ca:	e00e      	b.n	80136ea <_Balloc+0x6e>
 80136cc:	2221      	movs	r2, #33	; 0x21
 80136ce:	2104      	movs	r1, #4
 80136d0:	4620      	mov	r0, r4
 80136d2:	f000 fdf3 	bl	80142bc <_calloc_r>
 80136d6:	69e3      	ldr	r3, [r4, #28]
 80136d8:	60f0      	str	r0, [r6, #12]
 80136da:	68db      	ldr	r3, [r3, #12]
 80136dc:	2b00      	cmp	r3, #0
 80136de:	d1e4      	bne.n	80136aa <_Balloc+0x2e>
 80136e0:	2000      	movs	r0, #0
 80136e2:	bd70      	pop	{r4, r5, r6, pc}
 80136e4:	6802      	ldr	r2, [r0, #0]
 80136e6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80136ea:	2300      	movs	r3, #0
 80136ec:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80136f0:	e7f7      	b.n	80136e2 <_Balloc+0x66>
 80136f2:	bf00      	nop
 80136f4:	08014841 	.word	0x08014841
 80136f8:	080148c1 	.word	0x080148c1

080136fc <_Bfree>:
 80136fc:	b570      	push	{r4, r5, r6, lr}
 80136fe:	69c6      	ldr	r6, [r0, #28]
 8013700:	4605      	mov	r5, r0
 8013702:	460c      	mov	r4, r1
 8013704:	b976      	cbnz	r6, 8013724 <_Bfree+0x28>
 8013706:	2010      	movs	r0, #16
 8013708:	f7ff ff04 	bl	8013514 <malloc>
 801370c:	4602      	mov	r2, r0
 801370e:	61e8      	str	r0, [r5, #28]
 8013710:	b920      	cbnz	r0, 801371c <_Bfree+0x20>
 8013712:	4b09      	ldr	r3, [pc, #36]	; (8013738 <_Bfree+0x3c>)
 8013714:	4809      	ldr	r0, [pc, #36]	; (801373c <_Bfree+0x40>)
 8013716:	218f      	movs	r1, #143	; 0x8f
 8013718:	f000 fdb2 	bl	8014280 <__assert_func>
 801371c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8013720:	6006      	str	r6, [r0, #0]
 8013722:	60c6      	str	r6, [r0, #12]
 8013724:	b13c      	cbz	r4, 8013736 <_Bfree+0x3a>
 8013726:	69eb      	ldr	r3, [r5, #28]
 8013728:	6862      	ldr	r2, [r4, #4]
 801372a:	68db      	ldr	r3, [r3, #12]
 801372c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8013730:	6021      	str	r1, [r4, #0]
 8013732:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8013736:	bd70      	pop	{r4, r5, r6, pc}
 8013738:	08014841 	.word	0x08014841
 801373c:	080148c1 	.word	0x080148c1

08013740 <__multadd>:
 8013740:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013744:	690d      	ldr	r5, [r1, #16]
 8013746:	4607      	mov	r7, r0
 8013748:	460c      	mov	r4, r1
 801374a:	461e      	mov	r6, r3
 801374c:	f101 0c14 	add.w	ip, r1, #20
 8013750:	2000      	movs	r0, #0
 8013752:	f8dc 3000 	ldr.w	r3, [ip]
 8013756:	b299      	uxth	r1, r3
 8013758:	fb02 6101 	mla	r1, r2, r1, r6
 801375c:	0c1e      	lsrs	r6, r3, #16
 801375e:	0c0b      	lsrs	r3, r1, #16
 8013760:	fb02 3306 	mla	r3, r2, r6, r3
 8013764:	b289      	uxth	r1, r1
 8013766:	3001      	adds	r0, #1
 8013768:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801376c:	4285      	cmp	r5, r0
 801376e:	f84c 1b04 	str.w	r1, [ip], #4
 8013772:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8013776:	dcec      	bgt.n	8013752 <__multadd+0x12>
 8013778:	b30e      	cbz	r6, 80137be <__multadd+0x7e>
 801377a:	68a3      	ldr	r3, [r4, #8]
 801377c:	42ab      	cmp	r3, r5
 801377e:	dc19      	bgt.n	80137b4 <__multadd+0x74>
 8013780:	6861      	ldr	r1, [r4, #4]
 8013782:	4638      	mov	r0, r7
 8013784:	3101      	adds	r1, #1
 8013786:	f7ff ff79 	bl	801367c <_Balloc>
 801378a:	4680      	mov	r8, r0
 801378c:	b928      	cbnz	r0, 801379a <__multadd+0x5a>
 801378e:	4602      	mov	r2, r0
 8013790:	4b0c      	ldr	r3, [pc, #48]	; (80137c4 <__multadd+0x84>)
 8013792:	480d      	ldr	r0, [pc, #52]	; (80137c8 <__multadd+0x88>)
 8013794:	21ba      	movs	r1, #186	; 0xba
 8013796:	f000 fd73 	bl	8014280 <__assert_func>
 801379a:	6922      	ldr	r2, [r4, #16]
 801379c:	3202      	adds	r2, #2
 801379e:	f104 010c 	add.w	r1, r4, #12
 80137a2:	0092      	lsls	r2, r2, #2
 80137a4:	300c      	adds	r0, #12
 80137a6:	f7fe ffdf 	bl	8012768 <memcpy>
 80137aa:	4621      	mov	r1, r4
 80137ac:	4638      	mov	r0, r7
 80137ae:	f7ff ffa5 	bl	80136fc <_Bfree>
 80137b2:	4644      	mov	r4, r8
 80137b4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80137b8:	3501      	adds	r5, #1
 80137ba:	615e      	str	r6, [r3, #20]
 80137bc:	6125      	str	r5, [r4, #16]
 80137be:	4620      	mov	r0, r4
 80137c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80137c4:	080148b0 	.word	0x080148b0
 80137c8:	080148c1 	.word	0x080148c1

080137cc <__hi0bits>:
 80137cc:	0c03      	lsrs	r3, r0, #16
 80137ce:	041b      	lsls	r3, r3, #16
 80137d0:	b9d3      	cbnz	r3, 8013808 <__hi0bits+0x3c>
 80137d2:	0400      	lsls	r0, r0, #16
 80137d4:	2310      	movs	r3, #16
 80137d6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80137da:	bf04      	itt	eq
 80137dc:	0200      	lsleq	r0, r0, #8
 80137de:	3308      	addeq	r3, #8
 80137e0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80137e4:	bf04      	itt	eq
 80137e6:	0100      	lsleq	r0, r0, #4
 80137e8:	3304      	addeq	r3, #4
 80137ea:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80137ee:	bf04      	itt	eq
 80137f0:	0080      	lsleq	r0, r0, #2
 80137f2:	3302      	addeq	r3, #2
 80137f4:	2800      	cmp	r0, #0
 80137f6:	db05      	blt.n	8013804 <__hi0bits+0x38>
 80137f8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80137fc:	f103 0301 	add.w	r3, r3, #1
 8013800:	bf08      	it	eq
 8013802:	2320      	moveq	r3, #32
 8013804:	4618      	mov	r0, r3
 8013806:	4770      	bx	lr
 8013808:	2300      	movs	r3, #0
 801380a:	e7e4      	b.n	80137d6 <__hi0bits+0xa>

0801380c <__lo0bits>:
 801380c:	6803      	ldr	r3, [r0, #0]
 801380e:	f013 0207 	ands.w	r2, r3, #7
 8013812:	d00c      	beq.n	801382e <__lo0bits+0x22>
 8013814:	07d9      	lsls	r1, r3, #31
 8013816:	d422      	bmi.n	801385e <__lo0bits+0x52>
 8013818:	079a      	lsls	r2, r3, #30
 801381a:	bf49      	itett	mi
 801381c:	085b      	lsrmi	r3, r3, #1
 801381e:	089b      	lsrpl	r3, r3, #2
 8013820:	6003      	strmi	r3, [r0, #0]
 8013822:	2201      	movmi	r2, #1
 8013824:	bf5c      	itt	pl
 8013826:	6003      	strpl	r3, [r0, #0]
 8013828:	2202      	movpl	r2, #2
 801382a:	4610      	mov	r0, r2
 801382c:	4770      	bx	lr
 801382e:	b299      	uxth	r1, r3
 8013830:	b909      	cbnz	r1, 8013836 <__lo0bits+0x2a>
 8013832:	0c1b      	lsrs	r3, r3, #16
 8013834:	2210      	movs	r2, #16
 8013836:	b2d9      	uxtb	r1, r3
 8013838:	b909      	cbnz	r1, 801383e <__lo0bits+0x32>
 801383a:	3208      	adds	r2, #8
 801383c:	0a1b      	lsrs	r3, r3, #8
 801383e:	0719      	lsls	r1, r3, #28
 8013840:	bf04      	itt	eq
 8013842:	091b      	lsreq	r3, r3, #4
 8013844:	3204      	addeq	r2, #4
 8013846:	0799      	lsls	r1, r3, #30
 8013848:	bf04      	itt	eq
 801384a:	089b      	lsreq	r3, r3, #2
 801384c:	3202      	addeq	r2, #2
 801384e:	07d9      	lsls	r1, r3, #31
 8013850:	d403      	bmi.n	801385a <__lo0bits+0x4e>
 8013852:	085b      	lsrs	r3, r3, #1
 8013854:	f102 0201 	add.w	r2, r2, #1
 8013858:	d003      	beq.n	8013862 <__lo0bits+0x56>
 801385a:	6003      	str	r3, [r0, #0]
 801385c:	e7e5      	b.n	801382a <__lo0bits+0x1e>
 801385e:	2200      	movs	r2, #0
 8013860:	e7e3      	b.n	801382a <__lo0bits+0x1e>
 8013862:	2220      	movs	r2, #32
 8013864:	e7e1      	b.n	801382a <__lo0bits+0x1e>
	...

08013868 <__i2b>:
 8013868:	b510      	push	{r4, lr}
 801386a:	460c      	mov	r4, r1
 801386c:	2101      	movs	r1, #1
 801386e:	f7ff ff05 	bl	801367c <_Balloc>
 8013872:	4602      	mov	r2, r0
 8013874:	b928      	cbnz	r0, 8013882 <__i2b+0x1a>
 8013876:	4b05      	ldr	r3, [pc, #20]	; (801388c <__i2b+0x24>)
 8013878:	4805      	ldr	r0, [pc, #20]	; (8013890 <__i2b+0x28>)
 801387a:	f240 1145 	movw	r1, #325	; 0x145
 801387e:	f000 fcff 	bl	8014280 <__assert_func>
 8013882:	2301      	movs	r3, #1
 8013884:	6144      	str	r4, [r0, #20]
 8013886:	6103      	str	r3, [r0, #16]
 8013888:	bd10      	pop	{r4, pc}
 801388a:	bf00      	nop
 801388c:	080148b0 	.word	0x080148b0
 8013890:	080148c1 	.word	0x080148c1

08013894 <__multiply>:
 8013894:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013898:	4691      	mov	r9, r2
 801389a:	690a      	ldr	r2, [r1, #16]
 801389c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80138a0:	429a      	cmp	r2, r3
 80138a2:	bfb8      	it	lt
 80138a4:	460b      	movlt	r3, r1
 80138a6:	460c      	mov	r4, r1
 80138a8:	bfbc      	itt	lt
 80138aa:	464c      	movlt	r4, r9
 80138ac:	4699      	movlt	r9, r3
 80138ae:	6927      	ldr	r7, [r4, #16]
 80138b0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80138b4:	68a3      	ldr	r3, [r4, #8]
 80138b6:	6861      	ldr	r1, [r4, #4]
 80138b8:	eb07 060a 	add.w	r6, r7, sl
 80138bc:	42b3      	cmp	r3, r6
 80138be:	b085      	sub	sp, #20
 80138c0:	bfb8      	it	lt
 80138c2:	3101      	addlt	r1, #1
 80138c4:	f7ff feda 	bl	801367c <_Balloc>
 80138c8:	b930      	cbnz	r0, 80138d8 <__multiply+0x44>
 80138ca:	4602      	mov	r2, r0
 80138cc:	4b44      	ldr	r3, [pc, #272]	; (80139e0 <__multiply+0x14c>)
 80138ce:	4845      	ldr	r0, [pc, #276]	; (80139e4 <__multiply+0x150>)
 80138d0:	f44f 71b1 	mov.w	r1, #354	; 0x162
 80138d4:	f000 fcd4 	bl	8014280 <__assert_func>
 80138d8:	f100 0514 	add.w	r5, r0, #20
 80138dc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80138e0:	462b      	mov	r3, r5
 80138e2:	2200      	movs	r2, #0
 80138e4:	4543      	cmp	r3, r8
 80138e6:	d321      	bcc.n	801392c <__multiply+0x98>
 80138e8:	f104 0314 	add.w	r3, r4, #20
 80138ec:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80138f0:	f109 0314 	add.w	r3, r9, #20
 80138f4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80138f8:	9202      	str	r2, [sp, #8]
 80138fa:	1b3a      	subs	r2, r7, r4
 80138fc:	3a15      	subs	r2, #21
 80138fe:	f022 0203 	bic.w	r2, r2, #3
 8013902:	3204      	adds	r2, #4
 8013904:	f104 0115 	add.w	r1, r4, #21
 8013908:	428f      	cmp	r7, r1
 801390a:	bf38      	it	cc
 801390c:	2204      	movcc	r2, #4
 801390e:	9201      	str	r2, [sp, #4]
 8013910:	9a02      	ldr	r2, [sp, #8]
 8013912:	9303      	str	r3, [sp, #12]
 8013914:	429a      	cmp	r2, r3
 8013916:	d80c      	bhi.n	8013932 <__multiply+0x9e>
 8013918:	2e00      	cmp	r6, #0
 801391a:	dd03      	ble.n	8013924 <__multiply+0x90>
 801391c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8013920:	2b00      	cmp	r3, #0
 8013922:	d05b      	beq.n	80139dc <__multiply+0x148>
 8013924:	6106      	str	r6, [r0, #16]
 8013926:	b005      	add	sp, #20
 8013928:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801392c:	f843 2b04 	str.w	r2, [r3], #4
 8013930:	e7d8      	b.n	80138e4 <__multiply+0x50>
 8013932:	f8b3 a000 	ldrh.w	sl, [r3]
 8013936:	f1ba 0f00 	cmp.w	sl, #0
 801393a:	d024      	beq.n	8013986 <__multiply+0xf2>
 801393c:	f104 0e14 	add.w	lr, r4, #20
 8013940:	46a9      	mov	r9, r5
 8013942:	f04f 0c00 	mov.w	ip, #0
 8013946:	f85e 2b04 	ldr.w	r2, [lr], #4
 801394a:	f8d9 1000 	ldr.w	r1, [r9]
 801394e:	fa1f fb82 	uxth.w	fp, r2
 8013952:	b289      	uxth	r1, r1
 8013954:	fb0a 110b 	mla	r1, sl, fp, r1
 8013958:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 801395c:	f8d9 2000 	ldr.w	r2, [r9]
 8013960:	4461      	add	r1, ip
 8013962:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8013966:	fb0a c20b 	mla	r2, sl, fp, ip
 801396a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801396e:	b289      	uxth	r1, r1
 8013970:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8013974:	4577      	cmp	r7, lr
 8013976:	f849 1b04 	str.w	r1, [r9], #4
 801397a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801397e:	d8e2      	bhi.n	8013946 <__multiply+0xb2>
 8013980:	9a01      	ldr	r2, [sp, #4]
 8013982:	f845 c002 	str.w	ip, [r5, r2]
 8013986:	9a03      	ldr	r2, [sp, #12]
 8013988:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801398c:	3304      	adds	r3, #4
 801398e:	f1b9 0f00 	cmp.w	r9, #0
 8013992:	d021      	beq.n	80139d8 <__multiply+0x144>
 8013994:	6829      	ldr	r1, [r5, #0]
 8013996:	f104 0c14 	add.w	ip, r4, #20
 801399a:	46ae      	mov	lr, r5
 801399c:	f04f 0a00 	mov.w	sl, #0
 80139a0:	f8bc b000 	ldrh.w	fp, [ip]
 80139a4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80139a8:	fb09 220b 	mla	r2, r9, fp, r2
 80139ac:	4452      	add	r2, sl
 80139ae:	b289      	uxth	r1, r1
 80139b0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80139b4:	f84e 1b04 	str.w	r1, [lr], #4
 80139b8:	f85c 1b04 	ldr.w	r1, [ip], #4
 80139bc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80139c0:	f8be 1000 	ldrh.w	r1, [lr]
 80139c4:	fb09 110a 	mla	r1, r9, sl, r1
 80139c8:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 80139cc:	4567      	cmp	r7, ip
 80139ce:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80139d2:	d8e5      	bhi.n	80139a0 <__multiply+0x10c>
 80139d4:	9a01      	ldr	r2, [sp, #4]
 80139d6:	50a9      	str	r1, [r5, r2]
 80139d8:	3504      	adds	r5, #4
 80139da:	e799      	b.n	8013910 <__multiply+0x7c>
 80139dc:	3e01      	subs	r6, #1
 80139de:	e79b      	b.n	8013918 <__multiply+0x84>
 80139e0:	080148b0 	.word	0x080148b0
 80139e4:	080148c1 	.word	0x080148c1

080139e8 <__pow5mult>:
 80139e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80139ec:	4615      	mov	r5, r2
 80139ee:	f012 0203 	ands.w	r2, r2, #3
 80139f2:	4606      	mov	r6, r0
 80139f4:	460f      	mov	r7, r1
 80139f6:	d007      	beq.n	8013a08 <__pow5mult+0x20>
 80139f8:	4c25      	ldr	r4, [pc, #148]	; (8013a90 <__pow5mult+0xa8>)
 80139fa:	3a01      	subs	r2, #1
 80139fc:	2300      	movs	r3, #0
 80139fe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8013a02:	f7ff fe9d 	bl	8013740 <__multadd>
 8013a06:	4607      	mov	r7, r0
 8013a08:	10ad      	asrs	r5, r5, #2
 8013a0a:	d03d      	beq.n	8013a88 <__pow5mult+0xa0>
 8013a0c:	69f4      	ldr	r4, [r6, #28]
 8013a0e:	b97c      	cbnz	r4, 8013a30 <__pow5mult+0x48>
 8013a10:	2010      	movs	r0, #16
 8013a12:	f7ff fd7f 	bl	8013514 <malloc>
 8013a16:	4602      	mov	r2, r0
 8013a18:	61f0      	str	r0, [r6, #28]
 8013a1a:	b928      	cbnz	r0, 8013a28 <__pow5mult+0x40>
 8013a1c:	4b1d      	ldr	r3, [pc, #116]	; (8013a94 <__pow5mult+0xac>)
 8013a1e:	481e      	ldr	r0, [pc, #120]	; (8013a98 <__pow5mult+0xb0>)
 8013a20:	f240 11b3 	movw	r1, #435	; 0x1b3
 8013a24:	f000 fc2c 	bl	8014280 <__assert_func>
 8013a28:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8013a2c:	6004      	str	r4, [r0, #0]
 8013a2e:	60c4      	str	r4, [r0, #12]
 8013a30:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8013a34:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8013a38:	b94c      	cbnz	r4, 8013a4e <__pow5mult+0x66>
 8013a3a:	f240 2171 	movw	r1, #625	; 0x271
 8013a3e:	4630      	mov	r0, r6
 8013a40:	f7ff ff12 	bl	8013868 <__i2b>
 8013a44:	2300      	movs	r3, #0
 8013a46:	f8c8 0008 	str.w	r0, [r8, #8]
 8013a4a:	4604      	mov	r4, r0
 8013a4c:	6003      	str	r3, [r0, #0]
 8013a4e:	f04f 0900 	mov.w	r9, #0
 8013a52:	07eb      	lsls	r3, r5, #31
 8013a54:	d50a      	bpl.n	8013a6c <__pow5mult+0x84>
 8013a56:	4639      	mov	r1, r7
 8013a58:	4622      	mov	r2, r4
 8013a5a:	4630      	mov	r0, r6
 8013a5c:	f7ff ff1a 	bl	8013894 <__multiply>
 8013a60:	4639      	mov	r1, r7
 8013a62:	4680      	mov	r8, r0
 8013a64:	4630      	mov	r0, r6
 8013a66:	f7ff fe49 	bl	80136fc <_Bfree>
 8013a6a:	4647      	mov	r7, r8
 8013a6c:	106d      	asrs	r5, r5, #1
 8013a6e:	d00b      	beq.n	8013a88 <__pow5mult+0xa0>
 8013a70:	6820      	ldr	r0, [r4, #0]
 8013a72:	b938      	cbnz	r0, 8013a84 <__pow5mult+0x9c>
 8013a74:	4622      	mov	r2, r4
 8013a76:	4621      	mov	r1, r4
 8013a78:	4630      	mov	r0, r6
 8013a7a:	f7ff ff0b 	bl	8013894 <__multiply>
 8013a7e:	6020      	str	r0, [r4, #0]
 8013a80:	f8c0 9000 	str.w	r9, [r0]
 8013a84:	4604      	mov	r4, r0
 8013a86:	e7e4      	b.n	8013a52 <__pow5mult+0x6a>
 8013a88:	4638      	mov	r0, r7
 8013a8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013a8e:	bf00      	nop
 8013a90:	08014a10 	.word	0x08014a10
 8013a94:	08014841 	.word	0x08014841
 8013a98:	080148c1 	.word	0x080148c1

08013a9c <__lshift>:
 8013a9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013aa0:	460c      	mov	r4, r1
 8013aa2:	6849      	ldr	r1, [r1, #4]
 8013aa4:	6923      	ldr	r3, [r4, #16]
 8013aa6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8013aaa:	68a3      	ldr	r3, [r4, #8]
 8013aac:	4607      	mov	r7, r0
 8013aae:	4691      	mov	r9, r2
 8013ab0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8013ab4:	f108 0601 	add.w	r6, r8, #1
 8013ab8:	42b3      	cmp	r3, r6
 8013aba:	db0b      	blt.n	8013ad4 <__lshift+0x38>
 8013abc:	4638      	mov	r0, r7
 8013abe:	f7ff fddd 	bl	801367c <_Balloc>
 8013ac2:	4605      	mov	r5, r0
 8013ac4:	b948      	cbnz	r0, 8013ada <__lshift+0x3e>
 8013ac6:	4602      	mov	r2, r0
 8013ac8:	4b28      	ldr	r3, [pc, #160]	; (8013b6c <__lshift+0xd0>)
 8013aca:	4829      	ldr	r0, [pc, #164]	; (8013b70 <__lshift+0xd4>)
 8013acc:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8013ad0:	f000 fbd6 	bl	8014280 <__assert_func>
 8013ad4:	3101      	adds	r1, #1
 8013ad6:	005b      	lsls	r3, r3, #1
 8013ad8:	e7ee      	b.n	8013ab8 <__lshift+0x1c>
 8013ada:	2300      	movs	r3, #0
 8013adc:	f100 0114 	add.w	r1, r0, #20
 8013ae0:	f100 0210 	add.w	r2, r0, #16
 8013ae4:	4618      	mov	r0, r3
 8013ae6:	4553      	cmp	r3, sl
 8013ae8:	db33      	blt.n	8013b52 <__lshift+0xb6>
 8013aea:	6920      	ldr	r0, [r4, #16]
 8013aec:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8013af0:	f104 0314 	add.w	r3, r4, #20
 8013af4:	f019 091f 	ands.w	r9, r9, #31
 8013af8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8013afc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8013b00:	d02b      	beq.n	8013b5a <__lshift+0xbe>
 8013b02:	f1c9 0e20 	rsb	lr, r9, #32
 8013b06:	468a      	mov	sl, r1
 8013b08:	2200      	movs	r2, #0
 8013b0a:	6818      	ldr	r0, [r3, #0]
 8013b0c:	fa00 f009 	lsl.w	r0, r0, r9
 8013b10:	4310      	orrs	r0, r2
 8013b12:	f84a 0b04 	str.w	r0, [sl], #4
 8013b16:	f853 2b04 	ldr.w	r2, [r3], #4
 8013b1a:	459c      	cmp	ip, r3
 8013b1c:	fa22 f20e 	lsr.w	r2, r2, lr
 8013b20:	d8f3      	bhi.n	8013b0a <__lshift+0x6e>
 8013b22:	ebac 0304 	sub.w	r3, ip, r4
 8013b26:	3b15      	subs	r3, #21
 8013b28:	f023 0303 	bic.w	r3, r3, #3
 8013b2c:	3304      	adds	r3, #4
 8013b2e:	f104 0015 	add.w	r0, r4, #21
 8013b32:	4584      	cmp	ip, r0
 8013b34:	bf38      	it	cc
 8013b36:	2304      	movcc	r3, #4
 8013b38:	50ca      	str	r2, [r1, r3]
 8013b3a:	b10a      	cbz	r2, 8013b40 <__lshift+0xa4>
 8013b3c:	f108 0602 	add.w	r6, r8, #2
 8013b40:	3e01      	subs	r6, #1
 8013b42:	4638      	mov	r0, r7
 8013b44:	612e      	str	r6, [r5, #16]
 8013b46:	4621      	mov	r1, r4
 8013b48:	f7ff fdd8 	bl	80136fc <_Bfree>
 8013b4c:	4628      	mov	r0, r5
 8013b4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013b52:	f842 0f04 	str.w	r0, [r2, #4]!
 8013b56:	3301      	adds	r3, #1
 8013b58:	e7c5      	b.n	8013ae6 <__lshift+0x4a>
 8013b5a:	3904      	subs	r1, #4
 8013b5c:	f853 2b04 	ldr.w	r2, [r3], #4
 8013b60:	f841 2f04 	str.w	r2, [r1, #4]!
 8013b64:	459c      	cmp	ip, r3
 8013b66:	d8f9      	bhi.n	8013b5c <__lshift+0xc0>
 8013b68:	e7ea      	b.n	8013b40 <__lshift+0xa4>
 8013b6a:	bf00      	nop
 8013b6c:	080148b0 	.word	0x080148b0
 8013b70:	080148c1 	.word	0x080148c1

08013b74 <__mcmp>:
 8013b74:	b530      	push	{r4, r5, lr}
 8013b76:	6902      	ldr	r2, [r0, #16]
 8013b78:	690c      	ldr	r4, [r1, #16]
 8013b7a:	1b12      	subs	r2, r2, r4
 8013b7c:	d10e      	bne.n	8013b9c <__mcmp+0x28>
 8013b7e:	f100 0314 	add.w	r3, r0, #20
 8013b82:	3114      	adds	r1, #20
 8013b84:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8013b88:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8013b8c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8013b90:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8013b94:	42a5      	cmp	r5, r4
 8013b96:	d003      	beq.n	8013ba0 <__mcmp+0x2c>
 8013b98:	d305      	bcc.n	8013ba6 <__mcmp+0x32>
 8013b9a:	2201      	movs	r2, #1
 8013b9c:	4610      	mov	r0, r2
 8013b9e:	bd30      	pop	{r4, r5, pc}
 8013ba0:	4283      	cmp	r3, r0
 8013ba2:	d3f3      	bcc.n	8013b8c <__mcmp+0x18>
 8013ba4:	e7fa      	b.n	8013b9c <__mcmp+0x28>
 8013ba6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8013baa:	e7f7      	b.n	8013b9c <__mcmp+0x28>

08013bac <__mdiff>:
 8013bac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013bb0:	460c      	mov	r4, r1
 8013bb2:	4606      	mov	r6, r0
 8013bb4:	4611      	mov	r1, r2
 8013bb6:	4620      	mov	r0, r4
 8013bb8:	4690      	mov	r8, r2
 8013bba:	f7ff ffdb 	bl	8013b74 <__mcmp>
 8013bbe:	1e05      	subs	r5, r0, #0
 8013bc0:	d110      	bne.n	8013be4 <__mdiff+0x38>
 8013bc2:	4629      	mov	r1, r5
 8013bc4:	4630      	mov	r0, r6
 8013bc6:	f7ff fd59 	bl	801367c <_Balloc>
 8013bca:	b930      	cbnz	r0, 8013bda <__mdiff+0x2e>
 8013bcc:	4b3a      	ldr	r3, [pc, #232]	; (8013cb8 <__mdiff+0x10c>)
 8013bce:	4602      	mov	r2, r0
 8013bd0:	f240 2137 	movw	r1, #567	; 0x237
 8013bd4:	4839      	ldr	r0, [pc, #228]	; (8013cbc <__mdiff+0x110>)
 8013bd6:	f000 fb53 	bl	8014280 <__assert_func>
 8013bda:	2301      	movs	r3, #1
 8013bdc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8013be0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013be4:	bfa4      	itt	ge
 8013be6:	4643      	movge	r3, r8
 8013be8:	46a0      	movge	r8, r4
 8013bea:	4630      	mov	r0, r6
 8013bec:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8013bf0:	bfa6      	itte	ge
 8013bf2:	461c      	movge	r4, r3
 8013bf4:	2500      	movge	r5, #0
 8013bf6:	2501      	movlt	r5, #1
 8013bf8:	f7ff fd40 	bl	801367c <_Balloc>
 8013bfc:	b920      	cbnz	r0, 8013c08 <__mdiff+0x5c>
 8013bfe:	4b2e      	ldr	r3, [pc, #184]	; (8013cb8 <__mdiff+0x10c>)
 8013c00:	4602      	mov	r2, r0
 8013c02:	f240 2145 	movw	r1, #581	; 0x245
 8013c06:	e7e5      	b.n	8013bd4 <__mdiff+0x28>
 8013c08:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8013c0c:	6926      	ldr	r6, [r4, #16]
 8013c0e:	60c5      	str	r5, [r0, #12]
 8013c10:	f104 0914 	add.w	r9, r4, #20
 8013c14:	f108 0514 	add.w	r5, r8, #20
 8013c18:	f100 0e14 	add.w	lr, r0, #20
 8013c1c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8013c20:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8013c24:	f108 0210 	add.w	r2, r8, #16
 8013c28:	46f2      	mov	sl, lr
 8013c2a:	2100      	movs	r1, #0
 8013c2c:	f859 3b04 	ldr.w	r3, [r9], #4
 8013c30:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8013c34:	fa11 f88b 	uxtah	r8, r1, fp
 8013c38:	b299      	uxth	r1, r3
 8013c3a:	0c1b      	lsrs	r3, r3, #16
 8013c3c:	eba8 0801 	sub.w	r8, r8, r1
 8013c40:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8013c44:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8013c48:	fa1f f888 	uxth.w	r8, r8
 8013c4c:	1419      	asrs	r1, r3, #16
 8013c4e:	454e      	cmp	r6, r9
 8013c50:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8013c54:	f84a 3b04 	str.w	r3, [sl], #4
 8013c58:	d8e8      	bhi.n	8013c2c <__mdiff+0x80>
 8013c5a:	1b33      	subs	r3, r6, r4
 8013c5c:	3b15      	subs	r3, #21
 8013c5e:	f023 0303 	bic.w	r3, r3, #3
 8013c62:	3304      	adds	r3, #4
 8013c64:	3415      	adds	r4, #21
 8013c66:	42a6      	cmp	r6, r4
 8013c68:	bf38      	it	cc
 8013c6a:	2304      	movcc	r3, #4
 8013c6c:	441d      	add	r5, r3
 8013c6e:	4473      	add	r3, lr
 8013c70:	469e      	mov	lr, r3
 8013c72:	462e      	mov	r6, r5
 8013c74:	4566      	cmp	r6, ip
 8013c76:	d30e      	bcc.n	8013c96 <__mdiff+0xea>
 8013c78:	f10c 0203 	add.w	r2, ip, #3
 8013c7c:	1b52      	subs	r2, r2, r5
 8013c7e:	f022 0203 	bic.w	r2, r2, #3
 8013c82:	3d03      	subs	r5, #3
 8013c84:	45ac      	cmp	ip, r5
 8013c86:	bf38      	it	cc
 8013c88:	2200      	movcc	r2, #0
 8013c8a:	4413      	add	r3, r2
 8013c8c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8013c90:	b17a      	cbz	r2, 8013cb2 <__mdiff+0x106>
 8013c92:	6107      	str	r7, [r0, #16]
 8013c94:	e7a4      	b.n	8013be0 <__mdiff+0x34>
 8013c96:	f856 8b04 	ldr.w	r8, [r6], #4
 8013c9a:	fa11 f288 	uxtah	r2, r1, r8
 8013c9e:	1414      	asrs	r4, r2, #16
 8013ca0:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8013ca4:	b292      	uxth	r2, r2
 8013ca6:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8013caa:	f84e 2b04 	str.w	r2, [lr], #4
 8013cae:	1421      	asrs	r1, r4, #16
 8013cb0:	e7e0      	b.n	8013c74 <__mdiff+0xc8>
 8013cb2:	3f01      	subs	r7, #1
 8013cb4:	e7ea      	b.n	8013c8c <__mdiff+0xe0>
 8013cb6:	bf00      	nop
 8013cb8:	080148b0 	.word	0x080148b0
 8013cbc:	080148c1 	.word	0x080148c1

08013cc0 <__d2b>:
 8013cc0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8013cc4:	460f      	mov	r7, r1
 8013cc6:	2101      	movs	r1, #1
 8013cc8:	ec59 8b10 	vmov	r8, r9, d0
 8013ccc:	4616      	mov	r6, r2
 8013cce:	f7ff fcd5 	bl	801367c <_Balloc>
 8013cd2:	4604      	mov	r4, r0
 8013cd4:	b930      	cbnz	r0, 8013ce4 <__d2b+0x24>
 8013cd6:	4602      	mov	r2, r0
 8013cd8:	4b24      	ldr	r3, [pc, #144]	; (8013d6c <__d2b+0xac>)
 8013cda:	4825      	ldr	r0, [pc, #148]	; (8013d70 <__d2b+0xb0>)
 8013cdc:	f240 310f 	movw	r1, #783	; 0x30f
 8013ce0:	f000 face 	bl	8014280 <__assert_func>
 8013ce4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8013ce8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8013cec:	bb2d      	cbnz	r5, 8013d3a <__d2b+0x7a>
 8013cee:	9301      	str	r3, [sp, #4]
 8013cf0:	f1b8 0300 	subs.w	r3, r8, #0
 8013cf4:	d026      	beq.n	8013d44 <__d2b+0x84>
 8013cf6:	4668      	mov	r0, sp
 8013cf8:	9300      	str	r3, [sp, #0]
 8013cfa:	f7ff fd87 	bl	801380c <__lo0bits>
 8013cfe:	e9dd 1200 	ldrd	r1, r2, [sp]
 8013d02:	b1e8      	cbz	r0, 8013d40 <__d2b+0x80>
 8013d04:	f1c0 0320 	rsb	r3, r0, #32
 8013d08:	fa02 f303 	lsl.w	r3, r2, r3
 8013d0c:	430b      	orrs	r3, r1
 8013d0e:	40c2      	lsrs	r2, r0
 8013d10:	6163      	str	r3, [r4, #20]
 8013d12:	9201      	str	r2, [sp, #4]
 8013d14:	9b01      	ldr	r3, [sp, #4]
 8013d16:	61a3      	str	r3, [r4, #24]
 8013d18:	2b00      	cmp	r3, #0
 8013d1a:	bf14      	ite	ne
 8013d1c:	2202      	movne	r2, #2
 8013d1e:	2201      	moveq	r2, #1
 8013d20:	6122      	str	r2, [r4, #16]
 8013d22:	b1bd      	cbz	r5, 8013d54 <__d2b+0x94>
 8013d24:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8013d28:	4405      	add	r5, r0
 8013d2a:	603d      	str	r5, [r7, #0]
 8013d2c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8013d30:	6030      	str	r0, [r6, #0]
 8013d32:	4620      	mov	r0, r4
 8013d34:	b003      	add	sp, #12
 8013d36:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013d3a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8013d3e:	e7d6      	b.n	8013cee <__d2b+0x2e>
 8013d40:	6161      	str	r1, [r4, #20]
 8013d42:	e7e7      	b.n	8013d14 <__d2b+0x54>
 8013d44:	a801      	add	r0, sp, #4
 8013d46:	f7ff fd61 	bl	801380c <__lo0bits>
 8013d4a:	9b01      	ldr	r3, [sp, #4]
 8013d4c:	6163      	str	r3, [r4, #20]
 8013d4e:	3020      	adds	r0, #32
 8013d50:	2201      	movs	r2, #1
 8013d52:	e7e5      	b.n	8013d20 <__d2b+0x60>
 8013d54:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8013d58:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8013d5c:	6038      	str	r0, [r7, #0]
 8013d5e:	6918      	ldr	r0, [r3, #16]
 8013d60:	f7ff fd34 	bl	80137cc <__hi0bits>
 8013d64:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8013d68:	e7e2      	b.n	8013d30 <__d2b+0x70>
 8013d6a:	bf00      	nop
 8013d6c:	080148b0 	.word	0x080148b0
 8013d70:	080148c1 	.word	0x080148c1

08013d74 <__sfputc_r>:
 8013d74:	6893      	ldr	r3, [r2, #8]
 8013d76:	3b01      	subs	r3, #1
 8013d78:	2b00      	cmp	r3, #0
 8013d7a:	b410      	push	{r4}
 8013d7c:	6093      	str	r3, [r2, #8]
 8013d7e:	da08      	bge.n	8013d92 <__sfputc_r+0x1e>
 8013d80:	6994      	ldr	r4, [r2, #24]
 8013d82:	42a3      	cmp	r3, r4
 8013d84:	db01      	blt.n	8013d8a <__sfputc_r+0x16>
 8013d86:	290a      	cmp	r1, #10
 8013d88:	d103      	bne.n	8013d92 <__sfputc_r+0x1e>
 8013d8a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013d8e:	f7fe bb82 	b.w	8012496 <__swbuf_r>
 8013d92:	6813      	ldr	r3, [r2, #0]
 8013d94:	1c58      	adds	r0, r3, #1
 8013d96:	6010      	str	r0, [r2, #0]
 8013d98:	7019      	strb	r1, [r3, #0]
 8013d9a:	4608      	mov	r0, r1
 8013d9c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013da0:	4770      	bx	lr

08013da2 <__sfputs_r>:
 8013da2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013da4:	4606      	mov	r6, r0
 8013da6:	460f      	mov	r7, r1
 8013da8:	4614      	mov	r4, r2
 8013daa:	18d5      	adds	r5, r2, r3
 8013dac:	42ac      	cmp	r4, r5
 8013dae:	d101      	bne.n	8013db4 <__sfputs_r+0x12>
 8013db0:	2000      	movs	r0, #0
 8013db2:	e007      	b.n	8013dc4 <__sfputs_r+0x22>
 8013db4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013db8:	463a      	mov	r2, r7
 8013dba:	4630      	mov	r0, r6
 8013dbc:	f7ff ffda 	bl	8013d74 <__sfputc_r>
 8013dc0:	1c43      	adds	r3, r0, #1
 8013dc2:	d1f3      	bne.n	8013dac <__sfputs_r+0xa>
 8013dc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08013dc8 <_vfiprintf_r>:
 8013dc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013dcc:	460d      	mov	r5, r1
 8013dce:	b09d      	sub	sp, #116	; 0x74
 8013dd0:	4614      	mov	r4, r2
 8013dd2:	4698      	mov	r8, r3
 8013dd4:	4606      	mov	r6, r0
 8013dd6:	b118      	cbz	r0, 8013de0 <_vfiprintf_r+0x18>
 8013dd8:	6a03      	ldr	r3, [r0, #32]
 8013dda:	b90b      	cbnz	r3, 8013de0 <_vfiprintf_r+0x18>
 8013ddc:	f7fe fa74 	bl	80122c8 <__sinit>
 8013de0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013de2:	07d9      	lsls	r1, r3, #31
 8013de4:	d405      	bmi.n	8013df2 <_vfiprintf_r+0x2a>
 8013de6:	89ab      	ldrh	r3, [r5, #12]
 8013de8:	059a      	lsls	r2, r3, #22
 8013dea:	d402      	bmi.n	8013df2 <_vfiprintf_r+0x2a>
 8013dec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013dee:	f7fe fcb9 	bl	8012764 <__retarget_lock_acquire_recursive>
 8013df2:	89ab      	ldrh	r3, [r5, #12]
 8013df4:	071b      	lsls	r3, r3, #28
 8013df6:	d501      	bpl.n	8013dfc <_vfiprintf_r+0x34>
 8013df8:	692b      	ldr	r3, [r5, #16]
 8013dfa:	b99b      	cbnz	r3, 8013e24 <_vfiprintf_r+0x5c>
 8013dfc:	4629      	mov	r1, r5
 8013dfe:	4630      	mov	r0, r6
 8013e00:	f7fe fb86 	bl	8012510 <__swsetup_r>
 8013e04:	b170      	cbz	r0, 8013e24 <_vfiprintf_r+0x5c>
 8013e06:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013e08:	07dc      	lsls	r4, r3, #31
 8013e0a:	d504      	bpl.n	8013e16 <_vfiprintf_r+0x4e>
 8013e0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013e10:	b01d      	add	sp, #116	; 0x74
 8013e12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013e16:	89ab      	ldrh	r3, [r5, #12]
 8013e18:	0598      	lsls	r0, r3, #22
 8013e1a:	d4f7      	bmi.n	8013e0c <_vfiprintf_r+0x44>
 8013e1c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013e1e:	f7fe fca2 	bl	8012766 <__retarget_lock_release_recursive>
 8013e22:	e7f3      	b.n	8013e0c <_vfiprintf_r+0x44>
 8013e24:	2300      	movs	r3, #0
 8013e26:	9309      	str	r3, [sp, #36]	; 0x24
 8013e28:	2320      	movs	r3, #32
 8013e2a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8013e2e:	f8cd 800c 	str.w	r8, [sp, #12]
 8013e32:	2330      	movs	r3, #48	; 0x30
 8013e34:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8013fe8 <_vfiprintf_r+0x220>
 8013e38:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8013e3c:	f04f 0901 	mov.w	r9, #1
 8013e40:	4623      	mov	r3, r4
 8013e42:	469a      	mov	sl, r3
 8013e44:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013e48:	b10a      	cbz	r2, 8013e4e <_vfiprintf_r+0x86>
 8013e4a:	2a25      	cmp	r2, #37	; 0x25
 8013e4c:	d1f9      	bne.n	8013e42 <_vfiprintf_r+0x7a>
 8013e4e:	ebba 0b04 	subs.w	fp, sl, r4
 8013e52:	d00b      	beq.n	8013e6c <_vfiprintf_r+0xa4>
 8013e54:	465b      	mov	r3, fp
 8013e56:	4622      	mov	r2, r4
 8013e58:	4629      	mov	r1, r5
 8013e5a:	4630      	mov	r0, r6
 8013e5c:	f7ff ffa1 	bl	8013da2 <__sfputs_r>
 8013e60:	3001      	adds	r0, #1
 8013e62:	f000 80a9 	beq.w	8013fb8 <_vfiprintf_r+0x1f0>
 8013e66:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013e68:	445a      	add	r2, fp
 8013e6a:	9209      	str	r2, [sp, #36]	; 0x24
 8013e6c:	f89a 3000 	ldrb.w	r3, [sl]
 8013e70:	2b00      	cmp	r3, #0
 8013e72:	f000 80a1 	beq.w	8013fb8 <_vfiprintf_r+0x1f0>
 8013e76:	2300      	movs	r3, #0
 8013e78:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8013e7c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013e80:	f10a 0a01 	add.w	sl, sl, #1
 8013e84:	9304      	str	r3, [sp, #16]
 8013e86:	9307      	str	r3, [sp, #28]
 8013e88:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8013e8c:	931a      	str	r3, [sp, #104]	; 0x68
 8013e8e:	4654      	mov	r4, sl
 8013e90:	2205      	movs	r2, #5
 8013e92:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013e96:	4854      	ldr	r0, [pc, #336]	; (8013fe8 <_vfiprintf_r+0x220>)
 8013e98:	f7ec f9c2 	bl	8000220 <memchr>
 8013e9c:	9a04      	ldr	r2, [sp, #16]
 8013e9e:	b9d8      	cbnz	r0, 8013ed8 <_vfiprintf_r+0x110>
 8013ea0:	06d1      	lsls	r1, r2, #27
 8013ea2:	bf44      	itt	mi
 8013ea4:	2320      	movmi	r3, #32
 8013ea6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013eaa:	0713      	lsls	r3, r2, #28
 8013eac:	bf44      	itt	mi
 8013eae:	232b      	movmi	r3, #43	; 0x2b
 8013eb0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013eb4:	f89a 3000 	ldrb.w	r3, [sl]
 8013eb8:	2b2a      	cmp	r3, #42	; 0x2a
 8013eba:	d015      	beq.n	8013ee8 <_vfiprintf_r+0x120>
 8013ebc:	9a07      	ldr	r2, [sp, #28]
 8013ebe:	4654      	mov	r4, sl
 8013ec0:	2000      	movs	r0, #0
 8013ec2:	f04f 0c0a 	mov.w	ip, #10
 8013ec6:	4621      	mov	r1, r4
 8013ec8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013ecc:	3b30      	subs	r3, #48	; 0x30
 8013ece:	2b09      	cmp	r3, #9
 8013ed0:	d94d      	bls.n	8013f6e <_vfiprintf_r+0x1a6>
 8013ed2:	b1b0      	cbz	r0, 8013f02 <_vfiprintf_r+0x13a>
 8013ed4:	9207      	str	r2, [sp, #28]
 8013ed6:	e014      	b.n	8013f02 <_vfiprintf_r+0x13a>
 8013ed8:	eba0 0308 	sub.w	r3, r0, r8
 8013edc:	fa09 f303 	lsl.w	r3, r9, r3
 8013ee0:	4313      	orrs	r3, r2
 8013ee2:	9304      	str	r3, [sp, #16]
 8013ee4:	46a2      	mov	sl, r4
 8013ee6:	e7d2      	b.n	8013e8e <_vfiprintf_r+0xc6>
 8013ee8:	9b03      	ldr	r3, [sp, #12]
 8013eea:	1d19      	adds	r1, r3, #4
 8013eec:	681b      	ldr	r3, [r3, #0]
 8013eee:	9103      	str	r1, [sp, #12]
 8013ef0:	2b00      	cmp	r3, #0
 8013ef2:	bfbb      	ittet	lt
 8013ef4:	425b      	neglt	r3, r3
 8013ef6:	f042 0202 	orrlt.w	r2, r2, #2
 8013efa:	9307      	strge	r3, [sp, #28]
 8013efc:	9307      	strlt	r3, [sp, #28]
 8013efe:	bfb8      	it	lt
 8013f00:	9204      	strlt	r2, [sp, #16]
 8013f02:	7823      	ldrb	r3, [r4, #0]
 8013f04:	2b2e      	cmp	r3, #46	; 0x2e
 8013f06:	d10c      	bne.n	8013f22 <_vfiprintf_r+0x15a>
 8013f08:	7863      	ldrb	r3, [r4, #1]
 8013f0a:	2b2a      	cmp	r3, #42	; 0x2a
 8013f0c:	d134      	bne.n	8013f78 <_vfiprintf_r+0x1b0>
 8013f0e:	9b03      	ldr	r3, [sp, #12]
 8013f10:	1d1a      	adds	r2, r3, #4
 8013f12:	681b      	ldr	r3, [r3, #0]
 8013f14:	9203      	str	r2, [sp, #12]
 8013f16:	2b00      	cmp	r3, #0
 8013f18:	bfb8      	it	lt
 8013f1a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8013f1e:	3402      	adds	r4, #2
 8013f20:	9305      	str	r3, [sp, #20]
 8013f22:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8013ff8 <_vfiprintf_r+0x230>
 8013f26:	7821      	ldrb	r1, [r4, #0]
 8013f28:	2203      	movs	r2, #3
 8013f2a:	4650      	mov	r0, sl
 8013f2c:	f7ec f978 	bl	8000220 <memchr>
 8013f30:	b138      	cbz	r0, 8013f42 <_vfiprintf_r+0x17a>
 8013f32:	9b04      	ldr	r3, [sp, #16]
 8013f34:	eba0 000a 	sub.w	r0, r0, sl
 8013f38:	2240      	movs	r2, #64	; 0x40
 8013f3a:	4082      	lsls	r2, r0
 8013f3c:	4313      	orrs	r3, r2
 8013f3e:	3401      	adds	r4, #1
 8013f40:	9304      	str	r3, [sp, #16]
 8013f42:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013f46:	4829      	ldr	r0, [pc, #164]	; (8013fec <_vfiprintf_r+0x224>)
 8013f48:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8013f4c:	2206      	movs	r2, #6
 8013f4e:	f7ec f967 	bl	8000220 <memchr>
 8013f52:	2800      	cmp	r0, #0
 8013f54:	d03f      	beq.n	8013fd6 <_vfiprintf_r+0x20e>
 8013f56:	4b26      	ldr	r3, [pc, #152]	; (8013ff0 <_vfiprintf_r+0x228>)
 8013f58:	bb1b      	cbnz	r3, 8013fa2 <_vfiprintf_r+0x1da>
 8013f5a:	9b03      	ldr	r3, [sp, #12]
 8013f5c:	3307      	adds	r3, #7
 8013f5e:	f023 0307 	bic.w	r3, r3, #7
 8013f62:	3308      	adds	r3, #8
 8013f64:	9303      	str	r3, [sp, #12]
 8013f66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013f68:	443b      	add	r3, r7
 8013f6a:	9309      	str	r3, [sp, #36]	; 0x24
 8013f6c:	e768      	b.n	8013e40 <_vfiprintf_r+0x78>
 8013f6e:	fb0c 3202 	mla	r2, ip, r2, r3
 8013f72:	460c      	mov	r4, r1
 8013f74:	2001      	movs	r0, #1
 8013f76:	e7a6      	b.n	8013ec6 <_vfiprintf_r+0xfe>
 8013f78:	2300      	movs	r3, #0
 8013f7a:	3401      	adds	r4, #1
 8013f7c:	9305      	str	r3, [sp, #20]
 8013f7e:	4619      	mov	r1, r3
 8013f80:	f04f 0c0a 	mov.w	ip, #10
 8013f84:	4620      	mov	r0, r4
 8013f86:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013f8a:	3a30      	subs	r2, #48	; 0x30
 8013f8c:	2a09      	cmp	r2, #9
 8013f8e:	d903      	bls.n	8013f98 <_vfiprintf_r+0x1d0>
 8013f90:	2b00      	cmp	r3, #0
 8013f92:	d0c6      	beq.n	8013f22 <_vfiprintf_r+0x15a>
 8013f94:	9105      	str	r1, [sp, #20]
 8013f96:	e7c4      	b.n	8013f22 <_vfiprintf_r+0x15a>
 8013f98:	fb0c 2101 	mla	r1, ip, r1, r2
 8013f9c:	4604      	mov	r4, r0
 8013f9e:	2301      	movs	r3, #1
 8013fa0:	e7f0      	b.n	8013f84 <_vfiprintf_r+0x1bc>
 8013fa2:	ab03      	add	r3, sp, #12
 8013fa4:	9300      	str	r3, [sp, #0]
 8013fa6:	462a      	mov	r2, r5
 8013fa8:	4b12      	ldr	r3, [pc, #72]	; (8013ff4 <_vfiprintf_r+0x22c>)
 8013faa:	a904      	add	r1, sp, #16
 8013fac:	4630      	mov	r0, r6
 8013fae:	f7fd fd4b 	bl	8011a48 <_printf_float>
 8013fb2:	4607      	mov	r7, r0
 8013fb4:	1c78      	adds	r0, r7, #1
 8013fb6:	d1d6      	bne.n	8013f66 <_vfiprintf_r+0x19e>
 8013fb8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013fba:	07d9      	lsls	r1, r3, #31
 8013fbc:	d405      	bmi.n	8013fca <_vfiprintf_r+0x202>
 8013fbe:	89ab      	ldrh	r3, [r5, #12]
 8013fc0:	059a      	lsls	r2, r3, #22
 8013fc2:	d402      	bmi.n	8013fca <_vfiprintf_r+0x202>
 8013fc4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013fc6:	f7fe fbce 	bl	8012766 <__retarget_lock_release_recursive>
 8013fca:	89ab      	ldrh	r3, [r5, #12]
 8013fcc:	065b      	lsls	r3, r3, #25
 8013fce:	f53f af1d 	bmi.w	8013e0c <_vfiprintf_r+0x44>
 8013fd2:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013fd4:	e71c      	b.n	8013e10 <_vfiprintf_r+0x48>
 8013fd6:	ab03      	add	r3, sp, #12
 8013fd8:	9300      	str	r3, [sp, #0]
 8013fda:	462a      	mov	r2, r5
 8013fdc:	4b05      	ldr	r3, [pc, #20]	; (8013ff4 <_vfiprintf_r+0x22c>)
 8013fde:	a904      	add	r1, sp, #16
 8013fe0:	4630      	mov	r0, r6
 8013fe2:	f7fd ffd5 	bl	8011f90 <_printf_i>
 8013fe6:	e7e4      	b.n	8013fb2 <_vfiprintf_r+0x1ea>
 8013fe8:	08014a1c 	.word	0x08014a1c
 8013fec:	08014a26 	.word	0x08014a26
 8013ff0:	08011a49 	.word	0x08011a49
 8013ff4:	08013da3 	.word	0x08013da3
 8013ff8:	08014a22 	.word	0x08014a22

08013ffc <__sflush_r>:
 8013ffc:	898a      	ldrh	r2, [r1, #12]
 8013ffe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014002:	4605      	mov	r5, r0
 8014004:	0710      	lsls	r0, r2, #28
 8014006:	460c      	mov	r4, r1
 8014008:	d458      	bmi.n	80140bc <__sflush_r+0xc0>
 801400a:	684b      	ldr	r3, [r1, #4]
 801400c:	2b00      	cmp	r3, #0
 801400e:	dc05      	bgt.n	801401c <__sflush_r+0x20>
 8014010:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8014012:	2b00      	cmp	r3, #0
 8014014:	dc02      	bgt.n	801401c <__sflush_r+0x20>
 8014016:	2000      	movs	r0, #0
 8014018:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801401c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801401e:	2e00      	cmp	r6, #0
 8014020:	d0f9      	beq.n	8014016 <__sflush_r+0x1a>
 8014022:	2300      	movs	r3, #0
 8014024:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8014028:	682f      	ldr	r7, [r5, #0]
 801402a:	6a21      	ldr	r1, [r4, #32]
 801402c:	602b      	str	r3, [r5, #0]
 801402e:	d032      	beq.n	8014096 <__sflush_r+0x9a>
 8014030:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8014032:	89a3      	ldrh	r3, [r4, #12]
 8014034:	075a      	lsls	r2, r3, #29
 8014036:	d505      	bpl.n	8014044 <__sflush_r+0x48>
 8014038:	6863      	ldr	r3, [r4, #4]
 801403a:	1ac0      	subs	r0, r0, r3
 801403c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801403e:	b10b      	cbz	r3, 8014044 <__sflush_r+0x48>
 8014040:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8014042:	1ac0      	subs	r0, r0, r3
 8014044:	2300      	movs	r3, #0
 8014046:	4602      	mov	r2, r0
 8014048:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801404a:	6a21      	ldr	r1, [r4, #32]
 801404c:	4628      	mov	r0, r5
 801404e:	47b0      	blx	r6
 8014050:	1c43      	adds	r3, r0, #1
 8014052:	89a3      	ldrh	r3, [r4, #12]
 8014054:	d106      	bne.n	8014064 <__sflush_r+0x68>
 8014056:	6829      	ldr	r1, [r5, #0]
 8014058:	291d      	cmp	r1, #29
 801405a:	d82b      	bhi.n	80140b4 <__sflush_r+0xb8>
 801405c:	4a29      	ldr	r2, [pc, #164]	; (8014104 <__sflush_r+0x108>)
 801405e:	410a      	asrs	r2, r1
 8014060:	07d6      	lsls	r6, r2, #31
 8014062:	d427      	bmi.n	80140b4 <__sflush_r+0xb8>
 8014064:	2200      	movs	r2, #0
 8014066:	6062      	str	r2, [r4, #4]
 8014068:	04d9      	lsls	r1, r3, #19
 801406a:	6922      	ldr	r2, [r4, #16]
 801406c:	6022      	str	r2, [r4, #0]
 801406e:	d504      	bpl.n	801407a <__sflush_r+0x7e>
 8014070:	1c42      	adds	r2, r0, #1
 8014072:	d101      	bne.n	8014078 <__sflush_r+0x7c>
 8014074:	682b      	ldr	r3, [r5, #0]
 8014076:	b903      	cbnz	r3, 801407a <__sflush_r+0x7e>
 8014078:	6560      	str	r0, [r4, #84]	; 0x54
 801407a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801407c:	602f      	str	r7, [r5, #0]
 801407e:	2900      	cmp	r1, #0
 8014080:	d0c9      	beq.n	8014016 <__sflush_r+0x1a>
 8014082:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014086:	4299      	cmp	r1, r3
 8014088:	d002      	beq.n	8014090 <__sflush_r+0x94>
 801408a:	4628      	mov	r0, r5
 801408c:	f7ff f9f6 	bl	801347c <_free_r>
 8014090:	2000      	movs	r0, #0
 8014092:	6360      	str	r0, [r4, #52]	; 0x34
 8014094:	e7c0      	b.n	8014018 <__sflush_r+0x1c>
 8014096:	2301      	movs	r3, #1
 8014098:	4628      	mov	r0, r5
 801409a:	47b0      	blx	r6
 801409c:	1c41      	adds	r1, r0, #1
 801409e:	d1c8      	bne.n	8014032 <__sflush_r+0x36>
 80140a0:	682b      	ldr	r3, [r5, #0]
 80140a2:	2b00      	cmp	r3, #0
 80140a4:	d0c5      	beq.n	8014032 <__sflush_r+0x36>
 80140a6:	2b1d      	cmp	r3, #29
 80140a8:	d001      	beq.n	80140ae <__sflush_r+0xb2>
 80140aa:	2b16      	cmp	r3, #22
 80140ac:	d101      	bne.n	80140b2 <__sflush_r+0xb6>
 80140ae:	602f      	str	r7, [r5, #0]
 80140b0:	e7b1      	b.n	8014016 <__sflush_r+0x1a>
 80140b2:	89a3      	ldrh	r3, [r4, #12]
 80140b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80140b8:	81a3      	strh	r3, [r4, #12]
 80140ba:	e7ad      	b.n	8014018 <__sflush_r+0x1c>
 80140bc:	690f      	ldr	r7, [r1, #16]
 80140be:	2f00      	cmp	r7, #0
 80140c0:	d0a9      	beq.n	8014016 <__sflush_r+0x1a>
 80140c2:	0793      	lsls	r3, r2, #30
 80140c4:	680e      	ldr	r6, [r1, #0]
 80140c6:	bf08      	it	eq
 80140c8:	694b      	ldreq	r3, [r1, #20]
 80140ca:	600f      	str	r7, [r1, #0]
 80140cc:	bf18      	it	ne
 80140ce:	2300      	movne	r3, #0
 80140d0:	eba6 0807 	sub.w	r8, r6, r7
 80140d4:	608b      	str	r3, [r1, #8]
 80140d6:	f1b8 0f00 	cmp.w	r8, #0
 80140da:	dd9c      	ble.n	8014016 <__sflush_r+0x1a>
 80140dc:	6a21      	ldr	r1, [r4, #32]
 80140de:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80140e0:	4643      	mov	r3, r8
 80140e2:	463a      	mov	r2, r7
 80140e4:	4628      	mov	r0, r5
 80140e6:	47b0      	blx	r6
 80140e8:	2800      	cmp	r0, #0
 80140ea:	dc06      	bgt.n	80140fa <__sflush_r+0xfe>
 80140ec:	89a3      	ldrh	r3, [r4, #12]
 80140ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80140f2:	81a3      	strh	r3, [r4, #12]
 80140f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80140f8:	e78e      	b.n	8014018 <__sflush_r+0x1c>
 80140fa:	4407      	add	r7, r0
 80140fc:	eba8 0800 	sub.w	r8, r8, r0
 8014100:	e7e9      	b.n	80140d6 <__sflush_r+0xda>
 8014102:	bf00      	nop
 8014104:	dfbffffe 	.word	0xdfbffffe

08014108 <_fflush_r>:
 8014108:	b538      	push	{r3, r4, r5, lr}
 801410a:	690b      	ldr	r3, [r1, #16]
 801410c:	4605      	mov	r5, r0
 801410e:	460c      	mov	r4, r1
 8014110:	b913      	cbnz	r3, 8014118 <_fflush_r+0x10>
 8014112:	2500      	movs	r5, #0
 8014114:	4628      	mov	r0, r5
 8014116:	bd38      	pop	{r3, r4, r5, pc}
 8014118:	b118      	cbz	r0, 8014122 <_fflush_r+0x1a>
 801411a:	6a03      	ldr	r3, [r0, #32]
 801411c:	b90b      	cbnz	r3, 8014122 <_fflush_r+0x1a>
 801411e:	f7fe f8d3 	bl	80122c8 <__sinit>
 8014122:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014126:	2b00      	cmp	r3, #0
 8014128:	d0f3      	beq.n	8014112 <_fflush_r+0xa>
 801412a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801412c:	07d0      	lsls	r0, r2, #31
 801412e:	d404      	bmi.n	801413a <_fflush_r+0x32>
 8014130:	0599      	lsls	r1, r3, #22
 8014132:	d402      	bmi.n	801413a <_fflush_r+0x32>
 8014134:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014136:	f7fe fb15 	bl	8012764 <__retarget_lock_acquire_recursive>
 801413a:	4628      	mov	r0, r5
 801413c:	4621      	mov	r1, r4
 801413e:	f7ff ff5d 	bl	8013ffc <__sflush_r>
 8014142:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8014144:	07da      	lsls	r2, r3, #31
 8014146:	4605      	mov	r5, r0
 8014148:	d4e4      	bmi.n	8014114 <_fflush_r+0xc>
 801414a:	89a3      	ldrh	r3, [r4, #12]
 801414c:	059b      	lsls	r3, r3, #22
 801414e:	d4e1      	bmi.n	8014114 <_fflush_r+0xc>
 8014150:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014152:	f7fe fb08 	bl	8012766 <__retarget_lock_release_recursive>
 8014156:	e7dd      	b.n	8014114 <_fflush_r+0xc>

08014158 <__swhatbuf_r>:
 8014158:	b570      	push	{r4, r5, r6, lr}
 801415a:	460c      	mov	r4, r1
 801415c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014160:	2900      	cmp	r1, #0
 8014162:	b096      	sub	sp, #88	; 0x58
 8014164:	4615      	mov	r5, r2
 8014166:	461e      	mov	r6, r3
 8014168:	da0d      	bge.n	8014186 <__swhatbuf_r+0x2e>
 801416a:	89a3      	ldrh	r3, [r4, #12]
 801416c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8014170:	f04f 0100 	mov.w	r1, #0
 8014174:	bf0c      	ite	eq
 8014176:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 801417a:	2340      	movne	r3, #64	; 0x40
 801417c:	2000      	movs	r0, #0
 801417e:	6031      	str	r1, [r6, #0]
 8014180:	602b      	str	r3, [r5, #0]
 8014182:	b016      	add	sp, #88	; 0x58
 8014184:	bd70      	pop	{r4, r5, r6, pc}
 8014186:	466a      	mov	r2, sp
 8014188:	f000 f848 	bl	801421c <_fstat_r>
 801418c:	2800      	cmp	r0, #0
 801418e:	dbec      	blt.n	801416a <__swhatbuf_r+0x12>
 8014190:	9901      	ldr	r1, [sp, #4]
 8014192:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8014196:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 801419a:	4259      	negs	r1, r3
 801419c:	4159      	adcs	r1, r3
 801419e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80141a2:	e7eb      	b.n	801417c <__swhatbuf_r+0x24>

080141a4 <__smakebuf_r>:
 80141a4:	898b      	ldrh	r3, [r1, #12]
 80141a6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80141a8:	079d      	lsls	r5, r3, #30
 80141aa:	4606      	mov	r6, r0
 80141ac:	460c      	mov	r4, r1
 80141ae:	d507      	bpl.n	80141c0 <__smakebuf_r+0x1c>
 80141b0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80141b4:	6023      	str	r3, [r4, #0]
 80141b6:	6123      	str	r3, [r4, #16]
 80141b8:	2301      	movs	r3, #1
 80141ba:	6163      	str	r3, [r4, #20]
 80141bc:	b002      	add	sp, #8
 80141be:	bd70      	pop	{r4, r5, r6, pc}
 80141c0:	ab01      	add	r3, sp, #4
 80141c2:	466a      	mov	r2, sp
 80141c4:	f7ff ffc8 	bl	8014158 <__swhatbuf_r>
 80141c8:	9900      	ldr	r1, [sp, #0]
 80141ca:	4605      	mov	r5, r0
 80141cc:	4630      	mov	r0, r6
 80141ce:	f7ff f9c9 	bl	8013564 <_malloc_r>
 80141d2:	b948      	cbnz	r0, 80141e8 <__smakebuf_r+0x44>
 80141d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80141d8:	059a      	lsls	r2, r3, #22
 80141da:	d4ef      	bmi.n	80141bc <__smakebuf_r+0x18>
 80141dc:	f023 0303 	bic.w	r3, r3, #3
 80141e0:	f043 0302 	orr.w	r3, r3, #2
 80141e4:	81a3      	strh	r3, [r4, #12]
 80141e6:	e7e3      	b.n	80141b0 <__smakebuf_r+0xc>
 80141e8:	89a3      	ldrh	r3, [r4, #12]
 80141ea:	6020      	str	r0, [r4, #0]
 80141ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80141f0:	81a3      	strh	r3, [r4, #12]
 80141f2:	9b00      	ldr	r3, [sp, #0]
 80141f4:	6163      	str	r3, [r4, #20]
 80141f6:	9b01      	ldr	r3, [sp, #4]
 80141f8:	6120      	str	r0, [r4, #16]
 80141fa:	b15b      	cbz	r3, 8014214 <__smakebuf_r+0x70>
 80141fc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014200:	4630      	mov	r0, r6
 8014202:	f000 f81d 	bl	8014240 <_isatty_r>
 8014206:	b128      	cbz	r0, 8014214 <__smakebuf_r+0x70>
 8014208:	89a3      	ldrh	r3, [r4, #12]
 801420a:	f023 0303 	bic.w	r3, r3, #3
 801420e:	f043 0301 	orr.w	r3, r3, #1
 8014212:	81a3      	strh	r3, [r4, #12]
 8014214:	89a3      	ldrh	r3, [r4, #12]
 8014216:	431d      	orrs	r5, r3
 8014218:	81a5      	strh	r5, [r4, #12]
 801421a:	e7cf      	b.n	80141bc <__smakebuf_r+0x18>

0801421c <_fstat_r>:
 801421c:	b538      	push	{r3, r4, r5, lr}
 801421e:	4d07      	ldr	r5, [pc, #28]	; (801423c <_fstat_r+0x20>)
 8014220:	2300      	movs	r3, #0
 8014222:	4604      	mov	r4, r0
 8014224:	4608      	mov	r0, r1
 8014226:	4611      	mov	r1, r2
 8014228:	602b      	str	r3, [r5, #0]
 801422a:	f7ed fec0 	bl	8001fae <_fstat>
 801422e:	1c43      	adds	r3, r0, #1
 8014230:	d102      	bne.n	8014238 <_fstat_r+0x1c>
 8014232:	682b      	ldr	r3, [r5, #0]
 8014234:	b103      	cbz	r3, 8014238 <_fstat_r+0x1c>
 8014236:	6023      	str	r3, [r4, #0]
 8014238:	bd38      	pop	{r3, r4, r5, pc}
 801423a:	bf00      	nop
 801423c:	200067a0 	.word	0x200067a0

08014240 <_isatty_r>:
 8014240:	b538      	push	{r3, r4, r5, lr}
 8014242:	4d06      	ldr	r5, [pc, #24]	; (801425c <_isatty_r+0x1c>)
 8014244:	2300      	movs	r3, #0
 8014246:	4604      	mov	r4, r0
 8014248:	4608      	mov	r0, r1
 801424a:	602b      	str	r3, [r5, #0]
 801424c:	f7ed febf 	bl	8001fce <_isatty>
 8014250:	1c43      	adds	r3, r0, #1
 8014252:	d102      	bne.n	801425a <_isatty_r+0x1a>
 8014254:	682b      	ldr	r3, [r5, #0]
 8014256:	b103      	cbz	r3, 801425a <_isatty_r+0x1a>
 8014258:	6023      	str	r3, [r4, #0]
 801425a:	bd38      	pop	{r3, r4, r5, pc}
 801425c:	200067a0 	.word	0x200067a0

08014260 <_sbrk_r>:
 8014260:	b538      	push	{r3, r4, r5, lr}
 8014262:	4d06      	ldr	r5, [pc, #24]	; (801427c <_sbrk_r+0x1c>)
 8014264:	2300      	movs	r3, #0
 8014266:	4604      	mov	r4, r0
 8014268:	4608      	mov	r0, r1
 801426a:	602b      	str	r3, [r5, #0]
 801426c:	f7ed fec8 	bl	8002000 <_sbrk>
 8014270:	1c43      	adds	r3, r0, #1
 8014272:	d102      	bne.n	801427a <_sbrk_r+0x1a>
 8014274:	682b      	ldr	r3, [r5, #0]
 8014276:	b103      	cbz	r3, 801427a <_sbrk_r+0x1a>
 8014278:	6023      	str	r3, [r4, #0]
 801427a:	bd38      	pop	{r3, r4, r5, pc}
 801427c:	200067a0 	.word	0x200067a0

08014280 <__assert_func>:
 8014280:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8014282:	4614      	mov	r4, r2
 8014284:	461a      	mov	r2, r3
 8014286:	4b09      	ldr	r3, [pc, #36]	; (80142ac <__assert_func+0x2c>)
 8014288:	681b      	ldr	r3, [r3, #0]
 801428a:	4605      	mov	r5, r0
 801428c:	68d8      	ldr	r0, [r3, #12]
 801428e:	b14c      	cbz	r4, 80142a4 <__assert_func+0x24>
 8014290:	4b07      	ldr	r3, [pc, #28]	; (80142b0 <__assert_func+0x30>)
 8014292:	9100      	str	r1, [sp, #0]
 8014294:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8014298:	4906      	ldr	r1, [pc, #24]	; (80142b4 <__assert_func+0x34>)
 801429a:	462b      	mov	r3, r5
 801429c:	f000 f844 	bl	8014328 <fiprintf>
 80142a0:	f000 f854 	bl	801434c <abort>
 80142a4:	4b04      	ldr	r3, [pc, #16]	; (80142b8 <__assert_func+0x38>)
 80142a6:	461c      	mov	r4, r3
 80142a8:	e7f3      	b.n	8014292 <__assert_func+0x12>
 80142aa:	bf00      	nop
 80142ac:	200001e0 	.word	0x200001e0
 80142b0:	08014a37 	.word	0x08014a37
 80142b4:	08014a44 	.word	0x08014a44
 80142b8:	08014a72 	.word	0x08014a72

080142bc <_calloc_r>:
 80142bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80142be:	fba1 2402 	umull	r2, r4, r1, r2
 80142c2:	b94c      	cbnz	r4, 80142d8 <_calloc_r+0x1c>
 80142c4:	4611      	mov	r1, r2
 80142c6:	9201      	str	r2, [sp, #4]
 80142c8:	f7ff f94c 	bl	8013564 <_malloc_r>
 80142cc:	9a01      	ldr	r2, [sp, #4]
 80142ce:	4605      	mov	r5, r0
 80142d0:	b930      	cbnz	r0, 80142e0 <_calloc_r+0x24>
 80142d2:	4628      	mov	r0, r5
 80142d4:	b003      	add	sp, #12
 80142d6:	bd30      	pop	{r4, r5, pc}
 80142d8:	220c      	movs	r2, #12
 80142da:	6002      	str	r2, [r0, #0]
 80142dc:	2500      	movs	r5, #0
 80142de:	e7f8      	b.n	80142d2 <_calloc_r+0x16>
 80142e0:	4621      	mov	r1, r4
 80142e2:	f7fe f96d 	bl	80125c0 <memset>
 80142e6:	e7f4      	b.n	80142d2 <_calloc_r+0x16>

080142e8 <__ascii_mbtowc>:
 80142e8:	b082      	sub	sp, #8
 80142ea:	b901      	cbnz	r1, 80142ee <__ascii_mbtowc+0x6>
 80142ec:	a901      	add	r1, sp, #4
 80142ee:	b142      	cbz	r2, 8014302 <__ascii_mbtowc+0x1a>
 80142f0:	b14b      	cbz	r3, 8014306 <__ascii_mbtowc+0x1e>
 80142f2:	7813      	ldrb	r3, [r2, #0]
 80142f4:	600b      	str	r3, [r1, #0]
 80142f6:	7812      	ldrb	r2, [r2, #0]
 80142f8:	1e10      	subs	r0, r2, #0
 80142fa:	bf18      	it	ne
 80142fc:	2001      	movne	r0, #1
 80142fe:	b002      	add	sp, #8
 8014300:	4770      	bx	lr
 8014302:	4610      	mov	r0, r2
 8014304:	e7fb      	b.n	80142fe <__ascii_mbtowc+0x16>
 8014306:	f06f 0001 	mvn.w	r0, #1
 801430a:	e7f8      	b.n	80142fe <__ascii_mbtowc+0x16>

0801430c <__ascii_wctomb>:
 801430c:	b149      	cbz	r1, 8014322 <__ascii_wctomb+0x16>
 801430e:	2aff      	cmp	r2, #255	; 0xff
 8014310:	bf85      	ittet	hi
 8014312:	238a      	movhi	r3, #138	; 0x8a
 8014314:	6003      	strhi	r3, [r0, #0]
 8014316:	700a      	strbls	r2, [r1, #0]
 8014318:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 801431c:	bf98      	it	ls
 801431e:	2001      	movls	r0, #1
 8014320:	4770      	bx	lr
 8014322:	4608      	mov	r0, r1
 8014324:	4770      	bx	lr
	...

08014328 <fiprintf>:
 8014328:	b40e      	push	{r1, r2, r3}
 801432a:	b503      	push	{r0, r1, lr}
 801432c:	4601      	mov	r1, r0
 801432e:	ab03      	add	r3, sp, #12
 8014330:	4805      	ldr	r0, [pc, #20]	; (8014348 <fiprintf+0x20>)
 8014332:	f853 2b04 	ldr.w	r2, [r3], #4
 8014336:	6800      	ldr	r0, [r0, #0]
 8014338:	9301      	str	r3, [sp, #4]
 801433a:	f7ff fd45 	bl	8013dc8 <_vfiprintf_r>
 801433e:	b002      	add	sp, #8
 8014340:	f85d eb04 	ldr.w	lr, [sp], #4
 8014344:	b003      	add	sp, #12
 8014346:	4770      	bx	lr
 8014348:	200001e0 	.word	0x200001e0

0801434c <abort>:
 801434c:	b508      	push	{r3, lr}
 801434e:	2006      	movs	r0, #6
 8014350:	f000 f82c 	bl	80143ac <raise>
 8014354:	2001      	movs	r0, #1
 8014356:	f7ed fddb 	bl	8001f10 <_exit>

0801435a <_raise_r>:
 801435a:	291f      	cmp	r1, #31
 801435c:	b538      	push	{r3, r4, r5, lr}
 801435e:	4604      	mov	r4, r0
 8014360:	460d      	mov	r5, r1
 8014362:	d904      	bls.n	801436e <_raise_r+0x14>
 8014364:	2316      	movs	r3, #22
 8014366:	6003      	str	r3, [r0, #0]
 8014368:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801436c:	bd38      	pop	{r3, r4, r5, pc}
 801436e:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8014370:	b112      	cbz	r2, 8014378 <_raise_r+0x1e>
 8014372:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8014376:	b94b      	cbnz	r3, 801438c <_raise_r+0x32>
 8014378:	4620      	mov	r0, r4
 801437a:	f000 f831 	bl	80143e0 <_getpid_r>
 801437e:	462a      	mov	r2, r5
 8014380:	4601      	mov	r1, r0
 8014382:	4620      	mov	r0, r4
 8014384:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014388:	f000 b818 	b.w	80143bc <_kill_r>
 801438c:	2b01      	cmp	r3, #1
 801438e:	d00a      	beq.n	80143a6 <_raise_r+0x4c>
 8014390:	1c59      	adds	r1, r3, #1
 8014392:	d103      	bne.n	801439c <_raise_r+0x42>
 8014394:	2316      	movs	r3, #22
 8014396:	6003      	str	r3, [r0, #0]
 8014398:	2001      	movs	r0, #1
 801439a:	e7e7      	b.n	801436c <_raise_r+0x12>
 801439c:	2400      	movs	r4, #0
 801439e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80143a2:	4628      	mov	r0, r5
 80143a4:	4798      	blx	r3
 80143a6:	2000      	movs	r0, #0
 80143a8:	e7e0      	b.n	801436c <_raise_r+0x12>
	...

080143ac <raise>:
 80143ac:	4b02      	ldr	r3, [pc, #8]	; (80143b8 <raise+0xc>)
 80143ae:	4601      	mov	r1, r0
 80143b0:	6818      	ldr	r0, [r3, #0]
 80143b2:	f7ff bfd2 	b.w	801435a <_raise_r>
 80143b6:	bf00      	nop
 80143b8:	200001e0 	.word	0x200001e0

080143bc <_kill_r>:
 80143bc:	b538      	push	{r3, r4, r5, lr}
 80143be:	4d07      	ldr	r5, [pc, #28]	; (80143dc <_kill_r+0x20>)
 80143c0:	2300      	movs	r3, #0
 80143c2:	4604      	mov	r4, r0
 80143c4:	4608      	mov	r0, r1
 80143c6:	4611      	mov	r1, r2
 80143c8:	602b      	str	r3, [r5, #0]
 80143ca:	f7ed fd91 	bl	8001ef0 <_kill>
 80143ce:	1c43      	adds	r3, r0, #1
 80143d0:	d102      	bne.n	80143d8 <_kill_r+0x1c>
 80143d2:	682b      	ldr	r3, [r5, #0]
 80143d4:	b103      	cbz	r3, 80143d8 <_kill_r+0x1c>
 80143d6:	6023      	str	r3, [r4, #0]
 80143d8:	bd38      	pop	{r3, r4, r5, pc}
 80143da:	bf00      	nop
 80143dc:	200067a0 	.word	0x200067a0

080143e0 <_getpid_r>:
 80143e0:	f7ed bd7e 	b.w	8001ee0 <_getpid>

080143e4 <_init>:
 80143e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80143e6:	bf00      	nop
 80143e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80143ea:	bc08      	pop	{r3}
 80143ec:	469e      	mov	lr, r3
 80143ee:	4770      	bx	lr

080143f0 <_fini>:
 80143f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80143f2:	bf00      	nop
 80143f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80143f6:	bc08      	pop	{r3}
 80143f8:	469e      	mov	lr, r3
 80143fa:	4770      	bx	lr
